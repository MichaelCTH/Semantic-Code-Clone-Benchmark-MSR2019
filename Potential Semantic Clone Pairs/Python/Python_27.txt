$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_33508835_1_11
33508034_37504522_3_17
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_33508835_1_11
33508034_39322207_1_15
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_33508835_1_11
33508034_41326614_1_9
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_33508835_1_11
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_34109057_1_10
33508034_35417009_1_10
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_34109057_1_10
33508034_37338843_1_9
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_34109057_1_10
33508034_37504522_3_17
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_34109057_1_10
33508034_39322207_1_15
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_34109057_1_10
33508034_41326614_1_9
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_34109057_1_10
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_37504522_3_17
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_37757386_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_39275744_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        print (3 * + number + 1)
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_39322207_1_15
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_41668405_1_6
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_41875977_1_5
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_35417009_1_10
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            print (number)
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            print (number)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_37504522_3_17
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_37757386_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_39275744_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        print (3 * + number + 1)
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_39322207_1_15
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_41668405_1_6
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_41875977_1_5
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37338843_1_9
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            print (number / / 2)
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            print (number * 3 + 1)
            number = number * 3 + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_37757386_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_39275744_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        print (3 * + number + 1)
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_39322207_1_15
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_41326614_1_9
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_41668405_1_6
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_41875977_1_5
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37504522_3_17
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        result = number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        result = 3 * number + 1
    DEDENT
    while result == 1 :
    INDENT
        print (result)
        sys.exit()
    DEDENT
    while result ! = 1 :
    INDENT
        print (result)
        number = result
        return collatz(number)
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37757386_1_7
33508034_39322207_1_15
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37757386_1_7
33508034_41326614_1_9
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37757386_1_7
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_37757386_1_7
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39275744_1_7
33508034_39322207_1_15
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        print (3 * + number + 1)
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39275744_1_7
33508034_41326614_1_9
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        print (3 * + number + 1)
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39275744_1_7
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        print (3 * + number + 1)
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39275744_1_7
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        print (3 * + number + 1)
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39322207_1_15
33508034_41326614_1_9
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39322207_1_15
33508034_41668405_1_6
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39322207_1_15
33508034_41875977_1_5
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39322207_1_15
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39322207_1_15
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_39322207_1_15
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number == 1 :
    INDENT
        print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
        number = 3 * number + 1
    DEDENT
    else :
    INDENT
        while number ! = 1 :
        INDENT
            if number % 2 == 0 :
            INDENT
                print (str(number) + ' // 2 = ' + str(number / / 2))
                number = number / / 2
            DEDENT
            else :
            INDENT
                print ("3 * " + str(number) + " + 1 = " + str(3 * number + 1))
                number = 3 * number + 1
            DEDENT
        DEDENT
    DEDENT
    print ('Please input any integer to begin the Collatz sequence.')
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41326614_1_9
33508034_41668405_1_6
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41326614_1_9
33508034_41875977_1_5
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41326614_1_9
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41326614_1_9
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41326614_1_9
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    while number ! = 1 :
    INDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            yield number
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = number * 3 + 1
            yield number
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41668405_1_6
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41668405_1_6
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return 3 * number + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41875977_1_5
33508034_45134365_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_41875977_1_5
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    elif number % 2 == 1 :
    INDENT
        return number * 3 + 1
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_45134365_1_11
33508034_45150804_1_7
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        even = number / / 2
        print (even)
        return even
    DEDENT
    else :
    INDENT
        odd = 3 * number + 1
        print (odd)
        return odd
    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33508034_45150804_1_7
33508034_51457215_1_11
Title: Making a collatz program automate the boring stuff 
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        return number / / 2
    DEDENT
    else :
    INDENT
        return number * 3 + 1

    DEDENT
DEDENT
----------------------------------------

def collatz(number) :
INDENT
    if number % 2 == 0 :
    INDENT
        print (number / / 2)
        return number / / 2
    DEDENT
    elif number % 2 ! = 0 :
    INDENT
        result = 3 * number + 1
        print (result)
        return result
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3352918_10018670_3_19
3352918_3353112_4_22
Title: How to center a window on the screen in Tkinter? 
----------------------------------------

def center(win) :
INDENT
    win.update_idletasks()
    width = win.winfo_width()
    frm_width = win.winfo_rootx() - win.winfo_x()
    win_width = width + 2 * frm_width
    height = win.winfo_height()
    titlebar_height = win.winfo_rooty() - win.winfo_y()
    win_height = height + titlebar_height + frm_width
    x = win.winfo_screenwidth() / / 2 - win_width / / 2
    y = win.winfo_screenheight() / / 2 - win_height / / 2
    win.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    win.deiconify()
DEDENT
----------------------------------------

def center(toplevel) :
INDENT
    toplevel.update_idletasks()

    app = QtGui.QApplication([])
    screen_width = app.desktop().screenGeometry().width()
    screen_height = app.desktop().screenGeometry().height()
    size = tuple(int(_) for _ in toplevel.geometry().split('+') [0].split('x'))
    x = screen_width / 2 - size [0] / 2
    y = screen_height / 2 - size [1] / 2
    toplevel.geometry("+%d+%d" % (x, y))
    toplevel.title("Centered!")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33592488_33592589_1_10
33592488_33592715_1_13
Title: "Refactoring the ""view"" code" 
----------------------------------------

def form_contractor_view(request) :
INDENT
    form = ContractorForm(request.POST or None)
    if form.is_valid() :
    INDENT
        form.save()
        return redirect(reverse('index_view'))
    DEDENT
    return render(
        request,
        'form_contractor.html',
        {'form' : form})
DEDENT
----------------------------------------

def form_contractor_view(request) :
INDENT
    if request.method == 'POST' :
    INDENT
        form = ContractorForm(request.POST)
        if form.is_valid() :
        INDENT
            form.save()
            return redirect('index_view')
        DEDENT
    DEDENT
    else :
    INDENT
        form = ContractorForm()
    DEDENT
    return render(
        request,
        'form_contractor.html',
        {'form' : form},
        )
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33593846_33599919_16_20
33593846_51936726_7_13
Title: How to pass self into a decorator? 
----------------------------------------

def decorator(fn) :
INDENT
    def decorated(* args, ** kwargs) :
    INDENT
        key_func()
        fn(* args, ** kwargs)
    DEDENT
    return decorated
DEDENT
----------------------------------------

def decorator(the_func) :
INDENT
    @ wraps(the_func)
    def wrapper(* args, ** kwargs) :
    INDENT
        print (args [0].myValue)
        the_func(* args, ** kwargs)
    DEDENT
    return wrapper
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33606521_33606597_1_26
33606521_33606660_1_11
Title: Extracting all path from a multi-level dictionary 
----------------------------------------

def walk(obj, parent_first = True) :
INDENT
    if parent_first :
    INDENT
        yield (), obj

    DEDENT
    if isinstance(obj, dict) :
    INDENT
        children = obj.items()

    DEDENT
    elif isinstance(obj, (list, tuple)) :
    INDENT
        children = enumerate(obj)

    DEDENT
    else :
    INDENT
        children = []

    DEDENT
    for key, value in children :
    INDENT
        for child_path, child in walk(value, parent_first) :
        INDENT
            yield (key,) + child_path, child

        DEDENT
    DEDENT
    if not parent_first :
    INDENT
        yield (), obj
    DEDENT
DEDENT
----------------------------------------

def walk(d, path) :
INDENT
    paths = []
    if len(d) == 0 :
    INDENT
        return path
    DEDENT
    for k, v in d.iteritems() :
    INDENT
        child_path = path + k + '/'
        if isinstance(v, basestring) :
        INDENT
            paths.append(child_path + v)
        DEDENT
        else :
        INDENT
            paths.extend(walk(v, child_path))
        DEDENT
    DEDENT
    return paths
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33619430_33620070_14_24
33619430_33620456_8_14
Title: "Python socketserver how to get my own tcp port number" 
----------------------------------------

def handle(self) :
INDENT
    (host, port) = self.server.server_address
    print 'port # is: {}'.format(port)
    self.data = self.request.recv(1024).strip()
    print "{} wrote:".format(self.client_address [0])
    print self.data
    self.request.sendall(self.data.upper())
DEDENT
----------------------------------------

def handle(self) :
INDENT
    while True :
    INDENT
        data = self.request.recv(1024)
        if not data :
        INDENT
            break
        DEDENT
    DEDENT
    print self.port, data
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33642237_33642705_1_8
33642237_33642742_8_15
Title: How do you return the result in my code? 
----------------------------------------

def soccermatchups(team1, team2) :
INDENT
    if (team1 == "Brazil" and team2 == "Canada") :
    INDENT
        print "These teams could play each other in the World Cup!"
    DEDENT
    if (team1 == "England" and team2 == "Netherlands") :
    INDENT
        print "These teams could play each other in both Cups!"
    DEDENT
    return False

DEDENT
----------------------------------------

def soccermatchups(team1, team2) :
INDENT
    result = "They cannot play each other in either the Euro or World Cup."
    if (team1 == " Brazil" and team2 == " Canada") :
    INDENT
        result = "They can play in the World Cup!"
    DEDENT
    if (team1 == " England" and team2 == " Netherlands") :
    INDENT
        result = "They can play in both the Euro and World Cup!"
    DEDENT
    return (result)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33656599_33656887_3_17
33656599_33657183_21_27
Title: Python - Replace value in a file with re 
----------------------------------------

def network() :
INDENT
    filepath = '/etc/network/interfaces'
    filedata = []
    regex = r'^address ((\d+\.?)+)'
    with open(filepath, 'r') as f :
    INDENT
        for line in f :
        INDENT
            match = re.match(regex, line)
            if match :
            INDENT
                ipaddr = input('Dirección ip [' + match.group(1) + ']: ')
                line = line.replace(match.group(1), ipaddr)
            DEDENT
            filedata.append(line)
        DEDENT
    DEDENT
    with open(filepath, 'w') as f :
    INDENT
        f.writelines(filedata)
    DEDENT
DEDENT
----------------------------------------

def network() :
INDENT
    filepath = '/etc/network/interfaces'
    regexsearch = r'^(address\s)(.*)$'
    ipaddr = get_value(filepath, regexsearch)
    newipaddr = input('Dirección ip [' + ipaddr + ']: ')
    regexreplace = r'\g<1>' + newipaddr
    new_value(filepath, regexsearch, regexreplace)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33704854_33719530_34_41
33704854_33741700_34_49
Title: Newton's square formula using tkinter/using a button for computations multiple times 
----------------------------------------

def _newtonSquare(self) :
INDENT
    val = self._inputVar.get()
    est = self._estimateVar.get()
    if val < = 0.0 :
    INDENT
        self._estimateVar.set(0.0)
    DEDENT
    else :
    INDENT
        self._estimateVar.set((est + val / est) / 2)
    DEDENT
DEDENT
----------------------------------------

def _newtonSquare(self) :
INDENT
    value = self._inputVar.get()
    estimate = self._estimateVar.get()
    tolerance = 0.000001
    if value < = 0.0 :
    INDENT
        self._estimateVar.set(0.0)
    DEDENT
    else :
    INDENT
        estimate = (estimate + value / estimate) / 2
        difference = abs(value - estimate ** 2)
        if difference < = tolerance :
        INDENT
            self._estimateVar.set(estimate)
            self._estimateButton.config(state = 'disabled')
        DEDENT
        else :
        INDENT
            self._estimateVar.set(estimate)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33716072_33716101_1_16
33716072_33717353_3_10
Title: Creating a Dictionary with Line Numbers of Keywords 
----------------------------------------

def index(filename, word_lst) :
INDENT
    dic = {}
    line_count = 0
    for word in word_lst :
    INDENT
        dic [word] = []
    DEDENT
    with open(filename) as infile :
    INDENT
        for line in infile :
        INDENT
            line_count += 1
            for word in word_lst :
            INDENT
                if word in line :
                INDENT
                    dic [word].append(line_count)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    print (dic)
DEDENT
----------------------------------------

def index(filename, word_lst) :
INDENT
    d = defaultdict(list)
    with open(filename) as f :
    INDENT
        for lineno, line in enumerate(f) :
        INDENT
            for word in words :
            INDENT
                if word in line :
                INDENT
                    d [word].append(lineno)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33741373_33741633_2_11
33741373_33741685_1_17
Title: How do we print the line numbers in which a word appears from a text file in Python? 
----------------------------------------

def index(filename, lst) :
INDENT
    with open(filename, 'r') as infile :
    INDENT
        lines = [line.split() for line in infile]
    DEDENT
    word2linenumbers = defaultdict(list)
    for linenumber, line in enumerate(lines, 1) :
    INDENT
        for word in line :
        INDENT
            if word in lst :
            INDENT
                word2linenumbers [word].append(linenumber)
            DEDENT
        DEDENT
    DEDENT
    return word2linenumbers
DEDENT
----------------------------------------

def index(filename, lst) :
INDENT
    infile = open('raven.txt', 'r')
    lines = infile.readlines()
    words = []
    dic = {}
    for line in lines :
    INDENT
        line_words = line.split(' ')
        words.append(line_words)
    DEDENT
    for i in range(len(words)) :
    INDENT
        for j in range(len(words [i])) :
        INDENT
            if words [i] [j] in lst :
            INDENT
                if words [i] [j] not in dic.keys() :
                INDENT
                    dic [words [i] [j]] = set()
                DEDENT
                dic [words [i] [j]].add(i + 1)
            DEDENT
        DEDENT
    DEDENT
    return dic
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33741373_33741682_1_13
33741373_33741685_1_17
Title: How do we print the line numbers in which a word appears from a text file in Python? 
----------------------------------------

def index(filename, lst) :
INDENT
    lst = set(lst)
    dic = {}
    with open(filename, 'r') as fobj :
    INDENT
        for lineno, line in enumerate(fobj, 1) :
        INDENT
            words = line.split()
            for word in words :
            INDENT
                if word in lst :
                INDENT
                    dic.setdefault(word, []).append(lineno)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return dic
DEDENT
----------------------------------------

def index(filename, lst) :
INDENT
    infile = open('raven.txt', 'r')
    lines = infile.readlines()
    words = []
    dic = {}
    for line in lines :
    INDENT
        line_words = line.split(' ')
        words.append(line_words)
    DEDENT
    for i in range(len(words)) :
    INDENT
        for j in range(len(words [i])) :
        INDENT
            if words [i] [j] in lst :
            INDENT
                if words [i] [j] not in dic.keys() :
                INDENT
                    dic [words [i] [j]] = set()
                DEDENT
                dic [words [i] [j]].add(i + 1)
            DEDENT
        DEDENT
    DEDENT
    return dic
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33741403_33742875_46_67
33741403_33742875_77_92
Title: "Using FigureCanvasTkAgg in two TKinter ""pages"" with python" 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    self._running_anim = None
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Transient Analysis GUI: v1.0")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (GraphPageA, GraphPageB) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(GraphPageA)
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    button1 = ttk.Button(self, text = "Show Graph B",
        command = (
            lambda : controller.show_frame(GraphPageB)))
    button1.grid(row = 1, column = 0, pady = 20, padx = 10, sticky = 'w')
    canvasA = FigureCanvasTkAgg(a, self)
    canvasA.show()
    canvasA.get_tk_widget().grid(
        row = 1, column = 1, pady = 20, padx = 10, sticky = 'nsew')
    self.canvas = canvasA

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33741403_33742875_46_67
33741403_33742875_95_111
Title: "Using FigureCanvasTkAgg in two TKinter ""pages"" with python" 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    self._running_anim = None
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Transient Analysis GUI: v1.0")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (GraphPageA, GraphPageB) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(GraphPageA)
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    button1 = ttk.Button(self, text = "Show Graph A",
        command = (
            lambda : controller.show_frame(GraphPageA)))
    button1.grid(row = 1, column = 0, pady = 20, padx = 10, sticky = 'w')
    canvasB = FigureCanvasTkAgg(b, self)
    canvasB.show()
    canvasB.get_tk_widget().grid(
        row = 1, column = 1, pady = 20, padx = 10, sticky = 'nsew')
    self.canvas = canvasB

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33746138_33746282_1_19
33746138_37313607_1_11
Title: Recursive split function 
----------------------------------------

def split_lower_upper(s) :
INDENT
    if not s :
    INDENT
        return ("", "")

    DEDENT
    c = s [0]

    if c.isupper() :
    INDENT
        return addtuple((c, ""), split_lower_upper(s [1 :]))

    DEDENT
    if c.islower() :
    INDENT
        return addtuple(("", c), split_lower_upper(s [1 :]))

    DEDENT
    return split_lower_upper(s [1 :])
DEDENT
----------------------------------------

def split_lower_upper(s) :
INDENT
    if len(s) > 1 :
    INDENT
        mid = int(len(s) / 2)
        lower_1, upper_1 = split_lower_upper(s [: mid])
        lower_2, upper_2 = split_lower_upper(s [mid :])
        return (lower_1 + lower_2, upper_1 + upper_2)
    DEDENT
    if s.isupper() :
    INDENT
        return ("", s)
    DEDENT
    else :
    INDENT
        return (s, "")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33765075_33765428_3_17
33765075_33765459_1_15
Title: How to set a variable equal to another local variable inside a function by passing an external argument to the function? 
----------------------------------------

def forest_tuning(parameter, tree, crit, mf, rs, msf = None) :
INDENT
    try :
    INDENT
        msf = iter(msf)
    DEDENT
    except TypeError :
    INDENT
        if msf is None :
        INDENT
            msf = iter(parameter)
        DEDENT
        else :
        INDENT
            msf = repeat(msf)
        DEDENT
    DEDENT
    for x in parameter :
    INDENT
        rf = ensemble.RandomForestClassifier(
            n_estimators = tree, max_depth = None, criterion = crit,
            max_features = mf, n_jobs = - 1, random_state = rs,
            verbose = 0, oob_score = True, bootstrap = True,
            min_samples_leaf = next(msf))
    DEDENT
DEDENT
----------------------------------------

def forest_tuning(parameter, param_type, tree, crit, mf, rs, msf) :
INDENT
    all_params = {'mf' : mf,
        'msf' : msf}

    for x in parameter :
    INDENT
        all_params [param_type] = x
        rf = ensemble.RandomForestClassifier(n_estimators = tree, max_depth = None, criterion = crit,
            max_features = all_params ['mf'], n_jobs = - 1, random_state = rs,
            verbose = 0, oob_score = True, bootstrap = True,
            min_samples_leaf = all_params ['msf'])

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33765337_33765525_1_17
33765337_33765533_1_10
Title: Unexpected EOF while parsing eval(input( 
----------------------------------------

def myAvg() :
INDENT
    lst = []
    while True :
    INDENT
        n = input("Enter a number: ")
        if n == '' :
        INDENT
            print (lst)
            return sum(lst) / len(lst)
        DEDENT
        else :
        INDENT
            temp = int(n)
            if temp < 10 or temp > 50 :
            INDENT
                print ("Please enter a value between 10 and 50.")
            DEDENT
            else :
            INDENT
                lst.append(temp)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def myAvg() :
INDENT
    lst = []
    while True :
    INDENT
        n = raw_input('Enter an int between 10 and 50: ')
        if n == "" :
        INDENT
            print lst
            break
        DEDENT
        if 10 < int(n) < 50 :
        INDENT
            lst.append(int(n))
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3376643_3376648_1_10
3376643_3376718_2_14
Title: Can someone please explain this bit of Python code? 
----------------------------------------

def foo() :
INDENT
    x = [0]
    def bar() :
    INDENT
        print x [0]
    DEDENT
    def change(z) :
    INDENT
        x [0] = z
    DEDENT
    change(1)
    bar()
DEDENT
----------------------------------------

def foo() :
INDENT
    x = ["tiger"]
    w = "bear"
    def bar() :
    INDENT
        print y, x [0], w
    DEDENT
    def change(z) :
    INDENT
        global y
        x [0] = z
        y = z
        w = z
    DEDENT
    bar()
    change("zap")
    bar()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33787170_33787416_4_12
33787170_33788414_1_11
Title: "I have found most of everything I need and have a ""mostly"" working game" 
----------------------------------------

def check_guess(letter) :
INDENT
    global current_phrase
    i = - 1
    while True :
    INDENT
        i = hidden_phrase.find(letter, i + 1)
        if i < 0 :
        INDENT
            break
        DEDENT
        current_phrase = current_phrase [0 : i] + letter + current_phrase [i + 1 :]
    DEDENT
DEDENT
----------------------------------------

def check_guess(letter) :
INDENT
    global current_phrase
    replacement_list = [""]
    for i in range(len(target_phrase)) :
    INDENT
        if target_phrase [i] == letter :
        INDENT
            replacement_list [i] = target_phrase [i]
            current_phrase = replacement_list
            return current_phrase
        DEDENT
        else :
        INDENT
            wrong_guesses.append(letter)
            return False
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33791198_33791487_2_16
33791198_33791661_4_12
Title: "Python 3 program help. If file_size is 6 then 6 odd numbers ranging from 5 to 19 must be written to file" 
----------------------------------------

def main() :
INDENT
    number_file = open('numbers.txt', 'w')
    file_size = random.randint(4, 7)
    list = [0] * 20
    for i in range(0, file_size) :
    INDENT
        k = random.randint(5, 19)
        while k % 2 == 0 :
        INDENT
            k = random.randint(5, 19)
        DEDENT
        list [k] = 1
    DEDENT
    for i in range(1, len(list)) :
    INDENT
        if list [i] == 0 :
        INDENT
            number_file.write("\n")
        DEDENT
        else :
        INDENT
            number_file.write(str(i) + "\n")
        DEDENT
    DEDENT
    number_file.close()
DEDENT
----------------------------------------

def main() :
INDENT
    file_size = random.randint(4, 7)
    odd_nums = range(5, 20, 2)
    with open('numbers.txt', 'w') as f :
    INDENT
        for _ in range(file_size) :
        INDENT
            n = random.choice(odd_nums)
            f.write('{}\n'.format(n))

        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33795535_33795764_2_7
33795535_33795769_2_11
Title: Implementing a Class Called Average as a Subclass of List 
----------------------------------------

def avg(self) :
INDENT
    if all(isinstance(item, int) for item in self) :
    INDENT
        return sum(self) / len(self)
    DEDENT
    else :
    INDENT
        raise ValueError('Invalid item in list. All items need to be an integer.')
    DEDENT
DEDENT
----------------------------------------

def avg(self) :
INDENT
    if not all(map(lambda x : isinstance(x, int), self)) :
    INDENT
        raise ValueError('Invalid item in list. All items need to be an integer.')
    DEDENT
    try :
    INDENT
        return sum(self) / len(self)
    DEDENT
    except ZeroDivisionError :
    INDENT
        print ('Empty list')
        return - 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33799422_33799847_3_26
33799422_33801288_1_14
Title: "Adds input to a list of numbers if the number isn't already in the list - Python" 
----------------------------------------

def figure_it_out(numbers_list) :
INDENT
    while True :
    INDENT
        number = int(input("Enter the number for the list: "))
        duplicate = False
        for val in numbers_list :
        INDENT
            if number == val :
            INDENT
                duplicate = True
                break
            DEDENT
        DEDENT
        if duplicate :
        INDENT
            print ("Duplicate found")
        DEDENT
        else :
        INDENT
            numbers_list.append(number)
            print ("Added {}".format(number))
        DEDENT
        answer = input("Would you like to add another number? (y/n): ")
        if answer == 'y' :
        INDENT
            continue
        DEDENT
        else :
        INDENT
            break
        DEDENT
    DEDENT
    return numbers_list

DEDENT
----------------------------------------

def figure_it_out(adding_list) :
INDENT
    now = 1
    while now == 1 :
    INDENT
        added = int(input("Enter the number for the list: "))
        adding_list.append(added)
        adding_list = list(set(adding_list))
        answer = input("Would you like to add another number? (yes or no): ")
        if answer == 'yes' :
        INDENT
            now = 1
        DEDENT
        elif answer == 'no' :
        INDENT
            return adding_list
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33806532_33806768_7_12
33806532_33806896_10_15
Title: any idea why im not getting the correct answer in this simple script? 
----------------------------------------

def multiple() :
INDENT
    result = 1
    for num in nums :
    INDENT
        result *= num
    DEDENT
    return result
DEDENT
----------------------------------------

def multiple() :
INDENT
    y = 1
    for i in nums :
    INDENT
        y *= i
    DEDENT
    return y
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33806598_33811831_5_21
33806598_33814849_14_23
Title: Dynamic Plotting with Matplotlib and PyQt - freezing window 
----------------------------------------

def __init__(self, parent = None, width = 5, height = 4, dpi = 100) :
INDENT
    fig = Figure(figsize = (width, height), dpi = dpi)
    self.axes = fig.add_subplot(111)
    self.axes.hold(False)
    self.compute_initial_figure()

    FigureCanvas.__init__(self, fig)
    self.setParent(parent)
    FigureCanvas.setSizePolicy(self,
        QtGui.QSizePolicy.Expanding,
        QtGui.QSizePolicy.Expanding)
    FigureCanvas.updateGeometry(self)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__(Figure(tight_layout = True))
    self.axes = self.figure.add_subplot(111)
    self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
    self.name = ""
    self.data = np.zeros(shape = (100, 2))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33809294_33809510_17_29
33809294_33809621_6_20
Title: Get Return Value from one function and use on another 
----------------------------------------

def store_password(password) :
INDENT
    try :
    INDENT
        connection = sqli.connect('pw.db')
    DEDENT
    except :
    INDENT
        print ('Error occurred!')
    DEDENT
    else :
    INDENT
        with connection :
        INDENT
            cur = connection.cursor()
            cur.execute('''CREATE TABLE IF NOT EXISTS my_passwords (
                           id INT PRIMARY KEY AUTOINCREMENT,
                           password text)''')
            cur.execute('INSERT INTO my_passwords VALUES (?)', password)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def store_password(self) :
INDENT
    try :
    INDENT
        connection = sqli.connect('pw.db')
    DEDENT
    except :
    INDENT
        print ("Error occurred!")
    DEDENT
    with connection :
    INDENT
        cur = connection.cursor()
        cur.execute('''
                CREATE TABLE IF NOT EXISTS my_passwords(
                id INT PRIMARY KEY AUTOINCREMENT,
                password text
                ''')
    DEDENT
    cur.execute('INSERT INTO my_passwords VALUES(?)', self.password)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33812420_33813019_4_12
33812420_33813140_2_14
Title: Python: folder creation when copying files 
----------------------------------------

def dir_copy(srcpath, dstpath) :
INDENT
    try :
    INDENT
        shutil.copytree(srcpath, dstpath)
    DEDENT
    except shutil.Error as e :
    INDENT
        print ('Directory not copied. Error: %s' % e)
    DEDENT
    except OSError as e :
    INDENT
        print ('Directory not copied. Error: %s' % e)
    DEDENT
DEDENT
----------------------------------------

def dir_copy(srcpath, dstpath, include_directory = False) :
INDENT
    if include_directory :
    INDENT
        dstpath = os.path.join(dstpath, os.path.basename(srcpath))
    DEDENT
    os.makedirs(dstpath, exist_ok = True)
    for file in os.listdir(srcpath) :
    INDENT
        srcfile = os.path.join(srcpath, file)
        dstfile = os.path.join(dstpath, file)
        if os.path.isdir(srcfile) :
        INDENT
            dir_copy(srcfile, dstfile)
        DEDENT
        else :
        INDENT
            shutil.copyfile(srcfile, dstfile)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33828423_33875415_22_33
33828423_33875415_47_55
Title: Python Qt4 classes & QTGui Windows 
----------------------------------------

def set_default_ingredients(self) :
INDENT
    self.farina = 0
    self.acqua = 0
    self.lievito = 0
    self.sale = 0
    self.olio = 0
    self.semola = 0
    self.strutto = 0
    self.manitoba = 0

DEDENT
----------------------------------------

def set_default_ingredients(self) :
INDENT
    self.farina = 80
    self.semola = 20
    self.acqua = 57
    self.lievito = 0.171
    self.sale = 2.85
    self.olio = 2.85
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33828423_33875415_22_33
33828423_33875415_64_73
Title: Python Qt4 classes & QTGui Windows 
----------------------------------------

def set_default_ingredients(self) :
INDENT
    self.farina = 0
    self.acqua = 0
    self.lievito = 0
    self.sale = 0
    self.olio = 0
    self.semola = 0
    self.strutto = 0
    self.manitoba = 0

DEDENT
----------------------------------------

def set_default_ingredients(self) :
INDENT
    self.farina = 72
    self.manitoba = 48
    self.acqua = 72
    self.lievito = 0.216
    self.sale = 3.6
    self.strutto = 7.2

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33828423_33875415_47_55
33828423_33875415_64_73
Title: Python Qt4 classes & QTGui Windows 
----------------------------------------

def set_default_ingredients(self) :
INDENT
    self.farina = 80
    self.semola = 20
    self.acqua = 57
    self.lievito = 0.171
    self.sale = 2.85
    self.olio = 2.85
DEDENT
----------------------------------------

def set_default_ingredients(self) :
INDENT
    self.farina = 72
    self.manitoba = 48
    self.acqua = 72
    self.lievito = 0.216
    self.sale = 3.6
    self.strutto = 7.2

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33828423_33875415_4_16
33828423_33875415_75_122
Title: Python Qt4 classes & QTGui Windows 
----------------------------------------

def __init__(self) :
INDENT
    self.farina = 0
    self.acqua = 0
    self.lievito = 0
    self.sale = 0
    self.olio = 0
    self.semola = 0
    self.strutto = 0
    self.manitoba = 0
    self.set_default_ingredients()

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.main_widg = QtGui.QWidget()
    self.main_layout = QtGui.QFormLayout()
    self.main_widg.setLayout(self.main_layout)
    self.setCentralWidget(self.main_widg)
    self.current_pizza = Pizza()
    self.pizza_type = QtGui.QComboBox()
    self.pizza_type.addItems(['Pizza', 'Romana', 'Napoletana'])
    self.pizza_type.currentIndexChanged.connect(self.select_pizza)

    self.farina = QtGui.QLineEdit('0')
    self.farina.textChanged.connect(self.set_farina)
    self.acqua = QtGui.QLineEdit('0')
    self.acqua.textChanged.connect(self.set_acqua)
    self.lievito = QtGui.QLineEdit('0')
    self.lievito.textChanged.connect(self.set_lievito)
    self.sale = QtGui.QLineEdit('0')
    self.sale.textChanged.connect(self.set_sale)
    self.olio = QtGui.QLineEdit('0')
    self.olio.textChanged.connect(self.set_olio)
    self.semola = QtGui.QLineEdit('0')
    self.semola.textChanged.connect(self.set_semola)
    self.strutto = QtGui.QLineEdit('0')
    self.strutto.textChanged.connect(self.set_strutto)
    self.manitoba = QtGui.QLineEdit('0')
    self.manitoba.textChanged.connect(self.set_manitoba)

    self.bake_btn = QtGui.QPushButton("Bake")
    self.bake_btn.clicked.connect(self.bake)

    self.main_layout.addRow('Pizza Type', self.pizza_type)
    self.main_layout.addRow('farina', self.farina)
    self.main_layout.addRow('acqua', self.acqua)
    self.main_layout.addRow('lievito', self.lievito)
    self.main_layout.addRow('olio', self.olio)
    self.main_layout.addRow('semola', self.semola)
    self.main_layout.addRow('strutto', self.strutto)
    self.main_layout.addRow('manitoba', self.manitoba)
    self.main_layout.addRow(self.bake_btn)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33832246_33833002_1_21
33832246_34232597_21_29
Title: Use a class to monitor a data stream and print reports to two different windows at different time intervals in python 
----------------------------------------

def monitor(self, report_interval = 1) :
INDENT
    second = open('report.txt', 'wt')
    start1 = time.time()
    start2 = time.time()
    for x in self.generate_values() :
    INDENT
        self.sum += x
        self.count += 1

        if time.time() - start1 > report_interval :
        INDENT
            start1 = time.time()
            print self.count, x
            second.write('%d, %s\n' % (self.count, x))

        DEDENT
        if time.time() - start2 > 5 * report_interval :
        INDENT
            start2 = time.time()
            print self.mu
            second.write('%s\n', self.mu)
        DEDENT
        second.flush()
    DEDENT
DEDENT
----------------------------------------

def monitor(self) :
INDENT
    for x in self.generate_values() :
    INDENT
        self.sum += x
        self.count += 1

        self.r.publish('count', self.count)
        self.r.publish('mu', self.mu)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33833619_33834210_2_11
33833619_33834659_5_16
Title: Redraw circle - python 
----------------------------------------

def __init__(self, master, radius, xcoordinate = 100, ycoordinate = 100) :
INDENT
    self.master = master
    self.xcoordinate = xcoordinate
    self.ycoordinate = ycoordinate
    self.radius = radius
    self.master.title("World")
    self.master.bind('<Right>', self.moveRight)
    self.master.bind('<Left>', self.moveLeft)
    self.draw()
DEDENT
----------------------------------------

def __init__(self, master, radius, xcoordinate = 100, ycoordinate = 100) :
INDENT
    self.master = master
    self.xcoordinate = xcoordinate
    self.ycoordinate = ycoordinate
    self.radius = radius
    self.master.title("World")
    self.master.bind('<Right>', partial(self.move_oval, 25, 0))
    self.master.bind('<Left>', partial(self.move_oval, - 25, 0))
    self.master.bind('<Up>', partial(self.move_oval, 0, - 25))
    self.master.bind('<Down>', partial(self.move_oval, 0, 25))
    self.draw()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33849244_33849365_4_16
33849244_33849377_3_13
Title: Using random numbers to determine the length of a random number list 
----------------------------------------

def main() :
INDENT
    digit_file = open("numbers.txt", "w")
    file_size = random.randint(4, 7)
    print (file_size)
    print ("is the file size\n")
    while file_size :
    INDENT
        rand_output = random.randint(5, 19)
        if rand_output % 2 ! = 0 :
        INDENT
            print (rand_output)
            digit_file.write(str(rand_output))
            file_size -= 1
        DEDENT
    DEDENT
    digit_file.close()
    print ("File was created and closed.")
DEDENT
----------------------------------------

def main() :
INDENT
    with open("numbers.txt", "w") as digit_file :
    INDENT
        file_size = randint(4, 7)
        print (file_size)
        print ("is the file size\n")
        for n in range(file_size) :
        INDENT
            rand_output = choice(range(5, 19, 2))
            print (rand_output)
            digit_file.write(str(rand_output))
        DEDENT
    DEDENT
    print ("File was created and closed.")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33849715_33849851_1_10
33849715_43498245_8_17
Title: Running more than one spider in a for loop 
----------------------------------------

def start_crawler() :
INDENT
    for feed_name in feeds.keys() :
    INDENT
        process = CrawlerProcess({
                'USER_AGENT' : CONFIG ['USER_AGENT'],
                'DOWNLOAD_HANDLERS' : {'s3' : None}})
        MySpider.name = feed_name
        process.crawl(MySpider)
        process.start()
    DEDENT
DEDENT
----------------------------------------

def start_crawler() :
INDENT
    process = CrawlerProcess({
            'USER_AGENT' : CONFIG ['USER_AGENT'],
            'DOWNLOAD_HANDLERS' : {'s3' : None}})
    for feed_name in feeds.keys() :
    INDENT
        process.crawl(MySpider, feed_name)
    DEDENT
    process.start()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33851892_33851982_1_18
33851892_33852259_1_20
Title: What is wrong with this code? I cant figure it out 
----------------------------------------

def main() :
INDENT
    daily_sales = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    days_of_week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
        'Friday', 'Saturday']

    for index, day in enumerate(days_of_week) :
    INDENT
        daily_sales [index] = float(
            input('Enter the sales for {0}: '.format(day)))

    DEDENT
    total_sales = sum(daily_sales)

    print ('Total sales for the week: ${:.2f}'.format(total_sales))
DEDENT
----------------------------------------

def main() :
INDENT
    total_sales = 0.0

    daily_sales = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    days_of_week = ['Sunday', 'Monday', 'Tuesday',
        'Wednesday', 'Thursday', 'Friday',
        'Saturday']
    for i in range(7) :
    INDENT
        daily_sales [i] = float(input('Enter the sales for ' + days_of_week [i] + ': '))
    DEDENT
    for number in daily_sales :
    INDENT
        total_sales += number

    DEDENT
    print ('Total sales for the week: $' + format(total_sales, '.2f'))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33884310_33884670_16_32
33884310_33884827_17_38
Title: Python Threading loop 
----------------------------------------

def run(self) :
INDENT
    print (" %s, Awaiting Request: %d seconds" % (self.getName(), self._RequestInterval))
    time.sleep(self._RequestInterval)
    if Students.count > = 20 :
    INDENT
        print ("%s Has A Spot Obtained in Class %s" % (self.getName(), Students.course))
        print ("Class", Students.course, "has reached it limit!")
        Students.course += 1
        Students.count = 0
    DEDENT
    else :
    INDENT
        print ("%s Has A Spot Obtained in Class %s" % (self.getName(), Students.course))
        Students.count += 1

    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    global count, course
    print (" %s, Awaiting Request: %d seconds" % (self.getName(), self._RequestInterval))
    time.sleep(self._RequestInterval)
    if mutex.acquire(1) :
    INDENT
        print ("%s Has A Spot Obtained in Class" % self.getName(), + course)
        if count == 20 :
        INDENT
            count = 1
            course += 1
        DEDENT
        else :
        INDENT
            count += 1
        DEDENT
        mutex.release()

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33886473_33886540_1_17
33886473_33886880_1_17
Title: Removing White Spaces in a Python String 
----------------------------------------

def cleanstring(s) :
INDENT
    i = 0
    while s [i] == ' ' :
    INDENT
        i = i + 1
    DEDENT
    s = s [i : len(s)]
    i = 0
    while i < len(s) :
    INDENT
        if s [i] == ' ' :
        INDENT
            if (i + 1) < len(s) and s [i + 1] == ' ' :
            INDENT
                s = s [0 : i] + s [i + 1 : len(s)]
            DEDENT
            else :
            INDENT
                i = i + 1
            DEDENT
        DEDENT
        else :
        INDENT
            i = i + 1
        DEDENT
    DEDENT
    if s [len(s) - 1] == ' ' :
    INDENT
        s = s [0 : len(s) - 1]
    DEDENT
    return (s)
DEDENT
----------------------------------------

def cleanstring(s) :
INDENT
    hit_letter = False
    space_counter = 0
    tmp = list()
    for letter in s :
    INDENT
        if letter.isalpha() :
        INDENT
            space_counter = 0
            hit_letter = True
            tmp.append(letter)
            print letter
        DEDENT
        elif hit_letter :
        INDENT
            space_counter += 1
            if space_counter < 2 :
            INDENT
                tmp.append(letter)
            DEDENT
        DEDENT
    DEDENT
    return ''.join(tmp [: - 1])

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33886473_33886837_1_18
33886473_33886880_1_17
Title: Removing White Spaces in a Python String 
----------------------------------------

def cleanstring(s) :
INDENT
    i = 0
    while s [i] == ' ' :
    INDENT
        i = i + 1
    DEDENT
    s = s [i : len(s)]
    i = 0
    while i < len(s) :
    INDENT
        if s [i] ! = ' ' :
        INDENT
            i = i + 1
        DEDENT
        else :
        INDENT
            if i < len(s) and s [i] == ' ' :
            INDENT
                i = i + 1
            DEDENT
            if i < len(s) and s [i] == ' ' :
            INDENT
                s = s [0 : i] + s [i + 1 : len(s)]
                i = 0
            DEDENT
        DEDENT
    DEDENT
    if s [- 1] == ' ' :
    INDENT
        s = s [: - 1]
    DEDENT
    return (s)
DEDENT
----------------------------------------

def cleanstring(s) :
INDENT
    hit_letter = False
    space_counter = 0
    tmp = list()
    for letter in s :
    INDENT
        if letter.isalpha() :
        INDENT
            space_counter = 0
            hit_letter = True
            tmp.append(letter)
            print letter
        DEDENT
        elif hit_letter :
        INDENT
            space_counter += 1
            if space_counter < 2 :
            INDENT
                tmp.append(letter)
            DEDENT
        DEDENT
    DEDENT
    return ''.join(tmp [: - 1])

DEDENT
----------------------------------------

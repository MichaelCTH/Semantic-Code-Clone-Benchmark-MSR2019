$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52566742_52566800_3_14
52566742_52567204_1_12
Title: Better ways to find pairs that sum to N 
----------------------------------------

def pairsum_n(list1, value) :
INDENT
    result = set()
    for n in combinations(list1, 2) :
    INDENT
        if sum(n) == value :
        INDENT
            result.add((min(n), max(n)))
        DEDENT
    DEDENT
    return list(result)

DEDENT
----------------------------------------

def pairsum_n(list1, value) :
INDENT
    set1 = set(list1)
    list1 = sorted(set1)
    solution = []
    maxi = value / 2
    for i in list1 :
    INDENT
        if i > = maxi :
        INDENT
            break
        DEDENT
        j = value - i
        if j in set1 :
        INDENT
            solution.append((i, j))
        DEDENT
    DEDENT
    return solution
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52572956_52573053_5_16
52572956_52573192_6_14
Title: Passing variables into a tkinter class window 
----------------------------------------

def __init__(self, master) :
INDENT
    self.master = master
    super().__init__(self.master)
    global blink
    self.label = Label(master, text = blink)
    self.button = Button(master, text = "Button", command = lambda : foo(self.label))
    self.label.pack()
    self.button.pack()

DEDENT
----------------------------------------

def __init__(self, master, event) :
INDENT
    super().__init__(master)
    self.master = master
    self.event = event
    self.label = tk.Label(master, text = '')
    self.label.pack()
    self.after(100, self.blink_check)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52577865_52578081_1_12
52577865_52578181_1_13
Title: "How to speed up this inter-array process? [Python Numpy]" 
----------------------------------------

def assign_clusters_to_samples(data, clusters, assignments) :
INDENT
    def euclidean_distances(clusters, sample) :
    INDENT
        e_distances = np.sqrt(np.sum(np.power(np.subtract(clusters, sample), 2), axis = 1))
        return np.where(e_distances == np.min(e_distances)) [0]

    DEDENT
    acc = [euclidean_distances(clusters, data [i]).flatten() for i in range(data.shape [0])]
    new_assignments = np.concatenate(acc)
    return new_assignments, find_difference(new_assignments, assignments)
DEDENT
----------------------------------------

def assign_clusters_to_samples(data, clusters, assignments) :
INDENT
    def euclidean_distances(clusters, sample) :
    INDENT
        e_distances = np.sum((clusters - sample) ** 2, axis = 1)
        return np.argmin(e_distances)
    DEDENT
    new_assignments = [
        euclidean_distances(clusters, d) for d in data
        ]
    return new_assignments, find_difference(new_assignments, assignments)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52579539_52579738_3_18
52579539_52580037_4_20
Title: Trying to compute the average in python 
----------------------------------------

def age_func(size) :
INDENT
    listofAges = []
    totalSum = 0
    average = 0
    for i in range(size) :
    INDENT
        ages = rnd.randint(0, 100)
        listofAges.append(ages)
        totalSum += ages
        print ('Age is', ages)
        print ('totalSum is', totalSum)
    DEDENT
    average = totalSum / size
    print ('Average age', average)
    print ('totalSum', totalSum)
    return listofAges, totalSum, average
DEDENT
----------------------------------------

def age_func(size) :
INDENT
    age_list = list()
    for _ in range(size) :
    INDENT
        age = random.randint(0, 100)
        age_list.append(age)
        print ('Age is {}'.format(age))
    DEDENT
    average_int = sum(age_list) / len(age_list)
    average_float = float(sum(age_list)) / float(len(age_list))
    print ('Average age (int): {}'.format(average_int))
    print ('Average age (float): {}'.format(average_float))
    print ('total Sum: {}'.format(sum(age_list)))
    return age_list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52583812_53024893_11_30
52583812_53024893_81_113
Title: Django-rest-framework serializer will not hash password 
----------------------------------------

def create_user(self, email, name, password = None) :
INDENT
    if not email :
    INDENT
        raise ValueError("It is mandatory to require an email!")
    DEDENT
    if not name :
    INDENT
        raise ValueError("Please provide a name:")
    DEDENT
    email = self.normalize_email(email = email)
    user = self.model(email = email, name = name)
    """ This will allow us to store our password in our database
         as a hash """
    user.set_password(password)
    user.save(using = self._db)
    return user

DEDENT
----------------------------------------

def create_user(self, email, name, password = None) :
INDENT
    if not email :
    INDENT
        raise ValueError("Please enter in an email!")
    DEDENT
    if not name :
    INDENT
        raise ValueError("Please enter in a first name!")
    DEDENT
    def normalize_email(self) :
    INDENT
        email = normalize_email(email = email)
        user = self.model(email = email, name = name)
        return user

    DEDENT
    def set_password(self, password) :
    INDENT
        user = self.create_user(email, name, password)
        user.is_superuser = False
        user.is_staff = False
        user.is_active = False
        user.set_password(password)
        user.save(using = self._db)
        return user

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52583911_52586932_16_42
52583911_52588648_54_67
Title: Create a GUI that can turn on / off camera images using Python 3 and tkinter 
----------------------------------------

def videoLoop(mirror = False) :
INDENT
    No = 0
    cap = cv2.VideoCapture(No)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 800)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 600)
    while True :
    INDENT
        ret, to_draw = cap.read()
        if mirror is True :
        INDENT
            to_draw = to_draw [:, : : - 1]
        DEDENT
        image = cv2.cvtColor(to_draw, cv2.COLOR_BGR2RGB)
        image = Image.fromarray(image)
        image = ImageTk.PhotoImage(image)
        panel = tk.Label(image = image)
        panel.image = image
        panel.place(x = 50, y = 50)

        if videoloop_stop [0] :
        INDENT

            videoloop_stop [0] = False
            panel.destroy()
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def videoLoop(self, mirror = False) :
INDENT
    No = 0
    cap = cv2.VideoCapture(No)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 800)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 600)
    while self.is_running :
    INDENT
        ret, to_draw = cap.read()
        if mirror is True :
        INDENT
            to_draw = to_draw [:, : : - 1]
        DEDENT
        image = cv2.cvtColor(to_draw, cv2.COLOR_BGR2RGB)
        self.queue.put(image)
        self.event_generate('<<MessageGenerated>>')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52592922_52594161_21_35
52592922_52594161_6_16
Title: Retrieving variable from another class 
----------------------------------------

def __init__(self, parent, page1, * args, ** kwargs) :
INDENT
    super().__init__(parent, * args, ** kwargs)
    self.page1 = page1
    self.input_file2 = tk.StringVar()
    self.label1 = ttk.Label(self, text = 'Filename:')
    self.entry1 = ttk.Entry(self, textvariable = self.input_file2)
    self.button1 = ttk.Button(self, text = 'Copy Here',
        command = self.copy_filename)
    self.label1.pack(side = tk.LEFT)
    self.entry1.pack(side = tk.LEFT)
    self.button1.pack()
DEDENT
----------------------------------------

def __init__(self, parent, * args, ** kwargs) :
INDENT
    super().__init__(parent, * args, ** kwargs)
    self.input_file1 = tk.StringVar()
    self.label1 = ttk.Label(self, text = 'Filename:')
    self.entry1 = ttk.Entry(self, textvariable = self.input_file1)
    self.label1.pack(side = tk.LEFT)
    self.entry1.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52596386_52597972_112_138
52596386_52597972_6_17
Title: PySide2 slide QStackedWidget page 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    slidingStacked = SlidingStackedWidget()
    for i in range(10) :
    INDENT
        label = QtWidgets.QLabel("Qt is cool" + i * "!", alignment = QtCore.Qt.AlignCenter)
        color = QtGui.QColor(* [random.randint(0, 255) for _ in range(3)])
        label.setStyleSheet("background-color: {}; color : white;".format(color.name()))
        slidingStacked.addWidget(label)
    DEDENT
    button_prev = QtWidgets.QPushButton("Previous")
    button_next = QtWidgets.QPushButton("Next")
    hlay = QtWidgets.QHBoxLayout()
    hlay.addWidget(button_prev)
    hlay.addWidget(button_next)
    central_widget = QtWidgets.QWidget()
    self.setCentralWidget(central_widget)
    lay = QtWidgets.QVBoxLayout(central_widget)
    lay.addLayout(hlay)
    lay.addWidget(slidingStacked)
    button_prev.pressed.connect(slidingStacked.slideInPrev)
    button_next.pressed.connect(slidingStacked.slideInNext)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(SlidingStackedWidget, self).__init__(parent)
    self.m_direction = QtCore.Qt.Horizontal
    self.m_speed = 500
    self.m_animationtype = QtCore.QEasingCurve.OutCubic
    self.m_now = 0
    self.m_next = 0
    self.m_wrap = False
    self.m_pnow = QtCore.QPoint(0, 0)
    self.m_active = False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_42_56
52616553_52616955_58_73
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(EffLengthInfo, self).__init__(parent)
    ilabel = QtWidgets.QLabel('Ley = 1.0 L\nLec = 1.0 L')
    blabel = QtWidgets.QLabel('Ley = 0.699 L\nLec = 0.699 L')
    clabel = QtWidgets.QLabel('Ley = 2.0 L\nLec = 2.0 L')
    dlabel = QtWidgets.QLabel('Ley = 0.5 L\nLec = 0.5 L')
    self.ilay = QtWidgets.QHBoxLayout()
    self.ilay.addWidget(ilabel)
    self.ilay.addWidget(blabel)
    self.ilay.addWidget(clabel)
    self.ilay.addWidget(dlabel)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(CheckInfo, self).__init__(parent)
    icheck = QtWidgets.QCheckBox()
    bcheck = QtWidgets.QCheckBox()
    ccheck = QtWidgets.QCheckBox()
    dcheck = QtWidgets.QCheckBox()
    self.checklay = QtWidgets.QHBoxLayout()
    self.checklay.addWidget(icheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(bcheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(ccheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(dcheck, alignment = QtCore.Qt.AlignCenter)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_42_56
52616553_52616955_75_92
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(EffLengthInfo, self).__init__(parent)
    ilabel = QtWidgets.QLabel('Ley = 1.0 L\nLec = 1.0 L')
    blabel = QtWidgets.QLabel('Ley = 0.699 L\nLec = 0.699 L')
    clabel = QtWidgets.QLabel('Ley = 2.0 L\nLec = 2.0 L')
    dlabel = QtWidgets.QLabel('Ley = 0.5 L\nLec = 0.5 L')
    self.ilay = QtWidgets.QHBoxLayout()
    self.ilay.addWidget(ilabel)
    self.ilay.addWidget(blabel)
    self.ilay.addWidget(clabel)
    self.ilay.addWidget(dlabel)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    self.imagewidget = ImageWidget()
    self.efflengthinfo = EffLengthInfo()
    self.checkinfo = CheckInfo()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(self.imagewidget.hlay)

    vlay.addLayout(self.efflengthinfo.ilay)
    vlay.addLayout(self.checkinfo.checklay)
    self.setLayout(vlay)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_42_56
52616553_52616955_7_40
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(EffLengthInfo, self).__init__(parent)
    ilabel = QtWidgets.QLabel('Ley = 1.0 L\nLec = 1.0 L')
    blabel = QtWidgets.QLabel('Ley = 0.699 L\nLec = 0.699 L')
    clabel = QtWidgets.QLabel('Ley = 2.0 L\nLec = 2.0 L')
    dlabel = QtWidgets.QLabel('Ley = 0.5 L\nLec = 0.5 L')
    self.ilay = QtWidgets.QHBoxLayout()
    self.ilay.addWidget(ilabel)
    self.ilay.addWidget(blabel)
    self.ilay.addWidget(clabel)
    self.ilay.addWidget(dlabel)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ImageWidget, self).__init__(parent)

    self.hlay = QtWidgets.QHBoxLayout()
    buckling_ilabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_ilabel.resize(150, 150)
    buckling_ilabel.setPixmap(pixmap.scaled(buckling_ilabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_ilabel)
    buckling_blabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_blabel.resize(150, 150)
    buckling_blabel.setPixmap(pixmap.scaled(buckling_blabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_blabel)
    buckling_clabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_clabel.resize(150, 150)
    buckling_clabel.setPixmap(pixmap.scaled(buckling_clabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_clabel)
    buckling_dlabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_dlabel.resize(150, 150)
    buckling_dlabel.setPixmap(pixmap.scaled(buckling_dlabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_dlabel)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_42_56
52616553_52617980_38_50
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(EffLengthInfo, self).__init__(parent)
    ilabel = QtWidgets.QLabel('Ley = 1.0 L\nLec = 1.0 L')
    blabel = QtWidgets.QLabel('Ley = 0.699 L\nLec = 0.699 L')
    clabel = QtWidgets.QLabel('Ley = 2.0 L\nLec = 2.0 L')
    dlabel = QtWidgets.QLabel('Ley = 0.5 L\nLec = 0.5 L')
    self.ilay = QtWidgets.QHBoxLayout()
    self.ilay.addWidget(ilabel)
    self.ilay.addWidget(blabel)
    self.ilay.addWidget(clabel)
    self.ilay.addWidget(dlabel)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    image_lay = create_image_layout()
    efflengthinfo_lay = create_EffLengthInfo_layout()
    checkinfo_lay = create_checkInfo_layout()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(image_lay)
    vlay.addLayout(efflengthinfo_lay)
    vlay.addLayout(checkinfo_lay)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_58_73
52616553_52616955_75_92
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(CheckInfo, self).__init__(parent)
    icheck = QtWidgets.QCheckBox()
    bcheck = QtWidgets.QCheckBox()
    ccheck = QtWidgets.QCheckBox()
    dcheck = QtWidgets.QCheckBox()
    self.checklay = QtWidgets.QHBoxLayout()
    self.checklay.addWidget(icheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(bcheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(ccheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(dcheck, alignment = QtCore.Qt.AlignCenter)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    self.imagewidget = ImageWidget()
    self.efflengthinfo = EffLengthInfo()
    self.checkinfo = CheckInfo()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(self.imagewidget.hlay)

    vlay.addLayout(self.efflengthinfo.ilay)
    vlay.addLayout(self.checkinfo.checklay)
    self.setLayout(vlay)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_58_73
52616553_52616955_7_40
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(CheckInfo, self).__init__(parent)
    icheck = QtWidgets.QCheckBox()
    bcheck = QtWidgets.QCheckBox()
    ccheck = QtWidgets.QCheckBox()
    dcheck = QtWidgets.QCheckBox()
    self.checklay = QtWidgets.QHBoxLayout()
    self.checklay.addWidget(icheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(bcheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(ccheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(dcheck, alignment = QtCore.Qt.AlignCenter)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ImageWidget, self).__init__(parent)

    self.hlay = QtWidgets.QHBoxLayout()
    buckling_ilabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_ilabel.resize(150, 150)
    buckling_ilabel.setPixmap(pixmap.scaled(buckling_ilabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_ilabel)
    buckling_blabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_blabel.resize(150, 150)
    buckling_blabel.setPixmap(pixmap.scaled(buckling_blabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_blabel)
    buckling_clabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_clabel.resize(150, 150)
    buckling_clabel.setPixmap(pixmap.scaled(buckling_clabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_clabel)
    buckling_dlabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_dlabel.resize(150, 150)
    buckling_dlabel.setPixmap(pixmap.scaled(buckling_dlabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_dlabel)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_58_73
52616553_52617980_38_50
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(CheckInfo, self).__init__(parent)
    icheck = QtWidgets.QCheckBox()
    bcheck = QtWidgets.QCheckBox()
    ccheck = QtWidgets.QCheckBox()
    dcheck = QtWidgets.QCheckBox()
    self.checklay = QtWidgets.QHBoxLayout()
    self.checklay.addWidget(icheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(bcheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(ccheck, alignment = QtCore.Qt.AlignCenter)
    self.checklay.addWidget(dcheck, alignment = QtCore.Qt.AlignCenter)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    image_lay = create_image_layout()
    efflengthinfo_lay = create_EffLengthInfo_layout()
    checkinfo_lay = create_checkInfo_layout()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(image_lay)
    vlay.addLayout(efflengthinfo_lay)
    vlay.addLayout(checkinfo_lay)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_75_92
52616553_52616955_7_40
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    self.imagewidget = ImageWidget()
    self.efflengthinfo = EffLengthInfo()
    self.checkinfo = CheckInfo()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(self.imagewidget.hlay)

    vlay.addLayout(self.efflengthinfo.ilay)
    vlay.addLayout(self.checkinfo.checklay)
    self.setLayout(vlay)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ImageWidget, self).__init__(parent)

    self.hlay = QtWidgets.QHBoxLayout()
    buckling_ilabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_ilabel.resize(150, 150)
    buckling_ilabel.setPixmap(pixmap.scaled(buckling_ilabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_ilabel)
    buckling_blabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_blabel.resize(150, 150)
    buckling_blabel.setPixmap(pixmap.scaled(buckling_blabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_blabel)
    buckling_clabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_clabel.resize(150, 150)
    buckling_clabel.setPixmap(pixmap.scaled(buckling_clabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_clabel)
    buckling_dlabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_dlabel.resize(150, 150)
    buckling_dlabel.setPixmap(pixmap.scaled(buckling_dlabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_dlabel)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_75_92
52616553_52617980_38_50
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    self.imagewidget = ImageWidget()
    self.efflengthinfo = EffLengthInfo()
    self.checkinfo = CheckInfo()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(self.imagewidget.hlay)

    vlay.addLayout(self.efflengthinfo.ilay)
    vlay.addLayout(self.checkinfo.checklay)
    self.setLayout(vlay)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    image_lay = create_image_layout()
    efflengthinfo_lay = create_EffLengthInfo_layout()
    checkinfo_lay = create_checkInfo_layout()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(image_lay)
    vlay.addLayout(efflengthinfo_lay)
    vlay.addLayout(checkinfo_lay)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52616553_52616955_7_40
52616553_52617980_38_50
Title: PyQt5 Image and QGridlayout 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ImageWidget, self).__init__(parent)

    self.hlay = QtWidgets.QHBoxLayout()
    buckling_ilabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_ilabel.resize(150, 150)
    buckling_ilabel.setPixmap(pixmap.scaled(buckling_ilabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_ilabel)
    buckling_blabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_blabel.resize(150, 150)
    buckling_blabel.setPixmap(pixmap.scaled(buckling_blabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_blabel)
    buckling_clabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_clabel.resize(150, 150)
    buckling_clabel.setPixmap(pixmap.scaled(buckling_clabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_clabel)
    buckling_dlabel = QtWidgets.QLabel(self)
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/logo.png"))
    buckling_dlabel.resize(150, 150)
    buckling_dlabel.setPixmap(pixmap.scaled(buckling_dlabel.size(), QtCore.Qt.KeepAspectRatio))
    self.hlay.addWidget(buckling_dlabel)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Grid, self).__init__(parent)
    image_lay = create_image_layout()
    efflengthinfo_lay = create_EffLengthInfo_layout()
    checkinfo_lay = create_checkInfo_layout()
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addLayout(image_lay)
    vlay.addLayout(efflengthinfo_lay)
    vlay.addLayout(checkinfo_lay)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52618507_52618741_4_11
52618507_52623956_2_7
Title: How do I create instances in class using user's input? 
----------------------------------------

def __init__(self) :
INDENT
    self.maxcount_inventory = int(input("How many Inventories: "))
    self.inventory = []
    for count_inventory in range(0, self.maxcount_inventory) :
    INDENT
        add_inventory = str(input("Enter Inventory #%d: " % (count_inventory + 1)))
        self.inventory.append(add_inventory)
    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    self.inventories = {}
    n = int(input('How many inventories: '))
    for i in range(1, n + 1) :
    INDENT
        self.inventories [i] = input('Enter inventory #{}: '.format(i))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52618980_52619211_16_24
52618980_52619211_26_46
Title: PyQt4 Scroll area can't expand (scroll) when new widget added 
----------------------------------------

def __init__(self, text, left = True) :
INDENT
    super(MyWidget, self).__init__()
    lay = QtGui.QVBoxLayout(self)
    lay.setContentsMargins(0, 0, 0, 0)
    self.setContentsMargins(0, 0, 0, 0)
    label = Bubble(text)
    lay.addWidget(label, alignment = QtCore.Qt.AlignLeft if left else QtCore.Qt.AlignRight)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Chatting, self).__init__(parent)
    widget = QtGui.QWidget()
    self.vbox = QtGui.QVBoxLayout(widget)
    self.vbox.addStretch()
    self.scroll = QtGui.QScrollArea(widgetResizable = True)
    self.scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
    self.scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
    self.scroll.setWidget(widget)

    send = QtGui.QPushButton(icon = QtGui.QIcon('images/send.png'))
    send.setStyleSheet("background-color:#d00001; width: 44px")
    send.setIconSize(QtCore.QSize(84, 20))
    send.clicked.connect(self.on_clicked)
    vLayout = QtGui.QVBoxLayout(self)
    vLayout.addWidget(self.scroll)
    vLayout.addWidget(send)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52621192_52621353_2_15
52621192_52621414_2_10
Title: OOP / try except statements in __init__ of class 
----------------------------------------

def __init__(self, link) :
INDENT
    prefix = ['http', 'https']
    suffix = ['com', 'net']
    try :
    INDENT
        if link.split(':') [0] in prefix and link.split('.') [- 1] in suffix :
        INDENT

            self.link = link
        DEDENT
        else :
        INDENT
            raise ValueError('Invalid link')
        DEDENT
    DEDENT
    except ValueError as exp :
    INDENT
        print ("the value error is {}\nthe link specified is {} ".format(exp, link))
    DEDENT
DEDENT
----------------------------------------

def __init__(self, link) :
INDENT
    prefix = ['http', 'https']
    suffix = ['com', 'net']
    if link.split(':') [0] in prefix and link.split('.') [- 1] in suffix :
    INDENT
        self.link = link
    DEDENT
    else :
    INDENT
        self.link = 'Invalid link'

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52621192_52621353_2_15
52621192_52621508_2_9
Title: OOP / try except statements in __init__ of class 
----------------------------------------

def __init__(self, link) :
INDENT
    prefix = ['http', 'https']
    suffix = ['com', 'net']
    try :
    INDENT
        if link.split(':') [0] in prefix and link.split('.') [- 1] in suffix :
        INDENT

            self.link = link
        DEDENT
        else :
        INDENT
            raise ValueError('Invalid link')
        DEDENT
    DEDENT
    except ValueError as exp :
    INDENT
        print ("the value error is {}\nthe link specified is {} ".format(exp, link))
    DEDENT
DEDENT
----------------------------------------

def __init__(self, link) :
INDENT
    prefix = ('http', 'https')
    suffix = ('com', 'net')
    if (link.startswith(prefix)) and (link.endswith(suffix)) :
    INDENT
        self.link = link
    DEDENT
    else :
    INDENT
        raise ValueError('Invalid link')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52621192_52621414_2_10
52621192_52621508_2_9
Title: OOP / try except statements in __init__ of class 
----------------------------------------

def __init__(self, link) :
INDENT
    prefix = ['http', 'https']
    suffix = ['com', 'net']
    if link.split(':') [0] in prefix and link.split('.') [- 1] in suffix :
    INDENT
        self.link = link
    DEDENT
    else :
    INDENT
        self.link = 'Invalid link'

    DEDENT
DEDENT
----------------------------------------

def __init__(self, link) :
INDENT
    prefix = ('http', 'https')
    suffix = ('com', 'net')
    if (link.startswith(prefix)) and (link.endswith(suffix)) :
    INDENT
        self.link = link
    DEDENT
    else :
    INDENT
        raise ValueError('Invalid link')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52623799_52639291_143_156
52623799_52639291_25_43
Title: Use paho-mqtt with PyQt 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Widget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    self.lcd_number = QtWidgets.QLCDNumber()
    lay.addWidget(self.lcd_number)
    self.client = MqttClient(self)
    self.client.stateChanged.connect(self.on_stateChanged)
    self.client.messageSignal.connect(self.on_messageSignal)
    self.client.hostname = "broker.hivemq.com"
    self.client.connectToHost()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MqttClient, self).__init__(parent)
    self.m_hostname = ""
    self.m_port = 1883
    self.m_keepAlive = 60
    self.m_cleanSession = True
    self.m_protocolVersion = MqttClient.MQTT_3_1
    self.m_state = MqttClient.Disconnected
    self.m_client = mqtt.Client(clean_session = self.m_cleanSession,
        protocol = self.protocolVersion)
    self.m_client.on_connect = self.on_connect
    self.m_client.on_message = self.on_message
    self.m_client.on_disconnect = self.on_disconnect

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52631694_52632087_3_9
52631694_52632553_1_9
Title: Replacing string character in python 
----------------------------------------

def clean_text(text_in, alfabeth) :
INDENT
    for x in range(len(text_in)) :
    INDENT
        if text_in [x] in alfabeth :
        INDENT
            continue
        DEDENT
        else :
        INDENT
            text_in [x] = '?'
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def clean_text(word) :
INDENT
    alphabeth = 'vshthstmpd'
    for idx, item in enumerate(word) :
    INDENT
        if item == ' ' :
        INDENT
            pass
        DEDENT
        elif item not in alphabeth :
        INDENT
            word [idx] = '?'
        DEDENT
    DEDENT
    return ''.join(word)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52633033_52635039_28_36
52633033_52635039_49_59
Title: how to add the image one by one into each cell of the grid by using pushbutton 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(QV, self).__init__(parent)
    self.size_cell = QtCore.QSize(100, 100)
    self.xcells, self.ycells = 5, 3
    scene = QS(self.xcells, self.ycells, self.size_cell, self)
    self.setScene(scene)
    self._i = 0
    self._j = 0
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Example, self).__init__(parent)
    self.view = QV()
    btn = QtGui.QPushButton("measure")
    btn.clicked.connect(self.on_clicked)
    vbox = QtGui.QVBoxLayout(self)
    vbox.addWidget(btn)
    vbox.addWidget(self.view)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52644466_52644592_5_12
52644466_52644655_5_12
Title: Add Dictionary to Class 
----------------------------------------

def __init__(self, name, health, lives, gender, inventory) :
INDENT
    self.name = name
    self.health = int(health)
    self.lives = int(lives)
    self.gender = gender
    self.inventory = []

DEDENT
----------------------------------------

def __init__(self, name, health, lives, gender, inventory) :
INDENT
    self.name = name
    self.health = int(health)
    self.lives = int(lives)
    self.gender = gender
    self.inventory = {}

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52649903_52650078_3_13
52649903_52650486_1_14
Title: Can someone explain how I made this code work? 
----------------------------------------

def counts(x) :
INDENT
    for i in range(len(x)) :
    INDENT
        count = 0
        for g in range(len(x)) :
        INDENT
            if x [g] == x [i] : count += 1
            else : continue
        DEDENT
        if x [i] == x [i - 1] :
        INDENT
            continue
        DEDENT
        else :
        INDENT
            print x [i], "occurs", count, "times."
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def counts(x) :
INDENT
    count = 0
    prev_character = x [0]
    while len(x) > 0 :
    INDENT
        curr_character = x [0]
        if prev_character == curr_character :
        INDENT
            count += 1
            x.pop(0)
        DEDENT
        else :
        INDENT
            print prev_character, "occurs", count, "times."
            prev_character = curr_character
            count = 0
        DEDENT
    DEDENT
    if count > 0 :
    INDENT
        print prev_character, " occurs", count, "times."
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52652407_52652535_7_30
52652407_52652719_12_36
Title: Recursion upside down triangle 
----------------------------------------

def recursive_triangle(k, n = 0) :
INDENT
    if n == 1 :
    INDENT
        return "*"

    DEDENT
    else :
    INDENT
        for i in range(1, n + 1) :
        INDENT
            return ("*" * n) + "\n" + (' ' * i) + triangle(n - 1).replace("\n", "\n ")
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def recursive_triangle(k, n = 0) :
INDENT
    if k == 0 :
    INDENT
        return ""
    DEDENT
    else :
    INDENT
        return "\n".join(["".join([" " * (n - k), "*" * k]), recursive_triangle(k - 1, n)])

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52656428_52656455_5_20
52656428_52667956_5_17
Title: "Problem with breaking a loop password generator" 
----------------------------------------

def validate() :
INDENT
    for attempt in range(3) :
    INDENT

        password = input("Enter a password that meets all of the requirments: ")
        if len(password) < 6 :
        INDENT
            print ("Your password must be at lest 6-20 letters")
            print ("attempt", attempt)
            continue
        DEDENT
        if re.search('[0-9]', password) is None :
        INDENT
            print ("Your password must have a number in it")
            continue
        DEDENT
        if re.search('[A-Z]', password) is None :
        INDENT
            print ("Your password must contain a capital letter in it")
            continue
        DEDENT
        print ("All password conditions have been met, great job your password is acceptable")
        return
    DEDENT
DEDENT
----------------------------------------

def validate(password) :
INDENT
    if len(password) < 6 :
    INDENT
        print ("Your password must be at lest 6-20 letters")
        return False
    DEDENT
    if re.search('[0-9]', password) is None :
    INDENT
        print ("Your password must have a number in it")
        return False
    DEDENT
    if re.search('[A-Z]', password) is None :
    INDENT
        print ("Your password must contain a capital letter in it")
        return False
    DEDENT
    print ("All password conditions have been met, great job your password is acceptable")
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52658557_52658619_1_8
52658557_52658812_1_6
Title: Why is my code not displaying the output? 
----------------------------------------

def readList() :
INDENT
    myList = []
    n = int(input())
    while n ! = 0 :
    INDENT
        n = int(input())
        myList.append(n)
    DEDENT
    return myList
DEDENT
----------------------------------------

def readList() :
INDENT
    n = int(input("Input from readList"))
    while n ! = 0 :
    INDENT
        n = int(input("Looped input from readList"))
        return n
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52669848_52670036_1_8
52669848_52670066_1_12
Title: How To Determine Grades in Python 
----------------------------------------

def printgrade(score) :
INDENT
    if score > = 90 : return "A"
    elif score > = 80 : return "B"
    elif score > = 70 : return "C"
    elif score > = 65 : return "D"
    elif score < = 64 : return "F"
    else : return "ERROR"
DEDENT
----------------------------------------

def printgrade(score) :
INDENT
    if score > = 90 :
    INDENT
        return "A"
    DEDENT
    elif score > = 80 :
    INDENT
        return "B"
    DEDENT
    elif score > = 70 :
    INDENT
        return "C"
    DEDENT
    elif score > = 65 :
    INDENT
        return "D"
    DEDENT
    else :
    INDENT
        return "F"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52673517_52673765_15_26
52673517_52673765_1_14
Title: IndexError: string index out of range using python 3.7 
----------------------------------------

def capitalize_sentence(s) :
INDENT
    sentences = s.split('.');
    result = ''
    for sentence in sentences :
    INDENT
        while sentence :
        INDENT
            result += sentence [0].upper()
            if sentence [0] ! = ' ' :
            INDENT
                result += sentence [1 :]
                result += '.'
                break
            DEDENT
            sentence = sentence [1 :]
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------

def capitalize_sentence(s) :
INDENT
    sentences = s.split('.');
    result = ''
    for sentence in sentences :
    INDENT
        for i, char in enumerate(sentence) :
        INDENT
            if char == ' ' :
            INDENT
                result += ' '
                continue
            DEDENT
            result += char.upper()
            result += sentence [i + 1 :]
            result += '.'
            break
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52677096_52677154_1_30
52677096_52677155_1_16
Title: Is it possible to go through all the if statements in the function? 
----------------------------------------

def ShortestDistance(maps, i, j, short, k) :
INDENT
    x = 0
    y = 0
    for a in range(0, len(maps)) :
    INDENT
        for b in range(0, len(maps [0])) :
        INDENT
            if maps [a] [b] == 2 :
            INDENT
                x = a
                y = b
            DEDENT
        DEDENT
    DEDENT
    if (i == x) and (j == y) :
    INDENT
        short = min(short, k)
        return short
    DEDENT
    maps [i] [j] = 3
    resx = []
    if within(i + 1, j) and possible(maps, i + 1, j) :
    INDENT
        resx.append(ShortestDistance(maps, i + 1, j, short, k + 1))
    DEDENT
    if within(i, j + 1) and possible(maps, i, j + 1) :
    INDENT
        resx.append(ShortestDistance(maps, i, j + 1, short, k + 1))
    DEDENT
    if within(i - 1, j) and possible(maps, i - 1, j) :
    INDENT
        resx.append(ShortestDistance(maps, i - 1, j, short, k + 1))
    DEDENT
    if within(i, j - 1) and possible(maps, i, j - 1) :
    INDENT
        resx.append(ShortestDistance(maps, i, j - 1, short, k + 1))
    DEDENT
    maps [i] [j] = 0
    return min(resx)
DEDENT
----------------------------------------

def ShortestDistance(maps, i, j, short, k) :
INDENT
    distances = []
    if within(i + 1, j) and possible(maps, i + 1, j) :
    INDENT
        distances.append(ShortestDistance(maps, i + 1, j, short, k + 1))
    DEDENT
    if within(i, j + 1) and possible(maps, i, j + 1) :
    INDENT
        distances.append(ShortestDistance(maps, i, j + 1, short, k + 1))
    DEDENT
    if within(i - 1, j) and possible(maps, i - 1, j) :
    INDENT
        distances.append(ShortestDistance(maps, i - 1, j, short, k + 1))
    DEDENT
    if within(i, j - 1) and possible(maps, i, j - 1) :
    INDENT
        distances.append(ShortestDistance(maps, i, j - 1, short, k + 1))
    DEDENT
    return min(distances)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52682777_52683971_4_14
52682777_52687546_1_16
Title: z3 python z3.If always False (keygen) 
----------------------------------------

def f_z3(a) :
INDENT
    return If(
        Or(a < = 47, a > 57),
        If(
            Or(a < = 64, a > 98),
            1,
            a - 55),
        a - 48)
DEDENT
----------------------------------------

def f_z3(a) :
INDENT
    global solver
    solver.add(
        Not(
            And(
                Or(a < = 47, a > 57),
                Or(a < = 64, a > 98))))
    return If(
        Or(a < = 47, a > 57),
        a - 55,
        a - 48)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52684858_52690196_13_25
52684858_52690196_58_79
Title: PyQt5 button in second window not working 
----------------------------------------

def init_ui(self) :
INDENT
    lay = QtWidgets.QVBoxLayout(self)
    self.ContactLab = QtWidgets.QLabel('Contact')
    self.ContactDropDown = QtWidgets.QComboBox(self)
    self.ContactDropDown.addItem('Please select a contact')
    lay.addWidget(self.ContactLab)
    lay.addWidget(self.ContactDropDown)
    lay.addStretch()
    self.ContactsFile = []
    self.loadContacts()
DEDENT
----------------------------------------

def init_ui(self) :
INDENT
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(QtWidgets.QLabel('Add New Contact'))
    flay = QtWidgets.QFormLayout()
    lay.addLayout(flay)
    lay.addStretch()
    self.NameLe = QtWidgets.QLineEdit()
    self.CodeNameLe = QtWidgets.QLineEdit()
    self.EmailLe = QtWidgets.QLineEdit(self)
    self.KeyLe = QtWidgets.QLineEdit(self)
    self.SubmitBtn = QtWidgets.QPushButton('Add Contact')
    self.SubmitBtn.clicked.connect(self.submitBtn_click)
    flay.addRow("Name: ", self.NameLe)
    flay.addRow("Code Name: ", self.CodeNameLe)
    flay.addRow("Email address: ", self.EmailLe)
    flay.addRow("Key: ", self.KeyLe)
    flay.addRow(self.SubmitBtn)
    self.setWindowTitle('Creat New Contact')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52689047_52689938_3_10
52689047_52690011_5_10
Title: Moving QSlider to Mouse Click Position 
----------------------------------------

def mousePressEvent(self, e) :
INDENT
    if e.button() == Qt.LeftButton :
    INDENT
        e.accept()
        x = e.pos().x()
        value = (self.maximum() - self.minimum()) * x / self.width() + self.minimum()
        self.setValue(value)
    DEDENT
    else :
    INDENT
        return super().mousePressEvent(self, e)
    DEDENT
DEDENT
----------------------------------------

def mousePressEvent(self, event) :
INDENT
    super(Slider, self).mousePressEvent(event)
    if event.button() == QtCore.Qt.LeftButton :
    INDENT
        val = self.pixelPosToRangeValue(event.pos())
        self.setValue(val)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52691214_52691244_1_10
52691214_52691261_3_9
Title: Square numbers in descending order until 1 
----------------------------------------

def sqr(num, mylist = None) :
INDENT
    mylist = mylist or []
    if num == 1 or num == 0 :
    INDENT
        mylist.append(num)
        return mylist
    DEDENT
    else :
    INDENT
        mylist.append(num ** 2)
        num = num - 1
        sqr(num, mylist)
    DEDENT
    return mylist
DEDENT
----------------------------------------

def sqr(num) :
INDENT
    if num == 1 :
    INDENT
        mylist.append(num)
        return mylist
    DEDENT
    else :
    INDENT
        mylist.append(num ** 2)
        return sqr(num - 1)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52692643_52692813_6_14
52692643_52692881_5_12
Title: "How do I get my (if ""input"" in list) to check every letter of the input and not just the first letter of input?" 
----------------------------------------

def textis(n, my_list) :
INDENT
    new = ''
    for letter in n :
    INDENT
        if letter in my_list :
        INDENT
            new += letter
        DEDENT
        else :
        INDENT
            new += "?"
        DEDENT
    DEDENT
    return new
DEDENT
----------------------------------------

def textis() :
INDENT
    for word in n.split() :
    INDENT
        for i in word :
        INDENT
            if i in alphabet :
            INDENT
                pass
            DEDENT
            else :
            INDENT
                word = word.replace(i, "?")
            DEDENT
        DEDENT
        print (word)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52697473_52703527_65_73
52697473_52703527_6_37
Title: Pass an input with button Tikinter python 3 
----------------------------------------

def __init__(self, master, i) :
INDENT
    self.master = master
    self.data = self.master.data
    self.root = tk.Tk()
    self.entry = []
    self.Grid()
    self.Buttom()
    self.root.mainloop()
DEDENT
----------------------------------------

def __init__(self, master, i) :
INDENT
    tk.Frame.__init__(self, master)
    self.data = master.data [i]
    self.command_text = tk.StringVar(value = self.data [0])
    self.label1_text = tk.StringVar(value = self.data [1])
    self.label2_text = tk.StringVar(value = self.data [2])
    self.grid()
    button = tk.Button(self,
        textvariable = self.command_text,
        command = lambda x = i : self.Command(x),
        width = 11)
    button.grid(column = 0, row = 0)
    label = tk.Label(self,
        textvariable = self.label1_text,
        borderwidth = 1, bg = 'white', relief = 'solid',
        fg = 'black', font = 'times 13 bold', height = 1,
        width = 11)
    label.grid(column = 1, row = 0)
    label = tk.Label(self,
        textvariable = self.label2_text,
        borderwidth = 1, bg = 'white', relief = 'solid', fg = 'black',
        font = 'times 13 bold', height = 1, width = 11)
    label.grid(column = 2, row = 0)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52698370_52698484_1_6
52698370_52698489_3_8
Title: What am I doing wrong in this file with pool.map which causes nothing appearing and I have to restart the shell? 
----------------------------------------

def f(x) :
INDENT
    lo = 0
    for i in range(x) :
    INDENT
        lo += i
    DEDENT
    return lo
DEDENT
----------------------------------------

def f(x) :
INDENT
    lo = 0
    for i in range(x) :
    INDENT
        lo += i
    DEDENT
    return lo
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52712330_52725415_31_39
52712330_52725415_42_59
Title: change text from panel to other panel in a SplitterWindow wxpython 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    self.grid = gridlib.Grid(self, style = wx.BORDER_SUNKEN)
    self.grid.CreateGrid(20, 8)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.grid, 1, wx.EXPAND)
    self.SetSizer(sizer)

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    notebook = wx.Notebook(self)
    page = wx.SplitterWindow(notebook)
    notebook.AddPage(page, "Splitter")
    hSplitter = wx.SplitterWindow(page)
    panelOne = OtherPanel(hSplitter)
    panelTwo = GridPanel(hSplitter)
    hSplitter.SplitVertically(panelOne, panelTwo)
    hSplitter.SetSashGravity(0.5)
    panelThree = RegularPanel(page, panelOne)
    page.SplitHorizontally(hSplitter, panelThree)
    page.SetSashGravity(0.5)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(notebook, 1, wx.EXPAND)
    self.SetSizer(sizer)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52712330_52725415_31_39
52712330_52725415_7_15
Title: change text from panel to other panel in a SplitterWindow wxpython 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    self.grid = gridlib.Grid(self, style = wx.BORDER_SUNKEN)
    self.grid.CreateGrid(20, 8)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.grid, 1, wx.EXPAND)
    self.SetSizer(sizer)

DEDENT
----------------------------------------

def __init__(self, parent, other_panel) :
INDENT
    wx.Panel.__init__(self, parent)
    frame = wx.GetTopLevelParent(self)
    self.other_panel = other_panel
    self.SetBackgroundColour("blue")
    button1 = wx.Button(self, label = "change the text")
    self.Bind(wx.EVT_BUTTON, self.OnChange, id = button1.GetId())
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52712330_52725415_42_59
52712330_52725415_7_15
Title: change text from panel to other panel in a SplitterWindow wxpython 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    notebook = wx.Notebook(self)
    page = wx.SplitterWindow(notebook)
    notebook.AddPage(page, "Splitter")
    hSplitter = wx.SplitterWindow(page)
    panelOne = OtherPanel(hSplitter)
    panelTwo = GridPanel(hSplitter)
    hSplitter.SplitVertically(panelOne, panelTwo)
    hSplitter.SetSashGravity(0.5)
    panelThree = RegularPanel(page, panelOne)
    page.SplitHorizontally(hSplitter, panelThree)
    page.SetSashGravity(0.5)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(notebook, 1, wx.EXPAND)
    self.SetSizer(sizer)

DEDENT
----------------------------------------

def __init__(self, parent, other_panel) :
INDENT
    wx.Panel.__init__(self, parent)
    frame = wx.GetTopLevelParent(self)
    self.other_panel = other_panel
    self.SetBackgroundColour("blue")
    button1 = wx.Button(self, label = "change the text")
    self.Bind(wx.EVT_BUTTON, self.OnChange, id = button1.GetId())
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52718771_52718991_1_8
52718771_52719380_1_26
Title: How do I align these two shapes to form a tree? 
----------------------------------------

def pyramid(height) :
INDENT
    for row in range(height) :
    INDENT
        for count in range(height - row) :
        INDENT
            print(end = " ")
        DEDENT
        for count in range(2 * row + 1) :
        INDENT
            print(end = "*")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def pyramid(height) :
INDENT
    for row in range(height) :
    INDENT
        for count in range(height - row) :
        INDENT
            print(end = " ")
        DEDENT
        for count in range(2 * row + 1) :
        INDENT
            print(end = "*")
        DEDENT
        print ()
    DEDENT
    def square(width) :
    INDENT
        if height % 2 == 0 :
        INDENT
            space = int((height / 2)) * ' '
        DEDENT
        else :
        INDENT
            space = int((height / 2) + 1) * ' '
        DEDENT
        for i in range(width) :
        INDENT
            print(end = space)
            for j in range(width) :
            INDENT
                print('*', end = '')
            DEDENT
            print ()
        DEDENT
    DEDENT
    height = int(input("Enter height of the branches: "))

    width = int(input("Enter width of the stem: "))
    pyramid(height)
    square(width)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52718771_52718991_9_16
52718771_52719380_9_20
Title: How do I align these two shapes to form a tree? 
----------------------------------------

def square(width, pyramid_height) :
INDENT
    for i in range(width) :
    INDENT
        print(' ' * (pyramid_height - width / / 2), end = '')
        for j in range(width) :
        INDENT
            print('*', end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def square(width) :
INDENT
    if height % 2 == 0 :
    INDENT
        space = int((height / 2)) * ' '
    DEDENT
    else :
    INDENT
        space = int((height / 2) + 1) * ' '
    DEDENT
    for i in range(width) :
    INDENT
        print(end = space)
        for j in range(width) :
        INDENT
            print('*', end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52722787_52723547_10_30
52722787_52724841_1_14
Title: "Problem sending binary files via sockets python" 
----------------------------------------

def recv_file(self, conn, filename) :
INDENT
    expected_size = b""
    while len(expected_size) < 8 :
    INDENT
        more_size = conn.recv(8 - len(expected_size))
        if not more_size :
        INDENT
            raise Exception("Short file length received")
        DEDENT
        expected_size += more_size

    DEDENT
    expected_size = int.from_bytes(expected_size, 'big')

    packet = b""
    while len(packet) < expected_size :
    INDENT
        buffer = conn.recv(expected_size - len(packet))
        if not buffer :
        INDENT
            raise Exception("Incomplete file received")
        DEDENT
        packet += buffer
    DEDENT
    with open(filename, 'wb') as f :
    INDENT
        f.write(packet)
    DEDENT
DEDENT
----------------------------------------

def recv_file(self, conn, filename) :
INDENT
    expected_size = b""
    while len(expected_size) < 8 :
    INDENT
        more_size = conn.recv(8 - len(expected_size))
        if not more_size :
        INDENT
            raise Exception("Short file length received")
        DEDENT
        expected_size += more_size
    DEDENT
    expected_size = int.from_bytes(expected_size, 'big')
    with open(filename, 'wb') as f :
    INDENT
        while f.tell() < expected_size :
        INDENT
            bytes_recvd = conn.recv()
            f.write(bytes_recvd)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52727201_52727670_1_16
52727201_52727779_1_13
Title: How to set condition in a list to check if the value is less than 0 
----------------------------------------

def weighted_avg(grades, weights) :
INDENT
    for x in grades :
    INDENT
        if x < 0 :
        INDENT
            print ("a grade is less than 0")
        DEDENT
    DEDENT
    if sum(weights) < 0 :
    INDENT
        print ("weight is less than 0")
    DEDENT
    elif sum(weights) > 100 :
    INDENT
        print ("weight is greater than 100")
    DEDENT
    elif sum(weights) ! = 100 :
    INDENT
        print ("weight do not add to 100")
    DEDENT
    else :
    INDENT
        s = 0
        for x, y in zip(grades, weights) :
        INDENT
            s += x * y
        DEDENT
        return s / sum(weights)
    DEDENT
DEDENT
----------------------------------------

def weighted_avg(grades, weights) :
INDENT
    total_weight = sum(weights)
    if total_weight < 0 or total_weight > 100 :
    INDENT
        print ("Total weights not between 0 and 100")
    DEDENT
    elif total_weight ! = 100 :
    INDENT
        print ("Total weights do not total 100")
    DEDENT
    elif any(x < 0 for x in grades) :
    INDENT
        print ("A grade is less than 0")
    DEDENT
    else :
    INDENT
        cumulative_grades = sum(x * y for x, y in zip(grades, weights))
        return cumulative_grades / total_weight
    DEDENT
    return 0
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52728192_52728233_4_14
52728192_52728353_5_16
Title: Adding a range of numbers python 2.7 
----------------------------------------

def calc(first, second) :
INDENT
    sumOdds = 0
    for i in range(first, second + 1) :
    INDENT
        if i % 2 == 0 :
        INDENT
            print 'Even: ', i
        DEDENT
        else :
        INDENT
            sumOdds += i
        DEDENT
    DEDENT
    print (sumOdds)
DEDENT
----------------------------------------

def calc(first, second) :
INDENT
    for even in range(first, second + 1) :
    INDENT
        if not even % 2 :
        INDENT
            print ('Even: ', even)
        DEDENT
    DEDENT
    for odd in range(first, second + 1) :
    INDENT
        if odd % 2 :
        INDENT
            print ('Odd: ', odd)
        DEDENT
    DEDENT
    return sum(range(first, second + 1))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52728368_52728485_4_13
52728368_52728543_6_14
Title: Python- Adding odd numbers in a range including the limits? 
----------------------------------------

def SumOdds(x, y) :
INDENT
    count = 0
    for i in range(x, y) :
    INDENT
        if (int(i % 2 == 1)) :
        INDENT
            count = count + i
        DEDENT
    DEDENT
    if (x % 2 == 0) :
    INDENT
        count = count + x
    DEDENT
    if (y % 2 == 0) :
    INDENT
        count = count + 7
    DEDENT
    print (count)
DEDENT
----------------------------------------

def SumOdds(x, y) :
INDENT
    count = x + y

    for i in range(x + 1, y) :
    INDENT
        if (int(i % 2 == 1)) :
        INDENT
            count = count + i
        DEDENT
    DEDENT
    print (count)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52743006_52743488_2_10
52743006_52744319_5_11
Title: "Python - Get random color given a seed number as fast as possible" 
----------------------------------------

def id_to_random_color(number) :
INDENT
    if not number in memory :
    INDENT
        numByte = str.encode(number)
        hashObj = hashlib.sha1(numByte).digest()
        r, g, b = hashObj [- 1] / 255.0, hashObj [- 2] / 255.0, hashObj [- 3] / 255.0
        memory [number] = (r, g, b, 1.0)
        return r, g, b, 1.0
    DEDENT
    else :
    INDENT
        return memory [number]
    DEDENT
DEDENT
----------------------------------------

def id_to_random_color(number) :
INDENT
    if number in random_seeds.keys() :
    INDENT
        return random_seeds [number]
    DEDENT
    else :
    INDENT
        color = [random.random(), random.random(), random.random(), 1.0]
        random_seeds [number] = color
        return color
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52747523_52747697_1_41
52747523_52747699_5_12
Title: "How to make a text file (name1:hobby1 name2:hobby2) into this (name1:hobby1 hobby2 name2:hobby1 hobby2)?" 
----------------------------------------

def create_dictionary(file) :
INDENT
    names = {}

    with open("hobbies_database.txt", "r") as file :
    INDENT
        for row in file :
        INDENT

            name, hobby = row.strip().split(":")

            if name not in names :
            INDENT

                names [name] = []

            DEDENT
            names [name].append(hobby)

        DEDENT
    DEDENT
    for name in names :
    INDENT
        print ("{0}: {1}\n".format(name, ", ".join(set(names [name]))))
    DEDENT
DEDENT
----------------------------------------

def create_dictionary(inputfile) :
INDENT
    d = defaultdict(list)
    for line in inputfile :
    INDENT
        name, hobby = line.split(':', 1)
        d [name].append(hobby.strip())
    DEDENT
    return d

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52748727_52749748_9_23
52748727_52753480_8_19
Title: Scrapy Next Page not redirecting 
----------------------------------------

def parse(self, response) :
INDENT
    priceData = response.css(".price__fraction::text").extract()
    titleData = response.css(".main-title::text").extract()
    for i in range(len(priceData)) :
    INDENT
        yield {
            'title' : titleData [i],
            'price' : priceData [i]}
    DEDENT
    nextPage = response.css('a.prefetch::attr(href)').extract_first()
    if nextPage is not None :
    INDENT
        yield Request(url = nextPage, callback = self.parse)
    DEDENT
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    for item in response.css(".results-item") :
    INDENT
        titleData = item.css(".main-title::text").extract_first()
        priceData = item.css(".price__fraction::text").extract_first()
        yield {
            'title' : titleData,
            'price' : priceData}
    DEDENT
    nextPage = response.css('a.prefetch::attr(href)').extract_first()
    if nextPage :
    INDENT
        yield Request(url = nextPage, callback = self.parse)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52751121_52752884_12_26
52751121_52752884_170_180
Title: PyQT User Editable Polygons 
----------------------------------------

def __init__(self, annotation_item, index) :
INDENT
    super(GripItem, self).__init__()
    self.m_annotation_item = annotation_item
    self.m_index = index
    self.setPath(GripItem.circle)
    self.setBrush(QtGui.QColor("green"))
    self.setPen(QtGui.QPen(QtGui.QColor("green"), 2))
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsSelectable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsGeometryChanges, True)
    self.setAcceptHoverEvents(True)
    self.setZValue(11)
    self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(AnnotationWindow, self).__init__(parent)
    self.m_view = AnnotationView()
    self.m_scene = AnnotationScene(self)
    self.m_view.setScene(self.m_scene)
    self.setCentralWidget(self.m_view)
    self.create_menus()
    QtWidgets.QShortcut(QtCore.Qt.Key_Escape, self, activated = partial(self.m_scene.setCurrentInstruction, Instructions.No_Instruction))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52751121_52752884_12_26
52751121_52752884_48_62
Title: PyQT User Editable Polygons 
----------------------------------------

def __init__(self, annotation_item, index) :
INDENT
    super(GripItem, self).__init__()
    self.m_annotation_item = annotation_item
    self.m_index = index
    self.setPath(GripItem.circle)
    self.setBrush(QtGui.QColor("green"))
    self.setPen(QtGui.QPen(QtGui.QColor("green"), 2))
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsSelectable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsGeometryChanges, True)
    self.setAcceptHoverEvents(True)
    self.setZValue(11)
    self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(PolygonAnnotation, self).__init__(parent)
    self.m_points = []
    self.setZValue(10)
    self.setPen(QtGui.QPen(QtGui.QColor("green"), 2))
    self.setAcceptHoverEvents(True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsSelectable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsGeometryChanges, True)
    self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
    self.m_items = []
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52751121_52752884_170_180
52751121_52752884_48_62
Title: PyQT User Editable Polygons 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(AnnotationWindow, self).__init__(parent)
    self.m_view = AnnotationView()
    self.m_scene = AnnotationScene(self)
    self.m_view.setScene(self.m_scene)
    self.setCentralWidget(self.m_view)
    self.create_menus()
    QtWidgets.QShortcut(QtCore.Qt.Key_Escape, self, activated = partial(self.m_scene.setCurrentInstruction, Instructions.No_Instruction))
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(PolygonAnnotation, self).__init__(parent)
    self.m_points = []
    self.setZValue(10)
    self.setPen(QtGui.QPen(QtGui.QColor("green"), 2))
    self.setAcceptHoverEvents(True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsSelectable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable, True)
    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsGeometryChanges, True)
    self.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
    self.m_items = []
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52751121_52752884_41_46
52751121_52752884_94_99
Title: PyQT User Editable Polygons 
----------------------------------------

def itemChange(self, change, value) :
INDENT
    if change == QtWidgets.QGraphicsItem.ItemPositionChange and self.isEnabled() :
    INDENT
        self.m_annotation_item.movePoint(self.m_index, value)
    DEDENT
    return super(GripItem, self).itemChange(change, value)

DEDENT
----------------------------------------

def itemChange(self, change, value) :
INDENT
    if change == QtWidgets.QGraphicsItem.ItemPositionHasChanged :
    INDENT
        for i, point in enumerate(self.m_points) :
        INDENT
            self.move_item(i, self.mapToScene(point))
        DEDENT
    DEDENT
    return super(PolygonAnnotation, self).itemChange(change, value)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52751675_52753599_1_11
52751675_52757159_20_28
Title: How to make a topic public to all users in django? 
----------------------------------------

def topic(request, topic_id) :
INDENT
    topic = get_object_or_404(Topic, id = topic_id)
    if topic.public :
    INDENT
        check_user = check_topic_owner(request, topic)
        entries = topic.entry_set.order_by('-date_added')
        context = {'topic' : topic, 'entries' : entries}
        return render(request, 'learning_logs/topic.html', context)
    DEDENT
    else :
    INDENT
        return HttpResponseRedirect(reverse('access_dennined'))
    DEDENT
DEDENT
----------------------------------------

def topic(request, topic_id) :
INDENT
    topics = _get_topics_for_user(request.user)

    topic = get_object_or_404(topics, id = topic_id)
    entries = topic.entry_set.order_by('-date_added')
    context = {'topic' : topic, 'entries' : entries}
    return render(request, 'learning_logs/topic.html', context)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52761039_52761189_5_12
52761039_52761200_2_9
Title: Printing a class attribute 
----------------------------------------

def __init__(self, x, y, z, vx, vy, vz) :
INDENT
    self.x = x
    self.y = y
    self.z = z
    self.vx = vx
    self.vy = vy
    self.vz = vz
DEDENT
----------------------------------------

def __init__(self, x, y, z, vx, vy, vz) :
INDENT
    self.x = x
    self.y = y
    self.z = z
    self.vx = vx
    self.vy = vy
    self.vz = vz
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52766301_52766498_3_43
52766301_52766939_1_28
Title: "Printing a ""W"" pattern with alphabets 'abcdefghi' for Python" 
----------------------------------------

def stringing(s, n) :
INDENT
    if (n == 1) :
    INDENT
        print (s)
        return
    DEDENT
    l = len(s)

    a = [[" " for x in range(l)] for y in range(l)]

    row = 0
    for i in range(l) :
    INDENT

        a [row] [i] = s [i];
        if row == n - 1 :
        INDENT
            down = False
        DEDENT
        elif row == 0 :
        INDENT
            down = True
        DEDENT
        if down == True :
        INDENT
            row = row + 1
        DEDENT
        else :
        INDENT
            row = row - 1

        DEDENT
    DEDENT
    for i in range(n) :
    INDENT
        for j in range(l) :
        INDENT
            print(str(a [i] [j]), end = " ")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def stringing(sentence, start) :
INDENT
    if start == 'T' :
    INDENT

        offset1 = '   '
        offset2 = ' '
        str1 = ''
        str2 = ' '
        str3 = '  '
        str_number = 1
        for letter in sentence :
        INDENT
            if str_number % 4 == 1 :
            INDENT
                str1 += letter + offset1
            DEDENT
            if str_number % 2 == 0 :
            INDENT
                str2 += letter + offset2
            DEDENT
            if str_number % 4 == 3 :
            INDENT
                str3 += letter + offset1
            DEDENT
            str_number += 1
        DEDENT
        print (str1)
        print (str2)
        print (str3)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52771247_52771754_30_39
52771247_52771824_33_43
Title: How to link the dialog button to main window function and also make close event separate from the function 
----------------------------------------

def getDialogInfo(self, dialogue) :
INDENT
    self.avalue = float(dialogue.alineEdit.text())
    self.bvalue = float(dialogue.blineEdit.text())
    res = str(self.avalue + self.bvalue)
    self.lineEdit.setText(res)
    with open("result.txt", "w") as file :
    INDENT
        file.write(res)
    DEDENT
    QtGui.QDesktopServices.openUrl(QtCore.QUrl.fromLocalFile(os.path.join(currentdir, "result.txt")))

DEDENT
----------------------------------------

def getDialogInfo(self, data_dict) :
INDENT
    self.avalue = float(data_dict ["aline"])
    self.bvalue = float(data_dict ["bline"])
    sum = str(self.avalue + self.bvalue)
    self.lineEdit.setText(sum)
    file = open("result.txt", "w")
    file.write(sum)
    file.close()
    QtGui.QDesktopServices.openUrl(QtCore.QUrl.fromLocalFile(currentdir + "/result.txt"))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5277858_5305053_5_19
5277858_7869000_10_27
Title: "Progress gauge in status bar using Cody Precord's ProgressStatusBar" 
----------------------------------------

def __init__(self, * args, ** kargs) :
INDENT
    wx.Frame.__init__(self, * args, ** kargs)
    self.bt = wx.Button(self)
    self.status = ProgressStatusBar(self)
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.Bind(wx.EVT_BUTTON, self.on_bt, self.bt)
    self.sizer.Add(self.bt, 1, wx.EXPAND)
    self.sizer.Add(self.status, 1, wx.EXPAND)
    self.SetSizer(self.sizer)
    self.Fit()
    self.SetSize((500, 200))
DEDENT
----------------------------------------

def __init__(self, parent, id_ = wx.ID_ANY,
style = wx.SB_FLAT, name = 'ProgressStatusBar') :
INDENT
    super(ProgressStatusBar, self).__init__(parent, id_, style, name)
    self._changed = False
    self.busy = False
    self.timer = wx.Timer(self)
    self.prog = wx.Gauge(self, style = wx.GA_HORIZONTAL)
    self.prog.Hide()
    self.SetFieldsCount(2)
    self.SetStatusWidths([- 1, 155])
    self.Bind(wx.EVT_IDLE, lambda evt : self.__Reposition())
    self.Bind(wx.EVT_TIMER, self.OnTimer)
    self.Bind(wx.EVT_SIZE, self.OnSize)
    self.Bind(EVT_PROGRESSBAR, self.OnProgress)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5277858_5305053_5_19
5277858_7869000_99_125
Title: "Progress gauge in status bar using Cody Precord's ProgressStatusBar" 
----------------------------------------

def __init__(self, * args, ** kargs) :
INDENT
    wx.Frame.__init__(self, * args, ** kargs)
    self.bt = wx.Button(self)
    self.status = ProgressStatusBar(self)
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.Bind(wx.EVT_BUTTON, self.on_bt, self.bt)
    self.sizer.Add(self.bt, 1, wx.EXPAND)
    self.sizer.Add(self.status, 1, wx.EXPAND)
    self.SetSizer(self.sizer)
    self.Fit()
    self.SetSize((500, 200))
DEDENT
----------------------------------------

def __init__(self, * args, ** kargs) :
INDENT
    wx.Frame.__init__(self, * args, ** kargs)
    self.bt = wx.Button(self)
    self.bt.SetLabel("Start!")
    self.status = ProgressStatusBar(self)
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.Bind(wx.EVT_BUTTON, self.handleButton, self.bt)
    self.sizer.Add(self.bt, 1, wx.EXPAND)
    self.SetStatusBar(self.status)
    self.SetSizer(self.sizer)
    self.Fit()
    self.SetSize((600, 200))

    self.isRunning = False

    self.niter = 200

    self.jobID = 0
    self.abortEvent = delayedresult.AbortEvent()
    self.Bind(wx.EVT_CLOSE, self.handleClose)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5277858_7869000_10_27
5277858_7869000_99_125
Title: "Progress gauge in status bar using Cody Precord's ProgressStatusBar" 
----------------------------------------

def __init__(self, parent, id_ = wx.ID_ANY,
style = wx.SB_FLAT, name = 'ProgressStatusBar') :
INDENT
    super(ProgressStatusBar, self).__init__(parent, id_, style, name)
    self._changed = False
    self.busy = False
    self.timer = wx.Timer(self)
    self.prog = wx.Gauge(self, style = wx.GA_HORIZONTAL)
    self.prog.Hide()
    self.SetFieldsCount(2)
    self.SetStatusWidths([- 1, 155])
    self.Bind(wx.EVT_IDLE, lambda evt : self.__Reposition())
    self.Bind(wx.EVT_TIMER, self.OnTimer)
    self.Bind(wx.EVT_SIZE, self.OnSize)
    self.Bind(EVT_PROGRESSBAR, self.OnProgress)
DEDENT
----------------------------------------

def __init__(self, * args, ** kargs) :
INDENT
    wx.Frame.__init__(self, * args, ** kargs)
    self.bt = wx.Button(self)
    self.bt.SetLabel("Start!")
    self.status = ProgressStatusBar(self)
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.Bind(wx.EVT_BUTTON, self.handleButton, self.bt)
    self.sizer.Add(self.bt, 1, wx.EXPAND)
    self.SetStatusBar(self.status)
    self.SetSizer(self.sizer)
    self.Fit()
    self.SetSize((600, 200))

    self.isRunning = False

    self.niter = 200

    self.jobID = 0
    self.abortEvent = delayedresult.AbortEvent()
    self.Bind(wx.EVT_CLOSE, self.handleClose)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52788125_52792350_9_28
52788125_52796177_9_20
Title: How to scrape a new link with Scrapy 
----------------------------------------

def parse(self, response) :
INDENT
    name = response.xpath('//*[@class="companyName"]')
    number = response.xpath('//*[@class="boothLabel"]')
    link = response.xpath('//*[@class="companyName"]')
    for row, row1, row2 in zip(name, number, link) :
    INDENT
        company = row.xpath('.//*[@class="exhibitorName"]/text()').extract_first(),
        booth_num = row1.xpath('.//*[@class="boothLabel aa-mapIt"]/text()').extract_first()
        next_page_url = row2.xpath('.//a/@href').extract_first()
        next_page_url = response.urljoin(next_page_url)

        yield scrapy.Request(next_page_url, callback = self.parse_page, meta = {'Company' : company, 'Booth Number' : booth_num})
        def parse(self, response) :
        INDENT
            company = response.meta.get('Company')
            booth_num = response.meta.get('Booth Number')
            website = response.xpath('//a[@class="aa-BoothContactUrl"]/text()').extract_first()
            yield {'Company' : company, 'Booth Number' : booth_num, 'Website' : website}
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    name = response.xpath('//*[@class="companyName"]')
    number = response.xpath('//*[@class="boothLabel"]')
    link = response.xpath('//*[@class="companyName"]')
    for row, row1, row2 in zip(name, number, link) :
    INDENT
        company = row.xpath('.//*[@class="exhibitorName"]/text()').extract_first(),
        booth_num = row1.xpath('.//*[@class="boothLabel aa-mapIt"]/text()').extract_first()
        next_page_url = row2.xpath('.//a/@href').extract_first()
        next_page_url = response.urljoin(next_page_url)
        yield Request(next_page_url, callback = self.parse_page, meta = {'Company' : company, 'Booth Number' : booth_num}, dont_filter = True)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52788481_52789616_1_10
52788481_52790141_3_15
Title: "How do I resolve ""TypeError: string indices must be integers"" error?" 
----------------------------------------

def closest(s, queries) :
INDENT
    for query in queries :
    INDENT
        c = s [query]
        for i in s [query :] :
        INDENT
            if i == c :
            INDENT
                print (i, (s [query + 1 :].index(i) + query + 1))
                break
            DEDENT
            else :
            INDENT
                pass
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def closest(s, queries) :
INDENT
    print ('String: ', s)
    print ('Query: ', queries)
    results = []
    for query in queries :
    INDENT
        c = s [query]
        if s [query] in s [query + 1 :] :
        INDENT
            results.append(('query = {}'.format(query), 'character = {}'.format(c), 'index of next occurrence = {}'.format(1 + query + s [query + 1 :].index(c))))
        DEDENT
        else :
        INDENT
            results.append(('query = {}'.format(query), 'character = {}'.format(c), 'index of next occurrence = {}'.format(- 1)))
        DEDENT
    DEDENT
    return results
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52793741_52794397_4_24
52793741_52799678_3_22
Title: Code to recursively remove adjacent duplicate letters of even count 
----------------------------------------

def remUtil(str) :
INDENT
    i = 0
    ind = 0
    while i < len(str) - 1 :
    INDENT
        j = 0
        if str [i] == str [i + 1] :
        INDENT
            j = i
            ind = i
            count = 0
            while j < len(str) - 1 and str [j] == str [j + 1] :
            INDENT
                count = count + 1
                j = j + 1
                i = i + 1
            DEDENT
            if count % 2 ! = 0 :
            INDENT
                str = str [: (ind)] + str [(ind + count) + 1 :]
                str = remUtil(str)
            DEDENT
        DEDENT
        else :
        INDENT
            i = i + 1
        DEDENT
    DEDENT
    return str
DEDENT
----------------------------------------

def remUtil(str_or_list) :
INDENT
    characters = []
    length = 0
    for _, group in groupby(str_or_list) :
    INDENT
        sub_characters = list(group)
        sub_length = len(sub_characters)
        if sub_length % 2 :
        INDENT
            characters.extend(sub_characters)
            length += sub_length
        DEDENT
    DEDENT
    if length == len(str_or_list) :
    INDENT
        return str_or_list if isinstance(str_or_list, str) else ''.join(str_or_list)
    DEDENT
    return remUtil(characters)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5279641_5284367_10_16
5279641_5284367_57_65
Title: Need help creating a TCP relay between two sockets 
----------------------------------------

def handle_read(self) :
INDENT
    data = self.recv(4096)

    if self.server :
    INDENT
        self.server.send(data)
    DEDENT
DEDENT
----------------------------------------

def handle_read(self) :
INDENT
    data = self.recv(4096)
    if not self.listener :
    INDENT
        self.listener = Listener(self.listener_addr, self)
    DEDENT
    elif self.user :
    INDENT
        self.user.send(data)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52804344_52804740_1_13
52804344_52805048_3_19
Title: "Trying a function to get data in separate ranges tally it and return a list of the tallies" 
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    count = 0
    bin_list = []
    bin_width = int(max_salary / n_bins)
    for bins in range(0, max_salary + 1, bin_width) :
    INDENT
        bin_list.append(bins)
    DEDENT
    sal_list = [0] * len(bin_list)
    for val in data.values() :
    INDENT
        if val ['salary'] :
        INDENT
            for index, n in enumerate(bin_list) :
            INDENT
                if math.floor(n) < = float(val ['salary']) < math.floor(n + bin_width) :
                INDENT
                    sal_list [index] += 1
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return sal_list
DEDENT
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = [0 for _ in range(n_bins)]
    bin_width = max_salary / / n_bins
    for item in data.values() :
    INDENT
        salary = float(item ['salary'])
        for i in range(n_bins) :
        INDENT
            low = floor(float(i * bin_width))
            high = floor(float(low + bin_width))
            if (salary is not None) and (low < = salary < high) :
            INDENT
                sal_list [i] += 1
                break
            DEDENT
        DEDENT
    DEDENT
    return sal_list

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52804344_52804740_1_13
52804344_52805050_4_20
Title: "Trying a function to get data in separate ranges tally it and return a list of the tallies" 
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    count = 0
    bin_list = []
    bin_width = int(max_salary / n_bins)
    for bins in range(0, max_salary + 1, bin_width) :
    INDENT
        bin_list.append(bins)
    DEDENT
    sal_list = [0] * len(bin_list)
    for val in data.values() :
    INDENT
        if val ['salary'] :
        INDENT
            for index, n in enumerate(bin_list) :
            INDENT
                if math.floor(n) < = float(val ['salary']) < math.floor(n + bin_width) :
                INDENT
                    sal_list [index] += 1
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return sal_list
DEDENT
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = []
    bin_list = []
    bin_width = int(max_salary / n_bins)
    for bins in range(0, max_salary + 1, bin_width) :
    INDENT
        bin_list.append(bins)
    DEDENT
    sal_list = [0] * (len(bin_list) - 1)
    df = pd.DataFrame(data)
    for sal in range(0, len(df) - 1) :
    INDENT
        salary = float(df.loc ['salary'] [sal])
        for i in range(len(bin_list) - 1, - 1, - 1) :
        INDENT
            if salary > bin_list [i] :
            INDENT
                sal_list [i] += 1
                break
            DEDENT
        DEDENT
    DEDENT
    return sal_list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52804344_52804794_1_13
52804344_52805048_3_19
Title: "Trying a function to get data in separate ranges tally it and return a list of the tallies" 
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = [0] * n_bins
    bin_list = []
    bin_width = int(max_salary / n_bins)
    for bins in range(0, max_salary + 1, bin_width) :
    INDENT
        bin_list.append(bins)
    DEDENT
    for val in data.values() :
    INDENT
        if val ['salary'] == None :
        INDENT
            continue
        DEDENT
        for i in range(n_bins) :
        INDENT
            if math.floor(i * bin_width) < = float(val ['salary']) < math.floor((i + 1) * bin_width) :
            INDENT
                sal_list [i] += 1
            DEDENT
        DEDENT
    DEDENT
    return sal_list
DEDENT
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = [0 for _ in range(n_bins)]
    bin_width = max_salary / / n_bins
    for item in data.values() :
    INDENT
        salary = float(item ['salary'])
        for i in range(n_bins) :
        INDENT
            low = floor(float(i * bin_width))
            high = floor(float(low + bin_width))
            if (salary is not None) and (low < = salary < high) :
            INDENT
                sal_list [i] += 1
                break
            DEDENT
        DEDENT
    DEDENT
    return sal_list

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52804344_52804794_1_13
52804344_52805050_4_20
Title: "Trying a function to get data in separate ranges tally it and return a list of the tallies" 
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = [0] * n_bins
    bin_list = []
    bin_width = int(max_salary / n_bins)
    for bins in range(0, max_salary + 1, bin_width) :
    INDENT
        bin_list.append(bins)
    DEDENT
    for val in data.values() :
    INDENT
        if val ['salary'] == None :
        INDENT
            continue
        DEDENT
        for i in range(n_bins) :
        INDENT
            if math.floor(i * bin_width) < = float(val ['salary']) < math.floor((i + 1) * bin_width) :
            INDENT
                sal_list [i] += 1
            DEDENT
        DEDENT
    DEDENT
    return sal_list
DEDENT
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = []
    bin_list = []
    bin_width = int(max_salary / n_bins)
    for bins in range(0, max_salary + 1, bin_width) :
    INDENT
        bin_list.append(bins)
    DEDENT
    sal_list = [0] * (len(bin_list) - 1)
    df = pd.DataFrame(data)
    for sal in range(0, len(df) - 1) :
    INDENT
        salary = float(df.loc ['salary'] [sal])
        for i in range(len(bin_list) - 1, - 1, - 1) :
        INDENT
            if salary > bin_list [i] :
            INDENT
                sal_list [i] += 1
                break
            DEDENT
        DEDENT
    DEDENT
    return sal_list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52804344_52805048_3_19
52804344_52805050_4_20
Title: "Trying a function to get data in separate ranges tally it and return a list of the tallies" 
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = [0 for _ in range(n_bins)]
    bin_width = max_salary / / n_bins
    for item in data.values() :
    INDENT
        salary = float(item ['salary'])
        for i in range(n_bins) :
        INDENT
            low = floor(float(i * bin_width))
            high = floor(float(low + bin_width))
            if (salary is not None) and (low < = salary < high) :
            INDENT
                sal_list [i] += 1
                break
            DEDENT
        DEDENT
    DEDENT
    return sal_list

DEDENT
----------------------------------------

def wealth_distribution(data, n_bins, max_salary) :
INDENT
    sal_list = []
    bin_list = []
    bin_width = int(max_salary / n_bins)
    for bins in range(0, max_salary + 1, bin_width) :
    INDENT
        bin_list.append(bins)
    DEDENT
    sal_list = [0] * (len(bin_list) - 1)
    df = pd.DataFrame(data)
    for sal in range(0, len(df) - 1) :
    INDENT
        salary = float(df.loc ['salary'] [sal])
        for i in range(len(bin_list) - 1, - 1, - 1) :
        INDENT
            if salary > bin_list [i] :
            INDENT
                sal_list [i] += 1
                break
            DEDENT
        DEDENT
    DEDENT
    return sal_list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52843576_52843984_29_46
52843576_52843984_57_79
Title: PyQt5 Python on Raspberry Pi Threaded RFID 
----------------------------------------

def __init__(self) :
INDENT
    super(PunchWindow, self).__init__()
    self.move(550, 200)
    self.resize(480, 320)
    self.title = 'Punch Window'
    self.left = 900
    self.top = 106
    self.lbl = QtWidgets.QLabel('Punch Times', self)
    self.txtDataField = QtWidgets.QLineEdit(self)
    self.txtDataField.setGeometry(10, 100, 321, 41)
    self.lbl.setText("Company ")

    self.btnUpdate = QtWidgets.QPushButton("Update", self)
    self.btnUpdate.move(230, 140)
    self.btnUpdate.clicked.connect(self.Update)
    self.btnUpdate.resize(141, 91)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    self.title = ' '
    self.left = 420
    self.top = 106
    self.width = 800
    self.height = 600
    self.setFixedSize(800, 600)
    self.setWindowFlags(QtCore.Qt.CustomizeWindowHint)
    self.lbl = QtWidgets.QLabel('Company Spash Screen', self)
    self.lbl.setGeometry(10, 100, 321, 41)
    self.initUI()
    self.PunchDialog = PunchWindow()
    self.myThread = ThreadRFID(self)
    self.myThread.start()
    self.myThread.successSignal.connect(self.PunchDialog.show)
    self.myThread.signal.connect(self.PunchDialog.onPunch)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52845407_52845476_1_12
52845407_52845529_1_15
Title: Finding integers in a file 
----------------------------------------

def average_ints() :
INDENT
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f :
    INDENT
        for line in f :
        INDENT
            for i in line :
            INDENT

                integers += int(i)
                num_ints = num_ints + 1
            DEDENT
        DEDENT
    DEDENT
    avg = integers / num_ints
    return avg
DEDENT
----------------------------------------

def average_ints() :
INDENT
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f :
    INDENT
        for line in f :
        INDENT
            for s in line.split() :
            INDENT
                try :
                INDENT
                    i = int(s)
                    integers = i + integers
                    num_ints = num_ints + 1
                DEDENT
                except ValueError :
                INDENT
                    continue
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    avg = integers / num_ints
    return avg
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52845407_52845476_1_12
52845407_52845554_1_9
Title: Finding integers in a file 
----------------------------------------

def average_ints() :
INDENT
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f :
    INDENT
        for line in f :
        INDENT
            for i in line :
            INDENT

                integers += int(i)
                num_ints = num_ints + 1
            DEDENT
        DEDENT
    DEDENT
    avg = integers / num_ints
    return avg
DEDENT
----------------------------------------

def average_ints(path) :
INDENT
    integers = []
    with open(path) as f :
    INDENT
        for line in f :
        INDENT
            for i in line :
            INDENT
                if i.isdigit() :
                INDENT
                    integers.append(int(i))
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return sum(integers) / len(integers)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52845407_52845516_1_10
52845407_52845529_1_15
Title: Finding integers in a file 
----------------------------------------

def average_ints() :
INDENT
    num_ints = 0
    integers = 0
    with open("associate.txt") as f :
    INDENT
        for i in f.read() :
        INDENT
            if i.isdigit() :
            INDENT
                num_ints += 1
                integers += int(i)
            DEDENT
        DEDENT
    DEDENT
    avg = integers / num_ints
    return avg
DEDENT
----------------------------------------

def average_ints() :
INDENT
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f :
    INDENT
        for line in f :
        INDENT
            for s in line.split() :
            INDENT
                try :
                INDENT
                    i = int(s)
                    integers = i + integers
                    num_ints = num_ints + 1
                DEDENT
                except ValueError :
                INDENT
                    continue
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    avg = integers / num_ints
    return avg
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52845407_52845516_1_10
52845407_52845554_1_9
Title: Finding integers in a file 
----------------------------------------

def average_ints() :
INDENT
    num_ints = 0
    integers = 0
    with open("associate.txt") as f :
    INDENT
        for i in f.read() :
        INDENT
            if i.isdigit() :
            INDENT
                num_ints += 1
                integers += int(i)
            DEDENT
        DEDENT
    DEDENT
    avg = integers / num_ints
    return avg
DEDENT
----------------------------------------

def average_ints(path) :
INDENT
    integers = []
    with open(path) as f :
    INDENT
        for line in f :
        INDENT
            for i in line :
            INDENT
                if i.isdigit() :
                INDENT
                    integers.append(int(i))
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return sum(integers) / len(integers)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52845407_52845529_1_15
52845407_52845554_1_9
Title: Finding integers in a file 
----------------------------------------

def average_ints() :
INDENT
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f :
    INDENT
        for line in f :
        INDENT
            for s in line.split() :
            INDENT
                try :
                INDENT
                    i = int(s)
                    integers = i + integers
                    num_ints = num_ints + 1
                DEDENT
                except ValueError :
                INDENT
                    continue
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    avg = integers / num_ints
    return avg
DEDENT
----------------------------------------

def average_ints(path) :
INDENT
    integers = []
    with open(path) as f :
    INDENT
        for line in f :
        INDENT
            for i in line :
            INDENT
                if i.isdigit() :
                INDENT
                    integers.append(int(i))
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return sum(integers) / len(integers)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52849626_52849740_3_12
52849626_52850470_1_13
Title: Finding number of pythagorean triples in a list using python? 
----------------------------------------

def Q3(a) :
INDENT
    squares = [i ** 2 for i in a]
    squares.sort()
    ans = 0
    for x, y, z in combinations(squares, 3) :
    INDENT
        if x + y == z :
        INDENT
            ans += 1
        DEDENT
    DEDENT
    return ans
DEDENT
----------------------------------------

def Q3(a) :
INDENT
    lst = [i * i for i in sorted(a)]
    ans = 0
    for x in range(len(lst) - 2) :
    INDENT
        y = x + 1
        z = y + 1
        while z < len(lst) :
        INDENT
            while z < len(lst) and lst [z] < lst [x] + lst [y] :
            INDENT
                z += 1
            DEDENT
            if z < len(lst) and lst [z] == lst [x] + lst [y] :
            INDENT
                ans += 1
            DEDENT
            y += 1
        DEDENT
    DEDENT
    return ans
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52850623_52850897_1_15
52850623_52850935_1_15
Title: How to repeat a function 3 times 
----------------------------------------

def check_guess() :
INDENT
    status = False
    letter = "d"
    guess = input("What is your guess: ")
    if guess.isalpha() == False :
    INDENT
        print ("This is invalid")
    DEDENT
    elif guess.lower() > letter :
    INDENT
        print ("This too high")
    DEDENT
    elif guess.lower() < letter :
    INDENT
        print ("this is too low")
    DEDENT
    else :
    INDENT
        print ("that is correct")
        status = True
    DEDENT
    return status
DEDENT
----------------------------------------

def check_guess() :
INDENT
    letter = "d"
    guess = input("What is your guess: ")
    if not guess.isalpha() :
    INDENT
        print ("This is invalid")
        return False
    DEDENT
    guess = guess.lower()
    if guess == letter :
    INDENT
        print ("that is correct")
        return True
    DEDENT
    if guess > letter :
    INDENT
        print ("This too high")
    DEDENT
    else :
    INDENT
        print ("this is too low")
    DEDENT
    return False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52850799_52916975_10_34
52850799_52916975_74_83
Title: Open another wx.python frame cause the main UI to be blocked 
----------------------------------------

def __init__(self, title, parent = None) :
INDENT
    wx.Frame.__init__(self, parent = parent, title = title)
    panel = wx.Panel(self)
    self.btn = wx.Button(panel, label = 'Stop Long running process', size = (200, 30), pos = (10, 10))
    self.btn.Bind(wx.EVT_BUTTON, self.OnExit)
    self.progress = wx.Gauge(panel, size = (300, 10), pos = (10, 50), range = 300)

    self.Bind(EVT_PROGRESS_EVENT, self.OnProgress)
    self.Bind(wx.EVT_CLOSE, self.OnExit)
    self.Show()
    self.mythread = TestThread(self)
    while self.mythread.isAlive() :
    INDENT
        time.sleep(0.1)
        wx.GetApp().Yield()
        continue
    DEDENT
    try :
    INDENT
        self.OnExit(None)
    DEDENT
    except :
    INDENT
        pass
    DEDENT
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    self.text_count = 0
    self.parent = parent
    btn = wx.Button(self, wx.ID_ANY, label = 'Start Long running process', size = (200, 30), pos = (10, 10))
    btn.Bind(wx.EVT_BUTTON, self.Thread_Frame)
    btn2 = wx.Button(self, wx.ID_ANY, label = 'Is the GUI still active?', size = (200, 30), pos = (10, 50))
    btn2.Bind(wx.EVT_BUTTON, self.AddText)
    self.txt = wx.TextCtrl(self, wx.ID_ANY, style = wx.TE_MULTILINE, pos = (10, 90), size = (400, 100))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52859301_52864103_25_52
52859301_52864103_7_19
Title: Automate Tabbing though tabs in WXnotebook 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY,
        "Notebook Tutorial",
        size = (600, 400))
    panel = wx.Panel(self)
    self.timer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.change_tabs, self.timer)
    self.timer.Start(1000)
    self.notebook = wx.Notebook(panel)
    tabOne = TabPanel(self.notebook)
    self.notebook.AddPage(tabOne, "Tab 1")
    tabTwo = TabPanel(self.notebook)
    self.notebook.AddPage(tabTwo, "Tab 2")
    tabThree = TabPanel(self.notebook)
    self.notebook.AddPage(tabThree, 'Tab 3')
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.notebook, 1, wx.ALL | wx.EXPAND, 5)
    panel.SetSizer(sizer)
    self.Layout()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    colors = ["red", "blue", "gray", "yellow", "green"]
    self.SetBackgroundColour(random.choice(colors))
    btn = wx.Button(self, label = "Press Me")
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(btn, 0, wx.ALL, 10)
    self.SetSizer(sizer)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52860261_52909656_12_31
52860261_52909656_37_44
Title: Kivy TreeView with checkbox and editable text 
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    text = kwargs.pop('text', 'None')
    super(MyNode, self).__init__(** kwargs)
    self.orientation = 'horizontal'

    self.size_hint_y = None
    self.height = dp(25)

    self.lbl = Label(text = text, size_hint_x = 0.2)
    self.chkbx = CheckBox(size_hint_x = 0.1, color = (1, 1, 1, 3.5))
    self.txtinpt = TextInput(multiline = False, font_size = 15, padding = [6, 3, 6, 0])

    self.add_widget(self.lbl)
    self.add_widget(self.chkbx)
    self.add_widget(self.txtinpt)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(MyTreeView, self).__init__()
    self.add_node(MyTreeNode(text = 'node 1'))
    node2 = self.add_node(MyTreeNode(text = 'node 2'))
    self.add_node(MyTreeNode(text = 'node 3'), node2)
    self.add_node(MyTreeNode(text = 'node 4'), node2)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52873938_52873993_1_9
52873938_52874026_1_9
Title: referring to arrays from another function 
----------------------------------------

def function1() :
INDENT
    some_input = 1
    some_other_input = 2
    array1 = []
    array1.append(some_input)
    array1.append(some_other_input)
    return array1

DEDENT
----------------------------------------

def function1() :
INDENT
    some_input = 1
    some_other_input = 2
    array1 = []
    array1.append(some_input)
    array1.append(some_other_input)
    return array1

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52878845_52935294_25_37
52878845_52979401_27_39
Title: swarmplot with hue affecting marker beyond color 
----------------------------------------

def new_scatter(self, * args, ** kwargs) :
INDENT
    sc = old_scatter(self, * args, ** kwargs)
    c = kwargs.get("c", None)
    if isinstance(c, np.ndarray) :
    INDENT
        m = cm.get_markers_for_colors(c)
        paths = []
        for _m in m :
        INDENT
            marker_obj = mmarkers.MarkerStyle(_m)
            paths.append(marker_obj.get_path().transformed(
                    marker_obj.get_transform()))
        DEDENT
        sc.set_paths(paths)
    DEDENT
    return sc
DEDENT
----------------------------------------

def new_scatter(self, * args, ** kwargs) :
INDENT
    colors = kwargs.get("c", None)
    co2mk = kwargs.pop("co2mk", None)
    FinalCollection = old_scatter(self, * args, ** kwargs)
    if co2mk is not None and isinstance(colors, ndarray) :
    INDENT
        Color2Marker = GetColor2Marker(co2mk)
        paths = []
        for col in colors :
        INDENT
            mk = Color2Marker [tuple(col)]
            marker_obj = MarkerStyle(mk)
            paths.append(marker_obj.get_path().transformed(marker_obj.get_transform()))
        DEDENT
        FinalCollection.set_paths(paths)
    DEDENT
    return FinalCollection
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52891742_52892040_18_31
52891742_52892040_53_60
Title: PyQt5 Control window and Display window 
----------------------------------------

def InitializeUI(self) :
INDENT
    self.setWindowTitle(self.title)
    self.setGeometry(self.left, self.top, self.width, self.height)
    self.inputBox = QtWidgets.QGroupBox("Display")
    layout = QtWidgets.QGridLayout()
    layout.setColumnStretch(1, 4)
    layout.setColumnStretch(2, 4)
    button = QtWidgets.QPushButton('Push here to change text')
    layout.addWidget(button, 0, 0)
    button.clicked.connect(self.on_click)
    self.inputBox.setLayout(layout)
    windowLayout = QtWidgets.QVBoxLayout(self)
    windowLayout.addWidget(self.inputBox)
DEDENT
----------------------------------------

def InitializeUI(self) :
INDENT
    self.setWindowTitle(self.title)
    self.setGeometry(self.left, self.top, self.width, self.height)
    self.createDisplayGridLayout()
    windowLayout = QtWidgets.QVBoxLayout(self)
    windowLayout.addWidget(self.horizontalGroupBox)
    self.setLayout(windowLayout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52891742_52892040_39_48
52891742_52892040_8_17
Title: PyQt5 Control window and Display window 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.title = 'Display Pannel'
    self.left = 5
    self.top = 5
    self.width = 300
    self.height = 300
    self.InitializeUI()
    self.setText("Original Text")
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.title = 'Main Control Pannel'
    self.left = 10
    self.top = 10
    self.width = 640
    self.height = 400
    self.text = "Display text"
    self.InitializeUI()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52896701_52898607_29_37
52896701_52899699_17_26
Title: "Displaying multiple independent windows with images in tkinter and having the main loop exit when they have all been closed" 
----------------------------------------

def __init__(self, controller, path, filename) :
INDENT
    tk.Toplevel.__init__(self, controller)
    self.controller = controller
    self.protocol("WM_DELETE_WINDOW", self.handle_close)
    img = tk.PhotoImage(file = "{}\{}".format(path, filename))
    lbl = tk.Label(self, image = img)
    lbl.image = img
    lbl.pack()
DEDENT
----------------------------------------

def __init__(self, root, img) :
INDENT
    super(Window, self).__init__()
    self.root = root
    self.tick()
    self.minsize(img.width, img.height)
    self.canvas = tkinter.Canvas(self, width = img.width, height = img.height)
    self.canvas.pack()
    self.canvas.configure(background = "white")
    self.photo = ImageTk.PhotoImage(img)
    self.sprite = self.canvas.create_image(0, 0, image = self.photo, anchor = tkinter.NW)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52896701_52898607_29_37
52896701_52899699_2_8
Title: "Displaying multiple independent windows with images in tkinter and having the main loop exit when they have all been closed" 
----------------------------------------

def __init__(self, controller, path, filename) :
INDENT
    tk.Toplevel.__init__(self, controller)
    self.controller = controller
    self.protocol("WM_DELETE_WINDOW", self.handle_close)
    img = tk.PhotoImage(file = "{}\{}".format(path, filename))
    lbl = tk.Label(self, image = img)
    lbl.image = img
    lbl.pack()
DEDENT
----------------------------------------

def __init__(self, imgs) :
INDENT
    super(ImgRoot, self).__init__()
    for i in imgs :
    INDENT
        Window(self, i)
    DEDENT
    self.withdraw()
    self.open = True
    self.tick()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52896701_52899699_17_26
52896701_52899699_2_8
Title: "Displaying multiple independent windows with images in tkinter and having the main loop exit when they have all been closed" 
----------------------------------------

def __init__(self, root, img) :
INDENT
    super(Window, self).__init__()
    self.root = root
    self.tick()
    self.minsize(img.width, img.height)
    self.canvas = tkinter.Canvas(self, width = img.width, height = img.height)
    self.canvas.pack()
    self.canvas.configure(background = "white")
    self.photo = ImageTk.PhotoImage(img)
    self.sprite = self.canvas.create_image(0, 0, image = self.photo, anchor = tkinter.NW)
DEDENT
----------------------------------------

def __init__(self, imgs) :
INDENT
    super(ImgRoot, self).__init__()
    for i in imgs :
    INDENT
        Window(self, i)
    DEDENT
    self.withdraw()
    self.open = True
    self.tick()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52900444_52901070_12_25
52900444_52901070_49_77
Title: "Update a QLabel  using a QPushButton in a QDialog" 
----------------------------------------

def initUI(self) :
INDENT
    self.resize(500, 500)
    self.move(300, 100)
    self.setWindowTitle('Black Jack')
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('File')
    newAct = QAction('New Player', self)
    newAct.triggered.connect(self.new_player)
    fileMenu.addAction(newAct)
    self.name_window_label = QLabel('Anonimous', self)
    self.name_window_label.move(245, 15)
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.setGeometry(300, 230, 250, 120)
    self.setWindowTitle('User Information')
    self.name = QLineEdit(self)
    self.name.move(110, 5)
    self.name.resize(110, 20)
    self.money = QSpinBox(self)
    self.money.setRange(1, 99)
    self.money.setValue(12)
    self.money.valueChanged.connect(self.moneyValueChanged)
    self.money.move(110, 40)
    self.money.resize(110, 20)
    self.button = QPushButton('Create', self)
    self.button.move(5, 80)
    self.button.clicked.connect(self.create)
    self.button2 = QPushButton('Cancel', self)
    self.button2.move(120, 80)
    self.name_label = QLabel('SHORT NAME', self)
    self.name_label.move(20, 10)
    self.money_label = QLabel('MONEY AVAILABLE', self)
    self.money_label.move(10, 45)
    self.exec_()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52900444_52901070_12_25
52900444_52901103_13_37
Title: "Update a QLabel  using a QPushButton in a QDialog" 
----------------------------------------

def initUI(self) :
INDENT
    self.resize(500, 500)
    self.move(300, 100)
    self.setWindowTitle('Black Jack')
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('File')
    newAct = QAction('New Player', self)
    newAct.triggered.connect(self.new_player)
    fileMenu.addAction(newAct)
    self.name_window_label = QLabel('Anonimous', self)
    self.name_window_label.move(245, 15)
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle('User Information')
    self.name = QtWidgets.QLineEdit()
    self.money = QtWidgets.QSpinBox(maximum = 2147483647)
    self.button = QtWidgets.QPushButton('Create')
    self.button.clicked.connect(self.accept)
    self.button2 = QtWidgets.QPushButton('Cancel')
    self.button2.clicked.connect(self.reject)
    lay = QtWidgets.QVBoxLayout(self)
    flay = QtWidgets.QFormLayout()
    flay.addRow("SHORT NAME", self.name)
    flay.addRow("MONEY AVAILABLE", self.money)
    lay.addLayout(flay)
    hlay = QtWidgets.QHBoxLayout()
    hlay.addWidget(self.button)
    hlay.addWidget(self.button2)
    lay.addLayout(hlay)
    self.setFixedSize(self.sizeHint())

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52900444_52901070_12_25
52900444_52901103_43_57
Title: "Update a QLabel  using a QPushButton in a QDialog" 
----------------------------------------

def initUI(self) :
INDENT
    self.resize(500, 500)
    self.move(300, 100)
    self.setWindowTitle('Black Jack')
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('File')
    newAct = QAction('New Player', self)
    newAct.triggered.connect(self.new_player)
    fileMenu.addAction(newAct)
    self.name_window_label = QLabel('Anonimous', self)
    self.name_window_label.move(245, 15)
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle('Black Jack')
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('File')
    newAct = QtWidgets.QAction('New Player', self)
    newAct.triggered.connect(self.new_player)
    fileMenu.addAction(newAct)
    self.name_window_label = QtWidgets.QLabel('Anonimous', alignment = QtCore.Qt.AlignCenter)
    widget = QtWidgets.QWidget()
    self.setCentralWidget(widget)
    lay = QtWidgets.QVBoxLayout(widget)
    lay.addWidget(self.name_window_label, alignment = QtCore.Qt.AlignTop)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52900444_52901070_49_77
52900444_52901103_13_37
Title: "Update a QLabel  using a QPushButton in a QDialog" 
----------------------------------------

def initUI(self) :
INDENT
    self.setGeometry(300, 230, 250, 120)
    self.setWindowTitle('User Information')
    self.name = QLineEdit(self)
    self.name.move(110, 5)
    self.name.resize(110, 20)
    self.money = QSpinBox(self)
    self.money.setRange(1, 99)
    self.money.setValue(12)
    self.money.valueChanged.connect(self.moneyValueChanged)
    self.money.move(110, 40)
    self.money.resize(110, 20)
    self.button = QPushButton('Create', self)
    self.button.move(5, 80)
    self.button.clicked.connect(self.create)
    self.button2 = QPushButton('Cancel', self)
    self.button2.move(120, 80)
    self.name_label = QLabel('SHORT NAME', self)
    self.name_label.move(20, 10)
    self.money_label = QLabel('MONEY AVAILABLE', self)
    self.money_label.move(10, 45)
    self.exec_()
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle('User Information')
    self.name = QtWidgets.QLineEdit()
    self.money = QtWidgets.QSpinBox(maximum = 2147483647)
    self.button = QtWidgets.QPushButton('Create')
    self.button.clicked.connect(self.accept)
    self.button2 = QtWidgets.QPushButton('Cancel')
    self.button2.clicked.connect(self.reject)
    lay = QtWidgets.QVBoxLayout(self)
    flay = QtWidgets.QFormLayout()
    flay.addRow("SHORT NAME", self.name)
    flay.addRow("MONEY AVAILABLE", self.money)
    lay.addLayout(flay)
    hlay = QtWidgets.QHBoxLayout()
    hlay.addWidget(self.button)
    hlay.addWidget(self.button2)
    lay.addLayout(hlay)
    self.setFixedSize(self.sizeHint())

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52900444_52901070_49_77
52900444_52901103_43_57
Title: "Update a QLabel  using a QPushButton in a QDialog" 
----------------------------------------

def initUI(self) :
INDENT
    self.setGeometry(300, 230, 250, 120)
    self.setWindowTitle('User Information')
    self.name = QLineEdit(self)
    self.name.move(110, 5)
    self.name.resize(110, 20)
    self.money = QSpinBox(self)
    self.money.setRange(1, 99)
    self.money.setValue(12)
    self.money.valueChanged.connect(self.moneyValueChanged)
    self.money.move(110, 40)
    self.money.resize(110, 20)
    self.button = QPushButton('Create', self)
    self.button.move(5, 80)
    self.button.clicked.connect(self.create)
    self.button2 = QPushButton('Cancel', self)
    self.button2.move(120, 80)
    self.name_label = QLabel('SHORT NAME', self)
    self.name_label.move(20, 10)
    self.money_label = QLabel('MONEY AVAILABLE', self)
    self.money_label.move(10, 45)
    self.exec_()
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle('Black Jack')
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('File')
    newAct = QtWidgets.QAction('New Player', self)
    newAct.triggered.connect(self.new_player)
    fileMenu.addAction(newAct)
    self.name_window_label = QtWidgets.QLabel('Anonimous', alignment = QtCore.Qt.AlignCenter)
    widget = QtWidgets.QWidget()
    self.setCentralWidget(widget)
    lay = QtWidgets.QVBoxLayout(widget)
    lay.addWidget(self.name_window_label, alignment = QtCore.Qt.AlignTop)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52900444_52901103_13_37
52900444_52901103_43_57
Title: "Update a QLabel  using a QPushButton in a QDialog" 
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle('User Information')
    self.name = QtWidgets.QLineEdit()
    self.money = QtWidgets.QSpinBox(maximum = 2147483647)
    self.button = QtWidgets.QPushButton('Create')
    self.button.clicked.connect(self.accept)
    self.button2 = QtWidgets.QPushButton('Cancel')
    self.button2.clicked.connect(self.reject)
    lay = QtWidgets.QVBoxLayout(self)
    flay = QtWidgets.QFormLayout()
    flay.addRow("SHORT NAME", self.name)
    flay.addRow("MONEY AVAILABLE", self.money)
    lay.addLayout(flay)
    hlay = QtWidgets.QHBoxLayout()
    hlay.addWidget(self.button)
    hlay.addWidget(self.button2)
    lay.addLayout(hlay)
    self.setFixedSize(self.sizeHint())

DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle('Black Jack')
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('File')
    newAct = QtWidgets.QAction('New Player', self)
    newAct.triggered.connect(self.new_player)
    fileMenu.addAction(newAct)
    self.name_window_label = QtWidgets.QLabel('Anonimous', alignment = QtCore.Qt.AlignCenter)
    widget = QtWidgets.QWidget()
    self.setCentralWidget(widget)
    lay = QtWidgets.QVBoxLayout(widget)
    lay.addWidget(self.name_window_label, alignment = QtCore.Qt.AlignTop)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52907599_52907670_1_8
52907599_52907763_1_8
Title: renewing the value of variable 
----------------------------------------

def function(seq) :
INDENT
    ascending_list = list(sorted(seq, key = int))
    for i in range(0, len(ascending_list) - 1, 2) :
    INDENT
        ascending_list [i], ascending_list [i + 1] = ascending_list [i + 1], ascending_list [i]
    DEDENT
    seq [:] = ascending_list

DEDENT
----------------------------------------

def function(seq) :
INDENT
    ascending_list = list(sorted(seq, key = int))
    for i in range(0, len(ascending_list) - 1, 2) :
    INDENT
        ascending_list [i], ascending_list [i + 1] = ascending_list [i + 1], ascending_list [i]
    DEDENT
    return ascending_list

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52912194_52912290_8_20
52912194_52913130_1_18
Title: While loop stopping even if it's False? 
----------------------------------------

def menu() :
INDENT
    choice = inputchoice()
    print (choice)
    if choice == 1 :
    INDENT
        valid = True
        print ("Do something if Valid = True")
    DEDENT
    elif choice == 2 :
    INDENT
        valid = True
        print ("Do something if Valid = True")
    DEDENT
    elif choice == 0 :
    INDENT
        valid = True
        print ("Do something if Valid = True")
    DEDENT
DEDENT
----------------------------------------

def menu() :
INDENT
    choice = int(input("Enter choice:"))

    if (choice == "" or (choice ! = 0 and choice ! = 1 and choice ! = 2)) :
    INDENT
        print ("Invalid choice, please enter again")
        menu()
    DEDENT
    elif choice == 1 :
    INDENT
        print ("Oh, its working")
        menu()
    DEDENT
    elif choice == 2 :
    INDENT
        print ("Oh, its working")
        menu()
    DEDENT
    elif choice == 0 :
    INDENT
        print ("===============================================")
        print ("Thank you for using Students' Result System")
        print ("===============================================")
    DEDENT
DEDENT
----------------------------------------

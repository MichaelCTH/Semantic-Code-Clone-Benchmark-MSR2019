$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13427890_16159194_18_36
13427890_20729333_1_8
Title: How can I find all prime numbers in a given range? 
----------------------------------------

def isprime(n) :
INDENT
    n = abs(int(n))
    if n < 2 :
    INDENT
        return False
    DEDENT
    if n == 2 :
    INDENT
        return True
    DEDENT
    if not n & 1 :
    INDENT
        return False

    DEDENT
    for x in range(3, int(n ** 0.5) + 1, 2) :
    INDENT
        if n % x == 0 :
        INDENT
            return False
        DEDENT
    DEDENT
    return True
DEDENT
----------------------------------------

def isprime(x) :
INDENT
    isprime = True
    if x ! = 2 :
    INDENT
        for i in range(2, x) :
        INDENT
            if x % 2 == 0 :
            INDENT
                isprime = False
            DEDENT
            break
        DEDENT
        return isprime
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13428000_13428061_1_11
13428000_13428062_1_34
Title: How do I obtain all primes from a certain set? 
----------------------------------------

def all_primes(start, end) :
INDENT
    list_primes = []
    for i in range(2, end) :
    INDENT
        for a in list_primes :
        INDENT
            if i % a == 0 :
            INDENT
                break
            DEDENT
        DEDENT
        else :
        INDENT
            list_primes.append(i)
        DEDENT
    DEDENT
    return [x for x in list_primes if x > = start]
DEDENT
----------------------------------------

def all_primes(start, end) :
INDENT
    list_nonprimes = []
    list_primes = []
    for i in range(start, end) :
    INDENT
        if i in list_nonprimes : continue
        if i in list_primes : continue
        if i == 2 :
        INDENT
            list_primes.append(i)
            continue
        DEDENT
        if i % 2 == 0 :
        INDENT
            list_nonprimes.append(i)
            continue
        DEDENT
        for a in range(3, int(i ** 0, 5) + 1, 2) :
        INDENT
            if i % a == 0 :
            INDENT
                list_nonprimes.append(i)
                break
            DEDENT
        DEDENT
        if i not in list_nonprimes : list_primes.append(i)
    DEDENT
    return list_primes
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13430041_13432102_58_80
13430041_13432102_7_46
Title: How to get multiple panels on one frame when overwriting the standard frame? 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)

    bSizer3 = wx.BoxSizer(wx.VERTICAL)
    self.m_grid1 = wx.grid.Grid(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0)
    self.m_grid1.CreateGrid(5, 3)
    self.m_grid1.EnableEditing(True)
    self.m_grid1.EnableGridLines(True)
    self.m_grid1.EnableDragGridSize(False)
    self.m_grid1.SetMargins(0, 0)
    self.m_grid1.EnableDragColMove(False)
    self.m_grid1.EnableDragColSize(True)
    self.m_grid1.SetColLabelSize(30)
    self.m_grid1.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.m_grid1.EnableDragRowSize(True)
    self.m_grid1.SetRowLabelSize(80)
    self.m_grid1.SetRowLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.m_grid1.SetDefaultCellAlignment(wx.ALIGN_LEFT, wx.ALIGN_TOP)
    bSizer3.Add(self.m_grid1, 1, wx.ALL | wx.EXPAND, 5)
    self.SetSizer(bSizer3)
    self.Layout()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    bSizer1 = wx.BoxSizer(wx.VERTICAL)
    self.Panel = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
    bSizer2 = wx.BoxSizer(wx.VERTICAL)
    self.nb = wx.Notebook(self.Panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.nb, 1, wx.EXPAND | wx.ALL, 5)
    self.Panel.SetSizer(bSizer2)
    self.Panel.Layout()
    bSizer2.Fit(self.Panel)
    bSizer1.Add(self.Panel, 1, wx.EXPAND | wx.ALL, 0)
    self.SetSizer(bSizer1)
    self.Layout()
    self.menuBar = wx.MenuBar(0)
    self.filemenu = wx.Menu()
    self.menuAbout = wx.MenuItem(self.filemenu, wx.ID_ANY, u"&About", u" Information about this program", wx.ITEM_NORMAL)
    self.filemenu.AppendItem(self.menuAbout)
    self.menuExit = wx.MenuItem(self.filemenu, wx.ID_ANY, u"E&xit", u" Terminate the program", wx.ITEM_NORMAL)
    self.filemenu.AppendItem(self.menuExit)
    self.menuBar.Append(self.filemenu, u"&miP3")
    self.SetMenuBar(self.menuBar)
    self.statusBar = self.CreateStatusBar(1, wx.ST_SIZEGRIP, wx.ID_ANY)
    self.Centre(wx.BOTH)
    self.Bind(wx.EVT_MENU, self.OnAbout, id = self.menuAbout.GetId())
    self.Bind(wx.EVT_MENU, self.OnExit, id = self.menuExit.GetId())
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13430041_13432102_58_80
13430041_13432102_85_94
Title: How to get multiple panels on one frame when overwriting the standard frame? 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)

    bSizer3 = wx.BoxSizer(wx.VERTICAL)
    self.m_grid1 = wx.grid.Grid(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0)
    self.m_grid1.CreateGrid(5, 3)
    self.m_grid1.EnableEditing(True)
    self.m_grid1.EnableGridLines(True)
    self.m_grid1.EnableDragGridSize(False)
    self.m_grid1.SetMargins(0, 0)
    self.m_grid1.EnableDragColMove(False)
    self.m_grid1.EnableDragColSize(True)
    self.m_grid1.SetColLabelSize(30)
    self.m_grid1.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.m_grid1.EnableDragRowSize(True)
    self.m_grid1.SetRowLabelSize(80)
    self.m_grid1.SetRowLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.m_grid1.SetDefaultCellAlignment(wx.ALIGN_LEFT, wx.ALIGN_TOP)
    bSizer3.Add(self.m_grid1, 1, wx.ALL | wx.EXPAND, 5)
    self.SetSizer(bSizer3)
    self.Layout()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    ExampleFrame.__init__(self, parent)
    self.title = "Demo with Notebook"
    self.SetTitle(self.title)
    self.nb.AddPage(ExamplePanel(self.nb), "Absolute Positioning")
    self.nb.AddPage(ExamplePanel(self.nb), "Page Two")
    self.nb.AddPage(ExamplePanel(self.nb), "Page Three")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13430041_13432102_7_46
13430041_13432102_85_94
Title: How to get multiple panels on one frame when overwriting the standard frame? 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    bSizer1 = wx.BoxSizer(wx.VERTICAL)
    self.Panel = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
    bSizer2 = wx.BoxSizer(wx.VERTICAL)
    self.nb = wx.Notebook(self.Panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.nb, 1, wx.EXPAND | wx.ALL, 5)
    self.Panel.SetSizer(bSizer2)
    self.Panel.Layout()
    bSizer2.Fit(self.Panel)
    bSizer1.Add(self.Panel, 1, wx.EXPAND | wx.ALL, 0)
    self.SetSizer(bSizer1)
    self.Layout()
    self.menuBar = wx.MenuBar(0)
    self.filemenu = wx.Menu()
    self.menuAbout = wx.MenuItem(self.filemenu, wx.ID_ANY, u"&About", u" Information about this program", wx.ITEM_NORMAL)
    self.filemenu.AppendItem(self.menuAbout)
    self.menuExit = wx.MenuItem(self.filemenu, wx.ID_ANY, u"E&xit", u" Terminate the program", wx.ITEM_NORMAL)
    self.filemenu.AppendItem(self.menuExit)
    self.menuBar.Append(self.filemenu, u"&miP3")
    self.SetMenuBar(self.menuBar)
    self.statusBar = self.CreateStatusBar(1, wx.ST_SIZEGRIP, wx.ID_ANY)
    self.Centre(wx.BOTH)
    self.Bind(wx.EVT_MENU, self.OnAbout, id = self.menuAbout.GetId())
    self.Bind(wx.EVT_MENU, self.OnExit, id = self.menuExit.GetId())
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    ExampleFrame.__init__(self, parent)
    self.title = "Demo with Notebook"
    self.SetTitle(self.title)
    self.nb.AddPage(ExamplePanel(self.nb), "Absolute Positioning")
    self.nb.AddPage(ExamplePanel(self.nb), "Page Two")
    self.nb.AddPage(ExamplePanel(self.nb), "Page Three")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13435944_13436057_1_12
13435944_13436357_1_25
Title: "Returning a list in a function. Also issue with while loop" 
----------------------------------------

def add_list(x) :
INDENT
    first_list = raw_input('Please input a word to add to a list.')
    x.append(first_list)
    response = None
    while response ! = 'n' :
    INDENT
        response = raw_input('Would you like to enter another word? ')
        if response.lower() in ['n', 'no'] :
        INDENT
            print 'Here is the list of words:', x
            return x
        DEDENT
        else :
        INDENT
            x.append(response)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def add_list() :
INDENT
    x = [raw_input('Please input a word to add to a list: ')]

    while True :
    INDENT
        response = raw_input('Would you like to enter another word? ')

        if response.lower() [0] == 'n' :
        INDENT
            return x
        DEDENT
        else :
        INDENT

            x.append(raw_input('Please input a word to add to the list: '))
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13443941_13444296_140_156
13443941_13444296_266_297
Title: How To subclass a wxpython StaticBitmap to add an attribute 
----------------------------------------

def __init__(self, parent, width, height, bmpNormal, bmpHover, bmpClick, bmpOff, id = wx.ID_ANY, label = "", pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.NO_BORDER, validator = wx.DefaultValidator, name = "StaticBmpButton") :
INDENT
    wx.PyControl.__init__(self, parent = parent, id = id, pos = pos, size = size, style = wx.NO_BORDER, validator = validator, name = name)
    self.width = width
    self.height = height
    self.bmpNormal = bmpNormal
    self.bmpHover = bmpHover
    self.bmpClick = bmpClick
    self.bmpOff = bmpOff
    self._InitBuffer()
    self._InitPaintObjects()
    self._BindEvents()
    self._SetProperties(label)
    self.SetInitialSize(size)
    self.InheritAttributes()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, - 1, size = (640, 480))
    self.SetBackgroundColour(wx.Color(255, 255, 255))
    bmpNormal = getbutton_blueBitmap()
    bmpHover = getbutton_green_brightBitmap()
    bmpClick = getbutton_redBitmap()
    bmpOff = getbutton_grayBitmap()
    self.test_button1 = StaticBmpButton(self, 100, 26, bmpNormal, bmpHover, bmpClick, bmpOff, - 1, label = "Hello")
    self.test_button2 = StaticBmpButton(self, 100, 26, bmpNormal, bmpHover, bmpClick, bmpOff, - 1, label = "Connect")
    self.test_button3 = StaticBmpButton(self, 100, 26, bmpNormal, bmpHover, bmpClick, bmpOff, - 1, label = "Disconnect")
    self.Bind(wx.EVT_BUTTON, self.OnButton1, self.test_button1)
    self.Bind(wx.EVT_BUTTON, self.OnButton2, self.test_button2)
    self.Bind(wx.EVT_BUTTON, self.OnCloseButton, self.test_button3)
    self.test_button3.Disable()
    vbox = wx.BoxSizer(wx.VERTICAL)
    hbox = wx.BoxSizer(wx.HORIZONTAL)
    hbox.Add(self.test_button1, 0, wx.EXPAND | wx.ALL, 10)
    hbox.Add(self.test_button2, 0, wx.EXPAND | wx.ALL, 10)
    hbox.Add(self.test_button3, 0, wx.EXPAND | wx.ALL, 10)
    vbox.AddStretchSpacer(1)
    vbox.Add(hbox, 0, wx.ALIGN_CENTER)
    vbox.AddStretchSpacer(1)
    self.SetSizer(vbox)
    self.Fit()
    self.SetSize((640, 480))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13443941_13444296_140_156
13443941_13570001_10_23
Title: How To subclass a wxpython StaticBitmap to add an attribute 
----------------------------------------

def __init__(self, parent, width, height, bmpNormal, bmpHover, bmpClick, bmpOff, id = wx.ID_ANY, label = "", pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.NO_BORDER, validator = wx.DefaultValidator, name = "StaticBmpButton") :
INDENT
    wx.PyControl.__init__(self, parent = parent, id = id, pos = pos, size = size, style = wx.NO_BORDER, validator = validator, name = name)
    self.width = width
    self.height = height
    self.bmpNormal = bmpNormal
    self.bmpHover = bmpHover
    self.bmpClick = bmpClick
    self.bmpOff = bmpOff
    self._InitBuffer()
    self._InitPaintObjects()
    self._BindEvents()
    self._SetProperties(label)
    self.SetInitialSize(size)
    self.InheritAttributes()
DEDENT
----------------------------------------

def __init__(self, parent, ID, bmpoff, bmpon, bmphover) :
INDENT
    gen_statbmp.GenStaticBitmap.__init__(self, parent, ID, bmpoff)
    self.bmpoff = bmpoff
    self.bmpon = bmpon
    self.bmphover = bmphover
    self.SetBitmap(bmpoff)
    self.state = 'off'
    self.Bind(wx.EVT_ENTER_WINDOW, self.On_Hover)
    self.Bind(wx.EVT_LEAVE_WINDOW, self.On_Leave)
    self.Bind(wx.EVT_LEFT_DOWN, self.On_Click)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13443941_13444296_266_297
13443941_13570001_10_23
Title: How To subclass a wxpython StaticBitmap to add an attribute 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, - 1, size = (640, 480))
    self.SetBackgroundColour(wx.Color(255, 255, 255))
    bmpNormal = getbutton_blueBitmap()
    bmpHover = getbutton_green_brightBitmap()
    bmpClick = getbutton_redBitmap()
    bmpOff = getbutton_grayBitmap()
    self.test_button1 = StaticBmpButton(self, 100, 26, bmpNormal, bmpHover, bmpClick, bmpOff, - 1, label = "Hello")
    self.test_button2 = StaticBmpButton(self, 100, 26, bmpNormal, bmpHover, bmpClick, bmpOff, - 1, label = "Connect")
    self.test_button3 = StaticBmpButton(self, 100, 26, bmpNormal, bmpHover, bmpClick, bmpOff, - 1, label = "Disconnect")
    self.Bind(wx.EVT_BUTTON, self.OnButton1, self.test_button1)
    self.Bind(wx.EVT_BUTTON, self.OnButton2, self.test_button2)
    self.Bind(wx.EVT_BUTTON, self.OnCloseButton, self.test_button3)
    self.test_button3.Disable()
    vbox = wx.BoxSizer(wx.VERTICAL)
    hbox = wx.BoxSizer(wx.HORIZONTAL)
    hbox.Add(self.test_button1, 0, wx.EXPAND | wx.ALL, 10)
    hbox.Add(self.test_button2, 0, wx.EXPAND | wx.ALL, 10)
    hbox.Add(self.test_button3, 0, wx.EXPAND | wx.ALL, 10)
    vbox.AddStretchSpacer(1)
    vbox.Add(hbox, 0, wx.ALIGN_CENTER)
    vbox.AddStretchSpacer(1)
    self.SetSizer(vbox)
    self.Fit()
    self.SetSize((640, 480))
DEDENT
----------------------------------------

def __init__(self, parent, ID, bmpoff, bmpon, bmphover) :
INDENT
    gen_statbmp.GenStaticBitmap.__init__(self, parent, ID, bmpoff)
    self.bmpoff = bmpoff
    self.bmpon = bmpon
    self.bmphover = bmphover
    self.SetBitmap(bmpoff)
    self.state = 'off'
    self.Bind(wx.EVT_ENTER_WINDOW, self.On_Hover)
    self.Bind(wx.EVT_LEAVE_WINDOW, self.On_Leave)
    self.Bind(wx.EVT_LEFT_DOWN, self.On_Click)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13461306_13461440_1_12
13461306_13461552_1_32
Title: Interlocking Two Strings in Python ProblemSetQuestion (Self-Taught) 
----------------------------------------

def interlock(in1, in2) :
INDENT
    r = 1
    s1, s2 = sorted((in1, in2), key = len, reverse = True)
    inters = ''
    for i in range(len(s1)) :
    INDENT
        inters += s2 [i]
        inters += s1 [i]
        r = i + 1
    DEDENT
    if r < len(s2) :
    INDENT
        inters += s2 [r]
    DEDENT
    return inters
DEDENT
----------------------------------------

def interlock(s1, s2) :
INDENT
    r = 1
    l1 = list(s1)
    l2 = list(s2)
    inters = ''
    if len(s2) == len(s1) :
    INDENT
        for i in range(len(s1)) :
        INDENT
            inters += s1 [i]
            inters += s2 [i]
        DEDENT
    DEDENT
    elif len(s1) < len(s2) :
    INDENT
        for i in range(len(s1)) :
        INDENT
            inters += s2 [i]
            inters += s1 [i]
            r = i + 1
        DEDENT
        inters += s2 [r]
    DEDENT
    elif len(s2) < len(s1) :
    INDENT
        for i in range(len(s2)) :
        INDENT
            inters += s1 [i]
            inters += s2 [i]
            r = i + 1
        DEDENT
        inters += s1 [r]
    DEDENT
    else :
    INDENT
        pass
    DEDENT
    return inters

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
134834_1160144_23_30
134834_2021548_21_27
Title: Beginner wondering if his code is 'Pythonic' 
----------------------------------------

def compress(factors) :
INDENT
    summands = collections.defaultdict(lambda : 0)
    for factor in factors :
    INDENT
        summands [factor] += 1
    DEDENT
    return [(base, summands [base]) for base in sorted(summands)]
DEDENT
----------------------------------------

def compress(factors) :
INDENT
    for (factor, copies) in itertools.groupby(factors) :
    INDENT

        power = len(list(copies))
        yield (factor, power)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
134834_1160144_4_22
134834_2021548_3_20
Title: Beginner wondering if his code is 'Pythonic' 
----------------------------------------

def factorize(n) :
INDENT
    divisors = itertools.count(2)
    divisor = divisors.next()
    while True :
    INDENT
        if divisor ** 2 > n :
        INDENT
            yield n
            break
        DEDENT
        a, b = divmod(n, divisor)
        if b == 0 :
        INDENT
            yield divisor
            n = a
        DEDENT
        else :
        INDENT
            divisor = divisors.next()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def factorize(n) :
INDENT
    divisors = itertools.count(2)
    for divisor in divisors :
    INDENT
        if divisor ** 2 > n :
        INDENT
            yield n
            break
        DEDENT
        while n % divisor == 0 :
        INDENT
            yield divisor
            n //= divisor
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
134834_135009_4_20
134834_2021849_3_12
Title: Beginner wondering if his code is 'Pythonic' 
----------------------------------------

def factors(num) :
INDENT
    numroot = int(math.sqrt(num)) + 1
    for i in xrange(2, numroot) :
    INDENT
        divider, remainder = divmod(num, i)
        if not remainder :
        INDENT
            yield i
            break
        DEDENT
    DEDENT
    else :
    INDENT
        yield num
        return
    DEDENT
    for factor in factors(divider) :
    INDENT
        yield factor
    DEDENT
DEDENT
----------------------------------------

def factors(n) :
INDENT
    i = 2
    while n > 1 :
    INDENT
        p = 0
        while n > 1 and n % i == 0 :
        INDENT
            p += 1
            n /= i
        DEDENT
        if p :
        INDENT
            yield (i, p)
        DEDENT
        i += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13486070_13486083_1_18
13486070_13486144_1_16
Title: (Python) Go to a line within the function 
----------------------------------------

def pickClass() :
INDENT
    valid_classes = ["FIGHTER", "MAGE", "THIEF"]
    while True :
    INDENT
        print ('What class are you? FIGHTER, MAGE, or THIEF?')
        classChoice = raw_input()
        if classChoice not in valid_classes :
        INDENT
            print ("Invalid class")
        DEDENT
        else :
        INDENT
            print ("Are you sure you want to be a %s?" % classChoice)
            while True :
            INDENT
                _confirm = raw_input()
                if _confirm == 'YES' :
                INDENT
                    print ('So be it.')
                    return classChoice
                DEDENT
                elif _confirm == 'NO' :
                INDENT
                    break
                DEDENT
                else :
                INDENT
                    print ('YES or NO only!')
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def pickClass() :
INDENT
    classChoice = None
    while classChoice is None :
    INDENT
        print ('What class are you? FIGHTER, MAGE, or THIEF?')
        classChoice = raw_input()
        if classChoice == 'FIGHTER' :
        INDENT
            while True :
            INDENT
                print ('You are a mighty warrior. Are you sure? YES or NO.')
                _confirm = raw_input()
                if _confirm == 'YES' :
                INDENT
                    print ('So be it.')
                    break
                DEDENT
                elif _confirm == 'NO' :
                INDENT
                    break
                DEDENT
                print ('YES or NO only!')
            DEDENT
        DEDENT
    DEDENT
    return classChoice
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13523283_13523608_15_26
13523283_13523938_22_31
Title: "Generating Unique Numbers in Python without Using Lists Sets Etc" 
----------------------------------------

def ballPickerTwo() :
INDENT
    while True :
    INDENT
        a = random.randint(1, 59)
        b = random.randint(1, 59)
        c = random.randint(1, 59)
        d = random.randint(1, 59)
        e = random.randint(1, 59)
        f = random.randint(1, 35)
        m = 2 ** a + 2 ** b + 2 ** c + 2 ** d + 2 ** e + 2 ** f
        if bin(m).count("1") == 6 :
        INDENT
            break
        DEDENT
    DEDENT
    showNumbers(a, b, c, d, e, f)
DEDENT
----------------------------------------

def ballPickerTwo() :
INDENT
    cur_val = 0
    cur_val, a = pick(cur_val)
    cur_val, b = pick(cur_val)
    cur_val, c = pick(cur_val)
    cur_val, d = pick(cur_val)
    cur_val, e = pick(cur_val)
    cur_val, f = pick(cur_val)
    showNumbers(a, b, c, d, e, f)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13525882_22914414_3_48
13525882_41636316_7_23
Title: Tasklist output 
----------------------------------------

def get_processes_running() :
INDENT
    tasks = subprocess.check_output(['tasklist']).split("\r\n")
    p = []
    for task in tasks :
    INDENT
        m = re.match("(.+?) +(\d+) (.+?) +(\d+) +(\d+.* K).*", task)
        if m is not None :
        INDENT
            p.append({"image" : m.group(1),
                    "pid" : m.group(2),
                    "session_name" : m.group(3),
                    "session_num" : m.group(4),
                    "mem_usage" : m.group(5)})
        DEDENT
    DEDENT
    return p
DEDENT
----------------------------------------

def get_processes_running() :
INDENT
    tasks = check_output(['tasklist']).decode('cp866', 'ignore').split("\r\n")
    p = []
    for task in tasks :
    INDENT
        m = re.match(b'(.*?)\\s+(\\d+)\\s+(\\w+)\\s+(\\w+)\\s+(.*?)\\s.*', task.encode())
        if m is not None :
        INDENT
            p.append({"image" : m.group(1).decode(),
                    "pid" : int(m.group(2).decode()),
                    "session_name" : m.group(3).decode(),
                    "session_num" : int(m.group(4).decode()),
                    "mem_usage" : int(m.group(5).decode('ascii', 'ignore'))})
        DEDENT
    DEDENT
    return (p)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13527921_22333187_5_11
13527921_34320948_6_14
Title: Scrapy - Silently drop an item 
----------------------------------------

def dropped(self, item, exception, response, spider) :
INDENT
    return {
        'level' : log.DEBUG,
        'format' : logformatter.DROPPEDFMT,
        'exception' : exception,
        'item' : item,
        }
DEDENT
----------------------------------------

def dropped(self, item, exception, response, spider) :
INDENT
    return {
        'level' : logging.INFO,
        'msg' : logformatter.DROPPEDMSG,
        'args' : {
            'exception' : exception,
            'item' : item,
            }}
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13528235_13528382_1_19
13528235_13529875_1_14
Title: Recursion on strings - back to beginning of string? 
----------------------------------------

def shift_cipher_noloop(plain, i) :
INDENT
    if (plain == "") :
    INDENT
        return ""
    DEDENT
    else :
    INDENT
        if len(plain) > 3 and i > 0 :
        INDENT
            return shift_cipher_noloop(plain [1 :] + plain [0], i - 1)
        DEDENT
        else :
        INDENT
            return plain

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def shift_cipher_noloop(original) :
INDENT
    def encrypt_recursion(plain) :
    INDENT
        encrypted = ""
        if plain == "" :
        INDENT
            encrypted = ""
        DEDENT
        elif len(plain) > 3 :
        INDENT
            encrypted += plain [3]
            encrypted += encrypt_recursion(plain [1 :])
        DEDENT
        else :
        INDENT
            encrypted += original [3 - len(plain)]
            encrypted += encrypt_recursion(plain [1 :])
        DEDENT
        return encrypted
    DEDENT
    return encrypt_recursion(original)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13542985_13554182_152_162
13542985_13554182_25_122
Title: How to remove blank area between sizers in wxPython 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent, - 1, size = (300, 530))
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.figure = matplotlib.figure.Figure(figsize = (5, 4))
    self.axes = self.figure.add_subplot(111)
    self.y_max = 2.0
    self.canvas = FigureCanvas(self, - 1, self.figure)
    self.sizer.Add(self.canvas, proportion = 1, border = 5, flag = wx.ALL | wx.EXPAND)
    self.SetSizer(self.sizer)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = u"计算机插值 v0.1", pos = wx.DefaultPosition, size = wx.Size(508, 530), style = wx.DEFAULT_FRAME_STYLE | wx.FRAME_SHAPED | wx.TAB_TRAVERSAL)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    self.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DLIGHT))

    self.MainMenu = wx.MenuBar(0)
    self.File = wx.Menu()
    self.SaveAs = wx.MenuItem(self.File, wx.ID_ANY, u"另存为...", wx.EmptyString, wx.ITEM_NORMAL)
    self.File.AppendItem(self.SaveAs)
    self.Exit = wx.MenuItem(self.File, wx.ID_ANY, u"退出...", wx.EmptyString, wx.ITEM_NORMAL)
    self.File.AppendItem(self.Exit)
    self.MainMenu.Append(self.File, u"文件")
    self.About_M = wx.Menu()
    self.About = wx.MenuItem(self.About_M, wx.ID_ANY, u"关于", wx.EmptyString, wx.ITEM_NORMAL)
    self.About_M.AppendItem(self.About)
    self.MainMenu.Append(self.About_M, u"关于")
    self.SetMenuBar(self.MainMenu)

    MainSizer = wx.BoxSizer(wx.VERTICAL)
    self.MainPanel = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
    UserSizer = wx.BoxSizer(wx.VERTICAL)
    upperSizer = wx.BoxSizer(wx.HORIZONTAL)

    self.TextExplanation = wx.StaticText(self.MainPanel, wx.ID_ANY, u"请在下面输入框内输入要插值的数，以空格间隔。\n输入范围在(1.2, 2.0)。", wx.DefaultPosition, wx.DefaultSize, 0)
    self.TextExplanation.Wrap(- 1)
    upperSizer.Add(self.TextExplanation, 0, wx.ALL, 20)

    upperSizer.AddSpacer((0, 0), 1, wx.EXPAND, 5)
    RadioBoxInterpolationChoices = [u"线性插值", u"抛物线插值"]
    self.RadioBoxInterpolation = wx.RadioBox(self.MainPanel, wx.ID_ANY, u"插值种类", wx.DefaultPosition, wx.DefaultSize, RadioBoxInterpolationChoices, 1, wx.RA_SPECIFY_COLS)
    self.RadioBoxInterpolation.SetSelection(1)
    upperSizer.Add(self.RadioBoxInterpolation, 0, wx.ALL, 5)

    UserSizer.Add(upperSizer, 0, wx.EXPAND, 5)
    lowerSizer = wx.BoxSizer(wx.HORIZONTAL)
    self.TextCtrVal = wx.TextCtrl(self.MainPanel, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_PROCESS_ENTER)
    lowerSizer.Add(self.TextCtrVal, 0, wx.ALL, 20)

    lowerSizer.AddSpacer((0, 0), 1, wx.EXPAND, 5)
    self.ButtonCal = wx.Button(self.MainPanel, wx.ID_ANY, u"计算", wx.DefaultPosition, wx.DefaultSize, 0)
    lowerSizer.Add(self.ButtonCal, 0, wx.ALL, 20)
    self.ButtonCls = wx.Button(self.MainPanel, wx.ID_ANY, u"清空", wx.DefaultPosition, wx.DefaultSize, 0)
    lowerSizer.Add(self.ButtonCls, 0, wx.ALL, 20)

    UserSizer.Add(lowerSizer, 0, 0, 5)
    PlotSizer = wx.BoxSizer(wx.VERTICAL)

    p1 = PlotPanel(self)
    PlotSizer.Add(p1, 1, wx.EXPAND | wx.ALL, 1)

    UserSizer.Add(PlotSizer, 1, wx.EXPAND, 5)

    self.MainPanel.SetSizer(UserSizer)
    self.MainPanel.Layout()
    UserSizer.Fit(self.MainPanel)
    MainSizer.Add(self.MainPanel, 1, wx.EXPAND | wx.ALL, 1)

    self.SetSizer(MainSizer)
    self.Layout()
    self.Centre(wx.BOTH)

    self.Bind(wx.EVT_MENU, self.SaveAsFile, id = self.SaveAs.GetId())
    self.Bind(wx.EVT_MENU, self.ExitNow, id = self.Exit.GetId())
    self.Bind(wx.EVT_MENU, self.Dialog, id = self.About.GetId())
    self.TextCtrVal.Bind(wx.EVT_TEXT_ENTER, self.Calculate)
    self.ButtonCal.Bind(wx.EVT_BUTTON, self.Calcualte)
    self.ButtonCls.Bind(wx.EVT_BUTTON, self.ClearPlot)

    selection = self.RadioBoxInterpolation.GetSelection()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13550076_13551018_19_27
13550076_13551018_29_37
Title: Replace CentralWidget in MainWindow 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoginWidget, self).__init__(parent)
    layout = QtGui.QHBoxLayout()
    self.button = QtGui.QPushButton('Login')
    layout.addWidget(self.button)
    self.setLayout(layout)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoggedWidget, self).__init__(parent)
    layout = QtGui.QHBoxLayout()
    self.label = QtGui.QLabel('logged in!')
    layout.addWidget(self.label)
    self.setLayout(layout)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13550076_13551018_19_27
13550076_13551018_5_11
Title: Replace CentralWidget in MainWindow 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoginWidget, self).__init__(parent)
    layout = QtGui.QHBoxLayout()
    self.button = QtGui.QPushButton('Login')
    layout.addWidget(self.button)
    self.setLayout(layout)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    self.central_widget = QtGui.QStackedWidget()
    self.setCentralWidget(self.central_widget)
    login_widget = LoginWidget(self)
    login_widget.button.clicked.connect(self.login)
    self.central_widget.addWidget(login_widget)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13550076_13551018_29_37
13550076_13551018_5_11
Title: Replace CentralWidget in MainWindow 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoggedWidget, self).__init__(parent)
    layout = QtGui.QHBoxLayout()
    self.label = QtGui.QLabel('logged in!')
    layout.addWidget(self.label)
    self.setLayout(layout)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    self.central_widget = QtGui.QStackedWidget()
    self.setCentralWidget(self.central_widget)
    login_widget = LoginWidget(self)
    login_widget.button.clicked.connect(self.login)
    self.central_widget.addWidget(login_widget)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13572559_13572658_3_8
13572559_13573935_1_8
Title: Find in python combinations of mutually exclusive sets from a list's elements 
----------------------------------------

def comb(seq) :
INDENT
    for n in range(1, len(seq)) :
    INDENT
        for c in itertools.combinations(seq, n) :
        INDENT
            if len(set.union(* map(set, c))) == sum(len(s) for s in c) :
            INDENT
                yield list(c)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def comb(input, lst = [], lset = set()) :
INDENT
    if lst :
    INDENT
        yield lst
    DEDENT
    for i, el in enumerate(input) :
    INDENT
        if lset.isdisjoint(el) :
        INDENT
            for out in comb(input [i + 1 :], lst + [el], lset | set(el)) :
            INDENT
                yield out
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13572559_13572658_3_8
13572559_13576591_32_41
Title: Find in python combinations of mutually exclusive sets from a list's elements 
----------------------------------------

def comb(seq) :
INDENT
    for n in range(1, len(seq)) :
    INDENT
        for c in itertools.combinations(seq, n) :
        INDENT
            if len(set.union(* map(set, c))) == sum(len(s) for s in c) :
            INDENT
                yield list(c)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def comb(input, lst = [], lset = set()) :
INDENT
    if lst :
    INDENT
        yield lst
    DEDENT
    for i, el in enumerate(input) :
    INDENT
        if lset.isdisjoint(el) :
        INDENT
            for out in comb(input [i + 1 :], lst + [el], lset | set(el)) :
            INDENT
                yield out

            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13579235_13579294_1_15
13579235_13579499_5_27
Title: select multiple files. python 
----------------------------------------

def main() :
INDENT
    files = raw_input("list all the files do you want processed (separated by commas)")
    for filez in files.split(',') :
    INDENT
        f = open(filez, "r")
        data = f.read()
        f.close()
        w1 = raw_input("what do you want to replace?")
        w2 = raw_input("what do you want to replace with?")
        print data
        data = data.replace(w1, w2)
        print data
        f = open(filez, "w")
        f.write(data)
        f.close()
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    filez = raw_input("which files do you want processed?")
    filez_l = filez.split()
    w1 = raw_input("what do you want to replace?")
    w2 = raw_input("what do you want to replace with?")
    extended_list = []
    for filez in filez_l :
    INDENT
        if '*' in filez :
        INDENT
            extended_list += glob.glob(filez)
        DEDENT
        else :
        INDENT
            extended_list.append(filez)
        DEDENT
    DEDENT
    for filez in extended_list :
    INDENT
        print "file:", filez
        f = open(filez, "r")
        data = f.read()
        print data
        data = data.replace(w1, w2)
        print data
        f = open(filez, "w")
        f.write(data)
        f.close()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13579235_13579294_1_15
13579235_13580040_3_15
Title: select multiple files. python 
----------------------------------------

def main() :
INDENT
    files = raw_input("list all the files do you want processed (separated by commas)")
    for filez in files.split(',') :
    INDENT
        f = open(filez, "r")
        data = f.read()
        f.close()
        w1 = raw_input("what do you want to replace?")
        w2 = raw_input("what do you want to replace with?")
        print data
        data = data.replace(w1, w2)
        print data
        f = open(filez, "w")
        f.write(data)
        f.close()
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    import sys
    w1 = sys.argv [1]
    w2 = sys.argv [2]
    filez = sys.argv [3 :]
    for fname in filez :
    INDENT
        with open(fname, "r") as f :
        INDENT
            data = f.read()
            data = data.replace(w1, w2)
            print data
        DEDENT
        with open(fname, "w") as f :
        INDENT
            f.write(data)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13579235_13579499_5_27
13579235_13580040_3_15
Title: select multiple files. python 
----------------------------------------

def main() :
INDENT
    filez = raw_input("which files do you want processed?")
    filez_l = filez.split()
    w1 = raw_input("what do you want to replace?")
    w2 = raw_input("what do you want to replace with?")
    extended_list = []
    for filez in filez_l :
    INDENT
        if '*' in filez :
        INDENT
            extended_list += glob.glob(filez)
        DEDENT
        else :
        INDENT
            extended_list.append(filez)
        DEDENT
    DEDENT
    for filez in extended_list :
    INDENT
        print "file:", filez
        f = open(filez, "r")
        data = f.read()
        print data
        data = data.replace(w1, w2)
        print data
        f = open(filez, "w")
        f.write(data)
        f.close()
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    import sys
    w1 = sys.argv [1]
    w2 = sys.argv [2]
    filez = sys.argv [3 :]
    for fname in filez :
    INDENT
        with open(fname, "r") as f :
        INDENT
            data = f.read()
            data = data.replace(w1, w2)
            print data
        DEDENT
        with open(fname, "w") as f :
        INDENT
            f.write(data)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1358711_1358832_7_15
1358711_1358863_2_10
Title: Raising an exception on updating a 'constant' attribute in python 
----------------------------------------

def __init__(cls, * a, ** k) :
INDENT
    mkl = cls.__class__
    class spec(mkl) : pass
    for n, v in vars(cls).items() :
    INDENT
        if isinstance(v, const) :
        INDENT
            setattr(spec, n, v)
        DEDENT
    DEDENT
    spec.__name__ = mkl.__name__
    cls.__class__ = spec
DEDENT
----------------------------------------

def __init__(cls, name, bases, dct) :
INDENT
    type.__init__(cls, name, bases, dct)
    old_setattr = cls.__setattr__
    def __setattr__(self, key, value) :
    INDENT
        cls.assert_attribute_mutable(key)
        old_setattr(self, key, value)
    DEDENT
    cls.__setattr__ = __setattr__
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13602170_40612535_1_7
13602170_47379030_3_13
Title: How do I find the difference between two values without knowing which is larger? 
----------------------------------------

def distance(a, b) :
INDENT
    if (a < 0) and (b < 0) or (a > 0) and (b > 0) :
    INDENT
        return abs(abs(a) - abs(b))
    DEDENT
    if (a < 0) and (b > 0) or (a > 0) and (b < 0) :
    INDENT
        return abs(abs(a) + abs(b))
    DEDENT
    print distance(- 25, - 15)
DEDENT
----------------------------------------

def distance(a, b) :
INDENT
    if (a == b) :
    INDENT
        return 0
    DEDENT
    elif (a < 0) and (b < 0) or (a > 0) and (b > 0) :
    INDENT
        if (a < b) :
        INDENT
            return (abs(abs(a) - abs(b)))
        DEDENT
        else :
        INDENT
            return - (abs(abs(a) - abs(b)))
        DEDENT
    DEDENT
    else :
    INDENT
        return math.copysign((abs(a) + abs(b)), b)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13602170_40612535_1_7
13602170_50493474_3_12
Title: How do I find the difference between two values without knowing which is larger? 
----------------------------------------

def distance(a, b) :
INDENT
    if (a < 0) and (b < 0) or (a > 0) and (b > 0) :
    INDENT
        return abs(abs(a) - abs(b))
    DEDENT
    if (a < 0) and (b > 0) or (a > 0) and (b < 0) :
    INDENT
        return abs(abs(a) + abs(b))
    DEDENT
    print distance(- 25, - 15)
DEDENT
----------------------------------------

def distance(a, b) :
INDENT
    if (a == b) :
    INDENT
        return 0
    DEDENT
    elif (a < 0) and (b < 0) or (a > 0) and (b > = 0) :
    INDENT
        if (a < b) :
        INDENT
            return (abs(abs(a) - abs(b)))
        DEDENT
        else :
        INDENT
            return - (abs(abs(a) - abs(b)))
        DEDENT
    DEDENT
    else :
    INDENT
        return math.copysign((abs(a) + abs(b)), b)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_136368_1_26
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_13790289_4_34
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_16507435_4_11
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_280083_1_13
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_3018671_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_45960693_1_32
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_4751601_6_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136354_25_42
136168_7047765_1_29
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, nlines) :
INDENT
    buf = ''
    result = []
    for block in rblocks(f) :
    INDENT
        buf = block + buf
        lines = buf.splitlines()

        if lines :
        INDENT
            result.extend(lines [1 :])
            if (len(result) > = nlines) :
            INDENT
                return result [- nlines :]
            DEDENT
            buf = lines [0]
        DEDENT
    DEDENT
    return ([buf] + result) [- nlines :]

DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and bytes > 0 :
    INDENT
        if bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            data.insert(0, f.read(BUFSIZ))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            data.insert(0, f.read(bytes))
        DEDENT
        linesFound = data [0].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_13790289_4_34
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_16507435_4_11
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_280083_1_13
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_3018671_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_45960693_1_32
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_4751601_6_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_136368_1_26
136168_7047765_1_29
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 20) :
INDENT
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = - 1
    blocks = []
    while lines_to_go > 0 and block_end_byte > 0 :
    INDENT
        if (block_end_byte - BLOCK_SIZE > 0) :
        INDENT

            f.seek(block_number * BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            blocks.append(f.read(block_end_byte))
        DEDENT
        lines_found = blocks [- 1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    DEDENT
    all_read_text = ''.join(reversed(blocks))
    return '\n'.join(all_read_text.splitlines() [- total_lines_wanted :])
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and bytes > 0 :
    INDENT
        if bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            data.insert(0, f.read(BUFSIZ))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            data.insert(0, f.read(bytes))
        DEDENT
        linesFound = data [0].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_16507435_4_11
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_280083_1_13
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_3018671_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_45960693_1_32
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_4751601_6_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_13790289_4_34
136168_7047765_1_29
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, lines = 1, _buffer = 4098) :
INDENT
    lines_found = []

    block_counter = - 1

    while len(lines_found) < lines :
    INDENT
        try :
        INDENT
            f.seek(block_counter * _buffer, os.SEEK_END)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            lines_found = f.readlines()
            break
        DEDENT
        lines_found = f.readlines()

        block_counter -= 1
    DEDENT
    return lines_found [- lines :]
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and bytes > 0 :
    INDENT
        if bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            data.insert(0, f.read(BUFSIZ))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            data.insert(0, f.read(bytes))
        DEDENT
        linesFound = data [0].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_280083_1_13
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_3018671_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_45960693_1_32
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_4751601_6_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_16507435_4_11
136168_7047765_1_29
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(iterable, N) :
INDENT
    deq = collections.deque()
    for thing in iterable :
    INDENT
        if len(deq) > = N :
        INDENT
            deq.popleft()
        DEDENT
        deq.append(thing)
    DEDENT
    for thing in deq :
    INDENT
        yield thing
    DEDENT
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and bytes > 0 :
    INDENT
        if bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            data.insert(0, f.read(BUFSIZ))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            data.insert(0, f.read(bytes))
        DEDENT
        linesFound = data [0].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_3018671_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_45960693_1_32
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_4751601_6_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_280083_1_13
136168_7047765_1_29
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, n) :
INDENT
    assert n > = 0
    pos, lines = n + 1, []
    while len(lines) < = n :
    INDENT
        try :
        INDENT
            f.seek(- pos, 2)
        DEDENT
        except IOError :
        INDENT
            f.seek(0)
            break
        DEDENT
        finally :
        INDENT
            lines = list(f)
        DEDENT
        pos *= 2
    DEDENT
    return lines [- n :]
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and bytes > 0 :
    INDENT
        if bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            data.insert(0, f.read(BUFSIZ))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            data.insert(0, f.read(bytes))
        DEDENT
        linesFound = data [0].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_3018671_1_15
136168_45960693_1_32
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_3018671_1_15
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_3018671_1_15
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_3018671_1_15
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_3018671_1_15
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_3018671_1_15
136168_7047765_1_29
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(the_file, lines_2find = 20) :
INDENT
    the_file.seek(0, 2)
    bytes_in_file = the_file.tell()
    lines_found, total_bytes_scanned = 0, 0
    while lines_2find + 1 > lines_found and bytes_in_file > total_bytes_scanned :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        the_file.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += the_file.read(1024).count('\n')
    DEDENT
    the_file.seek(- total_bytes_scanned, 2)
    line_list = list(the_file.readlines())
    return line_list [- lines_2find :]

DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and bytes > 0 :
    INDENT
        if bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            data.insert(0, f.read(BUFSIZ))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            data.insert(0, f.read(bytes))
        DEDENT
        linesFound = data [0].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_45960693_1_32
136168_4751601_6_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_45960693_1_32
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_45960693_1_32
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_45960693_1_32
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_45960693_1_32
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    remaining_bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and remaining_bytes > 0 :
    INDENT
        if remaining_bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            bunch = f.read(BUFSIZ)
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            bunch = f.read(remaining_bytes)
        DEDENT
        bunch = bunch.decode('utf-8')
        data.insert(0, bunch)
        size -= bunch.count('\n')
        remaining_bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_4751601_6_18
136168_48087596_1_21
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_4751601_6_18
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_4751601_6_18
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_4751601_6_18
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_4751601_6_18
136168_7047765_1_29
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(self, lines_2find = 1) :
INDENT
    self.seek(0, 2)
    bytes_in_file = self.tell()
    lines_found, total_bytes_scanned = 0, 0
    while (lines_2find + 1 > lines_found and
        bytes_in_file > total_bytes_scanned) :
    INDENT
        byte_block = min(1024, bytes_in_file - total_bytes_scanned)
        self.seek(- (byte_block + total_bytes_scanned), 2)
        total_bytes_scanned += byte_block
        lines_found += self.read(1024).count('\n')
    DEDENT
    self.seek(- total_bytes_scanned, 2)
    line_list = list(self.readlines())
    return line_list [- lines_2find :]
DEDENT
----------------------------------------

def tail(f, window = 20) :
INDENT
    if window == 0 :
    INDENT
        return []
    DEDENT
    BUFSIZ = 1024
    f.seek(0, 2)
    bytes = f.tell()
    size = window + 1
    block = - 1
    data = []
    while size > 0 and bytes > 0 :
    INDENT
        if bytes - BUFSIZ > 0 :
        INDENT

            f.seek(block * BUFSIZ, 2)
            data.insert(0, f.read(BUFSIZ))
        DEDENT
        else :
        INDENT

            f.seek(0, 0)
            data.insert(0, f.read(bytes))
        DEDENT
        linesFound = data [0].count('\n')
        size -= linesFound
        bytes -= BUFSIZ
        block -= 1
    DEDENT
    return ''.join(data).splitlines() [- window :]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_48087596_1_21
136168_5638389_1_15
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------

def tail(file, n = 1, bs = 1024) :
INDENT
    f = open(file)
    f.seek(- 1, 2)
    l = 1 - f.read(1).count('\n')
    B = f.tell()
    while n > = l and B > 0 :
    INDENT
        block = min(bs, B)
        B -= block
        f.seek(B, 0)
        l += f.read(block).count('\n')
    DEDENT
    f.seek(B, 0)
    l = min(l, n)
    lines = f.readlines() [- l :]
    f.close()
    return lines
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_48087596_1_21
136168_6813975_4_18
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------

def tail(filename, n) :
INDENT
    size = os.path.getsize(filename)
    with open(filename, "rb") as f :
    INDENT

        fm = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
        try :
        INDENT
            for i in xrange(size - 1, - 1, - 1) :
            INDENT
                if fm [i] == '\n' :
                INDENT
                    n -= 1
                    if n == - 1 :
                    INDENT
                        break
                    DEDENT
                DEDENT
            DEDENT
            return fm [i + 1 if i else 0 :].splitlines()
        DEDENT
        finally :
        INDENT
            fm.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
136168_48087596_1_21
136168_692616_1_20
Title: "Get last n lines of a file with Python similar to tail" 
----------------------------------------

def tail(f, window = 1) :
INDENT
    if window == 0 :
    INDENT
        return b''
    DEDENT
    BUFSIZE = 1024
    f.seek(0, 2)
    end = f.tell()
    nlines = window + 1
    data = []
    while nlines > 0 and end > 0 :
    INDENT
        i = max(0, end - BUFSIZE)
        nread = min(end, BUFSIZE)
        f.seek(i)
        chunk = f.read(nread)
        data.append(chunk)
        nlines -= chunk.count(b'\n')
        end -= nread
    DEDENT
    return b'\n'.join(b''.join(reversed(data)).splitlines() [- window :])
DEDENT
----------------------------------------

def tail(f, n, offset = None) :
INDENT
    avg_line_length = 74
    to_read = n + (offset or 0)
    while 1 :
    INDENT
        try :
        INDENT
            f.seek(- (avg_line_length * to_read), 2)
        DEDENT
        except IOError :
        INDENT

            f.seek(0)
        DEDENT
        pos = f.tell()
        lines = f.read().splitlines()
        if len(lines) > = to_read or pos == 0 :
        INDENT
            return lines [- to_read : offset and - offset or None], len(lines) > to_read or pos > 0
        DEDENT
        avg_line_length *= 1.3
    DEDENT
DEDENT
----------------------------------------

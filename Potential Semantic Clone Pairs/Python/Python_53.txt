$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50439086_50439825_13_26
50439086_50439825_33_58
Title: PyQt Issue sending values to different class 
----------------------------------------

def __init__(self, item_num = None, item_data = None) :
INDENT
    super(Data_Class, self).__init__()
    self.tab_2 = Tab_2
    self.num = item_num
    self.dat = item_data
    self.setFixedWidth(150)
    self.layout = QVBoxLayout()
    self.btn = QPushButton()
    self.btn.setText(str(self.num))
    self.layout.addWidget(self.btn)
    self.setLayout(self.layout)
    self.btn_click = functools.partial(self.set_btns, btn_data = self.dat)
    self.btn.clicked.connect(self.btn_click)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(MainWindow, self).__init__()
    self.resize(368, 315)
    self.vbox = QVBoxLayout()
    self.tabWidget = QTabWidget()
    self.tabWidget.setTabPosition(QTabWidget.North)
    self.vbox.addWidget(self.tabWidget)
    self.tab1 = QWidget()
    self.tabWidget.addTab(self.tab1, ("tab1"))
    self.tab2 = QWidget()
    self.tabWidget.addTab(self.tab2, ("tab2"))
    self.layout1 = QVBoxLayout()
    self.layout2 = QVBoxLayout()
    self.tab1.setLayout(self.layout1)
    self.tab2.setLayout(self.layout2)
    self.scrollarea = QScrollArea(self)
    self.scrollarea.setWidgetResizable(True)
    self.widgets = QWidget()
    self.Layout = FlowLayout(self.widgets)
    self.scrollarea.setWidget(self.widgets)
    self.layout1.addWidget(self.scrollarea)
    self.layout2.addWidget(Tab_2(self))
    self.setLayout(self.vbox)
    self.items = []
    self.extract()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50439086_50439825_13_26
50439086_50439825_73_82
Title: PyQt Issue sending values to different class 
----------------------------------------

def __init__(self, item_num = None, item_data = None) :
INDENT
    super(Data_Class, self).__init__()
    self.tab_2 = Tab_2
    self.num = item_num
    self.dat = item_data
    self.setFixedWidth(150)
    self.layout = QVBoxLayout()
    self.btn = QPushButton()
    self.btn.setText(str(self.num))
    self.layout.addWidget(self.btn)
    self.setLayout(self.layout)
    self.btn_click = functools.partial(self.set_btns, btn_data = self.dat)
    self.btn.clicked.connect(self.btn_click)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Tab_2, self).__init__(parent)
    self.data_class = Data_Class
    self.vert_layout = QVBoxLayout(self)
    self.line_edit = QLineEdit()
    self.vert_layout.addWidget(self.line_edit)
    self.setLayout(self.vert_layout)
    self.data_class(self).Signals.data_Signal.connect(self.set_line_edit)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50439086_50439825_33_58
50439086_50439825_73_82
Title: PyQt Issue sending values to different class 
----------------------------------------

def __init__(self) :
INDENT
    super(MainWindow, self).__init__()
    self.resize(368, 315)
    self.vbox = QVBoxLayout()
    self.tabWidget = QTabWidget()
    self.tabWidget.setTabPosition(QTabWidget.North)
    self.vbox.addWidget(self.tabWidget)
    self.tab1 = QWidget()
    self.tabWidget.addTab(self.tab1, ("tab1"))
    self.tab2 = QWidget()
    self.tabWidget.addTab(self.tab2, ("tab2"))
    self.layout1 = QVBoxLayout()
    self.layout2 = QVBoxLayout()
    self.tab1.setLayout(self.layout1)
    self.tab2.setLayout(self.layout2)
    self.scrollarea = QScrollArea(self)
    self.scrollarea.setWidgetResizable(True)
    self.widgets = QWidget()
    self.Layout = FlowLayout(self.widgets)
    self.scrollarea.setWidget(self.widgets)
    self.layout1.addWidget(self.scrollarea)
    self.layout2.addWidget(Tab_2(self))
    self.setLayout(self.vbox)
    self.items = []
    self.extract()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Tab_2, self).__init__(parent)
    self.data_class = Data_Class
    self.vert_layout = QVBoxLayout(self)
    self.line_edit = QLineEdit()
    self.vert_layout.addWidget(self.line_edit)
    self.setLayout(self.vert_layout)
    self.data_class(self).Signals.data_Signal.connect(self.set_line_edit)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50459216_50496823_44_54
50459216_50496823_6_42
Title: Improving runtime of python numpy code 
----------------------------------------

def digitize(value, bins) :
INDENT
    if value < bins [0] :
    INDENT
        return 0
    DEDENT
    if value > = bins [bins.shape [0] - 1] :
    INDENT
        return bins.shape [0]
    DEDENT
    for l in range(1, bins.shape [0]) :
    INDENT
        if value > = bins [l - 1] and value < bins [l] :
        INDENT
            return l
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def digitize(x, bins, right = False) :
INDENT
    n = len(bins)
    lo = 0
    hi = n
    if right :
    INDENT
        if np.isnan(x) :
        INDENT
            for i in range(n, 0, - 1) :
            INDENT
                if not np.isnan(bins [i - 1]) :
                INDENT
                    return i
                DEDENT
            DEDENT
            return 0
        DEDENT
        while hi > lo :
        INDENT
            mid = (lo + hi) >> 1
            if bins [mid] < x :
            INDENT

                lo = mid + 1
            DEDENT
            else :
            INDENT

                hi = mid
            DEDENT
        DEDENT
    DEDENT
    else :
    INDENT
        if np.isnan(x) :
        INDENT
            return n
        DEDENT
        while hi > lo :
        INDENT
            mid = (lo + hi) >> 1
            if bins [mid] < = x :
            INDENT

                lo = mid + 1
            DEDENT
            else :
            INDENT

                hi = mid
            DEDENT
        DEDENT
    DEDENT
    return lo
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50459326_50718770_35_48
50459326_50718770_50_63
Title: How do you add folding to QsciLexerCustom subclass? 
----------------------------------------

def __init__(self) :
INDENT
    QMainWindow.__init__(self)
    self.setWindowTitle('Custom Lexer For Config Files')
    self.setGeometry(50, 200, 400, 400)
    self.editor = QsciScintilla(self)
    self.editor.setUtf8(True)
    self.editor.setMarginWidth(2, 15)
    self.editor.setFolding(True)
    self.setCentralWidget(self.editor)
    self.lexer = ConfigLexer(self.editor)
    self.editor.setLexer(self.lexer)
    self.editor.setText(_sample)

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QsciLexerCustom.__init__(self, parent)
    self._styles = {
        0 : 'Default',
        1 : 'Comment',
        2 : 'Section',
        3 : 'Key',
        4 : 'Assignment',
        5 : 'Value',
        }
    for key, value in self._styles.items() :
    INDENT
        setattr(self, value, key)
    DEDENT
    self._foldcompact = True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50482899_50483145_1_10
50482899_50483290_12_23
Title: Joining a string in another string 
----------------------------------------

def replace(s, p, n) :
INDENT
    new_list = []
    for i, c in enumerate(s, 1) :
    INDENT
        new_list.append(c)
        if i % n == 0 :
        INDENT
            new_list.append(p)
        DEDENT
    DEDENT
    return "".join(new_list)

DEDENT
----------------------------------------

def replace(s, p, n) :
INDENT
    intervals = range(0, len(s), n)

    prefix = map(skip, repeat(s), intervals)

    chunks = map(take, prefix, repeat(n))
    return p.join(chunks)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50485873_1_11
50485559_50485956_1_11
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower();
    for c in word1 :
    INDENT
        if 1 ! = word1.count(c) :
        INDENT

            word1 = word1.replace(c, '(')
        DEDENT
        else :
        INDENT
            word1 = word1.replace(c, ')')
        DEDENT
    DEDENT
    return word1
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower()
    w1 = ''
    found_chars = set([])
    for c in word1 :
    INDENT
        if c in found_chars :
        INDENT
            w1 += ')'
        DEDENT
        else :
        INDENT
            found_chars.add(c)
            w1 += '('
        DEDENT
    DEDENT
    print w1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50485873_1_11
50485559_50486603_1_13
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower();
    for c in word1 :
    INDENT
        if 1 ! = word1.count(c) :
        INDENT

            word1 = word1.replace(c, '(')
        DEDENT
        else :
        INDENT
            word1 = word1.replace(c, ')')
        DEDENT
    DEDENT
    return word1
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower();
    w1 = '';
    length = len(word1)
    for i in range(0, length) :
    INDENT
        w2 = word1 [i]
        if (word1 [i] ! = ")") :
        INDENT
            word1 = word1.replace(word1 [i], "(", 1)
        DEDENT
        for v in range(i + 1, length) :
        INDENT
            if (word1 [v] ! = ")" and word1 [v] ! = "(") :
            INDENT
                if (word1 [v] == w2) :
                INDENT
                    word1 = word1.replace(w2, ")")
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return (word1)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50485873_1_11
50485559_50490226_15_34
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower();
    for c in word1 :
    INDENT
        if 1 ! = word1.count(c) :
        INDENT

            word1 = word1.replace(c, '(')
        DEDENT
        else :
        INDENT
            word1 = word1.replace(c, ')')
        DEDENT
    DEDENT
    return word1
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    word = word.lower()
    i = 1;
    for ch, count in Counter(word).items() :
    INDENT
        if count == 1 :
        INDENT
            word = word.replace(ch, '(')
        DEDENT
        else :
        INDENT
            l = list(word)
            l [word.find(ch)] = '('
            word = ''.join(l)
            word = word.replace(ch, ')')

        DEDENT
        i += 1
    DEDENT
    return word

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50485956_1_11
50485559_50486603_1_13
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower()
    w1 = ''
    found_chars = set([])
    for c in word1 :
    INDENT
        if c in found_chars :
        INDENT
            w1 += ')'
        DEDENT
        else :
        INDENT
            found_chars.add(c)
            w1 += '('
        DEDENT
    DEDENT
    print w1
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower();
    w1 = '';
    length = len(word1)
    for i in range(0, length) :
    INDENT
        w2 = word1 [i]
        if (word1 [i] ! = ")") :
        INDENT
            word1 = word1.replace(word1 [i], "(", 1)
        DEDENT
        for v in range(i + 1, length) :
        INDENT
            if (word1 [v] ! = ")" and word1 [v] ! = "(") :
            INDENT
                if (word1 [v] == w2) :
                INDENT
                    word1 = word1.replace(w2, ")")
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return (word1)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50485956_1_11
50485559_50487575_6_14
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower()
    w1 = ''
    found_chars = set([])
    for c in word1 :
    INDENT
        if c in found_chars :
        INDENT
            w1 += ')'
        DEDENT
        else :
        INDENT
            found_chars.add(c)
            w1 += '('
        DEDENT
    DEDENT
    print w1
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    s = word.lower()
    for ch in s :
    INDENT
        if s.count(ch) > 1 :
        INDENT
            s = s.replace(ch, ')')
        DEDENT
        else :
        INDENT
            s = s.replace(ch, '(', 1)
        DEDENT
    DEDENT
    return s
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50485956_1_11
50485559_50490226_15_34
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower()
    w1 = ''
    found_chars = set([])
    for c in word1 :
    INDENT
        if c in found_chars :
        INDENT
            w1 += ')'
        DEDENT
        else :
        INDENT
            found_chars.add(c)
            w1 += '('
        DEDENT
    DEDENT
    print w1
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    word = word.lower()
    i = 1;
    for ch, count in Counter(word).items() :
    INDENT
        if count == 1 :
        INDENT
            word = word.replace(ch, '(')
        DEDENT
        else :
        INDENT
            l = list(word)
            l [word.find(ch)] = '('
            word = ''.join(l)
            word = word.replace(ch, ')')

        DEDENT
        i += 1
    DEDENT
    return word

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50486603_1_13
50485559_50487575_6_14
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower();
    w1 = '';
    length = len(word1)
    for i in range(0, length) :
    INDENT
        w2 = word1 [i]
        if (word1 [i] ! = ")") :
        INDENT
            word1 = word1.replace(word1 [i], "(", 1)
        DEDENT
        for v in range(i + 1, length) :
        INDENT
            if (word1 [v] ! = ")" and word1 [v] ! = "(") :
            INDENT
                if (word1 [v] == w2) :
                INDENT
                    word1 = word1.replace(w2, ")")
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return (word1)
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    s = word.lower()
    for ch in s :
    INDENT
        if s.count(ch) > 1 :
        INDENT
            s = s.replace(ch, ')')
        DEDENT
        else :
        INDENT
            s = s.replace(ch, '(', 1)
        DEDENT
    DEDENT
    return s
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50486603_1_13
50485559_50490226_15_34
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    word1 = word.lower();
    w1 = '';
    length = len(word1)
    for i in range(0, length) :
    INDENT
        w2 = word1 [i]
        if (word1 [i] ! = ")") :
        INDENT
            word1 = word1.replace(word1 [i], "(", 1)
        DEDENT
        for v in range(i + 1, length) :
        INDENT
            if (word1 [v] ! = ")" and word1 [v] ! = "(") :
            INDENT
                if (word1 [v] == w2) :
                INDENT
                    word1 = word1.replace(w2, ")")
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return (word1)
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    word = word.lower()
    i = 1;
    for ch, count in Counter(word).items() :
    INDENT
        if count == 1 :
        INDENT
            word = word.replace(ch, '(')
        DEDENT
        else :
        INDENT
            l = list(word)
            l [word.find(ch)] = '('
            word = ''.join(l)
            word = word.replace(ch, ')')

        DEDENT
        i += 1
    DEDENT
    return word

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50485559_50487575_6_14
50485559_50490226_15_34
Title: How to make a function to find duplicacy in a character string? 
----------------------------------------

def duplicate_finder(word) :
INDENT
    s = word.lower()
    for ch in s :
    INDENT
        if s.count(ch) > 1 :
        INDENT
            s = s.replace(ch, ')')
        DEDENT
        else :
        INDENT
            s = s.replace(ch, '(', 1)
        DEDENT
    DEDENT
    return s
DEDENT
----------------------------------------

def duplicate_finder(word) :
INDENT
    word = word.lower()
    i = 1;
    for ch, count in Counter(word).items() :
    INDENT
        if count == 1 :
        INDENT
            word = word.replace(ch, '(')
        DEDENT
        else :
        INDENT
            l = list(word)
            l [word.find(ch)] = '('
            word = ''.join(l)
            word = word.replace(ch, ')')

        DEDENT
        i += 1
    DEDENT
    return word

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50486083_50501405_7_12
50486083_50501638_15_20
Title: Ending non-daemon threads when shutting down an interactive python session 
----------------------------------------

def run(self) :
INDENT
    while not self._quit_flag :
    INDENT
        print ("Thread is alive!", threading.active_count(), threading.main_thread().is_alive())
        for t in threading.enumerate() :
        INDENT
            print (t.is_alive())
        DEDENT
        time.sleep(0.500)
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while not self._quit_flag :
    INDENT
        print ("Thread is alive!")
        time.sleep(0.500)
    DEDENT
    print ("cleanup can also go here")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50492428_50535769_1_13
50492428_50556179_18_27
Title: Unable to print names in the right way in another function 
----------------------------------------

def get_info(session, title, url) :
INDENT
    r = session.get(url)
    soup = BeautifulSoup(r.text, "lxml")
    for items in soup.select("ul.list-unstyled") :
    INDENT
        try :
        INDENT
            phone = items.select_one("a[href^='tel:']").text
        DEDENT
        except :
        INDENT
            continue
        DEDENT
        else :
        INDENT
            print (title, phone)
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def get_info(session, title, url) :
INDENT
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "lxml")
    script = next((i for i in map(str, soup.find_all("script", type = "text/javascript"))
            if 'mapOptions' in i), None)
    if script :
    INDENT
        js_dict = script.split('__mapOptions = ') [1].split(';\n') [0]
        d = yaml.load(js_dict)
        print (title, d ['mapStore'] ['phone'])
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50492428_50535769_1_13
50492428_50591934_1_10
Title: Unable to print names in the right way in another function 
----------------------------------------

def get_info(session, title, url) :
INDENT
    r = session.get(url)
    soup = BeautifulSoup(r.text, "lxml")
    for items in soup.select("ul.list-unstyled") :
    INDENT
        try :
        INDENT
            phone = items.select_one("a[href^='tel:']").text
        DEDENT
        except :
        INDENT
            continue
        DEDENT
        else :
        INDENT
            print (title, phone)
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def get_info(session, title, url) :
INDENT
    r = session.get(url)
    soup = BeautifulSoup(r.text, "lxml")
    for items in soup.select("ul.list-unstyled") :
    INDENT
        if len(items.select("a[href^='tel:']")) :
        INDENT
            phone = items.select("a[href^='tel:']") [0].text
            break
        DEDENT
        else :
        INDENT
            phone = "N/A"
        DEDENT
    DEDENT
    print (title, phone)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50492428_50556179_18_27
50492428_50591934_1_10
Title: Unable to print names in the right way in another function 
----------------------------------------

def get_info(session, title, url) :
INDENT
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "lxml")
    script = next((i for i in map(str, soup.find_all("script", type = "text/javascript"))
            if 'mapOptions' in i), None)
    if script :
    INDENT
        js_dict = script.split('__mapOptions = ') [1].split(';\n') [0]
        d = yaml.load(js_dict)
        print (title, d ['mapStore'] ['phone'])
    DEDENT
DEDENT
----------------------------------------

def get_info(session, title, url) :
INDENT
    r = session.get(url)
    soup = BeautifulSoup(r.text, "lxml")
    for items in soup.select("ul.list-unstyled") :
    INDENT
        if len(items.select("a[href^='tel:']")) :
        INDENT
            phone = items.select("a[href^='tel:']") [0].text
            break
        DEDENT
        else :
        INDENT
            phone = "N/A"
        DEDENT
    DEDENT
    print (title, phone)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50502581_50504786_11_25
50502581_50513483_13_32
Title: How can I get the last line position of PDF file using Python? 
----------------------------------------

def line_position() :
INDENT
    opn_pdf1 = open("test.pdf", "rb")
    read_pdf = PdfFileReader(opn_pdf1)
    print (read_pdf)
    num_page = read_pdf.getNumPages()
    print (num_page)
    page = read_pdf.getPage(num_page - 1)
    data = page.extractText().splitlines()
    for i in reversed(range(0, len(data))) :
    INDENT
        if data [i] ! = " " :
        INDENT
            print (data [i])
            break
        DEDENT
        i -= 1
    DEDENT
    print (len(data))
DEDENT
----------------------------------------

def line_position() :
INDENT
    read_pdf = fitz.open("test.pdf")
    num_page = read_pdf.pageCount
    print (num_page)
    page = read_pdf [num_page - 1]
    data = json.loads(page.getText(output = 'json'))
    print (data)
    highest_y = - 1
    for block in data ['blocks'] :
    INDENT
        if 'lines' in block :
        INDENT
            for line in block ['lines'] :
            INDENT
                for span in line ['spans'] :
                INDENT
                    if span ['text'].strip() :
                    INDENT
                        print (span)
                        highest_y = max((highest_y, span ['bbox'] [3]))
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    print (highest_y)
    read_pdf.close()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50503609_50503991_4_36
50503609_50531175_4_25
Title: How to draw a continuous line in Pygame? 
----------------------------------------

def main() :
INDENT
    pygame.init()
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    mouse_position = (0, 0)
    drawing = False
    screen = pygame.display.set_mode((600, 800), 0, 32)
    screen.fill(WHITE)
    pygame.display.set_caption("ScratchBoard")
    last_pos = None
    while True :
    INDENT
        for event in pygame.event.get() :
        INDENT
            if event.type == QUIT :
            INDENT
                pygame.quit()
                sys.exit()
            DEDENT
            elif event.type == MOUSEMOTION :
            INDENT
                if (drawing) :
                INDENT
                    mouse_position = pygame.mouse.get_pos()
                    if last_pos is not None :
                    INDENT
                        pygame.draw.line(screen, BLACK, last_pos, mouse_position, 1)
                    DEDENT
                    last_pos = mouse_position
                DEDENT
            DEDENT
            elif event.type == MOUSEBUTTONUP :
            INDENT
                mouse_position = (0, 0)
                drawing = False
            DEDENT
            elif event.type == MOUSEBUTTONDOWN :
            INDENT
                drawing = True
            DEDENT
        DEDENT
        pygame.display.update()
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    pygame.init()
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    screen = pygame.display.set_mode((600, 800), 0, 32)
    screen.fill(WHITE)
    clock = pygame.time.Clock()
    while True :
    INDENT
        for event in pygame.event.get() :
        INDENT
            if event.type == pygame.QUIT :
            INDENT
                pygame.quit()
                return
            DEDENT
            elif event.type == pygame.MOUSEMOTION :
            INDENT
                if event.buttons [0] :
                INDENT
                    last = (event.pos [0] - event.rel [0], event.pos [1] - event.rel [1])
                    pygame.draw.line(screen, BLACK, last, event.pos, 1)
                DEDENT
            DEDENT
        DEDENT
        pygame.display.update()
        clock.tick(30)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50514936_50514976_16_26
50514936_50515294_14_17
Title: Delayed Compute with Method Chaining in Python 
----------------------------------------

def compute(self) :
INDENT
    results = []
    for x in self.results :
    INDENT
        for op, value in self.operations :
        INDENT
            if op == '+' :
            INDENT
                x += value
            DEDENT
            elif op == '-' :
            INDENT
                x -= value
            DEDENT
        DEDENT
        results.append(x)
    DEDENT
    return results
DEDENT
----------------------------------------

def compute(self) :
INDENT
    for s in self.stack :
    INDENT
        for index, _ in enumerate(self.results) :
        INDENT
            self.results [index] += s
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50528067_50528565_39_59
50528067_50528565_67_85
Title: Bind mousewheel to two canvas but only one works 
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)
    self.rowconfigure(0, weight = 1)
    self.columnconfigure(0, weight = 1)
    self.system_canvas = tk.Canvas(self, borderwidth = 0, highlightthickness = 0)
    self.system_canvas.grid(row = 0, column = 0, sticky = "NESW")
    self.vsb = tk.Scrollbar(self, orient = "vertical", command = self.system_canvas.yview)
    self.vsb.grid(row = 0, column = 1, sticky = "NS")
    self.system_canvas.configure(yscrollcommand = self.vsb.set)
    self.system_canvas.create_line(0, 0, 200, 500, fill = 'red')
    self.system_canvas.configure(scrollregion = self.system_canvas.bbox(tk.ALL))
    self.system_canvas.bind("<MouseWheel>", self._on_mousewheel)
    self.system_canvas.bind("<Button-4>", self._onmousewheel)
    self.system_canvas.bind("<Button-5>", self._onmousewheel)
DEDENT
----------------------------------------

def __init__(self, master) :
INDENT
    self.master = master
    self.gui_control = ttk.Notebook(master)
    self.main_gui = ttk.Frame(self.gui_control, borderwidth = 0)
    self.systems_gui = ttk.Frame(self.gui_control, borderwidth = 0)
    self.gui_control.add(self.main_gui, text = 'Main')
    self.gui_control.add(self.systems_gui, text = 'Systems')
    self.gui_control.grid(column = 1, row = 1, columnspan = 9, rowspan = 50, sticky = tk.N + tk.E + tk.S + tk.W)
    self.test_1 = MainFrame(self.main_gui)
    self.test_1.grid(row = 0, column = 0, sticky = "NESW")
    self.test_2 = SystemFrame(self.systems_gui)
    self.test_2.grid(row = 0, column = 0, sticky = "NESW")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50528067_50528565_67_85
50528067_50528565_6_30
Title: Bind mousewheel to two canvas but only one works 
----------------------------------------

def __init__(self, master) :
INDENT
    self.master = master
    self.gui_control = ttk.Notebook(master)
    self.main_gui = ttk.Frame(self.gui_control, borderwidth = 0)
    self.systems_gui = ttk.Frame(self.gui_control, borderwidth = 0)
    self.gui_control.add(self.main_gui, text = 'Main')
    self.gui_control.add(self.systems_gui, text = 'Systems')
    self.gui_control.grid(column = 1, row = 1, columnspan = 9, rowspan = 50, sticky = tk.N + tk.E + tk.S + tk.W)
    self.test_1 = MainFrame(self.main_gui)
    self.test_1.grid(row = 0, column = 0, sticky = "NESW")
    self.test_2 = SystemFrame(self.systems_gui)
    self.test_2.grid(row = 0, column = 0, sticky = "NESW")
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)
    self.rowconfigure(0, weight = 1)
    self.columnconfigure(0, weight = 1)
    self.main_canvas = tk.Canvas(self, borderwidth = 0, highlightthickness = 0)
    self.main_canvas.grid(row = 0, column = 0, sticky = "NESW")
    self.vsb = tk.Scrollbar(self, orient = "vertical", command = self.main_canvas.yview)
    self.vsb.grid(row = 0, column = 1, sticky = "NS")

    self.main_canvas.configure(yscrollcommand = self.vsb.set)

    self.main_canvas.create_line(0, 0, 200, 500, fill = 'red')

    self.main_canvas.configure(scrollregion = self.main_canvas.bbox(tk.ALL))
    self.main_canvas.bind("<MouseWheel>", self._on_mousewheel)
    self.main_canvas.bind("<Button-4>", self._onmousewheel)
    self.main_canvas.bind("<Button-5>", self._onmousewheel)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50533079_50533689_33_46
50533079_50533689_48_68
Title: How to properly access a StringVar() of a class from another class - Python - tkinter 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    frame_eb_data = tk.Frame(self, width = 100, height = 100, bg = "orange")
    frame_eb_data.grid(row = 0, column = 0, sticky = 'nsew', padx = 5, pady = 5)
    frame_but_right = tk.Frame(self, width = 240, height = 60, bg = "yellow")
    frame_but_right.grid(row = 1, column = 0, padx = 5, pady = 5, sticky = 'nsew')
    lab_eb_data = tk.Label(frame_eb_data, background = '#DDD4EF', textvariable = controller.page1_label)
    lab_eb_data.grid(row = 0, column = 0)
    b_ebdata = tk.Button(frame_but_right, text = "Page 2", width = 10, height = 2, command = lambda : controller.show_frame(PageTwo))
    b_ebdata.grid(row = 0, column = 0)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    frame_buttons = tk.Frame(self, width = 455, bg = "#DDD4EF", colormap = "new")
    frame_buttons.grid(row = 0, column = 0, padx = 5, pady = 5, sticky = 'e')
    frame_up_left = tk.Frame(self, width = 485, height = 260, bg = "#89E3FA", colormap = "new")
    frame_up_left.grid(row = 1, column = 0, sticky = 'w', padx = 5, pady = 5)
    b_data = tk.Label(frame_buttons, text = 'Example GUI', font = 'TrebuchetMS 30 bold', background = "#DDD4EF")
    b_data.grid(row = 0, column = 0, padx = 13, pady = 5, sticky = 'w')
    b5 = tk.Button(frame_buttons, text = 'Set Text', command = self.update_p2_label)
    b5.grid(row = 0, column = 2, padx = 5, pady = 5, sticky = 'e')
    b6 = tk.Button(frame_buttons, text = 'Page 1', command = lambda : controller.show_frame(PageOne))
    b6.grid(row = 0, column = 3, padx = 5, pady = 5, sticky = 'e')
    self.entry_nombre_fld = tk.Entry(frame_up_left, width = 40)
    self.entry_nombre_fld.grid(row = 1, column = 1, columnspan = 3, sticky = 'w')
    label_2 = tk.Label(frame_up_left, text = "Name:", font = ("bold", 14))
    label_2.grid(row = 1, column = 0, sticky = 'e')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50533079_50533689_33_46
50533079_50533689_6_24
Title: How to properly access a StringVar() of a class from another class - Python - tkinter 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    frame_eb_data = tk.Frame(self, width = 100, height = 100, bg = "orange")
    frame_eb_data.grid(row = 0, column = 0, sticky = 'nsew', padx = 5, pady = 5)
    frame_but_right = tk.Frame(self, width = 240, height = 60, bg = "yellow")
    frame_but_right.grid(row = 1, column = 0, padx = 5, pady = 5, sticky = 'nsew')
    lab_eb_data = tk.Label(frame_eb_data, background = '#DDD4EF', textvariable = controller.page1_label)
    lab_eb_data.grid(row = 0, column = 0)
    b_ebdata = tk.Button(frame_but_right, text = "Page 2", width = 10, height = 2, command = lambda : controller.show_frame(PageTwo))
    b_ebdata.grid(row = 0, column = 0)

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title('TEST GUI')
    self.page1_label = tk.StringVar()
    self.page2_entry = tk.StringVar()
    container = tk.Frame(self)
    container.pack(side = 'top')
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (PageOne, PageTwo) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.configure(background = 'lightgrey')
        frame.grid(row = 0, column = 0, sticky = 'nswe')
    DEDENT
    self.show_frame(PageOne)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50533079_50533689_48_68
50533079_50533689_6_24
Title: How to properly access a StringVar() of a class from another class - Python - tkinter 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    frame_buttons = tk.Frame(self, width = 455, bg = "#DDD4EF", colormap = "new")
    frame_buttons.grid(row = 0, column = 0, padx = 5, pady = 5, sticky = 'e')
    frame_up_left = tk.Frame(self, width = 485, height = 260, bg = "#89E3FA", colormap = "new")
    frame_up_left.grid(row = 1, column = 0, sticky = 'w', padx = 5, pady = 5)
    b_data = tk.Label(frame_buttons, text = 'Example GUI', font = 'TrebuchetMS 30 bold', background = "#DDD4EF")
    b_data.grid(row = 0, column = 0, padx = 13, pady = 5, sticky = 'w')
    b5 = tk.Button(frame_buttons, text = 'Set Text', command = self.update_p2_label)
    b5.grid(row = 0, column = 2, padx = 5, pady = 5, sticky = 'e')
    b6 = tk.Button(frame_buttons, text = 'Page 1', command = lambda : controller.show_frame(PageOne))
    b6.grid(row = 0, column = 3, padx = 5, pady = 5, sticky = 'e')
    self.entry_nombre_fld = tk.Entry(frame_up_left, width = 40)
    self.entry_nombre_fld.grid(row = 1, column = 1, columnspan = 3, sticky = 'w')
    label_2 = tk.Label(frame_up_left, text = "Name:", font = ("bold", 14))
    label_2.grid(row = 1, column = 0, sticky = 'e')
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title('TEST GUI')
    self.page1_label = tk.StringVar()
    self.page2_entry = tk.StringVar()
    container = tk.Frame(self)
    container.pack(side = 'top')
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (PageOne, PageTwo) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.configure(background = 'lightgrey')
        frame.grid(row = 0, column = 0, sticky = 'nswe')
    DEDENT
    self.show_frame(PageOne)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50535832_50537581_30_36
50535832_50537581_4_12
Title: How to check if Shift is held during startup of a Tk / Tkinter program? 
----------------------------------------

def __init__(self, root) :
INDENT
    self.root = root
    root.focus_force()
    self.h = HoldKeyDetect(root, ("Shift_L", "Shift_R"), self.set_mode)
    root.after(1000,
        self.continue_)
    self.mode = False
DEDENT
----------------------------------------

def __init__(self, widget, keys, handler = None) :
INDENT
    self.widget = widget
    self.handler = handler
    self.binds = {}
    for key in keys :
    INDENT
        evid = '<KeyPress-%s>' % key
        self.binds [evid] = widget.bind(evid, self.keypress)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50537967_50538326_3_15
50537967_50548102_11_26
Title: Finding nearest neighbours of a triangular tesellation 
----------------------------------------

def bfs(d, start) :
INDENT
    queue = deque([d [start]])
    seen = [start]
    results = []
    while queue :
    INDENT
        _vertices = queue.popleft()
        exists_at = [i for i, a in enumerate(d) if a == _vertices] [0]
        current = [i for i, a in enumerate(d) if any(c in a for c in _vertices) and i ! = exists_at and i not in seen]
        results.extend(current)
        queue.extend([a for i, a in enumerate(d) if any(c in a for c in _vertices) and i ! = exists_at and i not in seen])
        seen.extend(current)
    DEDENT
    return results
DEDENT
----------------------------------------

def bfs(d, start) :
INDENT
    queue = deque([d [start]])
    seen = [start]
    results = []
    while queue :
    INDENT
        _vertices = queue.popleft()
        current = [[i, a] for i, a in enumerate(d) if len([x for x in a if x in _vertices]) == 2 and i not in seen]
        if len(current) > 0 :
        INDENT
            current_array = np.array(current, dtype = object)
            current0 = list(current_array [:, 0])
            current1 = list(current_array [:, 1])
            results.extend(current0)
            queue.extend(current1)
            seen.extend(current0)
        DEDENT
    DEDENT
    return results
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50538911_50538967_1_7
50538911_50538982_4_12
Title: Add positional parameters to decorator 
----------------------------------------

def add_a_book(book = 'Python') :
INDENT
    def decorator(func) :
    INDENT
        def out_fn(* args, ** kwargs) :
        INDENT
            return str(func(* args, ** kwargs)) + str(book)
        DEDENT
        return out_fn
    DEDENT
    return decorator
DEDENT
----------------------------------------

def add_a_book(book = '') :
INDENT
    def _add_a_book(f) :
    INDENT
        @ wraps(f)
        def wrapper(* args) :
        INDENT
            r = f() + book
            return r
        DEDENT
        return wrapper
    DEDENT
    return _add_a_book
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50542177_50543122_11_16
50542177_50545839_22_31
Title: Correct handling of AttributeError in __getattr__ when using property 
----------------------------------------

def __getattribute__(self, name) :
INDENT
    print ('call of __getattribute__ with name =', name)
    if name == 'foo' :
    INDENT
        return 0
    DEDENT
    else :
    INDENT
        return super().__getattribute__(name)
    DEDENT
DEDENT
----------------------------------------

def __getattribute__(self, name) :
INDENT
    try :
    INDENT
        return object.__getattribute__(self, name)
    DEDENT
    except AttributeError as e1 :
    INDENT
        try :
        INDENT
            return P.__getattr__(self, name)
        DEDENT
        except AttributeError as e2 :
        INDENT
            A.e = AttributeError(str(e1) + ' -> ' + str(e2))
            raise AttributeError
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50547440_50547589_5_11
50547440_50562757_58_73
Title: Run multiple function in python 
----------------------------------------

def click(self) :
INDENT
    alreadyPressed = False
    while True :
    INDENT
        padPressed = GPIO.input(padPin)
        if padPressed and not alreadyPressed :
        INDENT
            print "click"
            time.sleep(2)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def click(self) :
INDENT
    while True :
    INDENT
        padPressed = GPIO.input(padPin)
        if padPressed :
        INDENT
            print ("click")
            t.changeStatus()

        DEDENT
        alreadyPressed = padPressed
        time.sleep(0.5)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
505559_505598_1_20
505559_505663_1_21
Title: Closures in Python 
----------------------------------------

def memoize(fn) :
INDENT
    def get(key) :
    INDENT
        return (False,)
    DEDENT
    def vset(key, value) :
    INDENT
        def newget(ky) :
        INDENT
            if key == ky : return (True, value)
            return get(ky)
        DEDENT
        get = newget
    DEDENT
    def mfun(* args) :
    INDENT
        cache = get(args)
        if (cache [0]) : return cache [1]
        val = fn(* args)
        vset(args, val)
        return val
    DEDENT
    return mfun
DEDENT
----------------------------------------

def memoize(fn) :
INDENT
    get = [lambda key : (False, None)]
    def vset(args) :
    INDENT
        value = fn(* args)
        oldget = get [0]
        def newget(key) :
        INDENT
            if args == key :
            INDENT
                return (True, value)
            DEDENT
            return oldget(key)
        DEDENT
        get [0] = newget
        return value
    DEDENT
    def mfun(* args) :
    INDENT
        found, value = get [0](args)
        if found :
        INDENT
            return value
        DEDENT
        return vset(args)
    DEDENT
    return mfun
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
505559_505598_5_10
505559_505663_4_13
Title: Closures in Python 
----------------------------------------

def vset(key, value) :
INDENT
    def newget(ky) :
    INDENT
        if key == ky : return (True, value)
        return get(ky)
    DEDENT
    get = newget
DEDENT
----------------------------------------

def vset(args) :
INDENT
    value = fn(* args)
    oldget = get [0]
    def newget(key) :
    INDENT
        if args == key :
        INDENT
            return (True, value)
        DEDENT
        return oldget(key)
    DEDENT
    get [0] = newget
    return value
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
505559_505598_5_10
505559_505669_11_17
Title: Closures in Python 
----------------------------------------

def vset(key, value) :
INDENT
    def newget(ky) :
    INDENT
        if key == ky : return (True, value)
        return get(ky)
    DEDENT
    get = newget
DEDENT
----------------------------------------

def vset(key, value) :
INDENT
    oldget = memo.get
    def newget(ky) :
    INDENT
        if key == ky : return (True, value)
        return oldget(ky)
    DEDENT
    memo.get = newget
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
505559_505663_1_21
505559_505669_4_26
Title: Closures in Python 
----------------------------------------

def memoize(fn) :
INDENT
    get = [lambda key : (False, None)]
    def vset(args) :
    INDENT
        value = fn(* args)
        oldget = get [0]
        def newget(key) :
        INDENT
            if args == key :
            INDENT
                return (True, value)
            DEDENT
            return oldget(key)
        DEDENT
        get [0] = newget
        return value
    DEDENT
    def mfun(* args) :
    INDENT
        found, value = get [0](args)
        if found :
        INDENT
            return value
        DEDENT
        return vset(args)
    DEDENT
    return mfun
DEDENT
----------------------------------------

def memoize(fn) :
INDENT
    def defaultget(key) :
    INDENT
        return (False,)
    DEDENT
    memo = Memo()
    memo.get = defaultget
    def vset(key, value) :
    INDENT
        oldget = memo.get
        def newget(ky) :
        INDENT
            if key == ky : return (True, value)
            return oldget(ky)
        DEDENT
        memo.get = newget
    DEDENT
    def mfun(* args) :
    INDENT
        cache = memo.get(args)
        if cache [0] : return cache [1]
        val = apply(fn, args)
        vset(args, val)
        return val
    DEDENT
    return mfun
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
505559_505663_4_13
505559_505669_11_17
Title: Closures in Python 
----------------------------------------

def vset(args) :
INDENT
    value = fn(* args)
    oldget = get [0]
    def newget(key) :
    INDENT
        if args == key :
        INDENT
            return (True, value)
        DEDENT
        return oldget(key)
    DEDENT
    get [0] = newget
    return value
DEDENT
----------------------------------------

def vset(key, value) :
INDENT
    oldget = memo.get
    def newget(ky) :
    INDENT
        if key == ky : return (True, value)
        return oldget(ky)
    DEDENT
    memo.get = newget
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5055972_5677759_23_45
5055972_5677759_48_57
Title: PyQt4 Scatterplot with Clickable and Selectable Points 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    self.fig = Figure()
    FigureCanvas.__init__(self, self.fig)
    self.axes = self.fig.add_subplot(111)
    xlim = [0, 7]
    ylim = [0, 7]
    self.axes.set_xlim(xlim)
    self.axes.set_ylim(ylim)
    self.axes.set_aspect(1)
    x = [1, 1.2, 3, 4, 5, 6]
    y = [1, 1.2, 3, 4, 5, 6]
    labels = ['1', '2', '3', '4', '5', '6']
    for i in range(len(x)) :
    INDENT
        sp = SelectablePoint((x [i], y [i]), labels [i], self.fig)
        self.axes.add_artist(sp.point)
    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    QtGui.QMainWindow.__init__(self)
    self.resize(900, 600)
    self.setWindowTitle('Scatter Plot')
    sp = ScatterPlot(self)
    self.setCentralWidget(sp)
    self.center()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50569692_50571713_26_36
50569692_50573165_4_13
Title: Zipping files in Twistd without blocking. 
----------------------------------------

def main() :
INDENT
    input_paths = ['path_to_file1', 'path_to_file2']
    output_paths = ['path_out1', 'path_out2']
    assert len(input_paths) == len(output_paths)
    dl = defer.DeferredList([zip_file_and_catch_error(input_path, output_path) for input_path, output_path in zip(input_paths, output_paths)])
    dl.addCallback(lambda result : log.info("result: %s", result))
    dl.addBoth(lambda _ : reactor.callLater(0, reactor.stop))
    reactor.run()

DEDENT
----------------------------------------

def main() :
INDENT
    file_list = ['path_to_file1', 'path_to_file2']
    output_path = 'full_path_to_output.zip'
    zip_obj = zipfile.ZipFile(output_path, mode = 'w', allowZip64 = True)
    d = zip_files(zip_obj, file_list)
    d.addCallback(handle_success)
    d.addErrback(handle_error)
    d.addBoth(close_zip_obj, zip_obj = zip_obj)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50588648_50588849_1_10
50588648_50589521_1_11
Title: How do I count the pairs next to one another while using the last and next letter as a possible pair 
----------------------------------------

def count_pairs(s) :
INDENT
    c = 0
    i = 0
    while i < len(s) - 1 :
    INDENT
        if s [i] == s [i + 1] :
        INDENT
            c += 1
            i += 2
        DEDENT
        else :
        INDENT
            i += 1
        DEDENT
    DEDENT
    return c
DEDENT
----------------------------------------

def count_pairs(s) :
INDENT
    def loop(pairs, x = None, y = None, * rest) :
    INDENT
        if x is None or y is None :
        INDENT
            return pairs
        DEDENT
        elif x == y :
        INDENT
            return loop(pairs + 1, y, * rest)
            return loop(pairs + 1, * rest)
        DEDENT
        else :
        INDENT
            return loop(pairs, y, * rest)
        DEDENT
    DEDENT
    return loop(0, * s)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50604760_50623512_10_21
50604760_50623512_32_39
Title: QT draw a gray image into pseudo color (PyQt) 
----------------------------------------

def __init__(self) :
INDENT
    super(MyLabel, self).__init__()
    img = np.zeros((256, 256), dtype = np.uint8)
    img [0 : 128, 0 : 128] = 255
    img [128 : 255, 128 : 255] = 128
    disImg = cv2.applyColorMap(img, cv2.COLORMAP_AUTUMN)
    QImg = QImage(disImg.data, disImg.shape [1], disImg.shape [0], disImg.strides [0], QImage.Format_RGB888)
    self.qimg = QImg
    cv2.imshow('test', disImg)
    cv2.waitKey()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(Window, self).__init__()
    layout = QHBoxLayout(self)
    self.resize(300, 300)
    self.label = MyLabel()
    layout.addWidget(self.label)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50614592_50623256_19_33
50614592_50623256_64_73
Title: Pygame sprite sheet hitbox broken 
----------------------------------------

def __init__(self, x, y, py) :
INDENT
    super(Player, self).__init__()
    self.x = x
    self.y = y
    self.jumping = False
    self.platform_y = py
    self.velocity_index = 0
    self.velocity = list([(i / 1) - 20 for i in range(0, 60)])
    self.frame_index = 0
    self.image = PLAYER_IMAGES [self.frame_index]
    self.rect = self.image.get_rect()
    self.mask = pygame.mask.from_surface(self.image)
DEDENT
----------------------------------------

def __init__(self, x, y) :
INDENT
    super(Obstacle, self).__init__()
    self.image = pygame.Surface((90, 90), pygame.SRCALPHA)
    self.image.fill((100, 150, 0))
    self.image = pygame.transform.scale(self.image, (90, 90))
    self.rect = self.image.get_rect(center = (x, y))
    self.x = x
    self.y = y
    self.mask = pygame.mask.from_surface(self.image)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50614592_50623256_45_54
50614592_50623256_74_81
Title: Pygame sprite sheet hitbox broken 
----------------------------------------

def update(self) :
INDENT
    self.rect.center = self.x, self.y
    self.do_jump()
    self.frame_index += 1
    self.frame_index %= len(PLAYER_IMAGES) * 7
    self.image = PLAYER_IMAGES [self.frame_index / / 7]

DEDENT
----------------------------------------

def update(self) :
INDENT
    if self.x < - 64 :
    INDENT
        self.kill()
    DEDENT
    self.x += speed
    self.rect.center = self.x, self.y

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50615031_50615155_1_21
50615031_50622699_1_19
Title: Need to ignore leading zeros for digit count function in python 
----------------------------------------

def digit_count(n) :
INDENT
    if isinstance(n, float) and str(n).split('.') [0] == '0' :
    INDENT
        return (0, 0, 0)
    DEDENT
    else :
    INDENT
        n = str(int(n))

    DEDENT
    even_count = 0
    odd_count = 0
    zero_count = 0
    for i in n :
    INDENT
        if int(i) % 10 == 0 :
        INDENT
            zero_count += 1
        DEDENT
        elif int(i) % 2 == 0 :
        INDENT
            even_count += 1
        DEDENT
        elif int(i) % 2 ! = 0 :
        INDENT
            odd_count += 1
        DEDENT
    DEDENT
    return (even_count, odd_count, zero_count)
DEDENT
----------------------------------------

def digit_count(n) :
INDENT
    n = str(int(n))
    even_count, zero_count = 0, 0
    for i in n :
    INDENT
        i = int(i)
        if len(n) == 1 and i == 0 :
        INDENT
            return (0, 0, 0)
        DEDENT
        elif i == 0 :
        INDENT
            zero_count += 1
        DEDENT
        elif i ! = 0 and i % 2 == 0 :
        INDENT
            even_count += 1
        DEDENT
    DEDENT
    return (even_count, len(n) - even_count - zero_count, zero_count)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50623735_50623928_38_45
50623735_50623928_8_27
Title: the colormap is different using cv2.imshow and drawpixmap in PyQt5 
----------------------------------------

def __init__(self) :
INDENT
    super(Window, self).__init__()
    layout = QHBoxLayout(self)
    self.resize(300, 300)
    self.label = MyLabel()
    layout.addWidget(self.label)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(MyLabel, self).__init__()
    img = np.zeros((256, 256), dtype = np.uint8)
    img [0 : 128, 0 : 128] = 255
    img [128 : 255, 128 : 255] = 128
    disImg = cv2.applyColorMap(img, cv2.COLORMAP_AUTUMN)
    b = disImg [:, :, 0]
    g = disImg [:, :, 1]
    r = disImg [:, :, 2]
    img = np.zeros((256, 256, 3), dtype = np.uint8)
    img [:, :, 0] = r
    img [:, :, 1] = g
    img [:, :, 2] = b
    disImg = img

    QImg = QImage(disImg.data, disImg.shape [1], disImg.shape [0], disImg.strides [0], QImage.Format_RGB888)
    self.qimg = QImg
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50632828_50632958_16_21
50632828_50633179_11_16
Title: "Tkinter create shrinking circle on each mouse click how to make it work with multiple clicks?" 
----------------------------------------

def shrink(self) :
INDENT
    if self.r > 0 :
    INDENT
        self.r -= 1
        c.coords(self.circ, self.x - self.r, self.y - self.r, self.x + self.r, self.y + self.r)
        c.after(100, self.shrink)
    DEDENT
DEDENT
----------------------------------------

def shrink(c, x, y, r) :
INDENT
    if r > 0 :
    INDENT
        r -= 1
        canvas.coords(c, x - r, y - r, x + r, y + r)
        canvas.after(100, shrink, c, x, y, r)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50643953_50644591_1_21
50643953_50655934_1_15
Title: Dictionary Structure (dict -> dict) with a list in it comparison 
----------------------------------------

def compare(one, two) :
INDENT
    if set(one.keys()) ! = set(two.keys()) :
    INDENT
        main_key_added = set(two.keys()) - set(one.keys())
        main_key_removed = set(one.keys()) - set(two.keys())
        print ("The main key {} where added".format(main_key_added))
        print ("The main key {} where removed".format(main_key_removed))
        return False
    DEDENT
    for mainkey in one :
    INDENT
        if set(one [mainkey].keys()) ! = set(two [mainkey].keys()) :
        INDENT
            second_key_added = set(two [mainkey].keys()) - set(one [mainkey].keys())
            second_key_removed = set(one [mainkey].keys()) - set(two [mainkey].keys())
            print ("The second key {} where added for main key {}".format(second_key_added, mainkey))
            print ("The second key {} where removed for main key".format(second_key_removed, mainkey))
            return False
        DEDENT
        for subkey in one [mainkey] :
        INDENT
            if not set(one [mainkey] [subkey]) ^ set(two [mainkey] [subkey]) :
            INDENT
                return False
            DEDENT
        DEDENT
    DEDENT
    return True
DEDENT
----------------------------------------

def compare(one, two) :
INDENT
    for mainkey in one :
    INDENT
        for key in set(one [mainkey].keys()).difference(two [mainkey].keys()) :
        INDENT
            print "{0} was removed. Removed values: {1}".format(key, one [mainkey] [key])
        DEDENT
        for key in set(two [mainkey].keys()).difference(one [mainkey].keys()) :
        INDENT
            print "{0} was added. Added values: {1}".format(key, two [mainkey] [key])
        DEDENT
        for key in set(one [mainkey].keys()).intersection(two [mainkey].keys()) :
        INDENT
            if set(one [mainkey] [key]) ^ set(two [mainkey] [key]) : print ("{0} was modified. New values {1}".format(key, set(one [mainkey] [key]) ^ set(two [mainkey] [key])))
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50655768_50655975_9_27
50655768_50663269_5_21
Title: Sierpinski triangles using turtle and recursive function 
----------------------------------------

def sierpinski(a, t, size) :
INDENT
    if a == 0 :
    INDENT
        for i in range(3) :
        INDENT
            t.forward(size)
            t.left(120)
        DEDENT
    DEDENT
    else :
    INDENT
        sierpinski(a - 1, t, size / 2)
        t.forward(size / 2)
        sierpinski(a - 1, t, size / 2)
        t.forward(size / 2)
        t.left(120)
        t.forward(size / 2)
        sierpinski(a - 1, t, size / 2)
        t.forward(size / 2)
        t.left(120)
        t.forward(size)
        t.left(120)
    DEDENT
DEDENT
----------------------------------------

def sierpinski(depth, turtle, size) :
INDENT
    turtle.shapesize(size / CURSOR_SIZE)
    turtle.stamp()
    if depth < 1 :
    INDENT
        return
    DEDENT
    half = size / 2
    circumradius = half * 3 ** 0.5 / 3
    for _ in range(3) :
    INDENT
        turtle.forward(circumradius)
        sierpinski(depth - 1, turtle, half)
        turtle.backward(circumradius)
        turtle.left(120)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50688002_50688846_45_60
50688002_50688846_68_81
Title: Emit signal from QAction passing custom widget value 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ColorFilters, self).__init__(parent)
    lay_main = QtGui.QGridLayout(self)
    lay_main.setSpacing(5)
    lay_main.setContentsMargins(5, 5, 5, 5)
    self.ui_any_color = QtGui.QLabel('Reset')
    lay_main.addWidget(self.ui_any_color, 0, 0, 1, 4)
    self.ui_any_color.installEventFilter(self)
    for i, color in enumerate((QtGui.QColor(255, 0, 0), QtGui.QColor(0, 255, 0), QtGui.QColor(0, 0, 255))) :
    INDENT
        ui_swatch = QColorSwatch()
        ui_swatch.color = color
        lay_main.addWidget(ui_swatch, 1, i + 1)
        ui_swatch.colorClicked.connect(self.colorSelected)
    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(Example, self).__init__()
    colAction = QtGui.QWidgetAction(self)
    ql = ColorFilters(self)
    colAction.setDefaultWidget(ql)
    ql.colorSelected.connect(self.clicked_color)
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('&File')
    fileMenu.addAction(colAction)
    self.setGeometry(300, 300, 250, 150)
    self.setWindowTitle('Menubar')
    self.show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50688002_50688846_45_60
50688002_50688846_9_17
Title: Emit signal from QAction passing custom widget value 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ColorFilters, self).__init__(parent)
    lay_main = QtGui.QGridLayout(self)
    lay_main.setSpacing(5)
    lay_main.setContentsMargins(5, 5, 5, 5)
    self.ui_any_color = QtGui.QLabel('Reset')
    lay_main.addWidget(self.ui_any_color, 0, 0, 1, 4)
    self.ui_any_color.installEventFilter(self)
    for i, color in enumerate((QtGui.QColor(255, 0, 0), QtGui.QColor(0, 255, 0), QtGui.QColor(0, 0, 255))) :
    INDENT
        ui_swatch = QColorSwatch()
        ui_swatch.color = color
        lay_main.addWidget(ui_swatch, 1, i + 1)
        ui_swatch.colorClicked.connect(self.colorSelected)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(QColorSwatch, self).__init__(* args, ** kwargs)
    self.setFixedWidth(18)
    self.setFixedHeight(18)
    self.setAutoFillBackground(True)
    self._color = None
    self.color = QtGui.QColor(0, 0, 0)
    self.pressed.connect(self.color_clicked)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50688002_50688846_68_81
50688002_50688846_9_17
Title: Emit signal from QAction passing custom widget value 
----------------------------------------

def __init__(self) :
INDENT
    super(Example, self).__init__()
    colAction = QtGui.QWidgetAction(self)
    ql = ColorFilters(self)
    colAction.setDefaultWidget(ql)
    ql.colorSelected.connect(self.clicked_color)
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('&File')
    fileMenu.addAction(colAction)
    self.setGeometry(300, 300, 250, 150)
    self.setWindowTitle('Menubar')
    self.show()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(QColorSwatch, self).__init__(* args, ** kwargs)
    self.setFixedWidth(18)
    self.setFixedHeight(18)
    self.setAutoFillBackground(True)
    self._color = None
    self.color = QtGui.QColor(0, 0, 0)
    self.pressed.connect(self.color_clicked)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50690761_50690927_2_13
50690761_50691832_3_15
Title: Code Fight findClosestPair not returning the correct distance between sum 
----------------------------------------

def findClosestPair(numbers, sum) :
INDENT
    l = []
    newl = []
    for x, y in list(itertools.permutations(numbers, 2)) :
    INDENT
        if x + y == sum :
        INDENT
            l.append((x, y))
        DEDENT
    DEDENT
    for x, y in l :
    INDENT
        newl.append(abs(int(x - y)))
    DEDENT
    if l :
    INDENT
        return min([min(i) for i in l if abs(int(i [0] - i [- 1])) == min(newl)])
    DEDENT
    else :
    INDENT
        return - 1
    DEDENT
DEDENT
----------------------------------------

def findClosestPair(numbers, sum) :
INDENT
    num_len = len(numbers)
    distance = num_len + 1
    for x in range(num_len) :
    INDENT
        for y in range(x + 1, num_len) :
        INDENT
            if numbers [x] + numbers [y] == sum :
            INDENT
                if distance > abs(y - x) :
                INDENT
                    distance = abs(y - x)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    if distance > num_len :
    INDENT
        return int(- 1)
    DEDENT
    else :
    INDENT
        return distance
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50705536_50708286_28_42
50705536_50708286_65_73
Title: Need advice to keep GUI responsive 
----------------------------------------

def run(self) :
INDENT
    self.progress_bar.setVisible(True)
    self.label.setText('Searching...')
    self.thread = QtCore.QThread()
    self.data_grabber = DataGrabber()
    self.data_grabber.moveToThread(self.thread)
    self.data_grabber.update_progress.connect(self.update_progress_bar)
    self.data_grabber.results.connect(self.display_results)
    self.data_grabber.finished.connect(self.complete)
    self.data_grabber.finished.connect(self.thread.quit)
    self.data_grabber.finished.connect(self.data_grabber.deleteLater)
    self.thread.finished.connect(self.thread.deleteLater)
    self.thread.started.connect(self.data_grabber.run)
    self.thread.start()
DEDENT
----------------------------------------

def run(self) :
INDENT
    while self.count < = 100 :
    INDENT
        self.update_progress.emit()
        self.count += 1
        time.sleep(0.02)
    DEDENT
    self.send_results()
    self.finished.emit()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50707253_50711986_1_10
50707253_50719357_1_29
Title: Classify scraped results side by side into a row 
----------------------------------------

def parse(self, response) :
INDENT
    address = []
    area = []
    for i in response.css('span.dir') :
    INDENT
        address.append(i.css('b::text').extract())
    DEDENT
    yield {'address' : address}
    for l in response.css('div.datos') :
    INDENT
        area.append(l.css('i::text').extract())
    DEDENT
    yield {'area' : area}
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    addresses = []
    areas = []
    prices_stable = []
    prices_drop = []
    prices_decreased = []
    links = []
    for i in response.css('span.dir') :
    INDENT
        addresses.append(i.css('b::text').extract())
    DEDENT
    for l in response.css('div.datos') :
    INDENT
        areas.append(l.css('i::text').extract())
    DEDENT
    for x in response.css('div.opciones') :
    INDENT
        prices_stable.append(x.css('span.eur::text').extract())
    DEDENT
    for o in response.css('div.opciones') :
    INDENT
        prices_drop.append(o.css('div.mp_pvpant.baja::text').extract())
    DEDENT
    for y in response.css('div.opciones') :
    INDENT
        prices_decreased.append(y.css('span.eur_m::text').extract())
    DEDENT
    for u in response.css('div.datos') :
    INDENT
        links.append(u.css('a::attr(href)').extract_first())
    DEDENT
    for address, area, price_stable, price_drop, price_decreased, link in zip(addresses, areas, prices_stable, prices_drop, prices_decreased, links) :
    INDENT
        yield {
            'address' : address,
            'area' : area,
            'price_stable' : price_stable,
            'price_drop' : price_drop,
            'price_decreased' : price_decreased,
            'link' : link,
            }
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50716971_50717255_11_20
50716971_50717506_11_26
Title: How to print whole parent - node - child structure 
----------------------------------------

def __repr__(self) :
INDENT
    if self.children :
    INDENT
        print_data = "Node " + repr(self.data) + " ↴" + "\n"
        indent = "    "
        for child in self.children :
        INDENT
            for line in repr(child).splitlines() :
            INDENT
                print_data += indent + line + "\n"
            DEDENT
        DEDENT
        return print_data
    DEDENT
    else :
    INDENT
        return "Node " + repr(self.data)
    DEDENT
DEDENT
----------------------------------------

def __repr__(self, current_parent = None, indent_increase = 1) :
INDENT
    if self.children :
    INDENT
        print_data = ""
        print_data += "Node " + str(self.data) + " ↴" + "\n"
        indent = "    "
        for child in self.children :
        INDENT
            if current_parent ! = child.parent :
            INDENT
                print_data += ((indent * indent_increase) + child.__repr__(child.parent, indent_increase + 1) + "\n")
            DEDENT
            else :
            INDENT
                print_data += ((indent * indent_increase) + str(child) + "\n")
            DEDENT
        DEDENT
        return print_data
    DEDENT
    else :
    INDENT
        return "Node " + str(self.data)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50746437_50761293_106_114
50746437_50761293_40_53
Title: Postgres / SQLAlchemy: no matching unique constraint 
----------------------------------------

def _define_relationships(cls) :
INDENT
    cls.thing_type = relationship('ThingType',
        back_populates = 'things',
        lazy = 'select')
    cls.feature_type = relationship('ThingFeatureType',
        back_populates = 'things',
        lazy = 'select')
DEDENT
----------------------------------------

def _define_relationships(cls) :
INDENT
    cls.things = relationship('Thing',
        back_populates = 'thing_type',
        cascade = 'save-update, delete',
        lazy = 'select')
    cls.thing_feature_types = relationship(
        'ThingFeatureType',
        back_populates = 'thing_type',
        cascade = 'save-update, delete',
        lazy = 'select')

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50746437_50761293_106_114
50746437_50761293_72_84
Title: Postgres / SQLAlchemy: no matching unique constraint 
----------------------------------------

def _define_relationships(cls) :
INDENT
    cls.thing_type = relationship('ThingType',
        back_populates = 'things',
        lazy = 'select')
    cls.feature_type = relationship('ThingFeatureType',
        back_populates = 'things',
        lazy = 'select')
DEDENT
----------------------------------------

def _define_relationships(cls) :
INDENT
    cls.the_feature = relationship('Feature',
        back_populates = 'feature_types',
        lazy = 'select')
    cls.thing_type = relationship('ThingType',
        back_populates = 'feature_types',
        lazy = 'select')
    cls.things = relationship('Thing',
        back_populates = 'feature_type',
        lazy = 'select')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50746437_50761293_40_53
50746437_50761293_72_84
Title: Postgres / SQLAlchemy: no matching unique constraint 
----------------------------------------

def _define_relationships(cls) :
INDENT
    cls.things = relationship('Thing',
        back_populates = 'thing_type',
        cascade = 'save-update, delete',
        lazy = 'select')
    cls.thing_feature_types = relationship(
        'ThingFeatureType',
        back_populates = 'thing_type',
        cascade = 'save-update, delete',
        lazy = 'select')

DEDENT
----------------------------------------

def _define_relationships(cls) :
INDENT
    cls.the_feature = relationship('Feature',
        back_populates = 'feature_types',
        lazy = 'select')
    cls.thing_type = relationship('ThingType',
        back_populates = 'feature_types',
        lazy = 'select')
    cls.things = relationship('Thing',
        back_populates = 'feature_type',
        lazy = 'select')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50749686_50750677_38_51
50749686_50750677_4_30
Title: i am trying to destroy a window through a def funtion to another but i keep getting this error 
----------------------------------------

def __init__(self, controller, username, password) :
INDENT
    tk.Toplevel.__init__(self)
    self.controller = controller
    self.protocol("WM_DELETE_WINDOW", self.on_close)
    self.geometry("400x250")
    self.title("Register")
    self.resizable(False, False)
    self.configure(background = "Light blue")
    self.username = username
    self.password = password
    tk.Label(self, text = username).grid(row = 0, column = 0)
    tk.Label(self, text = password).grid(row = 1, column = 0)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.geometry("400x250")
    self.title("Tree Road School server")
    self.resizable(False, False)
    self.configure(background = "Light blue")
    self.columnconfigure(0, weight = 1)
    self.columnconfigure(2, weight = 1)
    self.rowconfigure(0, weight = 1)
    self.rowconfigure(2, weight = 1)
    center_frame = tk.Frame(self)
    center_frame.grid(row = 1, column = 1, sticky = "nsew")
    tk.Label(center_frame, text = "LOGIN", width = '6', font = ('Arial', 25)).grid(row = 0, column = 0, columnspan = 2, padx = 10, pady = 5)
    tk.Label(center_frame, text = "username: ", font = (15)).grid(row = 1, column = 0, padx = 10, pady = 5)
    tk.Label(center_frame, text = "password: ", font = (15)).grid(row = 2, column = 0, padx = 10, pady = 5)
    self.username = tk.Entry(center_frame, width = 15, bg = "White")
    self.username.grid(row = 1, column = 1, padx = 10, pady = 5)
    self.password = tk.Entry(center_frame, width = 15, bg = "White", show = "*")
    self.password.grid(row = 2, column = 1, padx = 10, pady = 5)
    tk.Button(center_frame, text = "login", width = 10).grid(row = 3, column = 0, padx = 10, pady = 5)
    tk.Button(center_frame, text = "Register", width = 14, command = self.atempt_register).grid(row = 3, column = 1, padx = 10, pady = 5)
    self.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50756044_50762951_25_35
50756044_50762951_51_70
Title: A GUI code to display duplicate files -PyQt5 
----------------------------------------

def __init__(self, fn, * args, ** kwargs) :
INDENT
    super(Worker, self).__init__()
    self.fn = fn
    self.args = args
    self.kwargs = kwargs
    self.signals = SignalHelper()

    kwargs ['progress_callback'] = self.signals.progress
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(MainWindow, self).__init__(* args, ** kwargs)
    layout = QVBoxLayout()
    self.textEdit = QTextEdit("Display duplicate files :")
    self.textEdit.setReadOnly(True)
    self.b = QPushButton("Scan files")
    self.b.setCheckable(True)
    self.b.pressed.connect(self.watcher)
    layout.addWidget(self.textEdit)
    layout.addWidget(self.b)
    w = QWidget()
    w.setLayout(layout)
    self.setCentralWidget(w)
    self.threadpool = QThreadPool()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50759094_50759155_1_9
50759094_50759295_1_7
Title: Yield number into parts smaller than a threshold in Python 
----------------------------------------

def chunk(num, thresh) :
INDENT
    while True :
    INDENT
        if num > thresh :
        INDENT
            num -= thresh
            yield thresh
        DEDENT
        else :
        INDENT
            yield num
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def chunk(number, step) :
INDENT
    for i in range(number / / step) :
    INDENT
        yield step
    DEDENT
    rem = number % step
    if rem :
    INDENT
        yield rem
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50759094_50759155_1_9
50759094_50759452_1_6
Title: Yield number into parts smaller than a threshold in Python 
----------------------------------------

def chunk(num, thresh) :
INDENT
    while True :
    INDENT
        if num > thresh :
        INDENT
            num -= thresh
            yield thresh
        DEDENT
        else :
        INDENT
            yield num
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def chunk(number) :
INDENT
    steps = 10000
    while number > 0 :
    INDENT
        yield min(number, steps)
        number -= steps
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50759094_50759295_1_7
50759094_50759452_1_6
Title: Yield number into parts smaller than a threshold in Python 
----------------------------------------

def chunk(number, step) :
INDENT
    for i in range(number / / step) :
    INDENT
        yield step
    DEDENT
    rem = number % step
    if rem :
    INDENT
        yield rem
    DEDENT
DEDENT
----------------------------------------

def chunk(number) :
INDENT
    steps = 10000
    while number > 0 :
    INDENT
        yield min(number, steps)
        number -= steps
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50764739_50765042_4_16
50764739_50765311_3_27
Title: Guessing a letter A-Z 
----------------------------------------

def check_guess(guess, letter) :
INDENT
    if not guess.isalpha() :
    INDENT
        print ("Invalid")
        return False
    DEDENT
    if letter == guess.upper() :
    INDENT
        return True
    DEDENT
    elif letter < guess.upper() :
    INDENT
        print ("Your guess is High")
        return False
    DEDENT
    else :
    INDENT
        print ("Your guess is Low")
        return False
    DEDENT
DEDENT
----------------------------------------

def check_guess(letter) :
INDENT
    tries = 3
    while tries > 0 :
    INDENT

        guess = input("Enter your guess ")
        if letter == guess.upper() :
        INDENT
            print ("Correct!")
            break
        DEDENT
        elif letter < guess.upper() :
        INDENT
            if tries > 1 :
            INDENT
                print ("You are wrong, but go closer to A")
            DEDENT
            tries = tries - 1
        DEDENT
        elif letter > guess.upper() :
        INDENT
            if tries > 1 :
            INDENT
                print ("You are wrong, but go closer to Z")
            DEDENT
            tries = tries - 1
        DEDENT
    DEDENT
    if tries == 0 :
    INDENT
        print ("GAME OVER!")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50773360_50774114_144_151
50773360_50775574_1_8
Title: Why are my balls sticking together? 
----------------------------------------

def resetBalls(self) :
INDENT
    self.balls = []
    for j in range(self.numberOfBalls) :
    INDENT

        x = Vector(x = j, y = j) - Vector(x = j, y = j)
        self.balls.append(Ball(self.posVector, x))

    DEDENT
DEDENT
----------------------------------------

def resetBalls(self) :
INDENT
    self.balls = []
    for j in range(self.numberOfBalls) :
    INDENT
        self.balls.append(
            Ball(copy(self.posVector), moveVector = Vector(0.0, 0.0)))

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50785979_50786030_4_23
50785979_50786035_1_20
Title: My bmi calculator is running backwards 
----------------------------------------

def bmi_intro() :
INDENT
    print ("BMI Calculator")
    while end == False :
    user = input("Enter students name or '0' to quit: ")
    if user == "0" :
    INDENT
        print ("end of report!")
        break
    DEDENT
    else :
    INDENT
        def userName(str) :
        INDENT
            user = str
        DEDENT
        print ("Lets gather your information,", user)

        get_height = float(input("Please enter your height in inches: "))
        get_weight = float(input("Please enter your weight: "))
        body_mass_index = (get_weight * 703) / (get_height ** 2)
        print ("Your bmi is: ", body_mass_index)
    DEDENT
DEDENT
----------------------------------------

def bmi_intro() :
INDENT
    end = False
    print ("BMI Calculator")
    while end == False :
    INDENT

        user = input("Enter student's name or '0' to quit: ")
        if user == "0" :
        INDENT
            print ("end of report!")
            end = True
        DEDENT
        else :
        INDENT
            print ("Lets gather your information,", user)
            get_height = float(input("Please enter your height in inches: "))
            get_weight = float(input("Please enter your weight: "))
            body_mass_index = (get_weight * 703) / (get_height ** 2)
            print ("Your bmi is:", body_mass_index)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50786974_50787405_21_30
50786974_50787405_7_19
Title: AttributeError: '_tkinter.tkapp' object has no attribute 'titleBar' 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller

    self.titleLabel = tk.Label(self, text = "This is the initial text")
    self.titleLabel.pack(side = tk.LEFT)

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)

    container = tk.Frame(self, bg = "green")
    container.pack(side = "top", fill = "both", expand = True)

    self.titleBar = TitleBar(container, controller = self)
    self.titleBar.grid(row = 0, column = 0, columnspan = 2, sticky = tk.N + tk.W + tk.E)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50788144_50788209_1_11
50788144_50788270_1_12
Title: Find smallest number and its index 
----------------------------------------

def find_smallest(xy) :
INDENT
    m = None
    matches = []
    for i, n in enumerate(xy) :
    INDENT
        if n == m :
        INDENT
            matches.append((n, i))
        DEDENT
        if m is None or n < m :
        INDENT
            m = n
            matches = [(n, i)]
        DEDENT
    DEDENT
    return matches
DEDENT
----------------------------------------

def find_smallest(xy) :
INDENT
    minimum = np.min(xy)
    index = 0
    indexes = []
    minimums = []
    for item in xy :
    INDENT
        if item == minimum :
        INDENT
            minimums.append(minimum)
            indexes.append(index)
        DEDENT
        index += 1
    DEDENT
    return tuple(minimums), tuple(indexes)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50791031_50791208_4_10
50791031_50870867_6_13
Title: Scrapy merging chained requests into one 
----------------------------------------

def start_requests(self) :
INDENT
    params = getShopList()
    for param in params :
    INDENT
        yield scrapy.FormRequest('https://foo.bar/shop', callback = self.addToBasket,
            method = 'POST', formdata = param)

    DEDENT
DEDENT
----------------------------------------

def start_requests(self) :
INDENT
    self.crawler.signals.connect(self.spider_idle, signals.spider_idle)
    params = getShopList()
    for param in params :
    INDENT
        yield scrapy.FormRequest('https://foo.bar/shop', callback = self.addToBasket,
            method = 'POST', formdata = param)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50802721_50803131_3_14
50802721_50803367_8_28
Title: Dynamically change GUI element in PyQt5? 
----------------------------------------

def __init__(self) :
INDENT
    QtWidgets.QWidget.__init__(self)
    self.layout = QtWidgets.QGridLayout()
    self.button = QtWidgets.QPushButton('Insert Table')
    self.button.clicked.connect(self.create_table)
    self.layout.addWidget(self.button)
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(window, self).__init__()
    self.setGeometry(50, 50, 500, 300)
    self.setWindowTitle('my test gui')
    self.central_widget = QWidget()
    self.setCentralWidget(self.central_widget)
    self.lay = QVBoxLayout(self.central_widget)

    self.button = QPushButton('Insert table', self)
    self.button.move(5, 20)
    self.button.clicked.connect(self.create_table)
    self.lay.addWidget(self.button)
    self.lay.addStretch(1)

    self.show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50841165_50841867_48_53
50841165_50841867_87_92
Title: How to correctly wrap a dict in Python 3? 
----------------------------------------

def __delattr__(self, name) :
INDENT
    if not name in self :
    INDENT
        raise AttributeError(
            "Attribute {} does not exist".format(name))
    DEDENT
    del self [name]

DEDENT
----------------------------------------

def __delattr__(self, name) :
INDENT
    if not name in self :
    INDENT
        raise AttributeError(
            "Attribute {} does not exist".format(name))
    DEDENT
    del self [name]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50851769_50854131_28_37
50851769_50854131_7_18
Title: Tkinter window does not update correctly when running 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    Frame.__init__(self, parent)
    self.parent = parent
    self.label = Label(self, text = "Current ID:\n")
    self.label.pack(padx = 10, pady = 10)
    self.var1 = StringVar()
    self.data_label = Label(self, textvariable = self.var1)
    self.data_label.pack()
    self.update_idletasks()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    Tk.__init__(self, * args, ** kwargs)
    Tk.wm_title(self, "Main Window")
    self.container = Frame(self)
    self.container.pack(side = TOP, fill = BOTH, expand = TRUE)
    self.frames = {}
    self.frame = StartPage(self.container, self)
    self.frames [StartPage] = self.frame
    self.frame.pack(side = TOP, fill = BOTH, expand = TRUE)
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50858952_50859546_22_39
50858952_50863337_1_17
Title: "Fail to ""blink""/ change color of tkinter widget when using `after`" 
----------------------------------------

def blink_tx(self) :
INDENT
    if self.blink_status == 1 :
    INDENT
        self.tx_label ["bg"] = 'green'
        self.tx_value.set('Tx')
        self.blink_status = random.randint(0, 2)
        self.after(1000, self.blink_tx_step_2, 'blue')
    DEDENT
    elif self.blink_status == 0 :
    INDENT
        self.tx_label ["bg"] = 'red'
        self.tx_value.set('*')
        self.blink_status = random.randint(0, 2)
        self.after(2000, self.blink_tx_step_2, 'orange')
    DEDENT
    else :
    INDENT
        self.tx_label ["bg"] = 'red'
        self.tx_value.set('x')
        self.blink_status = random.randint(0, 2)
        self.after(2000, self.blink_tx_step_2)

    DEDENT
DEDENT
----------------------------------------

def blink_tx(self) :
INDENT
    def blink_1(color1, color2, txt) :
    INDENT
        self.tx_label ["bg"] = color1
        self.tx_value.set(txt)
        self.after(t_blink, blink_2, color2)
    DEDENT
    def blink_2(color) :
    INDENT
        self.tx_label ["bg"] = color
        self.after(t_blink, self.blink_tx)
    DEDENT
    t_blink = 2500
    if self.blink_status == 1 :
    INDENT
        blink_1('green', 'orange', 'Tx')
    DEDENT
    elif self.blink_status == 0 :
    INDENT
        blink_1('red', 'yellow', '*')
    DEDENT
    else :
    INDENT
        blink_1('red', 'red', 'X')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50864694_50896145_12_17
50864694_50896145_29_33
Title: Object in django admin for a foreignkey : 
----------------------------------------

def __unicode__(self) :
INDENT
    title = 'Empty title'
    if self.name ! = '' :
    INDENT
        title = self.name
    DEDENT
    return title
DEDENT
----------------------------------------

def __unicode__(self) :
INDENT
    title = ''
    if self.stock and self.date :
    INDENT
        title = self.stock + ':' + self.date
    DEDENT
    return title
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50864694_50896145_23_28
50864694_50896145_6_11
Title: Object in django admin for a foreignkey : 
----------------------------------------

def __str__(self) :
INDENT
    title = 'Empty title'
    if (all([self.stock, self.date])) :
    INDENT
        title = '{}:{}'.format(self.stock, self.date)
    DEDENT
    return title
DEDENT
----------------------------------------

def __str__(self) :
INDENT
    title = 'Empty title'
    if self.name ! = '' :
    INDENT
        title = self.name
    DEDENT
    return title
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50871649_50871795_3_20
50871649_50874787_4_22
Title: Pause python script wait for key press 
----------------------------------------

def mainmenu() :
INDENT
    while (True) :
    INDENT
        print ('1. Scan')
        print ('2. Ping')
        print ('3. Exit')
        x = input()
        if x == 1 :
        INDENT
            print ('Option 1\n')
        DEDENT
        elif x == 2 :
        INDENT
            print ('Option 2\n')
        DEDENT
        elif x == 3 :
        INDENT
            print ('Exiting\n')
            exit(0)
        DEDENT
        else :
        INDENT
            print ('none of the specified options were chosen')
            time.sleep(0.3)
            exit(0)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def mainmenu() :
INDENT
    print ('1. Scan')
    print ('2. Ping')
    print ('3. Exit')
    while (True) :
    INDENT
        a = keyboard.read_key()
        if a == '1' or a == '2' :
        INDENT
            print ("Option {} was pressed\n".format(a))
        DEDENT
        elif a == '3' :
        INDENT
            print ("Exiting\n")
            exit(0)
        DEDENT
        else :
        INDENT
            print ("None\n")
            exit(0)
        DEDENT
        time.sleep(0.3)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50872392_50885397_24_32
50872392_50890822_10_18
Title: how rotate a line about the origin? 
----------------------------------------

def counterrotate(origin, point1, roll) :
INDENT
    ox, oy = origin
    px, py = point1
    angle = math.radians(roll)
    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return qx, qy
DEDENT
----------------------------------------

def counterrotate(origin, point1, roll) :
INDENT
    ox, oy = origin
    px, py = point1
    angle = math.radians(roll)
    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return qx, qy
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50872392_50885397_33_44
50872392_50890822_19_28
Title: how rotate a line about the origin? 
----------------------------------------

def rotate(origin, point, roll) :
INDENT
    ox, oy = origin
    px, py = point
    angle = math.radians(roll)
    qx = ox + math.cos(angle) * (px - ox) + math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return qx, qy

DEDENT
----------------------------------------

def rotate(origin, point, roll) :
INDENT
    ox, oy = origin
    px, py = point
    angle = math.radians(roll)
    qx = ox + math.cos(angle) * (px - ox) + math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return qx, qy

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50876768_50876860_1_14
50876768_50876934_1_11
Title: Finding sum of values generated from a for loop in Python 
----------------------------------------

def nSum(num) :
INDENT
    p = 0
    newValue = 0
    total_value = 0
    for i in range(num) :
    INDENT
        currentVal = num * 10 ** p
        p = p + 1
        newValue = currentVal + newValue
        print (newValue)
        total_value += newValue
    DEDENT
    return total_value
DEDENT
----------------------------------------

def nSum(num) :
INDENT
    values = []
    for p in range(num) :
    INDENT
        currentVal = num * 10 ** p
        newValue = currentVal + (values [- 1] if values else 0)
        values.append(newValue)
    DEDENT
    return values
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50880660_50881286_68_80
50880660_50935602_5_11
Title: "How to change space bar behaviour in PyQt5 Python3" 
----------------------------------------

def event(self, event) :
INDENT
    if (event.type() == QEvent.KeyPress) and (event.key() == Qt.Key_Space) :
    INDENT
        self.signalTabPressed.emit("Key Space; ")
        return True
    DEDENT
    if (event.type() == QEvent.KeyPress) and (event.key() == Qt.Key_W) :
    INDENT
        self.signalTabPressed.emit("Key W; ")
        return True
    DEDENT
    return QLineEdit.event(self, event)

DEDENT
----------------------------------------

def event(self, event) :
INDENT
    if (event.type() == QEvent.KeyPress) and (event.key() == Qt.Key_Space) :
    INDENT
        print (foo)
        return True
    DEDENT
    return QPushButton.event(self, event)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50886896_50887068_43_79
50886896_50887196_48_86
Title: "Code works without functions doesn't work with functions?" 
----------------------------------------

def colis(dotX, dotY, dotMX, dotMY, padX, padY, lives) :
INDENT
    if dotY > = 720 - 30 :
    INDENT
        lives -= 1

    DEDENT
    if dotX < = 0 + 20 :
    INDENT
        if dotMX == 1 :
        INDENT
            dotMX = - 1
        DEDENT
        else :
        INDENT
            dotMX = 1
        DEDENT
    DEDENT
    elif dotX > = 1280 - 20 :
    INDENT
        if dotMX == 1 :
        INDENT
            dotMX = - 1
        DEDENT
        else :
        INDENT
            dotMX = 1
        DEDENT
    DEDENT
    if dotY < = 0 - 20 :
    INDENT
        if dotMY == 1 :
        INDENT
            dotMY = - 1
        DEDENT
        else :
        INDENT
            dotMY = 1
        DEDENT
    DEDENT
    elif dotY > = 720 - 20 :
    INDENT
        if dotMY == 1 :
        INDENT
            dotMY = - 1
        DEDENT
        else :
        INDENT
            dotMY = 1
        DEDENT
    DEDENT
    if dotX > = padX and dotX < = padX + 150 and dotY == 665 :
    INDENT
        if dotMY == 1 :
        INDENT
            dotMY = - 1
        DEDENT
        else :
        INDENT
            dotMY = 1
        DEDENT
    DEDENT
    pygame.draw.circle(DISPLAYSURF, pygame.Color(255, 0, 0), (dotX, dotY), 20)
    return dotMX, dotMY, lives

DEDENT
----------------------------------------

def colis(self) :
INDENT
    if self.dot_y > = 720 - 30 :
    INDENT
        self.lives -= 1

    DEDENT
    if self.dot_x < = 0 + 20 :
    INDENT
        if self.dot_mx == 1 :
        INDENT
            self.dot_mx = - 1
        DEDENT
        else :
        INDENT
            self.dot_mx = 1
        DEDENT
    DEDENT
    elif self.dot_x > = 1280 - 20 :
    INDENT
        if self.dot_mx == 1 :
        INDENT
            self.dot_mx = - 1
        DEDENT
        else :
        INDENT
            self.dot_mx = 1

        DEDENT
    DEDENT
    if self.dot_y < = 0 - 20 :
    INDENT
        if self.dot_my == 1 :
        INDENT
            self.dot_my = - 1
        DEDENT
        else :
        INDENT
            self.dot_my = 1
        DEDENT
    DEDENT
    elif self.dot_y > = 720 - 20 :
    INDENT
        if self.dot_my == 1 :
        INDENT
            self.dot_my = - 1
        DEDENT
        else :
        INDENT
            self.dot_my = 1

        DEDENT
    DEDENT
    if self.dot_x > = self.pad_x and self.dot_x < = self.pad_x + 150 and self.dot_y == 665 :
    INDENT
        if self.dot_my == 1 :
        INDENT
            self.dot_my = - 1
        DEDENT
        else :
        INDENT
            self.dot_my = 1
        DEDENT
    DEDENT
    pygame.draw.circle(self.display, pygame.Color(
            255, 0, 0), (self.dot_x, self.dot_y), 20)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50893147_50899507_43_54
50893147_50899507_56_65
Title: Qt: change QFrame border color on focus in 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LeftPanel, self).__init__(parent)
    title = QtGui.QLabel("Left Panel")
    title.setAlignment(QtCore.Qt.AlignCenter)
    self.base_layout.addWidget(title)
    edit = QtGui.QLineEdit()
    self.base_layout.addWidget(edit)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(RightPanel, self).__init__(parent)
    title = QtGui.QLabel("Right Panel")
    title.setAlignment(QtCore.Qt.AlignCenter)
    self.base_layout.addWidget(title)
    edit = QtGui.QLineEdit()
    self.base_layout.addWidget(edit)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50893147_50899507_43_54
50893147_50899507_67_81
Title: Qt: change QFrame border color on focus in 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LeftPanel, self).__init__(parent)
    title = QtGui.QLabel("Left Panel")
    title.setAlignment(QtCore.Qt.AlignCenter)
    self.base_layout.addWidget(title)
    edit = QtGui.QLineEdit()
    self.base_layout.addWidget(edit)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(MainApp, self).__init__()
    main_layout = QtGui.QHBoxLayout()
    central_widget = QtGui.QWidget()
    central_widget.setLayout(main_layout)
    self.setCentralWidget(central_widget)
    left_panel = LeftPanel()
    main_layout.addWidget(left_panel)
    right_panel = RightPanel()
    main_layout.addWidget(right_panel)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50893147_50899507_43_54
50893147_50899507_8_28
Title: Qt: change QFrame border color on focus in 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LeftPanel, self).__init__(parent)
    title = QtGui.QLabel("Left Panel")
    title.setAlignment(QtCore.Qt.AlignCenter)
    self.base_layout.addWidget(title)
    edit = QtGui.QLineEdit()
    self.base_layout.addWidget(edit)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(BasePanel, self).__init__(parent)
    self.frame_layout = QtGui.QVBoxLayout()
    self.frame_layout.setContentsMargins(0, 0, 0, 0)
    self.setLayout(self.frame_layout)
    self.frame = QtGui.QFrame()
    self.frame.setObjectName("base_frame")
    self.frame.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)
    self.frame.setLineWidth(1)
    self.frame_layout.addWidget(self.frame)
    self.base_layout = QtGui.QVBoxLayout()
    self.frame.setLayout(self.base_layout)
    self.focus_in_color = "rgb(50, 255, 150)"
    self.focus_out_color = "rgb(100, 100, 100)"
    self.frame.setStyleSheet("#base_frame {border: 1px solid %s}" % self.focus_out_color)
    self.installEventFilter(self)
    self.install_filters()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50893147_50899507_56_65
50893147_50899507_67_81
Title: Qt: change QFrame border color on focus in 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(RightPanel, self).__init__(parent)
    title = QtGui.QLabel("Right Panel")
    title.setAlignment(QtCore.Qt.AlignCenter)
    self.base_layout.addWidget(title)
    edit = QtGui.QLineEdit()
    self.base_layout.addWidget(edit)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(MainApp, self).__init__()
    main_layout = QtGui.QHBoxLayout()
    central_widget = QtGui.QWidget()
    central_widget.setLayout(main_layout)
    self.setCentralWidget(central_widget)
    left_panel = LeftPanel()
    main_layout.addWidget(left_panel)
    right_panel = RightPanel()
    main_layout.addWidget(right_panel)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50893147_50899507_56_65
50893147_50899507_8_28
Title: Qt: change QFrame border color on focus in 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(RightPanel, self).__init__(parent)
    title = QtGui.QLabel("Right Panel")
    title.setAlignment(QtCore.Qt.AlignCenter)
    self.base_layout.addWidget(title)
    edit = QtGui.QLineEdit()
    self.base_layout.addWidget(edit)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(BasePanel, self).__init__(parent)
    self.frame_layout = QtGui.QVBoxLayout()
    self.frame_layout.setContentsMargins(0, 0, 0, 0)
    self.setLayout(self.frame_layout)
    self.frame = QtGui.QFrame()
    self.frame.setObjectName("base_frame")
    self.frame.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)
    self.frame.setLineWidth(1)
    self.frame_layout.addWidget(self.frame)
    self.base_layout = QtGui.QVBoxLayout()
    self.frame.setLayout(self.base_layout)
    self.focus_in_color = "rgb(50, 255, 150)"
    self.focus_out_color = "rgb(100, 100, 100)"
    self.frame.setStyleSheet("#base_frame {border: 1px solid %s}" % self.focus_out_color)
    self.installEventFilter(self)
    self.install_filters()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50893147_50899507_67_81
50893147_50899507_8_28
Title: Qt: change QFrame border color on focus in 
----------------------------------------

def __init__(self) :
INDENT
    super(MainApp, self).__init__()
    main_layout = QtGui.QHBoxLayout()
    central_widget = QtGui.QWidget()
    central_widget.setLayout(main_layout)
    self.setCentralWidget(central_widget)
    left_panel = LeftPanel()
    main_layout.addWidget(left_panel)
    right_panel = RightPanel()
    main_layout.addWidget(right_panel)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(BasePanel, self).__init__(parent)
    self.frame_layout = QtGui.QVBoxLayout()
    self.frame_layout.setContentsMargins(0, 0, 0, 0)
    self.setLayout(self.frame_layout)
    self.frame = QtGui.QFrame()
    self.frame.setObjectName("base_frame")
    self.frame.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)
    self.frame.setLineWidth(1)
    self.frame_layout.addWidget(self.frame)
    self.base_layout = QtGui.QVBoxLayout()
    self.frame.setLayout(self.base_layout)
    self.focus_in_color = "rgb(50, 255, 150)"
    self.focus_out_color = "rgb(100, 100, 100)"
    self.frame.setStyleSheet("#base_frame {border: 1px solid %s}" % self.focus_out_color)
    self.installEventFilter(self)
    self.install_filters()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50896944_50897057_18_22
50896944_50897086_4_27
Title: get a reversed sorted quickSort (descending order) 
----------------------------------------

def quickSort(lst, ascending = True) :
INDENT
    if ascending :
    INDENT
        return _quickSort(lst)
    DEDENT
    else :
    INDENT
        return _quickSort(lst) [: : - 1]
    DEDENT
DEDENT
----------------------------------------

def quickSort(L, ascending = True) :
INDENT
    if len(L) < = 1 :
    INDENT
        return L
    DEDENT
    smaller, equal, larger = [], [], []
    pivot = L [randint(0, len(L) - 1)]
    for x in L :
    INDENT
        if x < pivot :
        INDENT
            smaller.append(x)
        DEDENT
        elif x == pivot :
        INDENT
            equal.append(x)
        DEDENT
        else :
        INDENT
            larger.append(x)
        DEDENT
    DEDENT
    larger = quickSort(larger, ascending = ascending)
    smaller = quickSort(smaller, ascending = ascending)
    if ascending :
    INDENT
        final = smaller + equal + larger
    DEDENT
    else :
    INDENT
        final = larger + equal + smaller
    DEDENT
    return final

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50919800_50932585_16_23
50919800_50932585_25_32
Title: How to control display of tkinter Toplevel windows? 
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Toplevel.__init__(self, master)
    self.title("Input")
    self.geometry("700x500")
    tk.Button(self, text = "Cancle", command = self.destroy).grid(row = 3, column = 1)
    tk.Button(self, text = "ENTER", command = lambda : Input2(master)).grid(row = 3, column = 2)

DEDENT
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Toplevel.__init__(self, master)
    self.title("Input2")
    self.geometry("700x500")
    tk.Button(self, text = "Cancle", command = self.destroy).grid(row = 0, column = 0)
    tk.Button(self, text = "Solve!", command = lambda : Solve(master)).grid(row = 0, column = 1)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50919800_50932585_16_23
50919800_50932585_5_14
Title: How to control display of tkinter Toplevel windows? 
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Toplevel.__init__(self, master)
    self.title("Input")
    self.geometry("700x500")
    tk.Button(self, text = "Cancle", command = self.destroy).grid(row = 3, column = 1)
    tk.Button(self, text = "ENTER", command = lambda : Input2(master)).grid(row = 3, column = 2)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.geometry("500x200")
    self.columnconfigure(0, weight = 1)
    tk.Label(self, text = "Welcome to The Bees's").grid(row = 0, column = 0)
    tk.Label(self, text = "This is our project for Python course").grid(row = 1, column = 0)
    tk.Label(self, text = "This program is use for solving Linear Programming, IP, BIP, mixed... problem").grid(row = 2, column = 0)
    tk.Button(self, text = "Start", bg = "yellow", command = lambda : Input(self)).grid(row = 3, column = 0)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50919800_50932585_25_32
50919800_50932585_5_14
Title: How to control display of tkinter Toplevel windows? 
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Toplevel.__init__(self, master)
    self.title("Input2")
    self.geometry("700x500")
    tk.Button(self, text = "Cancle", command = self.destroy).grid(row = 0, column = 0)
    tk.Button(self, text = "Solve!", command = lambda : Solve(master)).grid(row = 0, column = 1)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.geometry("500x200")
    self.columnconfigure(0, weight = 1)
    tk.Label(self, text = "Welcome to The Bees's").grid(row = 0, column = 0)
    tk.Label(self, text = "This is our project for Python course").grid(row = 1, column = 0)
    tk.Label(self, text = "This program is use for solving Linear Programming, IP, BIP, mixed... problem").grid(row = 2, column = 0)
    tk.Button(self, text = "Start", bg = "yellow", command = lambda : Input(self)).grid(row = 3, column = 0)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50930945_50937974_51_62
50930945_50937974_9_40
Title: Overriding QPushButton Class Event Method with PySide 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWidget.__init__(self, parent)
    lay = QtGui.QVBoxLayout(self)
    info = [("category 1", self.fun1), ("category 2", self.fun2), ("category 3", self.fun3), ("category 4", self.fun4)]
    for text, fun in info :
    INDENT
        button = DropZone_Category(text)
        button.pathsChanged.connect(fun)
        lay.addWidget(button)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(DropZone_Category, self).__init__(* args, ** kwargs)
    font = self.font()
    font.setPointSize(16)
    font.setFamily("Calibri")
    self.setFont(font)
    self.resize(QtCore.QSize(120, 120))
    self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
    self.setMinimumSize(90, 90)
    self.setAcceptDrops(True)
    QSS = """
            DropZone_Category{
                background-color: rgb(100,100,100);
                color: lightgrey;
                border-radius: 3px;
            }

            DropZone_Category:hover{
                background-color: rgb(150,150,150);
                color: lightgrey;
                border-radius: 3px;
            }

            DropZone_Category:pressed{
                background-color: rgb(80,80,80);
                color: lightgrey;
                border-radius: 3px
            }
        """
    self.setStyleSheet(QSS)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50938297_50975089_137_144
50938297_50975089_6_24
Title: Managing when Python turtle checks for events 
----------------------------------------

def __init__(self, board, game) :
INDENT
    super().__init__(shape = 'turtle', visible = False)
    self.board = board
    self.game = game
    self.speed('fastest')
    self.penup()
    self.cnum = 3
DEDENT
----------------------------------------

def __init__(self, screen) :
INDENT
    self.pen = Turtle()
    self.scr = screen
    self.board = Connect4Board(self.pen)
    self.moves = 0
    self.playing = False
    self.piece = Connect4Piece(self.board, self)
    self.scr.tracer(False)
    self.board.draw_board()
    self.scr.tracer(True)
    self.scr.onkey(self.piece.prev_col, 'Left')
    self.scr.onkey(self.piece.next_col, 'Right')
    self.scr.onkey(self.piece.drop, 'Down')
    self.scr.onkey(self.reset, 'r')
    self.scr.listen()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50938297_50975089_137_144
50938297_50975089_88_101
Title: Managing when Python turtle checks for events 
----------------------------------------

def __init__(self, board, game) :
INDENT
    super().__init__(shape = 'turtle', visible = False)
    self.board = board
    self.game = game
    self.speed('fastest')
    self.penup()
    self.cnum = 3
DEDENT
----------------------------------------

def __init__(self, pen) :
INDENT
    self.square_size = 60
    self.rows = 6
    self.columns = 7
    self.pen = pen
    self.frame_color = 'blue'
    self.board_length = self.square_size * self.columns
    self.board_height = self.square_size * self.rows
    self.squares = [[] for _ in range(self.columns)]
    self.pen.speed('fastest')
    self.pen.hideturtle()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50938297_50975089_6_24
50938297_50975089_88_101
Title: Managing when Python turtle checks for events 
----------------------------------------

def __init__(self, screen) :
INDENT
    self.pen = Turtle()
    self.scr = screen
    self.board = Connect4Board(self.pen)
    self.moves = 0
    self.playing = False
    self.piece = Connect4Piece(self.board, self)
    self.scr.tracer(False)
    self.board.draw_board()
    self.scr.tracer(True)
    self.scr.onkey(self.piece.prev_col, 'Left')
    self.scr.onkey(self.piece.next_col, 'Right')
    self.scr.onkey(self.piece.drop, 'Down')
    self.scr.onkey(self.reset, 'r')
    self.scr.listen()
DEDENT
----------------------------------------

def __init__(self, pen) :
INDENT
    self.square_size = 60
    self.rows = 6
    self.columns = 7
    self.pen = pen
    self.frame_color = 'blue'
    self.board_length = self.square_size * self.columns
    self.board_height = self.square_size * self.rows
    self.squares = [[] for _ in range(self.columns)]
    self.pen.speed('fastest')
    self.pen.hideturtle()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50940342_50940553_12_17
50940342_50940557_1_15
Title: Calculating Sun Angle Code 
----------------------------------------

def sun_angle(time) :
INDENT
    fractional_hour = parse_time_as_hour(time)
    if fractional_hour < 6 or fractional_hour > = 18 :
    INDENT
        return "I can't see the sun!"
    DEDENT
    else :
    INDENT
        return (fractional_hour - 6) * 15
    DEDENT
DEDENT
----------------------------------------

def sun_angle(time) :
INDENT
    lis = []
    time = str(time)
    for i in time :
    INDENT
        if i.isdigit() :
        INDENT
            lis.append(int(i))
        DEDENT
        else :
        INDENT
            continue
        DEDENT
    DEDENT
    a = int(lis [0] * 10 + lis [1] + ((lis [2] + lis [3]) / 60))
    b = a - 6
    if b < 0 or b > = 12 :
    INDENT
        return "I can't see the sun!"
    DEDENT
    else :
    INDENT
        return b * 15
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50940342_50940553_12_17
50940342_50940654_1_18
Title: Calculating Sun Angle Code 
----------------------------------------

def sun_angle(time) :
INDENT
    fractional_hour = parse_time_as_hour(time)
    if fractional_hour < 6 or fractional_hour > = 18 :
    INDENT
        return "I can't see the sun!"
    DEDENT
    else :
    INDENT
        return (fractional_hour - 6) * 15
    DEDENT
DEDENT
----------------------------------------

def sun_angle(time_) :
INDENT
    lis = []
    time_ = str(time_)
    for i in time_ :
    INDENT
        if i.isdigit() :
        INDENT
            lis.append(i)
        DEDENT
        else :
        INDENT
            continue
        DEDENT
    DEDENT
    a = int(lis [0]) * 10
    a += int(lis [1])
    bb = (int(lis [2]) * 10 + int(lis [3]))

    if (a < 6 or a > 18) or (a == 18 and bb > 0) :
    INDENT
        return "I can't see the sun!"
    DEDENT
    else :
    INDENT
        return (float(a) - 6.0) * 15.0 + (15.0 * float(bb)) / 60.0
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50949835_50949967_1_15
50949835_50950180_1_10
Title: Returning all odd numbers in a nested list 
----------------------------------------

def return_odds(a) :
INDENT
    odd = []
    if isinstance(a, list) :
    INDENT
        for item in a :
        INDENT
            if isinstance(item, list) :
            INDENT
                odd += return_odds(item)
            DEDENT
            if isinstance(item, int) :
            INDENT
                if item % 2 == 1 :
                INDENT
                    even_list.append(item)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    if isinstance(a, int) :
    INDENT
        if a % 2 == 1 :
        INDENT
            odd.append(a)
        DEDENT
    DEDENT
    return odd
DEDENT
----------------------------------------

def return_odds(a) :
INDENT
    odd_numbers = []
    for i in a :
    INDENT
        if isinstance(i, list) :
        INDENT
            odd_numbers.extend(return_odds(i))
        DEDENT
        elif isinstance(i, int) and i % 2 :
        INDENT
            odd_numbers.append(i)

        DEDENT
    DEDENT
    return odd_numbers
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50954578_50954765_4_35
50954578_50954938_24_34
Title: Search for string and delete line that contains string and the line underneath 
----------------------------------------

def run() :
INDENT
    try :
    INDENT
        with open('file.txt', 'r') as f :
        INDENT
            reg = re.compile('###\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.+(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}.\d{0,})\s###\s?')
            lines = f.readlines()
            invalid_index = - 10
            for a in range(len(lines)) :
            INDENT
                reg_result = reg.match(lines [a])
                if invalid_index == (a - 1) :
                INDENT
                    continue
                DEDENT
                if reg_result ! = None :
                INDENT

                    invalid_index = a
                    answer = raw_input("Delete line? ")
                    if answer.lower() ! = 'y' :
                    INDENT
                        print ("You chose no.")
                        valid_lines.append(lines [a])
                    DEDENT
                DEDENT
                else :
                INDENT
                    valid_lines.append(lines [a])
                DEDENT
            DEDENT
        DEDENT
        with open('file.txt', 'w') as f :
        INDENT

            f.writelines(valid_lines)
        DEDENT
    DEDENT
    except OSError as e :
    INDENT
        print (e)
    DEDENT
DEDENT
----------------------------------------

def run() :
INDENT
    try :
    INDENT
        with open('file.txt', 'r') as f :
        INDENT
            with open('file.txt', 'a') as f2 :
            INDENT
                filtered_lines = list(filter_lines(f1.readlines()))
                print(* filtered_lines, sep = '')
            DEDENT
        DEDENT
    DEDENT
    except OSError as e :
    INDENT
        print (e)
    DEDENT
DEDENT
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49269647_49269713_1_18
49269647_49269765_1_15
Title: Removing characters in a list 
----------------------------------------

def word_count() :
INDENT
    city_list = []
    with open('win_count.txt', 'r') as city_file :
    INDENT
        temp_list = city_file.readlines()
        for item in temp_list :
        INDENT
            city = (item.rstrip('\n')).split(' ')
            city_list.append(city [1])
        DEDENT
    DEDENT
    my_dict = {}
    for item in city_list :
    INDENT
        if item in my_dict.itervalues() :
        INDENT
            my_dict [item] += 1
        DEDENT
        else :
        INDENT
            my_dict [item] = 1
        DEDENT
    DEDENT
    print ('city\t\tCount')
    for key, value in my_dict.items() :
    INDENT
        print ("{:10}\t{}".format(key, value))
    DEDENT
DEDENT
----------------------------------------

def word_count() :
INDENT
    city_list = {}
    with open('win_count.txt', 'r') as city_file :
    INDENT
        for row in city_file :
        INDENT
            city_name = row [5 :].rstrip('\n')
            if city_name in city_list :
            INDENT
                city_list [city_name] += 1
            DEDENT
            else :
            INDENT
                city_list [city_name] = 1
            DEDENT
        DEDENT
    DEDENT
    print ('city\t\tCount')
    for key, value in city_list.items() :
    INDENT
        print (key, '\t', ':', '\t', value)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49276042_49277916_146_161
49276042_49277916_26_98
Title: Python: how to draw object on image in PyQt 
----------------------------------------

def initUI(self) :
INDENT
    exitAction = QAction(QIcon('exit.png'), '&Exit', self)
    exitAction.setShortcut('Ctrl+Q')
    exitAction.setStatusTip('Exit application')
    exitAction.triggered.connect(qApp.quit)
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('&File')
    fileMenu.addAction(exitAction)

    self.statusBar().showMessage('Ready')
    self.setWindowTitle('mi ban')
    self.setWindowIcon(QIcon('icon.png'))
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    File_name = QLabel('Setup file name')
    File_name_edit = QLineEdit()
    QToolTip.setFont(QFont('SansSerif', 10))
    self.setGeometry(300, 300, 250, 150)
    self.resize(640, 360)
    self.center()
    self.main_image = myQLabel(self)
    self.main_image.setPixmap(QPixmap(self.main_image_name))
    btn = QPushButton("Make setup file")
    btn.setToolTip('Press <b>Detect</b> button for detecting objects by your settings')
    btn.resize(btn.sizeHint())
    btn.clicked.connect(QCoreApplication.instance().quit)
    btn_browse = QPushButton("Browse")
    btn_browse.clicked.connect(self.browse)
    btn_set = QPushButton("Set name")

    self.main_image.setAlignment(Qt.AlignCenter)

    box_File_name = QHBoxLayout()
    box_File_name.addWidget(File_name)
    box_File_name.addWidget(File_name_edit)
    box_File_name.addWidget(btn_set)
    grid = QGridLayout()
    grid.setSpacing(10)
    grid.addLayout(box_File_name, 1, 0)
    grid.addWidget(self.main_image, 2, 0)
    grid.addWidget(btn_browse, 3, 0)
    grid.addWidget(btn, 4, 0)
    box_number = QVBoxLayout()
    number_group = QButtonGroup()
    r0 = QRadioButton("Traffic Lights")
    number_group.addButton(r0)
    r1 = QRadioButton("Direction")
    number_group.addButton(r1)
    r2 = QRadioButton("Traffic Lines H")
    number_group.addButton(r2)
    r3 = QRadioButton("Traffic Lines V")
    number_group.addButton(r3)
    box_number.addWidget(r0)
    box_number.addWidget(r1)
    box_number.addWidget(r2)
    box_number.addWidget(r3)
    r0.toggled.connect(self.radio0_clicked)
    r1.toggled.connect(self.radio1_clicked)
    r2.toggled.connect(self.radio2_clicked)
    r3.toggled.connect(self.radio3_clicked)
    box_road_sign = QHBoxLayout()
    road_sign_label = QLabel('Road signs', self)
    road_sign = QComboBox()
    road_sign.addItem("None")
    road_sign.addItem("ex1")
    road_sign.addItem("ex2")
    road_sign.addItem("ex3")
    road_sign.addItem("ex4")
    road_sign.addItem("ex5")
    box_road_sign.addWidget(road_sign_label)
    box_road_sign.addWidget(road_sign)
    grid.addLayout(box_road_sign, 1, 1)
    grid.addLayout(box_number, 2, 1)
    self.setLayout(grid)
    self.show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49277692_49311450_9_31
49277692_49467247_58_71
Title: Kivy : How to start text from right side in TextInput? 
----------------------------------------

def insert_text(self, theText, from_undo = False) :
INDENT
    if theText not in string.digits and theText ! = '.' :
    INDENT
        return
    DEDENT
    if '.' in self.text and theText == '.' :
    INDENT
        return
    DEDENT
    maxWidth = self.width - self.padding [0] - self.padding [2]
    cc, cr = self.cursor
    curText = self._lines [cr]
    new_text = curText [: cc] + theText + curText [cc :]
    textWidth = self._get_text_width(new_text, self.tab_width, self._label_cached)
    while textWidth < maxWidth :
    INDENT
        new_text = ' ' + new_text
        textWidth = self._get_text_width(new_text, self.tab_width, self._label_cached)
    DEDENT
    while textWidth > = maxWidth :
    INDENT
        if new_text [0] ! = ' ' :
        INDENT
            break
        DEDENT
        else :
        INDENT
            new_text = new_text [1 :]
            textWidth = self._get_text_width(new_text, self.tab_width, self._label_cached)
        DEDENT
    DEDENT
    self._lines [cr] = ''
    self.cursor = (0, cr)
    super(MyFloatInput, self).insert_text(new_text, from_undo = from_undo)
DEDENT
----------------------------------------

def insert_text(self, the_text, from_undo = False) :
INDENT
    cc, cr = self.cursor
    cur_text = self._lines [cr]
    initial_len = len(cur_text)
    new_text = self.right_adjust(cur_text [: cc] + the_text + cur_text [cc :])
    try :
    INDENT
        num = float(new_text)
    DEDENT
    except ValueError :
    INDENT
        return
    DEDENT
    self._lines [cr] = ''
    super(MyFloatInput, self).insert_text(new_text, from_undo = from_undo)
    final_len = len(self._lines [cr])
    self.cursor = self.get_cursor_from_index(final_len - (initial_len - cc))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49283580_49284739_118_129
49283580_49284739_14_61
Title: Python: how to save previous rectangles after update()? 
----------------------------------------

def initUI(self) :
INDENT
    exitAction = QAction(QIcon('exit.png'), '&Exit', self)
    exitAction.setShortcut('Ctrl+Q')
    exitAction.setStatusTip('Exit application')
    exitAction.triggered.connect(qApp.quit)
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('&File')
    fileMenu.addAction(exitAction)
    self.statusBar().showMessage('Ready')
    self.setWindowTitle('mi ban')
    self.setWindowIcon(QIcon('C:\Python27\project\icon.png'))
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    File_name = QLabel('Setup file name')
    File_name_edit = QLineEdit()
    self.resize(640, 360)
    self.center()
    self.main_image = myQLabel(self)
    self.main_image.setPixmap(QPixmap(self.main_image_name))
    btn = QPushButton("Make setup file")
    btn.setToolTip('Press <b>Detect</b> button for detecting objects by your settings')
    btn.resize(btn.sizeHint())
    btn.clicked.connect(QCoreApplication.instance().quit)
    btn_browse = QPushButton("Browse")
    btn_browse.clicked.connect(self.browse)
    btn_set = QPushButton("Set name")
    self.main_image.setAlignment(Qt.AlignCenter)

    box_File_name = QHBoxLayout()
    box_File_name.addWidget(File_name)
    box_File_name.addWidget(File_name_edit)
    box_File_name.addWidget(btn_set)
    grid = QGridLayout(self)
    grid.setSpacing(10)
    grid.addLayout(box_File_name, 1, 0)
    grid.addWidget(self.main_image, 2, 0)
    grid.addWidget(btn_browse, 3, 0)
    grid.addWidget(btn, 4, 0)
    box_number = QVBoxLayout()
    number_group = QButtonGroup(self)
    for i, text in enumerate(["Traffic Lights", "Direction", "Traffic Lines H", "Traffic Lines V"]) :
    INDENT
        rb = QRadioButton(text)
        box_number.addWidget(rb)
        number_group.addButton(rb, i)
    DEDENT
    number_group.buttonClicked [int].connect(self.main_image.setMode)
    number_group.button(0).setChecked(True)
    box_road_sign = QHBoxLayout()
    road_sign_label = QLabel('Road signs', self)
    road_sign = QComboBox()
    road_sign.addItems(["None", "ex1", "ex2", "ex3", "ex4", "ex5"])
    box_road_sign.addWidget(road_sign_label)
    box_road_sign.addWidget(road_sign)
    grid.addLayout(box_road_sign, 1, 1)
    grid.addLayout(box_number, 2, 1)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49289835_49290013_17_27
49289835_49295877_20_30
Title: Window size change causes an overwriting of my bar chart - Matplotlib 
----------------------------------------

def view_graph1(self) :
INDENT
    self.graph1.figure.clf()
    axes = self.graph1.figure.add_subplot(111)
    x1 = [1, 2, 3, 4, 5]
    y1 = [10, 20, 30, 40, 50]
    x2 = [1.5, 2.5, 3.5, 4.5, 5.5]
    y2 = [15, 25, 35, 45, 55]
    axes.bar(x1, y1, width = 0.40)
    axes.bar(x2, y2, width = 0.40)
    self.graph1.draw()
DEDENT
----------------------------------------

def view_graph1(self) :
INDENT
    self.figure1.clf()
    self.axes = self.figure1.add_subplot(111)
    x1 = [1, 2, 3, 4, 5]
    y1 = [10, 20, 30, 40, 50]
    x2 = [1.5, 2.5, 3.5, 4.5, 5.5]
    y2 = [15, 25, 35, 45, 55]
    self.axes.bar(x1, y1, width = 0.40)
    self.axes.bar(x2, y2, width = 0.40)
    self.graph1.draw()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49289835_49290013_28_40
49289835_49295877_31_43
Title: Window size change causes an overwriting of my bar chart - Matplotlib 
----------------------------------------

def view_graph2(self) :
INDENT
    self.graph2.figure.clf()
    axes = self.graph2.figure.add_subplot(111)
    x1 = [1, 2, 3, 4, 5]
    y1 = [10, 20, 30, 40, 50]
    x2 = [1.25, 2.25, 3.25, 4.25, 5.25]
    y2 = [15, 25, 35, 45, 55]
    x3 = [1.5, 2.5, 3.5, 4.5, 5.5]
    y3 = [1, 2, 3, 4, 5]
    axes.bar(x1, y1, width = 0.40)
    axes.bar(x2, y2, width = 0.40)
    axes.bar(x3, y3, width = 0.40)
    self.graph2.draw()
DEDENT
----------------------------------------

def view_graph2(self) :
INDENT
    self.figure2.clf()
    self.axes = self.figure2.add_subplot(111)
    x1 = [1, 2, 3, 4, 5]
    y1 = [10, 20, 30, 40, 50]
    x2 = [1.25, 2.25, 3.25, 4.25, 5.25]
    y2 = [15, 25, 35, 45, 55]
    x3 = [1.5, 2.5, 3.5, 4.5, 5.5]
    y3 = [1, 2, 3, 4, 5]
    self.axes.bar(x1, y1, width = 0.40)
    self.axes.bar(x2, y2, width = 0.40)
    self.axes.bar(x3, y3, width = 0.40)
    self.graph2.draw()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49290333_49290453_1_17
49290333_49291478_1_26
Title: Why does my code keep returning none instead of the barcode? 
----------------------------------------

def printDigit(d) :
INDENT
    if len(str(d)) == 5 and str(d).isdigit() :
    INDENT
        temp = []
        for i in str(d) :
        INDENT
            if i == '0' : temp.extend("||:::")
            elif i == '1' : temp.extend(":::||")
            elif i == '2' : temp.extend("::|:|")
            elif i == '3' : temp.extend("::||:")
            elif i == '4' : temp.extend(":|::|")
            elif i == '5' : temp.extend(":|:|:")
            elif i == '6' : temp.extend(":||:|")
            elif i == '7' : temp.extend("|:::|")
            elif i == '8' : temp.extend("|::|:")
            elif i == '9' : temp.extend("|:|::")
        DEDENT
        return ''.join(temp)
    DEDENT
    else : return None
DEDENT
----------------------------------------

def printDigit(d, x) :
INDENT
    if x < len(d) and d [x].isdigit() :
    INDENT
        if int(d [x]) == 0 :
        INDENT
            return "||:::" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 1 :
        INDENT
            return ":::||" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 2 :
        INDENT
            return "::|:|" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 3 :
        INDENT
            return "::||:" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 4 :
        INDENT
            return ":|::|" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 5 :
        INDENT
            return ":|:|:" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 6 :
        INDENT
            return ":||:|" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 7 :
        INDENT
            return "|:::|" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 8 :
        INDENT
            return "|::|:" + printDigit(d, x + 1)
        DEDENT
        elif int(d [x]) == 9 :
        INDENT
            return "|:|::" + printDigit(d, x + 1)
        DEDENT
    DEDENT
    else :
    INDENT
        return ""
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49292334_49292542_1_9
49292334_49292560_1_9
Title: How to Read Numeric Data From Text file and save it to a variable using python 
----------------------------------------

def main() :
INDENT
    global id
    data = open('data.txt', 'r').read()
    data = data + '0'
    data = data.replace('\n', '+0+')
    id = eval(data)

DEDENT
----------------------------------------

def main() :
INDENT
    global id
    id = []
    input = open('data.txt', 'r')
    lines = input.readlines()
    for line in lines :
    INDENT
        if line.strip() :
        INDENT
            id.append(int(line.strip()))
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49306865_49307512_29_44
49306865_49307676_22_43
Title: Matchbox-Keyboard on input for QLineEdit PyQT5 
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle(self.title)
    self.setGeometry(self.left, self.top, self.width, self.height)
    self.statusBar().showMessage(self.statusBarMessage)
    self.userNameLabel = QLabel(self)
    self.userNameLabel.move(0, 125)
    self.userNameLabel.setText("What is your name?")
    self.userNameLabel.resize(120, 20)
    self.nameInput = QLineEdit(self)
    self.nameInput.move(0, 145)
    self.nameInput.resize(200, 32)
    self.nameInput.setEchoMode(0)
    self.nameInput.mousePressEvent = self.showKeyboard
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle('GUI TESTS')
    widget = QWidget()
    self.setCentralWidget(widget)
    lay = QVBoxLayout(widget)
    self.userNameLabel = QLabel("What is your name?")
    self.nameInput = MatchBoxLineEdit()
    lay.addWidget(self.userNameLabel)
    lay.addWidget(self.nameInput)
    self.setGeometry(
        QStyle.alignedRect(
            Qt.LeftToRight,
            Qt.AlignCenter, self.sizeHint(),
            qApp.desktop().availableGeometry()))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49313874_49366996_29_40
49313874_49366996_5_13
Title: How to remove columns (or rows) while redrawing a grid in Python3 / Tkinter 
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.geometry('400x400+20+20')
    btn = tk.Button(self, text = "click me")
    btn.pack(side = tk.TOP, fill = tk.X)
    btn.bind("<Button-1>", self.transpose)
    self.switch = False
    self.frm = None
    self.create_frm()
DEDENT
----------------------------------------

def __init__(self, master, switch) :
INDENT
    tk.Frame.__init__(self, master, bg = 'white')
    colors = ['cyan', 'magenta', 'green', 'gold', 'lavender', 'purple']
    self.switch = switch
    self.widgets = []
    for i in range(6) :
    INDENT
        self.widgets.append(tk.Label(self, text = i, bg = colors [i]))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49317991_49353660_3_30
49317991_49388546_3_30
Title: Is there a way to speed up the following pandas for loop? 
----------------------------------------

def make_3d_lines(a_df) :
INDENT
    a_df ['depth'] = 0
    depth = 0
    prev = None
    accum = []
    for row in a_df.values.tolist() :
    INDENT
        row [0] = 0
        key = row [1]
        if key == prev :
        INDENT
            depth += 1
            accum.append(row)
        DEDENT
        else :
        INDENT
            if depth == 0 :
            INDENT
                yield row
            DEDENT
            else :
            INDENT
                depth = 0
                to_emit = []
                for i in range(len(accum)) :
                INDENT
                    date = accum [i] [2]
                    for j, r in enumerate(accum [i :]) :
                    INDENT
                        to_emit.append(list(r))
                        to_emit [- 1] [0] = j
                        to_emit [- 1] [2] = date
                    DEDENT
                DEDENT
                for r in to_emit [1 :] :
                INDENT
                    yield r
                DEDENT
            DEDENT
            accum = [row]
        DEDENT
        prev = key
    DEDENT
DEDENT
----------------------------------------

def make_3d_lines(a_df) :
INDENT
    a_df ['depth'] = 0
    depth = 1
    prev = None
    accum = []
    for row in a_df.values.tolist() :
    INDENT
        row [0] = 0
        key = row [1]
        if key == prev :
        INDENT
            depth += 1
            accum.append(row)
        DEDENT
        else :
        INDENT
            if depth == 0 :
            INDENT
                yield accum [0]
            DEDENT
            else :
            INDENT
                depth = 0
                to_emit = []
                for i in range(len(accum)) :
                INDENT
                    date = accum [i] [2]
                    for j, r in enumerate(accum [i :]) :
                    INDENT
                        to_emit.append(list(r))
                        to_emit [- 1] [0] = j
                        to_emit [- 1] [2] = date
                    DEDENT
                DEDENT
                for r in to_emit [0 :] :
                INDENT
                    yield r
                DEDENT
            DEDENT
            accum = [row]
        DEDENT
        prev = key
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49324850_49328283_47_67
49324850_49328283_6_23
Title: "Updating value of attribute of a created instance of a class from an instance of another class created later in tkinter python 3" 
----------------------------------------

def __init__(self, parent) :
INDENT
    self.top = parent
    self.p1name = 'Player 1'
    self.p2name = 'Player 2'
    self.p1symbol = 'x'
    self.p2symbol = 'o'

    self.p1NameLabel = tk.Label(self.top, text = 'Player 1: Name ', bg = "lightblue")
    self.p1NameLabel.grid(row = 0, column = 0)
    self.p1NameEntry = tk.Entry(self.top)
    self.p1NameEntry.focus_set()
    self.p1NameEntry.insert(0, self.p1name)
    self.p1NameEntry.grid(row = 0, column = 1, sticky = "nsew")

    apply = tk.Button(self.top, text = "Apply Settings", fg = 'white', bg = 'gray', command = self.saveStat)
    apply.grid(row = 2, rowspan = 1, columnspan = 4)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    self.parnt = parent
    self.parnt.title("Tic Tac Toe")

    menubar = tk.Menu(parent)
    settingsOption = tk.Menu(menubar, tearoff = 0, bg = "yellow")
    settingsOption.add_command(label = 'Player Settings', command = self.doit)
    settingsOption.add_command(label = 'Board Settins', command = self.doit)
    menubar.add_cascade(label = 'Setings', menu = settingsOption)

    self.parnt.config(menu = menubar)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49328323_49329173_1_13
49328323_49329623_1_13
Title: Django How improve query_params filter 
----------------------------------------

def get_queryset(self) :
INDENT
    qs = Publication.objects
    user = self.request.query_params.get('user', '')
    limit = self.request.query_params.get('limit', '')
    if user.isdigit() :
    INDENT
        qs = qs.filter(owner__pk = user)
    DEDENT
    if limit.isdigit() :
    INDENT
        return qs.all() [: int(limit)]
    DEDENT
    return qs.all()
DEDENT
----------------------------------------

def get_queryset(self) :
INDENT
    qs = Publication.objects.all()
    user = self.request.query_params.get('user', None)
    limit = self.request.query_params.get('limit', None)
    if user :
    INDENT
        qs = qs.filter(owner__pk = user)
    DEDENT
    if limit :
    INDENT
        return qs [: int(limit)]
    DEDENT
    return qs
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49332044_49332777_5_22
49332044_49334669_2_19
Title: "For if else statements" 
----------------------------------------

def usrinfo(tries) :
INDENT
    name = input('input name: ')
    if tries == 4 :
    INDENT
        print ('end of program because tries equals 4')
        sys.exit()
    DEDENT
    elif name == 'jack' :
    INDENT
        tries -= 1
        print ('input was jack')
        print ('tries ' + str(tries) + '\n')
        usrinfo(tries)
    DEDENT
    elif name ! = 'jack' :
    INDENT
        tries += 1
        print ('tries ' + str(tries) + '\n')
        usrinfo(tries)
    DEDENT
DEDENT
----------------------------------------

def usrinfo() :
INDENT
    global tries
    name = raw_input('input name ')
    a = ('jill', 'jack', 'meg')

    if name == 'jack' :
    INDENT
        print ('input was jack')
        tries = - 1
        print (tries)
        usrinfo()
    DEDENT
    else :
    INDENT
        tries += 1
        print (tries)
        if tries == 4 :
        INDENT
            print ('stopped')
            return
        DEDENT
        usrinfo()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49348544_49348730_1_17
49348544_49348821_3_25
Title: How to match input with elements in list/dictionary in Python3 
----------------------------------------

def shoplist(budget) :
INDENT
    prices = {"apple" : 30, "orange" : 20, "milk" : 60}

    sum = 0
    while sum < = budget :
    INDENT
        buy = input("What do you want to purchase?")

        if not buy : break
        if buy in prices :
        INDENT
            sum += prices [buy]
        DEDENT
        else :
        INDENT
            print ("Invalid item", buy)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def shoplist() :
INDENT
    prices = {
        'apple' : 30,
        'orange' : 20,
        'milk' : 60,
        }

    item = input('What do you want to purchase? ')

    if item in prices :
    INDENT

        count = int(input('How many? '))
        cost = count * prices [item]
        if cost > budget :
        INDENT
            print ('You can\'t afford that many!')
        DEDENT
        else :
        INDENT
            print ('That\'ll be %i.' % cost)
        DEDENT
    DEDENT
    else :
    INDENT
        print ('We don\'t have %s in stock.' % item)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49377933_49378346_3_51
49377933_49378637_3_30
Title: "Sorting a list from low to high from the left in python using if statements" 
----------------------------------------

def main() :
INDENT
    numList = [];
    numListLength = 25;
    maxShuffles = 1000;
    while len(numList) < numListLength :
    INDENT
        randomElement = randint(- 100, 100)
        numList.append(randomElement)
    DEDENT
    printNow("List before shuffling: ")
    printNow(numList)

    shuffleCount = 0
    while shuffleCount < maxShuffles :
    INDENT
        i = randrange(0, len(numList))
        j = randrange(0, len(numList))
        if i < j :
        INDENT
            if numList [i] > numList [j] :
            INDENT

                original_i = numList [i]
                original_j = numList [j]
                numList [i] = original_j
                numList [j] = original_i
            DEDENT
        DEDENT
        elif j < i :
        INDENT
            if numList [j] > numList [i] :
            INDENT

                original_i = numList [i]
                original_j = numList [j]
                numList [i] = original_j
                numList [j] = original_i
            DEDENT
        DEDENT
        else :
        INDENT
            continue
        DEDENT
        shuffleCount = shuffleCount + 1

    DEDENT
    printNow("List after shuffling: ")
    printNow(numList)
DEDENT
----------------------------------------

def main() :
INDENT
    num_list_length = 25
    max_shuffles = 1000

    num_list = [randint(- 100, 100) for i in range(num_list_length)]
    print ("List before shuffling: ")
    print (num_list)
    for shuffle_count in range(max_shuffles) :
    INDENT
        i = randrange(0, len(num_list))
        j = randrange(0, len(num_list))
        if i > j :
        INDENT
            i, j = j, i

        DEDENT
        if num_list [i] < num_list [j] :
        INDENT
            num_list [i], num_list [j] = num_list [j], num_list [i]

        DEDENT
    DEDENT
    print ("List after shuffling: ")
    print (num_list)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49396207_49406000_11_52
49396207_49442429_11_23
Title: tkinter grid overlapping 
----------------------------------------

def __init__(self, master = None) :
INDENT
    Frame.__init__(self, master)
    self.grid(row = 0, column = 0, sticky = 'news')
    DateNow = datetime.datetime.now()
    month = int(DateNow.month)
    year = int(DateNow.year)
    self.createDaysOfWeekLabels()
    month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    self.frameList = []
    self.buttonList = []
    amonth = month - 1
    for i in range(3) :
    INDENT
        if amonth < 0 :
        INDENT
            amonth = 11
            year -= 1
        DEDENT
        elif amonth == 12 :
        INDENT
            amonth = 0
            year += 1
        DEDENT
        mFrame = Frame(self)
        self.createMonth(mFrame, amonth, year)
        self.frameList.append(mFrame)
        mButton = Button(self, text = month_name [amonth - 1])
        mButton ['command'] = lambda f = mFrame, b = mButton : self.showMonth(f, b)
        mButton.grid(row = 0, column = i)
        mFrame.grid(row = 2, column = 0, columnspan = 7, sticky = 'news')
        if (i == 1) :
        INDENT
            mButton ['relief'] = 'flat'
        DEDENT
        else :
        INDENT

            mFrame.grid_remove()
        DEDENT
        self.buttonList.append(mButton)
        amonth += 1

    DEDENT
    label = Label(self, text = year)
    label.grid(row = 0, column = 6)

DEDENT
----------------------------------------

def __init__(self, master = None) :
INDENT
    Frame.__init__(self, master)
    self.grid(row = 0, column = 0, sticky = 'news')
    DateNow = datetime.datetime.now()
    self.month = int(DateNow.month)
    self.year = int(DateNow.year)
    self.createDaysOfWeekLabels()

    self.frameList = []
    self.buttonList = []
    self.split()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49396207_49406000_53_58
49396207_49442429_89_94
Title: tkinter grid overlapping 
----------------------------------------

def createDaysOfWeekLabels(self) :
INDENT
    days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    for i in range(7) :
    INDENT
        label = Label(self, text = days [i])
        label.grid(row = 1, column = i)
    DEDENT
DEDENT
----------------------------------------

def createDaysOfWeekLabels(self) :
INDENT
    days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    for i in range(7) :
    INDENT
        label = Label(self, text = days [i], width = 3)
        label.grid(row = 2, column = i)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49397153_49397259_1_19
49397153_49397270_3_16
Title: Check if something is raisable in any version 
----------------------------------------

def is_raisable(ex, exceptions_to_exclude = IGNORED_EXCEPTIONS) :
INDENT
    try :
    INDENT
        if isinstance(ex, TypeError) or issubclass(ex, TypeError) :
        INDENT
            return True
        DEDENT
    DEDENT
    except TypeError :
    INDENT
        pass
    DEDENT
    try :
    INDENT
        if isinstance(ex, exceptions_to_exclude) or issubclass(ex, exceptions_to_exclude) :
        INDENT
            return True
        DEDENT
    DEDENT
    except TypeError :
    INDENT
        pass
    DEDENT
    try :
    INDENT
        raise ex
    DEDENT
    except exceptions_to_exclude :
    INDENT
        raise
    DEDENT
    except TypeError :
    INDENT
        return False
    DEDENT
    except :
    INDENT
        return True
    DEDENT
DEDENT
----------------------------------------

def is_raisable(obj) :
INDENT
    try :
    INDENT
        raise obj
    DEDENT
    except :
    INDENT
        exc_type, exc = sys.exc_info() [: 2]
        if exc is obj or exc_type is obj :
        INDENT
            return True
        DEDENT
        elif exc_type is TypeError :
        INDENT
            return False
        DEDENT
        else :
        INDENT
            raise
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49417023_49418309_1_23
49417023_49418457_1_9
Title: How to reference the return value from a function? 
----------------------------------------

def translate(word, language) :
INDENT
    en_word = word.lower()
    lang = language.lower()
    if lang == "french" :
    INDENT
        if en_word == "cat" :
        INDENT
            return "chat"
        DEDENT
        elif en_word == "dog" :
        INDENT
            return "chein"
        DEDENT
    DEDENT
    elif lang == "german" :
    INDENT
        if en_word == "cat" :
        INDENT
            return "katze"
        DEDENT
        elif en_word == "dog" :
        INDENT
            return "hund"
        DEDENT
    DEDENT
    elif lang == "spanish" :
    INDENT
        if en_word == "cat" :
        INDENT
            return "gato"
        DEDENT
        elif en_word == "dog" :
        INDENT
            return "perro"
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def translate(word, language) :
INDENT
    dictionary = {
        "french" : {"cat" : "chat",
            "dog" : "chien"},
        "german" : {"cat" : "katze",
            "dog" : "hund"},
        "spanish" : {"cat" : "gato",
            "dog" : "perro"}}
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49436598_49436670_1_10
49436598_49436970_8_24
Title: How do I print the variable values that result in the maximum of a function? 
----------------------------------------

def f(x, y, z) :
INDENT
    maximum = 0
    for a in x :
    INDENT
        for b in y :
        INDENT
            for c in z :
            INDENT
                if a * b * c > maximum :
                INDENT
                    j = (a, b, c)
                    maximum = a * b * c
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    print (maximum)
    print (j)
DEDENT
----------------------------------------

def f(x, y, z) :
INDENT
    maxv = [max(li) for li in [x, y, z]]

    print (maxv)
    product = functools.reduce(lambda x, y : x * y, maxv)

    print (product)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49445701_49461174_12_25
49445701_49461174_52_63
Title: Understanding the code in pyTorch 
----------------------------------------

def forward(self, x) :
INDENT
    residual = x
    out = self.conv1(x)
    out = self.bn1(out)
    out = self.relu(out)
    out = self.conv2(out)
    out = self.bn2(out)
    if self.downsample :
    INDENT
        residual = self.downsample(x)
    DEDENT
    out += residual
    out = self.relu(out)
    return out

DEDENT
----------------------------------------

def forward(self, x) :
INDENT
    out = self.conv(x)
    out = self.bn(out)
    out = self.relu(out)
    out = self.layer1(out)
    out = self.layer2(out)
    out = self.layer3(out)
    out = self.avg_pool(out)
    out = out.view(out.size(0), - 1)
    out = self.fc(out)
    return out
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49445701_49461174_27_38
49445701_49461174_3_11
Title: Understanding the code in pyTorch 
----------------------------------------

def __init__(self, layers, num_classes = 10) :
INDENT
    super(ResNet, self).__init__()
    self.in_channels = 16
    self.conv = conv3x3(3, 16)
    self.bn = nn.BatchNorm2d(16)
    self.relu = nn.ReLU(inplace = True)
    self.layer1 = self.make_layer(16, layers [0])
    self.layer2 = self.make_layer(32, layers [0], 2)
    self.layer3 = self.make_layer(64, layers [1], 2)
    self.avg_pool = nn.AvgPool2d(8)
    self.fc = nn.Linear(64, num_classes)
DEDENT
----------------------------------------

def __init__(self, in_channels, out_channels, stride = 1, downsample = None) :
INDENT
    super(ResidualBlock, self).__init__()
    self.conv1 = conv3x3(in_channels, out_channels, stride)
    self.bn1 = nn.BatchNorm2d(out_channels)
    self.relu = nn.ReLU(inplace = True)
    self.conv2 = conv3x3(out_channels, out_channels)
    self.bn2 = nn.BatchNorm2d(out_channels)
    self.downsample = downsample
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49455480_49455824_1_12
49455480_49455828_1_19
Title: Sum of two matrices 
----------------------------------------

def matrix_sum(M1, M2) :
INDENT
    dim_m1, dim_n1 = len(M1), len(M1 [0])
    dim_m2, dim_n2 = len(M2), len(M2 [0])
    if dim_m1 ! = dim_m2 or dim_n1 ! = dim_n2 :
    INDENT
        return []
    DEDENT
    res = [[0 for _ in range(dim_n1)] for _ in range(dim_m1)]
    for m in range(dim_m1) :
    INDENT
        for n in range(dim_n1) :
        INDENT
            res [m] [n] = M1 [m] [n] + M2 [m] [n]
        DEDENT
    DEDENT
    return res
DEDENT
----------------------------------------

def matrix_sum(M1, M2) :
INDENT
    comp = True
    n = 0
    for i in M1 :
    INDENT
        if len(i) ! = len(M2 [n]) :
        INDENT
            comp = False
        DEDENT
        n += 1
    DEDENT
    output = []
    if comp :
    INDENT
        n = 0
        for i in M1 :
        INDENT
            add = []
            m = 0
            for j in i :
            INDENT
                add.append(j + M2 [n] [m])
                m += 1
            DEDENT
            n += 1
            output.append(add)
        DEDENT
    DEDENT
    return output
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49462213_49462410_1_31
49462213_49472394_1_22
Title: Problems porting code from Python 2.7 to 3.6 
----------------------------------------

def load_new_data(self) :
INDENT
    full = list()
    with open(self.filename, 'r') as csv_in :
    INDENT
        myreader2 = csv.reader(csv_in, delimiter = ';')
        count = 0
        for row in myreader2 :
        INDENT
            if count == 0 :
            INDENT
                headers = row [1 :]
                count += 1
            DEDENT
            elif count == 1 :
            INDENT
                count += 1
            DEDENT
            else :
            INDENT
                current_row = row [1 : - 1]
                full.append(current_row)
                count += 1
            DEDENT
        DEDENT
    DEDENT
    new_df = pd.DataFrame.from_records(full, columns = headers)
    new_df = new_df.iloc [1 :, : 80]
    self.fill_in_blanks(new_df)
    new_df = dp.remove_inc_variables(new_df,.1)
    print ('\t Removing incomplete variables.')
    for i in new_df.columns :
    INDENT
        try :
        INDENT
            new_df.loc [:, i] = new_df.loc [:, i].astype(float)
        DEDENT
        except :
        INDENT
            pass
        DEDENT
    DEDENT
    return new_df
DEDENT
----------------------------------------

def load_new_data(self) :
INDENT
    with codecs.open(self.filename, 'rb', encoding = "cp1251") as csv_in :
    INDENT
        myreader2 = csv.reader(csv_in, delimiter = ';')
        headers = next(myreader2) [1 :]
        next(myreader2)
        full = [row [1 :] for row in myreader2]
    DEDENT
    new_df = pd.DataFrame.from_records(full, columns = headers)
    new_df = new_df.iloc [1 :, : 80]
    self.fill_in_blanks(new_df)
    new_df = dp.remove_inc_variables(new_df,.1)
    print ('\t Removing incomplete variables.')
    for i in new_df.columns :
    INDENT
        try :
        INDENT
            new_df.loc [:, i] = new_df.loc [:, i].astype(float)
        DEDENT
        except :
        INDENT
            pass
        DEDENT
    DEDENT
    return new_df
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49463819_49470393_9_15
49463819_53335071_6_18
Title: EVENT_MOUSEMOVE not working while using with createTrackbar() method in OpenCV for making paint application? 
----------------------------------------

def draw_circle(event, x, y, flags, param) :
INDENT
    global colo, radius
    if event == cv2.EVENT_MOUSEMOVE :
    INDENT

        cv2.circle(img, (x, y), radius, (0, 0, 255), - 1)

    DEDENT
DEDENT
----------------------------------------

def draw_circle(event, x, y, flags, params) :
INDENT
    global ix, iy, pen_color, drawing
    if event == cv2.EVENT_LBUTTONDOWN :
    INDENT
        ix, iy = x, y
        drawing = True
    DEDENT
    elif event == cv2.EVENT_MOUSEMOVE :
    INDENT
        if drawing :
        INDENT
            cv2.circle(img, (x, y), 3, pen_color, - 1)
        DEDENT
    DEDENT
    elif event == cv2.EVENT_LBUTTONUP :
    INDENT
        drawing = False
        cv2.circle(img, (x, y), 3, pen_color, - 1)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49465352_49465500_1_29
49465352_49465729_1_11
Title: If there's other data type in the program how can I make it to return error 
----------------------------------------

def calGPAbyLetter(letters) :
INDENT
    tGP = 0.0
    letter = map(str, letters.split())
    if len(letter) > 10 :
    INDENT
        return False
    DEDENT
    for i in letter :
    INDENT
        gp = checkGP(i)
        if gp is str :
        INDENT
            return gp
        DEDENT
        tGP = tGP + gp
    DEDENT
    return round(tGP / len(letter), 2)
DEDENT
----------------------------------------

def calGPAbyLetter(letters) :
INDENT
    letter = list(map(str, letters.split()))
    if len(letter) > 10 :
    INDENT
        raise Exception('Maximum of 10 grades permitted')
    DEDENT
    grades = list(map(checkGP, letter))
    return round(sum(grades) / len(grades), 2)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49465352_49465500_30_56
49465352_49465729_12_17
Title: If there's other data type in the program how can I make it to return error 
----------------------------------------

def checkGP(letter) :
INDENT
    if letter < 0 :
    INDENT
        return False
    DEDENT
    elif letter == "F" :
    INDENT
        return 0.0
    DEDENT
    elif letter == "D" :
    INDENT
        return 1.0
    DEDENT
    elif letter == "C" :
    INDENT
        return 2.0
    DEDENT
    elif letter == "B" :
    INDENT
        return 3.0
    DEDENT
    elif letter == "A" :
    INDENT
        return 4.0
    DEDENT
    else :
    INDENT
        return False
    DEDENT
DEDENT
----------------------------------------

def checkGP(letter) :
INDENT
    d = {'F' : 0, 'D' : 1, 'C' : 2, 'B' : 3, 'A' : 4}
    try :
    INDENT
        return d [letter]
    DEDENT
    except KeyError :
    INDENT
        print ('Unmapped grade supplied')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
494881_495295_22_28
494881_495295_7_18
Title: refactor this dictionary-to-xml converter in python 
----------------------------------------

def toXml(self, indent) :
INDENT
    def unicodify(o) :
    INDENT
        if o is None :
        INDENT
            return u'';
        DEDENT
        return unicode(o)
    DEDENT
    return "%s%s" % (indent * 4 * u' ', escape(unicodify(self.value)),)
DEDENT
----------------------------------------

def toXml(self, indent) :
INDENT
    if len(self.children) == 0 :
    INDENT
        return u"%s<%s/>" % (indent * 4 * u' ', self.name)
    DEDENT
    elif len(self.children) == 1 :
    INDENT
        child = self.children [0].toXml(0)
        return u"%s<%s>%s</%s>" % (indent * 4 * u' ', self.name, child, self.name)
    DEDENT
    else :
    INDENT
        items = [u"%s<%s>" % (indent * 4 * u' ', self.name)]
        items.extend([c.toXml(indent + 1) for c in self.children])
        items.append(u"%s</%s>" % (indent * 4 * u' ', self.name))
        return u"\n".join(items)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49496096_49496159_1_6
49496096_49496234_6_15
Title: Why is not looping? 
----------------------------------------

def peliMayor(p) :
INDENT
    index = - 1
    for n in movies :
    INDENT
        index = index + 1
        print (movies [index] ['name'] == p)
    DEDENT
DEDENT
----------------------------------------

def peliMayor(p) :
INDENT
    index = - 1
    for n in movies :
    INDENT
        index = index + 1
        if movies [index] ['name'] == p :
        INDENT
            print 'True'
        DEDENT
        else :
        INDENT
            print 'False'
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_181_192
49498538_49498995_56_68
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def insert_user(self) :
INDENT
    First_Name = self.fentry.get()
    Last_Name = self.lentry.get()
    DOB = self.dobentry.get()
    Contact_Number = self.cnumentry.get()
    DOA = self.doaentry.get()
    Start_Time = self.sentry.get()
    Duration = self.dentry.get()
    End_Time = self.etentry.get()
    c.execute(insert_command % (First_Name, Last_Name,
            DOB, Contact_Number, DOA, Start_Time, Duration, End_Time))
DEDENT
----------------------------------------

def insert_user() :
INDENT
    First_Name = fentry.get()
    Last_Name = lentry.get()
    DOB = dobentry.get()
    Contact_Number = cnumentry.get()
    DOA = doaentry.get()
    Start_Time = sentry.get()
    Duration = dentry.get()
    End_Time = etentry.get()
    c.execute(insert_command % (First_Name, Last_Name,
            DOB, Contact_Number, DOA, Start_Time, Duration, End_Time))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_200_210
49498538_49498995_213_223
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Find Appointment!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booked!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartMenu))
    main.pack(pady = 200, padx = 200)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_200_210
49498538_49498995_226_252
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Find Appointment!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Enter D.O.B!", bg = "#FDFEFE", font = ("Helvetica", 50))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    dobbentry = Entry(frame1, font = ("Helvetica", 70), justify = "center")
    dobbentry.pack()
    frame2 = Frame(self)
    frame2.pack(fill = X)
    dobb = Label(frame2, text = "Please enter in the form DD/MM/YYYY", font = ("Helvetica", 30))
    dobb.pack(padx = 5, pady = 5)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(PageFive))
    confirm.pack(side = tk.LEFT, padx = 200)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 200)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_200_210
49498538_49498995_255_264
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Find Appointment!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointments Found!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu",
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_200_210
49498538_49498995_29_50
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Find Appointment!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageFive) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_200_210
49498538_49498995_71_93
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Find Appointment!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment System", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    book = tk.Button(self, text = "Book Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageOne))
    book.config(height = 2, width = 14)
    book.pack(side = tk.LEFT, padx = 4)
    view = tk.Button(self, text = "View Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageTwo))
    view.config(height = 2, width = 14)
    view.pack(side = tk.RIGHT, padx = 4)
    find = tk.Button(self, text = "Find Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageFour))
    find.config(height = 2, width = 14)
    find.pack(side = tk.BOTTOM, pady = 20)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_200_210
49498538_49498995_96_180
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Find Appointment!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booking!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    fname = Label(frame1, text = "First Name", font = ("Helvetica", 30))
    fname.pack(side = tk.LEFT, padx = 50, pady = 5)
    doa = Label(frame1, text = "Appointment Date", font = ("Helvetica", 30))
    doa.pack(side = tk.RIGHT, padx = 175, pady = 5)
    frame2 = Frame(self)
    frame2.pack(fill = X)
    self.fentry = Entry(frame2, font = ("Helvetica", 30))
    self.fentry.pack(side = tk.LEFT, padx = 50)
    self.doaentry = Entry(frame2, font = ("Helvetica", 30))
    self.doaentry.pack(side = tk.RIGHT, padx = 50)
    frame3 = Frame(self)
    frame3.pack(fill = BOTH)
    lname = Label(frame3, text = "Last Name", font = ("Helvetica", 30))
    lname.pack(side = tk.LEFT, padx = 50, pady = 5)
    stime = Label(frame3, text = "Start Time", font = ("Helvetica", 30))
    stime.pack(side = tk.RIGHT, padx = 310, pady = 5)
    frame4 = Frame(self)
    frame4.pack(fill = BOTH)
    self.lentry = Entry(frame4, font = ("Helvetica", 30))
    self.lentry.pack(side = tk.LEFT, padx = 50)
    self.sentry = Entry(frame4, font = ("Helvetica", 30))
    self.sentry.pack(side = tk.RIGHT, padx = 50)
    frame5 = Frame(self)
    frame5.pack(fill = BOTH)
    dob = Label(frame5, text = "D.O.B", font = ("Helvetica", 30))
    dob.pack(side = LEFT, padx = 50, pady = 5)
    duration = Label(frame5, text = "Duration", font = ("Helvetica", 30))
    duration.pack(side = tk.RIGHT, padx = 345, pady = 5)
    frame6 = Frame(self)
    frame6.pack(fill = BOTH)
    self.dobentry = Entry(frame6, font = ("Helvetica", 30))
    self.dobentry.pack(side = tk.LEFT, padx = 50)
    self.dentry = Entry(frame6, font = ("Helvetica", 30))
    self.dentry.pack(side = tk.RIGHT, padx = 50)
    frame7 = Frame(self)
    frame7.pack(fill = BOTH)
    cnum = Label(frame7, text = "Contact Number", font = ("Helvetica", 30))
    cnum.pack(side = LEFT, padx = 50, pady = 5)
    etime = Label(frame7, text = "End Time", font = ("Helvetica", 30))
    etime.pack(side = tk.RIGHT, padx = 325, pady = 5)
    frame8 = Frame(self)
    frame8.pack(fill = BOTH)
    self.cnumentry = Entry(frame8, font = ("Helvetica", 30))
    self.cnumentry.pack(side = tk.LEFT, padx = 50)
    self.etentry = Entry(frame8, font = ("Helvetica", 30))
    self.etentry.pack(side = tk.RIGHT, padx = 50)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : self.confirm_button(controller))
    confirm.pack(side = tk.LEFT, padx = 250)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 250)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_213_223
49498538_49498995_226_252
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booked!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartMenu))
    main.pack(pady = 200, padx = 200)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Enter D.O.B!", bg = "#FDFEFE", font = ("Helvetica", 50))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    dobbentry = Entry(frame1, font = ("Helvetica", 70), justify = "center")
    dobbentry.pack()
    frame2 = Frame(self)
    frame2.pack(fill = X)
    dobb = Label(frame2, text = "Please enter in the form DD/MM/YYYY", font = ("Helvetica", 30))
    dobb.pack(padx = 5, pady = 5)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(PageFive))
    confirm.pack(side = tk.LEFT, padx = 200)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 200)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_213_223
49498538_49498995_255_264
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booked!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartMenu))
    main.pack(pady = 200, padx = 200)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointments Found!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu",
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_213_223
49498538_49498995_29_50
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booked!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartMenu))
    main.pack(pady = 200, padx = 200)

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageFive) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_213_223
49498538_49498995_71_93
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booked!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartMenu))
    main.pack(pady = 200, padx = 200)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment System", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    book = tk.Button(self, text = "Book Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageOne))
    book.config(height = 2, width = 14)
    book.pack(side = tk.LEFT, padx = 4)
    view = tk.Button(self, text = "View Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageTwo))
    view.config(height = 2, width = 14)
    view.pack(side = tk.RIGHT, padx = 4)
    find = tk.Button(self, text = "Find Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageFour))
    find.config(height = 2, width = 14)
    find.pack(side = tk.BOTTOM, pady = 20)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_213_223
49498538_49498995_96_180
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booked!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartMenu))
    main.pack(pady = 200, padx = 200)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booking!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    fname = Label(frame1, text = "First Name", font = ("Helvetica", 30))
    fname.pack(side = tk.LEFT, padx = 50, pady = 5)
    doa = Label(frame1, text = "Appointment Date", font = ("Helvetica", 30))
    doa.pack(side = tk.RIGHT, padx = 175, pady = 5)
    frame2 = Frame(self)
    frame2.pack(fill = X)
    self.fentry = Entry(frame2, font = ("Helvetica", 30))
    self.fentry.pack(side = tk.LEFT, padx = 50)
    self.doaentry = Entry(frame2, font = ("Helvetica", 30))
    self.doaentry.pack(side = tk.RIGHT, padx = 50)
    frame3 = Frame(self)
    frame3.pack(fill = BOTH)
    lname = Label(frame3, text = "Last Name", font = ("Helvetica", 30))
    lname.pack(side = tk.LEFT, padx = 50, pady = 5)
    stime = Label(frame3, text = "Start Time", font = ("Helvetica", 30))
    stime.pack(side = tk.RIGHT, padx = 310, pady = 5)
    frame4 = Frame(self)
    frame4.pack(fill = BOTH)
    self.lentry = Entry(frame4, font = ("Helvetica", 30))
    self.lentry.pack(side = tk.LEFT, padx = 50)
    self.sentry = Entry(frame4, font = ("Helvetica", 30))
    self.sentry.pack(side = tk.RIGHT, padx = 50)
    frame5 = Frame(self)
    frame5.pack(fill = BOTH)
    dob = Label(frame5, text = "D.O.B", font = ("Helvetica", 30))
    dob.pack(side = LEFT, padx = 50, pady = 5)
    duration = Label(frame5, text = "Duration", font = ("Helvetica", 30))
    duration.pack(side = tk.RIGHT, padx = 345, pady = 5)
    frame6 = Frame(self)
    frame6.pack(fill = BOTH)
    self.dobentry = Entry(frame6, font = ("Helvetica", 30))
    self.dobentry.pack(side = tk.LEFT, padx = 50)
    self.dentry = Entry(frame6, font = ("Helvetica", 30))
    self.dentry.pack(side = tk.RIGHT, padx = 50)
    frame7 = Frame(self)
    frame7.pack(fill = BOTH)
    cnum = Label(frame7, text = "Contact Number", font = ("Helvetica", 30))
    cnum.pack(side = LEFT, padx = 50, pady = 5)
    etime = Label(frame7, text = "End Time", font = ("Helvetica", 30))
    etime.pack(side = tk.RIGHT, padx = 325, pady = 5)
    frame8 = Frame(self)
    frame8.pack(fill = BOTH)
    self.cnumentry = Entry(frame8, font = ("Helvetica", 30))
    self.cnumentry.pack(side = tk.LEFT, padx = 50)
    self.etentry = Entry(frame8, font = ("Helvetica", 30))
    self.etentry.pack(side = tk.RIGHT, padx = 50)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : self.confirm_button(controller))
    confirm.pack(side = tk.LEFT, padx = 250)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 250)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_226_252
49498538_49498995_255_264
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Enter D.O.B!", bg = "#FDFEFE", font = ("Helvetica", 50))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    dobbentry = Entry(frame1, font = ("Helvetica", 70), justify = "center")
    dobbentry.pack()
    frame2 = Frame(self)
    frame2.pack(fill = X)
    dobb = Label(frame2, text = "Please enter in the form DD/MM/YYYY", font = ("Helvetica", 30))
    dobb.pack(padx = 5, pady = 5)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(PageFive))
    confirm.pack(side = tk.LEFT, padx = 200)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 200)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointments Found!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu",
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_226_252
49498538_49498995_29_50
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Enter D.O.B!", bg = "#FDFEFE", font = ("Helvetica", 50))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    dobbentry = Entry(frame1, font = ("Helvetica", 70), justify = "center")
    dobbentry.pack()
    frame2 = Frame(self)
    frame2.pack(fill = X)
    dobb = Label(frame2, text = "Please enter in the form DD/MM/YYYY", font = ("Helvetica", 30))
    dobb.pack(padx = 5, pady = 5)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(PageFive))
    confirm.pack(side = tk.LEFT, padx = 200)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 200)

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageFive) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_226_252
49498538_49498995_71_93
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Enter D.O.B!", bg = "#FDFEFE", font = ("Helvetica", 50))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    dobbentry = Entry(frame1, font = ("Helvetica", 70), justify = "center")
    dobbentry.pack()
    frame2 = Frame(self)
    frame2.pack(fill = X)
    dobb = Label(frame2, text = "Please enter in the form DD/MM/YYYY", font = ("Helvetica", 30))
    dobb.pack(padx = 5, pady = 5)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(PageFive))
    confirm.pack(side = tk.LEFT, padx = 200)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 200)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment System", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    book = tk.Button(self, text = "Book Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageOne))
    book.config(height = 2, width = 14)
    book.pack(side = tk.LEFT, padx = 4)
    view = tk.Button(self, text = "View Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageTwo))
    view.config(height = 2, width = 14)
    view.pack(side = tk.RIGHT, padx = 4)
    find = tk.Button(self, text = "Find Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageFour))
    find.config(height = 2, width = 14)
    find.pack(side = tk.BOTTOM, pady = 20)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_226_252
49498538_49498995_96_180
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Enter D.O.B!", bg = "#FDFEFE", font = ("Helvetica", 50))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    dobbentry = Entry(frame1, font = ("Helvetica", 70), justify = "center")
    dobbentry.pack()
    frame2 = Frame(self)
    frame2.pack(fill = X)
    dobb = Label(frame2, text = "Please enter in the form DD/MM/YYYY", font = ("Helvetica", 30))
    dobb.pack(padx = 5, pady = 5)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(PageFive))
    confirm.pack(side = tk.LEFT, padx = 200)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 200)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booking!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    fname = Label(frame1, text = "First Name", font = ("Helvetica", 30))
    fname.pack(side = tk.LEFT, padx = 50, pady = 5)
    doa = Label(frame1, text = "Appointment Date", font = ("Helvetica", 30))
    doa.pack(side = tk.RIGHT, padx = 175, pady = 5)
    frame2 = Frame(self)
    frame2.pack(fill = X)
    self.fentry = Entry(frame2, font = ("Helvetica", 30))
    self.fentry.pack(side = tk.LEFT, padx = 50)
    self.doaentry = Entry(frame2, font = ("Helvetica", 30))
    self.doaentry.pack(side = tk.RIGHT, padx = 50)
    frame3 = Frame(self)
    frame3.pack(fill = BOTH)
    lname = Label(frame3, text = "Last Name", font = ("Helvetica", 30))
    lname.pack(side = tk.LEFT, padx = 50, pady = 5)
    stime = Label(frame3, text = "Start Time", font = ("Helvetica", 30))
    stime.pack(side = tk.RIGHT, padx = 310, pady = 5)
    frame4 = Frame(self)
    frame4.pack(fill = BOTH)
    self.lentry = Entry(frame4, font = ("Helvetica", 30))
    self.lentry.pack(side = tk.LEFT, padx = 50)
    self.sentry = Entry(frame4, font = ("Helvetica", 30))
    self.sentry.pack(side = tk.RIGHT, padx = 50)
    frame5 = Frame(self)
    frame5.pack(fill = BOTH)
    dob = Label(frame5, text = "D.O.B", font = ("Helvetica", 30))
    dob.pack(side = LEFT, padx = 50, pady = 5)
    duration = Label(frame5, text = "Duration", font = ("Helvetica", 30))
    duration.pack(side = tk.RIGHT, padx = 345, pady = 5)
    frame6 = Frame(self)
    frame6.pack(fill = BOTH)
    self.dobentry = Entry(frame6, font = ("Helvetica", 30))
    self.dobentry.pack(side = tk.LEFT, padx = 50)
    self.dentry = Entry(frame6, font = ("Helvetica", 30))
    self.dentry.pack(side = tk.RIGHT, padx = 50)
    frame7 = Frame(self)
    frame7.pack(fill = BOTH)
    cnum = Label(frame7, text = "Contact Number", font = ("Helvetica", 30))
    cnum.pack(side = LEFT, padx = 50, pady = 5)
    etime = Label(frame7, text = "End Time", font = ("Helvetica", 30))
    etime.pack(side = tk.RIGHT, padx = 325, pady = 5)
    frame8 = Frame(self)
    frame8.pack(fill = BOTH)
    self.cnumentry = Entry(frame8, font = ("Helvetica", 30))
    self.cnumentry.pack(side = tk.LEFT, padx = 50)
    self.etentry = Entry(frame8, font = ("Helvetica", 30))
    self.etentry.pack(side = tk.RIGHT, padx = 50)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : self.confirm_button(controller))
    confirm.pack(side = tk.LEFT, padx = 250)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 250)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_255_264
49498538_49498995_29_50
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointments Found!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu",
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageFive) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_255_264
49498538_49498995_71_93
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointments Found!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu",
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment System", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    book = tk.Button(self, text = "Book Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageOne))
    book.config(height = 2, width = 14)
    book.pack(side = tk.LEFT, padx = 4)
    view = tk.Button(self, text = "View Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageTwo))
    view.config(height = 2, width = 14)
    view.pack(side = tk.RIGHT, padx = 4)
    find = tk.Button(self, text = "Find Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageFour))
    find.config(height = 2, width = 14)
    find.pack(side = tk.BOTTOM, pady = 20)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_255_264
49498538_49498995_96_180
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointments Found!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    main = tk.Button(self, text = "Return to Main Menu",
        command = lambda : controller.show_frame(StartPage))
    main.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booking!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    fname = Label(frame1, text = "First Name", font = ("Helvetica", 30))
    fname.pack(side = tk.LEFT, padx = 50, pady = 5)
    doa = Label(frame1, text = "Appointment Date", font = ("Helvetica", 30))
    doa.pack(side = tk.RIGHT, padx = 175, pady = 5)
    frame2 = Frame(self)
    frame2.pack(fill = X)
    self.fentry = Entry(frame2, font = ("Helvetica", 30))
    self.fentry.pack(side = tk.LEFT, padx = 50)
    self.doaentry = Entry(frame2, font = ("Helvetica", 30))
    self.doaentry.pack(side = tk.RIGHT, padx = 50)
    frame3 = Frame(self)
    frame3.pack(fill = BOTH)
    lname = Label(frame3, text = "Last Name", font = ("Helvetica", 30))
    lname.pack(side = tk.LEFT, padx = 50, pady = 5)
    stime = Label(frame3, text = "Start Time", font = ("Helvetica", 30))
    stime.pack(side = tk.RIGHT, padx = 310, pady = 5)
    frame4 = Frame(self)
    frame4.pack(fill = BOTH)
    self.lentry = Entry(frame4, font = ("Helvetica", 30))
    self.lentry.pack(side = tk.LEFT, padx = 50)
    self.sentry = Entry(frame4, font = ("Helvetica", 30))
    self.sentry.pack(side = tk.RIGHT, padx = 50)
    frame5 = Frame(self)
    frame5.pack(fill = BOTH)
    dob = Label(frame5, text = "D.O.B", font = ("Helvetica", 30))
    dob.pack(side = LEFT, padx = 50, pady = 5)
    duration = Label(frame5, text = "Duration", font = ("Helvetica", 30))
    duration.pack(side = tk.RIGHT, padx = 345, pady = 5)
    frame6 = Frame(self)
    frame6.pack(fill = BOTH)
    self.dobentry = Entry(frame6, font = ("Helvetica", 30))
    self.dobentry.pack(side = tk.LEFT, padx = 50)
    self.dentry = Entry(frame6, font = ("Helvetica", 30))
    self.dentry.pack(side = tk.RIGHT, padx = 50)
    frame7 = Frame(self)
    frame7.pack(fill = BOTH)
    cnum = Label(frame7, text = "Contact Number", font = ("Helvetica", 30))
    cnum.pack(side = LEFT, padx = 50, pady = 5)
    etime = Label(frame7, text = "End Time", font = ("Helvetica", 30))
    etime.pack(side = tk.RIGHT, padx = 325, pady = 5)
    frame8 = Frame(self)
    frame8.pack(fill = BOTH)
    self.cnumentry = Entry(frame8, font = ("Helvetica", 30))
    self.cnumentry.pack(side = tk.LEFT, padx = 50)
    self.etentry = Entry(frame8, font = ("Helvetica", 30))
    self.etentry.pack(side = tk.RIGHT, padx = 50)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : self.confirm_button(controller))
    confirm.pack(side = tk.LEFT, padx = 250)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 250)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_29_50
49498538_49498995_71_93
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageFive) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment System", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    book = tk.Button(self, text = "Book Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageOne))
    book.config(height = 2, width = 14)
    book.pack(side = tk.LEFT, padx = 4)
    view = tk.Button(self, text = "View Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageTwo))
    view.config(height = 2, width = 14)
    view.pack(side = tk.RIGHT, padx = 4)
    find = tk.Button(self, text = "Find Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageFour))
    find.config(height = 2, width = 14)
    find.pack(side = tk.BOTTOM, pady = 20)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_29_50
49498538_49498995_96_180
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageFive) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booking!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    fname = Label(frame1, text = "First Name", font = ("Helvetica", 30))
    fname.pack(side = tk.LEFT, padx = 50, pady = 5)
    doa = Label(frame1, text = "Appointment Date", font = ("Helvetica", 30))
    doa.pack(side = tk.RIGHT, padx = 175, pady = 5)
    frame2 = Frame(self)
    frame2.pack(fill = X)
    self.fentry = Entry(frame2, font = ("Helvetica", 30))
    self.fentry.pack(side = tk.LEFT, padx = 50)
    self.doaentry = Entry(frame2, font = ("Helvetica", 30))
    self.doaentry.pack(side = tk.RIGHT, padx = 50)
    frame3 = Frame(self)
    frame3.pack(fill = BOTH)
    lname = Label(frame3, text = "Last Name", font = ("Helvetica", 30))
    lname.pack(side = tk.LEFT, padx = 50, pady = 5)
    stime = Label(frame3, text = "Start Time", font = ("Helvetica", 30))
    stime.pack(side = tk.RIGHT, padx = 310, pady = 5)
    frame4 = Frame(self)
    frame4.pack(fill = BOTH)
    self.lentry = Entry(frame4, font = ("Helvetica", 30))
    self.lentry.pack(side = tk.LEFT, padx = 50)
    self.sentry = Entry(frame4, font = ("Helvetica", 30))
    self.sentry.pack(side = tk.RIGHT, padx = 50)
    frame5 = Frame(self)
    frame5.pack(fill = BOTH)
    dob = Label(frame5, text = "D.O.B", font = ("Helvetica", 30))
    dob.pack(side = LEFT, padx = 50, pady = 5)
    duration = Label(frame5, text = "Duration", font = ("Helvetica", 30))
    duration.pack(side = tk.RIGHT, padx = 345, pady = 5)
    frame6 = Frame(self)
    frame6.pack(fill = BOTH)
    self.dobentry = Entry(frame6, font = ("Helvetica", 30))
    self.dobentry.pack(side = tk.LEFT, padx = 50)
    self.dentry = Entry(frame6, font = ("Helvetica", 30))
    self.dentry.pack(side = tk.RIGHT, padx = 50)
    frame7 = Frame(self)
    frame7.pack(fill = BOTH)
    cnum = Label(frame7, text = "Contact Number", font = ("Helvetica", 30))
    cnum.pack(side = LEFT, padx = 50, pady = 5)
    etime = Label(frame7, text = "End Time", font = ("Helvetica", 30))
    etime.pack(side = tk.RIGHT, padx = 325, pady = 5)
    frame8 = Frame(self)
    frame8.pack(fill = BOTH)
    self.cnumentry = Entry(frame8, font = ("Helvetica", 30))
    self.cnumentry.pack(side = tk.LEFT, padx = 50)
    self.etentry = Entry(frame8, font = ("Helvetica", 30))
    self.etentry.pack(side = tk.RIGHT, padx = 50)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : self.confirm_button(controller))
    confirm.pack(side = tk.LEFT, padx = 250)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 250)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49498538_49498995_71_93
49498538_49498995_96_180
Title: Trying to submit entries to sqlite and change frame with one button 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment System", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    book = tk.Button(self, text = "Book Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageOne))
    book.config(height = 2, width = 14)
    book.pack(side = tk.LEFT, padx = 4)
    view = tk.Button(self, text = "View Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageTwo))
    view.config(height = 2, width = 14)
    view.pack(side = tk.RIGHT, padx = 4)
    find = tk.Button(self, text = "Find Appointment", font = ("Helvetica", 40),
        command = lambda : controller.show_frame(PageFour))
    find.config(height = 2, width = 14)
    find.pack(side = tk.BOTTOM, pady = 20)

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Appointment Booking!", bg = "#FDFEFE", font = ("Helvetica", 70))
    label.pack(pady = 10, fill = X)
    frame1 = Frame(self)
    frame1.pack(fill = X)
    fname = Label(frame1, text = "First Name", font = ("Helvetica", 30))
    fname.pack(side = tk.LEFT, padx = 50, pady = 5)
    doa = Label(frame1, text = "Appointment Date", font = ("Helvetica", 30))
    doa.pack(side = tk.RIGHT, padx = 175, pady = 5)
    frame2 = Frame(self)
    frame2.pack(fill = X)
    self.fentry = Entry(frame2, font = ("Helvetica", 30))
    self.fentry.pack(side = tk.LEFT, padx = 50)
    self.doaentry = Entry(frame2, font = ("Helvetica", 30))
    self.doaentry.pack(side = tk.RIGHT, padx = 50)
    frame3 = Frame(self)
    frame3.pack(fill = BOTH)
    lname = Label(frame3, text = "Last Name", font = ("Helvetica", 30))
    lname.pack(side = tk.LEFT, padx = 50, pady = 5)
    stime = Label(frame3, text = "Start Time", font = ("Helvetica", 30))
    stime.pack(side = tk.RIGHT, padx = 310, pady = 5)
    frame4 = Frame(self)
    frame4.pack(fill = BOTH)
    self.lentry = Entry(frame4, font = ("Helvetica", 30))
    self.lentry.pack(side = tk.LEFT, padx = 50)
    self.sentry = Entry(frame4, font = ("Helvetica", 30))
    self.sentry.pack(side = tk.RIGHT, padx = 50)
    frame5 = Frame(self)
    frame5.pack(fill = BOTH)
    dob = Label(frame5, text = "D.O.B", font = ("Helvetica", 30))
    dob.pack(side = LEFT, padx = 50, pady = 5)
    duration = Label(frame5, text = "Duration", font = ("Helvetica", 30))
    duration.pack(side = tk.RIGHT, padx = 345, pady = 5)
    frame6 = Frame(self)
    frame6.pack(fill = BOTH)
    self.dobentry = Entry(frame6, font = ("Helvetica", 30))
    self.dobentry.pack(side = tk.LEFT, padx = 50)
    self.dentry = Entry(frame6, font = ("Helvetica", 30))
    self.dentry.pack(side = tk.RIGHT, padx = 50)
    frame7 = Frame(self)
    frame7.pack(fill = BOTH)
    cnum = Label(frame7, text = "Contact Number", font = ("Helvetica", 30))
    cnum.pack(side = LEFT, padx = 50, pady = 5)
    etime = Label(frame7, text = "End Time", font = ("Helvetica", 30))
    etime.pack(side = tk.RIGHT, padx = 325, pady = 5)
    frame8 = Frame(self)
    frame8.pack(fill = BOTH)
    self.cnumentry = Entry(frame8, font = ("Helvetica", 30))
    self.cnumentry.pack(side = tk.LEFT, padx = 50)
    self.etentry = Entry(frame8, font = ("Helvetica", 30))
    self.etentry.pack(side = tk.RIGHT, padx = 50)
    confirm = tk.Button(self, text = "Confirm", font = ("Helvetica", 30),
        command = lambda : self.confirm_button(controller))
    confirm.pack(side = tk.LEFT, padx = 250)
    cancel = tk.Button(self, text = "Cancel", font = ("Helvetica", 30),
        command = lambda : controller.show_frame(StartPage))
    cancel.pack(side = tk.RIGHT, padx = 250)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49510417_49756367_12_21
49510417_51262215_11_17
Title: Change log-level via mocking 
----------------------------------------

def __enter__(self) :
INDENT
    self.save_logger('', logging.getLogger())

    for name, logger in logging.Logger.manager.loggerDict.items() :
    INDENT

        self.save_logger(name, logger)
    DEDENT
DEDENT
----------------------------------------

def __enter__(self) :
INDENT
    if self.level is not None :
    INDENT
        self.old_level = self.logger.level
        self.logger.setLevel(self.level)
    DEDENT
    if self.handler :
    INDENT
        self.logger.addHandler(self.handler)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49510417_49756367_22_31
49510417_51262215_18_25
Title: Change log-level via mocking 
----------------------------------------

def __exit__(self, exception_type, exception_value, traceback) :
INDENT
    self.restore_logger('', logging.getLogger())

    for name, logger in logging.Logger.manager.loggerDict.items() :
    INDENT

        self.restore_logger(name, logger)
    DEDENT
DEDENT
----------------------------------------

def __exit__(self, et, ev, tb) :
INDENT
    if self.level is not None :
    INDENT
        self.logger.setLevel(self.old_level)
    DEDENT
    if self.handler :
    INDENT
        self.logger.removeHandler(self.handler)
    DEDENT
    if self.handler and self.close :
    INDENT
        self.handler.close()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49526816_49527016_3_14
49526816_49527116_4_16
Title: "Recursively listing all files in Python not able to fetch all" 
----------------------------------------

def list_content_recursively() :
INDENT
    cwd = os.getcwd()
    print ("Call from: " + cwd)
    for entry in os.listdir(cwd) :
    INDENT
        if os.path.isfile(entry) :
        INDENT
            print ("File: " + entry)
        DEDENT
        elif os.path.isdir(entry) :
        INDENT
            os.chdir(entry)
            list_content_recursively()
            os.chdir("..")
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def list_content_recursively(start_point) :
INDENT
    print ("Call from: " + str(start_point))
    for entry in os.listdir(start_point) :
    INDENT

        entry_path = pathlib.Path(start_point) / entry
        if os.path.isfile(entry_path) :
        INDENT
            print ("File: " + str(entry))
        DEDENT
        if os.path.isdir(entry_path) :
        INDENT
            list_content_recursively(entry_path)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49533764_49533870_13_18
49533764_49534067_2_15
Title: Flask does not return the requested page when pressed submit 
----------------------------------------

def rera2() :
INDENT
    search = DataSearchForm(request.form)
    if request.method == 'POST' :
    INDENT
        return search_results(search)
    DEDENT
    return render_template('rera.html', form = search)
DEDENT
----------------------------------------

def rera2() :
INDENT
    search = DataSearchForm(request.form)
    email = request.form ["email_name"]
    password = request.form ["password_name"]
    if request.method == 'POST' :
    INDENT
        if search :
        INDENT
            return search_results(search)
        DEDENT
        elif email and password :
        INDENT
            data = Data(email, password)
            db.session.add(data)
            db.session.commit()
            return render_template("rera.html")
        DEDENT
        else :
        INDENT
            return render_template('rera.html', form = search)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49559806_49561303_25_50
49559806_49561303_5_20
Title: Tkinter: Code stops and window doesn't show up 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.parent = parent
    self.controller = controller
    self.username = tk.Label(self, text = "Username:")
    self.username.grid(row = 0, column = 0)
    self.username_txb = tk.Entry(self)
    self.username_txb.focus_set()
    self.username_txb.grid(row = 0, column = 1)
    self.pass_lbl = tk.Label(self, text = "Password:")
    self.pass_lbl.grid(row = 0, column = 2)
    self.password_txb = tk.Entry(self, text = "Password", show = "*")
    self.password_txb.grid(row = 0, column = 3)
    self.login_btn = tk.Button(self, text = "Login", command = self.connect)
    self.login_btn.grid(row = 0, column = 4)
    self.info_pane = tk.PanedWindow()
    self.info_pane.grid(row = 1, column = 0)
    self.info_lbl = tk.Label(self, text = "More information about access:", fg = "blue", cursor = "hand2")
    self.contact_lbl = tk.Label(self, text = "Contact us", fg = "blue", cursor = "hand2")
    self.contact_lbl.grid(row = 2, column = 0)
    self.contact_lbl.bind("<Button-1>", self.callback)
DEDENT
----------------------------------------

def __init__(self, f, * args, ** kwags) :
INDENT
    tk.Tk.__init__(self, * args, ** kwags)
    self.title(f)
    self.container = tk.Frame(self, width = 512, height = 512)
    self.container.grid(row = 0, column = 0, sticky = "nsew")
    self.container.grid_rowconfigure(0, weight = 1)
    self.container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    self.frames ["HomePage"] = HomePage(parent = self.container, controller = self)
    self.frames ["HomePage"].grid(row = 0, column = 0, sticky = "nsew")
    self.frames ["UploadPage"] = UploadPage(parent = self.container)
    self.frames ["UploadPage"].grid(row = 0, column = 0, sticky = "nsew")
    self.show_frame("HomePage")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49572868_49572995_7_18
49572868_49573330_7_13
Title: python using if and for function for dictionary with a list 
----------------------------------------

def search_bag(x) :
INDENT
    lst = []
    for k, v in bagpack.iteritems() :
    INDENT
        if isinstance(v, list) :
        INDENT
            v = ' '.join(v)
            if x in v :
            INDENT
                lst.append(k)
            DEDENT
        DEDENT
        else :
        INDENT
            if x == v :
            INDENT
                lst.append(k)
            DEDENT
        DEDENT
    DEDENT
    return lst
DEDENT
----------------------------------------

def search_bag(x) :
INDENT
    for k, v in bagpack.iteritems() :
    INDENT
        for snack in bagpack ["snacks"] :
        INDENT
            if v == x or snack == x :
            INDENT
                return v == x or snack == x
            DEDENT
        DEDENT
        return False
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49582885_49583060_6_16
49582885_49594008_4_12
Title: RuntimeError when using threading and tkinter 
----------------------------------------

def start_counter() :
INDENT
    global x, repeat
    repeat += 1
    x += 1
    display.config({"text" : "x = {0}".format(x)})
    if repeat < 5 :
    INDENT

        window.after(3000, start_counter)

    DEDENT
DEDENT
----------------------------------------

def start_counter() :
INDENT
    for i in range(1) :
    INDENT
        bot = threading.Thread(target = add_one)
        bot.start(); bot.join()
    DEDENT
    temp_window = tkinter.Tk()
    temp_window.withdraw()
    window.after(100, start_counter)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49604025_49605587_51_79
49604025_49605689_41_73
Title: Translating Brute-Force Voronoi Diagram into Python from Javascript Example 
----------------------------------------

def main() :
INDENT
    points = makeMap(20, 400)
    print ("points: ", points)
    pg.init()
    size = (400, 400)
    surf = pg.display.set_mode(size)
    done = False

    clock = pg.time.Clock()
    fps = 40
    while not done :
    INDENT
        for event in pg.event.get() :
        INDENT
            if event.type == pg.QUIT :
            INDENT
                done = True
            DEDENT
        DEDENT
        colorer(surf, points)
        pg.display.flip()

        clock.tick(fps)

    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    pygame.init()
    size = (400, 400)
    screen = pygame.display.set_mode(size)
    white = pygame.Color('white')
    done = False
    clock = pygame.time.Clock()
    fps = 40
    points = definePoints(50, 400)

    for point in points :
    INDENT

        color = (random.randrange(256), random.randrange(256),
            random.randrange(256))
        for p in point [3] :
        INDENT

            gfxdraw.pixel(screen, point [1] + p [0], point [2] + p [1], color)
        DEDENT
        gfxdraw.pixel(screen, point [1], point [2], white)
    DEDENT
    while not done :
    INDENT
        for event in pygame.event.get() :
        INDENT
            if event.type == pygame.QUIT :
            INDENT
                done = True
            DEDENT
        DEDENT
        clock.tick(fps)
        pygame.display.flip()

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49611594_49611968_21_39
49611594_49612286_18_26
Title: How to print Python Output in Entry widget? 
----------------------------------------

def printLine(self, Event) :
INDENT
    word_list = []
    counter = 0
    unique_words_in_string = []
    total_times_word_appears = {}
    for word in self.inputField.get().split() :
    INDENT
        word_list.append(word)
        if word not in unique_words_in_string :
        INDENT
            unique_words_in_string.append(word)
        DEDENT
    DEDENT
    for word in unique_words_in_string :
    INDENT
        counter = 0
        for other_word in word_list :
        INDENT
            if word == other_word :
            INDENT
                counter += 1
            DEDENT
        DEDENT
        total_times_word_appears [word] = counter
    DEDENT
    self.outputField.delete(0, "end")
    self.outputField.insert("end", total_times_word_appears)
DEDENT
----------------------------------------

def printLine() :
INDENT
    counter = {}
    words = inputField.get().split()
    for word in words :
    INDENT
        counter [word] = counter.get(word, 0) + 1
        Ans = counter [word] - 1
        print(Ans, end = " ")
        outputField.insert(END, str(Ans))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49611594_49611968_4_20
49611594_49612286_5_34
Title: How to print Python Output in Entry widget? 
----------------------------------------

def __init__(self, parent) :
INDENT
    self.root = parent
    self.root.geometry('250x150')
    self.root.title("DiscreteMaths_3_1")
    Label_1 = tk.Label(self.root, text = "Input")
    Label_2 = tk.Label(self.root, text = "Output")
    Label_1.grid(row = 0)
    Label_2.grid(row = 1)
    self.inputField = tk.Entry(self.root)
    self.outputField = tk.Entry(self.root)
    self.inputField.grid(row = 0, column = 1)
    self.outputField.grid(row = 1, column = 1)
    self.inputField.bind('<Return>', self.printLine)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    root = Tk()
    root.geometry('250x150')
    root.title("DiscreteMaths_3_1")
    usertext = StringVar()
    Label_1 = Label(root, text = "Input")
    Label_2 = Label(root, text = "Output")
    inputField = Entry(root, textvariable = usertext)
    outputField = Entry(root)
    inputField.bind('<Return>', lambda _ : printLine())
    def printLine() :
    INDENT
        counter = {}
        words = inputField.get().split()
        for word in words :
        INDENT
            counter [word] = counter.get(word, 0) + 1
            Ans = counter [word] - 1
            print(Ans, end = " ")
            outputField.insert(END, str(Ans))
        DEDENT
    DEDENT
    Label_1.grid(row = 0)
    Label_2.grid(row = 1)
    inputField.grid(row = 0, column = 1)
    outputField.grid(row = 1, column = 1)
    root.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49612316_49612460_4_44
49612316_49612688_3_36
Title: Changing random number in python 
----------------------------------------

def guess_number_game() :
INDENT
    playing = True
    while playing :
    INDENT

        number = random.randint(1, 101)
        points = 0
        print ('You already have ' + str(points) + ' point(s)')
        playing = True
        print (number)
        guess = int(input('Guess the number between 1 and 100: '))
        if guess > number :
        INDENT
            print ('lower')
        DEDENT
        elif guess < number :
        INDENT
            print ('Higher')
        DEDENT
        else :
        INDENT
            print ('You got it, Good job!!')
            playing = False
            points += 1
            play_again = True
        DEDENT
        while play_again :
        INDENT

            again = input('Do you want to play again type yes/no: ')
            if again == 'yes' :
            INDENT
                playing = True
                play_again = False
            DEDENT
            elif again == 'no' :
            INDENT
                play_again = False
            DEDENT
            else :
            INDENT
                print ('please type yes or no')
            DEDENT
        DEDENT
    DEDENT
    print ('Now you have ' + str(points) + ' point(s)')
DEDENT
----------------------------------------

def guess_number_game() :
INDENT
    points = 0
    print ('You already have ' + str(points) + ' point(s)')
    playing = True
    play_again = False
    number = random.randint(1, 101)

    while playing :
    INDENT

        guess = int(input('Guess the number between 1 and 100: '))
        if guess > number :
        INDENT
            print ('lower')
        DEDENT
        elif guess < number :
        INDENT
            print ('Higher')
        DEDENT
        else :
        INDENT
            print ('You got it, Good job!!')
            number = random.randint(1, 101)
            points += 1
            again = input('Do you want to play again type yes/no: ')
            if again == 'yes' :
            INDENT
                playing = True
            DEDENT
            elif again == 'no' :
            INDENT
                playing = False
            DEDENT
        DEDENT
    DEDENT
    print ('Now you have ' + str(points) + ' point(s)')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49614686_49614907_1_11
49614686_49615296_1_13
Title: "Proxy function works with requests but not with a chrome browser?" 
----------------------------------------

def get_proxy(string_only = True) :
INDENT
    try :
    INDENT
        proxy_manager = ProxyManager("proxies.txt")
        proxy = proxy_manager.random_proxy()
        if string_only :
        INDENT
            return proxy.proxy_string
        DEDENT
        return proxy.get_dict()
    DEDENT
    except (OSError, IOError, IndexError) as e :
    INDENT
        return None

    DEDENT
DEDENT
----------------------------------------

def get_proxy() :
INDENT
    try :
    INDENT
        proxy_manager = ProxyManager("proxies.txt")
        return proxy_manager.random_proxy().proxy_string
    DEDENT
    except (OSError, IOError) as e :
    INDENT
        return None
    DEDENT
    chrome_options = webdriver.ChromeOptions()
    proxy = get_proxy()
    if proxy :
    INDENT
        chrome_options.add_argument("--proxy-server=" + proxy)
    DEDENT
    chrome = webdriver.Chrome(chrome_options = chrome_options)
    chrome.get("http://whatismyipaddress.com")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49626880_49627136_6_11
49626880_49627150_5_10
Title: Adding instance to a list creates similar values 
----------------------------------------

def addObjects(self) :
INDENT
    for i in range(10) :
    INDENT
        self.tempObject = Child()
        self.changeTempObjectX(i)
        self.listOfObject.append(self.tempObject)
    DEDENT
DEDENT
----------------------------------------

def addObjects(self) :
INDENT
    for i in range(10) :
    INDENT
        self.tempObject = Child()
        self.changeTempObjectX(i)
        self.listOfObject.append(self.tempObject)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49626880_49627136_6_11
49626880_49627771_5_10
Title: Adding instance to a list creates similar values 
----------------------------------------

def addObjects(self) :
INDENT
    for i in range(10) :
    INDENT
        self.tempObject = Child()
        self.changeTempObjectX(i)
        self.listOfObject.append(self.tempObject)
    DEDENT
DEDENT
----------------------------------------

def addObjects(self) :
INDENT
    for i in range(10) :
    INDENT
        self.tempObject = Child()
        self.changeTempObjectX(i)
        self.listOfObject.append(self.tempObject)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49626880_49627150_5_10
49626880_49627771_5_10
Title: Adding instance to a list creates similar values 
----------------------------------------

def addObjects(self) :
INDENT
    for i in range(10) :
    INDENT
        self.tempObject = Child()
        self.changeTempObjectX(i)
        self.listOfObject.append(self.tempObject)
    DEDENT
DEDENT
----------------------------------------

def addObjects(self) :
INDENT
    for i in range(10) :
    INDENT
        self.tempObject = Child()
        self.changeTempObjectX(i)
        self.listOfObject.append(self.tempObject)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49630868_49630944_1_7
49630868_49631067_1_12
Title: Hour of Python Trinket Number of Things challenge 
----------------------------------------

def how_many(the_list) :
INDENT
    dg = str(the_list [1])
    if the_list [0] > 1 :
    INDENT
        return "There are " + str(the_list [0]) + ' ' + the_list [1] + ('s' if dg [- 1] ! = 's' else 'es')
    DEDENT
    else :
    INDENT
        return "There is " + str(the_list [0]) + ' ' + the_list [1]
    DEDENT
DEDENT
----------------------------------------

def how_many(the_list) :
INDENT
    dg = str(the_list [1])
    if the_list [0] > 1 :
    INDENT
        if dg [- 1] == "s" :
        INDENT
            return "There are " + str(the_list [0]) + ' ' + the_list [1] + 'es'
        DEDENT
        else :
        INDENT
            return "There are " + str(the_list [0]) + ' ' + the_list [1] + 's'
        DEDENT
    DEDENT
    else :
    INDENT
        return "There is " + str(the_list [0]) + ' ' + the_list [1]

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49633281_49640948_79_88
49633281_49640948_95_101
Title: Updating QStackedWidget content at Runtime 
----------------------------------------

def open_menu(self, pos) :
INDENT
    menu = QMenu()
    show_act = menu.addAction("Show cars")
    action = menu.exec_(self.mapToGlobal(pos))
    if action == show_act :
    INDENT
        row = self.indexAt(pos).row()
        ix = myindex = self.model.index(row, 1)
        company = self.model.data(ix)
        self.changedCompany.emit(company)
    DEDENT
DEDENT
----------------------------------------

def open_menu(self, pos) :
INDENT
    menu = QMenu()
    back_act = menu.addAction("Show Manufacturers")
    action = menu.exec_(self.mapToGlobal(pos))
    if action == back_act :
    INDENT
        self.backSignal.emit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49656013_49657354_18_30
49656013_49657575_5_25
Title: certain number of choices in TKinter 
----------------------------------------

def __init__(self, parent = None, picks = [], maxpicks = 2, side = LEFT, anchor = W) :
INDENT
    Frame.__init__(self, parent)
    self.maxpicks = maxpicks
    self.numpicks = 0
    self.vars = []
    for pick in picks :
    INDENT
        var = IntVar()
        chk = Checkbutton(self, text = pick, variable = var,
            command = checkmax(self, var))
        chk.pack(side = side, anchor = anchor, expand = YES)
        self.vars.append(var)

    DEDENT
DEDENT
----------------------------------------

def __init__(self, parent = None, picks = [], maxselect = 1, side = tk.LEFT,
anchor = tk.W) :
INDENT
    super().__init__(parent)
    self.maxselect = maxselect

    self._vars = []
    self._checkbuttons = []
    for pick in picks :
    INDENT
        var = tk.IntVar()
        chk = tk.Checkbutton(self, text = pick, variable = var,
            command = partial(self._var_toggled, var))
        chk.pack(side = side, anchor = anchor, expand = tk.YES)
        self._vars.append(var)
        self._checkbuttons.append(chk)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49656013_49657354_18_30
49656013_49657764_4_16
Title: certain number of choices in TKinter 
----------------------------------------

def __init__(self, parent = None, picks = [], maxpicks = 2, side = LEFT, anchor = W) :
INDENT
    Frame.__init__(self, parent)
    self.maxpicks = maxpicks
    self.numpicks = 0
    self.vars = []
    for pick in picks :
    INDENT
        var = IntVar()
        chk = Checkbutton(self, text = pick, variable = var,
            command = checkmax(self, var))
        chk.pack(side = side, anchor = anchor, expand = YES)
        self.vars.append(var)

    DEDENT
DEDENT
----------------------------------------

def __init__(self, parent = None, picks = [], side = LEFT, anchor = W) :
INDENT
    Frame.__init__(self, parent)
    self.vars = []
    for pick in picks :
    INDENT
        var = IntVar()
        self.vars.append([Checkbutton(self, text = pick, command = self.check_count, variable = var), var])
        self.vars [pick] [0].grid(row = 0, column = pick)
        self.vars [pick] [0].bind("<Configure>")

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49656013_49657575_5_25
49656013_49657764_4_16
Title: certain number of choices in TKinter 
----------------------------------------

def __init__(self, parent = None, picks = [], maxselect = 1, side = tk.LEFT,
anchor = tk.W) :
INDENT
    super().__init__(parent)
    self.maxselect = maxselect

    self._vars = []
    self._checkbuttons = []
    for pick in picks :
    INDENT
        var = tk.IntVar()
        chk = tk.Checkbutton(self, text = pick, variable = var,
            command = partial(self._var_toggled, var))
        chk.pack(side = side, anchor = anchor, expand = tk.YES)
        self._vars.append(var)
        self._checkbuttons.append(chk)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, parent = None, picks = [], side = LEFT, anchor = W) :
INDENT
    Frame.__init__(self, parent)
    self.vars = []
    for pick in picks :
    INDENT
        var = IntVar()
        self.vars.append([Checkbutton(self, text = pick, command = self.check_count, variable = var), var])
        self.vars [pick] [0].grid(row = 0, column = pick)
        self.vars [pick] [0].bind("<Configure>")

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660196_1_12
49660097_49660203_4_19
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI(B = 1) :
INDENT
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while Guess > Number :
    INDENT
        print ("nope, to high.")
        return AI(B + 1)
    DEDENT
    while Guess < Number :
    INDENT
        print ("Sorry, thats to low. try again!")
        return AI(B + 1)
    DEDENT
    while Guess == Number :
    INDENT
        print ("Congragulations! you win! You guessed " + str(B) + " times")
        time.sleep(60)
        return
    DEDENT
DEDENT
----------------------------------------

def AI() :
INDENT
    counter = 1
    number = random.randint(1, 101)
    guess = int(input("Can you guess what number I'm Thinking of?: "))
    while guess ! = number :
    INDENT
        if guess < number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        else :
        INDENT
            print ("nope, too high")
        DEDENT
        counter += 1
        guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
    print ("Congragulations! you win! You guessed " + str(counter) + " times")
    time.sleep(60)
    quit()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660196_1_12
49660097_49660214_6_22
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI(B = 1) :
INDENT
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while Guess > Number :
    INDENT
        print ("nope, to high.")
        return AI(B + 1)
    DEDENT
    while Guess < Number :
    INDENT
        print ("Sorry, thats to low. try again!")
        return AI(B + 1)
    DEDENT
    while Guess == Number :
    INDENT
        print ("Congragulations! you win! You guessed " + str(B) + " times")
        time.sleep(60)
        return
    DEDENT
DEDENT
----------------------------------------

def AI() :
INDENT
    B = 1
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while True :
    INDENT
        if Guess > Number :
        INDENT
            print ("nope, to high.")
        DEDENT
        elif Guess < Number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        if Guess == Number :
        INDENT
            print ("Congragulations! you win! You guessed " + str(B) + " times")
            time.sleep(2)
            break
        DEDENT
        B += 1
        Guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660196_1_12
49660097_49660491_7_19
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI(B = 1) :
INDENT
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while Guess > Number :
    INDENT
        print ("nope, to high.")
        return AI(B + 1)
    DEDENT
    while Guess < Number :
    INDENT
        print ("Sorry, thats to low. try again!")
        return AI(B + 1)
    DEDENT
    while Guess == Number :
    INDENT
        print ("Congragulations! you win! You guessed " + str(B) + " times")
        time.sleep(60)
        return
    DEDENT
DEDENT
----------------------------------------

def AI() :
INDENT
    current_guess = int(input("Can you guess what number I'm thinking of?: "))
    while current_guess > secret_number :
    INDENT
        print ("Nope, too high. Try again!")
        return AI()
    DEDENT
    while current_guess < secret_number :
    INDENT
        print ("Sorry, that's too low. Try again!")
        return AI()
    DEDENT
    while current_guess == secret_number :
    INDENT
        print ("Congratulations! You win! You guessed {} times.".format(AI.count))
        time.sleep(60)
        quit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660196_1_12
49660097_49660554_23_35
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI(B = 1) :
INDENT
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while Guess > Number :
    INDENT
        print ("nope, to high.")
        return AI(B + 1)
    DEDENT
    while Guess < Number :
    INDENT
        print ("Sorry, thats to low. try again!")
        return AI(B + 1)
    DEDENT
    while Guess == Number :
    INDENT
        print ("Congragulations! you win! You guessed " + str(B) + " times")
        time.sleep(60)
        return
    DEDENT
DEDENT
----------------------------------------

def AI() :
INDENT
    guess = int(input("Can you guess what number I'm thinking of?: "))
    while guess > number :
    INDENT
        print ("Nope, too high.")
        return AI()
    DEDENT
    while guess < number :
    INDENT
        print ("Sorry, that's too low. Try again!")
        return AI()
    DEDENT
    while guess == number :
    INDENT
        print ("Congragulations! You win! You guessed " + str(AI.call_count) + " times")
        time.sleep(10)
        quit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660203_4_19
49660097_49660214_6_22
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI() :
INDENT
    counter = 1
    number = random.randint(1, 101)
    guess = int(input("Can you guess what number I'm Thinking of?: "))
    while guess ! = number :
    INDENT
        if guess < number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        else :
        INDENT
            print ("nope, too high")
        DEDENT
        counter += 1
        guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
    print ("Congragulations! you win! You guessed " + str(counter) + " times")
    time.sleep(60)
    quit()
DEDENT
----------------------------------------

def AI() :
INDENT
    B = 1
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while True :
    INDENT
        if Guess > Number :
        INDENT
            print ("nope, to high.")
        DEDENT
        elif Guess < Number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        if Guess == Number :
        INDENT
            print ("Congragulations! you win! You guessed " + str(B) + " times")
            time.sleep(2)
            break
        DEDENT
        B += 1
        Guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660203_4_19
49660097_49660491_7_19
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI() :
INDENT
    counter = 1
    number = random.randint(1, 101)
    guess = int(input("Can you guess what number I'm Thinking of?: "))
    while guess ! = number :
    INDENT
        if guess < number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        else :
        INDENT
            print ("nope, too high")
        DEDENT
        counter += 1
        guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
    print ("Congragulations! you win! You guessed " + str(counter) + " times")
    time.sleep(60)
    quit()
DEDENT
----------------------------------------

def AI() :
INDENT
    current_guess = int(input("Can you guess what number I'm thinking of?: "))
    while current_guess > secret_number :
    INDENT
        print ("Nope, too high. Try again!")
        return AI()
    DEDENT
    while current_guess < secret_number :
    INDENT
        print ("Sorry, that's too low. Try again!")
        return AI()
    DEDENT
    while current_guess == secret_number :
    INDENT
        print ("Congratulations! You win! You guessed {} times.".format(AI.count))
        time.sleep(60)
        quit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660203_4_19
49660097_49660554_23_35
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI() :
INDENT
    counter = 1
    number = random.randint(1, 101)
    guess = int(input("Can you guess what number I'm Thinking of?: "))
    while guess ! = number :
    INDENT
        if guess < number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        else :
        INDENT
            print ("nope, too high")
        DEDENT
        counter += 1
        guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
    print ("Congragulations! you win! You guessed " + str(counter) + " times")
    time.sleep(60)
    quit()
DEDENT
----------------------------------------

def AI() :
INDENT
    guess = int(input("Can you guess what number I'm thinking of?: "))
    while guess > number :
    INDENT
        print ("Nope, too high.")
        return AI()
    DEDENT
    while guess < number :
    INDENT
        print ("Sorry, that's too low. Try again!")
        return AI()
    DEDENT
    while guess == number :
    INDENT
        print ("Congragulations! You win! You guessed " + str(AI.call_count) + " times")
        time.sleep(10)
        quit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660214_6_22
49660097_49660491_7_19
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI() :
INDENT
    B = 1
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while True :
    INDENT
        if Guess > Number :
        INDENT
            print ("nope, to high.")
        DEDENT
        elif Guess < Number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        if Guess == Number :
        INDENT
            print ("Congragulations! you win! You guessed " + str(B) + " times")
            time.sleep(2)
            break
        DEDENT
        B += 1
        Guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
DEDENT
----------------------------------------

def AI() :
INDENT
    current_guess = int(input("Can you guess what number I'm thinking of?: "))
    while current_guess > secret_number :
    INDENT
        print ("Nope, too high. Try again!")
        return AI()
    DEDENT
    while current_guess < secret_number :
    INDENT
        print ("Sorry, that's too low. Try again!")
        return AI()
    DEDENT
    while current_guess == secret_number :
    INDENT
        print ("Congratulations! You win! You guessed {} times.".format(AI.count))
        time.sleep(60)
        quit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49660097_49660214_6_22
49660097_49660554_23_35
Title: How can I count the number of times this function is called? 
----------------------------------------

def AI() :
INDENT
    B = 1
    Guess = int(input("Can you guess what number I'm Thinking of?: "))
    while True :
    INDENT
        if Guess > Number :
        INDENT
            print ("nope, to high.")
        DEDENT
        elif Guess < Number :
        INDENT
            print ("Sorry, thats to low. try again!")
        DEDENT
        if Guess == Number :
        INDENT
            print ("Congragulations! you win! You guessed " + str(B) + " times")
            time.sleep(2)
            break
        DEDENT
        B += 1
        Guess = int(input("Can you guess what number I'm Thinking of?: "))
    DEDENT
DEDENT
----------------------------------------

def AI() :
INDENT
    guess = int(input("Can you guess what number I'm thinking of?: "))
    while guess > number :
    INDENT
        print ("Nope, too high.")
        return AI()
    DEDENT
    while guess < number :
    INDENT
        print ("Sorry, that's too low. Try again!")
        return AI()
    DEDENT
    while guess == number :
    INDENT
        print ("Congragulations! You win! You guessed " + str(AI.call_count) + " times")
        time.sleep(10)
        quit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49672852_49672949_1_15
49672852_49673074_1_16
Title: "See if new data equals old data if old data equals new data do nothing. Else rename old data to new data" 
----------------------------------------

def ask_data_change() :
INDENT
    data_inn = 'old data'
    while True :
    INDENT
        my_data_input = input('What is your input?: ')
        if data_inn == my_data_input :
        INDENT
            print ('Data input is equal to existing data')
            print ('data unchanged: ' + data_inn)
        DEDENT
        else :
        INDENT

            data_inn = my_data_input
            print ('Data is not equal to existing, changing data_inn to my_data_input')
            print ('New data is now: ' + data_inn)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def ask_data_change() :
INDENT
    data_inn = 'old data'
    my_data_input = input('What is your input?: ')
    while data_inn == my_data_input :
    INDENT
        print ('Data input is equal to existing data')
        print ('data unchanged: ' + data_inn)
        my_data_input = input('What is your input?: ')

    DEDENT
    data_inn = my_data_input
    print ('Data is not equal to existing, changing data_inn to my_data_input')
    print ('New data is now: ' + data_inn)
    return data_inn
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49672852_49672977_1_16
49672852_49673074_1_16
Title: "See if new data equals old data if old data equals new data do nothing. Else rename old data to new data" 
----------------------------------------

def ask_data_change(data_inn) :
INDENT
    my_data_input = input('What is your input?: ')
    if data_inn == my_data_input :
    INDENT
        print ('Data input is equal to existing data')
        print ('data unchanged: ' + data_inn)
    DEDENT
    else :
    INDENT

        data_inn = my_data_input
        print ('Data is not equal to existing, changing data_inn to my_data_input')
        print ('New data is now: ' + data_inn)
    DEDENT
    return data_inn

DEDENT
----------------------------------------

def ask_data_change() :
INDENT
    data_inn = 'old data'
    my_data_input = input('What is your input?: ')
    while data_inn == my_data_input :
    INDENT
        print ('Data input is equal to existing data')
        print ('data unchanged: ' + data_inn)
        my_data_input = input('What is your input?: ')

    DEDENT
    data_inn = my_data_input
    print ('Data is not equal to existing, changing data_inn to my_data_input')
    print ('New data is now: ' + data_inn)
    return data_inn
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49679827_49694783_25_71
49679827_49694783_80_98
Title: PyQt4 scrollbar interacts incorrectly with embedded scenes 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(P1, self).__init__(parent)
    layout = QtGui.QGridLayout(self)
    layout.setContentsMargins(20, 20, 20, 20)
    layout.setSpacing(10)
    self.label_edge1 = QtGui.QLabel('')
    self.label_edge1.setMargin(5)
    self.label_edge1.setFrameStyle(QtGui.QFrame.Panel | QtGui.QFrame.Sunken)
    layout.addWidget(self.label_edge1, 0, 0, 10, 10)
    self.label_edge1.show()
    self.label_avgVol = QtGui.QLabel('Test')
    self.label_avgVol.setMargin(5)
    self.label_avgVol.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Sunken)
    self.label_avgVol.setAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
    layout.addWidget(self.label_avgVol, 0, 0, 1, 10)
    self.label_avgVol.show()

    self.groupscroll = QtGui.QHBoxLayout()
    self.groupscrollbox = QtGui.QGroupBox()

    self.viz1 = Mayavi_Scene()
    self.ui1 = self.viz1.edit_traits(parent = self, kind = 'subpanel').control
    self.MVB = QtGui.QVBoxLayout()
    self.MVB.addWidget(self.ui1)
    scroll = QtGui.QScrollArea()
    widget = QtGui.QWidget(self)
    widget.setLayout(QtGui.QHBoxLayout())
    widget.layout().addWidget(self.groupscrollbox)
    scroll.setWidget(widget)
    scroll.setWidgetResizable(True)
    self.groupscrollbox.setLayout(self.MVB)
    self.groupscroll.addWidget(scroll)

    layout.addWidget(scroll, 1, 1, 1, 9)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    self.setGeometry(50, 50, 500, 500)
    tab1 = P1(self)
    tab2 = P2(self)
    self.tabs = QtGui.QTabWidget(self)
    self.tabs.resize(250, 150)
    self.tabs.addTab(tab1, 'Page 1')
    self.tabs.addTab(tab2, 'Page 2')
    self.setWindowTitle('SCROLLBAR ERROR EXAMPLE')

    self.setCentralWidget(self.tabs)
    self.show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697034_49697569_1_16
49697034_49697671_1_12
Title: Algorithms: Square root optimization 
----------------------------------------

def sqrt(x) :
INDENT
    if x == 0 :
    INDENT
        return x
    DEDENT
    start = 1
    end = x
    while start + 1 < end :
    INDENT
        mid = (end + start) / / 2
        delta = mid * mid - x
        if delta < 0 :
        INDENT
            start = mid
        DEDENT
        elif delta > 0 :
        INDENT
            end = mid
        DEDENT
        else :
        INDENT
            return mid
        DEDENT
    DEDENT
    return start
DEDENT
----------------------------------------

def sqrt(self, x) :
INDENT
    if x == 0 or x == 1 :
    INDENT
        return x
    DEDENT
    i = 1
    result = 1
    while result < = x :
    INDENT
        if result == x :
        INDENT
            return i
        DEDENT
        i += 1
        result = i * i
    DEDENT
    return i - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49703667_49703782_11_19
49703667_49704310_10_30
Title: Tic Tac Toe checkWin Validator with Lists 
----------------------------------------

def checkWin(gameBoard) :
INDENT
    for row in gameBoard :
    INDENT
        if row [0] == row [1] == row [2] :
        INDENT
            return row [0]
        DEDENT
    DEDENT
    for i in range(3) :
    INDENT
        if gameBoard [0] [i] == gameBoard [1] [i] == gameBoard [2] [i] :
        INDENT
            return gameBoard [0] [i]
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def checkWin(row1, row2, row3) :
INDENT
    if row1 [0] ! = ' ' and row1 [0] == row1 [1] and row1 [0] == row1 [2] : return row1 [0]
    if row2 [0] ! = ' ' and row2 [0] == row2 [1] and row2 [0] == row2 [2] : return row2 [0]
    if row3 [0] ! = ' ' and row3 [0] == row3 [1] and row3 [0] == row3 [2] : return row3 [0]

    if row1 [0] ! = ' ' and row1 [0] == row2 [0] and row1 [0] == row3 [0] : return row1 [0]
    if row1 [1] ! = ' ' and row1 [1] == row2 [1] and row1 [1] == row3 [1] : return row1 [1]
    if row1 [2] ! = ' ' and row1 [2] == row2 [2] and row1 [2] == row3 [2] : return row1 [2]

    if row1 [0] ! = ' ' and row1 [0] == row2 [1] and row1 [0] == row3 [2] : return row1 [0]
    if row3 [0] ! = ' ' and row3 [0] == row2 [1] and row3 [0] == row1 [0] : return row3 [0]

    return ' '
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49715043_49715127_1_17
49715043_49715208_3_14
Title: Looping a Try/Except block until a file can be read 
----------------------------------------

def getFiles(cryptSelection) :
INDENT
    while True :
    INDENT
        inputFile = input("\nEnter the file to %s. Press Enter alone to abort:" % cryptSelection)
        if inputFile ! = '' :
        INDENT
            try :
            INDENT
                fileText = open(inputFile, "r")
                fileText.close()
                break
            DEDENT
            except IOError :
            INDENT
                print ("Error - that file does not exist. Try again.")
            DEDENT
        DEDENT
        else :
        INDENT
            break
        DEDENT
    DEDENT
    return inputFile
DEDENT
----------------------------------------

def getFiles(cryptSelection) :
INDENT
    inputFile = input("\nEnter the file to " + cryptSelection + ". Press Enter alone to abort: ")
    while True :
    INDENT
        if inputFile ! = '' :
        INDENT
            if os.path.isfile(inputFile) :
            INDENT
                return inputFile
            DEDENT
            else :
            INDENT
                print ("Error - that file does not exist. Try again.")
            DEDENT
        DEDENT
        elif inputFile == '' :
        INDENT
            input("\nRun complete. Press the Enter key to exit.")
        DEDENT
        else :
        INDENT
            print ("\nError - Invalid option. Please select again.")
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49724170_49724316_16_34
49724170_49734733_3_29
Title: How to disable a button by a checkbox in Tkinter 
----------------------------------------

def __init__(self, master) :
INDENT
    self.label = ttk.Label(master, text = "Hello, Tkinter!")
    self.button1 = ttk.Button(master, text = "Texas", command = self.texas_hello)
    self.button2 = ttk.Button(master, text = "Hawaii", command = self.hawaii_hello)
    self.value_check = IntVar()
    self.checkbutton = ttk.Checkbutton(master, variable = self.value_check, text = 'Activate!',
        onvalue = 1, offvalue = 0,
        command = self.changebutton)
    self.value_check.set(0)
    self.changebutton()
    self.label.grid(row = 0, column = 0, columnspan = 2)
    self.button1.grid(row = 1, column = 0)
    self.button2.grid(row = 1, column = 1)
    self.checkbutton.grid(row = 1, column = 2)
    print (self.value_check.get())
DEDENT
----------------------------------------

def __init__(self, master) :
INDENT
    self.label = ttk.Label(master, text = "Hello, Tkinter!")
    self.button1 = ttk.Button(master, text = "Texas", command = self.texas_hello)
    self.button2 = ttk.Button(master, text = "Hawaii", command = self.hawaii_hello)
    self.value_check = IntVar()
    self.value_check.set(0)
    self.checkbutton = ttk.Checkbutton(master, variable = self.value_check, text = 'Activate!',
        onvalue = 1, offvalue = 0,
        command = self.disable_enable_button)
    self.choice = StringVar()
    self.frame_radio = ttk.Frame(master).grid(row = 3, column = 3)
    self.radiobutton1 = ttk.Radiobutton(self.frame_radio, text = 'Button 1', variable = self.choice, value = 'button1')
    self.radiobutton1.grid(row = 2, column = 2)
    self.radiobutton2 = ttk.Radiobutton(self.frame_radio, text = 'Button 2', variable = self.choice, value = 'button2')
    self.radiobutton2.grid(row = 3, column = 2)
    self.label.grid(row = 0, column = 0, columnspan = 2)
    self.button1.grid(row = 1, column = 0)
    self.button2.grid(row = 1, column = 1)
    self.checkbutton.grid(row = 1, column = 2)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49732096_49806521_87_98
49732096_49822560_140_167
Title: Python/Kivy : Selection Row in RecycleView using `Up` and `Down` key 
----------------------------------------

def _on_keyboard_down(self, keyboard, keycode, text, modifiers) :
INDENT
    if keycode [1] == 'down' :
    INDENT
        self.clearAll()
        self.nextItem()
        print ('down')
    DEDENT
    elif keycode [1] == 'up' :
    INDENT
        self.clearAll()
        self.prevItem()
        print ("up")
    DEDENT
    elif keycode [1] == 'e' and len(modifiers) > 0 and modifiers [0] == 'ctrl' :
    INDENT
        self.view_adapter.views [self.selectedItem].on_press()
    DEDENT
DEDENT
----------------------------------------

def _on_keyboard_down(self, keyboard, keycode, text, modifiers) :
INDENT
    if keycode [1] == 'down' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        self.col1_row_controller.select_next()
        self.col2_row_controller.select_next()
    DEDENT
    elif keycode [1] == 'up' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        self.col1_row_controller.select_previous()
        self.col2_row_controller.select_previous()
    DEDENT
    elif len(modifiers) > 0 and modifiers [0] == 'ctrl' and text == 'e' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        keyboard.release()
        self.on_keyboard_select()

    DEDENT
    if keycode [1] == 'escape' :
    INDENT
        keyboard.release()

    DEDENT
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49732518_49734488_6_15
49732518_49736102_12_35
Title: Webscraping - duplicates while writing to CSV 
----------------------------------------

def parseLinks(url) :
INDENT
    page = requests.get(url).text
    soup = BeautifulSoup(page, 'lxml')
    links = [a.get('href') for a in soup.select('.post_more a.qbutton')]
    for link in links :
    INDENT
        print (link)
    DEDENT
    newlink = soup.select_one('li.next a').get('href')
    parseLinks(newlink)
DEDENT
----------------------------------------

def parseLinks(url) :
INDENT
    page = requests.get(url)
    if page.status_code == 200 :
    INDENT
        soup = BeautifulSoup(page.text, 'html.parser')

        last_page_link = soup.find('li', class_ = 'last').a ['href']
        number_of_pages = int(last_page_link.split("/") [- 2])

        for pageno in range(0, number_of_pages) :
        INDENT

            page_url = url + "page/" + str(pageno + 1)

            thepage = requests.get(page_url)
            if thepage.status_code == 200 :
            INDENT
                soup = BeautifulSoup(thepage.text, "html.parser")
                for a in soup.find_all('a', class_ = 'qbutton small') :
                INDENT
                    print ('Saved {}'.format(a ['href']))
                    writerow(a ['href'], 'test.csv')

                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49744601_49744753_1_11
49744601_49745143_1_16
Title: Python reading file error 
----------------------------------------

def read_data_file(datafile) :
INDENT
    dataset = []
    for line in open(datafile, 'r') :
    INDENT

        dataset.append([float(token) for token in line.split()])

        dataset.append(1e+99)

    DEDENT
    return dataset
DEDENT
----------------------------------------

def read_data_file(datafile, token) :
INDENT
    dataset = []
    with open(datafile, 'r') as file :
    INDENT
        for line in file :
        INDENT

            data = line [: - 1].split(token)
            tmp = []
            for x in data :
            INDENT
                if x ! = "" :
                INDENT
                    x = float(x)
                    tmp.append(x)
                DEDENT
                else :
                INDENT
                    tmp.append(1e+99)
                DEDENT
            DEDENT
            dataset.append(tmp)
        DEDENT
    DEDENT
    return dataset
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49759993_49760543_36_46
49759993_49760543_7_14
Title: How to code an animation to run mutliple times in parallel in tkinter? 
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)

    self.canvas = tk.Canvas(width = 400, height = 400)
    self.canvas.pack()

    self._create_token(100, 100, "green")
    self._create_token(200, 100, "black")
DEDENT
----------------------------------------

def __init__(self, canvas, id_item, duration, _from = 0, _to = 1) :
INDENT
    self.canvas = canvas
    self.id_item = id_item
    self._progress = 0
    self._from = _from
    self._to = _to
    self.t = max(10, int(duration / (self._to - self._from)))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49759993_49760543_36_46
49759993_49763857_37_53
Title: How to code an animation to run mutliple times in parallel in tkinter? 
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)

    self.canvas = tk.Canvas(width = 400, height = 400)
    self.canvas.pack()

    self._create_token(100, 100, "green")
    self._create_token(200, 100, "black")
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)
    self.canvas = tk.Canvas(width = 400, height = 400)
    self.canvas.pack()

    self._tokens = []
    self._tokens.append(Token(self.canvas, 100, 100, "green", 25, 0, 5))
    self._tokens.append(Token(self.canvas, 200, 100, "black", 25, 0, 5))
    tk.Button(self, text = 'Go', command = self._start_paused_tokens).pack(side = tk.LEFT)
    tk.Button(self, text = 'Pause', command = self._pause_tokens).pack(side = tk.LEFT)

    self.after(UPDATE_DELAY, self._update_tokens)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49759993_49760543_36_46
49759993_49763857_9_17
Title: How to code an animation to run mutliple times in parallel in tkinter? 
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)

    self.canvas = tk.Canvas(width = 400, height = 400)
    self.canvas.pack()

    self._create_token(100, 100, "green")
    self._create_token(200, 100, "black")
DEDENT
----------------------------------------

def __init__(self, canvas, x, y, color, max_value, dx, dy) :
INDENT
    self.canvas, self.x, self.y = canvas, x, y
    self.color, self.max_value, self.dx, self.dy = color, max_value, dx, dy
    self.value, self.moving, self.saved_direction = 0, 0, 1
    self.id = self.canvas.create_rectangle(x - self.WIDTH, y - self.HEIGHT,
        x + self.WIDTH, y + self.HEIGHT,
        outline = color, fill = color)
    self.canvas.tag_bind(self.id, "<ButtonPress-1>", self._toggle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49759993_49760543_7_14
49759993_49763857_37_53
Title: How to code an animation to run mutliple times in parallel in tkinter? 
----------------------------------------

def __init__(self, canvas, id_item, duration, _from = 0, _to = 1) :
INDENT
    self.canvas = canvas
    self.id_item = id_item
    self._progress = 0
    self._from = _from
    self._to = _to
    self.t = max(10, int(duration / (self._to - self._from)))
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)
    self.canvas = tk.Canvas(width = 400, height = 400)
    self.canvas.pack()

    self._tokens = []
    self._tokens.append(Token(self.canvas, 100, 100, "green", 25, 0, 5))
    self._tokens.append(Token(self.canvas, 200, 100, "black", 25, 0, 5))
    tk.Button(self, text = 'Go', command = self._start_paused_tokens).pack(side = tk.LEFT)
    tk.Button(self, text = 'Pause', command = self._pause_tokens).pack(side = tk.LEFT)

    self.after(UPDATE_DELAY, self._update_tokens)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49759993_49760543_7_14
49759993_49763857_9_17
Title: How to code an animation to run mutliple times in parallel in tkinter? 
----------------------------------------

def __init__(self, canvas, id_item, duration, _from = 0, _to = 1) :
INDENT
    self.canvas = canvas
    self.id_item = id_item
    self._progress = 0
    self._from = _from
    self._to = _to
    self.t = max(10, int(duration / (self._to - self._from)))
DEDENT
----------------------------------------

def __init__(self, canvas, x, y, color, max_value, dx, dy) :
INDENT
    self.canvas, self.x, self.y = canvas, x, y
    self.color, self.max_value, self.dx, self.dy = color, max_value, dx, dy
    self.value, self.moving, self.saved_direction = 0, 0, 1
    self.id = self.canvas.create_rectangle(x - self.WIDTH, y - self.HEIGHT,
        x + self.WIDTH, y + self.HEIGHT,
        outline = color, fill = color)
    self.canvas.tag_bind(self.id, "<ButtonPress-1>", self._toggle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49759993_49763857_37_53
49759993_49763857_9_17
Title: How to code an animation to run mutliple times in parallel in tkinter? 
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)
    self.canvas = tk.Canvas(width = 400, height = 400)
    self.canvas.pack()

    self._tokens = []
    self._tokens.append(Token(self.canvas, 100, 100, "green", 25, 0, 5))
    self._tokens.append(Token(self.canvas, 200, 100, "black", 25, 0, 5))
    tk.Button(self, text = 'Go', command = self._start_paused_tokens).pack(side = tk.LEFT)
    tk.Button(self, text = 'Pause', command = self._pause_tokens).pack(side = tk.LEFT)

    self.after(UPDATE_DELAY, self._update_tokens)
DEDENT
----------------------------------------

def __init__(self, canvas, x, y, color, max_value, dx, dy) :
INDENT
    self.canvas, self.x, self.y = canvas, x, y
    self.color, self.max_value, self.dx, self.dy = color, max_value, dx, dy
    self.value, self.moving, self.saved_direction = 0, 0, 1
    self.id = self.canvas.create_rectangle(x - self.WIDTH, y - self.HEIGHT,
        x + self.WIDTH, y + self.HEIGHT,
        outline = color, fill = color)
    self.canvas.tag_bind(self.id, "<ButtonPress-1>", self._toggle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49760172_49760218_1_6
49760172_49760279_1_7
Title: How can I find certain words and print the line in python? 
----------------------------------------

def find(text) :
INDENT
    with open('catastrofa.txt') as fisier :
    INDENT
        for line in fisier :
        INDENT
            if (text in line) :
            INDENT
                print (line)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def find(text) :
INDENT
    fisier = open('catastrofa.txt')
    for line in fisier.readlines() :
    INDENT
        if (text in line.strip()) :
        INDENT
            print (line)
        DEDENT
    DEDENT
    fisier.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49760172_49760279_1_7
49760172_49760321_1_6
Title: How can I find certain words and print the line in python? 
----------------------------------------

def find(text) :
INDENT
    fisier = open('catastrofa.txt')
    for line in fisier.readlines() :
    INDENT
        if (text in line.strip()) :
        INDENT
            print (line)
        DEDENT
    DEDENT
    fisier.close()
DEDENT
----------------------------------------

def find(text) :
INDENT
    fisier = open('catastrofa.txt', 'r')
    for line in fisier :
    INDENT
        if (text in line) :
        INDENT
            print (line)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52920390_52920502_3_11
52920390_52920835_3_13
Title: defining a function that gives me the distance between 2 dates 
----------------------------------------

def dist2dates(date1, date2) :
INDENT
    if re.match(r'^\d{2}\/\d{2}$', date1) and re.match(r'^\d{2}\/\d{2}$', date2) :
    INDENT
        diff1 = abs(((int(date2 [0 : 2]) - int(date1 [0 : 2]))))
        diff2 = abs((int(date2 [3 :]) - int(date1 [3 :])))
        result = ("%02d/%02d") % (diff1, diff2)
        return result
    DEDENT
    else :
    INDENT
        return "Incorrect format"
    DEDENT
DEDENT
----------------------------------------

def dist2dates(strdate1, strdate2) :
INDENT
    dtfmt = '%m/%d'
    date1 = datetime.strptime(strdate1, dtfmt)
    date2 = datetime.strptime(strdate2, dtfmt)
    delta = date2 - date1
    year = date1.year
    month, day = divmod(delta.days, 30)
    result = datetime.strftime(datetime(year, round(month), round(day)), '%m/%d')
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52927296_52929225_145_179
52927296_52929225_5_56
Title: Pass user input from child to parent window python tkinter 
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Toplevel.__init__(self, master)
    self.frame = tk.Frame(self)
    self.title('User Defined Bolt Info')
    self.geometry('350x250')
    self.focus_set()
    rows = 0
    while rows < 10 :
    INDENT
        self.rowconfigure(rows, weight = 1)
        self.columnconfigure(rows, weight = 1)
        rows += 1
    DEDENT
    self.boltName = tk.Label(self, text = "Bolt Name (e.g. NewBolt1):")
    self.boltName.grid(column = 5, row = 1, sticky = 'NSEW')
    self.boltDia = tk.Label(self, text = "Bolt Major Diameter [in]:")
    self.boltDia.grid(column = 5, row = 3, sticky = 'NSEW')
    self.boltTPI = tk.Label(self, text = "Bolt Threads per Inch (TPI) [-]:")
    self.boltTPI.grid(column = 5, row = 5, sticky = 'NSEW')
    self.bName = tk.StringVar()
    self.bDia = tk.StringVar()
    self.bTPI = tk.StringVar()
    self.nameInput = tk.Entry(self, textvariable = self.bName)
    self.nameInput.insert(0, 'BoltName')
    self.nameInput.grid(column = 5, row = 2, sticky = 'NSEW')
    self.diaInput = tk.Entry(self, textvariable = self.bDia)
    self.diaInput.insert(0, '0.0000')
    self.diaInput.grid(column = 5, row = 4, sticky = 'NSEW')
    self.tpiInput = tk.Entry(self, textvariable = self.bTPI)
    self.tpiInput.insert(0, '0.0000')
    self.tpiInput.grid(column = 5, row = 6, sticky = 'NSEW')
    self.saveBoltBtn = tk.Button(self, text = 'Save Bolt', command = self.saveBolt)
    self.saveBoltBtn.bind('<Return>', self.saveBolt)
    self.saveBoltBtn.grid(column = 5, row = 8, sticky = 'NSEW')
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.title('Bolted Joint Analysis')
    self.geometry('500x500')
    self.nb = ttk.Notebook(self)
    self.nb.grid(row = 1, column = 0, columnspan = 50, rowspan = 49, sticky = 'NESW')
    self.tab1 = ttk.Frame(self.nb)
    self.nb.add(self.tab1, text = 'Tab1')
    self.tab2 = ttk.Frame(self.nb)
    self.nb.add(self.tab2, text = 'Tab2')
    self.data = {}
    rows = 0
    while rows < 50 :
    INDENT
        self.rowconfigure(rows, weight = 1)
        self.columnconfigure(rows, weight = 1)
        self.tab1.rowconfigure(rows, weight = 1)
        self.tab1.columnconfigure(rows, weight = 1)
        self.tab2.rowconfigure(rows, weight = 1)
        self.tab2.columnconfigure(rows, weight = 1)
        rows += 1
    DEDENT
    self.boltLabel = tk.Label(self.tab1, text = "Select A Bolt:")
    self.boltLabel.grid(column = 0, row = 1, sticky = 'SW')
    self.labelMajD = tk.Label(self.tab1, text = "Bolt Major Dia. [in]:")
    self.labelMajD.grid(column = 0, row = 4, sticky = 'W')
    self.labelMinD = tk.Label(self.tab1, text = "Bolt Minor Dia. [in]:")
    self.labelMinD.grid(column = 0, row = 5, sticky = 'W')
    self.labelPitchD = tk.Label(self.tab1, text = "Bolt Pitch Dia. [in]:")
    self.labelPitchD.grid(column = 0, row = 6, sticky = 'W')
    self.boltValue = tk.StringVar()
    self.BoltList = ttk.Combobox(self.tab1, textvariable = self.boltValue, state = 'readonly')
    self.BoltList ['values'] = ('', '#2-56 (UNC)', '1-1/2"-12 (UNF)', 'User Defined')
    self.BoltList.grid(column = 0, row = 2, sticky = 'NS')
    self.BoltList.current(0)
    self.BoltList.bind("<<ComboboxSelected>>", self.boltSelectFunc)
    self.majDiaBox = tk.Entry(self.tab1)
    self.majDiaBox.insert(0, '0.0000')
    self.majDiaBox.configure(state = 'disabled')
    self.majDiaBox.grid(column = 1, row = 4, sticky = 'NS')
    self.minDiaBox = tk.Entry(self.tab1)
    self.minDiaBox.insert(0, '0.0000')
    self.minDiaBox.configure(state = 'disabled')
    self.minDiaBox.grid(column = 1, row = 5, sticky = 'NS')
    self.pitchDiaBox = tk.Entry(self.tab1)
    self.pitchDiaBox.insert(0, '0.0000')
    self.pitchDiaBox.configure(state = 'disabled')
    self.pitchDiaBox.grid(column = 1, row = 6, sticky = 'NS')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52941153_52941306_8_14
52941153_52962989_11_17
Title: python multithreading with queue running in sequence not in parallel 
----------------------------------------

def do_stuff(q) :
INDENT
    while True :
    INDENT
        output = q.get()
        final_result = f(output)
        q.task_done()

    DEDENT
DEDENT
----------------------------------------

def do_stuff(q) :
INDENT
    while True :
    INDENT
        output = q.get()
        output()
        q.task_done()

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52954365_52955413_1_16
52954365_52955908_1_11
Title: Intelligently fetch text between two characters 
----------------------------------------

def get_encapsulated_text(s) :
INDENT
    count = 0
    t = ""
    for c in s :
    INDENT
        if count ! = 0 :
        INDENT
            t += c
        DEDENT
        if c is '(' :
        INDENT
            count += 1
        DEDENT
        elif c is ')' :
        INDENT
            count -= 1;
            if count == 0 :
            INDENT
                output = t [: - 1]
                t = ""
                if (output ! = "") :
                INDENT
                    print (output)
                    get_encapsulated_text(output)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def get_encapsulated_text(text) :
INDENT
    stack = []
    for c in text :
    INDENT
        if c == ')' :
        INDENT
            inner = stack.pop()
            if inner :
            INDENT
                yield ''.join(inner)
            DEDENT
        DEDENT
        for s in stack :
        INDENT
            s.append(c)
        DEDENT
        if c == '(' :
        INDENT
            stack.append([])
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52974303_52974471_7_12
52974303_52974479_7_13
Title: How to correctly check through an array 
----------------------------------------

def print_code(code) :
INDENT
    i = 0
    while i < len(code) :
    INDENT
        print (code [i])
        i += 1
    DEDENT
DEDENT
----------------------------------------

def print_code(code) :
INDENT
    i = 0
    while i < len(code) :
    INDENT
        print (code [i])
        i += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53006464_53013592_41_62
53006464_53013592_6_19
Title: "Add buttons to a table using ""table View""" 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Example, self).__init__(parent)
    dirPath = "/home/cioc/Documents/GPR/GRP"
    self.setCentralWidget(QtGui.QWidget())
    layout = QtGui.QGridLayout(self.centralWidget())
    self.model = QtGui.QStandardItemModel(self)
    self.tableView = QtGui.QTableView()
    self.tableView.setModel(self.model)
    self.tableView.horizontalHeader().setStretchLastSection(True)
    self.tableView.clicked.connect(self.onClick)
    self.tableView.verticalHeader().hide()
    self.appendRowItems(dirPath)
    delegate = ButtonsDelegate(self.tableView)
    self.tableView.setItemDelegate(delegate)
    layout.addWidget(self.tableView)
    self.resize(800, 500)
DEDENT
----------------------------------------

def __init__(self, x, index, parent = None) :
INDENT
    super(ViewWidget, self).__init__(parent)
    self.p_index = QtCore.QPersistentModelIndex(index)
    self.content_button = QtGui.QWidget(self)
    lay = QtGui.QHBoxLayout(self.content_button)
    lay.setContentsMargins(0, 0, 0, 0)
    self.share_btn = QtGui.QPushButton("share")
    self.share_btn.clicked.connect(self.share_clicked)
    self.delete_btn = QtGui.QPushButton("delete")
    self.delete_btn.clicked.connect(self.delete_clicked)
    lay.addWidget(self.share_btn)
    lay.addWidget(self.delete_btn)
    self.content_button.move(x, 0)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53006988_53007060_5_13
53006988_53007432_11_20
Title: How to get multiple lines from a .txt file that have been split and to save them into different variables 
----------------------------------------

def WorkLoad() :
INDENT
    readWork = open("Todays_Work.txt", "r")
    for line in readWork.readlines() :
    INDENT
        WorkLine = line.split()
        Order_No.append(WorkLine [0])
        Deliver_Address.append(WorkLine [1])
        Bay_Collection.append(WorkLine [2])
        Stock.append(WorkLine [3])
        print (Order_No [- 1], Deliver_Address [- 1], Bay_Collection [- 1], Stock [- 1])
    DEDENT
DEDENT
----------------------------------------

def WorkLoad(result) :
INDENT
    readWork = open("Todays_Work.txt", "r")
    for line in readWork.readlines() :
    INDENT
        WorkLine = line.split()
        result ["Order_No"].append(WorkLine [0])
        result ["Deliver_Address"], append(WorkLine [1])
        result ["Bay_Collection"].append(WorkLine [2])
        result ["Stock"].append(WorkLine [3])
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53022651_53038088_40_55
53022651_53038088_80_98
Title: Breadcrumbs navigation using QToolBar and QListView 
----------------------------------------

def __init__(self, json_data, parent = None) :
INDENT
    super(Navigation, self).__init__(parent)
    self.toolbar = QtWidgets.QToolBar()
    self.toolbar.actionTriggered.connect(self.on_actionTriggered)
    self.model = QtGui.QStandardItemModel(self)
    dict_to_model(self.model.invisibleRootItem(), json_data)
    it = self.model.item(0, 0)
    ix = self.model.indexFromItem(it)
    root_action = self.toolbar.addAction(it.text())
    root_action.setData(QtCore.QPersistentModelIndex(ix))
    self.listview = QtWidgets.QListView()
    self.listview.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
    self.listview.clicked.connect(self.on_clicked)
    self.listview.setModel(self.model)
    self.listview.setRootIndex(ix)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    navigation = Navigation(data, self)
    navigation.clicked.connect(self.on_clicked)
    tree_view = QtWidgets.QTreeView()
    tree_view.setModel(navigation.model)
    navigation.model.setHorizontalHeaderLabels(["Tree Example"])
    tree_view.expandAll()
    self.addToolBar(navigation.toolbar)
    widget = QtWidgets.QWidget()
    self.setCentralWidget(widget)
    lay = QtWidgets.QHBoxLayout(widget)
    lay.addWidget(navigation.listview)
    lay.addWidget(tree_view)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53022670_53023162_1_24
53022670_53031926_1_30
Title: How to compare 2 sorted numeric lists in python where each corresponding element don't have to be exact match? 
----------------------------------------

def match_approximate(a, b, approx = 3) :
INDENT
    a_ind, b_ind = 0, 0
    result = []
    while a_ind < len(a) and b_ind < len(b) :
    INDENT
        if abs(a [a_ind] - b [b_ind]) < = approx :
        INDENT
            result.append(b [b_ind])
        DEDENT
        if a [a_ind] == b [b_ind] :
        INDENT
            b_ind += 1
            a_ind += 1
        DEDENT
        elif a [a_ind] < b [b_ind] : a_ind += 1
        else : b_ind += 1
    DEDENT
    def match_last_element(a, a_ind, last_elt_of_b, result) :
    INDENT
        while a_ind ! = len(a) :
        INDENT
            if abs(a [a_ind] - last_elt_of_b) < = approx :
            INDENT
                result.append(a [a_ind])
                a_ind += 1
            DEDENT
            else :
            INDENT
                break
            DEDENT
        DEDENT
    DEDENT
    if a_ind ! = len(a) : match_last_element(a, a_ind, b [- 1], result)
    else : match_last_element(b, b_ind, a [- 1], result)
    return result
DEDENT
----------------------------------------

def match_approximate(a, b, approx, invert = False) :
INDENT
    a_ind, b_ind = 0, 0
    resulta, resultb = [], []
    while a_ind < len(a) and b_ind < len(b) :
    INDENT
        aItem, bItem = a [a_ind], b [b_ind]
        if abs(aItem - bItem) < = approx :
        INDENT
            if not invert :
            INDENT
                resulta.append(aItem)
                resultb.append(bItem)
            DEDENT
            a_ind += 1
            b_ind += 1
            continue
        DEDENT
        if aItem < bItem :
        INDENT
            if invert :
            INDENT
                resulta.append(aItem)
            DEDENT
            a_ind += 1
        DEDENT
        else :
        INDENT
            if invert :
            INDENT
                resultb.append(bItem)
            DEDENT
            b_ind += 1
        DEDENT
    DEDENT
    if invert :
    INDENT
        while a_ind ! = len(a) :
        INDENT
            resulta.append(a [a_ind])
            a_ind += 1
        DEDENT
        while b_ind ! = len(b) :
        INDENT
            resulta.append(b [b_ind])
            b_ind += 1
        DEDENT
    DEDENT
    return [resulta, resultb]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53023382_53023774_1_12
53023382_53024784_3_18
Title: Print all the tokens in the file that are labelled with the morphological tag 
----------------------------------------

def index(filepath, string) :
INDENT
    StringList = [string]
    with open(filepath) as f :
    INDENT
        for lineno, line in enumerate(f, start = 1) :
        INDENT
            words = line.split(' ')
            matches = [word for keyword in StringList for word in words if keyword in word]
            if matches :
            INDENT
                result = "{:<15} {}".format(','.join(matches), lineno)
                print (result)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def index(fileName, lookFor) :
INDENT
    lookForSet = set(lookFor)
    pat1 = re.compile(r'\s+')
    pat2 = re.compile(r'\+')
    with open(fileName) as f :
    INDENT
        for lineNo, line in enumerate(f, start = 1) :
        INDENT
            line = line.rstrip()
            tokens = pat1.split(line)
            for token in tokens :
            INDENT
                words = pat2.split(token)
                word1 = words.pop(0)
                wordSet = set(words)
                commonWords = lookForSet.intersection(wordSet)
                if commonWords :
                INDENT
                    print ("{:3}: {:<15} {}".format(lineNo, word1, ', '.join(commonWords)))
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53023396_53025856_16_40
53023396_53025856_55_75
Title: How not to render ball orientation in pymunk.Space.debug_draw()? 
----------------------------------------

def __init__(self, pos, space, radius, mass = 1) :
INDENT
    super().__init__()
    self.orig_image = pg.Surface((radius * 2 + 2, radius * 2 + 2), pg.SRCALPHA)
    self.image = self.orig_image
    pg.draw.circle(
        self.image,
        pg.Color(random.randrange(256),
            random.randrange(256),
            random.randrange(256)),
        (radius + 1, radius + 1),
        radius)
    self.rect = self.image.get_rect(topleft = pos)

    moment = pm.moment_for_circle(mass, radius, radius)
    self.body = pm.Body(mass, moment)
    self.shape = pm.Circle(self.body, radius)
    self.shape.friction =.1
    self.shape.elasticity =.99
    self.body.position = pos
    self.space = space
    self.space.add(self.body, self.shape)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    pg.init()
    self.screen = pg.display.set_mode((1280, 800))
    self.done = False
    self.clock = pg.time.Clock()

    self.space = pm.Space()
    self.space.gravity = Vec2d(0.0, - 900.0)
    self.space.damping =.9
    self.static_lines = [
        pm.Segment(self.space.static_body, flipy((60.0, 780.0)), flipy((650.0, 780.0)),.0),
        pm.Segment(self.space.static_body, flipy((650.0, 780.0)), flipy((1218.0, 660.0)),.0)]
    for lin in self.static_lines :
    INDENT
        lin.friction = 0.2
        lin.elasticity = 0.99
    DEDENT
    self.space.add(self.static_lines)
    self.all_sprites = pg.sprite.Group()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53037054_53037266_43_50
53037054_53037266_6_17
Title: PyQt5 Automatic drawing from input value 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Button, self).__init__(parent)
    getbutton = QtWidgets.QPushButton('Getting values')
    Alay = QtWidgets.QVBoxLayout(self)
    Alay.addWidget(getbutton)
    self.value = QtWidgets.QLabel()
    getbutton.clicked.connect(self.getbuttonfunc)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Foo, self).__init__(parent)
    self.setGeometry(QtCore.QRect(200, 100, 800, 800))
    self.button = Button()
    self.paint = Paint()
    self.button.valueChanged.connect(self.paint.set_size_square)
    self.lay = QtWidgets.QVBoxLayout(self)
    self.lay.addWidget(self.paint)
    self.lay.addWidget(self.button)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53039324_53041224_1_13
53039324_53041529_11_17
Title: Printing scrapy data to csv 
----------------------------------------

def parse(self, response) :
INDENT
    hxs = Selector(response)
    links = hxs.xpath("//p")
    items = []
    for linkk in links :
    INDENT
        item = ErcessassignmentItem()
        item ["link"] = linkk.xpath("//a/@href").extract()
        items.append(item)
    DEDENT
    else :
    INDENT
        for link in items :
        INDENT
            print link
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    hxs = Selector(response)
    links = hxs.xpath("//p")
    for linkk in links :
    INDENT
        item = ErcessassignmentItem()
        item ["link"] = linkk.xpath("//a/@href").extract()
        yield item
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53052766_53069867_18_28
53052766_53069867_57_69
Title: PyQt5 draggable icons from a listview to another 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(RListView, self).__init__(parent)
    self.m_model = QtGui.QStandardItemModel(self)
    self.setModel(self.m_model)
    self.setAcceptDrops(True)
    self.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
    self.setIconSize(QtCore.QSize(50, 50))
    self.setResizeMode(QtWidgets.QListView.Adjust)
    self.setDragDropMode(QtWidgets.QAbstractItemView.DropOnly)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    central_widget = QtWidgets.QWidget()
    self.l_view = LListView()
    self.r_view = RListView()
    self.setCentralWidget(central_widget)
    lay = QtWidgets.QHBoxLayout(central_widget)
    lay.addWidget(self.l_view)
    lay.addWidget(self.r_view)
    self.loadImages()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53052766_53069867_57_69
53052766_53069867_5_16
Title: PyQt5 draggable icons from a listview to another 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    central_widget = QtWidgets.QWidget()
    self.l_view = LListView()
    self.r_view = RListView()
    self.setCentralWidget(central_widget)
    lay = QtWidgets.QHBoxLayout(central_widget)
    lay.addWidget(self.l_view)
    lay.addWidget(self.r_view)
    self.loadImages()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LListView, self).__init__(parent)
    self.m_model = QtGui.QStandardItemModel(self)
    self.setModel(self.m_model)
    self.setAcceptDrops(False)
    self.setViewMode(QtWidgets.QListView.IconMode)
    self.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
    self.setIconSize(QtCore.QSize(50, 50))
    self.setResizeMode(QtWidgets.QListView.Adjust)
    self.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53062028_53062606_14_19
53062028_53065018_23_28
Title: Empty Lists In new class 
----------------------------------------

def calc(self) :
INDENT
    for row in self.arg1 :
    INDENT
        self.arg4.append(self.arg2 + self.arg3)
        print (self.arg1)
    DEDENT
    return self.arg4
DEDENT
----------------------------------------

def calc(self) :
INDENT
    for row in self.arg1 :
    INDENT
        self.arg4.append(self.arg2 + self.arg3)
        print (self.arg1)
    DEDENT
    return self.arg4
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53074376_53074916_1_22
53074376_53075269_1_19
Title: Implementing QuickSort in python with last element as pivot 
----------------------------------------

def quicksort(array) :
INDENT
    if len(array) > 1 :
    INDENT
        print "enter array", array
        pivot = len(array) - 1
        print "pivot", array [pivot]
        x = 0
        while x < pivot :
        INDENT
            if array [x] > array [pivot] :
            INDENT
                piv = array [pivot]
                xval = array [x]
                array [x] = array [pivot - 1]
                array [pivot] = xval
                array [pivot - 1] = piv
                pivot -= 1
            DEDENT
            else :
            INDENT
                x += 1
            DEDENT
        DEDENT
        print "pre recur split array", array
        print "left", array [: pivot]
        print "right", array [pivot + 1 :]
        array = quicksort(array [: pivot]) + [array [pivot]] + quicksort(array [pivot + 1 :])
        print "post recur split array", array
    DEDENT
    return array
DEDENT
----------------------------------------

def quicksort(array, low = 0, high = None) :
INDENT
    if high == None :
    INDENT
        high = len(array) - 1
    DEDENT
    if high - low > 0 :
    INDENT
        pivot = high
        x = low
        while x < pivot :
        INDENT
            if array [x] > array [pivot] :
            INDENT
                piv = array [pivot]
                xval = array [x]
                array [x] = array [pivot - 1]
                array [pivot] = xval
                array [pivot - 1] = piv
                pivot -= 1
            DEDENT
            else :
            INDENT
                x += 1
            DEDENT
        DEDENT
        quicksort(array, low, pivot - 1)
        quicksort(array, pivot + 1, high)
    DEDENT
    return array
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53081079_53081893_33_41
53081079_53081893_8_19
Title: Pygame background mask collision not working 
----------------------------------------

def __init__(self) :
INDENT
    pygame.init()
    pygame.display.set_caption("Car tutorial")
    self.screen = pygame.display.set_mode((1280, 720))
    self.clock = pygame.time.Clock()
    self.ticks = 60
    self.exit = False
DEDENT
----------------------------------------

def __init__(self, x, y, car_image, angle = 0.0) :
INDENT
    self.orig_image = car_image
    self.image = car_image
    self.rect = self.image.get_rect(center = (x, y))
    self.position = Vector2(x, y)
    self.velocity = Vector2(0.0, 0.0)
    self.angle = angle
    self.acceleration = 0.0
    self.steering = 0.0
    self.mask = pygame.mask.from_surface(self.image, 50)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_24_42
53089711_53099228_5_19
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog Request Frame", size = (500, 500))
    self.parent = parent
    self.parent.btn.Enable(False)

    self.stored_results = {}
    self.dlg_chain_no = 0
    self.dlg_prev_value = 0
    panel = wx.Panel(self)
    self.btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = self.btn.GetId())
    self.Bind(wx.EVT_CLOSE, self.OnClose)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Reference Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    self.btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = self.btn.GetId())
    sizer.Add(self.btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_24_42
53089711_53099228_74_97
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog Request Frame", size = (500, 500))
    self.parent = parent
    self.parent.btn.Enable(False)

    self.stored_results = {}
    self.dlg_chain_no = 0
    self.dlg_prev_value = 0
    panel = wx.Panel(self)
    self.btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = self.btn.GetId())
    self.Bind(wx.EVT_CLOSE, self.OnClose)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent, chain_no) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog " + str(chain_no))
    self.chain_no = self.saved_chain_no = chain_no
    self.result = None
    self.parent = parent
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if parent.dlg_prev_value ! = 0 :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % parent.dlg_prev_value))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Different Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Step " + str(self.chain_no))
    btn2 = wx.Button(panel, - 1, "Previous")
    btn3 = wx.Button(panel, - 1, "Cancel")
    self.Bind(wx.EVT_BUTTON, self.OnStep, id = btn1.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnPrev, id = btn2.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnCancel, id = btn3.GetId())
    sizer.Add(btn1)
    sizer.Add(btn2)
    sizer.Add(btn3)
    panel.SetSizer(sizer)
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_24_42
53089711_53176484_23_32
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog Request Frame", size = (500, 500))
    self.parent = parent
    self.parent.btn.Enable(False)

    self.stored_results = {}
    self.dlg_chain_no = 0
    self.dlg_prev_value = 0
    panel = wx.Panel(self)
    self.btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = self.btn.GetId())
    self.Bind(wx.EVT_CLOSE, self.OnClose)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, - 1, title = "Parent Frame", size = (500, 500))
    self.passActivate = None
    panel = wx.Panel(self)
    btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = btn.GetId())
    self.Centre()
    self.Show()
    self.Bind(wx.EVT_ACTIVATE, self.OnActivate)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_24_42
53089711_53176484_48_69
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog Request Frame", size = (500, 500))
    self.parent = parent
    self.parent.btn.Enable(False)

    self.stored_results = {}
    self.dlg_chain_no = 0
    self.dlg_prev_value = 0
    panel = wx.Panel(self)
    self.btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = self.btn.GetId())
    self.Bind(wx.EVT_CLOSE, self.OnClose)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent, prevAnsw = None, lastDialog = False, func2call = None) :
INDENT
    wx.Dialog.__init__(self, parent, - 1, title = "Dialog", style = wx.CAPTION)
    self.parent = parent
    self.parent.passActivate = self
    self.lastDialog = lastDialog
    self.func2call = func2call
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if prevAnsw is not None :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % prevAnsw))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Non-related Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Pass 1")
    self.Bind(wx.EVT_BUTTON, self.OnPass1, id = btn1.GetId())
    sizer.Add(btn1)
    btn2 = wx.Button(panel, - 1, "Pass 2")
    self.Bind(wx.EVT_BUTTON, self.OnPass2, id = btn2.GetId())
    sizer.Add(btn2)
    panel.SetSizer(sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_24_42
53089711_53176484_4_18
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog Request Frame", size = (500, 500))
    self.parent = parent
    self.parent.btn.Enable(False)

    self.stored_results = {}
    self.dlg_chain_no = 0
    self.dlg_prev_value = 0
    panel = wx.Panel(self)
    self.btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = self.btn.GetId())
    self.Bind(wx.EVT_CLOSE, self.OnClose)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Non-related Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = btn.GetId())
    sizer.Add(btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_5_19
53089711_53099228_74_97
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Reference Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    self.btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = self.btn.GetId())
    sizer.Add(self.btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent, chain_no) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog " + str(chain_no))
    self.chain_no = self.saved_chain_no = chain_no
    self.result = None
    self.parent = parent
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if parent.dlg_prev_value ! = 0 :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % parent.dlg_prev_value))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Different Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Step " + str(self.chain_no))
    btn2 = wx.Button(panel, - 1, "Previous")
    btn3 = wx.Button(panel, - 1, "Cancel")
    self.Bind(wx.EVT_BUTTON, self.OnStep, id = btn1.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnPrev, id = btn2.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnCancel, id = btn3.GetId())
    sizer.Add(btn1)
    sizer.Add(btn2)
    sizer.Add(btn3)
    panel.SetSizer(sizer)
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_5_19
53089711_53176484_23_32
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Reference Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    self.btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = self.btn.GetId())
    sizer.Add(self.btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, - 1, title = "Parent Frame", size = (500, 500))
    self.passActivate = None
    panel = wx.Panel(self)
    btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = btn.GetId())
    self.Centre()
    self.Show()
    self.Bind(wx.EVT_ACTIVATE, self.OnActivate)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_5_19
53089711_53176484_48_69
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Reference Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    self.btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = self.btn.GetId())
    sizer.Add(self.btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent, prevAnsw = None, lastDialog = False, func2call = None) :
INDENT
    wx.Dialog.__init__(self, parent, - 1, title = "Dialog", style = wx.CAPTION)
    self.parent = parent
    self.parent.passActivate = self
    self.lastDialog = lastDialog
    self.func2call = func2call
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if prevAnsw is not None :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % prevAnsw))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Non-related Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Pass 1")
    self.Bind(wx.EVT_BUTTON, self.OnPass1, id = btn1.GetId())
    sizer.Add(btn1)
    btn2 = wx.Button(panel, - 1, "Pass 2")
    self.Bind(wx.EVT_BUTTON, self.OnPass2, id = btn2.GetId())
    sizer.Add(btn2)
    panel.SetSizer(sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_74_97
53089711_53176484_23_32
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent, chain_no) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog " + str(chain_no))
    self.chain_no = self.saved_chain_no = chain_no
    self.result = None
    self.parent = parent
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if parent.dlg_prev_value ! = 0 :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % parent.dlg_prev_value))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Different Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Step " + str(self.chain_no))
    btn2 = wx.Button(panel, - 1, "Previous")
    btn3 = wx.Button(panel, - 1, "Cancel")
    self.Bind(wx.EVT_BUTTON, self.OnStep, id = btn1.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnPrev, id = btn2.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnCancel, id = btn3.GetId())
    sizer.Add(btn1)
    sizer.Add(btn2)
    sizer.Add(btn3)
    panel.SetSizer(sizer)
    self.Show()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, - 1, title = "Parent Frame", size = (500, 500))
    self.passActivate = None
    panel = wx.Panel(self)
    btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = btn.GetId())
    self.Centre()
    self.Show()
    self.Bind(wx.EVT_ACTIVATE, self.OnActivate)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_74_97
53089711_53176484_48_69
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent, chain_no) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog " + str(chain_no))
    self.chain_no = self.saved_chain_no = chain_no
    self.result = None
    self.parent = parent
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if parent.dlg_prev_value ! = 0 :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % parent.dlg_prev_value))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Different Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Step " + str(self.chain_no))
    btn2 = wx.Button(panel, - 1, "Previous")
    btn3 = wx.Button(panel, - 1, "Cancel")
    self.Bind(wx.EVT_BUTTON, self.OnStep, id = btn1.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnPrev, id = btn2.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnCancel, id = btn3.GetId())
    sizer.Add(btn1)
    sizer.Add(btn2)
    sizer.Add(btn3)
    panel.SetSizer(sizer)
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent, prevAnsw = None, lastDialog = False, func2call = None) :
INDENT
    wx.Dialog.__init__(self, parent, - 1, title = "Dialog", style = wx.CAPTION)
    self.parent = parent
    self.parent.passActivate = self
    self.lastDialog = lastDialog
    self.func2call = func2call
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if prevAnsw is not None :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % prevAnsw))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Non-related Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Pass 1")
    self.Bind(wx.EVT_BUTTON, self.OnPass1, id = btn1.GetId())
    sizer.Add(btn1)
    btn2 = wx.Button(panel, - 1, "Pass 2")
    self.Bind(wx.EVT_BUTTON, self.OnPass2, id = btn2.GetId())
    sizer.Add(btn2)
    panel.SetSizer(sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53099228_74_97
53089711_53176484_4_18
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent, chain_no) :
INDENT
    wx.Frame.__init__(self, parent, - 1, title = "Dialog " + str(chain_no))
    self.chain_no = self.saved_chain_no = chain_no
    self.result = None
    self.parent = parent
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if parent.dlg_prev_value ! = 0 :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % parent.dlg_prev_value))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Different Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Step " + str(self.chain_no))
    btn2 = wx.Button(panel, - 1, "Previous")
    btn3 = wx.Button(panel, - 1, "Cancel")
    self.Bind(wx.EVT_BUTTON, self.OnStep, id = btn1.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnPrev, id = btn2.GetId())
    self.Bind(wx.EVT_BUTTON, self.OnCancel, id = btn3.GetId())
    sizer.Add(btn1)
    sizer.Add(btn2)
    sizer.Add(btn3)
    panel.SetSizer(sizer)
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Non-related Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = btn.GetId())
    sizer.Add(btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53176484_23_32
53089711_53176484_48_69
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, - 1, title = "Parent Frame", size = (500, 500))
    self.passActivate = None
    panel = wx.Panel(self)
    btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = btn.GetId())
    self.Centre()
    self.Show()
    self.Bind(wx.EVT_ACTIVATE, self.OnActivate)
DEDENT
----------------------------------------

def __init__(self, parent, prevAnsw = None, lastDialog = False, func2call = None) :
INDENT
    wx.Dialog.__init__(self, parent, - 1, title = "Dialog", style = wx.CAPTION)
    self.parent = parent
    self.parent.passActivate = self
    self.lastDialog = lastDialog
    self.func2call = func2call
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if prevAnsw is not None :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % prevAnsw))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Non-related Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Pass 1")
    self.Bind(wx.EVT_BUTTON, self.OnPass1, id = btn1.GetId())
    sizer.Add(btn1)
    btn2 = wx.Button(panel, - 1, "Pass 2")
    self.Bind(wx.EVT_BUTTON, self.OnPass2, id = btn2.GetId())
    sizer.Add(btn2)
    panel.SetSizer(sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53176484_23_32
53089711_53176484_4_18
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, - 1, title = "Parent Frame", size = (500, 500))
    self.passActivate = None
    panel = wx.Panel(self)
    btn = wx.Button(panel, - 1, "open dialog")
    self.Bind(wx.EVT_BUTTON, self.OnOpenDialog, id = btn.GetId())
    self.Centre()
    self.Show()
    self.Bind(wx.EVT_ACTIVATE, self.OnActivate)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Non-related Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = btn.GetId())
    sizer.Add(btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53089711_53176484_48_69
53089711_53176484_4_18
Title: wxpython: how to access a window when a dialog is open 
----------------------------------------

def __init__(self, parent, prevAnsw = None, lastDialog = False, func2call = None) :
INDENT
    wx.Dialog.__init__(self, parent, - 1, title = "Dialog", style = wx.CAPTION)
    self.parent = parent
    self.parent.passActivate = self
    self.lastDialog = lastDialog
    self.func2call = func2call
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    if prevAnsw is not None :
    INDENT
        sizer.Add(wx.StaticText(
                panel, - 1, "Answer from previous Dialog: %s" % prevAnsw))
    DEDENT
    sizer.Add(wx.StaticText(panel, - 1, "Try to scroll in Non-related Frame to "
            "see if it is blocked"))
    btn1 = wx.Button(panel, - 1, "Pass 1")
    self.Bind(wx.EVT_BUTTON, self.OnPass1, id = btn1.GetId())
    sizer.Add(btn1)
    btn2 = wx.Button(panel, - 1, "Pass 2")
    self.Bind(wx.EVT_BUTTON, self.OnPass2, id = btn2.GetId())
    sizer.Add(btn2)
    panel.SetSizer(sizer)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Non-related Frame", size = (300, 300))
    panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    btn = wx.Button(panel, - 1, "open frame")
    self.Bind(wx.EVT_BUTTON, self.OnOpenFrame, id = btn.GetId())
    sizer.Add(btn)
    text = "This is a line.\n" * 100
    txtCtrl = wx.TextCtrl(panel, - 1, text, style = wx.TE_MULTILINE,
        size = (200, 200))
    sizer.Add(txtCtrl)
    panel.SetSizer(sizer)
    self.Centre()
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53091119_53091288_1_9
53091119_53091443_1_12
Title: What is wrong with my code? It's for a locker puzzle 
----------------------------------------

def locker_puzzle(num_lockers) :
INDENT
    lockers = [False] * num_lockers
    for stud in range(1, num_lockers + 1) :
    INDENT
        for lock in range(stud, num_lockers + 1, stud) :
        INDENT
            lockers [lock - 1] = not lockers [lock - 1]
        DEDENT
    DEDENT
    return lockers
DEDENT
----------------------------------------

def locker_puzzle(x) :
INDENT
    lockers = [False] * x
    for i in range(1, x + 1) :
    INDENT
        for j in range(i, x + 1, i) :
        INDENT
            try :
            INDENT
                lockers [j - 1] = not lockers [j - 1]
            DEDENT
            except IndexError as e :
            INDENT
                print (i, j)
                raise e
            DEDENT
        DEDENT
    DEDENT
    for i, locker in enumerate(lockers) :
    INDENT
        if locker :
        INDENT
            print (i + 1)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53104791_53124636_10_33
53104791_53124636_56_82
Title: Enable a button in the parent wx.Frame 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = wx.Size(500, 300), style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    bSizer1 = wx.BoxSizer(wx.VERTICAL)
    self.m_buttonlogin = wx.Button(self, wx.ID_ANY, u"Login", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer1.Add(self.m_buttonlogin, 0, wx.ALL, 5)
    self.m_buttondisabled = wx.Button(self, wx.ID_ANY, u"Dsiabled", wx.DefaultPosition, wx.DefaultSize, 0)
    self.m_buttondisabled.Enable(False)
    bSizer1.Add(self.m_buttondisabled, 0, wx.ALL, 5)

    self.SetSizer(bSizer1)
    self.Layout()
    self.Centre(wx.BOTH)

    self.m_buttonlogin.Bind(wx.EVT_BUTTON, self.OnLogin)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Dialog.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition,
        size = wx.Size(500, 300), style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.ok = False
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    bSizer2 = wx.BoxSizer(wx.VERTICAL)
    self.m_textCtrlusername = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.m_textCtrlusername, 0, wx.ALL, 5)
    self.m_textCtrlpassword = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.m_textCtrlpassword, 0, wx.ALL, 5)
    self.m_buttonOK = wx.Button(self, wx.ID_ANY, u"OK", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.m_buttonOK, 0, wx.ALL, 5)

    self.SetSizer(bSizer2)
    self.Layout()
    self.Centre(wx.BOTH)

    self.m_buttonOK.Bind(wx.EVT_BUTTON, self.OnOK)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53104791_53124636_56_82
53104791_53130211_10_33
Title: Enable a button in the parent wx.Frame 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Dialog.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition,
        size = wx.Size(500, 300), style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.ok = False
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    bSizer2 = wx.BoxSizer(wx.VERTICAL)
    self.m_textCtrlusername = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.m_textCtrlusername, 0, wx.ALL, 5)
    self.m_textCtrlpassword = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.m_textCtrlpassword, 0, wx.ALL, 5)
    self.m_buttonOK = wx.Button(self, wx.ID_ANY, u"OK", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer2.Add(self.m_buttonOK, 0, wx.ALL, 5)

    self.SetSizer(bSizer2)
    self.Layout()
    self.Centre(wx.BOTH)

    self.m_buttonOK.Bind(wx.EVT_BUTTON, self.OnOK)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = wx.Size(500, 300), style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.SetSizeHints(wx.DefaultSize, wx.DefaultSize)
    bSizer1 = wx.BoxSizer(wx.VERTICAL)
    self.m_buttonlogin = wx.Button(self, wx.ID_ANY, u"Login", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer1.Add(self.m_buttonlogin, 0, wx.ALL, 5)
    self.m_buttondisabled = wx.Button(self, wx.ID_ANY, u"Disabled", wx.DefaultPosition, wx.DefaultSize, 0)
    self.m_buttondisabled.Enable(False)
    bSizer1.Add(self.m_buttondisabled, 0, wx.ALL, 5)

    self.SetSizer(bSizer1)
    self.Layout()
    self.Centre(wx.BOTH)

    self.m_buttonlogin.Bind(wx.EVT_BUTTON, self.OnLogin)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53108731_53115793_17_29
53108731_53115793_66_74
Title: How to find perfect collision of a moving object into an obstacle 
----------------------------------------

def __init__(self, pos, key_left, key_right, key_up, key_down) :
INDENT
    super().__init__()
    self.image = CIRCLE_BLUE
    self.mask = pg.mask.from_surface(self.image)
    self.rect = self.image.get_rect(topleft = pos)
    self.vel = Vector2(0, 0)
    self.pos = Vector2(self.rect.topleft)
    self.dt = 0.03
    self.key_left = key_left
    self.key_right = key_right
    self.key_up = key_up
    self.key_down = key_down
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    self.done = False
    self.clock = pg.time.Clock()
    self.screen = screen
    self.player = Player((100, 50), pg.K_a, pg.K_d, pg.K_w, pg.K_s)
    obstacle = Obstacle((300, 240))
    self.all_sprites = pg.sprite.Group(self.player, obstacle)
    self.obstacles = pg.sprite.Group(obstacle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53118342_53120137_53_63
53118342_53120137_6_25
Title: A surface shown unexpectedly with pygame 
----------------------------------------

def __init__(self) :
INDENT
    pygame.init()
    self.image = pygame.Surface((11, 11))
    self.image.fill((0, 128, 255))
    pygame.display.set_caption(self.title)
    self.screen = pygame.display.set_mode((self.width, self.height))
    self.clock = pygame.time.Clock()
    self.snakes = pygame.sprite.Group()
    self.player1 = Snake(500, 10, self.image, self.screen)
    self.snakes.add(self.player1)
DEDENT
----------------------------------------

def __init__(self, init_x, init_y, image, screen) :
INDENT
    pygame.sprite.Sprite.__init__(self)

    self.speed = 5
    self.init_length = 10
    self.direction = 0
    self.updateCountMax = 2
    self.updateCount = 0
    self.length = 10
    self.rects = []
    for i in range(self.init_length) :
    INDENT

        self.rects.append(pygame.Rect(init_x, init_y, 11, 11))
    DEDENT
    self.image = image
    self.screen = screen
    self.rect = self.rects [0]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53119841_53120407_30_40
53119841_53120407_47_71
Title: How to pass a variable from __init__ of one class to another at the click of a button in a tkinter program with multiple frames? 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "Enter 4 digit pin", font = controller.title_font, fg = "red")
    label.pack(side = "top", fill = "x", pady = 10)
    self.pin = tk.Entry(self, bd = 4, relief = "groove", show = "*", font = 20, justify = 'center')
    self.pin.pack()
    submit = tk.Button(self, text = "Submit", width = 12, font = tkfont.Font(size = 12), command = lambda : [controller.show_frame("Options"), self.store_pin()], cursor = "hand2")
    submit.pack()
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    f1 = tk.Frame(self)
    f1.pack()
    f2 = tk.Frame(self)
    f2.pack(side = "bottom")
    button1 = tk.Button(f1, text = "Balance Inquiry", relief = "flat", padx = 30, justify = 'left', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageOne"))
    button1.pack(side = "left")
    button2 = tk.Button(f1, text = "Deposit", relief = "flat", padx = 50, justify = 'right', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageTwo"))
    button2.pack(side = "left")
    button3 = tk.Button(f2, text = "Withdraw", relief = "flat", padx = 50, justify = 'left', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageThree"))
    button3.pack(side = "left")
    button4 = tk.Button(f2, text = "Pin Change", relief = "flat", padx = 50, justify = 'right', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageFour"))
    button4.pack(side = "left")
    tk.Button(self, text = "print stored pin", command = self.print_pin).pack()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53119841_53120407_30_40
53119841_53120407_6_23
Title: How to pass a variable from __init__ of one class to another at the click of a button in a tkinter program with multiple frames? 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "Enter 4 digit pin", font = controller.title_font, fg = "red")
    label.pack(side = "top", fill = "x", pady = 10)
    self.pin = tk.Entry(self, bd = 4, relief = "groove", show = "*", font = 20, justify = 'center')
    self.pin.pack()
    submit = tk.Button(self, text = "Submit", width = 12, font = tkfont.Font(size = 12), command = lambda : [controller.show_frame("Options"), self.store_pin()], cursor = "hand2")
    submit.pack()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.pin_stored = ""
    self.title_font = tkfont.Font(family = 'Courier New', size = 18, weight = "bold")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, Options) :
    INDENT
        page_name = F.__name__
        frame = F(parent = container, controller = self)
        self.frames [page_name] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame("StartPage")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53119841_53120407_47_71
53119841_53120407_6_23
Title: How to pass a variable from __init__ of one class to another at the click of a button in a tkinter program with multiple frames? 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    f1 = tk.Frame(self)
    f1.pack()
    f2 = tk.Frame(self)
    f2.pack(side = "bottom")
    button1 = tk.Button(f1, text = "Balance Inquiry", relief = "flat", padx = 30, justify = 'left', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageOne"))
    button1.pack(side = "left")
    button2 = tk.Button(f1, text = "Deposit", relief = "flat", padx = 50, justify = 'right', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageTwo"))
    button2.pack(side = "left")
    button3 = tk.Button(f2, text = "Withdraw", relief = "flat", padx = 50, justify = 'left', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageThree"))
    button3.pack(side = "left")
    button4 = tk.Button(f2, text = "Pin Change", relief = "flat", padx = 50, justify = 'right', cursor = "hand2", fg = "red", font = tkfont.Font(size = 10),
        command = lambda : controller.show_frame("PageFour"))
    button4.pack(side = "left")
    tk.Button(self, text = "print stored pin", command = self.print_pin).pack()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.pin_stored = ""
    self.title_font = tkfont.Font(family = 'Courier New', size = 18, weight = "bold")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, Options) :
    INDENT
        page_name = F.__name__
        frame = F(parent = container, controller = self)
        self.frames [page_name] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame("StartPage")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53142831_53143114_1_13
53142831_53143787_4_35
Title: Updating a form in Django 
----------------------------------------

def profile(request) :
INDENT
    print (request.user)
    form1 = forms.UserForm()
    form2 = forms.UserProfileForm()
    if request.method == 'POST' :
    INDENT
        form1 = forms.UserForm(request.POST, request.FILES)
        form = forms.UserProfileForm(request.POST, request.FILES)
        if form1.is_valid() and form2.is_valid() :
        INDENT
            form1.save()
            form2.save()
        DEDENT
        else :
        INDENT
            return Http404
        DEDENT
    DEDENT
    return render(request, 'account/profile.html', {'form1' : form1, 'form2' : form2})
DEDENT
----------------------------------------

def profile(request) :
INDENT
    print (request.user)
    if request.method == 'POST' :
    INDENT
        form1 = UserForm(request.POST)
        form2 = UserProfileForm(request.POST)
        if form1.is_valid() and form2.is_valid() :
        INDENT
            profile = Profile()
            user = User.objects.get(username = request.user)
            user.username = form1.cleaned_data ['username']
            user.first_name = form1.cleaned_data ['first_name']
            user.last_name = form1.cleaned_data ['last_name']
            user.email = form1.cleaned_data ['email']
            user.set_password(form1.cleaned_data ['password'])
            user.save()
            profile.user = request.user
            profile.dob = form2.cleaned_data ['dob']
            profile.country = form2.cleaned_data ['country']
            profile.save()
        DEDENT
    DEDENT
    else :
    INDENT
        form1 = UserForm()
        form2 = UserProfileForm()
    DEDENT
    context = {
        'form1' : form1,
        'form2' : form2}
    return render(request, 'account/profile.html', context = context)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53153289_53153400_15_24
53153289_53155198_7_21
Title: "I/O error cant implement file on listbox" 
----------------------------------------

def __init__(self) :
INDENT
    self.Left = Frame(root, width = 250, height = 200, bg = 'salmon')
    self.Left.pack(side = LEFT, pady = 5)
    self.labelrdL = Label(self.Left, text = "Food Menu").grid(row = 0)
    self.listboxrdL = Listbox(self.Left, width = 30).grid(row = 1)
    for q in file :
    INDENT
        self.listboxrdL.insert(END, q)
    DEDENT
    self.buttonrdL = Button(self.Left, text = "Continue", bg = "red").grid(row = 2)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    self.left = tk.Frame(root, width = 250, height = 200, bg = 'salmon')
    self.left.pack(side = "left", pady = 5)
    tk.Label(self.left, text = "Food Menu").grid(row = 0)
    self.listbox_rdl = tk.Listbox(self.left, width = 30)
    self.listbox_rdl.grid(row = 1)
    with open('FoodDB.csv', 'r') as fdb :
    INDENT
        file = csv.reader(fdb)
        for q in file :
        INDENT
            self.listbox_rdl.insert("end", q)
        DEDENT
    DEDENT
    tk.Button(self.left, text = "Continue", bg = "red").grid(row = 2)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53153633_53160262_35_49
53153633_53160262_6_21
Title: How can i add headers in Qtableview 
----------------------------------------

def __init__(self, directory = "", parent = None) :
INDENT
    super(DirView, self).__init__(parent)
    self.setShowGrid(False)
    self._model = QtGui.QStandardItemModel(self)
    self._model.setColumnCount(4)
    labels = ("filename", "size", "date", "")
    self._model.setHorizontalHeaderLabels(labels)
    self.setModel(self._model)
    self.verticalHeader().hide()
    self.horizontalHeader().setStretchLastSection(True)
    if directory :
    INDENT
        self.load(directory)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, index, parent = None) :
INDENT
    super(ViewWidget, self).__init__(parent)
    self.p_index = QtCore.QPersistentModelIndex(index)
    self.content_button = QtGui.QWidget(self)
    self.view_btn = QtGui.QPushButton("View")
    self.share_btn = QtGui.QPushButton("Share", clicked = self.share_clicked)
    self.delete_btn = QtGui.QPushButton("Delete", clicked = self.delete_clicked)
    lay = QtGui.QHBoxLayout(self.content_button)
    lay.setContentsMargins(0, 0, 0, 0)
    lay.addWidget(self.view_btn)
    lay.addWidget(self.share_btn)
    lay.addWidget(self.delete_btn)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53155949_53156234_29_55
53155949_53156634_8_21
Title: How to update a matplotlib embedded into tkinter? 
----------------------------------------

def __init__(self, master, * args, ** kwargs) :
INDENT
    super().__init__(root)
    self.grid(column = 0, row = 0, sticky = 'nsew')
    frame = ttk.Frame(self, borderwidth = 8)
    frame.grid(column = 0, row = 0, sticky = 'nsew')
    frame.rowconfigure(0, weight = 1)
    notes = ttk.Notebook(frame)
    notes.grid(column = 0, row = 0, sticky = 'nsew')
    notes.rowconfigure(0, weight = 1)
    page = ttk.Frame(notes)
    notes.add(page, text = 'Picture')

    plot = Plotter(page)
    input_frame = ttk.Frame(self)
    input_frame.grid(column = 1, row = 0, sticky = 'nsew')

    button = ttk.Button(input_frame, text = 'Plot', command = lambda : plot.draw_lists())
    button.grid(column = 0, row = 4, columnspan = 2, sticky = 'ew')

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    notes = ttk.Notebook(self)
    notes.grid(column = 0, row = 0, sticky = 'nsew')
    notes.rowconfigure(0, weight = 1)
    self.page = ttk.Frame(notes)
    notes.add(self.page, text = 'Picture')
    self.plotter()
    input_frame = ttk.Frame(self)
    input_frame.grid(column = 1, row = 0, sticky = 'nsew')
    button = ttk.Button(input_frame, text = 'Plot', command = self.new_draw)
    button.grid(column = 0, row = 4, columnspan = 2, sticky = 'ew')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53159339_53159628_20_28
53159339_53159628_30_47
Title: Passing values between classes for Tkinter 
----------------------------------------

def __init__(self, frame, dc_list) :
INDENT
    self.frame = frame
    self.dc = tk.StringVar()
    tk.Label(self.frame, text = 'Site:').grid(column = 0, row = 0, sticky = "w")
    self.dc_combobox = ttk.Combobox(self.frame, textvariable = self.dc, width = 20, state = 'readonly')
    self.dc_combobox ['values'] = dc_list
    self.dc_combobox.grid(column = 1, row = 0, sticky = "w")

DEDENT
----------------------------------------

def __init__(self, root) :
INDENT
    self.root = root
    self.root.title('Logging Handler')
    self.root.columnconfigure(0, weight = 1)
    self.root.rowconfigure(0, weight = 1)
    left_frame = tk.Frame(self.root, padx = 5, pady = 5)
    login_frame = tk.LabelFrame(left_frame, text = "Login", borderwidth = 2, relief = "groove", padx = 5, pady = 5)
    query_frame = tk.LabelFrame(left_frame, text = "Query", borderwidth = 2, relief = "groove", padx = 5, pady = 5)
    left_frame.grid(row = 0, column = 0, sticky = "nw")
    login_frame.grid(row = 0, column = 0, pady = 5, sticky = "nw")
    query_frame.grid(row = 1, column = 0, pady = 5, sticky = "nw")
    self.login = LoginUI(self, login_frame)
    self.query = QueryUI(query_frame, self.login.dc_list)
    self.root.protocol('WM_DELETE_WINDOW', self.quit)
    self.root.bind('<Control-q>', self.quit)
    signal.signal(signal.SIGINT, self.quit)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53166781_53167294_1_24
53166781_53229619_19_33
Title: A permanent list change(Save python file) 
----------------------------------------

def add() :
INDENT
    print ("What is the name of the contact you want to add?")
    name1 = input()

    with open('contacts_list.txt', 'a+') as f :
    INDENT
        f.write(name1 + '\n')
    DEDENT
    while 1 :
    INDENT
        print ("What is the number of this contact?")
        number1 = input()
        try :
        INDENT
            number1 = int(number1)
        DEDENT
        except ValueError :
        INDENT
            print ("Please type a number..")
            continue
        DEDENT
        with open('contacts_list.txt', 'w+') as f :
        f.write(number1)
        with open('contacts_list.txt', 'r') as f :
        INDENT
            print (f.read())
        DEDENT
        break
    DEDENT
DEDENT
----------------------------------------

def add() :
INDENT
    print ("Type the name of the contact:")
    name = input()
    while 1 :
    INDENT
        print ("Type the number of this contact:")
        number = input()
        try :
        INDENT
            number = int(number)
        DEDENT
        except ValueError :
        INDENT
            print ("Please type a number")
            continue
        DEDENT
        number = str(number)
        with open('output.txt', 'a+') as f :
        INDENT
            f.write('\n' + name + ' ' + number)
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53168195_53168314_18_31
53168195_53168426_19_30
Title: only one method is run after calling two 
----------------------------------------

def tax_calculator() :
INDENT
    salary = get_salary()
    if salary > 11850 and salary < = 46350 :
    INDENT
        return basic_rate(salary)
    DEDENT
    elif salary > 46350 and salary < = 150000 :
    INDENT
        return higher_rate(salary)
    DEDENT
    elif salary > 150000 :
    INDENT
        return additional_rate(salary)
    DEDENT
    else :
    INDENT
        return "Your salary isn't taxed"

    DEDENT
DEDENT
----------------------------------------

def tax_calculator(salary_new) :
INDENT
    rate = ''
    if salary_new > 11850 and salary_new < = 46350 :
    INDENT
        rate = basic_rate(salary_new)
    DEDENT
    elif salary_new > 46350 and salary_new < = 150000 :
    INDENT
        rate = higher_rate(salary_new)
    DEDENT
    elif salary_new > 150000 :
    INDENT
        rate = additional_rate(salary_new)
    DEDENT
    else :
    INDENT
        rate = "Your salary isn't taxed"
    DEDENT
    print (rate)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53177739_53177802_1_6
53177739_53177822_3_10
Title: How to return every value from my for loop while using formatting 
----------------------------------------

def function_name(lst) :
INDENT
    number = 0
    for i in lst :
    INDENT
        number = i + 5
        print ('number = %d' % number)
    DEDENT
DEDENT
----------------------------------------

def function_name(list) :
INDENT
    number = 0
    results = []
    for i in list :
    INDENT
        number = i + 5
        results.append('number = %d' % number)
    DEDENT
    return results
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53181189_53181352_3_11
53181189_53181713_3_16
Title: Creating a Pascal triangle in a dictionary 
----------------------------------------

def pascal(n) :
INDENT
    pad = (0,)
    result = {1 : [1]}
    for i in range(2, n + 1) :
    INDENT
        previous = chain(pad, result [i - 1], pad)
        c1, c2 = tee(previous)
        next(c2)
        result [i] = [sum(pair) for pair in zip(c1, c2)]
    DEDENT
    return result
DEDENT
----------------------------------------

def pascal(n) :
INDENT
    try :
    INDENT
        result = _cache [n]
    DEDENT
    except KeyError :
    INDENT
        if n == 0 :
        INDENT
            result = []
        DEDENT
        elif n == 1 :
        INDENT
            result = [1]
        DEDENT
        else :
        INDENT
            previous = pascal(n - 1)
            result = [1] + [previous [i] + previous [i + 1] for i in range(n - 2)] + [1]
        DEDENT
        _cache [n] = result
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53197530_53197723_1_12
53197530_53197962_4_25
Title: Listing what coins are needed for given amount python 
----------------------------------------

def pay_with_coins(amount) :
INDENT
    amount *= 100
    twoer, rest = divmod(amount, 200)
    onner, rest = divmod(rest, 100)
    halfer, rest = divmod(rest, 50)
    fifther, rest = divmod(rest, 20)
    tenther, rest = divmod(rest, 10)
    twenthier, rest = divmod(rest, 5)
    fifthier, rest = divmod(rest, 2)
    hundreder, rest = divmod(rest, 1)
    coinList = [twoer, onner, halfer, fifther, tenther, twenthier, fifthier, hundreder]
    return [i for i in map(int, coinList)]
DEDENT
----------------------------------------

def pay_with_coins(amount) :
INDENT
    coins = [0 for i in range(len(currencies))]

    amount = int(amount * 100)
    values = [c * 100 for c in currencies]

    for currency in values :
    INDENT
        i = values.index(currency)
        coins [i] = 0

        while amount > = currency :
        INDENT
            amount -= currency
            coins [i] += 1
        DEDENT
    DEDENT
    return coins

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53197530_53197723_1_12
53197530_53198845_3_34
Title: Listing what coins are needed for given amount python 
----------------------------------------

def pay_with_coins(amount) :
INDENT
    amount *= 100
    twoer, rest = divmod(amount, 200)
    onner, rest = divmod(rest, 100)
    halfer, rest = divmod(rest, 50)
    fifther, rest = divmod(rest, 20)
    tenther, rest = divmod(rest, 10)
    twenthier, rest = divmod(rest, 5)
    fifthier, rest = divmod(rest, 2)
    hundreder, rest = divmod(rest, 1)
    coinList = [twoer, onner, halfer, fifther, tenther, twenthier, fifthier, hundreder]
    return [i for i in map(int, coinList)]
DEDENT
----------------------------------------

def pay_with_coins(amount) :
INDENT
    amount = Decimal(amount)
    coins_list = [0, 0, 0, 0, 0, 0, 0, 0]
    if amount == 0 :
    INDENT
        return (coins_list)
    DEDENT
    else :
    INDENT
        while amount > Decimal("2.00") :
        INDENT
            coins_list [0] = (coins_list [0] + 1)
            amount = amount - Decimal("2.00")
        DEDENT
        while amount > = Decimal("1.00") and amount < Decimal("2.00") :
        INDENT
            coins_list [1] = (coins_list [1] + 1)
            amount = amount - Decimal("1.00")
        DEDENT
        while amount > = Decimal("0.50") and amount < Decimal("1.00") :
        INDENT
            coins_list [2] = (coins_list [2] + 1)
            amount = amount - Decimal("0.50")
        DEDENT
        while amount > = Decimal("0.20") and amount < Decimal("0.50") :
        INDENT
            coins_list [3] = (coins_list [3] + 1)
            amount = amount - Decimal("0.20")
        DEDENT
        while amount > = Decimal("0.10") and amount < Decimal("0.20") :
        INDENT
            coins_list [4] = (coins_list [4] + 1)
            amount = amount - Decimal("0.10")
        DEDENT
        while amount > = Decimal("0.05") and amount < Decimal("0.10") :
        INDENT
            coins_list [5] = (coins_list [5] + 1)
            amount = amount - Decimal("0.05")
        DEDENT
        while amount > = Decimal("0.02") and amount < Decimal("0.05") :
        INDENT
            coins_list [6] = (coins_list [6] + 1)
            amount = amount - Decimal("0.02")
        DEDENT
        while amount > = Decimal("0.01") and amount < Decimal("0.05") :
        INDENT
            coins_list [7] = (coins_list [7] + 1)
            amount = amount - Decimal("0.01")
        DEDENT
        return (coins_list)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53197530_53197962_4_25
53197530_53198845_3_34
Title: Listing what coins are needed for given amount python 
----------------------------------------

def pay_with_coins(amount) :
INDENT
    coins = [0 for i in range(len(currencies))]

    amount = int(amount * 100)
    values = [c * 100 for c in currencies]

    for currency in values :
    INDENT
        i = values.index(currency)
        coins [i] = 0

        while amount > = currency :
        INDENT
            amount -= currency
            coins [i] += 1
        DEDENT
    DEDENT
    return coins

DEDENT
----------------------------------------

def pay_with_coins(amount) :
INDENT
    amount = Decimal(amount)
    coins_list = [0, 0, 0, 0, 0, 0, 0, 0]
    if amount == 0 :
    INDENT
        return (coins_list)
    DEDENT
    else :
    INDENT
        while amount > Decimal("2.00") :
        INDENT
            coins_list [0] = (coins_list [0] + 1)
            amount = amount - Decimal("2.00")
        DEDENT
        while amount > = Decimal("1.00") and amount < Decimal("2.00") :
        INDENT
            coins_list [1] = (coins_list [1] + 1)
            amount = amount - Decimal("1.00")
        DEDENT
        while amount > = Decimal("0.50") and amount < Decimal("1.00") :
        INDENT
            coins_list [2] = (coins_list [2] + 1)
            amount = amount - Decimal("0.50")
        DEDENT
        while amount > = Decimal("0.20") and amount < Decimal("0.50") :
        INDENT
            coins_list [3] = (coins_list [3] + 1)
            amount = amount - Decimal("0.20")
        DEDENT
        while amount > = Decimal("0.10") and amount < Decimal("0.20") :
        INDENT
            coins_list [4] = (coins_list [4] + 1)
            amount = amount - Decimal("0.10")
        DEDENT
        while amount > = Decimal("0.05") and amount < Decimal("0.10") :
        INDENT
            coins_list [5] = (coins_list [5] + 1)
            amount = amount - Decimal("0.05")
        DEDENT
        while amount > = Decimal("0.02") and amount < Decimal("0.05") :
        INDENT
            coins_list [6] = (coins_list [6] + 1)
            amount = amount - Decimal("0.02")
        DEDENT
        while amount > = Decimal("0.01") and amount < Decimal("0.05") :
        INDENT
            coins_list [7] = (coins_list [7] + 1)
            amount = amount - Decimal("0.01")
        DEDENT
        return (coins_list)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53197603_53197975_7_12
53197603_53198018_9_24
Title: Display prime numbers from a list in python. Error saying unsupported operands 
----------------------------------------

def prime_number(x) :
INDENT
    prime_numbers = []
    for i in (x) :
    INDENT
        if is_prime_number(x) :
        INDENT
            prime_numbers.append(i)
        DEDENT
    DEDENT
    return prime_numbers
DEDENT
----------------------------------------

def prime_number(nums) :
INDENT
    highest = nums [- 1] + 1
    sieve = [True] * (highest)
    sieve [0 : 1] = [False, False]
    for i in range(2, highest) :
    INDENT
        if sieve [i] :
        INDENT
            for j in range(2 * i, highest, i) :
            INDENT
                sieve [j] = False
            DEDENT
        DEDENT
    DEDENT
    primes = []
    for i in range(2, highest) :
    INDENT
        if sieve [i] :
        INDENT
            primes.append(i)
        DEDENT
    DEDENT
    return primes

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53203218_53203580_5_14
53203218_53203643_1_10
Title: Reshaping tensor in custom loss function in Keras 
----------------------------------------

def custom_loss(y_true, y_pred) :
INDENT
    y_pred = K.reshape(y_pred, (K.get_variable_shape(y_pred) [0], - 1))
    y_true = K.reshape(y_true, (K.get_variable_shape(y_true) [0], - 1))
    y_pred = K.std(y_pred, axis = 0)
    y_true = K.std(y_true, axis = 0)
    loss = (1 / 2) * (y_pred - y_true) ** 2
    return loss

DEDENT
----------------------------------------

def custom_loss(y_true, y_pred) :
INDENT
    y_pred = K.reshape(y_pred, (K.shape(y_pred) [0], - 1))
    y_true = K.reshape(y_true, (K.shape(y_true) [0], - 1))
    y_pred = K.std(y_pred, axis = 0)
    y_true = K.std(y_true, axis = 0)
    loss = (1 / 2) * (y_pred - y_true) ** 2
    loss = K.mean(loss)
    return loss
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53204889_53206441_1_17
53204889_53207512_12_24
Title: How to Split test-names and log-details from given text file using python groupby 
----------------------------------------

def logdetail(FILE) :
INDENT
    collect = False
    array = []
    current = []
    with open(FILE, 'r+') as f :
    INDENT
        for line in f :
        INDENT
            if line.startswith('LOG:') :
            INDENT
                collect = True
            DEDENT
            else :
            INDENT
                if line.startswith('RESULT: ') :
                INDENT
                    collect = False
                    array.append(current)
                    current = []
                DEDENT
                if collect :
                INDENT
                    current.append(line.strip())
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return (array)
DEDENT
----------------------------------------

def logdetail(TEXT) :
INDENT
    array = []
    Temporary = ''
    for line in TEXT :
    INDENT
        if 'LOG:' in line :
        INDENT
            pass
        DEDENT
        else :
        INDENT
            if 'RESULT:' in line :
            INDENT
                array.append('LOG:' + Temporary)
                Temporary = ''
                continue
            DEDENT
            Temporary += line
        DEDENT
    DEDENT
    return array
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53210329_53210507_1_13
53210329_53222418_1_15
Title: Django Post request not sent on button click 
----------------------------------------

def create_user(request) :
INDENT
    if request.method == 'POST' :
    INDENT
        form = SignUpForm(request.POST)
        if form.is_valid() :
        INDENT
            form.save()
            username = form.cleaned_data.get('username')
            raw_password = form.cleaned_data.get('password')
            user = authenticate(username = username, password = raw_password)
            auth_login(request, user)
            return render(request, 'accounts/index.html')
        DEDENT
    DEDENT
    else :
    INDENT
        form = SignUpForm()
    DEDENT
    return render(request, 'accounts/signup.html', {'form' : form})
DEDENT
----------------------------------------

def create_user(request) :
INDENT
    if request.method == 'POST' :
    INDENT
        name = request.POST.get('name')
        email = request.POST.get('email')
        password = request.POST.get('password')
        new_user = User.objects.create(
            name = name,
            email = email,
            password = password)
        new_user.save()
        return HttpResponse('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5321219_5322203_16_41
5321219_5322203_52_64
Title: Query on Table View - Model/View programming 
----------------------------------------

def data(self, index, role) :
INDENT
    if role == Qt.DisplayRole :
    INDENT

        row = index.row()
        column = index.column()
        value = self.__test_data [row] [column]
        return value

    DEDENT
    if role == Qt.DecorationRole :
    INDENT
        row = index.row()
        column = index.column()
        value = self.__test_data [row] [column]
        print "data:", index.row(), index.column(), value

        value = QColor(value)
        pixmap = QPixmap(26, 26)
        pixmap.fill(value)
        icon = QIcon(pixmap)
        return icon

    DEDENT
DEDENT
----------------------------------------

def data(row, column) :
INDENT
    import random
    test_data = []
    temp_data = []
    for i in range(row) :
    INDENT
        for j in range(column) :
        INDENT
            temp_data.append("#%06X" % random.randint(0, 0xFFFFFF))
        DEDENT
        test_data.append(temp_data)
        temp_data = []
    DEDENT
    return test_data

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53227072_53288382_4_19
53227072_53342071_1_20
Title: Reading umask (thread-safe) 
----------------------------------------

def get_umask() :
INDENT
    pipe = os.pipe()
    pid = os.fork()
    if pid == 0 :
    INDENT
        os.close(pipe [0])
        umask = os.umask(0)
        os.write(pipe [1], struct.pack('H', umask))
        os.close(pipe [1])
        os._exit(0)
    DEDENT
    else :
    INDENT
        os.close(pipe [1])
        value = os.read(pipe [0], 2)
        os.close(pipe [0])
        os.waitpid(pid, 0)
        return struct.unpack('H', value) [0]
    DEDENT
DEDENT
----------------------------------------

def get_umask() :
INDENT
    import os, os.path, random, tempfile
    while True :
    INDENT

        name = 'test'
        for _ in range(8) :
        INDENT
            name += chr(random.randint(ord('a'), ord('z')))
        DEDENT
        path = os.path.join(tempfile.gettempdir(), name)
        try :
        INDENT
            fd = os.open(path, os.O_RDONLY | os.O_CREAT | os.O_EXCL, 0o777)
        DEDENT
        except FileExistsError :
        INDENT
            continue
        DEDENT
        try :
        INDENT
            return 0o777 & ~ os.stat(fd).st_mode
        DEDENT
        finally :
        INDENT
            os.close(fd)
            os.unlink(path)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53233238_53233256_1_11
53233238_53233646_1_10
Title: Counting output 
----------------------------------------

def leap_years(start, end) :
INDENT
    if start < 1500 or start > 2100 :
    INDENT
        return 0
    DEDENT
    if end < 1500 or end > 2100 :
    INDENT
        return 0
    DEDENT
    i, count = 0, 0
    for i in range(start, end + 1) :
    INDENT
        if i % 4 == 0 and (i % 100 ! = 0 or i % 400 == 0) :
        INDENT
            count += 1
        DEDENT
    DEDENT
    return count
DEDENT
----------------------------------------

def leap_years(start, end) :
INDENT
    if start < 1500 or start > 2100 :
    INDENT
        return
    DEDENT
    if end < 1500 or end > 2100 :
    INDENT
        return
    DEDENT
    leaps = [i for i in range(start, end + 1) if i % 4 == 0 and (i % 100 ! = 0 or i % 400 == 0)]
    print (len(leaps))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53233922_53234231_1_19
53233922_53234257_1_11
Title: Getting the line in which occurrence of words in files appear? 
----------------------------------------

def search_file(filename, searchword) :
INDENT
    lines = [line.rstrip('\n') for line in open(filename)]
    lineCount = 1
    results = []
    for line in lines :
    INDENT
        if searchword in line :
        INDENT
            results.append(str(lineCount) + "-" + line)
        DEDENT
        lineCount += 1
    DEDENT
    with open('fieldsModified.txt', 'w') as f :
    INDENT
        for item in results :
        INDENT
            f.write("%s\n" % item)
        DEDENT
    DEDENT
    for each in results :
    INDENT
        print (each)
    DEDENT
DEDENT
----------------------------------------

def search_file(filename, searchword) :
INDENT
    my_file = open(filename)
    output_file = open('fieldsModified.txt', 'w+')
    for i, line in enumerate(my_file) :
    INDENT
        if searchword in line :
        INDENT
            print (str(i) + ' - ' + line)
            output_file.write(str(i) + ' - ' + line)
        DEDENT
    DEDENT
    my_file.close()
    output_file.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53246143_53246213_3_8
53246143_53246327_4_9
Title: NameError occurring after calling nested function 
----------------------------------------

def splitKeyword(argument) :
INDENT
    keywordList = []
    for line in argument :
    INDENT
        keywordList.append(line.strip().split(','))
    DEDENT
    return keywordList
DEDENT
----------------------------------------

def splitKeyword(argument) :
INDENT
    keywordList = []
    for line in argument :
    INDENT
        keywordList.append(line.strip().split(','))
    DEDENT
    return keywordList
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5324718_39006085_5_9
5324718_5324893_10_21
Title: python Returning data from a threaded def 
----------------------------------------

def run() :
INDENT
    try :
    INDENT
        th.ret = f(* args, ** kw)
    DEDENT
    except :
    INDENT
        th.exc = sys.exc_info()
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    print "getTitle"
    audio = MP3(self.fileName)
    try :
    INDENT
        self.sTitle = str(audio ["TIT2"])
    DEDENT
    except KeyError :
    INDENT
        self.sTitle = os.path.basename(self.fileName)
    DEDENT
    self.sTitle = replace_all(self.sTitle)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53262230_53262550_1_14
53262230_53262578_7_18
Title: Issue with headers while splitting CSV file [Python 3] 
----------------------------------------

def splitter(u) :
INDENT
    filenames_already_opened = []
    for row in u :
    INDENT
        filename = row [1] + '.csv'
        with open(filename, 'a', encoding = 'utf-8', newline = '') as myfile :
        INDENT
            writer = csv.writer(myfile, delimiter = ';', quotechar = '|', quoting = csv.QUOTE_MINIMAL)
            if filename in filenames_already_opened :
            INDENT
                pass
            DEDENT
            else :
            INDENT
                writer.writerow(header)
                filenames_already_opened.append(filename)
            DEDENT
            writer.writerow(row)
        DEDENT
    DEDENT
    myfile.close()
DEDENT
----------------------------------------

def splitter(u) :
INDENT
    tableNames = []
    for row in u :
    INDENT
        with open(row [1] + '.csv', 'a', encoding = 'utf-8', newline = '') as myfile :
        INDENT
            writer = csv.writer(myfile, delimiter = ';', quotechar = '|', quoting = csv.QUOTE_MINIMAL)
            if not row [1] in tableNames :
            INDENT
                writer.writerow(header)
                tableNames.append(row [1])
            DEDENT
            writer.writerow(row)
        DEDENT
    DEDENT
    myfile.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53265275_53265357_1_16
53265275_53265641_1_11
Title: Deleting a value from a list using recursion 
----------------------------------------

def delete(lst, to_delete) :
INDENT
    if not lst :
    INDENT
        return []
    DEDENT
    else :
    INDENT
        res = []
        for item in lst :
        INDENT
            if item == to_delete :
            INDENT
                continue
            DEDENT
            else :
            INDENT
                res.append(item)
            DEDENT
        DEDENT
        return res
    DEDENT
DEDENT
----------------------------------------

def delete(lst, to_delete) :
INDENT
    if not lst :
    INDENT
        return []
    DEDENT
    if lst [0] == to_delete :
    INDENT
        return delete(lst [1 :], to_delete)
    DEDENT
    return [lst [0]] + delete(lst [1 :], to_delete)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53267820_53268012_2_18
53267820_53268119_4_19
Title: Generating DNA sequence excluding specific sequence 
----------------------------------------

def generate_seq(length, enzyme) :
INDENT
    list_dna = []
    nucleotides = ["A", "C", "T", "G"]
    i = 0
    while i < 1000 :
    INDENT
        nucleotide = choice(nucleotides)
        list_dna.append(nucleotide)
        if ''.join(list_dna [- 6 :]) == "AACGTT" :
        INDENT
            list_dna.pop()
        DEDENT
        else :
        INDENT
            i = i + 1
        DEDENT
    DEDENT
    dna = ''.join(str(nucleotide) for nucleotide in list_dna)
    return (dna)

DEDENT
----------------------------------------

def generate_seq(length, enzyme, bad_prefix = "AACGT") :
INDENT
    list_dna = []
    nucleotides = ["A", "C", "T", "G"]
    i = 0
    while i < 1000 :
    INDENT
        if list_dna [- 5 :] ! = bad_prefix :
        INDENT
            nucleotide = choice(nucleotides)
        DEDENT
        else :
        INDENT
            nucleotide = choice(["A", "C", "G"])
        DEDENT
        list_dna.append(nucleotide)
        i = i + 1
    DEDENT
    dna = ''.join(str(nucleotide) for nucleotide in list_dna)
    return dna

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53272820_53273111_1_25
53272820_53273224_3_28
Title: Python storing & accessing information via txt file 
----------------------------------------

def check_bank() :
INDENT
    try :
    INDENT
        if os.path.isfile('./bank.txt') == True :
        INDENT
            bank_file = open('bank.txt', 'r')
            vault = float(bank_file.readline())
            if vault > 0.0 :
            INDENT
                bank = vault
                return bank
            DEDENT
            else :
            INDENT
                bank = 500.00
                return bank
            DEDENT
        DEDENT
        else :
        INDENT
            bank_file = open('bank.txt', 'w')
            bank_file.write(str(500.0))
            bank = float(bank_file.readline())
            bank_file.close()
            return bank
        DEDENT
    DEDENT
    except IOError :
    INDENT
        print ('IOError in check_bank')
    DEDENT
    except ValueError :
    INDENT
        print ('ValueError in check_bank')
    DEDENT
    except Exception as err :
    INDENT
        print (err, 'in check_bank')
    DEDENT
    finally :
    INDENT
        bank_file.close()
    DEDENT
DEDENT
----------------------------------------

def check_bank() :
INDENT
    try :
    INDENT
        file_path = './bank.txt'

        if os.path.isfile(file_path) :
        INDENT
            file_handler = open(file_path, 'rb')
            bank = pickle.load(file_handler)
            return bank

        DEDENT
        else :
        INDENT
            file_handler = open(file_path, 'wb')
            pickle.dump(500, file_handler)
            file_handler.close()
            return 500
        DEDENT
    DEDENT
    except IOError :
    INDENT
        print ("IOError occured")
    DEDENT
    except EOFError :
    INDENT

        file_handler = open(file_path, 'wb')
        pickle.dump(500, file_handler)
        file_handler.close()
        return 500
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53276387_53276488_1_15
53276387_53276598_10_22
Title: Python: Function that takes a list and a separator and returns a string 
----------------------------------------

def my_string(my_list, sep = ', ') :
INDENT
    result = ''

    if not my_list :
    INDENT
        return result
    DEDENT
    idx = 0
    for word in my_list :
    INDENT

        result += (sep if idx else '') + word
        idx += 1
    DEDENT
    return result
DEDENT
----------------------------------------

def my_string(my_list, sep = ', ') :
INDENT
    string = ""
    length = my_len(my_list)

    for i in range(length - 1) :
    INDENT
        string += my_list [i] + sep

    DEDENT
    string += my_list [i + 1]
    return string
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53280063_53281205_24_34
53280063_53283957_30_44
Title: Confusions about python Iterators 
----------------------------------------

def __next__(self) :
INDENT
    if self.index < len(self.items) :
    INDENT
        self.index += 1
        return self.items [self.index - 1]
    DEDENT
    else :
    INDENT
        raise StopIteration()
    DEDENT
DEDENT
----------------------------------------

def __next__(self) :
INDENT
    self.index += 1
    if self.over_what == 'keys' :
    INDENT
        try :
        INDENT
            return self.to_be_iterated.items [self.index].key
        DEDENT
        except Exception :
        INDENT
            raise StopIteration
        DEDENT
    DEDENT
    elif self.over_what == 'values' :
    INDENT
        try :
        INDENT
            return self.to_be_iterated.items [self.index].value
        DEDENT
        except Exception :
        INDENT
            raise StopIteration
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53283319_53283420_1_10
53283319_53283470_1_10
Title: Remove items of the list if impossible to cast Python 
----------------------------------------

def apply_float(rows) :
INDENT
    index = 0
    while index < len(rows) :
    INDENT
        try :
        INDENT
            rows [index] [2] = float(rows [index] [2])
            index += 1
        DEDENT
        except :
        INDENT
            print (rows [index] [2])
            rows.pop(index)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def apply_float(rows) :
INDENT
    new_data = []
    for row in rows :
    INDENT
        try :
        INDENT
            new_data.append(float(row [2]))
        DEDENT
        except (TypeError, ValueError) :
        INDENT
            print (row [2])
        DEDENT
    DEDENT
    return new_data

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53283319_53283420_1_10
53283319_53283806_1_8
Title: Remove items of the list if impossible to cast Python 
----------------------------------------

def apply_float(rows) :
INDENT
    index = 0
    while index < len(rows) :
    INDENT
        try :
        INDENT
            rows [index] [2] = float(rows [index] [2])
            index += 1
        DEDENT
        except :
        INDENT
            print (rows [index] [2])
            rows.pop(index)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def apply_float(rows) :
INDENT
    for row in rows :
    INDENT
        try :
        INDENT
            row [2] = float(row [2])
            yield row
        DEDENT
        except :
        INDENT
            print (row [2])
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53292779_53292894_1_17
53292779_53308433_5_24
Title: Python 2D list to dictionary 
----------------------------------------

def averages(table, col, by) :
INDENT
    columns = tuple(([table [i] [col] for i in range(len(table))]))
    groupby = tuple(([table [i] [by] for i in range(len(table))]))
    avgdict = {}
    avgdict [groupby] = [columns]
    newdict = {}
    for key in avgdict :
    INDENT
        for x in range(len(key)) :
        INDENT
            if key [x] in newdict :
            INDENT
                newdict [key [x]] += avgdict [key] [0] [x]
            DEDENT
            else :
            INDENT
                newdict [key [x]] = avgdict [key] [0] [x]
            DEDENT
        DEDENT
    DEDENT
    print (newdict)
DEDENT
----------------------------------------

def averages(table, col, by) :
INDENT
    columns = tuple(([table [i] [col] for i in range(len(table))]))
    groupby = tuple(([table [i] [by] for i in range(len(table))]))
    '''groupby_unq: tuple data type 
                    stores list of unique entries in groupby.'''
    groupby_unq = tuple(set(groupby))
    '''avg: numpy.ndarray data type
            numpy array of zeros of same length as groupby_unq.'''
    avg = np.zeros(len(groupby_unq))
    for i in range(len(groupby)) :
    INDENT
        for j in range(len(groupby_unq)) :
        INDENT
            if (groupby [i] == groupby_unq [j]) : avg [j] += columns [i]
        DEDENT
    DEDENT
    avgdict = dict((groupby_unq [i], avg [i]) for i in range(len(avg)))
    return avgdict
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53312057_53312476_5_12
53312057_53322892_4_9
Title: Changing `self` for another instance of same object? 
----------------------------------------

def __init__(self, key, value = None) :
INDENT
    if not Master.init_OK :
    INDENT
        raise Exception('Direct call to Master() is not allowed')
    DEDENT
    Master.init_OK = False
    self.key = key
    self.value = value
    Master.existent [key] = self
DEDENT
----------------------------------------

def __init__(self, key, value = None) :
INDENT
    self.key = key
    self.value = value
    if not key in Master.existent :
    INDENT
        Master.existent [key] = self
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53312057_53312604_4_11
53312057_53322892_10_16
Title: Changing `self` for another instance of same object? 
----------------------------------------

def __new__(cls, key, value = None) :
INDENT
    if key in Master.instances :
    INDENT
        return Master.instances [key]
    DEDENT
    else :
    INDENT
        instance = super(Master, cls).__new__(cls)
        Master.instances [key] = instance
        return instance
    DEDENT
DEDENT
----------------------------------------

def __new__(cls, * args, ** kwargs) :
INDENT
    key = args [0]
    if key in Master.existent :
    INDENT
        return Master.existent [key]
    DEDENT
    else :
    INDENT
        return super(Master, cls).__new__(cls)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53312719_53313063_3_13
53312719_53313552_7_16
Title: Python Function to return Index of outlier values in two-dimensional numpy array 
----------------------------------------

def main() :
INDENT
    MatrixOne = np.array([[1, 2, 10], [1, 10, 2]])
    print (function(MatrixOne))
    MatrixTwo = np.array([[1, 2, 3, 4, 20], [1, 20, 2, 3, 4], [20, 2, 3, 4, 5]])
    print (function(MatrixTwo))
    MatrixThree = np.array([[1, 10, 2, 8, 5], [2, 7, 3, 9, 11], [19, 2, 1, 1, 5]])
    print (function(MatrixThree))
DEDENT
----------------------------------------

def main() :
INDENT
    MatrixOne = np.array([[1, 2, 10], [1, 10, 2]])
    print (function(MatrixOne))
    MatrixTwo = np.array([[1, 2, 3, 4, 20], [1, 20, 2, 3, 4], [20, 2, 3, 4, 5]])
    print (function(MatrixTwo))
    MatrixThree = np.array([[1, 10, 2, 8, 5], [2, 7, 3, 9, 11], [19, 2, 1, 1, 5]])
    print (function(MatrixThree))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53317230_53317359_4_11
53317230_53317399_4_9
Title: "Python printing thrice while I called the function twice why is this so?" 
----------------------------------------

def open_branch(self) :
INDENT
    result = ""
    if self.bankrupt :
    INDENT
        result = "Restaurant is bankrupt"
    DEDENT
    else :
    INDENT
        result = "Branch opened"
    DEDENT
    return result
DEDENT
----------------------------------------

def open_branch(self) :
INDENT
    if not self.bankrupt :
    INDENT
        return "branch opened"
    DEDENT
    return "branch closed"

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_16_36
53325065_53325213_185_258
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(angle)) / g)
    vx = v * cos(angle)
    t2 = ((2 * v2 * sin(angle2)) / g)
    vx2 = v2 * cos(angle2)
    t3 = ((2 * v3 * sin(angle3)) / g)
    vx3 = v3 * cos(angle3)
    dx = 0.01
    xmin = x0
    xmax = vx * t * cos(angle)
    xmin2 = x02
    xmax2 = vx2 * t2 * cos(angle2)
    xmin3 = x03
    xmax3 = vx3 * t3 * cos(angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, v, g, y0, angle) for x0 in xlist]
    ylist2 = [func2(x02, v2, y02, angle2) for x02 in xlist2]
    ylist3 = [func3(x03, v3, y03, angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_16_36
53325065_53325213_44_182
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    global v
    v = IntVar()
    global angle
    angle = IntVar()
    global x0
    x0 = IntVar()
    global y0
    y0 = IntVar()
    global v2
    v2 = IntVar()
    global angle2
    angle2 = IntVar()
    global x02
    x02 = IntVar()
    global y02
    y02 = IntVar()
    global v3
    v3 = IntVar()
    global angle3
    angle3 = IntVar()
    global x03
    x03 = IntVar()
    global y03
    y03 = IntVar()

    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y03)
    entry.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_16_36
53325065_53325224_147_219
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(data.angle)) / g)
    vx = data.v * cos(data.angle)
    t2 = ((2 * data.v2 * sin(data.angle2)) / g)
    vx2 = data.v2 * cos(data.angle2)
    t3 = ((2 * data.v3 * sin(data.angle3)) / g)
    vx3 = data.v3 * cos(data.angle3)
    dx = 0.01
    xmin = data.x0
    xmax = vx * t * cos(data.angle)
    xmin2 = data.x02
    xmax2 = vx2 * t2 * cos(data.angle2)
    xmin3 = data.x03
    xmax3 = vx3 * t3 * cos(data.angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, data.v, g, data.y0, data.angle) for x0 in xlist]
    ylist2 = [func2(x02, data.v2, data.y02, data.angle2) for x02 in xlist2]
    ylist3 = [func3(x03, data.v3, data.y03, data.angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_16_36
53325065_53325224_60_144
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y03)
    entry.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_185_258
53325065_53325213_44_182
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(angle)) / g)
    vx = v * cos(angle)
    t2 = ((2 * v2 * sin(angle2)) / g)
    vx2 = v2 * cos(angle2)
    t3 = ((2 * v3 * sin(angle3)) / g)
    vx3 = v3 * cos(angle3)
    dx = 0.01
    xmin = x0
    xmax = vx * t * cos(angle)
    xmin2 = x02
    xmax2 = vx2 * t2 * cos(angle2)
    xmin3 = x03
    xmax3 = vx3 * t3 * cos(angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, v, g, y0, angle) for x0 in xlist]
    ylist2 = [func2(x02, v2, y02, angle2) for x02 in xlist2]
    ylist3 = [func3(x03, v3, y03, angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    global v
    v = IntVar()
    global angle
    angle = IntVar()
    global x0
    x0 = IntVar()
    global y0
    y0 = IntVar()
    global v2
    v2 = IntVar()
    global angle2
    angle2 = IntVar()
    global x02
    x02 = IntVar()
    global y02
    y02 = IntVar()
    global v3
    v3 = IntVar()
    global angle3
    angle3 = IntVar()
    global x03
    x03 = IntVar()
    global y03
    y03 = IntVar()

    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y03)
    entry.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_185_258
53325065_53325224_31_52
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(angle)) / g)
    vx = v * cos(angle)
    t2 = ((2 * v2 * sin(angle2)) / g)
    vx2 = v2 * cos(angle2)
    t3 = ((2 * v3 * sin(angle3)) / g)
    vx3 = v3 * cos(angle3)
    dx = 0.01
    xmin = x0
    xmax = vx * t * cos(angle)
    xmin2 = x02
    xmax2 = vx2 * t2 * cos(angle2)
    xmin3 = x03
    xmax3 = vx3 * t3 * cos(angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, v, g, y0, angle) for x0 in xlist]
    ylist2 = [func2(x02, v2, y02, angle2) for x02 in xlist2]
    ylist3 = [func3(x03, v3, y03, angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    data = MyData
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self, data)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_185_258
53325065_53325224_60_144
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(angle)) / g)
    vx = v * cos(angle)
    t2 = ((2 * v2 * sin(angle2)) / g)
    vx2 = v2 * cos(angle2)
    t3 = ((2 * v3 * sin(angle3)) / g)
    vx3 = v3 * cos(angle3)
    dx = 0.01
    xmin = x0
    xmax = vx * t * cos(angle)
    xmin2 = x02
    xmax2 = vx2 * t2 * cos(angle2)
    xmin3 = x03
    xmax3 = vx3 * t3 * cos(angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, v, g, y0, angle) for x0 in xlist]
    ylist2 = [func2(x02, v2, y02, angle2) for x02 in xlist2]
    ylist3 = [func3(x03, v3, y03, angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y03)
    entry.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_222_228
53325065_53325224_184_190
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def func(x0, v, g, y0, angle) :
INDENT
    y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
    if y == 0 :
    INDENT
        return 0.0
    DEDENT
    return y

DEDENT
----------------------------------------

def func(x0, v, g, y0, angle) :
INDENT
    y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
    if y == 0 :
    INDENT
        return 0.0
    DEDENT
    return y

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_229_235
53325065_53325224_191_197
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def func2(x02, v2, y02, angle2) :
INDENT
    y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
    if y2 == 0 :
    INDENT
        return 0.0
    DEDENT
    return y2

DEDENT
----------------------------------------

def func2(x02, v2, y02, angle2) :
INDENT
    y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
    if y2 == 0 :
    INDENT
        return 0.0
    DEDENT
    return y2

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_236_242
53325065_53325224_198_204
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def func3(x03, v3, y03, angle3) :
INDENT
    y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
    if y3 == 0 :
    INDENT
        return 0.0
    DEDENT
    return y3

DEDENT
----------------------------------------

def func3(x03, v3, y03, angle3) :
INDENT
    y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
    if y3 == 0 :
    INDENT
        return 0.0
    DEDENT
    return y3

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_44_182
53325065_53325224_147_219
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    global v
    v = IntVar()
    global angle
    angle = IntVar()
    global x0
    x0 = IntVar()
    global y0
    y0 = IntVar()
    global v2
    v2 = IntVar()
    global angle2
    angle2 = IntVar()
    global x02
    x02 = IntVar()
    global y02
    y02 = IntVar()
    global v3
    v3 = IntVar()
    global angle3
    angle3 = IntVar()
    global x03
    x03 = IntVar()
    global y03
    y03 = IntVar()

    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y03)
    entry.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(data.angle)) / g)
    vx = data.v * cos(data.angle)
    t2 = ((2 * data.v2 * sin(data.angle2)) / g)
    vx2 = data.v2 * cos(data.angle2)
    t3 = ((2 * data.v3 * sin(data.angle3)) / g)
    vx3 = data.v3 * cos(data.angle3)
    dx = 0.01
    xmin = data.x0
    xmax = vx * t * cos(data.angle)
    xmin2 = data.x02
    xmax2 = vx2 * t2 * cos(data.angle2)
    xmin3 = data.x03
    xmax3 = vx3 * t3 * cos(data.angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, data.v, g, data.y0, data.angle) for x0 in xlist]
    ylist2 = [func2(x02, data.v2, data.y02, data.angle2) for x02 in xlist2]
    ylist3 = [func3(x03, data.v3, data.y03, data.angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_44_182
53325065_53325224_31_52
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    global v
    v = IntVar()
    global angle
    angle = IntVar()
    global x0
    x0 = IntVar()
    global y0
    y0 = IntVar()
    global v2
    v2 = IntVar()
    global angle2
    angle2 = IntVar()
    global x02
    x02 = IntVar()
    global y02
    y02 = IntVar()
    global v3
    v3 = IntVar()
    global angle3
    angle3 = IntVar()
    global x03
    x03 = IntVar()
    global y03
    y03 = IntVar()

    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y03)
    entry.pack()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    data = MyData
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self, data)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325213_44_182
53325065_53325224_60_144
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    global v
    v = IntVar()
    global angle
    angle = IntVar()
    global x0
    x0 = IntVar()
    global y0
    y0 = IntVar()
    global v2
    v2 = IntVar()
    global angle2
    angle2 = IntVar()
    global x02
    x02 = IntVar()
    global y02
    y02 = IntVar()
    global v3
    v3 = IntVar()
    global angle3
    angle3 = IntVar()
    global x03
    x03 = IntVar()
    global y03
    y03 = IntVar()

    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = y03)
    entry.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y03)
    entry.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325224_147_219
53325065_53325224_31_52
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(data.angle)) / g)
    vx = data.v * cos(data.angle)
    t2 = ((2 * data.v2 * sin(data.angle2)) / g)
    vx2 = data.v2 * cos(data.angle2)
    t3 = ((2 * data.v3 * sin(data.angle3)) / g)
    vx3 = data.v3 * cos(data.angle3)
    dx = 0.01
    xmin = data.x0
    xmax = vx * t * cos(data.angle)
    xmin2 = data.x02
    xmax2 = vx2 * t2 * cos(data.angle2)
    xmin3 = data.x03
    xmax3 = vx3 * t3 * cos(data.angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, data.v, g, data.y0, data.angle) for x0 in xlist]
    ylist2 = [func2(x02, data.v2, data.y02, data.angle2) for x02 in xlist2]
    ylist3 = [func3(x03, data.v3, data.y03, data.angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    data = MyData
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self, data)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325224_147_219
53325065_53325224_60_144
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Generate")
    label.pack(pady = 10, padx = 10)
    button1 = ttk.Button(self, text = "Поменять значения",
        command = lambda : controller.show_frame(StartPage))
    button1.pack()
    f = Figure(figsize = (5, 5), dpi = 100)
    a = f.add_subplot(111)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(side = tk.BOTTOM, fill = tk.BOTH, expand = True)
    toolbar = NavigationToolbar2TkAgg(canvas, self)
    toolbar.update()
    canvas._tkcanvas.pack(side = tk.TOP, fill = tk.BOTH, expand = True)
    t = ((2 * v * sin(data.angle)) / g)
    vx = data.v * cos(data.angle)
    t2 = ((2 * data.v2 * sin(data.angle2)) / g)
    vx2 = data.v2 * cos(data.angle2)
    t3 = ((2 * data.v3 * sin(data.angle3)) / g)
    vx3 = data.v3 * cos(data.angle3)
    dx = 0.01
    xmin = data.x0
    xmax = vx * t * cos(data.angle)
    xmin2 = data.x02
    xmax2 = vx2 * t2 * cos(data.angle2)
    xmin3 = data.x03
    xmax3 = vx3 * t3 * cos(data.angle3)
    def func(x0, v, g, y0, angle) :
    INDENT
        y = x0 * tan(angle) - (1 / (2 * v ** 2)) * ((g * x0 ** 2) / (cos(angle) ** 2)) + y0
        if y == 0 :
        INDENT
            return 0.0
        DEDENT
        return y

    DEDENT
    def func2(x02, v2, y02, angle2) :
    INDENT
        y2 = x02 * tan(angle2) - (1 / (2 * v2 ** 2)) * ((g * x02 ** 2) / (cos(angle2) ** 2)) + y02
        if y2 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y2

    DEDENT
    def func3(x03, v3, y03, angle3) :
    INDENT
        y3 = x03 * tan(angle3) - (1 / (2 * v3 ** 2)) * ((g * x03 ** 2) / (cos(angle3) ** 2)) + y03
        if y3 == 0 :
        INDENT
            return 0.0
        DEDENT
        return y3

    DEDENT
    xlist = mlab.frange(xmin, xmax, dx)
    xlist2 = mlab.frange(xmin2, xmax2, dx)
    xlist3 = mlab.frange(xmin3, xmax3, dx)
    ylist = [func(x0, data.v, g, data.y0, data.angle) for x0 in xlist]
    ylist2 = [func2(x02, data.v2, data.y02, data.angle2) for x02 in xlist2]
    ylist3 = [func3(x03, data.v3, data.y03, data.angle3) for x03 in xlist3]
    pylab.plot(xlist, ylist)
    pylab.plot(xlist2, ylist2)
    pylab.plot(xlist3, ylist3)
    pylab.show()

DEDENT
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y03)
    entry.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53325065_53325224_31_52
53325065_53325224_60_144
Title: SyntaxError: name 'v' is used prior to nonlocal declaration 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Fly")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    data = MyData
    for F in (StartPage, PageOne) :
    INDENT
        frame = F(container, self, data)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------

def __init__(self, parent, controller, data) :
INDENT
    tk.Frame.__init__(self, parent)
    label = tk.Label(self, text = "Начальная страница")
    label.pack(pady = 10, padx = 10)
    button = ttk.Button(self, text = "Visit Page 1",
        command = lambda : controller.show_frame(PageOne))
    button.pack()
    frame2 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame2.pack()
    first = Label(self, text = 'Данные для первого графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x0)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y0)
    entry.pack()
    frame3 = Frame(self, borderwidth = 4, relief = GROOVE)
    frame3.pack()
    first = Label(self, text = 'Данные для второго графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v2)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle2)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x02)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y02)
    entry.pack()
    first = Label(self, text = 'Данные для третьего графика')
    first.pack()
    second = Label(self, text = 'Начальная скорость')
    second.pack()
    entry = Entry(self, width = 10, textvariable = data.v3)
    entry.pack()
    third = Label(self, text = 'Угол выстрела')
    third.pack()
    entry = Entry(self, width = 10, textvariable = data.angle3)
    entry.pack()
    fourth = Label(self, text = 'Начальная координата x')
    fourth.pack()
    entry = Entry(self, width = 10, textvariable = data.x03)
    entry.pack()
    fifth = Label(self, text = 'Начальная координата y')
    fifth.pack()
    entry = Entry(self, width = 10, textvariable = data.y03)
    entry.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5332841_5333235_12_17
5332841_5334686_2_10
Title: python list/dict property best practice 
----------------------------------------

def __init__(self, * args, ** kwds) :
INDENT
    super(MyOrderedDict, self).__init__()
    if len(args) > 0 :
    INDENT
        for i in args [0] :
        INDENT
            super(MyOrderedDict, self).__setitem__(i.id, i)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def __init__(self, items, attrs) :
INDENT
    super(IndexedList, self).__init__(items)
    self._attrs = tuple(attrs)
    self._index = {}
    _add = self._addindex
    for obj in self :
    INDENT
        _add(obj)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5332841_5333235_18_24
5332841_5334686_37_42
Title: python list/dict property best practice 
----------------------------------------

def __getitem__(self, key) :
INDENT
    if isinstance(key, int) :
    INDENT
        return super(MyOrderedDict, self).__getitem__(self.keys() [key])
    DEDENT
    if isinstance(key, slice) :
    INDENT
        return [super(MyOrderedDict, self).__getitem__(k) for k in self.keys() [key]]
    DEDENT
    return super(MyOrderedDict, self).__getitem__(key)
DEDENT
----------------------------------------

def __getitem__(self, ind) :
INDENT
    try :
    INDENT
        return self._index [ind]
    DEDENT
    except KeyError :
    INDENT
        return list.__getitem__(self, ind)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5332841_5333235_28_33
5332841_5334686_97_106
Title: python list/dict property best practice 
----------------------------------------

def pop(self, key = None, default = object()) :
INDENT
    if key is None :
    INDENT
        return self.popitem()
    DEDENT
    return super(MyOrderedDict, self).pop(self.keys() [key], default = default)

DEDENT
----------------------------------------

def pop(self, ind = - 1) :
INDENT
    try :
    INDENT
        obj = list.__getitem__(self, ind)
    DEDENT
    except (IndexError, TypeError) :
    INDENT
        obj = self._index [ind]
        ind = list.index(self, obj)
    DEDENT
    self._delindex(obj)
    return list.pop(self, ind)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5333515_5333852_8_19
5333515_5333861_1_11
Title: Python: recursive way to subtract from class attributes? 
----------------------------------------

def subt(self, amount) :
INDENT
    tmp_stack = self.sub_stack [:]
    while tmp_stack and amount :
    INDENT
        key = tmp_stack.pop(0)
        val = self.__dict__ [key]
        if val > amount :
        INDENT
            self.__dict__ [key] -= amount
            amount = 0
        DEDENT
        else :
        INDENT
            amount -= self.__dict__ [key]
            self.__dict__ [key] = 0
        DEDENT
    DEDENT
    return amount
DEDENT
----------------------------------------

def subt(self, amount) :
INDENT
    all_attrs = sorted(attr_name for attr_name in self.__class__.__dict__.keys() if attr_name.startswith("attr"))
    for i, attr_name in all_attrs :
    INDENT
        self.__setattr__(getattr(self, attr_name) + amount)
        if gettattr(self, attr_name) < 0 :
        INDENT
            amount = gettattr(self, attr_name)
            self.__setattr__(self, attr_name, 0)
        DEDENT
        else :
        INDENT
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53339390_53339573_1_15
53339390_53339601_1_14
Title: getting type error while iterating values from dictionary 
----------------------------------------

def location(rolls) :
INDENT
    dictionary = {64 : - 4, 49 : - 38, 98 : - 20, 16 : - 10, 87 : - 63, 56 : - 3, 47 : - 21, 93 : - 20, 62 : - 43,
        95 : - 20, 80 : 20, 1 : 37, 51 : 16, 4 : 10, 21 : 21, 71 : 20, 9 : 22, 28 : 56, 36 : 8}
    position = 0
    list_position = []
    for roll in rolls :
    INDENT
        position = position + roll
        if position not in dictionary :
        INDENT
            continue
        DEDENT
        if position in dictionary :
        INDENT
            if dictionary.get(roll) :
            INDENT
                position = position + dictionary.get(roll)
            DEDENT
            list_position.append(position)
        DEDENT
        print (position)
    DEDENT
DEDENT
----------------------------------------

def location(rolls) :
INDENT
    dictionary = {64 : - 4, 49 : - 38, 98 : - 20, 16 : - 10, 87 : - 63, 56 : - 3, 47 : - 21, 93 : - 20, 62 : - 43,
        95 : - 20, 80 : 20, 1 : 37, 51 : 16, 4 : 10, 21 : 21, 71 : 20, 9 : 22, 28 : 56, 36 : 8}
    position = 0
    list_position = []
    for roll in rolls :
    INDENT
        position = position + roll

        position = position + dictionary.get(position, 0)
        list_position.append(position)
        print (position)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53345938_53347378_39_49
53345938_53347378_5_19
Title: converting a python script into object oriented program 
----------------------------------------

def __init__(self, research_type, query, sorted_by, results_count, skip_count) :
INDENT
    if research_type == "software" :
    INDENT
        self.query_url = "{}?query=affectedSoftware.name%3A{}&sort={}&size={}&skip={}".format(self.BASE_URL, query, sorted_by, results_count, skip_count)
    DEDENT
    elif research_type == "bulletin" :
    INDENT
        self.query_url = "{}?query=type%3A{}&sort={}&size={}&skip={}".format(self.BASE_URL, query, sorted_by, results_count, skip_count)
    DEDENT
    else :
    INDENT
        raise RuntimeError("{} is not a valid research type. research_type must be 'software' or 'bulletin'".format(research_type))
    DEDENT
    response = requests.get(self.query_url)
    response.raise_for_status()
    self.raw_data = response.json()
    self.results = [VulnersResult(data) for data in self.raw_data ['data'] ['search']]
DEDENT
----------------------------------------

def __init__(self, json_data) :
INDENT
    self.title = json_data ['_source'] ['title']
    self.type = json_data ['_type']
    self.id = json_data ['_id']
    self.source_type = json_data ['_source'] ['type']
    self.cvss = json_data ['_source'] ['cvss']
    self.flat_description = json_data ['flatDescription']
    self.bulletin_family = json_data ['_source'] ['bulletinFamily']
    self.description = json_data ['_source'] ['description']
    self.vhref = json_data ['_source'] ['vhref']
    self.href = json_data ['_source'] ['href']
    self.source_id = json_data ['_source'] ['id']
    self.lastseen = json_data ['_source'] ['lastseen']
    self.modified = json_data ['_source'] ['modified']
    self.published = json_data ['_source'] ['published']
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53346519_53421963_5_16
53346519_53422080_15_28
Title: Iteration with linspace through For loop within class 
----------------------------------------

def __init__(self, b, h, y, ecu, cb, ct, fyd, fcd, Esd, Ned) :
INDENT
    self.filename = b
    self.x_value = None
    self.nrm_frc = None
    self.mom_cap = None
    self.bsstress = None
    self.tsstress = None
    self.bsstrain = None
    self.tsstrain = None
    self.parse_file(b, h, y, ecu, cb, ct, fyd, fcd, Esd, Ned)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    self.x = None
    self.Nrd = None
    self.Mrd = None
    self.es = None
    self.esc = None
    self.sisc = None
    self.sis = None

    if args or kwargs :
    INDENT
        self.check(* args, ** kwargs)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53357167_53361770_6_17
53357167_53364674_6_20
Title: control 'setAttribute' using button event 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainFrame, self).__init__(parent)
    self.setWindowFlags(Qt.FramelessWindowHint)
    self.setFixedSize(860, 560)
    layout = QtWidgets.QHBoxLayout(self)
    self.btn = QtWidgets.QPushButton("Make the background transparent ?")
    self.btn.setStyleSheet("""QPushButton { color : #000; font-size: 50px;}""")
    layout.addWidget(self.btn)
    self.btn.clicked.connect(self.Btn_clicked)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainFrame, self).__init__(parent)
    self.setWindowFlags(Qt.FramelessWindowHint)
    self.setFixedSize(400, 400)
    self.layout = QtWidgets.QHBoxLayout(self)
    self.btn = QtWidgets.QPushButton("TEST")
    self.layout.addWidget(self.btn)
    self.btn.clicked.connect(self.btn_clicked)
    self.setAttribute(Qt.WA_TranslucentBackground, True)
    self.setWindowFlags(Qt.FramelessWindowHint)
    self.istransparent = True
DEDENT
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
895371_21298077_4_16
895371_895755_1_17
Title: Bubble Sort Homework 
----------------------------------------

def bubble(badList) :
INDENT
    length = len(badList) - 1
    element = 0
    while element < length :
    INDENT
        if badList [element] > badList [element + 1] :
        INDENT
            hold = badList [element + 1]
            badList [element + 1] = badList [element]
            badList [element] = hold
            element = 0
            print badList
        DEDENT
        else :
        INDENT
            element = element + 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def bubble(badList) :
INDENT
    length = len(badList) - 1
    unsorted = True
    while unsorted :
    INDENT
        unsorted = False
        for element in range(0, length) :
        INDENT
            if badList [element] > badList [element + 1] :
            INDENT
                hold = badList [element + 1]
                badList [element + 1] = badList [element]
                badList [element] = hold
                unsorted = True

            DEDENT
        DEDENT
        return badList
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
895371_24583756_1_18
895371_37822474_1_11
Title: Bubble Sort Homework 
----------------------------------------

def bubble_sort(l) :
INDENT
    exchanged = True
    iteration = 0
    n = len(l)
    while (exchanged) :
    INDENT
        iteration += 1
        exchanged = False

        for i in range(n - 1) :
        INDENT
            if l [i] > l [i + 1] :
            INDENT
                exchanged = True
                l [i], l [i + 1] = l [i + 1], l [i]
            DEDENT
        DEDENT
        n -= 1
    DEDENT
    print 'Iterations: %s' % (iteration)
    return l
DEDENT
----------------------------------------

def bubble_sort(li) :
INDENT
    l = len(li)
    tmp = None
    sorted_l = sorted(li)
    while (li ! = sorted_l) :
    INDENT
        for ele in range(0, l - 1) :
        INDENT
            if li [ele] > li [ele + 1] :
            INDENT
                tmp = li [ele + 1]
                li [ele + 1] = li [ele]
                li [ele] = tmp
            DEDENT
        DEDENT
    DEDENT
    return li
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
895371_895405_1_12
895371_895733_1_14
Title: Bubble Sort Homework 
----------------------------------------

def bubble(values) :
INDENT
    length = len(values) - 1
    sorted = False
    while not sorted :
    INDENT
        sorted = True
        for element in range(0, length) :
        INDENT
            if values [element] > values [element + 1] :
            INDENT
                hold = values [element + 1]
                values [element + 1] = values [element]
                values [element] = hold
                sorted = False
            DEDENT
        DEDENT
    DEDENT
    return values
DEDENT
----------------------------------------

def bubble(badList) :
INDENT
    length = len(badList) - 1
    n = 0
    while n < len(badList) :
    INDENT
        for element in range(0, length) :
        INDENT
            if badList [element] > badList [element + 1] :
            INDENT
                hold = badList [element + 1]
                badList [element + 1] = badList [element]
                badList [element] = hold
                n = 0
            DEDENT
            else :
            INDENT
                n += 1
            DEDENT
        DEDENT
    DEDENT
    return badList
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
895371_895477_3_19
895371_895733_1_14
Title: Bubble Sort Homework 
----------------------------------------

def bubble(badList) :
INDENT
    length = len(badList) - 2
    unsorted = True
    while unsorted :
    INDENT
        for element in range(0, length) :
        INDENT
            unsorted = False
            if badList [element] > badList [element + 1] :
            INDENT
                hold = badList [element + 1]
                badList [element + 1] = badList [element]
                badList [element] = hold
                print badList
                unsorted = True
            DEDENT
        DEDENT
    DEDENT
    return badList
DEDENT
----------------------------------------

def bubble(badList) :
INDENT
    length = len(badList) - 1
    n = 0
    while n < len(badList) :
    INDENT
        for element in range(0, length) :
        INDENT
            if badList [element] > badList [element + 1] :
            INDENT
                hold = badList [element + 1]
                badList [element + 1] = badList [element]
                badList [element] = hold
                n = 0
            DEDENT
            else :
            INDENT
                n += 1
            DEDENT
        DEDENT
    DEDENT
    return badList
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
895371_895733_1_14
895371_895755_1_17
Title: Bubble Sort Homework 
----------------------------------------

def bubble(badList) :
INDENT
    length = len(badList) - 1
    n = 0
    while n < len(badList) :
    INDENT
        for element in range(0, length) :
        INDENT
            if badList [element] > badList [element + 1] :
            INDENT
                hold = badList [element + 1]
                badList [element + 1] = badList [element]
                badList [element] = hold
                n = 0
            DEDENT
            else :
            INDENT
                n += 1
            DEDENT
        DEDENT
    DEDENT
    return badList
DEDENT
----------------------------------------

def bubble(badList) :
INDENT
    length = len(badList) - 1
    unsorted = True
    while unsorted :
    INDENT
        unsorted = False
        for element in range(0, length) :
        INDENT
            if badList [element] > badList [element + 1] :
            INDENT
                hold = badList [element + 1]
                badList [element + 1] = badList [element]
                badList [element] = hold
                unsorted = True

            DEDENT
        DEDENT
        return badList
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
8955754_31927272_2_15
8955754_8955878_2_7
Title: Can I define a __repr__ for a class rather than an instance? 
----------------------------------------

def __repr__(cls) :
INDENT
    name = cls.__name__
    parents = ', '.join(b.__name__ for b in cls.__bases__)
    if parents :
    INDENT
        parents += ','
    DEDENT
    namespace = ', '.join(': '.join(
            (repr(k), repr(v) if not isinstance(v, type) else v.__name__)) for k, v in cls.__dict__.items())
    return 'Type(\'{0}\', ({1}), {{{2}}})'.format(name, parents, namespace)
DEDENT
----------------------------------------

def __repr__(cls) :
INDENT
    if hasattr(cls, '_class_repr') :
    INDENT
        return getattr(cls, '_class_repr')()
    DEDENT
    else :
    INDENT
        return super(Meta, cls).__repr__()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
8961627_8961720_1_49
8961627_8962511_1_16
Title: How to handle both integer and string from raw_input? 
----------------------------------------

def main() :
INDENT
    while 1 :
    INDENT
        print
        print "  Draw a Shape"
        print "  ============"
        print
        print "  1 - Draw a triangle"
        print "  2 - Draw a square"
        print "  3 - Draw a rectangle"
        print "  4 - Draw a pentagon"
        print "  5 - Draw a hexagon"
        print "  6 - Draw an octagon"
        print "  7 - Draw a circle"
        print
        print "  D - Display what was drawn"
        print "  X - Exit"
        print
        choice = raw_input('  Enter your choice: ').strip().upper()
        if choice == 'X' :
        INDENT
            break
        DEDENT
        elif choice == 'D' :
        INDENT
            log.show_log()
        DEDENT
        elif choice in ('1', '2', '3', '4', '5', '6', '7') :
        INDENT
            my_shape_num = h_m.how_many()
            if my_shape_num is None :
            INDENT
                continue
            DEDENT
            elif my_shape_num == 1 :
            INDENT
                d_s.start_point(0, 0)
            DEDENT
            else :
            INDENT
                d_s.start_point()
            DEDENT
            if choice == '1' :
            INDENT
                d_s.draw_triangle(my_shape_num)
            DEDENT
            elif choice == '2' :
            INDENT
                d_s.draw_square(my_shape_num)
            DEDENT
            elif choice == '3' :
            INDENT
                d_s.draw_rectangle(my_shape_num)
            DEDENT
            elif choice == '4' :
            INDENT
                d_s.draw_pentagon(my_shape_num)
            DEDENT
            elif choice == '5' :
            INDENT
                d_s.draw_hexagon(my_shape_num)
            DEDENT
            elif choice == '6' :
            INDENT
                d_s.draw_octagon(my_shape_num)
            DEDENT
            elif choice == '7' :
            INDENT
                d_s.draw_circle(my_shape_num)
            DEDENT
            d_s.t.end_fill()
        DEDENT
        else :
        INDENT
            print
            print '  Invalid choice: ' + choice
            print
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    options = {'1' : draw_triangle,
        '2' : draw_square,
        'D' : display_drawn,
        'X' : exit}
    display_menu()
    while 1 :
    INDENT
        choice = raw_input('  Enter your choice: ').upper()
        if choice in options :
        INDENT
            break
        DEDENT
        else :
        INDENT
            print 'Try Again!'
        DEDENT
    DEDENT
    action = options [choice]
    action()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
899273_29198207_3_12
899273_899616_3_12
Title: How to find a file upwardly in Python? 
----------------------------------------

def findup(filename, dir = os.getcwd()) :
INDENT
    def inner(drive, dir, filename) :
    INDENT
        filepath = os.path.join(drive, dir, filename)
        if os.path.isfile(filepath) :
        INDENT
            return filepath
        DEDENT
        if dir == os.path.sep :
        INDENT
            raise LookupError('file not found: %s' % filename)
        DEDENT
        return inner(drive, os.path.dirname(dir), filename)
    DEDENT
    drive, start = os.path.splitdrive(os.path.abspath(dir))
    return inner(drive, start, filename)
DEDENT
----------------------------------------

def findup(filename) :
INDENT
    drive, thisdir = os.path.splitdrive(os.getcwd())
    while True :
    INDENT
        fullpath = os.path.join(drive, thisdir, filename)
        if os.path.isfile(fullpath) :
        INDENT
            return fullpath
        DEDENT
        if thisdir == os.path.sep :
        INDENT
            raise LookupError('file not found: %r' % filename)
        DEDENT
        thisdir = os.path.dirname(thisdir)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9083165_9083198_1_11
9083165_9083241_3_19
Title: "Repeating while loop until cancel" 
----------------------------------------

def add_country() :
INDENT
    while True :
    INDENT
        new_short = raw_input('Country Name in short:')
        new_full = raw_input('Country Name in full:')
        countries [new_short] = new_full
        answer = raw_input('want to add more?')
        if answer == 'no' :
        INDENT
            return False
        DEDENT
        print countries
    DEDENT
DEDENT
----------------------------------------

def add_country() :
INDENT
    while True :
    INDENT
        new_short = raw_input('Country Name in short:')
        new_full = raw_input('Country Name in full:')
        countries [new_short] = new_full
        answer = raw_input('want to add more?')
        if answer in ('yes') :
        INDENT
            answer = True
            break
        DEDENT
        if answer in ('no') :
        INDENT
            answer = False
            break
        DEDENT
        print countries
        return answer

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9083165_9083224_3_14
9083165_9083241_3_19
Title: "Repeating while loop until cancel" 
----------------------------------------

def add_country() :
INDENT
    while True :
    INDENT
        new_short = raw_input('Country Name in short:')
        new_full = raw_input('Country Name in full:')
        countries [new_short] = new_full
        answer = raw_input('want to add more?')
        if answer ! = 'yes' :
        INDENT
            break
        DEDENT
    DEDENT
    print countries
DEDENT
----------------------------------------

def add_country() :
INDENT
    while True :
    INDENT
        new_short = raw_input('Country Name in short:')
        new_full = raw_input('Country Name in full:')
        countries [new_short] = new_full
        answer = raw_input('want to add more?')
        if answer in ('yes') :
        INDENT
            answer = True
            break
        DEDENT
        if answer in ('no') :
        INDENT
            answer = False
            break
        DEDENT
        print countries
        return answer

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9125832_9125909_2_11
9125832_9125987_2_13
Title: How can I add properties to a class using a decorator that takes a list of names as argument? 
----------------------------------------

def deco(cls) :
INDENT
    for attr_name in attr_names :
    INDENT
        def getAttr(self, attr_name = attr_name) :
        INDENT
            return getattr(self, "_" + attr_name)
        DEDENT
        def setAttr(self, value, attr_name = attr_name) :
        INDENT
            setattr(self, "_" + attr_name, value)
        DEDENT
        prop = property(getAttr, setAttr)
        setattr(cls, attr_name, prop)
        setattr(cls, "_" + attr_name, None)
    DEDENT
    return cls
DEDENT
----------------------------------------

def deco(cls) :
INDENT
    for attr_name in attr_names :
    INDENT
        def closure(attr) :
        INDENT
            def getAttr(self) :
            INDENT
                return getattr(self, "_" + attr)
            DEDENT
            def setAttr(self, value) :
            INDENT
                setattr(self, "_" + attr, value)
            DEDENT
            prop = property(getAttr, setAttr)
            setattr(cls, attr, prop)
            setattr(cls, "_" + attr, None)
        DEDENT
        closure(attr_name)
    DEDENT
    return cls
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9130453_9130563_1_9
9130453_9130631_3_12
Title: Access parent namespace in python 
----------------------------------------

def c() :
INDENT
    def a(locals_) :
    INDENT
        print locals_
    DEDENT
    def b() :
    INDENT
        pass
    DEDENT
    a(locals())
DEDENT
----------------------------------------

def c() :
INDENT
    def a() :
    INDENT
        frame = inspect.currentframe()
        print frame.f_back.f_locals
    DEDENT
    def b() :
    INDENT
        pass
    DEDENT
    a()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9134553_9140934_35_47
9134553_9140934_70_79
Title: Web.py todo list with login 
----------------------------------------

def POST(self) :
INDENT
    if not self.login_form.validates() :
    INDENT
        return render.login(self.login_form)
    DEDENT
    username = self.login_form ['username'].value
    password = self.login_form ['password'].value
    if (username, password) in allowed :
    INDENT
        session.logged_in = True
        raise web.seeother('/')
    DEDENT
    return render.login(self.login_form)

DEDENT
----------------------------------------

def POST(self) :
INDENT
    form = self.form()
    if not form.validates() :
    INDENT
        todos = model.get_todos()
        return render.index(todos, form)
    DEDENT
    model.new_todo(form.d.title)
    raise web.seeother('/')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9137071_9140130_23_33
9137071_9147471_18_24
Title: SqlAlchemy Model association based on record data 
----------------------------------------

def item(self, value) :
INDENT
    if isinstance(value, Car) :
    INDENT
        self.car = value
    DEDENT
    elif isinstance(value, Suv) :
    INDENT
        self.suv = value
    DEDENT
    elif value is None :
    INDENT
        self.car = None
        self.suv = None
    DEDENT
    else :
    INDENT
        raise ValueError("item must be Car or Suv")
    DEDENT
DEDENT
----------------------------------------

def item(self) :
INDENT
    if self.type == 'car' :
    INDENT
        return self._car
    DEDENT
    elif self.type == 'suv' :
    INDENT
        return self._suv
    DEDENT
    return None
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9137071_9140130_23_33
9137071_9147471_26_32
Title: SqlAlchemy Model association based on record data 
----------------------------------------

def item(self, value) :
INDENT
    if isinstance(value, Car) :
    INDENT
        self.car = value
    DEDENT
    elif isinstance(value, Suv) :
    INDENT
        self.suv = value
    DEDENT
    elif value is None :
    INDENT
        self.car = None
        self.suv = None
    DEDENT
    else :
    INDENT
        raise ValueError("item must be Car or Suv")
    DEDENT
DEDENT
----------------------------------------

def item(self, value) :
INDENT
    if value is not None :
    INDENT
        self.item_id = value.id
        self.type = value.__tablename__
    DEDENT
    else :
    INDENT
        self.item_id = None
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9137071_9147471_18_24
9137071_9147471_26_32
Title: SqlAlchemy Model association based on record data 
----------------------------------------

def item(self) :
INDENT
    if self.type == 'car' :
    INDENT
        return self._car
    DEDENT
    elif self.type == 'suv' :
    INDENT
        return self._suv
    DEDENT
    return None
DEDENT
----------------------------------------

def item(self, value) :
INDENT
    if value is not None :
    INDENT
        self.item_id = value.id
        self.type = value.__tablename__
    DEDENT
    else :
    INDENT
        self.item_id = None
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9144936_9147325_22_32
9144936_9147494_1_10
Title: Differentiating between signal sources in PySide 
----------------------------------------

def TxtChanged(self, text) :
INDENT
    sender = self.sender()

    self.data [sender.objectName()] = int(text)
    product = self.data ["multiplier"] * self.data ["multiplicand"]
    print (self.data ["multiplier"], self.data ["multiplicand"], product)
    self.a1a2_edit.setText(str(product))
DEDENT
----------------------------------------

def TxtChanged(self, text) :
INDENT
    try :
    INDENT
        multiplier = int(self.a1_edit.text())
        multiplicand = int(self.a2_edit.text())
    DEDENT
    except ValueError :
    INDENT
        self.a1a2_edit.setText('Enter two numbers')
        return
    DEDENT
    product = multiplier * multiplicand
    print (multiplier, multiplicand, product)
    self.a1a2_edit.setText(str(product))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9165338_9165816_14_27
9165338_9165816_35_50
Title: python threading between two classes not working properly 
----------------------------------------

def run(self) :
INDENT
    print 'Server started!'
    print 'Waiting for clients...'
    self.s.bind((self.host, self.port))
    self.s.listen(5)
    c, addr = self.s.accept()
    print 'Got connection from', addr
    while True :
    INDENT
        time.sleep(2)
        msg = c.recv(1024)
        if len(msg) == 0 : break
        print addr, ' >> ', msg
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        time.sleep(5)
        print 'Connecting to ', self.host, self.port
        try :
        INDENT
            self.s.connect((self.host, self.port))
            break
        DEDENT
        except Exception as err :
        INDENT
            print "Waiting", err
        DEDENT
    DEDENT
    print "Connectd"
    while True :
    INDENT
        time.sleep(2)
        msg = raw_input('CLIENT >> ')
        if len(msg) == 0 : break
        self.s.send(msg)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9166087_11930967_6_28
9166087_9166163_9_34
Title: Move row up and down in PyQT4 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWidget.__init__(self, parent)

    self.move_up = QtGui.QAction("Move_Up", self)
    self.connect(self.move_up, QtCore.SIGNAL('triggered()'), self.moveUp)
    self.move_down = QtGui.QAction("Move_Down", self)
    self.connect(self.move_down, QtCore.SIGNAL('triggered()'), self.moveDown)
    self.toolbar = self.addToolBar('Toolbar')
    self.toolbar.addAction(self.move_up)
    self.toolbar.addAction(self.move_down)

    self.table = QtGui.QTableWidget(4, 3)
    for i in range(0, 4) :
    INDENT
        for j in range(0, 4) :
        INDENT
            self.table.setItem(i, j, QtGui.QTableWidgetItem("a_" + str(i) + str(j)))
        DEDENT
    DEDENT
    self.setCentralWidget(self.table)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Dialog, self).__init__(parent)
    self.resize(800, 600)
    self.table = QtGui.QTableView(self)
    self.table.setSelectionBehavior(self.table.SelectRows)
    self.model = QtGui.QStandardItemModel(20, 6, self)
    self.table.setModel(self.model)
    self.upBtn = QtGui.QPushButton('Up', self)
    self.downBtn = QtGui.QPushButton('Down', self)
    self.mainLayout = QtGui.QVBoxLayout(self)
    self.mainLayout.addWidget(self.table)
    self.buttonLayout = QtGui.QHBoxLayout()
    self.buttonLayout.addWidget(self.upBtn)
    self.buttonLayout.addWidget(self.downBtn)
    self.mainLayout.addLayout(self.buttonLayout)
    self.upBtn.clicked.connect(partial(self.moveCurrentRow, self.UP))
    self.downBtn.clicked.connect(partial(self.moveCurrentRow, self.DOWN))
    self._initTable()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9177667_9178423_4_10
9177667_9181815_3_31
Title: Split single column csv file into unequal parts 
----------------------------------------

def split_2_3(filename) :
INDENT
    with open(filename) as f :
    INDENT
        it = (line.strip() for line in f)
        while True :
        INDENT
            yield next(it), next(it), "*"
            yield next(it), next(it), next(it)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def split_2_3(filename, cnt = 0) :
INDENT
    dd = {0 : [], 1 : [], 2 : []}
    ecr = []
    with open(filename) as f :
    INDENT
        for i, line in enumerate(f) :
        INDENT
            ecr.append('\nline %d : %r\n' % (i, line))
            if (i + cnt - 2) % 6 :
            INDENT
                ecr.append('%r put in dd[%d]\n'
                    % (line.strip(), (i + cnt) % 3))
                dd [(i + cnt) % 3].append(line.strip().rjust(5))
            DEDENT
            else :
            INDENT
                ecr.append("'*' put in dd[%d]"
                    % ((i + cnt) % 3))
                dd [(i + cnt) % 3].append('*'.rjust(5))
                cnt += 1
                ecr.append('  and  %r put in dd[%d]\n'
                    % (line.strip(), (i + cnt) % 3))
                dd [(i + cnt) % 3].append(line.strip().rjust(5))
            DEDENT
        DEDENT
        while (i + cnt) % 3 ! = 2 :
        INDENT
            i += 1
            dd [(i + cnt) % 3].append('*'.rjust(5))
        DEDENT
    DEDENT
    print ''.join(ecr)
    yield dd [0]
    yield dd [1]
    yield dd [2]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9190169_9190706_9_14
9190169_9201027_11_21
Title: Threading and information passing -- how to 
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        teststring = self.workQueue.get()
        for i in range(self.repeatCount) :
        INDENT
            print teststring
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    data = ''
    while 1 :
    INDENT
        with self.queueLock :
        INDENT
            if not self.workQueue.empty() :
            INDENT
                data = self.workQueue.get()
                print data
                print self.count
            DEDENT
        DEDENT
        if data == 'quit' :
        INDENT
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9204112_9204122_1_11
9204112_9204186_1_10
Title: Passing variables in Python 
----------------------------------------

def read_one_file() :
INDENT
    f = open('C:\Python27\inventory.dat', 'r')
    invid = f.readline()
    stock = f.readline()
    published = f.readline()
    price = f.readline()
    invtype = f.readline()
    title = f.readline()
    author = f.readline()
    return invid, stock, published, price, invtype, title, author
DEDENT
----------------------------------------

def read_one_file() :
INDENT
    with open('C:\Python27\inventory.dat', 'r') as f :
    INDENT
        return dict(invid = f.readline().strip(),
            stock = f.readline().strip(),
            published = f.readline().strip(),
            price = f.readline().strip(),
            invtype = f.readline().strip(),
            title = f.readline().strip(),
            author = f.readline().strip())
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9204112_9204122_1_11
9204112_9204215_1_7
Title: Passing variables in Python 
----------------------------------------

def read_one_file() :
INDENT
    f = open('C:\Python27\inventory.dat', 'r')
    invid = f.readline()
    stock = f.readline()
    published = f.readline()
    price = f.readline()
    invtype = f.readline()
    title = f.readline()
    author = f.readline()
    return invid, stock, published, price, invtype, title, author
DEDENT
----------------------------------------

def read_one_file(fname = r'C:\Python27\inventory.dat') :
INDENT
    with open(fname) as f :
    INDENT
        spam = [line.strip() for line in f.readlines()]
    DEDENT
    keys = ['invid', 'stock', 'published', 'price', 'invtype', 'title', 'author']
    inventory_item = dict(zip(keys, spam [: len(keys)]))
    return inventory_item
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9204112_9204186_1_10
9204112_9204215_1_7
Title: Passing variables in Python 
----------------------------------------

def read_one_file() :
INDENT
    with open('C:\Python27\inventory.dat', 'r') as f :
    INDENT
        return dict(invid = f.readline().strip(),
            stock = f.readline().strip(),
            published = f.readline().strip(),
            price = f.readline().strip(),
            invtype = f.readline().strip(),
            title = f.readline().strip(),
            author = f.readline().strip())
    DEDENT
DEDENT
----------------------------------------

def read_one_file(fname = r'C:\Python27\inventory.dat') :
INDENT
    with open(fname) as f :
    INDENT
        spam = [line.strip() for line in f.readlines()]
    DEDENT
    keys = ['invid', 'stock', 'published', 'price', 'invtype', 'title', 'author']
    inventory_item = dict(zip(keys, spam [: len(keys)]))
    return inventory_item
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9204112_9204186_1_10
9204112_9204369_1_10
Title: Passing variables in Python 
----------------------------------------

def read_one_file() :
INDENT
    with open('C:\Python27\inventory.dat', 'r') as f :
    INDENT
        return dict(invid = f.readline().strip(),
            stock = f.readline().strip(),
            published = f.readline().strip(),
            price = f.readline().strip(),
            invtype = f.readline().strip(),
            title = f.readline().strip(),
            author = f.readline().strip())
    DEDENT
DEDENT
----------------------------------------

def read_one_file() :
INDENT
    f = open('C:\Python27\inventory.dat', 'r')
    invid = f.readline()
    stock = f.readline()
    published = f.readline()
    price = f.readline()
    invtype = f.readline()
    title = f.readline()
    author = f.readline()
    return invid, stock, published, price, invtype, title, author
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9204112_9204215_1_7
9204112_9204369_1_10
Title: Passing variables in Python 
----------------------------------------

def read_one_file(fname = r'C:\Python27\inventory.dat') :
INDENT
    with open(fname) as f :
    INDENT
        spam = [line.strip() for line in f.readlines()]
    DEDENT
    keys = ['invid', 'stock', 'published', 'price', 'invtype', 'title', 'author']
    inventory_item = dict(zip(keys, spam [: len(keys)]))
    return inventory_item
DEDENT
----------------------------------------

def read_one_file() :
INDENT
    f = open('C:\Python27\inventory.dat', 'r')
    invid = f.readline()
    stock = f.readline()
    published = f.readline()
    price = f.readline()
    invtype = f.readline()
    title = f.readline()
    author = f.readline()
    return invid, stock, published, price, invtype, title, author
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9230327_9230547_1_15
9230327_9230936_6_16
Title: Recursion and Python issue 
----------------------------------------

def f(used) :
INDENT
    new = []
    while len(new) == 0 :
    INDENT
        while i < something :
        INDENT
            new.append(i)
            i += 1
        DEDENT
        for i in new :
        INDENT
            if i in used :
            INDENT
                new = []
                break
            DEDENT
        DEDENT
    DEDENT
    return new
DEDENT
----------------------------------------

def f(new, size) :
INDENT
    if len(new.difference(used)) < size :
    INDENT
        new.add(random.randint(0, 100))

        new = f(new, size)
    DEDENT
    return new.difference(used)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9258602_15058186_27_32
9258602_53354024_29_34
Title: Elegant pythonic cumsum 
----------------------------------------

def cumsum_rking(iterable) :
INDENT
    values = list(iterable)
    for pos in xrange(1, len(values)) :
    INDENT
        values [pos] += values [pos - 1]
    DEDENT
    return values
DEDENT
----------------------------------------

def cumsum_rking(iterable) :
INDENT
    values = list(iterable)
    for pos in range(1, len(values)) :
    INDENT
        values [pos] += values [pos - 1]
    DEDENT
    return values
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9258602_15058186_38_43
9258602_53354024_40_45
Title: Elegant pythonic cumsum 
----------------------------------------

def cumsum_larsmans(iterable) :
INDENT
    total = 0
    for value in iterable :
    INDENT
        total += value
        yield total
    DEDENT
DEDENT
----------------------------------------

def cumsum_larsmans(iterable) :
INDENT
    total = 0
    for value in iterable :
    INDENT
        total += value
        yield total
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9277479_9277543_1_10
9277479_9278962_1_12
Title: What's the most efficient way to zip two nested list to a single level dictionary 
----------------------------------------

def flatten(it) :
INDENT
    if isinstance(it, str) :
    INDENT
        yield it
        return
    DEDENT
    try :
    INDENT
        for x in it :
        INDENT
            for y in flatten(x) :
            INDENT
                yield y
            DEDENT
        DEDENT
    DEDENT
    except TypeError :
    INDENT
        yield it
    DEDENT
DEDENT
----------------------------------------

def flatten(seq, * seq_types) :
INDENT
    stack = [iter(seq)]
    while stack :
    INDENT
        for item in stack [- 1] :
        INDENT
            if isinstance(item, seq_types) :
            INDENT
                stack.append(iter(item))
                break
            DEDENT
            else :
            INDENT
                yield item
            DEDENT
        DEDENT
        else :
        INDENT
            stack.pop()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9371495_9371534_1_10
9371495_9371621_1_11
Title: Returning a copy of the list in which one instance of every value is removed 
----------------------------------------

def rem(iterable) :
INDENT
    result = []
    seen = set()
    for x in iterable :
    INDENT
        if x in seen :
        INDENT
            result.append(x)
        DEDENT
        else :
        INDENT
            seen.add(x)
        DEDENT
    DEDENT
    result.sort()
    return result
DEDENT
----------------------------------------

def rem(nlist) :
INDENT
    n = []
    nlist.sort()
    cur = None
    for x in nlist :
    INDENT
        if x == cur :
        INDENT
            n.append(x)
        DEDENT
        cur = x
    DEDENT
    return n
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9377914_10712258_12_66
9377914_10712258_94_120
Title: How to customize title bar and window of desktop application 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWidget.__init__(self, parent)
    self.setWindowFlags(Qt.FramelessWindowHint);
    css = """
        QWidget{
            Background: #AA00AA;
            color:white;
            font:12px bold;
            font-weight:bold;
            border-radius: 1px;
            height: 11px;
        }
        QDialog{
            Background-image:url('img/titlebar bg.png');
            font-size:12px;
            color: black;

        }
        QToolButton{
            Background:#AA00AA;
            font-size:11px;
        }
        QToolButton:hover{
            Background: #FF00FF;
            font-size:11px;
        }
        """
    self.setAutoFillBackground(True)
    self.setBackgroundRole(QtGui.QPalette.Highlight)
    self.setStyleSheet(css)
    self.minimize = QtGui.QToolButton(self);
    self.minimize.setIcon(QtGui.QIcon('img/min.png'));
    self.maximize = QtGui.QToolButton(self);
    self.maximize.setIcon(QtGui.QIcon('img/max.png'));
    close = QtGui.QToolButton(self);
    close.setIcon(QtGui.QIcon('img/close.png'));
    self.minimize.setMinimumHeight(10);
    close.setMinimumHeight(10);
    self.maximize.setMinimumHeight(10);
    label = QtGui.QLabel(self);
    label.setText("Window Title");
    self.setWindowTitle("Window Title");
    hbox = QtGui.QHBoxLayout(self);
    hbox.addWidget(label);
    hbox.addWidget(self.minimize);
    hbox.addWidget(self.maximize);
    hbox.addWidget(close);
    hbox.insertStretch(1, 500);
    hbox.setSpacing(0);
    self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed);
    self.maxNormal = False;
    close.clicked.connect(self.close);
    self.minimize.clicked.connect(self.showSmall);
    self.maximize.clicked.connect(self.showMaxRestore);
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QFrame.__init__(self, parent)
    self.m_mouse_down = False;
    self.setFrameShape(QtGui.QFrame.StyledPanel)
    css = """
        QFrame{
            Background:  #D700D7;
            color:white;
            font:13px ;
            font-weight:bold;
            }
        """
    self.setStyleSheet(css)
    self.setWindowFlags(Qt.FramelessWindowHint);
    self.setMouseTracking(True);
    self.m_titleBar = TitleBar(self);
    self.m_content = QtGui.QWidget(self);
    vbox = QtGui.QVBoxLayout(self);
    vbox.addWidget(self.m_titleBar);
    vbox.setMargin(0);
    vbox.setSpacing(0);
    layout = QtGui.QVBoxLayout(self);
    layout.addWidget(self.m_content);
    layout.setMargin(5);
    layout.setSpacing(0);
    vbox.addLayout(layout);
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9377914_10712258_12_66
9377914_40044028_12_66
Title: How to customize title bar and window of desktop application 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWidget.__init__(self, parent)
    self.setWindowFlags(Qt.FramelessWindowHint);
    css = """
        QWidget{
            Background: #AA00AA;
            color:white;
            font:12px bold;
            font-weight:bold;
            border-radius: 1px;
            height: 11px;
        }
        QDialog{
            Background-image:url('img/titlebar bg.png');
            font-size:12px;
            color: black;

        }
        QToolButton{
            Background:#AA00AA;
            font-size:11px;
        }
        QToolButton:hover{
            Background: #FF00FF;
            font-size:11px;
        }
        """
    self.setAutoFillBackground(True)
    self.setBackgroundRole(QtGui.QPalette.Highlight)
    self.setStyleSheet(css)
    self.minimize = QtGui.QToolButton(self);
    self.minimize.setIcon(QtGui.QIcon('img/min.png'));
    self.maximize = QtGui.QToolButton(self);
    self.maximize.setIcon(QtGui.QIcon('img/max.png'));
    close = QtGui.QToolButton(self);
    close.setIcon(QtGui.QIcon('img/close.png'));
    self.minimize.setMinimumHeight(10);
    close.setMinimumHeight(10);
    self.maximize.setMinimumHeight(10);
    label = QtGui.QLabel(self);
    label.setText("Window Title");
    self.setWindowTitle("Window Title");
    hbox = QtGui.QHBoxLayout(self);
    hbox.addWidget(label);
    hbox.addWidget(self.minimize);
    hbox.addWidget(self.maximize);
    hbox.addWidget(close);
    hbox.insertStretch(1, 500);
    hbox.setSpacing(0);
    self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed);
    self.maxNormal = False;
    close.clicked.connect(self.close);
    self.minimize.clicked.connect(self.showSmall);
    self.maximize.clicked.connect(self.showMaxRestore);
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtWidgets.QWidget.__init__(self, parent)
    self.setWindowFlags(Qt.FramelessWindowHint)
    css = """
        QWidget{
            Background: #AA00AA;
            color:white;
            font:12px bold;
            font-weight:bold;
            border-radius: 1px;
            height: 11px;
        }
        QDialog{
            Background-image:url('img/titlebar bg.png');
            font-size:12px;
            color: black;

        }
        QToolButton{
            Background:#AA00AA;
            font-size:11px;
        }
        QToolButton:hover{
            Background: #FF00FF;
            font-size:11px;
        }
        """
    self.setAutoFillBackground(True)
    self.setBackgroundRole(QtGui.QPalette.Highlight)
    self.setStyleSheet(css)
    self.minimize = QtWidgets.QToolButton(self)
    self.minimize.setIcon(QtGui.QIcon('img/min.png'))
    self.maximize = QtWidgets.QToolButton(self)
    self.maximize.setIcon(QtGui.QIcon('img/max.png'))
    close = QtWidgets.QToolButton(self)
    close.setIcon(QtGui.QIcon('img/close.png'))
    self.minimize.setMinimumHeight(10)
    close.setMinimumHeight(10)
    self.maximize.setMinimumHeight(10)
    label = QtWidgets.QLabel(self)
    label.setText("Window Title")
    self.setWindowTitle("Window Title")
    hbox = QtWidgets.QHBoxLayout(self)
    hbox.addWidget(label)
    hbox.addWidget(self.minimize)
    hbox.addWidget(self.maximize)
    hbox.addWidget(close)
    hbox.insertStretch(1, 500)
    hbox.setSpacing(0)
    self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
    self.maxNormal = False
    close.clicked.connect(self.close)
    self.minimize.clicked.connect(self.showSmall)
    self.maximize.clicked.connect(self.showMaxRestore)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9377914_10712258_12_66
9377914_40044028_95_123
Title: How to customize title bar and window of desktop application 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWidget.__init__(self, parent)
    self.setWindowFlags(Qt.FramelessWindowHint);
    css = """
        QWidget{
            Background: #AA00AA;
            color:white;
            font:12px bold;
            font-weight:bold;
            border-radius: 1px;
            height: 11px;
        }
        QDialog{
            Background-image:url('img/titlebar bg.png');
            font-size:12px;
            color: black;

        }
        QToolButton{
            Background:#AA00AA;
            font-size:11px;
        }
        QToolButton:hover{
            Background: #FF00FF;
            font-size:11px;
        }
        """
    self.setAutoFillBackground(True)
    self.setBackgroundRole(QtGui.QPalette.Highlight)
    self.setStyleSheet(css)
    self.minimize = QtGui.QToolButton(self);
    self.minimize.setIcon(QtGui.QIcon('img/min.png'));
    self.maximize = QtGui.QToolButton(self);
    self.maximize.setIcon(QtGui.QIcon('img/max.png'));
    close = QtGui.QToolButton(self);
    close.setIcon(QtGui.QIcon('img/close.png'));
    self.minimize.setMinimumHeight(10);
    close.setMinimumHeight(10);
    self.maximize.setMinimumHeight(10);
    label = QtGui.QLabel(self);
    label.setText("Window Title");
    self.setWindowTitle("Window Title");
    hbox = QtGui.QHBoxLayout(self);
    hbox.addWidget(label);
    hbox.addWidget(self.minimize);
    hbox.addWidget(self.maximize);
    hbox.addWidget(close);
    hbox.insertStretch(1, 500);
    hbox.setSpacing(0);
    self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed);
    self.maxNormal = False;
    close.clicked.connect(self.close);
    self.minimize.clicked.connect(self.showSmall);
    self.maximize.clicked.connect(self.showMaxRestore);
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtWidgets.QFrame.__init__(self, parent)
    self.m_mouse_down = False
    self.setFrameShape(QtWidgets.QFrame.StyledPanel)
    css = """
        QFrame{
            Background:  #D700D7;
            color:white;
            font:13px ;
            font-weight:bold;
            }
        """
    self.setStyleSheet(css)
    self.setWindowFlags(Qt.FramelessWindowHint)
    self.setMouseTracking(True)
    self.m_titleBar = TitleBar(self)
    self.m_content = QtWidgets.QWidget(self)
    vbox = QtWidgets.QVBoxLayout(self)
    vbox.addWidget(self.m_titleBar)
    vbox.setContentsMargins(0, 0, 0, 0)
    vbox.setSpacing(0)
    layout = QtWidgets.QVBoxLayout()
    layout.addWidget(self.m_content)
    layout.setContentsMargins(5, 5, 5, 5)
    layout.setSpacing(0)
    vbox.addLayout(layout)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9377914_10712258_70_81
9377914_40044028_70_81
Title: How to customize title bar and window of desktop application 
----------------------------------------

def showMaxRestore(self) :
INDENT
    if (self.maxNormal) :
    INDENT
        box.showNormal();
        self.maxNormal = False;
        self.maximize.setIcon(QtGui.QIcon('img/max.png'));
        print '1'
    DEDENT
    else :
    INDENT
        box.showMaximized();
        self.maxNormal = True;
        print '2'
        self.maximize.setIcon(QtGui.QIcon('img/max2.png'));
    DEDENT
DEDENT
----------------------------------------

def showMaxRestore(self) :
INDENT
    if (self.maxNormal) :
    INDENT
        box.showNormal()
        self.maxNormal = False
        self.maximize.setIcon(QtGui.QIcon('img/max.png'))
        print ('1')
    DEDENT
    else :
    INDENT
        box.showMaximized()
        self.maxNormal = True
        print ('2')
        self.maximize.setIcon(QtGui.QIcon('img/max2.png'))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9377914_10712258_94_120
9377914_40044028_12_66
Title: How to customize title bar and window of desktop application 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QFrame.__init__(self, parent)
    self.m_mouse_down = False;
    self.setFrameShape(QtGui.QFrame.StyledPanel)
    css = """
        QFrame{
            Background:  #D700D7;
            color:white;
            font:13px ;
            font-weight:bold;
            }
        """
    self.setStyleSheet(css)
    self.setWindowFlags(Qt.FramelessWindowHint);
    self.setMouseTracking(True);
    self.m_titleBar = TitleBar(self);
    self.m_content = QtGui.QWidget(self);
    vbox = QtGui.QVBoxLayout(self);
    vbox.addWidget(self.m_titleBar);
    vbox.setMargin(0);
    vbox.setSpacing(0);
    layout = QtGui.QVBoxLayout(self);
    layout.addWidget(self.m_content);
    layout.setMargin(5);
    layout.setSpacing(0);
    vbox.addLayout(layout);
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtWidgets.QWidget.__init__(self, parent)
    self.setWindowFlags(Qt.FramelessWindowHint)
    css = """
        QWidget{
            Background: #AA00AA;
            color:white;
            font:12px bold;
            font-weight:bold;
            border-radius: 1px;
            height: 11px;
        }
        QDialog{
            Background-image:url('img/titlebar bg.png');
            font-size:12px;
            color: black;

        }
        QToolButton{
            Background:#AA00AA;
            font-size:11px;
        }
        QToolButton:hover{
            Background: #FF00FF;
            font-size:11px;
        }
        """
    self.setAutoFillBackground(True)
    self.setBackgroundRole(QtGui.QPalette.Highlight)
    self.setStyleSheet(css)
    self.minimize = QtWidgets.QToolButton(self)
    self.minimize.setIcon(QtGui.QIcon('img/min.png'))
    self.maximize = QtWidgets.QToolButton(self)
    self.maximize.setIcon(QtGui.QIcon('img/max.png'))
    close = QtWidgets.QToolButton(self)
    close.setIcon(QtGui.QIcon('img/close.png'))
    self.minimize.setMinimumHeight(10)
    close.setMinimumHeight(10)
    self.maximize.setMinimumHeight(10)
    label = QtWidgets.QLabel(self)
    label.setText("Window Title")
    self.setWindowTitle("Window Title")
    hbox = QtWidgets.QHBoxLayout(self)
    hbox.addWidget(label)
    hbox.addWidget(self.minimize)
    hbox.addWidget(self.maximize)
    hbox.addWidget(close)
    hbox.insertStretch(1, 500)
    hbox.setSpacing(0)
    self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
    self.maxNormal = False
    close.clicked.connect(self.close)
    self.minimize.clicked.connect(self.showSmall)
    self.maximize.clicked.connect(self.showMaxRestore)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9377914_10712258_94_120
9377914_40044028_95_123
Title: How to customize title bar and window of desktop application 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QFrame.__init__(self, parent)
    self.m_mouse_down = False;
    self.setFrameShape(QtGui.QFrame.StyledPanel)
    css = """
        QFrame{
            Background:  #D700D7;
            color:white;
            font:13px ;
            font-weight:bold;
            }
        """
    self.setStyleSheet(css)
    self.setWindowFlags(Qt.FramelessWindowHint);
    self.setMouseTracking(True);
    self.m_titleBar = TitleBar(self);
    self.m_content = QtGui.QWidget(self);
    vbox = QtGui.QVBoxLayout(self);
    vbox.addWidget(self.m_titleBar);
    vbox.setMargin(0);
    vbox.setSpacing(0);
    layout = QtGui.QVBoxLayout(self);
    layout.addWidget(self.m_content);
    layout.setMargin(5);
    layout.setSpacing(0);
    vbox.addLayout(layout);
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtWidgets.QFrame.__init__(self, parent)
    self.m_mouse_down = False
    self.setFrameShape(QtWidgets.QFrame.StyledPanel)
    css = """
        QFrame{
            Background:  #D700D7;
            color:white;
            font:13px ;
            font-weight:bold;
            }
        """
    self.setStyleSheet(css)
    self.setWindowFlags(Qt.FramelessWindowHint)
    self.setMouseTracking(True)
    self.m_titleBar = TitleBar(self)
    self.m_content = QtWidgets.QWidget(self)
    vbox = QtWidgets.QVBoxLayout(self)
    vbox.addWidget(self.m_titleBar)
    vbox.setContentsMargins(0, 0, 0, 0)
    vbox.setSpacing(0)
    layout = QtWidgets.QVBoxLayout()
    layout.addWidget(self.m_content)
    layout.setContentsMargins(5, 5, 5, 5)
    layout.setSpacing(0)
    vbox.addLayout(layout)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9377914_40044028_12_66
9377914_40044028_95_123
Title: How to customize title bar and window of desktop application 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtWidgets.QWidget.__init__(self, parent)
    self.setWindowFlags(Qt.FramelessWindowHint)
    css = """
        QWidget{
            Background: #AA00AA;
            color:white;
            font:12px bold;
            font-weight:bold;
            border-radius: 1px;
            height: 11px;
        }
        QDialog{
            Background-image:url('img/titlebar bg.png');
            font-size:12px;
            color: black;

        }
        QToolButton{
            Background:#AA00AA;
            font-size:11px;
        }
        QToolButton:hover{
            Background: #FF00FF;
            font-size:11px;
        }
        """
    self.setAutoFillBackground(True)
    self.setBackgroundRole(QtGui.QPalette.Highlight)
    self.setStyleSheet(css)
    self.minimize = QtWidgets.QToolButton(self)
    self.minimize.setIcon(QtGui.QIcon('img/min.png'))
    self.maximize = QtWidgets.QToolButton(self)
    self.maximize.setIcon(QtGui.QIcon('img/max.png'))
    close = QtWidgets.QToolButton(self)
    close.setIcon(QtGui.QIcon('img/close.png'))
    self.minimize.setMinimumHeight(10)
    close.setMinimumHeight(10)
    self.maximize.setMinimumHeight(10)
    label = QtWidgets.QLabel(self)
    label.setText("Window Title")
    self.setWindowTitle("Window Title")
    hbox = QtWidgets.QHBoxLayout(self)
    hbox.addWidget(label)
    hbox.addWidget(self.minimize)
    hbox.addWidget(self.maximize)
    hbox.addWidget(close)
    hbox.insertStretch(1, 500)
    hbox.setSpacing(0)
    self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
    self.maxNormal = False
    close.clicked.connect(self.close)
    self.minimize.clicked.connect(self.showSmall)
    self.maximize.clicked.connect(self.showMaxRestore)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtWidgets.QFrame.__init__(self, parent)
    self.m_mouse_down = False
    self.setFrameShape(QtWidgets.QFrame.StyledPanel)
    css = """
        QFrame{
            Background:  #D700D7;
            color:white;
            font:13px ;
            font-weight:bold;
            }
        """
    self.setStyleSheet(css)
    self.setWindowFlags(Qt.FramelessWindowHint)
    self.setMouseTracking(True)
    self.m_titleBar = TitleBar(self)
    self.m_content = QtWidgets.QWidget(self)
    vbox = QtWidgets.QVBoxLayout(self)
    vbox.addWidget(self.m_titleBar)
    vbox.setContentsMargins(0, 0, 0, 0)
    vbox.setSpacing(0)
    layout = QtWidgets.QVBoxLayout()
    layout.addWidget(self.m_content)
    layout.setContentsMargins(5, 5, 5, 5)
    layout.setSpacing(0)
    vbox.addLayout(layout)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9378894_9384328_21_57
9378894_9384328_6_19
Title: How to add a fixed header to a QScrollArea? 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QScrollArea.__init__(self, parent)
    self.grid_widget = QWidget()
    self.grid_layout = QGridLayout()
    self.grid_widget.setLayout(self.grid_layout)
    self.setWidgetResizable(True)
    self.setWidget(self.grid_widget)
    self.margins = QMargins(0, 30, 0, 0)
    self.setViewportMargins(self.margins)
    self.headings_widget = QWidget(self)
    self.headings_layout = QGridLayout()
    self.headings_widget.setLayout(self.headings_layout)
    self.headings_layout.setContentsMargins(1, 1, 0, 0)
    self.heading_label1 = QLabel("Column 1")
    self.heading_label1.setContentsMargins(16, 0, 0, 0)
    self.heading_label2 = QLabel("Col 2")
    self.heading_label2.setAlignment(Qt.AlignCenter)
    self.heading_label2.setMaximumWidth(65)
    self.heading_label3 = QLabel("Column 3")
    self.heading_label3.setContentsMargins(8, 0, 0, 0)
    self.headings_layout.addWidget(self.heading_label1, 0, 0)
    self.headings_layout.addWidget(self.heading_label2, 0, 1)
    self.headings_layout.addWidget(self.heading_label3, 0, 2)
    self.headings_widget.setStyleSheet(
        "background: green; border-bottom: 1px solid black;")
    rows_to_add = 10
    for i in range(rows_to_add) :
    INDENT
        col1 = QLineEdit()
        col2 = QLineEdit()
        col2.setMaximumWidth(65)
        col3 = QLineEdit()
        row = self.grid_layout.rowCount()
        self.grid_layout.addWidget(col1, row, 0)
        self.grid_layout.addWidget(col2, row, 1)
        self.grid_layout.addWidget(col3, row, 2)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    self.setMinimumSize(640, 480)
    self.container_widget = QWidget()
    self.container_layout = QVBoxLayout()
    self.container_widget.setLayout(self.container_layout)
    self.setCentralWidget(self.container_widget)
    self.grid_scrollarea = ScrollArea(self)
    self.test_group = QGroupBox("Results")
    self.test_layout = QVBoxLayout()
    self.test_group.setLayout(self.test_layout)
    self.test_layout.addWidget(self.grid_scrollarea)
    self.container_layout.addWidget(self.test_group)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9389307_9389488_16_20
9389307_9389488_5_9
Title: How do I create a bounded memoization decorator in Python? 
----------------------------------------

def memo_target(* args) :
INDENT
    lookup_value = args
    if lookup_value not in cache :
    INDENT
        cache [lookup_value] = function(* args)
    DEDENT
    return cache [lookup_value]
DEDENT
----------------------------------------

def memo_target(* args) :
INDENT
    lookup_value = args
    if lookup_value not in cache :
    INDENT
        cache [lookup_value] = arg(* args)
    DEDENT
    return cache [lookup_value]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9401658_24216269_11_27
9401658_9416663_7_16
Title: How to animate a scatter plot? 
----------------------------------------

def __init__(self) :
INDENT
    self.fig = Figure()
    self.ax = self.fig.add_subplot(111)
    FigureCanvas.__init__(self, self.fig)
    self.x = np.linspace(0, 5 * np.pi, 400)
    self.p = 0.0
    self.y = np.sin(self.x + self.p)

    self.line = self.ax.scatter(self.x, self.y)
    self.fig.canvas.draw()
    self.timer = self.startTimer(100)

DEDENT
----------------------------------------

def __init__(self, numpoints = 50) :
INDENT
    self.numpoints = numpoints
    self.stream = self.data_stream()

    self.fig, self.ax = plt.subplots()
    self.ani = animation.FuncAnimation(self.fig, self.update, interval = 5,
        init_func = self.setup_plot, blit = True)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9451395_9456046_37_51
9451395_9456046_60_67
Title: Customize x-axis in matplotlib 
----------------------------------------

def __call__(self) :
INDENT
    vmin, vmax = self.axis.get_view_interval()
    vmin, vmax = self.rescale(vmin), self.rescale(vmax)
    vmin, vmax = mpl.transforms.nonsingular(vmin, vmax, expander = 0.05)
    locs = self.bin_boundaries(vmin, vmax)
    locs = self.inv_rescale(locs)
    prune = self._prune
    if prune == 'lower' :
    INDENT
        locs = locs [1 :]
    DEDENT
    elif prune == 'upper' :
    INDENT
        locs = locs [: - 1]
    DEDENT
    elif prune == 'both' :
    INDENT
        locs = locs [1 : - 1]
    DEDENT
    return self.raise_if_exceeds(locs)
DEDENT
----------------------------------------

def __call__(self, x, pos = None) :
INDENT
    xmin, xmax = self.axis.get_view_interval()
    xmin, xmax = self.rescale(xmin), self.rescale(xmax)
    d = abs(xmax - xmin)
    x = self.rescale(x)
    s = self.pprint_val(x, d)
    return s
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9458271_17333553_1_14
9458271_23667945_4_16
Title: Currying decorator in python 
----------------------------------------

def curried(function) :
INDENT
    argc = function.__code__.co_argcount

    if argc == 0 :
    INDENT
        return function
    DEDENT
    from functools import partial
    def func(* args) :
    INDENT
        if len(args) > = argc :
        INDENT
            return function(* args)
        DEDENT
        else :
        INDENT
            return partial(func, * args)
        DEDENT
    DEDENT
    return func
DEDENT
----------------------------------------

def curried(func) :
INDENT
    @ functools.wraps(func)
    def _curried(* args, ** kwargs) :
    INDENT
        return functools.partial(func, * args, ** kwargs)
    DEDENT
    return _curried
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9458271_17333553_1_14
9458271_42798840_9_19
Title: Currying decorator in python 
----------------------------------------

def curried(function) :
INDENT
    argc = function.__code__.co_argcount

    if argc == 0 :
    INDENT
        return function
    DEDENT
    from functools import partial
    def func(* args) :
    INDENT
        if len(args) > = argc :
        INDENT
            return function(* args)
        DEDENT
        else :
        INDENT
            return partial(func, * args)
        DEDENT
    DEDENT
    return func
DEDENT
----------------------------------------

def curried(* args) :
INDENT
    if len(args) == func.__code__.co_argcount :
    INDENT
        ans = func(* args)
        return ans
    DEDENT
    else :
    INDENT
        return lambda x : curried(* (args + (x,)))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9458271_23667945_4_16
9458271_42798840_9_19
Title: Currying decorator in python 
----------------------------------------

def curried(func) :
INDENT
    @ functools.wraps(func)
    def _curried(* args, ** kwargs) :
    INDENT
        return functools.partial(func, * args, ** kwargs)
    DEDENT
    return _curried
DEDENT
----------------------------------------

def curried(* args) :
INDENT
    if len(args) == func.__code__.co_argcount :
    INDENT
        ans = func(* args)
        return ans
    DEDENT
    else :
    INDENT
        return lambda x : curried(* (args + (x,)))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9458271_30714089_3_11
9458271_9458386_1_11
Title: Currying decorator in python 
----------------------------------------

def curry(f) :
INDENT
    @ wraps(f)
    def _(arg) :
    INDENT
        try :
        INDENT
            return f(arg)
        DEDENT
        except TypeError :
        INDENT
            return curry(wraps(f)(partial(f, arg)))
        DEDENT
    DEDENT
    return _
DEDENT
----------------------------------------

def curry(x, argc = None) :
INDENT
    if argc is None :
    INDENT
        argc = x.func_code.co_argcount
    DEDENT
    def p(* a) :
    INDENT
        if len(a) == argc :
        INDENT
            return x(* a)
        DEDENT
        def q(* b) :
        INDENT
            return x(* (a + b))
        DEDENT
        return curry(q, argc - len(a))
    DEDENT
    return p
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9513054_9532025_5_16
9513054_9532025_95_105
Title: wxPython: Dynamically drawn picture becomes broken 
----------------------------------------

def __init__(self, parent, size = (50, 50)) :
INDENT
    super(Smiley, self).__init__(parent,
        size = size,
        style = wx.NO_BORDER)
    self.InitBuffer()
    self.Bind(wx.EVT_SIZE, self.OnSize)
    self.Bind(wx.EVT_IDLE, self.OnIdle)
    self.Bind(wx.EVT_PAINT, self.OnPaint)

DEDENT
----------------------------------------

def __init__(self, parent, * args, ** kwargs) :
INDENT
    wx.Frame.__init__(self, parent, * args, ** kwargs)

    self.panel = SmileyPanel(self)

    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.panel, 1, wx.EXPAND)
    self.SetSizer(sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9550694_9550859_12_25
9550694_9550859_35_51
Title: Using Signals for communicating between classes 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Main, self).__init__(parent)
    self.resize(640, 480)
    self._lib = LibModule()
    self.myWidget = MyWidget(self)
    self.setCentralWidget(self.myWidget)
    self.myWidget.sigFooChanged.connect(self.handleFooChanged)
    self.myWidget.sigBarChanged.connect(self._lib.handleBarChanged)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MyWidget, self).__init__(parent)

    self.setupUi(self)
    self.cbFoo.addItems(['Foo1', 'Foo2'])
    self.cbBar.addItems(['Bar1', 'Bar2'])
    self.layout.addWidget(self.cbFoo)
    self.layout.addWidget(self.cbBar)

    self.cbFoo.currentIndexChanged [str].connect(self.sigFooChanged)
    self.cbBar.currentIndexChanged [str].connect(self.sigBarChanged)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9557450_9562638_29_40
9557450_9562638_56_82
Title: Error with multiple panels in one frame WXPYTHON 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    grid = gridlib.Grid(self)
    grid.CreateGrid(25, 12)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(grid, 0, wx.EXPAND)
    self.SetSizer(sizer)
    button = wx.Button(self, label = "Save", pos = (0, 500))
    button.Bind(wx.EVT_BUTTON, parent.onSwitchPanels)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY,
        "Panel Switcher Tutorial",
        size = (800, 600))
    self.panel_one = PanelOne(self)
    self.panel_two = PanelTwo(self)
    self.panel_three = PanelThree(self)
    self.panel_two.Hide()
    self.panel_three.Hide()
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.sizer.Add(self.panel_one, 1, wx.EXPAND)
    self.sizer.Add(self.panel_two, 1, wx.EXPAND)
    self.SetSizer(self.sizer)
    menubar = wx.MenuBar()
    fileMenu = wx.Menu()
    switch_panels_menu_item = fileMenu.Append(wx.ID_ANY,
        "Switch Panels",
        "Some text")
    self.Bind(wx.EVT_MENU, self.onSwitchPanels,
        switch_panels_menu_item)
    menubar.Append(fileMenu, '&File')
    self.SetMenuBar(menubar)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9593950_9594285_1_10
9593950_9594465_1_13
Title: Python Code to Create Sum of Neighbors and itself in the original list 
----------------------------------------

def sum_neighbors(list) :
INDENT
    new_list = []
    new_list.append(list [0] + list [1])
    x = 1
    while x < len(list) - 1 :
    INDENT
        new_list.append(list [x - 1] + list [x] + list [x + 1])
        x += 1
    DEDENT
    new_list.append(list [x - 1] + list [x])
    return new_list
DEDENT
----------------------------------------

def sum_neighbors(listA) :
INDENT
    listB = []
    listB.append(listA [0] + listA [1])
    for ele_prev, ele, ele_next in zip(listA [0 : len(listA) - 2], listA [1 : len(listA) - 1], listA [2 : len(listA)]) :
    INDENT
        listB.append(ele_prev + ele + ele_next)
    DEDENT
    listB.append(listA [len(listA) - 1] + listA [len(listA) - 2])
    return listB
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9650623_9651161_1_8
9650623_9867356_26_33
Title: "What do you call an iterator with two different ""done"" states?" 
----------------------------------------

def fetch_one(n) :
INDENT
    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [n]
    for x in lst :
    INDENT
        if x == 6 :
        INDENT
            yield 'StopAll'
            return
        DEDENT
        yield x
    DEDENT
DEDENT
----------------------------------------

def fetch_one(n) :
INDENT
    data = input [n - 1]
    if data is None :
    INDENT
        return iter([(False, None)])
    DEDENT
    else :
    INDENT
        return (maybe_prepare(row) for row in data)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9650623_9651161_9_20
9650623_9867356_37_41
Title: "What do you call an iterator with two different ""done"" states?" 
----------------------------------------

def work() :
INDENT
    n = 0
    in_progress = True
    while in_progress :
    INDENT
        numbers_iterator = fetch_one(n)
        for x in numbers_iterator :
        INDENT
            if x == 'StopAll' :
            INDENT
                in_progress = False
                break
            DEDENT
            print ('x =', x)
        DEDENT
        n += 1
    DEDENT
DEDENT
----------------------------------------

def work() :
INDENT
    for is_ok, prepared_row in chain_all(fetch_one(n) for n in count(1)) :
    INDENT
        if not is_ok :
        INDENT
            break
        DEDENT
        print consume(prepared_row)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9671838_9672699_1_10
9671838_9672924_1_15
Title: Optimizing simple Python file matching & replacement script 
----------------------------------------

def switchFiles(args) :
INDENT
    pairs = []
    for root1, dirs1, files1 in os.walk(args.folder) :
    INDENT
        for f1 in files1 :
        INDENT
            for root2, dirs2, files2 in os.walk(args.database) :
            INDENT
                for f2 in files2 :
                INDENT
                    if f1 == f2 :
                    INDENT
                        pairs.append(os.path.join(root1, f1), os.path.join(root2, f2))
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    for src, dst in pairs :
    INDENT
        shutil.copyfile(src, dst)
    DEDENT
DEDENT
----------------------------------------

def switchFiles(args) :
INDENT
    srclst = {}
    for root, dirs, files in os.walk(args.folder) :
    INDENT
        rootp = (root,)
        for filename in files :
        INDENT
            srclst [filename] = rootp
        DEDENT
    DEDENT
    for root, dirs, files in os.walk(args.database) :
    INDENT
        for filename in files :
        INDENT
            srcrootp = srclst.get(filename)
            if not srcrootp :
            INDENT
                continue
            DEDENT
            srcpath = os.path.join(srcrootp [0], filename)
            dstpath = os.path.join(root, filename)
            print "replace", srcpath, dstpath
            shutil.copy(srcpath, dstpath)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9689053_47637339_11_28
9689053_9690622_5_22
Title: How to communicate or switch between two windows in PyQt? 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoginDialog, self).__init__(parent)
    self.username = QLineEdit()
    self.password = QLineEdit()
    loginLayout = QFormLayout()
    loginLayout.addRow("Username", self.username)
    loginLayout.addRow("Password", self.password)
    self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
    self.buttons.accepted.connect(self.check)
    self.buttons.rejected.connect(self.reject)
    layout = QVBoxLayout()
    layout.addLayout(loginLayout)
    layout.addWidget(self.buttons)
    self.setLayout(layout)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoginDialog, self).__init__(parent)
    self.username = QtGui.QLineEdit()
    self.password = QtGui.QLineEdit()
    loginLayout = QtGui.QFormLayout()
    loginLayout.addRow("Username", self.username)
    loginLayout.addRow("Password", self.password)
    self.buttons = QtGui.QDialogButtonBox(QtGui.QDialogButtonBox.Ok | QtGui.QDialogButtonBox.Cancel)
    self.buttons.accepted.connect(self.check)
    self.buttons.rejected.connect(self.reject)
    layout = QtGui.QVBoxLayout()
    layout.addLayout(loginLayout)
    layout.addWidget(self.buttons)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_11880283_1_27
9690839_17625947_1_13
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    time = tstr.replace(':', '')
    if 'am' in time :
    INDENT
        tim = int(time.replace('am', ''))
    DEDENT
    elif 'pm' in time :
    INDENT
        tim = int(time.replace('pm', ''))
    DEDENT
    mini = tim % 100
    hour = tim / / 100
    if mini < 10 :
    INDENT
        mini = '0' + str(mini)
    DEDENT
    else :
    INDENT
        mini = str(mini)
    DEDENT
    if 'am' in time :
    INDENT
        if hour < 10 :
        INDENT
            hour = '0' + str(hour)
        DEDENT
        elif hour == 12 :
        INDENT
            hour = '0' + str(hour - 12)
            time1 = time.replace('am', '')
            time1 = str(hour) + str(mini) + 'hr'
        DEDENT
    DEDENT
    elif 'pm' in time :
    INDENT
        if hour < 12 :
        INDENT
            hour = 12 + hour
        DEDENT
        elif hour == 12 :
        INDENT
            hour = hour
        DEDENT
    DEDENT
    time1 = time.replace('pm', '')
    time1 = str(hour) + str(mini) + 'hr'
    return time1
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    a = tstr
    b = int(a [: 2]) + 12
    if a [- 2 :] == 'am' and a [: 2] == '12' :
    INDENT
        return '\'00' + a [3 : - 2] + 'hr\''
    DEDENT
    elif a [- 2 :] == 'pm' and a [: 2] == '12' :
    INDENT
        return '\'12' + a [3 : - 2] + 'hr\''
    DEDENT
    else :
    INDENT
        if a [- 2 :] == 'pm' :
        INDENT
            return "\'" + str(b) + a [3 : - 2] + 'hr\''
        DEDENT
        else :
        INDENT
            return "'" + a [: 2] + a [3 : - 2] + 'hr\''
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_11880283_1_27
9690839_30699114_1_18
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    time = tstr.replace(':', '')
    if 'am' in time :
    INDENT
        tim = int(time.replace('am', ''))
    DEDENT
    elif 'pm' in time :
    INDENT
        tim = int(time.replace('pm', ''))
    DEDENT
    mini = tim % 100
    hour = tim / / 100
    if mini < 10 :
    INDENT
        mini = '0' + str(mini)
    DEDENT
    else :
    INDENT
        mini = str(mini)
    DEDENT
    if 'am' in time :
    INDENT
        if hour < 10 :
        INDENT
            hour = '0' + str(hour)
        DEDENT
        elif hour == 12 :
        INDENT
            hour = '0' + str(hour - 12)
            time1 = time.replace('am', '')
            time1 = str(hour) + str(mini) + 'hr'
        DEDENT
    DEDENT
    elif 'pm' in time :
    INDENT
        if hour < 12 :
        INDENT
            hour = 12 + hour
        DEDENT
        elif hour == 12 :
        INDENT
            hour = hour
        DEDENT
    DEDENT
    time1 = time.replace('pm', '')
    time1 = str(hour) + str(mini) + 'hr'
    return time1
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    time_list = tstr [: - 2].split(':')
    time_int = [int(x) for x in time_list]
    am_pm = tstr [- 2 :]
    hours = time_int [0]
    minutes = time_int [1]
    if am_pm == 'am' :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "00%2dhr" % (minutes)
        DEDENT
    DEDENT
    else :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_11880283_1_27
9690839_40956706_1_52
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    time = tstr.replace(':', '')
    if 'am' in time :
    INDENT
        tim = int(time.replace('am', ''))
    DEDENT
    elif 'pm' in time :
    INDENT
        tim = int(time.replace('pm', ''))
    DEDENT
    mini = tim % 100
    hour = tim / / 100
    if mini < 10 :
    INDENT
        mini = '0' + str(mini)
    DEDENT
    else :
    INDENT
        mini = str(mini)
    DEDENT
    if 'am' in time :
    INDENT
        if hour < 10 :
        INDENT
            hour = '0' + str(hour)
        DEDENT
        elif hour == 12 :
        INDENT
            hour = '0' + str(hour - 12)
            time1 = time.replace('am', '')
            time1 = str(hour) + str(mini) + 'hr'
        DEDENT
    DEDENT
    elif 'pm' in time :
    INDENT
        if hour < 12 :
        INDENT
            hour = 12 + hour
        DEDENT
        elif hour == 12 :
        INDENT
            hour = hour
        DEDENT
    DEDENT
    time1 = time.replace('pm', '')
    time1 = str(hour) + str(mini) + 'hr'
    return time1
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    newTime = ""
    if "am" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in ":am" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("12", "00")
            return newTime + "hr"
        DEDENT
        elif len(newTime) == 3 :
        INDENT
            newTime = "0" + newTime + "hr"
            return newTime
        DEDENT
    DEDENT
    elif "pm" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in "pm" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "10" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("10", "22")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "11" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("11", "23")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace(":", "")
        DEDENT
        elif "1" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("1", "13")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "2" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("2", "14")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "3" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("3", "15")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "4" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("4", "16")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "5" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("5", "17")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "6" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("6", "18")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "7" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("7", "19")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "8" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("8", "20")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "9" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("9", "21")
            newTime = newTime.replace(":", "")
        DEDENT
        return newTime + "hr"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_11880283_1_27
9690839_52911653_1_38
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    time = tstr.replace(':', '')
    if 'am' in time :
    INDENT
        tim = int(time.replace('am', ''))
    DEDENT
    elif 'pm' in time :
    INDENT
        tim = int(time.replace('pm', ''))
    DEDENT
    mini = tim % 100
    hour = tim / / 100
    if mini < 10 :
    INDENT
        mini = '0' + str(mini)
    DEDENT
    else :
    INDENT
        mini = str(mini)
    DEDENT
    if 'am' in time :
    INDENT
        if hour < 10 :
        INDENT
            hour = '0' + str(hour)
        DEDENT
        elif hour == 12 :
        INDENT
            hour = '0' + str(hour - 12)
            time1 = time.replace('am', '')
            time1 = str(hour) + str(mini) + 'hr'
        DEDENT
    DEDENT
    elif 'pm' in time :
    INDENT
        if hour < 12 :
        INDENT
            hour = 12 + hour
        DEDENT
        elif hour == 12 :
        INDENT
            hour = hour
        DEDENT
    DEDENT
    time1 = time.replace('pm', '')
    time1 = str(hour) + str(mini) + 'hr'
    return time1
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    a = list(tstr)
    if len(a) == 6 :
    INDENT
        a.insert(0, '0')
    DEDENT
    if a [5] == 'a' and a [0] == '1' and a [1] == '2' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        a [0] = '0'
        a [1] = '0'
        w = ''.join(a)
        return w
    DEDENT
    elif a [5] == 'p' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        x = a [0] + a [1]
        print x
        y = int(x)
        print y
        if y < 12 :
        INDENT
            z = y + 12
            g = str(z)
            a [0 : 2] = g
            w = ''.join(a)
            return w
        DEDENT
        else :
        INDENT
            w = ''.join(a)
            return w
        DEDENT
    DEDENT
    else :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        w = ''.join(a)
        return w
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_17625947_1_13
9690839_30699114_1_18
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    a = tstr
    b = int(a [: 2]) + 12
    if a [- 2 :] == 'am' and a [: 2] == '12' :
    INDENT
        return '\'00' + a [3 : - 2] + 'hr\''
    DEDENT
    elif a [- 2 :] == 'pm' and a [: 2] == '12' :
    INDENT
        return '\'12' + a [3 : - 2] + 'hr\''
    DEDENT
    else :
    INDENT
        if a [- 2 :] == 'pm' :
        INDENT
            return "\'" + str(b) + a [3 : - 2] + 'hr\''
        DEDENT
        else :
        INDENT
            return "'" + a [: 2] + a [3 : - 2] + 'hr\''
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    time_list = tstr [: - 2].split(':')
    time_int = [int(x) for x in time_list]
    am_pm = tstr [- 2 :]
    hours = time_int [0]
    minutes = time_int [1]
    if am_pm == 'am' :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "00%2dhr" % (minutes)
        DEDENT
    DEDENT
    else :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_17625947_1_13
9690839_40956706_1_52
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    a = tstr
    b = int(a [: 2]) + 12
    if a [- 2 :] == 'am' and a [: 2] == '12' :
    INDENT
        return '\'00' + a [3 : - 2] + 'hr\''
    DEDENT
    elif a [- 2 :] == 'pm' and a [: 2] == '12' :
    INDENT
        return '\'12' + a [3 : - 2] + 'hr\''
    DEDENT
    else :
    INDENT
        if a [- 2 :] == 'pm' :
        INDENT
            return "\'" + str(b) + a [3 : - 2] + 'hr\''
        DEDENT
        else :
        INDENT
            return "'" + a [: 2] + a [3 : - 2] + 'hr\''
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    newTime = ""
    if "am" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in ":am" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("12", "00")
            return newTime + "hr"
        DEDENT
        elif len(newTime) == 3 :
        INDENT
            newTime = "0" + newTime + "hr"
            return newTime
        DEDENT
    DEDENT
    elif "pm" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in "pm" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "10" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("10", "22")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "11" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("11", "23")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace(":", "")
        DEDENT
        elif "1" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("1", "13")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "2" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("2", "14")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "3" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("3", "15")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "4" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("4", "16")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "5" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("5", "17")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "6" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("6", "18")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "7" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("7", "19")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "8" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("8", "20")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "9" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("9", "21")
            newTime = newTime.replace(":", "")
        DEDENT
        return newTime + "hr"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_17625947_1_13
9690839_52911653_1_38
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    a = tstr
    b = int(a [: 2]) + 12
    if a [- 2 :] == 'am' and a [: 2] == '12' :
    INDENT
        return '\'00' + a [3 : - 2] + 'hr\''
    DEDENT
    elif a [- 2 :] == 'pm' and a [: 2] == '12' :
    INDENT
        return '\'12' + a [3 : - 2] + 'hr\''
    DEDENT
    else :
    INDENT
        if a [- 2 :] == 'pm' :
        INDENT
            return "\'" + str(b) + a [3 : - 2] + 'hr\''
        DEDENT
        else :
        INDENT
            return "'" + a [: 2] + a [3 : - 2] + 'hr\''
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    a = list(tstr)
    if len(a) == 6 :
    INDENT
        a.insert(0, '0')
    DEDENT
    if a [5] == 'a' and a [0] == '1' and a [1] == '2' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        a [0] = '0'
        a [1] = '0'
        w = ''.join(a)
        return w
    DEDENT
    elif a [5] == 'p' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        x = a [0] + a [1]
        print x
        y = int(x)
        print y
        if y < 12 :
        INDENT
            z = y + 12
            g = str(z)
            a [0 : 2] = g
            w = ''.join(a)
            return w
        DEDENT
        else :
        INDENT
            w = ''.join(a)
            return w
        DEDENT
    DEDENT
    else :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        w = ''.join(a)
        return w
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_30699114_1_18
9690839_40956706_1_52
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    time_list = tstr [: - 2].split(':')
    time_int = [int(x) for x in time_list]
    am_pm = tstr [- 2 :]
    hours = time_int [0]
    minutes = time_int [1]
    if am_pm == 'am' :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "00%2dhr" % (minutes)
        DEDENT
    DEDENT
    else :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    newTime = ""
    if "am" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in ":am" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("12", "00")
            return newTime + "hr"
        DEDENT
        elif len(newTime) == 3 :
        INDENT
            newTime = "0" + newTime + "hr"
            return newTime
        DEDENT
    DEDENT
    elif "pm" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in "pm" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "10" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("10", "22")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "11" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("11", "23")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace(":", "")
        DEDENT
        elif "1" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("1", "13")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "2" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("2", "14")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "3" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("3", "15")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "4" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("4", "16")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "5" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("5", "17")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "6" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("6", "18")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "7" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("7", "19")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "8" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("8", "20")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "9" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("9", "21")
            newTime = newTime.replace(":", "")
        DEDENT
        return newTime + "hr"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_30699114_1_18
9690839_52911653_1_38
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    time_list = tstr [: - 2].split(':')
    time_int = [int(x) for x in time_list]
    am_pm = tstr [- 2 :]
    hours = time_int [0]
    minutes = time_int [1]
    if am_pm == 'am' :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "00%2dhr" % (minutes)
        DEDENT
    DEDENT
    else :
    INDENT
        if hours < 12 :
        INDENT
            hours = hours + 12
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
        else :
        INDENT
            return "%02d%02dhr" % (hours, minutes)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    a = list(tstr)
    if len(a) == 6 :
    INDENT
        a.insert(0, '0')
    DEDENT
    if a [5] == 'a' and a [0] == '1' and a [1] == '2' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        a [0] = '0'
        a [1] = '0'
        w = ''.join(a)
        return w
    DEDENT
    elif a [5] == 'p' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        x = a [0] + a [1]
        print x
        y = int(x)
        print y
        if y < 12 :
        INDENT
            z = y + 12
            g = str(z)
            a [0 : 2] = g
            w = ''.join(a)
            return w
        DEDENT
        else :
        INDENT
            w = ''.join(a)
            return w
        DEDENT
    DEDENT
    else :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        w = ''.join(a)
        return w
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9690839_40956706_1_52
9690839_52911653_1_38
Title: Pyschools Topic 3 Q 9 
----------------------------------------

def time24hr(tstr) :
INDENT
    newTime = ""
    if "am" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in ":am" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("12", "00")
            return newTime + "hr"
        DEDENT
        elif len(newTime) == 3 :
        INDENT
            newTime = "0" + newTime + "hr"
            return newTime
        DEDENT
    DEDENT
    elif "pm" in tstr :
    INDENT
        for i in tstr :
        INDENT
            if i not in "pm" :
            INDENT
                newTime += i
            DEDENT
        DEDENT
        if "10" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("10", "22")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "11" in newTime [: 2] :
        INDENT
            newTime = newTime.replace("11", "23")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "12" in newTime [: 2] :
        INDENT
            newTime = newTime.replace(":", "")
        DEDENT
        elif "1" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("1", "13")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "2" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("2", "14")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "3" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("3", "15")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "4" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("4", "16")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "5" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("5", "17")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "6" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("6", "18")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "7" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("7", "19")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "8" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("8", "20")
            newTime = newTime.replace(":", "")
        DEDENT
        elif "9" in newTime [: 1] :
        INDENT
            newTime = newTime.replace("9", "21")
            newTime = newTime.replace(":", "")
        DEDENT
        return newTime + "hr"
    DEDENT
DEDENT
----------------------------------------

def time24hr(tstr) :
INDENT
    a = list(tstr)
    if len(a) == 6 :
    INDENT
        a.insert(0, '0')
    DEDENT
    if a [5] == 'a' and a [0] == '1' and a [1] == '2' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        a [0] = '0'
        a [1] = '0'
        w = ''.join(a)
        return w
    DEDENT
    elif a [5] == 'p' :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        x = a [0] + a [1]
        print x
        y = int(x)
        print y
        if y < 12 :
        INDENT
            z = y + 12
            g = str(z)
            a [0 : 2] = g
            w = ''.join(a)
            return w
        DEDENT
        else :
        INDENT
            w = ''.join(a)
            return w
        DEDENT
    DEDENT
    else :
    INDENT
        del a [2]
        del a [4 : 6]
        a.append('h')
        a.append('r')
        w = ''.join(a)
        return w
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9702414_9847476_4_30
9702414_9847484_13_35
Title: Extend argparse to write set names in the help text for optional argument choices and define those sets once at the end 
----------------------------------------

def main() :
INDENT
    elements = ['a', 'b', 'c', 'd', 'e', 'f']
    parser = argparse.ArgumentParser(
        formatter_class = argparse.RawDescriptionHelpFormatter,
        epilog = textwrap.dedent('''\
            sets in optional arguments: 
                ALFA\t\t{a,b,c,d,e,f}"
            '''))
    parser.add_argument(
        '-i',
        nargs = '*',
        choices = elements,
        default = elements,
        metavar = "ALFA",
        help = 'Space separated list of case sensitive element names.')
    parser.add_argument(
        '-e',
        nargs = '*',
        choices = elements,
        default = [],
        metavar = "ALFA",
        help = 'Space separated list of case sensitive element names to '
        'exclude from processing')
    parser.parse_args()
DEDENT
----------------------------------------

def main() :
INDENT
    epilog = """sets in optional arguments:
  ALFA                  %s""" % (str(elements).replace('[', '{').replace(']', '}'))
    parser = myparser(epilog = epilog, formatter_class = argparse.RawTextHelpFormatter)
    parser.add_argument(
        '-i',
        nargs = '*',
        choices = elements,
        default = elements,
        help = 'Space separated list of case sensitive element names.')
    parser.add_argument(
        '-e',
        nargs = '*',
        choices = elements,
        default = [],
        help = 'Space separated list of case sensitive element names to '
        'exclude from processing')
    parser.parse_args()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9702414_9847484_6_12
9702414_9882408_34_38
Title: Extend argparse to write set names in the help text for optional argument choices and define those sets once at the end 
----------------------------------------

def add_argument(self, * args, ** kwargs) :
INDENT
    choice = kwargs.get('choices', None)
    if (choice is elements) :
    INDENT
        kwargs ['metavar'] = 'ALFA'
    DEDENT
    return argparse.ArgumentParser.add_argument(self, * args, ** kwargs)
DEDENT
----------------------------------------

def add_argument(self, * args, ** kw) :
INDENT
    name_list = self._option_lists.get(id(kw.get('choices')))
    if name_list :
    INDENT
        kw ['metavar'] = name_list [0]
    DEDENT
    return super(MyArgParser, self).add_argument(* args, ** kw)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9729968_17677817_1_32
9729968_49351064_3_54
Title: Python Implementation of Viterbi Algorithm 
----------------------------------------

def viterbi(self, observations) :
INDENT
    nSamples = len(observations [0])
    nStates = self.transition.shape [0]
    c = np.zeros(nSamples)
    viterbi = np.zeros((nStates, nSamples))
    psi = np.zeros((nStates, nSamples))
    best_path = np.zeros(nSamples);
    viterbi [:, 0] = self.priors.T * self.emission [:, observations(0)]
    c [0] = 1.0 / np.sum(viterbi [:, 0])
    viterbi [:, 0] = c [0] * viterbi [:, 0]
    psi [0] = 0;
    for t in range(1, nSamples) :
    INDENT
        for s in range(0, nStates) :
        INDENT
            trans_p = viterbi [:, t - 1] * self.transition [:, s]
            psi [s, t], viterbi [s, t] = max(enumerate(trans_p), key = operator.itemgetter(1))
            viterbi [s, t] = viterbi [s, t] * self.emission [s, observations(t)]
        DEDENT
        c [t] = 1.0 / np.sum(viterbi [:, t])
        viterbi [:, t] = c [t] * viterbi [:, t]

    DEDENT
    best_path [nSamples - 1] = viterbi [:, nSamples - 1].argmax()
    for t in range(nSamples - 1, 0, - 1) :
    INDENT
        best_path [t - 1] = psi [best_path [t], t]
    DEDENT
    return best_path
DEDENT
----------------------------------------

def viterbi(y, A, B, Pi = None) :
INDENT
    K = A.shape [0]
    Pi = Pi if Pi is not None else np.full(K, 1 / K)
    T = len(y)
    T1 = np.empty((K, T), 'd')
    T2 = np.empty((K, T), 'B')

    T1 [:, 0] = Pi * B [:, y [0]]
    T2 [:, 0] = 0

    for i in range(1, T) :
    INDENT
        T1 [:, i] = np.max(T1 [:, i - 1] * A.T * B [np.newaxis, :, y [i]].T, 1)
        T2 [:, i] = np.argmax(T1 [:, i - 1] * A.T, 1)

    DEDENT
    x = np.empty(T, 'B')
    x [- 1] = np.argmax(T1 [:, T - 1])
    for i in reversed(range(1, T)) :
    INDENT
        x [i - 1] = T2 [x [i], i]
    DEDENT
    return x, T1, T2
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9729968_47265284_1_30
9729968_49351064_3_54
Title: Python Implementation of Viterbi Algorithm 
----------------------------------------

def viterbi(transition_probabilities, conditional_probabilities) :
INDENT
    num_samples = conditional_probabilities.shape [1]
    num_states = transition_probabilities.shape [0]
    c = np.zeros(num_samples)
    viterbi = np.zeros((num_states, num_samples))
    best_path_table = np.zeros((num_states, num_samples))
    best_path = np.zeros(num_samples).astype(np.int32)

    viterbi [:, 0] = conditional_probabilities [:, 0]
    c [0] = 1.0 / np.sum(viterbi [:, 0])
    viterbi [:, 0] = c [0] * viterbi [:, 0]

    for t in range(1, num_samples) :
    INDENT
        for s in range(0, num_states) :
        INDENT
            trans_p = viterbi [:, t - 1] * transition_probabilities [:, s]
            best_path_table [s, t], viterbi [s, t] = max(enumerate(trans_p), key = operator.itemgetter(1))
            viterbi [s, t] = viterbi [s, t] * conditional_probabilities [s] [t]
        DEDENT
        c [t] = 1.0 / np.sum(viterbi [:, t])
        viterbi [:, t] = c [t] * viterbi [:, t]

    DEDENT
    best_path [num_samples - 1] = viterbi [:, num_samples - 1].argmax()
    for t in range(num_samples - 1, 0, - 1) :
    INDENT
        best_path [t - 1] = best_path_table [best_path [t], t]
    DEDENT
    return best_path
DEDENT
----------------------------------------

def viterbi(y, A, B, Pi = None) :
INDENT
    K = A.shape [0]
    Pi = Pi if Pi is not None else np.full(K, 1 / K)
    T = len(y)
    T1 = np.empty((K, T), 'd')
    T2 = np.empty((K, T), 'B')

    T1 [:, 0] = Pi * B [:, y [0]]
    T2 [:, 0] = 0

    for i in range(1, T) :
    INDENT
        T1 [:, i] = np.max(T1 [:, i - 1] * A.T * B [np.newaxis, :, y [i]].T, 1)
        T2 [:, i] = np.argmax(T1 [:, i - 1] * A.T, 1)

    DEDENT
    x = np.empty(T, 'B')
    x [- 1] = np.argmax(T1 [:, T - 1])
    for i in reversed(range(1, T)) :
    INDENT
        x [i - 1] = T2 [x [i], i]
    DEDENT
    return x, T1, T2
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9752539_43722144_10_18
9752539_43722144_25_35
Title: Scrapy: async database request in spider middleware? 
----------------------------------------

def __init__(self, request, * args, ** kwargs) :
INDENT
    super(BotocoreRequest, self).__init__(* args, ** kwargs)
    self.method = request.method
    self.url = request.url.replace('https://', 'http://')
    self.headers = dict(request.headers)
    self.body = request.body and request.body.read()

DEDENT
----------------------------------------

def __init__(self, service, access_key, secret_key, region, timeout = 30) :
INDENT
    session = botocore.session.get_session()
    session.set_credentials(
        access_key = access_key,
        secret_key = secret_key)
    self.client = session.create_client(service, region_name = region)
    endpoint = self.client._endpoint
    endpoint._send_request = MethodType(_send_request, endpoint)
    self.timeout = timeout
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9762420_13267494_3_10
9762420_9766485_4_17
Title: How to tail a file with gevent 
----------------------------------------

def follow(filename) :
INDENT
    hub = gevent.get_hub()
    watcher = hub.loop.stat(filename)
    while True :
    INDENT
        hub.wait(watcher)
        with open(filename) as f :
        INDENT
            print f.read()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def follow(filename) :
INDENT
    fd = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
    os.lseek(fd, 0, os.SEEK_END)
    while True :
    INDENT
        lines = os.read(fd, 4096).splitlines()
        if not lines :
        INDENT
            gevent.sleep(.5)
            continue
        DEDENT
        else :
        INDENT
            for line in lines :
            INDENT
                print "%s:%s" % (filename, line)
            DEDENT
        DEDENT
    DEDENT
    os.close(fd)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9764987_10823565_1_10
9764987_9765018_1_17
Title: Beginning Python printing out standard deviation 
----------------------------------------

def SD(numList) :
INDENT
    cntN = len(numList)
    sumN = 0
    for i in numList :
    INDENT
        sumN += i
    DEDENT
    avgVal = float(sumN) / float(cntN)
    sumVar = 0.0
    for i in range(cntN) :
    INDENT
        sumVar += float((numList [i] - avgVal) ** 2)
    DEDENT
    return ((float(sumVar) / float((cntN - 1))) ** 0.5)
DEDENT
----------------------------------------

def SD() :
INDENT
    b = []
    a = 5.0

    r = len(b)

    for n in range(r - 1) :
    INDENT
        b.append((r [n] - a) ** 2)

    DEDENT
    m = (float(b) / r) ** 0.5
    print ("The standard deviation is", m)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9814333_9814870_3_10
9814333_9814955_3_10
Title: Find all A^x in a given range 
----------------------------------------

def monoSearch(low, high) :
INDENT
    max_power = int(floor(log(high) / log(2)))
    for power in range(3, max_power + 1) :
    INDENT
        min_base = low ** (1.0 / power)
        max_base = high ** (1.0 / power)
        for base in range(int(ceil(min_base)), int(floor(max_base)) + 1) :
        INDENT
            yield '%s ^ %s' % (base, power)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def monoSearch(m, n) :
INDENT
    for base in range(2, int(ceil(n **.34))) :
    INDENT
        m_pow = max(int(ceil(log(m, base))), 3)
        n_pow = int(ceil(log(n, base)))
        pows = range(m_pow, n_pow)
        for p in pows :
        INDENT
            print "Found {}^{}  = {}".format(base, p, base ** p)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9837631_20575076_8_19
9837631_9860279_4_15
Title: How to check in PyMongo is connection is still alive? 
----------------------------------------

def db_op_wrapper(* args, ** kwargs) :
INDENT
    tries = 0
    while tries < retries :
    INDENT
        try :
        INDENT
            return fn(* args, ** kwargs)
        DEDENT
        except AutoReconnect :
        INDENT
            tries += 1
        DEDENT
    DEDENT
    raise Exception("No luck even after %d retries" % retries)
DEDENT
----------------------------------------

def db_op_wrapper(* args, ** kwargs) :
INDENT
    tries = 0
    while tries < retries :
    INDENT
        try :
        INDENT
            return fn(* args, ** kwargs)
        DEDENT
        except AutoReconnect :
        INDENT
            tries += 1
        DEDENT
    DEDENT
    raise Exception("No luck even after %d retries" % retries)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9845574_9845679_25_29
9845574_9845694_15_23
Title: Can I use a property of the result of a function as a decorator? 
----------------------------------------

def decorator(function) :
INDENT
    if after :
    INDENT
        return afterDecorator(function, event)
    DEDENT
    else :
    INDENT
        return beforeDecorator(function, event)
    DEDENT
DEDENT
----------------------------------------

def decorator(f) :
INDENT
    @ wraps(f)
    def wrapped(* args, ** kargs) :
    INDENT
        result = f(* args, ** kargs)
        event.fire(* args, ** kargs)
        return result
    DEDENT
    return wrapped
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9845574_9845679_25_29
9845574_9845694_7_13
Title: Can I use a property of the result of a function as a decorator? 
----------------------------------------

def decorator(function) :
INDENT
    if after :
    INDENT
        return afterDecorator(function, event)
    DEDENT
    else :
    INDENT
        return beforeDecorator(function, event)
    DEDENT
DEDENT
----------------------------------------

def decorator(f) :
INDENT
    @ wraps(f)
    def wrapped(* args, ** kargs) :
    INDENT
        event.fire(* args, ** kargs)
        return f(* args, ** kargs)
    DEDENT
    return wrapped
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9845574_9845679_4_31
9845574_9845694_1_24
Title: Can I use a property of the result of a function as a decorator? 
----------------------------------------

def fires() :
INDENT
    def beforeDecorator(f, event) :
    INDENT
        @ wraps(f)
        def wrapped(* args, ** kargs) :
        INDENT
            event.fire(* args, ** kargs)
            return f(* args, ** kargs)
        DEDENT
        return wrapped
    DEDENT
    def afterDecorator(f, event) :
    INDENT
        @ wraps(f)
        def wrapped(* args, ** kargs) :
        INDENT
            try :
            INDENT
                result = f(* args, ** kargs)
            DEDENT
            finally :
            INDENT
                event.fire(* args, ** kargs)
            DEDENT
            return result
        DEDENT
        return wrapped
    DEDENT
    def closure(event, after = False) :
    INDENT
        def decorator(function) :
        INDENT
            if after :
            INDENT
                return afterDecorator(function, event)
            DEDENT
            else :
            INDENT
                return beforeDecorator(function, event)
            DEDENT
        DEDENT
        return decorator
    DEDENT
    return closure
DEDENT
----------------------------------------

def fires(event, before = True) :
INDENT
    if before :
    INDENT
        def decorator(f) :
        INDENT
            @ wraps(f)
            def wrapped(* args, ** kargs) :
            INDENT
                event.fire(* args, ** kargs)
                return f(* args, ** kargs)
            DEDENT
            return wrapped
        DEDENT
    DEDENT
    else :
    INDENT
        def decorator(f) :
        INDENT
            @ wraps(f)
            def wrapped(* args, ** kargs) :
            INDENT
                result = f(* args, ** kargs)
                event.fire(* args, ** kargs)
                return result
            DEDENT
            return wrapped
        DEDENT
    DEDENT
    return decorator
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9848670_9902000_39_51
9848670_9932873_53_61
Title: Controlling Python PLY lexer states from parser 
----------------------------------------

def p_error(p) :
INDENT
    global subquery_retry_pos
    if p is None :
    INDENT
        print >> sys.stderr, "ERROR: unexpected end of query"
    DEDENT
    elif p.type == 'SELECT' and parser.symstack [- 1].type == 'OPAR' :
    INDENT
        lexer.input(lexer.lexdata)
        subquery_retry_pos = parser.symstack [- 1].lexpos
        yacc.restart()
    DEDENT
    else :
    INDENT
        print >> sys.stderr, "ERROR: Skipping unrecognized token", p.type, "(" + p.value + ") at line:", p.lineno, "and column:", find_column(p.lexer.lexdata, p)
        yacc.errok()
    DEDENT
DEDENT
----------------------------------------

def p_error(p) :
INDENT
    global subquery_retry_pos
    if p is None :
    INDENT
        print >> sys.stderr, "ERROR: unexpected end of query"
    DEDENT
    else :
    INDENT
        print >> sys.stderr, "ERROR: Skipping unrecognized token", p.type, "(" + p.value + ") at line:", p.lineno, "and column:", find_column(p.lexer.lexdata, p)
        yacc.errok()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9869524_9869612_1_8
9869524_9870770_2_10
Title: How to convert list of intable strings to int 
----------------------------------------

def intify(lst) :
INDENT
    for i in lst :
    INDENT
        try :
        INDENT
            i = int(i)
        DEDENT
        except ValueError :
        INDENT
            pass
        DEDENT
        yield i
    DEDENT
DEDENT
----------------------------------------

def intify(maybeLst) :
INDENT
    try :
    INDENT
        return int(maybeLst)
    DEDENT
    except :
    INDENT
        if isinstance(maybeLst, Iterable) and not isinstance(lst, str) :
        INDENT
            return [intify(i) for i in maybeLst]
        DEDENT
        else :
        INDENT
            return maybeLst
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9872307_15727262_5_12
9872307_9873170_6_26
Title: stop threads when exception happen 
----------------------------------------

def printmsg(msg, threadNumber) :
INDENT
    while True :
    INDENT
        try :
        INDENT
            print 'this is your message %s -- Thread Number:%s' % (msg, threadNumber)
            raise
        DEDENT
        except :
        INDENT
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printmsg(msg, threadNumber) :
INDENT
    global stop
    while True :
    INDENT
        try :
        INDENT
            if threadNumber in [3, 5, 7, 9] :
            INDENT
                raise NotImplementedError
            DEDENT
            lock.acquire()
            if stop :
            INDENT
                lock.release()
                break
            DEDENT
            print 'This is your message %s -- Thread Number: %s' % (msg, threadNumber)
            lock.release()
        DEDENT
        except NotImplementedError :
        INDENT
            lock.acquire()
            if not stop :
            INDENT
                stop = True
                print 'Bye'
            DEDENT
            lock.release()
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9875402_9875744_3_11
9875402_9928835_1_10
Title: How to write a decorator to skip certain tests when a module is not imported? 
----------------------------------------

def requires_mock(test) :
INDENT
    @ functools.wraps(test)
    def wrapper() :
    INDENT
        if mock :
        INDENT
            return test()
        DEDENT
        raise SkipTest
    DEDENT
    return wrapper
DEDENT
----------------------------------------

def requires_mock(test) :
INDENT
    def wrapper(* args, ** kwargs) :
    INDENT
        if mock_not_available :
        INDENT
            raise SkipTest()
        DEDENT
        else :
        INDENT
            return test(* args, ** kwargs)
        DEDENT
    DEDENT
    wrapper.__name__ = test.__name__
    return wrapper
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
989129_1005079_34_55
989129_999664_5_19
Title: wxPython: how to create a bash shell window? 
----------------------------------------

def __init__(self, locals, rawin, stdin, stdout, stderr) :
INDENT
    self.introText = "Welcome to stackoverflow bash shell"
    self.locals = locals
    self.revision = 1.0
    self.rawin = rawin
    self.stdin = stdin
    self.stdout = stdout
    self.stderr = stderr
    self.more = False

    self.bp = Popen('bash', shell = False, stdout = PIPE, stdin = PIPE, stderr = PIPE)

    self.outputThread = BashProcessThread(self.bp.stdout.readline)
    self.outputThread.start()

    self.errorThread = BashProcessThread(self.bp.stderr.readline)
    self.errorThread.start()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwds) :
INDENT
    kwds ["style"] = wx.DEFAULT_FRAME_STYLE
    wx.Frame.__init__(self, * args, ** kwds)
    self.prompt = "user@stackOvervlow:~ "
    self.textctrl = wx.TextCtrl(self, - 1, '', style = wx.TE_PROCESS_ENTER | wx.TE_MULTILINE)
    self.default_txt = self.textctrl.GetDefaultStyle()
    self.textctrl.AppendText(self.prompt)
    self.__set_properties()
    self.__do_layout()
    self.__bind_events()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
989129_999573_6_21
989129_999664_5_19
Title: wxPython: how to create a bash shell window? 
----------------------------------------

def __init__(self, locals, rawin, stdin, stdout, stderr) :
INDENT
    self.introText = "Welcome to stackoverflow bash shell"
    self.locals = locals
    self.revision = 1.0
    self.rawin = rawin
    self.stdin = stdin
    self.stdout = stdout
    self.stderr = stderr

    self.more = False

    self.bp = Popen('bash', shell = False, stdout = PIPE, stdin = PIPE, stderr = PIPE)

DEDENT
----------------------------------------

def __init__(self, * args, ** kwds) :
INDENT
    kwds ["style"] = wx.DEFAULT_FRAME_STYLE
    wx.Frame.__init__(self, * args, ** kwds)
    self.prompt = "user@stackOvervlow:~ "
    self.textctrl = wx.TextCtrl(self, - 1, '', style = wx.TE_PROCESS_ENTER | wx.TE_MULTILINE)
    self.default_txt = self.textctrl.GetDefaultStyle()
    self.textctrl.AppendText(self.prompt)
    self.__set_properties()
    self.__do_layout()
    self.__bind_events()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
990016_990034_1_9
990016_990060_3_9
Title: How to find out the arity of a method in Python 
----------------------------------------

def arity(method) :
INDENT
    def _arity() :
    INDENT
        return method.func_code.co_argcount - 1
    DEDENT
    method.arity = _arity
    return method
DEDENT
----------------------------------------

def arity(unboundmethod) :
INDENT
    def _arity() :
    INDENT
        return unboundmethod.func_code.co_argcount - 1
    DEDENT
    unboundmethod.arity = _arity
    return unboundmethod
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
990016_990034_1_9
990016_990942_3_14
Title: How to find out the arity of a method in Python 
----------------------------------------

def arity(method) :
INDENT
    def _arity() :
    INDENT
        return method.func_code.co_argcount - 1
    DEDENT
    method.arity = _arity
    return method
DEDENT
----------------------------------------

def arity(func) :
INDENT
    pfunc = func
    i = 0
    while True :
    INDENT
        try :
        INDENT
            pfunc()
        DEDENT
        except TypeError :
        INDENT
            pfunc = partial(pfunc, '')
            i += 1
        DEDENT
        else :
        INDENT
            return i
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
990016_990060_3_9
990016_990942_3_14
Title: How to find out the arity of a method in Python 
----------------------------------------

def arity(unboundmethod) :
INDENT
    def _arity() :
    INDENT
        return unboundmethod.func_code.co_argcount - 1
    DEDENT
    unboundmethod.arity = _arity
    return unboundmethod
DEDENT
----------------------------------------

def arity(func) :
INDENT
    pfunc = func
    i = 0
    while True :
    INDENT
        try :
        INDENT
            pfunc()
        DEDENT
        except TypeError :
        INDENT
            pfunc = partial(pfunc, '')
            i += 1
        DEDENT
        else :
        INDENT
            return i
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9917280_9954659_24_40
9917280_9954659_5_22
Title: Using Draw in PIL/TKinter 
----------------------------------------

def __init__(self) :
INDENT
    Tk.__init__(self)
    self.grid_rowconfigure(0, weight = 1)
    self.grid_columnconfigure(0, weight = 1)
    self.main = ScrolledCanvas(self)
    self.main.grid(row = 0, column = 0, sticky = 'nsew')
    self.c = self.main.canv
    self.currentImage = {}
    self.load_imgfile('test.jpg')
    self.c.bind('<ButtonPress-1>', self.on_mouse_down)
    self.c.bind('<B1-Motion>', self.on_mouse_drag)
    self.c.bind('<ButtonRelease-1>', self.on_mouse_up)
    self.c.bind('<Button-3>', self.on_right_click)
DEDENT
----------------------------------------

def __init__(self, master, ** kwargs) :
INDENT
    Frame.__init__(self, master, ** kwargs)
    self.grid_rowconfigure(0, weight = 1)
    self.grid_columnconfigure(0, weight = 1)
    self.canv = Canvas(self, bd = 0, highlightthickness = 0)
    self.hScroll = Scrollbar(self, orient = 'horizontal',
        command = self.canv.xview)
    self.hScroll.grid(row = 1, column = 0, sticky = 'we')
    self.vScroll = Scrollbar(self, orient = 'vertical',
        command = self.canv.yview)
    self.vScroll.grid(row = 0, column = 1, sticky = 'ns')
    self.canv.grid(row = 0, column = 0, sticky = 'nsew', padx = 4, pady = 4)
    self.canv.configure(xscrollcommand = self.hScroll.set,
        yscrollcommand = self.vScroll.set)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9918646_39461816_4_21
9918646_42574983_1_56
Title: how to convert xls to xlsx 
----------------------------------------

def cvt_xls_to_xlsx(src_file_path, dst_file_path) :
INDENT
    book_xls = xlrd.open_workbook(src_file_path)
    book_xlsx = Workbook()
    sheet_names = book_xls.sheet_names()
    for sheet_index in range(0, len(sheet_names)) :
    INDENT
        sheet_xls = book_xls.sheet_by_name(sheet_names [sheet_index])
        if sheet_index == 0 :
        INDENT
            sheet_xlsx = book_xlsx.active()
            sheet_xlsx.title = sheet_names [sheet_index]
        DEDENT
        else :
        INDENT
            sheet_xlsx = book_xlsx.create_sheet(title = sheet_names [sheet_index])
        DEDENT
        for row in range(0, sheet_xls.nrows) :
        INDENT
            for col in range(0, sheet_xls.ncols) :
            INDENT
                sheet_xlsx.cell(row = row + 1, column = col + 1).value = sheet_xls.cell_value(row, col)
            DEDENT
        DEDENT
    DEDENT
    book_xlsx.save(dst_file_path)
DEDENT
----------------------------------------

def cvt_xls_to_xlsx(* args, ** kw) :
INDENT
    book_xls = xlrd.open_workbook(* args, formatting_info = True, ragged_rows = True, ** kw)
    book_xlsx = Workbook()
    sheet_names = book_xls.sheet_names()
    for sheet_index in range(len(sheet_names)) :
    INDENT
        sheet_xls = book_xls.sheet_by_name(sheet_names [sheet_index])
        if sheet_index == 0 :
        INDENT
            sheet_xlsx = book_xlsx.active
            sheet_xlsx.title = sheet_names [sheet_index]
        DEDENT
        else :
        INDENT
            sheet_xlsx = book_xlsx.create_sheet(title = sheet_names [sheet_index])
        DEDENT
        for crange in sheet_xls.merged_cells :
        INDENT
            rlo, rhi, clo, chi = crange
            sheet_xlsx.merge_cells(
                start_row = rlo + 1, end_row = rhi,
                start_column = clo + 1, end_column = chi,
                )
        DEDENT
        def _get_xlrd_cell_value(cell) :
        INDENT
            value = cell.value
            if cell.ctype == xlrd.XL_CELL_DATE :
            INDENT
                value = datetime.datetime(* xlrd.xldate_as_tuple(value, 0))
            DEDENT
            return value
        DEDENT
        for row in range(sheet_xls.nrows) :
        INDENT
            sheet_xlsx.append((
                    _get_xlrd_cell_value(cell) for cell in sheet_xls.row_slice(row, end_colx = sheet_xls.row_len(row))
                    ))
        DEDENT
        for rowx in range(sheet_xls.nrows) :
        INDENT
            if sheet_xls.rowinfo_map [rowx].hidden ! = 0 :
            INDENT
                print sheet_names [sheet_index], rowx
                sheet_xlsx.row_dimensions [rowx + 1].hidden = True
            DEDENT
        DEDENT
        for coly in range(sheet_xls.ncols) :
        INDENT
            if sheet_xls.colinfo_map [coly].hidden ! = 0 :
            INDENT
                print sheet_names [sheet_index], coly
                coly_letter = get_column_letter(coly + 1)
                sheet_xlsx.column_dimensions [coly_letter].hidden = True
            DEDENT
        DEDENT
    DEDENT
    return book_xlsx
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9928166_14515396_14_31
9928166_14515396_4_12
Title: "Right-click on Windows with VLC and PyGTK" 
----------------------------------------

def __init__(self) :
INDENT
    gtk.Window.__init__(self)
    vbox = gtk.VBox()
    self._vlc_widget = VLCWidget()
    self.player = self._vlc_widget.player
    self.player.video_set_mouse_input(False)
    self.player.video_set_key_input(False)
    vbox.pack_start(self._vlc_widget, expand = True)
    self._toolbar = self.get_player_control_toolbar()
    self.pack_start(self._toolbar, expand = False)
    self.add(vbox)
    self._vlc_widget.set_events(
        gtk.gdk.BUTTON_PRESS_MASK)
    self._vlc_widget.connect("button-press-event", self.on_vlc_button_press)
DEDENT
----------------------------------------

def __init__(self, * p) :
INDENT
    gtk.DrawingArea.__init__(self)
    self.player = instance.media_player_new()
    def handle_embed(* args) :
    INDENT
        self.player.set_hwnd(self.window.handle)
        return True
    DEDENT
    self.connect("map", handle_embed)
    self.set_size_request(320, 200)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9928976_9929713_15_38
9928976_9929903_11_37
Title: Wait at most N seconds for a fork'd child PID to finish 
----------------------------------------

def test() :
INDENT
    global child_exited
    pid = os.fork()
    if pid == 0 :
    INDENT
        signal.signal(signal.SIGALRM, sigh)
        signal.alarm(30)

        print "Started 1"
        time.sleep(60)

        exit(0)
    DEDENT
    elif (pid > 0) :
    INDENT
        signal.signal(signal.SIGCHLD, sigh)
        print "Started 2"
        time.sleep(10)
        if not child_exited :
        INDENT
            print "child PID didn't finish yet!"
        DEDENT
    DEDENT
    else :
    INDENT
        print "fork() failed"
    DEDENT
DEDENT
----------------------------------------

def test() :
INDENT
    X = 1000 * 1000
    Y = 5000
    pid = os.fork()
    if pid == 0 :
    INDENT
        thread1 = MyCustomThread()
        thread1.start()
        print "Started 1!"
        timeout = X
        while timeout > 0 :
        INDENT
            if not thread1.is_alive() : return "custom thread finished before the deadline!"
            timeout -= 1
            sleep(0.001)
        DEDENT
        if thread1.is_alive() :
        INDENT
            return "custom thread didn't finish before the deadline!"
            thread1.stop()
        DEDENT
        exit()
    DEDENT
    else :
    INDENT
        timeout2 = Y
        while timeout2 > 0 :
        INDENT
            if not pid_is_alive(pid) : return "child PID finished!"
            timeout2 -= 1
            sleep(0.001)
        DEDENT
        if pid_is_alive(pid) :
        INDENT
            print "child PID didn't finish yet!"
            exit()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9953466_19684373_8_46
9953466_9954305_1_35
Title: Drawing text at boundary of another text object in Matplotlib 
----------------------------------------

def rainbow_text(x, y, ls, lc, theta, ** kwargs) :
INDENT
    fig = plt.gcf()
    axis = plt.gca()
    theta_rad = math.radians(theta)
    text_trans = axis.transData
    for s, c in zip(ls, lc) :
    INDENT
        text = plt.text(x, y, " %s " % s,
            verticalalignment = 'bottom',
            horizontalalignment = 'left',
            color = c,
            transform = text_trans,
            rotation = theta,
            ** kwargs)
        text.draw(axis.figure.canvas.get_renderer())

        bbox = text.get_window_extent(axis.figure.canvas.get_renderer())
        theta_mat = numpy.array([[math.cos(theta_rad), math.sin(theta_rad)],
                [math.sin(theta_rad), math.cos(theta_rad)]])
        txt_size = numpy.dot(inv(theta_mat),
            numpy.array([bbox.width, bbox.height]))

        for i in range(4) :
        INDENT
            bounds = bbox.corners()
            point = axis.transData.inverted().transform(bounds [i])
            plt.plot(point [0], point [1], '*', color = c)
        DEDENT
        x_offset = txt_size [0] * math.cos(theta_rad)
        y_offset = txt_size [0] * math.sin(theta_rad)
        text_trans = transforms.offset_copy(text.get_transform(),
            fig = fig,
            x = x_offset,
            y = y_offset,
            units = 'points')

    DEDENT
DEDENT
----------------------------------------

def rainbow_text(x, y, ls, lc, ** kw) :
INDENT
    t = plt.gca().transData
    fig = plt.gcf()

    for s, c in zip(ls, lc) :
    INDENT
        text = plt.text(x, y, " " + s + " ", color = c, transform = t, ** kw)
        text.draw(fig.canvas.get_renderer())
        ex = text.get_window_extent()
        t = transforms.offset_copy(text._transform, x = ex.width, units = 'dots')

    DEDENT
    for s, c in zip(ls, lc) :
    INDENT
        text = plt.text(x, y, " " + s + " ", color = c, transform = t,
            rotation = 90, va = 'bottom', ha = 'center', ** kw)
        text.draw(fig.canvas.get_renderer())
        ex = text.get_window_extent()
        t = transforms.offset_copy(text._transform, y = ex.height, units = 'dots')
    DEDENT
    t = plt.gca().transData
    fig = plt.gcf()
    plt.show()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9968532_27516299_10_32
9968532_51451985_5_17
Title: Django admin file upload with current model id 
----------------------------------------

def save(self, * args, ** kwargs) :
INDENT
    if self.pk is None :
    INDENT
        orig_save(self, * args, ** kwargs)
        field_file = getattr(self, field.name)
        if field_file :
        INDENT
            old_path = field_file.path
            new_filename = field.generate_filename(self, os.path.basename(old_path))
            new_path = field.storage.path(new_filename)
            os.makedirs(os.path.dirname(new_path), exist_ok = True)
            os.rename(old_path, new_path)
            setattr(self, field.name, new_filename)

        DEDENT
        if len(args) > 0 :
        INDENT
            args = tuple(v if k > = 2 else False for k, v in enumerate(args))
        DEDENT
        kwargs ['force_insert'] = False
        kwargs ['force_update'] = False
    DEDENT
    orig_save(self, * args, ** kwargs)
DEDENT
----------------------------------------

def save(self, * args, ** kwargs) :
INDENT
    if self.id is None :
    INDENT
        saved = []
        for f in self.__class__._meta.get_fields() :
        INDENT
            if isinstance(f, models.FileField) :
            INDENT
                saved.append((f.name, getattr(self, f.name)))
                setattr(self, f.name, None)
            DEDENT
        DEDENT
        super(self.__class__, self).save(* args, ** kwargs)
        for name, val in saved :
        INDENT
            setattr(self, name, val)
        DEDENT
    DEDENT
    super(self.__class__, self).save(* args, ** kwargs)
DEDENT
----------------------------------------

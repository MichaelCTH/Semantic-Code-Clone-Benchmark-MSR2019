$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33905977_33906140_3_11
33905977_33906604_4_10
Title: "In python how can I search a specific column for a specific value in a txt file then return the specific value's row?" 
----------------------------------------

def find(filename, number) :
INDENT
    with open(filename) as file :
    INDENT
        reader = csv.DictReader(file,
            fieldnames = ['col1', 'col2', 'col3'],
            delimiter = ' ')
        for line in reader :
        INDENT
            if line ['col1'] == str(number) :
            INDENT
                return (line ['col2'], line ['col3'])
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def find(reader, col, val) :
INDENT
    for row in reader :
    INDENT
        if row [col] == val :
        INDENT
            return row
        DEDENT
    DEDENT
    raise ValueError('Value {} not found in row {}'.format(val, col))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33918654_33918971_15_30
33918654_33919390_8_20
Title: passing files and values as parameter to a function in python 
----------------------------------------

def latcalc(filename, target_name, vf) :
INDENT
    with open(filename, "w") as openedFile :
    INDENT
        target_name = 0
        for length in range(min_length, max_length) :
        INDENT
            if length < 2 :
            INDENT
                target_name += (length / (vf * c_vaccum))
            DEDENT
            elif length == 2 :
            INDENT
                target_name += delay
            DEDENT
            else :
            INDENT
                target_name = target_name
            DEDENT
            myline = "%s\t%s\n" % (length, target_name)
            openedFile.write(myline)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def latcalc(filename, vf) :
INDENT
    target_name = 0
    for length in range(min_length, max_length) :
    INDENT
        if length < 2 :
        INDENT
            target_name += (length / (vf * c_vaccum))
        DEDENT
        elif length == 2 :
        INDENT
            target_name += delay
        DEDENT
    DEDENT
    myline = "%s\t%d\n" % (length, target_name)
    with open(filename, "w") as f :
    INDENT
        f.write(myline)
    DEDENT
    return target_name
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33918654_33919066_19_33
33918654_33919390_8_20
Title: passing files and values as parameter to a function in python 
----------------------------------------

def latcalc(lat) :
INDENT
    target_name = 0
    for length in range(min_length, max_length) :
    INDENT
        if length < 2 :
        INDENT
            target_name += (length / (lat.factor * c_vaccum))
        DEDENT
        elif length == 2 :
        INDENT
            target_name += delay
        DEDENT
        else :
        INDENT
            target_name = target_name
        DEDENT
        myline = "%s\t%s\n" % (length, target_name)
        lat.file.write(myline)

    DEDENT
DEDENT
----------------------------------------

def latcalc(filename, vf) :
INDENT
    target_name = 0
    for length in range(min_length, max_length) :
    INDENT
        if length < 2 :
        INDENT
            target_name += (length / (vf * c_vaccum))
        DEDENT
        elif length == 2 :
        INDENT
            target_name += delay
        DEDENT
    DEDENT
    myline = "%s\t%d\n" % (length, target_name)
    with open(filename, "w") as f :
    INDENT
        f.write(myline)
    DEDENT
    return target_name
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33935815_33939446_18_24
33935815_34024858_10_16
Title: Having issues in Unit TestCases for Custom Loader for template in django 
----------------------------------------

def test_custom_loader(self) :
INDENT
    template_path = 'index.html'
    engine = Engine()
    engine.dirs = ['core/templates',]
    out = HelperLoader(engine)
    template = out.load_template(template_path)
    self.assertEqual('template source with updated content.', out.out_source)
DEDENT
----------------------------------------

def test_custom_loader(self) :
INDENT
    template_path = 'index.html'
    engine = Engine()
    engine.dirs = ['core/templates',]
    out = CustomLoader(engine)
    template = out.load_template(template_path)
    self.assertEqual('template source with updated content.', out.source)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33936775_34062280_102_115
33936775_34062280_117_125
Title: webPy Sessions - Concurrent users use same session and session timeout 
----------------------------------------

def GET(self) :
INDENT
    session = web.ctx.environ ['beaker.session']
    try :
    INDENT
        render = create_render(0)
        session.invalidate()
        session.delete()
        return render.logout()
    DEDENT
    except :
    INDENT
        session.invalidate()
        session.delete()
        render = create_render(0)
        return render.logout()

    DEDENT
DEDENT
----------------------------------------

def GET(self) :
INDENT
    session = web.ctx.environ ['beaker.session']
    if logged(session) == False :
    INDENT
        raise web.seeother('/login')
    DEDENT
    else :
    INDENT
        render = create_render(0)
        return render.index()

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33936775_34062280_102_115
33936775_34062280_62_100
Title: webPy Sessions - Concurrent users use same session and session timeout 
----------------------------------------

def GET(self) :
INDENT
    session = web.ctx.environ ['beaker.session']
    try :
    INDENT
        render = create_render(0)
        session.invalidate()
        session.delete()
        return render.logout()
    DEDENT
    except :
    INDENT
        session.invalidate()
        session.delete()
        render = create_render(0)
        return render.logout()

    DEDENT
DEDENT
----------------------------------------

def GET(self) :
INDENT
    session = web.ctx.environ ['beaker.session']
    if logged(session) == True :
    INDENT
        render = create_render(session ['privilege'])
        return render.index()
    DEDENT
    else :
    INDENT
        render = create_render(0)
        return render.login()

    DEDENT
    def POST(self) :
    INDENT
        session = web.ctx.environ ['beaker.session']
        data = web.input()
        name = data ['user']
        passwd = data ['passwd']
        ident = model.get_users(m, name)
        try :
        INDENT
            if passwd == ident.password.strip() :
            INDENT
                session ['login'] = 1
                session ['privilege'] = ident ['privilege']
                session ['user'] = name
                session.save()
                render = create_render(session ['privilege'])
                return render.index()
            DEDENT
            else :
            INDENT
                session.login = 0
                session.privilege = 0
                session.user = 'none'
                render = create_render(session ['privilege'])
                return render.login()
            DEDENT
        DEDENT
        except :
        INDENT
            session ['login'] = 0
            session ['privilege'] = 0
            render = create_render(session ['privilege'])
            return render.login()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33936775_34062280_117_125
33936775_34062280_62_100
Title: webPy Sessions - Concurrent users use same session and session timeout 
----------------------------------------

def GET(self) :
INDENT
    session = web.ctx.environ ['beaker.session']
    if logged(session) == False :
    INDENT
        raise web.seeother('/login')
    DEDENT
    else :
    INDENT
        render = create_render(0)
        return render.index()

    DEDENT
DEDENT
----------------------------------------

def GET(self) :
INDENT
    session = web.ctx.environ ['beaker.session']
    if logged(session) == True :
    INDENT
        render = create_render(session ['privilege'])
        return render.index()
    DEDENT
    else :
    INDENT
        render = create_render(0)
        return render.login()

    DEDENT
    def POST(self) :
    INDENT
        session = web.ctx.environ ['beaker.session']
        data = web.input()
        name = data ['user']
        passwd = data ['passwd']
        ident = model.get_users(m, name)
        try :
        INDENT
            if passwd == ident.password.strip() :
            INDENT
                session ['login'] = 1
                session ['privilege'] = ident ['privilege']
                session ['user'] = name
                session.save()
                render = create_render(session ['privilege'])
                return render.index()
            DEDENT
            else :
            INDENT
                session.login = 0
                session.privilege = 0
                session.user = 'none'
                render = create_render(session ['privilege'])
                return render.login()
            DEDENT
        DEDENT
        except :
        INDENT
            session ['login'] = 0
            session ['privilege'] = 0
            render = create_render(session ['privilege'])
            return render.login()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33937008_33937299_25_29
33937008_33937333_8_17
Title: How to stop a python threading script using a GUI 
----------------------------------------

def checkbox(self, state) :
INDENT
    if state == QtCore.Qt.Checked :
    INDENT
        worker_thread.start()
    DEDENT
    else :
    INDENT
        worker_thread.stop()
    DEDENT
DEDENT
----------------------------------------

def checkbox(self, state) :
INDENT
    global running
    if state == QtCore.Qt.Checked :
    INDENT
        print 'checked'
        running = True
        work()
    DEDENT
    else :
    INDENT
        print 'unchecked'
        running = False
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3393858_3395967_14_20
3393858_3429214_155_200
Title: getting following error while scanning constantly database table using reactor in twisted 
----------------------------------------

def myQuery(self) :
INDENT
    def interact(txn) :
    INDENT
        sql = "SELECT tool_id,tool_name FROM tool_master"
        txn.execute(sql)
        return txn.fetchall()
    DEDENT
    d = self.dbpool.runInteraction(interact)
    d.addCallbacks(self.printResult, self.printError)
DEDENT
----------------------------------------

def myQuery(self) :
INDENT
    def interact(txn) :
    INDENT
        sql = "SELECT tool_asset_id,tool_execute_id FROM tool_to_execute where status='0'"
        txn.execute(sql)
        result = txn.fetchall()
        if result :
        INDENT
            tool_asset_id = tuple([int(e [0]) for e in result])
            tool_execute_id = tuple([int(e [1]) for e in result])
            if len(tool_asset_id) > 1 :
            INDENT
                sql1 = "SELECT asset_id,tool_id FROM tool_in_assets WHERE tool_asset_id IN %s" % (tool_asset_id,)
            DEDENT
            else :
            INDENT
                sql1 = "SELECT asset_id,tool_id FROM tool_in_assets WHERE tool_asset_id = (%s)" % (tool_asset_id)
            DEDENT
            txn.execute(sql1)
            tup = txn.fetchall()

            asset_tool = st.setPriority(txn, tup)
            log_date = lo.log_date()
            log = log_date + "::priority have been set for the tools......\n"
            lo.wfile(log)

            res = {}
            for element in asset_tool :
            INDENT
                if element [0] in res :
                INDENT
                    res [element [0]].append(int(element [1]))
                DEDENT
                else :
                INDENT
                    res [int(element [0])] = [int(element [1])]
                DEDENT
            DEDENT
            if res ! = None and res.keys() ! = [] :
            INDENT
                for asset_id in res.iterkeys() :
                INDENT
                    if len(tool_execute_id) > 1 :
                    INDENT
                        sql_del = "delete from tool_to_execute where tool_execute_id in %s " % (tool_execute_id,)
                    DEDENT
                    else :
                    INDENT
                        sql_del = "delete from tool_to_execute where tool_execute_id = %s" % (tool_execute_id)
                    DEDENT
                DEDENT
                txn.execute(sql_del)

            DEDENT
            tvg.generate(txn, res)

        DEDENT
    DEDENT
    d = self.dbpool.runInteraction(interact)
    d.addCallbacks(self.printResult, self.printError)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33948731_33949099_19_32
33948731_34406933_9_19
Title: Modifying a cooldown decorator to work for methods instead of functions 
----------------------------------------

def __call__(self, func) :
INDENT
    is_method = inspect.getargspec(func).args [0] == 'self'
    def call_if(* args, ** kwargs) :
    INDENT
        if is_method :
        INDENT
            self._storage = args [0]
        DEDENT
        else :
        INDENT
            self._storage = self
        DEDENT
        if self.remaining < = 0 :
        INDENT
            self.remaining = self._duration
            return func(* args, ** kwargs)
        DEDENT
    DEDENT
    call_if.setRemaining = self.__setRemaining
    call_if.getRemaining = self.__getRemaining
    return call_if
DEDENT
----------------------------------------

def __call__(self, * args, ** kwargs) :
INDENT
    if self.func is None :
    INDENT
        self.func = args [0]
        return self
    DEDENT
    now = time.time()
    if now - self.calltime > = self.timeout :
    INDENT
        self.calltime = now
        if self.obj is None :
        INDENT
            return self.func.__call__(* args, ** kwargs)
        DEDENT
        else :
        INDENT
            return self.func.__get__(self.obj, self.objtype)(* args, ** kwargs)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33969198_33969413_39_44
33969198_33969413_57_71
Title: Loop function in pygame does not make characters in game move 
----------------------------------------

def update(self) :
INDENT
    self.rect.y += 1
    if self.rect.y > 500 :
    INDENT
        self.rect.y = 30

    DEDENT
DEDENT
----------------------------------------

def update(self) :
INDENT
    self.rect.x += self.change

    if self.rect.left < 0 :
    INDENT
        self.rect.left = 0
    DEDENT
    elif self.rect.right > WIDTH :
    INDENT
        self.rect.right = WIDTH

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33974467_33976834_27_63
33974467_33981543_27_71
Title: wxpython frame doesn't re-draw it's contents in while loop 
----------------------------------------

def draw_image(self, event = None) :
INDENT
    secondsLeft = self.future_time - datetime.datetime.now()

    secondsLeft = int(secondsLeft.total_seconds())
    if secondsLeft < = 0 :
    INDENT
        secondsLeft = 0
        if self.timer.IsRunning() :
        INDENT
            self.timer.Stop()

        DEDENT
    DEDENT
    secondsLeft = str(secondsLeft)

    w, h = 400, 400

    draw_bmp = wx.EmptyBitmap(w, h)

    canvas = wx.MemoryDC(draw_bmp)
    canvas.SetBrush(wx.Brush('white'))
    canvas.Clear()

    tw, th = canvas.GetTextExtent(secondsLeft)

    canvas.DrawText(secondsLeft, (w - tw) / 2, (h - th) / 2)
    self.statbmp.SetBitmap(draw_bmp)
DEDENT
----------------------------------------

def draw_image(self, event = None) :
INDENT
    secondsLeft = self.future_time - datetime.datetime.now()

    secondsLeft = int(secondsLeft.total_seconds())
    if secondsLeft < = 0 :
    INDENT
        secondsLeft = 0
        if self.timer.IsRunning() :
        INDENT
            self.timer.Stop()

        DEDENT
    DEDENT
    d, s = divmod(secondsLeft, 86400)
    h, s = divmod(s, 3600)
    m, s = divmod(s, 60)
    timestamp = 30 * "  "
    if d > 0 :
    INDENT
        time_stamp = "%02d Days Hrs:%02d Mins:%02d Secs:%02d" % (d, h, m, s)
    DEDENT
    elif h > 0 :
    INDENT
        time_stamp = "Hrs:%02d Mins:%02d Secs:%02d" % (h, m, s)
    DEDENT
    else :
    INDENT
        time_stamp = "Mins:%02d Secs:%02d" % (m, s)

    DEDENT
    w, h = 400, 400

    draw_bmp = wx.EmptyBitmap(w, h)

    canvas = wx.MemoryDC(draw_bmp)
    canvas.SetBrush(wx.Brush('white'))
    canvas.Clear()

    tw, th = canvas.GetTextExtent(time_stamp)

    canvas.DrawText(time_stamp, (w - tw) / 2, (h - th) / 2)
    self.statbmp.SetBitmap(draw_bmp)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3398072_3398360_1_13
3398072_3398451_1_29
Title: python: is there a frequency function? 
----------------------------------------

def frequency(data, bins) :
INDENT
    bins = bins [:]
    bins.sort()
    freqs = [0] * (len(bins) + 1)
    for item in data :
    INDENT
        for i, bin_val in enumerate(bins) :
        INDENT
            if item < = bin_val :
            INDENT
                freqs [i] += 1
                break
            DEDENT
        DEDENT
        else :
        INDENT
            freqs [len(bins)] += 1
        DEDENT
    DEDENT
    return freqs
DEDENT
----------------------------------------

def frequency(values, groups) :
INDENT
    toret = dict()
    toret [None] = list()

    values.sort()
    groups.sort()

    i = 0
    for maxValue in groups :
    INDENT
        while ((values [i] < maxValue) and (i < len(values))) :
        INDENT
            if (toret.get(maxValue) == None) :
            INDENT
                toret [maxValue] = list()
            DEDENT
            toret [maxValue].append(values [i])
            i += 1
        DEDENT
        if (i > = len(values)) :
        INDENT
            break
        DEDENT
    DEDENT
    if (i < len(values)) :
    INDENT
        while (i < len(values)) :
        INDENT
            toret [None].append(values [i])
            i += 1
        DEDENT
    DEDENT
    return toret

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33982705_33983388_18_28
33982705_33983388_37_56
Title: "Python  multithreading with Queue" 
----------------------------------------

def run(self) :
INDENT
    self.control.put(InitMessage(self.my_in_queue, self.my_out_queue))
    while True :
    INDENT
        if not self.my_in_queue.empty() :
        INDENT
            message = self.my_in_queue.get()
            print ("Client {name} got message from server of type {type}".format(
                    name = self.name, type = type(message).__name__))
            self.my_in_queue.task_done()
            self.my_out_queue.put(Message())
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        while not self.control.empty() :
        INDENT
            message = self.control.get()
            if isinstance(message, InitMessage) :
            INDENT
                self.clients [self.id] = {'to_client' : message.queue_in,
                    'from_client' : message.queue_out}
                message.queue_in.put(Message())
                self.id += 1
            DEDENT
            self.control.task_done()
        DEDENT
        for client in self.clients :
        INDENT
            if not self.clients [client] ['from_client'].empty() :
            INDENT
                message = self.clients [client] ['from_client'].get()
                print ("got message from client {id}".format(id = client))
                self.clients [client] ['from_client'].task_done()
                self.clients [client] ['to_client'].put(Message())
            DEDENT
        DEDENT
        sleep(1)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33982705_33983388_18_28
33982705_33983561_20_27
Title: "Python  multithreading with Queue" 
----------------------------------------

def run(self) :
INDENT
    self.control.put(InitMessage(self.my_in_queue, self.my_out_queue))
    while True :
    INDENT
        if not self.my_in_queue.empty() :
        INDENT
            message = self.my_in_queue.get()
            print ("Client {name} got message from server of type {type}".format(
                    name = self.name, type = type(message).__name__))
            self.my_in_queue.task_done()
            self.my_out_queue.put(Message())
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        req = self.inq.get()
        if not req :
        INDENT
            break
        DEDENT
        msg, clientq = req
        clientq.put("From serv: " + msg)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33982705_33983388_37_56
33982705_33983561_20_27
Title: "Python  multithreading with Queue" 
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        while not self.control.empty() :
        INDENT
            message = self.control.get()
            if isinstance(message, InitMessage) :
            INDENT
                self.clients [self.id] = {'to_client' : message.queue_in,
                    'from_client' : message.queue_out}
                message.queue_in.put(Message())
                self.id += 1
            DEDENT
            self.control.task_done()
        DEDENT
        for client in self.clients :
        INDENT
            if not self.clients [client] ['from_client'].empty() :
            INDENT
                message = self.clients [client] ['from_client'].get()
                print ("got message from client {id}".format(id = client))
                self.clients [client] ['from_client'].task_done()
                self.clients [client] ['to_client'].put(Message())
            DEDENT
        DEDENT
        sleep(1)
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        req = self.inq.get()
        if not req :
        INDENT
            break
        DEDENT
        msg, clientq = req
        clientq.put("From serv: " + msg)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33983860_39937466_1_16
33983860_52883069_16_66
Title: hide chromeDriver console in python 
----------------------------------------

def start(self) :
INDENT
    try :
    INDENT
        cmd = [self.path]
        cmd.extend(self.command_line_args())
        self.process = subprocess.Popen(cmd, env = self.env,
            close_fds = platform.system() ! = 'Windows',
            stdout = self.log_file, stderr = self.log_file, creationflags = CREATE_NO_WINDOW)
    DEDENT
    except TypeError :
    INDENT
        raise
    DEDENT
DEDENT
----------------------------------------

def start(self) :
INDENT
    try :
    INDENT
        cmd = [self.path]
        cmd.extend(self.command_line_args())
        if platform.system() == 'Windows' :
        INDENT
            info = subprocess.STARTUPINFO()
            info.dwFlags = subprocess.STARTF_USESHOWWINDOW
            info.wShowWindow = 0
        DEDENT
        else :
        INDENT
            info = None
        DEDENT
        self.process = subprocess.Popen(
            cmd, env = self.env,
            close_fds = platform.system() ! = 'Windows',
            startupinfo = info,
            stdout = self.log_file,
            stderr = self.log_file,
            stdin = subprocess.PIPE)
    DEDENT
    except TypeError :
    INDENT
        raise
    DEDENT
    except OSError as err :
    INDENT
        if err.errno == errno.ENOENT :
        INDENT
            raise WebDriverException(
                "'%s' executable needs to be in PATH. %s" % (
                    os.path.basename(self.path), self.start_error_message))
        DEDENT
        elif err.errno == errno.EACCES :
        INDENT
            raise WebDriverException(
                "'%s' executable may have wrong permissions. %s" % (
                    os.path.basename(self.path), self.start_error_message))
        DEDENT
        else :
        INDENT
            raise
        DEDENT
    DEDENT
    except Exception as e :
    INDENT
        raise WebDriverException(
            "Executable %s must be in path. %s\n%s" % (
                os.path.basename(self.path), self.start_error_message,
                str(e)))
    DEDENT
    count = 0
    while True :
    INDENT
        self.assert_process_still_running()
        if self.is_connectable() :
        INDENT
            break
        DEDENT
        count += 1
        time.sleep(1)
        if count == 30 :
        INDENT
            raise WebDriverException("Can't connect to the Service %s" % (
                    self.path,))
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3399246_3399414_10_15
3399246_3400197_12_17
Title: python: simple approach to killing children or reporting their success? 
----------------------------------------

def sigterm_handler(signal, frame) :
INDENT
    print 'You killed me!'
    with pobslock :
    INDENT
        for p in pobs : p.kill()
    DEDENT
    sys.exit(0)
DEDENT
----------------------------------------

def sigterm_handler(signal, frame) :
INDENT
    print 'You killed me! I will take care of the children.'
    with pobslock :
    INDENT
        for p in pobs : p.kill()
    DEDENT
    sys.exit(0)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33997166_33998318_3_33
33997166_41229565_5_15
Title: Setting a specific area bgcolor for python's 'turtle import' 
----------------------------------------

def left_bgcolor(c) :
INDENT
    showturtle()
    penup()
    w = window_width()
    h = window_height()
    penwidth = 10
    width(penwidth)
    goto(- w / 2 + penwidth / 2, - h / 2 + penwidth)
    setheading(90)
    pendown()
    color(c, c)
    begin_fill()
    forward(h - penwidth)
    right(90)
    forward(w / 2 - penwidth)
    right(90)
    forward(h - penwidth)
    right(90)
    forward(w / 2 - penwidth)
    right(90)
    end_fill()
    penup()
    goto(0, 0)
    width(1)
    color('black', 'white')
    setheading(90)
DEDENT
----------------------------------------

def left_bgcolor(color) :
INDENT
    squirtle = turtle.Turtle(shape = "square", visible = False)
    squirtle.penup()
    screen = turtle.Screen()
    width = screen.window_width() / 2
    height = screen.window_height()
    squirtle.setx(- width / 2)
    squirtle.shapesize(height / STAMP_UNIT, width / STAMP_UNIT)
    squirtle.color(color)
    squirtle.stamp()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34007062_34008566_34_43
34007062_34008566_6_22
Title: How do I get the contents of a row of QTableWidget with click on the button in python and PyQt 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainForm, self).__init__(parent)
    self.resize(400, 200)
    self.tableWidget = QtGui.QTableWidget()
    layout = QtGui.QVBoxLayout()
    layout.addWidget(self.tableWidget)
    self.setLayout(layout)
    self.init_main_form()
DEDENT
----------------------------------------

def __init__(self, row, col, parent = None,) :
INDENT
    super(EditButtonsWidget, self).__init__(parent)
    self.row = row
    self.col = col
    self.parent = parent
    btnsave = QtGui.QPushButton('Save')
    btnedit = QtGui.QPushButton('edit')
    btndelete = QtGui.QPushButton('delete')
    layout = QtGui.QHBoxLayout()
    layout.setContentsMargins(0, 0, 0, 0)
    layout.setSpacing(0)
    layout.addWidget(btnsave)
    layout.addWidget(btnedit)
    layout.addWidget(btndelete)
    self.setLayout(layout)
    btnedit.clicked.connect(self.getAllCellVal)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34045227_34045690_3_10
34045227_34051134_8_45
Title: Python equivalent for 'grep -C N'? 
----------------------------------------

def grep(pattern, block, context_lines = 0) :
INDENT
    lines = block.splitlines()
    for line_number, line in enumerate(lines) :
    INDENT
        if re.match(pattern, line) :
        INDENT
            lines_with_context = lines [line_number - context_lines : line_number + context_lines + 1]
            yield '\n'.join(lines_with_context)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def grep(pattern, input_file, context = 0, case_sensitivity = True, file_encoding = 'utf-8') :
INDENT
    stack = deque()
    hits = []
    lines_remaining = None
    with codecs.open(input_file, mode = 'rb', encoding = file_encoding) as f :
    INDENT
        for line in f :
        INDENT

            stack.append(line)

            if lines_remaining and lines_remaining > 0 :
            INDENT
                continue
            DEDENT
            elif lines_remaining and lines_remaining == 0 :
            INDENT
                hits.append(stack)
                lines_remaining = None
                stack = deque()

            DEDENT
            if len(stack) > context + 1 :
            INDENT
                last_line_removed = stack.popleft()

            DEDENT
            if case_sensitivity :
            INDENT
                search_object = re.search(pattern, line, re.UNICODE)
            DEDENT
            else :
            INDENT
                search_object = re.search(pattern, line, re.IGNORECASE | re.UNICODE)
            DEDENT
            if search_object :
            INDENT
                lines_remaining = context

            DEDENT
        DEDENT
    DEDENT
    if lines_remaining and len(stack) > 0 :
    INDENT
        hits.append(stack)

    DEDENT
    return hits
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34052977_34053130_1_19
34052977_34053130_20_31
Title: Python simplify checking multiple boolean conditions 
----------------------------------------

def do_stuff(a, b, c) :
INDENT
    flags = bool(a), bool(b), bool(c)
    if flags == (True, True, True) :
    INDENT
        return function7()
    DEDENT
    if flags == (True, True, False) :
    INDENT
        return function6()
    DEDENT
    if flags == (True, False, True) :
    INDENT
        return function5()
    DEDENT
    if flags == (True, False, False) :
    INDENT
        return function4()
    DEDENT
    if flags == (False, True, True) :
    INDENT
        return function3()
    DEDENT
    if flags == (False, True, False) :
    INDENT
        return function2()
    DEDENT
    if flags == (False, False, True) :
    INDENT
        return function1()
    DEDENT
    if flags == (False, False, False) :
    INDENT
        return function0()
    DEDENT
DEDENT
----------------------------------------

def do_stuff(a, b, c) :
INDENT
    control = {
        (True, True, True) : function7,
        (True, True, False) : function6,
        (True, False, True) : function5,
        (True, False, False) : function4,
        (False, True, True) : function3,
        (False, True, False) : function2,
        (False, False, True) : function1,
        (False, False, False) : function0,
        }
    return control [bool(a), bool(b), bool(c)]()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3406627_3407118_74_97
3406627_3407363_3_15
Title: "Paranoia excessive logging and exception handling on simple scripts dealing with files. Is this normal?" 
----------------------------------------

def flatten_dir(dirname) :
INDENT
    log.info('processing directory "%s"' % dirname)
    backup_dirname = str(uuid.uuid4())
    backup_tree(dirname, backup_dirname)
    try :
    INDENT
        for root, dirs, files in os.walk(dirname, topdown = False) :
        INDENT
            log.debug('os.walk passing: (%s, %s, %s)' % (root, dirs, files))
            if root ! = dirname :
            INDENT
                for file in files :
                INDENT
                    full_filename = os.path.join(root, file)
                    move_file(full_filename, dirname)
                DEDENT
                remove_empty_dir(dirname)
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        remove_tree_for_restore(dirname)
        restore_backup(backup_dirname, dirname)
        raise
    DEDENT
    else :
    INDENT
        remove_backup_tree(backup_dirname)
    DEDENT
DEDENT
----------------------------------------

def flatten_dir(dirname) :
INDENT
    for root, dirs, files in os.walk(dirname, topdown = False) :
    INDENT
        assert len(dirs) == 0
        if root ! = dirname :
        INDENT
            for file in files :
            INDENT
                full_filename = os.path.join(root, file)
                target_filename = os.path.join(dirname, file)
                if os.path.exists(target_filename) :
                INDENT
                    raise Exception('Unable to move file "%s" because "%s" already exists'
                        % (full_filename, target_filename))
                DEDENT
                os.rename(full_filename, target_filename)
            DEDENT
            os.rmdir(root)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3406627_3407118_98_111
3406627_3407363_16_21
Title: "Paranoia excessive logging and exception handling on simple scripts dealing with files. Is this normal?" 
----------------------------------------

def main(dirname) :
INDENT
    try :
    INDENT
        flatten_dir(dirname)
    DEDENT
    except :
    INDENT
        import exceptions
        logging.exception('error flattening directory "%s"' % dirname)
        exceptions.print_exc()
        sys.stderr.write('the program is terminating with an error\n')
        sys.stderr.write('press consult the log file\n')
        sys.stderr.flush()
        time.sleep(0.25)
        print 'Press any key to quit this program.'
        msvcrt.getch()
        sys.exit()
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    try :
    INDENT
        flatten_dir(somedir)
    DEDENT
    except :
    INDENT
        logging.exception('Failed to flatten directory "%s".' % somedir)
        print "ERROR: Failed to flatten directory. Check log files for details."
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34069642_34069931_12_18
34069642_34069931_21_27
Title: Pythons 'with'-statement: correctly nest/derive classes with __enter__/__exit__ 
----------------------------------------

def context(self) :
INDENT
    print ('class_a enter')
    try :
    INDENT
        yield self
    DEDENT
    finally :
    INDENT
        print ('class_a exit')
    DEDENT
DEDENT
----------------------------------------

def context(self) :
INDENT
    with super().context() :
    INDENT
        print ('class_b enter')
        try :
        INDENT
            yield self
        DEDENT
        finally :
        INDENT
            print ('class_b exit')
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34097472_34109257_29_36
34097472_34127379_40_49
Title: Tkinter formatting to two decimal places 
----------------------------------------

def Totals() :
INDENT
    dollarCoinsTotal.set(form(dollarCoins.get() * 100))
    halfDollarTotal.set(form(halfDollars.get() * 50))
    quartersTotal.set(form(quarters.get() * 25))
    dimesTotal.set(form(dimes.get() * 10))
    nickelsTotal.set(form(nickels.get() * 5))
    penniesTotal.set(form(pennies.get() * 1))
DEDENT
----------------------------------------

def Totals() :
INDENT
    dollarCoinsTotal.set("{:.2f}".format(float(dollarCoins.get())))
    halfDollarTotal.set("{:.2f}".format(float(halfDollars.get() * 0.50)))
    quartersTotal.set("{:.2f}".format(float(quarters.get() * 0.25)))
    dimesTotal.set("{:.2f}".format(float(dimes.get() * 0.10)))
    nickelsTotal.set("{:.2f}".format(float(nickels.get() * 0.05)))
    penniesTotal.set("{:.2f}".format(float(pennies.get() * 0.01)))
    allTotal.set("{:.2f}".format(float(dollarCoinsTotal.get() + halfDollarTotal.get() + quartersTotal.get() + dimesTotal.get() + nickelsTotal.get() + penniesTotal.get())))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34126232_34126581_14_29
34126232_34126581_4_12
Title: Unable to to show value in Entry widget in Tkinter GUI 
----------------------------------------

def __init__(self, parent, home) :
INDENT
    self.parent = parent
    self.top = Tkinter.Toplevel(self.parent)
    self.top.geometry('500x100+200+500')
    self.top.title('Set Home Directory')

    self.entryVariable = Tkinter.StringVar()
    self.entry = Tkinter.Entry(self.top, textvariable = self.entryVariable)
    self.entryVariable.set(home)
    self.entry.grid(column = 0, row = 0, sticky = 'EW')
    self.entry.focus_set()
    self.top.grid_columnconfigure(0, weight = 1)
    self.top.resizable(True, False)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    self.parent = parent
    self.parent.geometry('500x300+200+50')
    self.parent.title('Main Window')
    self.home_dir = os.getcwd()

    SetHomeDir(parent = self.parent, home = self.home_dir)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34187986_34188118_8_16
34187986_34188192_9_17
Title: how to return variable in another function 
----------------------------------------

def unos() :
INDENT
    provera()
    while komanda in ("1", "2") :
    INDENT
        if komanda == "1" :
        INDENT
            unosNam()
        DEDENT
        if komanda == "2" :
        INDENT
            unosKat()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def unos() :
INDENT
    while True :
    INDENT
        komanda = provera()
        if komanda == "1" :
        INDENT
            unosNam()
        DEDENT
        elif komanda == "2" :
        INDENT
            unosKat()
        DEDENT
        else :
        INDENT
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34189138_34200510_34_55
34189138_34200510_70_80
Title: placing widget in tab causes bug which disables controls - python 
----------------------------------------

def initUI(self) :
INDENT
    self.resize(250, 400)
    self.setWindowTitle("Example")

    self.itemList = QtGui.QTreeWidget()
    self.itemList = TreeWidget()
    headers = ["Items"]
    self.itemList.setColumnCount(len(headers))
    self.itemList.setHeaderLabels(headers)

    self.mainLayout = QtGui.QGridLayout(self)
    self.mainLayout.setContentsMargins(5, 5, 5, 5)
    self.mainLayout.addWidget(self.itemList, 0, 0, 1, 1)

DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.resize(550, 400)
    tab_panel = QtGui.QTabWidget()
    tab_panel.addTab(ExampleWidget(), "Test Tab")
    mainLayout = QtGui.QVBoxLayout()
    mainLayout.addWidget(tab_panel)
    self.setLayout(mainLayout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34190946_34191338_2_13
34190946_34191444_9_18
Title: Forming a polygon with classes 
----------------------------------------

def __init__(self, coord_list, angles) :
INDENT
    if len(coord_list) / / 2 < 3 :
    INDENT
        raise Exception("Side count must be 3 or more.")
    DEDENT
    s = []
    self.number_points = 0
    self.number_angles = 0
    self.coordinates_x = coord_list [: : 2]
    self.coordinates_y = coord_list [1 : : 2]
    self.angles = angles
    self.s = s.append([coordinate_x, coordinate_y])
    self.number_points += len(coord_list / / 2)
    self.number_angles += len(angles)
DEDENT
----------------------------------------

def __init__(self, * argv, ** kargv) :
INDENT
    points = list()
    for elem in argv :
    INDENT
        if isinstance(elem, (PointCartesian, PointPolar)) :
        INDENT
            points.append(elem)
        DEDENT
        else :
        INDENT
            raise ValueError("Element " + str(elem) + " of wrong type")
        DEDENT
    DEDENT
    if len(points) < 3 :
    INDENT
        raise ValueError("Insufficient data")
    DEDENT
    self.points = points
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34192753_34193604_26_33
34192753_34193604_8_18
Title: tkinter showing multiple buttons with dictionary in multiple frame (object oriented programming) 
----------------------------------------

def __init__(self, root, col) :
INDENT
    self.fr = tk.Frame(root)
    self.fr.grid(row = 0, column = col)
    but = tk.Button(self.fr,
        text = "A new frame with a button " + str(col)).grid(row = 0)
    tk.Button(self.fr, text = "Destroy This Frame", bg = "orange",
        command = self.fr.destroy).grid(row = 1, column = 0)
DEDENT
----------------------------------------

def __init__(self, root) :
INDENT
    self.root = root
    self.column = 0
    main_frame = tk.Frame(self.root)
    main_frame.grid(row = 0)
    but = tk.Button(main_frame, text = "Open a Frame of Buttons",
        command = self.open_another)
    but.grid(row = 0, column = 0)
    tk.Button(main_frame, text = "Exit Tkinter", bg = "red",
        command = self.root.quit).grid(row = 1, column = 0, sticky = "we")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34192791_34193081_3_12
34192791_34193281_4_10
Title: Flip characters python 
----------------------------------------

def scramble(word) :
INDENT
    i = random.randint(1, len(word) - 2)
    j = random.randint(1, len(word) - 3)
    if j > = i :
    INDENT
        j += 1
    DEDENT
    if j < i :
    INDENT
        i, j = j, i
    DEDENT
    return word [: i] + word [j] + word [i + 1 : j] + word [i] + word [j + 1 :]
DEDENT
----------------------------------------

def scramble(word) :
INDENT
    first_group = randint(0, len(word) - 2)
    second_group = randint(0, len(word) - 2 - first_group)
    pattern = "(.{%d})(.)(.{%d})(.)(.*)" % (first_group, second_group)
    print pattern
    scrambled = re.search(pattern, word)
    print "%s%s%s%s%s" % (scrambled.group(1), scrambled.group(4), scrambled.group(3), scrambled.group(2), scrambled.group(5))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34205659_34207415_1_11
34205659_34214982_4_14
Title: Speed up Newtons Method using numpy arrays 
----------------------------------------

def newton_raphson(x, y, max_iter = 20, eps = 1.0e-20) :
INDENT
    z = x + y * 1j
    nz = len(z)
    iters = np.zeros((nz, nz))
    for i in range(max_iter) :
    INDENT
        z_old = z
        z = z - (f(z) / f_prime(z))
        mask = (iters == 0) & (z == z_old)
        iters [mask] = i
    DEDENT
    return np.angle(z), items
DEDENT
----------------------------------------

def newton_raphson(Re, Im, max_iter) :
INDENT
    z = Re + 1j * Im [:, np.newaxis]
    itercount = np.zeros_like(z, dtype = np.int32)
    mask = np.ones_like(z, dtype = np.bool)
    for i in range(max_iter) :
    INDENT
        z_old = z.copy()
        z [mask] = iterstep(z [mask])
        mask = (z ! = z_old)
        itercount [mask] = i
    DEDENT
    return np.angle(z), itercount
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34211947_34212160_28_59
34211947_34213226_10_20
Title: store additional data in QAction menu item - python 
----------------------------------------

def initUI(self) :
INDENT
    self.setWindowTitle("Example")

    self.main_menu = QtGui.QMenu()
    self.sub_menu = QtGui.QMenu("Great")
    self.main_menu.addMenu(self.sub_menu)

    names = ["Joe", "Kevin", "Amy", "Doug", "Jenny"]

    for index, name in enumerate(names) :
    INDENT
        fancyName = "%s - %s" % (index, name)
        action = self.sub_menu.addAction(fancyName)
        action.setData(Person(name = name))
        action.triggered.connect(partial(self.menu_action, action))

    DEDENT
    self.factionsList = QtGui.QListWidget()

    self.factionsList.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
    self.factionsList.customContextMenuRequested.connect(self.on_context_menu_factions)

    self.mainLayout = QtGui.QGridLayout(self)
    self.mainLayout.addWidget(self.factionsList, 1, 0)
    self.show()
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    for x in xrange(len(names)) :
    INDENT
        name = str(x) + " - " + names [x]
        action = ActionObject(name, self.sub_menu)
        action.data = Person()
        action.triggered.connect(self.menu_action)
        self.sub_menu.addAction(action)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34215008_34215201_1_16
34215008_34215293_8_22
Title: A Python return value 
----------------------------------------

def bisect(t, val) :
INDENT
    mid = len(t) / / 2
    mid_ele = t [mid]
    end = len(t)
    if mid_ele < val and end > 1 :
    INDENT
        t = t [mid :]
        return bisect(t, val)
    DEDENT
    elif mid_ele > val and end > 1 :
    INDENT
        t = t [: mid]
        return bisect(t, val)
    DEDENT
    elif mid_ele == val :
    INDENT
        t = mid_ele
        return t
    DEDENT
    else :
    INDENT
        return False
    DEDENT
DEDENT
----------------------------------------

def bisect(t, val) :
INDENT
    if t [len(t) / 2] < val and len(t) > 1 :
    INDENT
        t = t [len(t) / 2 :]
        t = bisect(t, val)
    DEDENT
    elif t [len(t) / 2] > val and len(t) > 1 :
    INDENT
        t = t [: len(t) / 2]
        t = bisect(t, val)
    DEDENT
    elif t [len(t) / 2] == val :
    INDENT
        t = t [len(t) / 2]
        print type(t), t
    DEDENT
    else :
    INDENT
        return False
    DEDENT
    return t
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34222925_34223412_1_19
34222925_34223856_9_20
Title: Trying to make this work with two characters and not just one 
----------------------------------------

def main() :
INDENT
    result = ""
    cards = ["2D", "3C", "5H", "5D", "JS"]
    previous = cards [0]
    current = cards [1]
    i = 1
    while i < len(cards) and result == "" :
    INDENT

        previous = cards [i - 1]
        current = cards [i]
        if current [0] == previous [0] :
        INDENT
            result = previous + current
        DEDENT
        i = i + 1
    DEDENT
    print (result)
DEDENT
----------------------------------------

def main() :
INDENT
    result = ""
    cards = ["2D", "3C", "5H", "5D", "JS"]

    for prev, curr in pairwise(cards) :
    INDENT
        if prev [0] == curr [0] :
        INDENT
            result = curr + prev
        DEDENT
    DEDENT
    print (result)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34227322_34229382_27_50
34227322_34229382_52_81
Title: Python Tkinter Object Oriented- Centering Multiple Frames 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    innerFrame = tk.Frame(self)
    innerFrame.place(relx =.5, rely =.5, anchor = "c")
    name = tk.Label(innerFrame, text = "Program")
    name.grid(row = 0, columnspan = 5, sticky = "W" + "E")
    username = tk.Label(innerFrame, text = "Username: ")
    username.grid(row = 1, columnspan = 2, sticky = "W")
    user = ttk.Entry(innerFrame, text = "", width = 45)
    user.grid(row = 1, column = 2, columnspan = 3, sticky = "w")
    password = tk.Label(innerFrame, text = "Password: ")
    password.grid(row = 2, columnspan = 2, sticky = "W")
    passentry = ttk.Entry(innerFrame, text = "", width = 45)
    passentry.grid(row = 2, column = 2, columnspan = 3, sticky = "W")
    loginb = ttk.Button(innerFrame, text = "Login", command = lambda : controller.show_frame(AdminHome))
    loginb.grid(row = 3, columnspan = 5, sticky = "W" + "E")
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    innerFrame = tk.Frame(self)
    innerFrame.place(relx =.5, rely =.5, anchor = "c")
    name = tk.Label(innerFrame, text = "Admin Home")
    name.grid(row = 0, sticky = "W")
    name = tk.Label(innerFrame, text = "FirstName + LastName")
    name.grid(row = 0, column = 5, sticky = "E")
    update = ttk.Button(innerFrame, text = "Update Online", command = lambda : controller.show_frame(AdminHome))
    update.grid(row = 1, columnspan = 6, sticky = "W" + "E")
    fetch = ttk.Button(innerFrame, text = "Fetch Data", command = lambda : controller.show_frame(AdminHome))
    fetch.grid(row = 2, columnspan = 6, sticky = "W" + "E")
    a = ttk.Button(innerFrame, text = "a", command = lambda : controller.show_frame(AdminHome))
    a.grid(row = 3, columnspan = 2, sticky = "W" + "E")
    b = ttk.Button(innerFrame, text = "b", command = lambda : controller.show_frame(AdminHome))
    b.grid(row = 3, column = 2, columnspan = 2, sticky = "W" + "E")
    c = ttk.Button(innerFrame, text = "c", command = lambda : controller.show_frame(AdminHome))
    c.grid(row = 3, column = 4, columnspan = 2, sticky = "W" + "E")
    edit = ttk.Button(innerFrame, text = "Edit Details", command = lambda : controller.show_frame(AdminHome))
    edit.grid(row = 4, columnspan = 6, sticky = "W" + "E")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34227322_34229382_27_50
34227322_34229382_5_21
Title: Python Tkinter Object Oriented- Centering Multiple Frames 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    innerFrame = tk.Frame(self)
    innerFrame.place(relx =.5, rely =.5, anchor = "c")
    name = tk.Label(innerFrame, text = "Program")
    name.grid(row = 0, columnspan = 5, sticky = "W" + "E")
    username = tk.Label(innerFrame, text = "Username: ")
    username.grid(row = 1, columnspan = 2, sticky = "W")
    user = ttk.Entry(innerFrame, text = "", width = 45)
    user.grid(row = 1, column = 2, columnspan = 3, sticky = "w")
    password = tk.Label(innerFrame, text = "Password: ")
    password.grid(row = 2, columnspan = 2, sticky = "W")
    passentry = ttk.Entry(innerFrame, text = "", width = 45)
    passentry.grid(row = 2, column = 2, columnspan = 3, sticky = "W")
    loginb = ttk.Button(innerFrame, text = "Login", command = lambda : controller.show_frame(AdminHome))
    loginb.grid(row = 3, columnspan = 5, sticky = "W" + "E")
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (Login, AdminHome) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(Login)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34227322_34229382_52_81
34227322_34229382_5_21
Title: Python Tkinter Object Oriented- Centering Multiple Frames 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    innerFrame = tk.Frame(self)
    innerFrame.place(relx =.5, rely =.5, anchor = "c")
    name = tk.Label(innerFrame, text = "Admin Home")
    name.grid(row = 0, sticky = "W")
    name = tk.Label(innerFrame, text = "FirstName + LastName")
    name.grid(row = 0, column = 5, sticky = "E")
    update = ttk.Button(innerFrame, text = "Update Online", command = lambda : controller.show_frame(AdminHome))
    update.grid(row = 1, columnspan = 6, sticky = "W" + "E")
    fetch = ttk.Button(innerFrame, text = "Fetch Data", command = lambda : controller.show_frame(AdminHome))
    fetch.grid(row = 2, columnspan = 6, sticky = "W" + "E")
    a = ttk.Button(innerFrame, text = "a", command = lambda : controller.show_frame(AdminHome))
    a.grid(row = 3, columnspan = 2, sticky = "W" + "E")
    b = ttk.Button(innerFrame, text = "b", command = lambda : controller.show_frame(AdminHome))
    b.grid(row = 3, column = 2, columnspan = 2, sticky = "W" + "E")
    c = ttk.Button(innerFrame, text = "c", command = lambda : controller.show_frame(AdminHome))
    c.grid(row = 3, column = 4, columnspan = 2, sticky = "W" + "E")
    edit = ttk.Button(innerFrame, text = "Edit Details", command = lambda : controller.show_frame(AdminHome))
    edit.grid(row = 4, columnspan = 6, sticky = "W" + "E")
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (Login, AdminHome) :
    INDENT

        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(Login)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34248961_34251754_8_34
34248961_34251811_6_20
Title: Rock paper scissor game with python tkinter 
----------------------------------------

def __init__(self) :
INDENT
    self.rps = rps.RockPaperScissor()
    self.root = tk.Tk()
    self.playerA = tk.StringVar()
    self.playerA.set('Pick your answer')
    self.playerB = tk.StringVar()
    self.playerB.set('Pick your answer')
    self.result = tk.StringVar()
    self.rps.playerA_score = tk.StringVar()
    self.rps.playerB_score = tk.StringVar()
    self.choices = ('rock', 'paper', 'scissor')
    self.label_choices = (self.playerA, self.playerB, self.result)
    for item in self.label_choices :
    INDENT
        self.label = tk.Label(self.root, textvariable = item)
        self.label.pack()
    DEDENT
    for item in self.choices :
    INDENT
        self.radiobutton = tk.Radiobutton(self.root, text = item,
            variable = self.playerA,
            value = item)
        self.radiobutton.pack()
    DEDENT
    self.button = tk.Button(self.root,
        text = 'update',
        command = self.update).pack()
    self.root.mainloop()
DEDENT
----------------------------------------

def __init__(self, master = None) :
INDENT
    tk.Frame.__init__(self, master)
    self.pack()
    self.value = tk.StringVar()
    self.result = tk.StringVar()
    self.choice = ('rock', 'paper', 'scissor')
    self.rps = rps.RockPaperScissor()
    for i in self.choice :
    INDENT
        tk.Radiobutton(self,
            text = i,
            variable = self.value,
            value = i).pack()
    DEDENT
    tk.Button(self, text = 'play', command = self.play).pack()
    tk.Label(self, textvariable = self.result).pack()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34266964_34267358_1_17
34266964_34267407_8_20
Title: How can I prevent gui freezing in wxpython? 
----------------------------------------

def testFunction(event) :
INDENT
    import pyautogui
    pyautogui.FAILSAFE = False
    def step1(i) :
    INDENT
        pyautogui.hotkey('win', 'r')
        wx.CallLater(500, step2, i)
    DEDENT
    def step2(i) :
    INDENT
        pyautogui.typewrite('cmd.exe')
        wx.CallLater(500, step3, i)
    DEDENT
    def step3(i) :
    INDENT
        pyautogui.hotkey('enter')
        if i < = 1 :
        INDENT
            return
        DEDENT
        wx.CallLater(3500, step1, i - 1)
    DEDENT
    step1(2)
DEDENT
----------------------------------------

def testFunction(event) :
INDENT
    import pyautogui
    import time
    pyautogui.FAILSAFE = False
    for i in range(2) :
    INDENT
        pyautogui.hotkey('win', 'r')
        time.sleep(0.5)
        pyautogui.typewrite('cmd.exe')
        time.sleep(0.5)
        pyautogui.hotkey('enter')
        time.sleep(0.5)
        time.sleep(3)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34266964_34267358_1_17
34266964_34267905_8_20
Title: How can I prevent gui freezing in wxpython? 
----------------------------------------

def testFunction(event) :
INDENT
    import pyautogui
    pyautogui.FAILSAFE = False
    def step1(i) :
    INDENT
        pyautogui.hotkey('win', 'r')
        wx.CallLater(500, step2, i)
    DEDENT
    def step2(i) :
    INDENT
        pyautogui.typewrite('cmd.exe')
        wx.CallLater(500, step3, i)
    DEDENT
    def step3(i) :
    INDENT
        pyautogui.hotkey('enter')
        if i < = 1 :
        INDENT
            return
        DEDENT
        wx.CallLater(3500, step1, i - 1)
    DEDENT
    step1(2)
DEDENT
----------------------------------------

def testFunction(event) :
INDENT
    import time
    for i in range(2) :
    INDENT
        print ('win', 'r')
        time.sleep(0.5)
        print ('cmd.exe')
        time.sleep(0.5)
        print ('enter')
        time.sleep(0.5)
        print 'sleep'
        time.sleep(3)
        print u"Iteración %d".format(i + 1)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34266964_34267407_8_20
34266964_34267905_8_20
Title: How can I prevent gui freezing in wxpython? 
----------------------------------------

def testFunction(event) :
INDENT
    import pyautogui
    import time
    pyautogui.FAILSAFE = False
    for i in range(2) :
    INDENT
        pyautogui.hotkey('win', 'r')
        time.sleep(0.5)
        pyautogui.typewrite('cmd.exe')
        time.sleep(0.5)
        pyautogui.hotkey('enter')
        time.sleep(0.5)
        time.sleep(3)
    DEDENT
DEDENT
----------------------------------------

def testFunction(event) :
INDENT
    import time
    for i in range(2) :
    INDENT
        print ('win', 'r')
        time.sleep(0.5)
        print ('cmd.exe')
        time.sleep(0.5)
        print ('enter')
        time.sleep(0.5)
        print 'sleep'
        time.sleep(3)
        print u"Iteración %d".format(i + 1)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34272819_34273291_4_13
34272819_34274608_1_11
Title: Retrieving only one file that matches the pattern 
----------------------------------------

def searchforfile(dir_path, pattern = '.*\.fa') :
INDENT
    r = re.compile(pattern)
    for f in os.listdir(dir_path) :
    INDENT
        m = r.match(f)
        if m and m.end() == len(f) :
        INDENT
            print 'This file is a fa file: %s' % f
        DEDENT
        elif m :
        INDENT
            print 'This file contains more text after fa: %s' % f
        DEDENT
        else :
        INDENT
            print 'This file does not contain the fa extension: %s' % f
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def searchforfile(dir_path) :
INDENT
    for filename in os.listdir(dir_path) :
    INDENT
        logfile.write(filename + "\n")
        if filename.endswith('fa') :
        INDENT
            reference_name = dir_path + '/' + filename, 'r'
            return reference_name [0]
        DEDENT
        elif filename.endswith('fasta') :
        INDENT
            reference_name = dir_path + '/' + filename, 'r'
            return reference_name [0]
        DEDENT
        else :
        INDENT
            print ("Reference file was not found")
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34297265_34298835_47_55
34297265_34298835_7_19
Title: wxPython - Automatically closing nested modal dialogs 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Dialog.__init__(self, parent, id = - 1, title = 'Some Dialog')
    self.SetSize((300, 300))
    self.__anotherDialog = None
    self.__okButton = wx.Button(self, - 1, "Press me")
    self.Bind(wx.EVT_BUTTON, self.__onOK)
    wx.EVT_CLOSE(self, self.__on_btn_cancel)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, title = "TEST", size = (400, 400))
    self.Show()
    self.__someDialog = None
    self.__myThread = None
    self.__okButton = wx.Button(self, - 1, "Press me")
    self.Bind(wx.EVT_BUTTON, self.__onOK)
    self.__myThread = Thread(target = self.__waitThenClose, name = "Closer")
    self.__myThread.setDaemon(True)
    self.__myThread.start()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34309646_34312229_7_31
34309646_34313474_1_21
Title: How can I stop a thread in wxpython? 
----------------------------------------

def testFunction(event) :
INDENT
    while not shutdown_event.is_set() :
    INDENT
        import time
        for i in range(2) :
        INDENT
            print u"Iteración {}".format(i)
            if shutdown_event.is_set() :
            INDENT
                break;
            DEDENT
            print ('win', 'r')
            time.sleep(0.1)
            if shutdown_event.is_set() :
            INDENT
                break;
            DEDENT
            print ('abc')
            time.sleep(0.1)
            if shutdown_event.is_set() :
            INDENT
                break;
            DEDENT
            print ('enter')
            time.sleep(0.1)
            if shutdown_event.is_set() :
            INDENT
                break;
            DEDENT
            print 'sleep'
            time.sleep(0.5)
        DEDENT
        print u"Fin de ejecución\n\n"
    DEDENT
    print u"Se detuvo la ejecución.\n\n"
DEDENT
----------------------------------------

def testFunction(event) :
INDENT
    def inner_gen() :
    INDENT
        print ('win', 'r')
        time.sleep(0.5)
        yield
        print ('abc')
        time.sleep(0.5)
        yield
        print ('enter')
        time.sleep(0.5)
        yield
        print 'sleep'
        time.sleep(3)
        yield
    DEDENT
    while True :
    INDENT
        for _ in range(2) :
        INDENT
            for _ in inner_gen() :
            INDENT
                if shutdown_event.is_set() :
                INDENT
                    shutdown_event.clear()
                    return
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34316107_34316419_5_12
34316107_34346210_14_18
Title: "Python squeezed between indentation levels and PEP-8 width limit" 
----------------------------------------

def make_foo() :
INDENT
    def one_more_level_for_good_measure() :
    INDENT
        class Foo(object) :
        INDENT
            __doc__ = doc_of_foo
        DEDENT
        return Foo
    DEDENT
    return one_more_level_for_good_measure()
DEDENT
----------------------------------------

def make_foo(parm) :
INDENT
    class Foo2(Foo) :
    INDENT
        """Foo without indentation problems."""
        class_parm = parm
    DEDENT
    return Foo2
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34341142_34341222_1_8
34341142_34341399_3_10
Title: Largest prime factor-Python 
----------------------------------------

def t(x) :
INDENT
    l = []
    for i in range(1, int(math.sqrt(x))) :
    INDENT
        if x % i == 0 :
        INDENT
            l.append(i)
        DEDENT
    DEDENT
    return l

DEDENT
----------------------------------------

def t(x) :
INDENT
    for i in xrange(int(math.sqrt(x)), 1, - 1) :
    INDENT
        if (x % i) ! = 0 :
        INDENT
            continue
        DEDENT
        if check(i) :
        INDENT
            return i
        DEDENT
    DEDENT
    return None
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34358974_34363871_52_61
34358974_48460193_55_64
Title: How to prevent re-definition of keys in YAML? 
----------------------------------------

def __init__(self, stream) :
INDENT
    Reader.__init__(self, stream)
    Scanner.__init__(self)
    Parser.__init__(self)
    Composer.__init__(self)
    MyConstructor.__init__(self)
    Resolver.__init__(self)

DEDENT
----------------------------------------

def __init__(self, stream) :
INDENT
    Reader.__init__(self, stream)
    Scanner.__init__(self)
    Parser.__init__(self)
    Composer.__init__(self)
    NoDuplicateConstructor.__init__(self)
    Resolver.__init__(self)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34363193_34363216_2_9
34363193_34363292_2_9
Title: Printing in a class python 
----------------------------------------

def __init__(self, name, hp, dmg, lvl, inventory, speed) :
INDENT
    self.name = name
    self.hp = hp
    self.dmg = dmg
    self.lvl = lvl
    self.inventory = inventory
    self.speed = speed
DEDENT
----------------------------------------

def __init__(self, name, hp, dmg, lvl, inventory, speed) :
INDENT
    self.name = name
    self.hp = hp
    self.dmg = dmg
    self.lvl = lvl
    self.inventory = inventory
    self.speed = speed
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34402443_34402575_3_15
34402443_34459100_4_9
Title: How can I return a changing variable without ending the function in Python? 
----------------------------------------

def printit() :
INDENT
    cpt = 1
    while True :
    INDENT
        if cpt < 3 :
        INDENT
            number = ("images[" + str(cpt) + "].jpg")
            yield number
            sleep(5)
            cpt += 1
        DEDENT
        else :
        INDENT
            for number in printit() :
            INDENT
                yield number

            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printit() :
INDENT
    cn = count(1)
    for i in iter(cn.next, 0) :
    INDENT
        yield "images[{}].jpg".format(i)
        sleep(5)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3441991_3451237_24_34
3441991_3452924_4_18
Title: Respond to Listctrl change exactly once 
----------------------------------------

def __init__(self, * args, ** kwds) :
INDENT
    wx.Frame.__init__(self, * args, ** kwds)
    self.list_ctrl_1 = wx.ListCtrl(self, - 1, style = wx.LC_REPORT | wx.SUNKEN_BORDER)
    self.myevthandler = MyEventHandler(self.list_ctrl_1)
    sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
    sizer_1.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
    self.list_ctrl_1.InsertColumn(0, "1")
    self.list_ctrl_1.InsertStringItem(0, "HELLO1")
    self.list_ctrl_1.PushEventHandler(self.myevthandler)

DEDENT
----------------------------------------

def __init__(self, * args, ** kwds) :
INDENT
    wx.Frame.__init__(self, * args, ** kwds)
    self.list_ctrl_1 = wx.ListCtrl(self, - 1, style = wx.LC_REPORT | wx.SUNKEN_BORDER)
    sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
    sizer_1.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
    self.list_ctrl_1.InsertColumn(0, "1")
    self.list_ctrl_1.InsertStringItem(0, "HELLO1")
    self.list_ctrl_1.InsertStringItem(0, "HELLO2")
    self.list_ctrl_1.InsertStringItem(0, "HELLO3")
    self.list_ctrl_1.InsertStringItem(0, "HELLO4")
    self.list_ctrl_1.InsertStringItem(0, "HELLO5")
    self.list_ctrl_1.InsertStringItem(0, "HELLO6")
    self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected, self.list_ctrl_1)
    self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnItemDeselected, self.list_ctrl_1)
    self.dirty = False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34420006_34420349_1_17
34420006_43930882_1_50
Title: Binary Search python 3.5 
----------------------------------------

def binarySearch(alist, value) :
INDENT
    first = 0
    last = len(alist) - 1
    found = False
    while first < = last and not found :
    INDENT
        midpoint = (first + last) / / 2
        if value == alist [midpoint] :
        INDENT
            found = True
        DEDENT
        else :
        INDENT
            if value < alist [midpoint] :
            INDENT
                last = midpoint - 1
            DEDENT
            else :
            INDENT
                if value > midpoint :
                INDENT
                    first = midpoint + 1
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return found
DEDENT
----------------------------------------

def binarySearch(array, i) :
INDENT
    start = 0
    last = len(array) - 1
    result = False
    count = 0
    print ("\n******************************************************************\n")
    while (start < = last and not result) :
    INDENT

        mid = 0
        print ("Loop number: ", count)
        print ("Start element: ", array [start], " Position of Start Element: ", start)
        print ("Last element: ", array [last], "  Position of Last Element: ", last)

        mid = (start + last) / / 2
        if (array [mid] == i) :
        INDENT
            print ("***Mid***")
            result = True;
        DEDENT
        else :
        INDENT
            if (i < array [mid]) :
            INDENT
                print ("***The value of the item:", i, " we are searching for is LESS than the current middle element***")
                last = mid - 1
            DEDENT
            else :
            INDENT
                print ("***The value of the item:", i, " we are searching for is GREATER than the current middle element***")
                start = mid + 1

            DEDENT
        DEDENT
        count = count + 1
        print ("Mid element: ", array [mid], "   Position of Mid Element: ", mid, "\n")
    DEDENT
    print ("******************************************************************")
    if (result == True) :
    INDENT
        print ("\nThe element:", i, "is in the array")
    DEDENT
    else :
    INDENT
        print ("\nItem is not in the array")
    DEDENT
    return result

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34425627_34431428_9_16
34425627_34434523_12_20
Title: Function pattern/predicate matching in Python 
----------------------------------------

def __call__(self, func) :
INDENT
    if func.__qualname__ not in when.funcs :
    INDENT
        when.funcs [func.__qualname__] = {}
    DEDENT
    when.funcs [func.__qualname__] [self.pred] = func
    return lambda * args, ** kwargs : when.__match(func, * args, ** kwargs)
DEDENT
----------------------------------------

def __call__(self, * args, ** kwargs) :
INDENT
    for pred, func in self.funcs :
    INDENT
        try :
        INDENT
            match = pred(* args, ** kwargs)
        DEDENT
        except Exception :
        INDENT
            match = False
        DEDENT
        if match :
        INDENT
            return func(* args, ** kwargs)
        DEDENT
    DEDENT
    return self.default(* args, ** kwargs)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34429632_34442054_242_257
34429632_37868871_52_58
Title: Resize a QGraphicsItem with the mouse 
----------------------------------------

def paint(self, painter, option, widget = None) :
INDENT
    painter.setBrush(QBrush(QColor(255, 0, 0, 100)))
    painter.setPen(QPen(QColor(0, 0, 0), 1.0, Qt.SolidLine))
    painter.drawRect(self.rect())
    painter.setRenderHint(QPainter.Antialiasing)
    painter.setBrush(QBrush(QColor(255, 0, 0, 255)))
    painter.setPen(QPen(QColor(0, 0, 0, 255), 1.0, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))
    for handle, rect in self.handles.items() :
    INDENT
        if self.handleSelected is None or handle == self.handleSelected :
        INDENT
            painter.drawEllipse(rect)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def paint(self, painter, option, widget = None) :
INDENT
    if self.isSelected() :
    INDENT
        pen = QPen()
        pen.setStyle(Qt.DotLine)
        painter.setPen(pen)
    DEDENT
    painter.drawEllipse(self.rect)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34429632_34442054_33_48
34429632_37868871_7_22
Title: Resize a QGraphicsItem with the mouse 
----------------------------------------

def __init__(self, * args) :
INDENT
    super().__init__(* args)
    self.handles = {}
    self.handleSelected = None
    self.mousePressPos = None
    self.mousePressRect = None
    self.setAcceptHoverEvents(True)
    self.setFlag(QGraphicsItem.ItemIsMovable, True)
    self.setFlag(QGraphicsItem.ItemIsSelectable, True)
    self.setFlag(QGraphicsItem.ItemSendsGeometryChanges, True)
    self.setFlag(QGraphicsItem.ItemIsFocusable, True)
    self.updateHandlesPos()
DEDENT
----------------------------------------

def __init__(self, position, rect = QRectF(0, 0, 100, 50), parent = None, scene = None) :
INDENT
    super().__init__(rect, parent, scene)
    self.setFlag(QGraphicsItem.ItemIsSelectable, True)
    self.setFlag(QGraphicsItem.ItemIsMovable, True)
    self.setFlag(QGraphicsItem.ItemIsFocusable, True)
    self.setFlag(QGraphicsItem.ItemSendsGeometryChanges, True)
    self.setPos(position)
    self.resizer = Resizer(parent = self)
    resizerWidth = self.resizer.rect.width() / 2
    resizerOffset = QPointF(resizerWidth, resizerWidth)
    self.resizer.setPos(self.rect().bottomRight() - resizerOffset)
    self.resizer.resizeSignal.connect(self.resize)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34463134_34463995_6_16
34463134_34464817_36_123
Title: SHA 512 crypt output written with Python code is different from mkpasswd 
----------------------------------------

def sha512_crypt(password, salt = None, rounds = None) :
INDENT
    if salt is None :
    INDENT
        rand = random.SystemRandom()
        salt = ''.join([rand.choice(string.ascii_letters + string.digits) for _ in range(8)])
    DEDENT
    prefix = '$6$'
    if rounds is not None :
    INDENT
        rounds = max(1000, min(999999999, rounds or 5000))
        prefix += 'rounds={0}$'.format(rounds)
    DEDENT
    return crypt.crypt(password, prefix + salt)
DEDENT
----------------------------------------

def sha512_crypt(password, salt, rounds_in = None) :
INDENT
    rounds, rounds_defined = 5000, False
    if rounds_in is not None :
    INDENT
        rounds, rounds_defined = rounds_in, True
    DEDENT
    assert 1000 < = rounds < = 999999999
    hash = hashlib.sha512
    salt_prefix = '$6$'
    password = password.encode('utf8')
    salt = salt.encode('ascii') [: 16]

    A = hash()
    A.update(password)
    A.update(salt)
    B = hash()
    B.update(password)
    B.update(salt)
    B.update(password)
    digestB = B.digest();
    A.update(extend_by_repeat(digestB, len(password)))

    i = len(password)
    while i > 0 :
    INDENT
        if i & 1 :
        INDENT
            A.update(digestB)
        DEDENT
        else :
        INDENT
            A.update(password)
        DEDENT
        i = i >> 1
    DEDENT
    digestA = A.digest()
    DP = hash()
    for _ in range(len(password)) :
    INDENT
        DP.update(password)
    DEDENT
    digestDP = DP.digest()
    P = extend_by_repeat(digestDP, len(password))
    DS = hash()
    for _ in range(16 + digestA [0]) :
    INDENT
        DS.update(salt)
    DEDENT
    digestDS = DS.digest()
    S = extend_by_repeat(digestDS, len(salt))

    digest_iteration_AC = digestA
    for i in range(rounds) :
    INDENT
        C = hash()
        if i % 2 :
        INDENT
            C.update(P)
        DEDENT
        else :
        INDENT
            C.update(digest_iteration_AC)
        DEDENT
        if i % 3 :
        INDENT
            C.update(S)
        DEDENT
        if i % 7 :
        INDENT
            C.update(P)
        DEDENT
        if i % 2 :
        INDENT
            C.update(digest_iteration_AC)
        DEDENT
        else :
        INDENT
            C.update(P)
        DEDENT
        digest_iteration_AC = C.digest()
    DEDENT
    shuffled_digest = shuffle_sha512(digest_iteration_AC)

    prefix = salt_prefix

    if rounds_defined :
    INDENT
        prefix += 'rounds={0}$'.format(rounds_in)

    DEDENT
    return (prefix
        + salt.decode('ascii')
        + '$'
        + custom_b64encode(shuffled_digest))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34473586_34473657_1_12
34473586_34473703_1_10
Title: Python output is unwillingly stuck in for loop 
----------------------------------------

def other() :
INDENT
    for listelement in words :
    INDENT
        if listelement in greetings :
        INDENT
            say("Nice to meet you. ")
            return
        DEDENT
        elif listelement == "name" :
        INDENT
            indices = [i + 2 for i, word in enumerate(words) if word == 'name']
            names = [words [i] for i in indices if i < len(words)]
            for usname in names :
            INDENT
                say("Hi, " + usname.title() + ".")
            DEDENT
            return
        DEDENT
    DEDENT
    say("I see. ")
DEDENT
----------------------------------------

def other() :
INDENT
    if any(word in greetings for word in words) :
    INDENT
        say("Nice to meet you. ")
    DEDENT
    elif "name" in words :
    INDENT
        indices = [i + 2 for i, word in enumerate(words) if word == 'name']
        names = [words [i] for i in indices if i < len(words)]
        for usname in names :
        INDENT
            say("Hi, " + usname.title() + ".")
        DEDENT
    DEDENT
    else :
    INDENT
        say("I see. ")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34478011_34485724_13_18
34478011_34485724_31_40
Title: Using descriptor class to raise RuntimeError when user tries to change object's value 
----------------------------------------

def __set__(self, instance, value) :
INDENT
    if not isinstance(value, int) :
    INDENT
        raise TypeError('Expected an int')
    DEDENT
    else :
    INDENT
        instance.__dict__ [self.name] = value
    DEDENT
DEDENT
----------------------------------------

def __set__(self, instance, value) :
INDENT
    if hasattr(instance, self.name + 'is_set') :
    INDENT
        raise ValueError('Cannot set {} again.'.format(self.name [1 :]))
    DEDENT
    if isinstance(value, int) :
    INDENT
        raise RuntimeError('Cant set formulas')
    DEDENT
    else :
    INDENT
        instance.__dict__ [self.name] = value
        setattr(instance, self.name + 'is_set', True)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_37519800_26_36
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_37519800_8_15
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_41052402_9_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_42076554_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_45532186_5_12
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_45536270_7_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_46117628_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_46513796_7_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_34988082_5_19
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(tableData) :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for j in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < = len(tableData [i] [j]) :
            INDENT
                colWidths [i] = len(tableData [i] [j])
            DEDENT
            else :
            INDENT
                colWidths [i] = colWidths [i]
            DEDENT
        DEDENT
    DEDENT
    for j in range(len(tableData [i])) :
    INDENT
        for i in range(len(tableData)) :
        INDENT
            print(''.join(tableData [i] [j].rjust(colWidths [i] + 1)), end = '')
            print ()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_37519800_8_15
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_42076554_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_45532186_5_12
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_45536270_7_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_46117628_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_46513796_7_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_26_36
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for x in range(len(data)) :
    INDENT
        for y in range(len(data [0])) :
        INDENT
            if len(data [x] [y]) > colWidths [x] :
            INDENT
                colWidths [x] = len(data [x] [y])
            DEDENT
        DEDENT
    DEDENT
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_41052402_9_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_42076554_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_45536270_7_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_46117628_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_46513796_7_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_37519800_8_15
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for y in range(len(data [0])) :
    INDENT
        for x in range(len(data)) :
        INDENT
            colWidths [x] = len(max(data [x], key = len))
            print(data [x] [y].rjust(colWidths [x]), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_42076554_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_45532186_5_12
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_45536270_7_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_46117628_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_46513796_7_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

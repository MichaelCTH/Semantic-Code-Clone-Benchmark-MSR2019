$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46070538_46086905_23_35
46070538_46086905_3_15
Title: Update frame before frame.tkraise() 
----------------------------------------

def __init__(self, parent) :
INDENT
    fr = tk.Frame(parent)
    fr.grid(row = 1, column = 1)
    tk.Label(fr, text = "Customer select Frame").grid(row = 0, column = 3)
    tk.Label(fr, text = " Family name ", font = ("Arial", 10),
        background = '#dcc8af').grid(row = 1, column = 2)
    self.familyname = tk.Entry(fr, width = 50, font = ("Arial", 10))
    self.familyname.grid(row = 1, column = 3, padx = 4, pady = 8)

    self.update_entry("From CustomerSelect")
DEDENT
----------------------------------------

def __init__(self, master) :
INDENT
    self.master = master
    self.frames = {}
    CS_instance = CustomerSelect(self.master)

    self.frames ["CustomerSelect"] = CS_instance

    self.master.after(5000, self.change_entry)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46070745_46076845_1_15
46070745_46098618_24_42
Title: AttributeError: 'MainScreen' object has no attribute 'iptHpIdx' 
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(MainScreen, self).__init__(** kwargs)
    self.iptHpIdx = TextInput(text = '', multiline = False, font_size = 50)
    self.btnToPoint = Button(text = 'input')
    self.btnToPoint.bind(on_press = self.IptAct)
    layout = BoxLayout(orientation = 'vertical')
    layout.add_widget(self.iptHpIdx)
    layout.add_widget(self.btnToPoint)
    layout.add_widget(canvas)
    self.add_widget(layout)
DEDENT
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(MainScreen, self).__init__(** kwargs)
    iptHpIdx = TextInput(text = '', multiline = False, font_size = 50)
    btnToPoint = Button(text = 'input')
    self.ms_iptHpIdx = iptHpIdx
    self.ms_btnToPoint = btnToPoint
    btnToPoint.bind(on_press = self.IptAct)
    layout = BoxLayout(orientation = 'vertical')
    layout.add_widget(iptHpIdx)
    layout.add_widget(btnToPoint)
    layout.add_widget(canvas)
    self.add_widget(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46081491_46092302_18_32
46081491_46102304_12_23
Title: How to generate randomly located squares (of equal size) on a 1x1 grid that have a random angle of rotation without intersecting one another? 
----------------------------------------

def __init__(self, x, y, theta) :
INDENT
    self.corner = [(LEN / 2, LEN / 2),
        (- LEN / 2, LEN / 2),
        (- LEN / 2, - LEN / 2),
        (LEN / 2, - LEN / 2)]
    self.theta = theta
    self.x = x
    self.y = y
    for i in range(4) :
    INDENT
        self.corner [i] = rotate(self.corner [i], theta)
        self.corner [i] = (self.corner [i] [0] + x,
            self.corner [i] [1] + y)

    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    self.x0, self.y0 = random.random(), random.random()
    theta = random.randint(0, 90) * math.pi / 180
    self.x1 = self.x0 + (0.1 * math.cos(theta))
    self.x2 = self.x1 + (0.1 * math.cos((90 * math.pi / 180) + theta))
    self.x3 = self.x2 + (0.1 * math.cos((180 * math.pi / 180) + theta))
    self.y1 = self.y0 + (0.1 * math.sin(theta))
    self.y2 = self.y1 + (0.1 * math.sin((90 * math.pi / 180) + theta))
    self.y3 = self.y2 + (0.1 * math.sin((180 * math.pi / 180) + theta))
    self.corners = ((self.x0, self.y0), (self.x1, self.y1),
        (self.x2, self.y2), (self.x3, self.y3))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46081525_46081693_1_10
46081525_46081700_1_15
Title: upload image django rest framework corrupted 
----------------------------------------

def uploadFile(self, f) :
INDENT
    filename = f.name
    redington_path = settings.MEDIA_ROOT + '/yourpath/'
    if not os.path.exists(redington_path) :
    INDENT
        os.makedirs(redington_path)
    DEDENT
    BASE_PATH = settings.MEDIA_ROOT + '/yourpath/'
    os.mkdir(os.path.join(BASE_PATH, vendorid))
    with open(BASE_PATH + filename, 'wb+') as destination :
    INDENT
        for chunk in f.chunks() :
        INDENT
            destination.write(chunk)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def uploadFile(self, up_file) :
INDENT
    if not os.path.exists(BUILDING_PHOTOS_FOLDER) :
    INDENT
        os.mkdir(BUILDING_PHOTOS_FOLDER)
    DEDENT
    up_file.name
    file_name = up_file.name
    destination = open('{}/{}'.format(BUILDING_PHOTOS_FOLDER, file_name), 'wb+')
    for chunk in up_file.chunks() :
    INDENT
        destination.write(chunk)
        destination.close()
    DEDENT
    def put(self, request, filename, format = 'jpeg') :
    INDENT
        file_obj = request.data ['file']
        self.uploadFile(file_obj)
        return HttpResponse(status = 204)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4608968_4609322_2_6
4608968_4609844_2_20
Title: How to access a superclass's class attributes in Python? 
----------------------------------------

def __init__(self, base = None) :
INDENT
    self.a = 1
    if base is not None :
    INDENT
        self.set_base(base)
    DEDENT
    super(A, self).__init__()
DEDENT
----------------------------------------

def __init__(cls, name, bases, dct) :
INDENT
    def get_default(self, name) :
    INDENT
        print ('A.get_default(%s) - %s' % (name, cls))
        try :
        INDENT
            print (cls.defaults)
        DEDENT
        except AttributeError :
        INDENT
            pass
        DEDENT
        try :
        INDENT
            return cls.defaults [name]
        DEDENT
        except KeyError :
        INDENT
            return super(cls, self).get_default(name)
        DEDENT
    DEDENT
    cls.get_default = get_default
    return super(DefaultsClass, cls).__init__(name, bases, dct)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46096550_46121152_32_76
46096550_46121152_4_16
Title: Modify inbuilt WxPython widget 
----------------------------------------

def __init__(self, parent) :
INDENT
    self.options = parent.options
    self.selected = parent.selected
    o_str = ''
    for item in self.options :
    INDENT
        o_str = o_str + item + ','
    DEDENT
    wx.Dialog.__init__(self, parent, wx.ID_ANY, "CheckBoxes", size = (400, 250))
    self.top_panel = wx.Panel(self, wx.ID_ANY)
    self.avail_options = wx.TextCtrl(self.top_panel, wx.ID_ANY, o_str, style = wx.TE_READONLY)
    self.bot_panel = wx.Panel(self, wx.ID_ANY)
    self.scr_panel = scrolled.ScrolledPanel(self, wx.ID_ANY)
    top_sizer = wx.BoxSizer(wx.VERTICAL)
    scr_sizer = wx.BoxSizer(wx.VERTICAL)
    bot_sizer = wx.BoxSizer(wx.VERTICAL)
    self.items = []
    for item in range(len(self.options)) :
    INDENT
        self.item = wx.CheckBox(self.scr_panel, - 1, self.options [item])
        self.item.SetValue(self.selected [item])
        self.items.append(self.item)
        self.item.Bind(wx.EVT_CHECKBOX, self.Select)
    DEDENT
    self.saveButton = wx.Button(self.bot_panel, label = "Save")
    self.closeButton = wx.Button(self.bot_panel, label = "Cancel")
    self.saveButton.Bind(wx.EVT_BUTTON, self.SaveOpt)
    self.closeButton.Bind(wx.EVT_BUTTON, self.OnQuit)
    self.Bind(wx.EVT_CLOSE, self.OnQuit)
    top_sizer.Add(self.avail_options, 0, flag = wx.EXPAND)
    for item in self.items :
    INDENT
        scr_sizer.Add(item, 0)
    DEDENT
    bot_sizer.Add(self.saveButton, 0, flag = wx.CENTER)
    bot_sizer.Add(self.closeButton, 0, flag = wx.CENTER)
    self.scr_panel.SetupScrolling()
    self.top_panel.SetSizer(top_sizer)
    self.scr_panel.SetSizer(scr_sizer)
    self.bot_panel.SetSizer(bot_sizer)
    mainsizer = wx.BoxSizer(wx.VERTICAL)
    mainsizer.Add(self.top_panel, 0, flag = wx.EXPAND)
    mainsizer.Add(self.scr_panel, 1, flag = wx.EXPAND)
    mainsizer.Add(self.bot_panel, 0, flag = wx.EXPAND)
    self.SetSizer(mainsizer)
    self.Select(None)
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "CheckBox Dialog", size = (400, 250))
    self.panel = wx.Panel(self)
    sizer = wx.BoxSizer(wx.VERTICAL)
    self.log = wx.TextCtrl(self.panel, wx.ID_ANY, size = (350, 150), style = wx.TE_MULTILINE | wx.TE_READONLY | wx.VSCROLL)
    self.button = wx.Button(self.panel, label = "Choose Colours")
    sizer.Add(self.log, 0, wx.EXPAND | wx.ALL, 10)
    sizer.Add(self.button, 0, wx.EXPAND | wx.ALL, 10)
    self.panel.SetSizer(sizer)
    self.Bind(wx.EVT_BUTTON, self.OnButton)
    self.panel.options = ['Red', 'Green', 'Black', 'White', 'Orange', 'Blue', 'Yellow']
    self.panel.selected = [0, 0, 0, 0, 0, 0, 0]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46115364_46115691_1_10
46115364_46115751_1_16
Title: Any way to impove code with several if nested? 
----------------------------------------

def do_something(self, response) :
INDENT
    a_url = response.css("a.classA::attr(href), a.classB::attr(href)")
    if a_url :
    INDENT
        yield Request(
            url = a_url.split('&') [0],
            dont_filter = True,
            callback = self.do_next_thing)
    DEDENT
    else :
    INDENT
        logger.error('get no url')
    DEDENT
DEDENT
----------------------------------------

def do_something(self, response) :
INDENT
    a_url = (
        response.css('a.classA::attr(href)').extract_first()
        or
        response.css('a.classB::attr(href)').extract_first())
    if not a_url :
    INDENT
        logger.error('get no url')
        return
    DEDENT
    yield Request(
        url = a_url.split('&') [0],
        dont_filter = True,
        callback = self.do_next_thing)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46115364_46115691_1_10
46115364_46116035_10_17
Title: Any way to impove code with several if nested? 
----------------------------------------

def do_something(self, response) :
INDENT
    a_url = response.css("a.classA::attr(href), a.classB::attr(href)")
    if a_url :
    INDENT
        yield Request(
            url = a_url.split('&') [0],
            dont_filter = True,
            callback = self.do_next_thing)
    DEDENT
    else :
    INDENT
        logger.error('get no url')
    DEDENT
DEDENT
----------------------------------------

def do_something(self, response) :
INDENT
    a_url = self.prepare_something(response)
    if a_url :
    INDENT
        yield Request(
            url = a_url,
            dont_filter = True,
            callback = self.do_next_thing)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46115364_46115751_1_16
46115364_46116035_10_17
Title: Any way to impove code with several if nested? 
----------------------------------------

def do_something(self, response) :
INDENT
    a_url = (
        response.css('a.classA::attr(href)').extract_first()
        or
        response.css('a.classB::attr(href)').extract_first())
    if not a_url :
    INDENT
        logger.error('get no url')
        return
    DEDENT
    yield Request(
        url = a_url.split('&') [0],
        dont_filter = True,
        callback = self.do_next_thing)
DEDENT
----------------------------------------

def do_something(self, response) :
INDENT
    a_url = self.prepare_something(response)
    if a_url :
    INDENT
        yield Request(
            url = a_url,
            dont_filter = True,
            callback = self.do_next_thing)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46138771_46139058_30_39
46138771_46139058_48_60
Title: Python Multipleclient Server with Queues 
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        if not commands_queue.empty() :
        INDENT
            command = commands_queue.get()
            logging.debug("Queueing data: " + command.data)
            time.sleep(3)
            logging.debug("Finshed queue: " + command.data)
            command.conn.send("Done: " + command.data)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        data = conn.recv(2048)
        print "Server received data:", data
        if not commands_queue.full() :
        INDENT
            if data.startswith("a") :
            INDENT
                commands_queue.put(Command(1, data, self.conn))
            DEDENT
            else :
            INDENT
                commands_queue.put(Command(2, data, self.conn))

            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46142167_46146507_36_44
46142167_46146507_60_68
Title: PySide Node Graph connect items 
----------------------------------------

def __init__(self, rect = QRectF(- 75, - 15, 150, 30), parent = None) :
INDENT
    QGraphicsRectItem.__init__(self, rect, parent)
    self.edges = []
    self.setZValue(1)
    self.setBrush(Qt.darkGray)
    self.setFlags(QGraphicsItem.ItemIsMovable |
        QGraphicsItem.ItemIsSelectable |
        QGraphicsItem.ItemSendsGeometryChanges)
DEDENT
----------------------------------------

def __init__(self, source, dest, parent = None) :
INDENT
    QGraphicsLineItem.__init__(self, parent)
    self.source = source
    self.dest = dest
    self.source.addEdge(self)
    self.dest.addEdge(self)
    self.setPen(QPen(Qt.red, 1.75))
    self.adjust()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46152182_46177542_126_150
46152182_46177542_159_182
Title: Pyqt5 QThread freezing and then exiting when thread starts 
----------------------------------------

def run(self) :
INDENT
    if self.window.streamstart :
    INDENT
        pass
    DEDENT
    else :
    INDENT
        self.window.start_stream(start = True)
    DEDENT
    self.window.t1 = time.time()
    time.sleep(0.5)
    while self.window.streamstart and self.__is_running :
    INDENT
        print ("Plotting...")
        self.window.tape_add()
        self.window.timeArray = np.arange(self.window.taper.size)
        self.window.timeArray = (self.window.timeArray / self.window.fs) * 1000
        self.window.ax.clear()
        self.window.ax.plot(self.window.timeArray, (self.window.taper / np.max(np.abs(self.window.taper))), '-b')
        self.window.ax.grid()
        self.window.ax.set_ylabel("Amplitude")
        self.window.ax.set_xlabel("Samples")
        self.window.canvas.draw()

    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    print ("Evaluating Signal")
    self.tpr = self.__taper.astype(np.float32, order = 'C') / 32768
    self.tpl = self.__tapel.astype(np.float32, order = 'C') / 32768
    self.r = self.tpr [~ np.isnan(self.tpr)]
    self.l = self.tpl [~ np.isnan(self.tpl)]

    self.left2 = (self.l / np.max(np.abs(self.l)))
    self.right2 = (self.r / np.max(np.abs(self.r)))
    self.norm_audio2 = np.array((self.left2, self.right2))

    self.databew = """ Mute, Loudness and PSNR/MOS...
                  Dominant fundamental frequencies etc.
                """
    print (self.databew)
    self.window.textEdit.append(self.databew)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46160269_46160345_9_18
46160269_46160392_9_20
Title: How do put the intermediate results of a recursive function into a list? 
----------------------------------------

def recSelect(inputdf) :
INDENT
    if inputdf.shape [1] < = 2 :
    INDENT
        return inputdf
    DEDENT
    else :
    INDENT
        total = inputdf.sum()
        idx = total.idxmax()
        your_list.append(idx)
        inputdf.drop(idx, axis = 1, inplace = True)
        return recSelect(inputdf)
    DEDENT
DEDENT
----------------------------------------

def recSelect(inputdf, removed = None) :
INDENT
    if not removed :
    INDENT
        removed = []
    DEDENT
    if inputdf.shape [1] < = 2 :
    INDENT
        return inputdf, removed
    DEDENT
    else :
    INDENT
        total = inputdf.sum()
        idx = total.idxmax()
        inputdf.drop(idx, axis = 1, inplace = True)
        removed.append(idx)
        return recSelect(inputdf, removed)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46170286_46170600_6_14
46170286_46260919_10_22
Title: Automatically Update Django Profile when creating user 
----------------------------------------

def update_user_profile(sender, instance, created, ** kwargs) :
INDENT
    if created :
    INDENT
        luid = Profile.objects.annotate(int_uid = Cast('linux_uid', IntegerField())).aggregate(luid = Max('int_uid')).get('luid', 4000)
        lgid = Profile.objects.annotate(int_gid = Cast('linux_gid', IntegerField())).aggregate(lgid = Max('int_gid')).get('lgid', 4000)
        Profile.objects.created(
            user = instance,
            linux_uid = int(luid) + 1,
            linux_gid = int(lgid) + 1)
    DEDENT
DEDENT
----------------------------------------

def update_user_profile(sender, instance, created, ** kwargs) :
INDENT
    if created :
    INDENT
        Profile.objects.create(user = instance)
    DEDENT
    try :
    INDENT
        last_user_joined = User.objects.all().order_by('date_joined').reverse() [1].profile
        instance.profile.linux_uid = str(int(last_user_joined.linux_uid) + 1)
        instance.profile.linux_gid = str(int(last_user_joined.linux_gid) + 1)
    DEDENT
    except User.DoesNotExist :
    INDENT
        instance.profile.linux_uid = '0000'
        instance.profile.linux_gid = '0000'
    DEDENT
    instance.profile.save()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46183167_46183532_3_10
46183167_46184432_28_41
Title: "Beginner Python: ""try/except Error"" not printing properly" 
----------------------------------------

def date_conversion(date_string) :
INDENT
    try :
    INDENT
        dt = datetime.datetime.strptime(date_string, '%d/%m/%y')
    DEDENT
    except ValueError :
    INDENT
        return None
    DEDENT
    if dt.year > = 2018 :
    INDENT
        dt = dt.replace(year = dt.year - 100)
    DEDENT
    return dt.strftime('%d-%m-%Y')
DEDENT
----------------------------------------

def date_conversion(date_string) :
INDENT
    try :
    INDENT
        date_as_list = date_string.split('/')
        a = convert_day(date_as_list [0])
        b = convert_month(date_as_list [1])
        c = convert_year(date_as_list [2])
        k = a + '-' + b + '-' + c
        print (k)
    DEDENT
    except ValueError :
    INDENT
        print ('Not a valid date.')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46185351_46186700_2_31
46185351_46186700_33_46
Title: PyQt4 accessing to QListWidgetItem from widget inside 
----------------------------------------

def __init__(self, text, parent = None) :
INDENT
    QWidget.__init__(self, parent)
    self.setLayout(QHBoxLayout())
    self.buttons = []
    vb = QVBoxLayout()
    self.layout().addLayout(vb)
    self.btnTask1 = QPushButton("task1")
    self.btnTask2 = QPushButton("task2")
    vb.addWidget(self.btnTask1)
    vb.addWidget(self.btnTask2)
    self.buttons.append(self.btnTask1)
    self.buttons.append(self.btnTask2)
    self.btnTask3 = QPushButton("task3")
    self.btnTask4 = QPushButton("task4")
    self.btnTask5 = QPushButton("task5")
    self.btnTask6 = QPushButton("task6")
    self.layout().addWidget(self.btnTask3)
    self.layout().addWidget(self.btnTask4)
    self.layout().addWidget(self.btnTask5)
    self.layout().addWidget(self.btnTask6)
    self.buttons.append(self.btnTask3)
    self.buttons.append(self.btnTask4)
    self.buttons.append(self.btnTask5)
    self.buttons.append(self.btnTask6)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QMainWindow.__init__(self, parent)
    self.lw = QListWidget(self)
    self.setCentralWidget(self.lw)
    for i in range(5) :
    INDENT
        cw = CustomWidget("{}".format(i))
        for btn in cw.buttons :
        INDENT
            btn.clicked.connect(self.onClicked)
        DEDENT
        item = QListWidgetItem(self.lw)
        item.setSizeHint(QSize(400, 80))
        self.lw.addItem(item)
        self.lw.setItemWidget(item, cw)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46199205_46202829_5_85
46199205_46243178_11_18
Title: "Using python's wx.grid how can you merge columns?" 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, parent = None, title = "Strategies' Allocations")
    self.panel = wx.Panel(self)
    button_refresh = wx.Button(self.panel, id = wx.ID_ANY, label = 'Refresh')
    button_refresh.Bind(wx.EVT_BUTTON, self.refresh)
    self.myGrid1 = gridlib.Grid(self.panel)
    self.myGrid1.CreateGrid(3, 6)
    self.myGrid1.SetRowLabelSize(80)
    self.myGrid1.SetRowLabelValue(0, "")
    self.myGrid1.SetRowLabelValue(1, "")
    self.myGrid1.SetRowLabelValue(2, "2")
    for i in range(6) :
    INDENT
        self.myGrid1.SetColSize(i, 60)

    DEDENT
    self.myGrid1.SetColLabelSize(0)
    self.myGrid1.SetCellSize(0, 0, 1, 3)
    self.myGrid1.SetCellValue(0, 0, "Yesterday")
    self.myGrid1.SetCellSize(0, 3, 1, 3)
    self.myGrid1.SetCellValue(0, 3, "Today")
    self.myGrid1.SetCellValue(1, 0, "Equity")
    self.myGrid1.SetCellValue(1, 1, "Volatility")
    self.myGrid1.SetCellValue(1, 2, "Cash")
    self.myGrid1.SetCellValue(1, 3, "Equity")
    self.myGrid1.SetCellValue(1, 4, "Volatility")
    self.myGrid1.SetCellValue(1, 5, "Cash")
    self.myGrid1.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.myGrid1.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)

    self.myGrid2 = gridlib.Grid(self.panel)
    self.myGrid2.CreateGrid(2, 6)
    for i in range(6) :
    INDENT
        self.myGrid2.SetColSize(i, 60)
    DEDENT
    self.myGrid2.SetColLabelValue(0, "")
    self.myGrid2.SetColLabelValue(1, "Yesterday")
    self.myGrid2.SetColLabelValue(2, "")
    self.myGrid2.SetColLabelValue(3, "")
    self.myGrid2.SetColLabelValue(4, "Today")
    self.myGrid2.SetColLabelValue(5, "")
    self.myGrid2.SetCellValue(0, 0, "Treasury")
    self.myGrid2.SetCellValue(0, 1, "Volatility")
    self.myGrid2.SetCellValue(0, 2, "Cash")
    self.myGrid2.SetCellValue(0, 3, "Treasury")
    self.myGrid2.SetCellValue(0, 4, "Volatility")
    self.myGrid2.SetCellValue(0, 5, "Cash")
    self.myGrid2.SetRowLabelSize(60)
    self.myGrid2.SetRowLabelValue(0, "")
    self.myGrid2.SetRowLabelValue(1, "2")
    self.myGrid2.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.myGrid2.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)

    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.myGrid1, 1, wx.TOP | wx.ALIGN_CENTRE, 2)
    sizer.Add(self.myGrid2, 1, wx.TOP | wx.ALIGN_CENTRE, 2)
    sizer.Add(button_refresh, 1, wx.RIGHT | wx.LEFT | wx.TOP | wx.BOTTOM | wx.EXPAND | wx.ALIGN_CENTRE, 50)
    self.panel.SetSizer(sizer)
    self.panel.SetSize((500, 400))
    self.SetSize((500, 400))
    self.panel.Layout()
DEDENT
----------------------------------------

def __init__(self, text, colspan, bgcolour = None) :
INDENT
    self.text = text
    self.colspan = colspan
    if bgcolour is not None :
    INDENT
        self.bgcolour = bgcolour
    DEDENT
    else :
    INDENT
        self.bgcolour = "white"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46199205_46202829_5_85
46199205_46243178_38_102
Title: "Using python's wx.grid how can you merge columns?" 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, parent = None, title = "Strategies' Allocations")
    self.panel = wx.Panel(self)
    button_refresh = wx.Button(self.panel, id = wx.ID_ANY, label = 'Refresh')
    button_refresh.Bind(wx.EVT_BUTTON, self.refresh)
    self.myGrid1 = gridlib.Grid(self.panel)
    self.myGrid1.CreateGrid(3, 6)
    self.myGrid1.SetRowLabelSize(80)
    self.myGrid1.SetRowLabelValue(0, "")
    self.myGrid1.SetRowLabelValue(1, "")
    self.myGrid1.SetRowLabelValue(2, "2")
    for i in range(6) :
    INDENT
        self.myGrid1.SetColSize(i, 60)

    DEDENT
    self.myGrid1.SetColLabelSize(0)
    self.myGrid1.SetCellSize(0, 0, 1, 3)
    self.myGrid1.SetCellValue(0, 0, "Yesterday")
    self.myGrid1.SetCellSize(0, 3, 1, 3)
    self.myGrid1.SetCellValue(0, 3, "Today")
    self.myGrid1.SetCellValue(1, 0, "Equity")
    self.myGrid1.SetCellValue(1, 1, "Volatility")
    self.myGrid1.SetCellValue(1, 2, "Cash")
    self.myGrid1.SetCellValue(1, 3, "Equity")
    self.myGrid1.SetCellValue(1, 4, "Volatility")
    self.myGrid1.SetCellValue(1, 5, "Cash")
    self.myGrid1.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.myGrid1.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)

    self.myGrid2 = gridlib.Grid(self.panel)
    self.myGrid2.CreateGrid(2, 6)
    for i in range(6) :
    INDENT
        self.myGrid2.SetColSize(i, 60)
    DEDENT
    self.myGrid2.SetColLabelValue(0, "")
    self.myGrid2.SetColLabelValue(1, "Yesterday")
    self.myGrid2.SetColLabelValue(2, "")
    self.myGrid2.SetColLabelValue(3, "")
    self.myGrid2.SetColLabelValue(4, "Today")
    self.myGrid2.SetColLabelValue(5, "")
    self.myGrid2.SetCellValue(0, 0, "Treasury")
    self.myGrid2.SetCellValue(0, 1, "Volatility")
    self.myGrid2.SetCellValue(0, 2, "Cash")
    self.myGrid2.SetCellValue(0, 3, "Treasury")
    self.myGrid2.SetCellValue(0, 4, "Volatility")
    self.myGrid2.SetCellValue(0, 5, "Cash")
    self.myGrid2.SetRowLabelSize(60)
    self.myGrid2.SetRowLabelValue(0, "")
    self.myGrid2.SetRowLabelValue(1, "2")
    self.myGrid2.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    self.myGrid2.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)

    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.myGrid1, 1, wx.TOP | wx.ALIGN_CENTRE, 2)
    sizer.Add(self.myGrid2, 1, wx.TOP | wx.ALIGN_CENTRE, 2)
    sizer.Add(button_refresh, 1, wx.RIGHT | wx.LEFT | wx.TOP | wx.BOTTOM | wx.EXPAND | wx.ALIGN_CENTRE, 50)
    self.panel.SetSizer(sizer)
    self.panel.SetSize((500, 400))
    self.SetSize((500, 400))
    self.panel.Layout()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, parent = None, size = (800, 300))
    ROWS = 6
    COLS = 11
    g = MyGrid(self, size = (100, 100))
    g.CreateGrid(ROWS, COLS)
    g.SetColLabelRenderer(0, TextLabelRenderer('Contract', 1, "lightblue"))
    g.SetColLabelRenderer(1, TextLabelRenderer('Yesterday', 3, "lightgreen"))
    g.SetColLabelRenderer(2, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(3, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(4, TextLabelRenderer('Today', 4, "green"))
    g.SetColLabelRenderer(5, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(6, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(7, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(8, TextLabelRenderer('Other', 1, "gold"))
    g.SetRowLabelSize(0)
    g.SetCellValue(0, 1, "Equity")
    g.SetCellValue(0, 2, "Volatility")
    g.SetCellValue(0, 3, "Cash")
    g.SetCellValue(0, 4, "Equity")
    g.SetCellValue(0, 5, "Volatility")
    g.SetCellValue(0, 6, "Cash")
    g.SetCellValue(1, 0, "2")
    g.SetCellValue(1, 1, "1500")
    g.SetCellValue(1, 2, "23")
    g.SetCellValue(1, 3, "2300")
    g.SetCellValue(1, 4, "1400")
    g.SetCellValue(1, 5, "26")
    g.SetCellValue(1, 6, "2400")
    g.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    g.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)
    g1 = MyGrid(self, size = (100, 100))
    g1.CreateGrid(ROWS, COLS)
    g1.SetColLabelRenderer(0, TextLabelRenderer('Contract', 1, "lightblue"))
    g1.SetColLabelRenderer(1, TextLabelRenderer('Yesterday', 3, "lightgreen"))
    g1.SetColLabelRenderer(2, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(3, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(4, TextLabelRenderer('Today', 3, "green"))
    g1.SetColLabelRenderer(5, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(6, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(7, TextLabelRenderer('Other', 2, "gold"))
    g1.SetColLabelRenderer(8, TextLabelRenderer('', 0))
    g1.SetRowLabelSize(0)
    g1.SetCellValue(0, 1, "Equity")
    g1.SetCellValue(0, 2, "Volatility")
    g1.SetCellValue(0, 3, "Cash")
    g1.SetCellValue(0, 4, "Equity")
    g1.SetCellValue(0, 5, "Volatility")
    g1.SetCellValue(0, 6, "Cash")
    g1.SetCellValue(1, 0, "2")
    g1.SetCellValue(1, 1, "500")
    g1.SetCellValue(1, 2, "23")
    g1.SetCellValue(1, 3, "12300")
    g1.SetCellValue(1, 4, "11400")
    g1.SetCellValue(1, 5, "26")
    g1.SetCellValue(1, 6, "12400")
    g1.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    g1.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)
    self.Sizer = wx.BoxSizer(wx.VERTICAL)
    self.Sizer.Add(g, 1, wx.EXPAND)
    self.Sizer.Add(g1, 1, wx.EXPAND)
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46199205_46243178_11_18
46199205_46243178_38_102
Title: "Using python's wx.grid how can you merge columns?" 
----------------------------------------

def __init__(self, text, colspan, bgcolour = None) :
INDENT
    self.text = text
    self.colspan = colspan
    if bgcolour is not None :
    INDENT
        self.bgcolour = bgcolour
    DEDENT
    else :
    INDENT
        self.bgcolour = "white"
    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, parent = None, size = (800, 300))
    ROWS = 6
    COLS = 11
    g = MyGrid(self, size = (100, 100))
    g.CreateGrid(ROWS, COLS)
    g.SetColLabelRenderer(0, TextLabelRenderer('Contract', 1, "lightblue"))
    g.SetColLabelRenderer(1, TextLabelRenderer('Yesterday', 3, "lightgreen"))
    g.SetColLabelRenderer(2, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(3, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(4, TextLabelRenderer('Today', 4, "green"))
    g.SetColLabelRenderer(5, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(6, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(7, TextLabelRenderer('', 0))
    g.SetColLabelRenderer(8, TextLabelRenderer('Other', 1, "gold"))
    g.SetRowLabelSize(0)
    g.SetCellValue(0, 1, "Equity")
    g.SetCellValue(0, 2, "Volatility")
    g.SetCellValue(0, 3, "Cash")
    g.SetCellValue(0, 4, "Equity")
    g.SetCellValue(0, 5, "Volatility")
    g.SetCellValue(0, 6, "Cash")
    g.SetCellValue(1, 0, "2")
    g.SetCellValue(1, 1, "1500")
    g.SetCellValue(1, 2, "23")
    g.SetCellValue(1, 3, "2300")
    g.SetCellValue(1, 4, "1400")
    g.SetCellValue(1, 5, "26")
    g.SetCellValue(1, 6, "2400")
    g.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    g.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)
    g1 = MyGrid(self, size = (100, 100))
    g1.CreateGrid(ROWS, COLS)
    g1.SetColLabelRenderer(0, TextLabelRenderer('Contract', 1, "lightblue"))
    g1.SetColLabelRenderer(1, TextLabelRenderer('Yesterday', 3, "lightgreen"))
    g1.SetColLabelRenderer(2, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(3, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(4, TextLabelRenderer('Today', 3, "green"))
    g1.SetColLabelRenderer(5, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(6, TextLabelRenderer('', 0))
    g1.SetColLabelRenderer(7, TextLabelRenderer('Other', 2, "gold"))
    g1.SetColLabelRenderer(8, TextLabelRenderer('', 0))
    g1.SetRowLabelSize(0)
    g1.SetCellValue(0, 1, "Equity")
    g1.SetCellValue(0, 2, "Volatility")
    g1.SetCellValue(0, 3, "Cash")
    g1.SetCellValue(0, 4, "Equity")
    g1.SetCellValue(0, 5, "Volatility")
    g1.SetCellValue(0, 6, "Cash")
    g1.SetCellValue(1, 0, "2")
    g1.SetCellValue(1, 1, "500")
    g1.SetCellValue(1, 2, "23")
    g1.SetCellValue(1, 3, "12300")
    g1.SetCellValue(1, 4, "11400")
    g1.SetCellValue(1, 5, "26")
    g1.SetCellValue(1, 6, "12400")
    g1.SetColLabelAlignment(wx.ALIGN_CENTRE, wx.ALIGN_CENTRE)
    g1.SetDefaultCellAlignment(wx.ALIGN_CENTRE, wx.ALIGN_TOP)
    self.Sizer = wx.BoxSizer(wx.VERTICAL)
    self.Sizer.Add(g, 1, wx.EXPAND)
    self.Sizer.Add(g1, 1, wx.EXPAND)
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46200046_46200121_1_14
46200046_46200201_1_14
Title: Python conditionals and if statements 
----------------------------------------

def alarm_clock(day, on_vacation) :
INDENT
    if (int(day) < 6 and int(day) ! = 0) and not on_vacation :
    INDENT
        return ('7:00')
    DEDENT
    elif (int(day) == 6 or int(day) == 0) and not on_vacation :
    INDENT
        return ('10:00')
    DEDENT
    elif (int(day) < 6 and int(day) ! = 0) and on_vacation :
    INDENT
        return ('10:00')
    DEDENT
    elif (int(day) == 6 or int(day) == 0) and on_vacation :
    INDENT
        return ('off')
    DEDENT
DEDENT
----------------------------------------

def alarm_clock(day, on_vacation) :
INDENT
    day = int(day)
    if 0 ! = day < 6 and not on_vacation :
    INDENT
        return '7:00'
    DEDENT
    elif day in (6, 0) and not on_vacation :
    INDENT
        return '10:00'
    DEDENT
    elif 0 ! = day < 6 and on_vacation :
    INDENT
        return '10:00'
    DEDENT
    elif day in (6, 0) and on_vacation :
    INDENT
        return 'off'
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46200046_46200155_1_14
46200046_46200201_1_14
Title: Python conditionals and if statements 
----------------------------------------

def alarm_clock(day, on_vacation) :
INDENT
    if (int(day) < 6 and int(day) ! = 0) and not on_vacation :
    INDENT
        return ('7:00')
    DEDENT
    elif (int(day) == 6 or int(day) == 0) and not on_vacation :
    INDENT
        return ('10:00')
    DEDENT
    elif (int(day) < 6 and int(day) ! = 0) and on_vacation :
    INDENT
        return ('10:00')
    DEDENT
    elif (int(day) == 6 or int(day) == 0) and on_vacation :
    INDENT
        return ('off')
    DEDENT
DEDENT
----------------------------------------

def alarm_clock(day, on_vacation) :
INDENT
    day = int(day)
    if 0 ! = day < 6 and not on_vacation :
    INDENT
        return '7:00'
    DEDENT
    elif day in (6, 0) and not on_vacation :
    INDENT
        return '10:00'
    DEDENT
    elif 0 ! = day < 6 and on_vacation :
    INDENT
        return '10:00'
    DEDENT
    elif day in (6, 0) and on_vacation :
    INDENT
        return 'off'
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46226455_46227060_15_31
46226455_46266726_12_33
Title: Python exit from all running threads on truthy condition 
----------------------------------------

def run(self) :
INDENT
    limit = self.args [0]
    for i in range(limit) :
    INDENT
        response = requests.get(self.url)
        if response.status_code ! = 200 :
        INDENT
            self.kill = True
        DEDENT
        else :
        INDENT
            print ('Thread {0} - success'.format(self.getName()))
        DEDENT
        if self.kill :
        INDENT
            break
        DEDENT
    DEDENT
    print ('process completed')
DEDENT
----------------------------------------

def run(self) :
INDENT
    startTime = time.time()
    url = self.args [0]
    limit = self.args [1]
    for i in range(limit) :
    INDENT
        if self.bad_status.is_set() :
        INDENT
            break
        DEDENT
        response = requests.get(url)
        if response.status_code ! = 200 :
        INDENT

            self.bad_status.set()
            break
        DEDENT
        else :
        INDENT
            print ('Thread {0} - success'.format(thread.getName()))
        DEDENT
        print ('process completed')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46247866_46248027_17_30
46247866_46248075_15_19
Title: "Making a function get x values from a list. List is ok function won't work" 
----------------------------------------

def gaussian2(vals, debug = True) :
INDENT
    if type(vals) is list :
    INDENT
        if debug :
        INDENT
            print ("input len = {0}".format(len(vals)))
        DEDENT
        y = []
        t = 0
        for x in vals :
        INDENT
            yi = (1 / (sqrt(2 * pi) * s)) * exp(- 0.5 * ((x - m) / s) ** 2)
            y.append(yi)
            t += 1
            if debug :
            INDENT
                print ("{2}: x = {0}, y = {1}".format(x, yi, t))
            DEDENT
        DEDENT
        return y
    DEDENT
DEDENT
----------------------------------------

def gaussian2(values) :
INDENT
    for x in values :
    INDENT
        y = (1 / (sqrt(2 * pi) * s)) * exp(- 0.5 * ((x - m) / s) ** 2)
        print (y)
    DEDENT
    return y
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4625182_32230256_1_11
4625182_4625483_3_12
Title: python lock method annotation 
----------------------------------------

def synchronized(f) :
INDENT
    @ functools.wraps(f)
    def wrapper(self, * args, ** kwargs) :
    INDENT
        try :
        INDENT
            _ = self._lock
        DEDENT
        except AttributeError :
        INDENT
            self._lock = threading.Lock()
        DEDENT
        with self._lock :
        INDENT
            return f(self, * args, ** kwargs)
        DEDENT
    DEDENT
    return wrapper
DEDENT
----------------------------------------

def synchronized(method) :
INDENT
    def new_method(self, * arg, ** kws) :
    INDENT
        with self.lock :
        INDENT
            return method(self, * arg, ** kws)

        DEDENT
    DEDENT
    return new_method
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46257160_46257208_3_10
46257160_46257285_4_21
Title: Python - Calculate Sum of All Pairs 
----------------------------------------

def getSums(myList, target) :
INDENT
    l_ = len(myList)
    sums = []
    for i in range(len(myList)) :
    INDENT
        for item in myList [i :] :
        INDENT
            sums.append((myList [i], item, myList [i] + item))
        DEDENT
    DEDENT
    return [x for x in sums if x [2] == target]
DEDENT
----------------------------------------

def getSums(myList, target) :
INDENT
    lst = sorted(myList)
    i = 0
    j = len(lst) - 1
    while i < = j :
    INDENT
        tmp = lst [i] + lst [j]
        if tmp > target :
        INDENT
            j -= 1
            continue
        DEDENT
        elif tmp < target :
        INDENT
            j += 1
            continue
        DEDENT
        else :
        INDENT
            return [lst [i], lst [j]]
        DEDENT
    DEDENT
    raise Exception('No available pair found')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46257160_46257208_3_10
46257160_46257367_4_16
Title: Python - Calculate Sum of All Pairs 
----------------------------------------

def getSums(myList, target) :
INDENT
    l_ = len(myList)
    sums = []
    for i in range(len(myList)) :
    INDENT
        for item in myList [i :] :
        INDENT
            sums.append((myList [i], item, myList [i] + item))
        DEDENT
    DEDENT
    return [x for x in sums if x [2] == target]
DEDENT
----------------------------------------

def getSums(myList, target) :
INDENT
    l_ = len(myList)
    sums = []
    for i in range(l_) :
    INDENT
        for j in range(l_) :
        INDENT
            if i ! = j :
            INDENT
                if (myList [i] + myList [j]) == target :
                INDENT
                    if myList [i] not in sums :
                    INDENT
                        sums.append(myList [i])
                        sums.append(myList [j])
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    print sums
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46257160_46257208_3_10
46257160_46257565_4_12
Title: Python - Calculate Sum of All Pairs 
----------------------------------------

def getSums(myList, target) :
INDENT
    l_ = len(myList)
    sums = []
    for i in range(len(myList)) :
    INDENT
        for item in myList [i :] :
        INDENT
            sums.append((myList [i], item, myList [i] + item))
        DEDENT
    DEDENT
    return [x for x in sums if x [2] == target]
DEDENT
----------------------------------------

def getSums(myList, target) :
INDENT
    already_seen = Counter()
    pairs = []
    for x in myList :
    INDENT
        for _ in range(already_seen [target - x]) :
        INDENT
            pairs.append((x, target - x))
        DEDENT
        already_seen [x] += 1
    DEDENT
    return pairs
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46257160_46257285_4_21
46257160_46257367_4_16
Title: Python - Calculate Sum of All Pairs 
----------------------------------------

def getSums(myList, target) :
INDENT
    lst = sorted(myList)
    i = 0
    j = len(lst) - 1
    while i < = j :
    INDENT
        tmp = lst [i] + lst [j]
        if tmp > target :
        INDENT
            j -= 1
            continue
        DEDENT
        elif tmp < target :
        INDENT
            j += 1
            continue
        DEDENT
        else :
        INDENT
            return [lst [i], lst [j]]
        DEDENT
    DEDENT
    raise Exception('No available pair found')
DEDENT
----------------------------------------

def getSums(myList, target) :
INDENT
    l_ = len(myList)
    sums = []
    for i in range(l_) :
    INDENT
        for j in range(l_) :
        INDENT
            if i ! = j :
            INDENT
                if (myList [i] + myList [j]) == target :
                INDENT
                    if myList [i] not in sums :
                    INDENT
                        sums.append(myList [i])
                        sums.append(myList [j])
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    print sums
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46257160_46257285_4_21
46257160_46257565_4_12
Title: Python - Calculate Sum of All Pairs 
----------------------------------------

def getSums(myList, target) :
INDENT
    lst = sorted(myList)
    i = 0
    j = len(lst) - 1
    while i < = j :
    INDENT
        tmp = lst [i] + lst [j]
        if tmp > target :
        INDENT
            j -= 1
            continue
        DEDENT
        elif tmp < target :
        INDENT
            j += 1
            continue
        DEDENT
        else :
        INDENT
            return [lst [i], lst [j]]
        DEDENT
    DEDENT
    raise Exception('No available pair found')
DEDENT
----------------------------------------

def getSums(myList, target) :
INDENT
    already_seen = Counter()
    pairs = []
    for x in myList :
    INDENT
        for _ in range(already_seen [target - x]) :
        INDENT
            pairs.append((x, target - x))
        DEDENT
        already_seen [x] += 1
    DEDENT
    return pairs
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46257160_46257367_4_16
46257160_46257565_4_12
Title: Python - Calculate Sum of All Pairs 
----------------------------------------

def getSums(myList, target) :
INDENT
    l_ = len(myList)
    sums = []
    for i in range(l_) :
    INDENT
        for j in range(l_) :
        INDENT
            if i ! = j :
            INDENT
                if (myList [i] + myList [j]) == target :
                INDENT
                    if myList [i] not in sums :
                    INDENT
                        sums.append(myList [i])
                        sums.append(myList [j])
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    print sums
DEDENT
----------------------------------------

def getSums(myList, target) :
INDENT
    already_seen = Counter()
    pairs = []
    for x in myList :
    INDENT
        for _ in range(already_seen [target - x]) :
        INDENT
            pairs.append((x, target - x))
        DEDENT
        already_seen [x] += 1
    DEDENT
    return pairs
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46259651_46259695_3_13
46259651_46260598_1_10
Title: How to write output of os.walk() to a file in python 3 
----------------------------------------

def dir_trav() :
INDENT
    os.chdir("/home/sam")
    print ("Current Directory: ", os.getcwd())
    data = []
    for dirpath, dirnames, filenames in os.walk(os.getcwd()) :
    INDENT
        for name in filenames :
        INDENT
            filename = os.path.join(dirpath, name)
            data.append(filename)
        DEDENT
    DEDENT
    return data

DEDENT
----------------------------------------

def dir_trav() :
INDENT
    os.chdir("/home/sam")
    print ("Current Directory", os.getcwd())
    output = ''
    for dirpath, dirname, filename in os.walk(os.getcwd()) :
    INDENT
        output += filename
    DEDENT
    return output
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46260892_46261178_3_10
46260892_46261446_1_33
Title: Finding the union of multiple overlapping rectangles - OpenCV python 
----------------------------------------

def combine_boxes(boxes) :
INDENT
    new_array = []
    for boxa, boxb in itertools.combinations(boxes, 2) :
    INDENT
        if intersection(boxa, boxb) :
        INDENT
            new_array.append(union(boxa, boxb))
        DEDENT
        else :
        INDENT
            new_array.append(boxa)
        DEDENT
    DEDENT
    return np.array(new_array).astype('int')
DEDENT
----------------------------------------

def combine_boxes(boxes) :
INDENT
    noIntersectLoop = False
    noIntersectMain = False
    posIndex = 0

    while noIntersectMain == False :
    INDENT
        noIntersectMain = True
        posIndex = 0

        while posIndex < len(boxes) :
        INDENT
            noIntersectLoop = False
            while noIntersectLoop == False and len(boxes) > 1 :
            INDENT
                a = boxes [posIndex]
                listBoxes = np.delete(boxes, posIndex, 0)
                index = 0
                for b in listBoxes :
                INDENT
                    if intersection(a, b) :
                    INDENT
                        newBox = union(a, b)
                        listBoxes [index] = newBox
                        boxes = listBoxes
                        noIntersectLoop = False
                        noIntersectMain = False
                        index = index + 1
                        break
                    DEDENT
                    noIntersectLoop = True
                    index = index + 1
                DEDENT
            DEDENT
            posIndex = posIndex + 1
        DEDENT
    DEDENT
    return boxes.astype("int")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46269498_46754023_24_37
46269498_46754023_6_19
Title: Pyqt 5 new Window crashes Mainwindow 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(First, self).__init__(parent)
    self.title = 'My First Window'
    self.left = 100
    self.top = 100
    self.width = 500
    self.height = 500
    self.setWindowTitle(self.title)
    self.setGeometry(self.left, self.top, self.width, self.height)
    self.pushButton = QtWidgets.QPushButton("Open Me", self)
    self.pushButton.move(120, 120)
    self.pushButton.clicked.connect(self.on_pushButton_clicked)
    self.newWindow = Second(self)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Second, self).__init__(parent)
    self.title = 'My Second Window'
    self.left = 200
    self.top = 200
    self.width = 500
    self.height = 500
    self.setWindowTitle(self.title)
    self.setGeometry(self.left, self.top, self.width, self.height)
    self.pushButton = QtWidgets.QPushButton("Close Me", self)
    self.pushButton.clicked.connect(self.on_pushButton_clicked)
    self.pushButton.move(120, 120)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46282764_46284390_1_17
46282764_46285485_1_25
Title: max n * n Reshape 2d numpy array function that discards lowest values and returns sum of col means? 
----------------------------------------

def ranged_arr(n) :
INDENT
    ranged_arr = np.arange(0, n + 1)

    largest_dim = math.floor(math.sqrt(n + 1))
    last_index = largest_dim ** 2
    fitted_ranged_arr = ranged_arr [: last_index]
    reshaped_range_arr = fitted_ranged_arr.reshape((largest_dim, largest_dim))

    return ranged_arr, largest_dim, fitted_ranged_arr, reshaped_range_arr
DEDENT
----------------------------------------

def ranged_arr(n) :
INDENT
    ranged_arr = np.arange(0, n + 1)

    largest_dim = math.floor(math.sqrt(n + 1))
    last_index = largest_dim ** 2
    fitted_ranged_arr = ranged_arr [: last_index]
    reshaped_range_arr = fitted_ranged_arr.reshape((largest_dim, largest_dim))

    col_means = np.mean(reshaped_range_arr, axis = 0)
    sum_of_means = col_means.sum()
    return ranged_arr, largest_dim, fitted_ranged_arr, reshaped_range_arr, col_means, sum_of_means
    print (sum_of_means)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4628610_24048772_10_21
4628610_8513913_9_18
Title: does urllib2 support preemptive authentication authentication? 
----------------------------------------

def http_request(self, req) :
INDENT
    url = req.get_full_url()
    realm = None

    user, pw = self.passwd.find_user_password(realm, url)
    if pw :
    INDENT
        raw = "%s:%s" % (user, pw)
        auth = 'Basic %s' % base64.b64encode(raw).strip()
        req.add_unredirected_header(self.auth_header, auth)
    DEDENT
    return req
DEDENT
----------------------------------------

def http_request(self, req) :
INDENT
    uri = req.get_full_url()
    user, pw = self.passwd.find_user_password(None, uri)
    if pw is None : return req
    raw = "%s:%s" % (user, pw)
    auth = 'Basic %s' % base64.b64encode(raw).strip()
    req.add_unredirected_header('Authorization', auth)
    return req
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46301122_46301184_12_23
46301122_46301184_31_40
Title: Why does the value of Semaphore does not change globaly 
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        time.sleep(4)
        print("Consumer: {}".format(self.full), flush = True)
        print("Consumer: buf {}".format(self.buffer.qsize()), flush = True)
        self.full.acquire()
        self.buffer.get()
        print('Consumer get', flush = True)
        time.sleep(1)
        self.empty.release()

    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        self.empty.acquire()
        print('Producer put ', flush = True)
        self.buffer.put('a')
        time.sleep(1)
        self.full.release()
        print(self.full, flush = True)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46306391_46314591_10_20
46306391_46355810_15_26
Title: Pass Args to PyQt Worker Thread on Thread Start 
----------------------------------------

def looper(self) :
INDENT
    flagQuit = 0
    while (self.count < 5) :
    INDENT
        self.intCount.emit(self.count)
        time.sleep(1)
        self.count = self.count + 1
        if flagQuit ! = 0 :
        INDENT
            break
        DEDENT
    DEDENT
    self.finished.emit()

DEDENT
----------------------------------------

def looper(self, count, strIs) :
INDENT
    flagQuit = 0
    while (count < 5) :
    INDENT
        strCount = "The count " + strIs + str(count)
        self.intCount.emit(count)
        time.sleep(1)
        count = count + 1
        if flagQuit ! = 0 :
        INDENT
            break
        DEDENT
    DEDENT
    self.finished.emit()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46313360_46313593_2_11
46313360_46313914_4_10
Title: "Python: ""TypeError: __init__() takes exactly"" x ""arguments ("" y "" given)""; x>0<y" 
----------------------------------------

def __init__(self, tA = None, tB = None) :
INDENT
    if not tA :
    INDENT
        tA = ("nail", "screw")
    DEDENT
    if not tB :
    INDENT
        tB = ("hammer", "nail", "long nail")
    DEDENT
    self.trayA = tA
    self.trayB = tB
DEDENT
----------------------------------------

def __init__(self, * argv) :
INDENT
    if len(argv) == 2 :
    INDENT
        self.trayA = argv [0]
        self.trayB = argv [1]
    DEDENT
    else :
    INDENT
        self.trayA = ("nail", "screw")
        self.trayB = ("hammer", "nail", "long nail")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46327700_46328101_1_17
46327700_46328372_3_20
Title: How to add a temporary option to a list and display elements based on users responses in Python 
----------------------------------------

def room_try() :
INDENT
    room_list_num = 0
    room_list_slot = 0
    room_list = ['room 11', 'room 22', 'room 33', 'room 44', 'room 55', 'room 66', 'room 77', 'room 88', 'room 99', 'room 110', 'room 111', 'room 112']
    inner_list_str = ["%d. Room number: %s" % (i, x) for i, x in enumerate(room_list, 1)]
    while room_list_slot < len(room_list) :
    INDENT
        print ('Following are the available rooms. Please select the corresponding number of the room you want: \n {}'.format(
                '\n '.join(inner_list_str [room_list_slot : (room_list_slot + 4)])))
        room_list_num = int(input(" {}. Next\n".format(room_list_slot + 5)))
        if (room_list_slot + 5 ! = room_list_num) :
        INDENT
            print ('Room selected: ' + str(room_list [room_list_num - 1]))
            return
        DEDENT
        else :
        INDENT
            room_list_slot += 4
        DEDENT
    DEDENT
    print ("You haven't choose any room.")
DEDENT
----------------------------------------

def room_try() :
INDENT
    room_list = ['room 11', 'room 22', 'room 33', 'room 44', 'room 55', 'room 66', 'room 77', 'room 88', 'room 99', 'room 110', 'room 111', 'room 112']
    inner_list_str = ["%d. Room number: %s" % ((i % 4) + 1, x) for i, x in enumerate(room_list, 0)]
    global room_list_slot
    counter = 0
    while counter * 4 < len(room_list) :
    INDENT
        room_list_num = int(input('Following are the available rooms. Please select the corresponding number of the room you want: \n {}'.format('\n '.join(inner_list_str [room_list_slot : (room_list_slot + 4)]) + ['\n 5. Next\n', '\n'] [room_list_slot + 4 > = len(room_list)])))
        room_list_slot += 4
        if room_list_num == 5 :
        INDENT
            counter += 1
            continue
        DEDENT
        break
    DEDENT
    print ('Room selected: ' + str(room_list [counter * 4 + room_list_num - 1]))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46329979_46330430_4_14
46329979_46338394_2_20
Title: Django Urls - two views with same regular expression 
----------------------------------------

def get(self, request, slug) :
INDENT
    category = CategoryModel.objects.get(slug = slug)
    if category is None :
    INDENT

        article_index_view_obj = ArticleIndexView()
        return article_index_view_obj.get(request, slug)
    DEDENT
    context = {
        'category' : category}
    return render(request, 'category/index.html', context)
DEDENT
----------------------------------------

def get(self, request, slug) :
INDENT
    self.request = request
    self.slug = slug
    self.item = None
    is_article = ArticleModel.objects.filter(slug = self.slug).exists()
    if is_article :
    INDENT
        self.item = 'article'
        return self.article()
    DEDENT
    is_category = CategoryModel.objects.filter(slug = self.slug).exists()
    if is_category :
    INDENT
        self.item = 'category'
        return self.category()
    DEDENT
    self.item = None
    return HttpResponse(self.item)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46330295_46330469_2_9
46330295_46330700_2_10
Title: Using class parameters as arguments for a method inside the same class 
----------------------------------------

def __init__(self, last_name, first_name, social, rep_code, data_source) :
INDENT
    self.last_name = last_name
    self.first_name = first_name
    self.social = social
    self.rep_code = rep_code
    self.data_source = data_source

DEDENT
----------------------------------------

def __init__(
self, last_name = None, first_name = None, social = None,
rep_code = None, data_source = None) :
INDENT
    self.last_name = last_name
    self.first_name = first_name
    self.social = social
    self.data_source = data_source
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46334504_46334550_1_11
46334504_46334765_10_20
Title: Python: Program keeps repeating if statement 
----------------------------------------

def calculate_food(user_type, gets_discount) :
INDENT
    cost = raw_input("Food cost: $")
    cost = float(cost)
    if user_type == 'S' and gets_discount :
    INDENT
        return cost *.9
    DEDENT
    elif user_type == 'S' :
    INDENT
        return cost *.95
    DEDENT
    elif user_type == 'F' and gets_discount :
    INDENT
        return cost *.8
    DEDENT
    else :
    INDENT
        return cost *.95
    DEDENT
DEDENT
----------------------------------------

def calculate_food(user_type, gets_discount) :
INDENT
    cost = float(raw_input("Food cost: $"))
    return {
        ("S", True) : lambda x : x *.9,
        ("S", False) : lambda x : x *.95,
        ("F", True) : lambda x : x *.8,
        ("F", False) : lambda x : x *.95,
        } [(user_type, gets_discount)](cost)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46334504_46334591_1_11
46334504_46334765_10_20
Title: Python: Program keeps repeating if statement 
----------------------------------------

def calculate_food(user_type, gets_discount) :
INDENT
    cost = raw_input("Food cost: $")
    cost = float(cost)
    if user_type == 'S' and gets_discount :
    INDENT
        return cost *.9
    DEDENT
    elif user_type == 'S' and not gets_discount :
    INDENT
        return cost *.95
    DEDENT
    elif user_type == 'F' and gets_discount :
    INDENT
        return cost *.8
    DEDENT
    else :
    INDENT
        return cost *.95
    DEDENT
DEDENT
----------------------------------------

def calculate_food(user_type, gets_discount) :
INDENT
    cost = float(raw_input("Food cost: $"))
    return {
        ("S", True) : lambda x : x *.9,
        ("S", False) : lambda x : x *.95,
        ("F", True) : lambda x : x *.8,
        ("F", False) : lambda x : x *.95,
        } [(user_type, gets_discount)](cost)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46335038_46335056_1_11
46335038_46335126_2_13
Title: variable definition in python 
----------------------------------------

def main() :
INDENT
    weight = 0.0
    while True :
    INDENT

        weight = float(input("Enter the weight of your package: "))

        calcAndDisplayShipping(weight)
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    weight = 0.0

    weight = float(input("Enter the weight of your package: "))

    calcAndDisplayShipping(weight)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4633905_4633940_3_11
4633905_4635491_3_9
Title: How to optimize this script 
----------------------------------------

def main() :
INDENT
    filename = sys.argv [1]
    file = open(filename)
    for line in file :
    INDENT
        if line.strip() :
        INDENT
            lines = line.split(" ")
            lines.sort(key = str.lower)
            print ''.join(lines)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    for line in fileinput.input() :
    INDENT
        words = line [1 :].split()
        if words :
        INDENT
            words.sort(key = str.lower)
            print ' '.join(words)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46342582_46342886_1_14
46342582_46343056_3_14
Title: Implementing the Binary Search algorithm in python 
----------------------------------------

def hello(x, key, l, r) :
INDENT
    if l < r :
    INDENT
        a = (l + r) / / 2
        if key < x [a] :
        INDENT
            return hello(x, key, l, a + 1)
        DEDENT
        elif key > x [a] :
        INDENT
            return hello(x, key, a + 1, r)
        DEDENT
        else :
        INDENT
            return a
        DEDENT
    DEDENT
    else :
    INDENT
        return - 1
    DEDENT
DEDENT
----------------------------------------

def hello(x, left, right, query) :
INDENT
    if right > = left :
    INDENT
        mid = left + (right - left) / 2
        if x [mid] == query :
        INDENT
            return mid
        DEDENT
        elif x [mid] > query :
        INDENT
            return hello(x, left, mid - 1, query)
        DEDENT
        else :
        INDENT
            return hello(x, mid + 1, right, query)
        DEDENT
    DEDENT
    else :
    INDENT
        return - 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46356248_46356386_17_29
46356248_46356697_18_32
Title: My script runs on the shell but not on the command prompt 
----------------------------------------

def chooseCave() :
INDENT
    cave = ''
    i = 0
    question = 'Which cave will you go into? (1 or 2)'
    j = 0
    print ('')
    read(question)
    print ('')
    while cave ! = '1' and cave ! = '2' and i < = 10 :
    INDENT
        cave = input()
        i = i + 1
    DEDENT
    return cave
DEDENT
----------------------------------------

def chooseCave() :
INDENT
    cave = ''
    print ()
    while cave ! = '1' and cave ! = '2' :
    INDENT

        read('Which cave will you go into?(1 or 2): ')
        cave = input()

    DEDENT
    return cave

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46356248_46356386_30_47
46356248_46356697_33_65
Title: My script runs on the shell but not on the command prompt 
----------------------------------------

def checkCave(chosenCave) :
INDENT
    approach = 'You approach the cave...'
    j = 0
    read(approach)
    print ()
    spooky = 'It\'s dark and spooky...'
    j = 0
    read(spooky)
    time.sleep(1)
    print ()
    print ('\nA large dragon jumps out in front of you! He opens his jaw and...')
    time.sleep(1.5)
    friendlyCave = random.randint(1, 2)
    if chosenCave == str(friendlyCave) :
    INDENT
        print ('Gives you his treasure!')
    DEDENT
    else :
    INDENT
        print ('Gobbles you down in one bite!')
    DEDENT
DEDENT
----------------------------------------

def checkCave(chosenCave) :
INDENT
    read('you approach the cave...')
    print ()
    time.sleep(2)
    read("it's dark and spooky")
    print ()
    time.sleep(2)
    read('a large dragon jumps out in front of you! he opens his jaws and...')
    print ()
    print ()
    time.sleep(2)

    friendlyCave = rnd.randint(1, 2)

    if chosenCave == str(friendlyCave) :
    INDENT

        read('gives you his treasure!')
    DEDENT
    else :
    INDENT

        read('gobbles you down in 1 bite!')
    DEDENT
    print ()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46357121_46357744_1_25
46357121_46358569_1_19
Title: Continue iterating through sub-list after return? 
----------------------------------------

def getPapers(f, n) :
INDENT
    x = f.readlines()
    strippedPaper = [line.strip("\n").replace(' ', '') for line in x]

    print ()
    strippedBallot = [item.split(",") for item in strippedPaper]
    print ()
    try :
    INDENT
        for ballot in strippedBallot :
        INDENT
            print (ballot)
            valueParsePaper = parsePaper(ballot, n)
            print (valueParsePaper)
        DEDENT
    DEDENT
    except TypeError :
    INDENT
        print ("There was an error with the data type passed to var 'valueParsePaper'\n"
            "from this set.\n")
    DEDENT
DEDENT
----------------------------------------

def getPapers(f, n) :
INDENT
    x = f.readlines()
    strippedPaper = [line.strip("\n").replace(' ', '') for line in x]
    ballot = tuple()
    allBlanks = False if [i.strip() for i in strippedPaper if i] else True
    if allBlanks :
    INDENT
        ballot = ([], "blank")
    DEDENT
    elif len(strippedPaper) > n :
    INDENT
        ballot = ([], "too long")
    DEDENT
    else :
    INDENT
        ballot = (strippedPaper, "")
        for i in strippedPaper :
        INDENT
            if i.strip() == '' :
            INDENT
                continue
            DEDENT
            if not i.isdigit() or int(i) < 0 :
            INDENT
                ballot = ([], "non-digits")
                break
            DEDENT
        DEDENT
    DEDENT
    return ballot
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46357182_46357338_32_39
46357182_46357338_8_29
Title: Python : starting background process from background process 
----------------------------------------

def run(self) :
INDENT
    self.keepRunning = True;
    while self.keepRunning :
    INDENT
        print "+",
        time.sleep(1)
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    siren = Siren()

    siren.start()

    for x in range(20) :
    INDENT
        print ".",
        time.sleep(1)
    DEDENT
    siren.term()
    siren.join()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46358823_46358908_1_14
46358823_46360151_1_21
Title: Optimizing Python Function to Submit on Codewars 
----------------------------------------

def next_bigger(n) :
INDENT
    num_arr = [int(x) for x in str(n)]
    i = 0
    i = len(num_arr) - 1
    while (i > 0) :
    INDENT
        if num_arr [i] > num_arr [i - 1] :
        INDENT
            a = num_arr [i]
            num_arr [i] = num_arr [i - 1]
            num_arr [i - 1] = a
            break
        DEDENT
        else :
        INDENT
            i = i - 1
        DEDENT
    DEDENT
    newbig = "".join(str(e) for e in num_arr)
    return int(newbig)
DEDENT
----------------------------------------

def next_bigger(n) :
INDENT
    arr = [int(x) for x in str(n)]
    i = len(arr) - 1
    while i > 0 and arr [i - 1] > = arr [i] :
    INDENT
        i -= 1
    DEDENT
    if i < = 0 :
    INDENT
        return - 1

    DEDENT
    j = len(arr) - 1
    while arr [j] < = arr [i - 1] :
    INDENT
        j -= 1
    DEDENT
    arr [i - 1], arr [j] = arr [j], arr [i - 1]

    arr [i :] = arr [len(arr) - 1 : i - 1 : - 1]
    return int(''.join(str(x) for x in arr))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46358823_46358908_1_14
46358823_46360555_3_17
Title: Optimizing Python Function to Submit on Codewars 
----------------------------------------

def next_bigger(n) :
INDENT
    num_arr = [int(x) for x in str(n)]
    i = 0
    i = len(num_arr) - 1
    while (i > 0) :
    INDENT
        if num_arr [i] > num_arr [i - 1] :
        INDENT
            a = num_arr [i]
            num_arr [i] = num_arr [i - 1]
            num_arr [i - 1] = a
            break
        DEDENT
        else :
        INDENT
            i = i - 1
        DEDENT
    DEDENT
    newbig = "".join(str(e) for e in num_arr)
    return int(newbig)
DEDENT
----------------------------------------

def next_bigger(a) :
INDENT
    a = map(int, str(a))
    tmp = list(reversed(a))
    for i, item_a in enumerate(reversed(a)) :
    INDENT
        for j in (range(i)) :
        INDENT
            if item_a < tmp [j] :
            INDENT

                tmp [i] = tmp [j]
                print (list(reversed(tmp [i :])))
                tmp [j] = item_a
                fin = list(reversed(tmp [i :])) + sorted(tmp [: i])
                return functools.reduce(lambda x, y : x * 10 + y, fin)
            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46358823_46360151_1_21
46358823_46360555_3_17
Title: Optimizing Python Function to Submit on Codewars 
----------------------------------------

def next_bigger(n) :
INDENT
    arr = [int(x) for x in str(n)]
    i = len(arr) - 1
    while i > 0 and arr [i - 1] > = arr [i] :
    INDENT
        i -= 1
    DEDENT
    if i < = 0 :
    INDENT
        return - 1

    DEDENT
    j = len(arr) - 1
    while arr [j] < = arr [i - 1] :
    INDENT
        j -= 1
    DEDENT
    arr [i - 1], arr [j] = arr [j], arr [i - 1]

    arr [i :] = arr [len(arr) - 1 : i - 1 : - 1]
    return int(''.join(str(x) for x in arr))
DEDENT
----------------------------------------

def next_bigger(a) :
INDENT
    a = map(int, str(a))
    tmp = list(reversed(a))
    for i, item_a in enumerate(reversed(a)) :
    INDENT
        for j in (range(i)) :
        INDENT
            if item_a < tmp [j] :
            INDENT

                tmp [i] = tmp [j]
                print (list(reversed(tmp [i :])))
                tmp [j] = item_a
                fin = list(reversed(tmp [i :])) + sorted(tmp [: i])
                return functools.reduce(lambda x, y : x * 10 + y, fin)
            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46363603_46371227_5_19
46363603_46382186_5_19
Title: wxPython - Dynamically resize image when frame is maximized 
----------------------------------------

def __init__(self, redirect = False, filename = None) :
INDENT
    wx.App.__init__(self, redirect, filename)
    self.frame = wx.Frame(None, title = 'Photo Control', size = (400, 400))
    self.image_loaded = False
    self.current_size = self.frame.GetSize()
    self.filepath = None
    self.panel = wx.Panel(self.frame)
    self.Bind(wx.EVT_SIZE, self.onResize)
    self.PhotoMaxSize = self.current_size.GetHeight() - 10
    self.createWidgets()
    self.frame.Show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = wx.Size(500, 300), style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    bSizer11 = wx.BoxSizer(wx.HORIZONTAL)
    self.img1 = wx.Image("1.bmp", wx.BITMAP_TYPE_ANY)
    self.img2 = wx.Image("1.bmp", wx.BITMAP_TYPE_ANY)
    self.m_bitmap3 = wx.StaticBitmap(self, wx.ID_ANY, wx.BitmapFromImage(self.img1), wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer11.Add(self.m_bitmap3, 1, wx.EXPAND, 0)
    self.m_bitmap4 = wx.StaticBitmap(self, wx.ID_ANY, wx.BitmapFromImage(self.img2))
    bSizer11.Add(self.m_bitmap4, 1, wx.EXPAND, 0)
    self.Bind(wx.EVT_SIZE, self.onResize)
    self.SetSizer(bSizer11)
    self.Layout()
    self.Centre(wx.BOTH)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46363603_46371227_82_94
46363603_46382186_23_34
Title: wxPython - Dynamically resize image when frame is maximized 
----------------------------------------

def onResize(self, event) :
INDENT
    print 'resizing'
    if self.image_loaded :
    INDENT
        if self.current_size ! = self.frame.GetSize() :
        INDENT
            self.current_size = self.frame.GetSize()
            self.PhotoMaxSize = self.current_size.GetHeight() - 30
            img = self.scale_image()
            self.imageCtrl.SetBitmap(wx.BitmapFromImage(img))
            self.panel.Refresh()
            self.panel.Layout()

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def onResize(self, event) :
INDENT
    frame_size = self.GetSize()
    frame_h = (frame_size [0] - 10) / 2
    frame_w = (frame_size [1] - 10) / 2
    img1 = self.img1.Scale(frame_h, frame_w)
    img2 = self.img2.Scale(frame_h, frame_w)
    self.m_bitmap3.SetBitmap(wx.BitmapFromImage(img1))
    self.m_bitmap4.SetBitmap(wx.BitmapFromImage(img2))
    self.Refresh()
    self.Layout()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384280_19_33
46383672_46384280_61_70
Title: Text not displaying in Tkinter 
----------------------------------------

def __init__(self, canvas, bat, color) :
INDENT
    self.canvas = canvas
    self.bat = bat
    self.id = self.canvas.create_oval(30, 30, 50, 50, fill = color)
    self.canvas.move(self.id, 100, 200)
    starting_position = [- 3, - 2, - 1, 1, 2, 3]
    random.shuffle(starting_position)
    self.x = starting_position [0]
    self.y = - 3
    self.canvas_height = self.canvas.winfo_height()
    self.canvas_width = self.canvas.winfo_width()
    self.hit_bottom = False

DEDENT
----------------------------------------

def __init__(self, canvas, color) :
INDENT
    self.canvas = canvas
    self.id = self.canvas.create_rectangle(0, 0, 100, 10, fill = color)
    self.canvas.move(self.id, 200, 300)
    self.x = 0
    self.canvas_width = self.canvas.winfo_width()
    self.canvas.bind_all('<KeyPress-Left>', self.left_turn)
    self.canvas.bind_all('<KeyPress-Right>', self.right_turn)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384280_19_33
46383672_46384374_59_68
Title: Text not displaying in Tkinter 
----------------------------------------

def __init__(self, canvas, bat, color) :
INDENT
    self.canvas = canvas
    self.bat = bat
    self.id = self.canvas.create_oval(30, 30, 50, 50, fill = color)
    self.canvas.move(self.id, 100, 200)
    starting_position = [- 3, - 2, - 1, 1, 2, 3]
    random.shuffle(starting_position)
    self.x = starting_position [0]
    self.y = - 3
    self.canvas_height = self.canvas.winfo_height()
    self.canvas_width = self.canvas.winfo_width()
    self.hit_bottom = False

DEDENT
----------------------------------------

def __init__(self, canvas, color) :
INDENT
    self.canvas = canvas
    self.id = canvas.create_rectangle(0, 0, 100, 10, fill = color)
    self.canvas.move(self.id, 200, 300)
    self.x = 0
    self.canvas_width = self.canvas.winfo_width()
    self.canvas.bind_all('<KeyPress-Left>', self.left_turn)
    self.canvas.bind_all('<KeyPress-Right>', self.right_turn)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384280_41_59
46383672_46384280_71_78
Title: Text not displaying in Tkinter 
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, self.y)
    pos = self.canvas.coords(self.id)
    if pos [1] < = 0 :
    INDENT
        self.y = 6
    DEDENT
    if pos [3] > = self.canvas_height :
    INDENT
        self.hit_bottom = True

    DEDENT
    if self.hit_bat(pos) == True :
    INDENT
        self.y = - 6
    DEDENT
    if pos [0] < = 0 :
    INDENT
        self.x = 6
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = - 6

    DEDENT
DEDENT
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, 0)
    pos = self.canvas.coords(self.id)
    if pos [0] < = 0 :
    INDENT
        self.x = 0
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = 0
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384280_41_59
46383672_46384374_69_76
Title: Text not displaying in Tkinter 
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, self.y)
    pos = self.canvas.coords(self.id)
    if pos [1] < = 0 :
    INDENT
        self.y = 6
    DEDENT
    if pos [3] > = self.canvas_height :
    INDENT
        self.hit_bottom = True

    DEDENT
    if self.hit_bat(pos) == True :
    INDENT
        self.y = - 6
    DEDENT
    if pos [0] < = 0 :
    INDENT
        self.x = 6
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = - 6

    DEDENT
DEDENT
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, 0)
    pos = self.canvas.coords(self.id)
    if pos [0] < = 0 :
    INDENT
        self.x = 0
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = 0
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384280_61_70
46383672_46384374_17_31
Title: Text not displaying in Tkinter 
----------------------------------------

def __init__(self, canvas, color) :
INDENT
    self.canvas = canvas
    self.id = self.canvas.create_rectangle(0, 0, 100, 10, fill = color)
    self.canvas.move(self.id, 200, 300)
    self.x = 0
    self.canvas_width = self.canvas.winfo_width()
    self.canvas.bind_all('<KeyPress-Left>', self.left_turn)
    self.canvas.bind_all('<KeyPress-Right>', self.right_turn)

DEDENT
----------------------------------------

def __init__(self, canvas, bat, color) :
INDENT
    self.canvas = canvas
    self.bat = bat
    self.id = canvas.create_oval(30, 30, 50, 50, fill = color)
    self.canvas.move(self.id, 100, 200)
    starting_position = [- 3, - 2, - 1, 1, 2, 3]
    random.shuffle(starting_position)
    self.x = starting_position [0]
    self.y = - 3
    self.canvas_height = self.canvas.winfo_height()
    self.canvas_width = self.canvas.winfo_width()
    self.hit_bottom = False

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384280_71_78
46383672_46384374_39_57
Title: Text not displaying in Tkinter 
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, 0)
    pos = self.canvas.coords(self.id)
    if pos [0] < = 0 :
    INDENT
        self.x = 0
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = 0
    DEDENT
DEDENT
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, self.y)
    pos = self.canvas.coords(self.id)
    if pos [1] < = 0 :
    INDENT
        self.y = 6
    DEDENT
    if pos [3] > = self.canvas_height :
    INDENT
        self.hit_bottom = True

    DEDENT
    if self.hit_bat(pos) == True :
    INDENT
        self.y = - 6
    DEDENT
    if pos [0] < = 0 :
    INDENT
        self.x = 6
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = - 6

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384374_17_31
46383672_46384374_59_68
Title: Text not displaying in Tkinter 
----------------------------------------

def __init__(self, canvas, bat, color) :
INDENT
    self.canvas = canvas
    self.bat = bat
    self.id = canvas.create_oval(30, 30, 50, 50, fill = color)
    self.canvas.move(self.id, 100, 200)
    starting_position = [- 3, - 2, - 1, 1, 2, 3]
    random.shuffle(starting_position)
    self.x = starting_position [0]
    self.y = - 3
    self.canvas_height = self.canvas.winfo_height()
    self.canvas_width = self.canvas.winfo_width()
    self.hit_bottom = False

DEDENT
----------------------------------------

def __init__(self, canvas, color) :
INDENT
    self.canvas = canvas
    self.id = canvas.create_rectangle(0, 0, 100, 10, fill = color)
    self.canvas.move(self.id, 200, 300)
    self.x = 0
    self.canvas_width = self.canvas.winfo_width()
    self.canvas.bind_all('<KeyPress-Left>', self.left_turn)
    self.canvas.bind_all('<KeyPress-Right>', self.right_turn)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46383672_46384374_39_57
46383672_46384374_69_76
Title: Text not displaying in Tkinter 
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, self.y)
    pos = self.canvas.coords(self.id)
    if pos [1] < = 0 :
    INDENT
        self.y = 6
    DEDENT
    if pos [3] > = self.canvas_height :
    INDENT
        self.hit_bottom = True

    DEDENT
    if self.hit_bat(pos) == True :
    INDENT
        self.y = - 6
    DEDENT
    if pos [0] < = 0 :
    INDENT
        self.x = 6
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = - 6

    DEDENT
DEDENT
----------------------------------------

def draw(self) :
INDENT
    self.canvas.move(self.id, self.x, 0)
    pos = self.canvas.coords(self.id)
    if pos [0] < = 0 :
    INDENT
        self.x = 0
    DEDENT
    if pos [2] > = self.canvas_width :
    INDENT
        self.x = 0
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46385005_46393968_7_27
46385005_46477039_18_26
Title: how to return mysql query result using python 
----------------------------------------

def select() :
INDENT
    print ("inside select")
    curs.execute("""
        SELECT year(dt) AS YEAR, max(air_temp) AS MAX_TEMP 
        FROM TEMP_DATA 
        WHERE air_temp != 9999 
        AND (quality_at = '0' || quality_at = '1' || quality_at = '4' || quality_at = '5' || quality_at = '9') 
        GROUP BY year(dt); 
        SELECT year(dt) AS YEAR, max(air_temp) AS MAX_TEMP 
        FROM MAX_TEMP9293 
        WHERE air_temp != 9999 
        AND (quality_at = '0' || quality_at = '1' || quality_at = '4' || quality_at = '5' || quality_at = '9') 
        GROUP BY year(dt)
        """)
    result = curs.fetchall()
    return result
DEDENT
----------------------------------------

def select() :
INDENT
    for l in list :
    INDENT

        cursor.execute(l)
        max = cursor.fetchall()
        print (max [0])
        print (max [1])
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46386840_46387102_1_13
46386840_46387257_10_39
Title: How to remove an element from a list by index in Python without using inbuilt functions 
----------------------------------------

def remove(l, pos) :
INDENT
    pos -= 1
    size = len(l)
    if pos < = 0 :
    INDENT
        return [l [i] for i in range(1, size)]
    DEDENT
    if pos > = size :
    INDENT
        return [l [i] for i in range(size - 1)]
    DEDENT
    return [l [i] for i in range(size) if i ! = pos]

DEDENT
----------------------------------------

def remove(my_list, position) :
INDENT
    lst = []
    list_len = my_len(my_list)
    if position < = 0 :
    rm_idx = 0
    elif position > = list_len :
    INDENT
        rm_idx = list_len - 1
    DEDENT
    else :
    INDENT
        rm_idx = position - 1
    DEDENT
    for i in range(list_len) :
    INDENT
        if i ! = rm_idx :
        INDENT
            lst += [my_list [i]]
        DEDENT
    DEDENT
    return lst
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46392463_46395394_13_24
46392463_46719634_71_87
Title: drag and drop a Tab from a QtabBar to other QtabBar in a splitted Widget PyQt Qt 
----------------------------------------

def __init__(self) :
INDENT
    super(ColtTab, self).__init__()
    self.setAcceptDrops(True)
    self.tabBar = self.tabBar()
    self.tabBar.setMouseTracking(True)
    self.setDocumentMode(True)
    self.indexTab = int()
    self.setMovable(True)
    self.setStyleSheet(style_sheet_file)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.TABINDEX = 0
    tabWidgetOne = Tabs(self)
    tabWidgetTwo = Tabs(self)
    layout = QHBoxLayout()
    self.moveWidget = None
    layout.addWidget(tabWidgetOne)
    layout.addWidget(tabWidgetTwo)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46392463_46395394_13_24
46392463_46719634_8_19
Title: drag and drop a Tab from a QtabBar to other QtabBar in a splitted Widget PyQt Qt 
----------------------------------------

def __init__(self) :
INDENT
    super(ColtTab, self).__init__()
    self.setAcceptDrops(True)
    self.tabBar = self.tabBar()
    self.tabBar.setMouseTracking(True)
    self.setDocumentMode(True)
    self.indexTab = int()
    self.setMovable(True)
    self.setStyleSheet(style_sheet_file)

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super().__init__(parent)
    self.parent = parent
    self.setAcceptDrops(True)
    self.tabBar = self.tabBar()
    self.tabBar.setMouseTracking(True)
    self.indexTab = None
    self.setMovable(True)
    self.addTab(QWidget(self), 'Tab One')
    self.addTab(QWidget(self), 'Tab Two')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46392463_46395394_39_66
46392463_46719634_20_41
Title: drag and drop a Tab from a QtabBar to other QtabBar in a splitted Widget PyQt Qt 
----------------------------------------

def mouseMoveEvent(self, e) :
INDENT
    if e.buttons() ! = qc.Qt.MiddleButton :
    INDENT
        return
    DEDENT
    globalPos = self.mapToGlobal(e.pos())
    tabBar = self.tabBar
    posInTab = tabBar.mapFromGlobal(globalPos)
    self.indexTab = tabBar.tabAt(e.pos())
    tabRect = tabBar.tabRect(self.indexTab)

    pixmap = qg.QPixmap(tabRect.size())
    tabBar.render(pixmap, qc.QPoint(), qg.QRegion(tabRect))
    mimeData = qc.QMimeData()
    drag = qg.QDrag(tabBar)
    drag.setMimeData(mimeData)
    drag.setPixmap(pixmap)
    cursor = qg.QCursor(qc.Qt.OpenHandCursor)
    drag.setHotSpot(e.pos() - posInTab)
    drag.setDragCursor(cursor.pixmap(), qc.Qt.MoveAction)
    dropAction = drag.exec_(qc.Qt.MoveAction)

DEDENT
----------------------------------------

def mouseMoveEvent(self, e) :
INDENT
    if e.buttons() ! = Qt.RightButton :
    INDENT
        return
    DEDENT
    globalPos = self.mapToGlobal(e.pos())
    tabBar = self.tabBar
    posInTab = tabBar.mapFromGlobal(globalPos)
    self.indexTab = tabBar.tabAt(e.pos())
    tabRect = tabBar.tabRect(self.indexTab)
    pixmap = QPixmap(tabRect.size())
    tabBar.render(pixmap, QPoint(), QRegion(tabRect))
    mimeData = QMimeData()
    drag = QDrag(tabBar)
    drag.setMimeData(mimeData)
    drag.setPixmap(pixmap)
    cursor = QCursor(Qt.OpenHandCursor)
    drag.setHotSpot(e.pos() - posInTab)
    drag.setDragCursor(cursor.pixmap(), Qt.MoveAction)
    dropAction = drag.exec_(Qt.MoveAction)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46392463_46395394_75_83
46392463_46719634_42_50
Title: drag and drop a Tab from a QtabBar to other QtabBar in a splitted Widget PyQt Qt 
----------------------------------------

def dragEnterEvent(self, e) :
INDENT
    e.accept()
    if e.source().parentWidget() ! = self :
    INDENT
        return
    DEDENT
    getTabIndex(self.indexOf(self.widget(self.indexTab)))

DEDENT
----------------------------------------

def dragEnterEvent(self, e) :
INDENT
    e.accept()
    if e.source().parentWidget() ! = self :
    INDENT
        return
    DEDENT
    print (self.indexOf(self.widget(self.indexTab)))
    self.parent.TABINDEX = self.indexOf(self.widget(self.indexTab))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46392463_46719634_71_87
46392463_46719634_8_19
Title: drag and drop a Tab from a QtabBar to other QtabBar in a splitted Widget PyQt Qt 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.TABINDEX = 0
    tabWidgetOne = Tabs(self)
    tabWidgetTwo = Tabs(self)
    layout = QHBoxLayout()
    self.moveWidget = None
    layout.addWidget(tabWidgetOne)
    layout.addWidget(tabWidgetTwo)
    self.setLayout(layout)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super().__init__(parent)
    self.parent = parent
    self.setAcceptDrops(True)
    self.tabBar = self.tabBar()
    self.tabBar.setMouseTracking(True)
    self.indexTab = None
    self.setMovable(True)
    self.addTab(QWidget(self), 'Tab One')
    self.addTab(QWidget(self), 'Tab Two')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46396692_46400249_6_14
46396692_46409516_36_44
Title: how to run nfcpy card reader system on wxPython GUI application 
----------------------------------------

def __init__(self, parent, title) :
INDENT
    wx.Frame.__init__(self, parent, title = title, size = (400, 500))
    panel = wx.Panel(self)
    self.text = wx.StaticText(panel, label = 'i want to print the return value here', pos = (100, 100))
    self.read = wx.Button(panel, - 1, label = "Read Card", pos = (100, 200))
    self.read.Bind(wx.EVT_BUTTON, self.on_button)
    self.Show()
    self.n = 0
DEDENT
----------------------------------------

def __init__(self, title) :
INDENT
    super(Frame, self).__init__(None, title = title, size = (500, 200))
    self.text = wx.StaticText(wx.Panel(self), pos = (100, 100))
    self.Bind(SHOW_CARD_EVENT, self.show_card_event)
    self.Bind(GONE_CARD_EVENT, self.gone_card_event)
    self.Bind(wx.EVT_CLOSE, self.close_window_event)
    wx.PostEvent(self, GoneCardEvent())
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46403464_46404010_18_27
46403464_46431340_11_27
Title: calculate sum from csv in python 
----------------------------------------

def main(filename) :
INDENT
    products = read_products(filename)
    total_value = sum([float(row [2]) for row in products [1 :]])
    total_count = sum([int(row [3]) for row in products [1 :]])
    print_table(products)
    print '-------------------------------------'
    print 'Number of items:', total_count
    print 'Total value:', total_value
DEDENT
----------------------------------------

def main() :
INDENT
    products = read_products('products.csv')
    list.sort(products, key = operator.itemgetter(0), reverse = False)
    total_items = 0
    total_assets = 0
    for row in products :
    INDENT
        print ('Product ID:', row [0])
        print ('Description:', row [1])
        print ('Unit Price:', row [2])
        print ('Inventory Count:', row [3])
        print ('Value:', (float(row [2]) * float(row [3])))
        print ("\n")
        total_items = total_items + float(row [3])
        total_assets = total_assets + (float(row [2]) * float(row [3]))
    DEDENT
    print ('Total Number of items is', total_items)
    print('Total Value of all assets:', total_assets, end = "\n")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46425378_46425559_3_11
46425378_46426644_3_12
Title: Python: Class defined inside another Class 
----------------------------------------

def __new__(cls, class_name) :
INDENT
    def default_init(self, color, surf_area) :
    INDENT
        self.color = color
        self.surf_area = surf_area
    DEDENT
    return type(class_name, (Shapes,),
        {'__init__' : default_init, '__new__' : super(Shapes,
                cls).__new__})

DEDENT
----------------------------------------

def __new__(cls, name) :
INDENT
    if name in cls._registry :
    INDENT
        return cls._registry [name]
    DEDENT
    class Proto(object) :
    INDENT
        def __init__(self, color, surf_area) :
        INDENT
            self.color = color
            self.surf_area = surf_area
        DEDENT
    DEDENT
    Proto.__name__ = name
    cls._registry [name] = Proto
    return Proto
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46434779_46434967_1_21
46434779_46436641_1_14
Title: Can someone tell me what is wrong with my code 
----------------------------------------

def temperature_converter(value, scale_from, scale_to) :
INDENT
    scale_from = scale_from.upper()
    scale_to = scale_to.upper()
    if scale_from == "F" :
    INDENT
        if scale_to == "C" :
        INDENT
            return (value - 32) * 5 / 9
        DEDENT
        elif scale_to == "K" :
        INDENT
            return (value * 5 / 9) + 273
        DEDENT
    DEDENT
    elif scale_from == "C" :
    INDENT
        if scale_to == "F" :
        INDENT
            return value * (9 / 5) + 32
        DEDENT
        elif scale_to == "K" :
        INDENT
            return value + 273
        DEDENT
    DEDENT
    elif scale_from == "K" :
    INDENT
        if scale_to == "F" :
        INDENT
            return 9 / 5 * (value - 273) + 32
        DEDENT
        elif scale_to == "K" :
        INDENT
            return value - 273
        DEDENT
    DEDENT
    raise ValueError("Invalid argument")
DEDENT
----------------------------------------

def temperature_converter(value, scale_from, scale_to) :
INDENT
    if scale_from == "F" and scale_to == "C" :
    INDENT
        return (value - 32.0) * 5 / 9
    DEDENT
    elif scale_from == "F" and scale_to == "K" :
    INDENT
        return (value + 459.67) * 5 / 9
    DEDENT
    elif scale_from == "C" and scale_to == "F" :
    INDENT
        return value * (9.0 / 5.0) + 32
    DEDENT
    elif scale_from == "C" and scale_to == "K" :
    INDENT
        return value + 273.15
    DEDENT
    elif scale_from == "K" and scale_to == "F" :
    INDENT
        return ((value - 273.15) * 1.8) + 32
    DEDENT
    elif scale_from == "K" and scale_to == "C" :
    INDENT
        return value - 273.15
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4643536_4643931_2_60
4643536_4644327_5_27
Title: Optimization of Function with Dictionary and Zip() 
----------------------------------------

def filetxt() :
INDENT
    word_freq = {}
    word_list = []
    word_map = {}
    lvl1 = []
    lvl2 = []
    total_t = 0
    users = 0
    text = []

    for l in range(0, 500) :
    INDENT
        try :
        INDENT
            with open("C:/Twitter/json/user_" + str(l) + ".json", "r") as f :
            INDENT
                text_f = json.load(f)
                users = users + 1

                for t in text_f.itervalues() :
                INDENT
                    text.append(t)
                DEDENT
            DEDENT
        DEDENT
        except IOError :
        INDENT
            pass
        DEDENT
    DEDENT
    total_t = len(text)
    occ = 0
    import string
    for s in text :
    INDENT
        a = re.findall(r'(RT)', s)
        b = re.findall(r'(@)', s)
        occ += len(a) + len(b)
        s = s.encode('utf-8')
        out = s.translate(string.maketrans("", ""), string.punctuation)

        words = s.lower().split(None)
        for word in word_list :
        INDENT
            try :
            INDENT
                word_freq [word] += 1
            DEDENT
            except KeyError :
            INDENT

                word_freq [word] = 1
                word_map [word] = len(word_list)
                word_list.append(word)

            DEDENT
        DEDENT
        for curword, nextword in zip(words, words [1 :]) :
        INDENT
            lvl1.append(word_map [curword])
            lvl2.append(word_map [nextword])
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def filetxt() :
INDENT
    users = 0
    total_t = 0
    occ = 0
    wordcount = defaultdict(int)
    wordpairs = defaultdict(lambda : defaultdict(int))
    for filenum in rng(500) :
    INDENT
        try :
        INDENT
            with open("C:/Twitter/json/user_" + str(filenum) + ".json", 'r') as inf :
            INDENT
                users += 1
                tweets = json.load(inf)
                total_t += len(tweets)
                for txt in (r ['text'] for r in tweets) :
                INDENT
                    occ += txt.count('RT') + txt.count('@')
                    prev = None
                    for word in txt.encode('utf-8').translate(None, string.punctuation).lower().split() :
                    INDENT
                        wordcount [word] += 1
                        wordpairs [prev] [word] += 1
                        prev = word
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
        except IOError :
        INDENT
            pass
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46436100_46436300_3_12
46436100_46436818_2_12
Title: For Loop for Prime Factors in Python 
----------------------------------------

def factor(n) :
INDENT
    count = 0
    for num in range(2, n + 1) :
    INDENT
        if n % num == 0 and num ! = n :
        INDENT
            primefactors.append(num)
        DEDENT
    DEDENT
    print ("These are the prime factors:")
    print (primefactors)
    del l [:]
    del primefactors [:]
DEDENT
----------------------------------------

def factor(number) :
INDENT
    for i in range(2, int(number / / 2) + 1) :
    INDENT
        prime = True
        for j in range(2, int(i **.5) + 1) :
        INDENT
            if i % j == 0 :
            INDENT
                prime = False
                break
            DEDENT
        DEDENT
        if prime and number % i == 0 :
        INDENT
            primefactors.append(i)
        DEDENT
    DEDENT
    print (primefactors)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46439894_46445486_11_28
46439894_46459490_10_40
Title: Matplotlib animation of the values of a 3D array in python 
----------------------------------------

def display(walabot_instance) :
INDENT
    fig = plt.figure()
    ax = fig.add_subplot(111, projection = '3d')
    path_collection = ax.scatter(x, y, z, zdir = 'z')

    def update(ignored, walabot_instance) :
    INDENT
        signal = walabot_instance.get_RawImage_values()
        path_collection.set_sizes(signal [0])
        path_collection.set_color(signal [1])
        return path_collection,
    DEDENT
    return FuncAnimation(fig, update, fargs = [walabot_instance])
DEDENT
----------------------------------------

def display(walabot_instance) :
INDENT
    fig = plt.figure()
    ax = fig.add_subplot(111, projection = '3d')
    signal = walabot_instance.get_RawImage_values()
    path_collection = ax.scatter(x, y, z, zdir = 'z', s = signal [0], c = signal [0])

    ax.set_xlim([xMin - 1, xMax - 1])
    ax.set_ylim([yMin - 1, yMax - 1])
    ax.set_zlim([zMin - 1, zMax - 1])
    ax.set_xlabel('X AXIS')
    ax.set_ylabel('Y AXIS')
    ax.set_zlabel('Z AXIS')
    cbar = plt.colorbar(path_collection)
    cbar.set_label('Density')
    def update(ignored, walabot_instance) :
    INDENT
        ax.clear()
        signal_update = walabot_instance.get_RawImage_values()
        path_collection = ax.scatter(x, y, z, zdir = 'z', s = signal_update [0], c = signal_update [0])
        return path_collection
    DEDENT
    return FuncAnimation(fig, update, fargs = [walabot_instance])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46440434_46440602_1_8
46440434_46440686_1_11
Title: "Getting word frequency of a list of sentence but not combined. (python)" 
----------------------------------------

def getWordFreq(corpus) :
INDENT
    wordFreq = []
    for sent in corpus :
    INDENT
        for word in sent :
        INDENT
            wordFreq.append((word, sum(map(lambda x : x.count(word), corpus))))
        DEDENT
    DEDENT
    return wordFreq

DEDENT
----------------------------------------

def getWordFreq(corpus) :
INDENT
    result = {}
    for data in corpus :
    INDENT
        for word in data :
        INDENT
            if word in result :
            INDENT
                result [word] += 1
            DEDENT
            else :
            INDENT
                result [word] = 1
            DEDENT
        DEDENT
    DEDENT
    return result.items()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46444464_46459102_4_41
46444464_46459102_83_109
Title: How to fill cells in tkinter table automatically Python 
----------------------------------------

def __init__(self, parent, rows, columns) :
INDENT
    Frame.__init__(self, parent)
    self._entry = {}
    self.rows = rows
    self.columns = columns

    vcmd = (self.register(self._validate), "%P")

    for row in range(self.rows) :
    INDENT
        for column in range(self.columns) :
        INDENT
            index = (row, column)
            if column == 3 :
            INDENT
                e = Entry(self, validate = "key", validatecommand = vcmd)
            DEDENT
            else :
            INDENT
                e = Entry(self)
            DEDENT
            e.grid(row = row, column = column, stick = "nsew")
            self._entry [index] = e

        DEDENT
    DEDENT
    for column in range(self.columns) :
    INDENT
        self.grid_columnconfigure(column, weight = 1)

    DEDENT
    self.LookUpList = [
        ['a', 'Black skirt', 'PP', '2000'],
        ['b', 'Pink T-shirt', 'PP', '1000'],
        ['c', 'Yellow skirt', 'Marela', '1500'],
        ['d', 'White trousers', 'PP', '2000']]

    for row in range(self.rows) :
    INDENT
        self._entry [row, 0].bind("<Return>", self.autofill)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    Frame.__init__(self, parent)
    names = ["Cislo produktu",
        "Popis produktu",
        "Znacka",
        "Mnozstvi",
        "Jednotkova cena",
        "Prodejna",
        "Celkova cena"]
    frame = Frame(self)
    frame.pack(side = "top", fill = "both")
    for i, title in enumerate(names) :
    INDENT
        l = Label(frame, text = title)
        l.grid(row = 0, column = i)
        frame.grid_columnconfigure(i, weight = 1)
    DEDENT
    self.EmptySpace = Label(self)
    self.table = SimpleTableInput(self, 30, 7)
    self.table.pack(side = "top", fill = "both")
    self.EmptySpace.pack(side = "top", fill = "both")

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46445108_46446166_8_17
46445108_46446649_5_15
Title: "scrapy crawled 0 pages (at 0 pages/min) scraped 0 items (at 0 items/min)" 
----------------------------------------

def parse(self, response) :
INDENT
    item = PropertiesItem()
    item ['title'] = response.xpath("//h2[@class='listing-title' and not(span)]/text()").extract()
    item ['price'] = response.xpath("//h2[@class='listing-title' and not(span)]/text()").extract()
    item ['description'] = response.xpath("//h2[@class='listing-title' and not(span)]/text()").extract()
    item ['address'] = response.xpath("//h2[@class='listing-title' and not(span)]/text()").extract()
    item ['image_urls'] = response.xpath("//h2[@class='listing-title' and not(span)]/text()").extract()
    yield item
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    self.log('title: {}'.format(response.xpath(
                "//h2[@class='listing-title' and not(span)]/text()").extract_first()))
    self.log('price: {}'.format(response.xpath(
                "//meta[@itemprop='price']/@content").extract_first()))
    self.log("description: {}".format(response.xpath(
                "//p[@itemprop='description' and not(span)]/text()").extract_first()))
    self.log('address: {}'.format(response.xpath(
                "//span[@class='truncate-line']/text()[2]").re('\|(\s+\w+.+)')))
    self.log('image_urls: {}'.format(response.xpath(
                "//noscript/img/@src").extract_first()))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46463959_46498931_34_41
46463959_46498931_44_52
Title: Python visualize beat frequency in circles or spheres 
----------------------------------------

def __init__(self) :
INDENT
    super(MainWindow, self).__init__()
    self.widget = GLWidget(self)
    layout = QtGui.QVBoxLayout()
    layout.addWidget(self.widget)
    layout.setContentsMargins(5, 5, 5, 5)
    self.setLayout(layout)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QGLWidget.__init__(self, parent)
    self.setMinimumSize(800, 600)
    self.start_time = time.time()
    self.timer = QTimer()
    self.timer.timeout.connect(self.update)
    self.timer.start(1000 / 60)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4648792_19330692_23_28
4648792_5264603_23_28
Title: Is there a python module to parse Linux's sysfs? 
----------------------------------------

def __init__(self, path = '/sys') :
INDENT
    self._path = _norm_path(path)
    if not self._path.startswith('/sys') :
    INDENT
        raise RuntimeError("Using this on non-sysfs files is dangerous!")
    DEDENT
    self.__dict__.update(dict.fromkeys(_norm(i) for i in listdir(self._path)))
DEDENT
----------------------------------------

def __init__(self, path = '/sys') :
INDENT
    self._path = _norm_path(path)
    if not self._path.startswith('/sys') :
    INDENT
        raise RuntimeError("Using this on non-sysfs files is dangerous!")
    DEDENT
    self.__dict__.update(dict.fromkeys(_norm(i) for i in listdir(self._path)))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4648792_19330692_44_54
4648792_5264603_44_58
Title: Is there a python module to parse Linux's sysfs? 
----------------------------------------

def __getattribute__(self, name) :
INDENT
    if name.startswith('_') :
    INDENT
        return object.__getattribute__(self, name)
    DEDENT
    name = _denorm(name)
    p = realpath(join(self._path, name))
    if isfile(p) :
    INDENT
        return open(p, 'r').read() [: - 1]
    DEDENT
    elif isdir(p) :
    INDENT
        return SysFsObject(p)
    DEDENT
DEDENT
----------------------------------------

def __getattribute__(self, name) :
INDENT
    if name.startswith('_') :
    INDENT
        return object.__getattribute__(self, name)
    DEDENT
    name = _denorm(name)
    p = realpath(join(self._path, name))
    if isfile(p) :
    INDENT
        data = open(p, 'r').read() [: - 1]
        try :
        INDENT
            return int(data)
        DEDENT
        except ValueError :
        INDENT
            return data
        DEDENT
    DEDENT
    elif isdir(p) :
    INDENT
        return SysFsObject(p)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46518091_46518156_1_15
46518091_46518159_1_13
Title: What is the flaw with my logic in a python function for checking primes? 
----------------------------------------

def Prime(n) :
INDENT
    if n == 1 or n == 2 or n == 3 :
    INDENT
        print ("This number is prime.")
    DEDENT
    else :
    INDENT
        i = n - 1
        while i > 0 :
        INDENT
            if i == 1 or n == 2 or n == 3 :
            INDENT
                print ("This number is prime.")
                break
            DEDENT
            if n % i == 0 :
            INDENT
                print ("This number is not prime.")
                break
            DEDENT
            else :
            INDENT
                i = i - 1
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def Prime(n) :
INDENT
    if n == 1 or n == 2 or n == 3 :
    INDENT
        print ("This number is prime.")
    DEDENT
    else :
    INDENT
        i = n - 1
        while i > 1 :
        INDENT
            if n % i == 0 :
            INDENT
                print ("This number is not prime.")
                return
            DEDENT
            i = i - 1
        DEDENT
        print ("This number is prime.")
        return
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46518091_46518159_1_13
46518091_46518226_1_14
Title: What is the flaw with my logic in a python function for checking primes? 
----------------------------------------

def Prime(n) :
INDENT
    if n == 1 or n == 2 or n == 3 :
    INDENT
        print ("This number is prime.")
    DEDENT
    else :
    INDENT
        i = n - 1
        while i > 1 :
        INDENT
            if n % i == 0 :
            INDENT
                print ("This number is not prime.")
                return
            DEDENT
            i = i - 1
        DEDENT
        print ("This number is prime.")
        return
    DEDENT
DEDENT
----------------------------------------

def Prime(n) :
INDENT
    flag = true
    if n == 1 or n == 2 or n == 3 :
    INDENT
        print ("This number is prime.")
    DEDENT
    else :
    INDENT
        i = n
        while i > 0 :
        INDENT
            if n % i == 0 :
            INDENT
                print ("This number is not prime.")
                break
            DEDENT
            else :
            INDENT
                i = i - 1
            DEDENT
        DEDENT
        if flag == true :
        INDENT
            print ("This number is prime.")
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46519558_46519610_20_34
46519558_46519645_1_17
Title: Trying to check a string that satisfies these conditions 
----------------------------------------

def check_password(password) :
INDENT
    errors = []
    if not has_unique_letters(password) :
    INDENT
        errors.append(PASSWORD_ERRORS ['unique_letter_error'])
    DEDENT
    if not has_even_vowels(password) :
    INDENT
        errors.append(PASSWORD_ERRORS ['even_vowels_error'])
    DEDENT
    if not has_special_character(password) :
    INDENT
        errors.append(PASSWORD_ERRORS ['special_character_error'])
    DEDENT
    if not has_divisible_numbers(password) :
    INDENT
        errors.append(PASSWORD_ERRORS ['divisible_numbers_error'])
    DEDENT
    return errors

DEDENT
----------------------------------------

def check_password(password) :
INDENT
    errors = []
    if not has_unique_letters(password) :
    INDENT
        errors.append("Warning! Please ensure letters are not repeated.")
    DEDENT
    if not has_even_vowels(password) :
    INDENT
        errors.append("Warning! Please ensure password contains an even number of vowels.")
    DEDENT
    if not has_special_character(password) :
    INDENT
        errors.append("Warning! Please ensure password contains at least one of {@, #, *, $}")
    DEDENT
    if not has_divisible_numbers(password) :
    INDENT
        errors.append("Warning! Please ensure all numbers are divisible by 2 or 3.")
    DEDENT
    if errors :
    INDENT
        print "Sorry, your password does not meet our criteria."
        for e in errors :
        INDENT
            print (e)
        DEDENT
    DEDENT
    else :
    INDENT
        print "Congratulations, your password meets our criteria."
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46531542_46533427_18_25
46531542_46533427_35_49
Title: Python sending signals between two QThreads 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Worker, self).__init__(parent)
    self.auth = AuthWorker()
    self.auth_thread = QtCore.QThread()
    self.auth.moveToThread(self.auth_thread)
    self.auth.authenticate.connect(self.setauthentication)
    self.auth_thread.started.connect(self.auth.run)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(Window, self).__init__()
    self.button = QtWidgets.QPushButton('Test', self)
    self.button.clicked.connect(self.handleButton)
    self.edit = QtWidgets.QLineEdit(self)
    self.edit.setReadOnly(True)
    layout = QtWidgets.QVBoxLayout(self)
    layout.addWidget(self.edit)
    layout.addWidget(self.button)
    self.thread = QtCore.QThread()
    self.worker = Worker()
    self.worker.moveToThread(self.thread)
    self.worker.finished.connect(self.handleFinished)
    self.thread.started.connect(self.worker.run)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46561822_46561919_3_10
46561822_46561994_2_10
Title: How to check at function call if default keyword arguments are used 
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    self.classparam = dict(a = 0, b = 1)
    for key, value in self.classparam.iteritems() :
    INDENT
        if not key in kwargs :
        INDENT
            print "Warning: default {0}={1} is used.".format(key, value)
        DEDENT
        kwargs.setdefault(key, value)
    DEDENT
    self.classparam.update(kwargs)
DEDENT
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    defaults = dict(a = 0, b = 1)
    for key, val in defaults.items() :
    INDENT
        if key not in kwargs :
        INDENT
            print ("warning: default {}={} is used.".format(key, val))
        DEDENT
        kwargs [key] = val
    DEDENT
    self.initialize(** kwargs)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46561967_46562319_10_25
46561967_46562319_112_122
Title: Tkinter password checker (switching frames)) 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (loginPage, signupPage, mainMenu) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(loginPage)
DEDENT
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)
    label = tk.Label(self, text = "Main Menu", bg = Background, font = ("Verdana", 18))
    label.pack(pady = 10, padx = 10)
    button1 = tk.Button(self, text = "Back to Home",
        command = lambda : controller.show_frame(loginPage))
    button1.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46561967_46562319_10_25
46561967_46562319_32_56
Title: Tkinter password checker (switching frames)) 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (loginPage, signupPage, mainMenu) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(loginPage)
DEDENT
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)
    self.title_1 = tk.Label(self, text = "Room Booker 1.1", bg = Background, font = ("Verdana", 18))
    self.title_1.place(x = 500, y = 150)
    self.label_1 = tk.Label(self, text = "Username:", bg = Background, font = ("Verdana", 12))
    self.label_1.place(x = 500, y = 200)
    self.entry_1 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_1.place(x = 600, y = 203)
    self.label_2 = tk.Label(self, text = "Password:", bg = Background, font = ("Verdana", 12))
    self.label_2.place(x = 500, y = 250)
    self.entry_2 = tk.Entry(self, show = "*", bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_2.place(x = 600, y = 253)
    self.logbtn = tk.Button(self, text = "Login", command = self._password_check, font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.logbtn.place(x = 600, y = 293)
    self.button = tk.Button(self, text = "Signup Now", command = lambda : controller.show_frame(signupPage), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.button.place(x = 600, y = 333)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46561967_46562319_10_25
46561967_46562319_73_110
Title: Tkinter password checker (switching frames)) 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    for F in (loginPage, signupPage, mainMenu) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(loginPage)
DEDENT
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)

    self.title_1 = tk.Label(self, text = "Signup", bg = Background, font = ("Verdana", 18))
    self.title_1.place(x = 500, y = 150)
    self.title_1 = tk.Label(self, text = "Please enter a new username and password", bg = Background, font = ("Verdana", 8))
    self.title_1.place(x = 500, y = 185)
    self.label_1 = tk.Label(self, text = "Email:", bg = Background, font = ("Verdana", 12))
    self.label_1.place(x = 500, y = 200)
    self.entry_1 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_1.place(x = 600, y = 203)
    self.label_2 = tk.Label(self, text = "Username:", bg = Background, font = ("Verdana", 12))
    self.label_2.place(x = 500, y = 250)
    self.entry_2 = tk.Entry(self, show = "*", bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_2.place(x = 600, y = 253)
    self.label_3 = tk.Label(self, text = "Password:", bg = Background, font = ("Verdana", 12))
    self.label_3.place(x = 500, y = 300)
    self.entry_3 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_3.place(x = 600, y = 303)
    self.logbtn = tk.Button(self, text = "Signup", command = lambda : controller.show_frame(mainMenu), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.logbtn.place(x = 600, y = 343)
    self.button = tk.Button(self, text = "Return to Login", command = lambda : controller.show_frame(loginPage), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.button.place(x = 600, y = 383)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46561967_46562319_112_122
46561967_46562319_32_56
Title: Tkinter password checker (switching frames)) 
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)
    label = tk.Label(self, text = "Main Menu", bg = Background, font = ("Verdana", 18))
    label.pack(pady = 10, padx = 10)
    button1 = tk.Button(self, text = "Back to Home",
        command = lambda : controller.show_frame(loginPage))
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)
    self.title_1 = tk.Label(self, text = "Room Booker 1.1", bg = Background, font = ("Verdana", 18))
    self.title_1.place(x = 500, y = 150)
    self.label_1 = tk.Label(self, text = "Username:", bg = Background, font = ("Verdana", 12))
    self.label_1.place(x = 500, y = 200)
    self.entry_1 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_1.place(x = 600, y = 203)
    self.label_2 = tk.Label(self, text = "Password:", bg = Background, font = ("Verdana", 12))
    self.label_2.place(x = 500, y = 250)
    self.entry_2 = tk.Entry(self, show = "*", bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_2.place(x = 600, y = 253)
    self.logbtn = tk.Button(self, text = "Login", command = self._password_check, font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.logbtn.place(x = 600, y = 293)
    self.button = tk.Button(self, text = "Signup Now", command = lambda : controller.show_frame(signupPage), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.button.place(x = 600, y = 333)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46561967_46562319_112_122
46561967_46562319_73_110
Title: Tkinter password checker (switching frames)) 
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)
    label = tk.Label(self, text = "Main Menu", bg = Background, font = ("Verdana", 18))
    label.pack(pady = 10, padx = 10)
    button1 = tk.Button(self, text = "Back to Home",
        command = lambda : controller.show_frame(loginPage))
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)

    self.title_1 = tk.Label(self, text = "Signup", bg = Background, font = ("Verdana", 18))
    self.title_1.place(x = 500, y = 150)
    self.title_1 = tk.Label(self, text = "Please enter a new username and password", bg = Background, font = ("Verdana", 8))
    self.title_1.place(x = 500, y = 185)
    self.label_1 = tk.Label(self, text = "Email:", bg = Background, font = ("Verdana", 12))
    self.label_1.place(x = 500, y = 200)
    self.entry_1 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_1.place(x = 600, y = 203)
    self.label_2 = tk.Label(self, text = "Username:", bg = Background, font = ("Verdana", 12))
    self.label_2.place(x = 500, y = 250)
    self.entry_2 = tk.Entry(self, show = "*", bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_2.place(x = 600, y = 253)
    self.label_3 = tk.Label(self, text = "Password:", bg = Background, font = ("Verdana", 12))
    self.label_3.place(x = 500, y = 300)
    self.entry_3 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_3.place(x = 600, y = 303)
    self.logbtn = tk.Button(self, text = "Signup", command = lambda : controller.show_frame(mainMenu), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.logbtn.place(x = 600, y = 343)
    self.button = tk.Button(self, text = "Return to Login", command = lambda : controller.show_frame(loginPage), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.button.place(x = 600, y = 383)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46561967_46562319_32_56
46561967_46562319_73_110
Title: Tkinter password checker (switching frames)) 
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)
    self.title_1 = tk.Label(self, text = "Room Booker 1.1", bg = Background, font = ("Verdana", 18))
    self.title_1.place(x = 500, y = 150)
    self.label_1 = tk.Label(self, text = "Username:", bg = Background, font = ("Verdana", 12))
    self.label_1.place(x = 500, y = 200)
    self.entry_1 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_1.place(x = 600, y = 203)
    self.label_2 = tk.Label(self, text = "Password:", bg = Background, font = ("Verdana", 12))
    self.label_2.place(x = 500, y = 250)
    self.entry_2 = tk.Entry(self, show = "*", bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_2.place(x = 600, y = 253)
    self.logbtn = tk.Button(self, text = "Login", command = self._password_check, font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.logbtn.place(x = 600, y = 293)
    self.button = tk.Button(self, text = "Signup Now", command = lambda : controller.show_frame(signupPage), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.button.place(x = 600, y = 333)

DEDENT
----------------------------------------

def __init__(self, master, controller) :
INDENT
    tk.Frame.__init__(self, master)

    self.title_1 = tk.Label(self, text = "Signup", bg = Background, font = ("Verdana", 18))
    self.title_1.place(x = 500, y = 150)
    self.title_1 = tk.Label(self, text = "Please enter a new username and password", bg = Background, font = ("Verdana", 8))
    self.title_1.place(x = 500, y = 185)
    self.label_1 = tk.Label(self, text = "Email:", bg = Background, font = ("Verdana", 12))
    self.label_1.place(x = 500, y = 200)
    self.entry_1 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_1.place(x = 600, y = 203)
    self.label_2 = tk.Label(self, text = "Username:", bg = Background, font = ("Verdana", 12))
    self.label_2.place(x = 500, y = 250)
    self.entry_2 = tk.Entry(self, show = "*", bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_2.place(x = 600, y = 253)
    self.label_3 = tk.Label(self, text = "Password:", bg = Background, font = ("Verdana", 12))
    self.label_3.place(x = 500, y = 300)
    self.entry_3 = tk.Entry(self, bg = '#abb5c6', font = ("Verdana", 10))
    self.entry_3.place(x = 600, y = 303)
    self.logbtn = tk.Button(self, text = "Signup", command = lambda : controller.show_frame(mainMenu), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.logbtn.place(x = 600, y = 343)
    self.button = tk.Button(self, text = "Return to Login", command = lambda : controller.show_frame(loginPage), font = ("Verdana", 10), width = 14, relief = GROOVE)
    self.button.place(x = 600, y = 383)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46570906_46570907_3_11
46570906_46577438_17_23
Title: Apply SAS Permissions on Azure Blob Storage Container in Python 
----------------------------------------

def AccessTest() :
INDENT
    accountName = "Account Name"
    containerName = "Container Name"
    sasToken = "sv=2016-05-31&sr=c&sig=BhhYbf3............................-10-02T15%3A28%3A59Z&sp=racwdl"
    blobService = BlockBlobService(account_name = accountName, account_key = None, sas_token = sasToken)
    for blob in blobService.list_blobs(containerName) :
    INDENT
        print blob.__getattribute__('name')
    DEDENT
DEDENT
----------------------------------------

def AccessTest(sastoken) :
INDENT
    blobService = BlockBlobService(account_name = accountName, account_key = None, sas_token = sastoken)
    BlockBlobService
    for blob in blobService.list_blobs(containerName) :
    INDENT
        print blob.__getattribute__('name')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46571448_53394551_128_137
46571448_53394551_246_293
Title: Tkinter and a html file 
----------------------------------------

def __init__(self, master, navigation_bar = None) :
INDENT
    self.navigation_bar = navigation_bar
    self.closing = False
    self.browser = None
    tk.Frame.__init__(self, master)
    self.bind("<FocusIn>", self.on_focus_in)
    self.bind("<FocusOut>", self.on_focus_out)
    self.bind("<Configure>", self.on_configure)
    self.focus_set()
DEDENT
----------------------------------------

def __init__(self, master) :
INDENT
    self.back_state = tk.NONE
    self.forward_state = tk.NONE
    self.back_image = None
    self.forward_image = None
    self.reload_image = None
    tk.Frame.__init__(self, master)
    resources = os.path.join(os.path.dirname(__file__), "resources")

    back_png = os.path.join(resources, "back" + IMAGE_EXT)
    if os.path.exists(back_png) :
    INDENT
        self.back_image = tk.PhotoImage(file = back_png)
    DEDENT
    self.back_button = tk.Button(self, image = self.back_image,
        command = self.go_back)
    self.back_button.grid(row = 0, column = 0)

    forward_png = os.path.join(resources, "forward" + IMAGE_EXT)
    if os.path.exists(forward_png) :
    INDENT
        self.forward_image = tk.PhotoImage(file = forward_png)
    DEDENT
    self.forward_button = tk.Button(self, image = self.forward_image,
        command = self.go_forward)
    self.forward_button.grid(row = 0, column = 1)

    reload_png = os.path.join(resources, "reload" + IMAGE_EXT)
    if os.path.exists(reload_png) :
    INDENT
        self.reload_image = tk.PhotoImage(file = reload_png)
    DEDENT
    self.reload_button = tk.Button(self, image = self.reload_image,
        command = self.reload)
    self.reload_button.grid(row = 0, column = 2)

    self.url_entry = tk.Entry(self)
    self.url_entry.bind("<FocusIn>", self.on_url_focus_in)
    self.url_entry.bind("<FocusOut>", self.on_url_focus_out)
    self.url_entry.bind("<Return>", self.on_load_url)
    self.url_entry.bind("<Button-1>", self.on_button1)
    self.url_entry.grid(row = 0, column = 3,
        sticky = (tk.N + tk.S + tk.E + tk.W))
    tk.Grid.rowconfigure(self, 0, weight = 100)
    tk.Grid.columnconfigure(self, 3, weight = 100)

    self.update_state()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46571448_53394551_128_137
46571448_53394551_46_81
Title: Tkinter and a html file 
----------------------------------------

def __init__(self, master, navigation_bar = None) :
INDENT
    self.navigation_bar = navigation_bar
    self.closing = False
    self.browser = None
    tk.Frame.__init__(self, master)
    self.bind("<FocusIn>", self.on_focus_in)
    self.bind("<FocusOut>", self.on_focus_out)
    self.bind("<Configure>", self.on_configure)
    self.focus_set()
DEDENT
----------------------------------------

def __init__(self, root) :
INDENT
    self.browser_frame = None
    self.navigation_bar = None

    root.geometry("900x640")
    tk.Grid.rowconfigure(root, 0, weight = 1)
    tk.Grid.columnconfigure(root, 0, weight = 1)

    tk.Frame.__init__(self, root)
    self.master.title("Tkinter example")
    self.master.protocol("WM_DELETE_WINDOW", self.on_close)
    self.master.bind("<Configure>", self.on_root_configure)
    self.setup_icon()
    self.bind("<Configure>", self.on_configure)
    self.bind("<FocusIn>", self.on_focus_in)
    self.bind("<FocusOut>", self.on_focus_out)

    self.navigation_bar = NavigationBar(self)
    self.navigation_bar.grid(row = 0, column = 0,
        sticky = (tk.N + tk.S + tk.E + tk.W))
    tk.Grid.rowconfigure(self, 0, weight = 0)
    tk.Grid.columnconfigure(self, 0, weight = 0)

    self.browser_frame = BrowserFrame(self, self.navigation_bar)
    self.browser_frame.grid(row = 1, column = 0,
        sticky = (tk.N + tk.S + tk.E + tk.W))
    tk.Grid.rowconfigure(self, 1, weight = 1)
    tk.Grid.columnconfigure(self, 0, weight = 1)

    self.pack(fill = tk.BOTH, expand = tk.YES)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46571448_53394551_246_293
46571448_53394551_46_81
Title: Tkinter and a html file 
----------------------------------------

def __init__(self, master) :
INDENT
    self.back_state = tk.NONE
    self.forward_state = tk.NONE
    self.back_image = None
    self.forward_image = None
    self.reload_image = None
    tk.Frame.__init__(self, master)
    resources = os.path.join(os.path.dirname(__file__), "resources")

    back_png = os.path.join(resources, "back" + IMAGE_EXT)
    if os.path.exists(back_png) :
    INDENT
        self.back_image = tk.PhotoImage(file = back_png)
    DEDENT
    self.back_button = tk.Button(self, image = self.back_image,
        command = self.go_back)
    self.back_button.grid(row = 0, column = 0)

    forward_png = os.path.join(resources, "forward" + IMAGE_EXT)
    if os.path.exists(forward_png) :
    INDENT
        self.forward_image = tk.PhotoImage(file = forward_png)
    DEDENT
    self.forward_button = tk.Button(self, image = self.forward_image,
        command = self.go_forward)
    self.forward_button.grid(row = 0, column = 1)

    reload_png = os.path.join(resources, "reload" + IMAGE_EXT)
    if os.path.exists(reload_png) :
    INDENT
        self.reload_image = tk.PhotoImage(file = reload_png)
    DEDENT
    self.reload_button = tk.Button(self, image = self.reload_image,
        command = self.reload)
    self.reload_button.grid(row = 0, column = 2)

    self.url_entry = tk.Entry(self)
    self.url_entry.bind("<FocusIn>", self.on_url_focus_in)
    self.url_entry.bind("<FocusOut>", self.on_url_focus_out)
    self.url_entry.bind("<Return>", self.on_load_url)
    self.url_entry.bind("<Button-1>", self.on_button1)
    self.url_entry.grid(row = 0, column = 3,
        sticky = (tk.N + tk.S + tk.E + tk.W))
    tk.Grid.rowconfigure(self, 0, weight = 100)
    tk.Grid.columnconfigure(self, 3, weight = 100)

    self.update_state()
DEDENT
----------------------------------------

def __init__(self, root) :
INDENT
    self.browser_frame = None
    self.navigation_bar = None

    root.geometry("900x640")
    tk.Grid.rowconfigure(root, 0, weight = 1)
    tk.Grid.columnconfigure(root, 0, weight = 1)

    tk.Frame.__init__(self, root)
    self.master.title("Tkinter example")
    self.master.protocol("WM_DELETE_WINDOW", self.on_close)
    self.master.bind("<Configure>", self.on_root_configure)
    self.setup_icon()
    self.bind("<Configure>", self.on_configure)
    self.bind("<FocusIn>", self.on_focus_in)
    self.bind("<FocusOut>", self.on_focus_out)

    self.navigation_bar = NavigationBar(self)
    self.navigation_bar.grid(row = 0, column = 0,
        sticky = (tk.N + tk.S + tk.E + tk.W))
    tk.Grid.rowconfigure(self, 0, weight = 0)
    tk.Grid.columnconfigure(self, 0, weight = 0)

    self.browser_frame = BrowserFrame(self, self.navigation_bar)
    self.browser_frame.grid(row = 1, column = 0,
        sticky = (tk.N + tk.S + tk.E + tk.W))
    tk.Grid.rowconfigure(self, 1, weight = 1)
    tk.Grid.columnconfigure(self, 0, weight = 1)

    self.pack(fill = tk.BOTH, expand = tk.YES)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46571543_46572349_8_18
46571543_47131465_1_11
Title: Scrapy Return Multiple Items 
----------------------------------------

def parse(self, response) :
INDENT
    for quote in response.xpath("//*[@class='quote']") :
    INDENT
        text = quote.xpath(".//span[@class='text']/text()").extract_first()
        author = quote.xpath(".//small[@class='author']/text()").extract_first()
        tags = quote.xpath(".//meta[@class='keywords']/@content").extract_first()
        yield {"Text" : text, "Author" : author, "Tags" : tags}
    DEDENT
    next_page = response.xpath(".//li[@class='next']/a/@href").extract_first()
    if next_page :
    INDENT
        next_page_url = response.urljoin(next_page)
        yield scrapy.Request(next_page_url)
    DEDENT
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    for selector in response.xpath("//*[@class='quote']") :
    INDENT
        l = ItemLoader(item = FirstSpiderItem(), selector = selector)
        l.add_xpath('text', './/span[@class="text"]/text()')
        l.add_xpath('author', '//small[@class="author"]/text()')
        l.add_xpath('tags', './/meta[@class="keywords"]/@content')
        yield l.load_item()
    DEDENT
    next_page = response.xpath(".//li[@class='next']/a/@href").extract_first()
    if next_page is not None :
    INDENT
        yield response.follow(next_page, callback = self.parse)
    DEDENT
DEDENT
----------------------------------------

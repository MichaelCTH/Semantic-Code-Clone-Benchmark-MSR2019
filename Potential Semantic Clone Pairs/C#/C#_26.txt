$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3844351_3847510_34_45
3844351_3847510_50_61
Title: Nhibernate Architecture - Generic Nhibernate Repository to serve many different types 
----------------------------------------

public void Update < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Update (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------

public void Delete < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Delete (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3844351_3847510_34_45
3844351_3847510_66_77
Title: Nhibernate Architecture - Generic Nhibernate Repository to serve many different types 
----------------------------------------

public void Update < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Update (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------

public T GetById < T > (Guid id) {
    Reconnect (_session);
    try {
        return _session.Get < T > (id);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3844351_3847510_50_61
3844351_3847510_66_77
Title: Nhibernate Architecture - Generic Nhibernate Repository to serve many different types 
----------------------------------------

public void Delete < T > (T entity) {
    Reconnect (_session);
    try {
        _session.Delete (entity);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------

public T GetById < T > (Guid id) {
    Reconnect (_session);
    try {
        return _session.Get < T > (id);
    }
    finally {
        Disconnect (_session);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38467146_38467724_1_13
38467146_38468111_1_38
Title: Checking straight sequences in arrays 
----------------------------------------

public static bool Seq_Check (int [] A, int k) {
    int n = A.Length;
    if (A [0] != 1 || A [n - 1] != k)
        return false;

    for (int i = 0; i < n - 1; i ++) {
        if (A [i] + 1 < A [i + 1])
            return false;

    }
    return true;
}
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38467146_38467724_1_13
38467146_38468966_18_47
Title: Checking straight sequences in arrays 
----------------------------------------

public static bool Seq_Check (int [] A, int k) {
    int n = A.Length;
    if (A [0] != 1 || A [n - 1] != k)
        return false;

    for (int i = 0; i < n - 1; i ++) {
        if (A [i] + 1 < A [i + 1])
            return false;

    }
    return true;
}
----------------------------------------

public static bool Seq_Check (int [] A, int k) {
    Array.Sort (A);
    int start = 1, end = k;
    if (A [0] != start)
        return false;

    int expected = start + 1;
    int currUnique = A [0];
    for (int i = 1; i < A.Length; i ++) {
        if (A [i] != A [i - 1]) {
            currUnique = A [i];
            if (currUnique != expected || expected > end)
                return false;

            expected ++;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38467146_38468111_1_38
38467146_38468966_18_47
Title: Checking straight sequences in arrays 
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

public static bool Seq_Check (int [] A, int k) {
    Array.Sort (A);
    int start = 1, end = k;
    if (A [0] != start)
        return false;

    int expected = start + 1;
    int currUnique = A [0];
    for (int i = 1; i < A.Length; i ++) {
        if (A [i] != A [i - 1]) {
            currUnique = A [i];
            if (currUnique != expected || expected > end)
                return false;

            expected ++;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3848387_3849350_136_153
3848387_3849350_43_78
Title: c#: better threading architecture 
----------------------------------------

public static void Queue (string uniqueId, Action action, Action done, bool urgent, int delay) {
    Debug.Assert (uniqueId != null);
    Debug.Assert (action != null);
    Action workItem = () = > {
        try {
            action ();
        }
        catch (ThreadAbortException) {
        }
        catch (Exception ex) {
            Debug.Assert (false, "Async thread crashed! This must be fixed. " + ex.ToString ());
            Logger.ReportException ("Async thread crashed! This must be fixed. ", ex);
        }
        if (done != null)
            done ();

    };
    GetThreadPool (uniqueId).Queue (workItem, urgent, delay);
}
----------------------------------------

public void Queue (Action action, bool urgent, int delay) {
    if (delay > 0) {
        Timer t = null;
        t = new Timer (_ = > {
            Queue (action, urgent, 0);
            t.Dispose ();
        }, null, delay, Timeout.Infinite);
        return;
    }
    lock (threads)
    {
        if (maxThreads > threads.Count) {
            Thread t = new Thread (new ThreadStart (ThreadProc));
            t.IsBackground = true;
            t.Priority = ThreadPriority.Lowest;
            t.Name = "Worker thread for " + name;
            t.Start ();
            threads.Add (t);
        }
    } lock (actions)
    {
        if (urgent) {
            actions.Insert (0, action);
        } else {
            actions.Add (action);
        }
        Monitor.Pulse (actions);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
384918_384920_1_12
384918_384925_1_11
Title: How to circumvent using an out parameter in an anonymous method block? 
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

public bool TryGetValue (TKey key, out TValue value) {
    bool got = false;
    TValue tmp = default (TValue);
    WithReaderLock (delegate {
        got = dictionary.TryGetValue (key, out tmp);
    });
    value = tmp;
    return got;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38507906_38508329_1_21
38507906_38509851_1_20
Title: How can I include one expression in another expression? 
----------------------------------------

public IQueryable < T > Apply < T > (IQueryable < T > source, Expression < Func < T, DateTime > > dateField) {
    Expression predicate;
    if (BeginDate.HasValue) {
        if (BeginInclusive)
            predicate = Expression.GreaterThanOrEqual (dateField.Body, Expression.Constant (BeginDate, typeof (DateTime)));
        else
            predicate = Expression.GreaterThan (dateField.Body, Expression.Constant (BeginDate, typeof (DateTime)));

        source = source.Where (Expression.Lambda < Func < T, bool > > (predicate));
    }
    if (EndDate.HasValue) {
        if (EndInclusive)
            predicate = Expression.LessThanOrEqual (dateField.Body, Expression.Constant (EndDate, typeof (DateTime)));
        else
            predicate = Expression.LessThan (dateField.Body, Expression.Constant (EndDate, typeof (DateTime)));

        source = source.Where (Expression.Lambda < Func < T, bool > > (predicate));
    }
    return source;
}
----------------------------------------

public IQueryable < T > Apply < T > (IQueryable < T > source, Expression < Func < T, DateTime > > dateField) {
    var result = source;
    if (BeginDate.HasValue) {
        if (BeginInclusive)
            result = result.Where (dateField.Compose (date = > date >= BeginDate));
        else
            result = result.Where (dateField.Compose (date = > date > BeginDate));

    }
    if (EndDate.HasValue) {
        if (EndInclusive)
            result = result.Where (dateField.Compose (date = > date <= EndDate));
        else
            result = result.Where (dateField.Compose (date = > date < EndDate));

    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
385238_385372_79_92
385238_385375_3_19
Title: Using Objects across methods 
----------------------------------------

static int Main (string [] args) {
    Teacher john = new Teacher ("John Smith");
    Course cs101 = new Course ("Computer Science 101");
    john.Courses.Add (cs101);
    Student mark = new Student ("Mark Brackett");
    Student xesaniel = new Student ("Xesaniel");
    cs101.Students.Add (mark, new Grade (90));
    cs101.Students.Add (xesaniel, new Grade (95));
    Console.WriteLine (john.GetAverageCourseGrade ());
}
----------------------------------------

public static void Main (string [] args) {
    Teacher JohnSmith = new Teacher ("John Smith");
    Student Jim = new Student ("Jim", 100, JohnSmith);
    Student Sue = new Student ("Sue", 90, JohnSmith);
    Student Sally = new Student ("Sally", 70, JohnSmith);
    Student Robert = new Student ("Robert", 100, JohnSmith);
    Student JonSkeet = new Student ("Jon Skeet", 150, JohnSmith);
    JohnSmith.ComputeAverageGrade ();
    Console.WriteLine ("Course Average for " + JohnSmith.Name + " is " + JohnSmith.CourseAverage.ToString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38531156_38531346_1_36
38531156_38533720_1_31
Title: Returning Null values to access database through OleDb 
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    using (OleDbConnection Conn = new OleDbConnection (@"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=BoilerSvc_be.mdb"))
    {
        OleDbCommand command = new OleDbCommand ();
        command.CommandText = "INSERT INTO Contacts (Title,Initial,Surname,[Address 1],[Address 2],[Address 3],[Post Town],[Post Code],Telephone,Archived) VALUES (@Title,@FirstName,@LastName,@Address1,@Address2,@Address3,@PostTown,@PostCode,@Telephone,0)";
        command.Parameters.AddWithValue ("@FirstName", string.IsNullOrEmpty (FirstName.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@LastName", string.IsNullOrEmpty (LastName.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@Address1", string.IsNullOrEmpty (Address1.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@Address2", string.IsNullOrEmpty (Address2.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@Address3", string.IsNullOrEmpty (Address3.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@PostCode", string.IsNullOrEmpty (Postcode.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@PostTown", string.IsNullOrEmpty (TownCity.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@Telephone", string.IsNullOrEmpty (PhnNum.Text) ? DBNull.Value : title.Text);
        command.Parameters.AddWithValue ("@Title", string.IsNullOrEmpty (Titl.Text) ? DBNull.Value : title.Text);
        Conn.Open ();
        command.Connection = Conn;
        command.ExecuteNonQuery ();
    } FirstName.Text = null;
    LastName.Text = null;
    Address1.Text = null;
    Address2.Text = null;
    Address2.Text = null;
    Postcode.Text = null;
    TownCity.Text = null;
    Title.Text = null;
    PhnNum.Text = null;
    Address3.Text = null;
    MessageBox.Show ("Customer Added");
}
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    try {
        using (var Conn = new OleDbConnection (@"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=BoilerSvc_be.mdb"))
        {
            var command = new OleDbCommand ("INSERT INTO Contacts (" + "Title,   Initial,  Surname,[Address 1],[Address 2],[Address 3],[Post Town],[Post Code],Telephone,Archived)" + " VALUES (    ?,         ?,        ?,          ?,          ?,          ?,          ?,          ?,        ?,       0)", Conn);
            Control [] controls = {Titl, FirstName, LastName, Address1, Address2, Address3, TownCity, Postcode, PhnNum};
            foreach (var control in controls)
                command.Parameters.AddWithValue ("@" + control.Name, string.IsNullOrEmpty (control.Text) ? DBNull.Value : control.Text as object);

            Conn.Open ();
            if (command.ExecuteNonQuery () == 1) {
                MessageBox.Show ("Customer Added");
                foreach (var control in controls)
                    control.Text = "";

            } else
                MessageBox.Show ("Customer was not Added");

        }}
    catch (Exception ex) {
        MessageBox.Show ("Exception : " + ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3853495_3853505_1_23
3853495_3868154_1_16
Title: Download the first 1000 bytes 
----------------------------------------

string GetWebPageContent (string url) {
    string result = string.Empty;
    HttpWebRequest request;
    const int bytesToGet = 1000;
    request = WebRequest.Create (url) as HttpWebRequest;
    request.AddRange (0, bytesToGet - 1);
    using (WebResponse response = request.GetResponse ())
    {
        using (Stream stream = response.GetResponseStream ())
        {
            byte [] buffer = new byte [1024];
            int read = stream.Read (buffer, 0, 1000);
            Array.Resize (ref buffer, read);
            return Encoding.ASCII.GetString (buffer);
        }}}
----------------------------------------

string GetWebPageContent (string url) {
    HttpWebRequest request;
    const int bytesToGet = 1000;
    request = WebRequest.Create (url) as HttpWebRequest;
    var buffer = new char [bytesToGet];
    using (WebResponse response = request.GetResponse ())
    {
        using (StreamReader sr = new StreamReader (response.GetResponseStream ()))
        {
            sr.Read (buffer, 0, bytesToGet);
        }} return new string (buffer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3855956_24405838_21_46
3855956_3856090_6_19
Title: Check if an executable exists in the Windows path 
----------------------------------------

public static string GetFullPath (string exeName) {
    try {
        using (Process p = new Process ())
        {
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.FileName = "where";
            p.StartInfo.Arguments = exeName;
            p.StartInfo.RedirectStandardOutput = true;
            p.Start ();
            string output = p.StandardOutput.ReadToEnd ();
            p.WaitForExit ();
            if (p.ExitCode != 0)
                return null;

            return output.Substring (0, output.IndexOf (Environment.NewLine));
        }}
    catch (Win32Exception) {
        throw new Exception ("'where' command is not on path");
    }
}
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);

    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38559910_38560056_23_37
38559910_38560957_3_12
Title: how can function called from another class in C# 
----------------------------------------

public static void InsertRData (string EmailId) {
    SqlConnection con_Signup = new SqlConnection (ConfigurationManager.ConnectionStrings ["myconnectionstring"].ConnectionString);
    con_Signup.Open ();
    SqlCommand cmd_check = new SqlCommand ("Check_Existing_Email", con_Signup);
    cmd_check.CommandType = CommandType.StoredProcedure;
    cmd_check.Parameters.AddWithValue ("@mail", EmailId);
    object i = cmd_check.ExecuteScalar ();
    if (i != null) {
        lbforerror.Text = "This Email is already Registered";
        lbforerror.Visible = true;
    }
}
----------------------------------------

public object InsertRData (string EmailId) {
    SqlConnection con_Signup = new SqlConnection (ConfigurationManager.ConnectionStrings ["myconnectionstring"].ConnectionString);
    con_Signup.Open ();
    SqlCommand cmd_check = new SqlCommand ("Check_Existing_Email", con_Signup);
    cmd_check.CommandType = CommandType.StoredProcedure;
    cmd_check.Parameters.AddWithValue ("@mail", EmailId);
    object i = cmd_check.ExecuteScalar ();
    return i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38565746_38566185_7_19
38565746_38566276_1_23
Title: tap detection on a gameobject in unity 
----------------------------------------

void Update () {
    RaycastHit hit = new RaycastHit ();
    for (int i = 0; i < Input.touchCount; ++ i) {
        if (Input.GetTouch (i).phase.Equals (TouchPhase.Began)) {
            Ray ray = Camera.main.ScreenPointToRay (Input.GetTouch (i).position);
            if (Physics.Raycast (ray, out hit)) {
                hit.transform.gameObject.SendMessage ("OnMouseDown");
            }
        }
    }
}
----------------------------------------

void Update () {
    if ((Input.touchCount > 0) && (Input.GetTouch (0).phase == TouchPhase.Began)) {
        Ray raycast = Camera.main.ScreenPointToRay (Input.GetTouch (0).position);
        RaycastHit raycastHit;
        if (Physics.Raycast (raycast, out raycastHit)) {
            Debug.Log ("Something Hit");
            if (raycastHit.collider.name == "Soccer") {
                Debug.Log ("Soccer Ball clicked");
            }
            if (raycastHit.collider.CompareTag ("SoccerTag")) {
                Debug.Log ("Soccer Ball clicked");
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3863191_3863658_21_35
3863191_3863658_6_19
Title: loading binary data into a structure 
----------------------------------------

public bool Read < T > (Stream stream, ref T retval) {
    int size = Marshal.SizeOf (typeof (T));
    if (buffer == null || size > buffer.Length)
        buffer = new byte [size];

    int len = stream.Read (buffer, 0, size);
    if (len == 0)
        return false;

    if (len != size)
        throw new EndOfStreamException ();

    var handle = GCHandle.Alloc (buffer, GCHandleType.Pinned);
    try {
        retval = (T) Marshal.PtrToStructure (handle.AddrOfPinnedObject (), typeof (T));
    }
    finally {
        handle.Free ();
    }
    return true;
}
----------------------------------------

public static bool Read < T > (byte [] buffer, int index, ref T retval) {
    if (index == buffer.Length)
        return false;

    int size = Marshal.SizeOf (typeof (T));
    if (index + size > buffer.Length)
        throw new IndexOutOfRangeException ();

    var handle = GCHandle.Alloc (buffer, GCHandleType.Pinned);
    try {
        IntPtr addr = (IntPtr) ((long) handle.AddrOfPinnedObject () + index);
        retval = (T) Marshal.PtrToStructure (addr, typeof (T));
    }
    finally {
        handle.Free ();
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3864256_3864466_1_22
3864256_3864509_1_11
Title: Help with EnumMemberAttribute? 
----------------------------------------

private static T GetEnumValue < T > (string description) {
    FieldInfo [] ms = typeof (T).GetFields (BindingFlags.Public | BindingFlags.Static);
    foreach (FieldInfo field in ms) {
        var descriptionAttribute = field.GetCustomAttributes (typeof (DescriptionAttribute), true).FirstOrDefault ();
        if (descriptionAttribute != null && (descriptionAttribute as DescriptionAttribute).Description.Equals (description, StringComparison.OrdinalIgnoreCase)) {
            return (T) field.GetValue (null);
        }
    }
    return default (T);
}
----------------------------------------

public T Parse < T > (string description) {
    foreach (FieldInfo field in typeof (T).GetFields ()) {
        object [] attributes = field.GetCustomAttributes (typeof (DescriptionAttribute), false);
        if ((attributes.Length > 0) && ((DescriptionAttribute) attributes [0]).Description.Equals (description))
            return (T) field.GetRawConstantValue ();

    }
    return (T) Enum.Parse (typeof (T), description);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38648241_38648924_1_17
38648241_38648924_21_40
Title: Running the same method multiple times with different parameters in c# 
----------------------------------------

List < ApiObject > GetObjects () {
    const int ITERATION_COUNT = 100;
    int objectsCount = GetAPICount ();
    var ApiObjects = new List < ApiObject > ();
    for (int i = 0; i < objectsCount; i += ITERATION_COUNT) {
        var apiObjects = callToAPI (i, ITERATION_COUNT);
        ApiObjects.AddRange (apiObjects);
    }
    return ApiObjects;
}
----------------------------------------

List < ApiObject > GetObjects () {
    var nextObject = null;
    var ApiObjects = new List < ApiObject > ();
    var apiObjects = callToAPI (null);
    ApiObjects.AddRange (apiObjects);
    nextObject = callResponse.nextObject;
    while (nextObject != null) {
        var apiObjects = callToAPI (null);
        ApiObjects.AddRange (apiObjects);
        nextObject = callResponse.nextObject;
    }
    return apiObjects;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38660909_38661336_1_13
38660909_38661880_1_27
Title: C# income tax calculator 
----------------------------------------

private decimal CalculateTax (int salary) {
    int noTaxThreshold = 11000;
    int band1 = 10999;
    int band2 = 43000;
    int band3 = 150000;
    if (salary < noTaxThreshold)
        return 0;

    if (salary >= band3)
        return (salary - noTaxThreshold) * (decimal) 0.45;

    if (salary > band2)
        return (salary - noTaxThreshold) * (decimal) 0.40;

    if (salary > band1)
        return (salary - noTaxThreshold) * (decimal) 0.20;

    return 0;
}
----------------------------------------

public decimal CalculateTax (decimal salary) {
    const int topRateThreshold = 150000;
    const int higherRateThreshold = 43000;
    const int basicRateThreshold = 11000;
    const decimal topRateFactor = 0.45M;
    const decimal higherRateFactor = 0.40M;
    const decimal basicRateFactor = 0.20M;
    decimal salaryWorkingRange = salary;
    decimal taxDue = 0;
    if (salaryWorkingRange > topRateThreshold) {
        taxDue += (salaryWorkingRange - topRateThreshold) * topRateFactor;
        salaryWorkingRange = topRateThreshold;
    }
    if (salaryWorkingRange > higherRateThreshold) {
        taxDue += (salaryWorkingRange - higherRateThreshold) * higherRateFactor;
        salaryWorkingRange = higherRateThreshold;
    }
    if (salaryWorkingRange > basicRateThreshold) {
        taxDue += (salaryWorkingRange - basicRateThreshold) * basicRateFactor;
    }
    return taxDue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38679827_38680764_1_64
38679827_38682447_50_89
Title: "Bitmap to int[] conversion and vice versa" 
----------------------------------------

public static Bitmap ToBitmap (int [,] image) {
    int width = image.GetLength (0);
    int height = image.GetLength (1);
    Bitmap bitmap = new Bitmap (width, height, PixelFormat.Format8bppIndexed);
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, width, height), ImageLockMode.WriteOnly, PixelFormat.Format8bppIndexed);
    int stride = bitmapData.Stride;
    Dictionary < int, int > palette = new Dictionary < int, int > ();
    List < Color > paletteList = new List < Color > ();
    unsafe {
        byte * address = (byte *) bitmapData.Scan0;
        for (int x = 0; x < width; x ++) {
            for (int y = 0; y < height; y ++) {
                int color = image [x, y];
                if (! palette.ContainsKey (color)) {
                    palette.Add (color, palette.Count);
                    paletteList.Add (Color.FromArgb (color));
                    if (palette.Count >= 256) {
                        throw new InvalidOperationException ("Too many colors in image");
                    }
                }
                address [stride * y + x] = (byte) palette [color];
            }
        }
    } bitmap.UnlockBits (bitmapData);
    var newPalette = bitmap.Palette;
    for (int i = 0; i < paletteList.Count; i ++) {
        newPalette.Entries [i] = paletteList [i];
    }
    bitmap.Palette = newPalette;
    return bitmap;
}
----------------------------------------

public static Bitmap ToBitmap (int [,] image) {
    int Width = image.GetLength (0);
    int Height = image.GetLength (1);
    int i, j;
    Bitmap bitmap = new Bitmap (Width, Height, PixelFormat.Format8bppIndexed);
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, Width, Height), ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
    int bytesPerPixel = sizeof (byte);
    unsafe {
        byte * address = (byte *) bitmapData.Scan0;
        for (i = 0; i < bitmapData.Height; i ++) {
            for (j = 0; j < bitmapData.Width; j ++) {
                byte [] bytes = BitConverter.GetBytes (image [j, i]);
                for (int k = 0; k < bytesPerPixel; k ++) {
                    address [k] = bytes [k];
                }
                address += bytesPerPixel;
            }
            address += (bitmapData.Stride - (bitmapData.Width * bytesPerPixel));
        }
    } bitmap.UnlockBits (bitmapData);
    Grayscale.SetGrayscalePalette (bitmap);
    return bitmap;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38679827_38680764_66_103
38679827_38682447_1_48
Title: "Bitmap to int[] conversion and vice versa" 
----------------------------------------

public static int [,] ToInteger (Bitmap bitmap) {
    if (bitmap.Palette.Entries.Length == 0) {
        throw new InvalidOperationException ("bitmap is not an indexed bitmap");
    }
    int width = bitmap.Width;
    int height = bitmap.Height;
    int [,] array2D = new int [width, height];
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, width, height), ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
    unsafe {
        int stride = bitmapData.Stride;
        byte * address = (byte *) bitmapData.Scan0;
        for (int x = 0; x < width; x ++) {
            for (int y = 0; y < height; y ++) {
                array2D [x, y] = bitmap.Palette.Entries [address [stride * y + x]].ToArgb ();
            }
        }
    } bitmap.UnlockBits (bitmapData);
    return array2D;
}
----------------------------------------

public static int [,] ToInteger (Bitmap bitmap) {
    int [,] array2D = new int [bitmap.Width, bitmap.Height];
    BitmapData bitmapData = bitmap.LockBits (new Rectangle (0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);
    int bytesPerPixel = sizeof (byte);
    unsafe {
        byte * address = (byte *) bitmapData.Scan0;
        int paddingOffset = bitmapData.Stride - (bitmap.Width * bytesPerPixel);
        for (int i = 0; i < bitmap.Width; i ++) {
            for (int j = 0; j < bitmap.Height; j ++) {
                byte [] temp = new byte [bytesPerPixel];
                for (int k = 0; k < bytesPerPixel; k ++) {
                    temp [k] = address [k];
                }
                int iii = 0;
                if (bytesPerPixel >= sizeof (int)) {
                    iii = BitConverter.ToInt32 (temp, 0);
                } else {
                    iii = (int) temp [0];
                }
                array2D [j, i] = iii;
                address += bytesPerPixel;
            }
            address += paddingOffset;
        }
    } bitmap.UnlockBits (bitmapData);
    return array2D;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3870091_3873462_1_13
3870091_3874717_1_14
Title: Entity Framework/Linq to SQL: Skip & Take 
----------------------------------------

public IEnumerable < Store > ListStores (Func < Store, string > sort, bool desc, int page, int pageSize, out int totalRecords) {
    var context = new TectonicEntities ();
    var results = context.Stores;
    totalRecords = results.Count ();
    int skipRows = (page - 1) * pageSize;
    if (desc)
        results = results.OrderByDescending (sort);

    return results.Skip (skipRows).Take (pageSize).ToList ();
}
----------------------------------------

public IEnumerable < Store > ListStores (Expression < Func < Store, string > > sort, bool desc, int page, int pageSize, out int totalRecords) {
    List < Store > stores = new List < Store > ();
    using (var context = new TectonicEntities ())
    {
        totalRecords = context.Stores.Count ();
        int skipRows = (page - 1) * pageSize;
        if (desc)
            stores = context.Stores.OrderByDescending (sort).Skip (skipRows).Take (pageSize).ToList ();
        else
            stores = context.Stores.OrderBy (sort).Skip (skipRows).Take (pageSize).ToList ();

    } return stores;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3871413_3871717_1_24
3871413_3872243_1_17
Title: LINQ: take a sequence of elements from a collection 
----------------------------------------

public static void Batch < T > (this IEnumerable < T > items, int batchSize, Action < IEnumerable < T > > batchAction) {
    if (batchSize < 1)
        throw new ArgumentException ();

    List < T > buffer = new List < T > ();
    using (var enumerator = (items ?? Enumerable.Empty < T > ()).GetEnumerator ())
    {
        while (enumerator.MoveNext ()) {
            buffer.Add (enumerator.Current);
            if (buffer.Count == batchSize) {
                batchAction (buffer);
                buffer.Clear ();
            }
        }
        if (buffer.Count > 0) {
            batchAction (buffer);
        }
    }}
----------------------------------------

public static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int i = 0;
    List < T > list = new List < T > (size);
    foreach (T item in source) {
        list.Add (item);
        if (++ i == size) {
            yield return list;
            list = new List < T > (size);
            i = 0;
        }
    }
    if (list.Count > 0)
        yield return list;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38759219_38759255_1_15
38759219_38759677_1_15
Title: Click event for dynamically created array of PictureBox's in C# 
----------------------------------------

public void launchMovie (PictureBox [] pics, string [] vidFilePaths) {
    for (int i = 0; i < p - 1; i ++) {
        pics [i].Tag = vidFilePaths [i];
        pics [i].Click += (sender, EventArgs) = > {
            int index = selectedFilePath = "file:///" + pics [i].Tag.ToString ();
            Form2 f2 = new Form2 (selectedFilePath);
            this.Hide ();
            f2.Show ();
        };
    }
}
----------------------------------------

public void launchMovie (PictureBox [] pics, string [] vidFilePaths) {
    int i = 0;
    for (i = 0; i < p - 1; i ++) {
        pics [i].Tag = i;
        pics [i].Click += (sender, EventArgs) = > {
            int k = Convert.ToInt32 ((sender as PictureBox).Tag);
            Form2 f2 = new Form2 ("file:///" + vidFilePaths [k]);
            this.Hide ();
            f2.Show ();
        };
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38774057_38774387_1_14
38774057_38774645_3_29
Title: Get multiline string of textfile within block of two string using regular expression C# 
----------------------------------------

void Main () {
    string search = @"(?<=initTest)(.|\n)*?(?=endTest)";
    string text = GetData ();
    MatchCollection matches = Regex.Matches (text, search, RegexOptions.Singleline | RegexOptions.IgnoreCase);
    Console.WriteLine ("there were {0} matches for '{1}'", matches.Count, search);
    for (int i = 0; i < matches.Count; i ++)
        Console.WriteLine (matches [i].Groups [0].ToString ());

    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    string path = @"C:\Projects\StackOverRegX\StackOverRegX\input.txt";
    string [] x = new string [100];
    int index = 0;
    if (File.Exists (path)) {
        using (StreamReader sr = File.OpenText (path))
        {
            string s = "";
            while ((s = sr.ReadLine ()) != null) {
                if (s.Contains ("initTest")) {
                    x [index] = sr.ReadLine () + " \n " + sr.ReadLine ();
                    index ++;
                }
            }
        }}
    for (int i = 0; i < 100; i ++) {
        if (x [i] != null)
            Console.WriteLine (x [i]);

    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3877706_3877738_1_13
3877706_3877747_1_22
Title: Generic string to enum conversion 
----------------------------------------

private T Str2enum < T > (string str) where T : struct {
    try {
        T res = (T) Enum.Parse (typeof (T), str);
        if (! Enum.IsDefined (typeof (T), res))
            return default (T);

        return res;
    }
    catch {
        return default (T);
    }
}
----------------------------------------

public static bool EnumTryParse < E > (string enumVal, out E resOut) where E : struct {
    var enumValFxd = enumVal.Replace (' ', '_');
    if (Enum.IsDefined (typeof (E), enumValFxd)) {
        resOut = (E) Enum.Parse (typeof (E), enumValFxd, true);
        return true;
    }
    foreach (var value in Enum.GetNames (typeof (E)).Where (value = > value.Equals (enumValFxd, StringComparison.OrdinalIgnoreCase))) {
        resOut = (E) Enum.Parse (typeof (E), value);
        return true;
    }
    resOut = default (E);
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3879011_25907963_16_61
3879011_29402327_1_18
Title: Entity Framework/SQL2008 - How to Automatically Update LastModified fields for Entities? 
----------------------------------------

public override int SaveChanges () {
    ObjectContext context = ((IObjectContextAdapter) this).ObjectContext;
    foreach (ObjectStateEntry entry in (context.ObjectStateManager.GetObjectStateEntries (EntityState.Added | EntityState.Modified))) {
        if (! entry.IsRelationship) {
            CurrentValueRecord entryValues = entry.CurrentValues;
            if (entryValues.GetOrdinal ("ModifiedBy") > 0) {
                HttpContext currentContext = HttpContext.Current;
                string userId = "nazrul";
                DateTime now = DateTime.Now;
                if (currContext.User.Identity.IsAuthenticated) {
                    if (currentContext.Session ["userId"] != null) {
                        userId = (string) currentContext.Session ["userId"];
                    } else {
                        userId = UserAuthentication.GetUserId (currentContext.User.Identity.UserCode);
                    }
                }
                if (entry.State == EntityState.Modified) {
                    entryValues.SetString (entryValues.GetOrdinal ("ModifiedBy"), userId);
                    entryValues.SetDateTime (entryValues.GetOrdinal ("ModifiedDate"), now);
                }
                if (entry.State == EntityState.Added) {
                    entryValues.SetString (entryValues.GetOrdinal ("CreatedBy"), userId);
                    entryValues.SetDateTime (entryValues.GetOrdinal ("CreatedDate"), now);
                }
            }
        }
    }
    return base.SaveChanges ();
}
----------------------------------------

public override int SaveChanges () {
    var objectStateEntries = ChangeTracker.Entries ().Where (e = > e.Entity is TrackedEntityBase && (e.State == EntityState.Modified || e.State == EntityState.Added)).ToList ();
    var currentTime = DateTime.UtcNow;
    foreach (var entry in objectStateEntries) {
        var entityBase = entry.Entity as TrackedEntityBase;
        if (entityBase == null)
            continue;

        if (entry.State == EntityState.Added) {
            entityBase.CreatedDate = currentTime;
        }
        entityBase.LastModifiedDate = currentTime;
    }
    return base.SaveChanges ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38790554_38791925_19_28
38790554_38819561_13_63
Title: Deserializing JSON into generic where collection property name changes based on type 
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    Dictionary < string, object > data = (Dictionary < string, object >) serializer.Deserialize (reader, typeof (Dictionary < string, object >));
    foreach (KeyValuePair < string, object > kvp in data) {
        if (kvp.Key != "total_count") {
            return ((JToken) kvp.Value).ToObject (objectType);
        }
    }
    return null;
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (reader.TokenType == JsonToken.Null)
        return null;

    try {
        int defaultCount = 0;
        var contract = (JsonObjectContract) serializer.ContractResolver.ResolveContract (objectType);
        if (existingValue == null)
            existingValue = contract.DefaultCreator ();

        while (reader.Read ()) {
            switch (reader.TokenType) {
                case JsonToken.Comment :
                    break;
                case JsonToken.PropertyName :
                    {
                        var name = reader.Value.ToString ();
                        var property = contract.Properties.GetClosestMatchProperty (name);
                        if (! reader.Read ())
                            throw new JsonSerializationException (string.Format ("Missing value at path: {0}", reader.Path));

                        if (property == null) {
                            property = contract.Properties.Where (p = > p.AttributeProvider.GetAttributes (true).OfType < JsonAnyPropertyNameAttribute > ().Any ()).Single ();
                            defaultCount ++;
                            if (defaultCount > 1) {
                                throw new JsonSerializationException (string.Format ("Too many properties with unknown names for type {0} at path {1}", objectType, reader.Path));
                            }
                        }
                        var value = serializer.Deserialize (reader, property.PropertyType);
                        property.ValueProvider.SetValue (existingValue, value);
                    } break;
                case JsonToken.EndObject :
                    return existingValue;
                default :
                    throw new JsonSerializationException (string.Format ("Unknown token {0} at path: {1} ", reader.TokenType, reader.Path));
            }
        }
        throw new JsonSerializationException (string.Format ("Unclosed object at path: {0}", reader.Path));
    }
    catch (Exception ex) {
        if (ex is JsonException)
            throw;

        throw new JsonSerializationException (string.Format ("Error deserializing type {0} at path {1}", objectType, reader.Path), ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38818868_38818903_4_18
38818868_38826928_1_17
Title: Multithreading search in an XML file 
----------------------------------------

static void Main (string [] args) {
    UsingXml op = new UsingXml ();
    string Uservalue = "Product 1";
    ProcuctComparator delg = new ProcuctComparator (byProductName);
    op.parseXml (@"c:\temp\data.xml");
    var elem = op.myProducts.Products.AsParallel ().Where (f = > {
        return delg (f, Uservalue);
    }).Count ();
    Console.WriteLine (elem);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    string UserInput = "someCreteria";
    using (var xmlStream = new FileStream (@"c:\temp\peoples.xml", FileMode.Open))
    {
        using (var xmlReader = new XmlTextReader (xmlStream))
        {
            XDocument doc = XDocument.Load (xmlReader);
            var result = doc.Descendants ().AsParallel ().Where (x = > x.Value.Equals (UserInput)).FirstOrDefault ();
            if (result == null)
                Console.WriteLine ("No item found");
            else
                Console.WriteLine (result.Value.ToString ());

        }} Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38875206_38875340_1_21
38875206_38876119_1_26
Title: Having a blank textbox crashes the program when i press the login button 
----------------------------------------

private void btnLogin_Click (object sender, EventArgs e) {
    if (txtLogin.Text != "") {
        Entities2 db = new Entities2 ();
        foreach (var usert in db.Teachers) {
            if (usert.TID == Convert.ToInt32 (txtLogin.Text) && usert.Password == txtPassword.Text) {
                Teach teacher = new Teach ();
                teacher.ShowDialog ();
            } else if (usert.TID != Convert.ToInt32 (txtLogin.Text) && usert.Password != txtPassword.Text) {
                MessageBox.Show ("Please Enter a Valid Username and/or Password");
            }
        }
    }
}
----------------------------------------

private void btnLogin_Click (object sender, EventArgs e) {
    int userId;
    if (int.TryParse (txtLogin.Text, out userId)) {
        Entities2 db = new Entities2 ();
        foreach (var usert in db.Teachers) {
            if (usert.TID == userId && usert.Password == txtPassword.Text) {
                Teach teacher = new Teach ();
                teacher.ShowDialog ();
            } else {
                MessageBox.Show ("Please Enter a Valid Username and/or Password");
            }
        }
    } else {
        MessageBox.Show ("Please Enter a Valid User ID");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38895079_38895240_1_13
38895079_38897870_1_14
Title: How do I generate a new id which is not in an IEnumerable? 
----------------------------------------

public static int GetFreshId (this IEnumerable < int > existingIds) {
    int i = Int32.MinValue;
    foreach (int id in existingIds.OrderBy (id = > id)) {
        if (id != i)
            return i;

        if (i == Int32.MaxValue)
            throw new Exception ("We ran out of IDs!");

        i += 1;
    }
    return i;
}
----------------------------------------

public static int GetFreshId (this IEnumerable < int > existingIds) {
    if (existingIds == null) {
        throw new ArgumentNullException (nameof (existingIds));
    }
    if (! existingIds.Any ()) {
        return int.MinValue;
    }
    var lastId = existingIds.Max ();
    if (lastId == Int.MaxValue) {
        throw new ApplicationException ("Sorry there are no more int available. Consider switching to int64.");
    }
    return lastId + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38895079_38895240_1_13
38895079_38898351_1_12
Title: How do I generate a new id which is not in an IEnumerable? 
----------------------------------------

public static int GetFreshId (this IEnumerable < int > existingIds) {
    int i = Int32.MinValue;
    foreach (int id in existingIds.OrderBy (id = > id)) {
        if (id != i)
            return i;

        if (i == Int32.MaxValue)
            throw new Exception ("We ran out of IDs!");

        i += 1;
    }
    return i;
}
----------------------------------------

public static int GetFreshId (IEnumerable < int > existingIds) {
    if (existingIds.Any ()) {
        int i = existingIds.Max ();
        if (i == Int32.MaxValue) {
            throw new Exception ("Ups...");
        }
        return i ++;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38895079_38897870_1_14
38895079_38898351_1_12
Title: How do I generate a new id which is not in an IEnumerable? 
----------------------------------------

public static int GetFreshId (this IEnumerable < int > existingIds) {
    if (existingIds == null) {
        throw new ArgumentNullException (nameof (existingIds));
    }
    if (! existingIds.Any ()) {
        return int.MinValue;
    }
    var lastId = existingIds.Max ();
    if (lastId == Int.MaxValue) {
        throw new ApplicationException ("Sorry there are no more int available. Consider switching to int64.");
    }
    return lastId + 1;
}
----------------------------------------

public static int GetFreshId (IEnumerable < int > existingIds) {
    if (existingIds.Any ()) {
        int i = existingIds.Max ();
        if (i == Int32.MaxValue) {
            throw new Exception ("Ups...");
        }
        return i ++;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38904039_38904991_1_38
38904039_38918550_64_88
Title: Print all possible paths in a labyrinth using recursive DFS 
----------------------------------------

private static IEnumerable < string > VisitCell (int row, int column, bool [,] visited) {
    if (row < 0 || column < 0 || row >= maze.GetLength (0) || column >= maze.GetLength (1))
        yield break;

    if (maze [row, column] == '#' || visited [row, column])
        yield break;

    if (row == 0 || row == maze.GetLength (0) - 1 || column == 0 || column == maze.GetLength (1) - 1) {
        yield return maze [row, column].ToString ();
    }
    visited [row, column] = true;
    foreach (var path in VisitCell (row, column + 1, visited)) {
        yield return maze [row, column] + path;
    }
    foreach (var path in VisitCell (row, column - 1, visited)) {
        yield return maze [row, column] + path;
    }
    foreach (var path in VisitCell (row + 1, column, visited)) {
        yield return maze [row, column] + path;
    }
    foreach (var path in VisitCell (row - 1, column, visited)) {
        yield return maze [row, column] + path;
    }
    visited [row, column] = false;
}
----------------------------------------

private void VisitCell (int row, int column, string path) {
    if (row < 0 || column < 0 || row >= maze.GetLength (0) || column >= maze.GetLength (1)) {
        return;
    }
    if (row < 0 || row > maze.GetLength (0) - 1 || column < 0 || column > maze.GetLength (1) - 1) {
        SaveResult (OutputFileName, path);
        return;
    }
    if (this.maze [row, column] != '#') {
        char x = this.maze [row, column];
        this.maze [row, column] = '#';
        VisitCell (row, column + 1, path + x);
        VisitCell (row, column - 1, path + x);
        VisitCell (row + 1, column, path + x);
        VisitCell (row - 1, column, path + x);
        this.maze [row, column] = x;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38947705_38947804_3_24
38947705_38947843_4_29
Title: Is it possible to redirect to view from a non-controller class in MVC 
----------------------------------------

protected override void OnException (ExceptionContext filterContext) {
    filterContext.ExceptionHandled = true;
    if (filterContext.HttpContext.Request.Headers ["X-Requested-With"] == "XMLHttpRequest") {
        filterContext.Result = new JsonResult {JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = new {Error = true, Message = filterContext.Exception.Message}};
        filterContext.HttpContext.Response.StatusCode = 500;
    } else {
        filterContext.Result = new ViewResult {ViewName = "Error.cshtml"};
    }
}
----------------------------------------

public override void OnException (ExceptionContext filterContext) {
    filterContext.HttpContext.Response.TrySkipIisCustomErrors = true;
    filterContext.ExceptionHandled = true;
    filterContext.HttpContext.Response.ClearContent ();
    var controllerName = (string) filterContext.RouteData.Values ["controller"];
    var actionName = (string) filterContext.RouteData.Values ["action"];
    var model = new HandleErrorInfo (filterContext.Exception, controllerName, actionName);
    filterContext.Result = new ViewResult {ViewName = View, MasterName = Master, ViewData = new ViewDataDictionary < HandleErrorInfo > (model), TempData = filterContext.Controller.TempData};
    filterContext.Exception = null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38963026_38964262_19_35
38963026_38964262_3_17
Title: "How to convert a double [][] (jagged array) to a double[] (matrix) in C#" 
----------------------------------------

public static T [,] to2D < T > (this T [] [] source) {
    int rows = source.Length;
    int columns = source.Select (i = > i == null ? 0 : i.Length).Max ();
    var result = new T [rows, columns];
    int size = System.Runtime.InteropServices.Marshal.SizeOf < T > ();
    int offset = 0;
    foreach (var row in source) {
        if (row != null)
            Buffer.BlockCopy (row, 0, result, offset * size, row.Length * size);

        offset += columns;
    }
    return result;
}
----------------------------------------

public static T [] [] toJagged < T > (this T [,] source) {
    int rows = source.GetLength (0);
    int columns = source.GetLength (1);
    int size = System.Runtime.InteropServices.Marshal.SizeOf < T > ();
    var result = new T [rows] [];
    for (int r = 0; r < rows; r ++) {
        var temp = new T [columns];
        Buffer.BlockCopy (source, r * columns * size, temp, 0, columns * size);
        result [r] = temp;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38980418_38980655_1_18
38980418_38980961_1_18
Title: Battery Status in winforms 
----------------------------------------

private void BatteryStatus () {
    System.Management.ManagementClass wmi = new System.Management.ManagementClass ("Win32_Battery");
    var allBatteries = wmi.GetInstances ();
    foreach (var battery in allBatteries) {
        int estimatedChargeRemaining = Convert.ToInt32 (battery ["EstimatedChargeRemaining"]);
        string Status = "";
        if (estimatedChargeRemaining < 15)
            Status = "Critical";
        else if (estimatedChargeRemaining < 35)
            Status = "Low";
        else if (estimatedChargeRemaining < 60)
            Status = "Regular";
        else if (estimatedChargeRemaining < 90)
            Status = "High";
        else
            Status = "Complete";

        label13.Text = "Remaining:" + "  " + estimatedChargeRemaining + "  " + "% | Status: " + Status;
    }
}
----------------------------------------

private void BatteryStatus () {
    System.Management.ManagementClass wmi = new System.Management.ManagementClass ("Win32_Battery");
    var allBatteries = wmi.GetInstances ();
    foreach (var battery in allBatteries) {
        int estimatedChargeRemaining = Convert.ToInt32 (battery ["EstimatedChargeRemaining"]);
        label13.Text = "Remaining" + "  " + estimatedChargeRemaining.ToString () + "  " + "%";
        if (estimatedChargeRemaining < 15) {
            label13.ForeColor = Color.Red;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38996188_38998650_3_32
38996188_39005064_15_76
Title: How to combine two types of C# lists into one? 
----------------------------------------

static void Main (string [] args) {
    List < A > aList = new List < A > {new A {OtherAData = "First A", SomeDateTime = DateTime.Parse ("12-11-1980")}, new A {OtherAData = "Second A", SomeDateTime = DateTime.Parse ("12-11-2000")}};
    List < B > bList = new List < B > {new B {OtherBData = "First B", SomeOtherDateTime = DateTime.Parse ("12-11-1990")}, new B {OtherBData = "Second B", SomeOtherDateTime = DateTime.Parse ("12-11-2010")}};
    var unionableA = from a in aList
        select new {SortDateTime = a.SomeDateTime, AValue = a, BValue = (B) null};
    var unionableB = from b in bList
        select new {SortDateTime = b.SomeOtherDateTime, AValue = (A) null, BValue = b};
    var union = unionableA.Union (unionableB).OrderBy (u = > u.SortDateTime);
    foreach (var u in union) {
        if (u.AValue != null) {
            Console.WriteLine ("A: {0}", u.AValue);
        } else if (u.BValue != null) {
            Console.WriteLine ("B: {0}", u.BValue);
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    var X = new List < TypeA > ();
    var Y = new List < TypeB > ();
    Random rnd = new Random ();
    int imin, imax;
    imin = rnd.Next (3, 7);
    imax = rnd.Next (10, 20);
    for (int i = imin; i < imax; i ++) {
        X.Add (new TypeA () {date = DateTime.Now.AddDays (- 1 * rnd.Next (1, 1000))});
    }
    imin = rnd.Next (3, 7);
    imax = rnd.Next (10, 20);
    for (int i = imin; i < imax; i ++) {
        Y.Add (new TypeB () {date = DateTime.Now.AddDays (- 1 * rnd.Next (1, 1000))});
    }
    X = X.OrderBy (z = > z.date).ToList ();
    Y = Y.OrderBy (z = > z.date).ToList ();
    int ix = 0;
    int iy = 0;
    DateTime min = DateTime.MinValue;
    while (true) {
        if (ix < X.Count && X [ix].date >= min && (iy >= Y.Count || iy < Y.Count && X [ix].date <= Y [iy].date)) {
            X [ix].Print ();
            min = X [ix].date;
            ix ++;
            continue;
        }
        if (iy < Y.Count && Y [iy].date >= min) {
            Y [iy].Print ();
            min = Y [iy].date;
            iy ++;
        }
        if (ix >= X.Count && iy >= Y.Count) {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38996188_38998650_3_32
38996188_39021475_15_41
Title: How to combine two types of C# lists into one? 
----------------------------------------

static void Main (string [] args) {
    List < A > aList = new List < A > {new A {OtherAData = "First A", SomeDateTime = DateTime.Parse ("12-11-1980")}, new A {OtherAData = "Second A", SomeDateTime = DateTime.Parse ("12-11-2000")}};
    List < B > bList = new List < B > {new B {OtherBData = "First B", SomeOtherDateTime = DateTime.Parse ("12-11-1990")}, new B {OtherBData = "Second B", SomeOtherDateTime = DateTime.Parse ("12-11-2010")}};
    var unionableA = from a in aList
        select new {SortDateTime = a.SomeDateTime, AValue = a, BValue = (B) null};
    var unionableB = from b in bList
        select new {SortDateTime = b.SomeOtherDateTime, AValue = (A) null, BValue = b};
    var union = unionableA.Union (unionableB).OrderBy (u = > u.SortDateTime);
    foreach (var u in union) {
        if (u.AValue != null) {
            Console.WriteLine ("A: {0}", u.AValue);
        } else if (u.BValue != null) {
            Console.WriteLine ("B: {0}", u.BValue);
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    var r = new Random ();
    var listA = Enumerable.Repeat (0, 10).Select (_ = > new A {Date = new DateTime (r.Next ())}).ToList ();
    var listB = Enumerable.Repeat (0, 10).Select (_ = > new B {Date = new DateTime (r.Next ())}).ToList ();
    var combined = listA.Select (a = > new {a.Date, Print = new Action (() = > a.Print ())}).Concat (listB.Select (b = > new {b.Date, Print = new Action (() = > b.Print ())})).OrderBy (c = > c.Date);
    foreach (var item in combined) {
        item.Print ();
        Console.Write (": " + item.Date);
        Console.WriteLine ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
38996188_39005064_15_76
38996188_39021475_15_41
Title: How to combine two types of C# lists into one? 
----------------------------------------

static void Main (string [] args) {
    var X = new List < TypeA > ();
    var Y = new List < TypeB > ();
    Random rnd = new Random ();
    int imin, imax;
    imin = rnd.Next (3, 7);
    imax = rnd.Next (10, 20);
    for (int i = imin; i < imax; i ++) {
        X.Add (new TypeA () {date = DateTime.Now.AddDays (- 1 * rnd.Next (1, 1000))});
    }
    imin = rnd.Next (3, 7);
    imax = rnd.Next (10, 20);
    for (int i = imin; i < imax; i ++) {
        Y.Add (new TypeB () {date = DateTime.Now.AddDays (- 1 * rnd.Next (1, 1000))});
    }
    X = X.OrderBy (z = > z.date).ToList ();
    Y = Y.OrderBy (z = > z.date).ToList ();
    int ix = 0;
    int iy = 0;
    DateTime min = DateTime.MinValue;
    while (true) {
        if (ix < X.Count && X [ix].date >= min && (iy >= Y.Count || iy < Y.Count && X [ix].date <= Y [iy].date)) {
            X [ix].Print ();
            min = X [ix].date;
            ix ++;
            continue;
        }
        if (iy < Y.Count && Y [iy].date >= min) {
            Y [iy].Print ();
            min = Y [iy].date;
            iy ++;
        }
        if (ix >= X.Count && iy >= Y.Count) {
            break;
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    var r = new Random ();
    var listA = Enumerable.Repeat (0, 10).Select (_ = > new A {Date = new DateTime (r.Next ())}).ToList ();
    var listB = Enumerable.Repeat (0, 10).Select (_ = > new B {Date = new DateTime (r.Next ())}).ToList ();
    var combined = listA.Select (a = > new {a.Date, Print = new Action (() = > a.Print ())}).Concat (listB.Select (b = > new {b.Date, Print = new Action (() = > b.Print ())})).OrderBy (c = > c.Date);
    foreach (var item in combined) {
        item.Print ();
        Console.Write (": " + item.Date);
        Console.WriteLine ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39013132_39013353_1_16
39013132_39013386_1_24
Title: How to make SqlDataReader to get time(7) type variable? 
----------------------------------------

public static void something () {
    string stmt = "select * from GazeTable where id = " + 1 + " ;";
    SqlConnection conn = GetConnection ();
    SqlCommand cmd = new SqlCommand (stmt, conn);
    conn.Open ();
    using (var reader = cmd.ExecuteReader ())
    {
        while (reader.Read ()) {
            Console.WriteLine (reader.GetTimeSpan (3));
        }
    } conn.Close ();
}
----------------------------------------

public static void something () {
    string stmt = "select * from GazeTable where id = " + 1 + " ;";
    SqlConnection conn = GetConnection ();
    SqlCommand cmd = new SqlCommand (stmt, conn);
    conn.Open ();
    using (var reader = cmd.ExecuteReader ())
    {
        if (reader.HasRows) {
            while (reader.Read ()) {
                Console.WriteLine ("{0}", ((SqlDataReader) reader).GetTimeSpan (3).ToString (@"dd\.hh\:mm\:ss\:ff"));
            }
        } else {
            Console.WriteLine ("No rows found.");
        }
    } conn.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39027148_39027787_1_26
39027148_39028848_3_39
Title: C# read multiple parameters from command line 
----------------------------------------

static void Main (string [] args) {
    string username = string.Empty;
    string password = string.Empty;
    OptionSet CmdParser = new OptionSet {{"u|username=", "Username", u = > username = u}, {"p|password=", "Password", p = > password = p}};
    try {
        List < string > unknownArgs = CmdParser.Parse (args);
        if (unknownArgs.Count > 1) {
            Console.Write ("Unrecognised argument in: '{0}'", string.Join (" ", unknownArgs));
        }
    }
    catch (OptionException ex) {
        Console.WriteLine (ex.Message);
    }
}
----------------------------------------

static int Main (string [] args) {
    var parser = new Parser (settings = > {
        settings.CaseSensitive = false;
        settings.HelpWriter = Console.Error;
        settings.IgnoreUnknownArguments = false;
    });
    var result = parser.ParseArguments < Options > (args);
    var exitCode = result.MapResult (options = > {
        if (options.StringSequence.Count () > 0) {
            Console.WriteLine ("unbound params: " + String.Join (",", options.StringSequence));
            return 1;
        }
        Console.WriteLine ("Hi " + options.UserName + ", your password is");
        Console.WriteLine (options.Password);
        return 0;
    }, errors = > {
        Console.WriteLine (String.Join (",", errors.Select (x = > x.ToString ())));
        return 1;
    });
    return exitCode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39033733_39034233_13_134
39033733_39034651_1_16
Title: Passing a variable from a method to a button click event 
----------------------------------------

public void Encode () {
    string message = Convert.ToString (messageTxt.Text);
    char [] encodeArray = message.ToCharArray ();
    for (int i = 0; i < encodeArray.Length; i ++) {
        char letter = (encodeArray [i]);
        switch (letter) {
            case 'a' : case 'A' :
                encodeArray [i] = 't';
                break;
            case 'b' : case 'B' :
                encodeArray [i] = 'u';
                break;
            case 'c' : case 'C' :
                encodeArray [i] = 'v';
                break;
            case 'd' : case 'D' :
                encodeArray [i] = 'w';
                break;
            case 'e' : case 'E' :
                encodeArray [i] = 'x';
                break;
            case 'f' : case 'F' :
                encodeArray [i] = 'y';
                break;
            case 'g' : case 'G' :
                encodeArray [i] = 'z';
                break;
            case 'h' : case 'H' :
                encodeArray [i] = 'a';
                break;
            case 'i' : case 'I' :
                encodeArray [i] = 'b';
                break;
            case 'j' : case 'J' :
                encodeArray [i] = 'c';
                break;
            case 'k' : case 'K' :
                encodeArray [i] = 'd';
                break;
            case 'l' : case 'L' :
                encodeArray [i] = 'e';
                break;
            case 'm' : case 'M' :
                encodeArray [i] = 'f';
                break;
            case 'n' : case 'N' :
                encodeArray [i] = 'g';
                break;
            case 'o' : case 'O' :
                encodeArray [i] = 'h';
                break;
            case 'p' : case 'P' :
                encodeArray [i] = 'i';
                break;
            case 'q' : case 'Q' :
                encodeArray [i] = 'j';
                break;
            case 'r' : case 'R' :
                encodeArray [i] = 'k';
                break;
            case 's' : case 'S' :
                encodeArray [i] = 'l';
                break;
            case 't' : case 'T' :
                encodeArray [i] = 'm';
                break;
            case 'u' : case 'U' :
                encodeArray [i] = 'n';
                break;
            case 'v' : case 'V' :
                encodeArray [i] = 'o';
                break;
            case 'w' : case 'W' :
                encodeArray [i] = 'p';
                break;
            case 'x' : case 'X' :
                encodeArray [i] = 'q';
                break;
            case 'y' : case 'Y' :
                encodeArray [i] = 'r';
                break;
            case 'z' : case 'Z' :
                encodeArray [i] = 's';
                break;
        }
    }
    foreach (char eachChar in encodeArray) {
        upperEncodedMsg += eachChar;
    }
}
----------------------------------------

public void Encode () {
    upperEncodedMsg = new StringBuilder ();
    string message = Convert.ToString (messageTxt.Text);
    char [] encodeArray = message.ToUpper ().ToCharArray ();
    for (int i = 0; i < encodeArray.Length; i ++) {
        char outputLetter;
        charMapping.TryGetValue (encodeArray [i], out outputLetter);
        upperEncodedMsg.Append (outputLetter);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3905398_3905516_22_31
3905398_3906060_1_13
Title: C# cannot call overloaded non-generic method from generic method 
----------------------------------------

public T callFoo < T > (int len) where T : new () {
    T obj = new T ();
    Delegate function;
    if (! functions.TryGetValue (typeof (T), out function))
        throw new NotSupportedException ("foo is not supported for " + typeof (T).Name);

    ((MyDelegate < T >) function) (this, len, ref obj);
    return obj;
}
----------------------------------------

protected void foo < T > (ref T obj) {
    int len = Marshal.SizeOf (obj);
    IntPtr mem = Marshal.AllocCoTaskMem (len);
    try {
        Marshal.StructureToPtr (obj, mem, false);
        foo (len, mem);
        obj = (T) Marshal.PtrToStructure (mem, typeof (T));
    }
    finally {
        Marshal.FreeCoTaskMem (mem);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3907679_3907722_8_25
3907679_3907955_11_26
Title: How can I update the current line in a C# Windows Console App while waiting for ReadLine? 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Starting");
    ThreadPool.QueueUserWorkItem (cb = > {
        int i = 1;
        while (true) {
            Console.WriteLine ("Background {0}", i ++);
            Thread.Sleep (1000);
        }
    });
    Console.WriteLine ("Blocking");
    Console.WriteLine ("Press Enter to exit...");
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    new Thread (() = > {
        Console.ReadLine ();
        Environment.Exit (0);
    }).Start ();
    int i = 0;
    while (true) {
        Console.Clear ();
        Console.WriteLine (++ i);
        Thread.Sleep (1000);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39083322_39083450_20_34
39083322_39083450_3_18
Title: Exactly what SelectMany() is for? 
----------------------------------------

public static IEnumerable < IEnumerable < T > > SplitToChunks < T > (this IEnumerable < T > source, int size) {
    if (size < 1) {
        throw new ArgumentOutOfRangeException ();
    }
    using (var enumerator = source.GetEnumerator ())
    {
        while (enumerator.MoveNext ()) {
            yield return GetChunk (enumerator, size);
        }
    }}
----------------------------------------

private static IEnumerable < T > GetChunk < T > (IEnumerator < T > source, int size) {
    yield return source.Current;
    for (int i = 1; i < size; i ++) {
        if (source.MoveNext ()) {
            yield return source.Current;
        } else {
            yield break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3908827_3909024_10_29
3908827_3925963_14_62
Title: Observable<string> updated events? 
----------------------------------------

static void Main (string [] args) {
    List < Minah > minahs = new List < Minah > ();
    for (int i = 0; i < 10; i ++) {
        minahs.Add (new Minah ());
    }
    foreach (var item in minahs) {
        item.peers = minahs;
    }
    minahs.ForEach (m = > m.s.OnNext ("Mine"));
    minahs.ForEach (m = > m.s.OnNext ("Whee"));
    minahs.ForEach (m = > m.s.OnNext ("Argh"));
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    ThreadPool.SetMaxThreads (100, 100);
    ConcurrentBag < Minah > minahs = new ConcurrentBag < Minah > ();
    Stopwatch ti = new Stopwatch ();
    ti.Start ();
    Task.Factory.StartNew (() = > {
        for (int i = 1; i < 2501; i ++) {
            minahs.Add (new Minah (i));
        }
    });
    Task.Factory.StartNew (() = > {
        for (int i = 1; i < 2501; i ++) {
            minahs.Add (new Minah (i));
        }
    });
    Task.Factory.StartNew (() = > {
        for (int i = 1; i < 2501; i ++) {
            minahs.Add (new Minah (i));
        }
    });
    Task.Factory.StartNew (() = > {
        for (int i = 1; i < 2501; i ++) {
            minahs.Add (new Minah (i));
        }
    });
    Task.WaitAll ();
    string [] alpha = {"Alpha", "Bravo", "Charlie", "Delta", "Eagle", "Foxtrot", "Gulf", "Hotel"};
    foreach (string s in alpha) {
        Console.WriteLine (s);
        Task.Factory.StartNew (() = > minahs.AsParallel ().ForAll (m = > m.RepeatWord = s)).Wait ();
    }
    minahs.AsParallel ().ForAll (m = > m.s.OnCompleted ());
    ti.Stop ();
    Console.WriteLine ("{1} birds : {0} seconds", ti.Elapsed.TotalSeconds, minahs.Count);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39095008_39095100_1_13
39095008_39104675_2_10
Title: System.Exception: Exception of type 'System.Exception' was thrown 
----------------------------------------

public static AbilityScore GetAbilityScore (AbilitiesSort abilitySort, int score) {
    try {
        var abilityScores = AbilitiesScore [abilitySort];
        foreach (var abilityScore in abilityScores)
            if (abilityScore.Min <= score && abilityScore.Max >= score)
                return abilityScore;

    }
    catch {
        throw new System.Exception ();
    }
}
----------------------------------------

public static AbilityScore GetAbilityScore (AbilitiesSort abilitySort, int score) {
    var scores = AbilitiesScore [abilitySort];
    if (scores == null)
        throw new NullReferenceException ("Target ability scores could not be found.");

    foreach (var abilityScore in scores)
        if (abilityScore.Min <= score && abilityScore.Max >= score)
            return abilityScore;

    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39130313_39130468_1_25
39130313_39130802_1_16
Title: Change values of dictionary C# 
----------------------------------------

static Dictionary < string, bool > ChangeValues (int line, Dictionary < string, bool > values) {
    switch (line) {
        case 0 :
            values ["A"] = false;
            values ["B"] = false;
            values ["C"] = false;
            break;
        case 1 :
            values ["A"] = false;
            values ["B"] = false;
            values ["C"] = true;
            break;
        case 2 :
            values ["A"] = false;
            values ["B"] = true;
            values ["C"] = false;
            break;
    }
    return values;
}
----------------------------------------

private Dictionary < string, bool > ChangeValues (int line, string [] keys) {
    Dictionary < string, bool > values = new Dictionary < string, bool > ();
    for (int i = 0; i < line; i ++) {
        for (int j = 0, bit = 1; j < keys.Length; j ++, bit <<= 1) {
            values [keys [j]] = (i & bit) != 0;
        }
    }
    return values;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39146251_39146669_11_24
39146251_39146669_26_43
Title: How to create generic T class? 
----------------------------------------

public List < TGroup > ValidateColumnInList < TItem, TGroup > (List < TGroup > GroupExpression) where TGroup : GroupExpression {
    List < TGroup > TempGroupExpression = new List < TGroup > ();
    var itemProperties = typeof (TItem).GetProperties ();
    foreach (var GrpExpression in GroupExpression) {
        bool IsContainColumn = itemProperties.Any (column = > column.Name == GrpExpression.ExpressionName);
        if (! IsContainColumn) {
            TempGroupExpression.Add (GrpExpression);
        }
    }
    return TempGroupExpression;
}
----------------------------------------

public JsonResult CreateProduct < TItem, TGroup > (List < TItem > Products, List < TGroup > GroupExpression) where TGroup : GroupExpression {
    List < TGroup > InvalidGroupExpression = ValidateColumnInList < TItem, TGroup > (GroupExpression);
    if (InvalidGroupExpression.Count () <= 0) {
        string [] Fields = GroupExpression.Select (x = > x.ExpressionName).ToArray ();
        var LambdaExp = GroupExpressionBuilder.GroupByExpression < TItem > (Fields);
        IEnumerable < TItem > DuplicateProducts = Products.GroupBy (LambdaExp.Compile ()).Where (g = > g.Skip (1).Any ()).SelectMany (g = > g).ToList ();
        IEnumerable < object > Indices = DuplicateProducts.Select < TItem, object > (x = > Products.IndexOf (x)).ToList ();
        return Json (new {Success = true, Indices}, JsonRequestBehavior.AllowGet);
    } else {
        return Json (new {Success = false, InvalidGroupExpression}, JsonRequestBehavior.AllowGet);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39208395_39268178_1_14
39208395_39331151_1_18
Title: C# Using tcp and udp protocols 
----------------------------------------

static void Main (string [] args) {
    UdpClient udpServer = new UdpClient (1100);
    IPEndPoint remoteEP = new IPEndPoint (IPAddress.Any, 0);
    TcpListener listener = new TcpListener (IPAddress.Any, 25655);
    listener.Start ();
    Socket sck = listener.AcceptTcpClient ().Client;
    var data = udpServer.Receive (ref remoteEP);
    string result = Encoding.UTF8.GetString (data);
    Console.WriteLine (result);
    Console.Read ();
}
----------------------------------------

static void Main (string [] args) {
    Task.Factory.StartNew (() = > {
        TcpListener listener = new TcpListener (IPAddress.Any, 25655);
        listener.Start ();
        Socket sck = listener.AcceptTcpClient ().Client;
    }, TaskCreationOptions.LongRunning);
    UdpClient udpServer = new UdpClient (1100);
    IPEndPoint remoteEP = new IPEndPoint (IPAddress.Any, 0);
    var data = udpServer.Receive (ref remoteEP);
    string result = Encoding.UTF8.GetString (data);
    Console.WriteLine (result);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3921660_3921703_17_28
3921660_3921728_15_25
Title: Creating new a Thread() is asking ParameterizedThreadStart object as a parameter in C sharp 
----------------------------------------

void run () {
    Console.WriteLine (thrd.Name + " starting.");
    do
        {
            Thread.Sleep (500);
            Console.WriteLine ("In " + thrd.Name + ", count is " + count);
            count ++;
        } while (count < 10);
    Console.WriteLine (thrd.Name + " terminating.");
}
----------------------------------------

static void run () {
    Console.WriteLine (thrd.Name + " starting.");
    do
        {
            Thread.Sleep (500);
            Console.WriteLine ("In " + thrd.Name + ", count is " + count);
            count ++;
        } while (count == 5);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39229908_39230361_1_28
39229908_39230541_17_29
Title: Get checkbox value in grid view instead of using foreach loop 
----------------------------------------

protected void cbPaid_CheckedChanged (object sender, EventArgs e) {
    CheckBox cbPaid = sender as CheckBox;
    if (cbPaid != null && cbPaid.Parent != null) {
        GridViewRow row = cbPaid.Parent.Parent as GridViewRow;
        if (row != null) {
            string status = "Paid";
            int amount = Convert.ToInt32 (ViewState ["EventFee"]);
            DateTime date = DateTime.Now;
            string user = Session ["user_id"].ToString ();
            string regID = row.Cells [2].Text;
            string type = "Deposit";
            string account = "Participation";
            int balance = BAL.fetch_availableBalance ();
            int total_balance = amount + balance;
            string detail = "Participant: " + regID + " fee has been Recieved";
            BAL.updateParticipants (regID, status, amount, user, date);
            BAL.saveBudgetTracking (type, account, amount, 0, total_balance, detail, date);
            Response.Redirect ("~/show_members.aspx");
        }
    }
}
----------------------------------------

protected void cbPaid_CheckedChanged (object sender, EventArgs e) {
    var cbPaid = sender as CheckBox;
    var cell = cbPaid.Parent as DataControlFieldCell;
    var row = cell.Parent as GridViewRow;
    var regIDLabel = row.FindControl ("RegIDLabel") as Label;
    var regId = regIDLabel.Text;
    if (cbPaid.Checked) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39235692_39235905_1_20
39235692_39236020_1_16
Title: All numbers less than or divisible by Seven 
----------------------------------------

static private List < int > GetLessThanOrDivisbleBySeven (int num) {
    List < int > ReturnList;
    int i;
    if (num <= 7) {
        ReturnList = new List < int > ();
        for (i = 0; i <= num; i ++) {
            ReturnList.Add (i);
        }
        return ReturnList;
    }
    ReturnList = new List < int > {0, 1, 2, 3, 4, 5, 6};
    i = 7;
    while (i <= num) {
        ReturnList.Add (i);
        i += 7;
    }
    return ReturnList;
}
----------------------------------------

private List < int > GetLessThanOrDivisbleBySeven (int num) {
    List < int > ReturnList = new List < int > ();
    int i = 0;
    for (i = 0; i < 7; i ++)
        ReturnList.Add (i);

    int res = num / 7;
    for (i = 1; i <= res; i ++) {
        ReturnList.Add (i * 7);
    }
    return ReturnList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39261981_39262036_1_14
39261981_39262052_1_12
Title: C# Array Issues; Can't Save Array Index to a Variable 
----------------------------------------

public static void Check (string stringy) {
    int gender = 0;
    string [] arrayexample = {"Example One Male", "Example Two Female"};
    var arrayPosition = - 1;
    for (var i = 0; i < arrayexample.Length; i ++) {
        if (arrayexample [i] == stringy) {
            arrayPosition = i;
            break;
        }
    }
}
----------------------------------------

public static void Check (string stringy) {
    int gender = 0;
    string [] arrayexample = {"Example One Male", "Example Two Female"};
    for (int I = 0; i < arrayexample.Length; i ++) {
        if (arrayexample [i].Contains (stringy)) {
            int arrayPosition = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39325284_39332883_34_76
39325284_39332883_78_150
Title: Combine Lambda Expressions using custom operator 
----------------------------------------

public static Expression < Func < TDbType, bool > > BuildPredicate < TDbType > (Dictionary < string, string > searchCriteria, IPredicateParser predicateParser) {
    var predicateOuter = PredicateBuilder.New < TDbType > (true);
    var predicateErrorFields = new List < string > ();
    var dict = searchCriteria;
    if (dict == null || ! dict.Any ())
        return predicateOuter;

    var searchFields = typeof (TDbType).GetProperties ();
    foreach (var searchField in searchFields) {
        var dbFieldName = GetDbFieldName (searchField);
        var dbType = typeof (TDbType);
        var dbFieldMemberInfo = dbType.GetMember (dbFieldName, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance).SingleOrDefault ();
        if (dbFieldMemberInfo == null || ! dict.ContainsKey (dbFieldMemberInfo.Name))
            continue;

        var predicateValue = dict [dbFieldMemberInfo.Name];
        if (predicateValue == null)
            continue;

        var rangesAllowed = searchField.PropertyType != typeof (string);
        if (! predicateParser.Parse (predicateValue, rangesAllowed, searchField.PropertyType)) {
            predicateErrorFields.Add (dbFieldMemberInfo.Name);
            continue;
        }
        if (! predicateParser.Items.Any ())
            continue;

        var predicateInner = BuildInnerPredicate < TDbType > (predicateParser, searchField, dbFieldMemberInfo);
        if (predicateInner == null)
            continue;

        predicateOuter = predicateOuter.And (predicateInner);
    }
    return predicateOuter;
}
----------------------------------------

private static Expression < Func < TDbType, bool > > BuildInnerPredicate < TDbType > (IPredicateParser predicateParser, PropertyInfo searchField, MemberInfo dbFieldMemberInfo) {
    var dbType = typeof (TDbType);
    var dbTypeParameter = Expression.Parameter (dbType, @"x");
    var dbFieldMember = Expression.MakeMemberAccess (dbTypeParameter, dbFieldMemberInfo);
    Expression < Func < TDbType, bool > > predicateInner = null;
    foreach (var predicateItem in predicateParser.Items) {
        var predicateItemSingle = predicateItem as PredicateItemSingle;
        var predicateItemRange = predicateItem as PredicateItemRange;
        if (predicateItemSingle != null) {
            if (searchField.PropertyType == typeof (string)) {
                var str = predicateItemSingle.Value as string ?? "";
                var startsWithAsterisk = str.StartsWith ("*");
                var endsWithAsterisk = str.EndsWith ("*");
                str = str.Trim ('*').Trim ();
                MethodCallExpression callExpression;
                if (startsWithAsterisk && ! endsWithAsterisk) {
                    callExpression = Expression.Call (dbFieldMember, StringEndsWithMethod, new Expression [] {Expression.Constant (str)});
                } else if (! startsWithAsterisk && endsWithAsterisk) {
                    callExpression = Expression.Call (dbFieldMember, StringStartsWithMethod, new Expression [] {Expression.Constant (str)});
                } else {
                    callExpression = Expression.Call (dbFieldMember, StringContainsMethod, new Expression [] {Expression.Constant (str)});
                }
                predicateInner = (predicateInner ?? PredicateBuilder.New < TDbType > (false)).Or (Expression.Lambda (callExpression, dbTypeParameter) as Expression < Func < TDbType, bool > >);
            } else {
                if (dbFieldMember.Type.IsEnum) {
                    if (! dbFieldMember.Type.IsEnumDefined (predicateItemSingle.Value))
                        continue;

                    var enumValue = (int) predicateItemSingle.Value;
                    if (enumValue <= 0)
                        continue;

                    var enumObj = Enum.ToObject (dbFieldMember.Type, (int) predicateItemSingle.Value);
                    predicateInner = (predicateInner ?? PredicateBuilder.New < TDbType > (false)).Or (Expression.Lambda < Func < TDbType, bool > > (Expression.Equal (dbFieldMember, Expression.Constant (enumObj)), new [] {dbTypeParameter}));
                } else {
                    predicateInner = (predicateInner ?? PredicateBuilder.New < TDbType > (false)).Or (Expression.Lambda < Func < TDbType, bool > > (Expression.Equal (dbFieldMember, Expression.Constant (predicateItemSingle.Value)), new [] {dbTypeParameter}));
                }
            }
        } else if (predicateItemRange != null) {
            var predicateRange = PredicateBuilder.New < TDbType > (true);
            predicateRange = predicateRange.And (Expression.Lambda < Func < TDbType, bool > > (Expression.GreaterThanOrEqual (dbFieldMember, Expression.Constant (predicateItemRange.Value1)), new [] {dbTypeParameter}));
            predicateRange = predicateRange.And (Expression.Lambda < Func < TDbType, bool > > (Expression.LessThanOrEqual (dbFieldMember, Expression.Constant (predicateItemRange.Value2)), new [] {dbTypeParameter}));
            predicateInner = (predicateInner ?? PredicateBuilder.New < TDbType > (false)).Or (predicateRange);
        }
    }
    return predicateInner;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3932712_3932807_9_21
3932712_3932857_3_19
Title: How can I rewrite these two almost identical functions using c# generics? 
----------------------------------------

static T Find < T > (ICollection < T > templates, string templateID, Func < T, string > selector) {
    T selectedTemplate;
    if (templates.Count == 0)
        throw new CreatioException ("This user's brand has no templates. There must be at least one available.");

    if (templates.Count == 1 || String.IsNullOrEmpty (templateID))
        selectedTemplate = templates.First ();
    else
        selectedTemplate = templates.Single (x = > selector (x).ToLower () == templateID.ToLower ());

    if (selectedTemplate == null)
        throw new CreatioException (String.Format ("No template with the id {0} could be found for this user's brand.", templateID));

    return selectedTemplate;
}
----------------------------------------

public static T FindTemplates < T > (this IList < T > list, string templateID, Func < string, T > selector) {
    T selectedTemplate;
    if (list.Count == 0) {
        throw new CreationException ("This user's brand has no UnitTemplates. There must be at least one available.");
    }
    if (list.Count == 1 || String.IsNullOrEmpty (templateID)) {
        selectedTemplate = list.First ();
    } else {
        selectedTemplate = selector (templateID);
    }
    if (selectedTemplate == null) {
        throw new CreationException (String.Format ("No UnitTemplate with the id {0} could be found for this user's brand.", templateID));
    }
    return selectedTemplate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39329448_39330792_1_28
39329448_39352997_1_41
Title: WaitFor() - How to wait for a specific buffer to arrive on Steam/SerialPort? 
----------------------------------------

public void WaitFor (byte [] buffer) {
    if (buffer.Length == 0)
        return;

    var q = new List < byte > (buffer.Length);
    while (true) {
        var current = _reader.ReadByte ();
        q.Add ((byte) current);
        if (q.Last == buffer [q.Count - 1]) {
            if (q.Count == buffer.Length)
                return;

        } else {
            while (q.Any () && ! q.SequenceEqual (buffer.Take (q.Count))) {
                q.RemoveAt (0);
            }
        }
    }
}
----------------------------------------

public override byte [] WaitFor (byte [] buffer, int timeout) {
    List < byte > stack = new List < byte > ();
    int index = 0;
    int upperBound = buffer.Length - 1;
    Stopwatch Sw = new Stopwatch ();
    Sw.Start ();
    while (Sw.Elapsed.Seconds <= timeout) {
        stack.Add ((byte) _port.ReadByte ());
        if (stack.Count > upperBound) {
            if (stack [index] == buffer [0]) {
                byte [] compBuffer = stack.GetRange (index, upperBound + 1).ToArray ();
                if ((compBuffer.SequenceEqual (buffer) && (index - 1 > 0))) {
                    return stack.GetRange (0, index - 1).ToArray ();
                } else if (compBuffer.SequenceEqual (buffer)) {
                    return new byte [] {0};
                }
            }
            index += 1;
            upperBound += 1;
        }
    }
    throw new TimeoutException ("Timeout: Expected buffer was not received prior to timeout");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39388501_39388799_1_13
39388501_39389237_1_14
Title: c# how to use Combobox.Value for a From Clause in a Sql query 
----------------------------------------

private void Ok_button3_Click (object sender, EventArgs e) {
    OleDbConnection con = new OleDbConnection (@"Provider = Microsoft.ACE.OLEDB.12.0; Data Source = E:\database.accdb; Persist Security Info =False;");
    OleDbCommand cmd = new OleDbCommand ("Select * From  " + comboBox1.SelectedItem.ToString (), con);
    cmd.CommandType = CommandType.Text;
    OleDbDataAdapter da = new OleDbDataAdapter (cmd);
    DataTable dt = new DataTable ();
    da.Fill (dt);
    dt.TableName = "Project";
    dataGridView1.DataSource = dt;
}
----------------------------------------

private void Ok_button3_Click (object sender, EventArgs e) {
    OleDbConnection con = new OleDbConnection (@"Provider = Microsoft.ACE.OLEDB.12.0; Data Source = E:\database.accdb; Persist Security Info =False;");
    string tableName = comboBox1.SelectedValue;
    var builder = new SqlCommandBuilder ();
    string escapedTableName = builder.QuoteIdentifier (tableName);
    OleDbCommand cmd = new OleDbCommand ("Select * From " + escapedTableName, con);
    cmd.CommandType = CommandType.Text;
    OleDbDataAdapter da = new OleDbDataAdapter (cmd);
    DataTable dt = new DataTable ();
    da.Fill (dt);
    dt.TableName = "Project";
    dataGridView1.DataSource = dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39388501_39389002_1_14
39388501_39389237_1_14
Title: c# how to use Combobox.Value for a From Clause in a Sql query 
----------------------------------------

private void Ok_button3_Click (object sender, EventArgs e) {
    OleDbConnection con = new OleDbConnection (@"Provider =  Microsoft.ACE.OLEDB.12.0; Data Source = E:\database.accdb; Persist Security Info =False;");
    OleDbCommand cmd = new OleDbCommand (String.Concat ("Select * From ", comboBox1.SelectedValue), con);
    cmd.CommandType = CommandType.Text;
    OleDbDataAdapter da = new OleDbDataAdapter (cmd);
    DataTable dt = new DataTable ();
    da.Fill (dt);
    dt.TableName = "Project";
    dataGridView1.DataSource = dt;
}
----------------------------------------

private void Ok_button3_Click (object sender, EventArgs e) {
    OleDbConnection con = new OleDbConnection (@"Provider = Microsoft.ACE.OLEDB.12.0; Data Source = E:\database.accdb; Persist Security Info =False;");
    string tableName = comboBox1.SelectedValue;
    var builder = new SqlCommandBuilder ();
    string escapedTableName = builder.QuoteIdentifier (tableName);
    OleDbCommand cmd = new OleDbCommand ("Select * From " + escapedTableName, con);
    cmd.CommandType = CommandType.Text;
    OleDbDataAdapter da = new OleDbDataAdapter (cmd);
    DataTable dt = new DataTable ();
    da.Fill (dt);
    dt.TableName = "Project";
    dataGridView1.DataSource = dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39388501_39389237_1_14
39388501_39389241_1_13
Title: c# how to use Combobox.Value for a From Clause in a Sql query 
----------------------------------------

private void Ok_button3_Click (object sender, EventArgs e) {
    OleDbConnection con = new OleDbConnection (@"Provider = Microsoft.ACE.OLEDB.12.0; Data Source = E:\database.accdb; Persist Security Info =False;");
    string tableName = comboBox1.SelectedValue;
    var builder = new SqlCommandBuilder ();
    string escapedTableName = builder.QuoteIdentifier (tableName);
    OleDbCommand cmd = new OleDbCommand ("Select * From " + escapedTableName, con);
    cmd.CommandType = CommandType.Text;
    OleDbDataAdapter da = new OleDbDataAdapter (cmd);
    DataTable dt = new DataTable ();
    da.Fill (dt);
    dt.TableName = "Project";
    dataGridView1.DataSource = dt;
}
----------------------------------------

private void Ok_button3_Click (object sender, EventArgs e) {
    OleDbConnection con = new OleDbConnection (@"Provider =        Microsoft.ACE.OLEDB.12.0; Data Source = E:\database.accdb; Persist Security Info =False;");
    OleDbCommand cmd = new OleDbCommand (String.Concat ("Select * From ", comboBox1.Text), con);
    cmd.CommandType = CommandType.Text;
    OleDbDataAdapter da = new OleDbDataAdapter (cmd);
    DataTable dt = new DataTable ();
    da.Fill (dt);
    dt.TableName = "Project";
    dataGridView1.DataSource = dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39413029_39413360_1_13
39413029_39413448_12_23
Title: How to generate a random values and displays it in alphabet 
----------------------------------------

public string RandomDigits (int length) {
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var random = new Random ();
    string s = string.Empty;
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, chars [random.Next (0, 26)] + " ");

    return s;
}
----------------------------------------

public static string RandomDigits (int length) {
    char [] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray ();
    var random = new Random ();
    string s = string.Empty;
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, alphabet [random.Next (0, 26)] + " ");

    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39413029_39413360_1_13
39413029_39413565_1_14
Title: How to generate a random values and displays it in alphabet 
----------------------------------------

public string RandomDigits (int length) {
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var random = new Random ();
    string s = string.Empty;
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, chars [random.Next (0, 26)] + " ");

    return s;
}
----------------------------------------

public string RandomDigits (int length) {
    var random = new Random ();
    var builder = new StringBuilder (length);
    for (int i = 0; i < length; i ++) {
        var offset = random.Next (0, 26);
        char c = (char) ('A' + offset);
        builder.Append (c);
    }
    return builder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39413029_39413360_1_13
39413029_39413612_5_16
Title: How to generate a random values and displays it in alphabet 
----------------------------------------

public string RandomDigits (int length) {
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var random = new Random ();
    string s = string.Empty;
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, chars [random.Next (0, 26)] + " ");

    return s;
}
----------------------------------------

static public string RandomDigits (int length) {
    var random = new Random ();
    string s = string.Empty;
    char [] alphabets = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, alphabets [random.Next (0, 26)].ToString () + " ");

    Console.WriteLine (s);
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39413029_39413448_12_23
39413029_39413565_1_14
Title: How to generate a random values and displays it in alphabet 
----------------------------------------

public static string RandomDigits (int length) {
    char [] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray ();
    var random = new Random ();
    string s = string.Empty;
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, alphabet [random.Next (0, 26)] + " ");

    return s;
}
----------------------------------------

public string RandomDigits (int length) {
    var random = new Random ();
    var builder = new StringBuilder (length);
    for (int i = 0; i < length; i ++) {
        var offset = random.Next (0, 26);
        char c = (char) ('A' + offset);
        builder.Append (c);
    }
    return builder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39413029_39413448_12_23
39413029_39413612_5_16
Title: How to generate a random values and displays it in alphabet 
----------------------------------------

public static string RandomDigits (int length) {
    char [] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray ();
    var random = new Random ();
    string s = string.Empty;
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, alphabet [random.Next (0, 26)] + " ");

    return s;
}
----------------------------------------

static public string RandomDigits (int length) {
    var random = new Random ();
    string s = string.Empty;
    char [] alphabets = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, alphabets [random.Next (0, 26)].ToString () + " ");

    Console.WriteLine (s);
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39413029_39413565_1_14
39413029_39413612_5_16
Title: How to generate a random values and displays it in alphabet 
----------------------------------------

public string RandomDigits (int length) {
    var random = new Random ();
    var builder = new StringBuilder (length);
    for (int i = 0; i < length; i ++) {
        var offset = random.Next (0, 26);
        char c = (char) ('A' + offset);
        builder.Append (c);
    }
    return builder.ToString ();
}
----------------------------------------

static public string RandomDigits (int length) {
    var random = new Random ();
    string s = string.Empty;
    char [] alphabets = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    for (int i = 0; i < length; i ++)
        s = String.Concat (s, alphabets [random.Next (0, 26)].ToString () + " ");

    Console.WriteLine (s);
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3943302_3945193_19_33
3943302_3945193_34_45
Title: Need help designing class factory 
----------------------------------------

public static T Clone < T > (T source) {
    Debug.Assert (typeof (T).IsSerializable);
    if (! typeof (T).IsSerializable) {
        throw new SerializationException (ExceptionMessages.ObjectNoSerializable);
    }
    T result;
    IGenericFormatter formatter = new GenericBinaryFormatter ();
    using (MemoryStream stream = new MemoryStream ())
    {
        formatter.Serialize (stream, source);
        stream.Seek (0, SeekOrigin.Begin);
        result = formatter.Deserialize < T > (stream);
    } return result;
}
----------------------------------------

public static T CloneXml < T > (T source) {
    T result;
    DataContractSerializer serializer = new DataContractSerializer (typeof (T));
    using (MemoryStream memory = new MemoryStream ())
    {
        serializer.WriteObject (memory, source);
        memory.Position = 0;
        result = (T) serializer.ReadObject (memory);
    } return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3945322_3945334_1_14
3945322_3945343_1_16
Title: Same number in all 5 boxes and it's supposed to be 5 different numbers in 5 different boxes 
----------------------------------------

public void RandomNumber (int min, int max) {
    Random r = new Random (DateTime.Now.Millisecond);
    int num = r.Next (min, max);
    lblPickFive_1.Text = num.ToString ();
    int num2 = r.Next (min, max);
    lblPickFive_2.Text = num2.ToString ();
    int num3 = r.Next (min, max);
    lblPickFive_3.Text = num3.ToString ();
    int num4 = r.Next (min, max);
    lblPickFive_4.Text = num4.ToString ();
    int num5 = r.Next (min, max);
    lblPickFive_5.Text = num5.ToString ();
}
----------------------------------------

public void RandomNumber (int min, int max) {
    Random random = new Random ();
    int num = random.Next (min, max);
    int num2 = random.Next (min, max);
    int num3 = random.Next (min, max);
    int num4 = random.Next (min, max);
    int num5 = random.Next (min, max);
    lblPickFive_1.Text = num.ToString ();
    lblPickFive_2.Text = num2.ToString ();
    lblPickFive_3.Text = num3.ToString ();
    lblPickFive_4.Text = num4.ToString ();
    lblPickFive_5.Text = num5.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39461801_39462269_9_25
39461801_52395369_6_23
Title: Unity Add Default Namespace to Script Template? 
----------------------------------------

public static void OnWillCreateAsset (string path) {
    path = path.Replace (".meta", "");
    int index = path.LastIndexOf (".");
    string file = path.Substring (index);
    if (file != ".cs" && file != ".js" && file != ".boo")
        return;

    index = Application.dataPath.LastIndexOf ("Assets");
    path = Application.dataPath.Substring (0, index) + path;
    file = System.IO.File.ReadAllText (path);
    file = file.Replace ("#CREATIONDATE#", System.DateTime.Now + "");
    file = file.Replace ("#PROJECTNAME#", PlayerSettings.productName);
    file = file.Replace ("#SMARTDEVELOPERS#", PlayerSettings.companyName);
    System.IO.File.WriteAllText (path, file);
    AssetDatabase.Refresh ();
}
----------------------------------------

public static void OnWillCreateAsset (string path) {
    path = path.Replace (".meta", "");
    int index = path.LastIndexOf (".");
    if (index < 0)
        return;

    string file = path.Substring (index);
    if (file != ".cs" && file != ".js" && file != ".boo")
        return;

    index = Application.dataPath.LastIndexOf ("Assets");
    path = Application.dataPath.Substring (0, index) + path;
    file = System.IO.File.ReadAllText (path);
    string lastPart = path.Substring (path.IndexOf ("Assets"));
    string _namespace = lastPart.Substring (0, lastPart.LastIndexOf ('/'));
    _namespace = _namespace.Replace ('/', '.');
    file = file.Replace ("#NAMESPACE#", _namespace);
    System.IO.File.WriteAllText (path, file);
    AssetDatabase.Refresh ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39469756_39469805_1_15
39469756_39469854_1_16
Title: The out parameter must be assigned to before control leaves the current methods 
----------------------------------------

static void ReadData (out List < Tourist > tourists) {
    const string Input = "..\\..\\Duomenys.txt";
    tourists = new List < Tourist > ();
    string [] lines = File.ReadAllLines (Input);
    foreach (string line in lines) {
        string [] values = line.Split (';');
        string firstName = values [0];
        string lastName = values [1];
        double money = Double.Parse (values [2]);
        tourists.Add (new Tourist (firstName, lastName, money));
    }
}
----------------------------------------

static List < Tourist > ReadData () {
    List < Tourist > tourists = new List < Tourist > ();
    const string Input = "..\\..\\Duomenys.txt";
    string [] lines = File.ReadAllLines (Input);
    foreach (string line in lines) {
        tourists.Add (new Tourist (firstName, lastName, money));
    }
    return tourists;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3949033_3949066_1_13
3949033_3949658_1_25
Title: List<> Get next or previous element that satisfys a condition 
----------------------------------------

public Player GetNextPlayer () {
    int currentPlayerIndex = Players.FindIndex (o = > o.IsThisPlayersTurn);
    int next = _direction.Equals (Direction.Forwards) ? 1 : - 1;
    int nextPlayerIndex = currentPlayerIndex;
    do
        {
            nextPlayerIndex = (nextPlayerIndex + next + Players.Count) % Players.Count;
        } while (Players [nextPlayerIndex].HasNoCards && nextPlayerIndex != currentPlayerIndex);
    return Players [nextPlayerIndex];
}
----------------------------------------

private Player GetNextPlayer () {
    var players = Players.AsEnumerable ();
    if (Direction.Equals (Direction.Backwards)) {
        players = players.Reverse ();
    }
    bool selectNextPlayer = false;
    foreach (Player player in players) {
        if (selectNextPlayer && ! player.PlayerState.Equals (PlayerState.HasNoCards)) {
            return player;
        }
        if (player.IsThisPlayersTurn) {
            selectNextPlayer = true;
        }
    }
    return players.First (o = > ! o.PlayerState.Equals (PlayerState.HasNoCards));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3949033_3949066_1_13
3949033_3952068_1_18
Title: List<> Get next or previous element that satisfys a condition 
----------------------------------------

public Player GetNextPlayer () {
    int currentPlayerIndex = Players.FindIndex (o = > o.IsThisPlayersTurn);
    int next = _direction.Equals (Direction.Forwards) ? 1 : - 1;
    int nextPlayerIndex = currentPlayerIndex;
    do
        {
            nextPlayerIndex = (nextPlayerIndex + next + Players.Count) % Players.Count;
        } while (Players [nextPlayerIndex].HasNoCards && nextPlayerIndex != currentPlayerIndex);
    return Players [nextPlayerIndex];
}
----------------------------------------

private Player GetNextPlayer () {
    if (! Players.Any ())
        throw new InvalidOperationException ("No players.");

    if (Players.Count (p = > p.IsThisPlayersTurn) != 1) {
        throw new InvalidOperationException ("It must be one--and only one--player's turn.");
    }
    var current = Players.Single (p = > p.IsThisPlayersTurn);
    var subsequent = Players.Concat (Players).SkipWhile (p = > p != current).Skip (1).TakeWhile (p = > p != current);
    if (_direction == Direction.Backwards) {
        subsequent = subsequent.Reverse ();
    }
    return subsequent.FirstOrDefault (p = > p.PlayerState != PlayerState.HasNoCards);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3949033_3949658_1_25
3949033_3952068_1_18
Title: List<> Get next or previous element that satisfys a condition 
----------------------------------------

private Player GetNextPlayer () {
    var players = Players.AsEnumerable ();
    if (Direction.Equals (Direction.Backwards)) {
        players = players.Reverse ();
    }
    bool selectNextPlayer = false;
    foreach (Player player in players) {
        if (selectNextPlayer && ! player.PlayerState.Equals (PlayerState.HasNoCards)) {
            return player;
        }
        if (player.IsThisPlayersTurn) {
            selectNextPlayer = true;
        }
    }
    return players.First (o = > ! o.PlayerState.Equals (PlayerState.HasNoCards));
}
----------------------------------------

private Player GetNextPlayer () {
    if (! Players.Any ())
        throw new InvalidOperationException ("No players.");

    if (Players.Count (p = > p.IsThisPlayersTurn) != 1) {
        throw new InvalidOperationException ("It must be one--and only one--player's turn.");
    }
    var current = Players.Single (p = > p.IsThisPlayersTurn);
    var subsequent = Players.Concat (Players).SkipWhile (p = > p != current).Skip (1).TakeWhile (p = > p != current);
    if (_direction == Direction.Backwards) {
        subsequent = subsequent.Reverse ();
    }
    return subsequent.FirstOrDefault (p = > p.PlayerState != PlayerState.HasNoCards);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3953359_3953381_1_16
3953359_3953408_6_29
Title: How to create a Generic Bubble Sorting in c# 
----------------------------------------

public static void BubbleSorting < T > (T [] array) where T : Icomparable {
    for (int outer = Length; outer >= 1; outer --) {
        for (int inner = 0; inner < outer - 1; inner ++) {
            if (array [inner].CompareTo (array [inner + 1]) > 0) {
                T Swap = array [inner];
                array [inner] = array [inner + 1];
                array [inner + 1] = Swap;
            }
        }
    }
}
----------------------------------------

public static void BubbleSort < T > (T [] list, IComparer < T > comparer) {
    bool KeepIterating = true;
    while (KeepIterating) {
        KeepIterating = false;
        for (int i = 0; i < list.Length - 1; i ++) {
            T x = list [i];
            T y = list [i + 1];
            if (comparer.Compare (x, y) > 0) {
                list [i] = y;
                list [i + 1] = x;
                KeepIterating = true;
                for (int j = 0; j < list.Length; j ++) {
                    Console.WriteLine ("{0} {1}", j, list [j]);
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39551271_39551335_1_14
39551271_39551336_1_13
Title: To write summation of numbers with a for-loop 
----------------------------------------

private static void SumNumbers () {
    int numOfInput = 3;
    int index;
    int num = 0;
    for (index = 1; index <= numOfInput; index ++) {
        Console.WriteLine ("Please give the value of no " + index);
        num += int.Parse (Console.ReadLine ());
    }
    Console.WriteLine ("The sum is:" + num.ToString ());
    Console.ReadLine ();
}
----------------------------------------

private void SumNumbers () {
    int index;
    int num = 0;
    for (index = 0; index < numOfInput; index ++) {
        Console.WriteLine ("Please give the value of no " + index);
        num += int.Parse (Console.ReadLine ());
        Console.WriteLine ("The sum so far is : " + num.ToString ("N0") + ". Enter another number to continue summation.");
    }
    Console.WriteLine ("Maximum input received. Total is: " + num.ToString ("N0") + ".");
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39581236_39603339_10_30
39581236_39603339_59_97
Title: Convert JObject to multi-dimensional array 
----------------------------------------

object ReadJsonGeneric < T > (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (reader.TokenType == JsonToken.Null)
        return null;

    if (reader.TokenType == JsonToken.StartArray) {
        var list = serializer.Deserialize < List < List < List < T > > > > (reader);
        return list.Select ((l, i) = > new KeyValuePair < int, List < List < T > > > (i, l)).To3DArray ();
    } else if (reader.TokenType == JsonToken.StartObject) {
        var dictionary = serializer.Deserialize < SortedDictionary < int, List < List < T > > > > (reader);
        return dictionary.To3DArray ();
    } else {
        throw new JsonSerializationException ("Invalid reader.TokenType " + reader.TokenType);
    }
}
----------------------------------------

public static T [,,] To3DArray < T > (this IEnumerable < KeyValuePair < int, List < List < T > > > > jaggedArray) {
    if (jaggedArray == null)
        throw new ArgumentNullException ("jaggedArray");

    var counts = new int [3];
    foreach (var pair in jaggedArray) {
        var i = pair.Key;
        counts [0] = Math.Max (i + 1, counts [0]);
        if (pair.Value == null)
            continue;

        var jCount = pair.Value.Count;
        counts [1] = Math.Max (jCount, counts [1]);
        for (int j = 0; j < jCount; j ++) {
            if (pair.Value [j] == null)
                continue;

            var kCount = pair.Value [j].Count;
            counts [2] = Math.Max (kCount, counts [2]);
        }
    }
    var array = new T [counts [0], counts [1], counts [2]];
    foreach (var pair in jaggedArray) {
        var i = pair.Key;
        if (pair.Value == null)
            continue;

        var jCount = pair.Value.Count;
        for (int j = 0; j < jCount; j ++) {
            if (pair.Value [j] == null)
                continue;

            var kCount = pair.Value [j].Count;
            for (int k = 0; k < kCount; k ++)
                array [i, j, k] = pair.Value [j] [k];

        }
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39587648_39587793_9_21
39587648_39587830_9_23
Title: How use return between methods 
----------------------------------------

public bool CheckValidation () {
    var flag = false;
    if (string.IsNullOrWhiteSpace (txtphysi.Text)) {
        lblerrmsg.Visible = true;
        lblerrmsg.Text = "Please Enter Physician Name";
        return flag;
    }
    flag = true;
    return flag;
}
----------------------------------------

public bool CheckValidation () {
    if (string.isnullorEmpty (txtphysi.Text.Trim ())) {
        lblerrmsg.Visible = true;
        lblerrmsg.Text = "Please Enter Physician Name";
        return false;
    } else {
        return true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3961278_36653554_1_29
3961278_36803501_1_30
Title: Word wrap a string in multiple lines 
----------------------------------------

List < string > WrapText (string text, int maxWidthInPixels, Font font) {
    string [] originalLines = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    int actualWidth = 0;
    foreach (var item in originalLines) {
        Size szText = TextRenderer.MeasureText (item, font);
        actualLine.Append (item + " ");
        actualWidth += szText.Width;
        if (actualWidth > maxWidthInPixels) {
            wrappedLines.Add (actualLine.ToString ());
            actualLine.Clear ();
            actualWidth = 0;
        }
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------

static List < string > WrapText (string text, double pixels, Font font) {
    string [] originalLines = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    double actualWidth = 0;
    foreach (var item in originalLines) {
        int w = TextRenderer.MeasureText (item + " ", font).Width;
        actualWidth += w;
        if (actualWidth > pixels) {
            wrappedLines.Add (actualLine.ToString ());
            actualLine.Clear ();
            actualWidth = w;
        }
        actualLine.Append (item + " ");
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3961278_36653554_1_29
3961278_42997717_1_37
Title: Word wrap a string in multiple lines 
----------------------------------------

List < string > WrapText (string text, int maxWidthInPixels, Font font) {
    string [] originalLines = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    int actualWidth = 0;
    foreach (var item in originalLines) {
        Size szText = TextRenderer.MeasureText (item, font);
        actualLine.Append (item + " ");
        actualWidth += szText.Width;
        if (actualWidth > maxWidthInPixels) {
            wrappedLines.Add (actualLine.ToString ());
            actualLine.Clear ();
            actualWidth = 0;
        }
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------

public static List < string > WrapText (string text, double pixels, string fontFamily, float emSize) {
    string [] originalWords = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    double actualWidth = 0;
    foreach (string word in originalWords) {
        string wordWithSpace = word + " ";
        FormattedText formattedWord = new FormattedText (wordWithSpace, CultureInfo.CurrentCulture, System.Windows.FlowDirection.LeftToRight, new Typeface (fontFamily), emSize, System.Windows.Media.Brushes.Black);
        actualLine.Append (wordWithSpace);
        actualWidth += formattedWord.Width;
        if (actualWidth > pixels) {
            actualLine.Remove (actualLine.Length - wordWithSpace.Length, wordWithSpace.Length);
            wrappedLines.Add (actualLine.ToString ());
            actualLine = new StringBuilder ();
            actualLine.Append (wordWithSpace);
            actualWidth = 0;
            actualWidth += formattedWord.Width;
        }
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3961278_36803501_1_30
3961278_42997717_1_37
Title: Word wrap a string in multiple lines 
----------------------------------------

static List < string > WrapText (string text, double pixels, Font font) {
    string [] originalLines = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    double actualWidth = 0;
    foreach (var item in originalLines) {
        int w = TextRenderer.MeasureText (item + " ", font).Width;
        actualWidth += w;
        if (actualWidth > pixels) {
            wrappedLines.Add (actualLine.ToString ());
            actualLine.Clear ();
            actualWidth = w;
        }
        actualLine.Append (item + " ");
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------

public static List < string > WrapText (string text, double pixels, string fontFamily, float emSize) {
    string [] originalWords = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    double actualWidth = 0;
    foreach (string word in originalWords) {
        string wordWithSpace = word + " ";
        FormattedText formattedWord = new FormattedText (wordWithSpace, CultureInfo.CurrentCulture, System.Windows.FlowDirection.LeftToRight, new Typeface (fontFamily), emSize, System.Windows.Media.Brushes.Black);
        actualLine.Append (wordWithSpace);
        actualWidth += formattedWord.Width;
        if (actualWidth > pixels) {
            actualLine.Remove (actualLine.Length - wordWithSpace.Length, wordWithSpace.Length);
            wrappedLines.Add (actualLine.ToString ());
            actualLine = new StringBuilder ();
            actualLine.Append (wordWithSpace);
            actualWidth = 0;
            actualWidth += formattedWord.Width;
        }
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3961278_3961597_13_46
3961278_42997717_1_37
Title: Word wrap a string in multiple lines 
----------------------------------------

static List < string > WrapText (string text, double pixels, string fontFamily, float emSize) {
    string [] originalLines = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    double actualWidth = 0;
    foreach (var item in originalLines) {
        FormattedText formatted = new FormattedText (item, CultureInfo.CurrentCulture, System.Windows.FlowDirection.LeftToRight, new Typeface (fontFamily), emSize, Brushes.Black);
        actualLine.Append (item + " ");
        actualWidth += formatted.Width;
        if (actualWidth > pixels) {
            wrappedLines.Add (actualLine.ToString ());
            actualLine.Clear ();
            actualWidth = 0;
        }
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------

public static List < string > WrapText (string text, double pixels, string fontFamily, float emSize) {
    string [] originalWords = text.Split (new string [] {" "}, StringSplitOptions.None);
    List < string > wrappedLines = new List < string > ();
    StringBuilder actualLine = new StringBuilder ();
    double actualWidth = 0;
    foreach (string word in originalWords) {
        string wordWithSpace = word + " ";
        FormattedText formattedWord = new FormattedText (wordWithSpace, CultureInfo.CurrentCulture, System.Windows.FlowDirection.LeftToRight, new Typeface (fontFamily), emSize, System.Windows.Media.Brushes.Black);
        actualLine.Append (wordWithSpace);
        actualWidth += formattedWord.Width;
        if (actualWidth > pixels) {
            actualLine.Remove (actualLine.Length - wordWithSpace.Length, wordWithSpace.Length);
            wrappedLines.Add (actualLine.ToString ());
            actualLine = new StringBuilder ();
            actualLine.Append (wordWithSpace);
            actualWidth = 0;
            actualWidth += formattedWord.Width;
        }
    }
    if (actualLine.Length > 0)
        wrappedLines.Add (actualLine.ToString ());

    return wrappedLines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39617884_39618402_16_28
39617884_39618402_1_14
Title: XML Deserialization encoding issue 
----------------------------------------

public static T Deserialize < T > (string xmlText) {
    try {
        var stringReader = new System.IO.StringReader (xmlText);
        var serializer = new XmlSerializer (typeof (T));
        return (T) serializer.Deserialize (stringReader);
    }
    catch {
        throw;
    }
}
----------------------------------------

public static string Serialize < T > (T dataToSerialize) {
    try {
        var stringwriter = new System.IO.StringWriter ();
        var serializer = new XmlSerializer (typeof (T));
        serializer.Serialize (stringwriter, dataToSerialize);
        return stringwriter.ToString ();
    }
    catch {
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39621262_39621970_6_17
39621262_39623131_1_19
Title: looking for string split and update each property 
----------------------------------------

static void Main (string [] args) {
    DataCls dataCls = new DataCls ();
    string message = "[AE][1W] Message:sample message Priority:Info Time:Sep 21 2016  1:13PM Tag:/abc/pqr/xyz";
    message = message.Replace ("Message:", "::").Replace ("Priority:", "::").Replace ("Time:", "::").Replace ("Tag:", "::");
    var parts = message.Split ("::");
    dataCls.Message = parts [0];
    dataCls.Priority = parts [1];
    dataCls.Time = Convert.ToDateTime (parts [2]);
    dataCls.Tag = parts [3];
}
----------------------------------------

static void Main (string [] args) {
    DataCls dataCls = new DataCls ();
    string Message = "[AE][1W] Message:sample message Priority:Info Time:Sep 21 2016  1:13PM Tag:/abc/pqr/xyz";
    dataCls.Message = Message.Substring (Message.IndexOf ("Message:") + 8);
    dataCls.Message = dataCls.Message.Substring (0, dataCls.Message.LastIndexOf ("Priority"));
    dataCls.Priority = Message.Substring (Message.IndexOf ("Priority:") + 9);
    dataCls.Priority = dataCls.Priority.Substring (0, dataCls.Priority.LastIndexOf ("Time"));
    string Time = Message.Substring (Message.IndexOf ("Time"));
    Time = Time.Substring (0, Time.LastIndexOf ("Tag"));
    dataCls.Time = Convert.ToDateTime (Time.Substring (Time.IndexOf (":") + 1));
    dataCls.Tag = Message.Substring (Message.IndexOf ("Tag:") + 4);
    dataCls.Tag = dataCls.Tag.Substring (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39637038_39637475_1_20
39637038_39640670_1_17
Title: Avoid duplicate form loading in c# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    FormCollection fc = Application.OpenForms;
    bool present = false;
    foreach (Form frm in fc) {
        if (frm.Name == "Form2") {
            present = true;
        }
    }
    if (! present) {
        Form2 f2 = new Form2 ();
        f2.Show ();
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    Form2 f2 = null;
    for (int i = 0; i < Application.OpenForms.Count; i ++) {
        if (Application.OpenForms [i] is Form2) {
            f2 = Application.OpenForms [i];
            break;
        }
    }
    if (f2 == null)
        f2 = new Form2 ();

    f2.Show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39637038_39637475_1_20
39637038_39658831_1_18
Title: Avoid duplicate form loading in c# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    FormCollection fc = Application.OpenForms;
    bool present = false;
    foreach (Form frm in fc) {
        if (frm.Name == "Form2") {
            present = true;
        }
    }
    if (! present) {
        Form2 f2 = new Form2 ();
        f2.Show ();
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    Form form = null;
    foreach (Form frm in Application.OpenForms)
        if (frm.Name == "Form2") {
            form = frm;
            break;
        }

    if (form == null)
        form = new Form2 ();

    form.Show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39637038_39640670_1_17
39637038_39658831_1_18
Title: Avoid duplicate form loading in c# 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    Form2 f2 = null;
    for (int i = 0; i < Application.OpenForms.Count; i ++) {
        if (Application.OpenForms [i] is Form2) {
            f2 = Application.OpenForms [i];
            break;
        }
    }
    if (f2 == null)
        f2 = new Form2 ();

    f2.Show ();
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    Form form = null;
    foreach (Form frm in Application.OpenForms)
        if (frm.Name == "Form2") {
            form = frm;
            break;
        }

    if (form == null)
        form = new Form2 ();

    form.Show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39660472_39662161_4_21
39660472_39662188_1_18
Title: Entity Framework 6 - Call a method on removing an entity from the database 
----------------------------------------

public override int SaveChanges () {
    var changedEntities = ChangeTracker.Entries ();
    foreach (var changedEntity in changedEntities) {
        if (changedEntity.State == System.Data.Entity.EntityState.Deleted) {
            tblProductMaster info = changedEntity.Entity as tblProductMaster;
            if (info != null) {
                int a = 0;
            }
        }
    }
    return base.SaveChanges ();
}
----------------------------------------

public override int SaveChanges () {
    var deletedMyFileEntityList = ChangeTracker.Entries ().Where (f = > f.Entity is MyFile && f.State == EntityState.Deleted);
    foreach (var entity in deletedMyFileEntityList) {
        try {
            entity.DisposeFile ();
        }
        catch (Exception ex) {
        }
    }
    return base.SaveChanges ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39694382_39694421_1_16
39694382_39699528_1_15
Title: Show dialogbox only once in a for loop - Closed 
----------------------------------------

public void BeforeSave (BCE.AutoCount.Invoicing.Sales.SalesOrder.SalesOrderBeforeSaveEventArgs e) {
    bool hasEmpty = false;
    for (int i = 0; i < e.MasterRecord.DetailCount; i ++) {
        if (String.IsNullOrEmpty (e.MasterRecord.GetDetailRecord (i).YourPONo.ToString ())) {
            hasEmpty = true;
        }
    }
    if (hasEmpty) {
        MessageBox.Show ("You left Your PO No empty. Please check it carefully.");
    }
}
----------------------------------------

public void BeforeSave (BCE.AutoCount.Invoicing.Sales.SalesOrder.SalesOrderBeforeSaveEventArgs e) {
    int tt = 0;
    for (int i = 0; i < e.MasterRecord.DetailCount; i ++) {
        if (tt == 0) {
            if (String.IsNullOrEmpty (e.MasterRecord.GetDetailRecord (i).YourPONo.ToString ())) {
                MessageBox.Show ("You left Your PO No empty. Please check it carefully.");
                tt = 1;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39694382_39694469_1_13
39694382_39699528_1_15
Title: Show dialogbox only once in a for loop - Closed 
----------------------------------------

public void BeforeSave (BCE.AutoCount.Invoicing.Sales.SalesOrder.SalesOrderBeforeSaveEventArgs e) {
    bool flag = false;
    for (int i = 0; i < e.MasterRecord.DetailCount; i ++) {
        if (String.IsNullOrEmpty (e.MasterRecord.GetDetailRecord (i).YourPONo.ToString ())) {
            flag = true;
            break;
        }
    }
    if (flag)
        MessageBox.Show ("You left Your PO No empty. Please check it carefully.");

}
----------------------------------------

public void BeforeSave (BCE.AutoCount.Invoicing.Sales.SalesOrder.SalesOrderBeforeSaveEventArgs e) {
    int tt = 0;
    for (int i = 0; i < e.MasterRecord.DetailCount; i ++) {
        if (tt == 0) {
            if (String.IsNullOrEmpty (e.MasterRecord.GetDetailRecord (i).YourPONo.ToString ())) {
                MessageBox.Show ("You left Your PO No empty. Please check it carefully.");
                tt = 1;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3969476_3969554_6_32
3969476_3969595_12_24
Title: How to Pass a variable to another Thread 
----------------------------------------

static void Main () {
    ThreadStart threadDelegate = new ThreadStart (Work.DoWork);
    Thread newThread = new Thread (threadDelegate);
    newThread.Start ();
    Work w = new Work ();
    w.Data = 42;
    threadDelegate = new ThreadStart (w.DoMoreWork);
    newThread = new Thread (threadDelegate);
    newThread.Start ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Taking data from Main Thread\n->");
    string message = Console.ReadLine ();
    WorkerClass workerClass = new WorkerClass (message);
    ThreadStart newThread = new ThreadStart (workerClass.DoWork);
    Thread myThread = new Thread (newThread);
    myThread.Start ();
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3969476_3969554_6_32
3969476_3969691_11_23
Title: How to Pass a variable to another Thread 
----------------------------------------

static void Main () {
    ThreadStart threadDelegate = new ThreadStart (Work.DoWork);
    Thread newThread = new Thread (threadDelegate);
    newThread.Start ();
    Work w = new Work ();
    w.Data = 42;
    threadDelegate = new ThreadStart (w.DoMoreWork);
    newThread = new Thread (threadDelegate);
    newThread.Start ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Taking data from Main Thread\n->");
    string message = Console.ReadLine ();
    CallContext.LogicalSetData ("time", DateTime.Now);
    ThreadStart newThread = new ThreadStart (delegate {
        Write (message);
    });
    Thread myThread = new Thread (newThread);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3969476_3969595_12_24
3969476_3969691_11_23
Title: How to Pass a variable to another Thread 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Taking data from Main Thread\n->");
    string message = Console.ReadLine ();
    WorkerClass workerClass = new WorkerClass (message);
    ThreadStart newThread = new ThreadStart (workerClass.DoWork);
    Thread myThread = new Thread (newThread);
    myThread.Start ();
    Console.Read ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Taking data from Main Thread\n->");
    string message = Console.ReadLine ();
    CallContext.LogicalSetData ("time", DateTime.Now);
    ThreadStart newThread = new ThreadStart (delegate {
        Write (message);
    });
    Thread myThread = new Thread (newThread);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39710704_39710842_11_21
39710704_39711072_3_23
Title: My code in C# for a simple currency conversion program won't work properly for me 
----------------------------------------

static void Main (string [] args) {
    float dollars, conversion_rate, euros;
    conversion_rate = 1.12f;
    Console.WriteLine ("Enter in Dollars:");
    dollars = float.Parse (Console.ReadLine ());
    euros = dollars * conversion_rate;
    Console.WriteLine ("Dollars:" + euros);
    Console.ReadLine ();
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    const decimal conversion_rate = 1.12m;
    decimal dollars = 0.00m;
    do
        {
            Console.WriteLine ("Enter in Dollars:");
        } while (! decimal.TryParse (Console.ReadLine (), out dollars));
    Console.WriteLine ("Dollars: {0} are equal to {1} euros", dollars, dollars * conversion_rate);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39713992_39714026_1_21
39713992_39714481_1_22
Title: How to create click event handler for a dynamic 2D array of buttons in C# 
----------------------------------------

public void generateButtonsCard (Panel cardPanel) {
    for (int y = 0; y <= 4; y ++) {
        for (int x = 0; x <= 4; x ++) {
            cardButtons [x, y] = new Button ();
            cardButtons [x, y].Size = new Size (80, 80);
            cardButtons [x, y].Name = "btn" + x + "" + y;
            cardButtons [x, y].Location = new Point (80 * x, 80 * y);
            cardButtons [x, y].Click += btn_Click;
            cardPanel.Controls.Add (cardButtons [x, y]);
        }
    }
    RNGCard ();
    cardButtons [2, 2].Text = "Free Space";
}
----------------------------------------

public void generateButtonsCard (Panel cardPanel) {
    for (int y = 0; y <= 4; y ++) {
        for (int x = 0; x <= 4; x ++) {
            var button = new Button ();
            button.Size = new Size (80, 80);
            button.Name = "btn" + x + "" + y;
            button.Location = new Point (80 * x, 80 * y);
            button.Click += (s, e) = > {
            };
            cardPanel.Controls.Add (button);
            cardButtons [x, y] = button;
        }
    }
    RNGCard ();
    cardButtons [2, 2].Text = "Free Space";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39713992_39714143_1_21
39713992_39714481_1_22
Title: How to create click event handler for a dynamic 2D array of buttons in C# 
----------------------------------------

public void generateButtonsCard (Panel cardPanel) {
    for (int y = 0; y <= 4; y ++) {
        for (int x = 0; x <= 4; x ++) {
            cardButtons [x, y] = new XYButton (x, y);
            cardButtons [x, y].Size = new Size (80, 80);
            cardButtons [x, y].Name = "btn" + x + "" + y;
            cardButtons [x, y].Location = new Point (80 * x, 80 * y);
            cardButtons [x, y].Click += btn_Click;
            cardPanel.Controls.Add (cardButtons [x, y]);
        }
    }
    RNGCard ();
    cardButtons [2, 2].Text = "Free Space";
}
----------------------------------------

public void generateButtonsCard (Panel cardPanel) {
    for (int y = 0; y <= 4; y ++) {
        for (int x = 0; x <= 4; x ++) {
            var button = new Button ();
            button.Size = new Size (80, 80);
            button.Name = "btn" + x + "" + y;
            button.Location = new Point (80 * x, 80 * y);
            button.Click += (s, e) = > {
            };
            cardPanel.Controls.Add (button);
            cardButtons [x, y] = button;
        }
    }
    RNGCard ();
    cardButtons [2, 2].Text = "Free Space";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39725582_39726663_1_20
39725582_39726663_22_37
Title: "Find number of cells in a row that share the same value then store those coordinates" 
----------------------------------------

private static IEnumerable < Tuple < int, int > > ScanLine < T > (IEnumerable < T > source, T sample, int atLeast) {
    int count = 0;
    int index = - 1;
    foreach (var item in source) {
        index += 1;
        if (Object.Equals (item, sample))
            count += 1;
        else {
            if (count >= atLeast)
                yield return new Tuple < int, int > (index - count, index - 1);

            count = 0;
        }
    }
    if (count >= atLeast)
        yield return new Tuple < int, int > (index - count + 1, index);

}
----------------------------------------

private static IEnumerable < Tuple < Point, Point > > ScanBoard < T > (T [,] source, T sample, int atLeast) {
    for (int i = 0; i < source.GetLength (0); ++ i) {
        var line = Enumerable.Range (0, source.GetLength (1)).Select (c = > source [i, c]);
        foreach (var item in ScanLine (line, sample, atLeast))
            yield return new Tuple < Point, Point > (new Point (item.Item1, i), new Point (item.Item2, i));

    }
    for (int i = 0; i < source.GetLength (1); ++ i) {
        var line = Enumerable.Range (0, source.GetLength (0)).Select (r = > source [r, i]);
        foreach (var item in ScanLine (line, sample, atLeast))
            yield return new Tuple < Point, Point > (new Point (i, item.Item1), new Point (i, item.Item2));

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39746635_39746678_3_20
39746635_39747317_24_34
Title: How to factorize try/catch code? 
----------------------------------------

void Main () {
    Dictionary < Type, Action > exceptionHandlers = new Dictionary < Type, Action > ();
    exceptionHandlers.Add (typeof (NullReferenceException), ProcessErrorA);
    try {
    }
    catch (Exception e) {
        if (exceptionHandlers.ContainsKey (e.GetType ())) {
            exceptionHandlers [e.GetType ()] ();
        } else {
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    var p = new Program ();
    int a = 6;
    int b = 2;
    p.CallExternalFunction (() = > {
        p.Divide_InExternalLib (a, b);
    });
    b = 0;
    p.CallExternalFunction (() = > {
        p.Divide_InExternalLib (a, b);
    });
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39774189_39774263_1_12
39774189_39774352_1_14
Title: How to write the Fibonacci sequence using array type inside a library in C#? 
----------------------------------------

public static int [] Fibonacci (int numElement) {
    int n = numElement - 1;
    int [] a = new int [numElement + 1];
    a [0] = 0;
    a [1] = 1;
    for (int i = 2; i <= n; i ++) {
        a [i] = a [i - 2] + a [i - 1];
    }
    return a;
}
----------------------------------------

public static int [] Fibonacci (int numElement) {
    int [] a = new int [numElement];
    a [0] = 0;
    a [1] = 1;
    for (int i = 2; i < numElement; i ++) {
        a [i] = a [i - 2] + a [i - 1];
    }
    return a;
}
----------------------------------------

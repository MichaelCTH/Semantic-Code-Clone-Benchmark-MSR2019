$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39774189_39774263_1_12
39774189_39774500_1_19
Title: How to write the Fibonacci sequence using array type inside a library in C#? 
----------------------------------------

public static int [] Fibonacci (int numElement) {
    int n = numElement - 1;
    int [] a = new int [numElement + 1];
    a [0] = 0;
    a [1] = 1;
    for (int i = 2; i <= n; i ++) {
        a [i] = a [i - 2] + a [i - 1];
    }
    return a;
}
----------------------------------------

public int [] Fibonacci (int numElement) {
    if (numElement < 0)
        throw new ArgumentOutOfRangeException ("numElement", numElement, "Fibonnaci number to get must be greater or equal than 0");

    var n = numElement + 1;
    var a = new int [n];
    a [0] = 0;
    if (numElement == 0)
        return a;

    a [1] = 1;
    for (var i = 2; i < n; i ++)
        a [i] = a [i - 2] + a [i - 1];

    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39774189_39774352_1_14
39774189_39774500_1_19
Title: How to write the Fibonacci sequence using array type inside a library in C#? 
----------------------------------------

public static int [] Fibonacci (int numElement) {
    int [] a = new int [numElement];
    a [0] = 0;
    a [1] = 1;
    for (int i = 2; i < numElement; i ++) {
        a [i] = a [i - 2] + a [i - 1];
    }
    return a;
}
----------------------------------------

public int [] Fibonacci (int numElement) {
    if (numElement < 0)
        throw new ArgumentOutOfRangeException ("numElement", numElement, "Fibonnaci number to get must be greater or equal than 0");

    var n = numElement + 1;
    var a = new int [n];
    a [0] = 0;
    if (numElement == 0)
        return a;

    a [1] = 1;
    for (var i = 2; i < n; i ++)
        a [i] = a [i - 2] + a [i - 1];

    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39788487_39789088_1_19
39788487_39789155_1_20
Title: All the rows are invisible in the grid view 
----------------------------------------

private void AvoidDuplicate () {
    Dictionary < string, string > checkdictionary = new Dictionary < string, string > ();
    for (int i = 0; i < grdView.Rows.Count; i ++) {
        TextBox txtnewvalue = grdView.Rows [i].FindControl ("txtLicenseNumber") as TextBox;
        string newvalue = txtnewvalue.Text.ToString ();
        if (! checkdictionary.ContainsKey (newvalue)) {
            checkdictionary [newvalue] = "something";
        } else {
            grdView.Rows [i].Visible = false;
        }
    }
}
----------------------------------------

private void AvoidDuplicate () {
    for (int i = 0; i < grdView.Rows.Count; i ++) {
        TextBox txtoldvalue = grdView.Rows [i].FindControl ("txtLicenseNumber") as TextBox;
        string oldvalue = txtoldvalue.Text.ToString ();
        for (int j = 0; j < grdView.Rows.Count; j ++) {
            if (j == i)
                continue;

            TextBox txtnewvalue = grdView.Rows [j].FindControl ("txtLicenseNumber") as TextBox;
            string newvalue = txtnewvalue.Text.ToString ();
            if (oldvalue == newvalue) {
                grdView.Rows [j].Visible = false;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39799698_39799718_10_18
39799698_39799879_1_12
Title: Index was out of the bounds of the array 
----------------------------------------

static void Main (string [] args) {
    if (args.Length > 0)
        Console.WriteLine ("First Name is " + args [0]);

    if (args.Length > 1)
        Console.WriteLine ("Last Name is " + args [1]);

    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    if (args.Length > 0) {
        Console.WriteLine ("First Name is " + args [0]);
        Console.WriteLine ("Last Name is " + args [1]);
    } else
        Console.WriteLine ("No Command Line Arguments were passed");

    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39801635_39801704_1_27
39801635_39801844_1_33
Title: MVC - How to check if Username is not already taken? 
----------------------------------------

[HttpPost] public ActionResult Register (UserVIewModel reg) {
    if (ModelState.IsValid) {
        if (db.Users.Where (u = > u.UserName == reg.UserName).Any ()) {
        } else {
            var m = new User {UserName = reg.UserName, Email = reg.Email, FirstName = reg.FirstName, LastName = reg.LastName, Password = reg.Password};
            db.Users.Add (m);
            db.SaveChanges ();
            return RedirectToAction ("Login");
        }
    }
    return View ();
}
----------------------------------------

[HttpPost] public ActionResult Register (UserVIewModel reg) {
    if (! ModelState.IsValid) {
        return View (model);
    }
    bool userExists = db.Users.FirstOrDefault (x = > x.UserName == reg.UserName) != null;
    if (userExists) {
        ModelState.AddModelError ("UserName", "UserName taken");
        return View (model);
    }
    var m = new User {UserName = reg.UserName, Email = reg.Email, FirstName = reg.FirstName, LastName = reg.LastName, Password = reg.Password};
    db.Users.Add (m);
    db.SaveChanges ();
    return RedirectToAction ("Login");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39805526_39806338_20_174
39805526_39841501_15_38
Title: How to read xml file having different hierarchy in .net 
----------------------------------------

static void Main (string [] args) {
    XmlReaderSettings settings = new XmlReaderSettings () {IgnoreWhitespace = true};
    XmlReader reader = XmlReader.Create (FILENAME, settings);
    reader.ReadToFollowing ("SubNetwork", "generic.xsd");
    Network.network.name = reader.GetAttribute ("id");
    Network.network.subnetworks = new List < SubNetwork > ();
    string xnNameSpace = reader.LookupNamespace ("xn");
    reader.ReadToFollowing ("SubNetwork", xnNameSpace);
    Sites newSite = null;
    SubNetwork subNetWork = null;
    Boolean endElement = false;
    State state = State.GET_SUBNETWORK;
    while (! reader.EOF) {
        switch (state) {
            case State.GET_SUBNETWORK :
                if (reader.Name != "xn:SubNetwork") {
                    reader.ReadToFollowing ("SubNetwork", xnNameSpace);
                }
                if (! reader.EOF) {
                    subNetWork = new SubNetwork ();
                    Network.network.subnetworks.Add (subNetWork);
                    subNetWork.name = reader.GetAttribute ("id");
                    subNetWork.sites = new List < Sites > ();
                    state = State.GET_MECONTEXT;
                }
                break;
            case State.GET_MECONTEXT :
                if (reader.Name != "xn:MeContext") {
                    if (reader.NodeType == XmlNodeType.EndElement) {
                        endElement = true;
                        state = State.GET_SUBNETWORK;
                    } else {
                        endElement = false;
                        reader.ReadToFollowing ("MeContext", xnNameSpace);
                    }
                }
                if (! reader.EOF && ! endElement) {
                    state = State.GET_CONTAINERS;
                    newSite = new Sites ();
                    subNetWork.sites.Add (newSite);
                    newSite.sitename = reader.GetAttribute ("id");
                    reader.ReadToFollowing ("ManagedElement", xnNameSpace);
                    reader.ReadToFollowing ("VsDataContainer", xnNameSpace);
                }
                break;
            case State.GET_CONTAINERS :
                if (! reader.EOF) {
                    switch (reader.NodeType) {
                        case XmlNodeType.EndElement :
                            state = State.GET_SUBNETWORK_OR_MECONTEXT;
                            break;
                        case XmlNodeType.Text :
                            string text = reader.ReadContentAsString ();
                            break;
                        case XmlNodeType.Element :
                            string elementName = reader.Name;
                            XElement element = (XElement) XElement.ReadFrom (reader);
                            if (elementName == "xn:VsDataContainer") {
                                XElement vsDataENodeBFunction = element.Descendants ().Where (a = > a.Name.LocalName == "vsDataENodeBFunction").FirstOrDefault ();
                                if (vsDataENodeBFunction != null) {
                                    XElement eNBId = element.Descendants ().Where (a = > a.Name.LocalName == "eNBId").FirstOrDefault ();
                                    if (eNBId != null) {
                                        newSite.eNBId = (int) eNBId;
                                    }
                                }
                                List < XElement > vsDataContainers = element.Descendants ().Where (a = > a.Name.LocalName == "VsDataContainer").ToList ();
                                List < XElement > vsDataEUtranCellFDD = vsDataContainers.Where (x = > x.Descendants ().Where (a = > (a.Name.LocalName == "vsDataType") && ((string) a == "vsDataEUtranCellFDD")).Any ()).ToList ();
                                if (vsDataEUtranCellFDD.Any ()) {
                                    List < CellName > cells = vsDataEUtranCellFDD.Select (x = > new CellName () {id = (string) x.Attribute ("id"), earfcndl = (int) x.Descendants ().Where (a = > a.Name.LocalName == "earfcndl").FirstOrDefault (), earfcnul = (int) x.Descendants ().Where (a = > a.Name.LocalName == "earfcnul").FirstOrDefault ()}).ToList ();
                                    if (newSite.cellName == null) {
                                        newSite.cellName = new List < CellName > ();
                                    }
                                    newSite.cellName.AddRange (cells);
                                }
                            }
                            break;
                        default :
                            Console.WriteLine ("Unexpected Results");
                            string elementText = reader.ReadContentAsString ();
                            Console.ReadLine ();
                            break;
                    }
                }
                break;
            case State.GET_SUBNETWORK_OR_MECONTEXT :
                switch (reader.NodeType) {
                    case XmlNodeType.Element :
                        switch (reader.Name) {
                            case "xn:MeContext" :
                                state = State.GET_MECONTEXT;
                                break;
                            case "xn:SubNetwork" :
                                state = State.GET_SUBNETWORK;
                                break;
                            default :
                                reader.ReadStartElement ();
                                break;
                        }
                        break;
                    case XmlNodeType.Text :
                        string text = reader.ReadContentAsString ();
                        break;
                    case XmlNodeType.EndElement :
                        reader.ReadEndElement ();
                        break;
                    default :
                        Console.WriteLine ("Unexpected Results");
                        string elementText = reader.ReadContentAsString ();
                        Console.ReadLine ();
                        break;
                }
                break;
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    StreamReader reader = new StreamReader (inputFilename, Encoding.UTF8);
    StreamWriter writer = new StreamWriter (outputFilename, false, Encoding.UTF8);
    Boolean start = false;
    int i = 0;
    while (i < COPY_LINES) {
        string inputLine = reader.ReadLine ();
        if (inputLine.Contains ("xn:SubNetwork id=\"G-Mum\"")) {
            start = true;
        }
        if (start) {
            writer.WriteLine (inputLine);
            i ++;
        }
    }
    writer.Flush ();
    writer.Close ();
    MemoryStream stream = new MemoryStream (1000000);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39847963_39848210_1_27
39847963_39848792_1_25
Title: how to add an array to an integer c# 
----------------------------------------

static void Main (string [] args) {
    int n, m, i, j, count;
    Console.WriteLine ("please enter the number of students");
    n = Convert.ToInt32 (Console.ReadLine ());
    int [] [] student = new int [n] [];
    for (i = 0; i < n; i ++) {
        count = 0;
        Console.WriteLine ("how many grades does student number " + (i + 1) + "      have?");
        m = Convert.ToInt32 (Console.ReadLine ());
        student [i] = new int [m];
        Console.WriteLine ("please enter student number " + (i + 1) + "'s grades");
        for (j = 0; j < m; j ++) {
            student [i] [j] = Convert.ToInt32 (Console.ReadLine ());
            count += Convert.ToInt32 (student [i] [j]);
        }
        var avg = count / m;
        Console.WriteLine ("the student number " + i + "'s average is " + avg);
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    int n, m, i, j, count = 0, avg;
    Console.WriteLine ("please enter the number of students");
    n = Convert.ToInt32 (Console.ReadLine ());
    int [] [] student = new int [n + 1] [];
    for (i = 1; i <= n; i ++) {
        Console.WriteLine ("how many grades does student number " + i + "      have?");
        m = Convert.ToInt32 (Console.ReadLine ());
        student [i] = new int [m + 1];
        Console.WriteLine ("please enter student number " + i + "'s grades");
        for (j = 1; j <= m; j ++) {
            student [i] [j] = Convert.ToInt32 (Console.ReadLine ());
            count += Convert.ToInt32 (student [i] [j]);
        }
        avg = count / m;
        Console.WriteLine ("the student number " + i + "'s average is " + avg);
        avg = 0;
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3989573_5692363_52_75
3989573_5696384_36_47
Title: Locate row in DataGridView when bound DataView sorted by different column in .NET 
----------------------------------------

private void CreateData () {
    source.Columns.Add ("First", typeof (string));
    source.Columns.Add ("Second", typeof (string));
    var f = from first in Enumerable.Range ('a', 26)
        select new string (new char [] {(char) first});
    var s = f.Reverse ();
    var c1Enumerator = f.GetEnumerator ();
    var c2Enumerator = s.GetEnumerator ();
    for (int i = 0; i < f.Count (); i ++) {
        DataRow dr = source.NewRow ();
        c1Enumerator.MoveNext ();
        c2Enumerator.MoveNext ();
        dr [0] = c1Enumerator.Current;
        dr [1] = c2Enumerator.Current;
        source.Rows.Add (dr);
    }
}
----------------------------------------

private DataTable CreateData () {
    DataTable table = new DataTable {Columns = {"First", "Second"}};
    foreach (var o in Enumerable.Range ('a', 26).Select (ch = > new {F = new String ((char) ch, 1), S = new String ((char) ('z' - (ch - 'a')), 1)})) {
        DataRow dr = table.NewRow ();
        dr [0] = o.F;
        dr [1] = o.S;
        table.Rows.Add (dr);
    }
    return table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39911842_39912094_1_19
39911842_39912182_2_20
Title: Add numbers to array c# validating numbers only 
----------------------------------------

public static void findData () {
    Console.WriteLine ("Find a number");
    string myChoice = Console.ReadLine ();
    double number = - 1;
    if (! Double.TryParse (myChoice, out number)) {
        Console.WriteLine ("Invalid number");
    } else if (Array.IndexOf < double > (myArray, number) == - 1) {
        Console.WriteLine ("Number does not exist");
    } else {
        Console.WriteLine ("Number does exist");
    }
}
----------------------------------------

public static void findData () {
    double number;
    Console.WriteLine ("Find a number");
    string input = Console.ReadLine ();
    if (! double.TryParse (input, out number)) {
        bool found = myArray.Contains (number);
        if (found)
            Console.WriteLine ("Array has number {0}", number);
        else
            Console.WriteLine ("Array doesn't have number {0}", number);

    } else {
        Console.WriteLine ("Invalid input. Please enter a valid number");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39918156_39921508_16_33
39918156_39921508_44_65
Title: WPF: ValueConverter (IValueConverter) does not work 
----------------------------------------

public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) {
    double val;
    double.TryParse (value.ToString (), out val);
    if (val >= 10000) {
        return Brushes.Red;
    } else if (val >= 5000) {
        return Brushes.Orange;
    } else {
        return Brushes.Green;
    }
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) {
    int val;
    int.TryParse (value.ToString (), out val);
    if (val < 100) {
        return Brushes.Red;
    } else if (val < 200) {
        return Brushes.Orange;
    } else if (val < 500) {
        return Brushes.Yellow;
    } else {
        return Brushes.Green;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39927771_39929396_1_26
39927771_39937973_1_16
Title: Entity Framework Cast not supported 
----------------------------------------

public static T Cast < T > (this Object myobj) {
    Type objectType = myobj.GetType ();
    var dx = myobj.GetType ().GetProperties ();
    Type target = typeof (T);
    var x = Activator.CreateInstance (target, false);
    var z = from source in objectType.GetMembers ().ToList ()
        where source.MemberType == MemberTypes.Property
        select source;
    var d = from source in target.GetMembers ().ToList ()
        where source.MemberType == MemberTypes.Property
        select source;
    List < MemberInfo > members = d.Where (memberInfo = > d.Select (c = > c.Name).ToList ().Contains (memberInfo.Name)).ToList ();
    PropertyInfo propertyInfo;
    object value;
    foreach (var memberInfo in members) {
        propertyInfo = typeof (T).GetProperty (memberInfo.Name);
        if (Array.Exists (dx, a = > a.Name == propertyInfo.Name)) {
            value = myobj.GetType ().GetProperty (memberInfo.Name).GetValue (myobj, null);
            propertyInfo.SetValue (x, value, null);
        }
    }
    return (T) x;
}
----------------------------------------

private TEntity GeneralGet < TEntity > (int id) where TEntity : EntityBase {
    using (var ctx = GetContext ())
    {
        var result = ctx.Set < TEntity > ().Where (e = > e.Id == id);
        if (result is IQueryable < IRevisionBase >) {
            var parameter = Expression.Parameter (typeof (TEntity), "e");
            var predicate = Expression.Lambda < Func < TEntity, bool > > (Expression.Property (parameter, nameof (IRevisionBase.CurrentVersion)), parameter);
            result = result.Where (predicate);
        }
        return result.FirstOrDefault ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39977845_39978945_1_24
39977845_39979010_1_53
Title: "StreamReader ReadLine() returns empty string nothing added to list" 
----------------------------------------

public static List < Room > ReadRooms (string path) {
    List < Room > rooms = new List < Room > ();
    string roomName = String.Empty;
    StringBuilder directionsBuilder = new StringBuilder ();
    using (StreamReader reader = new StreamReader (path))
    {
        while (! reader.EndOfStream) {
            string line = reader.ReadLine ();
            if (line != null && line.StartsWith ("[END]")) {
                rooms.Add (new Room (roomName, directionsBuilder.ToString ()));
                directionsBuilder.Clear ();
            } else if (line != null && line.StartsWith ("["))
                roomName = line.Substring (1, line.Length - 2);
            else
                directionsBuilder.AppendLine (line);

        }
    } return rooms;
}
----------------------------------------

public static List < Room > ReadRooms (string path) {
    List < Room > rooms = new List < Room > ();
    bool inRoom = false;
    StringBuilder directions = new StringBuilder ();
    string name = null;
    foreach (var line in File.ReadLines (path)) {
        if (inRoom) {
            if (line == "[END]") {
                rooms.Add (new Room (name, directions.ToString ()));
                inRoom = false;
                directions.Clear ();
            } else if (line.StartsWith ("[") && line.EndsWith ("]")) {
            } else {
                directions.AppendLine (line);
            }
        } else {
            if (line == "[END]") {
            } else if (line.StartsWith ("[") && line.EndsWith ("]")) {
                inRoom = true;
                name = line.Trim ('[', ']');
            } else {
            }
        }
    }
    if (inRoom) {
    }
    return rooms;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40028716_40030836_29_126
40028716_40077194_29_91
Title: How to have a DataGridView inside a panel that has a header-row that scrolls with horizontal but not with vertical when the panel scrolls 
----------------------------------------

private void InitializeComponent () {
    this.panel1 = new System.Windows.Forms.Panel ();
    this.dataGridView1 = new System.Windows.Forms.DataGridView ();
    this.button1 = new System.Windows.Forms.Button ();
    this.button2 = new System.Windows.Forms.Button ();
    this.panel2 = new System.Windows.Forms.Panel ();
    this.dataGridView2 = new System.Windows.Forms.DataGridView ();
    this.panel1.SuspendLayout ();
    ((System.ComponentModel.ISupportInitialize) (this.dataGridView1)).BeginInit ();
    this.panel2.SuspendLayout ();
    ((System.ComponentModel.ISupportInitialize) (this.dataGridView2)).BeginInit ();
    this.SuspendLayout ();
    this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles) ((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));
    this.panel1.AutoScroll = true;
    this.panel1.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
    this.panel1.Controls.Add (this.dataGridView1);
    this.panel1.Location = new System.Drawing.Point (13, 107);
    this.panel1.Name = "panel1";
    this.panel1.Size = new System.Drawing.Size (260, 207);
    this.panel1.TabIndex = 0;
    this.panel1.Scroll += panel1_Scroll;
    this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
    this.dataGridView1.ColumnHeadersVisible = false;
    this.dataGridView1.Location = new System.Drawing.Point (0, 0);
    this.dataGridView1.Name = "dataGridView1";
    this.dataGridView1.ReadOnly = true;
    this.dataGridView1.ScrollBars = System.Windows.Forms.ScrollBars.None;
    this.dataGridView1.Size = new System.Drawing.Size (257, 204);
    this.dataGridView1.TabIndex = 0;
    this.button1.Location = new System.Drawing.Point (13, 41);
    this.button1.Name = "button1";
    this.button1.Size = new System.Drawing.Size (75, 23);
    this.button1.TabIndex = 1;
    this.button1.Text = "Clear";
    this.button1.UseVisualStyleBackColor = true;
    this.button1.Click += new System.EventHandler (this.button1_Click);
    this.button2.Location = new System.Drawing.Point (197, 41);
    this.button2.Name = "button2";
    this.button2.Size = new System.Drawing.Size (75, 23);
    this.button2.TabIndex = 2;
    this.button2.Text = "Add Row";
    this.button2.UseVisualStyleBackColor = true;
    this.button2.Click += new System.EventHandler (this.button2_Click);
    this.panel2.Anchor = ((System.Windows.Forms.AnchorStyles) ((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right)));
    this.panel2.AutoScroll = true;
    this.panel2.Controls.Add (this.dataGridView2);
    this.panel2.Location = new System.Drawing.Point (13, 84);
    this.panel2.Name = "panel2";
    this.panel2.Size = new System.Drawing.Size (260, 42);
    this.panel2.TabIndex = 1;
    this.dataGridView2.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
    this.dataGridView2.Location = new System.Drawing.Point (0, 0);
    this.dataGridView2.Name = "dataGridView2";
    this.dataGridView2.Size = new System.Drawing.Size (257, 40);
    this.dataGridView2.TabIndex = 3;
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (284, 326);
    this.Controls.Add (this.panel2);
    this.Controls.Add (this.button2);
    this.Controls.Add (this.button1);
    this.Controls.Add (this.panel1);
    this.Name = "Form1";
    this.Text = "Form1";
    this.Load += new System.EventHandler (this.Form1_Load);
    this.panel1.ResumeLayout (false);
    ((System.ComponentModel.ISupportInitialize) (this.dataGridView1)).EndInit ();
    this.panel2.ResumeLayout (false);
    ((System.ComponentModel.ISupportInitialize) (this.dataGridView2)).EndInit ();
    this.ResumeLayout (false);
}
----------------------------------------

private void InitializeComponent () {
    this.button1 = new System.Windows.Forms.Button ();
    this.button2 = new System.Windows.Forms.Button ();
    this.dataGridView1 = new System.Windows.Forms.DataGridView ();
    this.button3 = new System.Windows.Forms.Button ();
    ((System.ComponentModel.ISupportInitialize) (this.dataGridView1)).BeginInit ();
    this.SuspendLayout ();
    this.button1.Location = new System.Drawing.Point (13, 41);
    this.button1.Name = "button1";
    this.button1.Size = new System.Drawing.Size (75, 23);
    this.button1.TabIndex = 1;
    this.button1.Text = "Clear";
    this.button1.UseVisualStyleBackColor = true;
    this.button1.Click += new System.EventHandler (this.button1_Click);
    this.button2.Location = new System.Drawing.Point (197, 41);
    this.button2.Name = "button2";
    this.button2.Size = new System.Drawing.Size (75, 23);
    this.button2.TabIndex = 2;
    this.button2.Text = "Add";
    this.button2.UseVisualStyleBackColor = true;
    this.button2.Click += new System.EventHandler (this.button2_Click);
    this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
    this.dataGridView1.Location = new System.Drawing.Point (13, 102);
    this.dataGridView1.Name = "dataGridView1";
    this.dataGridView1.Size = new System.Drawing.Size (259, 212);
    this.dataGridView1.TabIndex = 3;
    this.button3.Location = new System.Drawing.Point (104, 41);
    this.button3.Name = "button3";
    this.button3.Size = new System.Drawing.Size (75, 23);
    this.button3.TabIndex = 4;
    this.button3.Text = "Remove";
    this.button3.UseVisualStyleBackColor = true;
    this.button3.Click += new System.EventHandler (this.button3_Click);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (284, 326);
    this.Controls.Add (this.button3);
    this.Controls.Add (this.dataGridView1);
    this.Controls.Add (this.button2);
    this.Controls.Add (this.button1);
    this.Name = "Form1";
    this.Text = "Form1";
    this.Load += new System.EventHandler (this.Form1_Load);
    ((System.ComponentModel.ISupportInitialize) (this.dataGridView1)).EndInit ();
    this.ResumeLayout (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40035544_40035579_1_17
40035544_40035644_1_16
Title: How to check input is a valid integer 
----------------------------------------

private static void Number () {
    Console.Write ("Type it in a number: ");
    int result;
    if (int.TryParse (Console.ReadLine (), out result)) {
        Console.Write ("Hi");
    } else {
        Console.WriteLine ("Please type a number!");
    }
    Console.ReadLine ();
}
----------------------------------------

private static void Number () {
    Console.Write ("Type it in a number: ");
    int result;
    bool parsedSuccessfully = int.TryParse (Console.ReadLine (), out result);
    if (parsedSuccessfully == false) {
        Console.WriteLine ("Please type a number!");
    } else {
        Console.Write ("Hi");
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40091129_40091270_1_19
40091129_40111828_1_22
Title: Displaying Many to Many Relationship in MVC view 
----------------------------------------

public ActionResult Details (int ? id) {
    ReportViewModel rvm = new ReportViewModel ();
    tblReport Report = db.tblReports.Find (id);
    List < tblDBTablesUsed > DBTablesUsed = db.tblDBTablesUseds.Where (x = > x.fldReportID == Report.fldReportID).ToList ();
    List < tblReport > reports = db.tblReports.Where (rep = > DBTablesUsed.Select (x = > x.fldReportID).Contains (rep.fldReportID)).ToList ();
    List < tblDBTable > tables = db.tblDBTables.Where (rep = > DBTablesUsed.Select (x = > x.fldTableName).Contains (rep.fldTableName)).ToList ();
    rvm.report = reports;
    rvm.dbtables = tables;
    return View (rvm);
}
----------------------------------------

public ActionResult Details (int ? id) {
    ReportViewModel rvm = new ReportViewModel ();
    tblReport report = db.tblReports.Find (id);
    List < tblDBTable > tablesinreport = new List < tblDBTable > ();
    IQueryable < tblDBTable > ReportTables = from t1 in db.tblDBTablesUseds
        join t2 in db.tblDBTables on t1.fldTableID equals t2.fldTableID
        where t1.fldReportID == id
        select t2;
    tablesinreport = ReportTables.ToList ();
    rvm.report = report;
    rvm.dbtables = tablesinreport;
    return View (rvm);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40097121_40097676_1_14
40097121_40099042_1_18
Title: c# deserialize to an object from a file - out of memory 
----------------------------------------

public static object Deserialize (Type objType, FileInfo xmlDocFile) {
    object returnValue = null;
    if (xmlDocFile != null && objType != null && xmlDocFile.Exists) {
        DataContractSerializer formatter = new DataContractSerializer (objType);
        using (FileStream textFile = new FileStream (xmlDocFile.FullName, FileMode.Open))
        {
            returnValue = formatter.ReadObject (textFile);
        }}
    return returnValue;
}
----------------------------------------

public static object Deserialize (Type objType, FileInfo xmlDocFile) {
    object returnValue = null;
    if (xmlDocFile != null && objType != null && xmlDocFile.Exists) {
        DataContractSerializer formatter = new DataContractSerializer (objType);
        using (FileStream fs = File.Open (xmlDocFile.FullName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        {
            using (BufferedStream bs = new BufferedStream (fs))
            {
                XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader (bs, Encoding.UTF8, new XmlDictionaryReaderQuotas (), null);
                returnValue = formatter.ReadObject (reader, true);
            }}}
    return returnValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40116088_40118119_12_23
40116088_40118119_3_10
Title: Remove fields form JObject dynamically using Json.Net 
----------------------------------------

public static TJToken RemoveFromLowestPossibleParent < TJToken > (this TJToken node) where TJToken : JToken {
    if (node == null)
        return null;

    var contained = node.AncestorsAndSelf ().Where (t = > t.Parent is JContainer && t.Parent.Type != JTokenType.Property).FirstOrDefault ();
    if (contained != null)
        contained.Remove ();

    if (node.Parent is JProperty)
        ((JProperty) node.Parent).Value = null;

    return node;
}
----------------------------------------

public static IEnumerable < TJToken > RemoveFromLowestPossibleParent < TJToken > (this IEnumerable < TJToken > nodes) where TJToken : JToken {
    if (nodes == null)
        return null;

    foreach (var node in nodes.ToList ())
        node.RemoveFromLowestPossibleParent ();

    return nodes;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40165264_40181469_3_15
40165264_52369605_1_9
Title: How to save CPU cycles when searching for a value in a sorted list? 
----------------------------------------

public static bool Exists (int [] ints, int k) {
    var i = 0;
    var hasValue = false;
    while (i < ints.Length && ! hasValue) {
        hasValue = ints [i] == k;
        ++ i;
    }
    return hasValue;
}
----------------------------------------

public static bool Exists (int [] ints, int k) {
    var d = 0;
    var f = ints.Length - 1;
    if (d > f)
        return false;

    if (k > ints [f] || k < ints [d])
        return false;

    if (k == ints [f] || k == ints [d])
        return true;

    return (BinarySearch (ints, k, d, f) > 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40175391_40177647_1_28
40175391_40177873_1_25
Title: Invalid zip file after creating it with System.IO.Compression 
----------------------------------------

private FileResult CreateZip (IEnumerable < FileContentResult > files) {
    byte [] retVal = null;
    if (files.Any ()) {
        using (MemoryStream zipStream = new MemoryStream ())
        {
            using (ZipArchive archive = new ZipArchive (zipStream, ZipArchiveMode.Create, true))
            {
                foreach (var f in files) {
                    var entry = archive.CreateEntry (f.FileDownloadName, CompressionLevel.Fastest);
                    using (BinaryWriter writer = new BinaryWriter (entry.Open ()))
                    {
                        writer.Write (f.FileContents, 0, f.FileContents.Length);
                        writer.Close ();
                    }}
                zipStream.Position = 0;
            } retVal = zipStream.ToArray ();
        }}
    return File (retVal, MediaTypeNames.Application.Zip, "horta.zip");
}
----------------------------------------

private ActionResult CreateZip (IEnumerable files) {
    if (files.Any ()) {
        MemoryStream zipStream = new MemoryStream ();
        using (ZipArchive archive = new ZipArchive (zipStream, ZipArchiveMode.Create, false))
        {
            foreach (var f in files) {
                var entry = archive.CreateEntry (f.FileDownloadName, CompressionLevel.Fastest);
                using (var entryStream = entry.Open ())
                {
                    entryStream.Write (f.FileContents, 0, f.FileContents.Length);
                    entryStream.Close ();
                }}
        } zipStream.Position = 0;
        return File (zipStream, MediaTypeNames.Application.Zip, "horta.zip");
    }
    return new EmptyResult ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4018114_31982681_3_32
4018114_37566762_1_31
Title: Read data from SqlDataReader 
----------------------------------------

public static T Read < T > (DbDataReader DataReader, string FieldName) {
    int FieldIndex;
    try {
        FieldIndex = DataReader.GetOrdinal (FieldName);
    }
    catch {
        return default (T);
    }
    if (DataReader.IsDBNull (FieldIndex)) {
        return default (T);
    } else {
        object readData = DataReader.GetValue (FieldIndex);
        if (readData is T) {
            return (T) readData;
        } else {
            try {
                return (T) Convert.ChangeType (readData, typeof (T));
            }
            catch (InvalidCastException) {
                return default (T);
            }
        }
    }
}
----------------------------------------

public static List < T > Fill < T > (this SqlDataReader reader) where T : new () {
    List < T > res = new List < T > ();
    while (reader.Read ()) {
        T t = new T ();
        for (int inc = 0; inc < reader.FieldCount; inc ++) {
            Type type = t.GetType ();
            string name = reader.GetName (inc);
            PropertyInfo prop = type.GetProperty (name);
            if (prop != null) {
                if (name == prop.Name) {
                    var value = reader.GetValue (inc);
                    if (value != DBNull.Value) {
                        prop.SetValue (t, Convert.ChangeType (value, prop.PropertyType), null);
                    }
                }
            }
        }
        res.Add (t);
    }
    reader.Close ();
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40200471_40200933_9_51
40200471_40200954_15_34
Title: split Dataset datable into multiple datatable by ID and OrderID 
----------------------------------------

static void Main (string [] args) {
    var DS = new DataSet ();
    DS.Tables.Add ();
    DS.Tables [0].Columns.Add ("ItemID", typeof (int));
    DS.Tables [0].Columns.Add ("OrderID", typeof (int));
    DS.Tables [0].Columns.Add ("ItemName");
    DS.Tables [0].Rows.Add (1, 12, "Item1");
    DS.Tables [0].Rows.Add (1, 12, "Item1");
    DS.Tables [0].Rows.Add (1, 13, "Item1");
    DS.Tables [0].Rows.Add (1, 13, "Item1");
    DS.Tables [0].Rows.Add (2, 12, "Item1");
    DS.Tables [0].Rows.Add (2, 13, "Item1");
    DS.Tables [0].Rows.Add (2, 13, "Item1");
    DS.Tables [0].Rows.Add (3, 13, "Item1");
    DS.Tables [0].Rows.Add (3, 13, "Item1");
    DS.Tables [0].Rows.Add (3, 13, "Item2");
    DS.Tables [0].Rows.Add (3, 13, "Item1");
    var results = DS.Tables [0].AsEnumerable ().GroupBy (x = > new {ItemID = x.Field < int > (0), OrderID = x.Field < int > (1)}).Select (x = > {
        var t = new DataTable ();
        t.Columns.Add ("ItemName");
        x.ToList ().ForEach (y = > t.Rows.Add (y.Field < string > (2)));
        return new {x.Key, Table = t};
    });
    foreach (var i in results) {
        Console.WriteLine ("\n[ ItemID: " + i.Key.ItemID + ", OrderID: " + i.Key.OrderID + " ]");
        foreach (var row in i.Table.AsEnumerable ())
            Console.WriteLine ("  " + row [0]);

    }
    Console.WriteLine ("\nPress any key...");
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    DataTable dt = new DataTable ();
    XDocument table = XDocument.Load (FILENAME);
    List < XElement > rows = table.Descendants ("tr").ToList ();
    foreach (XElement col in rows [0].Elements ("th").ToArray ()) {
        dt.Columns.Add ((string) col, typeof (string));
    }
    for (int i = 1; i < rows.Count; i ++) {
        dt.Rows.Add (rows [i].Elements ("td").Select (x = > (string) x).ToArray ());
    }
    DataTable dt1 = dt.AsEnumerable ().Where (x = > x.Field < string > ("ItemName") == "Item1").CopyToDataTable ();
    DataTable dt2 = dt.AsEnumerable ().Where (x = > x.Field < string > ("ItemName") == "Item2").CopyToDataTable ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40210668_40214670_104_122
40210668_40214670_54_63
Title: Restore maximzed state on secondary monitor 
----------------------------------------

public static WINDOWPLACEMENT Parse (string input) {
    WINDOWPLACEMENT result = default (WINDOWPLACEMENT);
    result.Length = Marshal.SizeOf (typeof (WINDOWPLACEMENT));
    try {
        string [] items = input.Split ('/');
        result.Flags = int.Parse (items [0]);
        result.ShowCmd = int.Parse (items [1]);
        result.MinPosition = POINT.Parse (items [2]);
        result.MaxPosition = POINT.Parse (items [3]);
        result.NormalPosition = RECT.Parse (items [4]);
    }
    catch {
    }
    return result;
}
----------------------------------------

public static RECT Parse (string input) {
    RECT result;
    string [] items = input.Split (';');
    result.Left = int.Parse (items [0]);
    result.Top = int.Parse (items [1]);
    result.Right = int.Parse (items [2]);
    result.Bottom = int.Parse (items [3]);
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40233624_40234163_1_25
40233624_40241550_1_22
Title: how to decrypt xml elements stored after encryption 
----------------------------------------

private string Decrypt (string encrypted) {
    byte [] encryptedBytes = Convert.FromBase64String (encrypted);
    string EncryptionKey = "MAKV2SPBNI99212";
    using (Aes encryptor = Aes.Create ())
    {
        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes (EncryptionKey, new byte [] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});
        encryptor.Key = pdb.GetBytes (32);
        encryptor.IV = pdb.GetBytes (16);
        using (MemoryStream ms = new MemoryStream (encryptedBytes))
        {
            using (CryptoStream cs = new CryptoStream (ms, encryptor.CreateDecryptor (), CryptoStreamMode.Read))
            {
                MemoryStream buffer = new MemoryStream ();
                cs.CopyTo (buffer);
                return Encoding.Unicode.GetString (buffer.ToArray ());
            }}}}
----------------------------------------

public static string Decrypt (string sEncryptedText) {
    string EncryptionKey = "MAKV2SPBNI99212";
    byte [] cipherBytes = Convert.FromBase64String (sEncryptedText);
    using (Aes encryptor = Aes.Create ())
    {
        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes (EncryptionKey, new byte [] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});
        encryptor.Key = pdb.GetBytes (32);
        encryptor.IV = pdb.GetBytes (16);
        using (MemoryStream ms = new MemoryStream ())
        {
            using (CryptoStream cs = new CryptoStream (ms, encryptor.CreateDecryptor (), CryptoStreamMode.Write))
            {
                cs.Write (cipherBytes, 0, cipherBytes.Length);
                cs.Close ();
            } sEncryptedText = Encoding.Unicode.GetString (ms.ToArray ());
        }} return sEncryptedText;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40285006_40285724_1_26
40285006_40287691_1_41
Title: How to modify list-indexes according to a list which contains only the changed indexes? 
----------------------------------------

public static void UpdateWatchListsSort (string userId, List < WatchList > watchListsWithModifiedPosition) {
    var modifiedIds = new HashSet < int > (watchListsWithModifiedPosition.Select (w = > w.Id));
    List < WatchList > allUserWatchLists = GetWatchListsFromDb (userId);
    var modifiedWatchLists = allUserWatchLists.FindAll (w = > modifiedIds.Contains (w.Id)).ToDictionary (w = > w.Id);
    var newList = new List < WatchList > ();
    var unmodifiedIter = allUserWatchLists.FindAll (w = > ! modifiedIds.Contains (w.Id)).GetEnumerator ();
    foreach (WatchList modified in watchListsWithModifiedPosition.OrderBy (w = > w.Position)) {
        int newIndex = modified.Position - 1;
        while (newList.Count < newIndex && unmodifiedIter.MoveNext ())
            newList.Add (unmodifiedIter.Current);

        newList.Add (modifiedWatchLists [modified.Id]);
    }
    while (unmodifiedIter.MoveNext ())
        newList.Add (unmodifiedIter.Current);

    allUserWatchLists = newList;
}
----------------------------------------

public static void UpdateWatchListsSort (string userId, List < WatchList > watchListsWithModifiedPosition) {
    var oldSeq = GetWatchListsFromDb (userId);
    var modifiedSeq = watchListsWithModifiedPosition.OrderBy (e = > e.Position);
    var otherSeq = oldSeq.Except (watchListsWithModifiedPosition);
    var newSeq = new List < WatchList > (oldSeq.Count);
    using (var modifiedIt = modifiedSeq.GetEnumerator ())
    using (var otherIt = otherSeq.GetEnumerator ())
    {
        var modified = modifiedIt.MoveNext () ? modifiedIt.Current : null;
        var other = otherIt.MoveNext () ? otherIt.Current : null;
        while (modified != null || other != null) {
            if (modified != null && modified.Position == newSeq.Count + 1) {
                newSeq.Add (modified);
                modified = modifiedIt.MoveNext () ? modifiedIt.Current : null;
            } else {
                newSeq.Add (other);
                other = otherIt.MoveNext () ? otherIt.Current : null;
            }
        }
    } var updateList = new List < WatchList > ();
    for (int i = 0; i < newSeq.Count; i ++) {
        var item = newSeq [i];
        if (item.Id == oldSeq [i].Id)
            continue;

        item.Position = i + 1;
        updateList.Add (item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40332334_40332440_1_17
40332334_40334752_1_13
Title: checking integers in String 
----------------------------------------

static public int input () {
    Prompt : Console.WriteLine ("Enter The Number Of Student You Want to get Record");
    int x;
    string inputString = Console.ReadLine ();
    if (int.TryParse (inputString, out x)) {
        Console.WriteLine (inputString + " Is Integer");
        return x;
    } else {
        goto Prompt;
    }
}
----------------------------------------

static public int input () {
    Console.WriteLine ("Enter The Number Of Student You Want to get Record");
    string input = Console.ReadLine ();
    if (Regex.IsMatch (input, @"\d+")) {
        return int.Parse (Regex.Match (input, @"\d+").Value);
    } else {
        return input ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40341773_40341942_3_17
40341773_40342430_3_22
Title: Error	1	The name does not exist in the current context 
----------------------------------------

static void Main (string [] args) {
    int f = 0, avg = 0;
    Console.WriteLine ("enter ammount of tries");
    int trycount = Convert.ToInt32 (Console.ReadLine ());
    Random numgen = new Random ();
    while (f < trycount) {
        int now = numgen.Next (1, 6);
        avg = 0 + now;
        f ++;
    }
    Console.WriteLine (avg);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("enter amount of tries");
    int TryCount = Convert.ToInt32 (Console.ReadLine ());
    Random numgen = new Random ();
    double sum = 0.0;
    for (int i = 0; i < TryCount; ++ i)
        sum += numgen.Next (1, 6);

    Console.WriteLine (sum / TryCount);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40378979_40379314_1_24
40378979_40379404_1_21
Title: Not all code paths return a value #2 
----------------------------------------

private bool vowel (string word) {
    bool containsVowel = false;
    char [] wordChar = word.ToCharArray ();
    for (int i = 0; i < word.Length; i ++) {
        switch (wordChar [i]) {
            case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :
                return containsVowel = true;
        }
    }
    MessageBox.Show ("Word must contain a vowel", "Error");
    return containsVowel = false;
}
----------------------------------------

private static bool vowel (string word) {
    if (word == null)
        return false;

    char [] wordChar = word.ToUpper ().ToCharArray ();
    for (int i = 0; i < word.Length; i ++) {
        switch (word [i]) {
            case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :
                return true;
                break;
        }
    }
    Console.WriteLine ("Word must contain a vowel");
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40383280_40383399_1_16
40383280_40383448_1_12
Title: How can I solve an index out of range error? 
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    int j;
    for (int i = 0; i < Main.studentList.Count; i ++) {
        if (comboBox1.SelectedItem == Main.studentList [i].StudentName + " " + Main.studentList [i].StudentId) {
            j = i;
            break;
        }
    }
    txtName.Text = Main.studentList [j].StudentName;
}
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    int i;
    for (i = 0; i < Main.studentList.Count; i ++) {
        if (comboBox1.SelectedItem == Main.studentList [i].StudentName + " " + Main.studentList [i].StudentId) {
            txtName.Text = Main.studentList [i].StudentName;
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40383280_40383399_1_16
40383280_40383542_1_12
Title: How can I solve an index out of range error? 
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    int j;
    for (int i = 0; i < Main.studentList.Count; i ++) {
        if (comboBox1.SelectedItem == Main.studentList [i].StudentName + " " + Main.studentList [i].StudentId) {
            j = i;
            break;
        }
    }
    txtName.Text = Main.studentList [j].StudentName;
}
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    int i;
    for (i = 0; i < Main.studentList.Count; i ++) {
        if (comboBox1.SelectedItem == Main.studentList [i].StudentName + " " + Main.studentList [i].StudentId) {
            txtName.Text = Main.studentList [i].StudentName;
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40383280_40383448_1_12
40383280_40383542_1_12
Title: How can I solve an index out of range error? 
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    int i;
    for (i = 0; i < Main.studentList.Count; i ++) {
        if (comboBox1.SelectedItem == Main.studentList [i].StudentName + " " + Main.studentList [i].StudentId) {
            txtName.Text = Main.studentList [i].StudentName;
            break;
        }
    }
}
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    int i;
    for (i = 0; i < Main.studentList.Count; i ++) {
        if (comboBox1.SelectedItem == Main.studentList [i].StudentName + " " + Main.studentList [i].StudentId) {
            txtName.Text = Main.studentList [i].StudentName;
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043219_1_10
4043184_4043225_1_17
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    for (int i = 0; true; ++ i) {
        object current;
        try {
            current = api [i];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return current;
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool exceptionThrown = false;
    object obj = null;
    for (int i = 0; true; ++ i) {
        try {
            obj = api [i];
        }
        catch (IndexOutOfBoundsException) {
            exceptionThrown = true;
            yield break;
        }
        if (! exceptionThrown) {
            yield return obj;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043219_1_10
4043184_4043231_1_17
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    for (int i = 0; true; ++ i) {
        object current;
        try {
            current = api [i];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return current;
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool abort = false;
    for (int i = 0; ! abort; ++ i) {
        object obj;
        if (TryGetObject (api, i, out obj)) {
            yield return obj;
        } else {
            abort = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043219_1_10
4043184_4043254_1_14
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    for (int i = 0; true; ++ i) {
        object current;
        try {
            current = api [i];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return current;
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    List < object > output = new List < object > ();
    try {
        for (int i = 0; true; ++ i)
            output.Add (api [i]);

    }
    catch (IndexOutOfBoundsException) {
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043219_1_10
4043184_4043288_1_17
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    for (int i = 0; true; ++ i) {
        object current;
        try {
            current = api [i];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return current;
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    int i = 0;
    while (true) {
        Object a;
        try {
            a = api [i ++];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return a;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043225_1_17
4043184_4043231_1_17
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool exceptionThrown = false;
    object obj = null;
    for (int i = 0; true; ++ i) {
        try {
            obj = api [i];
        }
        catch (IndexOutOfBoundsException) {
            exceptionThrown = true;
            yield break;
        }
        if (! exceptionThrown) {
            yield return obj;
        }
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool abort = false;
    for (int i = 0; ! abort; ++ i) {
        object obj;
        if (TryGetObject (api, i, out obj)) {
            yield return obj;
        } else {
            abort = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043225_1_17
4043184_4043254_1_14
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool exceptionThrown = false;
    object obj = null;
    for (int i = 0; true; ++ i) {
        try {
            obj = api [i];
        }
        catch (IndexOutOfBoundsException) {
            exceptionThrown = true;
            yield break;
        }
        if (! exceptionThrown) {
            yield return obj;
        }
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    List < object > output = new List < object > ();
    try {
        for (int i = 0; true; ++ i)
            output.Add (api [i]);

    }
    catch (IndexOutOfBoundsException) {
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043225_1_17
4043184_4043288_1_17
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool exceptionThrown = false;
    object obj = null;
    for (int i = 0; true; ++ i) {
        try {
            obj = api [i];
        }
        catch (IndexOutOfBoundsException) {
            exceptionThrown = true;
            yield break;
        }
        if (! exceptionThrown) {
            yield return obj;
        }
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    int i = 0;
    while (true) {
        Object a;
        try {
            a = api [i ++];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return a;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043231_1_17
4043184_4043254_1_14
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool abort = false;
    for (int i = 0; ! abort; ++ i) {
        object obj;
        if (TryGetObject (api, i, out obj)) {
            yield return obj;
        } else {
            abort = true;
        }
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    List < object > output = new List < object > ();
    try {
        for (int i = 0; true; ++ i)
            output.Add (api [i]);

    }
    catch (IndexOutOfBoundsException) {
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043231_1_17
4043184_4043288_1_17
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    bool abort = false;
    for (int i = 0; ! abort; ++ i) {
        object obj;
        if (TryGetObject (api, i, out obj)) {
            yield return obj;
        } else {
            abort = true;
        }
    }
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    int i = 0;
    while (true) {
        Object a;
        try {
            a = api [i ++];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return a;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4043184_4043254_1_14
4043184_4043288_1_17
Title: .NET iterator to wrap throwing API 
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    List < object > output = new List < object > ();
    try {
        for (int i = 0; true; ++ i)
            output.Add (api [i]);

    }
    catch (IndexOutOfBoundsException) {
    }
    return output;
}
----------------------------------------

static IEnumerable < object > Iterator (ExAPI api) {
    int i = 0;
    while (true) {
        Object a;
        try {
            a = api [i ++];
        }
        catch (IndexOutOfBoundsException) {
            yield break;
        }
        yield return a;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4046009_4046131_1_15
4046009_4080205_1_29
Title: Multiple search parameters with LINQ 
----------------------------------------

public IQueryable < Product > Search (Dictionary < string, string > searchParams) {
    DBDataContext dc = new DBDataContext ();
    StringBuilder sQuery = new StringBuilder ();
    foreach (KeyValuePair < string, string > temp in searchParams) {
        if (sQuery.Length > 0)
            sQuery.Append (" AND ");

        sQuery.AppendFormat ("{0}={1}", temp.Key, temp.Value);
    }
    var query = dc.Products.Where (sQuery.ToString ());
    return query;
}
----------------------------------------

public IQueryable < Person > Search (Dictionary < string, string > searchParams) {
    DBDataContext dc = new DBDataContext ();
    var query = dc.Persons.Where (p = > true);
    var criteriaDefinitions = new Dictionary < string, Func < string, Expression < Func < Person, bool > > > > ();
    criteriaDefinitions.Add ("FirstName", s = > p = > p.FirstName == s);
    criteriaDefinitions.Add ("LastName", s = > p = > p.LastName == s);
    criteriaDefinitions.Add ("EmailContains", s = > p = > p.Email.Contains (s));
    criteriaDefinitions.Add ("HasContactInCity", s = > p = > p.Contacts.Any (c = > c.City == s));
    foreach (KeyValuePair < string, string > temp in searchParams) {
        var func = criteriaDefinitions [temp.Key];
        var expr = func (temp.Value);
        query = query.Where (expr);
    }
    return query;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40485013_40485334_1_15
40485013_40485528_1_29
Title: How to insert text box value in database on combo box selected item? 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (comboBox1.SelectedItem.ToString () == "Admin") {
        SqlCommand cmd = new SqlCommand ("select * from Admin");
        SqlDataReader dr = cmd.ExecuteReader ();
        if (dr.Read ()) {
            textBox1.Text = dr ["Username"].ToString ();
            textBox2.Text = dr ["Password"].ToString ();
            Admin ad = new Admin ();
            ad.ShowDialog ();
        }
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (comboBox1.SelectedItem.ToString () == "Admin") {
        SqlCommand cmd = new SqlCommand ("select * 
                                         from Admin 
                                         where Username = @UN and 
                                               Password = @PW");
        var unParam = new SqlParameter ("@UN", SqlDbType.VarChar);
        unParam.Value = textbox1.text;
        cmd.Parameters.Add (unParam);
        var pwParam = new SqlParameter ("@PW", SqlDbType.VarChar);
        pwParam.Value = textbox2.text;
        cmd.Parameters.Add (pwParam);
        SqlDataReader dr = cmd.ExecuteReader ();
        if (dr.HasRows) {
            if (dr.Read ()) {
                Admin ad = new Admin ();
                ad.ShowDialog ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40493127_40493573_10_26
40493127_40495134_16_45
Title: Replacing ### with integers 
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    var matches = regex.Matches (input).Cast < Match > ().Select (m = > m.Value).ToArray ();
    Array.Sort (matches);
    Array.Reverse (matches);
    foreach (string match in matches) {
        Regex r = new Regex (match);
        string zeroes = new string ('0', match.Length - integer.ToString ().Length) + integer;
        input = r.Replace (input, zeroes);
    }
    return input;
}
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];

            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40501757_40501872_3_15
40501757_40502234_5_16
Title: How to return value from function to call it sequentially each line with new result 
----------------------------------------

static void Main (string [] args) {
    Random random = new Random ();
    string a1 = b1 (random);
    string a2 = b2 (random);
    string a3 = b1 (random);
    string comb = (a1 + a2 + a3);
    Console.WriteLine (comb);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Random random = new Random ();
    string a1 = b1 ();
    string a2 = b2 ();
    string a3 = b1 ();
    string comb = (a1 + a2 + a3);
    Console.WriteLine (comb);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40503822_40522235_1_29
40503822_40522952_1_21
Title: How to put the first line of text file in the end position 
----------------------------------------

private void button3_Click (object sender, EventArgs e) {
    string line = null;
    string FirstLineContent = "";
    int line_number = 0;
    int line_to_delete = 1;
    string tempFile = Path.GetTempFileName ();
    using (StreamReader reader = new StreamReader (@"D:\Sample.txt"))
    {
        using (StreamWriter writer = new StreamWriter (tempFile))
        {
            while ((line = reader.ReadLine ()) != null) {
                line_number ++;
                if (line_number == line_to_delete) {
                    FirstLineContent = line;
                } else {
                    writer.WriteLine (line);
                }
            }
            writer.WriteLine (FirstLineContent);
        }} File.Delete (@"D:\Sample.txt");
    File.Move (tempFile, @"D:\Sample.txt");
}
----------------------------------------

private void button3_Click (object sender, EventArgs e) {
    List < string > allLines = new List < string > ();
    using (var reader = new System.IO.StreamReader (@"D:\Sample.txt"))
    while (reader.Peek () >= 0)
        allLines.Add (reader.ReadLine ());

    if (allLines.Count > 1) {
        allLines.Add (allLines.First ());
        allLines.RemoveAt (0);
        using (var writer = new System.IO.StreamWriter (@"D:\Sample.txt"))
        foreach (var line in allLines)
            writer.WriteLine (line);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
405429_405451_25_40
405429_406674_3_13
Title: How can I overload a C# method by specific instances of a generic type 
----------------------------------------

static void Main (string [] args) {
    var a = new Stuff < string > ();
    a.value = "HelloWorld";
    var b = new Stuff < int > ();
    b.value = 1;
    var c = "HelloWorld";
    var d = 1;
    DummyFunc (a);
    DummyFunc (b);
    DummyFunc (c);
    DummyFunc (d);
}
----------------------------------------

static void Main (string [] args) {
    var testA = new Foo < A > ();
    testA.Method ();
    var testB = new Foo < B > ();
    testB.Method ();
    Console.ReadLine ();
    var testString = new Foo < string > ();
    testString.Method ();
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40569234_40569316_1_38
40569234_40569578_1_19
Title: Cannot convert from 'System.IO.FileStream' to 'int' when reading text file into a List 
----------------------------------------

static void Main (string [] args) {
    string listPath = @"K:\listData\listData.txt";
    int listDataSum = 0;
    int listDataMax = 0;
    int listDataMin = 0;
    string userInput = null;
    var fileReader = new System.IO.StreamReader (listPath);
    List < string > stringsFromFile = new List < string > ();
    string lineOfText;
    while ((lineOfText = fileReader.ReadLine ()) != null) {
        stringsFromFile.Add (lineOfText);
    }
    List < int > intsFromFile = new List < int > ();
    foreach (string s in stringsFromFile) {
        int temp = 0;
        if (Int32.TryParse (s, out temp)) {
            intsFromFile.Add (temp);
        }
    }
    listDataSum = intsFromFile.Sum ();
    listDataMax = intsFromFile.Max ();
    listDataMin = intsFromFile.Min ();
    Console.WriteLine ("Please input the data you wish to see, type 'help' for what to type");
    userInput = Console.ReadLine ();
    userInput.ToLower ();
    if (userInput == "sum") {
        Console.WriteLine ("The sum of the list is " + listDataSum);
    }
}
----------------------------------------

static void Main (string [] args) {
    string listPath = @"K:\listData\listData.txt";
    var lines = File.ReadAllLines (listPath).ToList ();
    var number = 0;
    var numbers = lines.Where (line = > int.TryParse (line, out number)).Select (n = > number).ToList ();
    Console.WriteLine ("Please input the data you wish to see, type 'help' for what to type");
    string userInput = Console.ReadLine ().ToLower ();
    if (userInput == "sum") {
        Console.WriteLine ("The sum of the list is " + ListDataSum (numbers));
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40578754_40578925_1_19
40578754_40579053_1_18
Title: Why does not work return C#? 
----------------------------------------

public static Array readCVS (string absolutePath) {
    string [,] temperatureMatrix = new string [384, 288];
    string value;
    using (TextReader fileReader = File.OpenText (absolutePath))
    {
        var csv = new CsvReader (fileReader);
        csv.Configuration.HasHeaderRecord = false;
        int y = 0;
        while (csv.Read ()) {
            for (int x = 0; csv.TryGetField < string > (x, out value); x ++)
                temperatureMatrix [x, y] = value;

            y = y + 1;
        }
        return temperatureMatrix;
    }}
----------------------------------------

public static List < string > readCVS (string absolutePath) {
    List < string > result = new List < string > ();
    string value;
    using (TextReader fileReader = File.OpenText (absolutePath))
    {
        var csv = new CsvReader (fileReader);
        csv.Configuration.HasHeaderRecord = false;
        while (csv.Read ()) {
            for (int i = 0; csv.TryGetField < string > (i, out value); i ++) {
                result.Add (value);
            }
        }
    } return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40597423_40597479_26_39
40597423_40597633_22_35
Title: C# Modify object created in one function from another 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    createlist ();
    ListViewItem Source = new ListViewItem ("Source", 0);
    Source.Checked = true;
    Source.SubItems.Add ("7");
    Source.SubItems.Add ("8");
    Source.SubItems.Add ("9");
    MainList.Items.AddRange (new ListViewItem [] {Source});
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    var listView = createlist ();
    ListViewItem Source = new ListViewItem ("Source", 0);
    Source.Checked = true;
    Source.SubItems.Add ("7");
    Source.SubItems.Add ("8");
    Source.SubItems.Add ("9");
    listView.Items.AddRange (new ListViewItem [] {Source});
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40603559_40603885_1_25
40603559_40604054_1_15
Title: How can I increment a value on page refresh? 
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    int evrno = 21006;
    string EVRAKNO = "SP-";
    if (Session ["evrno"] == null) {
        Session ["evrno"] = evrno;
    }
    if (Page.IsPostBack == false) {
        evrno = Convert.ToInt32 (Session ["evrno"]) + 1;
    }
    string EvrakNu = EVRAKNO + evrno.ToString ();
    Session ["evrno"] = evrno;
    txt_EvrakNo.Text = EvrakNu;
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    int evrno = (Session ["evrno"] != null && Session ["evrno"].ToString () != string.Empty) ? Convert.ToInt32 (Session ["evrno"]) : 021006;
    string EVRAKNO = "SP-";
    if (! Page.IsPostBack) {
        evrno += 1;
        Session ["evrno"] = evrno;
    }
    string EvrakNu = EVRAKNO + Convert.ToString (evrno);
    txt_EvrakNo.Text = EvrakNu;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40635596_40636029_17_34
40635596_40636087_29_39
Title: Proper way to dispose DbContext when one method calls another and both use DbContext 
----------------------------------------

public void DeleteSheet (int ? sheetId, UranusContext db) {
    var sheet = db.Sheets.Include (s = > s.FileDetails).Include (s = > s.SheetsCounties).SingleOrDefault (s = > s.SheetId == sheetId);
    foreach (var fileDetails in sheet.FileDetails.ToList ()) {
        db.FileDetails.Remove (fileDetails);
    }
    foreach (var sheetsCounties in sheet.SheetsCounties.ToList ()) {
        db.SheetsCounties.Remove (sheetsCounties);
    }
    db.Sheets.Remove (sheet);
}
----------------------------------------

private void DeleteSheet (UranusContext db, Sheet sheet) {
    foreach (var fileDetails in sheet.FileDetails.ToList ()) {
        db.FileDetails.Remove (fileDetails);
    }
    foreach (var sheetsCounties in sheet.SheetsCounties.ToList ()) {
        db.SheetsCounties.Remove (sheetsCounties);
    }
    db.Sheets.Remove (sheet);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40635596_40636042_21_39
40635596_40636087_29_39
Title: Proper way to dispose DbContext when one method calls another and both use DbContext 
----------------------------------------

public void DeleteSheet (int ? sheetId, UranusContext db) {
    var sheet = db.Sheets.Include (s = > s.FileDetails).Include (s = > s.SheetsCounties).SingleOrDefault (s = > s.SheetId == sheetId);
    foreach (var fileDetails in sheet.FileDetails.ToList ()) {
        db.FileDetails.Remove (fileDetails);
    }
    foreach (var sheetsCounties in sheet.SheetsCounties.ToList ()) {
        db.SheetsCounties.Remove (sheetsCounties);
    }
    db.Sheets.Remove (sheet);
    db.SaveChanges ();
}
----------------------------------------

private void DeleteSheet (UranusContext db, Sheet sheet) {
    foreach (var fileDetails in sheet.FileDetails.ToList ()) {
        db.FileDetails.Remove (fileDetails);
    }
    foreach (var sheetsCounties in sheet.SheetsCounties.ToList ()) {
        db.SheetsCounties.Remove (sheetsCounties);
    }
    db.Sheets.Remove (sheet);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40654469_40654641_1_22
40654469_40655091_1_21
Title: Images not displaying with asp.net repeater 
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! IsPostBack) {
        int id = Convert.ToInt32 (Request.QueryString ["id"]);
        var path = Server.MapPath ("ProjectsImages/ ");
        var images = Directory.GetFiles (path, id + "*");
        ArrayList list = new ArrayList ();
        foreach (var img in images) {
            list.Add (img);
        }
        RepaterImages.DataSource = list;
        RepaterImages.DataBind ();
    }
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    try {
        int id = Convert.ToInt32 (Request.QueryString ["id"]);
        string relativePath = "/ProjectsImages/";
        var path = Server.MapPath (relativePath);
        var images = Directory.GetFiles (path, id + "*").Select (x = > {
            var arrPath = x.Split ('\\');
            string imgName = arrPath [arrPath.Length - 1];
            return relativePath + imgName;
        });
        RepaterImages.DataSource = images;
        RepaterImages.DataBind ();
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40668574_40668658_1_18
40668574_40668871_1_10
Title: "Nested While Loop where ""Not all code paths return a value""" 
----------------------------------------

public int InputCheck () {
    if (userInput >= 3) {
        if (userInput <= 10) {
            return userInput;
        }
        if (userInput > 10) {
            return defaulInt = userInput;
        }
    }
    if (userInput < 3) {
        return defaultInt = userInput;
    }
}
----------------------------------------

public int InputCheck () {
    if (userInput > 10)
        return defaultInt = userInput;

    if (userInput >= 3)
        return userInput;

    return defaultInt = userInput;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40678230_40678440_1_28
40678230_40679428_20_35
Title: There is no ViewData item of type 'IEnumerable<SelectListItem>' that has the key 'FirstMentor' 
----------------------------------------

[HttpPost] public ActionResult SelectMentors (StudentSelections model) {
    if (ModelState.IsValid) {
        db.StudentSelection.Add (model);
        db.SaveChanges ();
        return RedirectToAction ("Index", "Home");
    }
    var mentors = db.Mentor.Where (m = > m.CoursesId == courseId).Select (x = > new SelectListItem {Value = x.FullName, Text = x.FullName,});
    ViewBag.MentorList = mentors;
    return View ();
}
----------------------------------------

[HttpPost] public ActionResult SelectMentors (StudentSelections model) {
    if (ModelState.IsValid) {
        db.StudentSelection.Add (model);
        db.SaveChanges ();
        return RedirectToAction ("Index", "Home");
    }
    SetMentorList ();
    return View ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40692346_40780801_1_11
40692346_40867636_1_92
Title: Deserializing BSON ReadBsonType can only be called when State is Type 
----------------------------------------

public override Cylinder Deserialize (BsonDeserializationContext context, BsonDeserializationArgs args) {
    context.Reader.ReadStartDocument ();
    Cylinder a = new Cylinder ();
    a.Id = context.Reader.ReadObjectId ();
    context.Reader.ReadStartDocument ();
    a.description.type = context.Reader.ReadString ();
    a.description.kind = context.Reader.ReadString ();
    a.description.year = (short) context.Reader.ReadInt32 ();
    a.description.producer = context.Reader.ReadString ();
    return a;
}
----------------------------------------

public override Cylinder Deserialize (BsonDeserializationContext context, BsonDeserializationArgs args) {
    context.Reader.ReadStartDocument ();
    Cylinder a = new Cylinder {Id = context.Reader.ReadObjectId ()};
    context.Reader.ReadStartDocument ();
    a.description.type = context.Reader.ReadString ();
    a.description.kind = context.Reader.ReadString ();
    a.description.year = (short) context.Reader.ReadInt32 ();
    a.description.producer = context.Reader.ReadString ();
    context.Reader.ReadStartArray ();
    a.description.brands = new List < string > ();
    while (context.Reader.ReadBsonType () != BsonType.EndOfDocument) {
        a.description.brands.Add (context.Reader.ReadString ());
    }
    context.Reader.ReadEndArray ();
    context.Reader.ReadStartArray ();
    a.description.model = new Cylinder.mode (new List < string > ());
    while (context.Reader.ReadBsonType () != BsonType.EndOfDocument) {
        a.description.model.items.Add (context.Reader.ReadString ());
    }
    context.Reader.ReadEndArray ();
    a.description.internalproducerdesignation = context.Reader.ReadString ();
    a.description.origin = context.Reader.ReadString ();
    context.Reader.ReadEndDocument ();
    context.Reader.ReadStartDocument ();
    a.elements = new Cylinder.elem {nonspringelements = (short) context.Reader.ReadInt32 (), springelements = (short) context.Reader.ReadInt32 (), discelements = (short) context.Reader.ReadInt32 (), magneticelements = (short) context.Reader.ReadInt32 (), activeelements = (short) context.Reader.ReadInt32 (), passiveelements = (short) context.Reader.ReadInt32 (), totalelements = (short) context.Reader.ReadInt32 ()};
    context.Reader.ReadEndDocument ();
    a.profiles = readStringArray (context);
    a.certifications = readStringArray (context);
    a.colors = readStringArray (context);
    a.specialfittings = readStringArray (context);
    a.cutdepths = (short) context.Reader.ReadInt32 ();
    a.rareness = context.Reader.ReadString ();
    context.Reader.ReadStartDocument ();
    a.value = new Cylinder.val {@new = context.Reader.ReadString (), used = context.Reader.ReadString ()};
    context.Reader.ReadEndDocument ();
    context.Reader.ReadStartDocument ();
    var blawInt = context.Reader.ReadDouble ();
    var blawBool = context.Reader.ReadBoolean ();
    context.Reader.ReadEndDocument ();
    a.availableat = context.Reader.ReadString ();
    a.specialabout = context.Reader.ReadString ();
    context.Reader.ReadStartDocument ();
    a.development = new Cylinder.devel {predecessor = context.Reader.ReadString (), follower = context.Reader.ReadString ()};
    context.Reader.ReadEndDocument ();
    var objects = new List < object > ();
    context.Reader.ReadStartArray ();
    while (context.Reader.ReadBsonType () != BsonType.EndOfDocument) {
        objects.Add (context.Reader.ReadString ());
    }
    context.Reader.ReadEndArray ();
    a.media = objects.ToArray ();
    context.Reader.ReadEndDocument ();
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40695746_40695821_1_19
40695746_40695979_1_19
Title: Run function until successful 
----------------------------------------

private void ApacheTest () {
    if (! File.Exists (HTTPD_PATH)) {
        amountdl.Text = "Apache Not Found! Installation Corrupt!";
    } else {
        StartApacheServer ();
    }
    amountdl.Text = "Apache Is Starting";
    while (ApacheRunning () == false) {
        Task.Delay (1000);
    }
    amountdl.Text = "Apache Started";
}
----------------------------------------

private void ApacheTest () {
    if (! File.Exists (HTTPD_PATH)) {
        amountdl.Text = "Apache Not Found! Installation Corrupt!";
        return;
    }
    amountdl.Text = "Apache Is Starting";
    Task.Factory.StartNew (() = > {
        while (ApacheRunning () == false) {
            Thread.Sleep (200);
        }
        amountdl.Text = "Apache Started";
    }, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.FromCurrentSynchronizationContext ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40696644_40727087_26_47
40696644_40727087_3_14
Title: How to deserialize a YamlNode in YamlDotNet? 
----------------------------------------

public static IEnumerable < ParsingEvent > ConvertToEventStream (YamlNode node) {
    var scalar = node as YamlScalarNode;
    if (scalar != null) {
        return ConvertToEventStream (scalar);
    }
    var sequence = node as YamlSequenceNode;
    if (sequence != null) {
        return ConvertToEventStream (sequence);
    }
    var mapping = node as YamlMappingNode;
    if (mapping != null) {
        return ConvertToEventStream (mapping);
    }
    throw new NotSupportedException (string.Format ("Unsupported node type: {0}", node.GetType ().Name));
}
----------------------------------------

public static IEnumerable < ParsingEvent > ConvertToEventStream (YamlStream stream) {
    yield return new StreamStart ();
    foreach (var document in stream.Documents) {
        foreach (var evt in ConvertToEventStream (document)) {
            yield return evt;
        }
    }
    yield return new StreamEnd ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40696644_40727087_26_47
40696644_40727087_54_65
Title: How to deserialize a YamlNode in YamlDotNet? 
----------------------------------------

public static IEnumerable < ParsingEvent > ConvertToEventStream (YamlNode node) {
    var scalar = node as YamlScalarNode;
    if (scalar != null) {
        return ConvertToEventStream (scalar);
    }
    var sequence = node as YamlSequenceNode;
    if (sequence != null) {
        return ConvertToEventStream (sequence);
    }
    var mapping = node as YamlMappingNode;
    if (mapping != null) {
        return ConvertToEventStream (mapping);
    }
    throw new NotSupportedException (string.Format ("Unsupported node type: {0}", node.GetType ().Name));
}
----------------------------------------

private static IEnumerable < ParsingEvent > ConvertToEventStream (YamlSequenceNode sequence) {
    yield return new SequenceStart (sequence.Anchor, sequence.Tag, false, sequence.Style);
    foreach (var node in sequence.Children) {
        foreach (var evt in ConvertToEventStream (node)) {
            yield return evt;
        }
    }
    yield return new SequenceEnd ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40696644_40727087_26_47
40696644_40727087_67_82
Title: How to deserialize a YamlNode in YamlDotNet? 
----------------------------------------

public static IEnumerable < ParsingEvent > ConvertToEventStream (YamlNode node) {
    var scalar = node as YamlScalarNode;
    if (scalar != null) {
        return ConvertToEventStream (scalar);
    }
    var sequence = node as YamlSequenceNode;
    if (sequence != null) {
        return ConvertToEventStream (sequence);
    }
    var mapping = node as YamlMappingNode;
    if (mapping != null) {
        return ConvertToEventStream (mapping);
    }
    throw new NotSupportedException (string.Format ("Unsupported node type: {0}", node.GetType ().Name));
}
----------------------------------------

private static IEnumerable < ParsingEvent > ConvertToEventStream (YamlMappingNode mapping) {
    yield return new MappingStart (mapping.Anchor, mapping.Tag, false, mapping.Style);
    foreach (var pair in mapping.Children) {
        foreach (var evt in ConvertToEventStream (pair.Key)) {
            yield return evt;
        }
        foreach (var evt in ConvertToEventStream (pair.Value)) {
            yield return evt;
        }
    }
    yield return new MappingEnd ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40696644_40727087_3_14
40696644_40727087_54_65
Title: How to deserialize a YamlNode in YamlDotNet? 
----------------------------------------

public static IEnumerable < ParsingEvent > ConvertToEventStream (YamlStream stream) {
    yield return new StreamStart ();
    foreach (var document in stream.Documents) {
        foreach (var evt in ConvertToEventStream (document)) {
            yield return evt;
        }
    }
    yield return new StreamEnd ();
}
----------------------------------------

private static IEnumerable < ParsingEvent > ConvertToEventStream (YamlSequenceNode sequence) {
    yield return new SequenceStart (sequence.Anchor, sequence.Tag, false, sequence.Style);
    foreach (var node in sequence.Children) {
        foreach (var evt in ConvertToEventStream (node)) {
            yield return evt;
        }
    }
    yield return new SequenceEnd ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40696644_40727087_3_14
40696644_40727087_67_82
Title: How to deserialize a YamlNode in YamlDotNet? 
----------------------------------------

public static IEnumerable < ParsingEvent > ConvertToEventStream (YamlStream stream) {
    yield return new StreamStart ();
    foreach (var document in stream.Documents) {
        foreach (var evt in ConvertToEventStream (document)) {
            yield return evt;
        }
    }
    yield return new StreamEnd ();
}
----------------------------------------

private static IEnumerable < ParsingEvent > ConvertToEventStream (YamlMappingNode mapping) {
    yield return new MappingStart (mapping.Anchor, mapping.Tag, false, mapping.Style);
    foreach (var pair in mapping.Children) {
        foreach (var evt in ConvertToEventStream (pair.Key)) {
            yield return evt;
        }
        foreach (var evt in ConvertToEventStream (pair.Value)) {
            yield return evt;
        }
    }
    yield return new MappingEnd ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40696644_40727087_54_65
40696644_40727087_67_82
Title: How to deserialize a YamlNode in YamlDotNet? 
----------------------------------------

private static IEnumerable < ParsingEvent > ConvertToEventStream (YamlSequenceNode sequence) {
    yield return new SequenceStart (sequence.Anchor, sequence.Tag, false, sequence.Style);
    foreach (var node in sequence.Children) {
        foreach (var evt in ConvertToEventStream (node)) {
            yield return evt;
        }
    }
    yield return new SequenceEnd ();
}
----------------------------------------

private static IEnumerable < ParsingEvent > ConvertToEventStream (YamlMappingNode mapping) {
    yield return new MappingStart (mapping.Anchor, mapping.Tag, false, mapping.Style);
    foreach (var pair in mapping.Children) {
        foreach (var evt in ConvertToEventStream (pair.Key)) {
            yield return evt;
        }
        foreach (var evt in ConvertToEventStream (pair.Value)) {
            yield return evt;
        }
    }
    yield return new MappingEnd ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40728391_40736974_8_20
40728391_40744472_1_15
Title: Call to BeginPaint via PInvoke returning empty update region in PAINTSTRUCT 
----------------------------------------

protected override void WndProc (ref Message msg) {
    switch (msg.Msg) {
        case 15 :
            base.WndProc (ref msg);
            Graphics g = Graphics.FromHwnd (Handle);
            Pen pen = new Pen (Color.Red);
            g.DrawRectangle (pen, 0, 0, 10, 10);
            return;
    }
    base.WndProc (ref msg);
}
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case WM_PAINT :
            mBaseControl.Invalidate ();
            base.WndProc (ref m);
            OnPaint ();
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40768322_40768526_1_25
40768322_40769157_1_14
Title: "Merge multiple lists with variable length ""popping"" elements from each" 
----------------------------------------

private static IEnumerable < T > Merge < T > (params IEnumerable < T > [] sources) {
    List < IEnumerator < T > > enums = sources.Select (source = > source.GetEnumerator ()).ToList ();
    try {
        while (enums.Any ()) {
            for (int i = 0; i < enums.Count;)
                if (enums [i].MoveNext ()) {
                    yield return enums [i].Current;
                    i += 1;
                } else {
                    enums [i].Dispose ();
                    enums.RemoveAt (i);
                }

        }
    }
    finally {
        foreach (var en in enums)
            en.Dispose ();

    }
}
----------------------------------------

static IEnumerable < T > XYZ < T > (IEnumerable < IList < T > > lists) {
    if (lists == null)
        throw new ArgumentNullException ();

    var index = 0;
    while (lists.Any (l = > l.Count > index)) {
        foreach (var list in lists)
            if (list.Count > index)
                yield return list [index];

        index ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40768322_40768526_1_25
40768322_40769183_10_25
Title: "Merge multiple lists with variable length ""popping"" elements from each" 
----------------------------------------

private static IEnumerable < T > Merge < T > (params IEnumerable < T > [] sources) {
    List < IEnumerator < T > > enums = sources.Select (source = > source.GetEnumerator ()).ToList ();
    try {
        while (enums.Any ()) {
            for (int i = 0; i < enums.Count;)
                if (enums [i].MoveNext ()) {
                    yield return enums [i].Current;
                    i += 1;
                } else {
                    enums [i].Dispose ();
                    enums.RemoveAt (i);
                }

        }
    }
    finally {
        foreach (var en in enums)
            en.Dispose ();

    }
}
----------------------------------------

static IEnumerable < T > XYZ < T > (IEnumerable < IList < T > > lists) {
    if (lists == null)
        throw new ArgumentNullException ();

    var finished = false;
    for (int index = 0; ! finished; index ++) {
        finished = true;
        foreach (var list in lists)
            if (list.Count > index) {
                finished = false;
                yield return list [index];
            }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40768322_40768526_1_25
40768322_40769777_9_37
Title: "Merge multiple lists with variable length ""popping"" elements from each" 
----------------------------------------

private static IEnumerable < T > Merge < T > (params IEnumerable < T > [] sources) {
    List < IEnumerator < T > > enums = sources.Select (source = > source.GetEnumerator ()).ToList ();
    try {
        while (enums.Any ()) {
            for (int i = 0; i < enums.Count;)
                if (enums [i].MoveNext ()) {
                    yield return enums [i].Current;
                    i += 1;
                } else {
                    enums [i].Dispose ();
                    enums.RemoveAt (i);
                }

        }
    }
    finally {
        foreach (var en in enums)
            en.Dispose ();

    }
}
----------------------------------------

public static IEnumerable < T > Merge < T > (params IEnumerable < T > [] collections) {
    var maxLength = 0;
    var enumerators = new List < IEnumerator < T > > ();
    foreach (var item in collections) {
        maxLength = Math.Max (item.Count (), maxLength);
        if (collections.Any ())
            enumerators.Add (item.GetEnumerator ());

    }
    enumerators.ForEach (e = > e.MoveNext ());
    var result = new List < T > ();
    for (int i = 0; i < maxLength; i ++) {
        enumerators.ForEach (e = > result.Add (e.Current));
        enumerators = enumerators.Where (e = > e.MoveNext ()).ToList ();
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40768322_40769157_1_14
40768322_40769183_10_25
Title: "Merge multiple lists with variable length ""popping"" elements from each" 
----------------------------------------

static IEnumerable < T > XYZ < T > (IEnumerable < IList < T > > lists) {
    if (lists == null)
        throw new ArgumentNullException ();

    var index = 0;
    while (lists.Any (l = > l.Count > index)) {
        foreach (var list in lists)
            if (list.Count > index)
                yield return list [index];

        index ++;
    }
}
----------------------------------------

static IEnumerable < T > XYZ < T > (IEnumerable < IList < T > > lists) {
    if (lists == null)
        throw new ArgumentNullException ();

    var finished = false;
    for (int index = 0; ! finished; index ++) {
        finished = true;
        foreach (var list in lists)
            if (list.Count > index) {
                finished = false;
                yield return list [index];
            }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40768322_40769157_1_14
40768322_40769777_9_37
Title: "Merge multiple lists with variable length ""popping"" elements from each" 
----------------------------------------

static IEnumerable < T > XYZ < T > (IEnumerable < IList < T > > lists) {
    if (lists == null)
        throw new ArgumentNullException ();

    var index = 0;
    while (lists.Any (l = > l.Count > index)) {
        foreach (var list in lists)
            if (list.Count > index)
                yield return list [index];

        index ++;
    }
}
----------------------------------------

public static IEnumerable < T > Merge < T > (params IEnumerable < T > [] collections) {
    var maxLength = 0;
    var enumerators = new List < IEnumerator < T > > ();
    foreach (var item in collections) {
        maxLength = Math.Max (item.Count (), maxLength);
        if (collections.Any ())
            enumerators.Add (item.GetEnumerator ());

    }
    enumerators.ForEach (e = > e.MoveNext ());
    var result = new List < T > ();
    for (int i = 0; i < maxLength; i ++) {
        enumerators.ForEach (e = > result.Add (e.Current));
        enumerators = enumerators.Where (e = > e.MoveNext ()).ToList ();
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40768322_40769183_10_25
40768322_40769777_9_37
Title: "Merge multiple lists with variable length ""popping"" elements from each" 
----------------------------------------

static IEnumerable < T > XYZ < T > (IEnumerable < IList < T > > lists) {
    if (lists == null)
        throw new ArgumentNullException ();

    var finished = false;
    for (int index = 0; ! finished; index ++) {
        finished = true;
        foreach (var list in lists)
            if (list.Count > index) {
                finished = false;
                yield return list [index];
            }

    }
}
----------------------------------------

public static IEnumerable < T > Merge < T > (params IEnumerable < T > [] collections) {
    var maxLength = 0;
    var enumerators = new List < IEnumerator < T > > ();
    foreach (var item in collections) {
        maxLength = Math.Max (item.Count (), maxLength);
        if (collections.Any ())
            enumerators.Add (item.GetEnumerator ());

    }
    enumerators.ForEach (e = > e.MoveNext ());
    var result = new List < T > ();
    for (int i = 0; i < maxLength; i ++) {
        enumerators.ForEach (e = > result.Add (e.Current));
        enumerators = enumerators.Where (e = > e.MoveNext ()).ToList ();
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40794452_40794509_5_53
40794452_40794510_1_36
Title: if/if else/else 
----------------------------------------

static void Main (string [] args) {
    PopulateCars ();
    int car, length;
    decimal rate = 0m;
    Car.CarBand band;
    Console.WriteLine ("{0,-12} {1,-12} {2,-12}", "Diesel Car", "Petrol Car", "Alt. Fuel Car");
    Console.WriteLine ("{0,-12} {1,-12} {2,-12}", "TC 49", "TC 48", "TC 59");
    Console.WriteLine ("Enter Car Type (TC #): ");
    var keyboardInput = Console.ReadLine ();
    while (! int.TryParse (keyboardInput, out car)) {
        Console.WriteLine ("Invalid car input, try again.");
        keyboardInput = Console.ReadLine ();
    }
    Console.WriteLine ("Enter Licience length in months(6 or 12)");
    keyboardInput = Console.ReadLine ();
    while (! int.TryParse (keyboardInput, out length)) {
        Console.WriteLine ("Invalid months input, try again.");
        keyboardInput = Console.ReadLine ();
    }
    Console.WriteLine ("Enter Emission Band (AA, A, B, C, D): ");
    keyboardInput = Console.ReadLine ();
    while (! Enum.TryParse (keyboardInput, out band)) {
        Console.WriteLine ("Invalid band input, try again.");
        keyboardInput = Console.ReadLine ();
    }
    var matchedCar = CarList.FirstOrDefault (c = > c.CarNumber == car && c.Lenght == length && c.Band == band);
    if (matchedCar != null)
        Console.WriteLine ("The rate for this car is {0}", matchedCar.Rate);
    else
        Console.WriteLine ("Car not found");

    Console.ReadLine ();
}
----------------------------------------

public static void Main () {
    int car = 0;
    int length = 0;
    Console.WriteLine ("Enter Car Type (TC #): ");
    if (! int.TryParse (Console.ReadLine (), out car)) {
        Console.WriteLine ("Not valid number");
        return;
    }
    Console.WriteLine ("Enter Licience length in months(6 or 12)");
    if (! int.TryParse (Console.ReadLine (), out length)) {
        Console.WriteLine ("Not valid number");
        return;
    }
    Console.WriteLine ("Enter Emission Band (AA, A, B, C, D): ");
    string band = Console.ReadLine ();
    Dictionary < Tuple < int, int, string >, decimal > carDataDic = GetCarDetails ();
    decimal ratio = 0;
    Tuple < int, int, string > checkRatioKey = new Tuple < int, int, string > (car, length, band);
    if (! carDataDic.TryGetValue (checkRatioKey, out ratio)) {
        Console.WriteLine ("No value found for input data");
        return;
    }
    Console.WriteLine ("Ratio is: " + ratio);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40799565_40799764_1_33
40799565_40800287_1_31
Title: File Gets Written In The First Condition Only 
----------------------------------------

public static void WriteMessage (string message) {
    string path = @"log.txt";
    FileStream stream;
    if (File.Exists (path)) {
        string [] lines = File.ReadAllLines (path);
        stream = new FileStream (path, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);
        using (StreamWriter writer = new StreamWriter (stream))
        {
            if (lines.Length > 0) {
                writer.WriteLine ("\n" + "Another Line Added - " + message);
                writer.Flush ();
            }
        }} else {
        stream = new FileStream (path, FileMode.Create);
        using (StreamWriter writer = new StreamWriter (stream))
        {
            writer.WriteLine (message);
            writer.Flush ();
        }}
}
----------------------------------------

public static void WriteMessage (string message) {
    var path = @"../../sth.txt";
    if (File.Exists (path)) {
        string [] lines = File.ReadAllLines (path);
        using (var writer = new StreamWriter (path, true))
        {
            if (lines.Length > 0) {
                writer.WriteLine ("Another Line Added - " + message);
            } else {
                writer.WriteLine (message);
            }
            writer.Flush ();
        }} else {
        using (StreamWriter writer = new StreamWriter (path))
        {
            writer.WriteLine (message);
            writer.Flush ();
        }}
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40826831_41068390_29_45
40826831_41068390_7_21
Title: Get parent of object instantiated by DataTemplate 
----------------------------------------

public static T FindVisualAscendant < T > (this FrameworkElement element) where T : FrameworkElement {
    var parent = VisualTreeHelper.GetParent (element);
    if (parent == null) {
        return null;
    }
    if (parent is T) {
        return parent as T;
    }
    return (parent as FrameworkElement).FindVisualAscendant < T > ();
}
----------------------------------------

public static T FindAscendant < T > (this FrameworkElement element) where T : FrameworkElement {
    if (element.Parent == null) {
        return null;
    }
    if (element.Parent is T) {
        return element.Parent as T;
    }
    return (element.Parent as FrameworkElement).FindAscendant < T > ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40845079_40845416_1_22
40845079_40860852_1_25
Title: Cleanup String: Replace consecutive nonalphanum Character with single seperator 
----------------------------------------

string Format (string str, char seperator) {
    if (string.IsNullOrEmpty (str))
        return string.Empty;

    var sb = new StringBuilder ();
    bool previousWasNonAlphaNum = false;
    foreach (var c in str) {
        if (char.IsLetterOrDigit (c)) {
            if (previousWasNonAlphaNum && sb.Count > 0)
                sb.Append (seperator);

            sb.Append (c);
        }
        previousWasNonAlphaNum = ! char.IsLetterOrDigit (c);
    }
    return sb.ToString ();
}
----------------------------------------

string Format (string str, string separator) {
    var delimiter = char.Parse (separator);
    var replaced = false;
    var cArray = str.Select (c = > {
        if (! char.IsLetterOrDigit (c) & ! replaced) {
            replaced = true;
            return delimiter;
        } else if (char.IsLetterOrDigit (c)) {
            replaced = false;
        } else {
            return ' ';
        }
        return c;
    }).ToArray ();
    return new string (cArray).Replace (" ", "");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40845522_40845741_1_17
40845522_40845971_1_23
Title: List<> too many loops 
----------------------------------------

public static void Main () {
    int sum = 0;
    string temp = "";
    for (long i = 2; i < 100; i ++) {
        temp = i.ToString ();
        for (int y = 0; y < temp.Length; y ++) {
            int digit = Convert.ToInt32 (temp.Substring (y, 1));
            sum += Math.Pow (digit, 4);
        }
        Console.WriteLine ("i = {0}, sum = {1}", i, sum);
        sum = 0;
    }
}
----------------------------------------

public static void Main () {
    for (int number = 2; number < 100; ++ number) {
        string value = number.ToString ();
        int digits = value.Length;
        int sum = 0;
        foreach (char c in value) {
            int digit = c - '0';
            sum += Math.Pow (digit, 4);
        }
        Console.WriteLine ("{0, 2}, sum = {1, 5}, digits count = {2, 1}", number, sum, digits);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40845522_40845741_1_17
40845522_40847608_1_12
Title: List<> too many loops 
----------------------------------------

public static void Main () {
    int sum = 0;
    string temp = "";
    for (long i = 2; i < 100; i ++) {
        temp = i.ToString ();
        for (int y = 0; y < temp.Length; y ++) {
            int digit = Convert.ToInt32 (temp.Substring (y, 1));
            sum += Math.Pow (digit, 4);
        }
        Console.WriteLine ("i = {0}, sum = {1}", i, sum);
        sum = 0;
    }
}
----------------------------------------

public static void Main () {
    for (long i = 2; i < 100; i ++) {
        int sum = 0;
        foreach (var digit in i.ToString ().Select (digit = > int.Parse (digit.ToString ()))) {
            sum += Convert.ToInt32 (Math.Pow (Convert.ToInt32 (digit), 4));
        }
        Console.WriteLine ("i = {0}, sum = {1}", i, sum);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40845522_40845971_1_23
40845522_40847608_1_12
Title: List<> too many loops 
----------------------------------------

public static void Main () {
    for (int number = 2; number < 100; ++ number) {
        string value = number.ToString ();
        int digits = value.Length;
        int sum = 0;
        foreach (char c in value) {
            int digit = c - '0';
            sum += Math.Pow (digit, 4);
        }
        Console.WriteLine ("{0, 2}, sum = {1, 5}, digits count = {2, 1}", number, sum, digits);
    }
}
----------------------------------------

public static void Main () {
    for (long i = 2; i < 100; i ++) {
        int sum = 0;
        foreach (var digit in i.ToString ().Select (digit = > int.Parse (digit.ToString ()))) {
            sum += Convert.ToInt32 (Math.Pow (Convert.ToInt32 (digit), 4));
        }
        Console.WriteLine ("i = {0}, sum = {1}", i, sum);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40846104_40846357_1_25
40846104_40846545_1_26
Title: How to apply if condition in LINQ? 
----------------------------------------

public IEnumerable < ReportMapper > FetchReports (DateTime startDate, DateTime endDate, int docMode, int pageNumber, bool flag) {
    using (var entities = new DatabaseEntities1 ())
    {
        IQueryable < ReportMapper > reports = from c in entities.tDocumentStatus
            join d in entities.tTOCStructures on c.DocumentId equals d.DocumentID
            join e in entities.tUsers on d.LastUpdatedBy equals e.UserUID
            orderby c.AssignedDate descending
            where c.AssignedDate >= startDate && c.AssignedDate <= endDate && (docMode <= 0 || c.StatusId == docMode)
            select new ReportMapper () {DocumentName = d.FolderName, AssignedDate = c.AssignedDate, ReviewStatus = c.tStatu.StatusName, ActionPerformedBy = e.FirstName + " " + e.LastName};
        if (! flag)
            reports = reports.Skip (pageNumber * 10).Take (50);

        return reports.ToList ();
    }}
----------------------------------------

public IEnumerable < ReportMapper > FetchReports (DateTime startDate, DateTime endDate, int docMode, int pageNumber, bool flag) {
    try {
        IEnumerable < ReportMapper > reports;
        using (var entities = new DatabaseEntities1 ())
        {
            var query = (from c in entities.tDocumentStatus
                join d in entities.tTOCStructures on c.DocumentId equals d.DocumentID
                join e in entities.tUsers on d.LastUpdatedBy equals e.UserUID
                orderby c.AssignedDate descending
                where c.AssignedDate >= startDate && c.AssignedDate <= endDate && (docMode <= 0 || c.StatusId == docMode)
                select new ReportMapper () {DocumentName = d.FolderName, AssignedDate = c.AssignedDate, ReviewStatus = c.tStatu.StatusName, ActionPerformedBy = e.FirstName + " " + e.LastName});
            if (! flag)
                query = query.Skip (pageNumber * 10).Take (50);

            reports = query.ToList < ReportMapper > ();
            return reports;
        }}
    catch (Exception ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4085304_12052054_1_33
4085304_13256206_1_30
Title: Get a remote MAC adress via IPv6 
----------------------------------------

public static string netsh (String IPv6) {
    Process p = new Process ();
    p.StartInfo.FileName = "netsh.exe";
    String command = "int ipv6 show neigh";
    Console.WriteLine (command);
    p.StartInfo.Arguments = command;
    p.StartInfo.UseShellExecute = false;
    p.StartInfo.RedirectStandardOutput = true;
    p.Start ();
    String output = "go";
    while (output != null) {
        try {
            output = p.StandardOutput.ReadLine ();
        }
        catch (Exception) {
            output = null;
        }
        if (output.Contains (IPv6)) {
            output = output.Replace (IPv6, "").Replace (" ", "").TrimToMaxLength (17);
            return output;
        }
    }
    return null;
}
----------------------------------------

public static string netsh (String IPv6) {
    IPAddress wanted;
    if (! IPAddress.TryParse (IPv6, out wanted))
        throw new ArgumentException ("Can't parse as an IPAddress", "IPv6");

    Regex re = new Regex ("^([0-9A-F]\S+)\s+(\S+)\s+(\S+)", RegexOptions.IgnoreCase);
    Match m = re.Match (output);
    if (m.Success) {
        IPAddress found;
        if (IPAddress.TryParse (m.Groups [1].Value, out found)) {
            if (wanted.Equals (found)) {
                return m.Groups [2].Value;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40859497_40859615_1_20
40859497_40860189_1_25
Title: How to manage the mysql connection in correct way without getting a error 
----------------------------------------

public List < string > SelectCategory () {
    List < string > result = new List < string > ();
    string Command = "SELECT * FROM categories WHERE online = 1";
    using (MySqlConnection mConnection = new MySqlConnection (ConnectionString))
    {
        mConnection.Open ();
        using (MySqlCommand cmd = new MySqlCommand (Command, mConnection))
        {
            using (MySqlDataReader reader = cmd.ExecuteReader ())
            {
                while (reader.Read ()) {
                    result.Add (reader.GetString (1));
                }
            }}} return result;
}
----------------------------------------

public MySqlDataReader SelectCategory () {
    try {
        MySqlCommand cmd = connection.CreateCommand ();
        cmd.CommandText = "SELECT * FROM categories WHERE online = 1";
        connection.Open ();
        MySqlDataReader categories = cmd.ExecuteReader ();
        return categories;
    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
        return null;
    }
    finally {
        if (connection != null && connection.State == ConnectionState.Open) {
            connection.Close ();
            connection.Dispose ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40879401_40879598_10_44
40879401_40879785_11_45
Title: how to allow user to enter the password 3 times in c#? 
----------------------------------------

private void btnOK_Click (object sender, RoutedEventArgs e) {
    try {
        StreamReader sr = new StreamReader ("Customer.txt");
        string line;
        while ((line = sr.ReadLine ()) != null) {
            string [] lineArray = line.Split (';');
            if (lineArray [0] == txtName.Text && lineArray [1] == pbPassword.Password) {
                MainWindow mainWindow = new MainWindow ();
                this.Hide ();
                mainWindow.ShowDialog ();
            }
        }
        sr.Close ();
        if (attempts < 3) {
            MessageBox.Show ("The NAME or PIN is incorect, you have " + (3 - attempts) + " attemps more");
        } else {
            MessageBox.Show ("Please try again later");
            this.Close ();
        }
        attempts ++;
    }
    catch (Exception error) {
        MessageBox.Show (error.Message);
    }
}
----------------------------------------

private void btnOK_Click (object sender, RoutedEventArgs e) {
    try {
        var users = File.ReadAllLines ("Customer.txt").Select (line = > new {login = line [0], password = line [1]}).ToList ();
        attempts ++;
        if (users.Any (user = > user.login == txtName.Text && user.password == pbPassword.Password)) {
            MainWindow mainWindow = new MainWindow ();
            this.Hide ();
            mainWindow.ShowDialog ();
            return;
        } else {
            if (attempts < 3) {
                MessageBox.Show ("The NAME or PIN is incorect, you have " + (3 - attempts) + " attemps more");
            }
            if (attempts >= 3) {
                MessageBox.Show ("Please try again later");
                this.Close ();
            }
        }
    }
    catch (Exception error) {
        MessageBox.Show (error.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40881244_40881339_1_25
40881244_40883610_1_32
Title: Image handler images not showing in Chrome and FF 
----------------------------------------

public void ProcessRequest (HttpContext context) {
    try {
        OracleDataReader rdr = null;
        OracleConnection dbConn;
        dbConn = Conn.getConn ();
        string empcd = context.Request.QueryString ["empcd"].ToString ();
        OracleCommand cmd = new OracleCommand ("select photo img from olphrm.emp_personal where emp_code='" + empcd + "'", dbConn);
        dbConn.Open ();
        rdr = cmd.ExecuteReader ();
        while (rdr.Read ()) {
            context.Response.Write (Convert.ToBase64String ((byte []) rdr ["img"]));
        }
        if (rdr != null)
            rdr.Close ();

    }
    catch (Exception ex) {
    }
}
----------------------------------------

public void ProcessRequest (HttpContext context) {
    byte [] bin = new byte [0];
    while (rdr.Read ()) {
        bin = (byte []) rdr ["img"];
    }
    context.Response.ClearHeaders ();
    context.Response.Clear ();
    context.Response.Buffer = true;
    context.Response.ContentType = "image/jpeg";
    context.Response.AddHeader ("Content-Disposition", "attachment; filename=\"myImage.jpg\"");
    context.Response.AddHeader ("content-Length", bin.Length.ToString ());
    context.Response.OutputStream.Write (bin, 0, bin.Length);
    context.Response.Flush ();
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4089163_4089205_1_14
4089163_4090070_1_25
Title: Appropriate use of Monitor.Exit 
----------------------------------------

void MethodA () {
    bool condition;
    lock (this)
    {
        condition = someCondition;
        if (! condition) {
        }
    } if (condition)
        MethodB ();

}
----------------------------------------

void MethodA () {
    if (someCondition) {
        bool conditionReached = false;
        Monitor.Enter (this);
        try {
            if (someCondition) {
                conditionReached = true;
            }
        }
        finally {
            Monitor.Exit (this);
        }
        if (conditionReached) {
            MethodB ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40898719_40898855_1_22
40898719_52013572_1_11
Title: C# - Binary Search Tree Contains/Is Present Method 
----------------------------------------

public Boolean Contains (T item, ref Node < T > tree) {
    if (tree == null) {
        return false;
    }
    if (tree.data == item) {
        return true;
    }
    if (item.CompareTo (tree.Data) < 0) {
        return Contains (item, ref tree.Left);
    }
    if (item.CompareTo (tree.Data) > 0) {
        return Contains (item, ref tree.Right);
    }
}
----------------------------------------

public static bool Contains (Node root, int value) {
    if (root == null)
        return false;

    if (root.Value == value)
        return true;

    if (value < root.Value)
        return Contains (root.Left, value);
    else
        return Contains (root.Right, value);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40910320_40990723_1_27
40910320_41018459_1_22
Title: MeasureString always thinks whitespace will fit 
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    string sample = "abc                       def";
    e.Graphics.DrawString (sample, this.Font, Brushes.Black, PointF.Empty);
    e.Graphics.DrawLine (Pens.Red, trackBar1.Value, 0, trackBar1.Value, 100);
    StringFormat sf = new StringFormat (StringFormatFlags.MeasureTrailingSpaces | StringFormatFlags.NoWrap | StringFormatFlags.LineLimit);
    sf.Trimming = StringTrimming.Character;
    var underscoreWidth = e.Graphics.MeasureString ("_", this.Font).Width;
    for (int i = 0; i < sample.Length; i ++) {
        var s = sample.Substring (0, i + 1) + "_";
        var size = e.Graphics.MeasureString (s, this.Font).Width - underscoreWidth;
        if (size > trackBar1.Value) {
            if (s.Length > 0) {
                var ok = s.Substring (0, s.Length - 2);
                textBox1.Text = "[" + ok + "]";
                base.OnPaint (e);
                return;
            }
        }
    }
    textBox1.Text = "[" + sample + "]";
    base.OnPaint (e);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    string sample = "abc                       defXXXXXXXXXXXXiiiiiiiX";
    TextFormatFlags flags = TextFormatFlags.NoPadding | TextFormatFlags.TextBoxControl | TextFormatFlags.SingleLine | TextFormatFlags.NoPrefix;
    TextRenderer.DrawText (e.Graphics, sample, this.Font, Point.Empty, Color.Black, flags);
    e.Graphics.DrawLine (Pens.Red, trackBar1.Value, 0, trackBar1.Value, 100);
    string measuredString = sample;
    for (int i = 0; i < sample.Length; i ++) {
        Size size = TextRenderer.MeasureText (e.Graphics, sample.Substring (0, i + 1), this.Font, new Size (10000000, 1000000), flags);
        if (size.Width > trackBar1.Value) {
            textBox1.Text = "[" + sample.Substring (0, i + 1) + "]";
            break;
        }
    }
    base.OnPaint (e);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40969191_40969408_1_21
40969191_40969584_1_19
Title: Trying to implement multiple conditional operator 
----------------------------------------

private void common () {
    if (Headername [CI] == "Yellow") {
        if (objnamewritten [CI].Equals ("Banana") || objnamewritten [CI].Equals ("lemomn") || objnamewritten [CI].Equals ("Sun")) {
            ppup.Height = Window.Current.Bounds.Height;
            ppup.IsOpen = true;
        } else {
            ppup1.Height = Window.Current.Bounds.Height;
            ppup1.IsOpen = true;
        }
    } else {
        ppup1.Height = Window.Current.Bounds.Height;
        ppup1.IsOpen = true;
    }
}
----------------------------------------

private void common () {
    if (Headername [CI] == "Yellow") {
        switch (objnamewritten [CI]) {
            case "Banana" : case "Sun" : case "lemomn" :
                ppup.Height = Window.Current.Bounds.Height;
                ppup.IsOpen = true;
                break;
            default :
                ppup1.Height = Window.Current.Bounds.Height;
                ppup1.IsOpen = true;
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41013695_41015964_1_21
41013695_41016970_1_22
Title: Find all of controls inside ItemsControl - WPF 
----------------------------------------

public static T FindChild < T > (DependencyObject parent) where T : DependencyObject {
    if (parent != null) {
        for (int i = 0; i < VisualTreeHelper.GetChildrenCount (parent); i ++) {
            DependencyObject child = VisualTreeHelper.GetChild (parent, i);
            if (child != null && child is T) {
                return (T) child;
            }
            T childItem = FindChild < T > (child);
            if (childItem != null) {
                return childItem;
            }
        }
    }
    return null;
}
----------------------------------------

public static List < T > GetChildrenOfType < T > (this DependencyObject depObj) where T : DependencyObject {
    var result = new List < T > ();
    if (depObj == null)
        return null;

    var queue = new Queue < DependencyObject > ();
    queue.Enqueue (depObj);
    while (queue.Count > 0) {
        var currentElement = queue.Dequeue ();
        var childrenCount = VisualTreeHelper.GetChildrenCount (currentElement);
        for (var i = 0; i < childrenCount; i ++) {
            var child = VisualTreeHelper.GetChild (currentElement, i);
            if (child is T)
                result.Add (child as T);

            queue.Enqueue (child);
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41040189_44853182_1_22
41040189_52918088_7_27
Title: Fastest way to map result of SqlDataReader to object 
----------------------------------------

public static T ConvertToObject < T > (this SqlDataReader rd) where T : class, new () {
    Type type = typeof (T);
    var accessor = TypeAccessor.Create (type);
    var members = accessor.GetMembers ();
    var t = new T ();
    for (int i = 0; i < rd.FieldCount; i ++) {
        if (! rd.IsDBNull (i)) {
            string fieldName = rd.GetName (i);
            if (members.Any (m = > string.Equals (m.Name, fieldName, StringComparison.OrdinalIgnoreCase))) {
                accessor [t, fieldName] = rd.GetValue (i);
            }
        }
    }
    return t;
}
----------------------------------------

public static void MapDataToObject < T > (this SqlDataReader dataReader, T newObject) {
    if (newObject == null)
        throw new ArgumentNullException (nameof (newObject));

    var objectMemberAccessor = TypeAccessor.Create (newObject.GetType ());
    var propertiesHashSet = objectMemberAccessor.GetMembers ().Select (mp = > mp.Name).ToHashSet ();
    for (int i = 0; i < dataReader.FieldCount; i ++) {
        if (propertiesHashSet.Contains (dataReader.GetName (i))) {
            objectMemberAccessor [newObject, dataReader.GetName (i)] = dataReader.IsDBNull (i) ? null : dataReader.GetValue (i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4104464_33186790_9_39
4104464_33223656_29_42
Title: Convert DataTable to Generic List in C# 
----------------------------------------

public static List < T > MappingToEntity < T > (this DataTable dt) {
    try {
        var lst = new List < T > ();
        var tClass = typeof (T);
        PropertyInfo [] proInModel = tClass.GetProperties ();
        List < DataColumn > proInDataColumns = dt.Columns.Cast < DataColumn > ().ToList ();
        T cn;
        foreach (DataRow item in dt.Rows) {
            cn = (T) Activator.CreateInstance (tClass);
            foreach (var pc in proInModel) {
                var d = proInDataColumns.Find (c = > string.Equals (c.ColumnName.ToLower ().Trim (), pc.Name.ToLower ().Trim (), StringComparison.CurrentCultureIgnoreCase));
                if (d != null)
                    pc.SetValue (cn, item [pc.Name], null);

            }
            lst.Add (cn);
        }
        return lst;
    }
    catch (Exception e) {
        throw e;
    }
}
----------------------------------------

private static T CreateItemFromRow < T > (DataRow row, IList < PropertyInfo > properties) where T : new () {
    T item = new T ();
    foreach (var property in properties) {
        var atr = property.GetCustomAttribute (typeof (IgnoreAttribute));
        if (atr == null)
            property.SetValue (item, row [property.Name], null);

    }
    return item;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4104464_33186790_9_39
4104464_4106597_14_26
Title: Convert DataTable to Generic List in C# 
----------------------------------------

public static List < T > MappingToEntity < T > (this DataTable dt) {
    try {
        var lst = new List < T > ();
        var tClass = typeof (T);
        PropertyInfo [] proInModel = tClass.GetProperties ();
        List < DataColumn > proInDataColumns = dt.Columns.Cast < DataColumn > ().ToList ();
        T cn;
        foreach (DataRow item in dt.Rows) {
            cn = (T) Activator.CreateInstance (tClass);
            foreach (var pc in proInModel) {
                var d = proInDataColumns.Find (c = > string.Equals (c.ColumnName.ToLower ().Trim (), pc.Name.ToLower ().Trim (), StringComparison.CurrentCultureIgnoreCase));
                if (d != null)
                    pc.SetValue (cn, item [pc.Name], null);

            }
            lst.Add (cn);
        }
        return lst;
    }
    catch (Exception e) {
        throw e;
    }
}
----------------------------------------

public static IList < T > ToList < T > (this DataTable table) where T : new () {
    IList < PropertyInfo > properties = GetPropertiesForType < T > ();
    IList < T > result = new List < T > ();
    foreach (var row in table.Rows) {
        var item = CreateItemFromRow < T > ((DataRow) row, properties);
        result.Add (item);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4104464_33223656_29_42
4104464_4106597_14_26
Title: Convert DataTable to Generic List in C# 
----------------------------------------

private static T CreateItemFromRow < T > (DataRow row, IList < PropertyInfo > properties) where T : new () {
    T item = new T ();
    foreach (var property in properties) {
        var atr = property.GetCustomAttribute (typeof (IgnoreAttribute));
        if (atr == null)
            property.SetValue (item, row [property.Name], null);

    }
    return item;
}
----------------------------------------

public static IList < T > ToList < T > (this DataTable table) where T : new () {
    IList < PropertyInfo > properties = GetPropertiesForType < T > ();
    IList < T > result = new List < T > ();
    foreach (var row in table.Rows) {
        var item = CreateItemFromRow < T > ((DataRow) row, properties);
        result.Add (item);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41051557_41051658_1_26
41051557_41053087_21_46
Title: Limit Button Clicks Based on User Input 
----------------------------------------

protected void addBtn_Click (object sender, EventArgs e) {
    if (Session ["Count"] == null) {
        Session ["Count"] = 0;
    }
    count = int.Parse (Session ["Count"]);
    int qty = Convert.ToInt32 (qtyDDL.SelectedValue);
    count ++;
    roomtypeDDL.Enabled = false;
    qtyDDL.Enabled = false;
    if (count < qty) {
        string roomid = roomidBox.Text;
        string rtype = roomtypeDDL.SelectedItem.ToString ();
    } else {
        roomidBox.Enabled = false;
        roomtypeDDL.Enabled = true;
        addBtn.Enabled = false;
        addBtn.BackColor = System.Drawing.ColorTranslator.FromHtml ("#2C2A2A");
    }
    Session ["Count"] = count;
}
----------------------------------------

protected void addBtn_Click (object sender, EventArgs e) {
    count = Convert.ToInt32 (Session ["Count"]);
    roomtypeDDL.Enabled = false;
    qtyDDL.Enabled = false;
    string rtype, roomid;
    if (count < Convert.ToInt32 (Session ["qty"])) {
        string roomid = roomidBox.Text;
        string rtype = roomtypeDDL.SelectedItem.ToString ();
    }
    count ++;
    if (count == Convert.ToInt32 (Session ["qty"])) {
        roomidBox.Enabled = false;
        roomtypeDDL.Enabled = true;
        roomtypeDDL.SelectedIndex = 0;
        qtyDDL.SelectedIndex = 0;
        addBtn.Enabled = false;
        addBtn.BackColor = System.Drawing.ColorTranslator.FromHtml ("#2C2A2A");
    }
    Session ["Count"] = count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41059269_41059698_1_41
41059269_41059851_12_45
Title: How to call a method from a switch? 
----------------------------------------

static void AdminMenu () {
    char innerchoice;
    Console.WriteLine ("Press [1] to Add new student.");
    Console.WriteLine ("Press [2] to Add new course.");
    Console.WriteLine ("Press [3] to Enter course prerequisite.");
    Console.WriteLine ("Press [4] to View List of all students in a specific course.");
    Console.WriteLine ("Press [5] to View List of Finished courses.");
    Console.WriteLine ("Press [6] to View List of courses in progress.");
    Console.WriteLine ("Press [7] to edit all course data.");
    innerchoice = char.Parse (Console.ReadLine ());
    switch (innerchoice) {
        case '1' :
            break;
        case '2' :
            break;
        case '3' :
            break;
        case '4' :
            break;
        case '5' :
            break;
        case '6' :
            break;
        case '7' :
            break;
        default :
            AdminMenu ();
            break;
    }
}
----------------------------------------

static void AdminMenu () {
    bool run = true;
    while (run) {
        PrintMenu ();
        char innerchoice = char.Parse (Console.ReadLine ());
        switch (innerchoice) {
            case '1' :
                run = false;
                break;
            case '2' :
                run = false;
                break;
            case '3' :
                run = false;
                break;
            case '4' :
                run = false;
                break;
            case '5' :
                run = false;
                break;
            case '6' :
                run = false;
                break;
            case '7' :
                run = false;
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41059269_41059851_12_45
41059269_41060725_1_32
Title: How to call a method from a switch? 
----------------------------------------

static void AdminMenu () {
    bool run = true;
    while (run) {
        PrintMenu ();
        char innerchoice = char.Parse (Console.ReadLine ());
        switch (innerchoice) {
            case '1' :
                run = false;
                break;
            case '2' :
                run = false;
                break;
            case '3' :
                run = false;
                break;
            case '4' :
                run = false;
                break;
            case '5' :
                run = false;
                break;
            case '6' :
                run = false;
                break;
            case '7' :
                run = false;
                break;
        }
    }
}
----------------------------------------

static void AdminMenu () {
    char innerchoice;
    bool Leave = false;
    while (Leave == false) {
        Leave = true;
        innerchoice = GetChoice ();
        switch (innerchoice) {
            case '1' :
                break;
            case '2' :
                break;
            case '3' :
                break;
            case '4' :
                break;
            case '5' :
                break;
            case '6' :
                break;
            case '7' :
                break;
            default :
                Leave = false;
                Console.Clear ();
                Console.WriteLine ("Press a valid value.");
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4106862_24058279_1_20
4106862_50212652_77_88
Title: How to sort depended objects by dependency 
----------------------------------------

public static IEnumerable < T > TopologicalSort < T > (this IEnumerable < T > nodes, Func < T, IEnumerable < T > > connected) {
    var elems = nodes.ToDictionary (node = > node, node = > new HashSet < T > (connected (node)));
    while (elems.Count > 0) {
        var elem = elems.FirstOrDefault (x = > x.Value.Count == 0);
        if (elem.Key == null) {
            throw new ArgumentException ("Cyclic connections are not allowed");
        }
        elems.Remove (elem.Key);
        foreach (var selem in elems) {
            selem.Value.Remove (elem.Key);
        }
        yield return elem.Key;
    }
}
----------------------------------------

public static T [] Sort < T > (T [] source, Func < T, T, bool > isDependency) {
    var list = new LinkedList < T > (source);
    var result = new List < T > ();
    while (list.Any ()) {
        var obj = GetIndependentObject (list, isDependency);
        list.Remove (obj);
        result.Add (obj);
    }
    return result.ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4106862_24058279_1_20
4106862_51235189_1_39
Title: How to sort depended objects by dependency 
----------------------------------------

public static IEnumerable < T > TopologicalSort < T > (this IEnumerable < T > nodes, Func < T, IEnumerable < T > > connected) {
    var elems = nodes.ToDictionary (node = > node, node = > new HashSet < T > (connected (node)));
    while (elems.Count > 0) {
        var elem = elems.FirstOrDefault (x = > x.Value.Count == 0);
        if (elem.Key == null) {
            throw new ArgumentException ("Cyclic connections are not allowed");
        }
        elems.Remove (elem.Key);
        foreach (var selem in elems) {
            selem.Value.Remove (elem.Key);
        }
        yield return elem.Key;
    }
}
----------------------------------------

public static IEnumerable < T > TopogicalSequenceDFS < T > (this IEnumerable < T > source, Func < T, IEnumerable < T > > deps) {
    HashSet < T > yielded = new HashSet < T > ();
    HashSet < T > visited = new HashSet < T > ();
    Stack < Tuple < T, IEnumerator < T > > > stack = new Stack < Tuple < T, IEnumerator < T > > > ();
    foreach (T t in source) {
        stack.Clear ();
        if (visited.Add (t))
            stack.Push (new Tuple < T, IEnumerator < T > > (t, deps (t).GetEnumerator ()));

        while (stack.Count > 0) {
            var p = stack.Peek ();
            bool depPushed = false;
            while (p.Item2.MoveNext ()) {
                var curr = p.Item2.Current;
                if (visited.Add (curr)) {
                    stack.Push (new Tuple < T, IEnumerator < T > > (curr, deps (curr).GetEnumerator ()));
                    depPushed = true;
                    break;
                } else if (! yielded.Contains (curr))
                    throw new Exception ("cycle");

            }
            if (! depPushed) {
                p = stack.Pop ();
                if (! yielded.Add (p.Item1))
                    throw new Exception ("bug");

                yield return p.Item1;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4106862_50212652_27_37
4106862_9991916_88_113
Title: How to sort depended objects by dependency 
----------------------------------------

private static List < T > Sort (List < T > objects, List < Item > dependencies) {
    var result = new List < T > (objects.Count);
    while (objects.Any ()) {
        var obj = GetIndependentObject (objects, dependencies);
        RemoveObject (obj, objects, dependencies);
        result.Add (obj);
    }
    return result;
}
----------------------------------------

public T [] Sort () {
    List < T > result = new List < T > (_matrix.Count);
    while (_matrix.Count > 0) {
        T independentObject;
        if (! this.GetIndependentObject (out independentObject)) {
            throw new CircularReferenceException ();
        }
        result.Add (independentObject);
        this.DeleteObject (independentObject);
    }
    return result.ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4106862_50212652_77_88
4106862_51235189_1_39
Title: How to sort depended objects by dependency 
----------------------------------------

public static T [] Sort < T > (T [] source, Func < T, T, bool > isDependency) {
    var list = new LinkedList < T > (source);
    var result = new List < T > ();
    while (list.Any ()) {
        var obj = GetIndependentObject (list, isDependency);
        list.Remove (obj);
        result.Add (obj);
    }
    return result.ToArray ();
}
----------------------------------------

public static IEnumerable < T > TopogicalSequenceDFS < T > (this IEnumerable < T > source, Func < T, IEnumerable < T > > deps) {
    HashSet < T > yielded = new HashSet < T > ();
    HashSet < T > visited = new HashSet < T > ();
    Stack < Tuple < T, IEnumerator < T > > > stack = new Stack < Tuple < T, IEnumerator < T > > > ();
    foreach (T t in source) {
        stack.Clear ();
        if (visited.Add (t))
            stack.Push (new Tuple < T, IEnumerator < T > > (t, deps (t).GetEnumerator ()));

        while (stack.Count > 0) {
            var p = stack.Peek ();
            bool depPushed = false;
            while (p.Item2.MoveNext ()) {
                var curr = p.Item2.Current;
                if (visited.Add (curr)) {
                    stack.Push (new Tuple < T, IEnumerator < T > > (curr, deps (curr).GetEnumerator ()));
                    depPushed = true;
                    break;
                } else if (! yielded.Contains (curr))
                    throw new Exception ("cycle");

            }
            if (! depPushed) {
                p = stack.Pop ();
                if (! yielded.Add (p.Item1))
                    throw new Exception ("bug");

                yield return p.Item1;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41134087_41134157_1_10
41134087_41134165_1_12
Title: How to check the float decimal point is not longer than 0.00001? C# 
----------------------------------------

private Boolean isDc (string userInput) {
    var num = Decimal.Parse (userInput);
    if (decimal.Round (num, 5) == num)
        return true;
    else
        MessageBox.Show ("You should input within 5dc(E.g. 0.00001, 1.12345)");

    return false;
}
----------------------------------------

public boolean isDc (float userInput) {
    decimal outdc;
    if (decimal.TryParse (userInput.ToString (), out outdc)) {
        if (BitConverter.GetBytes (decimal.GetBits (outdc) [3]) [2] == 5)
            return true;
        else
            MessageBox.show ("You should input within 5dc(E.g. 0.00001, 1.12345)");

    }
    return false;
}
----------------------------------------

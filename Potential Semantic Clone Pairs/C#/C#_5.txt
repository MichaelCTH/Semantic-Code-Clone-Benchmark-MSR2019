$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
139592_48249360_17_26
139592_48249360_28_38
Title: "What is the best way to clone/deep copy a .NET generic Dictionary<string T>?" 
----------------------------------------

public static Dictionary < T1, T2 > CloneValues < T1, T2 > (Dictionary < T1, T2 > dict) where T2 : ICloneable {
    if (dict == null)
        return null;

    Dictionary < T1, T2 > ret = new Dictionary < T1, T2 > ();
    foreach (var e in dict)
        ret [e.Key] = (T2) (e.Value.Clone ());

    return ret;
}
----------------------------------------

public static Dictionary < T1, T2 > Clone < T1, T2 > (Dictionary < T1, T2 > dict) where T1 : ICloneable where T2 : ICloneable {
    if (dict == null)
        return null;

    Dictionary < T1, T2 > ret = new Dictionary < T1, T2 > ();
    foreach (var e in dict)
        ret [(T1) e.Key.Clone ()] = (T2) (e.Value.Clone ());

    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
139592_48249360_17_26
139592_48249360_6_15
Title: "What is the best way to clone/deep copy a .NET generic Dictionary<string T>?" 
----------------------------------------

public static Dictionary < T1, T2 > CloneValues < T1, T2 > (Dictionary < T1, T2 > dict) where T2 : ICloneable {
    if (dict == null)
        return null;

    Dictionary < T1, T2 > ret = new Dictionary < T1, T2 > ();
    foreach (var e in dict)
        ret [e.Key] = (T2) (e.Value.Clone ());

    return ret;
}
----------------------------------------

public static Dictionary < T1, T2 > CloneKeys < T1, T2 > (Dictionary < T1, T2 > dict) where T1 : ICloneable {
    if (dict == null)
        return null;

    Dictionary < T1, T2 > ret = new Dictionary < T1, T2 > ();
    foreach (var e in dict)
        ret [(T1) e.Key.Clone ()] = e.Value;

    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
139592_48249360_28_38
139592_48249360_6_15
Title: "What is the best way to clone/deep copy a .NET generic Dictionary<string T>?" 
----------------------------------------

public static Dictionary < T1, T2 > Clone < T1, T2 > (Dictionary < T1, T2 > dict) where T1 : ICloneable where T2 : ICloneable {
    if (dict == null)
        return null;

    Dictionary < T1, T2 > ret = new Dictionary < T1, T2 > ();
    foreach (var e in dict)
        ret [(T1) e.Key.Clone ()] = (T2) (e.Value.Clone ());

    return ret;
}
----------------------------------------

public static Dictionary < T1, T2 > CloneKeys < T1, T2 > (Dictionary < T1, T2 > dict) where T1 : ICloneable {
    if (dict == null)
        return null;

    Dictionary < T1, T2 > ret = new Dictionary < T1, T2 > ();
    foreach (var e in dict)
        ret [(T1) e.Key.Clone ()] = e.Value;

    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
140044_148494_9_33
140044_24749911_52_68
Title: RightNow CRM XML API - Anyone familiar with it? 
----------------------------------------

static void Main (string [] args) {
    string serviceUrl = "http://<your_domain>/cgi-bin/<your_interface>.cfg/php/xml_api/parse.php";
    WebClient webClient = new WebClient ();
    string requestXml = @"<connector>
<function name=""ans_get""><![CDATA[
<parameter name=""args"" type=""pair""><![CDATA[
<pair name=""id"" type=""integer""><![CDATA[33</pair>
<pair name=""sub_tbl"" type='pair'>
<pair name=""tbl_id"" type=""integer""><![CDATA[164</pair>
</pair>
</parameter>
</function>
</connector>";
    string secString = "";
    string postData = string.Format ("xml_doc={0}, sec_string={1}", requestXml, secString);
    byte [] postDataBytes = Encoding.UTF8.GetBytes (postData);
    byte [] responseDataBytes = webClient.UploadData (serviceUrl, "POST", postDataBytes);
    string responseData = Encoding.UTF8.GetString (responseDataBytes);
    Console.WriteLine (responseData);
}
----------------------------------------

static void Main (string [] args) {
    Program RBSP = new Program ();
    try {
        long newContactID = RBSP.CreateContact ();
        System.Console.WriteLine ("New Contact Created with ID: " + newContactID);
    }
    catch (FaultException ex) {
        Console.WriteLine (ex.Code);
        Console.WriteLine (ex.Message);
    }
    System.Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14006632_14006849_3_20
14006632_14011689_1_26
Title: ASP.NET Controller with DataRow 
----------------------------------------

public IEnumerable < UserDTO > GetAllUsers () {
    GWDataSet gw = new GWDataSet ();
    usersTableAdapter adapter = new usersTableAdapter ();
    adapter.Fill (gw.users);
    List < UserDTO > list = new List < UserDTO > ();
    foreach (DataRow row in gw.users.Rows) {
        UserDTO user = new UserDTO ();
        user.FirstName = row ["Name"].ToString ();
        list.Add (user);
    }
    return list;
}
----------------------------------------

public IEnumerable < GW.Entities.user > GetAllUsers () {
    try {
        GWDataSet gw = new GWDataSet ();
        List < GW.Entities.user > users = new List < user > ();
        usersTableAdapter adapter = new usersTableAdapter ();
        adapter.Fill (gw.users);
        foreach (GWDataSet.usersRow row in gw.users.Rows) {
            users.Add (new GW.Entities.user {UserId = row.IsNull ("UserId") ? 0 : row.UserId, UserName = row.IsNull ("UserName") ? "" : row.UserName, EmailAddress = row.IsNull ("EmailAddress") ? "" : row.EmailAddress, UserPasswordLastChange = row.IsNull ("UserPasswordLastChange") ? DateTime.MinValue : row.UserPasswordLastChange, LastLogin = row.IsNull ("LastLogin") ? DateTime.MinValue : row.LastLogin, StatusCd = row.IsNull ("StatusCd") ? "" : row.StatusCd, LastTimestamp = row.IsNull ("LastTimestamp") ? null : row.LastTimestamp});
        }
        return users;
    }
    catch (Exception ex) {
        Debug.WriteLine (ex.ToString ());
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1403146_1403173_1_12
1403146_1403198_1_12
Title: Why is my StringReader 50us slower than the .NET StringReader? 
----------------------------------------

public override int Read () {
    if (this._s == null) {
        __Error.ReaderClosed ();
    }
    if (this._pos == this._length) {
        return - 1;
    }
    return this._s [this._pos ++];
}
----------------------------------------

public override int Read () {
    if (this._s == null) {
        __Error.ReaderClosed ();
    }
    if (this._pos == this._length) {
        return - 1;
    }
    return this._s [this._pos ++];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14043367_14043538_1_28
14043367_14043679_1_22
Title: More efficient way of assigning values in DataTable? 
----------------------------------------

private void AddCalculatedID (DataTable data) {
    var calculatedIDColumn = new DataColumn {DataType = typeof (string), ColumnName = "CalculatedID"};
    data.Columns.Add (calculatedIDColumn);
    data.Columns ["CalculatedID"].SetOrdinal (0);
    Dictionary < string, string > UsedKeyIndex = new Dictionary < string, string > ();
    foreach (DataRow row in data.Rows) {
        string jobDetailID = row ["JobDetailID"].ToString ();
        string calculatedID;
        if (UsedKeyIndex.ContainsKey (jobDetailID)) {
            calculatedID = jobDetailID + 'A';
            UsedKeyIndex.Add (jobDetailID, 'A');
        } else {
            char nextKey = UsedKeyIndex [jobDetailID].Value + 1;
            calculatedID = jobDetailID + nextKey;
            UsedKeyIndex [jobDetailID] = nextKey;
        }
        row ["CalculatedID"] = calculatedID;
    }
}
----------------------------------------

private void AddCalculatedID (DataTable data) {
    var calculatedIDColumn = new DataColumn {DataType = typeof (string), ColumnName = "CalculatedID"};
    data.Columns.Add (calculatedIDColumn);
    data.Columns ["CalculatedID"].SetOrdinal (0);
    int jobDetailID = - 1;
    int letter = 65;
    foreach (DataRow row in data.Select ("", "JobDetailID")) {
        if ((int) row ["JobDetailID"] == jobDetailID) {
            row ["CalculatedID"] = row ["JobDetailID"].ToString () + (char) letter;
            letter ++;
        } else {
            letter = 65;
            jobDetailID = (int) row ["JobDetailID"];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047754_26040237_7_17
14047754_47916993_1_19
Title: How to add cross domain support to WCF service 
----------------------------------------

protected void Application_BeginRequest (object sender, EventArgs e) {
    HttpContext.Current.Response.AddHeader ("Access-Control-Allow-Origin", "*");
    if (HttpContext.Current.Request.HttpMethod == "OPTIONS") {
        HttpContext.Current.Response.AddHeader ("Access-Control-Allow-Methods", "GET, POST");
        HttpContext.Current.Response.AddHeader ("Access-Control-Allow-Headers", "Content-Type, Accept");
        HttpContext.Current.Response.AddHeader ("Access-Control-Max-Age", "1728000");
        HttpContext.Current.Response.End ();
    }
}
----------------------------------------

void Application_BeginRequest (object sender, EventArgs e) {
    if (Request.HttpMethod == "OPTIONS") {
        Response.AddHeader ("Access-Control-Allow-Methods", "GET, POST");
        Response.AddHeader ("Access-Control-Allow-Headers", "Content-Type, Accept");
        Response.AddHeader ("Access-Control-Max-Age", "1728000");
        Response.End ();
    } else {
        Response.AddHeader ("Access-Control-Allow-Credentials", "true");
        if (Request.Headers ["Origin"] != null)
            Response.AddHeader ("Access-Control-Allow-Origin", Request.Headers ["Origin"]);
        else
            Response.AddHeader ("Access-Control-Allow-Origin", "*");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1406107_1406258_7_21
1406107_1406422_32_43
Title: Generic Identity Map in C#. Don't want public constructor 
----------------------------------------

public T Get (int id) {
    lock (_getLock)
    {
        T ret;
        if (! _entities.TryGetValue (id, ret)) {
            ret = entityGenerator ();
            newEntity [id] = ret;
            ret.Id = id;
        }
        return ret;
    }}
----------------------------------------

public T Get (int id) {
    lock (_getLock)
    {
        T entity;
        if (! _entities.TryGetValue (id, out entity))
            _entities [id] = entity = _entityGenerator (id);

        return entity;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14063779_14063999_16_31
14063779_14064030_5_20
Title: Sorting Algorithm - C# 
----------------------------------------

public int Compare (string x, string y) {
    bool isMatchedX = IsMatchedPattern (x);
    bool isMatchedY = IsMatchedPattern (y);
    if (isMatchedX && ! isMatchedY) {
        return String.Compare (Strip (x), y, StringComparer);
    }
    if (isMatchedY && ! isMatchedX) {
        return String.Compare (Strip (y), x, StringComparer);
    }
    return String.Compare (x, y, StringComparison.Ordinal);
}
----------------------------------------

public int Compare (string x, string y) {
    if ((x == null) && (y == null))
        return 0;

    if (x == null)
        return - 1;

    if (y == null)
        return 1;

    const string avg = @"(avg) ";
    if (x.StartsWith (avg) || y.StartsWith (avg)) {
        return x.Replace (avg, string.Empty).CompareTo (y.Replace (avg, string.Empty));
    }
    return x.CompareTo (y);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14073147_14073199_1_16
14073147_14073356_1_20
Title: Prevent two threads entering a code block with the same value 
----------------------------------------

object GetCachedValue (string id) {
    if (! Cache.ContainsKey (id)) {
        lock (_staticObj)
        {
            if (! Cache.ContainsKey (id)) {
                object value = GetTheValueForId (id);
                Cache.Add (id, value);
            }
        }}
    return Cache [id];
}
----------------------------------------

Lazy < object > GetCachedValue (string id) {
    lock (Cache)
    {
        if (! Cache.ContainsKey (id)) {
            Lazy < object > lazy = new Lazy < object > (() = > {
                Console.WriteLine ("**Long Running Job**");
                Thread.Sleep (3000);
                return int.Parse (id);
            }, true);
            Cache.Add (id, lazy);
            Console.WriteLine ("added to cache");
        }
        return Cache [id];
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14073147_14073199_1_16
14073147_14077173_1_28
Title: Prevent two threads entering a code block with the same value 
----------------------------------------

object GetCachedValue (string id) {
    if (! Cache.ContainsKey (id)) {
        lock (_staticObj)
        {
            if (! Cache.ContainsKey (id)) {
                object value = GetTheValueForId (id);
                Cache.Add (id, value);
            }
        }}
    return Cache [id];
}
----------------------------------------

object GetCachedValue (string Key) {
    var mut = new Mutex (true, key);
    try {
        mut.WaitOne ();
        if (! Cache.ContainsKey (Key)) {
            object value = GetTheValueForId (Key);
            Cache.Add (Key, value);
        }
        return Cache [Key];
    }
    finally {
        mut.ReleaseMutex ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14073147_14073356_1_20
14073147_14077173_1_28
Title: Prevent two threads entering a code block with the same value 
----------------------------------------

Lazy < object > GetCachedValue (string id) {
    lock (Cache)
    {
        if (! Cache.ContainsKey (id)) {
            Lazy < object > lazy = new Lazy < object > (() = > {
                Console.WriteLine ("**Long Running Job**");
                Thread.Sleep (3000);
                return int.Parse (id);
            }, true);
            Cache.Add (id, lazy);
            Console.WriteLine ("added to cache");
        }
        return Cache [id];
    }}
----------------------------------------

object GetCachedValue (string Key) {
    var mut = new Mutex (true, key);
    try {
        mut.WaitOne ();
        if (! Cache.ContainsKey (Key)) {
            object value = GetTheValueForId (Key);
            Cache.Add (Key, value);
        }
        return Cache [Key];
    }
    finally {
        mut.ReleaseMutex ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14074779_14074977_18_29
14074779_14075306_10_21
Title: Good or Bad Practice for Return Members 
----------------------------------------

private string DriveName () {
    DriveInfo [] drives = DriveInfo.GetDrives ();
    foreach (DriveInfo d in drives) {
        if (d.Name == @"C:")
            return d.Name;

    }
    throw new Exception ("Unable to locate the C: Drive... Please map the correct drive.");
}
----------------------------------------

private static string DriveName () {
    DriveInfo [] drives = DriveInfo.GetDrives ();
    foreach (DriveInfo d in drives) {
        if (d.Name == @"C:")
            return d.Name;

    }
    throw new Exception ("Unable to locate the C: Drive... Please map the correct drive.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14095552_14095582_1_12
14095552_14095584_1_18
Title: "What is the point of casting a short as an enum and then to a string?" 
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    switch (proto) {
        case ProtocolType.Tcp :
            return string.Format ("{0} ({1})", (TcpServices) port, port);
        case ProtocolType.Udp :
            return string.Format ("{0} ({1})", (UdpServices) port, port);
        default :
            return string.Format ("({0})", port);
    }
}
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14112230_14113344_19_33
14112230_14113344_1_17
Title: GroupBy with elementSelector and resultSelector 
----------------------------------------

public static IQueryable < TResult > GroupBy < TSource, TKey, TResult > (this IQueryable < TSource > source, Expression < Func < TSource, TKey > > keySelector, Expression < Func < TKey, IEnumerable < TSource >, TResult > > resultSelector) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    if (keySelector == null)
        throw Error.ArgumentNull ("keySelector");

    if (resultSelector == null)
        throw Error.ArgumentNull ("resultSelector");

    return source.Provider.CreateQuery < TResult > (Expression.Call (null, ((MethodInfo) MethodBase.GetCurrentMethod ()).MakeGenericMethod (typeof (TSource), typeof (TKey), typeof (TResult)), new Expression [] {source.Expression, Expression.Quote (keySelector), Expression.Quote (resultSelector)}));
}
----------------------------------------

public static IQueryable < TResult > GroupBy < TSource, TKey, TElement, TResult > (this IQueryable < TSource > source, Expression < Func < TSource, TKey > > keySelector, Expression < Func < TSource, TElement > > elementSelector, Expression < Func < TKey, IEnumerable < TElement >, TResult > > resultSelector) {
    if (source == null)
        throw Error.ArgumentNull ("source");

    if (keySelector == null)
        throw Error.ArgumentNull ("keySelector");

    if (elementSelector == null)
        throw Error.ArgumentNull ("elementSelector");

    if (resultSelector == null)
        throw Error.ArgumentNull ("resultSelector");

    return source.Provider.CreateQuery < TResult > (Expression.Call (null, ((MethodInfo) MethodBase.GetCurrentMethod ()).MakeGenericMethod (typeof (TSource), typeof (TKey), typeof (TElement), typeof (TResult)), new Expression [] {source.Expression, Expression.Quote (keySelector), Expression.Quote (elementSelector), Expression.Quote (resultSelector)}));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14128303_14128367_6_19
14128303_14145165_1_16
Title: A better way of parsing an int from a string 
----------------------------------------

static void Main () {
    Regex regex = new Regex (@"^#def xyz\[timer=(\d+), fill=(\d+)\]$");
    string input = "#def xyz[timer=50, fill=10]";
    Match match = regex.Match (input);
    if (match.Success) {
        int fill = int.Parse (match.Groups [1].Value);
        int timer = int.Parse (match.Groups [2].Value);
        Console.WriteLine ("Fill={0}, timer={1}", fill, timer);
    }
}
----------------------------------------

void Main () {
    string def = "#def xyz[timer=50, fill=10]";
    string [] inBracket = def.Split ("[]".ToCharArray ());
    string [] elements = inBracket [1].Split (",".ToCharArray ());
    int timer = int.Parse (elements [0].Split ("=".ToCharArray ()) [1]);
    int fill = int.Parse (elements [1].Split ("=".ToCharArray ()) [1]);
    Console.WriteLine ("timer = " + timer.ToString ());
    Console.WriteLine ("fill = " + fill.ToString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14130379_14130479_1_14
14130379_14133290_1_12
Title: C# generics not recognizing type 
----------------------------------------

private static void WriteToDisk < T > (string fileName, T [] vector) {
    var correctMethod = typeof (BinaryWriter).GetMethod ("Write", new [] {typeof (T),});
    if (correctMethod == null)
        throw new ArgumentException ("No suitable overload found for type " + typeof (T), "T");

    using (var stream = new FileStream (fileName, FileMode.Create))
    {
        using (var writer = new BinaryWriter (stream))
        {
            foreach (var v in vector)
                correctMethod.Invoke (writer, new object [] {v,});

        }}}
----------------------------------------

private static void WriteToDisk < T > (string fileName, T [] vector, Action < BinaryWriter, T > callWrite) {
    using (var stream = new FileStream (fileName, FileMode.Create))
    {
        using (var writer = new BinaryWriter (stream))
        {
            foreach (T v in vector)
                callWrite (writer, v);

            writer.Close ();
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14157019_14198266_1_12
14157019_14198561_1_26
Title: C# - Is Statement in Switch Statement 
----------------------------------------

public static bool IsObjectEmpty (Control ctrlThis) {
    Type t = ctrlThis.GetType ();
    switch (t) {
        case typeof (TextBox) :
            TextBox txtThis = (TextBox) ctrlThis;
            if (txtThis.Text == "" || txtThis.Text == null) {
                return false;
            }
            break;
    }
}
----------------------------------------

public static bool IsObjectEmpty (Control ctrlThis) {
    if (ctrlThis is TextBox) {
        TextBox txtThis = (TextBox) ctrlThis;
        if (txtThis.Text == "" || txtThis.Text == null)
            return false;

    } else if (ctrlThis is ComboBox) {
        ComboBox cboThis = (ComboBox) ctrlThis;
        if (int.Parse (cboThis.SelectedValue.ToString ()) == - 1)
            return false;

    } else if (ctrlThis is NumericUpDown) {
        NumericUpDown numThis = (NumericUpDown) ctrlThis;
        if (numThis.Value == 0)
            return false;

    } else {
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14160489_14162088_65_92
14160489_14162088_95_122
Title: C# Get File properties without using System.IO.FileInfo 
----------------------------------------

static void WalkDirectoryTree (DirectoryInfo root, ref long fileCount, ref long dirCount, ref long calls) {
    FileInfo [] files = null;
    DirectoryInfo [] subDirs = null;
    if (++ calls % 10000 == 0)
        o ("" + calls);

    try {
        files = root.GetFiles ("*.*");
        if (files != null) {
            fileCount += files.Count ();
            subDirs = root.GetDirectories ();
            dirCount += subDirs.Count ();
            foreach (DirectoryInfo dirInfo in subDirs) {
                WalkDirectoryTree (dirInfo, ref fileCount, ref dirCount, ref calls);
            }
        }
    }
    catch (Exception) {
    }
}
----------------------------------------

static void WalkDirectoryTree (Folder root, ref long fileCount, ref long dirCount, ref long calls) {
    Files files = null;
    Folders subDirs = null;
    if (++ calls % 10000 == 0)
        o ("" + calls);

    try {
        files = root.Files;
        if (files != null) {
            fileCount += files.Count;
            subDirs = root.SubFolders;
            dirCount += subDirs.Count;
            foreach (Folder fd in subDirs) {
                WalkDirectoryTree (fd, ref fileCount, ref dirCount, ref calls);
            }
        }
    }
    catch (Exception) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14172883_14172905_1_18
14172883_14173122_1_16
Title: Validations for Datagridview cell values in C# 
----------------------------------------

private void dataGridView1_CellValidating (object sender, DataGridViewCellValidatingEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["MyNumericColumnName"].Index) {
        dataGridView1.Rows [e.RowIndex].ErrorText = "";
        int newInteger;
        if (dataGridView1.Rows [e.RowIndex].IsNewRow) {
            return;
        }
        if (! int.TryParse (e.FormattedValue.ToString (), out newInteger) || newInteger < 0) {
            e.Cancel = true;
            dataGridView1.Rows [e.RowIndex].ErrorText = "the value must be a Positive integer";
        }
    }
}
----------------------------------------

private void dataGridView1_CellValidating (object sender, DataGridViewCellValidatingEventArgs e) {
    if (dataGridView1.IsCurrentCellDirty) {
        if (e.ColumnIndex == 0) {
            Console.WriteLine (dataGridView1 [e.ColumnIndex, e.RowIndex].EditedFormattedValue.ToString ());
        }
        if (e.ColumnIndex == 1) {
            Console.WriteLine (dataGridView1 [e.ColumnIndex, e.RowIndex].EditedFormattedValue.ToString ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14205590_14207615_1_21
14205590_14220320_1_24
Title: Await a Async Void method call for unit testing 
----------------------------------------

[TestMethod] public void TestDoStuff () {
    AsyncContext.Run (() = > {
        myViewModel.IsSearchShowing = true;
        container.Resolve < IOrderService > ().Returns (orderService);
        orderService = Substitute.For < IOrderService > ();
        orderService.LookUpIdAsync (Arg.Any < long > ()).Returns (new Task < IOrder > (() = > null));
        myViewModel.DoLookupCommand.Execute (0);
    });
    myViewModel.IsSearchShowing.Should ().BeFalse ();
}
----------------------------------------

[TestMethod] public void TestDoStuff () {
    myViewModel.IsSearchShowing = true;
    container.Resolve < IOrderService > ().Returns (orderService);
    orderService = Substitute.For < IOrderService > ();
    var lookupTask = Task < IOrder >.Factory.StartNew (() = > {
        return new Order ();
    });
    orderService.LookUpIdAsync (Arg.Any < long > ()).Returns (lookupTask);
    myViewModel.DoLookupCommand.Execute (0);
    lookupTask.Wait ();
    myViewModel.IsSearchShowing.Should ().BeFalse ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1424971_12360585_3_21
1424971_1424986_3_19
Title: Parse string to enum type 
----------------------------------------

public static Nullable < T > Parse < T > (string input) where T : struct {
    if (! typeof (T).IsEnum) {
        throw new ArgumentException ("Generic Type 'T' must be an Enum");
    }
    int intVal;
    if (! string.IsNullOrEmpty (input) && ! int.TryParse (input, out intVal)) {
        T eVal;
        if (Enum.TryParse (input, true, out eVal)) {
            return eVal;
        }
    }
    return null;
}
----------------------------------------

public static Nullable < T > Parse < T > (string input) where T : struct {
    if (! typeof (T).IsEnum) {
        throw new ArgumentException ("Generic Type 'T' must be an Enum");
    }
    if (! string.IsNullOrEmpty (input)) {
        if (Enum.GetNames (typeof (T)).Any (e = > e.Trim ().ToUpperInvariant () == input.Trim ().ToUpperInvariant ())) {
            return (T) Enum.Parse (typeof (T), input, true);
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1424971_12360585_3_21
1424971_45406784_1_10
Title: Parse string to enum type 
----------------------------------------

public static Nullable < T > Parse < T > (string input) where T : struct {
    if (! typeof (T).IsEnum) {
        throw new ArgumentException ("Generic Type 'T' must be an Enum");
    }
    int intVal;
    if (! string.IsNullOrEmpty (input) && ! int.TryParse (input, out intVal)) {
        T eVal;
        if (Enum.TryParse (input, true, out eVal)) {
            return eVal;
        }
    }
    return null;
}
----------------------------------------

public static T GetEnum < T > (string s) {
    Array arr = Enum.GetValues (typeof (T));
    foreach (var x in arr) {
        if (x.ToString ().Contains (s))
            return (T) x;

    }
    return default (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1424971_1424986_3_19
1424971_45406784_1_10
Title: Parse string to enum type 
----------------------------------------

public static Nullable < T > Parse < T > (string input) where T : struct {
    if (! typeof (T).IsEnum) {
        throw new ArgumentException ("Generic Type 'T' must be an Enum");
    }
    if (! string.IsNullOrEmpty (input)) {
        if (Enum.GetNames (typeof (T)).Any (e = > e.Trim ().ToUpperInvariant () == input.Trim ().ToUpperInvariant ())) {
            return (T) Enum.Parse (typeof (T), input, true);
        }
    }
    return null;
}
----------------------------------------

public static T GetEnum < T > (string s) {
    Array arr = Enum.GetValues (typeof (T));
    foreach (var x in arr) {
        if (x.ToString ().Contains (s))
            return (T) x;

    }
    return default (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14253017_14259934_42_61
14253017_14376337_161_186
Title: "how to insert  delete  select records into database using datagridview cells and datagridview events using c#?" 
----------------------------------------

private void dataGridView1_KeyUp (object sender, KeyEventArgs e) {
    if (e.KeyCode == Keys.Delete) {
        if (dataGridView1.SelectedRows.Count > 0) {
            con.ConnectionString = "Data Source=CHANDU-PC;Initial Catalog=Class;Integrated Security=true;MultipleActiveResultSets=true;";
            con.Open ();
            SqlCommand cmd;
            foreach (var item in dataGridView1.Rows.Cast < DataGridViewRow > ().Where (c = > c.IsNewRow == false)) {
                string delQry = @"delete from student1 where studentId = '" + item.Cells [0].EditedFormattedValue.ToString () + "'";
                cmd = new SqlCommand (delQry, con);
                da.SelectCommand = cmd;
                cmd.ExecuteNonQuery ();
            }
            con.Close ();
        }
    }
}
----------------------------------------

private void dataGridView1_KeyUp (object sender, KeyEventArgs e) {
    if (e.KeyCode == Keys.Delete) {
        try {
            SqlConnection con2 = new SqlConnection ();
            SqlDataAdapter da2 = new SqlDataAdapter ();
            con2.ConnectionString = "Data Source=CHANDU-PC;Initial Catalog=Class;Integrated Security=true;MultipleActiveResultSets=true;";
            con2.Open ();
            x = (int) Convert.ToInt32 (dataGridView1.CurrentRow.Cells [0].Value);
            SqlCommand cmd2 = new SqlCommand ("delete student1 where id='" + x + "'", con2);
            da2.DeleteCommand = cmd2;
            cmd2.ExecuteNonQuery ();
            MessageBox.Show ("Information deleted Successfully");
        }
        catch (Exception ex) {
            MessageBox.Show ("Exception caught : " + ex.Message.ToString ());
        }
        finally {
            con.Close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
142614_2688152_16_46
142614_45565253_1_37
Title: TraceRoute and Ping in C# 
----------------------------------------

private static IEnumerable < IPAddress > GetTraceRoute (string hostNameOrAddress, int ttl) {
    Ping pinger = new Ping ();
    PingOptions pingerOptions = new PingOptions (ttl, true);
    int timeout = 10000;
    byte [] buffer = Encoding.ASCII.GetBytes (Data);
    PingReply reply = default (PingReply);
    reply = pinger.Send (hostNameOrAddress, timeout, buffer, pingerOptions);
    List < IPAddress > result = new List < IPAddress > ();
    if (reply.Status == IPStatus.Success) {
        result.Add (reply.Address);
    } else if (reply.Status == IPStatus.TtlExpired || reply.Status == IPStatus.TimedOut) {
        if (reply.Status == IPStatus.TtlExpired)
            result.Add (reply.Address);

        IEnumerable < IPAddress > tempResult = default (IEnumerable < IPAddress >);
        tempResult = GetTraceRoute (hostNameOrAddress, ttl + 1);
        result.AddRange (tempResult);
    } else {
    }
    return result;
}
----------------------------------------

public static IEnumerable < IPAddress > GetTraceRoute (string hostname) {
    const int timeout = 10000;
    const int maxTTL = 30;
    const int bufferSize = 32;
    byte [] buffer = new byte [bufferSize];
    new Random ().NextBytes (buffer);
    Ping pinger = new Ping ();
    for (int ttl = 1; ttl <= maxTTL; ttl ++) {
        PingOptions options = new PingOptions (ttl, true);
        PingReply reply = pinger.Send (hostname, timeout, buffer, options);
        if (reply.Status == IPStatus.TtlExpired) {
            yield return reply.Address;
            continue;
        }
        if (reply.Status == IPStatus.TimedOut) {
            continue;
        }
        if (reply.Status == IPStatus.Success) {
            yield return reply.Address;
        }
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14278322_14288304_16_54
14278322_14288748_1_18
Title: Take from Observable.Interval until another observable produces a value 
----------------------------------------

static void Main (string [] args) {
    var buttonState = new BehaviorSubject < State > (State.KeyUp);
    var testScheduler = new TestScheduler ();
    var events = testScheduler.CreateObserver < long > ();
    Observable.Interval (TimeSpan.FromTicks (100), testScheduler).CombineLatest (buttonState, (t, s) = > new {TimeStamp = t, ButtonState = s}).Where (t = > t.ButtonState == State.KeyDown).Select (t = > t.TimeStamp).Subscribe (events);
    testScheduler.AdvanceBy (100);
    testScheduler.AdvanceBy (100);
    buttonState.OnNext (State.KeyDown);
    testScheduler.AdvanceBy (100);
    testScheduler.AdvanceBy (100);
    buttonState.OnNext (State.KeyUp);
    testScheduler.AdvanceBy (100);
    testScheduler.AdvanceBy (100);
    buttonState.OnNext (State.KeyDown);
    testScheduler.AdvanceBy (100);
    buttonState.OnNext (State.KeyUp);
    testScheduler.AdvanceBy (100);
    testScheduler.AdvanceBy (100);
    Debug.Assert (events.Messages.Count == 5);
    Debug.Assert (events.Messages [0].Value.Value == 1);
    Debug.Assert (events.Messages [1].Value.Value == 2);
    Debug.Assert (events.Messages [2].Value.Value == 3);
    Debug.Assert (events.Messages [3].Value.Value == 5);
    Debug.Assert (events.Messages [4].Value.Value == 6);
}
----------------------------------------

void Main () {
    var buttonPusher = ButtonPush ();
    var pushTracker = from pushOn in buttonPusher.Where (p = > p).Timestamp ()
        let tickWindow = Observable.Interval (TimeSpan.FromMilliseconds (500))
        from tick in tickWindow.TakeUntil (buttonPusher.Where (p = > ! p)).Timestamp ().Select (t = > t.Timestamp)
        select tick;
    Console.WriteLine ("Start: {0}", Observable.Return (true).Timestamp ().First ().Timestamp);
    var s = pushTracker.SubscribeOn (NewThreadScheduler.Default).Subscribe (x = > Console.WriteLine ("tick:{0}", x));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280504_14280850_1_17
14280504_14281240_7_48
Title: All threads only in one method at a time? 
----------------------------------------

void MethodA () {
    foreach (var obj in objects)
        if (obj != this)
            Monitor.Enter (obj);

    try {
    }
    finally {
        foreach (var obj in objects)
            if (obj != this)
                Monitor.Exit (obj);

    }
}
----------------------------------------

internal void MethodA () {
    lock (ClassA.setCurrentlyExcutingTypeLock)
    {
        while (! ((ClassA.currentlyExcutingType == null) || (ClassA.currentlyExcutingType == typeof (TDerived)))) {
            Monitor.Wait (ClassA.setCurrentlyExcutingTypeLock);
        }
        if (ClassA.currentlyExcutingType == null) {
            ClassA.currentlyExcutingType = typeof (TDerived);
        }
        ClassA.numberCurrentlyPossiblyExecutingThreads ++;
        Monitor.PulseAll (ClassA.setCurrentlyExcutingTypeLock);
    } try {
        ClassA < TDerived >.semaphore.WaitOne ();
        this.MethodACore ();
    }
    finally {
        ClassA < TDerived >.semaphore.Release ();
    }
    lock (ClassA.setCurrentlyExcutingTypeLock)
    {
        ClassA.numberCurrentlyPossiblyExecutingThreads --;
        if (ClassA.numberCurrentlyPossiblyExecutingThreads == 0) {
            ClassA.currentlyExcutingType = null;
            Monitor.Pulse (ClassA.setCurrentlyExcutingTypeLock);
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280504_14280850_1_17
14280504_14281353_9_48
Title: All threads only in one method at a time? 
----------------------------------------

void MethodA () {
    foreach (var obj in objects)
        if (obj != this)
            Monitor.Enter (obj);

    try {
    }
    finally {
        foreach (var obj in objects)
            if (obj != this)
                Monitor.Exit (obj);

    }
}
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280504_14281240_7_48
14280504_14281353_9_48
Title: All threads only in one method at a time? 
----------------------------------------

internal void MethodA () {
    lock (ClassA.setCurrentlyExcutingTypeLock)
    {
        while (! ((ClassA.currentlyExcutingType == null) || (ClassA.currentlyExcutingType == typeof (TDerived)))) {
            Monitor.Wait (ClassA.setCurrentlyExcutingTypeLock);
        }
        if (ClassA.currentlyExcutingType == null) {
            ClassA.currentlyExcutingType = typeof (TDerived);
        }
        ClassA.numberCurrentlyPossiblyExecutingThreads ++;
        Monitor.PulseAll (ClassA.setCurrentlyExcutingTypeLock);
    } try {
        ClassA < TDerived >.semaphore.WaitOne ();
        this.MethodACore ();
    }
    finally {
        ClassA < TDerived >.semaphore.Release ();
    }
    lock (ClassA.setCurrentlyExcutingTypeLock)
    {
        ClassA.numberCurrentlyPossiblyExecutingThreads --;
        if (ClassA.numberCurrentlyPossiblyExecutingThreads == 0) {
            ClassA.currentlyExcutingType = null;
            Monitor.Pulse (ClassA.setCurrentlyExcutingTypeLock);
        }
    }}
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14293344_14293758_1_16
14293344_29698885_1_20
Title: Hashing a SecureString in .NET 
----------------------------------------

private static byte [] HashSecureString (SecureString ss, Hasher hasher) {
    IntPtr bstr = Marshal.SecureStringToBSTR (ss);
    try {
        int length = Marshal.ReadInt32 (bstr, - 4);
        hasher.Reinitialize ();
        for (int i = 0; i < length; i ++)
            hasher.AddByte (Marshal.ReadByte (bstr, i));

        return hasher.Result;
    }
    finally {
        Marshal.ZeroFreeBSTR (bstr);
    }
}
----------------------------------------

private static byte [] HashSecureString (SecureString input, Func < byte [], byte [] > hash) {
    var bstr = Marshal.SecureStringToBSTR (input);
    var length = Marshal.ReadInt32 (bstr, - 4);
    var bytes = new byte [length];
    var bytesPin = GCHandle.Alloc (bytes, GCHandleType.Pinned);
    try {
        Marshal.Copy (bstr, bytes, 0, length);
        Marshal.ZeroFreeBSTR (bstr);
        return hash (bytes);
    }
    finally {
        for (var i = 0; i < bytes.Length; i ++) {
            bytes [i] = 0;
        }
        bytesPin.Free ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14304355_14304460_1_19
14304355_14304507_9_21
Title: LINQ: Separating single list to multiple lists 
----------------------------------------

static void Main (string [] args) {
    int [] numbers = {1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5};
    List < int > nums = new List < int > (numbers.Length);
    nums.AddRange (numbers);
    while (nums.Count > 0) {
        int [] n = nums.Distinct ().ToArray ();
        for (int i = 0; i < n.Count (); i ++) {
            Console.Write ("{0}\t", n [i]);
            nums.Remove (n [i]);
        }
        Console.WriteLine ();
    }
    Console.Read ();
}
----------------------------------------

static void Main (string [] args) {
    var nums = new [] {1, 1, 2, 2, 3, 3, 3, 4};
    var groups = nums.GroupBy (i = > i).Select (g = > new Freq {Num = g.Key, Count = g.Count ()}).ToList ();
    while (groups.Any (g = > g.Count > 0)) {
        var list = groups.Where (g = > g.Count > 0).Select (g = > g.Num).ToList ();
        list.ForEach (li = > groups.First (g = > g.Num == li).Count --);
        Console.WriteLine (String.Join (",", list));
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14332496_14332574_19_35
14332496_14335076_18_30
Title: Most light weight conversion from hex to byte in c#? 
----------------------------------------

private static int ParseNybble (char c) {
    switch (c) {
        case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' :
            return c - '0';
        case 'a' : case 'b' : case 'c' : case 'd' : case 'e' : case 'f' :
            return c - ('a' - 10);
        case 'A' : case 'B' : case 'C' : case 'D' : case 'E' : case 'F' :
            return c - ('A' - 10);
        default :
            throw new ArgumentException ("Invalid nybble: " + c);
    }
    return c;
}
----------------------------------------

private static int ParseNybble (char c) {
    unchecked {
        uint i = (uint) (c - '0');
        if (i < 10)
            return (int) i;

        i = ((uint) c & ~ 0x20u) - 'A';
        if (i < 6)
            return (int) i + 10;

        throw new ArgumentException ("Invalid nybble: " + c);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14332496_14332574_1_17
14332496_14335076_1_16
Title: Most light weight conversion from hex to byte in c#? 
----------------------------------------

public static byte [] ParseHex (string hexString) {
    if ((hexString.Length & 1) != 0) {
        throw new ArgumentException ("Input must have even number of characters");
    }
    int length = hexString.Length / 2;
    byte [] ret = new byte [length];
    for (int i = 0, j = 0; i < length; i ++) {
        int high = ParseNybble (hexString [j ++]);
        int low = ParseNybble (hexString [j ++]);
        ret [i] = (byte) ((high << 4) | low);
    }
    return ret;
}
----------------------------------------

public static byte [] ParseHex (string hexString) {
    if ((hexString.Length & 1) != 0) {
        throw new ArgumentException ("Input must have even number of characters");
    }
    byte [] ret = new byte [hexString.Length / 2];
    for (int i = 0; i < ret.Length; i ++) {
        int high = ParseNybble (hexString [i * 2]);
        int low = ParseNybble (hexString [i * 2 + 1]);
        ret [i] = (byte) ((high << 4) | low);
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14336416_14336463_3_11
14336416_14336469_3_11
Title: Using IComparer for sorting 
----------------------------------------

public int Compare (Point a, Point b) {
    if ((a.x == b.x) && (a.y == b.y))
        return 0;

    if ((a.x < b.x) || ((a.x == b.x) && (a.y < b.y)))
        return - 1;

    return 1;
}
----------------------------------------

public int Compare (Point a, Point b) {
    if ((a.x == b.x) && (a.y == b.y))
        return 0;

    if ((a.x < b.x) || ((a.x == b.x) && (a.y < b.y)))
        return - 1;

    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1438030_46695541_11_128
1438030_7769578_349_377
Title: infix to postfix converter 
----------------------------------------

static void Main (string [] args) {
    int i = new int ();
    Console.WriteLine ("Enter the length of notation:");
    i = Convert.ToInt32 (Console.ReadLine ());
    string [] infix = new string [i];
    string [] postfix = new string [i];
    string [] temp = new string [i];
    Console.WriteLine ("Enter values");
    int l = 0;
    for (l = 0; l < i; l ++) {
        infix [l] = Console.ReadLine ();
    }
    int x = 0;
    Console.Write ("Infix:");
    for (x = 0; x < i; x ++) {
        Console.Write (infix [x]);
    }
    for (int z = i - 1; z >= 0; z --) {
        int c = z;
        if (infix [z] == "(") {
            infix [z] = null;
        }
        if (infix [z] == "+" || infix [z] == "*" || infix [z] == "/" || infix [z] == "-") {
            do
                {
                    c ++;
                    if (infix [c] == ")") {
                        infix [c] = infix [z];
                        infix [z] = null;
                        break;
                    }
                } while (c < i);
        }
    }
    int lagao = 0;
    for (int v = 0; v < i; v ++) {
        if (infix [v] != null) {
            postfix [lagao] = infix [v];
            lagao ++;
        }
    }
    int p = 0;
    Console.Write ("postfix:");
    for (p = 0; p < i; p ++) {
        Console.Write (postfix [p]);
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    try {
        string Equation = "";
        Equation = "1+2+3";
        Equation = "(((12.7+2)/3)-10)*(32+(3*5))";
        Equation = "5 + ((1 + 2) * 4) - 3";
        Equation = "1 + (3 * 4) - 3";
        Equation = "5+8-(2*2)";
        Equation = "10/2+3/2*4-2+4*3/4-9";
        Equation = "6/2*4";
        Equation = "3 + 4 * 2 / ( 1 - 5 ) ";
        Console.WriteLine ("EQUATION: " + Equation);
        Formula formula = new Formula (Equation);
        Console.WriteLine ("INFIX: " + String.Join (" ", formula.InfixTokens));
        Console.WriteLine ("POSTFIX: " + String.Join (" ", formula.PostfixTokens));
        decimal Result = formula.Calculate ();
        Console.WriteLine ("RESULT: " + Result.ToString ());
    }
    catch (Exception Err) {
        Console.WriteLine ("ERROR: " + Err.Message);
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1438679_1442040_55_69
1438679_1442040_71_137
Title: Using HttpUtility.HtmlDecode method with .NET Compact Framework? 
----------------------------------------

public static string HtmlDecode (string s) {
    if (s == null) {
        return null;
    }
    if (s.IndexOf ('&') < 0) {
        return s;
    }
    StringBuilder sb = new StringBuilder ();
    StringWriter output = new StringWriter (sb);
    HtmlDecode (s, output);
    return sb.ToString ();
}
----------------------------------------

public static void HtmlDecode (string s, TextWriter output) {
    if (s != null) {
        if (s.IndexOf ('&') < 0) {
            output.Write (s);
        } else {
            int length = s.Length;
            for (int i = 0; i < length; i ++) {
                char ch = s [i];
                if (ch == '&') {
                    int num3 = s.IndexOfAny (s_entityEndingChars, i + 1);
                    if ((num3 > 0) && (s [num3] == ';')) {
                        string entity = s.Substring (i + 1, (num3 - i) - 1);
                        if ((entity.Length > 1) && (entity [0] == '#')) {
                            try {
                                if ((entity [1] == 'x') || (entity [1] == 'X')) {
                                    ch = (char) int.Parse (entity.Substring (2), NumberStyles.AllowHexSpecifier);
                                } else {
                                    ch = (char) int.Parse (entity.Substring (1));
                                }
                                i = num3;
                            }
                            catch (FormatException) {
                                i ++;
                            }
                            catch (ArgumentException) {
                                i ++;
                            }
                        } else {
                            i = num3;
                            char ch2 = HtmlEntities.Lookup (entity);
                            if (ch2 != '\0') {
                                ch = ch2;
                            } else {
                                output.Write ('&');
                                output.Write (entity);
                                output.Write (';');
                                goto Label_0103;
                            }
                        }
                    }
                }
                output.Write (ch);
                Label_0103 :;}
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14392135_14392152_78_87
14392135_14392152_89_98
Title: Alternatives to casting IntPtr to increment it? 
----------------------------------------

public static Int32 CompareTo (this IntPtr left, IntPtr right) {
    if (left.ToUInt64 () > right.ToUInt64 ())
        return 1;

    if (left.ToUInt64 () < right.ToUInt64 ())
        return - 1;

    return 0;
}
----------------------------------------

public static Int32 CompareTo (this IntPtr left, UInt32 right) {
    if (left.ToUInt64 () > right)
        return 1;

    if (left.ToUInt64 () < right)
        return - 1;

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14443633_14443789_1_16
14443633_14443876_1_10
Title: Dynamically get class attribute value from type 
----------------------------------------

public static string Item < TItem, TMember > (this TItem obj, Expression < Func < TItem, TMember > > expression) {
    if (expression.Body is MemberExpression) {
        return ((MemberExpression) (expression.Body)).Member.Name;
    }
    if (expression.Body is UnaryExpression) {
        return ((MemberExpression) ((UnaryExpression) (expression.Body)).Operand).Member.Name;
    }
    if (expression.Body is ParameterExpression) {
        return expression.Body.Type.Name;
    }
    throw new InvalidOperationException ();
}
----------------------------------------

public static Type GetTypeWithAttributeValue < TAttribute > (Assembly aAssembly, Func < TAttribute, object > pred, object oValue) {
    foreach (Type type in aAssembly.GetTypes ()) {
        foreach (TAttribute oTemp in type.GetCustomAttributes (typeof (TAttribute), true)) {
            if (Equals (pred (oTemp), oValue)) {
                return type;
            }
        }
    }
    return typeof (string);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14450569_14450743_1_23
14450569_14452884_1_30
Title: Writing (updating) string to IsolatedStorage does not work 
----------------------------------------

public static bool WriteFileToIsolatedStorage (String content, String fileName) {
    bool result = false;
    MessageBox.Show (Leser.GetVersionInfo (content));
    try {
        using (IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication ())
        using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream (fileName, FileMode.Truncate, store))
        using (StreamWriter writer = new StreamWriter (stream))
        {
            writer.Write (content);
            result = true;
        }}
    catch {
        result = false;
    }
    return result;
}
----------------------------------------

public static bool WriteFileToIsolatedStorage (String content, String fileName) {
    bool result = false;
    IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication ();
    StreamWriter writer = new StreamWriter (new IsolatedStorageFileStream (fileName, FileMode.Create, store));
    try {
        writer.Write (content);
        writer.Flush ();
        writer.Close ();
        result = true;
    }
    catch {
        result = false;
    }
    StreamReader reader = new StreamReader (new IsolatedStorageFileStream (fileName, FileMode.Open, store));
    string rawData = reader.ReadToEnd ();
    reader.Close ();
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14493526_14578064_66_82
14493526_14578064_84_101
Title: Creating ppt slide thumbnail without exporting to a file 
----------------------------------------

public static T FromByteArray < T > (byte [] bytes) where T : struct {
    IntPtr ptr = IntPtr.Zero;
    try {
        int size = Marshal.SizeOf (typeof (T));
        ptr = Marshal.AllocHGlobal (size);
        Marshal.Copy (bytes, 0, ptr, size);
        object obj = Marshal.PtrToStructure (ptr, typeof (T));
        return (T) obj;
    }
    finally {
        if (ptr != IntPtr.Zero)
            Marshal.FreeHGlobal (ptr);

    }
}
----------------------------------------

public static byte [] ToByteArray < T > (T obj) where T : struct {
    IntPtr ptr = IntPtr.Zero;
    try {
        int size = Marshal.SizeOf (typeof (T));
        ptr = Marshal.AllocHGlobal (size);
        Marshal.StructureToPtr (obj, ptr, true);
        byte [] bytes = new byte [size];
        Marshal.Copy (ptr, bytes, 0, size);
        return bytes;
    }
    finally {
        if (ptr != IntPtr.Zero)
            Marshal.FreeHGlobal (ptr);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14502181_14502370_3_23
14502181_14520443_3_13
Title: How to pass datareader value from DAL to presentation layer 
----------------------------------------

public List < Person > DefaultSearchFriends (long userid) {
    SqlConnection SocialConn = new SqlConnection (connstr);
    using (SqlCommand comm = new SqlCommand ("proc_FriendsSearch", SocialConn))
    {
        comm.CommandType = CommandType.StoredProcedure;
        comm.Parameters.AddWithValue ("@userid", userid);
        SocialConn.Open ();
        SqlDataReader dr = comm.ExecuteReader (CommandBehavior.CloseConnection);
        var persons = new List < Person > ();
        while (dr.Read ())
            persons.Add (new Person {Name = dr ["Name"], FirstName = dr ["FirstName"]});

        dr.Close ();
        return persons;
    }}
----------------------------------------

public void DefaultSearchFriends (ref HomeBAL hBAL) {
    SqlConnection SocialConn = new SqlConnection (connstr);
    using (SqlCommand comm = new SqlCommand ("proc_FriendsSearch", SocialConn))
    {
        comm.CommandType = CommandType.StoredProcedure;
        comm.Parameters.AddWithValue ("@userid", hBAL.userid);
        SocialConn.Open ();
        hBAL.Search_Reader = comm.ExecuteReader (CommandBehavior.CloseConnection);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14524669_14524900_10_25
14524669_14526161_87_113
Title: how to get newtonsoft to deserialize yes and no to boolean 
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var value = reader.Value;
    if (value == null || String.IsNullOrWhiteSpace (value.ToString ())) {
        return false;
    }
    if ("yes".Equals (value, StringComparison.OrdinalIgnoreCase)) {
        return true;
    }
    return false;
}
----------------------------------------

public override object ReadJson (Newtonsoft.Json.JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    JObject obj = serializer.Deserialize < JToken > (reader) as JObject;
    if (obj != null) {
        string result = obj ["isSingleUnit"].ToObject < string > ();
        bool isSingleUnit = ConvertToBool (result);
        string name = obj ["name"].ToObject < string > ();
        if (isSingleUnit) {
            return new NewtonTest.House (name, isSingleUnit);
        } else {
            return new NewtonTest.Apartment (name, isSingleUnit);
        }
    } else {
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14524669_14524900_10_25
14524669_29892927_13_31
Title: how to get newtonsoft to deserialize yes and no to boolean 
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var value = reader.Value;
    if (value == null || String.IsNullOrWhiteSpace (value.ToString ())) {
        return false;
    }
    if ("yes".Equals (value, StringComparison.OrdinalIgnoreCase)) {
        return true;
    }
    return false;
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    switch (reader.Value.ToString ().ToLower ().Trim ()) {
        case "true" : case "yes" : case "y" : case "1" :
            return true;
        case "false" : case "no" : case "n" : case "0" :
            return false;
    }
    return new JsonSerializer ().Deserialize (reader, objectType);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14524669_14526161_87_113
14524669_29892927_13_31
Title: how to get newtonsoft to deserialize yes and no to boolean 
----------------------------------------

public override object ReadJson (Newtonsoft.Json.JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    JObject obj = serializer.Deserialize < JToken > (reader) as JObject;
    if (obj != null) {
        string result = obj ["isSingleUnit"].ToObject < string > ();
        bool isSingleUnit = ConvertToBool (result);
        string name = obj ["name"].ToObject < string > ();
        if (isSingleUnit) {
            return new NewtonTest.House (name, isSingleUnit);
        } else {
            return new NewtonTest.Apartment (name, isSingleUnit);
        }
    } else {
        return null;
    }
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    switch (reader.Value.ToString ().ToLower ().Trim ()) {
        case "true" : case "yes" : case "y" : case "1" :
            return true;
        case "false" : case "no" : case "n" : case "0" :
            return false;
    }
    return new JsonSerializer ().Deserialize (reader, objectType);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14542470_14543046_1_12
14542470_14639075_1_12
Title: Numeric TextBox in DataGridView column 
----------------------------------------

private void dataGridViewItems_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    var itemID = e.Control as TextBox;
    if (dataGridViewItems.CurrentCell.ColumnIndex == 1) {
        if (itemID != null) {
            itemID.KeyPress += new KeyPressEventHandler (itemID_KeyPress);
            itemID.KeyPress -= new KeyPressEventHandler (itemID_KeyPress);
        }
    }
}
----------------------------------------

private void dataGridViewItems_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    e.Control.KeyPress -= new KeyPressEventHandler (itemID_KeyPress);
    if (dataGridViewItems.CurrentCell.ColumnIndex == dataGridViewItems.Columns ["itemID"].Index) {
        TextBox itemID = e.Control as TextBox;
        if (itemID != null) {
            itemID.KeyPress += new KeyPressEventHandler (itemID_KeyPress);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1455142_1455169_9_21
1455142_1455196_8_26
Title: Mapping a class and xml file using serialization 
----------------------------------------

static void Main () {
    Person person = new Person {Name = "Fred"};
    XmlSerializer ser = new XmlSerializer (typeof (Person));
    using (XmlWriter xw = XmlWriter.Create ("file.xml"))
    {
        ser.Serialize (xw, person);
    } using (XmlReader xr = XmlReader.Create ("file.xml"))
    {
        Person clone = (Person) ser.Deserialize (xr);
        Console.WriteLine (clone.Name);
    }}
----------------------------------------

static void Main (string [] args) {
    var myObj = new MyClass {Name = "My name"};
    var fileName = "data.xml";
    var serializer = new XmlSerializer (typeof (MyClass));
    using (var output = new XmlTextWriter (fileName, Encoding.UTF8))
    serializer.Serialize (output, myObj);
    using (var input = new StreamReader (fileName))
    {
        var deserialized = (MyClass) serializer.Deserialize (input);
        Console.WriteLine (deserialized.Name);
    } Console.WriteLine ("Press ENTER to finish");
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14551622_14561811_23_44
14551622_14561811_46_68
Title: ServiceStack.Redis store objects with timeout and retrieve by key 
----------------------------------------

public IEnumerable < string > Get () {
    using (var redisClient = new RedisClient ("localhost"))
    {
        if (! redisClient.ContainsKey ("Meds25")) {
            redisClient.GetFromCache < IEnumerable < SampleEvent > > ("Meds25", () = > {
                var medsWithID25 = new List < SampleEvent > ();
                medsWithID25.Add (new SampleEvent () {ID = 1, EntityID = "25", Name = "Digoxin"});
                medsWithID25.Add (new SampleEvent () {ID = 2, EntityID = "25", Name = "Aspirin"});
                return medsWithID25;
            }, TimeSpan.FromSeconds (5));
        }
    } return new string [] {"1", "2"};
}
----------------------------------------

public SampleEvent Get (int id) {
    using (var redisClient = new RedisClient ("localhost"))
    {
        IEnumerable < SampleEvent > events = redisClient.GetFromCache < IEnumerable < SampleEvent > > ("Meds25", () = > {
            var medsWithID25 = new List < SampleEvent > ();
            medsWithID25.Add (new SampleEvent () {ID = 1, EntityID = "25", Name = "Digoxin"});
            medsWithID25.Add (new SampleEvent () {ID = 2, EntityID = "25", Name = "Aspirin"});
            return medsWithID25;
        }, TimeSpan.FromSeconds (5));
        if (events != null) {
            return events.Where (m = > m.ID == id).SingleOrDefault ();
        } else
            return null;

    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14558247_14558436_61_140
14558247_14558697_5_28
Title: How to sort objects by a string field that contains numbers 
----------------------------------------

public int Compare (object x, object y) {
    String s1 = x as string;
    String s2 = y as string;
    if (s1 == null || s2 == null) {
        return 0;
    }
    int thisMarker = 0, thisNumericChunk = 0;
    int thatMarker = 0, thatNumericChunk = 0;
    while ((thisMarker < s1.Length) || (thatMarker < s2.Length)) {
        if (thisMarker >= s1.Length) {
            return - 1;
        } else if (thatMarker >= s2.Length) {
            return 1;
        }
        char thisCh = s1 [thisMarker];
        char thatCh = s2 [thatMarker];
        StringBuilder thisChunk = new StringBuilder ();
        StringBuilder thatChunk = new StringBuilder ();
        while ((thisMarker < s1.Length) && (thisChunk.Length == 0 || InChunk (thisCh, thisChunk [0]))) {
            thisChunk.Append (thisCh);
            thisMarker ++;
            if (thisMarker < s1.Length) {
                thisCh = s1 [thisMarker];
            }
        }
        while ((thatMarker < s2.Length) && (thatChunk.Length == 0 || InChunk (thatCh, thatChunk [0]))) {
            thatChunk.Append (thatCh);
            thatMarker ++;
            if (thatMarker < s2.Length) {
                thatCh = s2 [thatMarker];
            }
        }
        int result = 0;
        if (char.IsDigit (thisChunk [0]) && char.IsDigit (thatChunk [0])) {
            thisNumericChunk = Convert.ToInt32 (thisChunk.ToString ());
            thatNumericChunk = Convert.ToInt32 (thatChunk.ToString ());
            if (thisNumericChunk < thatNumericChunk) {
                result = - 1;
            }
            if (thisNumericChunk > thatNumericChunk) {
                result = 1;
            }
        } else {
            result = thisChunk.ToString ().CompareTo (thatChunk.ToString ());
        }
        if (result != 0) {
            return result;
        }
    }
    return 0;
}
----------------------------------------

public int Compare (string a, string b) {
    Match matcha = _digits.Match (a);
    Match matchb = _digits.Match (b);
    if (matcha.Success && matchb.Success) {
        int numa = int.Parse (matcha.Groups [1].Value);
        int numb = int.Parse (matchb.Groups [1].Value);
        return numa.CompareTo (numb);
    } else if (matcha.Success) {
        return 1;
    } else if (matchb.Success) {
        return - 1;
    } else {
        return string.Compare (a, b);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14558247_14558685_124_211
14558247_14558697_5_28
Title: How to sort objects by a string field that contains numbers 
----------------------------------------

public int Compare (object x, object y) {
    String s1 = x as string;
    String s2 = y as string;
    if (s1 == null || s2 == null) {
        return 0;
    }
    int thisMarker = 0, thisNumericChunk = 0;
    int thatMarker = 0, thatNumericChunk = 0;
    while ((thisMarker < s1.Length) || (thatMarker < s2.Length)) {
        if (thisMarker >= s1.Length) {
            return - 1;
        } else if (thatMarker >= s2.Length) {
            return 1;
        }
        char thisCh = s1 [thisMarker];
        char thatCh = s2 [thatMarker];
        StringBuilder thisChunk = new StringBuilder ();
        StringBuilder thatChunk = new StringBuilder ();
        while ((thisMarker < s1.Length) && (thisChunk.Length == 0 || InChunk (thisCh, thisChunk [0]))) {
            thisChunk.Append (thisCh);
            thisMarker ++;
            if (thisMarker < s1.Length) {
                thisCh = s1 [thisMarker];
            }
        }
        while ((thatMarker < s2.Length) && (thatChunk.Length == 0 || InChunk (thatCh, thatChunk [0]))) {
            thatChunk.Append (thatCh);
            thatMarker ++;
            if (thatMarker < s2.Length) {
                thatCh = s2 [thatMarker];
            }
        }
        int result = 0;
        if (char.IsDigit (thisChunk [0]) && char.IsDigit (thatChunk [0])) {
            thisNumericChunk = Convert.ToInt32 (thisChunk.ToString ());
            thatNumericChunk = Convert.ToInt32 (thatChunk.ToString ());
            if (thisNumericChunk < thatNumericChunk) {
                result = - 1;
            }
            if (thisNumericChunk > thatNumericChunk) {
                result = 1;
            }
        } else if (char.IsDigit (thisChunk [0]) && ! char.IsDigit (thatChunk [0])) {
            return 1;
        } else if (! char.IsDigit (thisChunk [0]) && char.IsDigit (thatChunk [0])) {
            return - 1;
        } else {
            result = thisChunk.ToString ().CompareTo (thatChunk.ToString ());
        }
        if (result != 0) {
            return result;
        }
    }
    return 0;
}
----------------------------------------

public int Compare (string a, string b) {
    Match matcha = _digits.Match (a);
    Match matchb = _digits.Match (b);
    if (matcha.Success && matchb.Success) {
        int numa = int.Parse (matcha.Groups [1].Value);
        int numb = int.Parse (matchb.Groups [1].Value);
        return numa.CompareTo (numb);
    } else if (matcha.Success) {
        return 1;
    } else if (matchb.Success) {
        return - 1;
    } else {
        return string.Compare (a, b);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14562415_14564324_1_14
14562415_26086557_1_17
Title: XML deserialization generic method 
----------------------------------------

public List < T > DeserializeList < T > (string filePath) {
    var itemList = new List < T > ();
    if (File.Exists (filePath)) {
        var serializer = new XmlSerializer (typeof (List < T >), new XmlRootAttribute ("Root"));
        TextReader reader = new StreamReader (filePath);
        itemList = (List < T >) serializer.Deserialize (reader);
        reader.Close ();
    }
    return itemList;
}
----------------------------------------

public static T genericDeserializeSingleObjFromXML < T > (T value, string XmalfileStorageFullPath) {
    T Tvalue = default (T);
    try {
        XmlSerializer deserializer = new XmlSerializer (typeof (T));
        TextReader textReader = new StreamReader (XmalfileStorageFullPath);
        Tvalue = (T) deserializer.Deserialize (textReader);
        textReader.Close ();
    }
    catch (Exception ex) {
        System.Windows.Forms.MessageBox.Show ("serialization Error : " + ex.Message);
    }
    return Tvalue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1457567_1457577_1_16
1457567_1457615_18_27
Title: "C# FindControl" 
----------------------------------------

private Control FindControlRecursive (Control ctrl, string id) {
    if (ctrl.ID == id) {
        return ctrl;
    }
    foreach (Control child in ctrl.Controls) {
        Control t = FindControlRecursive (child, id);
        if (t != null) {
            return t;
        }
    }
    return null;
}
----------------------------------------

private Control FindControlRecursive (Control root, string id) {
    if (root.ID == id)
        return root;

    foreach (Control c in root.Controls) {
        Control t = FindControlRecursive (c, id);
        if (t != null)
            return t;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
145856_145967_7_25
145856_31986299_4_29
Title: How to join int[] to a character separated string in .NET? 
----------------------------------------

public static string JoinStrings < T > (this IEnumerable < T > source, Func < T, string > projection, string separator) {
    StringBuilder builder = new StringBuilder ();
    bool first = true;
    foreach (T element in source) {
        if (first) {
            first = false;
        } else {
            builder.Append (separator);
        }
        builder.Append (projection (element));
    }
    return builder.ToString ();
}
----------------------------------------

public static string JoinArray < T > (this T [] inputTypeArray, string separator) {
    string strRetValue = null;
    System.Collections.Generic.List < string > ls = new System.Collections.Generic.List < string > ();
    for (int i = 0; i < inputTypeArray.Length; ++ i) {
        string str = System.Convert.ToString (inputTypeArray [i], System.Globalization.CultureInfo.InvariantCulture);
        if (! string.IsNullOrEmpty (str)) {
            ls.Add (str);
        }
    }
    strRetValue = string.Join (separator, ls.ToArray ());
    ls.Clear ();
    ls = null;
    return strRetValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14599487_14599582_1_27
14599487_14600149_1_23
Title: Smallest Multiple 
----------------------------------------

public static void SmallestMultiple () {
    const ushort ARRAY_SIZE = 21;
    ushort [] array = new ushort [ARRAY_SIZE];
    ushort check = 0;
    for (uint value = 19; value < uint.MaxValue; value += 19) {
        for (ushort j = 1; j < ARRAY_SIZE; j ++) {
            array [j] = j;
            if (value % array [j] == 0) {
                check ++;
            }
        }
        if (check == 20) {
            Console.WriteLine ("The value is {0}", value);
            return;
        } else {
            check = 0;
        }
    }
}
----------------------------------------

public static void SmallestMultiple () {
    int primeProduct = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19;
    for (int value = primeProduct;; value += primeProduct) {
        bool success = true;
        for (int j = 11; j < 21; j ++) {
            if (value % j != 0) {
                success = false;
                break;
            }
        }
        if (success) {
            Console.WriteLine ("The value is {0}", value);
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14599487_14599644_1_23
14599487_14600149_1_23
Title: Smallest Multiple 
----------------------------------------

public static void SmallestMultiple () {
    const ushort ARRAY_SIZE = 21;
    ushort check = 0;
    for (uint value = 1; value < uint.MaxValue; value ++) {
        for (ushort j = 1; j < ARRAY_SIZE; j ++) {
            if (value % j == 0) {
                check ++;
            }
        }
        if (check == 20) {
            Console.WriteLine ("The value is {0}", value);
        } else {
            check = 0;
        }
    }
}
----------------------------------------

public static void SmallestMultiple () {
    int primeProduct = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19;
    for (int value = primeProduct;; value += primeProduct) {
        bool success = true;
        for (int j = 11; j < 21; j ++) {
            if (value % j != 0) {
                success = false;
                break;
            }
        }
        if (success) {
            Console.WriteLine ("The value is {0}", value);
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14608993_14609133_3_21
14608993_14609138_3_14
Title: "How to read characters from the keyboard until a period is received and count the number of spaces" 
----------------------------------------

static void Main (string [] args) {
    while (true) {
        Console.WriteLine ("Enter characters,finish with a period (\".\"");
        char ch;
        int spaces = 0;
        do
            {
                ch = (char) Console.Read ();
                if (ch == ' ') {
                    spaces ++;
                }
            } while (ch != '.');
        Console.WriteLine ("Number of spaces counted = {0}", spaces);
    }
}
----------------------------------------

static void Main (string [] args) {
    int spaces = 0;
    char key;
    while ((key = Console.ReadKey ().KeyChar) != '.') {
        if (key == ' ')
            spaces ++;

    }
    Console.WriteLine ();
    Console.WriteLine ("Number of spaces: {0}", spaces);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
146204_47529046_100_112
146204_47529046_86_98
Title: Duplicate keys in .NET dictionaries? 
----------------------------------------

public void Remove (T2 value) {
    lock (this)
    {
        if (_valueKey.TryRemove (value, out List < T1 > keys)) {
            foreach (var item in keys) {
                var remove2 = _keyValue.TryRemove (item, out List < T2 > values);
            }
        }
    }}
----------------------------------------

public void Remove (T1 key) {
    lock (this)
    {
        if (_keyValue.TryRemove (key, out List < T2 > values)) {
            foreach (var item in values) {
                var remove2 = _valueKey.TryRemove (item, out List < T1 > keys);
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14627180_14627254_20_32
14627180_14627258_14_33
Title: C# classes - basic example 
----------------------------------------

public static void Main () {
    Person Mother = new Person (35, "Alice");
    Person Son = new Person (12, "Johny");
    Mother.Name = "Lucy";
    if (Mother.Age > Son.Age) {
        int year = Mother.DateOfBirth ();
        Console.WriteLine ("Mom was born in {0}.", year);
    }
}
----------------------------------------

public static void Main () {
    Person Mother = new Person {Age = 35, Name = "Alice"};
    Person Son = new Person {Age = 12, Name = "Johny"};
    Mother.Name = "Lucy";
    if (Mother.Age > Son.Age) {
        int year = Mother.DateOfBirth ();
        Console.WriteLine ("Mom was born in {0}.", year);
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14630770_14630968_1_23
14630770_14631659_1_24
Title: Sequential processing of asynchronous tasks 
----------------------------------------

public static Task Then (this Task first, Func < Task > next) {
    var tcs = new TaskCompletionSource < object > ();
    first.ContinueWith (_ = > {
        if (first.IsFaulted)
            tcs.TrySetException (first.Exception.InnerExceptions);
        else if (first.IsCanceled)
            tcs.TrySetCanceled ();
        else {
            try {
                next ().ContinueWith (__ = > {
                    if (t.IsFaulted)
                        tcs.TrySetException (t.Exception.InnerExceptions);
                    else if (t.IsCanceled)
                        tcs.TrySetCanceled ();
                    else
                        tcs.TrySetResult (null);

                }, TaskContinuationOptions.ExecuteSynchronously);
            }
            catch (Exception exc) {
                tcs.TrySetException (exc);
            }
        }
    }, TaskContinuationOptions.ExecuteSynchronously);
    return tcs.Task;
}
----------------------------------------

public static Task Then (this Task parent, Func < Task > nextFunc) {
    TaskCompletionSource < object > tcs = new TaskCompletionSource < object > ();
    parent.ContinueWith (pt = > {
        if (pt.IsFaulted) {
            tcs.SetException (pt.Exception.InnerException);
        } else {
            Task next = nextFunc ();
            next.ContinueWith (nt = > {
                if (nt.IsFaulted) {
                    tcs.SetException (nt.Exception.InnerException);
                } else {
                    tcs.SetResult (null);
                }
            });
        }
    });
    return tcs.Task;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14635047_14809106_30_48
14635047_37785029_40_51
Title: Data histogram - optimized binwidth optimization 
----------------------------------------

public static double [] Histogram (double [] data, double [] binEdges) {
    double [] counts = new double [binEdges.Length - 1];
    for (int i = 0; i < binEdges.Length - 1; i ++) {
        double lower = binEdges [i], upper = binEdges [i + 1];
        for (int j = 0; j < data.Length; j ++) {
            if (data [j] >= lower && data [j] <= upper) {
                counts [i] ++;
            }
        }
    }
    return counts;
}
----------------------------------------

private static int [] Histogram (List < double > data, int count, double xMin, double d) {
    var histogram = new int [count];
    foreach (var t in data) {
        var bucket = (int) Math.Truncate ((t - xMin) / d);
        if (count == bucket)
            bucket --;

        histogram [bucket] ++;
    }
    return histogram;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14635047_14809106_3_28
14635047_37785029_8_38
Title: Data histogram - optimized binwidth optimization 
----------------------------------------

public static void CalculateOptimalBinWidth (double [] x) {
    double xMax = x.Max (), xMin = x.Min ();
    int minBins = 4, maxBins = 50;
    double [] N = Enumerable.Range (minBins, maxBins - minBins).Select (v = > (double) v).ToArray ();
    double [] D = N.Select (v = > (xMax - xMin) / v).ToArray ();
    double [] C = new double [D.Length];
    for (int i = 0; i < N.Length; i ++) {
        double [] binIntervals = LinearSpace (xMin, xMax, (int) N [i] + 1);
        double [] ki = Histogram (x, binIntervals);
        ki = ki.Skip (1).Take (ki.Length - 2).ToArray ();
        double mean = ki.Average ();
        double variance = ki.Select (v = > Math.Pow (v - mean, 2)).Sum () / N [i];
        C [i] = (2 * mean - variance) / (Math.Pow (D [i], 2));
    }
    double minC = C.Min ();
    int index = C.Select ((c, ix) = > new {Value = c, Index = ix}).Where (c = > c.Value == minC).First ().Index;
    double optimalBinWidth = D [index];
}
----------------------------------------

public static int [] CalculateOptimalBinWidth (List < double > x, out double xMin, out double optimalBinWidth) {
    var xMax = x.Max ();
    xMin = x.Min ();
    optimalBinWidth = 0;
    const int MIN_BINS = 1;
    const int MAX_BINS = 20;
    int [] minKi = null;
    var minOffset = double.MaxValue;
    foreach (var n in Enumerable.Range (MIN_BINS, MAX_BINS - MIN_BINS).Select (v = > v * 5)) {
        var d = (xMax - xMin) / n;
        var ki = Histogram (x, n, xMin, d);
        var ki2 = ki.Skip (1).Take (ki.Length - 2).ToArray ();
        var mean = ki2.Average ();
        var variance = ki2.Select (v = > Math.Pow (v - mean, 2)).Sum () / n;
        var offset = (2 * mean - variance) / Math.Pow (d, 2);
        if (offset < minOffset) {
            minKi = ki;
            minOffset = offset;
            optimalBinWidth = d;
        }
    }
    return minKi;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
146358_146393_7_66
146358_146428_1_18
Title: "Efficiently merge string arrays in .NET keeping distinct values" 
----------------------------------------

private static IEnumerable < T > Merge < T > (IEnumerable < T > source1, IEnumerable < T > source2, IComparer < T > comparer) {
    if (Object.ReferenceEquals (null, source1))
        throw new ArgumentNullException ("source1");

    if (Object.ReferenceEquals (null, source2))
        throw new ArgumentNullException ("source2");

    if (Object.ReferenceEquals (null, comparer))
        throw new ArgumentNullException ("comparer");

    using (IEnumerator < T > enumerator1 = source1.GetEnumerator (), enumerator2 = source2.GetEnumerator ())
    {
        Boolean more1 = enumerator1.MoveNext ();
        Boolean more2 = enumerator2.MoveNext ();
        while (more1 && more2) {
            Int32 comparisonResult = comparer.Compare (enumerator1.Current, enumerator2.Current);
            if (comparisonResult < 0) {
                yield return enumerator1.Current;
                more1 = enumerator1.MoveNext ();
            } else if (comparisonResult > 0) {
                yield return enumerator2.Current;
                more2 = enumerator2.MoveNext ();
            } else {
                yield return enumerator1.Current;
                more1 = enumerator1.MoveNext ();
                more2 = enumerator2.MoveNext ();
            }
        }
        while (more1) {
            yield return enumerator1.Current;
            more1 = enumerator1.MoveNext ();
        }
        while (more2) {
            yield return enumerator2.Current;
            more2 = enumerator2.MoveNext ();
        }
    }}
----------------------------------------

public static IEnumerable < T > DistinctConcat < T > (IEnumerable < T > first, IEnumerable < T > second) {
    HashSet < T > returned = new HashSet < T > ();
    foreach (T element in first) {
        if (returned.Add (element)) {
            yield return element;
        }
    }
    foreach (T element in second) {
        if (returned.Add (element)) {
            yield return element;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14647216_15760762_3_15
14647216_48061985_3_15
Title: c# treeview ignore double click only at checkbox 
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x203) {
        var localPos = PointToClient (Cursor.Position);
        var hitTestInfo = HitTest (localPos);
        if (hitTestInfo.Location == TreeViewHitTestLocations.StateImage)
            m.Result = IntPtr.Zero;
        else
            base.WndProc (ref m);

    } else
        base.WndProc (ref m);

}
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x0203 && this.CheckBoxes) {
        var localPos = this.PointToClient (Cursor.Position);
        var hitTestInfo = this.HitTest (localPos);
        if (hitTestInfo.Location == TreeViewHitTestLocations.StateImage) {
            m.Msg = 0x0201;
        }
    }
    base.WndProc (ref m);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14649104_14649226_1_14
14649104_14649227_1_10
Title: C# converting a long if statement to something more appropriate 
----------------------------------------

private void MainForm_FormClosing (object sender, FormClosingEventArgs e) {
    if (! AnyChildAlive ())
        return;

    if (MessageBox.Show ("Do you want to save before exit?", "Closing", MessageBoxButtons.YesNo, MessageBoxIcon.Information) != DialogResult.Yes)
        return;

    MessageBox.Show ("To Do saved.", "Status", MessageBoxButtons.OK, MessageBoxIcon.Information);
}
----------------------------------------

private void MainForm_FormClosing (object sender, FormClosingEventArgs e) {
    IFormActions se = this.ActiveControl as IFormActions;
    if ((se != null) && se.AskBeforeClosing ()) {
        if (MessageBox.Show ("Do you want to save before exit?", "Closing", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes) {
            se.SaveData ();
            MessageBox.Show ("Saved", "Status", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14661435_14662328_1_27
14661435_14662334_1_38
Title: How to upload directory to ftp using ftplib? 
----------------------------------------

static void DirSearch (string sDir, FtpConnection ftp, string currentDirectory) {
    try {
        ftp.SetCurrentDirectory (currentDirectory);
        foreach (string d in Directory.GetDirectories (sDir)) {
            string dirname = new DirectoryInfo (d).Name;
            if (! ftp.DirectoryExists (dirname)) {
                ftp.CreateDirectory (dirname);
            }
            foreach (string f in Directory.GetFiles (d)) {
                Uri uri = new Uri (f);
                ftp.PutFile (f, System.IO.Path.GetFileName (uri.LocalPath));
            }
            string newCurrentDir = currentDirectory + dirname + "/";
            DirSearch (d, ftp, newCurrentDir);
        }
    }
    catch (System.Exception e) {
        MessageBox.Show (String.Format ("Błąd FTP: {0} {1}", e.Message), "Błąd wysyłania plików na FTP", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
----------------------------------------

static void DirSearch (string sDir, FtpConnection ftp) {
    try {
        foreach (string f in Directory.GetFiles (d)) {
            Uri uri = new Uri (f);
            ftp.PutFile (f, System.IO.Path.GetFileName (uri.LocalPath));
        }
        foreach (string d in Directory.GetDirectories (sDir)) {
            string dirname = new DirectoryInfo (d).Name;
            if (! ftp.DirectoryExists (dirname)) {
                ftp.CreateDirectory (dirname);
            }
            ftp.SetCurrentDirectory (dirname);
            DirSearch (d, ftp);
        }
    }
    catch (System.Exception e) {
        MessageBox.Show (String.Format ("Błąd FTP: {0} {1}", e.Message), "Błąd wysyłania plików na FTP", MessageBoxButton.OK, MessageBoxImage.Error);
    }
    finally {
        ftp.SetCurrentDirectory ("..");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14666275_14666338_1_12
14666275_14666390_1_20
Title: Recursive power calculation 
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

internal static double Pow (double @base, int exponent) {
    if (exponent < 0) {
        Console.Error.WriteLine ("Usage of this function is limited to positive exponents only");
        throw new Exception ();
    } else if (exponent == 1) {
        return @base;
    } else if (exponent == 0) {
        return 1;
    } else {
        return @base * Pow (@base, exponent - 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1467041_1467093_5_23
1467041_1467137_1_18
Title: Advance C# ReadLine() to next line in a function call 
----------------------------------------

string invoiceNumberFunc () {
    if (sr == null)
        sr = new StreamReader (path);

    if (sr.EndOfStream) {
        sr.Close ();
        sr = null;
        return string.Empty;
    }
    try {
        return sr.ReadLine ();
    }
    catch (Exception exp) {
        Console.WriteLine ("Process failed {0}", exp.ToString ());
        return string.Empty;
    }
}
----------------------------------------

IEnumerable < String > invoiceNumberFunc () {
    string path = @"C:\Users\sam\Documents\GCProg\testReadFile.txt";
    try {
        using (System.IO.StreamReader sr = new System.IO.StreamReader (path))
        {
            String invoiceNumber;
            while ((invoiceNumber = sr.ReadLine ()) != null) {
                yield return sr.ReadLine ();
            }
        }}
    finally {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14751071_14751156_1_18
14751071_14751248_1_22
Title: Return Multiple strings of hash 
----------------------------------------

public IEnumerable < String > GetRaumImageName () {
    var md5 = System.Security.Cryptography.MD5.Create ();
    byte [] hash = new byte [0];
    foreach (PanelView panelView in pv) {
        hash = md5.ComputeHash (Encoding.ASCII.GetBytes (panelView.Title));
        StringBuilder sb = new StringBuilder ();
        for (int i = 0; i < hash.Length; i ++) {
            sb.Append (hash [i].ToString ("X2"));
        }
        yield return sb.ToString ();
    }
}
----------------------------------------

public List < string > GetRaumImageName () {
    var md5 = System.Security.Cryptography.MD5.Create ();
    List < string > hashes = new List < string > ();
    StringBuilder sb = new StringBuilder ();
    byte [] hash = new byte [0];
    foreach (PanelView panelView in pv) {
        hash = md5.ComputeHash (Encoding.ASCII.GetBytes (panelView.Title));
        sb.Remove (0, sb.Length);
        for (int i = 0; i < hash.Length; i ++) {
            sb.Append (hash [i].ToString ("X2"));
        }
        hashes.Add (sb.ToString ());
    }
    return hashes;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1475747_1484960_15_25
1475747_19137392_14_31
Title: Is there an in memory stream that blocks like a file stream 
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    _DataReady.WaitOne ();
    byte [] lBuffer;
    if (! _Buffers.TryDequeue (out lBuffer)) {
        _DataReady.Reset ();
        return - 1;
    }
    if (! DataAvailable)
        _DataReady.Reset ();

    Array.Copy (lBuffer, buffer, lBuffer.Length);
    return lBuffer.Length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_109_118
14784322_36119881_120_130
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2)};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------

public object DoCall < A1, A2 > (string func, ref A1 a1, A2 a2) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType (), typeof (A2)};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_109_118
14784322_36119881_132_142
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2)};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, ref A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2).MakeByRefType ()};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a2 = (A2) args [1];
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_109_118
14784322_36119881_144_155
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2)};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------

public object DoCall < A1, A2 > (string func, ref A1 a1, ref A2 a2) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType (), typeof (A2).MakeByRefType ()};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    a2 = (A2) args [1];
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_109_118
14784322_36119881_86_95
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2)};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, A1 a1) {
    Type [] types = new Type [] {typeof (A1)};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_109_118
14784322_36119881_97_107
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2)};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, ref A1 a1) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType ()};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_120_130
14784322_36119881_86_95
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, ref A1 a1, A2 a2) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType (), typeof (A2)};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, A1 a1) {
    Type [] types = new Type [] {typeof (A1)};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_132_142
14784322_36119881_86_95
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, ref A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2).MakeByRefType ()};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a2 = (A2) args [1];
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, A1 a1) {
    Type [] types = new Type [] {typeof (A1)};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_132_142
14784322_36119881_97_107
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, A1 a1, ref A2 a2) {
    Type [] types = new Type [] {typeof (A1), typeof (A2).MakeByRefType ()};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a2 = (A2) args [1];
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, ref A1 a1) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType ()};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_144_155
14784322_36119881_86_95
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, ref A1 a1, ref A2 a2) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType (), typeof (A2).MakeByRefType ()};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    a2 = (A2) args [1];
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, A1 a1) {
    Type [] types = new Type [] {typeof (A1)};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_144_155
14784322_36119881_97_107
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1, A2 > (string func, ref A1 a1, ref A2 a2) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType (), typeof (A2).MakeByRefType ()};
    object [] args = new object [] {a1, a2};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    a2 = (A2) args [1];
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, ref A1 a1) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType ()};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14784322_36119881_86_95
14784322_36119881_97_107
Title: "invoking correct generic method using Type variable with out and ref" 
----------------------------------------

public object DoCall < A1 > (string func, A1 a1) {
    Type [] types = new Type [] {typeof (A1)};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    return r;
}
----------------------------------------

public object DoCall < A1 > (string func, ref A1 a1) {
    Type [] types = new Type [] {typeof (A1).MakeByRefType ()};
    object [] args = new object [] {a1};
    MethodInfo f = GetFunc (func, types);
    if (f == null)
        return null;

    object r = f.Invoke (o, args);
    a1 = (A1) args [0];
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14795197_14795752_3_20
14795197_49700842_1_27
Title: Forcefully Replacing Existing Files during Extracting File using System.IO.Compression? 
----------------------------------------

public static void ExtractToDirectory (this ZipArchive archive, string destinationDirectoryName, bool overwrite) {
    if (! overwrite) {
        archive.ExtractToDirectory (destinationDirectoryName);
        return;
    }
    foreach (ZipArchiveEntry file in archive.Entries) {
        string completeFileName = Path.Combine (destinationDirectoryName, file.FullName);
        if (file.Name == "") {
            Directory.CreateDirectory (Path.GetDirectoryName (completeFileName));
            continue;
        }
        file.ExtractToFile (completeFileName, true);
    }
}
----------------------------------------

public static void ExtractToDirectory (this ZipArchive archive, string destinationDirectoryName, bool overwrite) {
    if (! overwrite) {
        archive.ExtractToDirectory (destinationDirectoryName);
        return;
    }
    foreach (ZipArchiveEntry file in archive.Entries) {
        string completeFileName = Path.Combine (destinationDirectoryName, file.FullName);
        if (file.Name == "") {
            Directory.CreateDirectory (Path.GetDirectoryName (completeFileName));
            continue;
        }
        var dirToCreate = destinationDirectoryName;
        for (var i = 0; i < file.FullName.Split ('/').Length - 1; i ++) {
            var s = file.FullName.Split ('/') [i];
            dirToCreate = Path.Combine (dirToCreate, s);
            if (! Directory.Exists (dirToCreate))
                Directory.CreateDirectory (dirToCreate);

        }
        file.ExtractToFile (completeFileName, true);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14795197_30425148_3_21
14795197_49700842_1_27
Title: Forcefully Replacing Existing Files during Extracting File using System.IO.Compression? 
----------------------------------------

public static void ExtractToDirectory (this ZipArchive archive, string destinationDirectoryName, bool overwrite) {
    if (! overwrite) {
        archive.ExtractToDirectory (destinationDirectoryName);
        return;
    }
    foreach (ZipArchiveEntry file in archive.Entries) {
        string completeFileName = Path.Combine (destinationDirectoryName, file.FullName);
        string directory = Path.GetDirectoryName (completeFileName);
        if (! Directory.Exists (directory))
            Directory.CreateDirectory (directory);

        if (file.Name != "")
            file.ExtractToFile (completeFileName, true);

    }
}
----------------------------------------

public static void ExtractToDirectory (this ZipArchive archive, string destinationDirectoryName, bool overwrite) {
    if (! overwrite) {
        archive.ExtractToDirectory (destinationDirectoryName);
        return;
    }
    foreach (ZipArchiveEntry file in archive.Entries) {
        string completeFileName = Path.Combine (destinationDirectoryName, file.FullName);
        if (file.Name == "") {
            Directory.CreateDirectory (Path.GetDirectoryName (completeFileName));
            continue;
        }
        var dirToCreate = destinationDirectoryName;
        for (var i = 0; i < file.FullName.Split ('/').Length - 1; i ++) {
            var s = file.FullName.Split ('/') [i];
            dirToCreate = Path.Combine (dirToCreate, s);
            if (! Directory.Exists (dirToCreate))
                Directory.CreateDirectory (dirToCreate);

        }
        file.ExtractToFile (completeFileName, true);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1482486_10530725_19_42
1482486_22486408_22_52
Title: Does WPF have a native file dialog? 
----------------------------------------

private static void AttachFileDialog (TextBox textBox, DependencyPropertyChangedEventArgs args) {
    var parent = (Panel) textBox.Parent;
    parent.Loaded += delegate {
        var button = (Button) parent.Children.Cast < object > ().FirstOrDefault (x = > x is Button);
        var filter = (string) args.NewValue;
        button.Click += (s, e) = > {
            var dlg = new OpenFileDialog ();
            dlg.Filter = filter;
            var result = dlg.ShowDialog ();
            if (result == true) {
                textBox.Text = dlg.FileName;
            }
        };
    };
}
----------------------------------------

private static void AttachFileDialog (TextBox textBox, DependencyPropertyChangedEventArgs args) {
    var textBoxParent = textBox.Parent as Panel;
    if (textBoxParent == null) {
        Debug.Print ("Failed to attach File Dialog Launching Button Click Handler to Textbox parent panel!");
        return;
    }
    textBoxParent.Loaded += delegate {
        var button = textBoxParent.Children.Cast < object > ().FirstOrDefault (x = > x is Button) as Button;
        if (button == null)
            return;

        var filter = (string) args.NewValue;
        button.Click += (s, e) = > {
            var dlg = new OpenFileDialog {Filter = filter};
            var result = dlg.ShowDialog ();
            if (result == true) {
                textBox.Text = dlg.FileName;
            }
        };
    };
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14886725_14886863_1_12
14886725_14887142_1_16
Title: Getting name of specific linq to sql table 
----------------------------------------

public static string GetTableName < TEntity > (this Table < TEntity > MyTable) where TEntity : class {
    Type type = typeof (TEntity);
    object [] temp = type.GetCustomAttributes (typeof (System.Data.Linq.Mapping.TableAttribute), true);
    if (temp.Length == 0)
        return null;
    else
        return (temp [0] as System.Data.Linq.Mapping.TableAttribute).Name;

}
----------------------------------------

public static string GetTableName < TEntity > (this Table < TEntity > MyTable) where TEntity : class {
    string name = string.Empty;
    Type type;
    object [] attributes;
    type = typeof (TEntity);
    attributes = type.GetCustomAttributes (typeof (TableAttribute), true);
    if (attributes.Length > 0)
        name = ((TableAttribute) attributes [0]).Name;

    if (! string.IsNullOrEmpty (name))
        return name;

    return type.Name;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14893924_14894589_10_58
14893924_53519596_11_38
Title: For vs. Linq - Performance vs. Future 
----------------------------------------

private static void Main (string [] args) {
    string [] a = new string [1000000];
    for (int i = 0; i < a.Length; ++ i) {
        a [i] = "Won't be found";
    }
    string matchString = "Will be found";
    a [a.Length - 1] = "Will be found";
    const int COUNT = 100;
    var sw = Stopwatch.StartNew ();
    int matchIndex = - 1;
    for (int outer = 0; outer < COUNT; ++ outer) {
        for (int i = 0; i < a.Length; i ++) {
            if (a [i] == matchString) {
                matchIndex = i;
                break;
            }
        }
    }
    sw.Stop ();
    Console.WriteLine ("Found via loop at index " + matchIndex + " in " + sw.Elapsed);
    double loopTime = sw.Elapsed.TotalSeconds;
    sw.Restart ();
    for (int outer = 0; outer < COUNT; ++ outer) {
        matchIndex = a.Select ((r, i) = > new {value = r, index = i}).Where (t = > t.value == matchString).Select (s = > s.index).First ();
    }
    sw.Stop ();
    Console.WriteLine ("Found via linq at index " + matchIndex + " in " + sw.Elapsed);
    double linqTime = sw.Elapsed.TotalSeconds;
    Console.WriteLine ("Loop was {0} times faster than linq.", linqTime / loopTime);
}
----------------------------------------

private static void Main (string [] args) {
    string [] a = new string [1000000];
    for (int i = 0; i < a.Length; ++ i) {
        a [i] = "Won't be found";
    }
    string matchString = "Will be found";
    a [a.Length - 1] = "Will be found";
    const int COUNT = 100;
    var sw = Stopwatch.StartNew ();
    Loop (a, matchString, COUNT, sw);
    First (a, matchString, COUNT, sw);
    Where (a, matchString, COUNT, sw);
    IndexOf (a, sw, matchString, COUNT);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14934537_14934963_1_20
14934537_14935020_8_36
Title: LINQ alternative to creating collection by looping over array of fields 
----------------------------------------

public static IEnumerable < MyObj > AsComponents < T > (this IEnumerable < T > serialized) where T : class {
    using (var it = serialized.GetEnumerator ())
    {
        Func < T > next = () = > it.MoveNext () ? it.Current : null;
        var obj = new MyObj {Name = next (), Id = next (), Other = next ()};
        if (obj.Name == null)
            yield break;

        yield return obj;
    }}
----------------------------------------

public static IEnumerable < T [] > Batch < T > (this IEnumerable < T > sequence, int batchLength) {
    if (sequence == null)
        throw new ArgumentNullException ("sequence");

    if (batchLength < 2)
        throw new ArgumentException ("Batch length must be at least 2", "batchLength");

    using (var iter = sequence.GetEnumerator ())
    {
        var bfr = new T [batchLength];
        while (true) {
            for (int i = 0; i < batchLength; i ++) {
                if (! iter.MoveNext ()) {
                    if (i == 0)
                        yield break;

                    Array.Resize (ref bfr, i);
                    break;
                }
                bfr [i] = iter.Current;
            }
            yield return bfr;
            bfr = new T [batchLength];
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1494167_1498193_3_20
1494167_1690811_29_47
Title: How to Configure AutoMapper Once Per AppDomain 
----------------------------------------

public static void CreateMappings (Assembly a) {
    Dictionary < Type, IAutoMappingBuddy > mappingDictionary = GetMappingDictionary (a);
    foreach (Type t in a.GetTypes ()) {
        var amba = t.GetCustomAttributes (typeof (AutoMappingBuddyAttribute), true).OfType < AutoMappingBuddyAttribute > ().FirstOrDefault ();
        if (amba != null && ! mappingDictionary.ContainsKey (amba.MappingBuddy)) {
            mappingDictionary.Add (amba.MappingBuddy, amba.CreateBuddy ());
        }
    }
    foreach (IAutoMappingBuddy mappingBuddy in mappingDictionary.Values) {
        mappingBuddy.CreateMaps ();
    }
}
----------------------------------------

public static void CreateMappings (Assembly a) {
    IList < AutoMappingTypePairing > autoMappingTypePairingList = new List < AutoMappingTypePairing > ();
    foreach (Type t in a.GetTypes ()) {
        var amba = t.GetCustomAttributes (typeof (AutoMappingAttribute), true).OfType < AutoMappingAttribute > ().FirstOrDefault ();
        if (amba != null) {
            autoMappingTypePairingList.Add (new AutoMappingTypePairing {SourceType = amba.SourceType, DestinationType = t});
        }
    }
    foreach (AutoMappingTypePairing mappingPair in autoMappingTypePairingList) {
        Mapper.CreateMap (mappingPair.SourceType, mappingPair.DestinationType);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14945478_14945569_1_20
14945478_14945587_1_14
Title: Validating School Year 
----------------------------------------

public bool IsSchoolYearFormat (string toCheck) {
    string [] arr = toCheck.Trim ().Split ('-');
    if (arr.Length != 2) {
        return false;
    }
    int one, two;
    if (! int.TryParse (arr [0], out one)) {
        return false;
    }
    if (! int.TryParse (arr [1], out two)) {
        return false;
    }
    return two - 1 == one && two > 1900 && one > 1900;
}
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;

        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14985322_14985606_13_26
14985322_14985606_1_11
Title: Does LinQ Any() cast all items in a collection? 
----------------------------------------

public static bool Any < TSource > (this IEnumerable < TSource > source, Func < TSource, bool > predicate) {
    if (source == null) {
        throw Error.ArgumentNull ("source");
    }
    if (predicate == null) {
        throw Error.ArgumentNull ("predicate");
    }
    foreach (TSource local in source) {
        if (predicate (local)) {
            return true;
        }
    }
    return false;
}
----------------------------------------

public static bool Any < TSource > (this IEnumerable < TSource > source) {
    if (source == null) {
        throw Error.ArgumentNull ("source");
    }
    using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
    {
        if (enumerator.MoveNext ()) {
            return true;
        }
    } return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1498727_36486185_9_20
1498727_7562876_3_22
Title: ASP.NET MVC - How to show unauthorized error on login page? 
----------------------------------------

protected override void HandleUnauthorizedRequest (AuthorizationContext filterContext) {
    base.HandleUnauthorizedRequest (filterContext);
    if (filterContext.RequestContext.HttpContext.User.Identity.IsAuthenticated) {
        var routeData = new RouteData ();
        routeData.Values.Add ("controller", "Error");
        routeData.Values.Add ("action", "Unauthorized");
        filterContext.Result = new RedirectToRouteResult (routeData.Values);
    }
}
----------------------------------------

protected override void HandleUnauthorizedRequest (AuthorizationContext filterContext) {
    Contract.Requires (filterContext != null);
    HttpContextBase context = filterContext.RequestContext.HttpContext;
    if (context.User.Identity.IsAuthenticated) {
        string url = context.GetCustomErrorUrl (401);
        context.Response.Redirect (url);
    } else {
        string extraQueryString = context.Request.RawUrl;
        FormsAuthentication.RedirectToLoginPage (extraQueryString);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14987953_14988052_1_23
14987953_14988557_1_17
Title: Remove elements from List Box if checkbox gets unchecked in C# 
----------------------------------------

private void cbCheckbox_CheckedChanged (object sender, EventArgs e) {
    if (cbCheckbox.Checked) {
        testlist.Clear ();
        ltTestPool.DataSource = null;
        testlist.Add ("Elemento1");
        testlist.Add ("Elemento2");
        testlist.Add ("Elemento3");
        ltTestPool.DataSource = testlist;
    } else {
        testlist.Clear ();
        ltTestPool.DataSource = null;
        testlist.Add ("Elemento1");
        testlist.Add ("Elemento2");
        testlist.Add ("Elemento3");
        ltTestPool.DataSource = testlist;
    }
}
----------------------------------------

private void cbCheckbox_CheckedChanged (object sender, EventArgs e) {
    if (cbCheckbox.Checked) {
        testlist.Items.Clear ();
        testlist.Items.Add ("Elemento1");
        testlist.Items.Add ("Elemento2");
        testlist.Items.Add ("Elemento3");
        ltTestPool.DataSource = testlist;
    } else {
        testlist.Items.Clear ();
        ltTestPool.DataSource = testlist;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14991959_14992758_8_19
14991959_49817037_1_15
Title: How to create XML with multiple namespace attributes in C# 
----------------------------------------

public void WriteXml (XmlWriter writer) {
    writer.WriteStartElement ("oneshot");
    writer.WriteAttributeString ("xmlns", null, "http://www.w3.org/2002/xforms");
    writer.WriteAttributeString ("xmlns:dm", null, "http://mobileforms.foo.com/xforms");
    writer.WriteAttributeString ("xmlns:h", null, "http://www.w3.org/1999/xhtml");
    writer.WriteAttributeString ("xmlns:xsd", null, "http://www.w3.org/2001/XMLSchema");
    writer.WriteElementString ("dm:form_namespace", null, FormNamespace);
    writer.WriteElementString ("Days", Days.ToString ());
    writer.WriteElementString ("Leave_Type", LeaveType);
    writer.WriteEndElement ();
}
----------------------------------------

public void WriteXml (XmlWriter writer) {
    const string ns1 = "http://firstline.com/";
    const string xsi = "http://www.w3.org/2001/XMLSchema-instance";
    writer.WriteStartElement ("myRoot", ns1);
    writer.WriteAttributeString ("SchemaVersion", "1.0");
    writer.WriteAttributeString ("xmlns", "xsi", "http://www.w3.org/2000/xmlns/", xsi);
    writer.WriteAttributeString ("xsi", "schemaLocation", xsi, ns1 + " schema1.xs");
    writer.WriteStartElement ("element1", ns1);
    writer.WriteElementString ("test1", ns1, "test value");
    writer.WriteElementString ("test2", ns1, "value 2");
    writer.WriteEndElement ();
    writer.WriteEndElement ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15005083_15005202_8_17
15005083_15005662_8_22
Title: "Read an up-to date value from an Interlocked variable with only one write on the variable" 
----------------------------------------

public T SetValue (T newValue) {
    lock (writeLock)
    {
        if (newValue == null) {
            throw new System.ArgumentNullException ();
        }
        _value = newValue;
        return newValue;
    }}
----------------------------------------

public T SetValue (T newValue) {
    if (newValue == null)
        throw new ArgumentNullException ("newValue");

    lock (SetterLock)
    {
        if (ValueGetter != NoValueSetError)
            throw new Exception ("Value already present.");
        else
            ValueGetter = () = > newValue;

    } return newValue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15012621_15012652_1_14
15012621_18230581_1_23
Title: How to get original Entity from ChangeTracker 
----------------------------------------

private T CreateWithValues < T > (DbPropertyValues values) where T : new () {
    T entity = new T ();
    Type type = typeof (T);
    foreach (var name in values.PropertyNames) {
        var property = type.GetProperty (name);
        property.SetValue (entity, values.GetValue < object > (name));
    }
    return entity;
}
----------------------------------------

public static TEntity GetOriginal < TEntity > (this DbContext ctx, TEntity updatedEntity) where TEntity : class {
    Func < DbPropertyValues, Type, object > getOriginal = null;
    getOriginal = (originalValues, type) = > {
        object original = Activator.CreateInstance (type, true);
        foreach (var ptyName in originalValues.PropertyNames) {
            var property = type.GetProperty (ptyName);
            object value = originalValues [ptyName];
            if (value is DbPropertyValues) {
                property.SetValue (original, getOriginal (value as DbPropertyValues, property.PropertyType));
            } else {
                property.SetValue (original, value);
            }
        }
        return original;
    };
    return (TEntity) getOriginal (ctx.Entry (updatedEntity).OriginalValues, typeof (TEntity));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1501310_1512523_1_12
1501310_1513931_10_22
Title: Default Values on DetailsView Insert 
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! IsPostBack) {
        DetailsView1.DefaultMode = DetailsViewMode.Insert;
        if (DetailsView1.FindControl ("TextBox1") != null) {
            TextBox txt1 = (TextBox) DetailsView1.FindControl ("TextBox1");
            txt1.Text = User.Identity.Name.ToString ();
        }
    }
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! IsPostBack) {
        DetailsView1.DefaultMode = DetailsViewMode.Insert;
        if (DetailsView1.FindControl ("UserName") != null) {
            TextBox txt1 = (TextBox) DetailsView1.FindControl ("UserName");
            txt1.Text = User.Identity.Name.ToString ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15044771_15044838_39_56
15044771_15044838_58_131
Title: XML fragment with an ampersand 
----------------------------------------

public override int Read () {
    char cChar;
    if (sbBuffer != null) {
        cChar = sbBuffer [bufferOffset];
        bufferOffset ++;
        evalBuffer ();
        return cChar;
    } else {
        cChar = (char) base.Read ();
        if (cChar == '&')
            sbBuffer = new StringBuilder ("amp;");

        return cChar;
    }
}
----------------------------------------

public override int Read (char [] buffer, int index, int count) {
    int destOffset = 0;
    const string replacement = "&amp;";
    if (sbBuffer != null) {
        int bufferedToConsume = Math.Min (count, sbBuffer.Length - bufferOffset);
        sbBuffer.CopyTo (bufferOffset, buffer, index, bufferedToConsume);
        destOffset += bufferedToConsume;
        bufferOffset += bufferedToConsume;
        evalBuffer ();
    }
    if (destOffset < count) {
        char [] newBuffer = new char [count - destOffset];
        var newRead = base.Read (newBuffer, 0, newBuffer.Length);
        int sourceOffset = 0;
        while (sourceOffset < newRead && destOffset < count) {
            char tChar = newBuffer [sourceOffset];
            if (tChar == '&') {
                int replacementOffset = 0;
                while (replacementOffset < replacement.Length && destOffset < count) {
                    buffer [destOffset + index] = replacement [replacementOffset];
                    destOffset ++;
                    replacementOffset ++;
                }
                sourceOffset ++;
                if (replacementOffset < replacement.Length) {
                    sbBuffer = new StringBuilder ();
                    sbBuffer.Append (replacement, replacementOffset, replacement.Length - replacementOffset);
                }
            } else {
                buffer [destOffset + index] = tChar;
                destOffset ++;
                sourceOffset ++;
            }
        }
        if (sourceOffset < newRead) {
            if (sbBuffer == null)
                sbBuffer = new StringBuilder ();

            for (; sourceOffset < newRead; sourceOffset ++) {
                char tChar = newBuffer [sourceOffset];
                if (tChar == '&')
                    sbBuffer.Append (replacement);
                else
                    sbBuffer.Append (tChar);

            }
        }
    }
    return destOffset;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15065639_15065655_1_17
15065639_15065874_1_13
Title: not returning value 
----------------------------------------

public DataTable Do_Insert_Update_Delete (string Proc_name, params object [] arg) {
    if (Proc_name == "Vehicle_Booked_Info") {
        SqlCommand com = new SqlCommand ("Vehicle_Booked_Info", con);
        com.CommandType = CommandType.StoredProcedure;
        com.Parameters.Add (" @Today_Date", SqlDbType.DateTime).Value = Convert.ToDateTime (arg [0].ToString ());
        SqlDataAdapter sda = new SqlDataAdapter (com);
        DataTable dt = new DataTable ();
        sda.Fill (dt);
        return dt;
    } else {
        return null;
    }
}
----------------------------------------

public DataTable Do_Insert_Update_Delete (string Proc_name, params object [] arg) {
    DataTable dt = new DataTable ();
    if (Proc_name == "Vehicle_Booked_Info") {
        SqlCommand com = new SqlCommand ("Vehicle_Booked_Info", con);
        com.CommandType = CommandType.StoredProcedure;
        com.Parameters.Add (" @Today_Date", SqlDbType.DateTime).Value = Convert.ToDateTime (arg [0].ToString ());
        SqlDataAdapter sda = new SqlDataAdapter (com);
        sda.Fill (dt);
    }
    return dt;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15072031_15072304_8_23
15072031_15073054_1_13
Title: DropDownList displaying no value despite appearing to be populated 
----------------------------------------

public void PopulateDropDown () {
    string unsplitList = Fabric.SettingsProvider.ReadSetting < string > ("Setting.Location");
    string [] instrumentList = unsplitList.Split (',');
    DropDownList instrumentsDropDown = new DropDownList ();
    if (instrumentList.Length > 0) {
        foreach (string instrument in instrumentList) {
            instrumentsDropDown.Items.Add (instrument);
        }
        instrumentsDropDown.DataBind ();
    }
}
----------------------------------------

public void PopulateDropDown () {
    string unsplitList = Fabric.SettingsProvider.ReadSetting < string > ("Setting.Location");
    string [] instrumentList = unsplitList.Split (',');
    if (instrumentList.Length > 0) {
        foreach (string instrument in instrumentList) {
            this.Items.Add (instrument);
        }
    }
}
----------------------------------------

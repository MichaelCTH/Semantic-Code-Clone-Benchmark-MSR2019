$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29716367_29716524_1_26
29716367_29716711_14_24
Title: How to get values from variable in array? 
----------------------------------------

static void xn () {
    double r = 3.9;
    var n = 0;
    var increment = 0.01d;
    var n_expected = 100;
    var x_arr = new double [n_expected];
    for (double x = 0; x <= 1; x += increment) {
        double xr = r * x * (1 - x);
        x_arr [n ++] = xr;
    }
    for (int y = 0; y < 23; y ++) {
        Console.WriteLine (xr_arr [y]);
    }
}
----------------------------------------

static void xn () {
    double r = 3.9;
    List < double > xr_arr = new List < double > ();
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr.Add (xr);
    }
    Console.WriteLine (string.Join (",", xr_arr.Take (24).Select (a = > a.ToString ()).ToArray ()));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29733237_29733736_12_33
29733237_45733698_28_43
Title: Unity 3D Door Script 
----------------------------------------

private void Update () {
    if (Input.GetKeyDown ("e")) {
        ray = Camera.main.ScreenPointToRay (Input.mousePosition);
        if (Physics.Raycast (ray, out hit, distance)) {
            if (hit.collider.gameObject.name == "door") {
                if (! doorOpen) {
                    hit.transform.Translate (new Vector3 (0.0f, 0.0f, 4.0f));
                    doorOpen = true;
                } else {
                    hit.transform.Translate (new Vector3 (0.0f, 0.0f, - 4.0f));
                    doorOpen = false;
                }
            }
        }
    }
}
----------------------------------------

private void Update () {
    if (Input.GetKeyDown (KeyCode.E) && InDistance == true && openclosed == false) {
        openclosed = true;
        transform.Rotate (0, 0, angle);
    } else if (Input.GetKeyDown (KeyCode.E) && openclosed == true && InDistance == true) {
        openclosed = false;
        transform.Rotate (0, 0, - angle);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29733237_29734510_11_30
29733237_45733698_28_43
Title: Unity 3D Door Script 
----------------------------------------

private void Update () {
    if (Input.GetKeyDown ("e")) {
        ray = Camera.main.ScreenPointToRay (Input.mousePosition);
        if (Physics.Raycast (ray, out hit, distance)) {
            if (! doorOpen) {
                gameObject.transform.Translate (new Vector3 (0.0f, 0.0f, 4.0f));
                doorOpen = true;
            } else {
                gameObject.transform.Translate (new Vector3 (0.0f, 0.0f, - 4.0f));
                doorOpen = false;
            }
        }
    }
}
----------------------------------------

private void Update () {
    if (Input.GetKeyDown (KeyCode.E) && InDistance == true && openclosed == false) {
        openclosed = true;
        transform.Rotate (0, 0, angle);
    } else if (Input.GetKeyDown (KeyCode.E) && openclosed == true && InDistance == true) {
        openclosed = false;
        transform.Rotate (0, 0, - angle);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29740042_29740752_1_13
29740042_29740776_1_17
Title: set Check to treeView checkbox 
----------------------------------------

private void chechTreeViewItems (List < int > remID) {
    foreach (System.Windows.Forms.TreeNode item in this.tvRemark.Nodes [0].Nodes) {
        for (int i = 0; i < remID.Count; i ++) {
            if (Convert.ToInt16 (item.Tag) == remID [i]) {
                item.Checked = true;
            }
        }
    }
}
----------------------------------------

private void chechTreeViewItems (List < int > remID) {
    for (int i = 0; i < remID.Count; i ++) {
        foreach (System.Windows.Forms.TreeNode item in this.tvRemark.Nodes [0].Nodes) {
            if (Convert.ToInt16 (item.Tag) == remID [i]) {
                item.Checked = true;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
297526_297529_27_39
297526_297698_7_24
Title: What is the best way to clear all controls on a form C#? 
----------------------------------------

public static void ClearControls < T > (this Control.ControlCollection controls) where T : class {
    if (! controldefaults.ContainsKey (typeof (T)))
        return;

    foreach (Control control in controls) {
        if (control.GetType ().Equals (typeof (T))) {
            FindAndInvoke (typeof (T), control);
        }
    }
}
----------------------------------------

public static void Clear < T, C > (ControlCollection controls) where C : ITextControl where T : Control {
    IEnumerable < T > placeHolders = controls.OfType < T > ();
    List < T > holders = placeHolders.ToList ();
    foreach (T holder in holders) {
        IEnumerable < C > enumBoxes = holder.Controls.OfType < C > ();
        List < C > boxes = enumBoxes.ToList ();
        foreach (C box in boxes) {
            box.Text = string.Empty;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29790232_29790849_1_30
29790232_29794413_1_29
Title: Check if row modified in gridview 
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    try {
        DataTable dt = LoadData ();
        EnumerableRowCollection < DataRow > enumerableDt = dt.AsEnumerable ();
        foreach (GridViewRow row in gvDetails.Rows) {
            string strID = ((Label) row.FindControl ("lblID")).Text;
            string strGroup = ((Label) row.FindControl ("lblGrp")).Text;
            string strValue = ((TextBox) row.FindControl ("txtValue")).Text;
            DataRow dr = enumerableDt.Where (x = > x.Field < string > ("ID") == strID).FirstOrDefault ();
            if (dr ["Value"].ToString ().ToUpper () != strValue.Trim ().ToUpper ()) {
            } else {
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

protected void btnUpdate_Click (object sender, EventArgs e) {
    try {
        var isAnyRowUpdated = false;
        foreach (GridViewRow row in gvDetails.Rows) {
            string strID = ((Label) row.FindControl ("lblID")).Text;
            string strGroup = ((Label) row.FindControl ("lblGrp")).Text;
            string strValue = ((TextBox) row.FindControl ("txtValue")).Text;
            string strOldValue = ((HiddenField) row.FindControl ("hdnOldValue")).Value;
            if (strValue != strOldValue) {
                isAnyRowUpdated = true;
            }
        }
        if (! isAnyRowUpdated) {
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29866453_29867748_19_39
29866453_29867748_1_17
Title: I have a function that makes an array and shuffles it but I don't know how to call it in the way I want to 
----------------------------------------

public static int [] [] Matrix (int rows, int columns) {
    int [] [] lottery = new int [rows] [];
    for (int i = 0; i < lottery.Length; i ++) {
        ShuffledRow sr = new ShuffledRow (1, 46);
        lottery [i] = new int [columns];
        for (int j = 0; j < columns; j ++) {
            lottery [i] [j] = sr.Row [j];
            Console.Write ("{0,3},", lottery [i] [j]);
        }
        Console.WriteLine ();
    }
    return lottery;
}
----------------------------------------

public static int [] [] Matrix (int rows, int columns) {
    int [] [] lottery = new int [rows] [];
    for (int i = 0; i < lottery.Length; i ++) {
        ShuffledRow sr = new ShuffledRow (1, 46);
        lottery [i] = sr.Row;
        Array.Resize (ref lottery [i], columns);
        Console.WriteLine (string.Join (",", lottery [i].Select (x = > string.Format ("{0,3}", x))));
    }
    return lottery;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
298830_19725880_1_52
298830_2132004_1_22
Title: Split string containing command-line parameters into string[] in C# 
----------------------------------------

public static string [] SplitArguments (string args) {
    char [] parmChars = args.ToCharArray ();
    bool inSingleQuote = false;
    bool inDoubleQuote = false;
    bool escaped = false;
    bool lastSplitted = false;
    bool justSplitted = false;
    bool lastQuoted = false;
    bool justQuoted = false;
    int i, j;
    for (i = 0, j = 0; i < parmChars.Length; i ++, j ++) {
        parmChars [j] = parmChars [i];
        if (! escaped) {
            if (parmChars [i] == '^') {
                escaped = true;
                j --;
            } else if (parmChars [i] == '"' && ! inSingleQuote) {
                inDoubleQuote = ! inDoubleQuote;
                parmChars [j] = '\n';
                justSplitted = true;
                justQuoted = true;
            } else if (parmChars [i] == '\'' && ! inDoubleQuote) {
                inSingleQuote = ! inSingleQuote;
                parmChars [j] = '\n';
                justSplitted = true;
                justQuoted = true;
            } else if (! inSingleQuote && ! inDoubleQuote && parmChars [i] == ' ') {
                parmChars [j] = '\n';
                justSplitted = true;
            }
            if (justSplitted && lastSplitted && (! lastQuoted || ! justQuoted))
                j --;

            lastSplitted = justSplitted;
            justSplitted = false;
            lastQuoted = justQuoted;
            justQuoted = false;
        } else {
            escaped = false;
        }
    }
    if (lastQuoted)
        j --;

    return (new string (parmChars, 0, j)).Split (new [] {'\n'});
}
----------------------------------------

public static string [] SplitArguments (string commandLine) {
    var parmChars = commandLine.ToCharArray ();
    var inSingleQuote = false;
    var inDoubleQuote = false;
    for (var index = 0; index < parmChars.Length; index ++) {
        if (parmChars [index] == '"' && ! inSingleQuote) {
            inDoubleQuote = ! inDoubleQuote;
            parmChars [index] = '\n';
        }
        if (parmChars [index] == '\'' && ! inDoubleQuote) {
            inSingleQuote = ! inSingleQuote;
            parmChars [index] = '\n';
        }
        if (! inSingleQuote && ! inDoubleQuote && parmChars [index] == ' ')
            parmChars [index] = '\n';

    }
    return (new string (parmChars)).Split (new [] {'\n'}, StringSplitOptions.RemoveEmptyEntries);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
298830_19725880_1_52
298830_48008872_1_75
Title: Split string containing command-line parameters into string[] in C# 
----------------------------------------

public static string [] SplitArguments (string args) {
    char [] parmChars = args.ToCharArray ();
    bool inSingleQuote = false;
    bool inDoubleQuote = false;
    bool escaped = false;
    bool lastSplitted = false;
    bool justSplitted = false;
    bool lastQuoted = false;
    bool justQuoted = false;
    int i, j;
    for (i = 0, j = 0; i < parmChars.Length; i ++, j ++) {
        parmChars [j] = parmChars [i];
        if (! escaped) {
            if (parmChars [i] == '^') {
                escaped = true;
                j --;
            } else if (parmChars [i] == '"' && ! inSingleQuote) {
                inDoubleQuote = ! inDoubleQuote;
                parmChars [j] = '\n';
                justSplitted = true;
                justQuoted = true;
            } else if (parmChars [i] == '\'' && ! inDoubleQuote) {
                inSingleQuote = ! inSingleQuote;
                parmChars [j] = '\n';
                justSplitted = true;
                justQuoted = true;
            } else if (! inSingleQuote && ! inDoubleQuote && parmChars [i] == ' ') {
                parmChars [j] = '\n';
                justSplitted = true;
            }
            if (justSplitted && lastSplitted && (! lastQuoted || ! justQuoted))
                j --;

            lastSplitted = justSplitted;
            justSplitted = false;
            lastQuoted = justQuoted;
            justQuoted = false;
        } else {
            escaped = false;
        }
    }
    if (lastQuoted)
        j --;

    return (new string (parmChars, 0, j)).Split (new [] {'\n'});
}
----------------------------------------

public static IEnumerable < String > SplitArguments (string commandLine) {
    Char quoteChar = '"';
    Char escapeChar = '\\';
    Boolean insideQuote = false;
    Boolean insideEscape = false;
    StringBuilder currentArg = new StringBuilder ();
    Int32 currentArgCharCount = 0;
    for (Int32 i = 0; i < commandLine.Length; i ++) {
        Char c = commandLine [i];
        if (c == quoteChar) {
            currentArgCharCount ++;
            if (insideEscape) {
                currentArg.Append (c);
                insideEscape = false;
            } else if (insideQuote) {
                insideQuote = false;
            } else {
                insideQuote = true;
            }
        } else if (c == escapeChar) {
            currentArgCharCount ++;
            if (insideEscape)
                currentArg.Append (escapeChar + escapeChar);

            insideEscape = ! insideEscape;
        } else if (Char.IsWhiteSpace (c)) {
            if (insideQuote) {
                currentArgCharCount ++;
                currentArg.Append (c);
            } else {
                if (currentArgCharCount > 0)
                    yield return currentArg.ToString ();

                currentArgCharCount = 0;
                currentArg.Clear ();
            }
        } else {
            currentArgCharCount ++;
            if (insideEscape) {
                currentArg.Append (escapeChar);
                currentArgCharCount = 0;
                insideEscape = false;
            }
            currentArg.Append (c);
        }
    }
    if (currentArgCharCount > 0)
        yield return currentArg.ToString ();

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
298830_2132004_1_22
298830_48008872_1_75
Title: Split string containing command-line parameters into string[] in C# 
----------------------------------------

public static string [] SplitArguments (string commandLine) {
    var parmChars = commandLine.ToCharArray ();
    var inSingleQuote = false;
    var inDoubleQuote = false;
    for (var index = 0; index < parmChars.Length; index ++) {
        if (parmChars [index] == '"' && ! inSingleQuote) {
            inDoubleQuote = ! inDoubleQuote;
            parmChars [index] = '\n';
        }
        if (parmChars [index] == '\'' && ! inDoubleQuote) {
            inSingleQuote = ! inSingleQuote;
            parmChars [index] = '\n';
        }
        if (! inSingleQuote && ! inDoubleQuote && parmChars [index] == ' ')
            parmChars [index] = '\n';

    }
    return (new string (parmChars)).Split (new [] {'\n'}, StringSplitOptions.RemoveEmptyEntries);
}
----------------------------------------

public static IEnumerable < String > SplitArguments (string commandLine) {
    Char quoteChar = '"';
    Char escapeChar = '\\';
    Boolean insideQuote = false;
    Boolean insideEscape = false;
    StringBuilder currentArg = new StringBuilder ();
    Int32 currentArgCharCount = 0;
    for (Int32 i = 0; i < commandLine.Length; i ++) {
        Char c = commandLine [i];
        if (c == quoteChar) {
            currentArgCharCount ++;
            if (insideEscape) {
                currentArg.Append (c);
                insideEscape = false;
            } else if (insideQuote) {
                insideQuote = false;
            } else {
                insideQuote = true;
            }
        } else if (c == escapeChar) {
            currentArgCharCount ++;
            if (insideEscape)
                currentArg.Append (escapeChar + escapeChar);

            insideEscape = ! insideEscape;
        } else if (Char.IsWhiteSpace (c)) {
            if (insideQuote) {
                currentArgCharCount ++;
                currentArg.Append (c);
            } else {
                if (currentArgCharCount > 0)
                    yield return currentArg.ToString ();

                currentArgCharCount = 0;
                currentArg.Clear ();
            }
        } else {
            currentArgCharCount ++;
            if (insideEscape) {
                currentArg.Append (escapeChar);
                currentArgCharCount = 0;
                insideEscape = false;
            }
            currentArg.Append (c);
        }
    }
    if (currentArgCharCount > 0)
        yield return currentArg.ToString ();

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
298830_24829691_1_18
298830_298990_1_14
Title: Split string containing command-line parameters into string[] in C# 
----------------------------------------

public static IEnumerable < string > SplitCommandLine (string commandLine) {
    bool inQuotes = false;
    bool isEscaping = false;
    return commandLine.Split (c = > {
        if (c == '\\' && ! isEscaping) {
            isEscaping = true;
            return false;
        }
        if (c == '\"' && ! isEscaping)
            inQuotes = ! inQuotes;

        isEscaping = false;
        return ! inQuotes && Char.IsWhiteSpace (c);
    }).Select (arg = > arg.Trim ().TrimMatchingQuotes ('\"').Replace ("\\\"", "\"")).Where (arg = > ! string.IsNullOrEmpty (arg));
}
----------------------------------------

public static IEnumerable < string > SplitCommandLine (string commandLine) {
    bool inQuotes = false;
    return commandLine.Split (c = > {
        if (c == '\"')
            inQuotes = ! inQuotes;

        return ! inQuotes && c == ' ';
    }).Select (arg = > arg.Trim ().TrimMatchingQuotes ('\"')).Where (arg = > ! string.IsNullOrEmpty (arg));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29939219_29939377_22_56
29939219_29939390_1_32
Title: Merge elements in list by property 
----------------------------------------

public static IEnumerable < IGrouping < TKey, TSource > > GroupAdjacent < TSource, TKey > (this IEnumerable < TSource > source, Func < TSource, TKey > keySelector) {
    TKey last = default (TKey);
    bool haveLast = false;
    List < TSource > list = new List < TSource > ();
    foreach (TSource s in source) {
        TKey k = keySelector (s);
        if (haveLast) {
            if (! k.Equals (last)) {
                yield return new GroupOfAdjacent < TSource, TKey > (list, last);
                list = new List < TSource > ();
                list.Add (s);
                last = k;
            } else {
                list.Add (s);
                last = k;
            }
        } else {
            list.Add (s);
            last = k;
            haveLast = true;
        }
    }
    if (haveLast)
        yield return new GroupOfAdjacent < TSource, TKey > (list, last);

}
----------------------------------------

public static IEnumerable < IGrouping < TKey, TElement > > GroupAdjacent < TKey, TElement > (this IEnumerable < TElement > source, Func < TElement, TKey > keySelector) {
    using (var iterator = source.GetEnumerator ())
    {
        if (! iterator.MoveNext ()) {
            yield break;
        } else {
            var comparer = Comparer < TKey >.Default;
            var group = new Grouping < TKey, TElement > (keySelector (iterator.Current));
            group.Add (iterator.Current);
            while (iterator.MoveNext ()) {
                TKey key = keySelector (iterator.Current);
                if (comparer.Compare (key, group.Key) != 0) {
                    yield return group;
                    group = new Grouping < TKey, TElement > (key);
                }
                group.Add (iterator.Current);
            }
            if (group.Any ())
                yield return group;

        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29951608_29952130_13_48
29951608_29952848_1_36
Title: Custom required attribute with C# & Web API and using private access modifier with validation context 
----------------------------------------

protected override ValidationResult IsValid (object value, ValidationContext validationContext) {
    var propertyTestedInfo = validationContext.ObjectType.GetProperty (this._DependentProperty, Flags);
    if (propertyTestedInfo == null)
        return new ValidationResult (string.Format ("{0} needs to be exist in this object.", this._DependentProperty));

    var dependendValue = propertyTestedInfo.GetValue (validationContext.ObjectInstance, null);
    if (dependendValue == null)
        return new ValidationResult (string.Format ("{0} needs to be populated.", this._DependentProperty));

    if (dependendValue.Equals (this._TargetValue)) {
        var validatedProperty = validationContext.ObjectType.GetProperty (validationContext.MemberName, Flags);
        if (validatedProperty != null) {
            AssertHasThisAttribute (validatedProperty);
            var validatedPropertyValue = validatedProperty.GetValue (validationContext.ObjectInstance, null);
            if (validatedPropertyValue != null)
                return ValidationResult.Success;

        }
        return new ValidationResult (string.Empty);
    }
    return ValidationResult.Success;
}
----------------------------------------

protected override ValidationResult IsValid (object value, ValidationContext validationContext) {
    var propertyTestedInfo = validationContext.ObjectType.GetProperty (this._DependentProperty);
    if (propertyTestedInfo == null) {
        return new ValidationResult (string.Format ("{0} needs to be exist in this object.", this._DependentProperty));
    }
    var dependendValue = propertyTestedInfo.GetValue (validationContext.ObjectInstance, null);
    if (dependendValue == null) {
        return new ValidationResult (string.Format ("{0} needs to be populated.", this._DependentProperty));
    }
    if (dependendValue.Equals (this._TargetValue)) {
        var fieldValue = validationContext.ObjectType.GetProperty (validationContext.MemberName).GetValue (validationContext.ObjectInstance, null);
        if (fieldValue != null) {
            return ValidationResult.Success;
        } else {
            return new ValidationResult (string.Format ("{0} cannot be null", validationContext.MemberName));
        }
    } else {
        return ValidationResult.Success;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
29957786_29958683_14_34
29957786_29958922_3_19
Title: Custom JSON string output using Newtonsoft 
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    dynamic dt = (DataTable) value;
    dynamic count = dt.Columns.Count - 1;
    writer.WriteStartObject ();
    writer.WritePropertyName ("data");
    writer.WriteStartArray ();
    foreach (DataRow dr in dt.Rows) {
        writer.WriteStartArray ();
        for (int x = 0; x <= count; x ++) {
            serializer.Serialize (writer, dr [x]);
        }
        writer.WriteEndArray ();
    }
    writer.WriteEndArray ();
    writer.WriteEndObject ();
}
----------------------------------------

public override void WriteJson (JsonWriter w, object v, JsonSerializer s) {
    w.WriteStartObject ();
    w.WritePropertyName ("data");
    w.WriteStartArray ();
    foreach (DataRow r in (v as DataTable).Rows) {
        w.WriteStartArray ();
        foreach (var c in r.ItemArray) {
            w.WriteValue (c);
        }
        w.WriteEndArray ();
    }
    w.WriteEndArray ();
    w.WriteEndObject ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3002656_3004037_11_27
3002656_3004940_72_85
Title: A custom auto-sizing WPF Panel class 
----------------------------------------

protected override Size ArrangeOverride (Size finalSize) {
    double optimumHeight = finalSize.Height / Children.Count;
    var smallElements = Children.Cast < UIElement > ().Where (c = > c.DesiredSize.Height < optimumHeight);
    double leftOverHeight = smallElements.Sum (c = > optimumHeight - c.DesiredSize.Height);
    var extraSpaceForBigElements = leftOverHeight / (Children.Count - smallElements.Count ());
    double offset = 0.0;
    foreach (UIElement child in Children) {
        double height = child.DesiredSize.Height < optimumHeight ? child.DesiredSize.Height : optimumHeight + extraSpaceForBigElements;
        child.Arrange (new Rect (0, offset, finalSize.Width, height));
        offset += height;
    }
    return finalSize;
}
----------------------------------------

protected override System.Windows.Size ArrangeOverride (System.Windows.Size finalSize) {
    double offset = 0.0;
    foreach (UIElement child in Children) {
        double height = GetRequiredHeight (child);
        double value = (double.IsNaN (height) ? m_NormalSpace : Math.Min (height, m_NormalSpace)) + m_ExtraSpace;
        child.Arrange (new Rect (0, offset, finalSize.Width, value));
        offset += value;
    }
    return finalSize;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3007608_3007633_1_17
3007608_38414323_1_14
Title: Resuming execution of code after exception is thrown and caught 
----------------------------------------

static void Main (string [] args) {
    try {
        new Test ().s ();
    }
    catch (ArgumentException x) {
        Console.WriteLine ("ArgumentException caught!");
    }
    catch (Exception ex) {
        Console.WriteLine ("Exception caught!");
    }
    Console.WriteLine ("I am some code that's running after the exception!");
}
----------------------------------------

public static void Main () {
    for (int j = 0; j <= 100000; j ++) {
        try {
        }
        catch {
            System.Threading.Thread.Sleep (1000);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30080_1593336_1_41
30080_30109_109_134
Title: How to know if a line intersects a plane in C#? 
----------------------------------------

public static Intersection IntersectionOf (Line line1, Line line2) {
    if (line1.X1 == line1.X2 && line1.Y1 == line1.Y2 || line2.X1 == line2.X2 && line2.Y1 == line2.Y2)
        return Intersection.None;

    if (line1.X1 == line2.X1 && line1.Y1 == line2.Y1 || line1.X2 == line2.X1 && line1.Y2 == line2.Y1)
        return Intersection.Intersection;

    if (line1.X1 == line2.X2 && line1.Y1 == line2.Y2 || line1.X2 == line2.X2 && line1.Y2 == line2.Y2)
        return Intersection.Intersection;

    line1.X2 -= line1.X1;
    line1.Y2 -= line1.Y1;
    line2.X1 -= line1.X1;
    line2.Y1 -= line1.Y1;
    line2.X2 -= line1.X1;
    line2.Y2 -= line1.Y1;
    double distAB = Math.Sqrt (line1.X2 * line1.X2 + line1.Y2 * line1.Y2);
    double theCos = line1.X2 / distAB;
    double theSin = line1.Y2 / distAB;
    double newX = line2.X1 * theCos + line2.Y1 * theSin;
    line2.Y1 = line2.Y1 * theCos - line2.X1 * theSin;
    line2.X1 = newX;
    newX = line2.X2 * theCos + line2.Y2 * theSin;
    line2.Y2 = line2.Y2 * theCos - line2.X2 * theSin;
    line2.X2 = newX;
    if (line2.Y1 < 0 && line2.Y2 < 0 || line2.Y1 >= 0 && line2.Y2 >= 0)
        return Intersection.None;

    double posAB = line2.X2 + (line2.X1 - line2.X2) * line2.Y2 / (line2.Y2 - line2.Y1);
    if (posAB < 0 || posAB > distAB)
        return Intersection.None;

    return Intersection.Intersection;
}
----------------------------------------

public static Intersection IntersectionOf (Line line, Polygon polygon) {
    if (polygon.Length == 0) {
        return Intersection.None;
    }
    if (polygon.Length == 1) {
        return IntersectionOf (polygon [0], line);
    }
    bool tangent = false;
    for (int index = 0; index < polygon.Length; index ++) {
        int index2 = (index + 1) % polygon.Length;
        Intersection intersection = IntersectionOf (line, new Line (polygon [index], polygon [index2]));
        if (intersection == Intersection.Intersection) {
            return intersection;
        }
        if (intersection == Intersection.Tangent) {
            tangent = true;
        }
    }
    return tangent ? Intersection.Tangent : IntersectionOf (line.P1, polygon);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30080_1593336_1_41
30080_30109_136_191
Title: How to know if a line intersects a plane in C#? 
----------------------------------------

public static Intersection IntersectionOf (Line line1, Line line2) {
    if (line1.X1 == line1.X2 && line1.Y1 == line1.Y2 || line2.X1 == line2.X2 && line2.Y1 == line2.Y2)
        return Intersection.None;

    if (line1.X1 == line2.X1 && line1.Y1 == line2.Y1 || line1.X2 == line2.X1 && line1.Y2 == line2.Y1)
        return Intersection.Intersection;

    if (line1.X1 == line2.X2 && line1.Y1 == line2.Y2 || line1.X2 == line2.X2 && line1.Y2 == line2.Y2)
        return Intersection.Intersection;

    line1.X2 -= line1.X1;
    line1.Y2 -= line1.Y1;
    line2.X1 -= line1.X1;
    line2.Y1 -= line1.Y1;
    line2.X2 -= line1.X1;
    line2.Y2 -= line1.Y1;
    double distAB = Math.Sqrt (line1.X2 * line1.X2 + line1.Y2 * line1.Y2);
    double theCos = line1.X2 / distAB;
    double theSin = line1.Y2 / distAB;
    double newX = line2.X1 * theCos + line2.Y1 * theSin;
    line2.Y1 = line2.Y1 * theCos - line2.X1 * theSin;
    line2.X1 = newX;
    newX = line2.X2 * theCos + line2.Y2 * theSin;
    line2.Y2 = line2.Y2 * theCos - line2.X2 * theSin;
    line2.X2 = newX;
    if (line2.Y1 < 0 && line2.Y2 < 0 || line2.Y1 >= 0 && line2.Y2 >= 0)
        return Intersection.None;

    double posAB = line2.X2 + (line2.X1 - line2.X2) * line2.Y2 / (line2.Y2 - line2.Y1);
    if (posAB < 0 || posAB > distAB)
        return Intersection.None;

    return Intersection.Intersection;
}
----------------------------------------

public static Intersection IntersectionOf (PointF point, Polygon polygon) {
    switch (polygon.Length) {
        case 0 :
            return Intersection.None;
        case 1 :
            if (polygon [0].X == point.X && polygon [0].Y == point.Y) {
                return Intersection.Tangent;
            } else {
                return Intersection.None;
            }
        case 2 :
            return IntersectionOf (point, new Line (polygon [0], polygon [1]));
    }
    int counter = 0;
    int i;
    PointF p1;
    int n = polygon.Length;
    p1 = polygon [0];
    if (point == p1) {
        return Intersection.Tangent;
    }
    for (i = 1; i <= n; i ++) {
        PointF p2 = polygon [i % n];
        if (point == p2) {
            return Intersection.Tangent;
        }
        if (point.Y > Math.Min (p1.Y, p2.Y)) {
            if (point.Y <= Math.Max (p1.Y, p2.Y)) {
                if (point.X <= Math.Max (p1.X, p2.X)) {
                    if (p1.Y != p2.Y) {
                        double xinters = (point.Y - p1.Y) * (p2.X - p1.X) / (p2.Y - p1.Y) + p1.X;
                        if (p1.X == p2.X || point.X <= xinters)
                            counter ++;

                    }
                }
            }
        }
        p1 = p2;
    }
    return (counter % 2 == 1) ? Intersection.Containment : Intersection.None;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30080_1593336_1_41
30080_30109_193_221
Title: How to know if a line intersects a plane in C#? 
----------------------------------------

public static Intersection IntersectionOf (Line line1, Line line2) {
    if (line1.X1 == line1.X2 && line1.Y1 == line1.Y2 || line2.X1 == line2.X2 && line2.Y1 == line2.Y2)
        return Intersection.None;

    if (line1.X1 == line2.X1 && line1.Y1 == line2.Y1 || line1.X2 == line2.X1 && line1.Y2 == line2.Y1)
        return Intersection.Intersection;

    if (line1.X1 == line2.X2 && line1.Y1 == line2.Y2 || line1.X2 == line2.X2 && line1.Y2 == line2.Y2)
        return Intersection.Intersection;

    line1.X2 -= line1.X1;
    line1.Y2 -= line1.Y1;
    line2.X1 -= line1.X1;
    line2.Y1 -= line1.Y1;
    line2.X2 -= line1.X1;
    line2.Y2 -= line1.Y1;
    double distAB = Math.Sqrt (line1.X2 * line1.X2 + line1.Y2 * line1.Y2);
    double theCos = line1.X2 / distAB;
    double theSin = line1.Y2 / distAB;
    double newX = line2.X1 * theCos + line2.Y1 * theSin;
    line2.Y1 = line2.Y1 * theCos - line2.X1 * theSin;
    line2.X1 = newX;
    newX = line2.X2 * theCos + line2.Y2 * theSin;
    line2.Y2 = line2.Y2 * theCos - line2.X2 * theSin;
    line2.X2 = newX;
    if (line2.Y1 < 0 && line2.Y2 < 0 || line2.Y1 >= 0 && line2.Y2 >= 0)
        return Intersection.None;

    double posAB = line2.X2 + (line2.X1 - line2.X2) * line2.Y2 / (line2.Y2 - line2.Y1);
    if (posAB < 0 || posAB > distAB)
        return Intersection.None;

    return Intersection.Intersection;
}
----------------------------------------

public static Intersection IntersectionOf (PointF point, Line line) {
    float bottomY = Math.Min (line.Y1, line.Y2);
    float topY = Math.Max (line.Y1, line.Y2);
    bool heightIsRight = point.Y >= bottomY && point.Y <= topY;
    if (line.X1 == line.X2) {
        if (point.X == line.X1 && heightIsRight) {
            return Intersection.Tangent;
        } else {
            return Intersection.None;
        }
    }
    float slope = (line.X2 - line.X1) / (line.Y2 - line.Y1);
    bool onLine = (line.Y1 - point.Y) == (slope * (line.X1 - point.X));
    if (onLine && heightIsRight) {
        return Intersection.Tangent;
    } else {
        return Intersection.None;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30080_30109_109_134
30080_30109_136_191
Title: How to know if a line intersects a plane in C#? 
----------------------------------------

public static Intersection IntersectionOf (Line line, Polygon polygon) {
    if (polygon.Length == 0) {
        return Intersection.None;
    }
    if (polygon.Length == 1) {
        return IntersectionOf (polygon [0], line);
    }
    bool tangent = false;
    for (int index = 0; index < polygon.Length; index ++) {
        int index2 = (index + 1) % polygon.Length;
        Intersection intersection = IntersectionOf (line, new Line (polygon [index], polygon [index2]));
        if (intersection == Intersection.Intersection) {
            return intersection;
        }
        if (intersection == Intersection.Tangent) {
            tangent = true;
        }
    }
    return tangent ? Intersection.Tangent : IntersectionOf (line.P1, polygon);
}
----------------------------------------

public static Intersection IntersectionOf (PointF point, Polygon polygon) {
    switch (polygon.Length) {
        case 0 :
            return Intersection.None;
        case 1 :
            if (polygon [0].X == point.X && polygon [0].Y == point.Y) {
                return Intersection.Tangent;
            } else {
                return Intersection.None;
            }
        case 2 :
            return IntersectionOf (point, new Line (polygon [0], polygon [1]));
    }
    int counter = 0;
    int i;
    PointF p1;
    int n = polygon.Length;
    p1 = polygon [0];
    if (point == p1) {
        return Intersection.Tangent;
    }
    for (i = 1; i <= n; i ++) {
        PointF p2 = polygon [i % n];
        if (point == p2) {
            return Intersection.Tangent;
        }
        if (point.Y > Math.Min (p1.Y, p2.Y)) {
            if (point.Y <= Math.Max (p1.Y, p2.Y)) {
                if (point.X <= Math.Max (p1.X, p2.X)) {
                    if (p1.Y != p2.Y) {
                        double xinters = (point.Y - p1.Y) * (p2.X - p1.X) / (p2.Y - p1.Y) + p1.X;
                        if (p1.X == p2.X || point.X <= xinters)
                            counter ++;

                    }
                }
            }
        }
        p1 = p2;
    }
    return (counter % 2 == 1) ? Intersection.Containment : Intersection.None;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30080_30109_109_134
30080_30109_193_221
Title: How to know if a line intersects a plane in C#? 
----------------------------------------

public static Intersection IntersectionOf (Line line, Polygon polygon) {
    if (polygon.Length == 0) {
        return Intersection.None;
    }
    if (polygon.Length == 1) {
        return IntersectionOf (polygon [0], line);
    }
    bool tangent = false;
    for (int index = 0; index < polygon.Length; index ++) {
        int index2 = (index + 1) % polygon.Length;
        Intersection intersection = IntersectionOf (line, new Line (polygon [index], polygon [index2]));
        if (intersection == Intersection.Intersection) {
            return intersection;
        }
        if (intersection == Intersection.Tangent) {
            tangent = true;
        }
    }
    return tangent ? Intersection.Tangent : IntersectionOf (line.P1, polygon);
}
----------------------------------------

public static Intersection IntersectionOf (PointF point, Line line) {
    float bottomY = Math.Min (line.Y1, line.Y2);
    float topY = Math.Max (line.Y1, line.Y2);
    bool heightIsRight = point.Y >= bottomY && point.Y <= topY;
    if (line.X1 == line.X2) {
        if (point.X == line.X1 && heightIsRight) {
            return Intersection.Tangent;
        } else {
            return Intersection.None;
        }
    }
    float slope = (line.X2 - line.X1) / (line.Y2 - line.Y1);
    bool onLine = (line.Y1 - point.Y) == (slope * (line.X1 - point.X));
    if (onLine && heightIsRight) {
        return Intersection.Tangent;
    } else {
        return Intersection.None;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30080_30109_136_191
30080_30109_193_221
Title: How to know if a line intersects a plane in C#? 
----------------------------------------

public static Intersection IntersectionOf (PointF point, Polygon polygon) {
    switch (polygon.Length) {
        case 0 :
            return Intersection.None;
        case 1 :
            if (polygon [0].X == point.X && polygon [0].Y == point.Y) {
                return Intersection.Tangent;
            } else {
                return Intersection.None;
            }
        case 2 :
            return IntersectionOf (point, new Line (polygon [0], polygon [1]));
    }
    int counter = 0;
    int i;
    PointF p1;
    int n = polygon.Length;
    p1 = polygon [0];
    if (point == p1) {
        return Intersection.Tangent;
    }
    for (i = 1; i <= n; i ++) {
        PointF p2 = polygon [i % n];
        if (point == p2) {
            return Intersection.Tangent;
        }
        if (point.Y > Math.Min (p1.Y, p2.Y)) {
            if (point.Y <= Math.Max (p1.Y, p2.Y)) {
                if (point.X <= Math.Max (p1.X, p2.X)) {
                    if (p1.Y != p2.Y) {
                        double xinters = (point.Y - p1.Y) * (p2.X - p1.X) / (p2.Y - p1.Y) + p1.X;
                        if (p1.X == p2.X || point.X <= xinters)
                            counter ++;

                    }
                }
            }
        }
        p1 = p2;
    }
    return (counter % 2 == 1) ? Intersection.Containment : Intersection.None;
}
----------------------------------------

public static Intersection IntersectionOf (PointF point, Line line) {
    float bottomY = Math.Min (line.Y1, line.Y2);
    float topY = Math.Max (line.Y1, line.Y2);
    bool heightIsRight = point.Y >= bottomY && point.Y <= topY;
    if (line.X1 == line.X2) {
        if (point.X == line.X1 && heightIsRight) {
            return Intersection.Tangent;
        } else {
            return Intersection.None;
        }
    }
    float slope = (line.X2 - line.X1) / (line.Y2 - line.Y1);
    bool onLine = (line.Y1 - point.Y) == (slope * (line.X1 - point.X));
    if (onLine && heightIsRight) {
        return Intersection.Tangent;
    } else {
        return Intersection.None;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30124861_30125521_30_59
30124861_33883871_31_41
Title: ultrasonic sensor raspberry pi 2 c# .net 
----------------------------------------

public double GetDistance () {
    ManualResetEvent mre = new ManualResetEvent (false);
    mre.WaitOne (500);
    Stopwatch pulseLength = new Stopwatch ();
    this.TriggerPin.Write (GpioPinValue.High);
    mre.WaitOne (TimeSpan.FromMilliseconds (0.01));
    this.TriggerPin.Write (GpioPinValue.Low);
    while (this.EchoPin.Read () == GpioPinValue.Low) {
    }
    pulseLength.Start ();
    while (this.EchoPin.Read () == GpioPinValue.High) {
    }
    pulseLength.Stop ();
    TimeSpan timeBetween = pulseLength.Elapsed;
    Debug.WriteLine (timeBetween.ToString ());
    double distance = timeBetween.TotalSeconds * 17000;
    return distance;
}
----------------------------------------

public double GetDistance () {
    ManualResetEvent mre = new ManualResetEvent (false);
    mre.WaitOne (500);
    timeWatcher.Reset ();
    this.triggerPin.Write (GpioPinValue.High);
    mre.WaitOne (TimeSpan.FromMilliseconds (0.01));
    this.triggerPin.Write (GpioPinValue.Low);
    return this.PulseIn (echoPin, GpioPinValue.High);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30135542_30135612_28_38
30135542_30135719_56_69
Title: Calling specific namespace and class using Strings 
----------------------------------------

static void Main (string [] args) {
    Type type = Type.GetType ("NamespaceA.ClassAB");
    object instance = Activator.CreateInstance (type);
    type.GetMethod ("MyMethod").Invoke (instance, null);
    type.GetMethod ("MyStaticMethod").Invoke (null, null);
    Console.WriteLine ();
    Console.WriteLine ("Press any key to continue...");
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    DoSomethingUseful methodA = GetDelegate ("NamespaceA", "ClassAB", "MyMethod");
    DoSomethingUseful methodB = GetDelegate ("NamespaceA", "ClassAB", "MyStaticMethod");
    methodA ();
    methodB ();
    Console.WriteLine ();
    Console.WriteLine ("Press any key to continue...");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3014253_33555978_15_27
3014253_5631008_20_32
Title: C# Winforms: PropertyGrid not updated when item added to Collection 
----------------------------------------

protected override CollectionForm CreateCollectionForm () {
    CollectionForm cf = base.CreateCollectionForm ();
    cf.FormClosing += delegate (object sender, FormClosingEventArgs e) {
        ownerGrid.Refresh ();
        if (CollectionEditorClosed != null)
            CollectionEditorClosed (this, value);

    };
    return cf;
}
----------------------------------------

protected override CollectionForm CreateCollectionForm () {
    CollectionForm collectionForm = base.CreateCollectionForm ();
    Form frm = collectionForm as Form;
    if (frm != null) {
        Button button = frm.AcceptButton as Button;
        button.Click += new EventHandler (OnCollectionChanged);
    }
    return collectionForm;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30164019_30164383_1_18
30164019_30164494_19_29
Title: Shuffling 2D array of cards 
----------------------------------------

public static void Shuffle < T > (Random random, T [,] array) {
    int lengthRow = array.GetLength (1);
    for (int i = array.Length - 1; i > 0; i --) {
        int i0 = i / lengthRow;
        int i1 = i % lengthRow;
        int j = random.Next (i + 1);
        int j0 = j / lengthRow;
        int j1 = j % lengthRow;
        T temp = array [i0, i1];
        array [i0, i1] = array [j0, j1];
        array [j0, j1] = temp;
    }
}
----------------------------------------

public void Shuffle < T > (IList < T > array) {
    for (int n = array.Count; n > 1;) {
        int k = _rng.Next (n);
        -- n;
        T temp = array [n];
        array [n] = array [k];
        array [k] = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30164019_30164383_1_18
30164019_30164494_33_51
Title: Shuffling 2D array of cards 
----------------------------------------

public static void Shuffle < T > (Random random, T [,] array) {
    int lengthRow = array.GetLength (1);
    for (int i = array.Length - 1; i > 0; i --) {
        int i0 = i / lengthRow;
        int i1 = i % lengthRow;
        int j = random.Next (i + 1);
        int j0 = j / lengthRow;
        int j1 = j % lengthRow;
        T temp = array [i0, i1];
        array [i0, i1] = array [j0, j1];
        array [j0, j1] = temp;
    }
}
----------------------------------------

public void Shuffle < T > (T [,] array) {
    int w = array.GetUpperBound (1) + 1;
    for (int n = array.Length; n > 1;) {
        int k = _rng.Next (n);
        -- n;
        int dr = n / w;
        int dc = n % w;
        int sr = k / w;
        int sc = k % w;
        T temp = array [dr, dc];
        array [dr, dc] = array [sr, sc];
        array [sr, sc] = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30164019_30164494_19_29
30164019_30164494_33_51
Title: Shuffling 2D array of cards 
----------------------------------------

public void Shuffle < T > (IList < T > array) {
    for (int n = array.Count; n > 1;) {
        int k = _rng.Next (n);
        -- n;
        T temp = array [n];
        array [n] = array [k];
        array [k] = temp;
    }
}
----------------------------------------

public void Shuffle < T > (T [,] array) {
    int w = array.GetUpperBound (1) + 1;
    for (int n = array.Length; n > 1;) {
        int k = _rng.Next (n);
        -- n;
        int dr = n / w;
        int dc = n % w;
        int sr = k / w;
        int sc = k % w;
        T temp = array [dr, dc];
        array [dr, dc] = array [sr, sc];
        array [sr, sc] = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30171878_30188071_1_32
30171878_30188950_1_25
Title: EF - Foreign Key Reinserted if Entity Object is Used 
----------------------------------------

public static void Main (string [] args) {
    using (var db = new BloggingContext ())
    {
        for (int i = 0; i < 10; ++ i) {
            var blog = new Blog () {Name = i.ToString (), Description = "Desc", Url = String.Format ("http://{0}", i)};
            db.Blogs.Add (blog);
            db.SaveChanges ();
        }
    } using (var db = new BloggingContext ())
    {
        for (int i = 0; i < 10; ++ i) {
            var fkBlog = GetBlog ();
            db.Context.Attach (fkBlog);
            var post = new Post () {Blog = fkBlog, Content = String.Format ("Blog Content {0}", i), Title = String.Format ("Blog Title {0}", i)};
            db.Posts.Add (post);
            db.SaveChanges ();
        }
    }}
----------------------------------------

public static void Main (string [] args) {
    using (var db = new BloggingContext ())
    {
        for (int i = 0; i < 10; ++ i) {
            var blog = new Blog () {};
            db.Blogs.Add (blog);
            db.SaveChanges ();
        }
        for (int i = 0; i < 10; ++ i) {
            var fkBlog = GetBlog (db);
            var post = new Post () {};
            db.Posts.Add (post);
            db.SaveChanges ();
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30179932_30180224_1_13
30179932_30180233_1_12
Title: Showing the intersection between two strings 
----------------------------------------

public static string intersection2 (string x1, string x2) {
    string [] string1 = x1.Split (' ');
    string [] string2 = x2.Split (' ');
    var m = string1.Distinct ();
    var n = string2.Distinct ();
    var results = m.Intersect (n, StringComparer.OrdinalIgnoreCase);
    var test = " ";
    foreach (var k in results)
        test += k + " ";

    return test;
}
----------------------------------------

public static string intersection2 (string x1, string x2) {
    string [] string1 = x1.Split (' ');
    string [] string2 = x2.Split (' ');
    string [] m = string1.Distinct ().ToArray ();
    string [] n = string2.Distinct ().ToArray ();
    string Test;
    var results = m.Intersect (n, StringComparer.OrdinalIgnoreCase);
    Test = String.Join (" ", results);
    return Test;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30185871_30186020_1_38
30185871_30186447_1_34
Title: C# - Effeciently writing code 
----------------------------------------

private void SetControlVisibility () {
    if (DropDownList1.SelectedItem != null) {
        switch (DropDownList1.SelectedItem.Text) {
            case "GetAssetsBasicById" : case "GetAssetDetailsByIds" :
                Label2.Text = "(Please enter asset ids for e.g. 1,2)";
                chkExcludeMAPFunds.Visible = false;
                chkPublishXML.Visible = true;
                break;
            case "GetAssetsBasicBySedols" : case "GetAssetDetailsBySedols" :
                Label2.Text = "(Please enter sedols for e.g. B1YW440,0003496)";
                chkExcludeMAPFunds.Visible = false;
                chkPublishXML.Visible = true;
                break;
            case "GetInvestmentReportByIds" :
                Label2.Text = "(Please enter asset ids for e.g. 1:100)";
                chkExcludeMAPFunds.Visible = true;
                chkPublishXML.Visible = false;
                break;
            case "GetInvestmentReportBySedol" :
                Label2.Text = "(Please enter sedols for e.g. B1YW440:100)";
                chkExcludeMAPFunds.Visible = true;
                chkPublishXML.Visible = false;
                break;
            default :
                throw new NotSupportedException ();
        }
    }
}
----------------------------------------

private void SetControlVisibility () {
    string resultText;
    bool b = false;
    switch (DropDownList1.SelectedItem.Text) {
        case "GetAssetsBasicById" : case "GetAssetDetailsByIds" :
            b = true;
            resultText = "(Please enter asset ids for e.g. 1,2)";
            break;
        case "GetAssetsBasicBySedols" : case "GetAssetDetailsBySedols" :
            b = true;
            resultText = "(Please enter sedols for e.g. B1YW440,0003496)";
            break;
        case "GetInvestmentReportByIds" :
            resultText = "(Please enter asset ids for e.g. 1:100)";
            break;
        case "GetInvestmentReportBySedol" :
            resultText = "(Please enter sedols for e.g. B1YW440:100)";
            break;
        default :
            return;
    }
    chkExcludeMAPFunds.Visible = ! b;
    chkPublishXML.Visible = b;
    Label2.Text = resultText;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30191667_30191809_1_12
30191667_30191834_1_17
Title: How to fill string with repeating it characters by text length? 
----------------------------------------

private string XorText (string text, string key) {
    string newText = "";
    for (int i = 0; i < text.Length; i ++) {
        int charValue = Convert.ToInt32 (text [i]);
        int keyValue = Convert.ToInt32 (key [i % key.Length]);
        charValue ^= keyValue % 33;
        newText += char.ConvertFromUtf32 (charValue);
    }
    return newText;
}
----------------------------------------

private string XorText (string text, string key) {
    if (string.IsNullOrEmpty (text))
        throw new ArgumentNullException ("text");

    if (string.IsNullOrEmpty (key))
        throw new ArgumentNullException ("key");

    StringBuilder sb = new StringBuilder ();
    int textLength = text.Length;
    int keyLength = key.Length;
    for (int i = 0; i < textLength; i ++) {
        sb.Append ((char) (text [i] ^ key [i % keyLength]));
    }
    return sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30191770_30192076_1_18
30191770_30192182_1_18
Title: C# generic method can't create List<T> 
----------------------------------------

private static List < T > GetList < T > (DataTable table) where T : class, MyInterface {
    List < T > myList = new List < T > ();
    if (typeof (T) == typeof (B)) {
        myList.Add (new B () as T);
    } else {
        myList.Add (new A () as T);
    }
    return myList;
}
----------------------------------------

static List < T > GetList < T > (DataTable table) where T : class, IMyInterface {
    List < T > myList = new List < T > ();
    IMyInterface obj;
    if (typeof (T) == typeof (B)) {
        obj = new B ();
    } else {
        obj = new A ();
    }
    myList.Add ((T) obj);
    return myList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3019239_20690167_14_40
3019239_28336768_3_19
Title: c# : simulate memory leaks 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("    Total Memory To Eat Up in Megs: " + args [0]);
    Console.WriteLine ("Millisecs Pause Between Increments: " + args [1]);
    int memoryTotalInMegaBytes = Convert.ToInt32 (args [0]);
    int secondsToPause = Convert.ToInt32 (args [1]);
    Console.WriteLine ("Memory Usage:" + Convert.ToString (GC.GetTotalMemory (false)));
    long runningTotal = GC.GetTotalMemory (false);
    long endingMemoryLimit = Convert.ToInt64 (memoryTotalInMegaBytes) * 1000 * 1000;
    List < XmlNode > memList = new List < XmlNode > ();
    while (runningTotal <= endingMemoryLimit) {
        XmlDocument doc = new XmlDocument ();
        for (int i = 0; i < 1000000; i ++) {
            XmlNode x = doc.CreateNode (XmlNodeType.Element, "hello", "");
            memList.Add (x);
        }
        runningTotal = GC.GetTotalMemory (false);
        Console.WriteLine ("Memory Usage:" + Convert.ToString (GC.GetTotalMemory (false)));
        Thread.Sleep (secondsToPause);
    }
    Console.ReadLine ();
}
----------------------------------------

private static void Main (string [] args) {
    try {
        var limit = 9400;
        while (true) {
            var thread = new Thread (() = > IncreaseMemory (limit));
            thread.Start ();
        }
    }
    catch (Exception) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30212327_30212643_1_19
30212327_30213761_13_50
Title: Replace xml value with c# 
----------------------------------------

static void Main (string [] args) {
    try {
        string rootXml = "<Root><Connection ConnectionID=\"106359\" From_PhraseID=\"1\" To_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\"><![CDATA[</Connection><Connection ConnectionID=\"106360\" From_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\" To_PhraseID=\"tg0if2-jc8-k6i-spg-2tof46ftr_nl\"><![CDATA[</Connection><Connection ConnectionID=\"106361\" From_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\" To_PhraseID=\"4trq50-2h0-kqc-9ku-bm8f4cte7_nl\"><![CDATA[</Connection><Connection ConnectionID=\"106362\" From_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\" To_PhraseID=\"1fpspg-tmq-7ln-a9b-3mr3962ca_nl\"><![CDATA[</Connection><Connection ConnectionID=\"106358\" From_PhraseID=\"tg0if2-jc8-k6i-spg-2tof46ftr_nl\" To_PhraseID=\"jmrgi1-dst-kt6-roo-lrahuk6tj_nl\"><![CDATA[</Connection><Connection ConnectionID=\"106373\" From_PhraseID=\"4trq50-2h0-kqc-9ku-bm8f4cte7_nl\" To_PhraseID=\"97bngg-ggb-k8l-ggf-qnre46ckq_nl\"><![CDATA[</Connection><Connection ConnectionID=\"106376\" From_PhraseID=\"1fpspg-tmq-7ln-a9b-3mr3962ca_nl\" To_PhraseID=\"bqgccm-55n-iur-061-27obhegve_nl\"><![CDATA[</Connection></Root>";
        XElement root = XElement.Load ((new StringReader (rootXml)), LoadOptions.None);
        root.Descendants ().Where (i = > i.Attribute ("To_PhraseID").Value == "tg1c8p-jgg-dbh-b4l-hir5cpla7_nl").ToList ().ForEach (i = > i.SetAttributeValue ("To_PhraseID", "MYNEWID"));
        var x = root.ToString ();
    }
    catch (Exception ex) {
    }
}
----------------------------------------

static void Main (string [] args) {
    string input = "<Connection ConnectionID=\"106359\" From_PhraseID=\"1\" To_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\" />" + "<Connection ConnectionID=\"106360\" From_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\" To_PhraseID=\"tg0if2-jc8-k6i-spg-2tof46ftr_nl\" />" + "<Connection ConnectionID=\"106361\" From_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\" To_PhraseID=\"4trq50-2h0-kqc-9ku-bm8f4cte7_nl\" />" + "<Connection ConnectionID=\"106362\" From_PhraseID=\"tg1c8p-jgg-dbh-b4l-hir5cpla7_nl\" To_PhraseID=\"1fpspg-tmq-7ln-a9b-3mr3962ca_nl\" />" + "<Connection ConnectionID=\"106358\" From_PhraseID=\"tg0if2-jc8-k6i-spg-2tof46ftr_nl\" To_PhraseID=\"jmrgi1-dst-kt6-roo-lrahuk6tj_nl\" />" + "<Connection ConnectionID=\"106373\" From_PhraseID=\"4trq50-2h0-kqc-9ku-bm8f4cte7_nl\" To_PhraseID=\"97bngg-ggb-k8l-ggf-qnre46ckq_nl\" />" + "<Connection ConnectionID=\"106376\" From_PhraseID=\"1fpspg-tmq-7ln-a9b-3mr3962ca_nl\" To_PhraseID=\"bqgccm-55n-iur-061-27obhegve_nl\" />";
    input = "<Root>" + input + "</Root>";
    StringReader reader = new StringReader (input);
    XDocument doc = XDocument.Load (reader);
    int value = 1;
    Dictionary < string, int > dict = new Dictionary < string, int > ();
    foreach (XElement connection in doc.Root.Elements ("Connection")) {
        string fromAttr = connection.Attribute ("From_PhraseID").Value;
        if (! dict.ContainsKey (fromAttr)) {
            dict.Add (fromAttr, value ++);
        }
        string toAttr = connection.Attribute ("To_PhraseID").Value;
        if (! dict.ContainsKey (toAttr)) {
            dict.Add (toAttr, value ++);
        }
    }
    foreach (XElement connection in doc.Root.Elements ("Connection")) {
        string fromAttr = connection.Attribute ("From_PhraseID").Value;
        connection.Attribute ("From_PhraseID").Value = dict [fromAttr].ToString ();
        string toAttr = connection.Attribute ("To_PhraseID").Value;
        connection.Attribute ("To_PhraseID").Value = dict [toAttr].ToString ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3021298_3021325_1_14
3021298_3021335_1_14
Title: If no error contiune.. if error occurse do else 
----------------------------------------

private void test_click (object sender, EventArgs e) {
    MessageBox.Show ("hi");
    try {
        MessageBox.Show ("worked ok");
    }
    catch (Exception) {
        MessageBox.Show ("DID NOT WORK OK");
    }
}
----------------------------------------

private void test_click (object sender, EventArgs e) {
    try {
        MessageBox.Show ("hi");
        MessageBox.Show ("worked ok");
    }
    catch (WheteverExceptionType ex) {
        MessageBox.Show ("DID NOT WORK OK");
        MessageBox.Show (ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30236585_30236720_1_16
30236585_30236725_3_90
Title: Sort array list by numbers then by letters 
----------------------------------------

public int Compare (string x, string y) {
    var rx = new Regex ("^(d+)");
    var xRes = rx.Match (x);
    var yRes = rx.Match (y);
    if (xRes.Success && yRes.Success) {
        return int.Parse (xRes.Groups [1].Value).CompareTo (int.Parse (yRes.Groups [1].Value));
    }
    return x.CompareTo (y);
}
----------------------------------------

public int Compare (object x, object y) {
    string s1 = x as string;
    if (s1 == null) {
        return 0;
    }
    string s2 = y as string;
    if (s2 == null) {
        return 0;
    }
    int len1 = s1.Length;
    int len2 = s2.Length;
    int marker1 = 0;
    int marker2 = 0;
    while (marker1 < len1 && marker2 < len2) {
        char ch1 = s1 [marker1];
        char ch2 = s2 [marker2];
        char [] space1 = new char [len1];
        int loc1 = 0;
        char [] space2 = new char [len2];
        int loc2 = 0;
        do
            {
                space1 [loc1 ++] = ch1;
                marker1 ++;
                if (marker1 < len1) {
                    ch1 = s1 [marker1];
                } else {
                    break;
                }
            } while (char.IsDigit (ch1) == char.IsDigit (space1 [0]));
        do
            {
                space2 [loc2 ++] = ch2;
                marker2 ++;
                if (marker2 < len2) {
                    ch2 = s2 [marker2];
                } else {
                    break;
                }
            } while (char.IsDigit (ch2) == char.IsDigit (space2 [0]));
        string str1 = new string (space1);
        string str2 = new string (space2);
        int result;
        if (char.IsDigit (space1 [0]) && char.IsDigit (space2 [0])) {
            int thisNumericChunk = int.Parse (str1);
            int thatNumericChunk = int.Parse (str2);
            result = thisNumericChunk.CompareTo (thatNumericChunk);
        } else {
            result = str1.CompareTo (str2);
        }
        if (result != 0) {
            return result;
        }
    }
    return len1 - len2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30236585_30236720_1_16
30236585_30236923_4_18
Title: Sort array list by numbers then by letters 
----------------------------------------

public int Compare (string x, string y) {
    var rx = new Regex ("^(d+)");
    var xRes = rx.Match (x);
    var yRes = rx.Match (y);
    if (xRes.Success && yRes.Success) {
        return int.Parse (xRes.Groups [1].Value).CompareTo (int.Parse (yRes.Groups [1].Value));
    }
    return x.CompareTo (y);
}
----------------------------------------

public int Compare (string x, string y) {
    string numxs = string.Concat (x.TakeWhile (c = > char.IsDigit (c)).ToArray ());
    string numys = string.Concat (y.TakeWhile (c = > char.IsDigit (c)).ToArray ());
    int xnum;
    int ynum;
    if (! int.TryParse (numxs, out xnum) || ! int.TryParse (numys, out ynum)) {
        return _comparer.Compare (x, y);
    }
    int compareNums = xnum.CompareTo (ynum);
    if (compareNums != 0) {
        return compareNums;
    }
    return _comparer.Compare (x, y);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30236585_30236725_3_90
30236585_30236923_4_18
Title: Sort array list by numbers then by letters 
----------------------------------------

public int Compare (object x, object y) {
    string s1 = x as string;
    if (s1 == null) {
        return 0;
    }
    string s2 = y as string;
    if (s2 == null) {
        return 0;
    }
    int len1 = s1.Length;
    int len2 = s2.Length;
    int marker1 = 0;
    int marker2 = 0;
    while (marker1 < len1 && marker2 < len2) {
        char ch1 = s1 [marker1];
        char ch2 = s2 [marker2];
        char [] space1 = new char [len1];
        int loc1 = 0;
        char [] space2 = new char [len2];
        int loc2 = 0;
        do
            {
                space1 [loc1 ++] = ch1;
                marker1 ++;
                if (marker1 < len1) {
                    ch1 = s1 [marker1];
                } else {
                    break;
                }
            } while (char.IsDigit (ch1) == char.IsDigit (space1 [0]));
        do
            {
                space2 [loc2 ++] = ch2;
                marker2 ++;
                if (marker2 < len2) {
                    ch2 = s2 [marker2];
                } else {
                    break;
                }
            } while (char.IsDigit (ch2) == char.IsDigit (space2 [0]));
        string str1 = new string (space1);
        string str2 = new string (space2);
        int result;
        if (char.IsDigit (space1 [0]) && char.IsDigit (space2 [0])) {
            int thisNumericChunk = int.Parse (str1);
            int thatNumericChunk = int.Parse (str2);
            result = thisNumericChunk.CompareTo (thatNumericChunk);
        } else {
            result = str1.CompareTo (str2);
        }
        if (result != 0) {
            return result;
        }
    }
    return len1 - len2;
}
----------------------------------------

public int Compare (string x, string y) {
    string numxs = string.Concat (x.TakeWhile (c = > char.IsDigit (c)).ToArray ());
    string numys = string.Concat (y.TakeWhile (c = > char.IsDigit (c)).ToArray ());
    int xnum;
    int ynum;
    if (! int.TryParse (numxs, out xnum) || ! int.TryParse (numys, out ynum)) {
        return _comparer.Compare (x, y);
    }
    int compareNums = xnum.CompareTo (ynum);
    if (compareNums != 0) {
        return compareNums;
    }
    return _comparer.Compare (x, y);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30240326_30246560_13_37
30240326_30248761_18_30
Title: Delete dll file after unloading an AppDomain 
----------------------------------------

static void Main (string [] args) {
    try {
        String pathToAssembly = args [0];
        AppDomain dom = AppDomain.CreateDomain ("some");
        AssemblyName assemblyName = new AssemblyName ();
        assemblyName.CodeBase = "loader.dll";
        dom.Load (assemblyName);
        object loader = dom.CreateInstanceAndUnwrap ("loader", "loader.AsmLoader");
        Type loaderType = loader.GetType ();
        loaderType.GetMethod ("LoadAssembly").Invoke (loader, new object [] {pathToAssembly});
        AppDomain.CurrentDomain.GetAssemblies ().All (a = > {
            Console.WriteLine (a.FullName);
            return true;
        });
        AppDomain.Unload (dom);
        GC.Collect ();
        GC.WaitForPendingFinalizers ();
        GC.Collect ();
        File.Delete (pathToAssembly);
    }
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
}
----------------------------------------

public static void Main (string [] args) {
    String pathToAssembly = args [0];
    AppDomain dom = AppDomain.CreateDomain ("some");
    AssemblyName assemblyName = new AssemblyName ();
    assemblyName.CodeBase = pathToAssembly;
    Assembly assembly = dom.Load (assemblyName);
    AppDomain.Unload (dom);
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    GC.Collect ();
    File.Delete (pathToAssembly);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30277647_30278016_24_38
30277647_30278016_8_17
Title: Changing type of element in XML Serialization 
----------------------------------------

public static XElement SerializeToXElement < T > (this T obj, XmlSerializer serializer, bool omitStandardNamespaces) {
    var doc = new XDocument ();
    using (var writer = doc.CreateWriter ())
    {
        XmlSerializerNamespaces ns = null;
        if (omitStandardNamespaces)
            (ns = new XmlSerializerNamespaces ()).Add ("", "");

        serializer.Serialize (writer, obj, ns);
    } var element = doc.Root;
    if (element != null)
        element.Remove ();

    return element;
}
----------------------------------------

public static T Deserialize < T > (this XContainer element, XmlSerializer serializer) {
    using (var reader = element.CreateReader ())
    {
        object result = serializer.Deserialize (reader);
        if (result is T)
            return (T) result;

    } return default (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30281852_30282126_1_99
30281852_30282355_1_46
Title: Bug when reading password with confirmation and retries in a loop 
----------------------------------------

public static void Main (string [] args) {
    string username = "";
    string pass = "";
    string confirmPass = "";
    Console.Write ("Enter username: ");
    username = Console.ReadLine ();
    Console.WriteLine ();
    Console.Write ("Enter your password: ");
    ConsoleKeyInfo key;
    do
        {
            key = Console.ReadKey (true);
            if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter) {
                pass += key.KeyChar;
                Console.Write ("*");
            } else if (key.Key == ConsoleKey.Backspace && pass.Length > 0) {
                pass = pass.Substring (0, (pass.Length - 1));
                Console.Write ("\b \b");
            }
        } while (key.Key != ConsoleKey.Enter);
    Console.WriteLine ("");
    Console.WriteLine ("Confirm your password: ");
    ConsoleKeyInfo confirmKey;
    int retryCount = 3;
    string finalPass = "";
    do
        {
            confirmKey = Console.ReadKey (true);
            if (confirmKey.Key != ConsoleKey.Backspace && confirmKey.Key != ConsoleKey.Enter) {
                confirmPass += confirmKey.KeyChar;
                Console.Write ("*");
            } else if (confirmKey.Key == ConsoleKey.Backspace && pass.Length > 0) {
                confirmPass = confirmPass.Substring (0, (confirmPass.Length - 1));
                Console.Write ("\b \b");
            }
        } while ((confirmKey.Key != ConsoleKey.Enter));
    do
        {
            if (confirmPass != pass) {
                confirmPass = "";
                Console.WriteLine ("Re-enter Password: (" + retryCount + " tries remaining)");
                do
                    {
                        confirmKey = Console.ReadKey (true);
                        if (confirmKey.Key != ConsoleKey.Backspace && confirmKey.Key != ConsoleKey.Enter) {
                            confirmPass += confirmKey.KeyChar;
                            Console.Write ("*");
                        } else if (confirmKey.Key == ConsoleKey.Backspace && pass.Length > 0) {
                            confirmPass = confirmPass.Substring (0, (confirmPass.Length - 1));
                            Console.Write ("\b \b");
                        }
                    } while ((confirmKey.Key != ConsoleKey.Enter));
                retryCount --;
            } else if (confirmPass == pass) {
                Console.WriteLine ("Enter password to log in :");
                finalPass = Console.ReadLine ();
                if (finalPass == pass) {
                    Console.WriteLine ("Login Successful. Welcome " + username + "!");
                    Console.WriteLine ();
                    Console.WriteLine ("Test Successful. Press Enter to quit.");
                    Console.ReadLine ();
                    break;
                }
            }
            if (retryCount == 0) {
                Console.WriteLine ("Exceeded number of tries!!");
                Console.ReadLine ();
            }
        } while (retryCount != 0);
}
----------------------------------------

public static void Main (params string [] args) {
    string username = "";
    string pass = "";
    string confirmPass = "";
    Console.Write ("Enter username: ");
    username = Console.ReadLine ();
    Console.WriteLine ();
    Console.Write ("Enter your password: ");
    pass = ReadPassword ();
    Console.WriteLine ("");
    Console.WriteLine ("Confirm your password: ");
    int retryCount = 3;
    string finalPass = "";
    confirmPass = ReadPassword ();
    do
        {
            if (confirmPass != pass) {
                Console.WriteLine ("Re-enter Password: (" + retryCount + " tries remaining)");
                confirmPass = ReadPassword ();
                retryCount --;
            } else if (confirmPass == pass) {
                Console.WriteLine ("Enter password to log in :");
                finalPass = Console.ReadLine ();
                if (finalPass == pass) {
                    Console.WriteLine ("Login Successful. Welcome " + username + "!");
                    Console.WriteLine ();
                    Console.WriteLine ("Test Successful. Press Enter to quit.");
                }
            }
            if (retryCount == 0) {
                Console.WriteLine ("Exceeded number of tries!!");
                Console.ReadLine ();
            }
        } while (confirmPass != pass && retryCount != 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3028724_52589652_17_38
3028724_52589652_86_110
Title: "Why do we need the ""event"" keyword while defining events?" 
----------------------------------------

public void TryToDoSomethingOnMyDelegateA () {
    if (MyDelegateA != null) {
        MyDelegateA ("I can invoke detegate in classA");
        MyDelegateA.Invoke ("I can invoke detegate in classA");
        IAsyncResult result = MyDelegateA.BeginInvoke ("I can invoke detegate in classA", MyAsyncCallback, MyResetEvent);
        System.Reflection.MethodInfo delegateAMethodInfo = MyDelegateA.Method;
        MyDelegateA = testMethod;
        MyDelegateA = new MyDelegate (testMethod);
        MyDelegateA = null;
        MyDelegateA += testMethod;
        MyDelegateA += new MyDelegate (testMethod);
        MyDelegateA -= testMethod;
        MyDelegateA -= new MyDelegate (testMethod);
    }
}
----------------------------------------

public void TryToDoSomethingOnMyDelegateA () {
    if (classA.MyDelegateA != null) {
        classA.MyDelegateA ("I can invoke delegate which defined in class A in ClassB");
        classA.MyDelegateA.Invoke ("I can invoke delegate which defined in class A in ClassB");
        System.Reflection.MethodInfo delegateAMethodInfo = classA.MyDelegateA.Method;
        classA.MyDelegateA = testMethod;
        classA.MyDelegateA = new MyDelegate (testMethod);
        classA.MyDelegateA = null;
        classA.MyDelegateA += testMethod;
        classA.MyDelegateA += new MyDelegate (testMethod);
        classA.MyDelegateA -= testMethod;
        classA.MyDelegateA -= new MyDelegate (testMethod);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30290441_30291342_1_19
30290441_30291474_7_39
Title: LINQ OrderBy - Custom 
----------------------------------------

public static void Main () {
    List < Data > data = new List < Data > ();
    data.Add (new Data {Id = 1, Sequence = 1, CustomIndex = 0});
    data.Add (new Data {Id = 5, Sequence = 5, CustomIndex = 0});
    data.Add (new Data {Id = 6, Sequence = 6, CustomIndex = 2});
    data.Add (new Data {Id = 2, Sequence = 2, CustomIndex = 0});
    data.Add (new Data {Id = 3, Sequence = 3, CustomIndex = 2});
    data.Add (new Data {Id = 4, Sequence = 4, CustomIndex = 1});
    data.Add (new Data {Id = 7, Sequence = 7, CustomIndex = 1});
    int o = 0;
    var result = data.OrderBy (x = > x.Sequence).ToList ().OrderBy ((x) = > myCustomSort (x, ref o));
    result.ToList ().ForEach (x = > Console.WriteLine (x.Id));
}
----------------------------------------

public static void Main () {
    List < Data > data = new List < Data > ();
    data.Add (new Data {Id = 1, Sequence = 1, CustomIndex = 0});
    data.Add (new Data {Id = 2, Sequence = 2, CustomIndex = 0});
    data.Add (new Data {Id = 3, Sequence = 3, CustomIndex = 2});
    data.Add (new Data {Id = 4, Sequence = 4, CustomIndex = 1});
    data.Add (new Data {Id = 5, Sequence = 5, CustomIndex = 0});
    var itemsToPlaceBySequence = data.Where (x = > x.CustomIndex == 0).OrderBy (x = > x.Sequence).ToList ();
    var itemsToPlaceByCustomIndex = data.Where (x = > x.CustomIndex != 0).OrderBy (x = > x.CustomIndex).ToList ();
    var dataSlots = new Data [data.Count];
    foreach (var dataBySequence in itemsToPlaceBySequence) {
        dataSlots [dataBySequence.Sequence - 1] = dataBySequence;
    }
    foreach (var dataByCustom in itemsToPlaceByCustomIndex) {
        var index = dataSlots.ToList ().IndexOf (null);
        dataSlots [index] = dataByCustom;
    }
    var result = dataSlots.ToList ();
    result.ForEach (x = > Console.WriteLine (x.Id));
    var discard = Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30297972_30298068_25_35
30297972_30298158_3_15
Title: How to compare two list<object> in C# and retain only the items that don't have duplicates? 
----------------------------------------

public bool Equals (UserGroupMap other) {
    if (other == null)
        return false;

    if (Object.ReferenceEquals (this, other))
        return true;

    return this.UserId == other.UserId && this.GroupId == other.GroupId && this.FormGroupFlag == other.FormGroupFlag && this.GroupDescription == other.GroupDescription && this.GroupName == other.GroupName;
}
----------------------------------------

public bool Equals (UserGroupMap x, UserGroupMap y) {
    if (x == null)
        return y == null;
    else if (y == null)
        return false;
    else
        return x.UserId.Equals (y.UserId) && x.GroupId.Equals (y.GroupId) && x.FormGroupFlag.Equals (y.FormGroupFlag) && x.GroupDescription.Equals (y.GroupDescription) && x.GroupName.Equals (y.GroupName);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30297972_30298068_9_23
30297972_30298158_17_31
Title: How to compare two list<object> in C# and retain only the items that don't have duplicates? 
----------------------------------------

public override int GetHashCode () {
    unchecked {
        int hash = 17;
        hash = hash * 23 + (UserId ?? "").GetHashCode ();
        hash = hash * 23 + (GroupId ?? "").GetHashCode ();
        hash = hash * 23 + (FormGroupFlag ?? "").GetHashCode ();
        hash = hash * 23 + (GroupDescription ?? "").GetHashCode ();
        hash = hash * 23 + (GroupName ?? "").GetHashCode ();
        return hash;
    }
}
----------------------------------------

public int GetHashCode (UserGroupMap obj) {
    unchecked {
        int hash = 17;
        hash = hash * 23 + (obj.UserId ?? "").GetHashCode ();
        hash = hash * 23 + (obj.GroupId ?? "").GetHashCode ();
        hash = hash * 23 + (obj.FormGroupFlag ?? "").GetHashCode ();
        hash = hash * 23 + (obj.GroupDescription ?? "").GetHashCode ();
        hash = hash * 23 + (obj.GroupName ?? "").GetHashCode ();
        return hash;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3029818_48861922_1_16
3029818_48884732_11_37
Title: "How to remove a single specific object from a ConcurrentBag<>?" 
----------------------------------------

public static void Remove < T > (this ConcurrentBag < T > bag, T item) {
    while (bag.Count > 0) {
        T result;
        bag.TryTake (out result);
        if (result.Equals (item)) {
            break;
        }
        bag.Add (result);
    }
}
----------------------------------------

public static void Remove < T > (this ConcurrentBag < T > bag, List < T > itemlist) {
    try {
        lock (locker)
        {
            List < T > removelist = bag.ToList ();
            Parallel.ForEach (itemlist, currentitem = > {
                removelist.Remove (currentitem);
            });
            bag = new ConcurrentBag < T > ();
            Parallel.ForEach (removelist, currentitem = > {
                bag.Add (currentitem);
            });
        }}
    catch (Exception ex) {
        Debug.WriteLine (ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3029818_48861922_1_16
3029818_48884732_39_61
Title: "How to remove a single specific object from a ConcurrentBag<>?" 
----------------------------------------

public static void Remove < T > (this ConcurrentBag < T > bag, T item) {
    while (bag.Count > 0) {
        T result;
        bag.TryTake (out result);
        if (result.Equals (item)) {
            break;
        }
        bag.Add (result);
    }
}
----------------------------------------

public static void Remove < T > (this ConcurrentBag < T > bag, T removeitem) {
    try {
        lock (locker)
        {
            List < T > removelist = bag.ToList ();
            removelist.Remove (removeitem);
            bag = new ConcurrentBag < T > ();
            Parallel.ForEach (removelist, currentitem = > {
                bag.Add (currentitem);
            });
        }}
    catch (Exception ex) {
        Debug.WriteLine (ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30306385_30306700_1_22
30306385_30309225_1_14
Title: Not getting values from grid table when checkbox is checked? 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    const int checkBoxPosition = 3;
    StringBuilder ln = new StringBuilder ();
    dataGridView1.ClearSelection ();
    foreach (DataGridViewRow row in dataGridView1.Rows) {
        if (row.Cells [checkBoxPosition].Value == true) {
            ln.Append (row.Cells [1].Value.ToString ());
        } else {
            MessageBox.Show ("No row is selected!");
            break;
        }
    }
    MessageBox.Show ("Row Content -" + ln);
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    StringBuilder ln = new StringBuilder ();
    dataGridView1.ClearSelection ();
    foreach (DataGridViewRow row in dataGridView1.Rows) {
        if (((bool ?) row.Cells [0].Value) == true) {
            ln.Append (row.Cells [1].FormattedValue);
        }
    }
    if (ln.Length <= 0)
        MessageBox.Show ("No rows are checked!");
    else
        MessageBox.Show ("Rows content: " + ln);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30308124_30308515_46_57
30308124_30308515_93_114
Title: Force a .NET Expression to Use Current Value 
----------------------------------------

public override Expression Visit (Expression exp) {
    if (exp == null) {
        return null;
    }
    if (this.candidates.Contains (exp)) {
        return this.Evaluate (exp);
    }
    return base.Visit (exp);
}
----------------------------------------

public override Expression Visit (Expression expression) {
    if (expression != null) {
        bool saveCannotBeEvaluated = this.cannotBeEvaluated;
        this.cannotBeEvaluated = false;
        base.Visit (expression);
        if (! this.cannotBeEvaluated) {
            if (this.fnCanBeEvaluated (expression)) {
                this.candidates.Add (expression);
            } else {
                this.cannotBeEvaluated = true;
            }
        }
        this.cannotBeEvaluated |= saveCannotBeEvaluated;
    }
    return expression;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30320493_30320704_1_11
30320493_30320753_21_34
Title: Iterate over IEnumerable stops after first iteration 
----------------------------------------

public bool MoveNext () {
    int size = reeks.Count - 1;
    if (idx < size) {
        idx ++;
        reeks.Add (reeks [size] * 2);
        return true;
    }
    return false;
}
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30326151_30326152_1_10
30326151_30326672_1_20
Title: IEnumerable which returns Prime Numbers: smallest implementation 
----------------------------------------

static IEnumerable < int > PrimeNumbers (int numPrimes) {
    yield return 2;
    for (int n = 1, p = 3; n < numPrimes; p += 2) {
        if (! checkIfPrime (p))
            continue;

        n ++;
        yield return p;
    }
}
----------------------------------------

public static IEnumerable < int > PrimeNumbers (int NumberPrimes) {
    yield return 2;
    for (int i = 3; i < NumberPrimes; i = i + 2) {
        bool IsPrime = true;
        System.Threading.Tasks.Parallel.For (2, i, (o, state) = > {
            if (i % o == 0) {
                IsPrime = false;
                state.Break ();
            }
        });
        if (IsPrime) {
            yield return i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30371054_30405435_127_140
30371054_30405435_201_214
Title: Insert Rows in WPF 
----------------------------------------

public static string GetEnumDescription (Enum value) {
    FieldInfo fi = value.GetType ().GetField (value.ToString ());
    DescriptionAttribute [] attributes = (DescriptionAttribute []) fi.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (attributes != null && attributes.Length > 0)
        return attributes [0].Description;
    else
        return value.ToString ();

}
----------------------------------------

public static string GetEnumDescription (Enum value) {
    FieldInfo fi = value.GetType ().GetField (value.ToString ());
    DescriptionAttribute [] attributes = (DescriptionAttribute []) fi.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (attributes != null && attributes.Length > 0)
        return attributes [0].Description;
    else
        return value.ToString ();

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3038140_3038526_1_18
3038140_30532737_1_38
Title: How to determine Windows Java installation location 
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}}
----------------------------------------

static string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    const string JAVA_KEY = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    var localKey = RegistryKey.OpenBaseKey (Microsoft.Win32.RegistryHive.LocalMachine, RegistryView.Registry32);
    using (var rk = localKey.OpenSubKey (JAVA_KEY))
    {
        if (rk != null) {
            string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
            using (var key = rk.OpenSubKey (currentVersion))
            {
                return key.GetValue ("JavaHome").ToString ();
            }}
    } localKey = RegistryKey.OpenBaseKey (Microsoft.Win32.RegistryHive.LocalMachine, RegistryView.Registry64);
    using (var rk = localKey.OpenSubKey (JAVA_KEY))
    {
        if (rk != null) {
            string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
            using (var key = rk.OpenSubKey (currentVersion))
            {
                return key.GetValue ("JavaHome").ToString ();
            }}
    } return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30421962_30422034_1_26
30421962_30422061_1_26
Title: "Expected class delegate enum interface or struct" 
----------------------------------------

public static void Main (string [] args) {
    string answer;
    Console.WriteLine ("Would you like to divide or multiply? Type your choice.");
    Start : answer = (Console.ReadLine ());
    if (answer == "multiply") {
        MultiplyingMethod ();
    } else if (answer == "divide") {
        DividingMethod ();
    } else {
        Console.WriteLine ("Please type multiply or divide.");
        goto Start;
    }
}
----------------------------------------

public static void Main (string [] args) {
    string answer;
    Console.WriteLine ("Would you like to divide or multiply? Type your choice.");
    while (true) {
        answer = (Console.ReadLine ());
        if (answer == "multiply") {
            MultiplyingMethod ();
            break;
        } else if (answer == "divide") {
            DividingMethod ();
            break;
        } else {
            Console.WriteLine ("Please type multiply or divide.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30421962_30422034_27_42
30421962_30422061_28_39
Title: "Expected class delegate enum interface or struct" 
----------------------------------------

public static void DividingMethod () {
    double num01;
    double num02;
    Console.Write ("Enter a number to be divided");
    num01 = Convert.ToInt32 (Console.ReadLine ());
    Console.Write ("Enter a number to divide by");
    num02 = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine (num01 + " divided by " + num02 + " is equal to " + num01 / num02);
    Console.WriteLine ("");
    Console.ReadKey ();
}
----------------------------------------

public static void DividingMethod () {
    Console.Write ("Enter a number to be divided");
    double num01 = Convert.ToInt32 (Console.ReadLine ());
    Console.Write ("Enter a number to divide by");
    double num02 = Convert.ToInt32 (Console.ReadLine ());
    Console.WriteLine (num01 + " divided by " + num02 + " is equal to " + num01 / num02);
    Console.WriteLine ("");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
304322_1221942_31_74
304322_353671_1_33
Title: Silverlight DataGrid: Export to excel or csv 
----------------------------------------

public string ExportDataGrid (bool withHeaders, DataGrid grid) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IList source = (grid.ItemsSource as System.Collections.IList);
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is DataGridBoundColumn) {
            headers.Add (FormatCSVField (col.Header.ToString ()));
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (Object data in source) {
        List < string > csvRow = new List < string > ();
        foreach (DataGridColumn col in grid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    csvRow.Add (FormatCSVField (propInfo.GetValue (data, null).ToString ()));
                }
            }
        }
        strBuilder.Append (String.Join (",", csvRow.ToArray ())).Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------

public String ExportDataGrid (DataGrid grid) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IList source = (grid.DataContext as System.Collections.IList);
    if (source == null)
        return "";

    foreach (Object data in source) {
        foreach (DataGridColumn col in datagrid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    strBuilder.Append (propInfo.GetValue (data, null).ToString ());
                    strBuilder.Append (",");
                }
            }
        }
        strBuilder.Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
304322_1221942_31_74
304322_4235103_35_139
Title: Silverlight DataGrid: Export to excel or csv 
----------------------------------------

public string ExportDataGrid (bool withHeaders, DataGrid grid) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IList source = (grid.ItemsSource as System.Collections.IList);
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is DataGridBoundColumn) {
            headers.Add (FormatCSVField (col.Header.ToString ()));
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (Object data in source) {
        List < string > csvRow = new List < string > ();
        foreach (DataGridColumn col in grid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    csvRow.Add (FormatCSVField (propInfo.GetValue (data, null).ToString ()));
                }
            }
        }
        strBuilder.Append (String.Join (",", csvRow.ToArray ())).Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------

public static string ExportDataGrid (DataGrid grid, string SaveFileName, bool AutoOpen) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    var source = grid.ItemsSource;
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is DataGridBoundColumn) {
            headers.Add (FormatCSVField (col.Header.ToString ()));
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (var data in source) {
        List < string > csvRow = new List < string > ();
        foreach (DataGridColumn col in grid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    string valueConverted = "";
                    if (binding.Converter.GetType ().ToString () != "System.Windows.Controls.DataGridValueConverter")
                        valueConverted = binding.Converter.Convert (propInfo.GetValue (data, null), typeof (System.String), binding.ConverterParameter, System.Globalization.CultureInfo.CurrentCulture).ToString ();
                    else
                        valueConverted = FormatCSVField (propInfo.GetValue (data, null) == null ? "" : propInfo.GetValue (data, null).ToString ());

                    csvRow.Add (valueConverted.ToString ());
                }
            }
        }
        strBuilder.Append (String.Join (",", csvRow.ToArray ())).Append ("\r\n");
    }
    if (AutomationFactory.IsAvailable) {
        var sampleFile = "\\" + SaveFileName;
        var path = Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments);
        path += "\\Pement";
        if (! System.IO.Directory.Exists (path)) {
            System.IO.Directory.CreateDirectory (path);
        } else {
            var files = System.IO.Directory.EnumerateFiles (path);
            foreach (var item in files) {
                try {
                    System.IO.File.Delete (item);
                }
                catch {
                }
            }
        }
        StreamWriter sw = File.CreateText (path + sampleFile);
        sw.WriteLine (strBuilder.ToString ());
        sw.Close ();
        if (AutoOpen)
            OpenExcelFile (path + sampleFile, true, true);

    } else {
        SaveFileDialog sfd = new SaveFileDialog () {DefaultExt = "csv", Filter = "CSV Files (*.csv)|*.csv|All files (*.*)|*.*", FilterIndex = 1};
        if (sfd.ShowDialog () == true) {
            using (Stream stream = sfd.OpenFile ())
            {
                using (StreamWriter writer = new StreamWriter (stream))
                {
                    writer.Write (strBuilder.ToString ());
                    writer.Close ();
                } stream.Close ();
            }}
    }
    return strBuilder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
304322_1221942_31_74
304322_5222389_9_34
Title: Silverlight DataGrid: Export to excel or csv 
----------------------------------------

public string ExportDataGrid (bool withHeaders, DataGrid grid) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IList source = (grid.ItemsSource as System.Collections.IList);
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is DataGridBoundColumn) {
            headers.Add (FormatCSVField (col.Header.ToString ()));
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (Object data in source) {
        List < string > csvRow = new List < string > ();
        foreach (DataGridColumn col in grid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    csvRow.Add (FormatCSVField (propInfo.GetValue (data, null).ToString ()));
                }
            }
        }
        strBuilder.Append (String.Join (",", csvRow.ToArray ())).Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------

public string ExportDataGrid (bool withHeaders, Microsoft.Windows.Controls.DataGrid grid) {
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IEnumerable source = (grid.ItemsSource as System.Collections.IEnumerable);
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is Microsoft.Windows.Controls.DataGridBoundColumn) {
            headers.Add (col.Header.ToString ());
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (Object data in source) {
        System.Data.DataRowView d = (System.Data.DataRowView) data;
        strBuilder.Append (String.Join (",", d.Row.ItemArray)).Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
304322_353671_1_33
304322_4235103_35_139
Title: Silverlight DataGrid: Export to excel or csv 
----------------------------------------

public String ExportDataGrid (DataGrid grid) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IList source = (grid.DataContext as System.Collections.IList);
    if (source == null)
        return "";

    foreach (Object data in source) {
        foreach (DataGridColumn col in datagrid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    strBuilder.Append (propInfo.GetValue (data, null).ToString ());
                    strBuilder.Append (",");
                }
            }
        }
        strBuilder.Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------

public static string ExportDataGrid (DataGrid grid, string SaveFileName, bool AutoOpen) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    var source = grid.ItemsSource;
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is DataGridBoundColumn) {
            headers.Add (FormatCSVField (col.Header.ToString ()));
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (var data in source) {
        List < string > csvRow = new List < string > ();
        foreach (DataGridColumn col in grid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    string valueConverted = "";
                    if (binding.Converter.GetType ().ToString () != "System.Windows.Controls.DataGridValueConverter")
                        valueConverted = binding.Converter.Convert (propInfo.GetValue (data, null), typeof (System.String), binding.ConverterParameter, System.Globalization.CultureInfo.CurrentCulture).ToString ();
                    else
                        valueConverted = FormatCSVField (propInfo.GetValue (data, null) == null ? "" : propInfo.GetValue (data, null).ToString ());

                    csvRow.Add (valueConverted.ToString ());
                }
            }
        }
        strBuilder.Append (String.Join (",", csvRow.ToArray ())).Append ("\r\n");
    }
    if (AutomationFactory.IsAvailable) {
        var sampleFile = "\\" + SaveFileName;
        var path = Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments);
        path += "\\Pement";
        if (! System.IO.Directory.Exists (path)) {
            System.IO.Directory.CreateDirectory (path);
        } else {
            var files = System.IO.Directory.EnumerateFiles (path);
            foreach (var item in files) {
                try {
                    System.IO.File.Delete (item);
                }
                catch {
                }
            }
        }
        StreamWriter sw = File.CreateText (path + sampleFile);
        sw.WriteLine (strBuilder.ToString ());
        sw.Close ();
        if (AutoOpen)
            OpenExcelFile (path + sampleFile, true, true);

    } else {
        SaveFileDialog sfd = new SaveFileDialog () {DefaultExt = "csv", Filter = "CSV Files (*.csv)|*.csv|All files (*.*)|*.*", FilterIndex = 1};
        if (sfd.ShowDialog () == true) {
            using (Stream stream = sfd.OpenFile ())
            {
                using (StreamWriter writer = new StreamWriter (stream))
                {
                    writer.Write (strBuilder.ToString ());
                    writer.Close ();
                } stream.Close ();
            }}
    }
    return strBuilder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
304322_353671_1_33
304322_5222389_9_34
Title: Silverlight DataGrid: Export to excel or csv 
----------------------------------------

public String ExportDataGrid (DataGrid grid) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IList source = (grid.DataContext as System.Collections.IList);
    if (source == null)
        return "";

    foreach (Object data in source) {
        foreach (DataGridColumn col in datagrid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    strBuilder.Append (propInfo.GetValue (data, null).ToString ());
                    strBuilder.Append (",");
                }
            }
        }
        strBuilder.Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------

public string ExportDataGrid (bool withHeaders, Microsoft.Windows.Controls.DataGrid grid) {
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IEnumerable source = (grid.ItemsSource as System.Collections.IEnumerable);
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is Microsoft.Windows.Controls.DataGridBoundColumn) {
            headers.Add (col.Header.ToString ());
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (Object data in source) {
        System.Data.DataRowView d = (System.Data.DataRowView) data;
        strBuilder.Append (String.Join (",", d.Row.ItemArray)).Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
304322_4235103_35_139
304322_5222389_9_34
Title: Silverlight DataGrid: Export to excel or csv 
----------------------------------------

public static string ExportDataGrid (DataGrid grid, string SaveFileName, bool AutoOpen) {
    string colPath;
    System.Reflection.PropertyInfo propInfo;
    System.Windows.Data.Binding binding;
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    var source = grid.ItemsSource;
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is DataGridBoundColumn) {
            headers.Add (FormatCSVField (col.Header.ToString ()));
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (var data in source) {
        List < string > csvRow = new List < string > ();
        foreach (DataGridColumn col in grid.Columns) {
            if (col is DataGridBoundColumn) {
                binding = (col as DataGridBoundColumn).Binding;
                colPath = binding.Path.Path;
                propInfo = data.GetType ().GetProperty (colPath);
                if (propInfo != null) {
                    string valueConverted = "";
                    if (binding.Converter.GetType ().ToString () != "System.Windows.Controls.DataGridValueConverter")
                        valueConverted = binding.Converter.Convert (propInfo.GetValue (data, null), typeof (System.String), binding.ConverterParameter, System.Globalization.CultureInfo.CurrentCulture).ToString ();
                    else
                        valueConverted = FormatCSVField (propInfo.GetValue (data, null) == null ? "" : propInfo.GetValue (data, null).ToString ());

                    csvRow.Add (valueConverted.ToString ());
                }
            }
        }
        strBuilder.Append (String.Join (",", csvRow.ToArray ())).Append ("\r\n");
    }
    if (AutomationFactory.IsAvailable) {
        var sampleFile = "\\" + SaveFileName;
        var path = Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments);
        path += "\\Pement";
        if (! System.IO.Directory.Exists (path)) {
            System.IO.Directory.CreateDirectory (path);
        } else {
            var files = System.IO.Directory.EnumerateFiles (path);
            foreach (var item in files) {
                try {
                    System.IO.File.Delete (item);
                }
                catch {
                }
            }
        }
        StreamWriter sw = File.CreateText (path + sampleFile);
        sw.WriteLine (strBuilder.ToString ());
        sw.Close ();
        if (AutoOpen)
            OpenExcelFile (path + sampleFile, true, true);

    } else {
        SaveFileDialog sfd = new SaveFileDialog () {DefaultExt = "csv", Filter = "CSV Files (*.csv)|*.csv|All files (*.*)|*.*", FilterIndex = 1};
        if (sfd.ShowDialog () == true) {
            using (Stream stream = sfd.OpenFile ())
            {
                using (StreamWriter writer = new StreamWriter (stream))
                {
                    writer.Write (strBuilder.ToString ());
                    writer.Close ();
                } stream.Close ();
            }}
    }
    return strBuilder.ToString ();
}
----------------------------------------

public string ExportDataGrid (bool withHeaders, Microsoft.Windows.Controls.DataGrid grid) {
    System.Text.StringBuilder strBuilder = new System.Text.StringBuilder ();
    System.Collections.IEnumerable source = (grid.ItemsSource as System.Collections.IEnumerable);
    if (source == null)
        return "";

    List < string > headers = new List < string > ();
    grid.Columns.ToList ().ForEach (col = > {
        if (col is Microsoft.Windows.Controls.DataGridBoundColumn) {
            headers.Add (col.Header.ToString ());
        }
    });
    strBuilder.Append (String.Join (",", headers.ToArray ())).Append ("\r\n");
    foreach (Object data in source) {
        System.Data.DataRowView d = (System.Data.DataRowView) data;
        strBuilder.Append (String.Join (",", d.Row.ItemArray)).Append ("\r\n");
    }
    return strBuilder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3048650_3049186_3_23
3048650_3057111_8_20
Title: How can I send multiple types of objects across Protobuf? 
----------------------------------------

static void Main (string [] args) {
    Person person = new Person {Id = 12345, Name = "Fred", Address = new Address {Line1 = "Flat 1", Line2 = "The Meadows"}};
    object value;
    using (Stream stream = new MemoryStream ())
    {
        Send < Person > (stream, person);
        stream.Position = 0;
        value = Read (stream);
        person = value as Person;
    }}
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30526626_30666762_1_10
30526626_30681134_3_21
Title: Removing ifs based on type and list of parameters 
----------------------------------------

public static void Initialize (Control control, DocumentContainer container, ErrorProvider provider) {
    if (control == null)
        return;

    dynamic c = control;
    InitializeControl (c, container, provider);
    foreach (Control subControl in control.Controls)
        Initialize (subControl, container, provider);

}
----------------------------------------

public static void Initialize (Control control, DocumentContainer container, ErrorProvider provider) {
    if (control == null)
        return;

    typeof (ClassInitiator).InvokeMember ("InitializeControl", BindingFlags.InvokeMethod | BindingFlags.Public, null, null, new object [] {control, container, provider});
    foreach (Control subControl in control.Controls)
        Initialize (subControl, container, provider);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30526626_30666762_1_10
30526626_30691653_1_19
Title: Removing ifs based on type and list of parameters 
----------------------------------------

public static void Initialize (Control control, DocumentContainer container, ErrorProvider provider) {
    if (control == null)
        return;

    dynamic c = control;
    InitializeControl (c, container, provider);
    foreach (Control subControl in control.Controls)
        Initialize (subControl, container, provider);

}
----------------------------------------

public static void Initialize (Control control, DocumentContainer container, ErrorProvider provider) {
    if (control == null) {
        return;
    }
    var custom = control as ICustomControl;
    if (custom != null) {
        custom.DocumentLoaded = true;
        custom.Initialize (container, provider);
    }
    foreach (Control subControl in control.Controls) {
        Initialize (subControl, container, provider);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30526626_30681134_3_21
30526626_30691653_1_19
Title: Removing ifs based on type and list of parameters 
----------------------------------------

public static void Initialize (Control control, DocumentContainer container, ErrorProvider provider) {
    if (control == null)
        return;

    typeof (ClassInitiator).InvokeMember ("InitializeControl", BindingFlags.InvokeMethod | BindingFlags.Public, null, null, new object [] {control, container, provider});
    foreach (Control subControl in control.Controls)
        Initialize (subControl, container, provider);

}
----------------------------------------

public static void Initialize (Control control, DocumentContainer container, ErrorProvider provider) {
    if (control == null) {
        return;
    }
    var custom = control as ICustomControl;
    if (custom != null) {
        custom.DocumentLoaded = true;
        custom.Initialize (container, provider);
    }
    foreach (Control subControl in control.Controls) {
        Initialize (subControl, container, provider);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30528646_30528889_1_14
30528646_30528962_7_21
Title: Getting data from sql table inside a GridView (C#) 
----------------------------------------

public void GetData () {
    string connStr = ConfigurationManager.ConnectionStrings ["CRM_SQL"].ConnectionString;
    SqlConnection conn = new SqlConnection (connStr);
    conn.Open ();
    SqlCommand query = new SqlCommand (chart.Sql, conn);
    SqlDataReader rst = query.ExecuteReader ();
    gridView1.DataSource = rst;
    gridView1.DataBind ();
}
----------------------------------------

public void GetData () {
    Chart chart = new Chart ();
    string connStr = ConfigurationManager.ConnectionStrings ["CRM_SQL"].ConnectionString;
    SqlConnection conn = new SqlConnection (connStr);
    conn.Open ();
    SqlCommand query = new SqlCommand (chart.Sql, conn);
    SqlDataReader rst = query.ExecuteReader ();
    gridView1.DataSource = rst;
    gridView1.DataBind ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30529579_30530240_1_19
30529579_30530828_1_24
Title: c# extraction of images from .pptx file 
----------------------------------------

public static void GetImages () {
    var doc = PresentationDocument.Open (@"E:\Dev\Stuff\ConsoleApplication1\ConsoleApplication1\bin\Debug\test.pptx", true);
    var presentationPart = doc.PresentationPart;
    foreach (var slide in presentationPart.GetPartsOfType < SlidePart > ()) {
        foreach (var image in slide.GetPartsOfType < ImagePart > ()) {
            if (image != null) {
                var stream = image.GetStream ();
                var img = Image.FromStream (stream);
                img.Save (@"E:\Dev\Stuff\ConsoleApplication1\ConsoleApplication1\bin\Debug\" + System.IO.Path.ChangeExtension (System.IO.Path.GetRandomFileName (), "jpg"));
            }
        }
    }
}
----------------------------------------

public static void GetImages () {
    var doc = PresentationDocument.Open (@"D:\Peak Sourcing\Work\ppt_test\xx.pptx", true);
    var presentationPart = doc.PresentationPart;
    int number_of_slides = presentationPart.GetPartsOfType < SlidePart > ().Count ();
    var slidePart = presentationPart.GetPartsOfType < SlidePart > ().ElementAt (5);
    int number_of_images = slidePart.GetPartsOfType < ImagePart > ().Count ();
    var imagePart = slidePart.GetPartsOfType < ImagePart > ().ElementAt (0);
    var stream = imagePart.GetStream ();
    var img = Image.FromStream (stream);
    img.Save (@"D:\Peak Sourcing\Work\ppt_test\test-output.jpg");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30537877_30546883_12_38
30537877_30546883_40_58
Title: How to correct replace type of Expression? 
----------------------------------------

private static Expression < TTo > ConvertImpl < TFrom, TTo > (Expression < TFrom > from) where TFrom : class where TTo : class {
    var fromTypes = from.Type.GetGenericArguments ();
    var toTypes = typeof (TTo).GetGenericArguments ();
    if (fromTypes.Length != toTypes.Length)
        throw new NotSupportedException ("Incompatible lambda function-type signatures");

    Dictionary < Type, Type > typeMap = new Dictionary < Type, Type > ();
    for (int i = 0; i < fromTypes.Length; i ++) {
        if (fromTypes [i] != toTypes [i])
            typeMap [fromTypes [i]] = toTypes [i];

    }
    Dictionary < Expression, Expression > parameterMap = new Dictionary < Expression, Expression > ();
    ParameterExpression [] newParams = GenerateParameterMap < TFrom > (from, typeMap, parameterMap);
    var body = new TypeConversionVisitor < TTo > (parameterMap).Visit (from.Body);
    return Expression.Lambda < TTo > (body, newParams);
}
----------------------------------------

private static ParameterExpression [] GenerateParameterMap < TFrom > (Expression < TFrom > from, Dictionary < Type, Type > typeMap, Dictionary < Expression, Expression > parameterMap) where TFrom : class {
    var newParams = new ParameterExpression [from.Parameters.Count];
    for (int i = 0; i < newParams.Length; i ++) {
        Type newType;
        if (typeMap.TryGetValue (from.Parameters [i].Type, out newType)) {
            parameterMap [from.Parameters [i]] = newParams [i] = Expression.Parameter (newType, from.Parameters [i].Name);
        }
    }
    return newParams;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3054006_3054329_1_32
3054006_3054792_10_31
Title: Is there a more elegant way to act on the first and last items in a foreach enumeration than count++? 
----------------------------------------

public static void MyForEach < T > (this IEnumerable < T > items, Action < T > onFirst, Action < T > onMiddle, Action < T > onLast) {
    using (var enumerator = items.GetEnumerator ())
    {
        if (enumerator.MoveNext ()) {
            onFirst (enumerator.Current);
        } else {
            return;
        }
        if (! enumerator.MoveNext ())
            return;

        do
            {
                var current = enumerator.Current;
                if (enumerator.MoveNext ()) {
                    onMiddle (current);
                } else {
                    onLast (current);
                    return;
                }
            } while (true);
    }}
----------------------------------------

public static IEnumerable < Item < T > > WithIndex < T > (IEnumerable < T > enumerable) {
    Item < T > item = null;
    foreach (T value in enumerable) {
        Item < T > next = new Item < T > ();
        next.Index = 0;
        next.Value = value;
        next.IsLast = false;
        if (item != null) {
            next.Index = item.Index + 1;
            yield return item;
        }
        item = next;
    }
    if (item != null) {
        item.IsLast = true;
        yield return item;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3055732_3055797_110_130
3055732_3055797_96_108
Title: How to get results efficiently out of an Octree/Quadtree? 
----------------------------------------

public static IEnumerable < T > Merge < T > (this T [] [] arrays) {
    var map = new Heap < ArrayCursor < T > > (arrays.Length, new ArrayComparer < T > (Comparer < T >.Default));
    Action < ArrayCursor < T > > tryAdd = (a) = > {
        if (! a.Finished)
            map.Add (a);

    };
    for (int i = 0; i < arrays.Length; i ++)
        tryAdd (new ArrayCursor < T > {Array = arrays [i], Index = 0});

    while (map.Count > 0) {
        ArrayCursor < T > lowest = map.Pop ();
        yield return lowest.Value;
        lowest.Index ++;
        tryAdd (lowest);
    }
}
----------------------------------------

public static IEnumerable < T > MergeUnique < T > (this T [] [] arrays) {
    bool first = true;
    T last = default (T);
    IEqualityComparer < T > eq = EqualityComparer < T >.Default;
    foreach (T i in Merge (arrays))
        if (first || ! eq.Equals (last, i)) {
            yield return i;
            last = i;
            first = false;
        }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30565974_30566144_3_18
30565974_39635633_5_22
Title: Check whether a string contain '&' character only 
----------------------------------------

static void Main (string [] args) {
    char testChar = '&';
    string test1 = "&";
    string test2 = "&&&&&&&&&&";
    string test3 = "&&&&&&&u&&&&&&&";
    Console.WriteLine (checkIfOnly (testChar, test1));
    Console.WriteLine (checkIfOnly (testChar, test2));
    Console.WriteLine (checkIfOnly (testChar, test3));
    Console.WriteLine (checkIfOnly ('u', test3));
    Console.WriteLine (checkIfOnly ('u', "u"));
    Console.WriteLine (checkIfOnly ('u', "uuuu"));
}
----------------------------------------

public static void Main () {
    string url = "http://myurl.com/&&var=79";
    string [] parameters = url.Split ('&');
    if (parameters.Length > 0)
        Console.WriteLine ("Character '&' present");

    bool isRepetedExistance = false;
    foreach (string keyValuePair in parameters) {
        if (keyValuePair.Length == 0) {
            isRepetedExistance = true;
            break;
        }
    }
    Console.WriteLine (String.Format ("Repeted existance of character '&' is {0}present", (isRepetedExistance ? "" : "not ")));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30599692_30599983_1_14
30599692_30600217_1_19
Title: Compare strings for equality 
----------------------------------------

string GetEqualName (IEnumerable < string > strList) {
    int limit = strList.Min (s = > s.Length);
    int i = 0;
    for (; i < limit; i ++) {
        if (strList.Select (s = > s.Substring (0, i + 1)).Distinct ().Count () > 1) {
            break;
        }
    }
    return strList.First ().Substring (0, i).Trim ();
}
----------------------------------------

string GetEqualName (IEnumerable < string > strList) {
    StringBuilder builder = new StringBuilder ();
    int minLength = strList.Min (s = > s.Length);
    for (int i = 0; i < minLength; i ++) {
        char ? c = null;
        foreach (var s in strList) {
            if (c == null)
                c = s [i];
            else if (s [i] != c)
                return builder.ToString ().TrimEnd ();

        }
        builder.Append (c);
    }
    return builder.ToString ().TrimEnd ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30602616_30603484_1_13
30602616_30616447_1_16
Title: How to increase a counter whilst a key is pressed in Unity? 
----------------------------------------

void Update () {
    transform.Rotate (Vector3.up, speed * Time.deltaTime);
    if (Input.GetKey ("escape")) {
        Application.Quit ();
    }
    if (Input.GetKey ("w")) {
        transform.Rotate (Vector3.up, speed ++);
    }
    if (Input.GetKey ("s")) {
        transform.Rotate (Vector3.up, speed --);
    }
}
----------------------------------------

void Update () {
    if (Input.GetKey ("escape")) {
        Application.Quit ();
    }
    if (Input.GetKey ("w")) {
        speed += acceleration * Time.deltaTime;
    } else if (Input.GetKey ("s")) {
        speed -= acceleration * Time.deltaTime;
    }
    transform.Rotate (Vector3.up, speed * Time.deltaTime);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30633258_30633371_8_23
30633258_30633565_6_18
Title: Complex string splitting 
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

public static void Main () {
    String text = "[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    String pattern = "(\\[\\w+\\.\\w+\\])\\|(\\w+:.+)\\|(\\w+:.+)";
    Match match = Regex.Match (text, pattern);
    if (match.Success) {
        Console.WriteLine (match.Groups [1]);
        Console.WriteLine (match.Groups [2]);
        Console.WriteLine (match.Groups [3]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30638295_30638457_1_33
30638295_30638637_1_17
Title: """Cannot perform '=' operation on System.Int32 and System.String"" while performing a search" 
----------------------------------------

protected void ButtonFilter_Click (object sender, EventArgs e) {
    string filter = "";
    int selectedCount = 0;
    for (int i = 0; i < this.CheckBoxListGenres.Items.Count; i ++)
        if (this.CheckBoxListGenres.Items [i].Selected)
            selectedCount ++;

    if (selectedCount > 0) {
        filter = "GenreID=";
        int n = 0;
        for (int i = 0; i < this.CheckBoxListGenres.Items.Count; i ++) {
            if (this.CheckBoxListGenres.Items [i].Selected) {
                if (n > 0 && n < selectedCount)
                    filter += " OR ";

                filter += "'%" + this.CheckBoxListGenres.Items [i].Value.ToString () + "%'";
                n ++;
            }
        }
        if (this.TextBoxMovieName.Text != "")
            filter += " OR MovieName LIKE '%" + this.TextBoxMovieName.Text + "%'";

        DataTable dataTable = ((DataSet) Application ["DataSetMovies"]).Tables [0];
        DataView dataView = new DataView (dataTable);
        filter = Convert.ToString (filter);
        dataView.RowFilter = filter;
        this.DataListMovies.DataSource = dataView;
        this.DataListMovies.DataBind ();
    }
}
----------------------------------------

protected void ButtonFilter_Click (object sender, EventArgs e) {
    string filter = "1=1";
    if (this.CheckBoxListGenres.Items.OfType < ListItem > ().Any (i = > i.Selected))
        filter += String.Format (" AND GenreID IN ({0})'", String.Join (",", this.CheckBoxListGenres.Items.OfType < ListItem > ().Where (i = > i.Selected).Select (i = > i.Value)));

    if (this.TextBoxMovieName.Text != "")
        filter += " AND MovieName LIKE '%" + this.TextBoxMovieName.Text + "%'";

    DataTable dataTable = ((DataSet) MediaTypeNames.Application ["DataSetMovies"]).Tables [0];
    DataView dataView = new DataView (dataTable);
    dataView.RowFilter = filter;
    DataListMovies.DataSource = dataView;
    DataListMovies.DataBind ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30647335_30648363_1_32
30647335_30648751_1_21
Title: Connection was not closed. Connection's current state is open 
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    SqlConnection con = new SqlConnection (@"Data Source=.\SQLEXPRESS;AttachDbFilename=C:\Users\vicky\Desktop\Gym management system\Fitness_club\vicky.mdf;Integrated Security=True;Connect Timeout=30;User Instance=True");
    try {
        con.Open ();
        SqlCommand cmd = new SqlCommand ("Select * FROM [plan] where plantype='" + comboBox1.Text + "'", con);
        SqlDataReader dr = cmd.ExecuteReader ();
        while (dr.Read ()) {
            string amount = dr.GetString (1);
            textBox5.Text = amount;
        }
        if (con.State == 1)
            con.Close ();

    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
    }
    finally {
        if (con.State == 1)
            con.Close ();

    }
}
----------------------------------------

private void comboBox1_SelectedIndexChanged (object sender, EventArgs e) {
    string connStr = @"Data Source=.\SQLEXPRESS;AttachDbFilename=C:\Users\vicky\Desktop\Gym management system\Fitness_club\vicky.mdf;Integrated Security=True;Connect Timeout=30;User Instance=True";
    string cmdText = "Select * FROM [plan] where plantype=@planType";
    using (SqlConnection con = new SqlConnection (connStr))
    using (SqlCommand cmd = con.CreateCommand ())
    {
        con.Open ();
        cmd.CommandText = cmdText;
        cmd.Parameters.AddWithValue ("@planType", comboBox1.Text);
        var reader = cmd.ExecuteReader (CommandBehavior.SingleRow);
        if (reader.Read ()) {
            string amount = reader.GetString (1);
            textbox5.Text = amount;
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30654151_30654676_1_16
30654151_30654876_3_18
Title: How to sort enum using a custom order attribute? 
----------------------------------------

public static T [] SortEnum < T > () {
    Type myEnumType = typeof (T);
    var enumValues = Enum.GetValues (myEnumType).Cast < T > ().ToArray ();
    var enumNames = Enum.GetNames (myEnumType);
    int [] enumPositions = Array.ConvertAll (enumNames, n = > {
        OrderAttribute orderAttr = (OrderAttribute) myEnumType.GetField (n).GetCustomAttributes (typeof (OrderAttribute), false) [0];
        return orderAttr.Order;
    });
    Array.Sort (enumPositions, enumValues);
    return enumValues;
}
----------------------------------------

public static IEnumerable < TEnum > EnumGetOrderedValues < TEnum > (this Type enumType) {
    var fields = enumType.GetFields (BindingFlags.Public | BindingFlags.Static);
    var orderedValues = new List < Tuple < int, TEnum > > ();
    foreach (var field in fields) {
        var orderAtt = field.GetCustomAttributes (typeof (EnumOrderAttribute), false).SingleOrDefault () as EnumOrderAttribute;
        if (orderAtt != null) {
            orderedValues.Add (new Tuple < int, TEnum > (orderAtt.Order, (TEnum) field.GetValue (null)));
        }
    }
    return orderedValues.OrderBy (x = > x.Item1).Select (x = > x.Item2).ToList ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30654625_30654732_1_16
30654625_30654798_1_21
Title: C# - How to handle empty user input? 
----------------------------------------

static void Main (String [] args) {
    int i;
    try {
        Console.Write (" Enter a number: ");
        i = int.parse (Console.ReadLine ());
    }
    catch (Exception) {
        Console.WriteLine ("That wasn't a number.");
        return;
    }
}
----------------------------------------

static void Main (string [] args) {
    int i;
    Console.Write (" Enter a number: ");
    if (Int32.TryParse (Console.ReadLine (), out i)) {
        if (i % 2 == 0) {
            Console.Write (" The number is even");
        } else {
            Console.Write (" The number is odd");
        }
    } else {
        Console.Write (" You have to enter a number I can parse into an integer, dummy!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30669276_30669398_1_26
30669276_30669754_1_20
Title: Decrypt Function Equivalent in C# 
----------------------------------------

public object DecryptText (string strText, string strPwd) {
    int i = 0;
    int c = 0;
    string strBuff = null;
    if (Strings.Len (strPwd)) {
        for (i = 1; i <= Strings.Len (strText); i ++) {
            c = Strings.Asc (Strings.Mid (strText, i, 1));
            c = c - Strings.Asc (Strings.Mid (strPwd, (i % Strings.Len (strPwd)) + 1, 1));
            strBuff = strBuff + Strings.Chr (c + 0xff);
        }
    } else {
        strBuff = strText;
    }
    return strBuff;
}
----------------------------------------

public static object DecryptText (string strText, string strPwd) {
    string str = string.Empty;
    strPwd = Strings.UCase (strPwd);
    if ((uint) Strings.Len (strPwd) > 0U) {
        int num1 = 1;
        int num2 = Strings.Len (strText);
        int Start = num1;
        while (Start <= num2) {
            int num3 = checked (Strings.Asc (Strings.Mid (strText, Start, 1)) - Strings.Asc (Strings.Mid (strPwd, unchecked (Start % Strings.Len (strPwd)) + 1, 1)));
            str = str + Conversions.ToString (Convert.ToChar (Conversions.ToString (num3) + Conversions.ToString ((int) byte.MaxValue)));
            checked {
                ++ Start;
            }
        }
    } else
        str = strText;

    return (object) str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30670423_30670550_34_52
30670423_30670583_1_14
Title: Clear the 'All' checkbox when some of the sub-checkboxes have been un-clicked? 
----------------------------------------

private void CheckedOptionChanged (object sender, EventArgs e) {
    if (sender == cbAll) {
        foreach (var cb in checkBoxes) {
            cb.Checked = cbAll.Checked;
        }
    } else {
        cbAll.CheckedChanged -= CheckedOptionChanged;
        cbAll.Checked = CheckState.Unchecked;
        cbAll.CheckedChanged += CheckedOptionChanged;
    }
}
----------------------------------------

private void CheckedOptionChanged (object sender, EventArgs e) {
    if (sender == cbAll) {
        foreach (var cb in checkBoxes) {
            cb.Checked = cbAll.Checked;
        }
    } else {
        cbAll.Checked = ! checkBoxes.Any (cb = > cb.Checked);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30670423_30670550_34_52
30670423_30670600_1_14
Title: Clear the 'All' checkbox when some of the sub-checkboxes have been un-clicked? 
----------------------------------------

private void CheckedOptionChanged (object sender, EventArgs e) {
    if (sender == cbAll) {
        foreach (var cb in checkBoxes) {
            cb.Checked = cbAll.Checked;
        }
    } else {
        cbAll.CheckedChanged -= CheckedOptionChanged;
        cbAll.Checked = CheckState.Unchecked;
        cbAll.CheckedChanged += CheckedOptionChanged;
    }
}
----------------------------------------

private void CheckedOptionChanged (object sender, EventArgs e) {
    if (sender == cbAll) {
        foreach (var cb in checkBoxes) {
            cb.Checked = cbAll.Checked;
        }
    } else if (! ((Checkbox) sender).Checked) {
        cbAll.Checked = false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30670423_30670583_1_14
30670423_30670600_1_14
Title: Clear the 'All' checkbox when some of the sub-checkboxes have been un-clicked? 
----------------------------------------

private void CheckedOptionChanged (object sender, EventArgs e) {
    if (sender == cbAll) {
        foreach (var cb in checkBoxes) {
            cb.Checked = cbAll.Checked;
        }
    } else {
        cbAll.Checked = ! checkBoxes.Any (cb = > cb.Checked);
    }
}
----------------------------------------

private void CheckedOptionChanged (object sender, EventArgs e) {
    if (sender == cbAll) {
        foreach (var cb in checkBoxes) {
            cb.Checked = cbAll.Checked;
        }
    } else if (! ((Checkbox) sender).Checked) {
        cbAll.Checked = false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30690116_30690829_12_18
30690116_30690829_20_47
Title: c# linq statement to calculate balance over 12 months 
----------------------------------------

public static IEnumerable < T > Accumulate < T > (this IEnumerable < T > source, Func < T, T, T > accumulator) {
    if (source == null)
        throw new ArgumentNullException ("source");

    if (accumulator == null)
        throw new ArgumentNullException ("accumulator");

    return source.AccumulateImpl (accumulator);
}
----------------------------------------

private static IEnumerable < T > AccumulateImpl < T > (this IEnumerable < T > source, Func < T, T, T > accumulator) {
    using (var enumerator = source.GetEnumerator ())
    {
        T accumulation;
        T next;
        if (enumerator.MoveNext ())
            accumulation = enumerator.Current;
        else
            yield break;

        yield return accumulation;
        if (enumerator.MoveNext ())
            next = enumerator.Current;
        else
            yield break;

        while (true) {
            accumulation = accumulator (accumulation, next);
            yield return accumulation;
            if (enumerator.MoveNext ())
                next = enumerator.Current;
            else
                yield break;

        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30690704_30690794_1_36
30690704_30690974_1_45
Title: How do I value card differently depending on whether there's just one or more than one? 
----------------------------------------

public int Score () {
    int score = 0;
    int amountOfAces = 0;
    foreach (Card c in hand) {
        switch (c.Value) {
            case 'A' :
                amountOfAces ++;
                score += 11;
                break;
            case 'T' : case 'J' : case 'K' : case 'Q' :
                score += 10;
                break;
            default :
                score += (c.Value - '0');
                break;
        }
        if (amountOfAces > 1) {
            score = score - amountOfAces * 11;
            score = score + amountOfAces;
        }
    }
    return score;
}
----------------------------------------

public int Score () {
    var score = 0;
    var aceCount = 0;
    foreach (Card c in hand) {
        switch (c.Value) {
            case 'A' :
                aceCount ++;
                break;
            case 'T' : case 'J' : case 'K' : case 'Q' :
                score += 10;
                break;
            default :
                score += (c.Value - '0');
                break;
        }
    }
    if (aceCount == 0) {
        return score;
    }
    score += (aceCount - 1);
    if (score < 11) {
        score += 11;
    } else {
        score ++;
    }
    return score;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30700904_30700933_5_33
30700904_30700955_1_13
Title: Getting an average from a C# array 
----------------------------------------

public static void Main () {
    List < Player > players = new List < Player > ();
    while (true) {
        Console.Write ("Enter player name ({0} to quit): ", InputTerminationString);
        string name = Console.ReadLine ();
        if (name == InputTerminationString)
            break;

        Console.Write ("Enter score for {0}: ", name);
        int score = int.Parse (Console.ReadLine ());
        players.Add (new Player {Name = name, Score = score});
    }
    Console.WriteLine ("Name           Score");
    players.ForEach (x = > Console.WriteLine ("{0, -16} {1, 8}", x.Name, x.Score));
    double average = players.Average (x = > x.Score);
    Console.WriteLine ("Average score: {0:F2}", average);
    Console.WriteLine ("Players who scored below average");
    Console.WriteLine ("Name           Score");
    players.Where (x = > x.Score < average).ToList ().ForEach (x = > Console.WriteLine ("{0, -16} {1, 8}", x.Name, x.Score));
}
----------------------------------------

static void Main (string [] args) {
    string [] player = new string [100];
    int [] score = new int [100];
    int numPlayer = 0;
    InputData (player, score, ref numPlayer);
    DisplayPlayerData (player, score, numPlayer);
    double avgScore = CalculateAverageScore (score, ref numPlayer);
    Console.WriteLine ("Average Score:" + avgScore);
    DisplayBelowAverage (player, score, numPlayer);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3071450_3071827_17_22
3071450_3071827_23_28
Title: Improving methods with variable parameters using .NET Generics 
----------------------------------------

static bool foo < T > (T input) {
    if (input is int)
        return foo ((int) (object) input);

    if (input is string)
        return foo ((string) (object) input);

    return false;
}
----------------------------------------

static void baz < T > (T input) {
    if (input is int)
        baz ((int) (object) input);
    else if (input is string)
        baz ((string) (object) input);
    else
        throw new NotImplementedException ();

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30755350_30755735_9_24
30755350_30756101_1_23
Title: OrderBy numbers that are strings (cannot convert to int) 
----------------------------------------

static void Main (string [] args) {
    var animals = new List < string > {"10 dog", "53 cow", "2 crow", "29 horse", "12 rabbit", "107 frog", "35 cat", "7 dragon"};
    var orderedAnimals = animals.OrderBy (x = > {
        var parts = x.Split (' ');
        return int.Parse (parts [0]);
    });
    foreach (var orderedAnimal in orderedAnimals) {
        Console.WriteLine (orderedAnimal);
    }
}
----------------------------------------

static void Main (string [] args) {
    var unsortedList = new List < string > () {"10 dog", "53 cow", "2 crow", "29 horse", "12 rabbit", "107 frog", "35 cat", "7 dragon"};
    var sortedList = new SortedList < int, string > ((int) unsortedList.Count);
    foreach (var entry in unsortedList) {
        string [] frags = entry.Split (' ');
        if (frags.Length != 2) {
            throw new FormatException ();
        }
        int count = Convert.ToInt32 (frags [0]);
        string name = frags [1];
        sortedList.Add (count, name);
    }
    Console.WriteLine ("UNSORTED:");
    unsortedList.ForEach (Console.WriteLine);
    Console.WriteLine ();
    Console.WriteLine ("SORTED:");
    foreach (var entry in sortedList) {
        Console.WriteLine (entry.Key + " " + entry.Value);
    }
    Console.WriteLine ();
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3075906_22539421_1_39
3075906_29450456_10_33
Title: Using C# how can I resize a jpeg image? 
----------------------------------------

public static Image ResizeImage (Image sourceImage, int maxWidth, int maxHeight) {
    double xRatio = (double) sourceImage.Width / maxWidth;
    double yRatio = (double) sourceImage.Height / maxHeight;
    double ratioToResizeImage = Math.Max (xRatio, yRatio);
    int newWidth = (int) Math.Floor (sourceImage.Width / ratioToResizeImage);
    int newHeight = (int) Math.Floor (sourceImage.Height / ratioToResizeImage);
    Bitmap newImage = new Bitmap (newWidth, newHeight, PixelFormat.Format32bppArgb);
    using (Graphics newGraphic = Graphics.FromImage (newImage))
    {
        using (var wrapMode = new ImageAttributes ())
        {
            wrapMode.SetWrapMode (WrapMode.TileFlipXY);
            newGraphic.DrawImage (image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
        } newGraphic.Clear (Color.Transparent);
        newGraphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
        Rectangle sourceDimensions = new Rectangle (0, 0, sourceImage.Width, sourceImage.Height);
        Rectangle destinationDimensions = new Rectangle (0, 0, newWidth, newHeight);
        newGraphic.DrawImage (sourceImage, destinationDimensions, sourceDimensions, GraphicsUnit.Pixel);
    } return newImage;
}
----------------------------------------

public static Bitmap ResizeImage (Image image, int width, int height) {
    var destRect = new Rectangle (0, 0, width, height);
    var destImage = new Bitmap (width, height);
    destImage.SetResolution (image.HorizontalResolution, image.VerticalResolution);
    using (var graphics = Graphics.FromImage (destImage))
    {
        graphics.CompositingMode = CompositingMode.SourceCopy;
        graphics.CompositingQuality = CompositingQuality.HighQuality;
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.SmoothingMode = SmoothingMode.HighQuality;
        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
        using (var wrapMode = new ImageAttributes ())
        {
            wrapMode.SetWrapMode (WrapMode.TileFlipXY);
            graphics.DrawImage (image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
        }} return destImage;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30764171_30764261_3_13
30764171_30764270_1_11
Title: Remove last string from the output of my loop 
----------------------------------------

static void Main () {
    for (int i = 1; i < 6; i ++) {
        if (i < 5)
            Console.Write (i + " potato ");
        else
            Console.Write (i);

    }
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    int potatoCount = 5;
    for (int i = 1; i <= potatoCount; i ++) {
        Console.Write (i);
        if (i + 1 <= potatoCount)
            Console.Write (" potato ");

    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30776680_30777702_33_76
30776680_30778369_34_64
Title: "Converting a List defined in a Struct into Int[  ]" 
----------------------------------------

static void Main (string [] args) {
    var EDGES = new List < Edge > ();
    EDGES.Add (new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (new Edge (new Point (10, 0), new Point (80, 100)));
    var distinctPoints = new List < Point > ();
    foreach (Edge edge in EDGES) {
        if (! distinctPoints.Contains (edge.First))
            distinctPoints.Add (edge.First);

        if (! distinctPoints.Contains (edge.Second))
            distinctPoints.Add (edge.Second);

    }
    for (int i = 0; i < distinctPoints.Count; i ++) {
        Console.WriteLine ("{0} {1} {2}", i, distinctPoints [i].X, distinctPoints [i].Y);
    }
    int [,] edgeIndices = new int [EDGES.Count, 2];
    for (int i = 0; i < EDGES.Count; i ++) {
        edgeIndices [i, 0] = distinctPoints.IndexOf (EDGES [i].First);
        edgeIndices [i, 1] = distinctPoints.IndexOf (EDGES [i].Second);
    }
    for (int i = 0; i < edgeIndices.GetLength (0); i ++) {
        Console.WriteLine ("({0}, {1})", edgeIndices [i, 0], edgeIndices [i, 1]);
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    var EDGES = new List < Edge > ();
    EDGES.Add (new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (new Edge (new Point (10, 0), new Point (80, 100)));
    var POINTS = new List < double [] > (EDGES.Count * 2);
    FillPoints (EDGES, ref POINTS);
    for (int i = 0; i < POINTS.Count; i ++) {
        Console.WriteLine ("{0} {1} {2}", i, POINTS [i] [0], POINTS [i] [1]);
    }
    Console.WriteLine ();
    var edgeIndices = new int [EDGES.Count, 2];
    FillEdges (EDGES, POINTS, ref edgeIndices);
    for (int i = 0; i < edgeIndices.GetLength (0); i ++) {
        Console.WriteLine ("({0}, {1})", edgeIndices [i, 0], edgeIndices [i, 1]);
    }
    Console.ReadKey (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30789890_30790810_1_21
30789890_30790810_23_46
Title: How do you call UpdateSource() for explicit binding on a DataGrid? 
----------------------------------------

public static T GetVisualChild < T > (Visual parent) where T : Visual {
    Visual visual;
    T child = default (T);
    int childrenCount = VisualTreeHelper.GetChildrenCount (parent);
    for (int i = 0; i < childrenCount; i ++) {
        visual = (Visual) VisualTreeHelper.GetChild (parent, i);
        child = visual as T;
        if (child == null) {
            child = GetVisualChild < T > (visual);
        }
        if (child != null) {
            break;
        }
    }
    return child;
}
----------------------------------------

public T FindVisualChild < T > (DependencyObject obj, string name) where T : DependencyObject {
    DependencyObject child;
    FrameworkElement frameworkElement;
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        child = VisualTreeHelper.GetChild (obj, i);
        frameworkElement = child as FrameworkElement;
        if (child != null && child is T && frameworkElement != null && frameworkElement.Name == name) {
            return (T) child;
        } else {
            T childOfChild = FindVisualChild < T > (child, name);
            if (childOfChild != null) {
                return childOfChild;
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30791592_30791885_9_19
30791592_30792106_27_47
Title: Is there a way to create a common event? 
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x0201) {
        var ctrl = Control.FromHandle (m.HWnd);
        if (ctrl is Button)
            Debug.WriteLine (ctrl.Name);

    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref System.Windows.Forms.Message Msg) {
    const int WM_LBUTTONDOWN = 0x0201;
    if (Msg.Msg == WM_LBUTTONDOWN) {
        Control ClickedControl = System.Windows.Forms.Control.FromChildHandle (Msg.HWnd);
        if (ClickedControl != null) {
            Button ClickedButton = ClickedControl as Button;
            if (ClickedButton != null) {
                System.Diagnostics.Debug.WriteLine ("CLICK =  Form: " + ClickedButton.Parent.Text + "  Control: " + ClickedButton.Text);
            }
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30803177_30803286_1_18
30803177_30803540_1_13
Title: Method to return a string function in C# 
----------------------------------------

public string utf16_encrypt (string input) {
    string sPlainText = input;
    string output;
    if (! string.IsNullOrEmpty (sPlainText)) {
        MemoryStream memoryStream = new MemoryStream ();
        CryptoStream cryptoStream = new CryptoStream (memoryStream, this.encryptor, CryptoStreamMode.Write);
        cryptoStream.Write (enc.GetBytes (sPlainText), 0, sPlainText.Length);
        cryptoStream.FlushFinalBlock ();
        output = Convert.ToBase64String (memoryStream.ToArray ());
        memoryStream.Close ();
        cryptoStream.Close ();
        return output;
    } else
        return null;

}
----------------------------------------

public string utf16_encrypt (string input) {
    if (! string.IsNullOrEmpty (input))
        return null;

    using (var memoryStream = new MemoryStream ())
    using (var cryptoStream = new CryptoStream (memoryStream, this.encryptor, CryptoStreamMode.Write))
    {
        cryptoStream.Write (enc.GetBytes (input), 0, input.Length);
        cryptoStream.FlushFinalBlock ();
        cryptoStream.FlushFinalBlock ();
        return Convert.ToBase64String (memoryStream.ToArray ());
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30808234_30808818_1_33
30808234_30812047_1_26
Title: Generic Data Mapping 
----------------------------------------

public List < T > BuildModel < T > (string query) where T : new () {
    var container = new List < T > ();
    var properties = typeof (T).GetProperties ();
    using (var connection = new SqlConnection (dbConnection))
    using (var adapter = new SqlDataAdapter (query, connection))
    {
        connection.Open ();
        var table = new DataTable ();
        adapter.Fill (table);
        foreach (DataRow row in table.Rows) {
            T item = new T ();
            foreach (PropertyInfo property in properties) {
                if (table.Columns.Contains (property.Name)) {
                    property.GetSetMethod ().Invoke (item, new [] {row [property.Name]});
                }
            }
            container.Add (item);
        }
    } return container;
}
----------------------------------------

private List < T > Build < T > (string query) where T : new () {
    var container = new List < T > ();
    using (var connection = new SqlConnection (dbConnection))
    using (var command = new SqlCommand (query, connection))
    {
        connection.Open ();
        using (var reader = command.ExecuteReader ())
        while (reader.Read ()) {
            T model = new T ();
            var columns = Enumerable.Range (0, reader.FieldCount).Select (reader.GetName).ToList ();
            var type = model.GetType ();
            foreach (var property in type.GetProperties ())
                foreach (var column in columns)
                    if (String.Compare (property.Name, column, true) == 0)
                        if (! reader.IsDBNull (reader.GetOrdinal (property.Name)))
                            property.SetValue (model, reader.GetValue (reader.GetOrdinal (property.Name)), null);

            container.Add (model);
        }
    } return container;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3081492_21545853_1_13
3081492_3081684_1_10
Title: split a string with max character limit 
----------------------------------------

public static string SplitByLength (string s, int length) {
    ArrayList sArrReturn = new ArrayList ();
    String [] sArr = s.Split (new char [] {' '}, StringSplitOptions.RemoveEmptyEntries);
    foreach (string sconcat in sArr) {
        if (((String.Join (" ", sArrReturn.ToArray ()).Length + sconcat.Length) + 1) < length)
            sArrReturn.Add (sconcat);
        else
            break;

    }
    return String.Join (" ", sArrReturn.ToArray ());
}
----------------------------------------

public static IEnumerable < string > SplitByLength (string s, int length) {
    while (s.Length > length) {
        yield return s.Substring (0, length);
        s = s.Substring (length);
    }
    if (s.Length > 0)
        yield return s;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30816178_30816226_1_19
30816178_30816234_1_20
Title: Exception handling in return value methods 
----------------------------------------

static int GetPlayers () {
    int players = 0;
    Console.Write ("How many people are playing?");
    try {
        players = Convert.ToInt16 (Console.ReadLine ());
    }
    catch (Exception e) {
        Console.Write (e.Message + "\n" + "----------");
        return GetPlayers ();
    }
    return players;
}
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30818784_30821837_127_145
30818784_30821837_189_207
Title: Generic Object Cache 
----------------------------------------

public void Update < T > (Func < T, bool > predicate, T entity) where T : class {
    List < object > list;
    if (_cache.TryGetValue (typeof (T), out list)) {
        var e = list.Cast < T > ().Where (predicate).FirstOrDefault ();
        if (e != null) {
            list.Remove (e);
        }
        list.Add (entity);
        _cache [typeof (T)] = list;
        Store < T > (entity);
    }
}
----------------------------------------

public long Next < T > () where T : class {
    long id = 1;
    using (var ctx = m.GetClient ())
    {
        try {
            id = ctx.As < T > ().GetNextSequence ();
        }
        catch (Exception ex) {
        }
    } return id;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30818784_30821837_127_145
30818784_30821837_221_234
Title: Generic Object Cache 
----------------------------------------

public void Update < T > (Func < T, bool > predicate, T entity) where T : class {
    List < object > list;
    if (_cache.TryGetValue (typeof (T), out list)) {
        var e = list.Cast < T > ().Where (predicate).FirstOrDefault ();
        if (e != null) {
            list.Remove (e);
        }
        list.Add (entity);
        _cache [typeof (T)] = list;
        Store < T > (entity);
    }
}
----------------------------------------

private IList < T > GetAll < T > () where T : class {
    using (var ctx = m.GetClient ())
    {
        try {
            return ctx.As < T > ().GetAll ();
        }
        catch {
            return new List < T > ();
        }
    }}
----------------------------------------

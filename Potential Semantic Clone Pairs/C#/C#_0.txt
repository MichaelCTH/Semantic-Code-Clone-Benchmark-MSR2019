$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1002845_1002903_1_22
1002845_1005874_1_28
Title: Redunancy elimination in ASP.NET MVC Actions 
----------------------------------------

[Authorize, AcceptVerbs (HttpVerbs.Post)] public ActionResult ChangePassword (string oldPassword, string newPassword, string confirmPassword) {
    var oldPasswordValidationResults = _validatorProvider.Validate < IStringLengthValidator > (oldPassword);
    oldPasswordValidationResults.Where (r = > ! r.Passed).Each (r = > ModelState.AddModelError ("OldPassword", "Please enter your old password."));
    var newPasswordValidationResults = _validatorProvider.Validate < IStringLengthValidator > (newPassword);
    newPasswordValidationResults.Where (r = > ! r.Passed).Each (r = > ModelState.AddModelError ("NewPassword", "Please enter a new password."));
    if (newPassword != confirmPassword)
        ModelState.AddModelError ("ConfirmPassword", "The passwords do not match.");

    if (! _userMembershipService.ChangePassword (oldPassword, newPassword))
        ModelState.AddModelError ("_FORM", "Unable to change your password.");

    if (! ModelState.IsValid)
        return View ();

    return View ("ChangePasswordSuccessful");
}
----------------------------------------

[Authorize, AcceptVerbs (HttpVerbs.Post)] public ActionResult ChangePassword (string oldPassword, string newPassword, string confirmPassword) {
    var oldPasswordValidationResults = _validatorProvider.Validate < IStringLengthValidator > (oldPassword);
    oldPasswordValidationResults.Where (r = > ! r.Passed).Each (r = > ModelState.AddModelError ("OldPassword", "Please enter your old password."));
    var newPasswordValidationResults = _validatorProvider.Validate < IStringLengthValidator > (newPassword);
    newPasswordValidationResults.Where (r = > ! r.Passed).Each (r = > ModelState.AddModelError ("NewPassword", "Please enter a new password."));
    if (ModelState.IsValid) {
        if (newPassword == confirmPassword) {
            if (_userMembershipService.ChangePassword (oldPassword, newPassword)) {
                return View ("ChangePasswordSuccessful");
            } else {
                ModelState.AddModelError ("_FORM", "Unable to change your password.");
            }
        } else {
            ModelState.AddModelError ("ConfirmPassword", "The passwords do not match.");
        }
    }
    return View ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10034428_10035195_13_23
10034428_10035195_1_11
Title: How do I change the name from the collection from following C# code? 
----------------------------------------

private string GetSummer (Integer semesterId) {
    if (semesterId == summer1Id)
        return "Summer I";

    if (semesterId == summer2Id)
        return "Summer II";

    if (semesterId == summer3Id)
        return "Summer III";

    return "Unknown Summer";
}
----------------------------------------

private string GetSummer (DateTime startDate, DateTime endDate) {
    if (startDate == summer1Start || endDate == summer1End)
        return "Summer I";

    if (startDate == summer2Start || endDate == summer2End)
        return "Summer II";

    if (startDate == summer3Start || endDate == summer3End)
        return "Summer III";

    return "Unknown Summer";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1004312_1005818_109_126
1004312_1005818_97_107
Title: Modify file content programmatically 
----------------------------------------

public void Open (DesiredAccess fDesiredAccess, ShareMode fShareMode, CreationDisposition fCreationDisposition, FlagsAndAttributes fFlagsAndAttributes) {
    if (_sFileName.Length == 0)
        throw new ArgumentNullException ("FileName");

    _hFile = CreateFile (_sFileName, fDesiredAccess, fShareMode, IntPtr.Zero, fCreationDisposition, fFlagsAndAttributes, IntPtr.Zero);
    if (_hFile.IsInvalid) {
        _hFile = null;
        ThrowLastWin32Err ();
    }
    _fDisposed = false;
}
----------------------------------------

public void Open (DesiredAccess fDesiredAccess, CreationDisposition fCreationDisposition) {
    ShareMode fShareMode;
    if (fDesiredAccess == DesiredAccess.GENERIC_READ) {
        fShareMode = ShareMode.FILE_SHARE_READ;
    } else {
        fShareMode = ShareMode.FILE_SHARE_NONE;
    }
    Open (fDesiredAccess, fShareMode, fCreationDisposition, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10045061_10045123_1_32
10045061_10045213_1_29
Title: Modifying or replacing column values reading from the DataTable 
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if ((dataTable != null) && (0 < dataTable.Rows.Count)) {
        int rowIndex = 0;
        if (rowIndex < dataTable.Rows.Count) {
            DataRow dr = dataTable.Rows [rowIndex];
            if (! dr.IsNull ("DataDesc")) {
                string dataDesc = dr ["DataDesc"].ToString ();
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
                dr ["DataDesc"] = dataDesc;
            }
        }
        rowIndex ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10071744_10071892_10_25
10071744_10071892_38_60
Title: Performant locking pattern 
----------------------------------------

public void Execute (object sender, EventArgs e) {
    lock (_lock)
    {
        var currentTime = DateTime.Now;
        if (_nextTriggerAt > currentTime)
            return;

        _nextTriggerAt = currentTime.AddMinutes (_triggerIntervalMins);
    } Task.Factory.StartNew (() = > {
    }, TaskCreationOptions.LongRunning);
}
----------------------------------------

public void Execute (object sender, EventArgs e) {
    var currentTime;
    lock (_lock)
    {
        currentTime = DateTime.Now;
        if (inTrigger || (_nextTriggerAt > currentTime))
            return;

        inTrigger = true;
    } Task.Factory.StartNew (() = > {
    }, TaskCreationOptions.LongRunning);
    lock (_lock)
    {
        inTrigger = false;
        _nextTriggerAt = DateTime.Now.AddMinutes (_triggerIntervalMins);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10071744_10071892_10_25
10071744_10073773_1_22
Title: Performant locking pattern 
----------------------------------------

public void Execute (object sender, EventArgs e) {
    lock (_lock)
    {
        var currentTime = DateTime.Now;
        if (_nextTriggerAt > currentTime)
            return;

        _nextTriggerAt = currentTime.AddMinutes (_triggerIntervalMins);
    } Task.Factory.StartNew (() = > {
    }, TaskCreationOptions.LongRunning);
}
----------------------------------------

public void Execute (object sender, EventArgs e) {
    var currentTime = DateTime.Now;
    var shouldRun = false;
    lock (_lock)
    {
        TimeSpan span = currentTime - _lastTriggeed;
        if (span.TotalMinutes > _autoReduceInterval) {
            _lastTriggered = currentTime;
            shouldRun = true;
        }
    } if (shouldRun) {
        Task.Factory.StartNew (() = > {
        }, TaskCreationOptions.LongRunning);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10071744_10071892_38_60
10071744_10073773_1_22
Title: Performant locking pattern 
----------------------------------------

public void Execute (object sender, EventArgs e) {
    var currentTime;
    lock (_lock)
    {
        currentTime = DateTime.Now;
        if (inTrigger || (_nextTriggerAt > currentTime))
            return;

        inTrigger = true;
    } Task.Factory.StartNew (() = > {
    }, TaskCreationOptions.LongRunning);
    lock (_lock)
    {
        inTrigger = false;
        _nextTriggerAt = DateTime.Now.AddMinutes (_triggerIntervalMins);
    }}
----------------------------------------

public void Execute (object sender, EventArgs e) {
    var currentTime = DateTime.Now;
    var shouldRun = false;
    lock (_lock)
    {
        TimeSpan span = currentTime - _lastTriggeed;
        if (span.TotalMinutes > _autoReduceInterval) {
            _lastTriggered = currentTime;
            shouldRun = true;
        }
    } if (shouldRun) {
        Task.Factory.StartNew (() = > {
        }, TaskCreationOptions.LongRunning);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10103774_10104529_1_11
10103774_10186992_1_10
Title: whats the pblm with the following c# code for storing date n time into sql server? 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string timeString = "11/12/2009 13:30:00.000";
    IFormatProvider culture = new CultureInfo ("en-US", true);
    DateTime dateVal = DateTime.ParseExact (timeString, "dd/MM/yyyy HH:mm:ss.fff", culture);
    cmd.CommandText = "insert into transaction values(" + label9.Text + ",'" + dateVal + "');";
    cmd.Connection = con;
    con.Open ();
    int x = cmd.ExecuteNonQuery ();
    MessageBox.Show ("Attendance recorded successfully");
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string d = DateTime.Now.ToString ("dd/MM/yyyy");
    string t = DateTime.Now.ToString ("hh:mm:ss tt");
    cmd.CommandText = "insert into transaction values(" + label9.Text + ",'" + d + "','" + t + "');";
    cmd.Connection = con;
    con.Open ();
    int x = cmd.ExecuteNonQuery ();
    MessageBox.Show ("Attendance recorded succesfully");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10120693_10120755_1_15
10120693_10120806_1_19
Title: "C# search text file return all lines containing a word" 
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    int counter = 0;
    string line;
    System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt");
    while ((line = file.ReadLine ()) != null) {
        if (line.Contains (txtZoek.Text)) {
            richtextbox1.Text += "\n" + line.ToString ();
            txtresult.Text += "\n" + line.ToString ();
        }
    }
    file.Close ();
}
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    int counter = 0;
    string line;
    StringBuilder sb = new StringBuilder ();
    using (System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt"))
    {
        while ((line = file.ReadLine ()) != null) {
            if (line.Contains (txtZoek.Text)) {
                sb.AppendLine (line.ToString ());
            }
        }
    } txtResult.Text = sb.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10120693_10120755_1_15
10120693_10120816_1_31
Title: "C# search text file return all lines containing a word" 
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    int counter = 0;
    string line;
    System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt");
    while ((line = file.ReadLine ()) != null) {
        if (line.Contains (txtZoek.Text)) {
            richtextbox1.Text += "\n" + line.ToString ();
            txtresult.Text += "\n" + line.ToString ();
        }
    }
    file.Close ();
}
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    try {
        int counter = 0;
        string line;
        List < String > LinesFound = new List < string > ();
        System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt");
        while ((line = file.ReadLine ()) != null) {
            if (line.Contains (txtZoek.Text)) {
                LinesFound.Add (line);
            }
        }
        file.Close ();
        foreach (string Line in LinesFound) {
            txtResult.Text = txtResult.Text + Line + Environment.NewLine;
        }
    }
    catch (Exception) {
        MessageBox.Show ("Error in btnZoek_Click");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10120693_10120806_1_19
10120693_10120816_1_31
Title: "C# search text file return all lines containing a word" 
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    int counter = 0;
    string line;
    StringBuilder sb = new StringBuilder ();
    using (System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt"))
    {
        while ((line = file.ReadLine ()) != null) {
            if (line.Contains (txtZoek.Text)) {
                sb.AppendLine (line.ToString ());
            }
        }
    } txtResult.Text = sb.ToString ();
}
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    try {
        int counter = 0;
        string line;
        List < String > LinesFound = new List < string > ();
        System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt");
        while ((line = file.ReadLine ()) != null) {
            if (line.Contains (txtZoek.Text)) {
                LinesFound.Add (line);
            }
        }
        file.Close ();
        foreach (string Line in LinesFound) {
            txtResult.Text = txtResult.Text + Line + Environment.NewLine;
        }
    }
    catch (Exception) {
        MessageBox.Show ("Error in btnZoek_Click");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10120693_10120811_1_15
10120693_10120816_1_31
Title: "C# search text file return all lines containing a word" 
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    int counter = 0;
    string line;
    StringBuilder str = new StringBuilder ();
    System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt");
    while ((line = file.ReadLine ()) != null) {
        if (line.Contains (txtZoek.Text)) {
            str.Append (line.ToString ());
        }
    }
    file.Close ();
}
----------------------------------------

private void btnZoek_Click (object sender, EventArgs e) {
    try {
        int counter = 0;
        string line;
        List < String > LinesFound = new List < string > ();
        System.IO.StreamReader file = new System.IO.StreamReader ("c:\\log.txt");
        while ((line = file.ReadLine ()) != null) {
            if (line.Contains (txtZoek.Text)) {
                LinesFound.Add (line);
            }
        }
        file.Close ();
        foreach (string Line in LinesFound) {
            txtResult.Text = txtResult.Text + Line + Environment.NewLine;
        }
    }
    catch (Exception) {
        MessageBox.Show ("Error in btnZoek_Click");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10124434_10124497_1_17
10124434_10124651_1_17
Title: How do I return a list of my folders with the files inside? 
----------------------------------------

public Tuple < List < DirectoryInfo >, List < FileInfo > > GetTopFolders () {
    List < DirectoryInfo > Folders = new List < DirectoryInfo > ();
    List < FileInfo > Files = new List < FileInfo > ();
    foreach (DirectoryInfo t in di.GetDirectories ()) {
        Folders.Add (t);
        foreach (FileInfo f in di.GetFiles ()) {
            Files.Add (f);
        }
    }
    return Tuple.Create (Folders, Files);
}
----------------------------------------

private Dictionary < DirectoryInfo, List < FileInfo > > GetTopFolders () {
    Dictionary < DirectoryInfo, List < FileInfo > > r = new Dictionary < DirectoryInfo, List < FileInfo > > ();
    DirectoryInfo di = new DirectoryInfo ("C://inetpub//wwwroot//Files//");
    di.GetDirectories ();
    r.Add (di, di.GetFiles ().ToList ());
    foreach (DirectoryInfo t in di.GetDirectories ()) {
        r.Add (t, t.GetFiles ().ToList ());
    }
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1012708_52336235_1_21
1012708_9930585_1_20
Title: DataGridView Selected Row Move UP and DOWN 
----------------------------------------

private void btnUp_Click (object sender, EventArgs e) {
    var row = dgvExportLocations.SelectedRows [0];
    if (row != null && row.Index > 0) {
        var swapRow = dgvExportLocations.Rows [row.Index - 1];
        object [] values = new object [swapRow.Cells.Count];
        foreach (DataGridViewCell cell in swapRow.Cells) {
            values [cell.ColumnIndex] = cell.Value;
            cell.Value = row.Cells [cell.ColumnIndex].Value;
        }
        foreach (DataGridViewCell cell in row.Cells)
            cell.Value = values [cell.ColumnIndex];

        dgvExportLocations.Rows [row.Index - 1].Selected = true;
    }
}
----------------------------------------

private void btnUp_Click (object sender, EventArgs e) {
    DataGridView dgv = gridTasks;
    try {
        int totalRows = dgv.Rows.Count;
        int rowIndex = dgv.SelectedCells [0].OwningRow.Index;
        if (rowIndex == 0)
            return;

        int colIndex = dgv.SelectedCells [0].OwningColumn.Index;
        DataGridViewRow selectedRow = dgv.Rows [rowIndex];
        dgv.Rows.Remove (selectedRow);
        dgv.Rows.Insert (rowIndex - 1, selectedRow);
        dgv.ClearSelection ();
        dgv.Rows [rowIndex - 1].Cells [colIndex].Selected = true;
    }
    catch {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10134632_10138818_1_39
10134632_10138818_41_51
Title: The remote server returned an error: (405) Method Not Allowed. WCF REST Service 
----------------------------------------

private string UseHttpWebApproach < T > (string serviceUrl, string resourceUrl, string method, T requestBody) {
    string responseMessage = null;
    var request = WebRequest.Create (string.Concat (serviceUrl, resourceUrl)) as HttpWebRequest;
    if (request != null) {
        request.ContentType = "application/xml";
        request.Method = method;
    }
    if (method == "POST" && requestBody != null) {
        byte [] requestBodyBytes = ToByteArrayUsingDataContractSer (requestBody);
        request.ContentLength = requestBodyBytes.Length;
        using (Stream postStream = request.GetRequestStream ())
        postStream.Write (requestBodyBytes, 0, requestBodyBytes.Length);
    }
    if (request != null) {
        var response = request.GetResponse () as HttpWebResponse;
        if (response.StatusCode == HttpStatusCode.OK) {
            Stream responseStream = response.GetResponseStream ();
            if (responseStream != null) {
                var reader = new StreamReader (responseStream);
                responseMessage = reader.ReadToEnd ();
            }
        } else {
            responseMessage = response.StatusDescription;
        }
    }
    return responseMessage;
}
----------------------------------------

private static byte [] ToByteArrayUsingDataContractSer < T > (T requestBody) {
    byte [] bytes = null;
    var serializer1 = new DataContractSerializer (typeof (T));
    var ms1 = new MemoryStream ();
    serializer1.WriteObject (ms1, requestBody);
    ms1.Position = 0;
    var reader = new StreamReader (ms1);
    bytes = ms1.ToArray ();
    return bytes;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10144582_10144614_10_22
10144582_10145123_3_18
Title: Sorting in a custom order 
----------------------------------------

int Compare (int v1, int v2) {
    int o1 = getFirstOrder (v1);
    int o2 = getFirstOrder (v2);
    if (o1 < o2 || (o1 == o2 && v1 < v2)) {
        return - 1;
    } else if (o1 > o2 || (o1 == o2 && v1 > v2)) {
        return 1;
    } else {
        return 0;
    }
}
----------------------------------------

public int Compare (Code x, Code y) {
    var order = "4597862310";
    var bodyStyleX = x.Substring (6, 2);
    var bodyStyleY = y.Substring (6, 2);
    if (bodyStyleX [0].Equals (bodyStyleY [0]))
        return string.Compare (bodyStyleX, bodyStyleY, true);

    var indexX = order.IndexOf (bodyStyleX [0]);
    var indexY = order.IndexOf (bodyStyleY [0]);
    return indexX < indexY ? - 1 : 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10146854_10355308_1_7
10146854_10355308_9_15
Title: Most efficient way to get a hashable object for an arbitrary set of keys (of arbitrary data type) 
----------------------------------------

public override bool Equals (object obj) {
    if (ReferenceEquals (null, obj))
        return false;

    if (ReferenceEquals (this, obj))
        return true;

    if (obj.GetType () != typeof (ValueAwareEnumerable < T >))
        return false;

    return Equals ((ValueAwareEnumerable < T >) obj);
}
----------------------------------------

public bool Equals (ValueAwareEnumerable < T > other) {
    if (ReferenceEquals (null, other))
        return false;

    if (ReferenceEquals (this, other))
        return true;

    return _wrappedEnumerable.SequenceEqual (other);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10154731_10154829_1_29
10154731_10154839_1_45
Title: How to check for existing records 
----------------------------------------

[HttpPost] public ActionResult Create (tblGame tblgame, HttpPostedFileBase image1, HttpPostedFileBase image2) {
    try {
        if (ModelState.IsValid) {
            var game = db.tblGames.Single (g = > g.GameName == tblGame.GameName);
            if (game == null) {
            } else {
            }
        }
    }
}
----------------------------------------

[HttpPost] public ActionResult Create (tblGame tblgame, HttpPostedFileBase image1, HttpPostedFileBase image2) {
    try {
        if (ModelState.IsValid) {
            var mygame = db.tblGames.Where (x = > x.GameName == tblgame.GameName).SingleOrDefault ();
            if (mygame != null) {
                if (image1 != null) {
                    string image = image1.FileName;
                    tblgame.Image = image;
                    var image1Path = Path.Combine (Server.MapPath ("~/Content/UploadImages"), image);
                    image1.SaveAs (image1Path);
                }
                if (image2 != null) {
                    string Image2 = image2.FileName;
                    tblgame.Image2 = Image2;
                    var image2Path = Path.Combine (Server.MapPath ("~/Content/UploadImages"), Image2);
                    image2.SaveAs (image2Path);
                }
                db.tblGames.Add (tblgame);
                db.SaveChanges ();
                return RedirectToAction ("Index");
            } else {
                ModelState.AddModelError ("", "A game review already exists");
            }
        }
    }
    catch {
        ModelState.AddModelError ("", "The upload of the images as failed");
    }
    ViewBag.ConsoleNameIDFK = new SelectList (db.tblConsoles, "ConsoleName", "ConsoleName", tblgame.ConsoleNameIDFK);
    return View (tblgame);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10163083_10163136_1_18
10163083_10163143_8_15
Title: Parse method for the custom class C# 
----------------------------------------

public static MyCustomClass Parse (object o) {
    if (o == null)
        return null;

    try {
        if (o is MyCustomClass)
            return (MyCustomClass) o;

    }
    catch {
        return null;
    }
    return null;
}
----------------------------------------

public static bool Parse (string s, out MyClass res) {
    res = null;
    if (s == null)
        return false;

    var tokens = s.Split (new [] {';'});
    if (tokens.Length != 2)
        return false;

    res = new MyClass (tokens [0], tokens [1]);
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10168240_10176980_48_82
10168240_10177020_18_53
Title: Encrypting & Decrypting a String in C# 
----------------------------------------

public byte [] Encrypt (byte [] data, int length) {
    try {
        var ms = new MemoryStream ();
        var cs = new CryptoStream (ms, symm.CreateEncryptor (symm.Key, symm.IV), CryptoStreamMode.Write);
        cs.Write (data, 0, length);
        cs.FlushFinalBlock ();
        byte [] ret = ms.ToArray ();
        cs.Close ();
        ms.Close ();
        return ret;
    }
    catch (CryptographicException ex) {
        Console.WriteLine ("A cryptographic error occured: {0}", ex.Message);
    }
    return null;
}
----------------------------------------

public static string Encrypt (string plainText, string passPhrase) {
    var saltStringBytes = Generate256BitsOfRandomEntropy ();
    var ivStringBytes = Generate256BitsOfRandomEntropy ();
    var plainTextBytes = Encoding.UTF8.GetBytes (plainText);
    using (var password = new Rfc2898DeriveBytes (passPhrase, saltStringBytes, DerivationIterations))
    {
        var keyBytes = password.GetBytes (Keysize / 8);
        using (var symmetricKey = new RijndaelManaged ())
        {
            symmetricKey.BlockSize = 256;
            symmetricKey.Mode = CipherMode.CBC;
            symmetricKey.Padding = PaddingMode.PKCS7;
            using (var encryptor = symmetricKey.CreateEncryptor (keyBytes, ivStringBytes))
            {
                using (var memoryStream = new MemoryStream ())
                {
                    using (var cryptoStream = new CryptoStream (memoryStream, encryptor, CryptoStreamMode.Write))
                    {
                        cryptoStream.Write (plainTextBytes, 0, plainTextBytes.Length);
                        cryptoStream.FlushFinalBlock ();
                        var cipherTextBytes = saltStringBytes;
                        cipherTextBytes = cipherTextBytes.Concat (ivStringBytes).ToArray ();
                        cipherTextBytes = cipherTextBytes.Concat (memoryStream.ToArray ()).ToArray ();
                        memoryStream.Close ();
                        cryptoStream.Close ();
                        return Convert.ToBase64String (cipherTextBytes);
                    }}}}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10168240_10176980_90_117
10168240_10177020_55_91
Title: Encrypting & Decrypting a String in C# 
----------------------------------------

public byte [] Decrypt (byte [] data, int length) {
    try {
        MemoryStream ms = new MemoryStream (data);
        CryptoStream cs = new CryptoStream (ms, symm.CreateDecryptor (symm.Key, symm.IV), CryptoStreamMode.Read);
        byte [] result = new byte [length];
        cs.Read (result, 0, result.Length);
        return result;
    }
    catch (CryptographicException ex) {
        Console.WriteLine ("A cryptographic error occured: {0}", ex.Message);
    }
    return null;
}
----------------------------------------

public static string Decrypt (string cipherText, string passPhrase) {
    var cipherTextBytesWithSaltAndIv = Convert.FromBase64String (cipherText);
    var saltStringBytes = cipherTextBytesWithSaltAndIv.Take (Keysize / 8).ToArray ();
    var ivStringBytes = cipherTextBytesWithSaltAndIv.Skip (Keysize / 8).Take (Keysize / 8).ToArray ();
    var cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip ((Keysize / 8) * 2).Take (cipherTextBytesWithSaltAndIv.Length - ((Keysize / 8) * 2)).ToArray ();
    using (var password = new Rfc2898DeriveBytes (passPhrase, saltStringBytes, DerivationIterations))
    {
        var keyBytes = password.GetBytes (Keysize / 8);
        using (var symmetricKey = new RijndaelManaged ())
        {
            symmetricKey.BlockSize = 256;
            symmetricKey.Mode = CipherMode.CBC;
            symmetricKey.Padding = PaddingMode.PKCS7;
            using (var decryptor = symmetricKey.CreateDecryptor (keyBytes, ivStringBytes))
            {
                using (var memoryStream = new MemoryStream (cipherTextBytes))
                {
                    using (var cryptoStream = new CryptoStream (memoryStream, decryptor, CryptoStreamMode.Read))
                    {
                        var plainTextBytes = new byte [cipherTextBytes.Length];
                        var decryptedByteCount = cryptoStream.Read (plainTextBytes, 0, plainTextBytes.Length);
                        memoryStream.Close ();
                        cryptoStream.Close ();
                        return Encoding.UTF8.GetString (plainTextBytes, 0, decryptedByteCount);
                    }}}}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10182751_10182935_8_36
10182751_46145422_6_21
Title: Server Client send/receive simple text 
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    TcpClient client = listener.AcceptTcpClient ();
    NetworkStream nwStream = client.GetStream ();
    byte [] buffer = new byte [client.ReceiveBufferSize];
    int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
    string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
    Console.WriteLine ("Received : " + dataReceived);
    Console.WriteLine ("Sending back : " + dataReceived);
    nwStream.Write (buffer, 0, bytesRead);
    client.Close ();
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Socket server = new Socket (AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    IPEndPoint endPoint = new IPEndPoint (IPAddress.Any, 8888);
    server.Bind (endPoint);
    server.Listen (20);
    while (true) {
        Console.WriteLine ("Waiting...");
        klient = server.Accept ();
        Console.WriteLine ("Client connected");
        Task t = new Task (ServisClient);
        t.Start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10182751_46145422_6_21
10182751_49572016_1_31
Title: Server Client send/receive simple text 
----------------------------------------

static void Main (string [] args) {
    Socket server = new Socket (AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    IPEndPoint endPoint = new IPEndPoint (IPAddress.Any, 8888);
    server.Bind (endPoint);
    server.Listen (20);
    while (true) {
        Console.WriteLine ("Waiting...");
        klient = server.Accept ();
        Console.WriteLine ("Client connected");
        Task t = new Task (ServisClient);
        t.Start ();
    }
}
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        TcpClient client = listener.AcceptTcpClient ();
        NetworkStream nwStream = client.GetStream ();
        byte [] buffer = new byte [client.ReceiveBufferSize];
        int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
        string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
        Console.WriteLine ("Received : " + dataReceived);
        Console.WriteLine ("Sending back : " + dataReceived);
        nwStream.Write (buffer, 0, bytesRead);
        client.Close ();
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1018407_1018470_1_13
1018407_1018624_1_19
Title: What is the most elegant way to get a set of items by index from a collection? 
----------------------------------------

IEnumerable < T > ByIndices < T > (ICollection < T > data, IList < int > indices) {
    int current = 0;
    foreach (var datum in data.Select ((x, i) = > new {Value = x, Index = i})) {
        if (datum.Index == indices [current]) {
            yield return datum.Value;
            if (++ current == indices.Count)
                yield break;

        }
    }
}
----------------------------------------

public static IEnumerable < T > GetIndexedItems < T > (this IEnumerable < T > collection, IEnumerable < int > indices) {
    int currentIndex = - 1;
    using (var collectionEnum = collection.GetEnumerator ())
    {
        foreach (int index in indices) {
            while (collectionEnum.MoveNext ()) {
                currentIndex += 1;
                if (currentIndex == index) {
                    yield return collectionEnum.Current;
                    break;
                }
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1018407_1018470_1_13
1018407_1018689_1_20
Title: What is the most elegant way to get a set of items by index from a collection? 
----------------------------------------

IEnumerable < T > ByIndices < T > (ICollection < T > data, IList < int > indices) {
    int current = 0;
    foreach (var datum in data.Select ((x, i) = > new {Value = x, Index = i})) {
        if (datum.Index == indices [current]) {
            yield return datum.Value;
            if (++ current == indices.Count)
                yield break;

        }
    }
}
----------------------------------------

public static IEnumerable < T > IndexedLookup < T > (IEnumerable < int > indexes, IEnumerable < T > items) {
    using (var indexesEnum = indexes.GetEnumerator ())
    using (var itemsEnum = items.GetEnumerator ())
    {
        int currentIndex = - 1;
        while (indexesEnum.MoveNext ()) {
            while (currentIndex != indexesEnum.Current) {
                if (! itemsEnum.MoveNext ())
                    yield break;

                currentIndex ++;
            }
            yield return itemsEnum.Current;
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1018407_1018470_1_13
1018407_1025137_11_24
Title: What is the most elegant way to get a set of items by index from a collection? 
----------------------------------------

IEnumerable < T > ByIndices < T > (ICollection < T > data, IList < int > indices) {
    int current = 0;
    foreach (var datum in data.Select ((x, i) = > new {Value = x, Index = i})) {
        if (datum.Index == indices [current]) {
            yield return datum.Value;
            if (++ current == indices.Count)
                yield break;

        }
    }
}
----------------------------------------

public static IEnumerable < T > GetIndexedItemsEric < T > (this IEnumerable < T > collection, IEnumerable < int > indices) {
    int currentIndex = - 1;
    using (var collectionEnum = collection.GetEnumerator ())
    {
        foreach (int index in indices) {
            while (collectionEnum.MoveNext ()) {
                currentIndex += 1;
                if (currentIndex == index) {
                    yield return collectionEnum.Current;
                    break;
                }
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1018407_1018624_1_19
1018407_1018689_1_20
Title: What is the most elegant way to get a set of items by index from a collection? 
----------------------------------------

public static IEnumerable < T > GetIndexedItems < T > (this IEnumerable < T > collection, IEnumerable < int > indices) {
    int currentIndex = - 1;
    using (var collectionEnum = collection.GetEnumerator ())
    {
        foreach (int index in indices) {
            while (collectionEnum.MoveNext ()) {
                currentIndex += 1;
                if (currentIndex == index) {
                    yield return collectionEnum.Current;
                    break;
                }
            }
        }
    }}
----------------------------------------

public static IEnumerable < T > IndexedLookup < T > (IEnumerable < int > indexes, IEnumerable < T > items) {
    using (var indexesEnum = indexes.GetEnumerator ())
    using (var itemsEnum = items.GetEnumerator ())
    {
        int currentIndex = - 1;
        while (indexesEnum.MoveNext ()) {
            while (currentIndex != indexesEnum.Current) {
                if (! itemsEnum.MoveNext ())
                    yield break;

                currentIndex ++;
            }
            yield return itemsEnum.Current;
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1018407_1018689_1_20
1018407_1025137_11_24
Title: What is the most elegant way to get a set of items by index from a collection? 
----------------------------------------

public static IEnumerable < T > IndexedLookup < T > (IEnumerable < int > indexes, IEnumerable < T > items) {
    using (var indexesEnum = indexes.GetEnumerator ())
    using (var itemsEnum = items.GetEnumerator ())
    {
        int currentIndex = - 1;
        while (indexesEnum.MoveNext ()) {
            while (currentIndex != indexesEnum.Current) {
                if (! itemsEnum.MoveNext ())
                    yield break;

                currentIndex ++;
            }
            yield return itemsEnum.Current;
        }
    }}
----------------------------------------

public static IEnumerable < T > GetIndexedItemsEric < T > (this IEnumerable < T > collection, IEnumerable < int > indices) {
    int currentIndex = - 1;
    using (var collectionEnum = collection.GetEnumerator ())
    {
        foreach (int index in indices) {
            while (collectionEnum.MoveNext ()) {
                currentIndex += 1;
                if (currentIndex == index) {
                    yield return collectionEnum.Current;
                    break;
                }
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1019793_44369095_1_16
1019793_46230855_1_13
Title: How can I convert String to Int? 
----------------------------------------

static int convertToInt (string a) {
    int x = 0;
    Char [] charArray = a.ToCharArray ();
    int j = charArray.Length;
    for (int i = 0; i < charArray.Length; i ++) {
        j --;
        int s = (int) Math.Pow (10, j);
        x += ((int) Char.GetNumericValue (charArray [i]) * s);
    }
    return x;
}
----------------------------------------

static int convertToInt (string a) {
    int x = 0;
    for (int i = 0; i < a.Length; i ++) {
        int temp = a [i] - '0';
        if (temp != 0) {
            x += temp * (int) Math.Pow (10, (a.Length - (i + 1)));
        }
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10208405_10208622_12_58
10208405_10208724_6_42
Title: how to read & write xml file in C# not rely on the tag name? 
----------------------------------------

static void Main (string [] args) {
    var items = new root {a = "i belong to a", b = new List < bb > {new bb {bbClassProperty = new List < int > {1, 2, 3, 4, 5}}, new bb {bbClassProperty = new List < int > {1, 2, 3, 4, 5}}}};
    XmlSerializer serializer = new XmlSerializer (typeof (root));
    using (var textWriter = new StreamWriter (@"C:\root.xml"))
    {
        serializer.Serialize (textWriter, items);
        textWriter.Close ();
    } using (var stream = new StreamReader (@"C:\root.xml"))
    {
        var yourObject = serializer.Deserialize (stream);
    } Console.Read ();
}
----------------------------------------

static void Main () {
    using (XmlReader reader = XmlReader.Create ("perls.xml"))
    {
        while (reader.Read ()) {
            if (reader.IsStartElement ()) {
                switch (reader.Name) {
                    case "perls" :
                        Console.WriteLine ("Start <perls> element.");
                        break;
                    case "article" :
                        Console.WriteLine ("Start <article> element.");
                        string attribute = reader ["name"];
                        if (attribute != null) {
                            Console.WriteLine ("  Has attribute name: " + attribute);
                        }
                        if (reader.Read ()) {
                            Console.WriteLine ("  Text node: " + reader.Value.Trim ());
                        }
                        break;
                }
            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10209291_10210465_186_204
10209291_10210465_210_330
Title: PGP Encrypt and Decrypt 
----------------------------------------

public static void Decrypt (string inputfile, string privateKeyFile, string passPhrase, string outputFile) {
    if (! File.Exists (inputfile))
        throw new FileNotFoundException (String.Format ("Encrypted File [{0}] not found.", inputfile));

    if (! File.Exists (privateKeyFile))
        throw new FileNotFoundException (String.Format ("Private Key File [{0}] not found.", privateKeyFile));

    if (String.IsNullOrEmpty (outputFile))
        throw new ArgumentNullException ("Invalid Output file path.");

    using (Stream inputStream = File.OpenRead (inputfile))
    {
        using (Stream keyIn = File.OpenRead (privateKeyFile))
        {
            Decrypt (inputStream, keyIn, passPhrase, outputFile);
        }}}
----------------------------------------

public static void Decrypt (Stream inputStream, Stream privateKeyStream, string passPhrase, string outputFile) {
    try {
        PgpObjectFactory pgpF = null;
        PgpEncryptedDataList enc = null;
        PgpObject o = null;
        PgpPrivateKey sKey = null;
        PgpPublicKeyEncryptedData pbe = null;
        PgpSecretKeyRingBundle pgpSec = null;
        pgpF = new PgpObjectFactory (PgpUtilities.GetDecoderStream (inputStream));
        pgpSec = new PgpSecretKeyRingBundle (PgpUtilities.GetDecoderStream (privateKeyStream));
        if (pgpF != null)
            o = pgpF.NextPgpObject ();

        if (o is PgpEncryptedDataList)
            enc = (PgpEncryptedDataList) o;
        else
            enc = (PgpEncryptedDataList) pgpF.NextPgpObject ();

        foreach (PgpPublicKeyEncryptedData pked in enc.GetEncryptedDataObjects ()) {
            sKey = FindSecretKey (pgpSec, pked.KeyId, passPhrase.ToCharArray ());
            if (sKey != null) {
                pbe = pked;
                break;
            }
        }
        if (sKey == null)
            throw new ArgumentException ("Secret key for message not found.");

        PgpObjectFactory plainFact = null;
        using (Stream clear = pbe.GetDataStream (sKey))
        {
            plainFact = new PgpObjectFactory (clear);
        } PgpObject message = plainFact.NextPgpObject ();
        if (message is PgpCompressedData) {
            PgpCompressedData cData = (PgpCompressedData) message;
            PgpObjectFactory of = null;
            using (Stream compDataIn = cData.GetDataStream ())
            {
                of = new PgpObjectFactory (compDataIn);
            } message = of.NextPgpObject ();
            if (message is PgpOnePassSignatureList) {
                message = of.NextPgpObject ();
                PgpLiteralData Ld = null;
                Ld = (PgpLiteralData) message;
                using (Stream output = File.Create (outputFile))
                {
                    Stream unc = Ld.GetInputStream ();
                    Streams.PipeAll (unc, output);
                }} else {
                PgpLiteralData Ld = null;
                Ld = (PgpLiteralData) message;
                using (Stream output = File.Create (outputFile))
                {
                    Stream unc = Ld.GetInputStream ();
                    Streams.PipeAll (unc, output);
                }}
        } else if (message is PgpLiteralData) {
            PgpLiteralData ld = (PgpLiteralData) message;
            string outFileName = ld.FileName;
            using (Stream fOut = File.Create (outputFile))
            {
                Stream unc = ld.GetInputStream ();
                Streams.PipeAll (unc, fOut);
            }} else if (message is PgpOnePassSignatureList)
            throw new PgpException ("Encrypted message contains a signed message - not literal data.");
        else
            throw new PgpException ("Message is not a simple encrypted file - type unknown.");

    }
    catch (PgpException ex) {
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10210238_10210647_1_19
10210238_10210668_1_19
Title: Check for existing file 
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

protected void DiasShow () {
    var mapPath = HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/");
    var images = Directory.GetFiles (mapPath).Select (file = > new FileInfo (file)).Where (fi = > fi.Extension.EndsWith ("jpg", StringComparison.OrdinalIgnoreCase) || fi.Extension.EndsWith ("jpeg", StringComparison.OrdinalIgnoreCase)).ToList ();
    var rand = new Random ();
    while (images.Count > 0) {
        var i = rand.Next (images.Count);
        lbl_Dias.Text += "<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + images [i].Name + "\"/>";
        images.RemoveAt (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10218181_27252376_18_31
10218181_27252376_1_16
Title: XmlSerializer.Serialize Stripping the <xml> tag 
----------------------------------------

public static void Serialize < T > (T obj, string filepath) {
    XmlWriterSettings settings = new XmlWriterSettings ();
    settings.OmitXmlDeclaration = true;
    var writer = new StreamWriter (filepath);
    XmlWriter xmlWriter = XmlWriter.Create (writer, settings);
    XmlSerializerNamespaces names = new XmlSerializerNamespaces ();
    names.Add ("", "");
    XmlSerializer serializer = new XmlSerializer (typeof (T));
    serializer.Serialize (xmlWriter, obj, names);
}
----------------------------------------

public static string Serialize < T > (T obj) {
    XmlWriterSettings settings = new XmlWriterSettings ();
    settings.OmitXmlDeclaration = true;
    var writer = new StringWriter ();
    XmlWriter xmlWriter = XmlWriter.Create (writer, settings);
    XmlSerializerNamespaces names = new XmlSerializerNamespaces ();
    names.Add ("", "");
    XmlSerializer serializer = new XmlSerializer (typeof (T));
    serializer.Serialize (xmlWriter, obj, names);
    var xml = writer.ToString ();
    return xml;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10218181_27252376_18_31
10218181_39737055_1_18
Title: XmlSerializer.Serialize Stripping the <xml> tag 
----------------------------------------

public static void Serialize < T > (T obj, string filepath) {
    XmlWriterSettings settings = new XmlWriterSettings ();
    settings.OmitXmlDeclaration = true;
    var writer = new StreamWriter (filepath);
    XmlWriter xmlWriter = XmlWriter.Create (writer, settings);
    XmlSerializerNamespaces names = new XmlSerializerNamespaces ();
    names.Add ("", "");
    XmlSerializer serializer = new XmlSerializer (typeof (T));
    serializer.Serialize (xmlWriter, obj, names);
}
----------------------------------------

public string XmlSerialize < T > (T entity) where T : class {
    XmlWriterSettings settings = new XmlWriterSettings ();
    settings.OmitXmlDeclaration = true;
    XmlSerializer xsSubmit = new XmlSerializer (typeof (T));
    StringWriter sw = new StringWriter ();
    using (XmlWriter writer = XmlWriter.Create (sw, settings))
    {
        var xmlns = new XmlSerializerNamespaces ();
        xmlns.Add (string.Empty, string.Empty);
        xsSubmit.Serialize (writer, entity, xmlns);
        return sw.ToString ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10218181_27252376_1_16
10218181_39737055_1_18
Title: XmlSerializer.Serialize Stripping the <xml> tag 
----------------------------------------

public static string Serialize < T > (T obj) {
    XmlWriterSettings settings = new XmlWriterSettings ();
    settings.OmitXmlDeclaration = true;
    var writer = new StringWriter ();
    XmlWriter xmlWriter = XmlWriter.Create (writer, settings);
    XmlSerializerNamespaces names = new XmlSerializerNamespaces ();
    names.Add ("", "");
    XmlSerializer serializer = new XmlSerializer (typeof (T));
    serializer.Serialize (xmlWriter, obj, names);
    var xml = writer.ToString ();
    return xml;
}
----------------------------------------

public string XmlSerialize < T > (T entity) where T : class {
    XmlWriterSettings settings = new XmlWriterSettings ();
    settings.OmitXmlDeclaration = true;
    XmlSerializer xsSubmit = new XmlSerializer (typeof (T));
    StringWriter sw = new StringWriter ();
    using (XmlWriter writer = XmlWriter.Create (sw, settings))
    {
        var xmlns = new XmlSerializerNamespaces ();
        xmlns.Add (string.Empty, string.Empty);
        xsSubmit.Serialize (writer, entity, xmlns);
        return sw.ToString ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10234219_10245749_55_66
10234219_10245749_68_84
Title: How to implement a Security token in a WCF soap response? 
----------------------------------------

private XmlNode FindNode (string name, XmlDocument xmlDoc) {
    XmlNode node = null;
    for (int i = 0; i < xmlDoc.ChildNodes.Count; i ++) {
        node = FindNode (name, xmlDoc.ChildNodes [i]);
        if (node != null)
            break;

    }
    return node;
}
----------------------------------------

private XmlNode FindNode (string name, XmlNode parentNode) {
    if (parentNode != null && parentNode.Name.ToLower ().Contains (name)) {
        return parentNode;
    }
    XmlNode childNode = null;
    for (int i = 0; i < parentNode.ChildNodes.Count; i ++) {
        childNode = FindNode (name, parentNode.ChildNodes [i]);
        if (childNode != null)
            break;

    }
    return childNode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10252207_10252325_26_38
10252207_10284149_16_26
Title: How to serialize interface typed member 
----------------------------------------

public static string Serialize (object obj) {
    Type type = obj.GetType ();
    var stringBuilder = new StringBuilder ();
    var serializer = new XmlSerializer (type);
    serializer.Serialize (new StringWriter (stringBuilder), obj);
    XDocument doc = XDocument.Load (new StringReader (stringBuilder.ToString ()));
    foreach (XElement xElement in SerializeAnyThing (obj)) {
        doc.Descendants ().First ().Add (xElement);
    }
    return doc.ToString ();
}
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10258711_10258788_1_12
10258711_10259040_1_54
Title: I want something like the switch statement (but different of course) 
----------------------------------------

public static IEnumerable < string > SeverityOrHigher (string severity) {
    var result = new List < string > ();
    var severities = new List < string > {"ALL", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "OFF"};
    severity = severity.ToUpper ();
    if (severities.Contain (severity))
        result.Add (severity);

    return result;
}
----------------------------------------

public static IEnumerable < string > SeverityOrHigher (string severity) {
    var lastFound = - 1;
    var severityList = new List < string > () {"ALL", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "OFF"};
    var results = new List < string > ();
    foreach (var t in severityList) {
        if (lastFound > - 1) {
            for (var index = lastFound + 1; index < severityList.Count; index ++) {
                results.Add (severityList [index]);
            }
            return results;
        }
        switch (severity.ToUpper ()) {
            case "ALL" :
                results.Add (severity);
                lastFound = 0;
                break;
            case "DEBUG" :
                lastFound = 1;
                results.Add (severity);
                break;
            case "INFO" :
                lastFound = 2;
                results.Add (severity);
                break;
            case "WARN" :
                lastFound = 3;
                results.Add (severity);
                break;
            case "ERROR" :
                lastFound = 4;
                results.Add (severity);
                break;
            case "FATAL" :
                lastFound = 5;
                results.Add (severity);
                break;
            case "OFF" :
                lastFound = 6;
                results.Add (severity);
                break;
        }
    }
    return results;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10320092_10359145_5_15
10320092_10363360_27_47
Title: Posting an arbitrary amount of text areas 
----------------------------------------

public ActionResult Index () {
    AnswersViewModel model = new AnswersViewModel ();
    model.Answers = new List < Answer > ();
    IEnumerable < Question > questions = _questionRepository.GetRandomQuestions ();
    foreach (Question question in questions) {
        model.Answers.Add (new Answer () {QuestionText = question.QuestionText});
    }
    return View (model);
}
----------------------------------------

public ActionResult Index () {
    var qna = new SoQna.ViewModels.QnaViewModel {Answers = new List < SoQna.ViewModels.AnswerToQuestion > ()};
    foreach (var question in _qnaRepo) {
        if (question.QuestionId == 1)
            continue;

        qna.Answers.Add (new SoQna.ViewModels.AnswerToQuestion {ToQuestionId = question.QuestionId, QuestionText = question.QuestionText, AnswerText = "Put your answer here"});
    }
    return View (qna);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10389727_10389840_1_14
10389727_10399450_77_88
Title: "Socket single client/server connection server can send multiple times client can only once" 
----------------------------------------

public void sendMsg (string s) {
    bool x = true;
    while (true) {
        Thread.Sleep (500);
        if (x == true) {
            byte [] msgBuffer = Encoding.ASCII.GetBytes (s);
            sck.Send (msgBuffer);
            x = false;
        }
    }
}
----------------------------------------

static void sendMsg () {
    try {
        buffer = Encoding.Default.GetBytes (name);
        acc.Send (buffer);
    }
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10389727_10390066_123_144
10389727_10390066_362_388
Title: "Socket single client/server connection server can send multiple times client can only once" 
----------------------------------------

public void Send (Socket socket, MessageBase msg) {
    try {
        byte [] bytes = msg.Serialize ();
        if (socket.Connected) {
            socket.BeginSend (bytes, 0, bytes.Length, 0, SendCallback, socket);
        } else {
            HandleClientDisconnect (socket);
        }
    }
    catch (SocketException) {
        HandleClientDisconnect (socket);
    }
}
----------------------------------------

public void Send (MessageBase msg) {
    try {
        byte [] bytes = msg.Serialize ();
        if (this.Connected) {
            this.BeginSend (bytes, 0, bytes.Length, 0, SendCallback, this);
        } else {
            Reconnect ();
        }
    }
    catch (SocketException sox) {
        Reconnect ();
    }
    catch (Exception ex) {
        int i = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10407422_10419362_24_38
10407422_10419362_95_125
Title: How to write in a Xml using derived classes? 
----------------------------------------

public void WriteXml (XmlWriter writer) {
    writer.WriteStartElement ("Foo");
    writer.WriteStartAttribute ("Type", "http://example.com/2007/ns1");
    writer.WriteString (GetType ().Name);
    writer.WriteEndAttribute ();
    writer.WriteStartAttribute ("Value");
    writer.WriteString (Value.ToString ());
    writer.WriteEndAttribute ();
    writer.WriteEndElement ();
}
----------------------------------------

public void WriteXml (XmlWriter writer) {
    writer.WriteStartElement ("Foo");
    writer.WriteStartAttribute ("Type", "http://example.com/2007/ns1");
    writer.WriteString (GetType ().Name);
    writer.WriteEndAttribute ();
    writer.WriteStartElement ("Value");
    if (Value != null) {
        writer.WriteStartElement ("List");
        writer.WriteStartAttribute ("Type", "http://example.com/2007/ns1");
        writer.WriteString (typeof (double).Name);
        writer.WriteEndAttribute ();
        foreach (double value in Value) {
            writer.WriteElementString ("Element", value.ToString ());
        }
        writer.WriteEndElement ();
    }
    writer.WriteEndElement ();
    writer.WriteEndElement ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10407422_10419362_60_73
10407422_10419362_95_125
Title: How to write in a Xml using derived classes? 
----------------------------------------

public void WriteXml (XmlWriter writer) {
    writer.WriteStartElement ("Foo");
    writer.WriteStartAttribute ("Type", "http://example.com/2007/ns1");
    writer.WriteString (GetType ().Name);
    writer.WriteEndAttribute ();
    writer.WriteStartAttribute ("Value");
    writer.WriteString (Value.ToString ());
    writer.WriteEndAttribute ();
    writer.WriteEndElement ();
}
----------------------------------------

public void WriteXml (XmlWriter writer) {
    writer.WriteStartElement ("Foo");
    writer.WriteStartAttribute ("Type", "http://example.com/2007/ns1");
    writer.WriteString (GetType ().Name);
    writer.WriteEndAttribute ();
    writer.WriteStartElement ("Value");
    if (Value != null) {
        writer.WriteStartElement ("List");
        writer.WriteStartAttribute ("Type", "http://example.com/2007/ns1");
        writer.WriteString (typeof (double).Name);
        writer.WriteEndAttribute ();
        foreach (double value in Value) {
            writer.WriteElementString ("Element", value.ToString ());
        }
        writer.WriteEndElement ();
    }
    writer.WriteEndElement ();
    writer.WriteEndElement ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10417037_10417595_26_47
10417037_10417595_56_73
Title: Getting property name and distinct values of a type T from a List<T> with reflection 
----------------------------------------

public Dictionary < TProperty, int > GetDistinctCounts < TProperty > (string propertyName) {
    var result = new Dictionary < TProperty, int > ();
    if (this.ListItems.Count () == 0) {
        return result;
    }
    var propertyInfo = this.GetPropertyInfo < TProperty > (this.ListItems.FirstOrDefault (), propertyName);
    if (propertyInfo == null) {
        return result;
    }
    return ListItems.Select (item = > (TProperty) propertyInfo.GetValue (item, null)).GroupBy (value = > value).ToDictionary (value = > value.Key, value = > value.Count ());
}
----------------------------------------

private PropertyInfo GetPropertyInfo < TProperty > (TListItem listItem, string propertyName) {
    if (listItem == null) {
        return null;
    }
    var propertyInfo = listItem.GetType ().GetProperty (propertyName);
    if (propertyInfo == null) {
        return null;
    }
    return propertyInfo.PropertyType == typeof (TProperty) ? propertyInfo : null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10479771_10479947_1_18
10479771_10480073_1_15
Title: Multiple threads modifying a collection 
----------------------------------------

static void GeefContainer () {
    lock (containers)
    {
        int containerNummer = containers.Count - 1;
        if (containerNummer >= 0) {
            Console.WriteLine ("Schip: Container {0} gegeven aan {1}", containerNummer, Thread.CurrentThread.Name);
            containers.RemoveAt (containerNummer);
        }
    }}
----------------------------------------

static void GeefContainer () {
    lock (containers)
    {
        while (containers.Any ()) {
            containers.RemoveAt (0);
            Monitor.Pulse (containers);
            Monitor.Wait (container);
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10493450_10493869_126_136
10493450_19303343_79_89
Title: Drag Drop Row behavior on WPF DataGrid 
----------------------------------------

private static void OnMouseLeftButtonDown (object sender, MouseButtonEventArgs e) {
    if (IsEditing)
        return;

    var row = UIHelpers.TryFindFromPoint < DataGridRow > ((UIElement) sender, e.GetPosition (dataGrid));
    if (row == null || row.IsEditing)
        return;

    IsDragging = true;
    DraggedItem = row.Item;
}
----------------------------------------

private void OnMouseLeftButtonDown (object sender, MouseButtonEventArgs e) {
    if (isEditing)
        return;

    var row = UIHelpers.TryFindFromPoint < DataGridRow > ((UIElement) sender, e.GetPosition (AssociatedObject));
    if (row == null || row.IsEditing)
        return;

    isDragging = true;
    draggedItem = row.Item;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10537598_10538049_1_26
10537598_10581251_1_59
Title: Uploading Parsing a text file with ASP.NET MVC 3 
----------------------------------------

private static List < Error > ParseErrors (string filepath) {
    Regex parser = new Regex (@"^(?<date>\w{3}\s\d{2}\s\d{1,2}(?::\d{1,2}){2}),[^\|]+\|ERROR\|[^:]+:\s*(?<description>.+?)(?:\.\.\.\s*(?<type>.+))?$", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    string line = string.Empty;
    Match curMatch = null;
    var errorLog = new List < Error > ();
    using (StreamReader sReader = new StreamReader (filepath))
    {
        while (! sReader.EndOfStream && (line = sReader.ReadLine ()) != null) {
            curMatch = parser.Match (line);
            if (curMatch.Success) {
                errorLog.Add (new Error () {ID = errorLog.Count, Date = curMatch.Groups ["date"].Value.Trim (), Description = curMatch.Groups ["description"].Value.Trim (), ErrorType = (curMatch.Groups ["type"].Success ? curMatch.Groups ["type"].Value : sReader.ReadLine ().Trim ())});
            }
        }
    } return errorLog;
}
----------------------------------------

public static List < Error > ParseErrors (string filepath) {
    Regex dateRegex = new Regex (@"^\w{3}\s\d{2}\s\d{2}:\d{2}:\d{2}", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    Regex errorRegex = new Regex (@"((?<type>System.*?Exception):\s(?<description>.*\.))", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    string CurrentLine = string.Empty;
    string NextLine = string.Empty;
    List < Error > errorLog = new List < Error > ();
    using (StreamReader sReader = new StreamReader (filepath))
    {
        while (! sReader.EndOfStream && (CurrentLine = sReader.ReadLine ()) != null) {
            if (CurrentLine.Contains ("|ERROR|")) {
                Match DateMatch = dateRegex.Match (CurrentLine);
                Match ErrorMatch = errorRegex.Match (CurrentLine);
                string date = DateMatch.Groups [0].Value.Trim ();
                string errorType = string.Empty;
                string description = string.Empty;
                if (! ErrorMatch.Groups ["type"].Value.Equals ("") && ! ErrorMatch.Groups ["description"].Value.Equals ("")) {
                    errorType = ErrorMatch.Groups ["type"].Value.Trim ();
                    description = ErrorMatch.Groups ["description"].Value.Trim ();
                } else {
                    NextLine = sReader.ReadLine ();
                    ErrorMatch = errorRegex.Match (NextLine);
                    errorType = ErrorMatch.Groups ["type"].Value.Trim ();
                    description = ErrorMatch.Groups ["description"].Value.Trim ();
                }
                Error NewError = new Error ();
                NewError.Date = date;
                NewError.ErrorType = errorType;
                NewError.Description = description;
                if (NewError.Description.Contains (". "))
                    NewError.Description = NewError.Description.Substring (0, NewError.Description.IndexOf (". "));

                if (! NewError.Description.Equals ("") && ! NewError.Description.Equals (""))
                    errorLog.Add (NewError);

            }
        }
    } return errorLog;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10542719_10554637_1_27
10542719_23746702_1_16
Title: .NET OpenXML performance issues 
----------------------------------------

private static int InsertSharedStringItem (string text, SharedStringTablePart shareStringPart) {
    if (shareStringPart.SharedStringTable == null) {
        shareStringPart.SharedStringTable = new SharedStringTable ();
    }
    int i = 0;
    foreach (SharedStringItem item in shareStringPart.SharedStringTable.Elements < SharedStringItem > ()) {
        if (item.InnerText == text) {
            return i;
        }
        i ++;
    }
    shareStringPart.SharedStringTable.AppendChild (new SharedStringItem (new DocumentFormat.OpenXml.Spreadsheet.Text (text)));
    shareStringPart.SharedStringTable.Save ();
    return i;
}
----------------------------------------

private static int InsertSharedStringItem (string sharedString, SharedStringTable sharedStringTable, Dictionary < string, int > sharedStrings) {
    int sharedStringIndex;
    if (! sharedStrings.TryGetValue (sharedString, out sharedStringIndex)) {
        sharedStringTable.AppendChild (new SharedStringItem (new Text (sharedString)));
        sharedStringIndex = sharedStrings.Count;
        sharedStrings.Add (sharedString, sharedStringIndex);
    }
    return sharedStringIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10599596_10599871_39_50
10599596_35675744_24_47
Title: Compress and decompress a Stream with Compression.DeflateStream 
----------------------------------------

public static Stream Decompress (byte [] data) {
    var output = new MemoryStream ();
    using (var compressedStream = new MemoryStream (data))
    using (var zipStream = new GZipStream (compressedStream, CompressionMode.Decompress))
    {
        zipStream.CopyTo (output);
        zipStream.Close ();
        output.Position = 0;
        return output;
    }}
----------------------------------------

public static byte [] Decompress (byte [] data) {
    byte [] decompressedArray = null;
    try {
        using (MemoryStream decompressedStream = new MemoryStream ())
        {
            using (MemoryStream compressStream = new MemoryStream (data))
            {
                using (DeflateStream deflateStream = new DeflateStream (compressStream, CompressionMode.Decompress))
                {
                    deflateStream.CopyTo (decompressedStream);
                }} decompressedArray = decompressedStream.ToArray ();
        }}
    catch (Exception exception) {
    }
    return decompressedArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10613642_10613710_1_11
10613642_10613868_1_13
Title: How to create a For_Each_With_Condition_With_Index Extension method (EM) 
----------------------------------------

static void ForEachWithIndexWithCondition < T > (this IEnumerable < T > enu, Func < T, int, bool > condition, Action < T, int > action) {
    int i = 0;
    foreach (T item in enu) {
        if (condition (item, i))
            action (item, i);

        i ++;
    }
}
----------------------------------------

public static void ForEachWithIndex < T > (this IEnumerable < T > enu, Action < T, int > action, Func < T, int, bool > condition) {
    int i = 0;
    foreach (T item in enu) {
        if (condition (item, i)) {
            action (item, i);
        }
        ++ i;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10622674_10624227_37_56
10622674_10624312_22_44
Title: "Chart creating dynamically. in .net c#" 
----------------------------------------

private void Form1_Load (object sender, EventArgs e) {
    chart1.Series.Clear ();
    var series1 = new System.Windows.Forms.DataVisualization.Charting.Series {Name = "Series1", Color = System.Drawing.Color.Green, IsVisibleInLegend = false, IsXValueIndexed = true, ChartType = SeriesChartType.Line};
    this.chart1.Series.Add (series1);
    for (int i = 0; i < 100; i ++) {
        series1.Points.AddXY (i, f (i));
    }
    chart1.Invalidate ();
}
----------------------------------------

private void Form1_Load (object sender, EventArgs e) {
    Random rnd = new Random ();
    Chart mych = new Chart ();
    mych.Height = 100;
    mych.Width = 100;
    mych.BackColor = SystemColors.Highlight;
    mych.Series.Add ("duck");
    mych.Series ["duck"].SetDefault (true);
    mych.Series ["duck"].Enabled = true;
    mych.Visible = true;
    for (int q = 0; q < 10; q ++) {
        int first = rnd.Next (0, 10);
        int second = rnd.Next (0, 10);
        mych.Series ["duck"].Points.AddXY (first, second);
        Debug.WriteLine (first + "  " + second);
    }
    Controls.Add (mych);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10630619_10630630_1_14
10630619_10630641_1_18
Title: "If an Exception is thrown in a List<T>.ForEach does the iteration stop?" 
----------------------------------------

public static Action < T > SuppressExceptions < T > (Action < T > action) {
    return item = > {
        try {
            action (item);
        }
        catch (Exception e) {
        }
    };
}
----------------------------------------

public static IEnumerable < Tuple < T, Exception > > ForEachWithCatch < T > (this IEnumerable < T > items, Action < T > action) {
    var exceptions = new List < Tuple < T, Exception > > ();
    foreach (var item in items) {
        try {
            action (item);
        }
        catch (Exception e) {
            exceptions.Add (Tuple.Create (item, e));
        }
    }
    return exceptions;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1063917_7575125_21_50
1063917_7575125_52_61
Title: BindingList<T>.Sort() to behave like a List<T>.Sort() 
----------------------------------------

private static void Sort < T > (this BindingList < T > bindingList, IComparer < T > p_Comparer, Comparison < T > p_Comparison) {
    List < T > sortList = new List < T > ();
    bindingList.ForEach (item = > sortList.Add (item));
    if (p_Comparison == null) {
        sortList.Sort (p_Comparer);
    } else {
        sortList.Sort (p_Comparison);
    }
    bool oldRaise = bindingList.RaiseListChangedEvents;
    bindingList.RaiseListChangedEvents = false;
    try {
        bindingList.Clear ();
        sortList.ForEach (item = > bindingList.Add (item));
    }
    finally {
        bindingList.RaiseListChangedEvents = oldRaise;
        bindingList.ResetBindings ();
    }
}
----------------------------------------

public static void ForEach < T > (this IEnumerable < T > source, Action < T > action) {
    if (source == null)
        throw new ArgumentNullException ("source");

    if (action == null)
        throw new ArgumentNullException ("action");

    foreach (T item in source) {
        action (item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10665950_10666082_1_43
10665950_10666344_1_17
Title: Sorting pairs of chars to make a path/chain of 'em? 
----------------------------------------

public void MakePath (ref List < string > routes) {
    bool is_first, is_last;
    for (int i = 0; i < routes.Count - 1; i ++) {
        is_first = true;
        is_last = true;
        for (int j = 0; j < routes.Count; j ++) {
            if (routes [i] [1] == routes [j] [0]) {
                is_last = false;
                break;
            }
            if (routes [i] [0] == routes [j] [1]) {
                is_start = false;
                break;
            }
        }
        if (is_first) {
            var temp = routes [i];
            routes [i] = routes [0];
            routes [0] = temp;
        }
        if (is_last) {
            var temp = routes [i];
            routes [i] = routes [routes.Count];
            routes [routes.Count] = temp;
        }
    }
    for (int i = 0; i < routes.Count - 1; i ++) {
        for (int j = 0; j < routes.Count; j ++) {
            if (routes [i] [1] == routes [j] [0]) {
                var temp = routes [i + 1];
                routes [i + 1] = routes [j];
                routes [j] = temp;
                j = routes.Count;
            }
        }
    }
}
----------------------------------------

public void MakePath (ref List < string > routes) {
    routes.Sort ();
    for (int i = 0; i < routes.Count - 1; i ++) {
        for (int j = 0; j < routes.Count; j ++) {
            if (routes [i] [1] == routes [j] [0]) {
                var temp = routes [i + 1];
                routes [i + 1] = routes [j];
                routes [j] = temp;
                continue;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1068061_1068143_16_51
1068061_1068143_1_14
Title: Creating an extensible properties class (OOP) 
----------------------------------------

public static T fromXmlFile < T > (string fileName, Encoding encoding) {
    Stream stream;
    try {
        stream = File.OpenRead (fileName);
    }
    catch (Exception e) {
        e.Data.Add ("File Name", fileName);
        e.Data.Add ("Type", typeof (T).ToString ());
        throw (e);
    }
    BufferedStream bufferedStream = new BufferedStream (stream);
    XmlSerializer xmlSerializer = new XmlSerializer (typeof (T));
    TextReader textReader;
    if (encoding == null)
        textReader = new StreamReader (bufferedStream);
    else
        textReader = new StreamReader (bufferedStream, encoding);

    T value;
    try {
        value = (T) xmlSerializer.Deserialize (textReader);
    }
    catch (Exception e) {
        e.Data.Add ("File Name", fileName);
        e.Data.Add ("Type", typeof (T).ToString ());
        throw (e);
    }
    finally {
        textReader.Dispose ();
        bufferedStream.Dispose ();
    }
    return value;
}
----------------------------------------

public static String toXmlString < T > (T value) {
    XmlSerializer xmlSerializer = new XmlSerializer (typeof (T));
    StringWriter stringWriter = new StringWriter ();
    try {
        xmlSerializer.Serialize (stringWriter, value);
    }
    catch (Exception e) {
        throw (e);
    }
    finally {
        stringWriter.Dispose ();
    }
    String xml = stringWriter.ToString ();
    stringWriter.Dispose ();
    return xml;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10695821_10696436_1_21
10695821_10696436_24_38
Title: Storing class object in Isolated Storage in WP7 
----------------------------------------

public static void Serialize < T > (T obj, string fileName) {
    try {
        var store = IsolatedStorageFile.GetUserStoreForApplication ();
        IsolatedStorageFileStream stream = store.OpenFile (fileName, FileMode.Create);
        XmlSerializer serializer = new XmlSerializer (typeof (T));
        using (XmlWriter xmlWriter = XmlWriter.Create (stream, writerSettings))
        {
            serializer.Serialize (xmlWriter, obj);
        } stream.Close ();
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

public static T DeSerialize < T > (string fileName) {
    try {
        var store = IsolatedStorageFile.GetUserStoreForApplication ();
        IsolatedStorageFileStream stream = store.OpenFile (fileName, FileMode.Open);
        XmlSerializer serializer = new XmlSerializer (typeof (T));
        return (T) serializer.Deserialize (stream);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10711464_10711545_1_16
10711464_10711574_1_17
Title: Properly use Return Keyword 
----------------------------------------

public void ComputersOnNetwork () {
    List < string > list = new List < string > ();
    using (DirectoryEntry root = new DirectoryEntry ("WinNT:"))
    {
        foreach (DirectoryEntry computer in computers.Children) {
            if ((computer.Name != "Schema")) {
                list.Add (computer.Name);
            }
        }
    } return list.Count ();
}
----------------------------------------

public int ComputersOnNetwork () {
    List < string > list = new List < string > ();
    using (DirectoryEntry root = new DirectoryEntry ("WinNT:"))
    {
        foreach (DirectoryEntry computer in computers.Children) {
            if ((computer.Name != "Schema")) {
                list.Add (computer.Name);
            }
        }
        int c = list.Count;
        return c;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10722428_10724952_3_18
10722428_18452263_1_16
Title: "DataAnnotations ""NotRequired"" attribute" 
----------------------------------------

protected override void BindProperty (ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor) {
    if (propertyDescriptor.Name == "HomePhone") {
        var form = controllerContext.HttpContext.Request.Form;
        var countryCode = form ["HomePhone.CountryCode"];
        var areaCode = form ["HomePhone.AreaCode"];
        var number = form ["HomePhone.Number"];
        if (string.IsNullOrEmpty (countryCode) && string.IsNullOrEmpty (areaCode) && string.IsNullOrEmpty (number))
            return;

    }
    base.BindProperty (controllerContext, bindingContext, propertyDescriptor);
}
----------------------------------------

protected override void BindProperty (ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor) {
    if (! propertyDescriptor.Attributes.OfType < RequiredAttribute > ().Any ()) {
        var form = controllerContext.HttpContext.Request.Form;
        if (form.AllKeys.Where (k = > k.StartsWith (string.Format (propertyDescriptor.Name, "."))).Count () > 0) {
            if (form.AllKeys.Where (k = > k.StartsWith (string.Format (propertyDescriptor.Name, "."))).All (k = > string.IsNullOrWhiteSpace (form [k])))
                return;

        }
    }
    base.BindProperty (controllerContext, bindingContext, propertyDescriptor);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10750577_12294776_72_85
10750577_41184629_60_71
Title: Looking for .NET 4.5 Progress<T> source code 
----------------------------------------

private void InvokeHandlers (object state) {
    T t = (T) ((object) state);
    Action < T > handler = this.m_handler;
    EventHandler < T > progressChanged = this.ProgressChanged;
    if (handler != null) {
        handler (t);
    }
    if (progressChanged != null) {
        progressChanged (this, t);
    }
}
----------------------------------------

private void InvokeHandlers (object state) {
    T e = (T) state;
    Action < T > handler = this.m_handler;
    EventHandler < T > progressChanged = this.ProgressChanged;
    if (handler != null)
        handler (e);

    if (progressChanged == null)
        return;

    progressChanged ((object) this, e);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10755633_10755969_11_26
10755633_10756100_3_24
Title: C# order listview by column? 
----------------------------------------

public int Compare (object x, object y) {
    int pointsX = Int32.Parse (((ListViewItem) x).SubItems [pointsColumnIndex].Text);
    int pointsY = Int32.Parse (((ListViewItem) y).SubItems [pointsColumnIndex].Text);
    int comparisonResult = pointsX.CompareTo (pointsY);
    switch (_sortOrder) {
        case SortOrder.Ascending :
            return comparisonResult;
        case SortOrder.Descending :
            return (- 1) * comparisonResult;
        default :
            return 0;
    }
}
----------------------------------------

public int Compare (object o1, object o2) {
    if (! (o1 is ListViewItem))
        return (0);

    if (! (o2 is ListViewItem))
        return (0);

    ListViewItem lvi1 = (ListViewItem) o2;
    string str1 = lvi1.SubItems [ByColumn].Text;
    ListViewItem lvi2 = (ListViewItem) o1;
    string str2 = lvi2.SubItems [ByColumn].Text;
    int result;
    if (lvi1.ListView.Sorting == SortOrder.Ascending)
        result = String.Compare (str1, str2);
    else
        result = String.Compare (str2, str1);

    LastSort = ByColumn;
    return (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10766372_10766555_1_30
10766372_10767445_1_14
Title: What is the best and efficient method to search all connected drives? 
----------------------------------------

static List < string > SearchFiles (params string [] patterns) {
    var result = new List < string > ();
    var drives = DriveInfo.GetDrives ();
    Parallel.ForEach (drives, drive = > {
        if (! drive.IsReady || drive.DriveType == DriveType.NoRootDirectory)
            return;

        var searchPatterns = patterns.Select (p = > drive.RootDirectory + p);
        using (var process = new Process ())
        {
            process.StartInfo.FileName = Path.Combine (Environment.SystemDirectory, "cmd.exe");
            process.StartInfo.Arguments = "/C dir " + String.Join (" ", searchPatterns) + " /s/b";
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.CreateNoWindow = true;
            process.Start ();
            string strOutput = process.StandardOutput.ReadToEnd ();
            process.WaitForExit ();
            result.AddRange (strOutput.Split (Environment.NewLine.ToArray (), StringSplitOptions.RemoveEmptyEntries));
        }});
    return result;
}
----------------------------------------

static List < string > SearchFiles (string pattern) {
    var result = new List < string > ();
    foreach (string drive in Directory.GetLogicalDrives ()) {
        Console.WriteLine ("searching " + drive);
        var files = FindAccessableFiles (drive, pattern, true);
        Console.WriteLine (files.Count ().ToString () + " files found.");
        result.AddRange (files);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10768231_10774131_275_286
10768231_10774131_288_300
Title: Creating a transition between two WPF gradients on a button? 
----------------------------------------

public override object GetCurrentValue (object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock) {
    if (defaultOriginValue == null) {
        throw new ArgumentNullException ("defaultOriginValue");
    }
    if (defaultDestinationValue == null) {
        throw new ArgumentNullException ("defaultDestinationValue");
    }
    return this.GetCurrentValue ((LinearGradientBrush) defaultOriginValue, (LinearGradientBrush) defaultDestinationValue, animationClock);
}
----------------------------------------

public LinearGradientBrush GetCurrentValue (LinearGradientBrush defaultOriginValue, LinearGradientBrush defaultDestinationValue, AnimationClock animationClock) {
    base.ReadPreamble ();
    if (animationClock == null) {
        throw new ArgumentNullException ("animationClock");
    }
    if (animationClock.CurrentState == ClockState.Stopped) {
        return defaultDestinationValue;
    }
    return this.GetCurrentValueCore (defaultOriginValue, defaultDestinationValue, animationClock);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10783175_10783579_1_20
10783175_10784057_1_11
Title: HorizontalAlign in gridview dynamically 
----------------------------------------

protected void gridViewReport_RowDataBound (object sender, GridViewRowEventArgs e) {
    if (e.Row.RowType == DataControlRowType.DataRow) {
        decimal cellValue = 0.0m;
        DataRow dr = ((DataRowView) e.Row.DataItem).Row;
        if (dr [urs_cell_index] != null) {
            if (decimal.TryParse (dr [urs_cell_index].ToString (), out cellValue)) {
                e.Row.Cells [urs_cell_index].HorizontalAlign = HorizontalAlign.Right;
            } else {
                e.Row.Cells [urs_cell_index].HorizontalAlign = HorizontalAlign.Left;
            }
        }
    }
}
----------------------------------------

protected void gridViewReport_RowDataBound (object sender, GridViewRowEventArgs e) {
    if (e.Row.RowType == DataControlRowType.DataRow) {
        decimal val;
        if (decimal.TryParse (e.Row.Cells [1].Text, out val))
            e.Row.Cells [1].HorizontalAlign = HorizontalAlign.Right;
        else
            e.Row.Cells [1].HorizontalAlign = HorizontalAlign.Left;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10795772_10795792_1_32
10795772_10795840_1_22
Title: Is there any way to break out of a function that returns void? 
----------------------------------------

public override void CompareBorderingTiles (Tile T) {
    if (T is Water) {
        float leftBound = location.X - (Tile.TileWidth * Tile.TileScale);
        float rightBound = location.X + (Tile.TileWidth * Tile.TileScale);
        float upperBound = location.Y - (Tile.TileHieght * Tile.TileScale);
        float bottomBound = location.Y + (Tile.TileHieght * Tile.TileScale);
        if (T.GridLocation.X == leftBound) {
            drawstate = DrawState.Left;
            return;
        }
        if (T.GridLocation.X == rightBound) {
            drawstate = DrawState.Right;
            return;
        }
        if (T.GridLocation.Y == upperBound) {
            drawstate = DrawState.Upper;
            return;
        }
        if (T.GridLocation.Y == bottomBound) {
            drawstate = DrawState.Lower;
            return;
        }
    }
    base.CompareBorderingTiles (T);
}
----------------------------------------

public override void CompareBorderingTiles (Tile T) {
    if (T is Water) {
        float leftBound = location.X - (Tile.TileWidth * Tile.TileScale);
        float rightBound = location.X + (Tile.TileWidth * Tile.TileScale);
        float upperBound = location.Y - (Tile.TileHieght * Tile.TileScale);
        float bottomBound = location.Y + (Tile.TileHieght * Tile.TileScale);
        if (T.GridLocation.X == leftBound) {
            drawstate = DrawState.Left;
        } else if (T.GridLocation.X == rightBound)
            drawstate = DrawState.Right;
        else if (T.GridLocation.Y == upperBound)
            drawstate = DrawState.Upper;
        else if (T.GridLocation.Y == bottomBound)
            drawstate = DrawState.Lower;

    }
    base.CompareBorderingTiles (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1082624_1082639_1_13
1082624_1082691_1_20
Title: IsOrderedBy Extension Method 
----------------------------------------

public static bool IsOrderedBy < T > (this IEnumerable < T > value, T initalValue) where T : IComparable < T > {
    var currentValue = initialValue;
    foreach (var i in value) {
        if (i.CompareTo (currentValue) < 0)
            return false;

        currentValue = i;
    }
    return true;
}
----------------------------------------

public static bool IsOrderedBy < TSource, TKey > (this IEnumerable < TSource > source, Func < TSource, TKey > keySelector) {
    bool isFirstPass = true;
    TSource previous = default (TSource);
    foreach (TSource item in source) {
        if (! isFirstPass) {
            TKey key = keySelector (item);
            TKey previousKey = keySelector (previous);
            if (Comparer < TKey >.Default.Compare (previousKey, key) > 0)
                return false;

        }
        isFirstPass = false;
        previous = item;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10826275_10942043_174_185
10826275_10942043_510_521
Title: IQueryable extension method for linq2entities 
----------------------------------------

public IQueryable CreateQuery (Expression expression) {
    Type elementType = TypeSystem.GetElementType (expression.Type);
    try {
        return (IQueryable) Activator.CreateInstance (typeof (PlaceHolderQuery < >).MakeGenericType (elementType), new object [] {this, expression});
    }
    catch (System.Reflection.TargetInvocationException tie) {
        throw tie.InnerException;
    }
}
----------------------------------------

public IQueryable CreateQuery (Expression expression) {
    Type elementType = TypeSystem.GetElementType (expression.Type);
    try {
        return (IQueryable) Activator.CreateInstance (typeof (ExtendableQuery < >).MakeGenericType (elementType), new object [] {this, expression});
    }
    catch (System.Reflection.TargetInvocationException tie) {
        throw tie.InnerException;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10826994_10827022_3_25
10826994_39471654_3_13
Title: Splitting an array using LINQ 
----------------------------------------

public static IEnumerable < T [] > Split < T > (this IEnumerable < T > source, int size) {
    if (source == null) {
        throw new ArgumentNullException ("source can't be null.");
    }
    if (size == 0) {
        throw new ArgumentOutOfRangeException ("Chunk size can't be 0.");
    }
    List < T > result = new List < T > (size);
    foreach (T x in source) {
        result.Add (x);
        if (result.Count == size) {
            yield return result.ToArray ();
            result = new List < T > (size);
        }
    }
}
----------------------------------------

public static IEnumerable < IEnumerable < T > > ToPages < T > (this IEnumerable < T > elements, int pageSize) {
    if (elements == null)
        throw new ArgumentNullException ("elements");

    if (pageSize <= 0)
        throw new ArgumentOutOfRangeException ("pageSize", "Must be greater than 0!");

    int i = 0;
    var paged = elements.GroupBy (p = > i ++ / pageSize);
    return paged;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10836692_10836742_3_23
10836692_10839255_5_25
Title: save strings from MS SQL 2008 in JSON format over ASP.NET 
----------------------------------------

internal static string [] Raumklasse () {
    List < string > raumKlassenObject = new List < string > ();
    using (SqlConnection con = new SqlConnection (@"Data Source=Localhost\SQLEXPRESS;Initial Catalog=BOOK-IT-V2;Integrated Security=true;"))
    using (SqlCommand cmd = new SqlCommand (@"SELECT BEZEICHNUNG FROM RAUMKLASSE", con))
    {
        con.Open ();
        using (SqlDataReader rdr = cmd.ExecuteReader ())
        {
            while (rdr.Read ()) {
                if (rdr ["BEZEICHNUNG"] != DBNull.Value) {
                    raumKlassenObject.Add (rdr ["BEZEICHNUNG"].ToString ());
                }
            }
        }} return raumKlassenObject.ToArray ();
}
----------------------------------------

internal static string Raumklasse () {
    DataTable tbl = new DataTable ();
    JavaScriptSerializer js = new JavaScriptSerializer ();
    StringBuilder sb = new StringBuilder ();
    using (SqlConnection con = new SqlConnection (@"Data Source=Localhost\SQLEXPRESS;Initial Catalog=BOOK-IT-V2;Integrated Security=true;"))
    using (SqlCommand cmd = new SqlCommand (@"SELECT BEZEICHNUNG FROM RAUMKLASSE", con))
    {
        con.Open ();
        SqlDataReader rdr = cmd.ExecuteReader (CommandBehavior.CloseConnection);
        tbl.Load (rdr);
        rdr.Close ();
        var linqResults = from DataRow row in tbl.AsEnumerable ()
            select new {raumKlassenObject = row.Field < string > ("BEZEICHNUNG")};
        js.Serialize (linqResults, sb);
        string returnJSON = sb.ToString ();
        return returnJSON;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852264_1_19
10852228_10852279_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null)
            return itemCol;

        return null;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    SPListItemCollection itemCol = null;
    try {
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return itemCol;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852264_1_19
10852228_10852289_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null)
            return itemCol;

        return null;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852264_1_19
10852228_10852343_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null)
            return itemCol;

        return null;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol != null && itemCol.Count == 0 ? null : itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852279_1_13
10852228_10852289_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    SPListItemCollection itemCol = null;
    try {
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return itemCol;
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852279_1_13
10852228_10852308_1_15
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    SPListItemCollection itemCol = null;
    try {
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return itemCol;
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol.Any ())
            return itemCol;

    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852279_1_13
10852228_10852323_1_17
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    SPListItemCollection itemCol = null;
    try {
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return itemCol;
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null && itemCol.Count == 0)
            return itemCol;

        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852279_1_13
10852228_10852343_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    SPListItemCollection itemCol = null;
    try {
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return itemCol;
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol != null && itemCol.Count == 0 ? null : itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852279_1_13
10852228_10852406_1_14
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    SPListItemCollection itemCol = null;
    try {
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return itemCol;
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null)
            return itemCol;

    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852289_1_13
10852228_10852308_1_15
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol.Any ())
            return itemCol;

    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852289_1_13
10852228_10852323_1_17
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null && itemCol.Count == 0)
            return itemCol;

        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852289_1_13
10852228_10852343_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol != null && itemCol.Count == 0 ? null : itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852289_1_13
10852228_10852406_1_14
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null)
            return itemCol;

    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852308_1_15
10852228_10852343_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol.Any ())
            return itemCol;

    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol != null && itemCol.Count == 0 ? null : itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852323_1_17
10852228_10852343_1_13
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null && itemCol.Count == 0)
            return itemCol;

        return itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol != null && itemCol.Count == 0 ? null : itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10852228_10852343_1_13
10852228_10852406_1_14
Title: Method to return null from a try...catch 
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        return itemCol != null && itemCol.Count == 0 ? null : itemCol;
    }
    catch (Exception ex) {
        LogException (ex);
        return null;
    }
}
----------------------------------------

public SPListItemCollection GetACollection () {
    try {
        if (itemCol != null)
            return itemCol;

    }
    catch (Exception ex) {
        LogException (ex);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10856240_10856324_1_15
10856240_10856401_1_19
Title: ASP MVC FIle Upload HttpPostedFileBase is Null 
----------------------------------------

[HttpPost] public ActionResult Create (VideoUploadModel VM, HttpPostedFileBase vid) {
    if (ModelState.IsValid) {
        db.Videos.AddObject (VM.videoModel);
        db.SaveChanges ();
        return RedirectToAction ("Index");
    }
    ViewBag.UserId = new SelectList (db.DBUsers, "Id", "FName", VM.videoModel.UserId);
    return View (VM);
}
----------------------------------------

[HttpPost] public ActionResult Create (VideoUploadModel VM, IEnumerable < HttpPostedFileBase > videoUpload) {
    if (ModelState.IsValid) {
        if (videoUpload != null) {
            foreach (var file in videoUpload) {
                var serverPath = server.MapPath ("~/files/" + file.Name);
                file.SaveAs (serverPath);
            }
        }
        db.SaveChanges ();
        return RedirectToAction ("Index");
    }
    ViewBag.UserId = new SelectList (db.DBUsers, "Id", "FName", VM.videoModel.UserId);
    return View (VM);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1086618_1086742_29_43
1086618_1086742_55_65
Title: Comparing enum flags in C# 
----------------------------------------

public static T SetFlags < T > (this T value, T flags, bool on) where T : struct {
    CheckEnumWithFlags < T > ();
    long lValue = Convert.ToInt64 (value);
    long lFlag = Convert.ToInt64 (flags);
    if (on) {
        lValue |= lFlag;
    } else {
        lValue &= (~ lFlag);
    }
    return (T) Enum.ToObject (typeof (T), lValue);
}
----------------------------------------

public static T CombineFlags < T > (this IEnumerable < T > flags) where T : struct {
    CheckEnumWithFlags < T > ();
    long lValue = 0;
    foreach (T flag in flags) {
        long lFlag = Convert.ToInt64 (flag);
        lValue |= lFlag;
    }
    return (T) Enum.ToObject (typeof (T), lValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10878268_10878628_1_18
10878268_10878628_20_32
Title: Recursive reading of List<Object> 
----------------------------------------

public static void PrintItems (List < CategoryItem > items) {
    Dictionary < string, List < CategoryItem > > dictOfChildren = new Dictionary < string, List < CategoryItem > > ();
    foreach (CategoryItem anItem in items) {
        List < CategoryItem > children;
        if (! dictOfChildren.TryGetValue (anItem.ParentID, out children)) {
            children = new List < CategoryItem > ();
            dictOfChildren [anItem.ParentID] = children;
        }
        children.Add (anItem);
    }
    PrintItems (dictOfChildren ["0"], dictOfChildren, 0);
}
----------------------------------------

private static void PrintItems (List < CategoryItem > list, Dictionary < string, List < CategoryItem > > dictOfChildren, int levelOfIndentation) {
    foreach (CategoryItem anItem in list) {
        anItem.Print (levelOfIndentation);
        List < CategoryItem > children;
        if (dictOfChildren.TryGetValue (anItem.CategoryID, out children) && children.Count > 0)
            PrintItems (children, dictOfChildren, levelOfIndentation + 1);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10891857_10892587_1_16
10891857_38861647_1_15
Title: CloudBlob.DownloadToStream returns null 
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }}
----------------------------------------

public static string ReadFully (string blobUri, string itemUri) {
    CloudBlobContainer cloudBlobContainer = new CloudBlobContainer (new Uri (blobUri));
    CloudBlob blobReference = cloudBlobContainer.GetBlobReference (itemUri);
    using (var stream = blobReference.OpenRead ())
    {
        using (StreamReader reader = new StreamReader (stream))
        {
            return reader.ReadToEnd ();
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10919887_10919995_1_14
10919887_10920037_1_15
Title: How can I combine these two similar methods into one? 
----------------------------------------

private void btnClick (object sender, EventArgs e) {
    Button * myButton = (Button) sender;
    if (myButton.tag == 1) {
        LabEntity selectedItem = bindingSource1.Current as LabEntity;
        selectedLabsData.Add (selectedItem);
        availableLabsData.Remove (selectedItem);
    } else {
        LabEntity selectedItem = bindingSource2.Current as LabEntity;
        availableLabsData.Add (selectedItem);
        selectedLabsData.Remove (selectedItem);
    }
}
----------------------------------------

private void btnClick (object sender, EventArgs e) {
    var bindingSource = (sender == btnRemove) ? bindingSource2 : bindingSource1;
    var selectedItem = source.Current as LabEntity;
    if (sender == btnRemove) {
        availableLabsData.Add (selectedItem);
        selectedLabsData.Remove (selectedItem);
    } else if (sender == btnAdd) {
        availableLabsData.Remove (selectedItem);
        selectedLabsData.Add (selectedItem);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10935970_10936011_8_34
10935970_10936198_11_29
Title: Insert random amount of dots to string with minimum different places? 
----------------------------------------

static void Main (string [] args) {
    Random rand = new Random ();
    string [] words = "Now is the time for all good men to come to the aid of their countrymen".Split (new char [] {' '}, StringSplitOptions.RemoveEmptyEntries);
    if (words.Length > 0) {
        List < int > addIndices = Enumerable.Range (0, words.Length).ToList ();
        Shuffle (addIndices, rand);
        int addCount = rand.Next (4, Math.Max (4, words.Length));
        addIndices.RemoveRange (addCount, addIndices.Count - addCount);
        StringBuilder result = new StringBuilder ();
        for (int i = 0; i < words.Length; i ++) {
            result.Append (words [i]);
            if (addIndices.Contains (i))
                result.Append ('.', rand.Next (1, 7));

            result.Append (' ');
        }
        Console.WriteLine (result.ToString ());
    }
}
----------------------------------------

static void Main (string [] args) {
    var random = new Random ();
    var iTemplate = "Hi, this is a template with several words on it and I want to place random dots on 4 different random places every time I run the function";
    var result = iTemplate;
    while (new Regex ("\\. ").Matches (result).Count < 4)
        result = result.TrimEnd ().Split (' ').Aggregate (string.Empty, (current, word) = > current + (word + (((word.EndsWith (".") || (random.Next (1, 100) % 10) != 0)) ? "" : new string ('.', random.Next (1, 7))) + " "));

    Console.WriteLine (result);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10938102_10938169_2_27
10938102_10938185_1_11
Title: How do I keep a stream open from model to controller? 
----------------------------------------

public Stream GS (string ID, PdfReader reader) {
    MemoryStream newPdf = new MemoryStream ();
    PdfStamper formFiller = null;
    try {
        formFiller = new PdfStamper (reader, newPdf);
        AcroFields formFields = formFiller.AcroFields;
        formFields.SetField ("ID", ID);
        formFiller.FormFlattening = true;
    }
    catch {
        newPdf.Close ();
        throw;
    }
    finally {
        formFiller.Close ();
    }
    return newPdf;
}
----------------------------------------

public Stream GS (string ID, PdfReader reader) {
    PdfStamper formFiller = new PdfStamper (reader, ms);
    AcroFields formFields = formFiller.AcroFields;
    formFields.SetField ("ID", ID);
    formFiller.FormFlattening = true;
    formFiller.Writer.CloseStream = false;
    formFiller.Close ();
    return ms;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10941657_23544421_1_13
10941657_37891517_1_38
Title: "creating files recursively creating directories" 
----------------------------------------

void CreateDirectoryRecursively (string path) {
    string [] pathParts = path.Split ('\\');
    for (int i = 0; i < pathParts.Length; i ++) {
        if (i > 0)
            pathParts [i] = Path.Combine (pathParts [i - 1], pathParts [i]);

        if (! Directory.Exists (pathParts [i]))
            Directory.CreateDirectory (pathParts [i]);

    }
}
----------------------------------------

public bool CreateDirectoryRecursively (string path) {
    try {
        string [] pathParts = path.Split ('\\');
        for (var i = 0; i < pathParts.Length; i ++) {
            if (i == 0 && pathParts [i].Contains (":")) {
                pathParts [i] = pathParts [i] + "\\";
            } else if (i == pathParts.Length - 1 && pathParts [i].Contains (".")) {
                return true;
            }
            if (i > 0) {
                pathParts [i] = Path.Combine (pathParts [i - 1], pathParts [i]);
            }
            if (! Directory.Exists (pathParts [i])) {
                Directory.CreateDirectory (pathParts [i]);
            }
        }
        return true;
    }
    catch (Exception ex) {
        var recipients = _emailErrorDefaultRecipients;
        var subject = "ERROR: Failed To Create Directories in " + this.ToString () + " path: " + path;
        var errorMessage = Error.BuildErrorMessage (ex, subject);
        Email.SendMail (recipients, subject, errorMessage);
        Console.WriteLine (errorMessage);
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1096568_28428894_366_418
1096568_28428894_420_451
Title: How can I use interface as a C# generic type constraint? 
----------------------------------------

private void GatherTypesFrom (Type t) {
    EnsureType (t.BaseType);
    foreach (var intf in t.GetInterfaces ()) {
        EnsureType (intf);
    }
    foreach (var nested in t.GetNestedTypes ()) {
        EnsureType (nested);
    }
    var all = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance;
    foreach (var field in t.GetFields (all)) {
        EnsureType (field.FieldType);
    }
    foreach (var property in t.GetProperties (all)) {
        EnsureType (property.PropertyType);
    }
    foreach (var evt in t.GetEvents (all)) {
        EnsureType (evt.EventHandlerType);
    }
    foreach (var ctor in t.GetConstructors (all)) {
        foreach (var par in ctor.GetParameters ()) {
            EnsureType (par.ParameterType);
        }
        GatherTypesFrom (ctor);
    }
    foreach (var method in t.GetMethods (all)) {
        if (method.ReturnType != typeof (void)) {
            EnsureType (method.ReturnType);
        }
        foreach (var par in method.GetParameters ()) {
            EnsureType (par.ParameterType);
        }
        GatherTypesFrom (method);
    }
}
----------------------------------------

private void GatherTypesFrom (MethodBase method) {
    if (this.assemblies.Contains (method.DeclaringType.Assembly)) {
        MethodBody methodBody = method.GetMethodBody ();
        if (methodBody != null) {
            foreach (var local in methodBody.LocalVariables) {
                EnsureType (local.LocalType);
            }
            var il = methodBody.GetILAsByteArray ();
            if (il != null) {
                foreach (var oper in ILDecompiler.Decompile (method, il)) {
                    if (oper.Operand is MemberInfo) {
                        foreach (var type in HandleMember ((MemberInfo) oper.Operand)) {
                            EnsureType (type);
                        }
                    }
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10980668_10985139_9_26
10980668_11659466_20_40
Title: Parse non-array JSON object as array with Json.net 
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (reader.TokenType == JsonToken.StartArray) {
        object result = serializer.Deserialize (reader, objectType);
        return result;
    } else {
        var resultObject = serializer.Deserialize < T > (reader);
        return new T [] {resultObject};
    }
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10989487_10989747_1_21
10989487_11025072_1_29
Title: Entity Framework many-to-many conditional join 
----------------------------------------

public static List < User > SearchUser (List < int > roleIDs) {
    using (var db = new DBContext ())
    {
        if (roleIDs.Count == 0) {
            return db.Users.ToList ();
        }
        var users = (from u in db.Users
            join ur in db.User_Role on u.UserID equals ur.UserID
            join r in roleIDs on ur.RoleID equals r
            select u).Distinct ().ToList ();
        return users;
    }}
----------------------------------------

public static List < user > SearchUser (List < int > roleIDs, List < int > hobbyIDs) {
    List < User > Users = new List < User > ();
    IQueryable < User > tempUsers = null;
    using (var db = new DBContent ())
    {
        tempUsers = db.Users;
        if (roleIDs.Count > 0) {
            tempUsers = from u in tempUsers
                join ur in db.User_Role on u.UserID equals ur.UserID
                join r in roleIDs on ur.RoleID equals r
                select u;
        }
        if (hobbyIDs.Count > 0) {
            tempUsers = from u in tempUsers
                join uh in db.User_Hobby on u.UserID equals uh.UserID
                join h in hobbyIDs on uh.HobbyID equals h
                select u;
        }
        Users = ((ObjectQuery < User >) tempUsers).Include ("Address").Distinct ().ToList ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10997389_10997604_1_18
10997389_10997618_1_12
Title: AllConsecutives on List<int> 
----------------------------------------

public static bool AllConsecutives (this IEnumerable < int > intValues) {
    int minValue = Int32.MaxValue;
    int maxValue = Int32.MinValue;
    int count = 0;
    HashSet < int > values = new HashSet < int > ();
    foreach (int intValue in intValues) {
        if (values.Contains (intValue))
            return false;

        values.Add (intValue);
        if (intValue > maxValue)
            maxValue = intValue;

        if (intValue < minValue)
            minValue = intValue;

        count ++;
    }
    return (count == 0) || (maxValue - minValue + 1 == count);
}
----------------------------------------

public static bool AllConsecutives (this IEnumerable < int > intValues) {
    var ord = intValues.OrderBy (i = > i);
    int curV = ord.Min ();
    foreach (int x in ord) {
        if (x != curV)
            return false;

        curV ++;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11010602_11024543_1_17
11010602_11027411_1_18
Title: "With Rx how do I ignore all-except-the-latest value when my Subscribe method is running" 
----------------------------------------

public static IDisposable SubscribeWithoutOverlap < T > (this IObservable < T > source, Action < T > action) {
    var feedback = new Subject < Unit > ();
    var sub = source.Buffer (() = > feedback).ObserveOn (Scheduler.ThreadPool).Subscribe (l = > {
        action (l.LastOrDefault ());
        feedback.OnNext (Unit.Default);
    });
    feedback.OnNext (Unit.Default);
    return sub;
}
----------------------------------------

public static IDisposable SubscribeWithoutOverlap < T > (this IObservable < T > source, Action < T > action) {
    var sampler = new Subject < Unit > ();
    var sub = source.Sample (sampler).ObserveOn (Scheduler.ThreadPool).Subscribe (l = > {
        action (l);
        sampler.OnNext (Unit.Default);
    });
    source.Take (1).Subscribe (_ = > sampler.OnNext (Unit.Default));
    return sub;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11010602_11024543_1_17
11010602_11040837_1_15
Title: "With Rx how do I ignore all-except-the-latest value when my Subscribe method is running" 
----------------------------------------

public static IDisposable SubscribeWithoutOverlap < T > (this IObservable < T > source, Action < T > action) {
    var feedback = new Subject < Unit > ();
    var sub = source.Buffer (() = > feedback).ObserveOn (Scheduler.ThreadPool).Subscribe (l = > {
        action (l.LastOrDefault ());
        feedback.OnNext (Unit.Default);
    });
    feedback.OnNext (Unit.Default);
    return sub;
}
----------------------------------------

public static IDisposable SampleSubscribe < T > (this IObservable < T > observable, Action < T, CancellationToken > action) {
    var cancellation = new CancellationDisposable ();
    var token = cancellation.Token;
    Task task = null;
    return new CompositeDisposable (cancellation, observable.Subscribe (value = > {
        if (task == null || task.IsCompleted)
            task = Task.Factory.StartNew (() = > action (value, token), token);

    }));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11010602_11024543_1_17
11010602_16079168_1_44
Title: "With Rx how do I ignore all-except-the-latest value when my Subscribe method is running" 
----------------------------------------

public static IDisposable SubscribeWithoutOverlap < T > (this IObservable < T > source, Action < T > action) {
    var feedback = new Subject < Unit > ();
    var sub = source.Buffer (() = > feedback).ObserveOn (Scheduler.ThreadPool).Subscribe (l = > {
        action (l.LastOrDefault ());
        feedback.OnNext (Unit.Default);
    });
    feedback.OnNext (Unit.Default);
    return sub;
}
----------------------------------------

public static IObservable < T > ObserveLatestOn < T > (this IObservable < T > source, IScheduler scheduler) {
    return Observable.Create < T > (observer = > {
        Notification < T > outsideNotification = null;
        var gate = new object ();
        bool active = false;
        var cancelable = new MultipleAssignmentDisposable ();
        var disposable = source.Materialize ().Subscribe (thisNotification = > {
            bool alreadyActive;
            lock (gate)
            {
                alreadyActive = active;
                active = true;
                outsideNotification = thisNotification;
            } if (! alreadyActive) {
                cancelable.Disposable = scheduler.Schedule (self = > {
                    Notification < T > localNotification = null;
                    lock (gate)
                    {
                        localNotification = outsideNotification;
                        outsideNotification = null;
                    } localNotification.Accept (observer);
                    bool hasPendingNotification = false;
                    lock (gate)
                    {
                        hasPendingNotification = active = (outsideNotification != null);
                    } if (hasPendingNotification) {
                        self ();
                    }
                });
            }
        });
        return new CompositeDisposable (disposable, cancelable);
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11010602_11024543_1_17
11010602_16638233_1_27
Title: "With Rx how do I ignore all-except-the-latest value when my Subscribe method is running" 
----------------------------------------

public static IDisposable SubscribeWithoutOverlap < T > (this IObservable < T > source, Action < T > action) {
    var feedback = new Subject < Unit > ();
    var sub = source.Buffer (() = > feedback).ObserveOn (Scheduler.ThreadPool).Subscribe (l = > {
        action (l.LastOrDefault ());
        feedback.OnNext (Unit.Default);
    });
    feedback.OnNext (Unit.Default);
    return sub;
}
----------------------------------------

public static IObservable < TSource > ObserveLatestOn < TSource > (this IObservable < TSource > source, IScheduler scheduler) {
    return Observable.Create < TSource > (observer = > {
        Notification < TSource > pendingNotification = null;
        var cancelable = new MultipleAssignmentDisposable ();
        var sourceSubscription = source.Materialize ().Subscribe (notification = > {
            var previousNotification = Interlocked.Exchange (ref pendingNotification, notification);
            if (previousNotification != null)
                return;

            cancelable.Disposable = scheduler.Schedule (() = > {
                var notificationToSend = Interlocked.Exchange (ref pendingNotification, null);
                notificationToSend.Accept (observer);
            });
        });
        return new CompositeDisposable (sourceSubscription, cancelable);
    });
}
----------------------------------------

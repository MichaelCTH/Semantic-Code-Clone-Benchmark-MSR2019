$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35859543_35860237_49_111
35859543_35860735_3_71
Title: Avoiding children nodes appear at same or upper level of parent level 
----------------------------------------

static void Main (string [] args) {
    Node [] nodes = new Node [] {new Node () {Id = 0, Title = "Node1"}, new Node () {Id = 1, Title = "Node2"}, new Node () {Id = 2, Title = "Node7"}, new Node () {Id = 3, Title = "Node3"}, new Node () {Id = 4, Title = "Node4"}, new Node () {Id = 5, Title = "Node5"}, new Node () {Id = 6, Title = "Node6"}, new Node () {Id = 7, Title = "Node8"}, new Node () {Id = 8, Title = "Node9"}, new Node () {Id = 9, Title = "Node10"}, new Node () {Id = 10, Title = "Node11"}, new Node () {Id = 11, Title = "Node12"}, new Node () {Id = 12, Title = "Node13"}, new Node () {Id = 13, Title = "Node14"}, new Node () {Id = 14, Title = "Node15"}, new Node () {Id = 15, Title = "Node16"}, new Node () {Id = 16, Title = "Node17"}, new Node () {Id = 17, Title = "Node18"}, new Node () {Id = 18, Title = "Node19"}, new Node () {Id = 19, Title = "Node20"}, new Node () {Id = 20, Title = "Node21"}, new Node () {Id = 21, Title = "Node22"}, new Node () {Id = 22, Title = "Node23"}};
    nodes [0].Child = nodes [3];
    nodes [1].Child = nodes [3];
    nodes [2].Child = nodes [4];
    nodes [2].Child = nodes [5];
    nodes [3].Child = nodes [6];
    nodes [3].Child = nodes [7];
    nodes [3].Child = nodes [8];
    nodes [3].Child = nodes [9];
    nodes [6].Child = nodes [10];
    nodes [2].Child = nodes [11];
    nodes [2].Child = nodes [12];
    nodes [7].Child = nodes [13];
    nodes [8].Child = nodes [14];
    nodes [4].Child = nodes [15];
    nodes [5].Child = nodes [15];
    nodes [7].Child = nodes [15];
    nodes [12].Child = nodes [16];
    nodes [13].Child = nodes [16];
    nodes [13].Child = nodes [17];
    nodes [14].Child = nodes [18];
    nodes [8].Child = nodes [19];
    nodes [13].Child = nodes [20];
    nodes [14].Child = nodes [20];
    nodes [8].Child = nodes [21];
    nodes [15].Child = nodes [21];
    nodes [18].Child = nodes [22];
    nodes [19].Child = nodes [22];
    foreach (var n in nodes) {
        Console.WriteLine (n.Title + " (Level: " + n.Level + ") > PARENTS: " + (n.Parents.Count () != 0 ? n.Parents.Count () + " ( " + (n.Parents.Count () == 1 ? (n.Parents [0].Title + " @ " + n.Parents [0].Level) : n.Parents.Select (p = > p.Title + " @ " + p.Level).Aggregate ((c, next) = > c + ", " + next)) + ")" : "Root"));
    }
}
----------------------------------------

public static void Main () {
    List < Node > nodes = new List < Node > {new Node {Id = 0, Title = "Node1"}, new Node {Id = 1, Title = "Node2"}, new Node {Id = 2, Title = "Node7"}, new Node {Id = 3, Title = "Node3"}, new Node {Id = 4, Title = "Node4"}, new Node {Id = 5, Title = "Node5"}, new Node {Id = 6, Title = "Node6"}, new Node {Id = 7, Title = "Node8"}, new Node {Id = 8, Title = "Node9"}, new Node {Id = 9, Title = "Node10"}, new Node {Id = 10, Title = "Node11"}, new Node {Id = 11, Title = "Node12"}, new Node {Id = 12, Title = "Node13"}, new Node {Id = 13, Title = "Node14"}, new Node {Id = 14, Title = "Node15"}, new Node {Id = 15, Title = "Node16"}, new Node {Id = 16, Title = "Node17"}, new Node {Id = 17, Title = "Node18"}, new Node {Id = 18, Title = "Node19"}, new Node {Id = 19, Title = "Node20"}, new Node {Id = 20, Title = "Node21"}, new Node {Id = 21, Title = "Node22"}, new Node {Id = 22, Title = "Node23"}};
    nodes [0].AddChild (nodes [3]);
    nodes [1].AddChild (nodes [3]);
    nodes [2].AddChild (nodes [4]);
    nodes [2].AddChild (nodes [5]);
    nodes [3].AddChild (nodes [6]);
    nodes [3].AddChild (nodes [7]);
    nodes [3].AddChild (nodes [8]);
    nodes [3].AddChild (nodes [9]);
    nodes [6].AddChild (nodes [10]);
    nodes [2].AddChild (nodes [11]);
    nodes [2].AddChild (nodes [12]);
    nodes [7].AddChild (nodes [13]);
    nodes [8].AddChild (nodes [14]);
    nodes [4].AddChild (nodes [15]);
    nodes [5].AddChild (nodes [15]);
    nodes [7].AddChild (nodes [15]);
    nodes [12].AddChild (nodes [16]);
    nodes [13].AddChild (nodes [16]);
    nodes [13].AddChild (nodes [17]);
    nodes [14].AddChild (nodes [18]);
    nodes [8].AddChild (nodes [19]);
    nodes [13].AddChild (nodes [20]);
    nodes [14].AddChild (nodes [20]);
    nodes [8].AddChild (nodes [21]);
    nodes [15].AddChild (nodes [21]);
    nodes [18].AddChild (nodes [22]);
    nodes [19].AddChild (nodes [22]);
    var rootNodes = nodes.Where (i = > i.IsRootElement);
    foreach (var rootNode in rootNodes) {
        PrintElementRecurcively (rootNode, null, 0);
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3586479_17577505_1_20
3586479_3586745_3_18
Title: "Linq extension method how to find child in collection recursive" 
----------------------------------------

public static IEnumerable < T > SelectManyRecursive < T > (this IEnumerable < T > source, Func < T, IEnumerable < T > > childrenSelector) {
    if (source == null)
        throw new ArgumentNullException ("source");

    foreach (var i in source) {
        yield return i;
        var children = childrenSelector (i);
        if (children != null) {
            foreach (var child in SelectManyRecursive (children, childrenSelector)) {
                yield return child;
            }
        }
    }
}
----------------------------------------

public static T FirstOrDefaultFromMany < T > (this IEnumerable < T > source, Func < T, IEnumerable < T > > childrenSelector, Predicate < T > condition) {
    if (source == null || ! source.Any ())
        return default (T);

    var attempt = source.FirstOrDefault (t = > condition (t));
    if (! Equals (attempt, default (T)))
        return attempt;

    return source.SelectMany (childrenSelector).FirstOrDefaultFromMany (childrenSelector, condition);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35871336_35871446_1_18
35871336_35871493_1_20
Title: Creating Labels from Dictionary 
----------------------------------------

private void CreateLabelsForTesting (GroupBox grpBoxInstructions) {
    var lastPos = 0;
    foreach (KeyValuePair < string, string > labels in LabelTexts) {
        Label l = new Label ();
        l.Name = labels.Key;
        l.Text = labels.Value;
        l.Size = new Size (130, 12);
        l.Location = new Point (0, lastPos);
        lastPos += 15;
        grpBoxInstructions.Controls.Add (l);
    }
}
----------------------------------------

private void CreateLabelsForTesting (GroupBox grpBoxInstructions) {
    int x = 0;
    int y = 0;
    foreach (KeyValuePair < string, string > labels in LabelTexts) {
        Label l = new Label ();
        l.Name = labels.Key;
        l.Text = labels.Value;
        l.Size = new Size (130, 12);
        x += 0;
        y += l.Height + 5;
        l.Location = new Point (x, y);
        grpBoxInstructions.Controls.Add (l);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35906937_35907064_1_13
35906937_35907143_1_20
Title: "C# -sum of two numbers then ask for new number again and add" 
----------------------------------------

static void Main (string [] args) {
    int sum = 0;
    string currentNumber = "0";
    while (currentNumber != "00") {
        int num = Int32.Parse (currentNumber);
        sum += num;
        Console.WriteLine ("Sum is: " + sum);
        currentNumber = Console.ReadLine ();
    }
    Console.Read ();
}
----------------------------------------

public static void Main () {
    int numCount = 0;
    int sum = 0;
    string input;
    do
        {
            Console.Write ("Enter number: ");
            input = Console.ReadLine ();
            int num;
            if (int.TryParse (input, out num)) {
                sum += num;
                numCount ++;
                Console.WriteLine ("Sum is: " + sum);
            }
        } while (! (numCount > 2 && input == "00"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
359342_1643056_6_21
359342_359923_6_20
Title: An effective method for encrypting a license file? 
----------------------------------------

private RSACryptoServiceProvider GetPublicKeyFromAssembly (Assembly assembly) {
    byte [] rawPublicKeyData = assembly.GetName ().GetPublicKey ();
    int extraHeadersLen = 12;
    int bytesToRead = rawPublicKeyData.Length - extraHeadersLen;
    byte [] publicKeyData = new byte [bytesToRead];
    Buffer.BlockCopy (rawPublicKeyData, extraHeadersLen, publicKeyData, 0, bytesToRead);
    RSACryptoServiceProvider publicKey = new RSACryptoServiceProvider ();
    publicKey.ImportCspBlob (publicKeyData);
    return publicKey;
}
----------------------------------------

public static RSACryptoServiceProvider GetPublicKeyFromAssembly (Assembly assembly) {
    if (assembly == null)
        throw new ArgumentNullException ("assembly", "Assembly may not be null");

    byte [] pubkey = assembly.GetName ().GetPublicKey ();
    if (pubkey.Length == 0)
        throw new ArgumentException ("No public key in assembly.");

    RSAParameters rsaParams = EncryptionUtils.GetRSAParameters (pubkey);
    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider ();
    rsa.ImportParameters (rsaParams);
    return rsa;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35946696_35947064_3_40
35946696_35949393_1_26
Title: C# Visual Studio - Implementing user authentication using text files 
----------------------------------------

static void Main (string [] args) {
    try {
        if (File.Exists (@"c:\Usernames.txt")) {
            Console.WriteLine ("File already exists.I am doing nothing.Tadaaaaaaaaaa !!!");
            return;
        } else {
            string sContinue = "yes";
            HashSet < string > sUserNames = new HashSet < string > ();
            while (sContinue.Equals ("yes")) {
                Console.WriteLine ("Enter username:");
                string sUserName = Console.ReadLine ();
                if (! sUserNames.Contains (sUserName)) {
                    sUserNames.Add (sUserName);
                    using (StreamWriter oWriter = new StreamWriter (@"c:\Usernames.txt", true))
                    oWriter.WriteLine (sUserName);
                    Console.WriteLine ("Username {0} was added.Enter yes to continue or no to exit", sUserName);
                } else
                    Console.WriteLine ("Username {0} exists.Enter yes to add new username or no to exit", sUserName);

                sContinue = Console.ReadLine ();
            }
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
    }
    Console.WriteLine ("Done");
    Console.Read ();
}
----------------------------------------

static void Main () {
    string path = @"C:\Usernames.txt";
    if (File.Exists (path))
        Console.WriteLine ("File already exists. Exiting the application...");
    else {
        List < string > list = new List < string > ();
        string IsContinue = "Y";
        while (IsContinue.Equals ("Y")) {
            Console.WriteLine ("Enter the username --");
            string userName = Console.ReadLine ();
            if (! list.Contains (userName)) {
                list.Add (userName);
                File.AppendAllText (path, userName + Environment.NewLine);
                Console.WriteLine ("Success...! Continue (Y/N) ?", userName);
                IsContinue = Console.ReadLine ().ToUpper ();
            } else
                Console.WriteLine ("{0} already exists. Choose a new Username again.\n", userName);

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35957430_36004088_13_23
35957430_36570049_14_24
Title: How to test a method that depends on database content? 
----------------------------------------

public Transaction FindOrCreateTransactionByID (string id, DBContext db) {
    Transaction t = db.Transactions.SingleOrDefault (f = > f.TransactionID == id);
    if (t == null) {
        t = new Transaction {TransactionID = id};
        db.Transactions.Add (t);
        db.SaveChanges ();
    }
    return t;
}
----------------------------------------

public Transaction FindOrCreateTransactionByID (string id, DBContext db) {
    Transaction t = db.Transactions.SingleOrDefault (f = > f.TransactionID == id);
    if (t == null) {
        t = new Transaction {TransactionID = id};
        db.Transactions.Add (t);
        db.SaveChanges ();
    }
    return t;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36060238_36060443_1_13
36060238_36060813_1_34
Title: C# program for odd even number 
----------------------------------------

static void Main (string [] args) {
    var l = string.Empty;
    while (l != "exit") {
        l = Console.ReadLine ();
        int i;
        if (! int.TryParse (l, out i))
            continue;

        Console.WriteLine (i % 2 == 0 ? "even" : "odd");
        Console.WriteLine ("enter again");
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    string userChoice, number;
    int checkInt;
    Console.WriteLine ("Do you want check even/odd number?y/n");
    userChoice = Console.ReadLine ();
    if (userChoice.ToLower ().Equals ("y")) {
        do
            {
                Console.WriteLine ("Please enter your number");
                number = Console.ReadLine ();
                if (int.TryParse (number, out checkInt)) {
                    if ((checkInt % 2) == 0) {
                        Console.WriteLine ("Your entered number {0} is even", checkInt);
                    } else {
                        Console.WriteLine ("Your entered number {0} is odd", checkInt);
                    }
                } else {
                    Console.WriteLine ("Plesae enter integer value");
                }
                Console.WriteLine ("Do you want check even/odd number?y/n");
                userChoice = Console.ReadLine ();
            } while (userChoice.ToLower ().Equals ("y"));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36060238_36060443_1_13
36060238_37384944_1_17
Title: C# program for odd even number 
----------------------------------------

static void Main (string [] args) {
    var l = string.Empty;
    while (l != "exit") {
        l = Console.ReadLine ();
        int i;
        if (! int.TryParse (l, out i))
            continue;

        Console.WriteLine (i % 2 == 0 ? "even" : "odd");
        Console.WriteLine ("enter again");
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    int i;
    Console.Write ("Enter a Number : ");
    i = int.Parse (Console.ReadLine ());
    if (i % 2 == 0) {
        Console.Write ("Entered Number is an Even Number");
        Console.Read ();
    } else {
        Console.Write ("Entered Number is an Odd Number");
        Console.Read ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36060238_36060813_1_34
36060238_37384944_1_17
Title: C# program for odd even number 
----------------------------------------

static void Main () {
    string userChoice, number;
    int checkInt;
    Console.WriteLine ("Do you want check even/odd number?y/n");
    userChoice = Console.ReadLine ();
    if (userChoice.ToLower ().Equals ("y")) {
        do
            {
                Console.WriteLine ("Please enter your number");
                number = Console.ReadLine ();
                if (int.TryParse (number, out checkInt)) {
                    if ((checkInt % 2) == 0) {
                        Console.WriteLine ("Your entered number {0} is even", checkInt);
                    } else {
                        Console.WriteLine ("Your entered number {0} is odd", checkInt);
                    }
                } else {
                    Console.WriteLine ("Plesae enter integer value");
                }
                Console.WriteLine ("Do you want check even/odd number?y/n");
                userChoice = Console.ReadLine ();
            } while (userChoice.ToLower ().Equals ("y"));
    }
}
----------------------------------------

static void Main (string [] args) {
    int i;
    Console.Write ("Enter a Number : ");
    i = int.Parse (Console.ReadLine ());
    if (i % 2 == 0) {
        Console.Write ("Entered Number is an Even Number");
        Console.Read ();
    } else {
        Console.Write ("Entered Number is an Odd Number");
        Console.Read ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36071994_36072318_1_21
36071994_36072318_23_49
Title: How can I serialize a List<> of classes that I've created 
----------------------------------------

private void Serialize < T > (T data) {
    using (TextWriter WriteFileStream = new StreamWriter ("test.xml"))
    {
        XmlSerializer SerializerObj = new XmlSerializer (typeof (T));
        try {
            SerializerObj.Serialize (WriteFileStream, data);
        }
        catch (Exception ex) {
            Console.WriteLine (string.Format ("Failed to serialize. Reason: {0}", ex.Message));
        }
    }}
----------------------------------------

private T Deserialize < T > () where T : new () {
    T ReturnListOfT = CreateInstance < T > ();
    using (FileStream ReadFileStream = new FileStream ("test.xml", FileMode.Open, FileAccess.Read, FileShare.Read))
    {
        XmlSerializer SerializerObj = new XmlSerializer (typeof (T));
        try {
            ReturnListOfT = (T) SerializerObj.Deserialize (ReadFileStream);
        }
        catch (Exception ex) {
            Console.WriteLine (string.Format ("Failed to serialize. Reason: {0}", ex.Message));
        }
    } return ReturnListOfT;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3607210_3607334_9_27
3607210_3607489_16_32
Title: Reduce casting and better styling 
----------------------------------------

public static bool ProcessErrorCode (object response) {
    Func < object, ResponseResult > processor = null;
    ResponseResult result = new ResponseResult () {IsOkay = false, ErrCode = "UNKNOWN"};
    if (_processors.TryGetValue (response.GetType (), out processor))
        result = processor (response);

    if (result.IsOkay)
        return true;

    string msg = "Operation resulted in error code:" + result.ErrCode;
    LogErrorCode (msg);
    return false;
}
----------------------------------------

private static bool ProcessErrorCode (object response) {
    bool isOkay = false;
    string errCode = "UNKNOWN";
    TestErrorCode (response, AResponseCode.Ok, ref isOkay, ref errCode);
    TestErrorCode (response, BResponseCode.Ok, ref isOkay, ref errCode);
    TestErrorCode (response, CResponseCode.Ok, ref isOkay, ref errCode);
    if (isOkay) {
        return true;
    }
    LogErrorCode ("Operation resulted in error code:" + errCode);
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3607210_3607334_9_27
3607210_3607526_1_12
Title: Reduce casting and better styling 
----------------------------------------

public static bool ProcessErrorCode (object response) {
    Func < object, ResponseResult > processor = null;
    ResponseResult result = new ResponseResult () {IsOkay = false, ErrCode = "UNKNOWN"};
    if (_processors.TryGetValue (response.GetType (), out processor))
        result = processor (response);

    if (result.IsOkay)
        return true;

    string msg = "Operation resulted in error code:" + result.ErrCode;
    LogErrorCode (msg);
    return false;
}
----------------------------------------

private static bool ProcessErrorCode (object response) {
    var types = new [] {typeof (Response < AResponseCode >), typeof (Response < BResponseCode >), typeof (DataResponse < CResponseCode, string >)};
    var errCode = ! types.Contains (response.GetType ()) ? "UNKNOWN" : (string) (((dynamic) response).Code.ToString ());
    if (errCode == "Ok")
        return true;

    LogErrorCode ("Operation resulted in error code:" + errCode);
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3607210_3607489_16_32
3607210_3607526_1_12
Title: Reduce casting and better styling 
----------------------------------------

private static bool ProcessErrorCode (object response) {
    bool isOkay = false;
    string errCode = "UNKNOWN";
    TestErrorCode (response, AResponseCode.Ok, ref isOkay, ref errCode);
    TestErrorCode (response, BResponseCode.Ok, ref isOkay, ref errCode);
    TestErrorCode (response, CResponseCode.Ok, ref isOkay, ref errCode);
    if (isOkay) {
        return true;
    }
    LogErrorCode ("Operation resulted in error code:" + errCode);
    return false;
}
----------------------------------------

private static bool ProcessErrorCode (object response) {
    var types = new [] {typeof (Response < AResponseCode >), typeof (Response < BResponseCode >), typeof (DataResponse < CResponseCode, string >)};
    var errCode = ! types.Contains (response.GetType ()) ? "UNKNOWN" : (string) (((dynamic) response).Code.ToString ());
    if (errCode == "Ok")
        return true;

    LogErrorCode ("Operation resulted in error code:" + errCode);
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36088884_36090112_10_61
36088884_36090388_12_50
Title: How to get particular node's all values from xml? 
----------------------------------------

static void Main (string [] args) {
    try {
        XmlDocument doc = new XmlDocument ();
        doc.Load (@"C:\java\xml\root.xml");
        var root = doc.DocumentElement;
        var productNode = root.FirstChild;
        var elementsToRemove = new List < XmlElement > ();
        foreach (XmlElement element in root.GetElementsByTagName ("Project")) {
            elementsToRemove.Add (element);
        }
        foreach (XmlElement element in root.GetElementsByTagName ("Main")) {
            elementsToRemove.Add (element);
        }
        var maintList = new List < XmlElement > ();
        foreach (XmlElement element in root.GetElementsByTagName ("Maintainance")) {
            maintList.Add (element);
        }
        foreach (XmlElement element in maintList) {
            var newNode = element.CloneNode (true);
            element.ParentNode.ParentNode.AppendChild (newNode);
        }
        foreach (XmlElement element in root.GetElementsByTagName ("Status")) {
            elementsToRemove.Add (element);
        }
        foreach (XmlElement element in elementsToRemove) {
            element.ParentNode.RemoveChild (element);
        }
        Console.WriteLine ("Xml: " + doc.OuterXml);
    }
    catch (Exception e) {
        Console.WriteLine (e);
    }
    while (Console.ReadKey (true).Key != ConsoleKey.Escape) {
    }
}
----------------------------------------

static void Main (string [] args) {
    string xml = "<Root Details=\"false\"><![CDATA[" + "<Product count=\"45\" Name=\"Success\"><![CDATA[" + "<Project Id=\"420\" Title=\"First\"/>" + "<Main Id=\"220\" Title=\"Last\"/>" + "<Status>" + "<Maintainance Id=\"123\" Title=\"Good\"><![CDATA[" + "<Maintain Id=\"ABC\" />" + "<Maintain Id=\"DEF\" />" + "<Maintain Id=\"GHI\" />" + "</Maintainance>" + "<Maintainance Id=\"456\" Title=\"Better\"><![CDATA[" + "<Maintain Id=\"JKL\" />" + "<Maintain Id=\"MNO\" />" + "<Maintain Id=\"PQR\" />" + "</Maintainance>" + "<Maintainance Id=\"789\" Title=\"Bad\"><![CDATA[" + "<Maintain Id=\"STU\" />" + "<Maintain Id=\"VWX\" />" + "<Maintain Id=\"XYZ\" />" + "</Maintainance>" + "</Status>" + "<Main Id=\"420\" Title=\"Failure\"/>" + "<Project Id=\"220\" Title=\"First\"/>" + "</Product>" + "</Root>";
    XDocument doc = XDocument.Parse (xml);
    List < XElement > maintainances = doc.Descendants ("Maintainance").ToList ();
    XElement product = doc.Descendants ("Product").FirstOrDefault ();
    product.ReplaceWith (new XElement ("Product", product.Attributes ()));
    product = doc.Descendants ("Product").FirstOrDefault ();
    foreach (XElement maintainance in maintainances) {
        product.Add (maintainance);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3611166_3611312_12_28
3611166_3614000_4_18
Title: ASP.NET MVC 2 Problem with custom ModelValidator 
----------------------------------------

public override bool IsValid (object value) {
    var firstValue = value.GetType ().GetProperty (this.firstProperty).GetValue (value, null) as string;
    var secondValue = value.GetType ().GetProperty (this.secondProperty).GetValue (value, null) as string;
    if (! string.IsNullOrWhiteSpace (firstValue)) {
        return true;
    }
    if (! string.IsNullOrWhiteSpace (secondValue)) {
        return true;
    }
    return false;
}
----------------------------------------

public override bool IsValid (object value) {
    var student = value as StudentLogin;
    if (student == null) {
        return false;
    }
    if (student.StudentId.HasValue || ! string.IsNullOrEmpty (student.SSN)) {
        return true;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36115758_36118896_1_17
36115758_36137770_1_19
Title: how can hold node in tree view when i hover on it in c# windows form 
----------------------------------------

public void showTipsTree (TreeView treeView1, TreeNodeMouseHoverEventArgs e, int imageindex, string tooltipField, string nameTable, string orginalField) {
    treeView1.ShowNodeToolTips = true;
    if (e.Node.SelectedImageIndex == imageindex) {
        string q = e.Node.ToString ();
        SqlConnection conn = new SqlConnection (Connection1.x);
        conn.Open ();
        string [] a = q.Split ();
        SqlCommand cmd = new SqlCommand (String.Format ("select {1} from {2} where {3}={0}", a [1], tooltipField, nameTable, orginalField), conn);
        e.Node.ToolTipText = cmd.ExecuteScalar ().ToString ();
        conn.Close ();
    }
}
----------------------------------------

static public void showTipsTree (TreeView treeView1, string tooltipField_toMainNodes, string nameTable_toMainNodes, string orginalField_toMainNodes, string tooltipField_toSubNodes, string nameTable_toSubNodes, string orginalField_toSubNodes) {
    treeView1.ShowNodeToolTips = true;
    SqlConnection conn = new SqlConnection (Connection1.x);
    conn.Open ();
    for (int i = 0; i < treeView1.Nodes.Count; i ++) {
        string [] a = treeView1.Nodes [i].ToString ().Split ();
        SqlCommand cmd = new SqlCommand (String.Format ("select {0} from {1} where {2}={3}", tooltipField_toMainNodes, nameTable_toMainNodes, orginalField_toMainNodes, a [1]), conn);
        treeView1.Nodes [i].ToolTipText = cmd.ExecuteScalar ().ToString ();
        for (int j = 0; j < treeView1.Nodes [i].Nodes.Count; j ++) {
            string [] a2 = treeView1.Nodes [i].Nodes [j].ToString ().Split ();
            SqlCommand cmd2 = new SqlCommand (String.Format ("select {0} from {1} where {2}={3}", tooltipField_toSubNodes, nameTable_toSubNodes, orginalField_toSubNodes, a2 [1]), conn);
            treeView1.Nodes [i].Nodes [j].ToolTipText = cmd2.ExecuteScalar ().ToString ();
        }
    }
    conn.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36119429_36119528_1_14
36119429_36119538_1_18
Title: Show just one message box 
----------------------------------------

private void winner () {
    if (player2turn == false) {
        gameover = true;
        MessageBox.Show ("Player 2 wins!", "Retry?", MessageBoxButtons.YesNo);
    } else {
        gameover = true;
        MessageBox.Show ("Player 1 wins!", "Retry?", MessageBoxButtons.YesNo);
    }
}
----------------------------------------

private void winner () {
    if (player2turn == false) {
        timer1.Stop ();
        MessageBox.Show ("Player 2 wins!", "Retry?", MessageBoxButtons.YesNo);
        gameover = true;
    } else {
        timer1.Stop ();
        MessageBox.Show ("Player 1 wins!", "Retry?", MessageBoxButtons.YesNo);
        gameover = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36127277_36127492_1_24
36127277_36127867_1_11
Title: split a string array to a jagged object array 
----------------------------------------

public object [] [] bloop (string [] bstr) {
    var numbers = new List < int > ();
    var strings = new List < string > ();
    var result = new object [2] [];
    foreach (var str in bstr) {
        int number = 0;
        if (int.TryParse (str, out number)) {
            numbers.Add (number);
        } else {
            strings.Add (str);
        }
    }
    result [0] = strings.ToArray ();
    result [1] = numbers.ToArray ();
    return result;
}
----------------------------------------

public static object [] [] bloop (string [] bstr) {
    object [] [] result = new object [2] [] {new object [bstr.Length], new object [bstr.Length]};
    int sFlag = 0, iFlag = 0, val;
    foreach (string str in bstr)
        if (int.TryParse (str, out val))
            result [1] [iFlag ++] = val;
        else
            result [0] [sFlag ++] = str;

    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36161434_36161569_1_17
36161434_36161573_1_23
Title: Exclude directories from file search 
----------------------------------------

void DirSearch (string sDir) {
    List < string > DirList = new List < string > ();
    DirList.Add ("Combustor");
    DirList.Add ("INLET");
    string [] extensions = {".c", ".h", ".isi", ".isc", ".xml", ".sheet"};
    foreach (string file in Directory.EnumerateFiles (sDir, "*.*", SearchOption.AllDirectories).Where (s = > ! DirList.Any (d = > s.StartsWith (d, StringComparison.InvariantCultureIgnoreCase)) && extensions.Any (ext = > ext == Path.GetExtension (s)))) {
        UpdaterUtility.UpdateFile (file);
    }
}
----------------------------------------

void DirSearch (string sDir) {
    List < string > DirList = new List < string > ();
    DirList.Add ("Combustor");
    DirList.Add ("INLET");
    string [] extensions = {".c", ".h", ".isi", ".isc", ".xml", ".sheet"};
    foreach (string file in Directory.EnumerateFiles (sDir, "*.*", SearchOption.TopDirectoryOnly).Where (s = > extensions.Any (ext = > ext == Path.GetExtension (s)))) {
        UpdaterUtility.UpdateFile (file);
    }
    foreach (string subdir in Directory.GetDirectories (sDir, "*", SearchOption.TopDirectoryOnly).Where (sd = > sd != "." && sd != ".." && ! DirList.Contains (sd))) {
        DirSearch (Path.Combine (sDir, subdir));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36161434_36161569_1_17
36161434_36161733_1_15
Title: Exclude directories from file search 
----------------------------------------

void DirSearch (string sDir) {
    List < string > DirList = new List < string > ();
    DirList.Add ("Combustor");
    DirList.Add ("INLET");
    string [] extensions = {".c", ".h", ".isi", ".isc", ".xml", ".sheet"};
    foreach (string file in Directory.EnumerateFiles (sDir, "*.*", SearchOption.AllDirectories).Where (s = > ! DirList.Any (d = > s.StartsWith (d, StringComparison.InvariantCultureIgnoreCase)) && extensions.Any (ext = > ext == Path.GetExtension (s)))) {
        UpdaterUtility.UpdateFile (file);
    }
}
----------------------------------------

void DirSearch (string sDir) {
    List < string > DirList = new List < string > ();
    DirList.Add ("\\Combustor".ToUpper ());
    DirList.Add ("\\INLET".ToUpper ());
    string [] extensions = {".c", ".h", ".isi", ".isc", ".xml", ".sheet", ".txt"};
    foreach (string file in Directory.EnumerateFiles (sDir, "*.*", SearchOption.AllDirectories).Where (s = > ! DirList.Any (d = > Path.GetDirectoryName (s).ToUpper ().Contains (d)) && extensions.Any (ext = > ext == Path.GetExtension (s)))) {
        Console.WriteLine (file);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36161434_36161573_1_23
36161434_36161733_1_15
Title: Exclude directories from file search 
----------------------------------------

void DirSearch (string sDir) {
    List < string > DirList = new List < string > ();
    DirList.Add ("Combustor");
    DirList.Add ("INLET");
    string [] extensions = {".c", ".h", ".isi", ".isc", ".xml", ".sheet"};
    foreach (string file in Directory.EnumerateFiles (sDir, "*.*", SearchOption.TopDirectoryOnly).Where (s = > extensions.Any (ext = > ext == Path.GetExtension (s)))) {
        UpdaterUtility.UpdateFile (file);
    }
    foreach (string subdir in Directory.GetDirectories (sDir, "*", SearchOption.TopDirectoryOnly).Where (sd = > sd != "." && sd != ".." && ! DirList.Contains (sd))) {
        DirSearch (Path.Combine (sDir, subdir));
    }
}
----------------------------------------

void DirSearch (string sDir) {
    List < string > DirList = new List < string > ();
    DirList.Add ("\\Combustor".ToUpper ());
    DirList.Add ("\\INLET".ToUpper ());
    string [] extensions = {".c", ".h", ".isi", ".isc", ".xml", ".sheet", ".txt"};
    foreach (string file in Directory.EnumerateFiles (sDir, "*.*", SearchOption.AllDirectories).Where (s = > ! DirList.Any (d = > Path.GetDirectoryName (s).ToUpper ().Contains (d)) && extensions.Any (ext = > ext == Path.GetExtension (s)))) {
        Console.WriteLine (file);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36274791_36275067_1_16
36274791_36275479_1_28
Title: Summing infinite series 1/n 
----------------------------------------

static double AddSum () {
    double a = 0;
    double oldvalue;
    int i = 1;
    do
        {
            oldvalue = a;
            a += (i % 2 == 0) ? (double) - 1 / (i + 1) : (double) 1 / (i + 1);
            i ++;
        } while (! (i != 1 && Math.Abs (a - oldvalue) < 0.0001));
    return a;
}
----------------------------------------

static double AddSum () {
    double pos = 1.0;
    double neg = 0.0;
    double delta = 0.001;
    double current = pos + neg;
    double previous = pos + 2.0 * delta;
    int i = 2;
    while (Math.Abs (current - previous) >= delta) {
        if (i % 2 == 0) {
            pos += 1.0 / i;
        } else {
            neg -= 1.0 / i;
        }
        previous = current;
        current = pos + neg;
        i ++;
    }
    return current;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36280733_36280887_1_15
36280733_36281198_1_29
Title: How to create list of unknown/generic type in C#? 
----------------------------------------

public static List < T > AssembleItem < T > (DataTable dtItems) where T : new () {
    List < T > items = null;
    if (dtItems != null) {
        items = new List < T > ();
        foreach (DataRow dr in dtItems.Rows) {
            T item = new T ();
            items.Add (item);
        }
    }
    return items;
}
----------------------------------------

public static List < T > AssembleItem < T > (DataTable dtItems) where T : new () {
    List < T > items = null;
    if (dtItems != null) {
        items = new List < T > ();
        foreach (DataRow dr in dtItems.Rows) {
            T item = new T ();
            foreach (DataRow dr in dtItems.Rows) {
                T item = new T ();
                Type t = typeof (T);
                foreach (var property in t.GetProperties (BindingFlags.Public)) {
                    var propertyname = property.Name;
                    property.SetValue (item, data);
                }
                items.Add (item);
            }
        }
        return items;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36284250_36298686_17_30
36284250_36298686_35_46
Title: Xamrin.Forms Entry Cell How to change font size for Placeholder 
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < Entry > e) {
    base.OnElementChanged (e);
    if (e.OldElement == null) {
        var nativeEditText = (global :: Android.Widget.EditText) Control;
        nativeEditText.SetBackgroundColor (global :: Android.Graphics.Color.Transparent);
        nativeEditText.SetTextColor (global :: Android.Graphics.Color.White);
        Typeface font = Typeface.CreateFromAsset (Forms.Context.Assets, "Neris-Light.otf");
        nativeEditText.TextSize = 14f;
        nativeEditText.Typeface = font;
    }
}
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < Entry > e) {
    base.OnElementChanged (e);
    if (e.OldElement == null) {
        var nativeEditText = (global :: Android.Widget.EditText) Control;
        nativeEditText.Hint = "Username";
        nativeEditText.SetHintTextColor (global :: Android.Graphics.Color.White);
        nativeEditText.TextSize = 18f;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36284250_36298686_17_30
36284250_36298686_51_62
Title: Xamrin.Forms Entry Cell How to change font size for Placeholder 
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < Entry > e) {
    base.OnElementChanged (e);
    if (e.OldElement == null) {
        var nativeEditText = (global :: Android.Widget.EditText) Control;
        nativeEditText.SetBackgroundColor (global :: Android.Graphics.Color.Transparent);
        nativeEditText.SetTextColor (global :: Android.Graphics.Color.White);
        Typeface font = Typeface.CreateFromAsset (Forms.Context.Assets, "Neris-Light.otf");
        nativeEditText.TextSize = 14f;
        nativeEditText.Typeface = font;
    }
}
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < Entry > e) {
    base.OnElementChanged (e);
    if (e.OldElement == null) {
        var nativeEditText = (global :: Android.Widget.EditText) Control;
        nativeEditText.Hint = "Password";
        nativeEditText.SetHintTextColor (global :: Android.Graphics.Color.White);
        nativeEditText.TextSize = 18f;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36284250_36298686_35_46
36284250_36298686_51_62
Title: Xamrin.Forms Entry Cell How to change font size for Placeholder 
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < Entry > e) {
    base.OnElementChanged (e);
    if (e.OldElement == null) {
        var nativeEditText = (global :: Android.Widget.EditText) Control;
        nativeEditText.Hint = "Username";
        nativeEditText.SetHintTextColor (global :: Android.Graphics.Color.White);
        nativeEditText.TextSize = 18f;
    }
}
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < Entry > e) {
    base.OnElementChanged (e);
    if (e.OldElement == null) {
        var nativeEditText = (global :: Android.Widget.EditText) Control;
        nativeEditText.Hint = "Password";
        nativeEditText.SetHintTextColor (global :: Android.Graphics.Color.White);
        nativeEditText.TextSize = 18f;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36315939_36316779_18_39
36315939_36316779_1_16
Title: Is there a way to serialize Dictionary containing abstract type using DataContractSerializer? 
----------------------------------------

public static T Deserialize < T > () where T : new () {
    T ReturnListOfT = CreateInstance < T > ();
    try {
        using (Stream stream = File.Open ("data.xml", FileMode.Open))
        {
            DataContractSerializer serializer = new DataContractSerializer (typeof (T));
            ReturnListOfT = (T) serializer.ReadObject (stream);
        }}
    catch (IOException) {
    }
    return (T) ReturnListOfT;
}
----------------------------------------

public static void Serialize < T > (T data) {
    try {
        using (Stream stream = File.Open ("data.xml", FileMode.Create))
        {
            DataContractSerializer serializer = new DataContractSerializer (typeof (T));
            serializer.WriteObject (stream, data);
        }}
    catch (IOException) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36317768_36318403_1_19
36317768_36318526_1_14
Title: Just in time computation of combinations 
----------------------------------------

public static IEnumerable < List < T > > Combinations < T > (int count, IEnumerable < T > items) {
    if (count <= 0)
        yield break;

    if (count == 1) {
        foreach (var item in items)
            yield return new List < T > {item};

        yield break;
    }
    foreach (var item in items) {
        foreach (var combo in Combinations < T > (count - 1, items)) {
            var result = new List < T > {item};
            result.AddRange (combo);
            yield return result;
        }
    }
}
----------------------------------------

private IEnumerable < List < T > > Combinations < T > (int n, T [] values) {
    if (n == 0)
        yield return new List < T > ();
    else {
        foreach (var list in Combinations (n - 1, values))
            foreach (var item in values) {
                var items = new List < T > (list);
                items.Add (item);
                yield return items;
            }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36317768_36318403_1_19
36317768_36319334_15_30
Title: Just in time computation of combinations 
----------------------------------------

public static IEnumerable < List < T > > Combinations < T > (int count, IEnumerable < T > items) {
    if (count <= 0)
        yield break;

    if (count == 1) {
        foreach (var item in items)
            yield return new List < T > {item};

        yield break;
    }
    foreach (var item in items) {
        foreach (var combo in Combinations < T > (count - 1, items)) {
            var result = new List < T > {item};
            result.AddRange (combo);
            yield return result;
        }
    }
}
----------------------------------------

public static IEnumerable < IEnumerable < T > > Combinator < T > (IEnumerable < T > sequence, int count) {
    if (count == 0) {
        yield return Enumerable.Empty < T > ();
        yield break;
    }
    foreach (T startingElement in sequence) {
        IEnumerable < T > remainingItems = sequence;
        foreach (IEnumerable < T > permutationOfRemainder in Combinator (remainingItems, count - 1))
            yield return permutationOfRemainder.Concat (new [] {startingElement});

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36317768_36318526_1_14
36317768_36319334_15_30
Title: Just in time computation of combinations 
----------------------------------------

private IEnumerable < List < T > > Combinations < T > (int n, T [] values) {
    if (n == 0)
        yield return new List < T > ();
    else {
        foreach (var list in Combinations (n - 1, values))
            foreach (var item in values) {
                var items = new List < T > (list);
                items.Add (item);
                yield return items;
            }

    }
}
----------------------------------------

public static IEnumerable < IEnumerable < T > > Combinator < T > (IEnumerable < T > sequence, int count) {
    if (count == 0) {
        yield return Enumerable.Empty < T > ();
        yield break;
    }
    foreach (T startingElement in sequence) {
        IEnumerable < T > remainingItems = sequence;
        foreach (IEnumerable < T > permutationOfRemainder in Combinator (remainingItems, count - 1))
            yield return permutationOfRemainder.Concat (new [] {startingElement});

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36333567_36335767_18_35
36333567_36335767_1_16
Title: "Saving a Dictionary<int object> in C# - Serialization?" 
----------------------------------------

public static Object Deserialize < Object > (Stream stream) where Object : new () {
    Object ret = CreateInstance < Object > ();
    try {
        using (stream)
        {
            BinaryFormatter bin = new BinaryFormatter ();
            ret = (Object) bin.Deserialize (stream);
        }}
    catch (IOException) {
    }
    return ret;
}
----------------------------------------

public static void Serialize < Object > (Object dictionary, Stream stream) {
    try {
        using (stream)
        {
            BinaryFormatter bin = new BinaryFormatter ();
            bin.Serialize (stream, dictionary);
        }}
    catch (IOException) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36338318_36339035_59_78
36338318_36343447_1_15
Title: Programatically run console app either as foreground or background process c# 
----------------------------------------

[STAThread] private static void Main (string [] args) {
    var mode = args.Length > 0 ? args [0] : Gui;
    switch (mode) {
        case Gui :
            LoadForm ();
            break;
        case GuiConsole :
            LoadConsole ();
            break;
        case BackgroundProcess :
            break;
    }
}
----------------------------------------

static void Main (string [] args) {
    if (args.Length >= 1 && args.Any (s = > s.Equals ("-silent", StringComparison.OrdinalIgnoreCase))) {
        ProcessStartInfo psi = new ProcessStartInfo (System.Reflection.Assembly.GetExecutingAssembly ().CodeBase);
        psi.CreateNoWindow = true;
        psi.WindowStyle = ProcessWindowStyle.Hidden;
        psi.WorkingDirectory = Process.GetCurrentProcess ().StartInfo.WorkingDirectory;
        Process.Start (psi);
        return;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36343933_36344103_1_23
36343933_36344243_1_20
Title: Unit Test for Writing to a Text File 
----------------------------------------

public bool WriteMovieListToFile () {
    try {
        FileStream fs = new FileStream ("MovieList.txt", FileMode.Append, FileAccess.Write);
        StreamWriter textWriter = new StreamWriter (fs);
        textWriter.WriteLine (movie.Title);
        textWriter.WriteLine (movie.Genre);
        textWriter.WriteLine (movie.Actor);
        textWriter.WriteLine (movie.Year);
        textWriter.Close ();
        fs.Dispose ();
        fs.Flush ();
        return true;
    }
    catch (Exception ex) {
        Console.WriteLine ("Error:" + ex.Message);
        return false;
    }
}
----------------------------------------

public bool WriteMovieListToFile () {
    try {
        using (FileStream fs = new FileStream ("MovieList.txt", FileMode.Append, FileAccess.Write))
        using (StreamWriter textWriter = new StreamWriter (fs))
        {
            textWriter.WriteLine (movie.Title);
            textWriter.WriteLine (movie.Genre);
            textWriter.WriteLine (movie.Actor);
            textWriter.WriteLine (movie.Year);
        } return true;
    }
    catch (Exception ex) {
        Console.WriteLine ("Error:" + ex.Message);
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36399538_36399680_1_29
36399538_37807111_6_40
Title: How to add c# login attempts loop in console application? 
----------------------------------------

static void Main (string [] args) {
    for (int i = 0; i < 3; i ++) {
        Console.WriteLine ("Status: " + status.Onaangemeld);
        Console.WriteLine ("Welkom, typ hieronder het gebruikersnaam:");
        string Naam = Console.ReadLine ();
        Console.WriteLine ("Vul hieronder het wachtwoord in:");
        string Wachtwoord = Console.ReadLine ();
        if (Naam == "gebruiker" && Wachtwoord == "SHARPSOUND") {
            Console.Clear ();
            Console.WriteLine ("Status: " + status.Ingelogd);
            Console.WriteLine ("Welkom bij SoundSharp {0}!", Naam);
            Console.ReadLine ();
            break;
        }
        Console.Clear ();
        Console.WriteLine ("Helaas, gebruikersnaam of wachtwoord niet correct.");
    }
    Console.Clear ();
    Console.WriteLine ("....");
}
----------------------------------------

static void Main (string [] args) {
    if (MaxAttempt == currentAttempt) {
        Console.WriteLine ("You have reached maximum try .. please come after some time");
        Console.ReadLine ();
        Environment.Exit (0);
    }
    currentAttempt ++;
    Console.WriteLine ("Status: " + status.Onaangemeld);
    Console.WriteLine ("Welkom, typ hieronder het gebruikersnaam:");
    string Naam = Console.ReadLine ();
    Console.WriteLine ("Vul hieronder het wachtwoord in:");
    string Wachtwoord = Console.ReadLine ();
    if (Naam != "gebruiker" || Wachtwoord != "SHARPSOUND") {
        Console.Clear ();
        Console.WriteLine ("Helaas, gebruikersnaam of wachtwoord niet correct. Please try again");
        Console.ReadLine ();
        Console.Clear ();
        Main (args);
    }
    Console.Clear ();
    Console.WriteLine ("Status: " + status.Ingelogd);
    Console.WriteLine ("Welkom bij SoundSharp {0}!", Naam);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36405840_36406353_1_27
36405840_36407117_1_12
Title: Multiplication of large numbers represented as arrays? 
----------------------------------------

public static int [] MultiplyDigitArrays (int [] lhs, int [] rhs) {
    int length1 = Math.Max (lhs.Length, rhs.Length);
    var result = new int [length1 * length1];
    for (int i = 0; i < length1; i ++) {
        int [] PartialProduct = new int [length1 * length1];
        int length2 = Math.Min (lhs.Length, rhs.Length);
        for (int j = 0; j < length2; j ++) {
            int multiplicand = (lhs.Length < rhs.Length) ? rhs [i] : lhs [i];
            int multiplier = (lhs.Length < rhs.Length) ? lhs [j] : rhs [j];
            int product = PartialProduct [i + j] + multiplicand * multiplier;
            PartialProduct [i + j] = product % 10;
            int carry = product / 10;
            PartialProduct [i + j + 1] = PartialProduct [i + j + 1] + carry;
        }
        result = SumDigitArrays (PartialProduct, result);
    }
    return result;
}
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36407860_36408732_14_26
36407860_36411120_28_43
Title: Do something when the audio source has been playing for 2 mins 
----------------------------------------

private IEnumerator FadeNow () {
    tParam = 0f;
    while (tParam < 1) {
        tParam += Time.deltaTime * speed;
        valToBeLerped = Mathf.Lerp (0, 1, tParam);
        Debug.Log ("valToBeLerped is " + valToBeLerped.ToString ("f4"));
        yield return null;
    }
    skyboxmaterial.SetFloat ("_Blend", valToBeLerped);
    Debug.Log ("fade is done.");
}
----------------------------------------

private IEnumerator FadeNow () {
    tParam = 0f;
    while (tParam < 1) {
        tParam += Time.deltaTime;
        valToBeLerped = Mathf.Lerp (0, 1, tParam);
        skyboxmaterial.SetFloat ("_Blend", valToBeLerped);
        yield return null;
        Debug.Log ("valToBeLerped is " + valToBeLerped.ToString ("f4"));
    }
    Debug.Log ("fade is done.");
    yield break;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36429749_36432594_3_22
36429749_36432749_10_65
Title: JsonConverter: Return a single object or a List<Object> based on inbound JSON 
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Object) {
        JToken results = token ["results"];
        if (results != null && results.Type == JTokenType.Array) {
            return results.ToObject < List < Material > > (serializer);
        } else if (results == null) {
            return new List < Material > {token.ToObject < Material > (serializer)};
        }
    }
    throw new JsonSerializationException ("Unexpected JSON format encountered in MaterialArrayConverter: " + token.ToString ());
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (reader.TokenType == JsonToken.Null)
        return null;

    if (objectType.IsArray) {
        var list = (List < T >) ReadJson (reader, typeof (List < T >), new List < T > (), serializer);
        return list.ToArray ();
    } else {
        var list = (ICollection < T >) (existingValue ?? serializer.ContractResolver.ResolveContract (objectType).DefaultCreator ());
        if (reader.TokenType == JsonToken.StartArray) {
            serializer.Populate (reader, list);
        } else if (reader.TokenType == JsonToken.StartObject) {
            JObject obj = null;
            while (reader.Read ()) {
                switch (reader.TokenType) {
                    case JsonToken.PropertyName :
                        string propertyName = reader.Value.ToString ();
                        if (! reader.Read ()) {
                            throw new JsonSerializationException ("Unexpected end while reading collection");
                        }
                        if (propertyName == Results) {
                            serializer.Populate (reader, list);
                        } else {
                            obj = obj ?? new JObject ();
                            obj [propertyName] = JToken.Load (reader);
                        }
                        break;
                    case JsonToken.Comment :
                        break;
                    case JsonToken.EndObject :
                        if (obj != null)
                            list.Add (obj.ToObject < T > (serializer));

                        return list;
                }
            }
            throw new JsonSerializationException ("Unexpected end while reading collection");
        } else {
            throw new JsonSerializationException ("Unexpected start token: " + reader.TokenType);
        }
        return list;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36439222_36439522_22_33
36439222_47505230_1_12
Title: Project Euler #21 
----------------------------------------

private static int SumOfNumber (int input) {
    int sum = 0;
    for (int i = 1; i <= input / 2; i ++) {
        if (input % i == 0) {
            sum += i;
        }
    }
    return sum;
}
----------------------------------------

private static int SumOfNumber (int input) {
    int sum = 0;
    for (int i = 1; i <= input / 2; i ++) {
        if (input % i == 0) {
            sum += i;
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36466490_36494310_1_15
36466490_36510908_1_14
Title: Implement Generic Get<T> for MemoryCache (or any Cache) 
----------------------------------------

public static T DoGet < T > (this MemoryCache cache, string key) {
    object value = cache.Get (key);
    if (value == null) {
        return default (T);
    }
    var underlyingType = Nullable.GetUnderlyingType (t);
    if (underlyingType != null) {
        value = Convert.ChangeType (value, underlyingType);
    }
    return (T) value;
}
----------------------------------------

public static T CastValue < T > (object value) {
    if (value == null || value is DBNull) {
        return default (T);
    }
    if (value is T) {
        return (T) value;
    }
    Type t = typeof (T);
    t = (Nullable.GetUnderlyingType (t) ?? t);
    if (typeof (IConvertible).IsAssignableFrom (t) && typeof (IConvertible).IsAssignableFrom (value.GetType ())) {
        return (T) Convert.ChangeType (value, t);
    }
    return default (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36466907_36467336_1_21
36466907_36467472_1_14
Title: code that parse email from name string c# 
----------------------------------------

private void btnParse_Click (object sender, EventArgs e) {
    string email = Convert.ToString (txtEmail.Text);
    email = email.Trim ();
    if (email.Contains ("@")) {
        int IndexDomain = email.IndexOf ("@") + 1;
        string UserName = email.Substring (0, IndexDomain - 1);
        string DomainName = email.Substring (IndexDomain);
        MessageBox.Show ("User name:" + UserName.ToString () + "\n" + "Domain Name:" + DomainName.ToString (), "Parsed String");
    } else {
    }
}
----------------------------------------

private void btnParse_Click (object sender, EventArgs e) {
    string email = txtEmail.Text.Trim ();
    if (email.Contains ("@")) {
        var userName = email.Substring (0, email.IndexOf ('@'));
        var domainName = email.Substring (email.IndexOf ('@') + 1, email.Length - email.IndexOf ('@') - 1);
        MessageBox.Show ("User name:" + userName + "\n" + "Domain Name:" + domainName, "Parsed String");
    } else {
        MessageBox.Show ("Invalid email");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36488295_36636630_1_36
36488295_36636935_1_57
Title: Checking if remote/external webpage is available and get status code 
----------------------------------------

public static bool URLExists (string url) {
    HttpStatusCode result = default (HttpStatusCode);
    var request = (HttpWebRequest) WebRequest.Create (url);
    request.AllowAutoRedirect = false;
    request.Method = "HEAD";
    try {
        using (var response = request.GetResponse () as HttpWebResponse)
        {
            if (response != null) {
                if (response.StatusCode == HttpStatusCode.OK)
                    return true;

                if (response.StatusCode == HttpStatusCode.Redirect) {
                    string uriString = response.Headers ["Location"];
                    return URLExists (uriString);
                }
                response.Close ();
            }
        } return false;
    }
    catch (WebException e) {
        using (WebResponse response = e.Response)
        {
            HttpWebResponse httpResponse = (HttpWebResponse) response;
            Console.WriteLine ("Error code: {0}", httpResponse.StatusCode);
            return false;
        }}
}
----------------------------------------

protected bool URLExists (string url, params int [] acceptableCodes) {
    Func < string, int > getStatusCode = pageUrl = > {
        var statusCode = - 1;
        var webRequest = (HttpWebRequest) WebRequest.Create (pageUrl);
        webRequest.Timeout = 1200;
        webRequest.Method = "GET";
        HttpWebResponse response = null;
        try {
            response = webRequest.GetResponse () as HttpWebResponse;
        }
        catch (WebException webException) {
            response = webException.Response as HttpWebResponse;
        }
        finally {
            if (response != null) {
                statusCode = (int) response.StatusCode;
                response.Close ();
            }
        }
        return statusCode;
    };
    Func < int, bool > isStatusCodeOk = code = > {
        if (acceptableCodes != null && acceptableCodes.Contains (code)) {
            return true;
        }
        if (code >= 100 && code < 400) {
            return true;
        }
        if (code >= 500 && code <= 510) {
            return false;
        }
        return false;
    };
    var statusCode = getStatusCode (url);
    return isStatusCodeOk (statusCode);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_36506589_1_13
36506164_38135308_1_17
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var lookup = list.Select ((x, i) = > new {Index = i, Value = x}).ToLookup (x = > x.Value, x = > x.Index);
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (lookup.Contains (diff))
            return Tuple.Create (i, lookup [diff].First ());

    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var hs = new HashSet < int > ();
    list.ToList ().ForEach (x = > hs.Add (x));
    for (int i = 0; i < hs.Count; i ++) {
        var diff = sum - list [i];
        if (hs.Contains (diff)) {
            var index = list.IndexOf (diff);
            return new Tuple < int, int > (i, index);
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_36506589_1_13
36506164_42327990_1_16
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var lookup = list.Select ((x, i) = > new {Index = i, Value = x}).ToLookup (x = > x.Value, x = > x.Index);
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (lookup.Contains (diff))
            return Tuple.Create (i, lookup [diff].First ());

    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (list.Contains (diff)) {
            return Tuple.Create (i, list.IndexOf (diff));
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_36506589_1_13
36506164_47555715_1_14
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var lookup = list.Select ((x, i) = > new {Index = i, Value = x}).ToLookup (x = > x.Value, x = > x.Index);
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (lookup.Contains (diff))
            return Tuple.Create (i, lookup [diff].First ());

    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    HashSet < int > hs = new HashSet < int > ();
    for (int i = 0; i < list.Count; i ++) {
        var needed = sum - list [i];
        if (hs.Contains (needed)) {
            return Tuple.Create (list.IndexOf (needed), i);
        }
        hs.Add (list [i]);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_36506589_1_13
36506164_49582930_1_17
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var lookup = list.Select ((x, i) = > new {Index = i, Value = x}).ToLookup (x = > x.Value, x = > x.Index);
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (lookup.Contains (diff))
            return Tuple.Create (i, lookup [diff].First ());

    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int target) {
    var dict = new Dictionary < int, int > ();
    for (int i = 0; i < list.Count; i ++) {
        var diff = target - list [i];
        int j = - 1;
        if (dict.TryGetValue (diff, out j)) {
            return Tuple.Create < int, int > (j, i);
        }
        dict [list [i]] = i;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_36506589_1_13
36506164_49764149_1_20
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var lookup = list.Select ((x, i) = > new {Index = i, Value = x}).ToLookup (x = > x.Value, x = > x.Index);
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (lookup.Contains (diff))
            return Tuple.Create (i, lookup [diff].First ());

    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var dictionary = new Dictionary < int, int > ();
    for (var i = 0; i < list.Count; i ++) {
        var aim = sum - list [i];
        if (dictionary.ContainsKey (aim)) {
            return new Tuple < int, int > (dictionary [aim], i);
        } else if (! dictionary.ContainsKey (list [i])) {
            dictionary.Add (list [i], i);
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_36506589_1_13
36506164_49777156_1_22
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var lookup = list.Select ((x, i) = > new {Index = i, Value = x}).ToLookup (x = > x.Value, x = > x.Index);
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (lookup.Contains (diff))
            return Tuple.Create (i, lookup [diff].First ());

    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    int max = list.Max ();
    for (int i = 0; i < list.Count - 1; i ++) {
        int first = list [i];
        if (first + max == sum)
            return new Tuple < int, int > (i, list.IndexOf (max));

        if (first + max < sum)
            continue;

        for (int j = i + 1; j < list.Count; j ++) {
            int second = list [j];
            if (sum == first + second) {
                return new Tuple < int, int > (i, j);
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_38135308_1_17
36506164_42327990_1_16
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var hs = new HashSet < int > ();
    list.ToList ().ForEach (x = > hs.Add (x));
    for (int i = 0; i < hs.Count; i ++) {
        var diff = sum - list [i];
        if (hs.Contains (diff)) {
            var index = list.IndexOf (diff);
            return new Tuple < int, int > (i, index);
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (list.Contains (diff)) {
            return Tuple.Create (i, list.IndexOf (diff));
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_38135308_1_17
36506164_47555715_1_14
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var hs = new HashSet < int > ();
    list.ToList ().ForEach (x = > hs.Add (x));
    for (int i = 0; i < hs.Count; i ++) {
        var diff = sum - list [i];
        if (hs.Contains (diff)) {
            var index = list.IndexOf (diff);
            return new Tuple < int, int > (i, index);
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    HashSet < int > hs = new HashSet < int > ();
    for (int i = 0; i < list.Count; i ++) {
        var needed = sum - list [i];
        if (hs.Contains (needed)) {
            return Tuple.Create (list.IndexOf (needed), i);
        }
        hs.Add (list [i]);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_38135308_1_17
36506164_49582930_1_17
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var hs = new HashSet < int > ();
    list.ToList ().ForEach (x = > hs.Add (x));
    for (int i = 0; i < hs.Count; i ++) {
        var diff = sum - list [i];
        if (hs.Contains (diff)) {
            var index = list.IndexOf (diff);
            return new Tuple < int, int > (i, index);
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int target) {
    var dict = new Dictionary < int, int > ();
    for (int i = 0; i < list.Count; i ++) {
        var diff = target - list [i];
        int j = - 1;
        if (dict.TryGetValue (diff, out j)) {
            return Tuple.Create < int, int > (j, i);
        }
        dict [list [i]] = i;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_38135308_1_17
36506164_49764149_1_20
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var hs = new HashSet < int > ();
    list.ToList ().ForEach (x = > hs.Add (x));
    for (int i = 0; i < hs.Count; i ++) {
        var diff = sum - list [i];
        if (hs.Contains (diff)) {
            var index = list.IndexOf (diff);
            return new Tuple < int, int > (i, index);
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var dictionary = new Dictionary < int, int > ();
    for (var i = 0; i < list.Count; i ++) {
        var aim = sum - list [i];
        if (dictionary.ContainsKey (aim)) {
            return new Tuple < int, int > (dictionary [aim], i);
        } else if (! dictionary.ContainsKey (list [i])) {
            dictionary.Add (list [i], i);
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_38135308_1_17
36506164_49777156_1_22
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var hs = new HashSet < int > ();
    list.ToList ().ForEach (x = > hs.Add (x));
    for (int i = 0; i < hs.Count; i ++) {
        var diff = sum - list [i];
        if (hs.Contains (diff)) {
            var index = list.IndexOf (diff);
            return new Tuple < int, int > (i, index);
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    int max = list.Max ();
    for (int i = 0; i < list.Count - 1; i ++) {
        int first = list [i];
        if (first + max == sum)
            return new Tuple < int, int > (i, list.IndexOf (max));

        if (first + max < sum)
            continue;

        for (int j = i + 1; j < list.Count; j ++) {
            int second = list [j];
            if (sum == first + second) {
                return new Tuple < int, int > (i, j);
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_42327990_1_16
36506164_47555715_1_14
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (list.Contains (diff)) {
            return Tuple.Create (i, list.IndexOf (diff));
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    HashSet < int > hs = new HashSet < int > ();
    for (int i = 0; i < list.Count; i ++) {
        var needed = sum - list [i];
        if (hs.Contains (needed)) {
            return Tuple.Create (list.IndexOf (needed), i);
        }
        hs.Add (list [i]);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_42327990_1_16
36506164_49582930_1_17
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (list.Contains (diff)) {
            return Tuple.Create (i, list.IndexOf (diff));
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int target) {
    var dict = new Dictionary < int, int > ();
    for (int i = 0; i < list.Count; i ++) {
        var diff = target - list [i];
        int j = - 1;
        if (dict.TryGetValue (diff, out j)) {
            return Tuple.Create < int, int > (j, i);
        }
        dict [list [i]] = i;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_42327990_1_16
36506164_49764149_1_20
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (list.Contains (diff)) {
            return Tuple.Create (i, list.IndexOf (diff));
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var dictionary = new Dictionary < int, int > ();
    for (var i = 0; i < list.Count; i ++) {
        var aim = sum - list [i];
        if (dictionary.ContainsKey (aim)) {
            return new Tuple < int, int > (dictionary [aim], i);
        } else if (! dictionary.ContainsKey (list [i])) {
            dictionary.Add (list [i], i);
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_42327990_1_16
36506164_49777156_1_22
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    for (int i = 0; i < list.Count; i ++) {
        int diff = sum - list [i];
        if (list.Contains (diff)) {
            return Tuple.Create (i, list.IndexOf (diff));
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    int max = list.Max ();
    for (int i = 0; i < list.Count - 1; i ++) {
        int first = list [i];
        if (first + max == sum)
            return new Tuple < int, int > (i, list.IndexOf (max));

        if (first + max < sum)
            continue;

        for (int j = i + 1; j < list.Count; j ++) {
            int second = list [j];
            if (sum == first + second) {
                return new Tuple < int, int > (i, j);
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_47555715_1_14
36506164_49582930_1_17
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    HashSet < int > hs = new HashSet < int > ();
    for (int i = 0; i < list.Count; i ++) {
        var needed = sum - list [i];
        if (hs.Contains (needed)) {
            return Tuple.Create (list.IndexOf (needed), i);
        }
        hs.Add (list [i]);
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int target) {
    var dict = new Dictionary < int, int > ();
    for (int i = 0; i < list.Count; i ++) {
        var diff = target - list [i];
        int j = - 1;
        if (dict.TryGetValue (diff, out j)) {
            return Tuple.Create < int, int > (j, i);
        }
        dict [list [i]] = i;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_47555715_1_14
36506164_49764149_1_20
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    HashSet < int > hs = new HashSet < int > ();
    for (int i = 0; i < list.Count; i ++) {
        var needed = sum - list [i];
        if (hs.Contains (needed)) {
            return Tuple.Create (list.IndexOf (needed), i);
        }
        hs.Add (list [i]);
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var dictionary = new Dictionary < int, int > ();
    for (var i = 0; i < list.Count; i ++) {
        var aim = sum - list [i];
        if (dictionary.ContainsKey (aim)) {
            return new Tuple < int, int > (dictionary [aim], i);
        } else if (! dictionary.ContainsKey (list [i])) {
            dictionary.Add (list [i], i);
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_47555715_1_14
36506164_49777156_1_22
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    HashSet < int > hs = new HashSet < int > ();
    for (int i = 0; i < list.Count; i ++) {
        var needed = sum - list [i];
        if (hs.Contains (needed)) {
            return Tuple.Create (list.IndexOf (needed), i);
        }
        hs.Add (list [i]);
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    int max = list.Max ();
    for (int i = 0; i < list.Count - 1; i ++) {
        int first = list [i];
        if (first + max == sum)
            return new Tuple < int, int > (i, list.IndexOf (max));

        if (first + max < sum)
            continue;

        for (int j = i + 1; j < list.Count; j ++) {
            int second = list [j];
            if (sum == first + second) {
                return new Tuple < int, int > (i, j);
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_49582930_1_17
36506164_49764149_1_20
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int target) {
    var dict = new Dictionary < int, int > ();
    for (int i = 0; i < list.Count; i ++) {
        var diff = target - list [i];
        int j = - 1;
        if (dict.TryGetValue (diff, out j)) {
            return Tuple.Create < int, int > (j, i);
        }
        dict [list [i]] = i;
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var dictionary = new Dictionary < int, int > ();
    for (var i = 0; i < list.Count; i ++) {
        var aim = sum - list [i];
        if (dictionary.ContainsKey (aim)) {
            return new Tuple < int, int > (dictionary [aim], i);
        } else if (! dictionary.ContainsKey (list [i])) {
            dictionary.Add (list [i], i);
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_49582930_1_17
36506164_49777156_1_22
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int target) {
    var dict = new Dictionary < int, int > ();
    for (int i = 0; i < list.Count; i ++) {
        var diff = target - list [i];
        int j = - 1;
        if (dict.TryGetValue (diff, out j)) {
            return Tuple.Create < int, int > (j, i);
        }
        dict [list [i]] = i;
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    int max = list.Max ();
    for (int i = 0; i < list.Count - 1; i ++) {
        int first = list [i];
        if (first + max == sum)
            return new Tuple < int, int > (i, list.IndexOf (max));

        if (first + max < sum)
            continue;

        for (int j = i + 1; j < list.Count; j ++) {
            int second = list [j];
            if (sum == first + second) {
                return new Tuple < int, int > (i, j);
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36506164_49764149_1_20
36506164_49777156_1_22
Title: Find two sum function in c# 
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    var dictionary = new Dictionary < int, int > ();
    for (var i = 0; i < list.Count; i ++) {
        var aim = sum - list [i];
        if (dictionary.ContainsKey (aim)) {
            return new Tuple < int, int > (dictionary [aim], i);
        } else if (! dictionary.ContainsKey (list [i])) {
            dictionary.Add (list [i], i);
        }
    }
    return null;
}
----------------------------------------

public static Tuple < int, int > FindTwoSum (IList < int > list, int sum) {
    int max = list.Max ();
    for (int i = 0; i < list.Count - 1; i ++) {
        int first = list [i];
        if (first + max == sum)
            return new Tuple < int, int > (i, list.IndexOf (max));

        if (first + max < sum)
            continue;

        for (int j = i + 1; j < list.Count; j ++) {
            int second = list [j];
            if (sum == first + second) {
                return new Tuple < int, int > (i, j);
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3652911_3653045_11_83
3652911_3667925_219_246
Title: How to alloc more than MaxInteger bytes of memory in C# 
----------------------------------------

static void Main (string [] args) {
    IntPtr ptr = IntPtr.Zero;
    try {
        ptr = VirtualAllocEx (Process.GetCurrentProcess ().Handle, IntPtr.Zero, new IntPtr (0xD0000000L), AllocationType.Commit | AllocationType.Reserve, MemoryProtection.ReadWrite);
        if (ptr == IntPtr.Zero) {
            throw new Win32Exception (Marshal.GetLastWin32Error ());
        }
        MEMORY_BASIC_INFORMATION mbi = new MEMORY_BASIC_INFORMATION ();
        IntPtr result = VirtualQueryEx (Process.GetCurrentProcess ().Handle, ptr, out mbi, new IntPtr (Marshal.SizeOf (mbi)));
        if (result == IntPtr.Zero) {
            throw new Win32Exception (Marshal.GetLastWin32Error ());
        }
        unsafe {
            byte * pBytes = (byte *) ptr.ToPointer ();
            UnmanagedMemoryStream stm = new UnmanagedMemoryStream (pBytes, mbi.RegionSize.ToInt64 (), mbi.RegionSize.ToInt64 (), FileAccess.ReadWrite);
            StreamWriter sw = new StreamWriter (stm);
            sw.Write ("Everything seems to be working!\r\n");
            sw.Flush ();
            stm.Position = 0;
            StreamReader rd = new StreamReader (stm);
            Console.WriteLine (rd.ReadLine ());
        }}
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
    finally {
        if (ptr != IntPtr.Zero) {
            VirtualFreeEx (Process.GetCurrentProcess ().Handle, ptr, IntPtr.Zero, FreeType.Release);
        }
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    Storage storage = new Storage (@"<some file>");
    BigStream stream = new BigStream (storage);
    StreamReader reader = new StreamReader (stream);
    string line = reader.ReadLine ();
    IntBigArray array = new IntBigArray (storage);
    int value = array [0];
    BinaryReader binary = new BinaryReader (stream);
    binary.BaseStream.Seek (0, SeekOrigin.Begin);
    int another_value = binary.ReadInt32 ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36545817_36545974_1_24
36545817_36546086_1_17
Title: How to remove specific number of line from existing file and create new text file 
----------------------------------------

private void ReWriteFile (string NewFileName) {
    List < String > _errorLine = new List < string > () {"Error Line 1", "Error Line 2"};
    String _fileName = "InputFile.txt";
    String _outputFile = NewFileName;
    List < string > linetoDelete = _errorLine;
    String [] sourceLines = File.ReadAllLines (_fileName);
    if (sourceLines.Length > 0) {
        using (StreamWriter writer = new StreamWriter (_outputFile))
        {
            foreach (String line in sourceLines) {
                if (! _errorLine.Contains (line)) {
                    writer.WriteLine (line);
                }
            }
        }}
}
----------------------------------------

private void ReWriteFile (string _newFileName) {
    List < string > linetoDelete = _errorLine;
    using (StreamReader reader = new StreamReader (_fileName))
    {
        using (StreamWriter writer = new StreamWriter (_newFileName))
        {
            string line;
            while ((line = reader.ReadLine ()) != null) {
                if (! linetoDelete.Contains (line))
                    writer.WriteLine (line);

            }
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3654629_3654724_19_34
3654629_3654724_50_76
Title: Windows Service Design Help 
----------------------------------------

public void Start (string [] args) {
    if (Environment.UserInteractive) {
        foreach (ServiceBase service in _services) {
            Start (service, args);
        }
        Console.CancelKeyPress += new ConsoleCancelEventHandler (Console_CancelKeyPress);
        Thread.Sleep (Timeout.Infinite);
    } else {
        ServiceBase.Run (_services.ToArray ());
    }
}
----------------------------------------

private void Start (ServiceBase service, string [] args) {
    try {
        Type serviceType = typeof (ServiceBase);
        MethodInfo onStartMethod = serviceType.GetMethod ("OnStart", BindingFlags.NonPublic | BindingFlags.Instance, null, new Type [] {typeof (string [])}, null);
        if (onStartMethod == null) {
            throw new Exception ("Could not locate OnStart");
        }
        Console.WriteLine ("Starting Service: {0}", service.ServiceName);
        onStartMethod.Invoke (service, new object [] {args});
        Console.WriteLine ("Started Service: {0}", service.ServiceName);
    }
    catch (Exception ex) {
        Console.WriteLine ("Start Service Failed: {0} - {1}", service.ServiceName, ex.Message);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36557819_36557978_17_49
36557819_36558108_9_38
Title: Getting c# input from console but does not return correct output 
----------------------------------------

public static void Main (string [] args) {
    try {
        int first, second, product = 0;
        if (int.TryParse (Console.ReadLine (), out first)) {
            if (int.TryParse (Console.ReadLine (), out second)) {
                product = computeProd1 (first, second);
            } else {
                Restart ();
            }
        } else {
            Restart ();
        }
        Console.WriteLine ("Their product is:\t" + product);
        Console.ReadLine ();
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

public static void Main (string [] args) {
    int ? first = null, second = null;
    int first_i = 0, second_i = 0;
    while (! first.HasValue) {
        Console.WriteLine ("enter first number");
        if (int.TryParse (Console.ReadLine (), out first_i)) {
            first = first_i;
        }
    }
    while (! second.HasValue) {
        Console.WriteLine ("enter second number");
        if (int.TryParse (Console.ReadLine (), out second_i)) {
            second = first_i;
        }
    }
    int product = computeProd1 (first_i, second_i);
    Console.WriteLine ("Their product is:\t" + product);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36563905_36564297_1_14
36563905_36564593_47_62
Title: Need Help setting up arrays with these int variables in mind 
----------------------------------------

static void Finalcount () {
    Console.WriteLine ("The age group tallies are");
    foreach (var item in AgeGroups) {
        Console.WriteLine (" under {0} = {1}", item.Key, item.Value);
    }
    Console.WriteLine ("The total of persons living in each district");
    foreach (int d in dist) {
        Console.WriteLine ("Distict {0} = {1}", d, d);
    }
}
----------------------------------------

static void Finalcount (int [] dists, Dictionary < AgeGroup, int > ageGroups) {
    Console.WriteLine ("The age group tallies are");
    Console.WriteLine (" Eighteen and under = {0}", ageGroups [AgeGroup.UnderEighteen]);
    Console.WriteLine (" Nineteen to thirty = {0}", ageGroups [AgeGroup.NineteenToThirty]);
    Console.WriteLine (" Thirtyone to fortyfive = {0}", ageGroups [AgeGroup.ThirtyoneToFortyfive]);
    Console.WriteLine (" fortysix to sixtyfour = {0}", ageGroups [AgeGroup.FortysixToSixtyfour]);
    Console.WriteLine ("Sixtyfive and older = {0}", ageGroups [AgeGroup.SixtyfiveAndUp]);
    Console.WriteLine ("");
    Console.WriteLine ("The total of persons living in each district");
    for (var i = 0; i < dists.Length; i ++) {
        Console.WriteLine ("Distict {0} = {1}", i + 1, dists [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36564077_36564338_1_26
36564077_36564835_1_32
Title: How to use DataGridView to see database record? 
----------------------------------------

private void Find_Click (object sender, EventArgs e) {
    DataTable table = null;
    using (SqlConnection vcon1 = new SqlConnection (this.connectionString))
    {
        try {
            vcon1.Open ();
            SqlCommand Vcom = vcon1.CreateCommand ();
            Vcom.CommandText = "SELECT * FROM AssignedSolution WHERE CASEID = @caseid";
            Vcom.Parameters.Add (new SqlParameter ("@caseid", txtCASEID.Text));
            using (SqlDataAdapter adapter = new SqlDataAdapter (Vcom))
            {
                table = new DataTable ();
                adapter.Fill (table);
            }}
        catch (Exception ex) {
        }
    } dataGridView1.DataSource = table;
}
----------------------------------------

private void Find_Click (object sender, EventArgs e) {
    string ConStr = Convert.ToString (ConfigurationManager.AppSettings ["strConn"]);
    SqlConnection vcon1 = new SqlConnection (ConStr);
    vcon1.Open ();
    string querystring = "SELECT * FROM AssignedSolution WHERE CaseId = @caseid";
    SqlCommand Vcom = new SqlCommand (querystring, vcon1);
    Vcom.Parameters.AddWithValue ("@caseid", Convert.ToInt32 (txtCASEID.Text));
    try {
        DataTable dt = new DataTable ();
        SqlDataAdapter da = new SqlDataAdapter (Vcom);
        da.Fill (dt);
        dataGridView1.DataSource = dt;
    }
    catch (Exception ex) {
        MessageBox.Show ("error.occured" + ex.Message);
    }
    finally {
        Vcom.Dispose ();
        vcon1.Close ();
        vcon1.Dispose ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36567848_36568156_25_44
36567848_36568156_4_20
Title: Convert string to System.Data.SqlTypes.SqlBytes C# 
----------------------------------------

[Microsoft.SqlServer.Server.SqlFunction (IsDeterministic = true, IsPrecise = true, DataAccess = DataAccessKind.None)] public static SqlBytes BinaryDecompress (SqlBytes input) {
    if (input.IsNull)
        return SqlBytes.Null;

    int batchSize = 32768;
    byte [] buf = new byte [batchSize];
    using (MemoryStream result = new MemoryStream ())
    {
        using (DeflateStream deflateStream = new DeflateStream (input.Stream, CompressionMode.Decompress, true))
        {
            int bytesRead;
            while ((bytesRead = deflateStream.Read (buf, 0, batchSize)) > 0)
                result.Write (buf, 0, bytesRead);

        } return new SqlBytes (result.ToArray ());
    }}
----------------------------------------

[Microsoft.SqlServer.Server.SqlFunction (IsDeterministic = true, IsPrecise = true, DataAccess = DataAccessKind.None)] public static SqlBytes BinaryCompress (SqlBytes input) {
    if (input.IsNull)
        return SqlBytes.Null;

    using (MemoryStream result = new MemoryStream ())
    {
        using (DeflateStream deflateStream = new DeflateStream (result, CompressionMode.Compress, true))
        {
            deflateStream.Write (input.Buffer, 0, input.Buffer.Length);
            deflateStream.Flush ();
            deflateStream.Close ();
        } return new SqlBytes (result.ToArray ());
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36573176_36574460_1_24
36573176_36574460_26_37
Title: Getting Description Attribute of a Generic Enum 
----------------------------------------

public static KeyValuePair < string, List < KeyValueDataItem > > ConvertEnumWithDescription < T > () where T : struct, IConvertible {
    if (! typeof (T).IsEnum) {
        throw new Exception ("Type given T must be an Enum");
    }
    var enumType = typeof (T).ToString ().Split ('.').Last ();
    var type = typeof (T);
    var itemsList = Enum.GetValues (typeof (T)).Cast < T > ().Select (x = > new KeyValueDataItem {Key = Convert.ToInt32 (x), Value = GetEnumDescription < T > (Enum.GetName (typeof (T), x))}).ToList ();
    var res = new KeyValuePair < string, List < KeyValueDataItem > > (enumType, itemsList);
    return res;
}
----------------------------------------

public static string GetEnumDescription < T > (string enumValue) {
    var value = Enum.Parse (typeof (T), enumValue);
    FieldInfo fi = value.GetType ().GetField (value.ToString ());
    DescriptionAttribute [] attributes = (DescriptionAttribute []) fi.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (attributes.Length > 0)
        return attributes [0].Description;

    return value.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36573176_36574460_1_24
36573176_36574524_1_22
Title: Getting Description Attribute of a Generic Enum 
----------------------------------------

public static KeyValuePair < string, List < KeyValueDataItem > > ConvertEnumWithDescription < T > () where T : struct, IConvertible {
    if (! typeof (T).IsEnum) {
        throw new Exception ("Type given T must be an Enum");
    }
    var enumType = typeof (T).ToString ().Split ('.').Last ();
    var type = typeof (T);
    var itemsList = Enum.GetValues (typeof (T)).Cast < T > ().Select (x = > new KeyValueDataItem {Key = Convert.ToInt32 (x), Value = GetEnumDescription < T > (Enum.GetName (typeof (T), x))}).ToList ();
    var res = new KeyValuePair < string, List < KeyValueDataItem > > (enumType, itemsList);
    return res;
}
----------------------------------------

public static KeyValuePair < string, List < KeyValueDataItem > > ConvertEnumWithDescription < T > () where T : struct, IConvertible {
    if (! typeof (T).IsEnum) {
        throw new Exception ("Type given T must be an Enum");
    }
    var enumType = typeof (T).ToString ().Split ('.').Last ();
    var itemsList = Enum.GetValues (typeof (T)).Cast < T > ().Select (x = > new KeyValueDataItem {Key = Convert.ToInt32 (x), Value = GetEnumDescription < T > (x.ToString ())}).ToList ();
    var res = new KeyValuePair < string, List < KeyValueDataItem > > (enumType, itemsList);
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36573176_36574460_1_24
36573176_36574524_24_36
Title: Getting Description Attribute of a Generic Enum 
----------------------------------------

public static KeyValuePair < string, List < KeyValueDataItem > > ConvertEnumWithDescription < T > () where T : struct, IConvertible {
    if (! typeof (T).IsEnum) {
        throw new Exception ("Type given T must be an Enum");
    }
    var enumType = typeof (T).ToString ().Split ('.').Last ();
    var type = typeof (T);
    var itemsList = Enum.GetValues (typeof (T)).Cast < T > ().Select (x = > new KeyValueDataItem {Key = Convert.ToInt32 (x), Value = GetEnumDescription < T > (Enum.GetName (typeof (T), x))}).ToList ();
    var res = new KeyValuePair < string, List < KeyValueDataItem > > (enumType, itemsList);
    return res;
}
----------------------------------------

public static string GetEnumDescription < T > (string value) {
    Type type = typeof (T);
    var name = Enum.GetNames (type).Where (f = > f.Equals (value, StringComparison.CurrentCultureIgnoreCase)).Select (d = > d).FirstOrDefault ();
    if (name == null) {
        return string.Empty;
    }
    var field = type.GetField (name);
    var customAttribute = field.GetCustomAttributes (typeof (DescriptionAttribute), false);
    return customAttribute.Length > 0 ? ((DescriptionAttribute) customAttribute [0]).Description : name;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36573176_36574460_26_37
36573176_36574524_1_22
Title: Getting Description Attribute of a Generic Enum 
----------------------------------------

public static string GetEnumDescription < T > (string enumValue) {
    var value = Enum.Parse (typeof (T), enumValue);
    FieldInfo fi = value.GetType ().GetField (value.ToString ());
    DescriptionAttribute [] attributes = (DescriptionAttribute []) fi.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (attributes.Length > 0)
        return attributes [0].Description;

    return value.ToString ();
}
----------------------------------------

public static KeyValuePair < string, List < KeyValueDataItem > > ConvertEnumWithDescription < T > () where T : struct, IConvertible {
    if (! typeof (T).IsEnum) {
        throw new Exception ("Type given T must be an Enum");
    }
    var enumType = typeof (T).ToString ().Split ('.').Last ();
    var itemsList = Enum.GetValues (typeof (T)).Cast < T > ().Select (x = > new KeyValueDataItem {Key = Convert.ToInt32 (x), Value = GetEnumDescription < T > (x.ToString ())}).ToList ();
    var res = new KeyValuePair < string, List < KeyValueDataItem > > (enumType, itemsList);
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36573176_36574460_26_37
36573176_36574524_24_36
Title: Getting Description Attribute of a Generic Enum 
----------------------------------------

public static string GetEnumDescription < T > (string enumValue) {
    var value = Enum.Parse (typeof (T), enumValue);
    FieldInfo fi = value.GetType ().GetField (value.ToString ());
    DescriptionAttribute [] attributes = (DescriptionAttribute []) fi.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (attributes.Length > 0)
        return attributes [0].Description;

    return value.ToString ();
}
----------------------------------------

public static string GetEnumDescription < T > (string value) {
    Type type = typeof (T);
    var name = Enum.GetNames (type).Where (f = > f.Equals (value, StringComparison.CurrentCultureIgnoreCase)).Select (d = > d).FirstOrDefault ();
    if (name == null) {
        return string.Empty;
    }
    var field = type.GetField (name);
    var customAttribute = field.GetCustomAttributes (typeof (DescriptionAttribute), false);
    return customAttribute.Length > 0 ? ((DescriptionAttribute) customAttribute [0]).Description : name;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36573176_36574524_1_22
36573176_36574524_24_36
Title: Getting Description Attribute of a Generic Enum 
----------------------------------------

public static KeyValuePair < string, List < KeyValueDataItem > > ConvertEnumWithDescription < T > () where T : struct, IConvertible {
    if (! typeof (T).IsEnum) {
        throw new Exception ("Type given T must be an Enum");
    }
    var enumType = typeof (T).ToString ().Split ('.').Last ();
    var itemsList = Enum.GetValues (typeof (T)).Cast < T > ().Select (x = > new KeyValueDataItem {Key = Convert.ToInt32 (x), Value = GetEnumDescription < T > (x.ToString ())}).ToList ();
    var res = new KeyValuePair < string, List < KeyValueDataItem > > (enumType, itemsList);
    return res;
}
----------------------------------------

public static string GetEnumDescription < T > (string value) {
    Type type = typeof (T);
    var name = Enum.GetNames (type).Where (f = > f.Equals (value, StringComparison.CurrentCultureIgnoreCase)).Select (d = > d).FirstOrDefault ();
    if (name == null) {
        return string.Empty;
    }
    var field = type.GetField (name);
    var customAttribute = field.GetCustomAttributes (typeof (DescriptionAttribute), false);
    return customAttribute.Length > 0 ? ((DescriptionAttribute) customAttribute [0]).Description : name;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36579193_36580202_1_35
36579193_36581634_53_93
Title: Create the List Type dynamically (or a different kind of collection?) 
----------------------------------------

static List < T > ReadFromCsv < T > (string data) {
    var objs = new List < T > ();
    var rows = data.Split (new [] {"\r\n"}, StringSplitOptions.None);
    var headers = rows [0].Split (',').Select ((value, index) = > new {value, index}).ToDictionary (pair = > pair.index, pair = > pair.value);
    var propertiesToFind = typeof (T).GetProperties ().Where (x = > x.GetCustomAttributes < ReadFromCsvAttribute > ().Any ());
    var indexToPropertyDict = headers.Where (kv = > propertiesToFind.Select (x = > x.Name).Contains (kv.Value)).ToDictionary (x = > x.Key, x = > propertiesToFind.Single (p = > p.Name == x.Value));
    foreach (var row in rows.Skip (1)) {
        var obj = (T) Activator.CreateInstance (typeof (T));
        var cells = row.Split (',');
        for (int i = 0; i < cells.Length; i ++) {
            if (indexToPropertyDict.ContainsKey (i)) {
                indexToPropertyDict [i].SetValue (obj, cells [i]);
            }
        }
        objs.Add (obj);
    }
    return objs;
}
----------------------------------------

private static List < T > Map < T > (List < string > columns, List < List < string > > rows) where T : class, new () {
    Type typeT = typeof (T);
    Dictionary < int, PropertyInfo > validColumns = new Dictionary < int, PropertyInfo > ();
    for (int columnIndex = 0; columnIndex < columns.Count; columnIndex ++) {
        var propertyInfo = typeT.GetProperty (columns [columnIndex]);
        if (propertyInfo != null) {
            validColumns.Add (columnIndex, propertyInfo);
        }
    }
    List < T > output = null;
    if (validColumns.Count > 0) {
        output = new List < T > ();
        foreach (var row in rows) {
            var tempT = new T ();
            foreach (var col in validColumns) {
                var propertyInfo = col.Value;
                var columnIndex = col.Key;
                propertyInfo.SetValue (tempT, row [columnIndex]);
            }
            output.Add (tempT);
        }
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36587382_36587742_1_21
36587382_36587814_5_33
Title: C# Sum exclusion 
----------------------------------------

static void GetData () {
    int count = 0;
    int sum = 0;
    int countmax = 15;
    bool IsOdd = countmax % 2 == 1;
    for (int i = 1, j = 0; i <= countmax / 2; i ++) {
        Console.WriteLine ("{0}{1}", "*".PadLeft (i), "*".PadLeft (countmax - i - (j ++)));
    }
    if (IsOdd)
        Console.WriteLine ("*".PadLeft (countmax / 2 + 1));

    for (int i = IsOdd ? countmax / 2 + 1 : countmax / 2, j = 0; i < countmax; i ++) {
        Console.WriteLine ("{0}{1}", "*".PadLeft (i - (IsOdd ? ++ j : j ++)), "*".PadLeft (IsOdd ? ++ j : j ++));
    }
}
----------------------------------------

static void GetData () {
    int count = 11;
    for (int i = 0; i < count; i ++) {
        for (int j = 0; j < count * 2; j ++) {
            var s = ((i + j == count) || (j - i == count)) ? "*" : " ";
            Console.Write (s);
        }
        Console.WriteLine ();
    }
    Console.WriteLine ("-------------------------------");
    Console.WriteLine ("------------Reverse------------");
    Console.WriteLine ("-------------------------------");
    for (int i = count; i >= 0; i --) {
        for (int j = count * 2; j >= 0; j --) {
            var s = ((i + j == count) || (j - i == count)) ? "*" : " ";
            Console.Write (s);
        }
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3659046_3659437_1_22
3659046_3659437_24_48
Title: Saving a TransformedBitmap Object to disk. 
----------------------------------------

public bool WriteTransformedBitmapToFile < T > (BitmapSource bitmapSource, string fileName) where T : BitmapEncoder, new () {
    if (string.IsNullOrEmpty (fileName) || bitmapSource == null)
        return false;

    var frame = BitmapFrame.Create (bitmapSource);
    var encoder = new T ();
    encoder.Frames.Add (frame);
    try {
        using (var fs = new FileStream (fileName, FileMode.Create))
        {
            encoder.Save (fs);
        }}
    catch (Exception e) {
        return false;
    }
    return true;
}
----------------------------------------

private BitmapImage GetBitmapImage < T > (BitmapSource bitmapSource) where T : BitmapEncoder, new () {
    var frame = BitmapFrame.Create (bitmapSource);
    var encoder = new T ();
    encoder.Frames.Add (frame);
    var bitmapImage = new BitmapImage ();
    bool isCreated;
    try {
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            bitmapImage.BeginInit ();
            bitmapImage.StreamSource = ms;
            bitmapImage.EndInit ();
            isCreated = true;
        }}
    catch {
        isCreated = false;
    }
    return isCreated ? bitmapImage : null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36619591_36621448_48_68
36619591_36621448_70_96
Title: How to create a dataset for complex (deeper hierarchy) XML output in C#? 
----------------------------------------

private static void Serialize < T > (T data) {
    using (TextWriter WriteFileStream = new StreamWriter ("test.xml"))
    {
        XmlSerializer SerializerObj = new XmlSerializer (typeof (T));
        try {
            SerializerObj.Serialize (WriteFileStream, data);
        }
        catch (Exception ex) {
            Console.WriteLine (string.Format ("Failed to serialize. Reason: {0}", ex.Message));
        }
    }}
----------------------------------------

private static T Deserialize < T > () where T : new () {
    T ReturnListOfT = CreateInstance < T > ();
    using (FileStream ReadFileStream = new FileStream ("test.xml", FileMode.Open, FileAccess.Read, FileShare.Read))
    {
        XmlSerializer SerializerObj = new XmlSerializer (typeof (T));
        try {
            ReturnListOfT = (T) SerializerObj.Deserialize (ReadFileStream);
        }
        catch (Exception ex) {
            Console.WriteLine (string.Format ("Failed to serialize. Reason: {0}", ex.Message));
        }
    } return ReturnListOfT;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3663704_3663793_6_28
3663704_3663856_1_20
Title: How to change ListBox selection background color? 
----------------------------------------

void listBox1_DrawItem (object sender, System.Windows.Forms.DrawItemEventArgs e) {
    int index = e.Index;
    Graphics g = e.Graphics;
    foreach (int selectedIndex in this.listBox1.SelectedIndices) {
        if (index == selectedIndex) {
            e.DrawBackground ();
            g.FillRectangle (new SolidBrush (Color.Red), e.Bounds);
        }
    }
    Font font = listBox1.Font;
    Color colour = listBox1.ForeColor;
    string text = listBox1.Items [index].ToString ();
    g.DrawString (text, font, new SolidBrush (Color.Black), (float) e.Bounds.X, (float) e.Bounds.Y);
    e.DrawFocusRectangle ();
}
----------------------------------------

private void listBox1_DrawItem (object sender, DrawItemEventArgs e) {
    if (e.Index < 0)
        return;

    if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
        e = new DrawItemEventArgs (e.Graphics, e.Font, e.Bounds, e.Index, e.State ^ DrawItemState.Selected, e.ForeColor, Color.Yellow);

    e.DrawBackground ();
    e.Graphics.DrawString (listBox1.Items [e.Index].ToString (), e.Font, Brushes.Black, e.Bounds, StringFormat.GenericDefault);
    e.DrawFocusRectangle ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36642522_36642583_1_15
36642522_36650483_14_34
Title: getting two times like on my page when updating through update panel 
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    if (! IsPostBack) {
        cl = new ConnectionClass ();
        QuestonId = Request.QueryString ["Id"];
        string [] var = {"@id"};
        SqlDbType [] type = {SqlDbType.Int};
        string [] value = {QuestonId};
        dt1 = cl.DatatableProcedure ("GetQuestionLikeDislike", var, type, value);
        LikeLabel.Text = dt1.Rows [0].ItemArray [0].ToString ();
        DislikeLabel.Text = dt1.Rows [0].ItemArray [1].ToString ();
        dt = cl.DatatableProcedure ("GetAnswers", var, type, value);
    }
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    cl = new ConnectionClass ();
    QuestonId = Request.QueryString ["Id"];
    QuestonId = "1";
    string [] var = {"@id"};
    SqlDbType [] type = {SqlDbType.Int};
    string [] value = {QuestonId};
    if (! IsPostBack) {
        dt = cl.DatatableProcedure ("GetQuestionDetail", var, type, value);
        StatementLabel.Text = dt.Rows [0].ItemArray [0].ToString ();
        MemberNameLabel.Text = cl.ReturnNameFromId (dt.Rows [0].ItemArray [4].ToString ()).ToString ();
        DateLabel.Text = dt.Rows [0].ItemArray [5].ToString ();
        TagsLabel.Text = dt.Rows [0].ItemArray [3].ToString ();
        ProblemLabel.Text = dt.Rows [0].ItemArray [1].ToString ();
        LikeDislike ();
        TriedLabel.Text = dt.Rows [0].ItemArray [2].ToString ();
        dt = cl.DatatableProcedure ("GetAnswers", var, type, value);
        drawAnswers ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36653050_36654553_1_14
36653050_36654617_1_13
Title: Optimization of simple method 
----------------------------------------

public uint GetValueBetween (uint beginColor, uint endColor, float percent) {
    float difference = endColor - beginColor;
    float fValue = UnityEngine.Mathf.Abs (difference) * percent;
    var rounded = (uint) UnityEngine.Mathf.RoundToInt (fValue);
    if (difference < 0) {
        rounded = beginColor - rounded;
    }
    return rounded;
}
----------------------------------------

public uint GetValueBetween (uint beginColor, uint endColor, float percent) {
    if (endColor < beginColor) {
        uint difference = beginColor - endColor;
        return beginColor - ((uint) (percent * 100.0) * difference) / 100;
    } else {
        uint difference = endColor - beginColor;
        return ((uint) (percent * 100.0) * difference) / 100;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36677313_36721885_39_55
36677313_36721885_78_110
Title: Send data to server and store in SQL Server using sockets 
----------------------------------------

void callback (IAsyncResult ar) {
    try {
        Socket socket = this._socket.EndAccept (ar);
        if (SocketAccepted != null) {
            SocketAccepted (socket);
        }
        this._socket.BeginAccept (callback, null);
    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
    }
}
----------------------------------------

void callback (IAsyncResult ar) {
    try {
        sck.EndReceive (ar);
        byte [] buf = new byte [8192];
        int rec = sck.Receive (buf, buf.Length, 0);
        if (rec < buf.Length) {
            Array.Resize < byte > (ref buf, rec);
        }
        if (Received != null) {
            Received (this, buf);
        }
        sck.BeginReceive (new byte [] {0}, 0, 0, 0, callback, null);
    }
    catch (Exception ex) {
        sck.Close ();
        if (Disconnected != null) {
            Disconnected (this);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36693142_36693215_1_32
36693142_36693326_1_31
Title: Checking if something is empty 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (comboBox1.SelectedItem != null && comboBox2.SelectedItem != null && numericUpDown1.Value != 0 && numericUpDown2.Value != 0 && numericUpDown3.Value != 0 && numericUpDown4.Value != 0) {
        string domacin = comboBox1.GetItemText (comboBox1.SelectedItem);
        int D_kosevaPrvoPoluvreme = (int) numericUpDown1.Value;
        int D_kosevaDrugoPoluvreme = (int) numericUpDown3.Value;
        int D_ukupnoKoseva = D_kosevaDrugoPoluvreme + D_kosevaPrvoPoluvreme;
        int D_primljenihKosevaPrvoPoluvreme = (int) numericUpDown2.Value;
        int D_primljenihKosevaDrugoPoluvreme = (int) numericUpDown4.Value;
        int D_ukupnoPrimljenihKoseva = D_primljenihKosevaDrugoPoluvreme + D_primljenihKosevaPrvoPoluvreme;
        string gost = comboBox2.GetItemText (comboBox2.SelectedItem);
        int G_kosevaPrvoPoluvreme = (int) numericUpDown2.Value;
        int G_kosevaDrugoPoluvreme = (int) numericUpDown4.Value;
        int G_ukupnoKoseva = G_kosevaDrugoPoluvreme + G_kosevaPrvoPoluvreme;
        int G_primljenihKosevaPrvoPoluvreme = (int) numericUpDown1.Value;
        int G_primljenihKosevaDrugoPoluvreme = (int) numericUpDown3.Value;
        int G_ukupnoPrimljenihKoseva = G_primljenihKosevaDrugoPoluvreme + G_primljenihKosevaPrvoPoluvreme;
        int rezultat;
        Functions.odrediPobednika (out rezultat, D_ukupnoKoseva, G_ukupnoKoseva);
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (comboBox1.SelectedItem == null) {
        MessageBox.Show ("Meaningful message, user should know what he has done wrong", "Invalid xyz");
        return;
    } else if (comboBox2.SelectedItem == null) {
        MessageBox.Show ("Meaningful message, user should know what he has done wrong", "Invalid xyz");
        return;
    } else if (numericUpDown1.Value == 0) {
        MessageBox.Show ("Meaningful message, user should know what he has done wrong", "Invalid xyz");
        return;
    } else if (numericUpDown2.Value == 0) {
        MessageBox.Show ("Meaningful message, user should know what he has done wrong", "Invalid xyz");
        return;
    } else if (numericUpDown3.Value == 0) {
        MessageBox.Show ("Meaningful message, user should know what he has done wrong", "Invalid xyz");
        return;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36700531_36700722_1_27
36700531_36700913_1_37
Title: How to reduce the memory usage of a C# console application project? 
----------------------------------------

public static void CreateText (string mas) {
    if (mas.Length <= 80) {
        StringBuilder str;
        int count;
        for (int i = 0; i < mas.Length; i ++) {
            if (mas [i] >= '0' && mas [i] <= '9')
                count = count * 10 + mas [i] - '0';
            else {
                if (count == 0)
                    str.Append (mas [i]);
                else {
                    for (int j = 0; j < count; j ++)
                        str.Append (mas [i]);

                    count = 0;
                }
            }
        }
        Console.WriteLine (str.ToString ());
    } else
        Console.WriteLine ("Error");

}
----------------------------------------

public static void CreateText (string text) {
    if (text.Length <= 80) {
        var str = new StringBuilder ();
        var count = new StringBuilder ();
        for (int i = 0; i < text.Length; i ++) {
            int n;
            if (int.TryParse (text [i].ToString (), out n)) {
                count.Append (text [i]);
            } else {
                if (String.IsNullOrEmpty (count.ToString ())) {
                    str.Append (text [i]);
                } else {
                    for (int j = 0; j < Convert.ToInt32 (count.ToString ()); j ++) {
                        str.Append (text [i].ToString ());
                    }
                    count.Clear ();
                }
            }
        }
        Console.WriteLine (str);
    } else {
        Console.WriteLine ("Error");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36700531_36700722_1_27
36700531_36701068_1_34
Title: How to reduce the memory usage of a C# console application project? 
----------------------------------------

public static void CreateText (string mas) {
    if (mas.Length <= 80) {
        StringBuilder str;
        int count;
        for (int i = 0; i < mas.Length; i ++) {
            if (mas [i] >= '0' && mas [i] <= '9')
                count = count * 10 + mas [i] - '0';
            else {
                if (count == 0)
                    str.Append (mas [i]);
                else {
                    for (int j = 0; j < count; j ++)
                        str.Append (mas [i]);

                    count = 0;
                }
            }
        }
        Console.WriteLine (str.ToString ());
    } else
        Console.WriteLine ("Error");

}
----------------------------------------

public static void CreateText (string text) {
    if (text != null && text.Length <= 80) {
        int n;
        int count = - 1;
        StringBuilder result = new StringBuilder ();
        char [] mas = text.ToCharArray ();
        foreach (char c in text) {
            if (int.TryParse (c.ToString (), out n)) {
                if (count == - 1)
                    count = 0;

                count = (count * 10) + n;
            } else {
                if (count == - 1) {
                    result.Append (c);
                } else {
                    result.Append (new string (c, count));
                    count = - 1;
                }
            }
        }
        Console.WriteLine (result.ToString ());
    } else {
        Console.WriteLine ("Error");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36700531_36700913_1_37
36700531_36701068_1_34
Title: How to reduce the memory usage of a C# console application project? 
----------------------------------------

public static void CreateText (string text) {
    if (text.Length <= 80) {
        var str = new StringBuilder ();
        var count = new StringBuilder ();
        for (int i = 0; i < text.Length; i ++) {
            int n;
            if (int.TryParse (text [i].ToString (), out n)) {
                count.Append (text [i]);
            } else {
                if (String.IsNullOrEmpty (count.ToString ())) {
                    str.Append (text [i]);
                } else {
                    for (int j = 0; j < Convert.ToInt32 (count.ToString ()); j ++) {
                        str.Append (text [i].ToString ());
                    }
                    count.Clear ();
                }
            }
        }
        Console.WriteLine (str);
    } else {
        Console.WriteLine ("Error");
    }
}
----------------------------------------

public static void CreateText (string text) {
    if (text != null && text.Length <= 80) {
        int n;
        int count = - 1;
        StringBuilder result = new StringBuilder ();
        char [] mas = text.ToCharArray ();
        foreach (char c in text) {
            if (int.TryParse (c.ToString (), out n)) {
                if (count == - 1)
                    count = 0;

                count = (count * 10) + n;
            } else {
                if (count == - 1) {
                    result.Append (c);
                } else {
                    result.Append (new string (c, count));
                    count = - 1;
                }
            }
        }
        Console.WriteLine (result.ToString ());
    } else {
        Console.WriteLine ("Error");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3672742_19174777_9_31
3672742_3673216_1_22
Title: cast class into another class or convert class to another 
----------------------------------------

public static void CopyObject < T > (object sourceObject, ref T destObject) {
    if (sourceObject == null || destObject == null)
        return;

    Type sourceType = sourceObject.GetType ();
    Type targetType = destObject.GetType ();
    foreach (PropertyInfo p in sourceType.GetProperties ()) {
        PropertyInfo targetObj = targetType.GetProperty (p.Name);
        if (targetObj == null)
            continue;

        targetObj.SetValue (destObject, p.GetValue (sourceObject, null), null);
    }
}
----------------------------------------

public static T Cast < T > (this Object myobj) {
    Type objectType = myobj.GetType ();
    Type target = typeof (T);
    var x = Activator.CreateInstance (target, false);
    var z = from source in objectType.GetMembers ().ToList ()
        where source.MemberType == MemberTypes.Property
        select source;
    var d = from source in target.GetMembers ().ToList ()
        where source.MemberType == MemberTypes.Property
        select source;
    List < MemberInfo > members = d.Where (memberInfo = > d.Select (c = > c.Name).ToList ().Contains (memberInfo.Name)).ToList ();
    PropertyInfo propertyInfo;
    object value;
    foreach (var memberInfo in members) {
        propertyInfo = typeof (T).GetProperty (memberInfo.Name);
        value = myobj.GetType ().GetProperty (memberInfo.Name).GetValue (myobj, null);
        propertyInfo.SetValue (x, value, null);
    }
    return (T) x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36755325_36755556_1_16
36755325_36755924_1_16
Title: Need Help Creating a 2D Array in C# 
----------------------------------------

public static void Main () {
    Zumba table = new Zumba ();
    int [,] zumValues = table.ZumbaValues;
    string [] zumForm = new string [6] {"Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"};
    for (int day = 0; day < zumForm.Length; day ++) {
        Console.Write (zumForm [day]);
        for (int time = 0; time < zumValues.GetLength (1); time ++)
            Console.Write ("\t{0}", zumValues [day, time]);

        Console.WriteLine ();
    }
}
----------------------------------------

static public void Main () {
    Zumba table = new Zumba ();
    int [,] zumValues = table.ZumbaValues;
    string [] zumForm = new string [6] {"Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"};
    for (int z = 0; z < zumForm.GetLength (0); z ++) {
        Console.Write ("{0}", zumForm [z]);
        for (int c = 0; c < 4; c ++)
            Console.Write ("\t" + "{0}" + "\t", zumValues [z, c]);

        Console.Write ("\n");
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36755325_36755556_1_16
36755325_36756124_1_22
Title: Need Help Creating a 2D Array in C# 
----------------------------------------

public static void Main () {
    Zumba table = new Zumba ();
    int [,] zumValues = table.ZumbaValues;
    string [] zumForm = new string [6] {"Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"};
    for (int day = 0; day < zumForm.Length; day ++) {
        Console.Write (zumForm [day]);
        for (int time = 0; time < zumValues.GetLength (1); time ++)
            Console.Write ("\t{0}", zumValues [day, time]);

        Console.WriteLine ();
    }
}
----------------------------------------

public static void Main () {
    Zumba table = new Zumba ();
    int [,] zumValues = table.ZumbaValues;
    string [] zumForm = new string [6] {"Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"};
    int r = 0;
    while (r < zumValues.GetLength (0)) {
        Console.Write ("{0}", zumForm [r]);
        for (int c = 0; c < zumValues.GetLength (1); c ++)
            Console.Write ("\t" + zumValues [r, c] + "\t");

        Console.Write ("\n");
        r ++;
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36755325_36755924_1_16
36755325_36756124_1_22
Title: Need Help Creating a 2D Array in C# 
----------------------------------------

static public void Main () {
    Zumba table = new Zumba ();
    int [,] zumValues = table.ZumbaValues;
    string [] zumForm = new string [6] {"Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"};
    for (int z = 0; z < zumForm.GetLength (0); z ++) {
        Console.Write ("{0}", zumForm [z]);
        for (int c = 0; c < 4; c ++)
            Console.Write ("\t" + "{0}" + "\t", zumValues [z, c]);

        Console.Write ("\n");
    }
    Console.ReadLine ();
}
----------------------------------------

public static void Main () {
    Zumba table = new Zumba ();
    int [,] zumValues = table.ZumbaValues;
    string [] zumForm = new string [6] {"Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"};
    int r = 0;
    while (r < zumValues.GetLength (0)) {
        Console.Write ("{0}", zumForm [r]);
        for (int c = 0; c < zumValues.GetLength (1); c ++)
            Console.Write ("\t" + zumValues [r, c] + "\t");

        Console.Write ("\n");
        r ++;
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36756412_36756866_18_28
36756412_36756866_50_67
Title: Riemann Midpoint Sum getting crazy numbers 
----------------------------------------

public static double FindIntegral (double start, double end, function f) {
    double sum = 0;
    double stepsize = 1E-2;
    int numSteps = (int) ((end - start) / stepsize);
    for (int i = 0; i < numSteps; i ++) {
        sum += f (start + (stepsize * (i + 0.5)));
    }
    return sum * stepsize;
}
----------------------------------------

public double FindIntegral (double a, double b, function f) {
    var totalWidth = b - a;
    var widthPerRectangle = this._widthPerRectangle ?? (totalWidth / this._numberOfRectangles.Value);
    var numberOfRectangles = this._numberOfRectangles ?? ((int) Math.Round (totalWidth / this._widthPerRectangle.Value, 0));
    double sum = 0;
    foreach (var i in Enumerable.Range (0, numberOfRectangles)) {
        var rectangleMidpointX = a + widthPerRectangle * i + widthPerRectangle / 2;
        var rectangleHeightY = f (rectangleMidpointX);
        var rectangleArea = widthPerRectangle * rectangleHeightY;
        sum += rectangleArea;
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36767938_36918758_1_21
36767938_36922573_1_23
Title: Obtain child anchor element within WebBrowser control 
----------------------------------------

private void Document_MouseDown (object sender, HtmlElementEventArgs e) {
    if (e.MouseButtonsPressed == MouseButtons.Right) {
        HtmlElement element = wb.Document.GetElementFromPoint (PointToClient (MousePosition));
        if (element.TagName == "A") {
            Debug.WriteLine ("Get link location, open in new tab.");
            var urlRaw = element.OuterHtml;
            string hrefBegin = "href=";
            var idxHref = urlRaw.IndexOf (hrefBegin) + hrefBegin.Length + 1;
            var idxEnd = urlRaw.IndexOf ("\"", idxHref + 1);
            var url = urlRaw.Substring (idxHref, idxEnd - idxHref);
            Debug.WriteLine (url);
        } else
            Debug.WriteLine (element.TagName);

    }
}
----------------------------------------

private void Document_MouseDown (object sender, HtmlElementEventArgs e) {
    if (e.MouseButtonsPressed == MouseButtons.Right) {
        HtmlElement element = wb.Document.GetElementFromPoint (PointToClient (MousePosition));
        if (element.Children.Count > 0) {
            foreach (HtmlElement child in element.Children) {
                if (child.TagName == "A")
                    Debug.WriteLine ("Get link location, open in new tab.");

            }
        } else {
            if (element.TagName == "A")
                Debug.WriteLine ("Get link location, open in new tab.");
            else
                Debug.WriteLine (element.TagName);

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36767938_36918758_1_21
36767938_36977479_1_17
Title: Obtain child anchor element within WebBrowser control 
----------------------------------------

private void Document_MouseDown (object sender, HtmlElementEventArgs e) {
    if (e.MouseButtonsPressed == MouseButtons.Right) {
        HtmlElement element = wb.Document.GetElementFromPoint (PointToClient (MousePosition));
        if (element.TagName == "A") {
            Debug.WriteLine ("Get link location, open in new tab.");
            var urlRaw = element.OuterHtml;
            string hrefBegin = "href=";
            var idxHref = urlRaw.IndexOf (hrefBegin) + hrefBegin.Length + 1;
            var idxEnd = urlRaw.IndexOf ("\"", idxHref + 1);
            var url = urlRaw.Substring (idxHref, idxEnd - idxHref);
            Debug.WriteLine (url);
        } else
            Debug.WriteLine (element.TagName);

    }
}
----------------------------------------

private void Document_MouseDown (object sender, HtmlElementEventArgs e) {
    if (e.MouseButtonsPressed == MouseButtons.Right) {
        HtmlElement element = wb.Document.GetElementFromPoint (PointToClient (MousePosition));
        if (element.TagName == "A" && ! string.IsNullOrEmpty (element.GetAttribute ("href"))) {
            Debug.WriteLine ("Get link location, open in new tab.");
            var url = element.GetAttribute ("href");
            Debug.WriteLine (url);
        } else
            Debug.WriteLine (element.TagName);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36767938_36922573_1_23
36767938_36977479_1_17
Title: Obtain child anchor element within WebBrowser control 
----------------------------------------

private void Document_MouseDown (object sender, HtmlElementEventArgs e) {
    if (e.MouseButtonsPressed == MouseButtons.Right) {
        HtmlElement element = wb.Document.GetElementFromPoint (PointToClient (MousePosition));
        if (element.Children.Count > 0) {
            foreach (HtmlElement child in element.Children) {
                if (child.TagName == "A")
                    Debug.WriteLine ("Get link location, open in new tab.");

            }
        } else {
            if (element.TagName == "A")
                Debug.WriteLine ("Get link location, open in new tab.");
            else
                Debug.WriteLine (element.TagName);

        }
    }
}
----------------------------------------

private void Document_MouseDown (object sender, HtmlElementEventArgs e) {
    if (e.MouseButtonsPressed == MouseButtons.Right) {
        HtmlElement element = wb.Document.GetElementFromPoint (PointToClient (MousePosition));
        if (element.TagName == "A" && ! string.IsNullOrEmpty (element.GetAttribute ("href"))) {
            Debug.WriteLine ("Get link location, open in new tab.");
            var url = element.GetAttribute ("href");
            Debug.WriteLine (url);
        } else
            Debug.WriteLine (element.TagName);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
367761_15608028_1_63
367761_367798_1_49
Title: How to determine whether a DLL is a managed assembly or native (prevent loading a native dll)? 
----------------------------------------

public static bool IsManagedAssembly (string fileName) {
    using (Stream fileStream = new FileStream (fileName, FileMode.Open, FileAccess.Read))
    using (BinaryReader binaryReader = new BinaryReader (fileStream))
    {
        if (fileStream.Length < 64) {
            return false;
        }
        fileStream.Position = 0x3C;
        uint peHeaderPointer = binaryReader.ReadUInt32 ();
        if (peHeaderPointer == 0) {
            peHeaderPointer = 0x80;
        }
        if (peHeaderPointer > fileStream.Length - 256) {
            return false;
        }
        fileStream.Position = peHeaderPointer;
        uint peHeaderSignature = binaryReader.ReadUInt32 ();
        if (peHeaderSignature != 0x00004550) {
            return false;
        }
        fileStream.Position += 20;
        const ushort PE32 = 0x10b;
        const ushort PE32Plus = 0x20b;
        var peFormat = binaryReader.ReadUInt16 ();
        if (peFormat != PE32 && peFormat != PE32Plus) {
            return false;
        }
        ushort dataDictionaryStart = (ushort) (peHeaderPointer + (peFormat == PE32 ? 232 : 248));
        fileStream.Position = dataDictionaryStart;
        uint cliHeaderRva = binaryReader.ReadUInt32 ();
        if (cliHeaderRva == 0) {
            return false;
        }
        return true;
    }}
----------------------------------------

public static bool IsManagedAssembly (string fileName) {
    uint peHeader;
    uint peHeaderSignature;
    ushort machine;
    ushort sections;
    uint timestamp;
    uint pSymbolTable;
    uint noOfSymbol;
    ushort optionalHeaderSize;
    ushort characteristics;
    ushort dataDictionaryStart;
    uint [] dataDictionaryRVA = new uint [16];
    uint [] dataDictionarySize = new uint [16];
    Stream fs = new FileStream (fileName, FileMode.Open, FileAccess.Read);
    BinaryReader reader = new BinaryReader (fs);
    fs.Position = 0x3C;
    peHeader = reader.ReadUInt32 ();
    fs.Position = peHeader;
    peHeaderSignature = reader.ReadUInt32 ();
    machine = reader.ReadUInt16 ();
    sections = reader.ReadUInt16 ();
    timestamp = reader.ReadUInt32 ();
    pSymbolTable = reader.ReadUInt32 ();
    noOfSymbol = reader.ReadUInt32 ();
    optionalHeaderSize = reader.ReadUInt16 ();
    characteristics = reader.ReadUInt16 ();
    dataDictionaryStart = Convert.ToUInt16 (Convert.ToUInt16 (fs.Position) + 0x60);
    fs.Position = dataDictionaryStart;
    for (int i = 0; i < 15; i ++) {
        dataDictionaryRVA [i] = reader.ReadUInt32 ();
        dataDictionarySize [i] = reader.ReadUInt32 ();
    }
    fs.Close ();
    if (dataDictionaryRVA [14] == 0)
        return false;
    else
        return true;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36776546_36776706_1_28
36776546_36778119_3_28
Title: "Waiting for a single task to fail out of a List<Task<..>> more cleanly possibly with LINQ?" 
----------------------------------------

public static IEnumerable < Task < T > > Order < T > (this IEnumerable < Task < T > > tasks) {
    var taskList = tasks.ToList ();
    var taskSources = new BlockingCollection < TaskCompletionSource < T > > ();
    var taskSourceList = new List < TaskCompletionSource < T > > (taskList.Count);
    foreach (var task in taskList) {
        var newSource = new TaskCompletionSource < T > ();
        taskSources.Add (newSource);
        taskSourceList.Add (newSource);
        task.ContinueWith (t = > {
            var source = taskSources.Take ();
            if (t.IsCanceled)
                source.TrySetCanceled ();
            else if (t.IsFaulted)
                source.TrySetException (t.Exception.InnerExceptions);
            else if (t.IsCompleted)
                source.TrySetResult (t.Result);

        }, CancellationToken.None, TaskContinuationOptions.PreferFairness, TaskScheduler.Default);
    }
    return taskSourceList.Select (tcs = > tcs.Task);
}
----------------------------------------

public static Task < Task < T > > WhenAny < T > (this IList < Task < T > > tasks, Func < T, bool > filter) {
    CompleteOnInvokePromiseFilter < T > action = new CompleteOnInvokePromiseFilter < T > (filter);
    bool flag = false;
    for (int i = 0; i < tasks.Count; i ++) {
        Task < T > completingTask = tasks [i];
        if (! flag) {
            if (action.IsCompleted)
                flag = true;
            else if (completingTask.IsCompleted) {
                action.Invoke (completingTask);
                flag = true;
            } else
                completingTask.ContinueWith (t = > {
                    action.Invoke (t);
                });

        }
    }
    return action.Task;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
36786135_36786232_1_20
36786135_36787455_1_12
Title: Passing Generic Input object to a method C# 
----------------------------------------

public string ABC < T > (T obj) where T : IDestination {
    ClassA a = obj as ClassA;
    ClassB b = obj as ClassB;
    string var1 = obj.Var1;
    string var2 = obj.Var2;
    if (a != null) {
    }
    if (b != null) {
    }
}
----------------------------------------

public static string ABC < T > (T obj) {
    string s = string.Empty;
    if (obj is ClassA)
        s = obj.GetType ().GetProperty ("Var2").GetValue (obj, null).ToString ();

    if (obj is ClassB)
        s = obj.GetType ().GetProperty ("Var4").GetValue (obj, null).ToString ();

    return s;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18075532_18075739_1_13
18075532_18076819_3_31
Title: How can I fill an array with user input in case of numbers 
----------------------------------------

static void Main (string [] args) {
    int [] userInput = new int [100];
    string recievedInput = "";
    for (int i = 0; i < userInput.Length; i ++) {
        recievedInput = Console.ReadLine ();
        int.TryParse (recievedInput, out userInput [i]);
        if (recievedInput == "")
            break;

    }
    Console.WriteLine (userInput);
}
----------------------------------------

static void Main (string [] args) {
    int [] userInput = new int [10];
    for (int count = 0; count <= 9; count ++) {
        int number;
        string input = Console.ReadLine ();
        bool result = Int32.TryParse (input, out number);
        if (result) {
            userInput [count] = number;
        } else if (! result) {
            if (input != string.Empty)
                Console.WriteLine ("Not a valid number.");
            else if (input.Equals (string.Empty)) {
                foreach (var item in userInput) {
                    Console.WriteLine (item.ToString ());
                }
                Console.WriteLine ("Press any key to continue...");
                Console.ReadKey (true);
                return;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18078395_18204502_2_18
18078395_18276078_6_29
Title: How to check if a type never be a valid generic argument? 
----------------------------------------

public static bool IsNeverValidGenericArgument (this Type type) {
    if (type == null)
        throw new ArgumentNullException ("type");

    if (type.IsPointer || type.IsByRef)
        return true;

    var exceptions = new HashSet < Type > {typeof (ArgIterator), typeof (RuntimeArgumentHandle), typeof (TypedReference), typeof (void),};
    return exceptions.Contains (type);
}
----------------------------------------

private static bool IsNeverValidGenericArgument (this Type type, bool isRoot) {
    var elementType = type.GetElementType ();
    if (null != elementType) {
        if (type.IsArray)
            return elementType.IsNeverValidGenericArgument (false);

        return true;
    }
    if (isRoot) {
        return typeof (void) == type || typeof (RuntimeArgumentHandle) == type || typeof (ArgIterator) == type || typeof (TypedReference) == type;
    } else {
        return (typeof (void) == type || typeof (TypedReference) == type);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18089280_18108256_72_82
18089280_37328313_95_114
Title: Adapt the size of a form to its title text in C# 
----------------------------------------

private bool SetRenderer (VisualStyleElement element) {
    bool bReturn = VisualStyleRenderer.IsElementDefined (element);
    if (bReturn && renderer == null)
        renderer = new VisualStyleRenderer (element);
    else
        renderer.SetParameters (element);

    return bReturn;
}
----------------------------------------

private bool SetRenderer (VisualStyleElement element) {
    try {
        bool bReturn = VisualStyleRenderer.IsElementDefined (element);
        if (bReturn && renderer == null) {
            renderer = new VisualStyleRenderer (element);
        } else {
            renderer.SetParameters (element);
        }
        return bReturn;
    }
    catch (Exception) {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18097280_18098018_6_44
18097280_18098052_1_82
Title: How to Display 4 Triangle Patterns Side by Side 
----------------------------------------

static void Main () {
    for (int i = 1; i <= 10; i ++) {
        for (int j = 1; j <= i; j ++) {
            Console.Write ("*");
        }
        for (int k = 10; k >= i; k --) {
            Console.Write (" ");
        }
        for (int l = 10 - i; l >= 0; l --) {
            Console.Write ("*");
        }
        for (int k = 0; k <= i * 2; k ++) {
            Console.Write (" ");
        }
        for (int k = 10 - i; k >= 0; k --) {
            Console.Write ("*");
        }
        for (int k = 10; k >= i; k --) {
            Console.Write (" ");
        }
        for (int j = 1; j <= i; j ++) {
            Console.Write ("*");
        }
        Console.WriteLine ();
    }
    Console.ReadKey ();
    Console.Clear ();
}
----------------------------------------

static void Main () {
    var chars = new char [10, 10, 4];
    for (int i = 0; i < 10; i ++) {
        for (int j = 0; j < 10; j ++) {
            if (i >= j) {
                chars [i, j, 0] = '*';
            } else {
                chars [i, j, 0] = ' ';
            }
        }
    }
    for (int i = 0; i < 10; i ++) {
        for (int j = 0; j < 10; j ++) {
            if (i <= 9 - j) {
                chars [i, j, 1] = '*';
            } else {
                chars [i, j, 1] = ' ';
            }
        }
    }
    for (int i = 0; i < 10; i ++) {
        for (int j = 0; j < 10; j ++) {
            if (i <= j) {
                chars [i, j, 2] = '*';
            } else {
                chars [i, j, 2] = ' ';
            }
        }
    }
    for (int i = 0; i < 10; i ++) {
        for (int j = 0; j < 10; j ++) {
            if (i >= 9 - j) {
                chars [i, j, 3] = '*';
            } else {
                chars [i, j, 3] = ' ';
            }
        }
    }
    for (int i = 0; i < 10; i ++) {
        for (int k = 0; k < 4; k ++) {
            for (int j = 0; j < 10; j ++) {
                Console.Write (chars [i, j, k]);
            }
        }
        Console.WriteLine ();
    }
    Console.WriteLine ("Press Enter for Part 2 of this Program");
    Console.ReadKey ();
    Console.Clear ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18109890_18109919_1_20
18109890_18109944_1_14
Title: C# Count Vowels 
----------------------------------------

static void Main () {
    int total = 0;
    var vowels = new HashSet < char > {'a', 'e', 'i', 'o', 'u'};
    Console.WriteLine ("Enter a Sentence");
    string sentence = Console.ReadLine ().ToLower ();
    for (int i = 0; i < sentence.Length; i ++) {
        if (vowels.Contains (sentence [i])) {
            total ++;
        }
    }
    Console.WriteLine ("Your total number of vowels is: {0}", total);
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    int total = 0;
    Console.WriteLine ("Enter a Sentence");
    string sentence = Console.ReadLine ().ToLower ();
    char [] vowels = {'a', 'e', 'i', 'o', 'u'};
    total = sentence.Count (x = > vowels.Contains (x));
    Console.WriteLine ("Your total number of vowels is: {0}", total);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18110773_18116458_125_143
18110773_18116458_29_37
Title: Hide Windows Forms ListView Column in Details View without deleting Column or resizing it to Zero 
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x200 && listView != null && ! mouseDown) {
        int x = (m.LParam.ToInt32 () << 16) > > 16;
        if (IsSpottedOnAnyHiddenColumnPipe (x))
            return;

    }
    if (m.Msg == 0x201) {
        mouseDown = true;
        int x = (m.LParam.ToInt32 () << 16) > > 16;
        IsSpottedOnAnyHiddenColumnPipe (x);
    }
    if (m.Msg == 0x202)
        mouseDown = false;

    if (m.Msg == 0xf && listView.index != - 1 && MouseButtons == MouseButtons.None) {
        listView.UpdateColumnPipeLefts (listView.index);
        listView.index = - 1;
    }
    base.WndProc (ref m);
}
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x101e && hiddenColumnIndices.Contains (m.WParam.ToInt32 ())) {
        if (m.LParam.ToInt32 () > 0)
            hiddenColumnWidths [m.WParam.ToInt32 ()] = m.LParam.ToInt32 ();

        return;
    }
    base.WndProc (ref m);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18139531_18139558_1_10
18139531_18139658_1_20
Title: Keep differences between two hashtables 
----------------------------------------

private Hashtable CompareHashtables (Hashtable ht1, Hashtable ht2) {
    Hashtable resultsOfCompare = new Hashtable ();
    foreach (DictionaryEntry entry in ht1) {
        if (! (ht2.ContainsKey (entry.Key) && ht2.ContainsValue (entry.Value))) {
            resultsOfCompare.Add (entry.Key, entry.Value);
        }
    }
    return resultsOfCompare;
}
----------------------------------------

private Hashtable CompareHashtables (Hashtable ht1, Hashtable ht2) {
    ArrayList diffList = new ArrayList ();
    foreach (DictionaryEntry entry in ht1) {
        object value = ht2 [entry.Key];
        if (value == null) {
            diffList.Add (new Difference (entry.Key, entry.Value));
        } else if (! value.Equals (entry.Value)) {
            diffList.Add (new Difference (entry.Key, entry.Value, value));
        }
    }
    foreach (DictionaryEntry entry in ht2) {
        object value = ht1 [entry.Key];
        if (value == null) {
            diffList.Add (new Difference (entry.Key, entry.Value));
        }
    }
    return diffList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18151969_18152150_1_12
18151969_52847442_1_17
Title: Can we get access to the F# copy and update feature from c#? 
----------------------------------------

public static T With < T, P > (this T self, Expression < Func < T, P > > selector, P newValue) {
    var me = (MemberExpression) selector.Body;
    var changedProp = (System.Reflection.PropertyInfo) me.Member;
    var clone = Activator.CreateInstance < T > ();
    foreach (var prop in typeof (T).GetProperties ())
        prop.SetValue (clone, prop.GetValue (self));

    changedProp.SetValue (clone, newValue);
    return clone;
}
----------------------------------------

public static T With < T, P > (this T self, Expression < Func < T, P > > selector, P newValue) {
    var me = (MemberExpression) selector.Body;
    var changedProp = (System.Reflection.PropertyInfo) me.Member;
    var constructor = typeof (T).GetConstructors () [0];
    var parameters = constructor.GetParameters ().Select (p = > p.Name);
    var properties = typeof (T).GetProperties ();
    var args = parameters.Select (p = > properties.FirstOrDefault (prop = > String.Equals (prop.Name, p, StringComparison.CurrentCultureIgnoreCase))).Select (prop = > prop == changedProp ? newValue : prop.GetValue (self)).ToArray ();
    var clone = (T) constructor.Invoke (args);
    return clone;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18160349_18160703_1_16
18160349_18160755_1_18
Title: how to accept value in date format in textbox in C# windows form? 
----------------------------------------

private void textBox1_Validating (object sender, CancelEventArgs e) {
    TextBox tb = sender as TextBox;
    if (tb != null) {
        DateTime res;
        e.Cancel = ! DateTime.TryParse (tb.Text, out res);
        if (e.Cancel) {
            this.errorProvider1.SetError (tb, String.Format ("'{0}' is not a valid date", tb.Text));
        }
    }
}
----------------------------------------

private void textBox1_Validating (object sender, CancelEventArgs e) {
    Regex reg = new Regex (@"^(\d{1,2})/(\d{1,2})/(\d{4})$");
    Match m = reg.Match (textBox1.Text);
    if (m.Success) {
        int dd = int.Parse (m.Groups [1].Value);
        int mm = int.Parse (m.Groups [2].Value);
        int yyyy = int.Parse (m.Groups [3].Value);
        e.Cancel = dd < 1 || dd > 31 || mm < 1 || mm > 12 || yyyy > 2012;
    } else
        e.Cancel = true;

    if (e.Cancel) {
        if (MessageBox.Show ("Wrong date format. The correct format is dd/mm/yyyy\n+ dd should be between 1 and 31.\n+ mm should be between 1 and 12.\n+ yyyy should be before 2013", "Invalid date", MessageBoxButtons.OKCancel, MessageBoxIcon.Error) == DialogResult.Cancel)
            e.Cancel = false;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18197795_18253275_1_49
18197795_18253275_54_77
Title: Insert-Update Error from SQLDataReader in Webservice 
----------------------------------------

[WebMethod (Description = "Add or Amend Availability & Rates")] public bool Avail (string Username, string Password, DateTime Dte, DateTime Dtm, int ID, string RoomType, int Qty, double CurPrice) {
    GetCredentials (Username, Password);
    int ID = Convert.ToInt16 (GetCredentials (Username, Password).Tables [0].Rows [0] ["strTypeID"]);
    bool retVal = false;
    GetCredentials (Username, Password);
    List < DataTime > existingDates = new List < DataTime > ();
    using (SqlConnection mySQLconnection = new SqlConnection (connStr))
    {
        using (SqlCommand dbCommand = new SqlCommand ("select * from Available where intID=@ID and dtm BETWEEN @Dte AND @Dtm and strRoomType=@RoomType", mySQLconnection))
        {
            SqlParameter dtStart = new SqlParameter ("@Dte", Dte);
            SqlParameter dtEnd = new SqlParameter ("@Dtm", Dtm);
            SqlParameter RoomT = new SqlParameter ("@RoomType", RoomType);
            SqlParameter typeI = new SqlParameter ("@ID", ID);
            dbCommand.Parameters.Add (dtStart);
            dbCommand.Parameters.Add (dtEnd);
            dbCommand.Parameters.Add (RoomT);
            dbCommand.Parameters.Add (typeI);
            mySQLconnection.Open ();
            using (SqlDataReader reader = dbCommand.ExecuteReader ())
            {
                while (reader.read ()) {
                    existingDates.Add (Convert.ToDateTime ((string) reader ["Dtm"]));
                }
                for (DateTime date = Dte; date <= dat; date = date.AddDays (1.0)) {
                    if (existingDates.Contains (date)) {
                        AmdAvail (Username, Password, date, RoomType, Qty, CurPrice);
                    } else {
                        AddAvail (Username, Password, date, RoomType, Qty, CurPrice);
                    }
                }
                mySQLconnection.Close ();
                dbCommand.Dispose ();
                mySQLconnection.Dispose ();
                return retVal;
            }}}}
----------------------------------------

[WebMethod (Description = "Single Add of Availability", BufferResponse = true)] public void AddAvail (string Username, string Password, DateTime date, string RoomType, int Qty, double CurPrice) {
    GetAuthCredentials (Username, Password);
    DateTime dat = Dtm;
    int strTypeID = Convert.ToInt16 (GetAuthCredentials (Username, Password).Tables [0].Rows [0] ["strTypeID"]);
    using (SqlConnection mySQLconnection = new SqlConnection (connStr))
    {
        mySQLconnection.Open ();
        string sqlInsertString = "INSERT INTO Available (dtm,intResortID,strRoomType,intQty,curPrice) VALUES (@dat,@strTypeID,@strRoomType,@intQty,@CurPrice)";
        using (SqlCommand command = new SqlCommand ())
        {
            command.Connection = mySQLconnection;
            command.CommandText = sqlInsertString;
            SqlParameter dt = new SqlParameter ("@dat", date);
            SqlParameter intRID = new SqlParameter ("@strTypeID", strTypeID);
            SqlParameter strRType = new SqlParameter ("@strRoomType", RoomType);
            SqlParameter intQuty = new SqlParameter ("@intQty", Qty);
            SqlParameter curpPrice = new SqlParameter ("@curPrice", CurPrice);
            command.Parameters.AddRange (new SqlParameter [] {dt, intRID, strRType, intQuty, curpPrice});
            command.ExecuteNonQuery ();
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18197795_18253275_1_49
18197795_18253275_81_112
Title: Insert-Update Error from SQLDataReader in Webservice 
----------------------------------------

[WebMethod (Description = "Add or Amend Availability & Rates")] public bool Avail (string Username, string Password, DateTime Dte, DateTime Dtm, int ID, string RoomType, int Qty, double CurPrice) {
    GetCredentials (Username, Password);
    int ID = Convert.ToInt16 (GetCredentials (Username, Password).Tables [0].Rows [0] ["strTypeID"]);
    bool retVal = false;
    GetCredentials (Username, Password);
    List < DataTime > existingDates = new List < DataTime > ();
    using (SqlConnection mySQLconnection = new SqlConnection (connStr))
    {
        using (SqlCommand dbCommand = new SqlCommand ("select * from Available where intID=@ID and dtm BETWEEN @Dte AND @Dtm and strRoomType=@RoomType", mySQLconnection))
        {
            SqlParameter dtStart = new SqlParameter ("@Dte", Dte);
            SqlParameter dtEnd = new SqlParameter ("@Dtm", Dtm);
            SqlParameter RoomT = new SqlParameter ("@RoomType", RoomType);
            SqlParameter typeI = new SqlParameter ("@ID", ID);
            dbCommand.Parameters.Add (dtStart);
            dbCommand.Parameters.Add (dtEnd);
            dbCommand.Parameters.Add (RoomT);
            dbCommand.Parameters.Add (typeI);
            mySQLconnection.Open ();
            using (SqlDataReader reader = dbCommand.ExecuteReader ())
            {
                while (reader.read ()) {
                    existingDates.Add (Convert.ToDateTime ((string) reader ["Dtm"]));
                }
                for (DateTime date = Dte; date <= dat; date = date.AddDays (1.0)) {
                    if (existingDates.Contains (date)) {
                        AmdAvail (Username, Password, date, RoomType, Qty, CurPrice);
                    } else {
                        AddAvail (Username, Password, date, RoomType, Qty, CurPrice);
                    }
                }
                mySQLconnection.Close ();
                dbCommand.Dispose ();
                mySQLconnection.Dispose ();
                return retVal;
            }}}}
----------------------------------------

[WebMethod (Description = "Single Update", BufferResponse = true)] public DataSet AmdAvail (string Username, string Password, DateTime date, string RoomType, int Qty, double CurPrice) {
    GetAuthCredentials (Username, Password);
    int strTypeID = Convert.ToInt16 (GetAuthCredentials (Username, Password).Tables [0].Rows [0] ["strTypeID"]);
    using (SqlConnection mySQLconnection = new SqlConnection (connStr))
    {
        mySQLconnection.Open ();
        using (SqlCommand dbCommand = new SqlCommand ())
        {
            dbCommand.CommandText = "Update Available set intQty=@Qty,curprice=@CurPrice where dtm = @Dtm and strRoomType=@Roomtype and intResortID=@strTypeID ";
            dbCommand.Connection = mySQLconnection;
            using (SqlDataAdapter da = new SqlDataAdapter ())
            {
                da.SelectCommand = dbCommand;
                SqlParameter typeI = new SqlParameter ("@strTypeID", strTypeID);
                dbCommand.Parameters.Add (typeI);
                dbCommand.Parameters.AddWithValue ("@Dtm", date);
                dbCommand.Parameters.AddWithValue ("@Qty", Qty);
                dbCommand.Parameters.AddWithValue ("@RoomType", RoomType);
                dbCommand.Parameters.AddWithValue ("@curprice", CurPrice);
                dbCommand.Parameters.AddWithValue ("@username", Username);
                dbCommand.Parameters.AddWithValue ("@password", Password);
                DataSet ds = new DataSet ();
                da.Fill (ds);
                return ds;
            }}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18197795_18253275_54_77
18197795_18253275_81_112
Title: Insert-Update Error from SQLDataReader in Webservice 
----------------------------------------

[WebMethod (Description = "Single Add of Availability", BufferResponse = true)] public void AddAvail (string Username, string Password, DateTime date, string RoomType, int Qty, double CurPrice) {
    GetAuthCredentials (Username, Password);
    DateTime dat = Dtm;
    int strTypeID = Convert.ToInt16 (GetAuthCredentials (Username, Password).Tables [0].Rows [0] ["strTypeID"]);
    using (SqlConnection mySQLconnection = new SqlConnection (connStr))
    {
        mySQLconnection.Open ();
        string sqlInsertString = "INSERT INTO Available (dtm,intResortID,strRoomType,intQty,curPrice) VALUES (@dat,@strTypeID,@strRoomType,@intQty,@CurPrice)";
        using (SqlCommand command = new SqlCommand ())
        {
            command.Connection = mySQLconnection;
            command.CommandText = sqlInsertString;
            SqlParameter dt = new SqlParameter ("@dat", date);
            SqlParameter intRID = new SqlParameter ("@strTypeID", strTypeID);
            SqlParameter strRType = new SqlParameter ("@strRoomType", RoomType);
            SqlParameter intQuty = new SqlParameter ("@intQty", Qty);
            SqlParameter curpPrice = new SqlParameter ("@curPrice", CurPrice);
            command.Parameters.AddRange (new SqlParameter [] {dt, intRID, strRType, intQuty, curpPrice});
            command.ExecuteNonQuery ();
        }}}
----------------------------------------

[WebMethod (Description = "Single Update", BufferResponse = true)] public DataSet AmdAvail (string Username, string Password, DateTime date, string RoomType, int Qty, double CurPrice) {
    GetAuthCredentials (Username, Password);
    int strTypeID = Convert.ToInt16 (GetAuthCredentials (Username, Password).Tables [0].Rows [0] ["strTypeID"]);
    using (SqlConnection mySQLconnection = new SqlConnection (connStr))
    {
        mySQLconnection.Open ();
        using (SqlCommand dbCommand = new SqlCommand ())
        {
            dbCommand.CommandText = "Update Available set intQty=@Qty,curprice=@CurPrice where dtm = @Dtm and strRoomType=@Roomtype and intResortID=@strTypeID ";
            dbCommand.Connection = mySQLconnection;
            using (SqlDataAdapter da = new SqlDataAdapter ())
            {
                da.SelectCommand = dbCommand;
                SqlParameter typeI = new SqlParameter ("@strTypeID", strTypeID);
                dbCommand.Parameters.Add (typeI);
                dbCommand.Parameters.AddWithValue ("@Dtm", date);
                dbCommand.Parameters.AddWithValue ("@Qty", Qty);
                dbCommand.Parameters.AddWithValue ("@RoomType", RoomType);
                dbCommand.Parameters.AddWithValue ("@curprice", CurPrice);
                dbCommand.Parameters.AddWithValue ("@username", Username);
                dbCommand.Parameters.AddWithValue ("@password", Password);
                DataSet ds = new DataSet ();
                da.Fill (ds);
                return ds;
            }}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1820203_1826598_17_47
1820203_1826598_1_15
Title: Listing Attached Properties in Silverlight 
----------------------------------------

private static void GetAttachedProperties (Assembly a, List < DependencyProperty > attachedProperties) {
    foreach (var type in a.GetTypes ()) {
        Debug.WriteLine (type.FullName);
        var dependencyProperties = type.GetFields (BindingFlags.Static | BindingFlags.Public).Where (f = > typeof (DependencyProperty).IsAssignableFrom (f.FieldType)).Select (f = > f);
        foreach (var dp in dependencyProperties) {
            FieldInfo info = dp;
            var methods = type.GetMethods (BindingFlags.Static | BindingFlags.Public);
            Debug.WriteLine ("{0} suitable dp methods found", methods.Count ());
            var fields = methods.Where (m = > (IsAttachedGetter (m, info) || IsAttachedSetter (m, info))).Select (m = > info).ToArray ();
            foreach (var field in fields) {
                try {
                    Debug.WriteLine ("Adding dependency property {0} from type {1}", dp.Name, type.FullName);
                    attachedProperties.Add ((DependencyProperty) field.GetValue (null));
                }
                catch (Exception e) {
                    Debug.WriteLine ("Error getting dependency property {0} from type {1}, exception: {2}", dp.Name, type.FullName, e);
                }
            }
        }
    }
}
----------------------------------------

public static List < DependencyProperty > GetAttachedProperties (Object element) {
    List < DependencyProperty > attachedProperties = new List < DependencyProperty > ();
    foreach (AssemblyPart ap in Deployment.Current.Parts) {
        StreamResourceInfo sri = Application.GetResourceStream (new Uri (ap.Source, UriKind.Relative));
        Assembly a = new AssemblyPart ().Load (sri.Stream);
        GetAttachedProperties (a, attachedProperties);
    }
    return attachedProperties;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18224303_18224323_1_26
18224303_18224638_1_12
Title: Returning dataset values giving an error 
----------------------------------------

public DataSet GetFunc () {
    int iRet = 0;
    DataSet ds = null;
    SqlConnection sqlConnection = new SqlConnection ();
    try {
        iRet = connect (ref sqlConnection);
        if (DB_SUCCESS_CONNECT == iRet) {
            SqlCommand sqlCommand = new SqlCommand ("", sqlConnection);
            String strQuery = "Select ID, Did, FirstName from Users";
            sqlCommand.CommandText = strQuery;
            SqlDataAdapter adaptor = new SqlDataAdapter (sqlCommand);
            ds = new DataSet ();
            adaptor.Fill (ds);
            sqlConnection.Close ();
        }
    }
    catch (Exception e) {
        disconnect (ref sqlConnection);
    }
    return ds;
}
----------------------------------------

public DataSet GetFunc () {
    string strQuery = "Select ID, Did, FirstName from Users";
    DataSet ds = new DataSet ();
    using (var sqlConnection = new SqlConnection ())
    using (var sqlCommand = new SqlCommand (strQuery, sqlConnection))
    using (var adaptor = new SqlDataAdapter (sqlCommand))
    {
        adaptor.Fill (ds);
    } return ds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18224303_18224638_1_12
18224303_18380343_1_25
Title: Returning dataset values giving an error 
----------------------------------------

public DataSet GetFunc () {
    string strQuery = "Select ID, Did, FirstName from Users";
    DataSet ds = new DataSet ();
    using (var sqlConnection = new SqlConnection ())
    using (var sqlCommand = new SqlCommand (strQuery, sqlConnection))
    using (var adaptor = new SqlDataAdapter (sqlCommand))
    {
        adaptor.Fill (ds);
    } return ds;
}
----------------------------------------

public DataSet GetFunc () {
    int iRet = 0;
    DataSet ds = new DataSet ();
    SqlConnection sqlConnection = new SqlConnection ();
    try {
        iRet = connect (ref sqlConnection);
        if (DB_SUCCESS_CONNECT == iRet) {
            SqlCommand sqlCommand = new SqlCommand ("", sqlConnection);
            String strQuery = "Select ID, Did, FirstName from Users";
            sqlCommand.CommandText = strQuery;
            SqlDataAdapter adaptor = new SqlDataAdapter (sqlCommand);
            adaptor.Fill (ds);
            sqlConnection.Close ();
        }
    }
    catch (Exception e) {
        disconnect (ref sqlConnection);
    }
    return ds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18227220_18227814_1_28
18227220_37544120_1_19
Title: Is there a try Convert.ToInt32... avoiding exceptions 
----------------------------------------

public static bool TryToInt32 (object value, out int result) {
    result = 0;
    if (value == null) {
        return false;
    }
    try {
        result = Convert.ToInt32 (value);
        return true;
    }
    catch {
    }
    if (Int32.TryParse (value.ToString (), out result)) {
        return true;
    }
    return false;
}
----------------------------------------

public static bool TryToInt32 (object value, out int result) {
    if (value == null) {
        result = 0;
        return false;
    }
    var typeConverter = System.ComponentModel.TypeDescriptor.GetConverter (value);
    if (typeConverter != null && typeConverter.CanConvertTo (typeof (int))) {
        var convertTo = typeConverter.ConvertTo (value, typeof (int));
        if (convertTo != null) {
            result = (int) convertTo;
            return true;
        }
    }
    return int.TryParse (value.ToString (), out result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18229463_18229546_3_17
18229463_18231871_3_15
Title: Reference type in C# 
----------------------------------------

private static void Main (string [] args) {
    var person = new Person {Name = "Test"};
    Console.WriteLine (person.Name);
    Person person2 = person;
    person2.Name = "Shahrooz";
    Console.WriteLine (person.Name);
    person2 = null;
    Console.WriteLine (person.Name);
}
----------------------------------------

static void Main () {
    var person1 = new Person {Name = "Test"};
    Console.WriteLine (person1.Name);
    Person person2 = person1;
    person2.Name = "Shahrooz";
    Console.WriteLine (person1.Name);
    Console.WriteLine (person2.Name);
    person2 = new Person {Name = "Test2"};
    Console.WriteLine (person2.Name);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18237254_18308133_12_33
18237254_18308133_1_10
Title: Except compares items from calling (first) collection 
----------------------------------------

public static IEnumerable < TSource > ExceptWithDuplicates < TSource > (this IEnumerable < TSource > first, IEnumerable < TSource > second, IEqualityComparer < TSource > comparer) {
    if (first == null) {
        throw new ArgumentNullException ("first");
    }
    if (second == null) {
        throw new ArgumentNullException ("second");
    }
    var comparerUsed = comparer ?? EqualityComparer < TSource >.Default;
    var secondList = second.ToList ();
    foreach (var item in first) {
        if (secondList.Contains (item, comparerUsed)) {
            secondList.Remove (item);
        } else {
            yield return item;
        }
    }
}
----------------------------------------

public static IEnumerable < TSource > ExceptWithDuplicates < TSource > (this IEnumerable < TSource > first, IEnumerable < TSource > second) {
    if (first == null) {
        throw new ArgumentNullException ("first");
    }
    if (second == null) {
        throw new ArgumentNullException ("second");
    }
    var secondList = second.ToList ();
    return first.Where (s = > ! secondList.Remove (s));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18299669_18502046_1_20
18299669_18502046_22_41
Title: MVC 4 ViewModel not being sent back to Controller 
----------------------------------------

public ActionResult Index () {
    _patron = new Patron ((WindowsIdentity) User.Identity);
    Session ["patron"] = _patron;
    var lstGroups = new List < SelectionModel.GroupModel > ();
    var rMgr = new DataStoreManager.ResourceManager ();
    var resGroups = rMgr.GetResourceGroups ();
    foreach (var resource in resGroups) {
        var group = new SelectionModel.GroupModel ();
        rMgr.GetResourcesByGroup (resource.Key);
        group.GroupName = resource.Value;
        group.GroupKey = resource.Key;
        lstGroups.Add (group);
    }
    return View (lstGroups);
}
----------------------------------------

[ValidateAntiForgeryToken] [HttpPost] public ActionResult Index (SelectionModel.GroupModel item) {
    if (! ModelState.IsValid)
        return View ();

    if (item.GroupKey != null && item.GroupName != null) {
        var rModel = new SelectionModel.ReserveModel {LocationKey = item.GroupKey, Location = item.GroupName};
        Session ["rModel"] = rModel;
    }
    return RedirectToAction ("Date", "Home");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18336856_18336993_9_25
18336856_31016954_42_66
Title: Implementing IDisposable correctly 
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! this.disposed) {
        if (disposing) {
            component.Dispose ();
        }
        CloseHandle (handle);
        handle = IntPtr.Zero;
        disposed = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18386467_18386501_1_10
18386467_18386762_6_14
Title: Does not implement interface member 'System.Icomparable.CompareTo(object)'? 
----------------------------------------

public int CompareTo (object obj) {
    Person p = obj as Person;
    if (this.age > p.age)
        return 1;
    else if (this.age == p.age)
        return 0;
    else
        return - 1;

}
----------------------------------------

public int CompareTo (Person other) {
    if (age > other.age) {
        return 1;
    }
    if (age == other.age) {
        return 0;
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18429355_18430702_2_13
18429355_39671809_1_21
Title: How to Bind Click Event to ViewModel when creating control in code 
----------------------------------------

public static void AttachActionMessage (this DependancyObject control, string eventName, string methodName, object parameter) {
    var action = new ActionMessage ();
    action.MethodName = methodName;
    action.Parameters.Add (new Parameter {Value = parameter});
    var trigger = new System.Windows.Interactivity.EventTrigger ();
    trigger.EventName = eventName;
    trigger.SourceObject = control;
    trigger.Actions.Add (action);
    Interaction.GetTriggers (control).Add (trigger);
}
----------------------------------------

public static void AttachActionMessage (this DependencyObject control, string eventName, string methodName, params object [] parameters) {
    var action = new ActionMessage {MethodName = methodName};
    if (parameters != null) {
        foreach (var parameter in parameters) {
            action.Parameters.Add (new Parameter {Value = parameter});
        }
    }
    var trigger = new System.Windows.Interactivity.EventTrigger {EventName = eventName, SourceObject = control};
    trigger.Actions.Add (action);
    Interaction.GetTriggers (control).Add (trigger);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1843792_1862145_1_10
1843792_1875951_1_12
Title: HOWTO create a stand-alone executable per form for a C# solution in VS 2008 with multiple projects with multiple forms in a single build? 
----------------------------------------

[STAThread] static void Main (string [] args) {
    if (args.Length < 1)
        return;

    if (args [0] == "Form1")
        Application.Run (new Form1 ());
    else if (args [0] == "Form2")
        Application.Run (new Form2 ());

}
----------------------------------------

static void Main () {
    Application.EnableVisualStyles ();
    Application.SetCompatibleTextRenderingDefault (false);
    string FullPath = Assembly.GetExecutingAssembly ().Location;
    string ExeName = Path.GetFileNameWithoutExtension (FullPath);
    Type TypeBasedOnExeName = Assembly.GetExecutingAssembly ().GetType (ExeName);
    Form StartupForm = (Form) Activator.CreateInstance (TypeBasedOnExeName);
    Application.Run (StartupForm);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1846068_1848023_14_26
1846068_36712377_1_11
Title: How to contol the time interval in a DateTimePicker 
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (! mBusy) {
        mBusy = true;
        DateTime dt = dateTimePicker1.Value;
        if ((dt.Minute * 60 + dt.Second) % 300 != 0) {
            TimeSpan diff = dt - mPrevDate;
            if (diff.Ticks < 0)
                dateTimePicker1.Value = mPrevDate.AddMinutes (- 5);
            else
                dateTimePicker1.Value = mPrevDate.AddMinutes (5);

        }
        mBusy = false;
    }
    mPrevDate = dateTimePicker1.Value;
}
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;

    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);

    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18480972_18481121_1_73
18480972_18481908_1_71
Title: C# database query error message? 
----------------------------------------

void searchNameDbMethod () {
    OleDbConnection Myconnection = null;
    OleDbDataReader dbReader = null;
    string selectionText = "";
    string searchName = "";
    Console.Write ("Search for Employee Name: ");
    searchName = Console.ReadLine ();
    searchName = searchName.ToUpper ();
    Console.WriteLine ("\n");
    Myconnection = new OleDbConnection (@"Provider=Microsoft.ACE.OLEDB.12.0; Data Source= payrolldb.accdb");
    Myconnection.Open ();
    selectionText = "SELECT * FROM Table1 WHERE Employee like @Name;";
    OleDbCommand cmd = Myconnection.CreateCommand ();
    cmd.CommandText = selectionText;
    cmd.Parameters.Add (new OleDbParameter () {ParameterName = "@Name", Value = searchName, DbType = System.Data.DbType.String});
    try {
        dbReader = cmd.ExecuteReader (CommandBehavior.CloseConnection);
        while (dbReader.Read ()) {
            string dbName = dbReader.GetValue (1).ToString ();
            if (dbName == searchName) {
                dbName = dbReader.GetValue (1).ToString ();
                string dbID = dbReader.GetValue (2).ToString ();
                string dbHourlyWage = dbReader.GetValue (3).ToString ();
                string dbDependents = dbReader.GetValue (4).ToString ();
                Console.Clear ();
                Console.ResetColor ();
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine ("*******************************************************");
                Console.WriteLine ("**************** {0} *****************", date);
                Console.WriteLine ("*******************************************************");
                Console.WriteLine ("Employee Name: ", dbName);
                Console.WriteLine ("Employee ID: {0}", dbID);
                Console.WriteLine ("Hourly Wage: {0}", dbHourlyWage);
                Console.WriteLine ("Number of Dependents: {0}", dbDependents);
                Console.WriteLine ("*******************************************************");
                Console.ResetColor ();
                Console.Write ("\n\n");
            }
        }
    }
    catch {
        if (dbReader != null) {
            dbReader.Close ();
        }
    }
    finally {
        if (Myconnection != null) {
            Myconnection.Close ();
        }
    }
}
----------------------------------------

public void searchNameDbMethod () {
    OleDbConnection Myconnection = null;
    OleDbDataReader dbReader = null;
    string selectionText = "";
    bool errorFlag = true;
    do
        {
            string searchName = "";
            Console.Write ("Search for Employee Name: ");
            searchName = Console.ReadLine ();
            searchName = searchName.ToUpper ();
            Console.WriteLine ("\n");
            Myconnection = new OleDbConnection (@"Provider=Microsoft.ACE.OLEDB.12.0; Data Source= payrolldb.accdb");
            Myconnection.Open ();
            selectionText = "SELECT * FROM Table1 WHERE employee_name='" + searchName + "'";
            OleDbCommand cmd = Myconnection.CreateCommand ();
            cmd.CommandText = selectionText;
            dbReader = cmd.ExecuteReader ();
            if (dbReader.HasRows) {
                while (dbReader.Read ()) {
                    dbName = dbReader.GetValue (1).ToString ();
                    if (dbName == searchName) {
                        dbName = dbReader.GetValue (1).ToString ();
                        dbID = dbReader.GetValue (2).ToString ();
                        dbHourlyWage = dbReader.GetValue (3).ToString ();
                        dbDependents = dbReader.GetValue (4).ToString ();
                        Console.Clear ();
                        Console.ResetColor ();
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine ("*******************************************************");
                        Console.WriteLine ("**************** {0} *****************", date);
                        Console.WriteLine ("*******************************************************");
                        Console.WriteLine ("Employee Name: ", dbName);
                        Console.WriteLine ("Employee ID: {0}", dbID);
                        Console.WriteLine ("Hourly Wage: {0}", dbHourlyWage);
                        Console.WriteLine ("Number of Dependents: {0}", dbDependents);
                        Console.WriteLine ("*******************************************************");
                        Console.ResetColor ();
                        Console.Write ("\n\n");
                        errorFlag = false;
                    }
                }
            } else if (! dbReader.HasRows) {
                Console.ResetColor ();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine ("Name is not in our database!");
                Console.ResetColor ();
            }
            dbReader.Close ();
            Myconnection.Close ();
        } while (errorFlag == true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18487125_18487269_1_19
18487125_18487421_1_24
Title: Writing to a file in C# VS2012 
----------------------------------------

public Boolean SaveInfo (String firstName, String lastName, DateTime dateOfBirth, String email, String streetAddress, String suburb, String state, int postcode, Job job) {
    try {
        string text = firstName + "\r\n" + lastName + "\r\n" + dateOfBirth + "\r\n" + email + "\r\n" + streetAddress + "\r\n" + suburb + "\r\n" + state + "\r\n" + postcode + "\r\n" + job;
        using (System.IO.StreamWriter file = new System.IO.StreamWriter ("Person.txt"))
        {
            file.WriteLine (text);
            file.Close ();
            return true;
        }}
    catch (Exception ex) {
        return false;
    }
}
----------------------------------------

public Boolean SaveInfo (String firstName, String lastName, DateTime dateOfBirth, String email, String streetAddress, String suburb, String state, int postcode) {
    string text = firstName + " " + lastName + " " + dateOfBirth + " " + email + " " + streetAddress + " " + suburb + " " + state + " " + postcode + " ";
    String [] people = Regex.Split (text, " ");
    try {
        using (System.IO.StreamWriter file = new System.IO.StreamWriter ("Person.txt", true))
        {
            foreach (string c in people) {
                file.Write (c);
            }
            file.Close ();
        } return true;
    }
    catch (Exception) {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18495378_18495488_1_10
18495378_18496881_1_24
Title: Best performing way of trimming the first and last instances of strings from another string? 
----------------------------------------

public string ParseValue (string value, string trimFromStart, string trimFromEnd) {
    bool startsWith = value.StartsWith (trimFromStart);
    bool endsWith = value.EndsWith (trimFromEnd);
    int startLength = trimFromStart.Length;
    int endLength = trimFromEnd.Length;
    if (startsWith && endsWith && value.Length <= startLength + endLength)
        return "";

    var s = startsWith ? value.Substring (startLength) : value;
    s = endsWith ? s.Substring (0, s.Length - endLength) : s;
    return s;
}
----------------------------------------

public string ParseValue (string value, string trimFromStart, string trimFromEnd) {
    int valueLength = value.Length;
    int trimStartAmount = value.StartsWith (trimFromStart) ? trimFromStart.Length : 0;
    int trimFromEndIndex = valueLength;
    int trimEndAmount = 0;
    if (value.EndsWith (trimFromEnd)) {
        trimFromEndIndex = valueLength - trimFromEnd.Length;
        trimEndAmount = trimFromEnd.Length;
    }
    if (trimStartAmount >= trimFromEndIndex)
        return "";

    if (trimStartAmount == 0 && trimEndAmount == 0)
        return value;

    return value.Substring (trimStartAmount, valueLength - trimStartAmount - trimEndAmount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18537066_18538711_1_21
18537066_18540145_1_14
Title: c# recursively decompose class 
----------------------------------------

public static void getItems (Object o, List < object > list) {
    FieldInfo [] f = new FieldInfo [o.GetType ().GetFields ().Length];
    f = o.GetType ().GetFields ();
    foreach (FieldInfo fi in f) {
        if (fi.FieldType.GetFields ().Length > 0) {
            List < object > newList = new List < object > ();
            list.Add (newList);
            getItems (fi, newList);
        } else {
            list.Add (fi.Name);
        }
    }
}
----------------------------------------

public void getItems (Type t, List < object > list) {
    foreach (FieldInfo fi in t.GetFields (BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic)) {
        list.Add (fi.Name);
        if (! fi.FieldType.Namespace.Equals ("System")) {
            List < object > newList = new List < object > ();
            list.Add (newList);
            getItems (fi.FieldType, newList);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18539878_18547076_18_40
18539878_18547076_1_16
Title: How can you programatically retrieve the DataTemplate used for a specific element in the UI hierarchy? 
----------------------------------------

static DataTemplate FindTemplateForType (Type dataType, ResourceDictionary resources) {
    var entries = from DictionaryEntry e in resources
        where e.Key is Type && e.Value is DataTemplate
        let type = (Type) e.Key
        let template = (DataTemplate) e.Value
        where dataType.IsAssignableFrom (type)
        select template;
    var template = entries.FirstOrDefault ();
    if (template != null)
        return template;

    foreach (var mergedDic in resources.MergedDictionaries) {
        template = FindTemplateForType (dataType, mergedDic);
        if (template != null)
            return template;

    }
    return null;
}
----------------------------------------

static DataTemplate FindTemplateForType (Type dataType, DependencyObject container) {
    var frameworkElement = container as FrameworkElement;
    if (frameworkElement != null) {
        var template = FindTemplateForType (dataType, frameworkElement.Resources);
        if (template != null)
            return template;

    }
    var parent = VisualTreeHelper.GetParent (container);
    if (parent != null)
        return FindTemplateForType (dataType, parent);
    else
        return FindTemplateForType (dataType, Application.Current.Resources);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18539878_18547076_18_40
18539878_33488702_1_25
Title: How can you programatically retrieve the DataTemplate used for a specific element in the UI hierarchy? 
----------------------------------------

static DataTemplate FindTemplateForType (Type dataType, ResourceDictionary resources) {
    var entries = from DictionaryEntry e in resources
        where e.Key is Type && e.Value is DataTemplate
        let type = (Type) e.Key
        let template = (DataTemplate) e.Value
        where dataType.IsAssignableFrom (type)
        select template;
    var template = entries.FirstOrDefault ();
    if (template != null)
        return template;

    foreach (var mergedDic in resources.MergedDictionaries) {
        template = FindTemplateForType (dataType, mergedDic);
        if (template != null)
            return template;

    }
    return null;
}
----------------------------------------

public static DataTemplate FindTemplateForType (Type dataType, DependencyObject container) {
    var frameworkElement = container as FrameworkElement;
    if (frameworkElement != null) {
        DataTemplateKey key = new DataTemplateKey (dataType);
        var template = frameworkElement.FindResource (key) as DataTemplate;
        if (template != null)
            return template;

    }
    if (! (container is Visual || container is Visual3D)) {
        container = FindClosestVisualParent (container);
        return FindTemplateForType (dataType, container);
    } else {
        var parent = VisualTreeHelper.GetParent (container);
        if (parent != null)
            return FindTemplateForType (dataType, parent);
        else
            return FindTemplateForType (dataType, Application.Current.Windows [0]);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18539878_18547076_1_16
18539878_33488702_1_25
Title: How can you programatically retrieve the DataTemplate used for a specific element in the UI hierarchy? 
----------------------------------------

static DataTemplate FindTemplateForType (Type dataType, DependencyObject container) {
    var frameworkElement = container as FrameworkElement;
    if (frameworkElement != null) {
        var template = FindTemplateForType (dataType, frameworkElement.Resources);
        if (template != null)
            return template;

    }
    var parent = VisualTreeHelper.GetParent (container);
    if (parent != null)
        return FindTemplateForType (dataType, parent);
    else
        return FindTemplateForType (dataType, Application.Current.Resources);

}
----------------------------------------

public static DataTemplate FindTemplateForType (Type dataType, DependencyObject container) {
    var frameworkElement = container as FrameworkElement;
    if (frameworkElement != null) {
        DataTemplateKey key = new DataTemplateKey (dataType);
        var template = frameworkElement.FindResource (key) as DataTemplate;
        if (template != null)
            return template;

    }
    if (! (container is Visual || container is Visual3D)) {
        container = FindClosestVisualParent (container);
        return FindTemplateForType (dataType, container);
    } else {
        var parent = VisualTreeHelper.GetParent (container);
        if (parent != null)
            return FindTemplateForType (dataType, parent);
        else
            return FindTemplateForType (dataType, Application.Current.Windows [0]);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18582667_18582992_1_25
18582667_18583178_1_14
Title: Legacy vbscript to c# equivilent 
----------------------------------------

public long PHash (string pValue) {
    int dValue;
    double dAccumulator;
    int lTemp;
    string sValue;
    sValue = pValue.Trim ().ToUpper ();
    dAccumulator = 0;
    for (lTemp = 1; lTemp <= sValue.Length; lTemp ++) {
        dValue = (int) char.Parse (sValue.Substring (lTemp, 1));
        if ((lTemp % 1) == 1) {
            dAccumulator = Math.Sin (dAccumulator + dValue);
        } else {
            dAccumulator = Math.Cos (dAccumulator + dValue);
        }
    }
    dAccumulator = dAccumulator * (long) (10 ^ 9);
    return (long) (dAccumulator);
}
----------------------------------------

private static long PHash (String pValue) {
    double dAccumulator = 0;
    byte [] asciiBytes = Encoding.ASCII.GetBytes (pValue.Trim ().ToUpper ());
    for (int i = 0; i < asciiBytes.Length; i ++) {
        if ((i & 1) == 1)
            dAccumulator = Math.Cos (dAccumulator + (double) asciiBytes [i]);
        else
            dAccumulator = Math.Sin (dAccumulator + (double) asciiBytes [i]);

    }
    dAccumulator = dAccumulator * Math.Pow (10, 9);
    return (long) dAccumulator;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18582987_18583167_10_18
18582987_18583221_28_41
Title: Array Index And Retrieving Values Generating Logical Error 
----------------------------------------

public static void Main () {
    int [] numbers = new int [] {1, 2};
    int [] tokens = new int [] {1, 2, 3, 4, 5};
    Random rnd = new Random ();
    int r = rnd.Next (tokens.Length);
    int Token = (tokens [r]);
    Tollgate T = new TollGate ();
    T.Check (numbers, Token);
}
----------------------------------------

public static void Main () {
    int [] numbers = {1, 2, 3, 4, 5};
    Random rnd;
    int r;
    int Token;
    Tollgate T;
    rnd = new Random ();
    r = rnd.Next (numbers.Length);
    Token = numbers [r];
    T = new TollGate ();
    T.Check (numbers, Token);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1860333_1860429_6_22
1860333_1860925_1_42
Title: Extension method for fill rectangular array in C# 
----------------------------------------

static void Fill < T > (int dimension, Array array, long [] indexes, T value) {
    var lowerBound = array.GetLowerBound (dimension);
    var upperBound = array.GetUpperBound (dimension);
    for (int i = lowerBound; i <= upperBound; i ++) {
        indexes [dimension] = i;
        if (dimension < array.Rank - 1) {
            Fill (dimension + 1, array, indexes, value);
        } else {
            array.SetValue (value, indexes);
        }
    }
}
----------------------------------------

public static void FillFlex < T > (this Array source, T value) {
    bool complete = false;
    int [] indices = new int [source.Rank];
    int index = source.GetLowerBound (0);
    int totalElements = 1;
    for (int i = 0; i < source.Rank; i ++) {
        indices [i] = source.GetLowerBound (i);
        totalElements *= source.GetLength (i);
    }
    indices [indices.Length - 1] --;
    complete = totalElements == 0;
    while (! complete) {
        index ++;
        int rank = source.Rank;
        indices [rank - 1] ++;
        for (int i = rank - 1; i >= 0; i --) {
            if (indices [i] > source.GetUpperBound (i)) {
                if (i == 0) {
                    complete = true;
                    return;
                }
                for (int j = i; j < rank; j ++) {
                    indices [j] = source.GetLowerBound (j);
                }
                indices [i - 1] ++;
            }
        }
        source.SetValue (value, indices);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18636661_18637030_16_25
18636661_18637030_27_36
Title: Can I use use Hashcode to directly lookup a value in a C# Dictionary 
----------------------------------------

public bool Equals (StringKey other) {
    if (ReferenceEquals (null, other))
        return false;

    if (ReferenceEquals (this, other))
        return true;

    return (_hashCode == other._hashCode) && string.Equals (_key, other._key);
}
----------------------------------------

public override bool Equals (object obj) {
    if (ReferenceEquals (null, obj))
        return false;

    if (ReferenceEquals (this, obj))
        return true;

    return obj is StringKey && Equals ((StringKey) obj);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18648290_18648347_1_18
18648290_18648355_1_17
Title: How can I make a text box that changes it's fore color based on what's entered in c#? 
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    if (textBox1.TextLength != 0) {
        valueCheck = Convert.ToInt32 (textBox1.Text);
    }
    if (valueCheck >= 0) {
        textBox1.ForeColor = Color.Black;
    } else {
        textBox1.ForeColor = Color.Red;
    }
    valueCheck = 0;
}
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    int valueCheck = 0;
    if (textBox1.TextLength >= 1) {
        Int32.TryParse (textBox1.Text, out valueCheck);
    }
    if (valueCheck < 1) {
        textBox1.ForeColor = Color.Red;
    } else if (valueCheck > 0) {
        textBox1.ForeColor = Color.Black;
    }
    valueCheck = 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18651363_18651405_1_19
18651363_18651433_1_12
Title: SQL Server database : Change Table Value from texbox 
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string connectionString = @"Data Source=" + System.IO.File.ReadAllText ("Server.ini") + ";" + "Initial Catalog=" + "lin2world" + ";" + "User ID=" + System.IO.File.ReadAllText ("User.ini") + ";" + "Password=" + System.IO.File.ReadAllText ("Password.ini");
    string sql = string.Format ("UPDATE user_item SET amount='{0}' WHERE char_id='{1}' AND item_type='{2}'", textBox3.Text, textBox1.Text, textBox2.Text);
    using (SqlConnection connection = new SqlConnection (connectionString))
    {
        SqlCommand command = new SqlCommand (sql, connection);
        command.Connection.Open ();
        command.ExecuteNonQuery ();
    } MessageBox.Show ("Item Amount Changed");
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string connectionString = @"Data Source=" + System.IO.File.ReadAllText ("Server.ini") + ";" + "Initial Catalog=" + "lin2world" + ";" + "User ID=" + System.IO.File.ReadAllText ("User.ini") + ";" + "Password=" + System.IO.File.ReadAllText ("Password.ini");
    string sql = "UPDATE user_item SET amount='" + textBox3.Text + "' WHERE char_id='" + textBox1.Text + "' AND item_type='" + textBox2.Text + "' ";
    SqlConnection connection = new SqlConnection (connectionString);
    SqlDataAdapter dataadapter = new SqlDataAdapter (sql, connection);
    DataSet ds = new DataSet ();
    connection.Open ();
    dataadapter.Fill (ds, "user_item");
    connection.Close ();
    MessageBox.Show ("Item Amount Changed");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18659771_18659940_14_26
18659771_18659940_1_12
Title: Linq extension. Change property value in source list 
----------------------------------------

private static IEnumerable < TResult > SelectIterator < TSource, TResult > (IEnumerable < TSource > source, Func < TSource, int, TResult > selector) {
    int num = - 1;
    checked {
        foreach (TSource current in source) {
            num ++;
            yield return selector (current, num);
        }
        yield break;
    }
}
----------------------------------------

public static IEnumerable < TResult > Select < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, int, TResult > selector) {
    if (source == null) {
        throw Error.ArgumentNull ("source");
    }
    if (selector == null) {
        throw Error.ArgumentNull ("selector");
    }
    return Enumerable.SelectIterator < TSource, TResult > (source, selector);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1866236_14339534_77_86
1866236_14339534_88_97
Title: Add offset to IntPtr 
----------------------------------------

public static Int32 CompareTo (this IntPtr left, IntPtr right) {
    if (left.ToUInt64 () > right.ToUInt64 ())
        return 1;

    if (left.ToUInt64 () < right.ToUInt64 ())
        return - 1;

    return 0;
}
----------------------------------------

public static Int32 CompareTo (this IntPtr left, UInt32 right) {
    if (left.ToUInt64 () > right)
        return 1;

    if (left.ToUInt64 () < right)
        return - 1;

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18713545_18713889_25_48
18713545_18713889_3_23
Title: IEnumerable<T> to CSV ... In the array processing 
----------------------------------------

private static string ToCsvValue < T > (this T item) where T : class {
    if (item == null) {
        return "";
    }
    if (item is string) {
        return String.Format ("\"{0}\"", item.ToString ().Replace ("\"", "\""));
    }
    if (item.GetType ().IsArray) {
        return item.ToString () + "\"" + ((IEnumerable < T >) item).ToCsv () + "\"";
    }
    double dummy;
    if (double.TryParse (item.ToString (), out dummy)) {
        return String.Format ("{0}", item);
    }
    return String.Format ("\"{0}\"", item);
}
----------------------------------------

public static string ToCsv < T > (this IEnumerable < T > items) where T : class {
    var csvBuilder = new StringBuilder ();
    var properties = typeof (T).GetProperties ();
    if (properties.Count () == 0) {
        csvBuilder.AppendLine (String.Join (",", items));
    } else {
        csvBuilder.AppendLine (String.Join (",", properties.Select (p = > p.Name.ToCsvValue ()).ToArray ()));
        foreach (T item in items) {
            string line = String.Join (",", properties.Select (p = > p.GetValue (item, null).ToCsvValue ()).ToArray ());
            csvBuilder.AppendLine (line);
        }
    }
    return csvBuilder.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18716845_18716945_1_27
18716845_18716986_1_32
Title: Add string to List<string> 
----------------------------------------

public string SplitName (string text) {
    string forename;
    string middlename;
    string surname;
    var name = text.Split (' ');
    if (name != null) {
        if (name.Length > 2) {
            forename = name [0];
            surname = name [name.Length - 1];
            middlename = string.Join (" ", name, 1, name.Length - 2);
            text = string.Format ("{0} {1} {2}", forename, middlename, surname);
        }
    } else {
        text = "INVALID";
    }
    return text;
}
----------------------------------------

public string SplitName (string text) {
    string forename = string.Empty;
    string middlename = string.Empty;
    string surname = string.Empty;
    var name = text.Split (' ');
    if (name != null) {
        if (name.Length > 2) {
            forename = name [0];
            surname = name [name.Length - 1];
            List < string > temp = new List < string > ();
            for (int i = 1; i < name.Length - 1; i ++) {
                middlename += name [i];
            }
            text = string.Format ("{0} {1} {2}", forename, middlename, surname);
        }
    } else {
        text = "INVALID";
    }
    return text;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18716845_18716973_1_26
18716845_18716986_1_32
Title: Add string to List<string> 
----------------------------------------

public string SplitName (string text) {
    string forename;
    string middlename;
    string surname;
    var name = text.Split (' ');
    if (name != null) {
        if (name.Length > 2) {
            forename = name [0];
            surname = name [name.Length - 1];
            middlename = string.Join (" ", name.Skip (1).Take (name.Length - 2));
            text = string.Format ("{0} {1} {2}", forename, middlename, surname);
        }
    } else {
        text = "INVALID";
    }
    return text;
}
----------------------------------------

public string SplitName (string text) {
    string forename = string.Empty;
    string middlename = string.Empty;
    string surname = string.Empty;
    var name = text.Split (' ');
    if (name != null) {
        if (name.Length > 2) {
            forename = name [0];
            surname = name [name.Length - 1];
            List < string > temp = new List < string > ();
            for (int i = 1; i < name.Length - 1; i ++) {
                middlename += name [i];
            }
            text = string.Format ("{0} {1} {2}", forename, middlename, surname);
        }
    } else {
        text = "INVALID";
    }
    return text;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18761091_18761403_1_12
18761091_18762541_1_20
Title: array inside hidden element javascript 
----------------------------------------

public void CreateForm (string passengerType, int passengerCount) {
    StringBuilder sb = new StringBuilder ();
    sb.AppendLine ("<table id='NameBirthTable" + passengerType + "'>");
    for (int i = 1; i <= passengerCount; i ++) {
        sb.AppendLine ("<tr>");
        sb.AppendLine ("<td colspan='2'><input id='MiddleName" + passengerType + i + "' type='text' /></td>");
    }
    sb.AppendLine ("</table>");
    Response.Write (sb.ToString ());
}
----------------------------------------

public void CreateForm (string passengerType, int passengerCount) {
    List < string > ids = new List < string > ();
    for (int i = 1; i <= passengerCount; i ++) {
        Response.Write ("<table id=NameBirthTable" + passengerType + i + "><![CDATA[");
        Response.Write ("<tr>");
        Response.Write ("<td colspan=2><input id=MiddleName" + passengerType + i + "type=text /></td>");
        ids.Add ("MiddleName" + passengerType + i);
    }
    Response.Write ("<input type='hidden' id='hiddenElement' value='" + string.Join (",", ids.ToArray ()) + "'></input>");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18762931_18763037_1_22
18762931_18763192_1_20
Title: Multiply two cells in DataGridView - if cell empty issue 
----------------------------------------

private void calculateProductTwoColumns2 (int castkaIndex2, int pocetIndex2, int tot_rows2) {
    try {
        double outVal = 0;
        foreach (DataGridViewRow row in dtg_ksluzby.Rows) {
            double cell1;
            double cell2;
            if (Double.TryParse (row.Cells [castkaIndex2].Value, out cell1) && Double.TryParse (row.Cells [pocetIndex2].Value, out cell2)) {
                outVal = outVal + cell1 * cell2;
            }
        }
        kpriplac.Text = outVal.ToString ();
    }
    catch (Exception ex) {
        MessageBox.Show ("Chybové hlášení K3 " + ex.Message.ToString ());
    }
}
----------------------------------------

private void calculateProductTwoColumns2 (int castkaIndex2, int pocetIndex2, int tot_rows2) {
    try {
        double outVal = 0;
        foreach (DataGridViewRow row in dtg_ksluzby.Rows) {
            outVal += Convert.ToDouble (row.Cells [castkaIndex2].Value is DBNull ? 0 : row.Cells [castkaIndex2].Value) * Convert.ToDouble (row.Cells [procetIndex2].Value is DBNull ? 0 : row.Cells [pocetIndex2].Value);
        }
        kpriplac.Text = outVal.ToString ();
    }
    catch (Exception ex) {
        MessageBox.Show ("Chybové hlášení K3 " + ex.Message.ToString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18807975_18808425_25_38
18807975_18817360_26_34
Title: C# - How to get/set an object's property value without using Reflection 
----------------------------------------

public void run () {
    required_prop_names.ForEach (x = > accessor [x] = null);
    _run ();
    foreach (string prop_name in required_prop_names) {
        Console.WriteLine ("Value of {0} is {1}", prop_name, accessor [prop_name]);
        if (accessor [prop_name] == null) {
            Console.WriteLine ("Null value found on {}!", prop_name);
        }
    }
}
----------------------------------------

public void run () {
    foreach (Wrapper wrapper in wrappers) {
        wrapper.value = null;
    }
    _run ();
    foreach (Wrapper wrapper in wrappers) {
        if (wrapper.value == null)
            throw new Exception ("null value found");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18870653_18870939_1_13
18870653_18870942_1_10
Title: only last dynamically created picturebox is accessible 
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    PictureBox pb = null;
    foreach (Control c in tabControl1.SelectedTab.Controls)
        if (c is PictureBox) {
            pb = c as PictureBox;
            break;
        }

    pb.Image = WindowsFormsApplication7.Properties.Resources.logo2;
}
----------------------------------------

private void button2_Click (object sender, EventArgs e) {
    TabControl actualTabControl = tabControl1.SelectedTab.Controls.OfType < TabControl > ().FirstOrDefault ();
    if (actualTabControl != null) {
        PictureBox pb = actualTabControl.SelectedTab.Controls ["picturebox1name"] as PictureBox;
        if (pb != null)
            pb.Image = WindowsFormsApplication7.Properties.Resources.logo2;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18885484_18897384_41_54
18885484_18902188_44_65
Title: How to find path matrix using bfs 
----------------------------------------

static void Main () {
    int [] who = new int [] {1, 2, 3, 4};
    position start;
    start.row = 0;
    start.col = 0;
    Console.Write ("(" + start.row + "," + start.col + ")");
    foreach (int lookingfor in who) {
        start = bfs (start, map, lookingfor);
        Console.Write ("->(" + start.row + "," + start.col + ")");
    }
}
----------------------------------------

static void Main () {
    int [] who = new int [] {1, 2, 3, 4};
    Position start = new Position ();
    start.row = 0;
    start.col = 0;
    start.parent = null;
    Console.Write ("(" + start.row + "," + start.col + ")");
    foreach (int lookingfor in who) {
        start = bfs (start, map, lookingfor);
        Console.Write ("->(" + start.row + "," + start.col + ")");
    }
    Console.Write ("\n Full path :\n");
    string path = "";
    while (start != null) {
        path = "->(" + start.row + "," + start.col + ")" + path;
        start = start.parent;
    }
    Console.Write (path);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18885484_18897384_75_93
18885484_18902188_86_108
Title: How to find path matrix using bfs 
----------------------------------------

static position [] cellsNear (position pos) {
    List < position > result = new List < position > ();
    foreach (direction dir in directions) {
        int rowCalculated = pos.row + dir.x;
        int colCalculated = pos.col + dir.y;
        if (rowCalculated >= 0 && colCalculated >= 0 && rowCalculated < map.GetLength (0) && colCalculated < map.GetLength (1) && ! visited (rowCalculated, colCalculated)) {
            visitedmap [rowCalculated, colCalculated] = 1;
            result.Add (new position () {row = rowCalculated, col = colCalculated});
        }
    }
    return result.ToArray ();
}
----------------------------------------

static Position [] cellsNear (Position pos) {
    List < Position > result = new List < Position > ();
    foreach (direction dir in directions) {
        int rowCalculated = pos.row + dir.x;
        int colCalculated = pos.col + dir.y;
        if (rowCalculated >= 0 && colCalculated >= 0 && rowCalculated < map.GetLength (0) && colCalculated < map.GetLength (1) && ! visited (rowCalculated, colCalculated)) {
            visitedmap [rowCalculated, colCalculated] = 1;
            Position posPath = new Position ();
            posPath.col = colCalculated;
            posPath.row = rowCalculated;
            posPath.parent = pos;
            result.Add (posPath);
        }
    }
    return result.ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_18891208_1_20
18891098_19876632_1_33
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    bool [] tiles = new bool [X];
    int todo = X;
    for (int i = 0; i < A.Length; i ++) {
        int internalIndex = A [i] - 1;
        if (internalIndex < X && ! tiles [internalIndex]) {
            todo --;
            tiles [internalIndex] = true;
        }
        if (todo == 0)
            return i;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int z = - 1;
    long combA = ((long) X) * (((long) X) + 1) / 2;
    long sumA = 0;
    int [] countA = new int [X];
    for (int i = 0; i < A.Length; i ++) {
        countA [A [i] - 1] += 1;
        if (countA [A [i] - 1] > 1) {
            countA [A [i] - 1] = 1;
        } else {
            sumA += A [i];
        }
        if (sumA == combA) {
            z = i;
            break;
        }
    }
    return z;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_18891208_1_20
18891098_30887483_1_21
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    bool [] tiles = new bool [X];
    int todo = X;
    for (int i = 0; i < A.Length; i ++) {
        int internalIndex = A [i] - 1;
        if (internalIndex < X && ! tiles [internalIndex]) {
            todo --;
            tiles [internalIndex] = true;
        }
        if (todo == 0)
            return i;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int result = - 1;
    Dictionary < int, int > jumps = new Dictionary < int, int > ();
    int res = (X * (X + 1)) / 2;
    int sum = 0;
    for (int i = 0; i < A.Length; i ++) {
        if (! jumps.ContainsKey (A [i])) {
            sum = sum + A [i];
            jumps.Add (A [i], i);
            if (sum == res) {
                result = i;
                break;
            }
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_18891208_1_20
18891098_37478739_1_16
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    bool [] tiles = new bool [X];
    int todo = X;
    for (int i = 0; i < A.Length; i ++) {
        int internalIndex = A [i] - 1;
        if (internalIndex < X && ! tiles [internalIndex]) {
            todo --;
            tiles [internalIndex] = true;
        }
        if (todo == 0)
            return i;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < int > hash = new HashSet < int > ();
    for (int i = 0; i < A.Length; i ++) {
        if (A [i] <= X) {
            hash.Add (A [i]);
            if (hash.Count == X)
                return i;

        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_19819957_1_27
18891098_19876632_1_33
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    int steps = - 1;
    bool [] tiles = new bool [X];
    int todo = X;
    for (int i = 0; i < A.Length; i ++) {
        steps += 1;
        int internalIndex = A [i] - 1;
        if (internalIndex < tiles.Length) {
            if (! tiles [internalIndex]) {
                todo --;
                tiles [internalIndex] = true;
            }
        }
        if (todo == 0)
            return steps;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int z = - 1;
    long combA = ((long) X) * (((long) X) + 1) / 2;
    long sumA = 0;
    int [] countA = new int [X];
    for (int i = 0; i < A.Length; i ++) {
        countA [A [i] - 1] += 1;
        if (countA [A [i] - 1] > 1) {
            countA [A [i] - 1] = 1;
        } else {
            sumA += A [i];
        }
        if (sumA == combA) {
            z = i;
            break;
        }
    }
    return z;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_19819957_1_27
18891098_30887483_1_21
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    int steps = - 1;
    bool [] tiles = new bool [X];
    int todo = X;
    for (int i = 0; i < A.Length; i ++) {
        steps += 1;
        int internalIndex = A [i] - 1;
        if (internalIndex < tiles.Length) {
            if (! tiles [internalIndex]) {
                todo --;
                tiles [internalIndex] = true;
            }
        }
        if (todo == 0)
            return steps;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int result = - 1;
    Dictionary < int, int > jumps = new Dictionary < int, int > ();
    int res = (X * (X + 1)) / 2;
    int sum = 0;
    for (int i = 0; i < A.Length; i ++) {
        if (! jumps.ContainsKey (A [i])) {
            sum = sum + A [i];
            jumps.Add (A [i], i);
            if (sum == res) {
                result = i;
                break;
            }
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_19819957_1_27
18891098_37478739_1_16
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    int steps = - 1;
    bool [] tiles = new bool [X];
    int todo = X;
    for (int i = 0; i < A.Length; i ++) {
        steps += 1;
        int internalIndex = A [i] - 1;
        if (internalIndex < tiles.Length) {
            if (! tiles [internalIndex]) {
                todo --;
                tiles [internalIndex] = true;
            }
        }
        if (todo == 0)
            return steps;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < int > hash = new HashSet < int > ();
    for (int i = 0; i < A.Length; i ++) {
        if (A [i] <= X) {
            hash.Add (A [i]);
            if (hash.Count == X)
                return i;

        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_19876632_1_33
18891098_30887483_1_21
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    int z = - 1;
    long combA = ((long) X) * (((long) X) + 1) / 2;
    long sumA = 0;
    int [] countA = new int [X];
    for (int i = 0; i < A.Length; i ++) {
        countA [A [i] - 1] += 1;
        if (countA [A [i] - 1] > 1) {
            countA [A [i] - 1] = 1;
        } else {
            sumA += A [i];
        }
        if (sumA == combA) {
            z = i;
            break;
        }
    }
    return z;
}
----------------------------------------

public int solution (int X, int [] A) {
    int result = - 1;
    Dictionary < int, int > jumps = new Dictionary < int, int > ();
    int res = (X * (X + 1)) / 2;
    int sum = 0;
    for (int i = 0; i < A.Length; i ++) {
        if (! jumps.ContainsKey (A [i])) {
            sum = sum + A [i];
            jumps.Add (A [i], i);
            if (sum == res) {
                result = i;
                break;
            }
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_19876632_1_33
18891098_37478739_1_16
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    int z = - 1;
    long combA = ((long) X) * (((long) X) + 1) / 2;
    long sumA = 0;
    int [] countA = new int [X];
    for (int i = 0; i < A.Length; i ++) {
        countA [A [i] - 1] += 1;
        if (countA [A [i] - 1] > 1) {
            countA [A [i] - 1] = 1;
        } else {
            sumA += A [i];
        }
        if (sumA == combA) {
            z = i;
            break;
        }
    }
    return z;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < int > hash = new HashSet < int > ();
    for (int i = 0; i < A.Length; i ++) {
        if (A [i] <= X) {
            hash.Add (A [i]);
            if (hash.Count == X)
                return i;

        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18891098_30887483_1_21
18891098_37478739_1_16
Title: A Better Frog Crossing Algorithm 
----------------------------------------

public int solution (int X, int [] A) {
    int result = - 1;
    Dictionary < int, int > jumps = new Dictionary < int, int > ();
    int res = (X * (X + 1)) / 2;
    int sum = 0;
    for (int i = 0; i < A.Length; i ++) {
        if (! jumps.ContainsKey (A [i])) {
            sum = sum + A [i];
            jumps.Add (A [i], i);
            if (sum == res) {
                result = i;
                break;
            }
        }
    }
    return result;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < int > hash = new HashSet < int > ();
    for (int i = 0; i < A.Length; i ++) {
        if (A [i] <= X) {
            hash.Add (A [i]);
            if (hash.Count == X)
                return i;

        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1890093_32346279_7_43
1890093_42095424_1_14
Title: Converting a generic list to a CSV string 
----------------------------------------

public static void CreateCSVFromGenericList < T > (List < T > list, string csvCompletePath) {
    if (list == null || list.Count == 0)
        return;

    Type t = list [0].GetType ();
    string newLine = Environment.NewLine;
    if (! Directory.Exists (Path.GetDirectoryName (csvCompletePath)))
        Directory.CreateDirectory (Path.GetDirectoryName (csvCompletePath));

    if (! File.Exists (csvCompletePath))
        File.Create (csvCompletePath);

    using (var sw = new StreamWriter (csvCompletePath))
    {
        object o = Activator.CreateInstance (t);
        PropertyInfo [] props = o.GetType ().GetProperties ();
        sw.Write (string.Join (",", props.Select (d = > d.Name).ToArray ()) + newLine);
        foreach (T item in list) {
            var row = string.Join (",", props.Select (d = > item.GetType ().GetProperty (d.Name).GetValue (item, null).ToString ()).ToArray ());
            sw.Write (row + newLine);
        }
    }}
----------------------------------------

private static void CreateRows < T > (List < T > list, StreamWriter sw) {
    foreach (var item in list) {
        PropertyInfo [] properties = typeof (T).GetProperties ();
        for (int i = 0; i < properties.Length - 1; i ++) {
            var prop = properties [i];
            sw.Write (prop.GetValue (item) + ",");
        }
        var lastProp = properties [properties.Length - 1];
        sw.Write (lastProp.GetValue (item) + sw.NewLine);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18908056_18908871_1_37
18908056_31102487_6_23
Title: Algorithm: Max Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] result = new int [N];
    int maximum = 0;
    int resetLimit = 0;
    for (int K = 0; K < A.Length; K ++) {
        if (A [K] < 1 || A [K] > N + 1)
            throw new InvalidOperationException ();

        if (A [K] >= 1 && A [K] <= N) {
            if (result [A [K] - 1] < resetLimit) {
                result [A [K] - 1] = resetLimit + 1;
            } else {
                result [A [K] - 1] ++;
            }
            if (result [A [K] - 1] > maximum) {
                maximum = result [A [K] - 1];
            }
        } else {
            resetLimit = maximum;
        }
    }
    for (int i = 0; i < result.Length; i ++)
        result [i] = Math.Max (resetLimit, result [i]);

    return result;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    var currentMax = 0;
    var resetValue = 0;
    var counters = Enumerable.Range (1, N).ToDictionary (i = > i, i = > 0);
    foreach (var a in A) {
        if (a == N + 1)
            resetValue = currentMax;
        else {
            counters [a] = Math.Max (counters [a], resetValue) + 1;
            currentMax = Math.Max (currentMax, counters [a]);
        }
    }
    return counters.Values.Select (v = > Math.Max (v, resetValue)).ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18946775_18950739_1_39
18946775_18986646_1_21
Title: Cancellation Token source and nested tasks 
----------------------------------------

Task Process (CancellationToken cancellationToken) {
    var tArray = new List < Task > ();
    var tArrayLock = new Object ();
    var task = Task.Run (() = > {
        cancellationToken.ThrowIfCancellationRequested ();
        return MainTaskRoutine (cancellationToken);
    }, cancellationToken);
    lock (tArrayLock)
    tArray.Add (task);
    task.ContinueWith ((antecedentTask) = > {
        if (antecedentTask.IsCanceled || antecedentTask.IsFaulted) {
        }
        lock (tArrayLock)
        tArray.Remove (antecedentTask);
    }, TaskContinuationOptions.ExecuteSynchronously);
    Task [] allTasks = null;
    lock (tArrayLock)
    allTasks = tArray.ToArray ();
    return Task.WhenAll (allTasks);
}
----------------------------------------

void Process () {
    var cancellationToken = _cancellationTokenSource.Token;
    Task [] tArray = new Task [1];
    tArray [0] = Task.Factory.StartNew (() = > {
        cancellationToken.ThrowIfCancellationRequested ();
        MainTaskRoutine (cancellationToken);
    }, cancellationToken);
    try {
        Task.WaitAll (tArray);
    }
    catch (Exception ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18952466_18952657_1_10
18952466_18952835_1_13
Title: Trying to calculate power using while loop 
----------------------------------------

protected void calculatePowerButton_Click (object sender, EventArgs e) {
    int numberInt = int.Parse (numberPowerTextBox.Text);
    int powerInt = int.Parse (powerTextBox.Text);
    int resultInt = 1;
    for (int i = 0; i < powerInt; i ++) {
        resultInt *= numberInt;
    }
    resultTextBox.Text = resultInt.ToString ();
}
----------------------------------------

protected void calculatePowerButton_Click (object sender, EventArgs e) {
    int numberInt = int.Parse (numberPowerTextBox.Text);
    int powerInt = int.Parse (powerTextBox.Text);
    int resultInt = 1;
    while (powerInt > 0) {
        resultInt *= numberInt;
        powerInt --;
    }
    resultTextBox.Text = resultInt.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18952585_18956830_1_32
18952585_18969932_1_28
Title: How can I populate Extended Methods with EF5 and return IQueryable (without looping) 
----------------------------------------

[HttpGet] public PageResult < Merchant > MerchantList (ODataQueryOptions < Merchant > queryOptions) {
    var t = new ODataValidationSettings () {MaxTop = 25};
    var s = new ODataQuerySettings () {PageSize = 25};
    queryOptions.Validate (t);
    IEnumerable < Merchant > results = (IEnumerable < Merchant >) queryOptions.ApplyTo (_repo.Context.Merchants, s);
    int skip = queryOptions.Skip == null ? 0 : queryOptions.Skip.Value;
    int take = queryOptions.Top == null ? 25 : queryOptions.Top.Value;
    long ? count = Request.GetInlineCount ();
    List < Merchant > pageOfResults = results.Skip (skip).Take (take).ToList ();
    PageResult < Merchant > page = new PageResult < Merchant > (pageOfResults, Request.GetNextPageLink (), Request.GetInlineCount ());
    foreach (var item in page) {
        item.TotalStores = myMethod (item.MerchantUID);
    }
    return page;
}
----------------------------------------

[HttpGet] [BreezeQueryable] public QueryResult MerchantList (int take, int skip) {
    IQueryable < Merchant > main = _repo.Context.Merchants.OrderBy (m = > m.MerchantUID);
    IQueryable < Merchant > items = main.Skip (skip).Take (take);
    foreach (var item in items) {
        item.LifetimeVal = TotalLifetimeVal (item.MerchantUID);
        item.TotalStores = TotalStores (item.MerchantUID);
    }
    return new QueryResult {InlineCount = main.Count (), Results = items.ToList ()};
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18954514_18954604_4_23
18954514_19005840_1_23
Title: Usage multithreading could lead to excessive memory use 
----------------------------------------

public static void WaitForThreads () {
    List < Thread > toRemove = new List < int > ();
    int i = 0;
    foreach (Thread thread in threads) {
        i ++;
        if (thread.IsAlive) {
            Debug.Print ("waiting for {0} - {1} to end...", thread.Name, i);
            thread.Join ();
        } else {
            toRemove.Add (thread);
        }
    }
    threads.RemoveAll (x = > toRemove.Contains (x));
}
----------------------------------------

public static bool WaitForThreads (int maxWaitingTime) {
    int maxThreads = 0;
    int placeHolder = 0;
    int availableThreads = 0;
    while (maxWaitingTime > 0) {
        System.Threading.ThreadPool.GetMaxThreads (out maxThreads, out placeHolder);
        System.Threading.ThreadPool.GetAvailableThreads (out availableThreads, out placeHolder);
        if (availableThreads == maxThreads) {
            return true;
        }
        System.Threading.Thread.Sleep (TimeSpan.FromMilliseconds (1000));
        -- maxWaitingTime;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18969963_18970065_1_14
18969963_18970079_1_17
Title: FInding a value in an array consisting for 4 different classes 
----------------------------------------

public int min (ref T item) {
    int min = 1000;
    for (int i = 0; i < length; i ++) {
        if (list [i] < min) {
            min = list [i];
        }
    }
    return min;
}
----------------------------------------

public int min (ref T item) {
    int min = 1000;
    T tempItem = list [0];
    for (int i = 0; i < length; i ++) {
        if (list [i].CompareTo (tempItem) < 0) {
            tempItem = list [i];
            min = i;
        }
    }
    item = tempItem;
    return min;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18978386_18980009_1_26
18978386_18980867_1_28
Title: How to delete multiple checked items in a ListView? 
----------------------------------------

protected void btndelete_Click (object sender, EventArgs e) {
    DataTable dt = (DataTable) Session ["CurrentTable"];
    if (dt != null) {
        for (int i = 0; i < listview1.Items.Count - 1; i ++) {
            ListViewDataItem items = listview1.Items [i];
            CheckBox chkBox = (CheckBox) items.FindControl ("chkdel");
            if (chkBox.Checked == true) {
                dt.rows.RemoveAt (i);
            }
        }
        Session ["CurrentTable"] = dt;
        listview1.DataSource = dt;
        listview1.DataBind ();
        BindDataToGridviewDropdownlist ();
    }
}
----------------------------------------

protected void btndelete_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (Session ["CurrentTable"] != null) {
        dt = (DataTable) Session ["CurrentTable"];
        int j = 0;
        for (int i = 0; i < listview1.Items.Count; i ++) {
            ListViewDataItem items = listview1.Items [i];
            CheckBox chkBox = (CheckBox) items.FindControl ("chkdel");
            if (chkBox.Checked == true) {
                dt.Rows.RemoveAt (j);
                dt.AcceptChanges ();
            } else {
                j ++;
            }
        }
        Session ["CurrentTable"] = dt;
        listview1.DataSource = dt;
        listview1.DataBind ();
        BindDataToGridviewDropdownlist ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1899212_1899252_1_14
1899212_1899355_11_54
Title: N-way intersection of sorted enumerables 
----------------------------------------

public static IEnumerable < T > Intersect < T > (IEnumerable < IEnumerable < T > > enums) {
    using (var iter = enums.GetEnumerator ())
    {
        IEnumerable < T > result;
        if (iter.MoveNext ()) {
            result = iter.Current;
            while (iter.MoveNext ()) {
                result = result.Intersect (iter.Current);
            }
        } else {
            result = Enumerable.Empty < T > ();
        }
        return result;
    }}
----------------------------------------

public static IEnumerable < T > IntersectImpl < T > (IComparer < T > comparer, IEnumerable < T > [] enums) {
    IEnumerator < T > [] iters = new IEnumerator < T > [enums.Length];
    try {
        for (int i = 0; i < enums.Length; i ++) {
            if (! (iters [i] = enums [i].GetEnumerator ()).MoveNext ()) {
                yield break;
            }
        }
        bool first = true;
        T lastValue = default (T);
        do
            {
                T value = iters [0].Current;
                if (! first && comparer.Compare (value, lastValue) == 0)
                    continue;

                bool allTrue = true;
                for (int i = 1; i < iters.Length; i ++) {
                    var iter = iters [i];
                    while (comparer.Compare (iter.Current, value) < 0) {
                        if (! iter.MoveNext ())
                            goto alldone;

                    }
                    if (comparer.Compare (iter.Current, value) > 0) {
                        allTrue = false;
                        break;
                    }
                }
                if (allTrue)
                    yield return value;

                first = false;
                lastValue = value;
            } while (iters [0].MoveNext ());
        alldone :;}
    finally {
        for (int i = 0; i < iters.Length; i ++) {
            if (iters [i] != null) {
                try {
                    iters [i].Dispose ();
                }
                catch {
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1899212_1899252_1_14
1899212_1899355_4_10
Title: N-way intersection of sorted enumerables 
----------------------------------------

public static IEnumerable < T > Intersect < T > (IEnumerable < IEnumerable < T > > enums) {
    using (var iter = enums.GetEnumerator ())
    {
        IEnumerable < T > result;
        if (iter.MoveNext ()) {
            result = iter.Current;
            while (iter.MoveNext ()) {
                result = result.Intersect (iter.Current);
            }
        } else {
            result = Enumerable.Empty < T > ();
        }
        return result;
    }}
----------------------------------------

public static IEnumerable < T > Intersect < T > (IComparer < T > comparer, params IEnumerable < T > [] enums) {
    if (enums == null)
        throw new ArgumentNullException ("enums");

    if (enums.Length == 0)
        return Enumerable.Empty < T > ();

    if (enums.Length == 1)
        return enums [0];

    if (comparer == null)
        comparer = Comparer < T >.Default;

    return IntersectImpl (comparer, enums);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1899212_1899355_11_54
1899212_1899355_4_10
Title: N-way intersection of sorted enumerables 
----------------------------------------

public static IEnumerable < T > IntersectImpl < T > (IComparer < T > comparer, IEnumerable < T > [] enums) {
    IEnumerator < T > [] iters = new IEnumerator < T > [enums.Length];
    try {
        for (int i = 0; i < enums.Length; i ++) {
            if (! (iters [i] = enums [i].GetEnumerator ()).MoveNext ()) {
                yield break;
            }
        }
        bool first = true;
        T lastValue = default (T);
        do
            {
                T value = iters [0].Current;
                if (! first && comparer.Compare (value, lastValue) == 0)
                    continue;

                bool allTrue = true;
                for (int i = 1; i < iters.Length; i ++) {
                    var iter = iters [i];
                    while (comparer.Compare (iter.Current, value) < 0) {
                        if (! iter.MoveNext ())
                            goto alldone;

                    }
                    if (comparer.Compare (iter.Current, value) > 0) {
                        allTrue = false;
                        break;
                    }
                }
                if (allTrue)
                    yield return value;

                first = false;
                lastValue = value;
            } while (iters [0].MoveNext ());
        alldone :;}
    finally {
        for (int i = 0; i < iters.Length; i ++) {
            if (iters [i] != null) {
                try {
                    iters [i].Dispose ();
                }
                catch {
                }
            }
        }
    }
}
----------------------------------------

public static IEnumerable < T > Intersect < T > (IComparer < T > comparer, params IEnumerable < T > [] enums) {
    if (enums == null)
        throw new ArgumentNullException ("enums");

    if (enums.Length == 0)
        return Enumerable.Empty < T > ();

    if (enums.Length == 1)
        return enums [0];

    if (comparer == null)
        comparer = Comparer < T >.Default;

    return IntersectImpl (comparer, enums);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19013429_19119937_10_25
19013429_26066474_10_25
Title: DotNetOpenAuth not working with MVC 5 RC 
----------------------------------------

public override void ExecuteResult (ControllerContext context) {
    HttpResponseBase responseContext = context.RequestContext.HttpContext.Response;
    responseContext.StatusCode = (int) _response.StatusCode;
    responseContext.StatusDescription = _response.ReasonPhrase;
    foreach (KeyValuePair < string, IEnumerable < string > > keyValuePair in (HttpHeaders) _response.Headers) {
        foreach (string str in keyValuePair.Value)
            responseContext.AddHeader (keyValuePair.Key, str);

    }
    if (_response.Content != null) {
        _response.Content.CopyToAsync (responseContext.OutputStream).Wait ();
    }
}
----------------------------------------

public override void ExecuteResult (ControllerContext context) {
    HttpResponseBase responseContext = context.RequestContext.HttpContext.Response;
    responseContext.StatusCode = (int) _response.Status;
    responseContext.StatusDescription = _response.Status.ToString ();
    foreach (string key in _response.Headers.Keys) {
        responseContext.AddHeader (key, _response.Headers [key]);
    }
    if (_response.Body != null) {
        StreamWriter escritor = new StreamWriter (responseContext.OutputStream);
        escritor.WriteAsync (_response.Body).Wait ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1901606_1901726_15_38
1901606_1901730_1_18
Title: Collection Randomization using Extension Method 
----------------------------------------

public static IEnumerable < T > RandomizeImpl < T > (this IList < T > enumerable) {
    var indices = new int [enumerable.Count];
    for (int i = 0; i < indices.Length; i ++) {
        indices [i] = i;
    }
    lock (_random)
    {
        for (int i = 0; i < indices.Length - 1; i ++) {
            int j = _random.Next (i, indices.Length);
            int swap = indices [j];
            indices [j] = indices [i];
            indices [i] = swap;
        }
    } for (int i = 0; i < indices.Length; i ++) {
        yield return enumerable [indices [i]];
    }
}
----------------------------------------

public static IList < T > Shuffled < T > (this IEnumerable < T > source, Random generator) {
    if (source == null)
        throw new ArgumentNullException ("source");

    if (generator == null)
        throw new ArgumentNullException ("generator");

    var result = source.ToList ();
    for (int i = result.Count - 1; i > 0; i --) {
        int RandomIndex = generator.Next (i + 1);
        T temp = result [i];
        result [i] = result [RandomIndex];
        result [RandomIndex] = temp;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19058504_19058524_1_15
19058504_19058528_1_17
Title: Inserting text gives objectcollection error 
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID, (EmployeeFirstName + EmployeeLastName) as EmployeeName FROM Employees", cnn);
    DataTable table = new Datatable ();
    SqlDataAdapter adapter = new SqlDataAdapter (cmd);
    adapter.Fill (table);
    comboBox1.DisplayMember = "EmployeeName";
    comboBox1.ValueMember = "EmployeeID";
    comboBox1.DataSource = table;
    cnn.Close ();
}
----------------------------------------

void comboboxrefresh () {
    comboBox1.DisplayMember = "empName";
    comboBox1.ValueMember = "empID";
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        while (dr.Read ()) {
            EmpItem ei = new EmpItem () {empID = dr.GetInt32 (0), empName = dr.GetString (1) + dr.GetString (2)};
            comboBox1.Items.Add (ei);
        }
    }
    cnn.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19058504_19058524_1_15
19058504_19058663_1_22
Title: Inserting text gives objectcollection error 
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID, (EmployeeFirstName + EmployeeLastName) as EmployeeName FROM Employees", cnn);
    DataTable table = new Datatable ();
    SqlDataAdapter adapter = new SqlDataAdapter (cmd);
    adapter.Fill (table);
    comboBox1.DisplayMember = "EmployeeName";
    comboBox1.ValueMember = "EmployeeID";
    comboBox1.DataSource = table;
    cnn.Close ();
}
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19076034_19128061_2_30
19076034_21047196_1_24
Title: How to fill a datatable with List<T> 
----------------------------------------

public static DataTable ConvertToDataTable < T > (this IEnumerable < T > data) {
    List < IDataRecord > list = data.Cast < IDataRecord > ().ToList ();
    PropertyDescriptorCollection props = null;
    DataTable table = new DataTable ();
    if (list != null && list.Count > 0) {
        props = TypeDescriptor.GetProperties (list [0]);
        for (int i = 0; i < props.Count; i ++) {
            PropertyDescriptor prop = props [i];
            table.Columns.Add (prop.Name, Nullable.GetUnderlyingType (prop.PropertyType) ?? prop.PropertyType);
        }
    }
    if (props != null) {
        object [] values = new object [props.Count];
        foreach (T item in data) {
            for (int i = 0; i < values.Length; i ++) {
                values [i] = props [i].GetValue (item) ?? DBNull.Value;
            }
            table.Rows.Add (values);
        }
    }
    return table;
}
----------------------------------------

private static DataTable ConvertToDatatable < T > (List < T > data) {
    PropertyDescriptorCollection props = TypeDescriptor.GetProperties (typeof (T));
    DataTable table = new DataTable ();
    for (int i = 0; i < props.Count; i ++) {
        PropertyDescriptor prop = props [i];
        if (prop.PropertyType.IsGenericType && prop.PropertyType.GetGenericTypeDefinition () == typeof (Nullable < >))
            table.Columns.Add (prop.Name, prop.PropertyType.GetGenericArguments () [0]);
        else
            table.Columns.Add (prop.Name, prop.PropertyType);

    }
    object [] values = new object [props.Count];
    foreach (T item in data) {
        for (int i = 0; i < values.Length; i ++) {
            values [i] = props [i].GetValue (item);
        }
        table.Rows.Add (values);
    }
    return table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19091920_19092054_1_27
19091920_19092343_1_25
Title: Inner threads exception handling 
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    Task task = Task.Factory.StartNew (PrintTime, CancellationToken.None);
    for (int i = 0; i < 20; i ++) {
        Console.WriteLine ("master thread i={0}", i + 1);
        Thread.Sleep (1000);
        if (task.Status == TaskStatus.Faulted)
            break;

    }
    try {
        task.Wait ();
    }
    catch (AggregateException ae) {
        ae.Handle ((x) = > {
            Console.WriteLine ("Exception: " + x.ToString ());
        });
    }
}
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    try {
        AggregateException innerException = null;
        Task.Factory.StartNew (PrintTime, CancellationToken.None).ContinueWith (t = > innerException = t.Exception, TaskContinuationOptions.OnlyOnFaulted);
        for (int i = 0; i < 20; i ++) {
            if (innerException != null)
                throw innerException;

            Console.WriteLine ("master thread i={0}", i + 1);
            Thread.Sleep (1000);
        }
    }
    catch (AggregateException) {
        Console.WriteLine ("Inner thread caused exception. Main thread handles that exception.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19091920_19092054_1_27
19091920_19093946_1_19
Title: Inner threads exception handling 
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    Task task = Task.Factory.StartNew (PrintTime, CancellationToken.None);
    for (int i = 0; i < 20; i ++) {
        Console.WriteLine ("master thread i={0}", i + 1);
        Thread.Sleep (1000);
        if (task.Status == TaskStatus.Faulted)
            break;

    }
    try {
        task.Wait ();
    }
    catch (AggregateException ae) {
        ae.Handle ((x) = > {
            Console.WriteLine ("Exception: " + x.ToString ());
        });
    }
}
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    var mainThread = new Thread (MainThread);
    mainThread.Start ();
    var task = Task.Factory.StartNew (PrintTime).ContinueWith (t = > {
        Console.WriteLine ("Inner thread caused exception. Main thread is being aborted.");
        mainThread.Abort ();
    }, TaskContinuationOptions.OnlyOnFaulted);
    task.Wait ();
    Console.WriteLine ("Waiting for main thread to abort...");
    mainThread.Join ();
    Console.WriteLine ("Main thread aborted.");
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19091920_19092054_1_27
19091920_19096199_1_37
Title: Inner threads exception handling 
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    Task task = Task.Factory.StartNew (PrintTime, CancellationToken.None);
    for (int i = 0; i < 20; i ++) {
        Console.WriteLine ("master thread i={0}", i + 1);
        Thread.Sleep (1000);
        if (task.Status == TaskStatus.Faulted)
            break;

    }
    try {
        task.Wait ();
    }
    catch (AggregateException ae) {
        ae.Handle ((x) = > {
            Console.WriteLine ("Exception: " + x.ToString ());
        });
    }
}
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    var innerCts = new CancellationTokenSource ();
    Exception mainException = null;
    var mainThread = new Thread (() = > SafeMainThread (innerCts, ref mainException));
    mainThread.Start ();
    var innerTask = Task.Factory.StartNew (state = > PrintTime (state), innerCts, innerCts.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default);
    var innerFault = innerTask.ContinueWith (t = > {
        Console.WriteLine ("Inner thread caused " + t.Exception.InnerException.GetType ().Name + ". Main thread is being aborted...");
        mainThread.Abort ();
    }, TaskContinuationOptions.OnlyOnFaulted);
    var innerCancelled = innerTask.ContinueWith (_ = > Console.WriteLine ("Inner thread cancelled."), TaskContinuationOptions.OnlyOnCanceled);
    var innerSucceed = innerTask.ContinueWith (_ = > Console.WriteLine ("Inner thread completed."), TaskContinuationOptions.OnlyOnRanToCompletion);
    try {
        innerTask.Wait ();
    }
    catch (AggregateException) {
    }
    mainThread.Join ();
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19091920_19092343_1_25
19091920_19093946_1_19
Title: Inner threads exception handling 
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    try {
        AggregateException innerException = null;
        Task.Factory.StartNew (PrintTime, CancellationToken.None).ContinueWith (t = > innerException = t.Exception, TaskContinuationOptions.OnlyOnFaulted);
        for (int i = 0; i < 20; i ++) {
            if (innerException != null)
                throw innerException;

            Console.WriteLine ("master thread i={0}", i + 1);
            Thread.Sleep (1000);
        }
    }
    catch (AggregateException) {
        Console.WriteLine ("Inner thread caused exception. Main thread handles that exception.");
    }
}
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    var mainThread = new Thread (MainThread);
    mainThread.Start ();
    var task = Task.Factory.StartNew (PrintTime).ContinueWith (t = > {
        Console.WriteLine ("Inner thread caused exception. Main thread is being aborted.");
        mainThread.Abort ();
    }, TaskContinuationOptions.OnlyOnFaulted);
    task.Wait ();
    Console.WriteLine ("Waiting for main thread to abort...");
    mainThread.Join ();
    Console.WriteLine ("Main thread aborted.");
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19091920_19092343_1_25
19091920_19096199_1_37
Title: Inner threads exception handling 
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    try {
        AggregateException innerException = null;
        Task.Factory.StartNew (PrintTime, CancellationToken.None).ContinueWith (t = > innerException = t.Exception, TaskContinuationOptions.OnlyOnFaulted);
        for (int i = 0; i < 20; i ++) {
            if (innerException != null)
                throw innerException;

            Console.WriteLine ("master thread i={0}", i + 1);
            Thread.Sleep (1000);
        }
    }
    catch (AggregateException) {
        Console.WriteLine ("Inner thread caused exception. Main thread handles that exception.");
    }
}
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    var innerCts = new CancellationTokenSource ();
    Exception mainException = null;
    var mainThread = new Thread (() = > SafeMainThread (innerCts, ref mainException));
    mainThread.Start ();
    var innerTask = Task.Factory.StartNew (state = > PrintTime (state), innerCts, innerCts.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default);
    var innerFault = innerTask.ContinueWith (t = > {
        Console.WriteLine ("Inner thread caused " + t.Exception.InnerException.GetType ().Name + ". Main thread is being aborted...");
        mainThread.Abort ();
    }, TaskContinuationOptions.OnlyOnFaulted);
    var innerCancelled = innerTask.ContinueWith (_ = > Console.WriteLine ("Inner thread cancelled."), TaskContinuationOptions.OnlyOnCanceled);
    var innerSucceed = innerTask.ContinueWith (_ = > Console.WriteLine ("Inner thread completed."), TaskContinuationOptions.OnlyOnRanToCompletion);
    try {
        innerTask.Wait ();
    }
    catch (AggregateException) {
    }
    mainThread.Join ();
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19091920_19093946_1_19
19091920_19096199_1_37
Title: Inner threads exception handling 
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    var mainThread = new Thread (MainThread);
    mainThread.Start ();
    var task = Task.Factory.StartNew (PrintTime).ContinueWith (t = > {
        Console.WriteLine ("Inner thread caused exception. Main thread is being aborted.");
        mainThread.Abort ();
    }, TaskContinuationOptions.OnlyOnFaulted);
    task.Wait ();
    Console.WriteLine ("Waiting for main thread to abort...");
    mainThread.Join ();
    Console.WriteLine ("Main thread aborted.");
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    Console.WriteLine ("start");
    var innerCts = new CancellationTokenSource ();
    Exception mainException = null;
    var mainThread = new Thread (() = > SafeMainThread (innerCts, ref mainException));
    mainThread.Start ();
    var innerTask = Task.Factory.StartNew (state = > PrintTime (state), innerCts, innerCts.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default);
    var innerFault = innerTask.ContinueWith (t = > {
        Console.WriteLine ("Inner thread caused " + t.Exception.InnerException.GetType ().Name + ". Main thread is being aborted...");
        mainThread.Abort ();
    }, TaskContinuationOptions.OnlyOnFaulted);
    var innerCancelled = innerTask.ContinueWith (_ = > Console.WriteLine ("Inner thread cancelled."), TaskContinuationOptions.OnlyOnCanceled);
    var innerSucceed = innerTask.ContinueWith (_ = > Console.WriteLine ("Inner thread completed."), TaskContinuationOptions.OnlyOnRanToCompletion);
    try {
        innerTask.Wait ();
    }
    catch (AggregateException) {
    }
    mainThread.Join ();
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19101296_19101350_1_11
19101296_19101412_1_28
Title: Is current time within range 
----------------------------------------

static bool NowWithinShiftTime (string shiftStart, string shiftEnd) {
    TimeSpan startTime = DateTime.Parse (shiftStart).TimeOfDay;
    TimeSpan endTime = DateTime.Parse (shiftEnd).TimeOfDay;
    TimeSpan now = DateTime.Now.TimeOfDay;
    if (startTime < endTime)
        return now >= startTime && now <= endTime;
    else
        return now >= startTime || now <= endTime;

}
----------------------------------------

static bool NowWithinShiftTime (string shiftStart, string shiftEnd) {
    DateTime startDate;
    DateTime endDate;
    DateTime now = DateTime.Now;
    TimeSpan startTime = DateTime.Parse (shiftStart).TimeOfDay;
    TimeSpan endTime = DateTime.Parse (shiftEnd).TimeOfDay;
    if (startTime < endTime) {
        startDate = DateTime.Today + startTime;
        endDate = DateTime.Today + endTime;
    } else {
        startDate = DateTime.Today + startTime;
        endDate = DateTime.Today.AddDays (1) + endTime;
    }
    if (now >= startDate && now <= endDate) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19101296_19101350_1_11
19101296_19101492_1_13
Title: Is current time within range 
----------------------------------------

static bool NowWithinShiftTime (string shiftStart, string shiftEnd) {
    TimeSpan startTime = DateTime.Parse (shiftStart).TimeOfDay;
    TimeSpan endTime = DateTime.Parse (shiftEnd).TimeOfDay;
    TimeSpan now = DateTime.Now.TimeOfDay;
    if (startTime < endTime)
        return now >= startTime && now <= endTime;
    else
        return now >= startTime || now <= endTime;

}
----------------------------------------

static bool NowWithinShiftTime (string shiftStart, string shiftEnd) {
    DateTime now = DateTime.Now;
    DateTime startDate = DateTime.Parse (shiftStart);
    DateTime endDate = DateTime.Parse (shiftEnd);
    if (endDate < startDate) {
        endDate = endDate.AddDays (1);
    }
    return now >= startDate && now <= endDate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19101296_19101412_1_28
19101296_19101492_1_13
Title: Is current time within range 
----------------------------------------

static bool NowWithinShiftTime (string shiftStart, string shiftEnd) {
    DateTime startDate;
    DateTime endDate;
    DateTime now = DateTime.Now;
    TimeSpan startTime = DateTime.Parse (shiftStart).TimeOfDay;
    TimeSpan endTime = DateTime.Parse (shiftEnd).TimeOfDay;
    if (startTime < endTime) {
        startDate = DateTime.Today + startTime;
        endDate = DateTime.Today + endTime;
    } else {
        startDate = DateTime.Today + startTime;
        endDate = DateTime.Today.AddDays (1) + endTime;
    }
    if (now >= startDate && now <= endDate) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

static bool NowWithinShiftTime (string shiftStart, string shiftEnd) {
    DateTime now = DateTime.Now;
    DateTime startDate = DateTime.Parse (shiftStart);
    DateTime endDate = DateTime.Parse (shiftEnd);
    if (endDate < startDate) {
        endDate = endDate.AddDays (1);
    }
    return now >= startDate && now <= endDate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19109647_19109743_63_75
19109647_19109756_1_28
Title: Issues with the c# datarow 
----------------------------------------

public void LoginQuery (string username, string password) {
    string loginquery = "SELECT * FROM logingegevens WHERE Username='" + username + "'AND Password='" + password + "';";
    try {
        MySqlCommand cmd = new MySqlCommand (loginquery, _connection);
        MySqlDataAdapter adp = new MySqlDataAdapter (cmd);
        _dataTable = new DataTable ();
        adp.Fill (_dataTable);
        var count = _dataTable.Rows.Count;
    }
    catch {
    }
}
----------------------------------------

public bool LoginQuery (string username, string password) {
    string loginquery = "SELECT * FROM logingegevens WHERE Username='" + username + "'AND Password='" + password + "';";
    try {
        MySqlCommand cmd = new MySqlCommand (loginquery, _connection);
        MySqlDataReader dataReader = cmd.ExecuteReader ();
        int count = 0;
        while (dataReader.Read ()) {
            count = count + 1;
        }
        if (count == 1) {
            return true;
        }
    }
    catch (Exception ex) {
        MessageBox.Show (ex.Message);
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19111873_19119317_130_162
19111873_19119317_70_127
Title: c# Pitch shift of wave files 
----------------------------------------

public static void GetWaveData (float [] left, float [] right, ref byte [] data) {
    float k = (float) Int16.MaxValue / left.Select (x = > Math.Abs (x)).Max ();
    Array.Clear (data, 0, data.Length);
    int dataLenght = left.Length;
    int byteId = - 1;
    using (BinaryWriter writer = new BinaryWriter (new MemoryStream (data)))
    {
        for (int i = 0; i < dataLenght; i ++) {
            byte byte1 = 0;
            byte byte2 = 0;
            byteId ++;
            NormalizedToBytes_16 (left [i], k, out byte1, out byte2);
            writer.Write (byte1);
            writer.Write (byte2);
            if (right != null) {
                byteId ++;
                NormalizedToBytes_16 (right [i], k, out byte1, out byte2);
                writer.Write (byte1);
                writer.Write (byte2);
            }
        }
    }}
----------------------------------------

public static void GetWaveData (string filename, out byte [] header, out byte [] data, out int sampleRate, out float [] left, out float [] right) {
    byte [] wav = File.ReadAllBytes (filename);
    int channels = wav [22];
    sampleRate = BitConverter.ToInt32 (wav, 24);
    int pos = 12;
    while (! (wav [pos] == 100 && wav [pos + 1] == 97 && wav [pos + 2] == 116 && wav [pos + 3] == 97)) {
        pos += 4;
        int chunkSize = wav [pos] + wav [pos + 1] * 256 + wav [pos + 2] * 65536 + wav [pos + 3] * 16777216;
        pos += 4 + chunkSize;
    }
    pos += 4;
    int subchunk2Size = BitConverter.ToInt32 (wav, pos);
    pos += 4;
    int samples = subchunk2Size / 2;
    if (channels == 2)
        samples /= 2;

    left = new float [samples];
    if (channels == 2)
        right = new float [samples];
    else
        right = null;

    header = new byte [pos];
    Array.Copy (wav, header, pos);
    data = new byte [subchunk2Size];
    Array.Copy (wav, pos, data, 0, subchunk2Size);
    int i = 0;
    while (pos < subchunk2Size) {
        left [i] = BytesToNormalized_16 (wav [pos], wav [pos + 1]);
        pos += 2;
        if (channels == 2) {
            right [i] = BytesToNormalized_16 (wav [pos], wav [pos + 1]);
            pos += 2;
        }
        i ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19131962_19132368_1_6
19131962_19132368_8_14
Title: Overridden Equals method not getting called by HashSet 
----------------------------------------

public virtual bool Equals (Entity other) {
    if (ReferenceEquals (null, other))
        return false;

    if (ReferenceEquals (this, other))
        return true;

    return other.Id.Equals (Id);
}
----------------------------------------

public override bool Equals (object obj) {
    if (ReferenceEquals (null, obj))
        return false;

    if (ReferenceEquals (this, obj))
        return true;

    if (! (obj is Entity))
        return false;

    return Equals ((Entity) obj);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1915352_1915414_3_17
1915352_1915485_3_14
Title: What's the best way of returning constructed IDisposables safely? 
----------------------------------------

public static TDisposable DisposeOnError < TDisposable > (TDisposable dispoable, Action < TDisposable > action) where TDisposable : IDisposable {
    try {
        action (dispoable);
    }
    catch (Exception) {
        disposable.Dispose ();
        throw;
    }
    return disposable;
}
----------------------------------------

public static void SafelyDo < T > (this T disp, Action < T > action) where T : IDisposable {
    try {
        action (disp);
    }
    catch {
        disp.Dispose ();
        throw;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19178841_19180944_23_53
19178841_19184493_3_21
Title: Deserialize json object that contains another object 
----------------------------------------

static void Main (string [] args) {
    string json = @"
        {
           'weapons':

                    {
                       'aek':
                            {
                               'name':'AEK-971 Vintovka',
                               'kills':47,
                               'shots_fired':5406,
                               'shots_hit':858
                            },
                       'xm8':
                            {
                               'name':'XM8 Prototype',
                               'kills':133,
                               'shots_fired':10170,
                               'shots_hit':1790
                            },
                    }

        }";
    WeapsCollection weps = JsonConvert.DeserializeObject < WeapsCollection > (json);
    Console.WriteLine (weps.Weapons.First ().Value.Shots_Fired);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    string json = @"
        {
           ""result"":
             {
                ""car1"":{""lat"":37.989728,""long"":23.664633},
                ""car2"":{""lat"":38.008027,""long"":23.774068}
             }
        }";
    Result result = JsonConvert.DeserializeObject < Result > (json);
    foreach (KeyValuePair < string, Car > kvp in result.Cars) {
        Console.WriteLine (kvp.Key + ": lat=" + kvp.Value.Lat + ", long=" + kvp.Value.Long);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19192754_19192787_1_14
19192754_19192827_1_14
Title: How to get the max value in c# 
----------------------------------------

static void Main (string [] args) {
    int i, pcm = 0, maxm = 0;
    for (i = 1; i <= 3; i ++) {
        Console.WriteLine ("Please enter your computer marks");
        pcm = int.Parse (Console.ReadLine ());
        maxm = maxm > pcm ? maxm : pcm;
    }
    Console.WriteLine (string.Format ("The max value is: {0}", maxm));
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    int i, pcm, maxm = 0;
    for (i = 1; i <= 3; i ++) {
        Console.WriteLine ("Please enter your computer marks");
        pcm = int.Parse (Console.ReadLine ());
        if (maxm <= pcm) {
            maxm = pcm;
        }
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19192754_19192787_1_14
19192754_19192873_1_13
Title: How to get the max value in c# 
----------------------------------------

static void Main (string [] args) {
    int i, pcm = 0, maxm = 0;
    for (i = 1; i <= 3; i ++) {
        Console.WriteLine ("Please enter your computer marks");
        pcm = int.Parse (Console.ReadLine ());
        maxm = maxm > pcm ? maxm : pcm;
    }
    Console.WriteLine (string.Format ("The max value is: {0}", maxm));
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    int i, pcm, maxm = 0;
    List < int > vals = new List < int > ();
    for (i = 1; i <= 3; i ++) {
        Console.WriteLine ("Please enter your computer marks");
        pcm = int.Parse (Console.ReadLine ());
        vals.Add (pcm);
    }
    maxm = vals.Max (a = > a);
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
192121_11181584_3_15
192121_192214_1_10
Title: How do I use DateTime.TryParse with a Nullable<DateTime>? 
----------------------------------------

public static bool TryParse (this DateTime ? dateTime, string dateString, out DateTime ? result) {
    DateTime tempDate;
    if (! DateTime.TryParse (dateString, out tempDate)) {
        result = null;
        return false;
    }
    result = tempDate;
    return true;
}
----------------------------------------

public bool TryParse (string text, out Nullable < DateTime > nDate) {
    DateTime date;
    bool isParsed = DateTime.TryParse (text, out date);
    if (isParsed)
        nDate = new Nullable < DateTime > (date);
    else
        nDate = new Nullable < DateTime > ();

    return isParsed;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19215442_19215577_9_20
19215442_19215580_7_20
Title: declaring a list inside a class and it's the same list in every instance? 
----------------------------------------

static void Main (string [] args) {
    var one = new MyClass ();
    var two = new MyClass ();
    var three = new MyClass ();
    one.Load (25);
    two.Load (50);
    three.Load (75);
    Console.WriteLine (one.Params.Count ());
}
----------------------------------------

static void Main () {
    MyClass one = new MyClass ();
    MyClass two = new MyClass ();
    MyClass three = new MyClass ();
    one.Load (10);
    two.Load (50);
    three.Load (100);
    System.Console.WriteLine ("One.Count  " + one.Params.Count);
    System.Console.WriteLine ("Two.Count " + two.Params.Count);
    System.Console.WriteLine ("Three.Count  " + three.Params.Count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19216985_19217070_12_38
19216985_19223163_1_30
Title: What are the best practices to parse data into objects in data access layer? 
----------------------------------------

private static bool TryParseDataRow < T > (IDataRecord record, string column, out T value) {
    value = default (T);
    bool success = true;
    if (record == null) {
        success = false;
    } else if (! record.HasColumn (column)) {
        success = false;
    } else if (record [column] != typeof (T)) {
        success = false;
    } else {
        value = (T) record [column];
    }
    return success;
}
----------------------------------------

public static T MapDTO < T > (object dto) where T : new () {
    T Result = new T ();
    if (dto == null)
        return Result;

    dto.GetType ().GetProperties ().ToList ().ForEach (p = > {
        PropertyInfo prop = Result.GetType ().GetProperty (p.Name);
        if (prop != null && prop.CanWrite) {
            try {
                var convertedVal = Convert.ChangeType (p.GetValue (dto, null), prop.PropertyType);
                prop.SetValue (Result, convertedVal, null);
            }
            catch (Exception ex) {
                try {
                    prop.SetValue (Result, p.GetValue (dto, null), null);
                }
                catch (Exception ex1) {
                }
            }
        }
    });
    return Result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19225568_30775729_28_44
19225568_30775729_9_20
Title: WPF Datagrid Get Selected Cell Value 
----------------------------------------

public static string getDataGridValueAt (DataGrid dGrid, string columnName) {
    if (dGrid.SelectedItem == null)
        return "";

    for (int i = 0; i < columnName.Length; i ++)
        if (columnName.ElementAt (i) == '_') {
            columnName = columnName.Insert (i, "_");
            i ++;
        }

    string str = dGrid.SelectedItem.ToString ();
    str = str.Replace ("}", "").Trim ().Replace ("{", "").Trim ();
    for (int i = 0; i < str.Split (',').Length; i ++)
        if (str.Split (',') [i].Trim ().Split ('=') [0].Trim () == columnName)
            return str.Split (',') [i].Trim ().Split ('=') [1].Trim ();

    return str;
}
----------------------------------------

public static string getDataGridValueAt (DataGrid dGrid, int columnIndex) {
    if (dGrid.SelectedItem == null)
        return "";

    string str = dGrid.SelectedItem.ToString ();
    str = str.Replace ("}", "").Trim ().Replace ("{", "").Trim ();
    if (columnIndex < 0 || columnIndex >= str.Split (',').Length)
        return "";

    str = str.Split (',') [columnIndex].Trim ();
    str = str.Split ('=') [1].Trim ();
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19226857_25228986_12_22
19226857_25228986_1_10
Title: Winform Treeview find node by tag 
----------------------------------------

public TreeNode GetNode (string name) {
    TreeNode itemNode = null;
    foreach (TreeNode node in treeViewPermission.Nodes) {
        if (node.Name.Equals (name))
            return node;

        itemNode = GetNode (name, node);
        if (itemNode != null)
            break;

    }
    return itemNode;
}
----------------------------------------

public TreeNode GetNode (string name, TreeNode rootNode) {
    foreach (TreeNode node in rootNode.Nodes) {
        if (node.Name.Equals (name))
            return node;

        TreeNode next = GetNode (name, node);
        if (next != null)
            return next;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19226857_25228986_12_22
19226857_42660655_1_12
Title: Winform Treeview find node by tag 
----------------------------------------

public TreeNode GetNode (string name) {
    TreeNode itemNode = null;
    foreach (TreeNode node in treeViewPermission.Nodes) {
        if (node.Name.Equals (name))
            return node;

        itemNode = GetNode (name, node);
        if (itemNode != null)
            break;

    }
    return itemNode;
}
----------------------------------------

public TreeNode GetNode (object tag, TreeNode rootNode) {
    foreach (TreeNode node in rootNode.Nodes) {
        if (node.Tag.Equals (tag))
            return node;

        var next = GetNode (tag, node);
        if (next != null)
            return next;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19226857_25228986_1_10
19226857_42660655_14_25
Title: Winform Treeview find node by tag 
----------------------------------------

public TreeNode GetNode (string name, TreeNode rootNode) {
    foreach (TreeNode node in rootNode.Nodes) {
        if (node.Name.Equals (name))
            return node;

        TreeNode next = GetNode (name, node);
        if (next != null)
            return next;

    }
    return null;
}
----------------------------------------

public TreeNode GetNode (object tag) {
    TreeNode itemNode = null;
    foreach (TreeNode node in _sourceTreeView.Nodes) {
        if (node.Tag.Equals (tag))
            return node;

        itemNode = GetNode (tag, node);
        if (itemNode != null)
            break;

    }
    return itemNode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19226857_42660655_14_25
19226857_42660655_1_12
Title: Winform Treeview find node by tag 
----------------------------------------

public TreeNode GetNode (object tag) {
    TreeNode itemNode = null;
    foreach (TreeNode node in _sourceTreeView.Nodes) {
        if (node.Tag.Equals (tag))
            return node;

        itemNode = GetNode (tag, node);
        if (itemNode != null)
            break;

    }
    return itemNode;
}
----------------------------------------

public TreeNode GetNode (object tag, TreeNode rootNode) {
    foreach (TreeNode node in rootNode.Nodes) {
        if (node.Tag.Equals (tag))
            return node;

        var next = GetNode (tag, node);
        if (next != null)
            return next;

    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19256614_19256731_1_23
19256614_19257265_1_27
Title: Need some overloading info for C# 
----------------------------------------

public static void Main (String [] args) {
    string name, race;
    double age, weight;
    Console.Write ("Please enter your dog's name: ");
    name = Console.ReadLine ();
    Console.Write ("Please enter your dog's race: ");
    race = Console.ReadLine ();
    Console.Write ("Please enter your dog's age: ");
    age = double.Parse (Console.ReadLine ());
    Console.Write ("Please enter your dog's weight: ");
    weight = double.Parse (Console.ReadLine ());
    Animal dog2 = new Animal (name, race, age, weight);
    dog2.info ();
}
----------------------------------------

private static void Main (string [] args) {
    Console.WriteLine ("Enter a name");
    string name = Console.ReadLine ();
    Console.WriteLine ("Enter a race");
    string race = Console.ReadLine ();
    Console.WriteLine ("Enter an age");
    double age;
    while (! double.TryParse (Console.ReadLine (), out age)) {
        Console.WriteLine ("The value you entered is not a valid age, please enter a valid age");
    }
    Console.WriteLine ("Enter a weight");
    double weight;
    while (! double.TryParse (Console.ReadLine (), out weight)) {
        Console.WriteLine ("The value you entered is not a valid weight, please enter a valid weight");
    }
    Animal dog2 = new Animal (name, race, age, weight);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19257303_19257355_1_14
19257303_19257906_1_21
Title: Need cast something as a type parameter in method 
----------------------------------------

public static object Get (DataCache dataCache, string label, object obj) {
    try {
        return (object) dataCache.Get (label);
    }
    catch (DataCacheException) {
        dataCache.Remove (label);
    }
    return null;
}
----------------------------------------

public static object Get (DataCache dataCache, string label, object typeObject) {
    try {
        Type type = typeObject.GetType ();
        object value = dataCache.Get (label);
        if (value != null && type.IsAssignableFrom (value.GetType ()))
            return value;
        else {
            dataCache.Remove (label);
            return null;
        }
    }
    catch (DataCacheException) {
        dataCache.Remove (label);
        return null;
    }
}
----------------------------------------

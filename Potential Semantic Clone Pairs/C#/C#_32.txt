$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4796109_30354627_12_33
4796109_39231545_1_27
Title: How to move item in listBox up and down? 
----------------------------------------

public void MoveItem (int direction, ListBox listBox) {
    if (listBox.SelectedItem == null || listBox.SelectedIndex < 0)
        return;

    int newIndex = listBox.SelectedIndex + direction;
    if (newIndex < 0 || newIndex >= listBox.Items.Count)
        return;

    object selected = listBox.SelectedItem;
    listBox.Items.Remove (selected);
    listBox.Items.Insert (newIndex, selected);
    listBox.SetSelected (newIndex, true);
}
----------------------------------------

public void MoveItem (int direction) {
    if (listBox1.SelectedItem == null || listBox1.SelectedIndex < 0)
        return;

    int newIndex = listBox1.SelectedIndex + direction;
    if (newIndex < 0 || newIndex >= listBox1.Items.Count)
        return;

    UnifyCamera selected = listBox1.SelectedItem as UnifyCamera;
    inputData.Cameras.RemoveAt (listBox1.SelectedIndex);
    inputData.Cameras.Insert (newIndex, selected);
    ((ListBox) listBox1).DataSource = null;
    ((ListBox) listBox1).DataSource = this.inputData.Cameras;
    ((ListBox) listBox1).DisplayMember = "Name";
    listBox1.SetSelected (newIndex, true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4796109_30354627_12_33
4796109_40028483_38_59
Title: How to move item in listBox up and down? 
----------------------------------------

public void MoveItem (int direction, ListBox listBox) {
    if (listBox.SelectedItem == null || listBox.SelectedIndex < 0)
        return;

    int newIndex = listBox.SelectedIndex + direction;
    if (newIndex < 0 || newIndex >= listBox.Items.Count)
        return;

    object selected = listBox.SelectedItem;
    listBox.Items.Remove (selected);
    listBox.Items.Insert (newIndex, selected);
    listBox.SetSelected (newIndex, true);
}
----------------------------------------

public void MoveItem (int direction, string Selected) {
    if (! Layouts_listBox.Items.Contains (Selected) || Layouts_listBox.Items.IndexOf (Selected) < 0)
        throw new System.Exception ();

    int newIndex = Layouts_listBox.Items.IndexOf (Selected) + direction;
    if (newIndex < 0 || newIndex >= Layouts_listBox.Items.Count)
        throw new System.Exception ();

    object selected = Layouts_listBox.Items [Layouts_listBox.Items.IndexOf (Selected)];
    Layouts_listBox.Items.Remove (selected);
    Layouts_listBox.Items.Insert (newIndex, selected);
    Layouts_listBox.SetSelected (newIndex, true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4796109_39231545_1_27
4796109_40028483_38_59
Title: How to move item in listBox up and down? 
----------------------------------------

public void MoveItem (int direction) {
    if (listBox1.SelectedItem == null || listBox1.SelectedIndex < 0)
        return;

    int newIndex = listBox1.SelectedIndex + direction;
    if (newIndex < 0 || newIndex >= listBox1.Items.Count)
        return;

    UnifyCamera selected = listBox1.SelectedItem as UnifyCamera;
    inputData.Cameras.RemoveAt (listBox1.SelectedIndex);
    inputData.Cameras.Insert (newIndex, selected);
    ((ListBox) listBox1).DataSource = null;
    ((ListBox) listBox1).DataSource = this.inputData.Cameras;
    ((ListBox) listBox1).DisplayMember = "Name";
    listBox1.SetSelected (newIndex, true);
}
----------------------------------------

public void MoveItem (int direction, string Selected) {
    if (! Layouts_listBox.Items.Contains (Selected) || Layouts_listBox.Items.IndexOf (Selected) < 0)
        throw new System.Exception ();

    int newIndex = Layouts_listBox.Items.IndexOf (Selected) + direction;
    if (newIndex < 0 || newIndex >= Layouts_listBox.Items.Count)
        throw new System.Exception ();

    object selected = Layouts_listBox.Items [Layouts_listBox.Items.IndexOf (Selected)];
    Layouts_listBox.Items.Remove (selected);
    Layouts_listBox.Items.Insert (newIndex, selected);
    Layouts_listBox.SetSelected (newIndex, true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4796109_39231545_1_27
4796109_9684966_11_32
Title: How to move item in listBox up and down? 
----------------------------------------

public void MoveItem (int direction) {
    if (listBox1.SelectedItem == null || listBox1.SelectedIndex < 0)
        return;

    int newIndex = listBox1.SelectedIndex + direction;
    if (newIndex < 0 || newIndex >= listBox1.Items.Count)
        return;

    UnifyCamera selected = listBox1.SelectedItem as UnifyCamera;
    inputData.Cameras.RemoveAt (listBox1.SelectedIndex);
    inputData.Cameras.Insert (newIndex, selected);
    ((ListBox) listBox1).DataSource = null;
    ((ListBox) listBox1).DataSource = this.inputData.Cameras;
    ((ListBox) listBox1).DisplayMember = "Name";
    listBox1.SetSelected (newIndex, true);
}
----------------------------------------

public void MoveItem (int direction) {
    if (listBox1.SelectedItem == null || listBox1.SelectedIndex < 0)
        return;

    int newIndex = listBox1.SelectedIndex + direction;
    if (newIndex < 0 || newIndex >= listBox1.Items.Count)
        return;

    object selected = listBox1.SelectedItem;
    listBox1.Items.Remove (selected);
    listBox1.Items.Insert (newIndex, selected);
    listBox1.SetSelected (newIndex, true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4796109_40028483_38_59
4796109_9684966_11_32
Title: How to move item in listBox up and down? 
----------------------------------------

public void MoveItem (int direction, string Selected) {
    if (! Layouts_listBox.Items.Contains (Selected) || Layouts_listBox.Items.IndexOf (Selected) < 0)
        throw new System.Exception ();

    int newIndex = Layouts_listBox.Items.IndexOf (Selected) + direction;
    if (newIndex < 0 || newIndex >= Layouts_listBox.Items.Count)
        throw new System.Exception ();

    object selected = Layouts_listBox.Items [Layouts_listBox.Items.IndexOf (Selected)];
    Layouts_listBox.Items.Remove (selected);
    Layouts_listBox.Items.Insert (newIndex, selected);
    Layouts_listBox.SetSelected (newIndex, true);
}
----------------------------------------

public void MoveItem (int direction) {
    if (listBox1.SelectedItem == null || listBox1.SelectedIndex < 0)
        return;

    int newIndex = listBox1.SelectedIndex + direction;
    if (newIndex < 0 || newIndex >= listBox1.Items.Count)
        return;

    object selected = listBox1.SelectedItem;
    listBox1.Items.Remove (selected);
    listBox1.Items.Insert (newIndex, selected);
    listBox1.SetSelected (newIndex, true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4802533_4802858_2_25
4802533_5748915_2_17
Title: LDAP Manager Attribute 
----------------------------------------

public UserPrincipal GetManager (PrincipalContext ctx, UserPrincipal user) {
    UserPrincipal result = null;
    if (user != null) {
        DirectoryEntry dirEntryForUser = user.GetUnderlyingObject () as DirectoryEntry;
        if (dirEntryForUser != null) {
            if (dirEntryForUser.Properties ["manager"] != null) {
                string managerDN = dirEntryForUser.Properties ["manager"] [0].ToString ();
                result = UserPrincipal.FindByIdentity (ctx, managerDN);
            }
        }
    }
    return result;
}
----------------------------------------

public UserPrincipal GetManager (PrincipalContext ctx, UserPrincipal user) {
    if (user != null) {
        var dirEntryForUser = user.GetUnderlyingObject () as DirectoryEntry;
        if (dirEntryForUser != null) {
            if (dirEntryForUser.Properties ["manager"] != null && dirEntryForUser.Properties ["manager"].Count > 0) {
                string managerDN = dirEntryForUser.Properties ["manager"] [0].ToString ();
                return UserPrincipal.FindByIdentity (ctx, managerDN);
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48049168_48049195_1_15
48049168_48049236_1_17
Title: how can i pass my webform value in webapi controller as a model class using jquery ajax 
----------------------------------------

[HttpPost] public string checkLogin ([FromBody] Login login) {
    getLogin log = new getLogin ();
    Boolean check = log.checkLogin (login);
    if (check == true) {
        return "login done";
    } else {
        return "failed to login";
    }
}
----------------------------------------

[HttpPost] public string checkLogin (string username, string password) {
    Login login = new Login ();
    login.username = username;
    login.password = password;
    getLogin log = new getLogin ();
    Boolean check = log.checkLogin (login);
    if (check == true) {
        return "login done";
    } else {
        return "failed to login";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4804968_25369223_1_37
4804968_4805314_1_20
Title: How can I validate console input as integers? 
----------------------------------------

static double ReadNumber () {
    var buf = new StringBuilder ();
    for (;;) {
        var key = Console.ReadKey (true);
        if (key.Key == ConsoleKey.Enter && buf.Length > 0) {
            Console.WriteLine ();
            return Convert.ToDouble (buf.ToString ());
        } else if (key.Key == ConsoleKey.Backspace && buf.Length > 0) {
            buf.Remove (buf.Length - 1, 1);
            Console.Write ("\b \b");
        } else if (System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator.Contains (key.KeyChar) && buf.ToString ().IndexOf (System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator) == - 1) {
            buf.Append (key.KeyChar);
            Console.Write (key.KeyChar);
        } else if ("-".Contains (key.KeyChar) && buf.ToString ().IndexOf ("-") == - 1 && buf.ToString () == "") {
            buf.Append (key.KeyChar);
            Console.Write (key.KeyChar);
        } else if ("0123456789".Contains (key.KeyChar)) {
            buf.Append (key.KeyChar);
            Console.Write (key.KeyChar);
        } else {
            Console.Beep ();
        }
    }
}
----------------------------------------

static string ReadNumber () {
    var buf = new StringBuilder ();
    for (;;) {
        var key = Console.ReadKey (true);
        if (key.Key == ConsoleKey.Enter && buf.Length > 0) {
            return buf.ToString ();
        } else if (key.Key == ConsoleKey.Backspace && buf.Length > 0) {
            buf.Remove (buf.Length - 1, 1);
            Console.Write ("\b \b");
        } else if ("0123456789.-".Contains (key.KeyChar)) {
            buf.Append (key.KeyChar);
            Console.Write (key.KeyChar);
        } else {
            Console.Beep ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4811229_4811390_1_15
4811229_6642511_1_27
Title: How to clear the text of all textBoxes in the form? 
----------------------------------------

private void ClearTextBoxes () {
    Action < Control.ControlCollection > func = null;
    func = (controls) = > {
        foreach (Control control in controls)
            if (control is TextBox)
                (control as TextBox).Clear ();
            else
                func (control.Controls);

    };
    func (Controls);
}
----------------------------------------

private void ClearTextBoxes (Control control) {
    foreach (Control c in control.Controls) {
        if (c is TextBox) {
            ((TextBox) c).Clear ();
        }
        if (c.HasChildren) {
            ClearTextBoxes (c);
        }
        if (c is CheckBox) {
            ((CheckBox) c).Checked = false;
        }
        if (c is RadioButton) {
            ((RadioButton) c).Checked = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48123425_48123464_1_24
48123425_48123567_1_34
Title: breaking a while loop after one iteration 
----------------------------------------

private void btnCreateClaim_Click (object sender, EventArgs e) {
    Excel.Application oXL;
    Excel._Workbook oWB;
    Excel._Worksheet oSheet;
    oXL = new Excel.Application ();
    oXL.Visible = true;
    oWB = oXL.Application.Workbooks.Open (@"C:\CSAIO4D\testsheet1.xlsx");
    oSheet = oWB.ActiveSheet;
    int inc = 1;
    while (oSheet.Cells [inc, 1].Text != String.Empty) {
        inc ++;
    }
    oSheet.Cells [inc, 1] = txtClientName.Text.ToString ();
    oSheet.Cells [inc, 2] = txtState.Text.ToString ();
    oWB.Save ();
}
----------------------------------------

private void btnCreateClaim_Click (object sender, EventArgs e) {
    Excel.Application oXL;
    Excel._Workbook oWB;
    Excel._Worksheet oSheet;
    oXL = new Excel.Application ();
    oXL.Visible = true;
    oWB = oXL.Application.Workbooks.Open (@"C:\CSAIO4D\testsheet1.xlsx");
    oSheet = oWB.ActiveSheet;
    int inc = FindFirstBlankRow (oSheet);
    oSheet.Cells [inc, 1] = txtClientName.Text.ToString ();
    oSheet.Cells [inc, 2] = txtState.Text.ToString ();
    oSheet.Cells [inc, 3] = txtAlphaPrefix.Text.ToString ();
    oSheet.Cells [inc, 4] = txtInsurance.Text.ToString ();
    oSheet.Cells [inc, 5] = txtStartDate.Text.ToString ();
    oSheet.Cells [inc, 6] = txtEndDate.Text.ToString ();
    oSheet.Cells [inc, 7] = txtUnits.Text.ToString ();
    oSheet.Cells [inc, 8] = txtLOC.Text.ToString ();
    oSheet.Cells [inc, 9] = txtRate.Text.ToString ();
    oSheet.Cells [inc, 10] = txtAmount.Text.ToString ();
    oSheet.Cells [inc, 11] = txtAuth.Text.ToString ();
    oSheet.Cells [inc, 12] = txtBilledDate.Text.ToString ();
    oSheet.Cells [inc, 13] = txtPrimaryDiagnosis.Text.ToString ();
    oSheet.Cells [inc, 14] = txtBillType.Text.ToString ();
    oSheet.Cells [inc, 15] = txtRevenueCode.Text.ToString ();
    oSheet.Cells [inc, 16] = txtHCPCS.Text.ToString ();
    oSheet.Cells [inc, 17] = txtCPT_Code.Text.ToString ();
    oWB.Save ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48133899_48134178_64_79
48133899_48134178_81_103
Title: XML & Lambda - accessing fields that don't implement the IEnumerable interface 
----------------------------------------

public XElement Convert (Employee emp) {
    var attributes = new List < XAttribute > {new XAttribute ("ID", emp.ID)};
    var elements = new List < XElement > {new XElement ("FName", emp.FName), new XElement ("LName", emp.LName), new XElement ("DOB", emp.DOB), new XElement ("Sex", emp.Sex)};
    var workHistory = Convert (emp.WorkHistory);
    if (workHistory != null) {
        elements.Add (workHistory);
    }
    return new XElement ("Employee", attributes, elements);
}
----------------------------------------

private XElement Convert (WorkHistory hist) {
    if (hist == null) {
        return null;
    }
    var elements = new List < XElement > ();
    if (hist.Complaints != null && hist.Complaints.Any ()) {
        var complaints = new XElement ("Complaints", hist.Complaints.Select (comp = > new XElement ("Complaint", comp)));
        elements.Add (complaints);
    }
    if (hist.Commendations != null && hist.Commendations.Any ()) {
        var commendations = new XElement ("Commendations", hist.Commendations.Select (comm = > new XElement ("Commendation", comm)));
        elements.Add (commendations);
    }
    return elements.Any () ? new XElement ("WorkHistory", elements) : null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48197119_48197356_1_31
48197119_48200800_1_13
Title: C# Dice Roll Probablity 
----------------------------------------

public static void Main () {
    Random numGen = new Random ();
    int succeses = 0;
    const int TRIES = 10000;
    for (int i = 0; i < TRIES; i ++) {
        bool allSixes = true;
        const int DICE_PER_TRY = 2;
        for (int j = 0; j < DICE_PER_TRY; j ++) {
            if (numGen.Next (1, 7) == 6) {
            } else {
                allSixes = false;
                break;
            }
        }
        if (allSixes)
            succeses ++;

    }
    var triesPerSuccess = TRIES / succeses;
    Console.WriteLine (triesPerSuccess);
    Console.ReadKey ();
}
----------------------------------------

public static void Main (string [] args) {
    Random numGen = new Random ();
    int success = 0, successiveAttempts = 0, tries = 10000;
    for (int x = 0; x < tries; x ++) {
        successiveAttempts = (numGen.Next (1, 7) == 6) ? successiveAttempts + 1 : 0;
        if (successiveAttempts > 1)
            success ++;

    }
    Console.WriteLine ("{0} successive roles of 6 in {1} tries.", success, tries);
    Console.WriteLine ("Ratio is {0}", tries / success);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4823904_5024276_1_18
4823904_5024858_1_23
Title: dropdown in mvc3 edit form 
----------------------------------------

[HttpPost] public ActionResult Create (FormCollection form) {
    MVC.Models.MVCOrder ord = Models.MVCOrder.Instance.CreateBlankOrder ();
    if (TryUpdateModel < MVC.Models.MVCOrder > (ord, form.ToValueProvider ())) {
        ord.Product = Models.MVCProduct.Instance.ProductList.Find (p = > p.Id == int.Parse (form.GetValue ("ProductList").AttemptedValue));
        ord.Attribute = Models.MVCAttribute.Instance.AttributeList.Find (a = > a.Id == int.Parse (form.GetValue ("attributeId").AttemptedValue));
        UpdateModel (ord);
        return RedirectToAction ("Index");
    } else {
        return View (ord);
    }
}
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48302880_48303083_1_25
48302880_48303427_1_16
Title: Validation of input wpf datagrid 
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0)
            myInt = int.Parse ((String) value);

    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt;
    if (! int.TryParse (System.Convert.ToString (value), out myInt))
        return new ValidationResult (false, "Illegal characters");

    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48376413_48377983_13_25
48376413_48378113_3_16
Title: Transform/Manipulate Value Before Displaying in GridViewColumn of ListView control (WPF) 
----------------------------------------

public object Convert (object value, Type targetType, object parameter, CultureInfo culture) {
    if (value != null) {
        System.DateTime dateTime = new DateTime (1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds (System.Convert.ToDouble (value)).ToLocalTime ();
        return dateTime;
    } else {
        return String.Empty;
    }
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) {
    try {
        double unixTimeStamp = System.Convert.ToDouble (value);
        System.DateTime result = new DateTime (1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
        result = result.AddSeconds (unixTimeStamp).ToLocalTime ();
        return result;
    }
    catch (Exception) {
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48390080_48391127_1_58
48390080_48391776_1_75
Title: SQL EXCEPTION : conversion failed when converting the nvarchar value '[anyvalue]' to data type int 
----------------------------------------

private void button3_Click (object sender, EventArgs e) {
    try {
        if (string.IsNullOrEmpty (comboBox2.Text) || string.IsNullOrEmpty (textBox8.Text)) {
            MessageBox.Show ("Please Fill The Required Fields To Find Data !!");
        } else {
            using (SqlConnection conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["YourConnectionString"].ConnectionString))
            {
                conn.Open ();
                using (SqlCommand cmd = new SqlCommand ("bookdat_Search", conn))
                {
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    switch (comboBox2.SelectedIndex) {
                        case 1 :
                            cmd.Parameters.Add ("@title", SqlDbType.VarChar, 50).Value = textBox8.Text;
                            break;
                        case 2 :
                            cmd.Parameters.Add ("@author", SqlDbType.VarChar, 50).Value = textBox8.Text;
                            break;
                        case 3 :
                            cmd.Parameters.Add ("@publication", SqlDbType.VarChar, 50).Value = textBox8.Text;
                            break;
                        case 4 :
                            cmd.Parameters.Add ("@accno", SqlDbType.Int).Value = int.Parse (textBox8.Text);
                            break;
                        case 5 :
                            cmd.Parameters.Add ("@price", SqlDbType.Int).Value = int.Parse (textBox8.Text);
                            break;
                        case 6 :
                            cmd.Parameters.Add ("@quantity", SqlDbType.Int).Value = int.Parse (textBox8.Text);
                            break;
                    }
                    using (SqlDataReader reader = cmd.ExecuteReader ())
                    {
                        if (reader.Read ()) {
                            MessageBox.Show ("Record Found!!");
                        } else {
                            MessageBox.Show ("No Record Found!!");
                        }
                    }}}}
    }
    catch (Exception ex) {
        MessageBox.Show (ex.ToString ());
    }
}
----------------------------------------

private void button3_Click (object sender, EventArgs e) {
    if (! string.IsNullOrEmpty (comboBox2.Text) && ! string.IsNullOrEmpty (textBox8.Text)) {
        StringBuilder sb = new StringBuilder ();
        sb.Append ("SELECT * FROM bookdat WHERE");
        SqlCommand cmd = new SqlCommand (con);
        if (comboBox2.SelectedIndex == 0) {
            cmd.Parameters.AddWithValue ("@fdata", textBox8.Text);
            sb.Append (" title=@fdata ");
        } else if (comboBox2.SelectedIndex == 1) {
            cmd.Parameters.AddWithValue ("@fdata", textBox8.Text);
            sb.Append (" author=@fdata ");
        } else if (comboBox2.SelectedIndex == 2) {
            cmd.Parameters.AddWithValue ("@fdata", textBox8.Text);
            sb.Append (" publication=@fdata ");
        } else if (comboBox2.SelectedIndex == 3) {
            cmd.Parameters.AddWithValue ("@fdata", textBox8.Text);
            sb.Append (" accno=@fdata ");
        } else if (comboBox2.SelectedIndex == 4) {
            cmd.Parameters.AddWithValue ("@fdata", int.Parse (textBox8.Text));
            sb.Append (" price=@fdata ");
        } else if (comboBox2.SelectedIndex == 5) {
            cmd.Parameters.AddWithValue ("@fdata", int.Parse (textBox8.Text));
            sb.Append (" quantity=@fdata ");
        }
        cmd.CommandText = sb.ToString ();
        da = new SqlDataAdapter (cmd);
        try {
            DataTable dt = new DataTable ();
            con.Open ();
            da.Fill (dt);
            cmd.ExecuteNonQuery ();
            dataGridView2.DataSource = dt;
            con.Close ();
            if (dt.Rows.Count > 0) {
                MessageBox.Show ("Record Found!!");
                comboBox2.Text = "";
                textBox8.Text = "";
            } else {
                MessageBox.Show ("No Records Found!!");
            }
        }
        catch (Exception ex) {
            MessageBox.Show (ex.ToString ());
        }
    } else {
        MessageBox.Show ("Please Fill The Required Fields To Find Data !!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48401154_48401198_5_19
48401154_48401390_1_19
Title: High CPU usage in console application 
----------------------------------------

static void Main () {
    while (true) {
        Console.WriteLine ("Enter input:");
        string line = Console.ReadLine ();
        if (line == "exit") {
            break;
        }
        Console.Write ("You typed ");
        Console.Write (line.Length);
        Console.WriteLine (" character(s)");
    }
}
----------------------------------------

static void Main (string [] args) {
    Console.TreatControlCAsInput = true;
    while (true) {
        Console.WriteLine ("Use CTRL+C to exit");
        var input = Console.ReadKey ();
        if (input.Key == ConsoleKey.C && input.Modifiers == ConsoleModifiers.Control) {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4842160_16435431_1_13
4842160_4842576_1_18
Title: Auto-width of ComboBox's content 
----------------------------------------

private int DropDownWidth (ComboBox myCombo) {
    int maxWidth = 0, temp = 0;
    foreach (var obj in myCombo.Items) {
        temp = TextRenderer.MeasureText (myCombo.GetItemText (obj), myCombo.Font).Width;
        if (temp > maxWidth) {
            maxWidth = temp;
        }
    }
    return maxWidth + SystemInformation.VerticalScrollBarWidth;
}
----------------------------------------

int DropDownWidth (ComboBox myCombo) {
    int maxWidth = 0;
    int temp = 0;
    Label label1 = new Label ();
    foreach (var obj in myCombo.Items) {
        label1.Text = obj.ToString ();
        temp = label1.PreferredWidth;
        if (temp > maxWidth) {
            maxWidth = temp;
        }
    }
    label1.Dispose ();
    return maxWidth;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48436748_48437140_1_51
48436748_48437368_1_56
Title: How to deal with this loop error?[c#] 
----------------------------------------

static void Main (string [] args) {
    bool quit = false;
    int guesses = 5;
    while (! quit) {
        Console.WriteLine ("You are now playing 'Guess a Number'! The number is going to draw randomly from the range of 1 - 10. Enter the number you think the console drew and you have five chances to guess! Good luck!");
        Random random = new Random ();
        bool guessingNumber = true;
        int randomNumber = random.Next (1, 10);
        string playerGuess = Console.ReadLine ();
        List < int > num = new List < int > ();
        int oneNum;
        if (int.TryParse (playerGuess, out oneNum)) {
            num.Add (oneNum);
        }
        while (guessingNumber) {
            if (oneNum < randomNumber) {
                guesses --;
                Console.WriteLine ("The number you entered is smaller than the random number, you have {0} chances left.", guesses);
                guessingNumber = false;
                break;
            }
            if (oneNum > randomNumber) {
                guesses --;
                Console.WriteLine ("The number you entered is larger than the random number, you have {0} chances left.", guesses);
                guessingNumber = false;
            }
            if (oneNum == randomNumber) {
                Console.WriteLine ("Congratulations! You have guessed the right number!");
                guessingNumber = false;
            }
            if (guesses == 0) {
                Console.WriteLine ("Sorry, you have no more guesses.");
                guessingNumber = false;
            }
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    bool quit = false;
    Random random = new Random ();
    int randomNumber = random.Next (1, 10);
    Console.WriteLine ("You are now playing 'Guess a Number'! The number is going to draw randomly from the range of 1 - 10. Enter the number you think the console drew and you have five chances to guess! Good luck!");
    List < int > num = new List < int > ();
    int guesses = 5;
    while (! quit) {
        string playerGuess = Console.ReadLine ();
        int oneNum;
        if (int.TryParse (playerGuess, out oneNum)) {
            num.Add (oneNum);
        }
        var lastNum = num.Last ();
        if (guesses == 0) {
            Console.WriteLine ("Sorry, you have no more guesses.");
            break;
        }
        if (lastNum < randomNumber) {
            guesses --;
            Console.WriteLine ("The number you entered is smaller than the random number, you have {0} chances left.", guesses);
        }
        if (lastNum > randomNumber) {
            guesses --;
            Console.WriteLine ("The number you entered is bigger than the random number, you have {0} chances left.", guesses);
        }
        if (lastNum == randomNumber) {
            quit = true;
            Console.WriteLine ("Congratulations! You have guessed the right number!");
        }
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48466181_48466246_1_14
48466181_48466380_1_14
Title: C# Cannot convert `char' expression to type `string' 
----------------------------------------

public static bool Narcissistic (int value) {
    int zero = (int) '0';
    string valueString = value.ToString ();
    int total = 0;
    foreach (char c in valueString) {
        int digit = ((int) c - zero);
        total += digit * valueString.Length;
    }
    return total == value;
}
----------------------------------------

public static bool Narcissistic (int value) {
    if (value < 0)
        return false;

    int sum = 0;
    int count = 0;
    while (value > 0) {
        sum += value % 10;
        value /= 10;
        count ++;
    }
    return value == (sum * count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48483385_48483428_1_35
48483385_48483464_5_33
Title: Incrementing a character in a foreach loop 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Welcome to the Caesarian Cipher program");
    Console.WriteLine ("Please, enter a word.");
    string word = Console.ReadLine ();
    char [] letters = word.ToCharArray ();
    int shift = 3;
    for (int i = 0; i < letters.Length; i ++) {
        char letter = word [i];
        letter = (char) (letter + shift);
        if (letter > 'z') {
            letter = (char) (letter - 26);
        } else if (letter < 'a') {
            letter = (char) (letter + 26);
        }
        Console.WriteLine (letter);
    }
}
----------------------------------------

public static void Main (string [] args) {
    Console.WriteLine ("Welcome to the Caesarian Cipher program");
    Console.WriteLine ("Please, enter a word.");
    string word = Console.ReadLine ();
    char [] letters = word.ToCharArray ();
    for (int i = 0; i < letters.Length; i ++) {
        var charAsInt = (int) letters [i];
        var newChar = (char) (charAsInt + 3);
        Console.Write (newChar);
    }
    Console.WriteLine ();
    foreach (char letter in letters) {
        var charAsInt = (int) letter;
        var newChar = (char) (charAsInt + 3);
        Console.Write (newChar);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48515642_48516232_7_27
48515642_48517111_3_52
Title: Identify common Lists in List and return Distinct Lists in List 
----------------------------------------

public static void Main () {
    var stringLists = new List < List < string > > {new List < string > {"a", "b", "c"}, new List < string > {"e", "b", "c"}, new List < string > {"a", "b", "c"}};
    var prt = stringLists.Select (l = > string.Join (",", l)).Distinct ().Select (l = > l.Split (',').ToList ());
    foreach (var p in prt) {
        foreach (var c in p)
            Console.WriteLine (c);

        Console.WriteLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    List < string > [] stringLists = new List < string > [3] {new List < string > () {"a", "b", "c"}, new List < string > () {"e", "b", "c"}, new List < string > () {"a", "b", "c"}};
    List < List < string > > prt = new List < List < string > > ();
    for (int i = 0; i < 3; i ++) {
        bool isDifferentFromAllOthers = true;
        for (int j = 0; j < i; j ++) {
            bool isSameAsThisItem = true;
            for (int item = 0; item < 3; item ++) {
                if (stringLists [i] [item] != stringLists [j] [item]) {
                    isSameAsThisItem = false;
                    break;
                }
            }
            if (isSameAsThisItem) {
                isDifferentFromAllOthers = false;
                break;
            }
        }
        if (isDifferentFromAllOthers) {
            prt.Add (stringLists [i]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48520066_48520563_1_10
48520066_48520567_1_22
Title: How can I make blocks in different colors behind the text in C#? 
----------------------------------------

static void Main () {
    ConsoleColor savedBackground = Console.BackgroundColor;
    ConsoleColor savedForeground = Console.ForegroundColor;
    Console.ForegroundColor = ConsoleColor.Black;
    Console.BackgroundColor = ConsoleColor.Blue;
    Console.Write ("Blue");
    Console.BackgroundColor = savedBackground;
    Console.ForegroundColor = savedForeground;
}
----------------------------------------

static void Main () {
    var leftPadding = (Console.WindowWidth - "RedGreenBlue".Length) / 2;
    Console.SetCursorPosition (leftPadding, Console.CursorTop);
    WriteForeColor ("Red", ConsoleColor.Red);
    WriteForeColor ("Green", ConsoleColor.Green);
    WriteForeColor ("Blue\n", ConsoleColor.Blue);
    Console.Write (new string (' ', leftPadding));
    WriteColor ("Red", ConsoleColor.Black, ConsoleColor.Red);
    WriteBackColor ("Green", ConsoleColor.Green);
    WriteBackColor ("Blue\n", ConsoleColor.Blue);
    Console.ResetColor ();
    Console.Write ("\nPress any key to exit...");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4853010_4853059_1_16
4853010_4853110_3_20
Title: How to implement re-try n times in case of exception in C#? 
----------------------------------------

static T TryNTimes < T > (Func < T > func, int times) {
    while (times > 0) {
        try {
            return func ();
        }
        catch (Exception e) {
            if (-- times <= 0)
                throw;

        }
    }
}
----------------------------------------

static T Retry < T, TException > (Func < T > thingToTry, int timesToRetry) where TException : Exception {
    for (int i = 1; i < timesToRetry; i ++) {
        try {
            return thingToTry ();
        }
        catch (TException) {
        }
    }
    return thingToTry ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48532375_48532526_1_29
48532375_48532572_1_43
Title: Check if username exist in asp.net using stored procedure and adding values to Registration.aspx 
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        Guid newGUID = Guid.NewGuid ();
        SqlConnection conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString);
        SqlCommand cmd = new SqlCommand ("spCheckUsernameForAnswer", conn);
        cmd.CommandType = CommandType.StoredProcedure;
        SqlParameter parausername = new SqlParameter ("@username", TextBoxUN.Text);
        cmd.Parameters.Add (parausername);
        conn.Open ();
        var userexsist = (bool) cmd.ExecuteScalar ();
        if (userexsist) {
            Label1.Text = "Username found";
            conn.close ();
        } else {
            Label1.Text = "not found";
            string insertQuery = "insert into [Users] (user_id, first_name, last_name, email, username, password) values (@user_id, @first_name, @last_name, @email, @username, @password)";
            SqlCommand com = new SqlCommand (insertQuery, conn);
            com.Parameters.AddWithValue ("@user_id", newGUID.ToString ());
            com.Parameters.AddWithValue ("@first_name", TextBoxFname.Text);
            com.Parameters.AddWithValue ("@last_name", TextBoxLname.Text);
            com.Parameters.AddWithValue ("@email", TextBoxEmail.Text);
            com.Parameters.AddWithValue ("@username", TextBoxUN.Text);
            com.Parameters.AddWithValue ("@password", TextBoxPass.Text);
            com.ExecuteNonQuery ();
            Response.Write ("Registration successful");
            conn.Close ();
        }
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48575645_48575696_1_25
48575645_48575704_1_36
Title: .NET C# Unreachable code detected 
----------------------------------------

public string Insert_Data (string NewCol1, string NewCol2, string NewCol3, string NewCol4, double NewCol5) {
    try {
        if (Count > 0) {
            return "Record Already Exists.";
        } else {
            return "Inserted Sucessfully";
        }
    }
    catch {
        return "Error occured";
    }
    finally {
        con.Close ();
    }
}
----------------------------------------

public string Insert_Data (string NewCol1, string NewCol2, string NewCol3, string NewCol4, double NewCol5) {
    try {
        con.Open ();
        string CheckString = @"SELECT COUNT(*) FROM my_table  " + "WHERE col1= '" + NewCol1 + "' " + "and col2= '" + NewCol2 + "' " + "and col3= '" + NewCol3 + "' " + "and col4= '" + NewCol4 + "' ";
        cmd = new SqlCommand (CheckString, con);
        int Count = (int) cmd.ExecuteScalar ();
        if (Count > 0) {
            return "Record Already Exists.";
        } else {
            cmd = new SqlCommand ("INSERT INTO my_table (col1,col2,col3,col4,col5,getupdateDate) " + " VALUES('" + NewCol1 + "','" + NewCol2 + "','" + NewCol3 + "','" + NewCol4 + "'," + NewCol5 + ", GETDATE())", con);
            int temp = cmd.ExecuteNonQuery ();
            return "Inserted Sucessfully";
        }
    }
    finally {
        con.Close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48577357_48577612_1_18
48577357_48577654_1_20
Title: Creating DataTable from Text File and splitting 
----------------------------------------

public DataTable DTforReport () {
    DataTable dt = new DataTable ();
    string [] lines = File.ReadAllLines ("C:\\Users\\abc\\Desktop\\abc.txt");
    DataRow dr = dt.NewRow ();
    for (int i = 0; i < lines.Length; i ++) {
        DataColumn col = new DataColumn (lines [i].Split (':') [0]);
        col.DataType = Type.GetType ("System.String");
        dt.Columns.Add (col);
        var segment = lines [i].Split (':') [1];
        dr [i] = segment;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

public DataTable DTforReport () {
    DataTable testTable = new DataTable ("Test");
    testTable.Columns.Add ("OrderNo");
    testTable.Columns.Add ("OrderQuantity");
    testTable.Columns.Add ("BarcodeQR");
    string [] lines = File.ReadAllLines ("C:\\Users\\abc\\Desktop\\abc.txt");
    foreach (var line in lines) {
        DataRow dRow = testTable.NewRow ();
        var segments = line.Split (';');
        for (int i = 0; i < segments.Length; i ++) {
            var colValues = segments [i].Split (':');
            dRow [i] = colValues [1];
        }
        testTable.Rows.Add (dRow);
    }
    return testTable;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48614426_48614582_1_36
48614426_48614912_1_11
Title: Display sum of 10 input numbers but take out highest and lowest number 
----------------------------------------

static void Main (string [] args) {
    int number, sum = 0, n;
    List < int > inputNumbers = new List < int > ();
    for (number = 0; number < 10; number ++) {
        inputNumbers.Add (Convert.ToInt32 (Console.ReadLine ()));
    }
    var maximum = inputNumbers.Max ();
    var mimimum = inputNumbers.Min ();
    foreach (var item in inputNumbers) {
        if (item == maximum) {
            inputNumbers.Remove (item);
            break;
        }
    }
    foreach (var item in inputNumbers) {
        if (item == mimimum) {
            inputNumbers.Remove (item);
            break;
        }
    }
    Console.WriteLine ("Sum: " + inputNumbers.Sum ());
    Console.ReadKey ();
}
----------------------------------------

public static void Main (string [] args) {
    var list = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        Console.WriteLine ("Enter number " + i);
        int num = Convert.ToInt32 (Console.ReadLine ());
        list.Add (num);
    }
    Sum (list);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4862003_4862047_1_11
4862003_4862081_1_11
Title: How to obtain a better approach in reading file? 
----------------------------------------

byte [] GetPartialPackage (string filePath, long offset, int count) {
    using (var reader = new FileStream (filePath, FileMode.Open, FileAccess.Read, FileShare.Read))
    {
        reader.Seek (offset, SeekOrigin.Begin);
        int avaliableCount = Math.Min (count, (int) (reader.Length - offset));
        byte [] tempData = new byte [avaliableCount];
        int num = reader.Read (tempData, 0, avaliableCount);
        return tempData;
    }}
----------------------------------------

byte [] GetPartialPackage (string filePath, long offset, int count) {
    using (var reader = new FileStream (filePath, FileMode.Open, FileAccess.Read, FileShare.Read))
    {
        reader.Seek (offset, SeekOrigin.Begin);
        int actualCount = Math.Min (count, reader.Length - offset);
        byte [] tempData = new byte [actualCount];
        reader.Read (tempData, 0, actualCount);
        return tempdata;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4871881_4871938_11_26
4871881_4872131_1_15
Title: Determining the number of bytes used by a variable 
----------------------------------------

private long getSize (byte [] [] arr) {
    var hashSet = new HashSet < byte [] > ();
    var size = 0;
    foreach (var innerArray in arr) {
        if (innerArray != null)
            hashSet.Add (innerArray);

    }
    foreach (var array in hashSet) {
        size += array.Length * sizeof (byte);
    }
    return size;
}
----------------------------------------

private long getSize (byte [] [] arr) {
    Dictionary < byte [], bool > lookup = new Dictionary < byte [], bool > ();
    long size = 0;
    foreach (byte [] innerArray in arr) {
        if (innerArray == null || lookup.ContainsKey (innerArray))
            continue;

        lookup.Add (innerArray, true);
        size += Buffer.ByteLength (innerArray);
    }
    return size;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48815761_48815911_14_29
48815761_48815970_1_19
Title: Matrix Elements Sum C# 
----------------------------------------

public static int TestMethod (int [] [] matrix) {
    int sum = 0;
    int [] mask = Enumerable.Repeat (1, 4).ToArray ();
    for (int i = 0; i < 3; i ++) {
        for (int j = 0; j < 4; j ++) {
            if (matrix [i] [j] == 0) {
                mask [j] = 0;
            }
            sum += matrix [i] [j] * mask [j];
        }
    }
    return sum;
}
----------------------------------------

public static int TestMethod (int [] [] matrix) {
    int sum = 0;
    for (int column = 0; column < 4; column ++) {
        for (int row = 0; row < 3; row ++) {
            if (matrix [row] [column] != 0) {
                sum += matrix [row] [column];
            } else {
                break;
            }
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48815761_48815911_14_29
48815761_48815993_1_14
Title: Matrix Elements Sum C# 
----------------------------------------

public static int TestMethod (int [] [] matrix) {
    int sum = 0;
    int [] mask = Enumerable.Repeat (1, 4).ToArray ();
    for (int i = 0; i < 3; i ++) {
        for (int j = 0; j < 4; j ++) {
            if (matrix [i] [j] == 0) {
                mask [j] = 0;
            }
            sum += matrix [i] [j] * mask [j];
        }
    }
    return sum;
}
----------------------------------------

public static int TestMethod (int [] [] Jagged) {
    var sum = 0;
    for (int i = 0; i < Jagged.Length; i ++) {
        for (int j = 0; j < Jagged [i].Length; j ++) {
            if (i == 0 || Jagged [i - 1].Length > j || Jagged [i - 1] [j] != 0) {
                sum += Jagged [i] [j];
            }
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48815761_48815970_1_19
48815761_48815993_1_14
Title: Matrix Elements Sum C# 
----------------------------------------

public static int TestMethod (int [] [] matrix) {
    int sum = 0;
    for (int column = 0; column < 4; column ++) {
        for (int row = 0; row < 3; row ++) {
            if (matrix [row] [column] != 0) {
                sum += matrix [row] [column];
            } else {
                break;
            }
        }
    }
    return sum;
}
----------------------------------------

public static int TestMethod (int [] [] Jagged) {
    var sum = 0;
    for (int i = 0; i < Jagged.Length; i ++) {
        for (int j = 0; j < Jagged [i].Length; j ++) {
            if (i == 0 || Jagged [i - 1].Length > j || Jagged [i - 1] [j] != 0) {
                sum += Jagged [i] [j];
            }
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48842499_48842803_12_26
48842499_48843197_65_76
Title: "HashSet<T>.CreateSetComparer() cannot specify IEqalityComparer<T> is there an alternative?" 
----------------------------------------

public int GetHashCode (HashSet < T > set) {
    int hashCode = 0;
    if (set != null) {
        foreach (T t in set) {
            hashCode = hashCode ^ (set.Comparer.GetHashCode (t) & 0x7FFFFFFF);
        }
    }
    return hashCode;
}
----------------------------------------

public int GetHashCode (HashSet < T > obj) {
    int hashCode = 0;
    if (obj != null) {
        foreach (T t in obj) {
            hashCode = hashCode ^ (m_comparer.GetHashCode (t) & 0x7FFFFFFF);
        }
    }
    return hashCode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48865579_48865717_11_60
48865579_48865886_1_58
Title: How to add <= or >= to a int.Parse 
----------------------------------------

static void Main (string [] args) {
    Console.Write ("Write a number between 0-9: ");
    int number = int.Parse (Console.ReadLine ());
    if (number == 0) {
        Console.WriteLine ("Zero");
    } else if (number == 1) {
        Console.WriteLine ("One");
    } else if (number == 2) {
        Console.WriteLine ("Two");
    } else if (number == 3) {
        Console.WriteLine ("Three");
    } else if (number == 4) {
        Console.WriteLine ("Four");
    } else if (number == 5) {
        Console.WriteLine ("Five");
    } else if (number == 6) {
        Console.WriteLine ("Six");
    } else if (number == 7) {
        Console.WriteLine ("Seven");
    } else if (number == 8) {
        Console.WriteLine ("Eight");
    } else if (number == 9) {
        Console.WriteLine ("Nine");
    } else {
        Console.Write ("That was an invalid statement.");
    }
}
----------------------------------------

static void Main (string [] args) {
    string x = Console.ReadLine ();
    try {
        if (int.Parse (x) == 0) {
            Console.WriteLine ("Zero");
        } else if (int.Parse (x) == 1) {
            Console.WriteLine ("One");
        } else if (int.Parse (x) == 2) {
            Console.WriteLine ("Two");
        } else if (int.Parse (x) == 3) {
            Console.WriteLine ("Three");
        } else if (int.Parse (x) == 4) {
            Console.WriteLine ("Four");
        } else if (int.Parse (x) == 5) {
            Console.WriteLine ("Five");
        } else if (int.Parse (x) == 6) {
            Console.WriteLine ("Six");
        } else if (int.Parse (x) == 7) {
            Console.WriteLine ("Seven");
        } else if (int.Parse (x) == 8) {
            Console.WriteLine ("Eight");
        } else if (int.Parse (x) == 9) {
            Console.WriteLine ("Nine");
        }
    }
    catch {
        Console.WriteLine ("That was an invalid statement");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48897208_48902140_3_15
48897208_48913869_4_16
Title: Custom API ValidationAttribute for class property 
----------------------------------------

protected override ValidationResult IsValid (object value, ValidationContext validationContext) {
    var isValid = true;
    var pair = value as TextPair;
    if (pair != null && pair.Value != null) {
        var pairValue = pair.Value;
        isValid = pairValue.Length < MaximumLength && pairValue.Length > MinimumLength;
    }
    return IsValid ? ValidationResult.Success : new ValidationResult (ErrorMessage);
}
----------------------------------------

public override Boolean IsValid (object value) {
    Boolean isValid = true;
    var list = value as List < TextPair >;
    if (list != null && list.Count > 0)
        foreach (var item in list) {
            if (item.Value.Length > MaximumLength)
                isValid = false;

        }

    return isValid;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49043268_49043328_1_11
49043268_49043342_1_11
Title: static LIST of class returning same value 
----------------------------------------

public string GetAllStrings () {
    string aFullString = "";
    int cnt = 0;
    while (cnt < aClass.Count) {
        aFullString += aClass [cnt].something;
        cnt ++;
    }
    return aFullString;
}
----------------------------------------

public string GetAllStrings () {
    string aFullString = "";
    int cnt = 0;
    while (cnt < aClass.Count) {
        aFullString = aClass [cnt].something;
        cnt ++;
    }
    return aFullString;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4904480_24267213_11_20
4904480_4904509_12_22
Title: "How can I use a dynamic settings.Blah instead of AppSettings[""blah""]?" 
----------------------------------------

public override bool TryGetMember (GetMemberBinder binder, out object result) {
    var setting = ConfigurationManager.AppSettings [binder.Name];
    if (setting != null) {
        result = Convert.ChangeType (setting, typeof (T));
        return true;
    }
    result = null;
    return false;
}
----------------------------------------

public override bool TryGetMember (GetMemberBinder binder, out object result) {
    var setting = ConfigurationManager.AppSettings [binder.Name];
    if (setting != null) {
        result = setting.ToString ();
        return true;
    }
    result = null;
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4906725_39796210_16_46
4906725_42572188_8_29
Title: Largest and smallest number in an array 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the size of the array");
    int x = Convert.ToInt32 (Console.ReadLine ());
    int [] arr = new int [x];
    Console.WriteLine ("Enter the elements of the array");
    for (int i = 0; i < x; i ++) {
        arr [i] = Convert.ToInt32 (Console.ReadLine ());
    }
    int smallest = arr [0];
    int Largest = arr [0];
    for (int i = 0; i < x; i ++) {
        if (smallest > arr [i]) {
            smallest = arr [i];
        }
    }
    for (int i = 0; i < x; i ++) {
        if (Largest < arr [i]) {
            Largest = arr [i];
        }
    }
    Console.WriteLine ("The greater No in the array:" + Largest);
    Console.WriteLine ("The smallest No in the array:" + smallest);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    int [] array = new int [10];
    Console.WriteLine ("enter the array elements to b sorted");
    for (int i = 0; i < 10; i ++) {
        array [i] = Convert.ToInt32 (Console.ReadLine ());
    }
    int smallest = array [0];
    foreach (int i in array) {
        if (i < smallest) {
            smallest = i;
        }
    }
    int largest = array [9];
    foreach (int i in array) {
        if (i > largest) {
            largest = i;
        }
    }
    Console.WriteLine ("the smallest no is {0}", smallest);
    Console.WriteLine ("the largest no is {0}", largest);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4906725_39796210_16_46
4906725_8227496_8_28
Title: Largest and smallest number in an array 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the size of the array");
    int x = Convert.ToInt32 (Console.ReadLine ());
    int [] arr = new int [x];
    Console.WriteLine ("Enter the elements of the array");
    for (int i = 0; i < x; i ++) {
        arr [i] = Convert.ToInt32 (Console.ReadLine ());
    }
    int smallest = arr [0];
    int Largest = arr [0];
    for (int i = 0; i < x; i ++) {
        if (smallest > arr [i]) {
            smallest = arr [i];
        }
    }
    for (int i = 0; i < x; i ++) {
        if (Largest < arr [i]) {
            Largest = arr [i];
        }
    }
    Console.WriteLine ("The greater No in the array:" + Largest);
    Console.WriteLine ("The smallest No in the array:" + smallest);
    Console.ReadLine ();
}
----------------------------------------

public static void Main (String [] args) {
    Console.WriteLine ("enter the number of elements");
    int i;
    i = Convert.ToInt32 (Console.ReadLine ());
    int [] abc = new int [i];
    for (int size = - 1; size < i; size ++) {
        Console.WriteLine ("enter the elements");
        abc [size] = Convert.ToInt32 (Console.ReadLine ());
    }
    int max = abc.Max ();
    int min = abc.Min ();
    Console.WriteLine ("the m", max);
    Console.WriteLine ("the mi", min);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4906725_42572188_8_29
4906725_8227496_8_28
Title: Largest and smallest number in an array 
----------------------------------------

static void Main (string [] args) {
    int [] array = new int [10];
    Console.WriteLine ("enter the array elements to b sorted");
    for (int i = 0; i < 10; i ++) {
        array [i] = Convert.ToInt32 (Console.ReadLine ());
    }
    int smallest = array [0];
    foreach (int i in array) {
        if (i < smallest) {
            smallest = i;
        }
    }
    int largest = array [9];
    foreach (int i in array) {
        if (i > largest) {
            largest = i;
        }
    }
    Console.WriteLine ("the smallest no is {0}", smallest);
    Console.WriteLine ("the largest no is {0}", largest);
    Console.Read ();
}
----------------------------------------

public static void Main (String [] args) {
    Console.WriteLine ("enter the number of elements");
    int i;
    i = Convert.ToInt32 (Console.ReadLine ());
    int [] abc = new int [i];
    for (int size = - 1; size < i; size ++) {
        Console.WriteLine ("enter the elements");
        abc [size] = Convert.ToInt32 (Console.ReadLine ());
    }
    int max = abc.Max ();
    int min = abc.Min ();
    Console.WriteLine ("the m", max);
    Console.WriteLine ("the mi", min);
    Console.Read ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49080963_49081145_10_22
49080963_49081280_7_26
Title: calculate matrix east west diagonal in C# 
----------------------------------------

public static void Main (string [] args) {
    var n = 5;
    var result = Enumerable.Range (0, n * n).GroupBy (k = > k / n).Select (g = > g.Select (k = > (k % n == (n - 1 - k / n)) ? k % n + 1 : 0).ToArray ()).ToArray ();
    foreach (var r in result) {
        foreach (var a in r) {
            Console.Write (" {0}", a);
        }
        Console.WriteLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    int [,] arr = new int [5, 5];
    for (int i = 0; i < 5; i ++) {
        for (int j = 0; j < 5; j ++) {
            if (i + j == 4) {
                arr [i, j] = j + 1;
            } else {
                arr [i, j] = 0;
            }
            Console.Write (arr [i, j] + " ");
        }
        Console.WriteLine ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49101170_49101367_3_20
49101170_49101376_6_45
Title: Splitting each element of a string array into a new array in c# 
----------------------------------------

static void Main (string [] args) {
    string [] txtImport = new string [] {"TS TS TS TS TS 3S 3S 3S 3S 3S", "KH KH KH KH KH AH AH AH AH AH", "8C 8C 8C 8C 8C 7D 7D 7D 7D 7D"};
    string [] playerOne = new string [999];
    string [] playerTwo = new string [999];
    int i = 0;
    foreach (var item in txtImport) {
        playerOne [i] = item.Substring (0, 14);
        playerTwo [i] = item.Substring (15, 14);
        i ++;
    }
}
----------------------------------------

public static void Main (string [] args) {
    string [] hands = new [] {"8C TS KC 9H 4S 7D 2S 5D 3S AC", "2C TS KC 9H 4S 8D 2S 5D 3S AC", "3C TS KC 9H 4S 9D 2S 5D 3S AC", "4C TS KC 9H 4S 6D 2S 5D 3S AC", "5C TS KC 9H 4S 5D 2S 5D 3S AC", "6C TS KC 9H 4S 4D 2S 5D 3S AC", "9C TS KC 9H 4S 3D 2S 5D 3S AC", "7C TS KC 9H 4S 2D 2S 5D 3S AC",};
    var split = hands.Select (s = > new {p1 = string.Join (" ", s.Split (" ".ToCharArray (), StringSplitOptions.RemoveEmptyEntries).Take (5)).Trim (), p2 = string.Join (" ", s.Split (" ".ToCharArray (), StringSplitOptions.RemoveEmptyEntries).Skip (5)).Trim ()}).ToList ();
    var p1 = split.Select (s = > s.p1).ToArray ();
    var p2 = split.Select (s = > s.p2).ToArray ();
    foreach (var t in p1)
        Console.WriteLine ("P1:   " + t);

    Console.WriteLine ();
    foreach (var t in p2)
        Console.WriteLine ("P2:   " + t);

    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49148728_49149080_1_35
49148728_49151224_30_56
Title: Print message when invalid data entered in console application using switch C# 
----------------------------------------

static void SecondMenu () {
    char sel2;
    Console.WriteLine ("");
    Console.WriteLine ("********************");
    Console.WriteLine ("A. Addition");
    Console.WriteLine ("S. Substraction");
    Console.WriteLine ("D. Division");
    Console.WriteLine ("********************");
    Console.Write ("Please enter your option here:   ");
    sel2 = Convert.ToChar (Console.ReadLine ());
    switch (sel2) {
        case 'a' :
            Calc (1);
            break;
        case 's' :
            Calc (2);
            break;
        case 'd' :
            Calc (3);
            break;
        default :
            Console.WriteLine ("Wrong entry! Try again");
            MainMenu ();
            return;
    }
}
----------------------------------------

static void SecondMenu () {
    var options = new Dictionary < char, Func < double, double, double > > () {{'a', (x, y) = > x + y}, {'s', (x, y) = > x - y}, {'d', (x, y) = > x / y},};
    while (true) {
        Console.WriteLine ("");
        Console.WriteLine ("********************");
        Console.WriteLine ("A. Addition");
        Console.WriteLine ("S. Substraction");
        Console.WriteLine ("D. Division");
        Console.WriteLine ("********************");
        Console.Write ("Please enter your option here:   ");
        char sel = Convert.ToChar (Console.ReadLine ());
        if (options.ContainsKey (sel)) {
            Calculate (options [sel]);
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49191556_49191715_40_55
49191556_49192611_21_38
Title: Sort multiple columns with specific characteristics in a csv file using c# 
----------------------------------------

public int Compare (string x, string y) {
    if (x == y)
        return 0;

    if (x == "BK")
        return 1;

    if (y == "BK")
        return - 1;

    if (colorOrder.Contains (x) && colorOrder.Contains (y))
        return colorOrder.IndexOf (x) > colorOrder.IndexOf (y) ? 1 : - 1;

    if (colorOrder.Contains (x))
        return - 1;

    if (colorOrder.Contains (y))
        return 1;

    return String.Compare (x, y, StringComparison.Ordinal);
}
----------------------------------------

public int Compare (string x, string y) {
    string xSortKeyColor = x.Split (';') [2];
    double xSortKeySection = Convert.ToDouble (x.Split (';') [1]);
    double xSortKeyLenght = Convert.ToDouble (x.Split (';') [3]);
    string ySortKeyColor = y.Split (';') [2];
    double ySortKeySection = Convert.ToDouble (y.Split (';') [1]);
    double ySortKeyLenght = Convert.ToDouble (y.Split (';') [3]);
    if (xSortKeyColor != ySortKeyColor)
        return GetPriority (xSortKeyColor).CompareTo (GetPriority (ySortKeyColor));

    if (xSortKeySection != ySortKeySection)
        return xSortKeySection.CompareTo (ySortKeySection);

    return xSortKeyLenght.CompareTo (ySortKeyLenght);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49209323_49209469_1_26
49209323_49209602_1_31
Title: Bisection search doesnt return the correct index 
----------------------------------------

public static int Bisection (int [] array, int element) {
    int left = 0;
    int right = array.Length - 1;
    int middle = (left + right) / 2;
    while (array [middle] != element || (middle > 0 && array [middle - 1] == element)) {
        if (array [middle] < element) {
            left = middle + 1;
        } else {
            right = middle - 1;
        }
        middle = (left + right) / 2;
        if (right < left) {
            return - 1;
        }
    }
    return middle;
}
----------------------------------------

public static int Bisection (int [] array, int element) {
    int left = 0;
    int right = array.Length - 1;
    int firstOccur = int.MinValue;
    while (left <= right) {
        var diff = (uint) (right - left);
        int middle = left + (int) (diff > > 1);
        if (array [middle] == element) {
            firstOccur = middle;
            right = middle - 1;
        } else if (array [middle] < element) {
            left = middle + 1;
        } else {
            right = middle - 1;
        }
    }
    if (firstOccur != int.MinValue)
        return firstOccur;

    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4925215_4925256_1_13
4925215_4925863_1_11
Title: TryParse failing with negative numbers 
----------------------------------------

private decimal CalculateValue (IEnumerable < XElement > summaryValues) {
    decimal totalValue = 0;
    foreach (XElement xElement in summaryValues) {
        decimal valueReturned;
        bool successful = Decimal.TryParse (xElement.Value, out valueReturned);
        if (successful)
            totalValue += valueReturned;

    }
    return totalValue;
}
----------------------------------------

private decimal CalculateValue (IEnumerable < XElement > summaryValues) {
    return summaryValues.Sum (el = > {
        decimal value;
        if (Decimal.TryParse (el.Value, out value))
            return value;

        return 0M;
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4925468_33651894_6_15
4925468_4925959_3_19
Title: Combine relative baseUri with relative path 
----------------------------------------

public static Uri Combine (this Uri baseUri, Uri relativeUri) {
    if (baseUri == null)
        throw new ArgumentNullException ("baseUri");

    if (relativeUri == null)
        throw new ArgumentNullException ("relativeUri");

    string baseUrl = VirtualPathUtility.AppendTrailingSlash (baseUri.ToString ());
    string combinedUrl = VirtualPathUtility.Combine (baseUrl, relativeUri.ToString ());
    return new Uri (combinedUrl, baseUri.IsAbsoluteUri ? UriKind.Absolute : UriKind.Relative);
}
----------------------------------------

public static Uri Combine (this Uri relativeBaseUri, Uri relativeUri) {
    if (relativeBaseUri == null) {
        throw new ArgumentNullException ("relativeBaseUri");
    }
    if (relativeUri == null) {
        throw new ArgumentNullException ("relativeUri");
    }
    string baseUrl = VirtualPathUtility.AppendTrailingSlash (relativeBaseUri.ToString ());
    string combinedUrl = VirtualPathUtility.Combine (baseUrl, relativeUri.ToString ());
    return new Uri (combinedUrl, UriKind.Relative);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4925798_4925840_18_33
4925798_4925859_50_64
Title: Rijndael Padding Error 
----------------------------------------

private static string _decrypt (string key, string initVector, string value) {
    byte [] hexBuffer = HexString2ByteArray (value);
    byte [] decBuffer;
    using (System.Security.Cryptography.RijndaelManaged rmt = new System.Security.Cryptography.RijndaelManaged ())
    {
        rmt.KeySize = 256;
        rmt.BlockSize = 128;
        rmt.Mode = System.Security.Cryptography.CipherMode.CBC;
        rmt.Padding = System.Security.Cryptography.PaddingMode.ISO10126;
        decBuffer = rmt.CreateDecryptor (Convert.FromBase64String (key), Convert.FromBase64String (initVector)).TransformFinalBlock (hexBuffer, 0, hexBuffer.Length);
    } return Encoding.Unicode.GetString (decBuffer);
}
----------------------------------------

private static string _decrypt (string key, string initVector, string value) {
    using (RijndaelManaged rmt = new RijndaelManaged ())
    {
        rmt.KeySize = 256;
        rmt.BlockSize = 128;
        rmt.Mode = CipherMode.CBC;
        rmt.Padding = PaddingMode.ISO10126;
        byte [] cipherText = Convert.FromBase64String (value);
        byte [] plainText = rmt.CreateDecryptor (Convert.FromBase64String (key), Convert.FromBase64String (initVector)).TransformFinalBlock (cipherText, 0, cipherText.Length);
        return Encoding.UTF8.GetString (plainText);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4925798_4925840_1_16
4925798_4925859_34_48
Title: Rijndael Padding Error 
----------------------------------------

private static string _encrypt (string value, string key, string initVector) {
    byte [] buffer = Encoding.Unicode.GetBytes (value);
    byte [] encBuffer;
    using (System.Security.Cryptography.RijndaelManaged rmt = new System.Security.Cryptography.RijndaelManaged ())
    {
        rmt.KeySize = 256;
        rmt.BlockSize = 128;
        rmt.Mode = System.Security.Cryptography.CipherMode.CBC;
        rmt.Padding = System.Security.Cryptography.PaddingMode.ISO10126;
        encBuffer = rmt.CreateEncryptor (Convert.FromBase64String (key), Convert.FromBase64String (initVector)).TransformFinalBlock (buffer, 0, buffer.Length);
    } string encryptValue = ConvertToHex (encBuffer);
    return encryptValue;
}
----------------------------------------

private static string _encrypt (string value, string key, string initVector) {
    using (RijndaelManaged rmt = new RijndaelManaged ())
    {
        rmt.KeySize = 256;
        rmt.BlockSize = 128;
        rmt.Mode = CipherMode.CBC;
        rmt.Padding = PaddingMode.ISO10126;
        byte [] plainText = Encoding.UTF8.GetBytes (value);
        byte [] cipherText = rmt.CreateEncryptor (Convert.FromBase64String (key), Convert.FromBase64String (initVector)).TransformFinalBlock (plainText, 0, plainText.Length);
        return Convert.ToBase64String (cipherText);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49274908_50262093_18_31
49274908_50267431_1_10
Title: Xamarin Search bar not showing 
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < SearchBar > e) {
    base.OnElementChanged (e);
    if (e.OldElement != null || Element == null) {
        return;
    }
    if (Build.VERSION.SdkInt >= BuildVersionCodes.N) {
        Element.HeightRequest = 42;
    }
}
----------------------------------------

protected override void OnElementChanged (ElementChangedEventArgs < SearchBar > e) {
    base.OnElementChanged (e);
    if (e.OldElement != null || Element == null)
        return;

    if (Build.VERSION.SdkInt >= BuildVersionCodes.N)
        Element.HeightRequest = 40;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4930244_4930350_1_32
4930244_4930395_1_53
Title: How can I solve the Collatz conjecture algorithm in C#? 
----------------------------------------

public static string collatz (string input) {
    int current = 0;
    if (string.IsNullOrEmpty (input) || ! int.TryParse (input, out current) || current < 1) {
        return "Empty, not a number or less then 1";
    }
    int max = current;
    while (current > 1) {
        if (current % 2 == 0) {
            current = current / 2;
            if (current > max)
                max = current;

            if (current != 1)
                input = input + " " + current.ToString ();

            if (current == 1) {
                input = input + " " + current.ToString ();
                input = input + " largest number was " + max;
            }
        } else {
            if (current == 1) {
                input = input + " " + current.ToString ();
                input = input + " largest number was " + max;
            }
            current = (3 * current) + 1;
            if (current > max)
                max = current;

            input = input + " " + current.ToString ();
        }
    }
    return input;
}
----------------------------------------

public static string collatz (string y) {
    if (y == null) {
        return null;
    }
    int x = int.Parse (y);
    var results = new StringBuilder ();
    results.Append (x.ToString ());
    int largest = x;
    while (x > 1) {
        if (x % 2 == 0) {
            x = x / 2;
            if (x > largest) {
                largest = x;
            }
            if (x != 1) {
                results.Append (" " + x.ToString ());
            }
            if (x == 1) {
                results.Append (" " + x.ToString ());
                results.Append (" largest number was " + largest.ToString ());
                return results.ToString ();
            }
        }
        if (x % 2 != 0) {
            if (x == 1) {
                results.Append (" " + x.ToString ());
                results.Append (" largest number was " + largest.ToString ());
                return results.ToString ();
            }
            x = (3 * x) + 1;
            if (x > largest) {
                largest = x;
            }
            results.Append (" " + x.ToString ());
        }
    }
    return results.ToString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49302_15296614_1_28
49302_49311_1_23
Title: How to Identify Postback event in Page_Load 
----------------------------------------

public Control GetPostBackControl (Page page) {
    Control control = null;
    string ctrlname = page.Request.Params.Get ("__EVENTTARGET");
    if ((ctrlname != null) & ctrlname != string.Empty) {
        control = page.FindControl (ctrlname);
    } else {
        foreach (string ctl in page.Request.Form) {
            Control c = page.FindControl (ctl);
            if (c is System.Web.UI.WebControls.Button) {
                control = c;
                break;
            }
        }
    }
    if (control == null) {
        for (int i = 0; i < page.Request.Form.Count; i ++) {
            if ((page.Request.Form.Keys [i].EndsWith (".x")) || (page.Request.Form.Keys [i].EndsWith (".y"))) {
                control = page.FindControl (page.Request.Form.Keys [i].Substring (0, page.Request.Form.Keys [i].Length - 2));
                break;
            }
        }
    }
    return control;
}
----------------------------------------

public static Control GetPostBackControl (Page page) {
    Control control = null;
    string ctrlname = page.Request.Params.Get ("__EVENTTARGET");
    if (ctrlname != null && ctrlname != string.Empty) {
        control = page.FindControl (ctrlname);
    } else {
        foreach (string ctl in page.Request.Form) {
            Control c = page.FindControl (ctl);
            if (c is System.Web.UI.WebControls.Button) {
                control = c;
                break;
            }
        }
    }
    return control;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4934550_4934753_5_61
4934550_4935218_31_53
Title: Fast string suffix checking in C# (.NET 4.0)? 
----------------------------------------

static void Main (string [] args) {
    strings = new List < string > ();
    Random r = new Random ();
    for (int rep = 0; rep < 25; rep ++) {
        Console.WriteLine ("Run " + rep);
        strings.Clear ();
        for (int i = 0; i < 1000000; i ++) {
            string temp = "";
            for (int j = 0; j < r.Next (3, 101); j ++) {
                temp += Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * r.NextDouble () + 65)));
            }
            if (i % 4 == 0) {
                temp += "abc";
            }
            strings.Add (temp);
        }
        OrdinalWorker ow = new OrdinalWorker (strings);
        CharWorker cw = new CharWorker (strings);
        if (rep % 2 == 0) {
            cw.Run ();
            ow.Run ();
        } else {
            ow.Run ();
            cw.Run ();
        }
        Thread.Sleep (1000);
        results [rep] = ow.finish.Subtract (cw.finish).Milliseconds;
    }
    double tDiff = 0;
    for (int i = 0; i < 25; i ++) {
        tDiff += results [i];
    }
    double average = tDiff / 25;
    if (average < 0) {
        average = average * - 1;
        Console.WriteLine ("Char compare faster by {0}ms average", average.ToString ().Substring (0, 4));
    } else {
        Console.WriteLine ("EndsWith faster by {0}ms average", average.ToString ().Substring (0, 4));
    }
}
----------------------------------------

static void Main (string [] args) {
    GenerateSuffixedStrings ();
    FindStringsWithSuffix_UsingSubString (input, suffix);
    Console.WriteLine ("SubString:    {0}", profiler.Elapsed);
    FindStringsWithSuffix_UsingContains (input, suffix);
    Console.WriteLine ("Contains:     {0}", profiler.Elapsed);
    FindStringsWithSuffix_UsingCompareInfo (input, suffix);
    Console.WriteLine ("CompareInfo:  {0}", profiler.Elapsed);
    FindStringsWithSuffix_UsingEndsWith (input, suffix);
    Console.WriteLine ("EndsWith:     {0}", profiler.Elapsed);
    FindStringsWithSuffix_UsingLastIndexOf (input, suffix);
    Console.WriteLine ("LastIndexOf:  {0}", profiler.Elapsed);
    Console.WriteLine ();
    Console.WriteLine ("Press any key to exit...");
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49457724_49458294_1_44
49457724_49458336_7_51
Title: Try-Catch with Do-While loop 
----------------------------------------

public static void Main (string [] args) {
    Console.WriteLine ("Skriv in Fahrenheit: ");
    try {
        int fahrenheit = int.Parse (Console.ReadLine ());
    }
    catch (Exception e) {
    }
    int celsius = FahrToCel (fahrenheit);
    int lowerTempLimit = 73;
    int upperTempLimit = 77;
    do
        {
            if (celsius < lowerTempLimit) {
                Console.WriteLine ("Bastun är inte tillräckligt varmt. Värme i bastun {0}, skruva upp värmen", celsius);
            } else if (celsius > upperTempLimit) {
                Console.WriteLine ("Bastun är för varmt. Värme i bastun {0}, skruva ner värmen", celsius);
            } else {
                Console.WriteLine ("Bastun är tillräckligt varmt för att kunna basta. Värme i bastun {0}", celsius);
            }
        } while (celsius < lowerTempLimit || celsius > upperTempLimit);
    Console.Write ("Press any key to continue . . . ");
    Console.ReadKey ();
}
----------------------------------------

public static void Main (string [] args) {
    int startTempLimit = 0;
    int lowerTempLimit = 73;
    int upperTempLimit = 77;
    int celsius;
    int fahrenheit;
    do
        {
            Console.WriteLine ("Skriv in Fahrenheit grader: ");
            while (true) {
                try {
                    fahrenheit = int.Parse (Console.ReadLine ());
                    break;
                }
                catch (FormatException ex) {
                    Console.WriteLine ("Endast heltal kan matas in, försök igen!");
                    Console.WriteLine ("\nSkriv in Fahrenheit grader: ");
                }
            }
            celsius = FahrToCel (fahrenheit);
            if (celsius < startTempLimit) {
                Console.WriteLine ("Bastun är ej påslagen. Du måste sätta på bastun. Värme i bastu {0}C.", celsius);
            } else if (celsius < lowerTempLimit) {
                Console.WriteLine ("Bastun är inte tillräckligt varm. Värme i bastun {0}C, skruva upp värmen", celsius);
            } else if (celsius > upperTempLimit) {
                Console.WriteLine ("Bastun är för varm. Värme i bastun {0}C, skruva ner värmen", celsius);
            } else {
                Console.WriteLine ("Bastun är tillräckligt varm för att kunna basta. Värme i bastun {0}C.", celsius);
            }
        } while (celsius < lowerTempLimit || celsius > upperTempLimit);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
495110_495117_41_55
495110_495137_89_101
Title: C# data structure for multiple unit conversions 
----------------------------------------

public static void Main () {
    Box myBox = new Box (30.0f, 20.0f);
    IEnglishDimensions eDimensions = (IEnglishDimensions) myBox;
    IMetricDimensions mDimensions = (IMetricDimensions) myBox;
    System.Console.WriteLine ("Length(in): {0}", eDimensions.Length ());
    System.Console.WriteLine ("Width (in): {0}", eDimensions.Width ());
    System.Console.WriteLine ("Length(cm): {0}", mDimensions.Length ());
    System.Console.WriteLine ("Width (cm): {0}", mDimensions.Width ());
}
----------------------------------------

static void Main (string [] args) {
    UnitConverter unitConverter = new UnitConverter ();
    foreach (string s in File.ReadAllLines ("Conversions.txt")) {
        if (s.IndexOf ("?") == - 1)
            unitConverter.ParseConverterDefinition (s);
        else
            Console.WriteLine (unitConverter.Convert (s));

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4951565_4951618_1_13
4951565_4961644_1_13
Title: DataContractSerializer serializing List<T> getting error 
----------------------------------------

public void SerializeDataValue (List < DataValues > values) {
    DataContractSerializer serializer = new DataContractSerializer (typeof (List < DataValues >));
    using (MemoryStream stream = new MemoryStream ())
    {
        using (GZipStream compress = new GZipStream (stream, CompressionMode.Compress))
        {
            XmlDictionaryWriter w = XmlDictionaryWriter.CreateBinaryWriter (compress);
            serializer.WriteObject (w, values);
        } _serializedData = stream.ToArray ();
    }}
----------------------------------------

public void SerializeDataValue (List < DataValues > values) {
    DataContractSerializer serializer = new DataContractSerializer (typeof (List < DataValues >));
    using (MemoryStream stream = new MemoryStream ())
    {
        using (GZipStream compress = new GZipStream (stream, CompressionMode.Compress))
        {
            serializer.WriteObject (compress, values);
        } _serializedData = stream.ToArray ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49518533_49518622_1_13
49518533_49518978_28_39
Title: C# Unable to get string variable from a method 
----------------------------------------

private void btnGenerateEboard_Click (object sender, EventArgs e) {
    string stDueTime;
    if (rbtnGB.Checked) {
        MethodGBSizeDueEstimate (stDueTime);
    }
    if (rbtnNative2Rel.Checked) {
        txtEboardText.AppendText (Environment.NewLine + stDueTime);
    }
}
----------------------------------------

private void btnGenerateEboard_Click (object sender, EventArgs e) {
    string stDueTime;
    if (rbtnGB.Checked) {
        stDueTime = MethodGBSizeDueEstimate ();
    }
    if (rbtnNative2Rel.Checked) {
        txtEboardText.AppendText (Environment.NewLine + stDueTime);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4957068_4957423_5_21
4957068_4957589_6_33
Title: WPF Bind Count of Items to TextBlock Foreground Colour 
----------------------------------------

public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) {
    const int cap = 32;
    int count = (int) value;
    count -= count % 3;
    double res = count <= cap ? count : cap;
    res /= cap;
    Color colour = new Color ();
    colour.ScA = 1;
    colour.ScB = (float) res;
    return new SolidColorBrush (colour);
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, CultureInfo culture) {
    if (value == null || value == DependencyProperty.UnsetValue) {
        return DependencyProperty.UnsetValue;
    }
    var fontSize = (double) value;
    double incrementsCount = MaxFontSize / Increment;
    var defaultColor = new SolidColorBrush (Colors.Black);
    for (int incrementIndex = 0; incrementIndex < incrementsCount; incrementIndex ++) {
        if (fontSize == MinFontSize + Increment * incrementIndex) {
            switch (incrementIndex) {
                case 0 :
                    return new SolidColorBrush (Colors.Red);
                case 1 :
                    return new SolidColorBrush (Colors.Green);
                case 2 :
                    return new SolidColorBrush (Colors.Blue);
                default :
                    return defaultColor;
            }
        }
    }
    return defaultColor;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49599262_49599318_13_27
49599262_49600696_3_16
Title: The code stops after one input 
----------------------------------------

static void Main (string [] args) {
    int soma = 0;
    while (soma < 20) {
        Console.WriteLine ("Soma is:" + soma);
        string numero = Console.In.ReadLine ();
        foreach (char num in numero) {
            int value = CharToInt (num);
            soma += value;
        }
    }
    Console.WriteLine ("Final Soma is:" + soma);
}
----------------------------------------

static void Main (string [] args) {
    int sum = 0;
    string number = Console.In.ReadLine ();
    foreach (var num in number.Select (digit = > int.Parse (digit.ToString ()))) {
        sum += num;
        if (sum >= 20)
            break;

    }
    Console.WriteLine ("Sum :{0}", sum);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49669375_49669644_1_20
49669375_49669885_5_22
Title: Points on collision (points only working for first platform) 
----------------------------------------

void OnCollisionEnter2D (Collision2D collision) {
    Debug.Log ("Collision detected!");
    if (collision.relativeVelocity.y <= 0) {
        Debug.Log ("RelativeVelocity <=0");
        Rigidbody2D rb = collision.collider.GetComponent < Rigidbody2D > ();
        if (rb != null) {
            Vector2 velocity = rb.velocity;
            velocity.y = jumpForce;
            rb.velocity = velocity;
        }
        Destroy (collision.gameObject);
        currentScore += 10;
        displayScore.text = "Score: " + currentScore;
    }
}
----------------------------------------

void OnCollisionEnter2D (Collision2D collision) {
    if (collision.relativeVelocity.y <= 0) {
        Rigidbody2D rb = collision.collider.GetComponent < Rigidbody2D > ();
        if (rb != null) {
            Vector2 velocity = rb.velocity;
            velocity.y = jumpForce;
            rb.velocity = velocity;
        }
        LevelGenerator.currentScore += 10;
        Destroy (gameObject);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49678016_49697015_32_44
49678016_49697015_45_59
Title: can't convert from delpi to C# 
----------------------------------------

[DllExport ("RDSGroup", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)] unsafe static void RDSGroup (TRDSGroup * PRDSGroup) {
    Group = * PRDSGroup;
    if (Group.Blk1 >= 0) {
        if (PI != Group.Blk1) {
            PI = Group.Blk1;
            System.Windows.Forms.MessageBox.Show ("New PI has been detected:" + PI.ToString ("X4"));
        }
    }
}
----------------------------------------

[DllExport ("Command", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)] static void Command (string Cmd, string Param) {
    var w = "";
    w = Cmd.ToUpper ();
    if (w == "CONFIGURE") {
        System.Windows.Forms.MessageBox.Show ("Nothing to configure in this simple plugin.");
    }
    if (w == "RESETDATA") {
        PI = - 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49727613_49727743_1_24
49727613_49729067_1_34
Title: Cannot Dispose Image - Out of Memory 
----------------------------------------

private void ResetDataPatient () {
    imgBox.Image.Dispose ();
    imgBox.Image = Properties.Resources.defaultpicture;
    if (xrayPic != null)
        xrayPic.Dispose ();

    xrayPic = null;
    if (rootPic != null)
        rootPic.Dispose ();

    rootPic = null;
    if (tmppic != null)
        tmppic.Dispose ();

    tmppic = null;
    if (tmppicCheck != null)
        tmppicCheck.Dispose ();

    tmppicCheck = null;
    if (originalPic != null)
        originalPic.Dispose ();

    originalPic = null;
    if (PatienData != null) {
        PatienData.Clear ();
        PatienData.Dispose ();
        PatienData = null;
    }
}
----------------------------------------

private void ResetDataPatient () {
    imgBox.Image.Dispose ();
    imgBox.Image = Properties.Resources.defaultpicture;
    if (xrayPic != null) {
        xrayPic.Dispose ();
        xrayPic = null;
    }
    if (rootPic != null) {
        rootPic.Dispose ();
        rootPic = null;
    }
    if (tmppic != null) {
        tmppic.Dispose ();
        tmppic = null;
    }
    if (tmppicCheck != null) {
        tmppicCheck.Dispose ();
        tmppicCheck = null;
    }
    if (originalPic != null) {
        originalPic.Dispose ();
        originalPic = null;
    }
    if (PatienData != null) {
        PatienData.Clear ();
        PatienData.Dispose ();
        PatienData = null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
497777_497807_17_42
497777_497877_1_15
Title: What is the most effecient way to get fill a ComboBox with all the registered file types (not just extenstions) 
----------------------------------------

public static List < FileAssoc > GetFileAssociations () {
    List < FileAssoc > result = new List < FileAssoc > ();
    RegistryKey rk = Registry.ClassesRoot;
    String [] names = rk.GetSubKeyNames ();
    foreach (string file in names) {
        if (file.StartsWith (".")) {
            RegistryKey rkey = rk.OpenSubKey (file);
            object descKey = rkey.GetValue ("");
            if (descKey != null) {
                string desc = descKey.ToString ();
                if (! string.IsNullOrEmpty (desc)) {
                    result.Add (new FileAssoc (file, desc));
                }
            }
        }
    }
    return result;
}
----------------------------------------

public static IList GetFileAssociations () {
    return Registry.ClassesRoot.GetSubKeyNames ().Where (key = > key.StartsWith (".")).Select (key = > {
        string description = Registry.ClassesRoot.OpenSubKey (key).GetValue ("") as string;
        if (! String.IsNullOrEmpty (description)) {
            return new {key, description};
        } else {
            return null;
        }
    }).Where (a = > a != null).ToList ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49802283_49818027_1_63
49802283_49901611_1_49
Title: How would I approach sorting something like this 
----------------------------------------

void Main () {
    string values = @"1
  14
    141
        141010
        141020
        141030
        141040
        141050
        141060
    142
        142010
        142020
    144
       1440
          144010
          144020
          144030
          144040
    145020
    145030
    145010
          ";
    int myValue;
    var myData = values.Split ("\r\n".ToCharArray (), StringSplitOptions.RemoveEmptyEntries).Select (s = > int.TryParse (s.Trim (), out myValue) ? myValue : - 1).Where (n = > n != - 1);
    Func < int, IEnumerable < int >, int ? > parent = (value, list) = > {
        while (value > 0) {
            value /= 10;
            if (list.Any (l = > l == value)) {
                return value;
            }
        }
        return null;
    };
    var nodes = myData.Select (d = > new {d, parentNode = parent (d, myData)}).OrderBy (d = > d.parentNode).ThenBy (d = > d.d);
    TreeView tv = new TreeView ();
    foreach (var n in nodes) {
        var v = n.d.ToString ();
        ((n.parentNode == null) ? tv.Nodes : tv.Nodes.Find ("_" + n.parentNode.ToString (), true).First ().Nodes).Add ("_" + v, v);
    }
    foreach (TreeNode node in tv.Nodes) {
        WriteNode (node, 0);
    }
}
----------------------------------------

void Main () {
    string values = @"1
  14
    141
        141010
        141020
        141030
        141040
        141050
        141060
    142
        142010
        142020
    144
       1440
          144010
          144020
          144030
          144040
    145020
    145030
    145010
          ";
    int myValue;
    var myData = values.Split ("\r\n".ToCharArray (), StringSplitOptions.RemoveEmptyEntries).Select (s = > int.TryParse (s.Trim (), out myValue) ? myValue : - 1).Where (n = > n != - 1).OrderBy (n = > Guid.NewGuid ());
    List < string > myList = new List < string > ();
    var list = myData.Select (d = > d.ToString ());
    foreach (var v in myData) {
        myList.Add (Fullpath (v.ToString (), list));
    }
    var ordered = myList.OrderBy (l = > l);
    foreach (var element in ordered) {
        var levels = element.Count (e = > e == '/');
        var value = levels > 0 ? element.Remove (0, element.LastIndexOf ('/') + 1) : element;
        Console.WriteLine ("".PadLeft (levels, '\t') + value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49866678_49866772_1_22
49866678_49866801_3_35
Title: C# Console application crashing before if statement can run 
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    Console.WriteLine ("1. SHC ");
    int UserInput1 = int.Parse (Console.ReadLine ());
    if (UserInput1 == 1) {
        Console.WriteLine ("Mass (kg): ");
        int shcmass = int.Parse (Console.ReadLine ());
        Console.WriteLine ("Specific Heat Capactiy (J/Kg/°C): ");
        int shcshc = int.Parse (Console.ReadLine ());
        Console.WriteLine ("Temperature Difference (△Ø): ");
        int shctemp = int.Parse (Console.ReadLine ());
        int shcfinal = shcmass * shcshc * shctemp;
        Console.WriteLine ("Energy: " + shcfinal);
    }
    Console.ReadLine ();
}
----------------------------------------

public static void Main () {
    string m1 = "\nType a string of text then press Enter. " + "Type '+' anywhere in the text to quit:\n";
    string m2 = "Character '{0}' is hexadecimal 0x{1:x4}.";
    string m3 = "Character     is hexadecimal 0x{0:x4}.";
    char ch;
    int x;
    Console.WriteLine (m1);
    do
        {
            x = Console.Read ();
            try {
                ch = Convert.ToChar (x);
                if (Char.IsWhiteSpace (ch)) {
                    Console.WriteLine (m3, x);
                    if (ch == 0x0a)
                        Console.WriteLine (m1);

                } else
                    Console.WriteLine (m2, ch, x);

            }
            catch (OverflowException e) {
                Console.WriteLine ("{0} Value read = {1}.", e.Message, x);
                ch = Char.MinValue;
                Console.WriteLine (m1);
            }
        } while (ch != '+');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49883586_49883808_1_11
49883586_49883812_1_11
Title: Why isn't this combobox displaying items? 
----------------------------------------

private void OnAutoGeneratingColumn (object sender, DataGridAutoGeneratingColumnEventArgs e) {
    var cb = new ComboBox ();
    cb.DisplayMemberPath = "SomePropertyFromYourCollection";
    foreach (DataColumn test in (DataContext as EnterValueDialogViewModel).displayTable.Columns)
        Console.Out.WriteLine (test);

    cb.ItemsSource = (DataContext as EnterValueDialogViewModel).displayTable.Columns;
    e.Column.Header = cb;
}
----------------------------------------

private void OnAutoGeneratingColumn (object sender, DataGridAutoGeneratingColumnEventArgs e) {
    var cb = new ComboBox ();
    foreach (DataColumn test in (DataContext as EnterValueDialogViewModel).displayTable.Columns)
        Console.Out.WriteLine (test);

    cb.ItemsSource = (DataContext as EnterValueDialogViewModel).displayTable.Columns;
    cb.DisplayMemberPath = "Column1";
    cb.SelectedValuePath = "Column2";
    e.Column.Header = cb;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49921146_49923001_11_19
49921146_49923001_2_9
Title: "LINQ: transform enumerable until end condition is met and return if the end condition was met" 
----------------------------------------

static IEnumerable < TSource > TakeWhilePlusOneIterator < TSource > (IEnumerable < TSource > source, Func < TSource, bool > predicate) {
    foreach (TSource element in source) {
        var stop = ! predicate (element);
        yield return element;
        if (stop) {
            break;
        }
    }
}
----------------------------------------

public static IEnumerable < TSource > TakeWhilePlusOne < TSource > (this IEnumerable < TSource > source, Func < TSource, bool > predicate) {
    if (source == null)
        throw new ArgumentNullException (nameof (source));

    if (predicate == null)
        throw new ArgumentNullException (nameof (predicate));

    return TakeWhilePlusOneIterator < TSource > (source, predicate);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5002670_5003483_1_26
5002670_5004112_19_34
Title: Lazy-loaded NHibernate properties in Equals and GetHashCode 
----------------------------------------

public virtual bool Equals (EntityBase other) {
    if (other == null) {
        return false;
    }
    if (ReferenceEquals (other, this)) {
        return true;
    }
    var otherType = NHibernateProxyHelper.GetClassWithoutInitializingProxy (other);
    var thisType = NHibernateProxyHelper.GetClassWithoutInitializingProxy (this);
    if (! otherType.Equals (thisType)) {
        return false;
    }
    bool otherIsTransient = Equals (other.Id, 0);
    bool thisIsTransient = Equals (Id, 0);
    if (otherIsTransient || thisIsTransient)
        return false;

    return other.Id.Equals (Id);
}
----------------------------------------

public virtual bool Equals (Entity other) {
    if (other == null) {
        return false;
    }
    if (IsTransient ^ other.IsTransient) {
        return false;
    }
    if (IsTransient && other.IsTransient) {
        return ReferenceEquals (this, other);
    }
    return EntityId.Equals (other.EntityId);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50038564_50041279_31_43
50038564_50041279_5_29
Title: C# EF6 conditional property selection? 
----------------------------------------

public static IQueryable < T > IncludeOnly < T > (this IQueryable < T > query, params string [] properties) {
    var arg = Expression.Parameter (typeof (T), "x");
    var bindings = new List < MemberBinding > ();
    foreach (var propName in properties) {
        var prop = typeof (T).GetProperty (propName);
        bindings.Add (Expression.Bind (prop, Expression.Property (arg, prop)));
    }
    var select = Expression.Lambda < Func < T, T > > (Expression.MemberInit (Expression.New (GetProxyType < T > ()), bindings), arg);
    return query.Select (select);
}
----------------------------------------

static Type GetProxyType < T > () {
    lock (typeof (Extensions))
    {
        if (_proxies.ContainsKey (typeof (T)))
            return _proxies [typeof (T)];

        if (_moduleBuilder == null) {
            var asmBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly (new AssemblyName ("ExcludeProxies"), AssemblyBuilderAccess.Run);
            _moduleBuilder = asmBuilder.DefineDynamicModule (asmBuilder.GetName ().Name, false);
        }
        TypeBuilder typeBuilder = _moduleBuilder.DefineType (typeof (T).Name + "Proxy", TypeAttributes.Public | TypeAttributes.Class, typeof (T));
        var type = typeBuilder.CreateType ();
        _proxies.Add (typeof (T), type);
        return type;
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50063987_50064264_1_30
50063987_50064306_3_24
Title: How to change the value of a specific item in a 2D array in a list in c# 
----------------------------------------

public List < int [,] > Mutation (int [] RouletteWheel, List < int [,] > population) {
    double rndNumber1 = 0.0;
    int chrom1 = 0;
    int rndNumber2 = 0;
    Random rnd = new Random ();
    for (int j = 0; j < rows; j ++) {
        for (int v = 0; v < columns; v ++) {
            if (j == rndNumber2) {
                if (population [chrom1] [j, v] == 0) {
                    population [chrom1] [j, v] = 1;
                }
            }
        }
    }
    return population;
}
----------------------------------------

public void Mutation (IEnumerable < int [,] > population) {
    Random rnd = new Random ();
    foreach (int [,] chromosome in population) {
        double selectionFactor = rnd.Next (0, 11) / 100.0D;
        if (selectionFactor <= Pm) {
            int crossoverRow = rnd.Next (0, chromosome.GetLength (0));
            int columns = chromosome.GetLength (1);
            for (int c = 0; c < columns; c ++) {
                if (chromosome [crossoverRow, c] == 0) {
                    chromosome [crossoverRow, c] = 1;
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50087412_50087566_1_21
50087412_50093692_1_12
Title: Split String but Return whole word at the end 
----------------------------------------

public static IList < string > SplitChunks (string text, int chunkSize) {
    var words = text.Split (' ');
    var result = new List < string > ();
    int length = 0;
    string current = "";
    foreach (var word in words) {
        current += word + " ";
        length += word.Length + 1;
        if (length > chunkSize) {
            result.Add (current);
            current = "";
            length = 0;
        }
    }
    if (current != "")
        result.Add (current);

    return result;
}
----------------------------------------

public static IList < string > SplitChunks (string text, int chunkSize) {
    var parts = text.Split (' ');
    return parts.Skip (1).Aggregate (parts.Take (1).ToList (), (a, x) = > {
        if ((a.Last () + x).Length > chunkSize)
            a.Add (x);
        else
            a [a.Count - 1] += " " + x;

        return a;
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50093904_50093925_1_17
50093904_50093946_1_13
Title: Method in C# counting doesn't count 
----------------------------------------

public int IndexOf (string text) {
    for (Node i = Head; i != null; i = i.Next) {
        int counter = 0;
        Console.WriteLine ("Value of counter = " + counter);
        if (text == i.Text) {
            return counter;
        }
        counter ++;
        Console.WriteLine ("Value of counter post increment = " + counter);
    }
    return - 1;
}
----------------------------------------

public int IndexOf (string text) {
    int counter = - 1;
    for (Node i = Head; i != null; i = i.Next) {
        counter ++;
        if (text == i.Text) {
            return counter;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50098511_50113090_20_37
50098511_50113090_38_73
Title: Element in a resource dictionary is already the child of another element? 
----------------------------------------

private static void DeepCopyChildren < T > (T source, T result) where T : UIElement {
    Panel sourcePanel = source as Panel;
    if (sourcePanel != null) {
        Panel resultPanel = result as Panel;
        if (resultPanel != null) {
            foreach (UIElement child in sourcePanel.Children) {
                UIElement childClone = DeepClone (child);
                resultPanel.Children.Add (childClone);
            }
        }
    }
}
----------------------------------------

private static void CopyProperties < T > (T source, T result, Type type) where T : UIElement {
    IEnumerable < PropertyInfo > properties = type.GetRuntimeProperties ();
    foreach (var property in properties) {
        if (property.Name != "Name") {
            if ((property.CanWrite) && (property.CanRead)) {
                object sourceProperty = property.GetValue (source);
                UIElement element = sourceProperty as UIElement;
                if (element != null) {
                    UIElement propertyClone = element.DeepClone ();
                    property.SetValue (result, propertyClone);
                } else {
                    try {
                        property.SetValue (result, sourceProperty);
                    }
                    catch (Exception ex) {
                        System.Diagnostics.Debug.WriteLine (ex);
                    }
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50156105_50156394_1_12
50156105_50174261_1_43
Title: Convert LINQ (Entity Framework) nested Any's to take N parameters 
----------------------------------------

public void PhraseSearch () {
    var dataSet = new [] {"First", "Second", "Third", "Forth", "Five",};
    var goodSearch = new [] {"First", "Second", "Third"};
    var badSearch = new [] {"First", "NOTFOUND", "Third"};
    Console.WriteLine (SubsequenceMatch (dataSet, new [] {"First", "Second", "Third"}));
    Console.WriteLine (SubsequenceMatch (dataSet, new [] {"First", "NOTFOUND", "Third"}));
    Console.WriteLine (SubsequenceMatch (dataSet, new [] {"Second", "Third", "Forth"}));
    Console.WriteLine (SubsequenceMatch (dataSet, new [] {"Second", "Third", "Forth", "Five"}));
}
----------------------------------------

public void PhraseSearch () {
    var DataSet = new List < Word > {new Word {Text = "First", Sequence = 0}, new Word {Text = "Second", Sequence = 1}, new Word {Text = "Third", Sequence = 2}, new Word {Text = "Forth", Sequence = 3}, new Word {Text = "Five", Sequence = 4}};
    var goodSearch1 = new [] {"Second"};
    var goodSearch2 = new [] {"First", "Second"};
    var goodSearch3 = new [] {"Second", "Third", "Forth"};
    var badSearch = new [] {"First", "NOTFOUND", "Third"};
    int idxTosearch = 0;
    var result = DataSet.Any (wrd = > wrd.Text == goodSearch1 [idxTosearch] && NextAny (goodSearch1, idxTosearch + 1, DataSet, wrd));
    Assert.That (result, Is.True);
    idxTosearch = 0;
    result = DataSet.Any (wrd = > wrd.Text == goodSearch2 [0] && NextAny (goodSearch2, idxTosearch + 1, DataSet, wrd));
    Assert.That (result, Is.True);
    idxTosearch = 0;
    result = DataSet.Any (wrd = > wrd.Text == goodSearch3 [0] && NextAny (goodSearch3, idxTosearch + 1, DataSet, wrd));
    Assert.That (result, Is.True);
    idxTosearch = 0;
    result = DataSet.Any (wrd = > wrd.Text == badSearch [0] && NextAny (badSearch, idxTosearch + 1, DataSet, wrd));
    Assert.That (result, Is.False);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50167428_50167496_1_17
50167428_50167735_1_18
Title: How to load perticular texts of text file to perticular textboxes 
----------------------------------------

private void btn_LoadFile_Click (object sender, EventArgs e) {
    OpenFileDialog fdlg = new OpenFileDialog ();
    if (fdlg.ShowDialog () == System.Windows.Forms.DialogResult.OK) {
        System.IO.StreamReader sr = new System.IO.StreamReader (fdlg.FileName);
        string [] lines = sr.ReadToEnd ().Split ('\n');
        Console.WriteLine (lines [0]);
        string [] splitWithEqualTo = lines [0].Split ('=');
        tb_SerialNo.Text = splitWithEqualTo [1];
    }
}
----------------------------------------

private void btn_LoadFile_Click (object sender, EventArgs e) {
    OpenFileDialog fdlg = new OpenFileDialog ();
    if (fdlg.ShowDialog () == System.Windows.Forms.DialogResult.OK) {
        System.IO.StreamReader sr = new System.IO.StreamReader (fdlg.FileName);
        string [] lines = sr.ReadToEnd ().Split ('\n');
        PrintText (tb_SerialNo, lines [0]);
        PrintText (tb_TypeNo, lines [1]);
        PrintText (tb_TestEngineer, lines [2]);
        PrintText (tb_Date, lines [3]);
        PrintText (tb_Test1, lines [4]);
        PrintText (tb_Test2, lines [5]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5028028_5028150_17_22
5028028_5028150_9_15
Title: Create a simple hash value of database columns using c# .net 
----------------------------------------

public bool Equals (ContactDetails other) {
    if (ReferenceEquals (null, other))
        return false;

    if (ReferenceEquals (this, other))
        return true;

    return Equals (other.Name, Name) && Equals (other.Address, Address);
}
----------------------------------------

public override bool Equals (object obj) {
    if (ReferenceEquals (null, obj))
        return false;

    if (ReferenceEquals (this, obj))
        return true;

    if (obj.GetType () != typeof (ContactDetails))
        return false;

    return Equals ((ContactDetails) obj);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5029724_12742483_6_18
5029724_5029755_3_27
Title: AvalonEdit WPF TextEditor (SharpDevelop): How to highlight a specific range of text? 
----------------------------------------

protected override void ColorizeLine (DocumentLine line) {
    if (line.Length == 0)
        return;

    if (line.Offset < StartOffset || line.Offset > EndOffset)
        return;

    int start = line.Offset > StartOffset ? line.Offset : StartOffset;
    int end = EndOffset > line.EndOffset ? line.EndOffset : EndOffset;
    ChangeLinePart (start, end, element = > element.TextRunProperties.SetForegroundBrush (Brushes.Red));
}
----------------------------------------

protected override void ColorizeLine (DocumentLine line) {
    int lineStartOffset = line.Offset;
    string text = CurrentContext.Document.GetText (line);
    int start = 0;
    int index;
    while ((index = text.IndexOf ("AvalonEdit", start)) >= 0) {
        base.ChangeLinePart (lineStartOffset + index, lineStartOffset + index + 10, (VisualLineElement element) = > {
            Typeface tf = element.TextRunProperties.Typeface;
            element.TextRunProperties.SetTypeface (new Typeface (tf.FontFamily, FontStyles.Italic, FontWeights.Bold, tf.Stretch));
        });
        start = index + 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50339301_50339706_1_27
50339301_50340130_1_16
Title: Sorting correct scores to correct names (Parallel Arrays) C# 
----------------------------------------

private static void Main () {
    int numStudents = GetIntFromUser ("Enter the number of students: ");
    int [] scores = new int [numStudents];
    string [] names = new string [numStudents];
    for (int i = 0; i < numStudents; i ++) {
        Console.WriteLine ("\nStudent #" + (i + 1));
        Console.Write (" - Enter student's name: ");
        names [i] = Console.ReadLine ();
        scores [i] = GetIntFromUser (" - Enter student's score: ");
    }
    Console.WriteLine ("\nHere are the students who scored less than 40:");
    for (int i = 0; i < numStudents; i ++) {
        if (scores [i] < 40) {
            Console.WriteLine (" - " + names [i] + " scored " + scores [i]);
        }
    }
    GetKeyFromUser ("\nDone! Press any key to exit...");
}
----------------------------------------

static void Main (string [] args) {
    int [] classScores = new int [] {30, 50, 25, 39, 62};
    string [] firstNames = new string [] {"Jim", "John", "Mary", "Peter", "Sarah"};
    string [] lastNames = new string [] {"Thorpe", "Smith", "Jones", "Tork", "Conner"};
    int [] index = new int [] {0, 1, 2, 3, 4};
    Array.Sort (classScores, index);
    for (int i = 0; i < classScores.Length; i ++) {
        if (classScores [i] < 40) {
            Console.WriteLine (classScores [i] + " " + firstNames [index [i]] + " " + lastNames [index [i]]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5034646_5034696_1_29
5034646_5034708_1_22
Title: What is good practice when writing a method that modifies a c# collection 
----------------------------------------

private static Dictionary < int, string > FindMatches (string queryFormat, string region, string type, string label) {
    var records = new Dictionary < int, string > ();
    var query = string.Format (queryFormat, SqlSvrName, SqlDbName, SqlSchemaName, region, type, label);
    using (var dr = DataRepository.Provider.ExecuteReader (CommandType.Text, query))
    {
        if (dr != null && ! dr.IsClosed) {
            while (dr.Read ()) {
                var assetID = (int) dr.GetDouble (0);
                if (! records.ContainsKey (assetID)) {
                    records [assetID] = dr.GetString (1);
                }
            }
        }
    } return records;
}
----------------------------------------

private static void FindMatches (ref Dictionary < int, string > records, string queryFormat, string region, string type, string label) {
    var query = string.Format (queryFormat, SqlSvrName, SqlDbName, SqlSchemaName, region, type, label);
    using (var dr = DataRepository.Provider.ExecuteReader (CommandType.Text, query))
    {
        if (dr != null && ! dr.IsClosed) {
            while (dr.Read ()) {
                var assetID = (int) dr.GetDouble (0);
                if (! records.ContainsKey (assetID))
                    records [assetID] = dr.GetString (1);

            }
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50368114_50368178_2_24
50368114_50368256_1_16
Title: Check if Database exists MSSQL C# 
----------------------------------------

private bool CheckDatabase (string databaseName) {
    var connString = "Server=localhost\\SQLEXPRESS;Integrated Security=SSPI;database=master";
    var cmdText = "select count(*) from master.dbo.sysdatabases where name=@database";
    using (var sqlConnection = new SqlConnection (connString))
    {
        using (var sqlCmd = new SqlCommand (cmdText, sqlConnection))
        {
            sqlCmd.Parameters.Add ("@database", System.Data.SqlDbType.NVarChar).Value = databaseName;
            sqlConnection.Open ();
            return Convert.ToInt32 (sqlCmd.ExecuteScalar ()) == 1;
        }}}
----------------------------------------

private bool CheckDatabase (string databaseName) {
    string connString = "Server=localhost\\SQLEXPRESS;Integrated Security=SSPI;database=master";
    string cmdText = @"if Exists(select 1 from master.dbo.sysdatabases where name=@db) 
                       select 1 else select 0";
    using (SqlConnection sqlConnection = new SqlConnection (connString))
    {
        sqlConnection.Open ();
        using (SqlCommand sqlCmd = new SqlCommand (cmdText, sqlConnection))
        {
            sqlCmd.Parameters.Add ("@db", SqlDbType.NVarChar).Value = databaseName;
            int nRet = Convert.ToInt32 (sqlCmd.ExecuteScalar ());
            return (nRet > 0);
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5037012_11974030_5_24
5037012_14502471_13_30
Title: Making pyramid using c# 
----------------------------------------

static void Main (string [] args) {
    int num, i, j, k;
    Console.Write ("enter the level:");
    num = Convert.ToInt32 (Console.ReadLine ());
    for (i = 1; i <= num; i ++) {
        for (j = 1; j < num - i + 1; j ++) {
            Console.Write (" ");
        }
        for (k = 1; k <= i; k ++) {
            Console.Write (i);
            Console.Write (" ");
        }
        Console.WriteLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("enter a number:");
    int n = Convert.ToInt32 (Console.ReadLine ());
    for (int i = 1; i <= n; i ++) {
        for (int x = i; x <= n; x ++) {
            Console.Write (" ");
        }
        for (int j = 1; j <= i; j ++) {
            Console.Write ("*" + " ");
        }
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5037012_11974030_5_24
5037012_14801472_5_32
Title: Making pyramid using c# 
----------------------------------------

static void Main (string [] args) {
    int num, i, j, k;
    Console.Write ("enter the level:");
    num = Convert.ToInt32 (Console.ReadLine ());
    for (i = 1; i <= num; i ++) {
        for (j = 1; j < num - i + 1; j ++) {
            Console.Write (" ");
        }
        for (k = 1; k <= i; k ++) {
            Console.Write (i);
            Console.Write (" ");
        }
        Console.WriteLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    int num;
    Console.WriteLine ("enter level");
    num = Int32.Parse (Console.ReadLine ());
    int count = 1;
    for (int lines = num; lines >= 1; lines --) {
        for (int spaces = lines - 1; spaces >= 1; spaces --) {
            Console.Write (" ");
        }
        for (int star = 1; star <= count; star ++) {
            Console.Write ("*");
            Console.Write (" ");
        }
        count ++;
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5037012_11974030_5_24
5037012_20349063_5_75
Title: Making pyramid using c# 
----------------------------------------

static void Main (string [] args) {
    int num, i, j, k;
    Console.Write ("enter the level:");
    num = Convert.ToInt32 (Console.ReadLine ());
    for (i = 1; i <= num; i ++) {
        for (j = 1; j < num - i + 1; j ++) {
            Console.Write (" ");
        }
        for (k = 1; k <= i; k ++) {
            Console.Write (i);
            Console.Write (" ");
        }
        Console.WriteLine ();
    }
}
----------------------------------------

static void Main () {
    int row, i, j;
    row = 5;
    int temp;
    temp = row;
    for (j = 1; j <= row; j ++) {
        for (i = 1; i <= 2 * temp - 1; i ++)
            Console.Write ("*");

        Console.Write ("\n");
        for (i = 1; i <= j; i ++)
            Console.Write (" ");

        temp --;
    }
    int rowx, k, l;
    rowx = 5;
    int tempx;
    tempx = rowx;
    Console.Write ("\n");
    for (l = 1; l <= rowx; l ++) {
        for (k = 1; k < tempx; k ++)
            Console.Write (" ");

        tempx --;
        for (k = 1; k <= 2 * l - 1; k ++)
            Console.Write ("*");

        Console.Write ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5037012_14502471_13_30
5037012_14801472_5_32
Title: Making pyramid using c# 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("enter a number:");
    int n = Convert.ToInt32 (Console.ReadLine ());
    for (int i = 1; i <= n; i ++) {
        for (int x = i; x <= n; x ++) {
            Console.Write (" ");
        }
        for (int j = 1; j <= i; j ++) {
            Console.Write ("*" + " ");
        }
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    int num;
    Console.WriteLine ("enter level");
    num = Int32.Parse (Console.ReadLine ());
    int count = 1;
    for (int lines = num; lines >= 1; lines --) {
        for (int spaces = lines - 1; spaces >= 1; spaces --) {
            Console.Write (" ");
        }
        for (int star = 1; star <= count; star ++) {
            Console.Write ("*");
            Console.Write (" ");
        }
        count ++;
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5037012_14502471_13_30
5037012_20349063_5_75
Title: Making pyramid using c# 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("enter a number:");
    int n = Convert.ToInt32 (Console.ReadLine ());
    for (int i = 1; i <= n; i ++) {
        for (int x = i; x <= n; x ++) {
            Console.Write (" ");
        }
        for (int j = 1; j <= i; j ++) {
            Console.Write ("*" + " ");
        }
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    int row, i, j;
    row = 5;
    int temp;
    temp = row;
    for (j = 1; j <= row; j ++) {
        for (i = 1; i <= 2 * temp - 1; i ++)
            Console.Write ("*");

        Console.Write ("\n");
        for (i = 1; i <= j; i ++)
            Console.Write (" ");

        temp --;
    }
    int rowx, k, l;
    rowx = 5;
    int tempx;
    tempx = rowx;
    Console.Write ("\n");
    for (l = 1; l <= rowx; l ++) {
        for (k = 1; k < tempx; k ++)
            Console.Write (" ");

        tempx --;
        for (k = 1; k <= 2 * l - 1; k ++)
            Console.Write ("*");

        Console.Write ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5037012_14801472_5_32
5037012_20349063_5_75
Title: Making pyramid using c# 
----------------------------------------

static void Main (string [] args) {
    int num;
    Console.WriteLine ("enter level");
    num = Int32.Parse (Console.ReadLine ());
    int count = 1;
    for (int lines = num; lines >= 1; lines --) {
        for (int spaces = lines - 1; spaces >= 1; spaces --) {
            Console.Write (" ");
        }
        for (int star = 1; star <= count; star ++) {
            Console.Write ("*");
            Console.Write (" ");
        }
        count ++;
        Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main () {
    int row, i, j;
    row = 5;
    int temp;
    temp = row;
    for (j = 1; j <= row; j ++) {
        for (i = 1; i <= 2 * temp - 1; i ++)
            Console.Write ("*");

        Console.Write ("\n");
        for (i = 1; i <= j; i ++)
            Console.Write (" ");

        temp --;
    }
    int rowx, k, l;
    rowx = 5;
    int tempx;
    tempx = rowx;
    Console.Write ("\n");
    for (l = 1; l <= rowx; l ++) {
        for (k = 1; k < tempx; k ++)
            Console.Write (" ");

        tempx --;
        for (k = 1; k <= 2 * l - 1; k ++)
            Console.Write ("*");

        Console.Write ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50491897_50492180_3_36
50491897_50492209_1_22
Title: make simple program using 'while' and 'do' 
----------------------------------------

static void Main (string [] args) {
    int a = 0;
    int b = 0;
    int c = 4;
    while (a <= c) {
        b = 0;
        while (b <= a) {
            Console.Write ("*");
            b ++;
        }
        a ++;
        Console.WriteLine ();
    }
    Console.WriteLine ();
    if (a > c) {
        a --;
        while (a >= 0) {
            b = a;
            while (b >= 0) {
                Console.Write ("*");
                b --;
            }
            a --;
            Console.WriteLine ();
        }
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    int numStars = 1;
    int maxNumStars = 5;
    while (numStars <= maxNumStars) {
        Console.WriteLine (new string ('*', numStars));
        numStars ++;
    }
    while (numStars >= 1) {
        Console.WriteLine (new string ('*', numStars));
        numStars --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50504438_50504515_1_18
50504438_50504604_1_15
Title: Multiple texts to array 
----------------------------------------

public void SelectFiles () {
    int i;
    SelectedFileText.Text = "";
    dlg = new Microsoft.Win32.OpenFileDialog ();
    dlg.Multiselect = true;
    Nullable < bool > result = dlg.ShowDialog ();
    foreach (String filename in dlg.FileNames) {
        SelectedFileText.Text += filename + "\n";
        uploadFileList.Add (filename);
    }
}
----------------------------------------

public void SelectFiles () {
    dlg = new Microsoft.Win32.OpenFileDialog ();
    dlg.Multiselect = true;
    Nullable < bool > result = dlg.ShowDialog ();
    if (result == true) {
        uploadFileList.Clear ();
        uploadFileList.AddRange (dlg.FileNames);
        SelectedFileText.Text = String.Join (Environment.NewLine, uploadFileList);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5051528_15532154_82_116
5051528_15615038_5_24
Title: How to calculate matrix determinant? n*n or just 5*5 
----------------------------------------

private static void Main (string [] args) {
    Matrix mat03 = new Matrix (new [,] {{1.0, 2.0, - 1.0}, {- 2.0, - 5.0, - 1.0}, {1.0, - 1.0, - 2.0},});
    Matrix mat04 = new Matrix (new [,] {{1.0, 2.0, 1.0, 3.0}, {- 2.0, - 5.0, - 2.0, 1.0}, {1.0, - 1.0, - 3.0, 2.0}, {4.0, - 1.0, - 3.0, 1.0},});
    Matrix mat05 = new Matrix (new [,] {{1.0, 2.0, 1.0, 2.0, 3.0}, {2.0, 1.0, 2.0, 2.0, 1.0}, {3.0, 1.0, 3.0, 1.0, 2.0}, {1.0, 2.0, 4.0, 3.0, 2.0}, {2.0, 2.0, 1.0, 2.0, 1.0},});
    double determinant = mat03.deterMatrix ();
    Console.WriteLine ("determinant is: {0}", determinant);
    determinant = mat04.deterMatrix ();
    Console.WriteLine ("determinant is: {0}", determinant);
    determinant = mat05.deterMatrix ();
    Console.WriteLine ("determinant is: {0}", determinant);
}
----------------------------------------

private static void Main (string [] args) {
    float [,] m = MatrixCreate (4, 4);
    m [0, 0] = 3.0f;
    m [0, 1] = 7.0f;
    m [0, 2] = 2.0f;
    m [0, 3] = 5.0f;
    m [1, 0] = 1.0f;
    m [1, 1] = 8.0f;
    m [1, 2] = 4.0f;
    m [1, 3] = 2.0f;
    m [2, 0] = 2.0f;
    m [2, 1] = 1.0f;
    m [2, 2] = 9.0f;
    m [2, 3] = 3.0f;
    m [3, 0] = 5.0f;
    m [3, 1] = 4.0f;
    m [3, 2] = 7.0f;
    m [3, 3] = 1.0f;
    int [] perm;
    int toggle;
    float [,] luMatrix = MatrixDecompose (m, out perm, out toggle);
    float [,] lower = ExtractLower (luMatrix);
    float [,] upper = ExtractUpper (luMatrix);
    float det = MatrixDeterminant (m);
    Console.WriteLine ("Determinant of m computed via decomposition = " + det.ToString ("F1"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
505175_505198_1_17
505175_505330_1_13
Title: "C# - What is the best way to get a list of the weeks in a month given a starting weekday?" 
----------------------------------------

public static List < DateTime > GetWeeks (this DateTime month, DayOfWeek startOfWeek) {
    var firstOfMonth = new DateTime (month.Year, month.Month, 1);
    var daysToAdd = ((Int32) startOfWeek - (Int32) month.DayOfWeek) % 7;
    var firstStartOfWeek = firstOfMonth.AddDays (daysToAdd);
    var current = firstStartOfWeek;
    var weeks = new List < DateTime > ();
    while (current.Month == month.Month) {
        weeks.Add (current);
        current = current.AddDays (7);
    }
    return weeks;
}
----------------------------------------

public IEnumerable < DateTime > GetWeeks (DateTime date, DayOfWeek startDay) {
    var list = new List < DateTime > ();
    DateTime first = new DateTime (date.Year, date.Month, 1);
    for (var i = first; i < first.AddMonths (1); i = i.AddDays (1)) {
        if (i.DayOfWeek == startDay)
            list.Add (i);

    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50599660_50604333_3_20
50599660_50638574_3_63
Title: CRM Plugin: how to update associated contacts' addresses when you update account address 
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    var factory = (IOrganizationServiceFactory) serviceProvider.GetService (typeof (IOrganizationServiceFactory));
    var orgService = factory.CreateOrganizationService (null);
    var context = (IPluginExecutionContext) serviceProvider.GetService (typeof (IPluginExecutionContext));
    Entity account = context.PostEntityImages.First ().Value;
    var query = new QueryExpression ("contact");
    query.Criteria.AddCondition ("accountid", ConditionOperator.Equal, context.PrimaryEntityId);
    var result = orgService.RetrieveMultiple (query);
    foreach (Entity contact in result.Entities) {
        contact ["address1_line1"] = account.GetAttributeValue < string > ("address1_line2");
        orgService.Update (contact);
    }
}
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    ITracingService tracing = (ITracingService) serviceProvider.GetService (typeof (ITracingService));
    try {
        IPluginExecutionContext pluginExecutionContext = (IPluginExecutionContext) serviceProvider.GetService (typeof (IPluginExecutionContext));
        IOrganizationServiceFactory factory = (IOrganizationServiceFactory) serviceProvider.GetService (typeof (IOrganizationServiceFactory));
        IOrganizationService service = factory.CreateOrganizationService (null);
        if (pluginExecutionContext.InputParameters.Contains ("Target") && pluginExecutionContext.InputParameters ["Target"] is Entity) {
            Entity account = (pluginExecutionContext.InputParameters ["Target"] as Entity);
            if (account.LogicalName != "account") {
                tracing.Trace ("This entity is not an Account entity. It is likely that this plug-in was not registered correctly (was an incorrect \"Primary Entity\" selected? It should be an Account entity).");
                return;
            }
            var query = new QueryExpression ("contact");
            query.Criteria.AddCondition ("accountid", ConditionOperator.Equal, pluginExecutionContext.PrimaryEntityId);
            var result = service.RetrieveMultiple (query);
            tracing.Trace ("The QueryExpression found " + result.TotalRecordCount.ToString () + " associated contacts.");
            foreach (Entity contact in result.Entities) {
                tracing.Trace ("Updating contact " + contact.ToString () + " address...");
                contact ["address1_line1"] = account.GetAttributeValue < string > ("address1_line1");
                contact ["address1_line2"] = account.GetAttributeValue < string > ("address1_line2");
                contact ["address1_line3"] = account.GetAttributeValue < string > ("address1_line3");
                contact ["address1_city"] = account.GetAttributeValue < string > ("address1_city");
                contact ["address1_county"] = account.GetAttributeValue < string > ("address1_county");
                contact ["address1_postalcode"] = account.GetAttributeValue < string > ("address1_postalcode");
                contact ["address1_country"] = account.GetAttributeValue < string > ("address1_country");
                service.Update (contact);
                tracing.Trace ("Contact " + contact.ToString () + " address updated.");
            }
        }
        tracing.Trace ("Completed execution of plugin " + this.GetType ().Name + ".");
    }
    catch (FaultException < OrganizationServiceFault > ex) {
        throw new InvalidPluginExecutionException ("An error occurred in plugin " + this.GetType ().Name + ".", ex);
    }
    catch (Exception ex) {
        tracing.Trace ("An error occurred executing plugin " + this.GetType ().Name + ".");
        tracing.Trace ("\t\tError: " + ex.Message);
        throw ex;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50610731_50610988_1_25
50610731_50611859_9_30
Title: Replace a specific sub-string at specific position using LINQ 
----------------------------------------

public static void Main () {
    List < Abbreviation > abbreviations = new List < Abbreviation > ();
    abbreviations.Add (new Abbreviation () {Pos = 29, ShortName = "exp.", LongName = "expression"});
    abbreviations.Add (new Abbreviation () {Pos = 39, ShortName = "para.", LongName = "paragraph"});
    abbreviations.Add (new Abbreviation () {Pos = 54, ShortName = "ans.", LongName = "answer"});
    string test = "What is exp.? This is a test exp. in a para. contains ans. for a question";
    var offset = 0;
    abbreviations.ForEach (x = > {
        if (test.Substring (x.Pos + offset, x.ShortName.Length) == x.ShortName) {
            test = test.Remove (x.Pos + offset, x.ShortName.Length);
            test = test.Insert (x.Pos + offset, x.LongName);
            offset += x.LongName.Length - x.ShortName.Length;
        }
    });
    Console.WriteLine (test);
}
----------------------------------------

static void Main (string [] args) {
    List < Abbreviation > abbreviations = new List < Abbreviation > ();
    abbreviations.Add (new Abbreviation () {Pos = 29, ShortName = "exp.", LongName = "expression"});
    abbreviations.Add (new Abbreviation () {Pos = 39, ShortName = "para.", LongName = "paragraph"});
    abbreviations.Add (new Abbreviation () {Pos = 54, ShortName = "ans.", LongName = "answer"});
    string test = "What is exp.? This is a test exp. in a para. contains ans. for a question";
    string temp = "";
    int tempPos = 0;
    foreach (Abbreviation x in abbreviations) {
        if (! String.IsNullOrEmpty (test) && (test.Length >= x.Pos + x.ShortName.Length) && test.Substring (x.Pos, x.ShortName.Length) == x.ShortName) {
            temp += test.Substring (tempPos, x.Pos) + x.LongName;
        }
        tempPos = x.Pos + x.ShortName.Length;
    }
    Console.WriteLine (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50618352_50618394_1_17
50618352_50618845_1_17
Title: Only allowing yes or no as an answer 
----------------------------------------

static public bool askBool (string question) {
    Console.Write (question);
    var input = Console.ReadLine ();
    if (input == "y") {
        return true;
    } else if (input == "n") {
        return false;
    } else {
        throw new FormatException ("Only y or n Allowed");
    }
}
----------------------------------------

static public bool askBool (string question) {
    while (true) {
        Console.Clear ();
        Console.Write (question);
        var input = Console.ReadLine ().Trim ().ToLowerInvariant ();
        switch (input) {
            case "y" : case "yes" :
                return true;
            case "n" : case "no" :
                return false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50620152_50620207_14_20
50620152_50620207_1_5
Title: "Which item is returned from Intersect the one from first or from second enumerable?" 
----------------------------------------

static IEnumerable < TSource > IntersectIterator < TSource > (IEnumerable < TSource > first, IEnumerable < TSource > second, IEqualityComparer < TSource > comparer) {
    Set < TSource > set = new Set < TSource > (comparer);
    foreach (TSource element in second)
        set.Add (element);

    foreach (TSource element in first)
        if (set.Remove (element))
            yield return element;

}
----------------------------------------

public static IEnumerable < TSource > Intersect < TSource > (this IEnumerable < TSource > first, IEnumerable < TSource > second) {
    if (first == null)
        throw Error.ArgumentNull ("first");

    if (second == null)
        throw Error.ArgumentNull ("second");

    return IntersectIterator < TSource > (first, second, null);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50620152_50620207_14_20
50620152_50620207_7_12
Title: "Which item is returned from Intersect the one from first or from second enumerable?" 
----------------------------------------

static IEnumerable < TSource > IntersectIterator < TSource > (IEnumerable < TSource > first, IEnumerable < TSource > second, IEqualityComparer < TSource > comparer) {
    Set < TSource > set = new Set < TSource > (comparer);
    foreach (TSource element in second)
        set.Add (element);

    foreach (TSource element in first)
        if (set.Remove (element))
            yield return element;

}
----------------------------------------

public static IEnumerable < TSource > Intersect < TSource > (this IEnumerable < TSource > first, IEnumerable < TSource > second, IEqualityComparer < TSource > comparer) {
    if (first == null)
        throw Error.ArgumentNull ("first");

    if (second == null)
        throw Error.ArgumentNull ("second");

    return IntersectIterator < TSource > (first, second, comparer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50620152_50620207_1_5
50620152_50620207_7_12
Title: "Which item is returned from Intersect the one from first or from second enumerable?" 
----------------------------------------

public static IEnumerable < TSource > Intersect < TSource > (this IEnumerable < TSource > first, IEnumerable < TSource > second) {
    if (first == null)
        throw Error.ArgumentNull ("first");

    if (second == null)
        throw Error.ArgumentNull ("second");

    return IntersectIterator < TSource > (first, second, null);
}
----------------------------------------

public static IEnumerable < TSource > Intersect < TSource > (this IEnumerable < TSource > first, IEnumerable < TSource > second, IEqualityComparer < TSource > comparer) {
    if (first == null)
        throw Error.ArgumentNull ("first");

    if (second == null)
        throw Error.ArgumentNull ("second");

    return IntersectIterator < TSource > (first, second, comparer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50637721_50652673_21_40
50637721_50652673_64_83
Title: combination of numbers from different groups 
----------------------------------------

static IEnumerable < SelectedGroups < T > > ChooseGroups211 < T > (IList < IList < T > > groups) {
    for (var i = 0; i < groups.Count; i ++) {
        var outer = groups [i];
        for (var j = 0; j < groups.Count - 1; j ++) {
            if (i == j)
                continue;

            var first = groups [j];
            for (var k = j + 1; k < groups.Count; k ++) {
                if (i == k)
                    continue;

                yield return new SelectedGroups < T > (outer, first, groups [k]);
                ;}
        }
    }
}
----------------------------------------

static IEnumerable < SelectionResult < T > > Select211FromGroups < T > (SelectedGroups < T > groups) {
    for (var i = 0; i < groups.Choose2.Count - 1; i ++) {
        var value11 = groups.Choose2 [i];
        for (var j = i + 1; j < groups.Choose2.Count; j ++) {
            var value12 = groups.Choose2 [j];
            foreach (var value3 in groups.Choose1_1) {
                foreach (var value4 in groups.Choose1_2) {
                    yield return new SelectionResult < T > (value11, value12, value3, value4);
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50693611_50693699_9_30
50693611_50693733_1_14
Title: I need to remove white spaces from console input that forms a list 
----------------------------------------

static void Main (string [] args) {
    string tokens = Console.ReadLine ();
    List < string > list = tokens.Split ('|').ToList ();
    List < string > listTwo = new List < string > (list.Count);
    foreach (var token in list) {
        token.Split (" ");
        listTwo.Add (token);
    }
    foreach (var token in listTwo) {
        listTwo.Remove (" ");
    }
    for (int i = listTwo.Count - 1; i > 0; i --) {
        Console.Write (listTwo [i]);
    }
}
----------------------------------------

static void Main (string [] args) {
    string tokens = "1 2 3 |4 5 6 | 7 8";
    var list = tokens.Split ('|');
    list = list.Reverse ().Select (n = > n.Trim ().PadRight (n.Length, ' ')).ToArray ();
    for (int i = 0; i < list.Length; i ++) {
        Console.Write (list [i]);
    }
    Console.ReadLine ();
}
----------------------------------------

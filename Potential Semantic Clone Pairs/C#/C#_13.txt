$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2246017_2246083_1_11
2246017_53406754_1_11
Title: Using Google Translate in C# 
----------------------------------------

public string TranslateText (string input, string languagePair) {
    string url = String.Format ("http://www.google.com/translate_t?hl=en&ie=UTF8&text={0}&langpair={1}", input, languagePair);
    WebClient webClient = new WebClient ();
    webClient.Encoding = System.Text.Encoding.UTF8;
    string result = webClient.DownloadString (url);
    result = result.Substring (result.IndexOf ("<span title=\"") + "<span title=\"".Length);
    result = result.Substring (result.IndexOf ("><![CDATA[") + 1);
    result = result.Substring (0, result.IndexOf ("</span>"));
    return result.Trim ();
}
----------------------------------------

public string TranslateText (string input, string languagePair) {
    string url = String.Format ("http://www.google.com/translate_t?hl=en&ie=UTF8&text={0}&langpair={1}", input, languagePair);
    WebClient webClient = new WebClient ();
    webClient.Encoding = System.Text.Encoding.Default;
    string result = webClient.DownloadString (url);
    result = result.Substring (result.IndexOf ("TRANSLATED_TEXT"));
    result = result.Substring (result.IndexOf ("'") + 1);
    result = result.Substring (0, result.IndexOf ("'"));
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2246017_50231085_1_10
2246017_53406754_1_11
Title: Using Google Translate in C# 
----------------------------------------

public static string TranslateText (string input, string languagePair) {
    string url = String.Format ("http://www.google.com/translate_t?hl=en&ie=UTF8&text={0}&langpair={1}", input, languagePair);
    HttpClient httpClient = new HttpClient ();
    string result = httpClient.GetStringAsync (url).Result;
    result = result.Substring (result.IndexOf ("<span title=\"") + "<span title=\"".Length);
    result = result.Substring (result.IndexOf ("><![CDATA[") + 1);
    result = result.Substring (0, result.IndexOf ("</span>"));
    return result.Trim ();
}
----------------------------------------

public string TranslateText (string input, string languagePair) {
    string url = String.Format ("http://www.google.com/translate_t?hl=en&ie=UTF8&text={0}&langpair={1}", input, languagePair);
    WebClient webClient = new WebClient ();
    webClient.Encoding = System.Text.Encoding.Default;
    string result = webClient.DownloadString (url);
    result = result.Substring (result.IndexOf ("TRANSLATED_TEXT"));
    result = result.Substring (result.IndexOf ("'") + 1);
    result = result.Substring (0, result.IndexOf ("'"));
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2246228_2255359_1_12
2246228_2261289_1_6
Title: Set Range of Bits in a ushort 
----------------------------------------

public static ushort SetRange (ushort valueToMod, int startIndex, int endIndex, ushort rangeValueToAssign) {
    ushort max_value = Convert.ToUInt16 (Math.Pow (2.0, (endIndex - startIndex) + 1.0) - 1);
    if (rangeValueToAssign > max_value)
        throw new Exception ("Value To Large For Range");

    for (int i = startIndex; i < endIndex; i ++)
        valueToMod &= ~ (1 << i);

    ushort value_to_add = (ushort) (rangeValueToAssign << startIndex);
    return (ushort) (valueToMod + value_to_add);
}
----------------------------------------

public static int SetRange (int num, int from, int to, int value) {
    if (from < 0 || from > to || to >= 32)
        throw new ArgumentException ("from/to are not valid");

    if (value >= (2 << (to - from)) && (to - from < 31))
        throw new ArgumentException ("value is too large");

    return num & ~ (((2 << to) - 1) - ((1 << from) - 1)) | (value << from);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2246228_2255359_1_12
2246228_2261289_8_13
Title: Set Range of Bits in a ushort 
----------------------------------------

public static ushort SetRange (ushort valueToMod, int startIndex, int endIndex, ushort rangeValueToAssign) {
    ushort max_value = Convert.ToUInt16 (Math.Pow (2.0, (endIndex - startIndex) + 1.0) - 1);
    if (rangeValueToAssign > max_value)
        throw new Exception ("Value To Large For Range");

    for (int i = startIndex; i < endIndex; i ++)
        valueToMod &= ~ (1 << i);

    ushort value_to_add = (ushort) (rangeValueToAssign << startIndex);
    return (ushort) (valueToMod + value_to_add);
}
----------------------------------------

public static ushort SetRange (ushort num, int from, int to, ushort value) {
    if (from < 0 || from > to || to >= 16)
        throw new ArgumentException ("from/to are not valid");

    if (value >= (2 << (to - from)))
        throw new ArgumentException ("value is too large");

    return (ushort) (num & ~ (((2 << to) - 1) - ((1 << from) - 1)) | (value << from));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2246228_2261289_1_6
2246228_2261289_8_13
Title: Set Range of Bits in a ushort 
----------------------------------------

public static int SetRange (int num, int from, int to, int value) {
    if (from < 0 || from > to || to >= 32)
        throw new ArgumentException ("from/to are not valid");

    if (value >= (2 << (to - from)) && (to - from < 31))
        throw new ArgumentException ("value is too large");

    return num & ~ (((2 << to) - 1) - ((1 << from) - 1)) | (value << from);
}
----------------------------------------

public static ushort SetRange (ushort num, int from, int to, ushort value) {
    if (from < 0 || from > to || to >= 16)
        throw new ArgumentException ("from/to are not valid");

    if (value >= (2 << (to - from)))
        throw new ArgumentException ("value is too large");

    return (ushort) (num & ~ (((2 << to) - 1) - ((1 << from) - 1)) | (value << from));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2246228_51732462_21_28
2246228_51732462_7_12
Title: Set Range of Bits in a ushort 
----------------------------------------

public static void SetBits < T, TValue > (ref T bits, byte startIdx, byte count, TValue value) where T : IConvertible where TValue : IConvertible {
    if (startIdx >= (Marshal.SizeOf (typeof (T)) * 8))
        throw new ArgumentOutOfRangeException (nameof (startIdx));

    if (count + startIdx > (Marshal.SizeOf (typeof (T)) * 8))
        throw new ArgumentOutOfRangeException (nameof (count));

    var val = value.ToInt64 (null);
    if (val >= (1 << count))
        throw new ArgumentOutOfRangeException (nameof (value));

    bits = (T) Convert.ChangeType (bits.ToInt64 (null) & ~ (((1 << count) - 1) << startIdx) | (val << startIdx), typeof (T));
}
----------------------------------------

public static T GetBits < T > (T bits, byte startIdx, byte count) where T : IConvertible {
    if (startIdx >= (Marshal.SizeOf (typeof (T)) * 8))
        throw new ArgumentOutOfRangeException (nameof (startIdx));

    if (count + startIdx > (Marshal.SizeOf (typeof (T)) * 8))
        throw new ArgumentOutOfRangeException (nameof (count));

    return (T) Convert.ChangeType ((bits.ToInt64 (null) > > startIdx) & ((1 << count) - 1), typeof (T));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22471499_22471574_1_10
22471499_22471629_1_13
Title: Where clause in Linq and compare strings 
----------------------------------------

public static List < table1 > CRBTsongformis (string sSname) {
    List < table1 > crbtlist = new List < table1 > ();
    using (crbt_onwebEntities dbContext = new crbt_onwebEntities ())
    {
        crbtlist = (from z in dbContext.table1
            where z.CONTENT_NAME == sSname && z.STATUS != null
            select z).ToList ();
    } return crbtlist;
}
----------------------------------------

public static List < table1 > CRBTsongformis (string sSname) {
    List < table1 > crbtlist = new List < table1 > ();
    using (crbt_onwebEntities dbContext = new crbt_onwebEntities ())
    {
        crbtlist = (from z in dbContext.table1
            where z.CONTENT_NAME == sSname && z.STATUS != null
            select z).ToList ();
    } return crbtlist;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22471499_22471574_1_10
22471499_22472411_1_15
Title: Where clause in Linq and compare strings 
----------------------------------------

public static List < table1 > CRBTsongformis (string sSname) {
    List < table1 > crbtlist = new List < table1 > ();
    using (crbt_onwebEntities dbContext = new crbt_onwebEntities ())
    {
        crbtlist = (from z in dbContext.table1
            where z.CONTENT_NAME == sSname && z.STATUS != null
            select z).ToList ();
    } return crbtlist;
}
----------------------------------------

public static List < table1 > CRBTsongformis (string sSname) {
    List < table1 > crbtlist = new List < table1 > ();
    using (crbt_onwebEntities dbContext = new crbt_onwebEntities ())
    {
        crbtlist = (from z in dbContext.table1
            where z.CONTENT_NAME.Contains (sSname) && ! dbContext.table1.Any (e = > e.CONTENT_NAME.Contains (sSname) && e.CONTENT_NAME.Length > sSname.Length) && z.STATUS != null
            select z).ToList ();
    } return crbtlist;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22471499_22471629_1_13
22471499_22472411_1_15
Title: Where clause in Linq and compare strings 
----------------------------------------

public static List < table1 > CRBTsongformis (string sSname) {
    List < table1 > crbtlist = new List < table1 > ();
    using (crbt_onwebEntities dbContext = new crbt_onwebEntities ())
    {
        crbtlist = (from z in dbContext.table1
            where z.CONTENT_NAME == sSname && z.STATUS != null
            select z).ToList ();
    } return crbtlist;
}
----------------------------------------

public static List < table1 > CRBTsongformis (string sSname) {
    List < table1 > crbtlist = new List < table1 > ();
    using (crbt_onwebEntities dbContext = new crbt_onwebEntities ())
    {
        crbtlist = (from z in dbContext.table1
            where z.CONTENT_NAME.Contains (sSname) && ! dbContext.table1.Any (e = > e.CONTENT_NAME.Contains (sSname) && e.CONTENT_NAME.Length > sSname.Length) && z.STATUS != null
            select z).ToList ();
    } return crbtlist;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22493541_22498225_1_40
22493541_22509206_1_19
Title: Passing an Image in C# 
----------------------------------------

protected override void OnNavigatedTo (System.Windows.Navigation.NavigationEventArgs e) {
    try {
        string photo;
        string name;
        string age;
        string breed;
        string price;
        if (NavigationContext.QueryString.TryGetValue ("photo", out photo)) {
            imgPhotoHolder.Source = null;
            BitmapImage myImage = new BitmapImage (new Uri (photo, UriKind.RelativeOrAbsolute));
            imgPhotoHolder.Source = myImage;
        }
        if (NavigationContext.QueryString.TryGetValue ("name", out name)) {
            nameTxtBlock.Text = name;
        }
        if (NavigationContext.QueryString.TryGetValue ("age", out age)) {
            ageTxtBlock.Text = age;
        }
        if (NavigationContext.QueryString.TryGetValue ("breed", out breed)) {
            breedTxtBlock.Text = breed;
        }
        if (NavigationContext.QueryString.TryGetValue ("price", out price)) {
            priceTxtBlock.Text = price;
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

protected override void OnNavigatedTo (System.Windows.Navigation.NavigationEventArgs e) {
    string name, breed, photo, gender, DOB, price;
    if (NavigationContext.QueryString.TryGetValue ("name", out name))
        txtName.Text = name;

    if (NavigationContext.QueryString.TryGetValue ("breed", out breed))
        txtBreed.Text = breed;

    if (NavigationContext.QueryString.TryGetValue ("gender", out gender))
        txtGender.Text = gender;

    if (NavigationContext.QueryString.TryGetValue ("DOB", out DOB))
        txtDOB.Text = DOB;

    if (NavigationContext.QueryString.TryGetValue ("price", out price))
        txtPrice.Text = price;

    if (NavigationContext.QueryString.TryGetValue ("photo", out photo)) {
        BitmapImage image = new BitmapImage (new Uri ("/PetShop_A2;component/" + photo, UriKind.Relative));
        imgDetails.Source = image;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22509115_22509178_3_17
22509115_22509277_1_10
Title: C# Open form using generics? 
----------------------------------------

public static DisplayResult ShowForm < T > (IWin32Window owner, bool canShowForm) where T : Form, new () {
    if (canShowForm) {
        using (T form = new T ())
        {
            return form.ShowDialog (owner);
        }} else {
        MessageBox.Show ("You don't have enough rights to view this form.");
    }
}
----------------------------------------

void ShowFormIfAllowed < TForm > (bool allowed) where TForm : Form, new () {
    if (allowed) {
        using (var form = new TForm ())
        {
            form.ShowDialog (this);
        }} else {
        MessageBox.Show ("You don't have enough rights to view this form.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22511767_22514990_73_81
22511767_22514990_83_92
Title: Sorted data structure 
----------------------------------------

public bool Remove (TKey key) {
    int index = BinarySearch (key);
    if (index < 0)
        return false;

    keys.RemoveAt (index);
    items.RemoveAt (index);
    return true;
}
----------------------------------------

public bool Remove (KeyValuePair < TKey, TItem > item) {
    int index = BinarySearch (item.Key);
    if (index < 0)
        return false;

    index = ~ index;
    keys.RemoveAt (index);
    items.RemoveAt (index);
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22525368_22525610_1_42
22525368_22525717_1_22
Title: Can't check null value with these 2 ways C# datareader Null value Error 
----------------------------------------

public string opt () {
    string strng = "";
    string outval = "";
    SqlConnection conn = new SqlConnection ();
    conn.ConnectionString = ConfigurationManager.ConnectionStrings ["nmrbg"].ConnectionString;
    conn.Open ();
    SqlCommand cmd = new SqlCommand ("nmp_sp_sy", conn);
    cmd.CommandType = CommandType.StoredProcedure;
    SqlDataReader rdr = cmd.ExecuteReader ();
    while (rdr.Read ()) {
        if (rdr ["ColumnName"] != DBNull.Value) {
            int nm = rdr.GetInt32 (0);
            strng = Convert.ToString (nm);
            outval = strng;
        } else {
            outval = "0000";
        }
    }
    if (! rdr.HasRows) {
        outval = "0000";
    }
    rdr.Close ();
    rdr.Dispose ();
    conn.Close ();
    conn.Dispose ();
    return outval;
}
----------------------------------------

public string opt () {
    using (SqlConnection conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["nmrbg"].ConnectionString))
    {
        conn.Open ();
        using (SqlCommand cmd = new SqlCommand ("nmp_sp_sy", conn))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            using (SqlDataReader rdr = cmd.ExecuteReader ())
            {
                if (! rdr.Read ())
                    return "0000";

                Object rawData = rdr.GetValue (0);
                if (Object.RefrenceEquals (null, rawData))
                    return "0000";
                else
                    return rawData.ToString ();

            }}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22550207_22550499_24_35
22550207_22555926_1_12
Title: "Checked in Gridview Button Click for Assign Value to textbox" 
----------------------------------------

protected void Button2_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if ((row.FindControl ("CheckBox1") as CheckBox).Checked) {
            TextBox1.Text = row.Cells [1].Text;
            TextBox2.Text = row.Cells [2].Text;
            TextBox3.Text = row.Cells [3].Text;
        }
    }
}
----------------------------------------

protected void Button2_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if ((row.FindControl ("CheckBox1") as CheckBox).Checked) {
            TextBox1.Text = row.Cells [0].Text;
            TextBox2.Text = row.Cells [1].Text;
            TextBox3.Text = row.Cells [2].Text;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22555541_22555685_1_39
22555541_22558461_1_41
Title: SQLCommand not returning anything in Writeline 
----------------------------------------

static void Main (string [] args) {
    Hashtable sqlDatatypeholder = new Hashtable ();
    string _mySqlUrl = "connection is correct and works in other test apps";
    string _mySqlQuery = "Query is here, it works fine in SQL management studio";
    SqlConnection conn = new SqlConnection (_mySqlUrl);
    SqlCommand comm = new SqlCommand (_mySqlQuery, conn);
    DataTable _tempTable = new DataTable ();
    using (conn)
    {
        SqlCommand command = new SqlCommand (_mySqlQuery, conn);
        conn.Open ();
        SqlDataReader reader = command.ExecuteReader ();
        _tempTable.Load (reader);
        if (_tempTable != null && _tempTable.Rows.Count > 0) {
            for (int v = 0; v < _tempTable.Columns.Count; v ++) {
                DataColumn dc = _tempTable.Columns [v];
                sqlDatatypeholder.Add (dc.ColumnName.ToString (), Convert.ToString (reader.GetSqlValue (v).GetType ()));
            }
            foreach (DictionaryEntry hr in sqlDatatypeholder) {
                Console.WriteLine (hr.Key + " " + hr.Value);
            }
        } else {
            Console.WriteLine ("Connection Open - No rows found.");
        }
        reader.Close ();
    }}
----------------------------------------

static void Main (string [] args) {
    Hashtable sqlDatatypeholder = new Hashtable ();
    DataTable tempTable = new DataTable ();
    string _mySqlUrl = "connection;";
    string _mySqlQuery = "query";
    SqlConnection conn = new SqlConnection (_mySqlUrl);
    using (conn)
    {
        SqlCommand command = new SqlCommand (_mySqlQuery, conn);
        conn.Open ();
        SqlDataReader reader = command.ExecuteReader ();
        DataTable schemaTable = reader.GetSchemaTable ();
        tempTable.Load (reader);
        reader.Close ();
        if (tempTable != null && tempTable.Rows.Count > 0) {
            foreach (DataRow row in schemaTable.Rows) {
                sqlDatatypeholder.Add (row ["ColumnName"], row ["DataTypeName"]);
            }
            foreach (DictionaryEntry a in sqlDatatypeholder) {
                Console.WriteLine (a.Key + " " + a.Value);
            }
            Console.ReadLine ();
        } else {
            Console.WriteLine ("Connection Open - No rows found.");
            Console.ReadLine ();
        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22583825_22583876_1_17
22583825_22584050_1_21
Title: Generic Function within a static non-generic class? 
----------------------------------------

public static Dictionary < T, U > DictionaryFromArrays < T, U > (T [] keys, U [] values) {
    var dictionary = new Dictionary < T, U > ();
    if (keys.Length == values.Length) {
        for (int i = 0; i < keys.Length; i ++) {
            dictionary.Add (keys [i], values [i]);
        }
    } else {
    }
    return dictionary;
}
----------------------------------------

public static Dictionary < K, V > DictionaryFromArrays < K, V > (K [] keys, V [] values, bool skipDuplicates) {
    if (keys == null)
        throw new ArgumentNullException ("keys");

    if (values == null)
        throw new ArgumentNullException ("values");

    if (keys.Length != values.Length)
        throw new ArgumentException ("Keys and Values must have the same length!");

    if (! skipDuplicates)
        return keys.Zip (values, (k, v) = > new KeyValuePair < K, V > (k, v)).ToDictionary (kv = > kv.Key, kv = > kv.Value);
    else {
        Dictionary < K, V > dict = new Dictionary < K, V > ();
        for (int i = 0; i < keys.Length; i ++) {
            K key = keys [i];
            if (! dict.ContainsKey (key))
                dict.Add (key, values [i]);

        }
        return dict;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22637703_22637813_1_21
22637703_22637831_1_11
Title: Two stringlists and foreach 
----------------------------------------

[System.Web.Http.HttpGet] public AjaxAnswer BatchUserCreate (string email, string names) {
    string [] emaillist = email.Split ('\n');
    string [] nameslist = names.Split ('\n');
    int newId = 0;
    int n = Math.Min (nameslist.Length, emaillist.Length);
    for (int i = 0; i < n; ++ i) {
        db.AddParameter ("@email", emaillist [i]);
        db.AddParameter ("@name", nameslist [i]);
        newId = db.ExecuteScalar (userInsQuery);
    }
    return new AjaxAnswer (newId);
}
----------------------------------------

[System.Web.Http.HttpGet] public AjaxAnswer BatchUserCreate (string email, string names) {
    string [] emaillist = email.Split ('\n');
    string [] nameslist = names.Split ('\n');
    for (int i = 0; i != emaillist.Length; ++ i) {
        db.AddParameter ("@email", emaillist [i]);
        db.AddParameter ("@name", nameslist.Length > i ? nameslist [i] : "No name");
        int newId = db.ExecuteScalar (userInsQuery);
    }
    return new AjaxAnswer (newId);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22637703_22637813_1_21
22637703_22637834_1_12
Title: Two stringlists and foreach 
----------------------------------------

[System.Web.Http.HttpGet] public AjaxAnswer BatchUserCreate (string email, string names) {
    string [] emaillist = email.Split ('\n');
    string [] nameslist = names.Split ('\n');
    int newId = 0;
    int n = Math.Min (nameslist.Length, emaillist.Length);
    for (int i = 0; i < n; ++ i) {
        db.AddParameter ("@email", emaillist [i]);
        db.AddParameter ("@name", nameslist [i]);
        newId = db.ExecuteScalar (userInsQuery);
    }
    return new AjaxAnswer (newId);
}
----------------------------------------

[System.Web.Http.HttpGet] public AjaxAnswer BatchUserCreate (string email, string names) {
    string [] emaillist = email.Split ('\n');
    string [] nameslist = names.Split ('\n');
    for (int i = 0; i < emaillist.Length; i ++) {
        db.AddParameter ("@email", emaillist [i]);
        db.AddParameter ("@name", namelist [i]);
        int newId = db.ExecuteScalar (userInsQuery);
    }
    return new AjaxAnswer (newId);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22654955_22655056_1_12
22654955_22655145_1_16
Title: Catching exception of camera not avliable in C# 
----------------------------------------

private void bntStart_Click (object sender, EventArgs e) {
    try {
        webcam.Start ();
    }
    catch (Exception exception) {
        MessageBox.Show (exception.Message);
        return;
    }
}
----------------------------------------

private void bntStart_Click (object sender, EventArgs e) {
    try {
        webcam.Start ();
    }
    catch (NullReferenceException nex) {
        MessageBox.Show (String.Format ("NullReferenceException has been catched: {0}", ex.Message));
    }
    catch (Exception ex) {
        MessageBox.Show (String.Format ("Something went wrong: {0}", ex.Message));
        return;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22673194_22674838_8_22
22673194_22698659_11_39
Title: Linq join to compare object with list of subobject 
----------------------------------------

public bool Equals (MaterialXML x, MaterialXML y) {
    bool firstLevelEqual = (x.Reference == y.Reference) && (x.MeasurementUnitCode == y.MeasurementUnitCode);
    if (firstLevelEqual) {
        if (x.AlternateUnits.SequenceEqual (y.AlternateUnits, _alternateComparer)) {
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool Equals (MaterialXML x, MaterialXML y) {
    bool firstLevelEqual = (x.Reference == y.Reference) && (x.MeasurementUnitCode == y.MeasurementUnitCode) && (x.Denomination == y.Denomination) && (x.Weight == y.Weight) && (x.PieceType == y.PieceType) && (x.Type == y.Type) && (x.Position == y.Position);
    bool secondLevelEqual = false;
    if (firstLevelEqual) {
        if (x.AlternateUnits.SequenceEqual (y.AlternateUnits, _alternateComparer)) {
            secondLevelEqual = true;
        }
    }
    if (secondLevelEqual) {
        if (x.MaterialsPartner.SequenceEqual (y.MaterialsPartner, _matPartnerComparer)) {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22686194_22686224_1_16
22686194_22687889_1_21
Title: Nullreference exception was unhandled by user in asp.net 
----------------------------------------

[WebMethod] public static string buttonclickImage (string pageNo) {
    int iPageNo = 0;
    if (pageNo != string.Empty && pageNo != "undefined")
        iPageNo = Int32.Parse (pageNo);

    FileTransfer.FileTransferClient fileTranz = new FileTransfer.FileTransferClient ();
    FileDto file = fileTranz.GetTifftoJPEG (concatenatedStr, iPageNo, "gmasdll");
    var fileData = Convert.ToBase64String (file.Content);
    return fileData;
}
----------------------------------------

[WebMethod] public static string buttonclickImage (string pageNo) {
    var name = (name) HttpContext.Current.Session ["Projectname"];
    var projectname = name.ProjectName;
    var batchname = name.BatchName;
    var imagename = name.ImageName;
    string concatenatedStr = "/" + projectname + "/" + batchname + "/Input/" + imagename;
    int iPageNo = 0;
    if (pageNo != string.Empty && pageNo != "undefined")
        iPageNo = Int32.Parse (pageNo);

    FileTransfer.FileTransferClient fileTranz = new FileTransfer.FileTransferClient ();
    FileDto file = fileTranz.GetTifftoJPEG (concatenatedStr, iPageNo, "gmasdll");
    var fileData = Convert.ToBase64String (file.Content);
    return fileData;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2270134_2270818_1_17
2270134_2299323_1_18
Title: Optimized Generic List Split 
----------------------------------------

public static IEnumerable < object > [] Split (this IEnumerable < object > tokens, TokenType type) {
    var outer = new List < List < object > > ();
    var inner = new List < object > ();
    var enumerator = tokens.GetEnumerator ();
    while (enumerator.MoveNext ()) {
        Token token = enumerator.Current as token;
        if (token == null || token.TokenType != type) {
            inner.Add (enumerator.Current);
        } else if (inner.Count > 0) {
            outer.Add (inner);
            inner = new List < object > ();
        }
    }
    return outer.ToArray ();
}
----------------------------------------

public static IEnumerable < object > [] Split (this IEnumerable < object > tokens, TokenType type) {
    List < List < object > > l = new List < List < object > > ();
    l.Add (new List < object > ());
    return tokens.Aggregate (l, (c, n) = > {
        var t = n as Token;
        if (t != null && t.TokenType == type) {
            t.Add (new List < object > ());
        } else {
            l.Last ().Add (n);
        }
        return t;
    }).ToArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2270134_2270818_1_17
2270134_2308669_1_24
Title: Optimized Generic List Split 
----------------------------------------

public static IEnumerable < object > [] Split (this IEnumerable < object > tokens, TokenType type) {
    var outer = new List < List < object > > ();
    var inner = new List < object > ();
    var enumerator = tokens.GetEnumerator ();
    while (enumerator.MoveNext ()) {
        Token token = enumerator.Current as token;
        if (token == null || token.TokenType != type) {
            inner.Add (enumerator.Current);
        } else if (inner.Count > 0) {
            outer.Add (inner);
            inner = new List < object > ();
        }
    }
    return outer.ToArray ();
}
----------------------------------------

public static IEnumerable < IEnumerable > Split (this IEnumerable tokens, TokenType type) {
    ArrayList currentT = new ArrayList ();
    foreach (object list in tokens) {
        Token token = list as Token;
        if ((token != null) && token.TokenType == type) {
            yield return currentT;
            currentT.Clear ();
        } else if ((list is TokenType) && ((TokenType) list) == type) {
            yield return currentT;
            currentT.Clear ();
        } else {
            currentT.Add (list);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2270134_2294074_68_92
2270134_2299810_16_29
Title: Optimized Generic List Split 
----------------------------------------

static void Main (string [] args) {
    TokenFactory < string > factory = new TokenFactory < string > ();
    IToken < string > [] tokens = new IToken < string > [] {factory.Make ("a"), factory.Make ("b"), factory.Make ("c"), factory.Make (), factory.Make ("d"), factory.Make ("e"), factory.Make (), factory.Make ("f"), factory.Make ("g"), factory.Make ("h"), factory.Make (), factory.Make ("i"), factory.Make ("j"), factory.Make ("k"), factory.Make ("l"), factory.Make (), factory.Make ("m")};
    List < List < string > > splitTokens = SplitTokens (tokens);
    for (int i = 0; i < splitTokens.Count; i ++) {
        Console.Write ("{");
        for (int j = 0; j < splitTokens [i].Count; j ++) {
            Console.Write ("{0}, ", splitTokens [i] [j]);
        }
        Console.Write ("}");
    }
    Console.ReadKey (true);
}
----------------------------------------

static void Main (string [] args) {
    List < object > objects = new List < object > (new object [] {"A", Guid.NewGuid (), "C", new MyUberToken (), "D", new MyUberToken (), "E", new MyUberToken ()});
    var splitOn = TokenTypes.UberToken;
    foreach (var list in objects.Split (x = > x is Token && ((Token) x).TokenType == splitOn)) {
        foreach (var item in list) {
            Console.WriteLine (item);
        }
        Console.WriteLine ("==============");
    }
    Console.ReadKey ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2270134_2299323_1_18
2270134_2308669_1_24
Title: Optimized Generic List Split 
----------------------------------------

public static IEnumerable < object > [] Split (this IEnumerable < object > tokens, TokenType type) {
    List < List < object > > l = new List < List < object > > ();
    l.Add (new List < object > ());
    return tokens.Aggregate (l, (c, n) = > {
        var t = n as Token;
        if (t != null && t.TokenType == type) {
            t.Add (new List < object > ());
        } else {
            l.Last ().Add (n);
        }
        return t;
    }).ToArray ();
}
----------------------------------------

public static IEnumerable < IEnumerable > Split (this IEnumerable tokens, TokenType type) {
    ArrayList currentT = new ArrayList ();
    foreach (object list in tokens) {
        Token token = list as Token;
        if ((token != null) && token.TokenType == type) {
            yield return currentT;
            currentT.Clear ();
        } else if ((list is TokenType) && ((TokenType) list) == type) {
            yield return currentT;
            currentT.Clear ();
        } else {
            currentT.Add (list);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2270271_2270293_1_13
2270271_5035044_1_24
Title: How can I improve this exception retry scenario? 
----------------------------------------

static void TryExecute < TException > (Action method, Func < TException, bool > retryFilter, int maxRetries) where TException : Exception {
    while (true) {
        try {
            method ();
            return;
        }
        catch (TException ex) {
            if (maxRetries > 0 && retryFilter (ex))
                maxRetries --;
            else
                throw;

        }
    }
}
----------------------------------------

public static void RetryBeforeThrow < T > (Action action, int retries, int timeout) where T : Exception {
    int tries = 1;
    do
        {
            try {
                action ();
                return;
            }
            catch (T ex) {
                if (retries <= 0) {
                    PreserveStackTrace (ex);
                    throw;
                }
                Thread.Sleep (timeout);
            }
        } while (tries ++ < retries);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22741995_22742075_1_13
22741995_22742087_1_19
Title: "Exact Search not partial" 
----------------------------------------

public void chupala () {
    for (int i = 0; i < procs.Length; i ++) {
        if (Regex.IsMatch (procs [i].ProcessName, @"\bFirefox\b")) {
            using (var player = new SoundPlayer (@"C:\bass.wav"))
            {
                player.Play ();
            }}
    }
}
----------------------------------------

public void chupala () {
    for (int i = 0; i < procs.Length; i ++) {
        bool b;
        b = Regex.IsMatch (procs [i].ProcessName, @"(^|\s)Firefox(/s|$)");
        if (b) {
            using (SoundPlayer player = new SoundPlayer ("C:\\bass.wav"))
            {
                player.Play ();
            }}
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2277653_2277694_1_10
2277653_2277765_1_20
Title: How do you use a switch case statement to convert Letters into numbers 
----------------------------------------

int parseCard (char card) {
    if (card >= '2' && card <= '9')
        return card - '0';

    if (card == 'T' || card == 'J' || card == 'Q' || card == 'K')
        return 10;

    if (card == 'A')
        return 11;

    throw new ArgumentException ("card not valid", "card");
}
----------------------------------------

int parseCard (char card) {
    if (card >= '2' && card <= '9') {
        return card - '0';
    }
    switch (card) {
        case 'T' : case 'J' : case 'Q' : case 'K' :
            return 10;
        case 'A' :
            return 11;
        default :
            throw new ArgumentException ("card not valid", "card");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22814586_22994145_10_36
22814586_23007464_1_42
Title: Why .NET group by is (much) slower when the number of buckets grows 
----------------------------------------

static void Main () {
    int [] input = new int [Size];
    var rng = new Random (0);
    for (int i = 0; i < Size; i ++) {
        input [i] = rng.Next (Size);
    }
    Func < int [], int, TimeSpan > test = PopulateDictionary;
    for (int buckets = 10; buckets <= Size; buckets *= 10) {
        TimeSpan total = TimeSpan.Zero;
        for (int i = 0; i < Iterations; i ++) {
            total += PopulateArray (input, buckets);
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
        }
        Console.WriteLine ("{0,9}: {1,7}ms", buckets, (long) total.TotalMilliseconds);
    }
}
----------------------------------------

static void Main (string [] args) {
    int size = 10000000;
    int [] ar = new int [size];
    var r = new Random ();
    for (var i = 0; i < size; i ++) {
        ar [i] = r.Next (0, size);
    }
    Console.WriteLine ("Fixed dictionary:");
    for (var numBuckets = 10; numBuckets <= 1000000; numBuckets *= 10) {
        var num = (size / numBuckets);
        var timing = 0L;
        for (var i = 0; i < 5; i ++) {
            timing += FixBucketTest (ar, num);
        }
        var avg = ((float) timing) / 5.0f;
        Console.WriteLine ("Avg Time: " + avg + " ms for " + numBuckets);
    }
    Console.WriteLine ("Fixed array:");
    for (var numBuckets = 10; numBuckets <= 1000000; numBuckets *= 10) {
        var num = (size / numBuckets);
        var timing = 0L;
        for (var i = 0; i < 5; i ++) {
            timing += FixArrayTest (ar, num);
        }
        var avg = ((float) timing) / 5.0f;
        Console.WriteLine ("Avg Time: " + avg + " ms for " + numBuckets);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22818769_22818851_8_26
22818769_22818857_13_48
Title: An Issue With Writing In A File In C# 
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Please Select One Of The Following Options... ");
    Console.WriteLine ("1. Enter A New Record In The File.");
    Console.WriteLine ("2. Read All The Records From The File.");
    int choice = int.Parse (Console.ReadLine ());
    switch (choice) {
        case 1 :
            AddEntry ();
            break;
        case 2 :
            ReadFile ();
            break;
        default :
            Console.WriteLine ("Sorry, that's not a valid option");
            break;
    }
}
----------------------------------------

static void Main (string [] args) {
    using (FileStream MyFiler = new FileStream ("MyFile.txt", FileMode.OpenOrCreate, FileAccess.ReadWrite))
    {
        using (StreamReader FileReader = new StreamReader (MyFiler))
        {
            using (StreamWriter FileWriter = new StreamWriter (MyFiler))
            {
                Console.WriteLine ("Please Select One Of The Following Options... ");
                Console.WriteLine ("1. Enter A New Record In The File.");
                Console.WriteLine ("2. Read All The Records From The File.");
                int Choice = int.Parse (Console.ReadLine ());
                if (Choice == 1) {
                    Console.WriteLine ("Enter The ID: ");
                    ID = int.Parse (Console.ReadLine ());
                    FileWriter.WriteLine (ID);
                    Console.WriteLine ("Enter The Name: ");
                    Name = Console.ReadLine ();
                    FileWriter.WriteLine (Name);
                } else if (Choice == 2) {
                    FileWriter.Close ();
                    String fileText = File.ReadAllText ("MyFile.txt");
                    for (int i = 0; i < fileText.Length; i ++) {
                        Console.Write (fileText [i]);
                    }
                }
                FileReader.Close ();
            }}}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22834678_22834883_1_22
22834678_22836250_1_27
Title: "Cannot implicitly convert type string to System.Collections.Generic.Dictionary<stringSystem.Collections.Generic.Dictionary><stringobject>>" 
----------------------------------------

public Dictionary < string, Dictionary < string, object > > GetEmployees () {
    try {
        SqlConnection con = new SqlConnection (ConfigurationManager.ConnectionStrings ["NSConstr"].ToString ());
        con.Open ();
        SqlCommand cmd = new SqlCommand ();
        cmd.CommandText = "SELECT *  FROM Contact e ";
        DataSet ds = new DataSet ();
        SqlDataAdapter da = new SqlDataAdapter (cmd);
        da.SelectCommand.Connection = con;
        da.Fill (ds);
        con.Close ();
        return DatatableToDictionary (ds.Tables [0]);
    }
    catch (Exception ex) {
        return errmsg (ex);
    }
}
----------------------------------------

public string GetEmployees () {
    System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    SqlConnection con = new SqlConnection (ConfigurationManager.ConnectionStrings ["NSConstr"].ToString ());
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "SELECT *  FROM Contact e ";
    DataSet ds = new DataSet ();
    DataTable dt = new DataTable ();
    SqlDataAdapter da = new SqlDataAdapter (cmd);
    da.SelectCommand.Connection = con;
    da.Fill (dt);
    con.Close ();
    List < Dictionary < string, object > > rows = new List < Dictionary < string, object > > ();
    Dictionary < string, object > row = null;
    foreach (DataRow rs in dt.Rows) {
        row = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns) {
            row.Add (col.ColumnName, rs [col]);
        }
        rows.Add (row);
    }
    return serializer.Serialize (rows);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2284279_2284304_1_13
2284279_2284314_6_18
Title: How to test logic which is dependent on current date 
----------------------------------------

private DateTime GetEstimatedArrivalDate (DateTime currentDate) {
    DateTime estimatedDate;
    if (currentDate.DayOfWeek >= DayOfWeek.Thursday) {
        estimatedDate = currentDate.AddDays (6);
    } else {
        estimatedDate = currentDate.AddDays (5);
    }
    return estimatedDate;
}
----------------------------------------

private DateTime GetEstimatedArrivalDate (DateTime forDate) {
    DateTime estimatedDate;
    if (forDate.DayOfWeek >= DayOfWeek.Thursday) {
        estimatedDate = forDate.Date.AddDays (6);
    } else {
        estimatedDate = forDate.Date.AddDays (5);
    }
    return estimatedDate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2284279_2284304_1_13
2284279_2284537_6_18
Title: How to test logic which is dependent on current date 
----------------------------------------

private DateTime GetEstimatedArrivalDate (DateTime currentDate) {
    DateTime estimatedDate;
    if (currentDate.DayOfWeek >= DayOfWeek.Thursday) {
        estimatedDate = currentDate.AddDays (6);
    } else {
        estimatedDate = currentDate.AddDays (5);
    }
    return estimatedDate;
}
----------------------------------------

private DateTime GetEstimatedArrivalDate (DateTime currentDate) {
    DateTime estimatedDate;
    if (currentDate.DayOfWeek >= DayOfWeek.Thursday) {
        estimatedDate = currentDate.AddDays (6);
    } else {
        estimatedDate = currentDate.AddDays (5);
    }
    return estimatedDate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2284279_2284314_6_18
2284279_2284537_6_18
Title: How to test logic which is dependent on current date 
----------------------------------------

private DateTime GetEstimatedArrivalDate (DateTime forDate) {
    DateTime estimatedDate;
    if (forDate.DayOfWeek >= DayOfWeek.Thursday) {
        estimatedDate = forDate.Date.AddDays (6);
    } else {
        estimatedDate = forDate.Date.AddDays (5);
    }
    return estimatedDate;
}
----------------------------------------

private DateTime GetEstimatedArrivalDate (DateTime currentDate) {
    DateTime estimatedDate;
    if (currentDate.DayOfWeek >= DayOfWeek.Thursday) {
        estimatedDate = currentDate.AddDays (6);
    } else {
        estimatedDate = currentDate.AddDays (5);
    }
    return estimatedDate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22859430_22879214_1_18
22859430_22991092_1_30
Title: How to determine if a PropertyType is foreign key 
----------------------------------------

IEnumerable < string > GetReferenceProperies < T > (DbContext context) {
    var oc = ((IObjectContextAdapter) context).ObjectContext;
    var entityType = oc.MetadataWorkspace.GetItems (DataSpace.OSpace).OfType < EntityType > ().FirstOrDefault (et = > et.Name == typeof (T).Name);
    if (entityType != null) {
        foreach (NavigationProperty np in entityType.NavigationProperties.Where (p = > p.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One || p.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne)) {
            yield return np.Name;
        }
    }
}
----------------------------------------

public static MvcHtmlString TableRowFor < T > (this HtmlHelper helper, T obj) {
    string controller = obj.GetType ().BaseType.Name;
    string id = obj.GetType ().GetProperty ("id").GetValue (obj).ToString ();
    StringBuilder sb = new StringBuilder ("<tr>");
    sb.Append ("<td>");
    sb.Append ("<a href='" + controller + "/Edit/" + id + "'><img src='/Images/edit-icon.png' /></a>");
    sb.Append ("<a href='" + controller + "/Details/" + id + "'><img src='/Images/details-icon.png' /></a>");
    sb.Append ("<a href='" + controller + "/Delete/" + id + "'><img src='/Images/delete-icon.png' /></a>");
    sb.Append ("</td>");
    List < string > referencePropertyList = GetReferenceProperies < T > (new NameOfDB ()).ToList ();
    foreach (var property in obj.GetType ().GetProperties ()) {
        if ((! property.PropertyType.Name.ToLower ().Contains ("icollection")) && (property.PropertyType.CustomAttributes.Count () != 0)) {
            sb.Append ("<td>");
            if (referencePropertyList != null && property.Name.Length >= 3 && referencePropertyList.Contains (property.Name.Substring (0, property.Name.Length - 3)))
                sb.Append ("<a href='" + property.Name.Substring (0, property.Name.Length - 3) + "/Details/" + property.GetValue (obj) + "'>" + property.GetValue (obj) + "</a>");
            else
                sb.Append (property.GetValue (obj));

            sb.Append ("</td>");
        }
    }
    sb.Append ("</tr>");
    return new MvcHtmlString (sb.ToString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22866122_22869082_1_13
22866122_23652080_1_50
Title: How the PrincipalContext works 
----------------------------------------

public static bool CheckActiveDirectoryAccount (string account, string domain) {
    using (var pc = new PrincipalContext (ContextType.Domain, domain))
    {
        UserPrincipal user = UserPrincipal.FindByIdentity (pc, account);
        if (user == null)
            return false;

        return true;
    }}
----------------------------------------

public static string CheckActiveDirectoryAccount (string account) {
    UserPrincipal user;
    PrincipalContext context;
    List < string > userPrincipalNameList;
    string ADServer = null;
    string ADUserName = null;
    string ADUserPassword = null;
    string userAccount;
    account = account.ToLower ();
    GetADSettings (out ADServer, out ADUserName, out ADUserPassword);
    if (ADUserName.Length > 0)
        context = new PrincipalContext (ContextType.Domain, ADServer, null, ADUserName, ADUserPassword);
    else
        context = new PrincipalContext (ContextType.Domain, ADServer);

    using (context)
    {
        if ((user = UserPrincipal.FindByIdentity (context, account)) == null) {
            if (account.Contains ("\\")) {
                userPrincipalNameList = user.UserPrincipalName.Split ('\\').ToList ();
                if (userPrincipalNameList.Count > 0)
                    user = UserPrincipal.FindByIdentity (context, userPrincipalNameList [0]);

            }
        }
        if (user != null) {
            using (user)
            {
                userPrincipalNameList = user.UserPrincipalName.Split ('@').ToList ();
                userAccount = userPrincipalNameList.First ();
                if (userPrincipalNameList.Count > 1)
                    userAccount = userPrincipalNameList.Last () + "\\" + userAccount;

                if (user != null)
                    return userAccount.ToLower ();

            }}
    } return string.Empty;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2288498_21676524_1_22
2288498_25510241_1_45
Title: How do I get a rainbow color gradient in C#? 
----------------------------------------

public static Color Rainbow (float progress) {
    float div = (Math.Abs (progress % 1) * 6);
    int ascending = (int) ((div % 1) * 255);
    int descending = 255 - ascending;
    switch ((int) div) {
        case 0 :
            return Color.FromArgb (255, 255, ascending, 0);
        case 1 :
            return Color.FromArgb (255, descending, 255, 0);
        case 2 :
            return Color.FromArgb (255, 0, 255, ascending);
        case 3 :
            return Color.FromArgb (255, 0, descending, 255);
        case 4 :
            return Color.FromArgb (255, ascending, 0, 255);
        default :
            return Color.FromArgb (255, 255, 0, descending);
    }
}
----------------------------------------

public static String Rainbow (Int32 numOfSteps, Int32 step) {
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var h = (Double) step / numOfSteps;
    var i = (Int32) (h * 6);
    var f = h * 6.0 - i;
    var q = 1 - f;
    switch (i % 6) {
        case 0 :
            r = 1;
            g = f;
            b = 0;
            break;
        case 1 :
            r = q;
            g = 1;
            b = 0;
            break;
        case 2 :
            r = 0;
            g = 1;
            b = f;
            break;
        case 3 :
            r = 0;
            g = q;
            b = 1;
            break;
        case 4 :
            r = f;
            g = 0;
            b = 1;
            break;
        case 5 :
            r = 1;
            g = 0;
            b = q;
            break;
    }
    return "#" + ((Int32) (r * 255)).ToString ("X2") + ((Int32) (g * 255)).ToString ("X2") + ((Int32) (b * 255)).ToString ("X2");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2292360_23608859_15_33
2292360_29209268_18_28
Title: How to control the scroll position of a ListBox in a MVVM WPF app 
----------------------------------------

public static void OnAutoScrollToCurrentItemChanged (DependencyObject s, DependencyPropertyChangedEventArgs e) {
    var listBox = s as ListBox;
    if (listBox != null) {
        var listBoxItems = listBox.Items;
        if (listBoxItems != null) {
            var newValue = (bool) e.NewValue;
            var autoScrollToCurrentItemWorker = new EventHandler ((s1, e2) = > OnAutoScrollToCurrentItem (listBox, listBox.Items.CurrentPosition));
            if (newValue)
                listBoxItems.CurrentChanged += autoScrollToCurrentItemWorker;
            else
                listBoxItems.CurrentChanged -= autoScrollToCurrentItemWorker;

        }
    }
}
----------------------------------------

public static void OnAutoScrollToCurrentItemChanged (DependencyObject obj, DependencyPropertyChangedEventArgs e) {
    var listBox = obj as ListBox;
    if (listBox == null)
        return;

    var newValue = (bool) e.NewValue;
    if (newValue)
        listBox.SelectionChanged += listBoxSelectionChanged;
    else
        listBox.SelectionChanged -= listBoxSelectionChanged;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22943329_22943482_1_35
22943329_22943512_1_19
Title: Inputing a selection from an array c# 
----------------------------------------

void Main () {
    string [] fruits = new [] {"apples", "oranges", "pears"};
    for (var i = 0; i < fruits.Length; i ++) {
        Console.WriteLine ("Enter {0} to select {1}", i + 1, fruits [i]);
    }
    Int32 choice = 0;
    do
        {
            String input = Console.ReadLine ();
            Int32.TryParse (input, out choice);
        } while (choice < 1 || choice > (fruits.Length + 1));
    Console.WriteLine ("You have selected {0} which is {1}", choice, fruits [choice - 1]);
}
----------------------------------------

static public void Main (string [] args) {
    string [] fruit = new string [3];
    fruit [0] = ("apples");
    fruit [1] = ("oranges");
    fruit [2] = ("pears");
    for (int i = 0; i < fruit.Length; i ++) {
        Console.WriteLine ("Enter {0} to select {1}", i, fruit [i]);
    }
    string choice = Console.ReadLine ();
    int j = int.Parse (choice);
    Console.WriteLine ("You have selected {0} which is {1}", j, fruit [j]);
    Console.ReadLine ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2294667_18229802_35_48
2294667_18229802_53_85
Title: How to read an .RTF file using .NET 4.0 
----------------------------------------

public string Read (string file) {
    try {
        var reader = new StreamReader (file);
        var content = reader.ReadToEnd ();
        reader.Close ();
        return content;
    }
    catch {
        return null;
    }
}
----------------------------------------

public string Read (string file) {
    try {
        var wordApp = new Application ();
        object path = file;
        object nullobj = System.Reflection.Missing.Value;
        var doc = wordApp.Documents.Open (ref path, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj);
        var result = wordApp.ActiveDocument.Content.Text;
        var doc_close = (_Document) doc;
        doc_close.Close ();
        return result;
    }
    catch {
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2294667_18229802_35_48
2294667_18229802_90_122
Title: How to read an .RTF file using .NET 4.0 
----------------------------------------

public string Read (string file) {
    try {
        var reader = new StreamReader (file);
        var content = reader.ReadToEnd ();
        reader.Close ();
        return content;
    }
    catch {
        return null;
    }
}
----------------------------------------

public string Read (string file) {
    try {
        var wordApp = new Application ();
        object path = file;
        object nullobj = System.Reflection.Missing.Value;
        var doc = wordApp.Documents.Open (ref path, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj, ref nullobj);
        var result = wordApp.ActiveDocument.Content.Text;
        var doc_close = (_Document) doc;
        doc_close.Close ();
        return result;
    }
    catch {
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22970303_22970532_19_32
22970303_22970532_2_16
Title: Why is my SQL CLR stored proc call claiming I am not providing a parameter I am? 
----------------------------------------

private static void EndOwnershipForTeam (long assetId, int teamId) {
    const string sql = @"exec up_RemoveAssetOwnershipFromTeam @assetId, @teamId";
    using (var connection = new SqlConnection ("context connection=true"))
    using (var command = new SqlCommand (sql, connection))
    {
        command.Parameters.AddWithValue ("@assetId", assetId);
        command.Parameters.AddWithValue ("@teamId", teamId);
        connection.Open ();
        command.ExecuteNonQuery ();
    }}
----------------------------------------

private static void EndOwnershipForTeam (long assetId, int teamId) {
    const string storedProcedureName = @"up_RemoveAssetOwnershipFromTeam";
    using (var connection = new SqlConnection ("context connection=true"))
    using (var command = new SqlCommand (storedProcedureName, connection))
    {
        command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue ("assetId", assetId);
        command.Parameters.AddWithValue ("teamId", teamId);
        connection.Open ();
        command.ExecuteNonQuery ();
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
22989188_23006101_16_34
22989188_23006101_1_14
Title: DataGrid´s SelectedItem lost Binding after UnitOfWork.SaveChanges 
----------------------------------------

public override bool Equals (object obj) {
    if (object.ReferenceEquals (null, obj)) {
        return false;
    }
    if (object.ReferenceEquals (this, obj)) {
        return true;
    }
    if (obj.GetType () != this.GetType ()) {
        return false;
    }
    return this.Equals (obj as TEntity);
}
----------------------------------------

public bool Equals (TEntity other) {
    if (object.ReferenceEquals (null, other)) {
        return false;
    }
    if (object.ReferenceEquals (this, other)) {
        return true;
    }
    return this.id == other.Id;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23021739_23021798_1_16
23021739_23021799_1_15
Title: How to convert a passing string paramatre to int on asp.net MVC 3 
----------------------------------------

public ViewResult Search (string textboxmvc) {
    int parsedId;
    int.TryParse (textboxmvc, out parsedId);
    var student = from i in db.StudentSet
        select i;
    if (! String.IsNullOrEmpty (textboxmvc)) {
        student = student.Where (s = > s.FirstName.ToUpper ().Contains (textboxmvc.ToUpper ()) || s.LastName.ToUpper ().Contains (textboxmvc.ToUpper ()) || s.Id == parsedId);
    }
    return View (student);
}
----------------------------------------

public ViewResult Search (string textboxmvc) {
    var student = from i in db.StudentSet
        select i;
    if (! String.IsNullOrEmpty (textboxmvc)) {
        int val = int.Parse (textboxmvc);
        student = student.Where (s = > s.FirstName.ToUpper ().Contains (textboxmvc.ToUpper ()) || s.LastName.ToUpper ().Contains (textboxmvc.ToUpper ()) || s.Id == val);
    }
    return View (student);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23033367_23033464_1_15
23033367_23033559_1_10
Title: Return an int array length n containing first n digits of pi? (c#) 
----------------------------------------

public static int [] MakePie (int n) {
    double pi = Math.PI;
    var str = pi.ToString ().Remove (1, 1);
    var chararray = str.ToCharArray ();
    var numbers = new int [n];
    for (int i = 0; i < n; i ++) {
        numbers [i] = int.Parse (chararray [i].ToString ());
    }
    return numbers;
}
----------------------------------------

public int [] MakePie (int n) {
    double pi = Math.PI;
    int [] result = new int [n];
    for (int i = 0; i < n; i ++) {
        result [i] = (int) Math.Floor (pi);
        pi -= result [i];
        pi *= 10;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2306827_2306929_48_77
2306827_2306929_93_110
Title: How to enable dropdownlist editing of values in an MVC View 
----------------------------------------

public static MvcHtmlString EnumDropdownFor < TModel, TValue > (this HtmlHelper < TModel > helper, Expression < Func < TModel, TValue > > expression) {
    var data = expression.Compile () (helper.ViewData.Model);
    StringBuilder builder = new StringBuilder ();
    builder.AppendFormat ("<select name='{0}' id='{0}'>", helper.Encode ((expression.Body as MemberExpression).Member.Name));
    EnumUtils.GetEnumFields < TValue > ().ForEach (f = > {
        var nameAttrib = f.GetCustomAttributes (typeof (EnumDisplayNameAttribute), true).OfType < EnumDisplayNameAttribute > ().FirstOrDefault ();
        var displayName = (nameAttrib == null) ? f.Name : nameAttrib.DisplayName;
        var optionData = (TValue) f.GetRawConstantValue ();
        builder.AppendFormat ("<option value=\"{0}\" {1}>{2}</option>", optionData, optionData.Equals (data) ? "selected=\"selected\"" : "", displayName);
    });
    builder.Append ("</select>");
    return MvcHtmlString.Create (builder.ToString ());
}
----------------------------------------

public static MvcHtmlString EnumDropdown < TModel, TValue > (this HtmlHelper < TModel > helper, string name, TValue value, IEnumerable < TValue > choices) {
    StringBuilder builder = new StringBuilder ();
    builder.AppendFormat ("<select name='{0}'>", helper.Encode (name));
    if (choices != null) {
        choices.ForEach (c = > builder.AppendFormat ("<option value=\"{0}\"{2}>{1}</option>", Convert.ToInt32 (c), helper.Encode (EnumUtils.GetDisplayName (c)), value.Equals (c) ? " selected='selected'" : ""));
    }
    builder.Append ("</select>");
    return MvcHtmlString.Create (builder.ToString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23088681_23088730_1_13
23088681_23088746_1_13
Title: printing items in a list with a for loop 
----------------------------------------

public string Display () {
    CartClass CartList = CartClass.GetCart ();
    String display = "";
    for (int i = 0; i < CartList.CartList.Count (); i ++) {
        Movies Movie = CartList.CartList [i];
        display += String.Format (i + 1 + "." + "\t" + Movie.MovieName + "\t" + "£" + Movie.MovieCost.ToString ()) + "\n";
    }
    return display;
}
----------------------------------------

public string Display () {
    CartClass CartList = CartClass.GetCart ();
    String display = "";
    for (int i = 0; i < CartList.CartList.Count (); i ++) {
        Movies Movie = CartList.CartList [i];
        display += String.Format (i + 1 + "." + "\t" + Movie.MovieName + "\t" + "£" + Movie.MovieCost.ToString ());
    }
    return display;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23088681_23088730_1_13
23088681_23088755_1_12
Title: printing items in a list with a for loop 
----------------------------------------

public string Display () {
    CartClass CartList = CartClass.GetCart ();
    String display = "";
    for (int i = 0; i < CartList.CartList.Count (); i ++) {
        Movies Movie = CartList.CartList [i];
        display += String.Format (i + 1 + "." + "\t" + Movie.MovieName + "\t" + "£" + Movie.MovieCost.ToString ()) + "\n";
    }
    return display;
}
----------------------------------------

public string Display () {
    CartClass CartList = CartClass.GetCart ();
    String display = "";
    for (int i = 0; i < CartList.CartList.Count (); i ++) {
        Movies Movie = CartList.CartList [i];
        display += String.Format (i + 1 + "." + "\t" + Movie.MovieName + "\t" + "£" + Movie.MovieCost.ToString ());
    }
    return display;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23088681_23088746_1_13
23088681_23088755_1_12
Title: printing items in a list with a for loop 
----------------------------------------

public string Display () {
    CartClass CartList = CartClass.GetCart ();
    String display = "";
    for (int i = 0; i < CartList.CartList.Count (); i ++) {
        Movies Movie = CartList.CartList [i];
        display += String.Format (i + 1 + "." + "\t" + Movie.MovieName + "\t" + "£" + Movie.MovieCost.ToString ());
    }
    return display;
}
----------------------------------------

public string Display () {
    CartClass CartList = CartClass.GetCart ();
    String display = "";
    for (int i = 0; i < CartList.CartList.Count (); i ++) {
        Movies Movie = CartList.CartList [i];
        display += String.Format (i + 1 + "." + "\t" + Movie.MovieName + "\t" + "£" + Movie.MovieCost.ToString ());
    }
    return display;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23156603_23157255_11_33
23156603_23157521_8_43
Title: Function-call decides the function's return-type 
----------------------------------------

public static T GetNumberFromUser < T > (string info, TryParse < T > tryParseFunction) {
    T TheDesiredNumber;
    while (true) {
        Console.Write ("Please type " + info + " : ");
        string input = Console.ReadLine ();
        if (tryParseFunction (input, out TheDesiredNumber)) {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine (" - " + info + " is set to " + TheDesiredNumber.ToString () + "!");
            Console.ForegroundColor = ConsoleColor.Gray;
            return TheDesiredNumber;
        }
        Console.WriteLine (input + " - Invalid input!");
    }
}
----------------------------------------

static private object GetNumberFromUser2 < T > (string Info) {
    object TheDesiredNumber = null;
    Type t = typeof (T);
    while (true) {
        Console.Write ("Please type " + Info + " : ");
        if (t.Equals (typeof (int))) {
            int TheDesiredInt;
            if (int.TryParse (Console.ReadLine (), out TheDesiredInt)) {
                TheDesiredNumber = TheDesiredInt;
            }
        } else if (t.Equals (typeof (double))) {
            double TheDesiredDouble;
            if (double.TryParse (Console.ReadLine (), out TheDesiredDouble)) {
                TheDesiredNumber = TheDesiredDouble;
            }
        }
        if (TheDesiredNumber != null) {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine (" - " + Info + " is set to " + TheDesiredNumber.ToString () + "!");
            Console.ForegroundColor = ConsoleColor.Gray;
            return TheDesiredNumber;
        }
        WrongInput (" - Invalid input!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23173222_23173277_1_16
23173222_23174368_1_24
Title: Combinations Generation using Backtracking Algorithm 
----------------------------------------

static void Combo (int a, int b, int c) {
    Console.WriteLine ("( {0}, {1}, {2})", a, b, c);
    if (a < 10) {
        Combo (++ a, b, c);
        if (b < 10) {
            Combo (a, ++ b, c);
            if (c < 10) {
                Combo (a, b, ++ c);
            }
        }
    }
}
----------------------------------------

static void Combo (int a, int b, int c) {
    if (a < 10) {
        if (b < 10) {
            if (c < 10) {
                Console.WriteLine ("( {0}, {1}, {2})", a, b, c);
                Combo (a, b, ++ c);
            } else {
                c = 0;
                Combo (a, ++ b, c);
            }
        } else {
            c = 0;
            b = 0;
            Combo (++ a, b, c);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23174568_23174676_14_25
23174568_23174785_1_22
Title: Oracle connection does not work on second try 
----------------------------------------

public void comboboxes () {
    using (OracleConnection conn = new OracleConnection ("Data Source=localhost;Persist Security Info=True;User ID=kursinis1;Password=1234;Unicode=True"))
    {
        conn.Open ();
        using (OracleDataAdapter data1 = new OracleDataAdapter ("select aut_id, (aut_vardas || ' ' || aut_pavarde) AS autorius from autoriai", conn))
        {
            data1.SelectCommand.CommandType = CommandType.Text;
            data1.Fill (dataTable);
        }}}
----------------------------------------

public void comboboxes () {
    using (OracleConnection conn = new OracleConnection ("Data Source=localhost;Persist Security Info=True;User ID=kursinis1;Password=1234;Unicode=True"))
    {
        try {
            conn.Open ();
            DataSet dsetas1 = new DataSet ();
            OracleDataAdapter data1 = new OracleDataAdapter ("select aut_id, (aut_vardas || ' ' || aut_pavarde) AS autorius from autoriai", conn);
            data1.SelectCommand.CommandType = CommandType.Text;
            data1.Fill (dsetas1);
            comboBox1.DataSource = dsetas1.Tables [0];
            comboBox1.DisplayMember = "autorius";
            comboBox1.ValueMember = "aut_id";
        }
        catch (Exception ex) {
            MessageBox.Show ("Can not open connection ! ");
        }
        finally {
            if (ConnectionState.Open == conn.State)
                conn.Close ();

        }
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2319984_2320025_1_12
2319984_2321065_6_20
Title: Does this code loop infinitely? 
----------------------------------------

static void Main (string [] args) {
    while (true) {
        DoSomething ();
        if (Console.KeyAvailable) {
            break;
        }
        System.Threading.Thread.Sleep (60000);
    }
}
----------------------------------------

static void Main (string [] args) {
    Console.TreatControlCAsInput = false;
    Console.CancelKeyPress += delegate (object sender, ConsoleCancelEventArgs e) {
        _stop.Set ();
        e.Cancel = true;
    };
    while (! _stop.WaitOne (_timeSpan)) {
        Console.WriteLine ("Waiting...");
    }
    Console.WriteLine ("Done.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23202851_23202871_1_14
23202851_23202893_1_22
Title: Error: Not all code paths return a value 
----------------------------------------

public static object LoadObject () {
    if (File.Exists ("D://my.bin")) {
        FileStream stream = File.OpenRead ("D://my.bin");
        BinaryFormatter formatter = new BinaryFormatter ();
        Dictionary < int, Question > deserializedObject = (Dictionary < int, Question >) formatter.Deserialize (stream);
        stream.Close ();
        return deserializedObject;
    } else
        throw FileNotFoundException ("There is no file named", "D:\\my.bin");

}
----------------------------------------

public static object LoadObject () {
    try {
        if (File.Exists ("D://my.bin")) {
            FileStream stream = File.OpenRead ("D://my.bin");
            BinaryFormatter formatter = new BinaryFormatter ();
            Dictionary < int, Question > deserializedObject = (Dictionary < int, Question >) formatter.Deserialize (stream);
            stream.Close ();
            return deserializedObject;
        }
    }
    catch (Exception ex) {
        return null;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23202851_23202871_1_14
23202851_23202943_1_20
Title: Error: Not all code paths return a value 
----------------------------------------

public static object LoadObject () {
    if (File.Exists ("D://my.bin")) {
        FileStream stream = File.OpenRead ("D://my.bin");
        BinaryFormatter formatter = new BinaryFormatter ();
        Dictionary < int, Question > deserializedObject = (Dictionary < int, Question >) formatter.Deserialize (stream);
        stream.Close ();
        return deserializedObject;
    } else
        throw FileNotFoundException ("There is no file named", "D:\\my.bin");

}
----------------------------------------

public static object LoadObject () {
    try {
        if (File.Exists ("D://my.bin")) {
            FileStream stream = File.OpenRead ("D://my.bin");
            BinaryFormatter formatter = new BinaryFormatter ();
            Dictionary < int, Question > deserializedObject = (Dictionary < int, Question >) formatter.Deserialize (stream);
            stream.Close ();
            return deserializedObject;
        }
    }
    catch {
        return null;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2320754_2320764_1_31
2320754_2320805_1_20
Title: Bit Array Equality 
----------------------------------------

public bool Equals (ImmutableBitArray other) {
    if (this.length != other.length) {
        return false;
    }
    for (int i = 0; i < this.Array.Length; i ++) {
        if (this.Array [i] != other.Array [i]) {
            if (i < this.Array.Length - 1) {
                return false;
            }
            int shift = 0x20 - (this.length % 0x20);
            if (this.Array [i] << shift != other.Array [i] << shift) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

public bool Equals (ImmutableBitArray other) {
    if (this.length != other.length) {
        return false;
    }
    for (int i = 0; i < this.Array.Length; i ++) {
        if (this.Array [i] != other.Array [i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2320754_2320764_1_31
2320754_2324328_1_32
Title: Bit Array Equality 
----------------------------------------

public bool Equals (ImmutableBitArray other) {
    if (this.length != other.length) {
        return false;
    }
    for (int i = 0; i < this.Array.Length; i ++) {
        if (this.Array [i] != other.Array [i]) {
            if (i < this.Array.Length - 1) {
                return false;
            }
            int shift = 0x20 - (this.length % 0x20);
            if (this.Array [i] << shift != other.Array [i] << shift) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

public bool Equals (ImmutableBitArray other) {
    if (this.length != other.length) {
        return false;
    }
    int finalIndex = this.Array.Length - 1;
    for (int i = 0; i < finalIndex; i ++) {
        if (this.Array [i] != other.Array [i]) {
            return false;
        }
    }
    int shift = 32 - (this.length % 32);
    if (shift == 32) {
        shift = 0;
    }
    if (this.Array [finalIndex] << shift != other.Array [finalIndex] << shift) {
        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2320754_2320805_1_20
2320754_2324328_1_32
Title: Bit Array Equality 
----------------------------------------

public bool Equals (ImmutableBitArray other) {
    if (this.length != other.length) {
        return false;
    }
    for (int i = 0; i < this.Array.Length; i ++) {
        if (this.Array [i] != other.Array [i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public bool Equals (ImmutableBitArray other) {
    if (this.length != other.length) {
        return false;
    }
    int finalIndex = this.Array.Length - 1;
    for (int i = 0; i < finalIndex; i ++) {
        if (this.Array [i] != other.Array [i]) {
            return false;
        }
    }
    int shift = 32 - (this.length % 32);
    if (shift == 32) {
        shift = 0;
    }
    if (this.Array [finalIndex] << shift != other.Array [finalIndex] << shift) {
        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23207664_23225401_26_52
23207664_23225401_3_23
Title: How to bind an ObservableCollection to an sql table? 
----------------------------------------

public static SqlCommand GenerateInsertCommand < T > (object Obj) {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ();
    var cmd = new SqlCommand ();
    StringBuilder sbColumns = new StringBuilder (" ");
    StringBuilder sbValues = new StringBuilder (" ");
    foreach (var prop in props) {
        var sqlColumnAttr = (SqlColumn) prop.GetCustomAttribute (typeof (SqlColumn), false);
        var colValue = prop.GetValue (Obj);
        if (! sqlColumnAttr.PrimaryKey && colValue != null) {
            sbColumns.AppendFormat ("{0},", sqlColumnAttr.ColumnName);
            sbValues.AppendFormat ("@{0},", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        }
    }
    cmd.CommandText = "INSERT INTO " + TableName + "(" + sbColumns.ToString ().TrimEnd (',') + ") VALUES(" + sbValues.ToString ().TrimEnd (',') + ");SELECT SCOPE_IDENTITY();";
    return cmd;
}
----------------------------------------

public static SqlCommand GenerateSelectCommand < T > () {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ();
    StringBuilder sbColumns = new StringBuilder (" ");
    var cmd = new SqlCommand ();
    foreach (var prop in props) {
        sbColumns.Append (prop.Name);
    }
    cmd.CommandText = "SELECT " + sbColumns.ToString ().TrimEnd (',') + " FROM " + TableName;
    return cmd;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23207664_23225401_26_52
23207664_23225401_55_86
Title: How to bind an ObservableCollection to an sql table? 
----------------------------------------

public static SqlCommand GenerateInsertCommand < T > (object Obj) {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ();
    var cmd = new SqlCommand ();
    StringBuilder sbColumns = new StringBuilder (" ");
    StringBuilder sbValues = new StringBuilder (" ");
    foreach (var prop in props) {
        var sqlColumnAttr = (SqlColumn) prop.GetCustomAttribute (typeof (SqlColumn), false);
        var colValue = prop.GetValue (Obj);
        if (! sqlColumnAttr.PrimaryKey && colValue != null) {
            sbColumns.AppendFormat ("{0},", sqlColumnAttr.ColumnName);
            sbValues.AppendFormat ("@{0},", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        }
    }
    cmd.CommandText = "INSERT INTO " + TableName + "(" + sbColumns.ToString ().TrimEnd (',') + ") VALUES(" + sbValues.ToString ().TrimEnd (',') + ");SELECT SCOPE_IDENTITY();";
    return cmd;
}
----------------------------------------

public static SqlCommand GenerateUpdateCommand < T > (object Obj, IEnumerable < string > PropertyNamesThatChanged) {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ().Where (pinfo = > ! PropertyNamesThatChanged.Contains (pinfo.Name)).ToArray ();
    var cmd = new SqlCommand ();
    StringBuilder sbValues = new StringBuilder (" ");
    StringBuilder sbWhere = new StringBuilder (" WHERE ");
    foreach (var prop in props) {
        var sqlColumnAttr = (SqlColumn) prop.GetCustomAttribute (typeof (SqlColumn), false);
        var colValue = prop.GetValue (Obj);
        if (! sqlColumnAttr.PrimaryKey && colValue != null) {
            sbValues.AppendFormat ("{0}=@{0},", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        } else if (sqlColumnAttr.PrimaryKey) {
            sbWhere.AppendFormat ("{0}=@{0}", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        }
    }
    cmd.CommandText = "UPDATE " + TableName + sbValues.ToString ().TrimEnd (',') + sbWhere.ToString ();
    return cmd;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23207664_23225401_3_23
23207664_23225401_55_86
Title: How to bind an ObservableCollection to an sql table? 
----------------------------------------

public static SqlCommand GenerateSelectCommand < T > () {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ();
    StringBuilder sbColumns = new StringBuilder (" ");
    var cmd = new SqlCommand ();
    foreach (var prop in props) {
        sbColumns.Append (prop.Name);
    }
    cmd.CommandText = "SELECT " + sbColumns.ToString ().TrimEnd (',') + " FROM " + TableName;
    return cmd;
}
----------------------------------------

public static SqlCommand GenerateUpdateCommand < T > (object Obj, IEnumerable < string > PropertyNamesThatChanged) {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ().Where (pinfo = > ! PropertyNamesThatChanged.Contains (pinfo.Name)).ToArray ();
    var cmd = new SqlCommand ();
    StringBuilder sbValues = new StringBuilder (" ");
    StringBuilder sbWhere = new StringBuilder (" WHERE ");
    foreach (var prop in props) {
        var sqlColumnAttr = (SqlColumn) prop.GetCustomAttribute (typeof (SqlColumn), false);
        var colValue = prop.GetValue (Obj);
        if (! sqlColumnAttr.PrimaryKey && colValue != null) {
            sbValues.AppendFormat ("{0}=@{0},", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        } else if (sqlColumnAttr.PrimaryKey) {
            sbWhere.AppendFormat ("{0}=@{0}", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        }
    }
    cmd.CommandText = "UPDATE " + TableName + sbValues.ToString ().TrimEnd (',') + sbWhere.ToString ();
    return cmd;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23207664_23225401_3_23
23207664_23225401_88_112
Title: How to bind an ObservableCollection to an sql table? 
----------------------------------------

public static SqlCommand GenerateSelectCommand < T > () {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ();
    StringBuilder sbColumns = new StringBuilder (" ");
    var cmd = new SqlCommand ();
    foreach (var prop in props) {
        sbColumns.Append (prop.Name);
    }
    cmd.CommandText = "SELECT " + sbColumns.ToString ().TrimEnd (',') + " FROM " + TableName;
    return cmd;
}
----------------------------------------

public static SqlCommand GenerateDeleteCommand < T > (object Obj) {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ();
    StringBuilder sbWhere = new StringBuilder (" WHERE ");
    var cmd = new SqlCommand ();
    foreach (var prop in props) {
        var sqlColumnAttr = (SqlColumn) prop.GetCustomAttribute (typeof (SqlColumn), false);
        if (sqlColumnAttr.PrimaryKey) {
            var colValue = prop.GetValue (Obj);
            sbWhere.AppendFormat ("{0}=@{0}", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        }
    }
    cmd.CommandText = "DELETE FROM " + TableName + sbWhere.ToString ();
    return cmd;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23207664_23225401_55_86
23207664_23225401_88_112
Title: How to bind an ObservableCollection to an sql table? 
----------------------------------------

public static SqlCommand GenerateUpdateCommand < T > (object Obj, IEnumerable < string > PropertyNamesThatChanged) {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ().Where (pinfo = > ! PropertyNamesThatChanged.Contains (pinfo.Name)).ToArray ();
    var cmd = new SqlCommand ();
    StringBuilder sbValues = new StringBuilder (" ");
    StringBuilder sbWhere = new StringBuilder (" WHERE ");
    foreach (var prop in props) {
        var sqlColumnAttr = (SqlColumn) prop.GetCustomAttribute (typeof (SqlColumn), false);
        var colValue = prop.GetValue (Obj);
        if (! sqlColumnAttr.PrimaryKey && colValue != null) {
            sbValues.AppendFormat ("{0}=@{0},", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        } else if (sqlColumnAttr.PrimaryKey) {
            sbWhere.AppendFormat ("{0}=@{0}", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        }
    }
    cmd.CommandText = "UPDATE " + TableName + sbValues.ToString ().TrimEnd (',') + sbWhere.ToString ();
    return cmd;
}
----------------------------------------

public static SqlCommand GenerateDeleteCommand < T > (object Obj) {
    string TableName = GetTableName < T > ();
    PropertyInfo [] props = GetPropertyInfos < T > ();
    StringBuilder sbWhere = new StringBuilder (" WHERE ");
    var cmd = new SqlCommand ();
    foreach (var prop in props) {
        var sqlColumnAttr = (SqlColumn) prop.GetCustomAttribute (typeof (SqlColumn), false);
        if (sqlColumnAttr.PrimaryKey) {
            var colValue = prop.GetValue (Obj);
            sbWhere.AppendFormat ("{0}=@{0}", sqlColumnAttr.ColumnName);
            var param = new SqlParameter ("@" + sqlColumnAttr.ColumnName, colValue);
            param.DbType = (DbType) Enum.Parse (typeof (DbType), sqlColumnAttr.ValueType.Name);
            cmd.Parameters.Add (param);
        }
    }
    cmd.CommandText = "DELETE FROM " + TableName + sbWhere.ToString ();
    return cmd;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
232395_232465_16_29
232395_232465_1_15
Title: How do I sort a two-dimensional array in C#? 
----------------------------------------

static T [,] ToRectangular < T > (this T [] [] array) {
    int height = array.Length, width = array [0].Length;
    T [,] rect = new T [height, width];
    for (int i = 0; i < height; i ++) {
        T [] row = array [i];
        for (int j = 0; j < width; j ++) {
            rect [i, j] = row [j];
        }
    }
    return rect;
}
----------------------------------------

static T [] [] ToJagged < T > (this T [,] array) {
    int height = array.GetLength (0), width = array.GetLength (1);
    T [] [] jagged = new T [height] [];
    for (int i = 0; i < height; i ++) {
        T [] row = new T [width];
        for (int j = 0; j < width; j ++) {
            row [j] = array [i, j];
        }
        jagged [i] = row;
    }
    return jagged;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
232395_3161080_1_55
232395_6483498_10_50
Title: How do I sort a two-dimensional array in C#? 
----------------------------------------

static void Main (string [] args) {
    SqlConnection cnnX = new SqlConnection ("Data Source=r90jroughgarden\\;Initial Catalog=Sandbox;Integrated Security=True");
    SqlCommand cmdX = new SqlCommand ("select * from tblToBeSorted", cnnX);
    cmdX.CommandType = CommandType.Text;
    SqlDataReader rdrX = null;
    if (cnnX.State == ConnectionState.Closed)
        cnnX.Open ();

    int [,] aintSortingArray = new int [100, 4];
    try {
        rdrX = cmdX.ExecuteReader ();
        if (! rdrX.HasRows)
            return;

        int i = - 1;
        while (rdrX.Read () && i < 100) {
            i ++;
            aintSortingArray [i, 0] = rdrX.GetInt32 (0);
            aintSortingArray [i, 1] = rdrX.GetInt32 (1);
            aintSortingArray [i, 2] = rdrX.GetInt32 (2);
            aintSortingArray [i, 3] = rdrX.GetInt32 (3);
        }
        rdrX.Close ();
        DataTable dtblX = new DataTable ();
        dtblX.Columns.Add ("ChangeID");
        dtblX.Columns.Add ("ElementID");
        dtblX.Columns.Add ("PlanID");
        dtblX.Columns.Add ("TimeID");
        for (int j = 0; j < i; j ++) {
            DataRow drowX = dtblX.NewRow ();
            for (int k = 0; k < 4; k ++) {
                drowX [k] = aintSortingArray [j, k];
            }
            dtblX.Rows.Add (drowX);
        }
        DataRow [] adrowX = dtblX.Select ("", "ElementID, PlanID, TimeID");
        adrowX = dtblX.Select ("", "ElementID desc, PlanID asc, TimeID desc");
    }
    catch (Exception ex) {
        string strErrMsg = ex.Message;
    }
    finally {
        if (cnnX.State == ConnectionState.Open)
            cnnX.Close ();

    }
}
----------------------------------------

static void Main (string [] args) {
    int [,] arr = {{20, 9, 11}, {30, 5, 6}};
    Console.WriteLine ("before");
    for (int i = 0; i < arr.GetLength (0); i ++) {
        for (int j = 0; j < arr.GetLength (1); j ++) {
            Console.Write ("{0,3}", arr [i, j]);
        }
        Console.WriteLine ();
    }
    Console.WriteLine ("After");
    for (int i = 0; i < arr.GetLength (0); i ++) {
        for (int j = arr.GetLength (1) - 1; j > 0; j --) {
            for (int k = 0; k < j; k ++) {
                if (arr [i, k] > arr [i, k + 1]) {
                    int temp = arr [i, k];
                    arr [i, k] = arr [i, k + 1];
                    arr [i, k + 1] = temp;
                }
            }
        }
        Console.WriteLine ();
    }
    for (int i = 0; i < arr.GetLength (0); i ++) {
        for (int j = 0; j < arr.GetLength (1); j ++) {
            Console.Write ("{0,3}", arr [i, j]);
        }
        Console.WriteLine ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23270395_23270609_1_11
23270395_23270924_1_11
Title: Regex: PHP to C# | Help needed with converting 
----------------------------------------

public static string DoSomething (string Content) {
    if (string.IsNullOrEmpty (Content))
        return null;

    string pattern = @"\s*\$\s*(.*)";
    if (Regex.Match (Content, pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline).Groups.Count > 1)
        return Content;
    else
        return null;

}
----------------------------------------

public static string DoSomething (string Content) {
    if (string.IsNullOrEmpty (Content))
        return null;

    string pattern = "pattern needed";
    if (Regex.Match (Content, pattern).Groups.Count > 1)
        return Content;
    else
        return null;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
232848_232871_14_25
232848_232871_1_12
Title: Wrapping StopWatch timing with a delegate or lambda? 
----------------------------------------

public static Stopwatch MeasureTime < T, K > (int iterations, Action < T, K > action, T param1, K param2) {
    var sw = new Stopwatch ();
    sw.Start ();
    for (int i = 0; i < iterations; i ++) {
        action.Invoke (param1, param2);
    }
    sw.Stop ();
    return sw;
}
----------------------------------------

public static Stopwatch MeasureTime < T > (int iterations, Action < T > action, T param) {
    var sw = new Stopwatch ();
    sw.Start ();
    for (int i = 0; i < iterations; i ++) {
        action.Invoke (param);
    }
    sw.Stop ();
    return sw;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2329911_2329986_15_92
2329911_2330078_8_21
Title: C#: How to prevent two instances of an application from doing the same thing at the same time? 
----------------------------------------

static int Main (string [] args) {
    bool testMutex = false;
    if (args.Length > 0 && args [0].ToUpper () == "--MUTEX") {
        testMutex = true;
    }
    int pid = System.Diagnostics.Process.GetCurrentProcess ().Id;
    int rc = 0;
    Mutex mutex = null;
    bool obtainedMutex = false;
    int attempts = 0;
    int MAX_ATTEMPTS = 4;
    try {
        mutex = new Mutex (false, "Global\\" + APP_GUID);
        Console.WriteLine ("PID " + pid + " request mutex.");
        while (! obtainedMutex && attempts < MAX_ATTEMPTS) {
            try {
                if (! mutex.WaitOne (2000, false)) {
                    Console.WriteLine ("PID " + pid + " could not obtain mutex.");
                } else {
                    obtainedMutex = true;
                }
            }
            catch (AbandonedMutexException) {
                Console.WriteLine ("PID " + pid + " mutex abandoned!");
                mutex = new Mutex (false, "Global\\" + APP_GUID);
            }
            attempts ++;
        }
        if (! obtainedMutex) {
            Console.WriteLine ("PID " + pid + " gave up on mutex.");
            return 102;
        }
        Console.WriteLine ("PID " + pid + " got mutex.");
        if (testMutex) {
            Console.Write ("ENTER to exit mutex test....");
            Console.ReadKey ();
            return 103;
        }
    }
    finally {
        if (mutex != null && obtainedMutex)
            mutex.ReleaseMutex ();

        mutex.Close ();
        mutex = null;
    }
    return rc;
}
----------------------------------------

static void Main (string [] args) {
    Mutex mutex = new Mutex (false, "AwesomeMutex");
    Console.WriteLine ("ConsoleApplication1 created mutex, waiting . . .");
    mutex.WaitOne ();
    Console.Write ("Waiting for input. . .");
    Console.ReadKey (true);
    mutex.ReleaseMutex ();
    Console.WriteLine ("Disposed mutex");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2332053_2332143_1_13
2332053_2332615_1_16
Title: Problems with console output in C# 
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

public static void Main (string [] args) {
    int retries = 0;
    bool success = false;
    int maxRetries = 3;
    string fileName = args [0];
    Console.Write ("Checking data ");
    while (! success && retries ++ < maxRetries) {
        Console.Write ("{0}...", retries);
        success = File.Exists (fileName);
    }
    Console.WriteLine (" {0}Found!", (success ? "" : "Not "));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23342322_23343282_11_20
23342322_23343282_1_9
Title: Set all xml nodes as CDATA 
----------------------------------------

private void AddCData (XmlNode node) {
    string innerText = node.InnerText;
    if (! string.IsNullOrEmpty (innerText)) {
        if (! innerText.StartsWith ("<![CDATA[")) {
            var newCDATA = node.OwnerDocument.CreateCDataSection (innerText);
            node.InnerText = "";
            node.AppendChild (newCDATA);
        }
    }
}
----------------------------------------

private void AddCData (string path) {
    XmlDocument doc = new XmlDocument ();
    doc.Load (path);
    XmlNode root = doc.DocumentElement;
    foreach (XmlNode childNode in root.SelectNodes ("/rootNode/category/string")) {
        AddCData (childNode);
    }
    doc.Save (path + "_output.xml");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23344133_23345314_76_97
23344133_23349441_60_67
Title: ListBox DragDrop auto Scroll issue? 
----------------------------------------

private static T GetFirstVisualChild < T > (DependencyObject depObj) where T : DependencyObject {
    if (depObj != null) {
        for (var i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
            var child = VisualTreeHelper.GetChild (depObj, i);
            if (child is T) {
                return (T) child;
            }
            var childItem = GetFirstVisualChild < T > (child);
            if (childItem != null) {
                return childItem;
            }
        }
    }
    return null;
}
----------------------------------------

private T VisualFindParentFromType < T > (DependencyObject element) where T : UIElement {
    if (element == null)
        return default (T);

    if (element is T)
        return (T) element;

    return VisualFindParentFromType < T > (VisualTreeHelper.GetParent (element));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23344133_23345314_76_97
23344133_23349441_69_82
Title: ListBox DragDrop auto Scroll issue? 
----------------------------------------

private static T GetFirstVisualChild < T > (DependencyObject depObj) where T : DependencyObject {
    if (depObj != null) {
        for (var i = 0; i < VisualTreeHelper.GetChildrenCount (depObj); i ++) {
            var child = VisualTreeHelper.GetChild (depObj, i);
            if (child is T) {
                return (T) child;
            }
            var childItem = GetFirstVisualChild < T > (child);
            if (childItem != null) {
                return childItem;
            }
        }
    }
    return null;
}
----------------------------------------

private T FindChildrenFromType < T > (DependencyObject element) where T : UIElement {
    if (element == null)
        return default (T);

    if (element is T)
        return (T) element;

    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (element); i ++) {
        var result = FindChildrenFromType < T > (VisualTreeHelper.GetChild (element, i));
        if (! Equals (default (T), result))
            return result;

    }
    return default (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23344133_23349441_60_67
23344133_23349441_69_82
Title: ListBox DragDrop auto Scroll issue? 
----------------------------------------

private T VisualFindParentFromType < T > (DependencyObject element) where T : UIElement {
    if (element == null)
        return default (T);

    if (element is T)
        return (T) element;

    return VisualFindParentFromType < T > (VisualTreeHelper.GetParent (element));
}
----------------------------------------

private T FindChildrenFromType < T > (DependencyObject element) where T : UIElement {
    if (element == null)
        return default (T);

    if (element is T)
        return (T) element;

    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (element); i ++) {
        var result = FindChildrenFromType < T > (VisualTreeHelper.GetChild (element, i));
        if (! Equals (default (T), result))
            return result;

    }
    return default (T);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23359577_23359655_1_18
23359577_23359682_1_10
Title: Return bool or char 
----------------------------------------

static bool checkChar (char input, out char output) {
    char [] letters = {'f', 'g', 'h'};
    char noResult = '#';
    foreach (char letter in letters) {
        if (input.Equals (letter)) {
        } else {
            output = noResult;
            return false;
        }
    }
    output = letter;
    return true;
}
----------------------------------------

static char checkChar (char input) {
    char [] letters = {'f', 'g', 'h'};
    char result = '#';
    foreach (char letter in letters) {
        if (input.Equals (letter))
            result = letter;

    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23359577_23359655_1_18
23359577_23362905_17_25
Title: Return bool or char 
----------------------------------------

static bool checkChar (char input, out char output) {
    char [] letters = {'f', 'g', 'h'};
    char noResult = '#';
    foreach (char letter in letters) {
        if (input.Equals (letter)) {
        } else {
            output = noResult;
            return false;
        }
    }
    output = letter;
    return true;
}
----------------------------------------

static object checkChar (char input) {
    char [] letters = {'f', 'g', 'h'};
    char noResult = "#";
    foreach (char letter in letters) {
        if (input.Equals (letter))
            return letter;
        else
            return false;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23359577_23359682_1_10
23359577_23362905_17_25
Title: Return bool or char 
----------------------------------------

static char checkChar (char input) {
    char [] letters = {'f', 'g', 'h'};
    char result = '#';
    foreach (char letter in letters) {
        if (input.Equals (letter))
            result = letter;

    }
    return result;
}
----------------------------------------

static object checkChar (char input) {
    char [] letters = {'f', 'g', 'h'};
    char noResult = "#";
    foreach (char letter in letters) {
        if (input.Equals (letter))
            return letter;
        else
            return false;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23359577_23359805_1_12
23359577_23362905_1_15
Title: Return bool or char 
----------------------------------------

void Main () {
    string line = Console.ReadLine ();
    bool result;
    for (int i = 0; i < line.Length; i ++) {
        result = checkChar (line [i]);
        if (! result)
            continue;

        Console.WriteLine (line [i]);
    }
}
----------------------------------------

static void Main () {
    Console.Write ("Write a string: ");
    string line = Console.ReadLine ();
    object result;
    if (line != null) {
        for (int i = 0; i <= line.Length; i ++) {
            result = checkChar (line [i]);
            if (result is bool)
                break;

        }
        Console.WriteLine (result);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2336347_2336443_24_38
2336347_2336443_3_17
Title: validating null value conversions 
----------------------------------------

public static T ? ToNullable < T > (object value) where T : struct {
    T ? cast;
    try {
        cast = value == DBNull.Value ? null : (T ?) value;
    }
    catch {
        throw new ArgumentException (string.Format ("Argument of type {0} cannot be cast to type {1}", value.GetType (), typeof (T ?)), "value");
    }
    return cast;
}
----------------------------------------

public static T To < T > (object value, T defaultValue) {
    T cast;
    try {
        cast = value == DBNull.Value ? defaultValue : (T) value;
    }
    catch {
        throw new ArgumentException (string.Format ("Argument of type {0} cannot be cast to type {1}", value.GetType (), typeof (T)), "value");
    }
    return cast;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23381657_23382052_1_16
23381657_23382171_1_14
Title: How can I add specific column of a Table to a DataSet? 
----------------------------------------

public DataSet GetPerson (IEnumerable < string > wantedColumns) {
    using (SqlConnection connection = new SqlConnection ("Connection-String"))
    using (SqlDataAdapter _daPerson = new SqlDataAdapter ("SP-GetAllPerson", connection))
    {
        _daPerson.SelectCommand.CommandType = System.Data.CommandType.StoredProcedure;
        DataSet _personDs = new DataSet ();
        _daPerson.Fill (_personDs, "TBL_Person");
        DataTable tblPersonIds = _personDs.Tables ["TBL_Person"];
        var allColumns = tblPersonIds.Columns.Cast < DataColumn > ().Select (c = > c.ColumnName);
        foreach (string columnToRemove in allColumns.Except (wantedColumns))
            tblPersonIds.Columns.Remove (columnToRemove);

        return _personDs;
    }}
----------------------------------------

public DataSet GetPerson () {
    SqlCommand _select = new SqlCommand ();
    _select.CommandText = "SP-GetAllPerson";
    _select.CommandType = System.Data.CommandType.StoredProcedure;
    _select.Connection = Connection.GetConnection;
    SqlDataAdapter _daPerson = new SqlDataAdapter (_select);
    DataSet _personDs = new DataSet ();
    _daPerson.Fill (_personDs, "[TBL_Person]");
    _personDs.Tables ["TBL_Person"].Columns.Remove ("Person_ID");
    _personDs.Tables ["TBL_Person"].Columns.Remove ("Location");
    return _personDs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2338402_2338985_1_22
2338402_2339013_17_35
Title: faster implementation of sum ( for Codility test ) 
----------------------------------------

int equi (int [] A) {
    int equi = - 1;
    long lower = 0;
    long upper = 0;
    foreach (int i in A)
        upper += i;

    for (int i = 0; i < A.Length; i ++) {
        upper -= A [i];
        if (upper == lower) {
            equi = i;
            break;
        } else
            lower += A [i];

    }
    return equi;
}
----------------------------------------

static int equi (int [] A) {
    if (A == null || A.Length == 0)
        return - 1;

    if (A.Length == 1)
        return 0;

    var upperBoundSum = GetTotal (A);
    var lowerBoundSum = 0;
    for (var i = 0; i < A.Length; i ++) {
        lowerBoundSum += (i - 1) >= 0 ? A [i - 1] : 0;
        upperBoundSum -= A [i];
        if (lowerBoundSum == upperBoundSum)
            return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2338402_2338985_1_22
2338402_4583970_1_19
Title: faster implementation of sum ( for Codility test ) 
----------------------------------------

int equi (int [] A) {
    int equi = - 1;
    long lower = 0;
    long upper = 0;
    foreach (int i in A)
        upper += i;

    for (int i = 0; i < A.Length; i ++) {
        upper -= A [i];
        if (upper == lower) {
            equi = i;
            break;
        } else
            lower += A [i];

    }
    return equi;
}
----------------------------------------

int equi (int [] A) {
    if (A == null)
        return - 1;

    long sum0 = 0, sum1 = 0;
    for (int i = 0; i < A.Length; i ++)
        sum0 += A [i];

    for (int i = 0; i < A.Length; i ++) {
        sum0 -= A [i];
        if (i > 0) {
            sum1 += A [i - 1];
        }
        if (sum1 == sum0)
            return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2338402_2338985_1_22
2338402_5005823_1_23
Title: faster implementation of sum ( for Codility test ) 
----------------------------------------

int equi (int [] A) {
    int equi = - 1;
    long lower = 0;
    long upper = 0;
    foreach (int i in A)
        upper += i;

    for (int i = 0; i < A.Length; i ++) {
        upper -= A [i];
        if (upper == lower) {
            equi = i;
            break;
        } else
            lower += A [i];

    }
    return equi;
}
----------------------------------------

private static ArrayList equi (int [] A) {
    ArrayList answer = new ArrayList ();
    if ((answer.Count == null)) {
        answer.Add (- 1);
        return answer;
    }
    long sum0 = 0, sum1 = 0;
    for (int i = 0; i < A.Length; i ++)
        sum0 += A [i];

    for (int i = 0; i < A.Length; i ++) {
        sum0 -= A [i];
        if (i > 0) {
            sum1 += A [i - 1];
        }
        if (sum1 == sum0)
            answer.Add (i);

    }
    return answer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2338402_2339013_17_35
2338402_4583970_1_19
Title: faster implementation of sum ( for Codility test ) 
----------------------------------------

static int equi (int [] A) {
    if (A == null || A.Length == 0)
        return - 1;

    if (A.Length == 1)
        return 0;

    var upperBoundSum = GetTotal (A);
    var lowerBoundSum = 0;
    for (var i = 0; i < A.Length; i ++) {
        lowerBoundSum += (i - 1) >= 0 ? A [i - 1] : 0;
        upperBoundSum -= A [i];
        if (lowerBoundSum == upperBoundSum)
            return i;

    }
    return - 1;
}
----------------------------------------

int equi (int [] A) {
    if (A == null)
        return - 1;

    long sum0 = 0, sum1 = 0;
    for (int i = 0; i < A.Length; i ++)
        sum0 += A [i];

    for (int i = 0; i < A.Length; i ++) {
        sum0 -= A [i];
        if (i > 0) {
            sum1 += A [i - 1];
        }
        if (sum1 == sum0)
            return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2338402_2339013_17_35
2338402_5005823_1_23
Title: faster implementation of sum ( for Codility test ) 
----------------------------------------

static int equi (int [] A) {
    if (A == null || A.Length == 0)
        return - 1;

    if (A.Length == 1)
        return 0;

    var upperBoundSum = GetTotal (A);
    var lowerBoundSum = 0;
    for (var i = 0; i < A.Length; i ++) {
        lowerBoundSum += (i - 1) >= 0 ? A [i - 1] : 0;
        upperBoundSum -= A [i];
        if (lowerBoundSum == upperBoundSum)
            return i;

    }
    return - 1;
}
----------------------------------------

private static ArrayList equi (int [] A) {
    ArrayList answer = new ArrayList ();
    if ((answer.Count == null)) {
        answer.Add (- 1);
        return answer;
    }
    long sum0 = 0, sum1 = 0;
    for (int i = 0; i < A.Length; i ++)
        sum0 += A [i];

    for (int i = 0; i < A.Length; i ++) {
        sum0 -= A [i];
        if (i > 0) {
            sum1 += A [i - 1];
        }
        if (sum1 == sum0)
            answer.Add (i);

    }
    return answer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2338402_30797922_1_14
2338402_38059965_3_30
Title: faster implementation of sum ( for Codility test ) 
----------------------------------------

public static int solution (int [] A) {
    double sum = A.Sum (d = > (double) d);
    double leftSum = 0;
    for (int i = 0; i < A.Length; i ++) {
        if (leftSum == (sum - leftSum - A [i])) {
            return i;
        } else {
            leftSum = leftSum + A [i];
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int [] A) {
    long sumLeft = 0;
    long sumRight = 0;
    long sum = 0;
    long leftHolder = 0;
    for (int i = 0; i < A.Length; i ++) {
        sum += A [i];
    }
    for (int i = 0; i < A.Length; i ++) {
        leftHolder += A [i];
        sumRight = sum - leftHolder;
        sumLeft = sum - sumRight - A [i];
        if (sumLeft == sumRight)
            return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2338402_4583970_1_19
2338402_5005823_1_23
Title: faster implementation of sum ( for Codility test ) 
----------------------------------------

int equi (int [] A) {
    if (A == null)
        return - 1;

    long sum0 = 0, sum1 = 0;
    for (int i = 0; i < A.Length; i ++)
        sum0 += A [i];

    for (int i = 0; i < A.Length; i ++) {
        sum0 -= A [i];
        if (i > 0) {
            sum1 += A [i - 1];
        }
        if (sum1 == sum0)
            return i;

    }
    return - 1;
}
----------------------------------------

private static ArrayList equi (int [] A) {
    ArrayList answer = new ArrayList ();
    if ((answer.Count == null)) {
        answer.Add (- 1);
        return answer;
    }
    long sum0 = 0, sum1 = 0;
    for (int i = 0; i < A.Length; i ++)
        sum0 += A [i];

    for (int i = 0; i < A.Length; i ++) {
        sum0 -= A [i];
        if (i > 0) {
            sum1 += A [i - 1];
        }
        if (sum1 == sum0)
            answer.Add (i);

    }
    return answer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23417328_23571718_1_13
23417328_23664887_1_13
Title: ZeroMQ CLRZMQ - Polling a socket 
----------------------------------------

public static void RaiseOnTimeout (Context ctx, Socket sock, TimeSpan timeout) {
    List < PollItem > pollItemsList = new List < PollItem > ();
    PollItem pollItem = sock.CreatePollItem (IOMultiPlex.POLLIN);
    pollItemsList.Add (pollItem);
    int numReplies = ctx.Poll (pollItemsList.ToArray (), timeout.Value.Ticks * 10);
    if (numReplies == 0) {
        throw new TimeoutException ();
    }
}
----------------------------------------

public static void RaiseOnTimeout (Socket sock, TimeSpan timeout) {
    List < PollItem > pollItemsList = new List < PollItem > ();
    PollItem pollItem = sock.CreatePollItem (IOMultiPlex.POLLIN);
    pollItemsList.Add (pollItem);
    int numReplies = Context.Poller (pollItemsList.ToArray (), timeout.Value.Ticks * 10);
    if (numReplies == 0) {
        throw new TimeoutException ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23424316_23426210_1_26
23424316_23428327_1_16
Title: Mixed use of Task and Dispatcher halts the task 
----------------------------------------

private void LocalSearchCommandExecuted (object obj) {
    VisibleElement.Visibility = Visibility.Collapsed;
    var scheduler = TaskScheduler.FromCurrentSynchronizationContext ();
    Task.Factory.StartNew (() = > {
        LongRunningOperation ();
    }).ContinueWith (t = > {
        if (t.IsCompleted) {
            VisibleElement.Visibility = Visibility.Visible;
            _list = new List < string > (_tempList);
            RaisePropertyChanged ("SearchResults");
        }
    }, scheduler);
}
----------------------------------------

private void LocalSearchCommandExecuted () {
    this.loadingElement.Visible = true;
    Task.Factory.StartNew (() = > {
        this.SearchCommand.Execute (null);
    }).ContinueWith (t = > {
        if (t.IsCompleted) {
            this.Dispatcher.BeginInvoke ((Action) (() = > this.loadingElement.Visible = false));
            t.Dispose ();
        }
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23429534_23429711_1_24
23429534_23429711_26_62
Title: How to deserialize the xmlelement containing List in xml 
----------------------------------------

public void SerializeObject < T > (T serializableObject, string fileName) {
    if (serializableObject == null) {
        return;
    }
    try {
        XmlDocument xmlDocument = new XmlDocument ();
        XmlSerializer serializer = new XmlSerializer (serializableObject.GetType ());
        using (MemoryStream stream = new MemoryStream ())
        {
            serializer.Serialize (stream, serializableObject);
            stream.Position = 0;
            xmlDocument.Load (stream);
            xmlDocument.Save (fileName);
            stream.Close ();
        }}
    catch (Exception ex) {
        log.Error ("SerializeObject ", ex);
    }
}
----------------------------------------

public T DeSerializeObject < T > (string fileName) {
    if (string.IsNullOrEmpty (fileName)) {
        return default (T);
    }
    T objectOut = default (T);
    try {
        string attributeXml = string.Empty;
        XmlDocument xmlDocument = new XmlDocument ();
        xmlDocument.Load (fileName);
        string xmlString = xmlDocument.OuterXml;
        using (StringReader read = new StringReader (xmlString))
        {
            Type outType = typeof (T);
            XmlSerializer serializer = new XmlSerializer (outType);
            using (XmlReader reader = new XmlTextReader (read))
            {
                objectOut = (T) serializer.Deserialize (reader);
                reader.Close ();
            } read.Close ();
        }}
    catch (Exception ex) {
        log.Error ("DeSerializeObject ", ex);
    }
    return objectOut;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23452345_23453439_1_24
23452345_23453439_26_62
Title: How to Deserialize using binary Deserialization from file 
----------------------------------------

public void SerializeObject < T > (T serializableObject, string fileName) {
    if (serializableObject == null) {
        return;
    }
    try {
        XmlDocument xmlDocument = new XmlDocument ();
        XmlSerializer serializer = new XmlSerializer (serializableObject.GetType ());
        using (MemoryStream stream = new MemoryStream ())
        {
            serializer.Serialize (stream, serializableObject);
            stream.Position = 0;
            xmlDocument.Load (stream);
            xmlDocument.Save (fileName);
            stream.Close ();
        }}
    catch (Exception ex) {
        log.Error ("SerializeObject ", ex);
    }
}
----------------------------------------

public T DeSerializeObject < T > (string fileName) {
    if (string.IsNullOrEmpty (fileName)) {
        return default (T);
    }
    T objectOut = default (T);
    try {
        string attributeXml = string.Empty;
        XmlDocument xmlDocument = new XmlDocument ();
        xmlDocument.Load (fileName);
        string xmlString = xmlDocument.OuterXml;
        using (StringReader read = new StringReader (xmlString))
        {
            Type outType = typeof (T);
            XmlSerializer serializer = new XmlSerializer (outType);
            using (XmlReader reader = new XmlTextReader (read))
            {
                objectOut = (T) serializer.Deserialize (reader);
                reader.Close ();
            } read.Close ();
        }}
    catch (Exception ex) {
        log.Error ("DeSerializeObject ", ex);
    }
    return objectOut;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23469580_23469844_1_23
23469580_23469860_10_49
Title: How to hide or make it visible based on the condition given in the TextChanged event of the Textbox? 
----------------------------------------

protected void TextBox1_TextChanged1 (object sender, EventArgs e) {
    dt = g1.return_dt ("select name from tbl_data_show");
    if (dt.Rows.Count > 0) {
        if (TextBox1.Text == dt.Rows [0] ["name"]) {
            Label1.Text = "4";
            Label1.Visible = true;
        } else if (TextBox1.Text != dt.Rows [0] ["name"]) {
            Label2.Text = "5";
            Label2.Visible = true;
        } else {
            Label1.Visible = false;
            Label2.Visible = false;
        }
    }
}
----------------------------------------

protected void TextBox1_TextChanged1 (object sender, EventArgs e) {
    SqlConnection con = new SqlConnection (ConfigurationManager.ConnectionStrings ["conn"].ConnectionString);
    con.Open ();
    SqlCommand cmd = new SqlCommand ("select name from tbl_data_show where name='" + TextBox1.Text + "'", con);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        while (dr.Read ()) {
            Panel1.Visible = true;
        }
    } else {
        Panel1.Visible = false;
    }
    con.Close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23515457_23515731_17_30
23515457_23515731_50_63
Title: MemberwiseClone vs new object 
----------------------------------------

public A Clone () {
    A result = new A ();
    result.Int1 = Int1;
    result.Int2 = Int2;
    result.Int3 = Int3;
    result.Int4 = Int4;
    foreach (B item in CollectionB)
        result.CollectionB.Add (item.Clone ());

    return result;
}
----------------------------------------

public B Clone () {
    B result = new B ();
    result.Int1 = Int1;
    result.Int2 = Int2;
    foreach (Bitmap source in SomeBitmaps)
        result.SomeBitmaps.Add (new Bitmap (source));

    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23516587_23517763_40_55
23516587_23517763_56_69
Title: How to know which version of Office 2013 is installed in my server; 32 or 64 bit? 
----------------------------------------

private string GetOfficeVersionNumber () {
    string OfficeVersionNo = null;
    bool Is64BitWindows = Is64BitOperatingSystem ();
    if (! Is64BitWindows) {
        OfficeVersionNo = GetOfficeVersionNumber ("SOFTWARE\\Microsoft\\Office\\");
    } else {
        OfficeVersionNo = GetOfficeVersionNumber ("SOFTWARE\\Microsoft\\Office\\");
        if (OfficeVersionNo == null)
            OfficeVersionNo = GetOfficeVersionNumber ("SOFTWARE\\Wow6432Node\\Microsoft\\Office\\");

    }
    return OfficeVersionNo;
}
----------------------------------------

private string GetOfficeVersionNumber (string RegistryPrefix) {
    string CurrentOfficeVersionNo = null;
    foreach (string OfficeVersionNo in OfficeVersions.Keys) {
        string Path = GetRegKey64 (HKEY_LOCAL_MACHINE, RegistryPrefix + OfficeVersionNo + "\\Excel\\InstallRoot", "Path");
        if (Path != null) {
            CurrentOfficeVersionNo = OfficeVersionNo;
            break;
        }
    }
    return CurrentOfficeVersionNo;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23522294_23860590_1_13
23522294_23950021_11_31
Title: How to scroll a FlowLayout parent container to keep visible a portion of a children control? 
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    int lineHeight = 0;
    if (textBox1.Lines.Count () > 1) {
        Point p1 = textBox1.GetPositionFromCharIndex (textBox1.GetFirstCharIndexFromLine (0));
        Point p2 = textBox1.GetPositionFromCharIndex (textBox1.GetFirstCharIndexFromLine (1));
        lineHeight = Math.Abs (p1.Y - p2.Y);
    }
    int lineIndex = textBox1.GetLineFromCharIndex (textBox1.SelectionStart);
    flowLayoutPanel1.AutoScrollPosition = new Point (0, lineIndex * lineHeight);
}
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23525071_23525186_1_14
23525071_23528332_8_25
Title: Creating Delegates for Caching Property Accessors 
----------------------------------------

static Func < TInstance, TResult > CreateGetterDelegate < TInstance, TResult > (PropertyInfo propertyInfo) {
    if (typeof (TInstance) != propertyInfo.DeclaringType) {
        throw new ArgumentException ();
    }
    var instance = Expression.Parameter (propertyInfo.DeclaringType);
    var property = Expression.Property (instance, propertyInfo);
    var convert = Expression.TypeAs (property, typeof (object));
    return (Func < TInstance, TResult >) Expression.Lambda (convert, instance).Compile ();
}
----------------------------------------

public static Delegate CreateTypedGetterDelegate < TClass, TProp > (PropertyInfo propertyInfo) {
    if (typeof (TClass) != propertyInfo.DeclaringType) {
        throw new ArgumentException ();
    }
    var instance = Expression.Parameter (propertyInfo.DeclaringType);
    var property = Expression.Property (instance, propertyInfo);
    if (typeof (TProp).IsValueType) {
        return (Func < TClass, TProp >) Expression.Lambda (property, instance).Compile ();
    } else {
        return (Func < TClass, TProp >) Expression.Lambda (Expression.TypeAs (property, typeof (TProp)), instance).Compile ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23553526_23554133_1_27
23553526_23554133_29_44
Title: How to return stored procedure results into a List of Class when not using entity framework? 
----------------------------------------

public static IEnumerable < T > GetEntity < T > (string storedProcedureName, params SqlParameter [] parameters) {
    try {
        using (SqlConnection connection = new SqlConnection ("connectionString"))
        {
            connection.Open ();
            SqlCommand command = new SqlCommand (storedProcedureName, connection);
            command.CommandType = System.Data.CommandType.StoredProcedure;
            if (parameters != null && parameters.Any ()) {
                command.Parameters.AddRange (parameters);
            }
            string result = (string) command.ExecuteScalar ();
            return Deserialize < T > (result);
        }}
    catch (Exception ex) {
        return (IEnumerable < T >) default (T);
    }
}
----------------------------------------

private static IEnumerable < T > Deserialize < T > (string xmlStream, params Type [] additionalTypes) {
    XmlSerializer serializer = additionalTypes == null ? new XmlSerializer (typeof (List < T >)) : new XmlSerializer (typeof (List < T >), additionalTypes);
    using (var reader = new XmlTextReader (new StringReader (xmlStream)))
    {
        if (! serializer.CanDeserialize (reader)) {
            return (IEnumerable < T >) default (T);
        }
        return (IEnumerable < T >) serializer.Deserialize (reader);
    }}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23556787_23556848_1_20
23556787_23556921_1_20
Title: Returning Three Values from a Method 
----------------------------------------

public static List < String > GetInput () {
    string userInput;
    List < String > userInputs = new List < String > ();
    Console.Write ("Enter your name: ");
    userInput = Console.ReadLine ();
    userInputs.Add (userInput);
    Console.Write ("Enter your age: ");
    userInput = Console.ReadLine ();
    userInputs.Add (userInput);
    Console.Write ("Enter the Gas Mileage: ");
    userInput = Console.ReadLine ();
    userInputs.Add (userInput);
    return userInput;
}
----------------------------------------

public static dynamic GetInput () {
    dynamic userinputs;
    Console.Write ("Enter your name: ");
    var _name = Console.ReadLine ();
    Console.Write ("Enter your age: ");
    var _age = Console.ReadLine ();
    Console.Write ("Enter the Gas Mileage: ");
    vae _mileage = Console.ReadLine ();
    userinputs.name = _name;
    userinputs.age = _age;
    userinputs.mileage = _mileage;
    return userinputs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23567067_23567127_1_21
23567067_23567144_1_22
Title: Returning two strings in a function in c# 
----------------------------------------

protected string Active_Frozen (out string text, out string color) {
    connection ();
    string query = "SELECT CustomerInfo FROM ActiveSubscription WHERE UserName=@UserName";
    SqlCommand cmd = new SqlCommand (query, conn);
    if (query == "true") {
        text = "Active";
        color = "Green";
    } else {
        text = "Frozen";
        color = "Red";
    }
}
----------------------------------------

protected Container Active_Frozen (string text, string color) {
    connection ();
    string query = "SELECT CustomerInfo FROM ActiveSubscription WHERE UserName=@UserName";
    SqlCommand cmd = new SqlCommand (query, conn);
    if (query == "true") {
        Container c = new Container {text = "Frozen", color = "Red"};
    } else {
        Container c = new Container {text = "Frozen", color = "Red"};
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23654961_23655030_1_14
23654961_23655065_1_16
Title: Value overwriten after postback? 
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    bool projectIdAvailable = this.Request.QueryString ["ProjectID"] != null;
    if (! projectIdAvailable) {
    } else {
        if (! IsPostBack)
            LoadReporting ();

    }
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    bool projectIdAvailable = this.Request.QueryString ["ProjectID"] != null;
    if (! projectIdAvailable) {
    } else {
        if (! IsPostBack) {
            LoadReporting ();
        }
    }
}
----------------------------------------

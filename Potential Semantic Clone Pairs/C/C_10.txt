$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19730765_19731021_13_38
19730765_19731276_14_49
Title: Why isn't this program allowing me to enter information when I need too? 
----------------------------------------

int main (void) {
    struct studentDataType *studentRecords = NULL;
    unsigned int students;
    unsigned int studentID;
    unsigned int year;
    unsigned int month;
    unsigned int day;
    unsigned long phone;
    printf ("How many students are you entering records for:\n");
    scanf ("%d", & students);
    studentRecords = malloc (sizeof (struct studentDataType) * students);
    if (studentRecords != NULL) {
        struct studentDataType *current_record = &studentRecords[0];
        for (int i = 0; i < students; ++i, current_record++) {
            printf ("Enter information for student %d\n", i + 1);
            scanf ("%u %u %u %u %u", & (current_record -> studentID), & (current_record -> year), & (current_records -> month), & (current_record -> day), & (current_records -> phone));
        }
        free (studentRecords);
    }
}
----------------------------------------

int main (void) {
    int students;
    printf ("How many students are you entering records for:\n");
    scanf ("%d", & students);
    studentRecords = malloc (sizeof (s) * students);
    for (int i = 0; i != students; i++) {
        printf ("Enter information for student %d\n", i);
        scanf ("%d%d%d%d%s", & studentRecords [i].studentID, & studentRecords [i].year, & studentRecords [i].month, & studentRecords [i].day, studentRecords [i].phone);
    }
    getchar ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1973742_1973775_6_27
1973742_1973814_3_27
Title: How to get a value from optarg 
----------------------------------------

int main (int argc, char **argv) {
    char c;
    char port [BUFSIZE + 1];
    char addr [BUFSIZE + 1];
    while ((c = getopt (argc, argv, "i:p:")) != -1)
        switch (c) {
        case 'i' :
            snprintf (addr, BUFSIZE, "%s", optarg);
            break;
        case 'p' :
            snprintf (port, BUFSIZE, "%s", optarg);
            break;
        case '?' :
            fprintf (stderr, "Unrecognized option!\n");
            break;
        }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int option = -1;
    char *addr, *port;
    while ((option = getopt (argc, argv, "i:p:")) != -1) {
        switch (option) {
        case 'i' :
            addr = strdup (optarg);
            break;
        case 'p' :
            port = strdup (optarg);
            break;
        default :
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1973742_1973775_6_27
1973742_42730621_9_40
Title: How to get a value from optarg 
----------------------------------------

int main (int argc, char **argv) {
    char c;
    char port [BUFSIZE + 1];
    char addr [BUFSIZE + 1];
    while ((c = getopt (argc, argv, "i:p:")) != -1)
        switch (c) {
        case 'i' :
            snprintf (addr, BUFSIZE, "%s", optarg);
            break;
        case 'p' :
            snprintf (port, BUFSIZE, "%s", optarg);
            break;
        case '?' :
            fprintf (stderr, "Unrecognized option!\n");
            break;
        }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    struct sockaddr_in sa;
    char c;
    memset (& sa, 0, sizeof (sa));
    sa.sin_family = AF_INET;
    sa.sin_addr.s_addr = htonl (INADDR_ANY);
    sa.sin_port = 0;
    while ((c = getopt (argc, argv, "i:p:")) != -1) {
        switch (c) {
        case 'p' :
            sa.sin_port = htons (atoi (optarg));
            break;
        case 'i' :
            inet_pton (AF_INET, optarg, &(sa.sin_addr));
            break;
        case '?' :
            fprintf (stderr, "Unknown option\n");
            break;
        }
    }
    char str [INET_ADDRSTRLEN];
    inet_ntop (AF_INET, & (sa.sin_addr), str, INET_ADDRSTRLEN);
    printf ("%s:%d\n", str, ntohs (sa.sin_port));
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1973742_1973814_3_27
1973742_42730621_9_40
Title: How to get a value from optarg 
----------------------------------------

int main (int argc, char *argv []) {
    int option = -1;
    char *addr, *port;
    while ((option = getopt (argc, argv, "i:p:")) != -1) {
        switch (option) {
        case 'i' :
            addr = strdup (optarg);
            break;
        case 'p' :
            port = strdup (optarg);
            break;
        default :
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    struct sockaddr_in sa;
    char c;
    memset (& sa, 0, sizeof (sa));
    sa.sin_family = AF_INET;
    sa.sin_addr.s_addr = htonl (INADDR_ANY);
    sa.sin_port = 0;
    while ((c = getopt (argc, argv, "i:p:")) != -1) {
        switch (c) {
        case 'p' :
            sa.sin_port = htons (atoi (optarg));
            break;
        case 'i' :
            inet_pton (AF_INET, optarg, &(sa.sin_addr));
            break;
        case '?' :
            fprintf (stderr, "Unknown option\n");
            break;
        }
    }
    char str [INET_ADDRSTRLEN];
    inet_ntop (AF_INET, & (sa.sin_addr), str, INET_ADDRSTRLEN);
    printf ("%s:%d\n", str, ntohs (sa.sin_port));
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19740521_19740586_1_19
19740521_19740611_1_13
Title: Queue struct losing element values after being called once 
----------------------------------------

void Enqueue (struct Queue *q, char *str) {
    struct Node * pnewNode = calloc (1, sizeof (* pnewNode);
    if (NULL == pnewNode) {
        perror ("calloc() failed");
        exit (EXIT_FAILURE);
    }
    pnewNode->element = str;
    if (q->size == 0) {
        q->head = pnewNode;
    }
    else {
        q->tail->next = pnewNode;
    }
    q->tail = pnewNode;
    q->size = q->size + 1;
}
----------------------------------------

void Enqueue (struct Queue *q, char *str) {
    struct Node *newNode = malloc (sizeof (struct Node));
    newNode->next = NULL;
    newNode->element = str;
    if (q->size == 0) {
        q->head = newNode;
    }
    else {
        q->tail->next = newNode;
    }
    q->tail = newNode;
    q->size = q->size + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19760336_19761990_4_17
19760336_19768282_4_16
Title: how to read a char value in C without going to next line 
----------------------------------------

int main (void) {
    char p, q;
    printf ("Hello enter char: ");
    p = getchar ();
    printf ("the char is: %c\n", p);
    int c;
    while ((c = getchar ()) != '\n' && c != EOF && c != ' ')
        ;
    printf ("Hello enter char: ");
    q = getchar ();
    printf ("the char is: %c\n", q);
    return 0;
}
----------------------------------------

int main (void) {
    char p, q;
    printf ("Hello enter char: ");
    p = getch ();
    printf ("the char is: %c\n", p);
    printf ("Hello enter char: ");
    q = getch ();
    printf ("the char is: %c\n", q);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19779743_19779908_16_31
19779743_19780050_11_28
Title: Inserting into a linked list not working properly 
----------------------------------------

void InsertChar (char s) {
    item *curr, *temp;
    curr = (item *) malloc (sizeof (item));
    curr->value = s;
    curr->next = head;
    head = curr;
    temp = head;
    while (temp) {
        printf ("%c", temp -> value);
        temp = temp->next;
    }
    printf ("\n");
}
----------------------------------------

void InsertChar (char s) {
    item *c = (item *) malloc (sizeof (item));
    c->value = s;
    c->next = NULL;
    if (head)
        curr->next = c;
    else
        head = c;
    curr = c;
    for (c = head; c; c = c->next)
        printf ("%c", c->value);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19786509_19786720_4_24
19786509_19786787_8_21
Title: Pause execution until specific time in C 
----------------------------------------

int main () {
    time_t c_time, b_time;
    struct tm b_date;
    double seconds;
    y2k.tm_hour = 0;
    y2k.tm_min = 0;
    y2k.tm_sec = 0;
    y2k.tm_year = 100;
    y2k.tm_mon = 0;
    y2k.tm_mday = 1;
    time (& c_time);
    b_time = mktime (&b_date);
    seconds = difftime (c_time, b_time);
    if (seconds < 0) {
    }
    return 0;
}
----------------------------------------

int main () {
    SYSTEMTIME t;
    GetLocalTime (& t);
    if (t.wDay != DAY || t.wMonth != MONTH) {
        printf ("You can't open this program today!\n");
        MessageBox (0, "You can't open this program today!", "Error", MB_ICONSTOP);
        return 1;
    }
    system ("start https://www.youtube.com/watch?v=FchMuPQOBwA");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19801642_19880128_8_62
19801642_21309942_9_74
Title: Passing Pointers of Pointers to search xmlTree using libxml2 
----------------------------------------

int main (void) {
    int num_chan, k;
    xmlDocPtr doc;
    xmlNodePtr cur;
    xmlNode **x, **t;
    char xstr [] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" "<chan>" "<blah>" "<wrong>" "<other>" "<ele>some_text</ele>" "<foo>" "<enabled>true</enabled>" "</foo>" "<foo>" "<enabled>true</enabled>" "</foo>" "</other>" "</wrong>" "</blah>" "<blah>" "<foo>" "<enabled>true</enabled>" "</foo>" "<foo>" "<enabled>false</enabled>" "</foo>" "</blah>" "<enabled>false</enabled>" "<enabled>true</enabled>" "</chan>";
    doc = xmlParseMemory (xstr, sizeof (xstr) / sizeof (*xstr));
    cur = xmlDocGetRootElement (doc);
    num_chan = FindNodesByTagName (NULL, cur, "enabled");
    x = calloc (sizeof (xmlNode *), num_chan);
    t = x;
    FindNodesByTagName (& t, cur, "enabled");
    for (k = 0; k < num_chan; k++)
        printf ("%s\n", x[k]->name);
    printf ("%i\n", num_chan);
    free (x);
    return 0;
}
----------------------------------------

int main (void) {
    int num_chan, k;
    xmlDocPtr doc;
    xmlNodePtr cur;
    xmlNode **x;
    char xstr [] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" "<chan>" "<blah>" "<wrong>" "<other>" "<ele>some_text</ele>" "<foo>" "<enabled>true</enabled>" "</foo>" "<foo>" "<enabled>true</enabled>" "</foo>" "</other>" "</wrong>" "</blah>" "<blah>" "<foo>" "<enabled>true</enabled>" "</foo>" "<foo>" "<enabled>false</enabled>" "</foo>" "</blah>" "<enabled>false</enabled>" "<enabled>true</enabled>" "</chan>";
    doc = xmlParseMemory (xstr, sizeof (xstr) / sizeof (*xstr));
    cur = xmlDocGetRootElement (doc);
    num_chan = FindNodesByTagName (NULL, cur, "enabled");
    x = calloc (sizeof (xmlNode *), num_chan);
    printf ("\nAllocated memory before FindNodes\n");
    for (k = 0; k < num_chan; k++)
        printf ("%i-%p-%p\n", k, x +k, x[k]);
    FindNodesByTagName (x, cur, "enabled");
    printf ("\nAfter FindNodes\n");
    for (k = 0; k < num_chan; k++)
        printf ("%i-%p-%s\n", k, x[k], x[k]->name);
    free (x);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19823702_19824044_8_25
19823702_19843537_3_12
Title: C - Trying to convert an unspecified amount of digits entered into their respective individual words 
----------------------------------------

int main () {
    int num, digit;
    long long tenth = 1;
    printf ("Please enter an integer: \n");
    scanf ("%d", & num);
    while (tenth < num) {
        tenth *= 10;
    }
    while (tenth > 1) {
        tenth /= 10;
        digit = num / tenth;
        num %= tenth;
        printf ("%s ", digits [digit]);
    }
    return 0;
}
----------------------------------------

int main () {
    int ch;
    while (((ch = getc (stdin)) != EOF) && (isdigit (ch))) {
        static const char *Digit [10] = {"Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
        printf ("%s ", Digit [ch - '0']);
    }
    puts ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19866440_19866595_1_23
19866440_19867723_16_62
Title: Advance calculator for finding the mode of a set of numbers 
----------------------------------------

int main (int n, char **p) {
    int *modearray, size, i;
    printf ("What is the size of the Array?");
    scanf ("%d", & size);
    modearray = malloc (size * sizeof (int));
    for (i = 0; i < modearray[size]; i++) {
        printf ("Enter an integer value (1 to 30): ");
        scanf ("%d", modearray [i]);
        if (modearray[i] < 1 || modearray[i] > 30) {
            printf ("Please enter a value within the range");
            scanf ("%d", & modearray [i])
        }
        else if (sscanf (p[i], "%i", &a[i]) != 1) {
            printf ("ERROR\n");
            return -1;
        }
    }
}
----------------------------------------

int main (int n, char **p) {
    int *modearray, size, i;
    int *a;
    char number [10];
    int status = -1;
    int modeOfArray;
    printf ("What is the size of the Array?");
    scanf ("%d", & size);
    modearray = malloc (size * sizeof (int));
    a = malloc (size);
    printf ("Enter an integer value 1: (1 to 30): ");
    for (i = 0; i < size; i++) {
        scanf ("%s", number);
        status = ValidateInput (number);
        switch (status) {
        case VALID :
            modearray[i] = atoi (number);
            printf ("Enter an integer value %d: (1 to 30): ", i + 2);
            break;
        case FLOAT :
            printf ("float detected, enter an integer");
            i--;
            break;
        case SMALL :
            printf ("value too small, enter value from 1 to 30");
            i--;
            break;
        case LARGE :
            printf ("value too large, enter value from 1 to 30");
            i--;
            break;
        default :
            break;
        }
    }
    modeOfArray = mode (modearray, size);
    getchar ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19890776_19891424_1_19
19890776_19891518_1_23
Title: Need to calculate progression with array 
----------------------------------------

int main (void) {
    int i;
    double result = 1.3;
    double X [20];
    X[0] = 1;
    X[1] = 0.3;
    for (i = 2; i <= 19; i++) {
        X[i] = (i + 2) * X[i - 2];
        result += X[i];
    }
    printf ("%f", result);
    system ("pause");
    return 0;
}
----------------------------------------

int main () {
    double X [20];
    X[0] = 1;
    printf ("%7d%13f\n", 1, X [0]);
    X[1] = 0.3;
    double result = X[0] + X[1];
    printf ("%7d%13f\n", 2, X [1]);
    for (int i = 2; i <= 19; i++) {
        X[i] = (i + 2) * X[i - 2];
        printf ("%7d%13f\n", i + 1, X [i]);
        result += X[i];
    }
    printf ("\nSum of xi = %f", result);
    system ("pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19891380_19891456_20_35
19891380_19892055_57_75
Title: C calculate difference between two time strokes? 
----------------------------------------

int main (void) {
    Time firstTime;
    Time secondTime;
    printf ("Time #1: ");
    scanf_s ("%d\:\:%d\:\:%d", & firstTime.hours, & firstTime.minutes, & firstTime.seconds);
    printf ("Time #2: ");
    scanf_s ("%d\:\:%d\:\:%d", & secondTime.hours, & secondTime.minutes, & secondTime.seconds);
    Time result = calculateTimeDiff (firstTime, secondTime);
    return 0;
}
----------------------------------------

int main (void) {
    Time t1;
    Time t2;
    if (get_time ("Time #1: ", &t1) != 0 || get_time ("Time #2: ", &t2) != 0)
        exit (1);
    int s1 = time_to_seconds (t1);
    int s2 = time_to_seconds (t2);
    print_time ("T1 = ", t1, "\n");
    print_time ("T2 = ", t2, "\n");
    printf ("Delta (T1-T2) = %d seconds\n", calculateTimeDiff (s1, s2));
    print_time ("Delta = ", seconds_to_time (calculateTimeDiff (s1, s2)), "\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19892766_19892858_2_15
19892766_19892935_3_17
Title: Pointers & Dynamic Memory Allocation in C 
----------------------------------------

int main (int argc, char *argv []) {
    int numberOfCars;
    int i;
    int p = 0;
    for (i = 2; i < argc; i++) {
        numberOfCars = atoi (argv[i]);
        printf ("Person %d has %d cars \n", ++ p, numberOfCars);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int numberOfCars;
    int i;
    for (i = 1; i < argc; i++) {
        numberOfCars = atoi (argv[i]);
        printf ("Person %d has %d cars \n", i, numberOfCars);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19892766_19892858_2_15
19892766_19893015_4_23
Title: Pointers & Dynamic Memory Allocation in C 
----------------------------------------

int main (int argc, char *argv []) {
    int numberOfCars;
    int i;
    int p = 0;
    for (i = 2; i < argc; i++) {
        numberOfCars = atoi (argv[i]);
        printf ("Person %d has %d cars \n", ++ p, numberOfCars);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int numberOfCars;
    int *person;
    int i;
    person = malloc (sizeof (int) * argc);
    for (i = 1; i < argc; i++) {
        numberOfCars = atoi (argv[i]);
        if (i == 1)
            numberOfCars--;
        person[i] = numberOfCars;
        printf ("Person %d has %d cars\n", i, numberOfCars);
    }
    free (person);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19892766_19892935_3_17
19892766_19893015_4_23
Title: Pointers & Dynamic Memory Allocation in C 
----------------------------------------

int main (int argc, char *argv []) {
    int numberOfCars;
    int i;
    for (i = 1; i < argc; i++) {
        numberOfCars = atoi (argv[i]);
        printf ("Person %d has %d cars \n", i, numberOfCars);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int numberOfCars;
    int *person;
    int i;
    person = malloc (sizeof (int) * argc);
    for (i = 1; i < argc; i++) {
        numberOfCars = atoi (argv[i]);
        if (i == 1)
            numberOfCars--;
        person[i] = numberOfCars;
        printf ("Person %d has %d cars\n", i, numberOfCars);
    }
    free (person);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19906946_19907126_6_26
19906946_19908028_3_13
Title: Substracting pointers: how variable j is getting this value? 
----------------------------------------

int main (void) {
    int a = 10, b = 20;
    ptrdiff_t j;
    int *p [3];
    c = 30;
    p[0] = &a;
    p[1] = &b;
    p[2] = &c;
    j = p[0] - p[2];
    printf ("\nValue of p[0] = %p\nValue of p[2] = %p\nValue of j = %td\n\n", (void *) p [0], (void *) p [2], j);
    return 0;
}
----------------------------------------

void main () {
    int a = 10, b = 20;
    unsigned j;
    c = 30;
    int *p [3];
    p[0] = &a;
    p[1] = &b;
    p[2] = &c;
    j = (unsigned) p[0] - (unsigned) p[2];
    printf ("\nValue of p[0] = %u\nValue of p[2] = %u\nValue of j = %u\n\n", (unsigned) p [0], (unsigned) p [2], j);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19909501_19910666_3_16
19909501_19914454_1_16
Title: Calculate the function sin() 
----------------------------------------

double sinX (double x) {
    double term, total_so_far;
    int i;
    term = x;
    total_so_far = 0.0;
    for (i = 1; i <= 30; i++) {
        total_so_far += term;
        term *= -(x * x) / (2 * i) / (2 * i + 1);
    }
    return total_so_far;
}
----------------------------------------

double sinX (double x) {
    double result = 1.0;
    double term_i = 1.0;
    int i = 2;
    x = fmod (x, 2 * M_PI);
    for (i = 2; i <= 30; i += 2) {
        term_i = (-term_i * (x * x)) / (i * (i + 1));
        result += term_i;
    }
    return x * result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19923109_19923505_1_28
19923109_19923790_1_21
Title: How to insert a copy of a string into another string? 
----------------------------------------

int strinsert (char *dst, int len, const char *src, int offset) {
    char * new_string = new char [len];
    int remaining = len;
    if (offset >= remaining)
        offset = remaining;
    strncpy (new_string, dest, offset);
    remaining -= offset;
    strncat (new_string, src, remaining);
    remaining -= strlen (src);
    strncat (new_string, dest, remaining);
    strncpy (dest, new_string, len);
    delete [] new_string;
}
----------------------------------------

void strinsert (char *dst, size_t len, const char *src, size_t offset) {
    size_t iLenDst = strlen (dst), iLenSrc = strlen (src);
    if (iLenDst + iLenSrc + 1 > len) {
        ASSERT (FALSE)
        : return;
    }
    if (offset > iLenDst)
        offset = iLenDst;
    memmove (dst + offset + iLenSrc, dst + offset, iLenDst - offset + 1);
    memcopy (dst + offset, src, iLenSrc);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1993571_1993601_1_14
1993571_1993605_1_12
Title: itoa recursively 
----------------------------------------

char *itoa (int n, char *s) {
    char *dest = s;
    if (n / 10 != 0)
        dest = itoa (n / 10, dest);
    else if (n < 0)
        *dest++ = '-';
    *dest++ = abs (n % 10) + '0';
    *dest = '\0';
    return dest;
}
----------------------------------------

char *itoa (int n, char s []) {
    if (n < 0) {
        s[0] = '-';
        return itoa (-n, s +1);
    }
    if (n / 10 > 0) {
        s = itoa (n / 10, s);
    }
    s[0] = '0' + (n % 10);
    s[1] = '\0';
    return &s[1];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1993571_3939467_1_15
1993571_7462411_1_15
Title: itoa recursively 
----------------------------------------

void itoa (int n, char *s) {
    char c;
    if (n < 0) {
        *s++ = '-';
        itoa (- n, s);
        return;
    }
    c = '0' + n % 10;
    itoa (n / 10, s);
    while (n /= 10)
        s++;
    *s++ = c;
    *s = '\0';
}
----------------------------------------

void itoa (char **a, int i) {
    int dig;
    if (i < 10) {
        **a = i + 48;
        *(++(*a)) = '\0';
        return;
    }
    dig = i % 10;
    itoa (a, i / 10);
    **a = dig + 48;
    *(++(*a)) = '\0';
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19944395_19944593_3_72
19944395_19944885_3_31
Title: How can i flip my statement with my switch in c? 
----------------------------------------

int main (void) {
    int x;
    printf ("Please enter an integer: ");
    scanf ("%d", & x);
    printf ("\nYou have entered:\n\n");
    int len = 1;
    for (len = 1;; len = len * 10) {
        if (x / len == 0) {
            break;
        }
    }
    len = len / 10;
    do {
        switch (x / len) {
        case 0 :
            printf ("zero ");
            break;
        case 1 :
            printf ("one ");
            break;
        case 2 :
            printf ("two ");
            break;
        case 3 :
            printf ("three ");
            break;
        case 4 :
            printf ("four ");
            break;
        case 5 :
            printf ("five ");
            break;
        case 6 :
            printf ("six ");
            break;
        case 7 :
            printf ("seven ");
            break;
        case 8 :
            printf ("eight ");
            break;
        case 9 :
            printf ("nine ");
            break;
        }
        x = x % len;
        len = len / 10;
    }
    while (x > 0);
    printf ("\n\n");
    return 0;
}
----------------------------------------

int main (void) {
    char buf [64] = "";
    printf ("Please enter an integer: ");
    (void) fgets (buf, sizeof (buf), stdin);
    printf ("\nYou have entered:\n\n");
    const char *b = buf;
    while (*b) {
        switch (*b) {
        case '0' :
            printf ("zero ");
            break;
        case '1' :
            printf ("one ");
            break;
        case '2' :
            printf ("two ");
            break;
        case '3' :
            printf ("three ");
            break;
        case '4' :
            printf ("four ");
            break;
        case '5' :
            printf ("five ");
            break;
        case '6' :
            printf ("six ");
            break;
        case '7' :
            printf ("seven ");
            break;
        case '8' :
            printf ("eight ");
            break;
        case '9' :
            printf ("nine ");
            break;
        default :
            break;
        }
        b++;
    }
    printf ("\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19944395_19944593_3_72
19944395_19945850_29_43
Title: How can i flip my statement with my switch in c? 
----------------------------------------

int main (void) {
    int x;
    printf ("Please enter an integer: ");
    scanf ("%d", & x);
    printf ("\nYou have entered:\n\n");
    int len = 1;
    for (len = 1;; len = len * 10) {
        if (x / len == 0) {
            break;
        }
    }
    len = len / 10;
    do {
        switch (x / len) {
        case 0 :
            printf ("zero ");
            break;
        case 1 :
            printf ("one ");
            break;
        case 2 :
            printf ("two ");
            break;
        case 3 :
            printf ("three ");
            break;
        case 4 :
            printf ("four ");
            break;
        case 5 :
            printf ("five ");
            break;
        case 6 :
            printf ("six ");
            break;
        case 7 :
            printf ("seven ");
            break;
        case 8 :
            printf ("eight ");
            break;
        case 9 :
            printf ("nine ");
            break;
        }
        x = x % len;
        len = len / 10;
    }
    while (x > 0);
    printf ("\n\n");
    return 0;
}
----------------------------------------

int main (void) {
    int x;
    printf ("Please enter an integer: ");
    scanf ("%d", & x);
    printf ("\nYou have entered:\n\n");
    printnumber (x);
    printf ("\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19944395_19944885_3_31
19944395_19945850_29_43
Title: How can i flip my statement with my switch in c? 
----------------------------------------

int main (void) {
    char buf [64] = "";
    printf ("Please enter an integer: ");
    (void) fgets (buf, sizeof (buf), stdin);
    printf ("\nYou have entered:\n\n");
    const char *b = buf;
    while (*b) {
        switch (*b) {
        case '0' :
            printf ("zero ");
            break;
        case '1' :
            printf ("one ");
            break;
        case '2' :
            printf ("two ");
            break;
        case '3' :
            printf ("three ");
            break;
        case '4' :
            printf ("four ");
            break;
        case '5' :
            printf ("five ");
            break;
        case '6' :
            printf ("six ");
            break;
        case '7' :
            printf ("seven ");
            break;
        case '8' :
            printf ("eight ");
            break;
        case '9' :
            printf ("nine ");
            break;
        default :
            break;
        }
        b++;
    }
    printf ("\n\n");
    return 0;
}
----------------------------------------

int main (void) {
    int x;
    printf ("Please enter an integer: ");
    scanf ("%d", & x);
    printf ("\nYou have entered:\n\n");
    printnumber (x);
    printf ("\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19955617_21749034_1_42
19955617_22310673_25_56
Title: Win32 - read from stdin with timeout 
----------------------------------------

int main () {
    static HANDLE stdinHandle;
    stdinHandle = GetStdHandle (STD_INPUT_HANDLE);
    while (1) {
        switch (WaitForSingleObject (stdinHandle, 1000)) {
        case (WAIT_TIMEOUT) :
            cerr << "timeout" << endl;
            break;
        case (WAIT_OBJECT_0) :
            if (_kbhit ()) {
                int i = _getch ();
                cerr << "key: " << i << endl;
            }
            else {
                INPUT_RECORD r [512];
                DWORD read;
                ReadConsoleInput (stdinHandle, r, 512, & read);
                cerr << "mouse event" << endl;
            }
            break;
        case (WAIT_FAILED) :
            cerr << "WAIT_FAILED" << endl;
            break;
        case (WAIT_ABANDONED) :
            cerr << "WAIT_ABANDONED" << endl;
            break;
        default :
            cerr << "Someting's unexpected was returned.";
        }
    }
    return 0;
}
----------------------------------------

int main (char argc, char *argv []) {
    HANDLE eventHandles [] = {GetStdHandle (STD_INPUT_HANDLE)};
    DWORD result = WSAWaitForMultipleEvents (sizeof (eventHandles) / sizeof (eventHandle[0]), &eventHandles[0], FALSE, 1000, TRUE);
    switch (result) {
    case WSA_WAIT_TIMEOUT :
        break;
    case WSA_WAIT_EVENT_0 + 0 :
        ProcessStdin ();
        break;
    case WSA_WAIT_EVENT_0 + 1 :
        break;
    case WSA_WAIT_EVENT_0 + 2 :
        break;
    default :
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19992810_19992879_2_12
19992810_19992950_4_15
Title: expected declaration or statement at end of input? 
----------------------------------------

int main () {
    int bottles = 99;
    while (bottles >= 0) {
        put ("%i\n bottles of beer on the wall, %i\n bottles of beer, take one down pass it around", bottles, bottles);
        {
            bottles--;
            put ("%i\n bottles of beer on the wall", bottles);
        }
        continue;
    }
}
----------------------------------------

int main () {
    int bottles = 99;
    while (bottles > 0) {
        printf ("%i bottles of beer on the wall, %i bottles of beer\n", bottles, bottles);
        printf ("Take one down pass it around\n");
        bottles--;
        printf ("%i bottles of beer on the wall\n\n", bottles);
    }
    continue;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20012692_20012962_2_18
20012692_20012984_2_19
Title: Comparing numbers in inline c assembly 
----------------------------------------

int foo (int a) {
    asm ("cmp  $0x20, %0;"
        "jl   l1;"
        "cmp  $0x7e, %0;"
        "jg   l1;"
        "movl $0, %1;"
        "jmp  l2;"
        "l1:"
        "movl $0x20, %0;"
        "l2:;"
        : "=r" (a)
        : "r" (a)
        :
    ) return a;
}
----------------------------------------

int foo (int a) {
    asm ("mov $0x20, %%edx\n\t"
        "cmp %1, %%edx\n\t"
        "jg l1\n\t"
        "mov $0x7e, %%edx\n\t"
        "cmp %1, %%edx\n\t"
        "jl l1\n\t"
        "jmp l2\n\t"
        "l1: movl $0x20, %0\n\t"
        "l2:\n\t"
        : "=a" (a)
        : "0" (a)
        : "%edx"
    ) return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20020695_20025224_67_80
20020695_37762529_72_83
Title: Creating a polynomial with a linked list in C 
----------------------------------------

void display (char const *tag, struct node *ptr) {
    struct node *temp;
    const char *pad = "";
    temp = ptr;
    printf ("%s: ", tag);
    while (temp != NULL) {
        printf ("%s%d x ^ %d", pad, temp -> cof, temp -> exp);
        temp = temp->link;
        pad = " + ";
    }
    putchar ('\n');
}
----------------------------------------

void display () {
    node *temp = new node;
    temp = beg;
    cout << "\n";
    do {
        cout << "+

 " << temp->coef << " X^ " << temp->exp;
        temp = temp->next;
    }
    while (temp != NULL);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20020695_20025224_82_96
20020695_37762529_34_61
Title: Creating a polynomial with a linked list in C 
----------------------------------------

int main (void) {
    printf ("enter the first polynomial:\n");
    struct node *p1 = NULL, *p2 = NULL;
    p1 = create (p1);
    printf ("enter the second polynomial:\n");
    p2 = create (p2);
    display ("p1", p1);
    display ("p2", p2);
    return 0;
}
----------------------------------------

int main () {
    char c = 'y';
    do {
        int ch;
        cout << "\n Enter your choice: \n 1. Create new expression \n 2. Merge two expression";
        cin >> ch;
        switch (ch) {
        case 1 :
            int n;
            cout << "\n Enter the order of polynomial: ";
            cin >> n;
            newpol (n);
            display ();
            break;
        case 2 :
            merger ();
            beg = begmer;
            cout << "\n After merging::\t";
            display ();
            break;
        }
        cout << "\n more??";
        cin >> c;
    }
    while (c != 'n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20068234_20068426_4_17
20068234_20068629_3_15
Title: C - How to check if the number is integer or float? 
----------------------------------------

int main () {
    char buffer [128], *p = buffer;
    int isint;
    fgets (buffer, sizeof buffer, stdin);
    if (p[0] == '+' || p[0] == '-')
        p++;
    isint = strlen (p) - 1;
    for (; *p && *p != '\n' && isint; p++) {
        isint = isdigit (*p);
    }
    if (isint)
        printf ("Woaaa\n");
    return 0;
}
----------------------------------------

int main () {
    char tempString [20];
    scanf ("%s", tempString);
    if (checkType (tempString) == IS_INT)
        printf ("This is integer\n");
    else if (checkType (tempString) == IS_FLOAT)
        printf ("This is Float");
    else
        printf ("undifined");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20072990_20073103_4_21
20072990_20073617_3_12
Title: How to print part of words in string by input using array in c? 
----------------------------------------

int main (void) {
    char a [] = "this computer";
    int start;
    int length;
    char *ptr = a;
    length = strlen (a);
    scanf ("%d", & start);
    if (start > length)
        start = length;
    ptr += length - start;
    printf ("%s\n", ptr);
    return 0;
}
----------------------------------------

int main (void) {
    char a [] = "computer";
    char start = 3;
    char length = 8;
    int n;
    scanf ("%d", & n);
    printf ("%.*s\n", n, & a [length - n]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20082420_20082782_3_22
20082420_39823780_3_25
Title: C: My loop doesn't seem to work 
----------------------------------------

void main (void) {
    int num = 0, counter = 0;
    printf ("Please type in your number between (and including) 10-100\n");
    do {
        printf ("? ");
        scanf ("%d", & num);
        if (!num)
            break;
        else if ((num < 10) || (num > 100))
            printf ("Error, %d is not allowed\n", num);
        counter++;
    }
    while (num);
    printf ("%d numbers were entered!\n", counter);
}
----------------------------------------

int main (void) {
    unsigned int num = 0, counter = 0;
    while (num != -1) {
        printf ("Please type in your number between (and including) 10-100. Enter \"-1\" to exit.\n");
        scanf ("%d", & num);
        counter++;
        if ((num < 10) || (num > 100)) {
            printf ("Error, %d is not allowed\n", num);
            counter--;
        }
    }
    printf ("%d numbers were entered!\n", counter);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20097110_20097500_5_16
20097110_31498301_1_14
Title: test a function that returns triangle type 
----------------------------------------

int detemineTriangle (int x, int y, int z) {
    if ((x <= 0) || (y <= 0) || (z <= 0))
        return ERROR;
    if (x == y && y == z)
        return EQUILATERAL;
    if (isSidesOverflow (x, y) || isSidesOverflow (x, z) || isSidesOverflow (y, z))
        return ERROR;
    if (x + y <= z || x + z <= y || z + y <= x)
        return ERROR;
    if ((x == y) || (x == z) || (y == z))
        return ISOSCELES;
    return SCALENE;
}
----------------------------------------

int detemineTriangle (int x, int y, int z) {
    if (x <= 0 || y <= 0 || z <= 0)
        return ERROR;
    else if (z >= (x + y) || y >= (x + z) || x >= (y + z))
        return ERROR;
    else if (x == y && y == c)
        return EQUILATERAL;
    else if (((x == y) && (x != z)) || ((y == z) && (y != x)))
        return ISOSCELES;
    else
        return SCALENE;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20104407_20104843_3_22
20104407_20105082_5_33
Title: Separating string to multiple integers 
----------------------------------------

int main () {
    char infix [] = "123+354*87/156=";
    char *p = infix;
    while (1) {
        if (*p == '\0')
            break;
        if (*p == '+' || *p == '*' || *p == '/' || *p == '=' || *p == '-') {
            printf (" ");
        }
        else
            printf ("%c", *p);
        p++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------

void main () {
    char infix [] = "123+345*87/156=";
    istringstream is (infix);
    double nums [999];
    char chars [999];
    int nums_pos = 0;
    int chars_pos = 0;
    bool number = true;
    while (!is.eof ()) {
        if (number) {
            is >> nums[nums_pos];
            nums_pos++;
            number = false;
        }
        else {
            is >> chars[chars_pos];
            chars_pos++;
            number = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20114400_20114877_4_16
20114400_20114988_12_24
Title: Print a number in c digit by digit 
----------------------------------------

int main () {
    int i, len, n = 5678;
    char *str_p = NULL;
    int digitCount (int in);
    len = digitCount (n);
    str_p = calloc (len, sizeof (char));
    len--;
    sprintf (str_p, "%d", n);
    for (i = 0; i < len; ++i)
        printf ("%s\n", str_p +i);
    free (str_p);
    return 0;
}
----------------------------------------

int main () {
    int num = 5678;
    int rev = reversDigits (num);
    while (rev) {
        printf ("%d " reversDigits (rev));
        printf ("\n");
        rev = rev / 10;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20124895_20125888_3_17
20124895_20126931_27_96
Title: Merge two arrays and omit all repeating elements 
----------------------------------------

int main (int argc, char **argv) {
    const int sortedMergedArray [] = {1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8};
    const size_t mergedArrayLength = 12;
    for (size_t i = 0; i < mergedArrayLength; i++) {
        int predecessor = -1;
        int successor = -1;
        if (i >= 1)
            predecessor = sortedMergedArray[i - 1];
        if (i <= mergedArrayLength - 1)
            successor = sortedMergedArray[i + 1];
        if (sortedMergedArray[i] != successor && sortedMergedArray[i] != predecessor) {
            printf ("%d, ", sortedMergedArray [i]);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int input1 [] = {1, 1, 2, 3, 3, 4, 5};
    int input2 [] = {4, 2, 6, 7, 8};
    size_t input1_size = sizeof (input1) / sizeof (*input1);
    size_t input2_size = sizeof (input2) / sizeof (*input2);
    printf ("input1: ");
    print_array (input1, input1_size);
    printf ("input2: ");
    print_array (input2, input2_size);
    size_t marge_array_size = input1_size + input2_size;
    int marge_array [marge_array_size];
    memcpy (marge_array, input1, input1_size * sizeof (* input1));
    memcpy (& marge_array [input1_size], input2, input2_size * sizeof (* input2));
    printf ("marge array: ");
    print_array (marge_array, marge_array_size);
    qsort (marge_array, marge_array_size, sizeof (* marge_array), cmp_int);
    printf ("marge array(after sort): ");
    print_array (marge_array, marge_array_size);
    size_t singles_size = marge_array_size;
    int *singles = malloc (singles_size * sizeof (*singles));
    size_t i;
    int sp;
    bool drop = false;
    for (sp = -1, i = 0; i < marge_array_size; ++i) {
        if (!drop) {
            if (sp == -1) {
                singles[++sp] = marge_array[i];
                continue;
            }
            if (singles[sp] == marge_array[i]) {
                --sp;
                drop = true;
                continue;
            }
        }
        else if (singles[sp + 1] == marge_array[i])
            continue;
        drop = false;
        singles[++sp] = marge_array[i];
    }
    if (sp + 1 != singles_size) {
        singles_size = sp + 1;
        singles = realloc (singles, singles_size * sizeof (*singles));
    }
    printf ("marge array(single num): ");
    print_array (singles, singles_size);
    size_t uniques_size = marge_array_size;
    int *uniques = malloc (uniques_size * sizeof (*uniques));
    for (sp = -1, i = 0; i < marge_array_size; ++i) {
        if (sp == -1) {
            uniques[++sp] = marge_array[i];
            continue;
        }
        if (uniques[sp] == marge_array[i]) {
            continue;
        }
        uniques[++sp] = marge_array[i];
    }
    if (sp + 1 != uniques_size) {
        uniques_size = sp + 1;
        uniques = realloc (uniques, uniques_size * sizeof (*uniques));
    }
    printf ("marge array(uniques num): ");
    print_array (uniques, uniques_size);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20124895_20125888_3_17
20124895_51449407_2_57
Title: Merge two arrays and omit all repeating elements 
----------------------------------------

int main (int argc, char **argv) {
    const int sortedMergedArray [] = {1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8};
    const size_t mergedArrayLength = 12;
    for (size_t i = 0; i < mergedArrayLength; i++) {
        int predecessor = -1;
        int successor = -1;
        if (i >= 1)
            predecessor = sortedMergedArray[i - 1];
        if (i <= mergedArrayLength - 1)
            successor = sortedMergedArray[i + 1];
        if (sortedMergedArray[i] != successor && sortedMergedArray[i] != predecessor) {
            printf ("%d, ", sortedMergedArray [i]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int a [30], b [30];
    int n, k, i, j, p, c = 0;
    printf ("How many element in first array\n");
    scanf ("%d", & n);
    printf ("Enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    printf ("How many element in second array\n");
    scanf ("%d", & k);
    printf ("Enter elements");
    for (i = 0; i < k; i++) {
        scanf ("%d", & b [i]);
    }
    printf ("The new array is \n");
    for (i = n, j = 0; i < (n + k); i++) {
        a[i] = b[j++];
    }
    for (i = 0; i < (n + k); i++) {
        printf ("%d ", a [i]);
    }
    for (i = 0, p = 0; i < (n + k); i++) {
        if (a[i] != NULL) {
            for (j = i + 1; j < (n + k); j++) {
                if (a[i] == a[j]) {
                    a[j] = NULL;
                }
            }
            a[p++] = a[i];
            c++;
        }
    }
    printf ("\nAfter eliminate the duplicate elements,the new array is : \n");
    for (i = 0; i < c; i++) {
        printf ("%d ", a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20124895_20126931_27_96
20124895_51449407_2_57
Title: Merge two arrays and omit all repeating elements 
----------------------------------------

int main (void) {
    int input1 [] = {1, 1, 2, 3, 3, 4, 5};
    int input2 [] = {4, 2, 6, 7, 8};
    size_t input1_size = sizeof (input1) / sizeof (*input1);
    size_t input2_size = sizeof (input2) / sizeof (*input2);
    printf ("input1: ");
    print_array (input1, input1_size);
    printf ("input2: ");
    print_array (input2, input2_size);
    size_t marge_array_size = input1_size + input2_size;
    int marge_array [marge_array_size];
    memcpy (marge_array, input1, input1_size * sizeof (* input1));
    memcpy (& marge_array [input1_size], input2, input2_size * sizeof (* input2));
    printf ("marge array: ");
    print_array (marge_array, marge_array_size);
    qsort (marge_array, marge_array_size, sizeof (* marge_array), cmp_int);
    printf ("marge array(after sort): ");
    print_array (marge_array, marge_array_size);
    size_t singles_size = marge_array_size;
    int *singles = malloc (singles_size * sizeof (*singles));
    size_t i;
    int sp;
    bool drop = false;
    for (sp = -1, i = 0; i < marge_array_size; ++i) {
        if (!drop) {
            if (sp == -1) {
                singles[++sp] = marge_array[i];
                continue;
            }
            if (singles[sp] == marge_array[i]) {
                --sp;
                drop = true;
                continue;
            }
        }
        else if (singles[sp + 1] == marge_array[i])
            continue;
        drop = false;
        singles[++sp] = marge_array[i];
    }
    if (sp + 1 != singles_size) {
        singles_size = sp + 1;
        singles = realloc (singles, singles_size * sizeof (*singles));
    }
    printf ("marge array(single num): ");
    print_array (singles, singles_size);
    size_t uniques_size = marge_array_size;
    int *uniques = malloc (uniques_size * sizeof (*uniques));
    for (sp = -1, i = 0; i < marge_array_size; ++i) {
        if (sp == -1) {
            uniques[++sp] = marge_array[i];
            continue;
        }
        if (uniques[sp] == marge_array[i]) {
            continue;
        }
        uniques[++sp] = marge_array[i];
    }
    if (sp + 1 != uniques_size) {
        uniques_size = sp + 1;
        uniques = realloc (uniques, uniques_size * sizeof (*uniques));
    }
    printf ("marge array(uniques num): ");
    print_array (uniques, uniques_size);
    return 0;
}
----------------------------------------

int main () {
    int a [30], b [30];
    int n, k, i, j, p, c = 0;
    printf ("How many element in first array\n");
    scanf ("%d", & n);
    printf ("Enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    printf ("How many element in second array\n");
    scanf ("%d", & k);
    printf ("Enter elements");
    for (i = 0; i < k; i++) {
        scanf ("%d", & b [i]);
    }
    printf ("The new array is \n");
    for (i = n, j = 0; i < (n + k); i++) {
        a[i] = b[j++];
    }
    for (i = 0; i < (n + k); i++) {
        printf ("%d ", a [i]);
    }
    for (i = 0, p = 0; i < (n + k); i++) {
        if (a[i] != NULL) {
            for (j = i + 1; j < (n + k); j++) {
                if (a[i] == a[j]) {
                    a[j] = NULL;
                }
            }
            a[p++] = a[i];
            c++;
        }
    }
    printf ("\nAfter eliminate the duplicate elements,the new array is : \n");
    for (i = 0; i < c; i++) {
        printf ("%d ", a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20139145_20139745_6_26
20139145_20152589_64_88
Title: Replacing elements in an array 
----------------------------------------

int main (void) {
    char userInput [256];
    int inputNum, winningNumbers [DATA_SIZE];
    uint64_t table = 0;
    int i = 0;
    while (i < DATA_SIZE) {
        printf ("\nPlease enter the %d winning ticket number!(#'s must be between 1-49): ", i + 1);
        fgets (userInput, sizeof (userInput), stdin);
        if (sscanf (userInput, "%d", &inputNum) != 1 || inputNum <= 0 || inputNum >= 50)
            continue;
        uint64_t bit = 1 << inputNum;
        if (table & bit)
            continue;
        table |= bit;
        winningNumbers[i++] = inputNum;
    }
    for (i = 0; i < DATA_SIZE; ++i)
        printf ("%d ", winningNumbers[i]);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int winningNumbers [DATA_SIZE];
    int **duplication;
    int i, j;
    inputArray (winningNumbers, DATA_SIZE);
    while (NULL != (duplication = duplicateCheck (winningNumbers, DATA_SIZE))) {
        for (i = 0; i < DATA_SIZE; ++i) {
            if (duplication[i]) {
                printf ("\nyour input numbers : ");
                for (j = 0; j < DATA_SIZE; ++j)
                    printf ("%d ", winningNumbers[j]);
                fprintf (stderr, "\nThere is duplicate. Please re-enter.\n");
                *duplication[i] = inputNumber ();
            }
            else
                break;
        }
        free (duplication);
    }
    for (i = 0; i < DATA_SIZE; ++i)
        printf ("%d ", winningNumbers[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20176437_20176606_1_12
20176437_20176776_1_12
Title: Quick shifting chars of string 
----------------------------------------

void rotLeft (char *s, int n) {
    char temp;
    int i;
    temp = s[0];
    for (i = 0; i < n - 1; i++) {
        s[i] = s[i + 1];
    }
    s[n - 1] = temp;
}
----------------------------------------

void rotLeft (char *s, unsigned int n) {
    char *t;
    int l;
    l = strlen (s);
    t = (char *) malloc (n);
    strncpy (t, s, n);
    strncpy (s, s + n, l - n);
    strncpy (s + l - n, t, n);
    free (t);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20179268_20179871_12_55
20179268_20180352_11_47
Title: output value interleavely with two pthreads 
----------------------------------------

int main () {
    pthread_t thread [2];
    int res = 0;
    int number = 0;
    int i = 0;
    if (sem_init (&sem1, 0, 1) == -1) {
        printf ("Semaphore creation failed!!\n");
        exit (EXIT_FAILURE);
    }
    if (sem_init (&sem2, 0, 0) == -1) {
        printf ("Semaphore creation failed!!\n");
        exit (EXIT_FAILURE);
    }
    for (i = 0; i < 25; ++i) {
        res = pthread_create (&thread[0], NULL, increment1, NULL);
        if (res != 0) {
            printf ("Thread creation failed!!\n");
            exit (EXIT_FAILURE);
        }
        res = pthread_create (&thread[1], NULL, increment2, NULL);
        if (res != 0) {
            printf ("Thread creation failed!!\n");
            exit (EXIT_FAILURE);
        }
        for (int j = 0; j < 2; ++j) {
            pthread_join (thread [j], NULL);
        }
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------

int main () {
    pthread_t thread1, thread2;
    int res1 = 0, res2 = 0;
    int number = 0;
    int i = 0;
    if (sem_init (&c_sem, 0, 1) == -1) {
        printf ("Semaphore creation failed!!\n");
        exit (EXIT_FAILURE);
    }
    if (sem_init (&sem_1, 0, 1) == -1) {
        printf ("Semaphore creation failed!!\n");
        exit (EXIT_FAILURE);
    }
    if (sem_init (&sem_2, 0, 0) == -1) {
        printf ("Semaphore creation failed!!\n");
        exit (EXIT_FAILURE);
    }
    res1 = pthread_create (&thread1, NULL, increment_1, NULL);
    if (res1 != 0) {
        printf ("Thread1 creation failed!!\n");
        exit (EXIT_FAILURE);
    }
    res2 = pthread_create (&thread2, NULL, increment_2, NULL);
    if (res2 != 0) {
        printf ("Thread2 creation failed!!\n");
        exit (EXIT_FAILURE);
    }
    pthread_join (thread1, NULL);
    pthread_join (thread2, NULL);
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20182057_20182096_4_23
20182057_45947141_4_24
Title: Beginning C Program 
----------------------------------------

int main (void) {
    printf ("Height: ");
    int height = GetInt ();
    int hm2 = height - 2;
    int j, k;
    for (int i = 1; i < height; i++) {
        for (k = hm2; k > (i - 1); k--)
            printf ("%c", ' ');
        for (j = 0; j < (i + 1); j++)
            printf ("#");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int height, hm2, j, k, i;
    printf ("Height: \n");
    height = GetInt ();
    hm2 = height - 1;
    for (i = 0; i < height; i++) {
        for (k = hm2; k > i; k--)
            printf ("%c", ' ');
        for (j = 0; j < i + 1; j++)
            printf ("#");
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20194535_20194815_6_31
20194535_20194959_3_15
Title: How to differentiate a character and a number? 
----------------------------------------

int main (int argc, char **argv) {
    int val = -1;
    char other;
    int code;
    if (argc != 2) {
        printf ("please give an arg to program\n");
        exit (0);
    }
    code = sscanf (argv[1], "%d", &val);
    if (code == 1) {
        printf ("number %d", val);
    }
    else {
        code = sscanf (argv[1], "%c", &other);
        if (code == 1) {
            printf ("character is %c", other);
        }
        else {
            printf ("error occured");
        }
    }
}
----------------------------------------

int main () {
    int number, result;
    result = scanf ("%i", &number);
    if (result == EOF) {
        fprintf (stderr, "That's not a number");
    }
    else {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20194535_20194815_6_31
20194535_20195554_10_24
Title: How to differentiate a character and a number? 
----------------------------------------

int main (int argc, char **argv) {
    int val = -1;
    char other;
    int code;
    if (argc != 2) {
        printf ("please give an arg to program\n");
        exit (0);
    }
    code = sscanf (argv[1], "%d", &val);
    if (code == 1) {
        printf ("number %d", val);
    }
    else {
        code = sscanf (argv[1], "%c", &other);
        if (code == 1) {
            printf ("character is %c", other);
        }
        else {
            printf ("error occured");
        }
    }
}
----------------------------------------

int main () {
    int integer = 0;
    char character;
    printf ("Enter an integer not a character:\n");
    do {
        printf ("? ");
    }
    while (((scanf ("%d%c", &integer, &character) != 2) || (character != '\n')) && clearStdin ());
    printf ("You entered the following integer: %d\n", integer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20194535_20194815_6_31
20194535_20196125_3_16
Title: How to differentiate a character and a number? 
----------------------------------------

int main (int argc, char **argv) {
    int val = -1;
    char other;
    int code;
    if (argc != 2) {
        printf ("please give an arg to program\n");
        exit (0);
    }
    code = sscanf (argv[1], "%d", &val);
    if (code == 1) {
        printf ("number %d", val);
    }
    else {
        code = sscanf (argv[1], "%c", &other);
        if (code == 1) {
            printf ("character is %c", other);
        }
        else {
            printf ("error occured");
        }
    }
}
----------------------------------------

int main () {
    int rc, answer = 0;
    printf ("A number between 1 and 5: ");
    rc = scanf ("%i", &answer);
    if (rc == EOF || rc == 0 || answer > 5 || answer <= 0) {
        fprintf (stderr, "Only numbers between 1 and 5, please.\n");
        return -99;
    }
    else {
        printf ("You entered: %d\n", answer);
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20194535_20194959_3_15
20194535_20195554_10_24
Title: How to differentiate a character and a number? 
----------------------------------------

int main () {
    int number, result;
    result = scanf ("%i", &number);
    if (result == EOF) {
        fprintf (stderr, "That's not a number");
    }
    else {
    }
}
----------------------------------------

int main () {
    int integer = 0;
    char character;
    printf ("Enter an integer not a character:\n");
    do {
        printf ("? ");
    }
    while (((scanf ("%d%c", &integer, &character) != 2) || (character != '\n')) && clearStdin ());
    printf ("You entered the following integer: %d\n", integer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20194535_20194959_3_15
20194535_20196125_3_16
Title: How to differentiate a character and a number? 
----------------------------------------

int main () {
    int number, result;
    result = scanf ("%i", &number);
    if (result == EOF) {
        fprintf (stderr, "That's not a number");
    }
    else {
    }
}
----------------------------------------

int main () {
    int rc, answer = 0;
    printf ("A number between 1 and 5: ");
    rc = scanf ("%i", &answer);
    if (rc == EOF || rc == 0 || answer > 5 || answer <= 0) {
        fprintf (stderr, "Only numbers between 1 and 5, please.\n");
        return -99;
    }
    else {
        printf ("You entered: %d\n", answer);
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20194535_20195554_10_24
20194535_20196125_3_16
Title: How to differentiate a character and a number? 
----------------------------------------

int main () {
    int integer = 0;
    char character;
    printf ("Enter an integer not a character:\n");
    do {
        printf ("? ");
    }
    while (((scanf ("%d%c", &integer, &character) != 2) || (character != '\n')) && clearStdin ());
    printf ("You entered the following integer: %d\n", integer);
    return 0;
}
----------------------------------------

int main () {
    int rc, answer = 0;
    printf ("A number between 1 and 5: ");
    rc = scanf ("%i", &answer);
    if (rc == EOF || rc == 0 || answer > 5 || answer <= 0) {
        fprintf (stderr, "Only numbers between 1 and 5, please.\n");
        return -99;
    }
    else {
        printf ("You entered: %d\n", answer);
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2019923_2019932_6_27
2019923_2020019_15_50
Title: Executing machine code in memory 
----------------------------------------

int main () {
    char *a = malloc (10);
    char *b = malloc (10);
    char *c = malloc (10);
    memset (a, 'a', 4095);
    memset (b, 'b', 4095);
    memset (c, 'c', 4095);
    puts (a);
    memset (c, 0xc3, 10);
    mprotect (c, 10, PROT_READ | PROT_EXEC);
    b[0] = 'H';
    char *d = mmap (0, 4096, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANON, -1, 0);
    memset (d, 0xc3, 4096);
    ((void (*)(void)) d) ();
    ((void (*)(void)) c) ();
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int what;
    charp = malloc (10101);
    memset (charp, 0xc3, 10101);
    mprotect (charp, 10101, PROT_EXEC | PROT_READ | PROT_WRITE);
    __asm__ ("leal charp, %eax"
    ) __asm__ ("call (%eax)"
    ) printf ("am I alive?\n");
    char *more = strdup ("more heap operations");
    printf ("%s\n", more);
    FILE *f = fopen ("foo", "rb");
    fseek (f, 0, SEEK_END);
    unsigned int len = ftell (f);
    fseek (f, 0, SEEK_SET);
    bin = (char *) malloc (len);
    printf ("read in %d\n", fread (bin, 1, len, f));
    printf ("%p\n", bin);
    fclose (f);
    mprotect (& bin, 10101, PROT_EXEC | PROT_READ | PROT_WRITE);
    asm volatile ("movl %0, %%eax"
        :
        : "g" (bin)
    ) __asm__ ("addl $0x674, %eax"
    ) __asm__ ("call %eax"
    ) fflush (stdout);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20219382_20219688_3_36
20219382_20221327_6_40
Title: Processing outputs of multiple inputs in C 
----------------------------------------

int main (int argc, char *argv []) {
    int inputs, count = 0;
    char str [20];
    scanf ("%d", & inputs);
    char *ptr;
    char *dummy;
    while (inputs-- > 0) {
        scanf ("%s", str);
        for (ptr = str; *ptr != '\0'; ptr++) {
            for (dummy = ptr + 1; *dummy != '\0'; dummy++) {
                if (*ptr == *dummy) {
                    count = 1;
                }
            }
            if (count == 1)
                break;
        }
        if (count > 0) {
            printf ("NOT UNIQUE");
        }
        else {
            printf ("UNIQUE");
        }
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int ninput = 0;
    char buf [10] [100];
    char *str;
    int i;
    printf ("Enter up to 10 strings, blank to and input:\n");
    for (i = 0; i < 10; i++) {
        int l;
        str = buf[i];
        if (fgets (str, 100, stdin) == NULL)
            break;
        l = strlen (str);
        while (l > 0 && isspace (str[l - 1]))
            l--;
        str[l] = '\0';
        if (l == 0)
            break;
        ninput++;
    }
    printf ("Your input:\n");
    for (i = 0; i < ninput; i++) {
        str = buf[i];
        printf ("[%d] '%s'\n", i + 1, str);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20226321_20229142_23_41
20226321_20303450_4_52
Title: read data from String in C 
----------------------------------------

int main (void) {
    char *str_num1 = "abc12345";
    char *incstr, *decstr;
    incstr = strinc (str_num1, +1);
    printf ("%s\n", incstr);
    free (incstr);
    incstr = strinc ("abcd12345", +1);
    printf ("%s\n", incstr);
    free (incstr);
    incstr = strinc ("abcd999", +1);
    printf ("%s\n", incstr);
    decstr = strinc (incstr, -1);
    printf ("%s\n", decstr);
    free (incstr);
    free (decstr);
    return 0;
}
----------------------------------------

int main () {
    char c [20];
    char *constant;
    char *variable;
    int tmp;
    FILE *in, *out;
    in = fopen ("in.txt", "r");
    if (in == NULL) {
        printf ("Error opening file");
        return (1);
    }
    else {
        fgets (c, 20, in);
    }
    fclose (in);
    out = fopen ("out.txt", "w");
    fprintf (out, "%s\n", c);
    variable = &c[11];
    c[20] = 0;
    tmp = atoi (variable);
    int variable2, variable3, variable4;
    char buffer2 [9], buffer3 [9], buffer4 [9];
    variable2 = tmp + 1;
    variable3 = tmp + 2;
    variable4 = tmp + 3;
    itoa (variable2, buffer2, 10);
    itoa (variable3, buffer3, 10);
    itoa (variable4, buffer4, 10);
    constant = &c[0];
    c[11] = 0;
    fprintf (out, "%s%s\n", constant, buffer2);
    fprintf (out, "%s%s\n", constant, buffer3);
    fprintf (out, "%s%s", constant, buffer4);
    fclose (out);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20236957_20237324_3_44
20236957_20238765_17_30
Title: C programming project 
----------------------------------------

int main (void) {
    FILE *input;
    FILE *second_input;
    int firstNumber;
    int secondNumber;
    input = fopen ("file1", "r");
    second_input = fopen ("file2", "r");
    fscanf (input, "%d", & firstNumber);
    fscanf (second_input, "%d", & secondNumber);
    while (!feof (input) || !feof (second_input)) {
        if (firstNumber < secondNumber || feof (second_input)) {
            printf ("%d\n", firstNumber);
            if (!feof (input)) {
                fscanf (input, "%d", & firstNumber);
            }
        }
        else {
            printf ("%d\n", secondNumber);
            if (!feof (second_input)) {
                fscanf (second_input, "%d", & secondNumber);
            }
        }
        if (feof (input) && !feof (second_input)) {
            printf ("%d\n", secondNumber);
            fscanf (second_input, "%d", & secondNumber);
        }
    }
    fclose (input);
    fclose (second_input);
}
----------------------------------------

int main () {
    FILE *file1, *file2, *output;
    file1 = fopen ("file1.txt", "r");
    file2 = fopen ("file2.txt", "r");
    output = fopen ("output.txt", "w");
    int *num;
    while (NULL != (num = combine (file1, file2))) {
        fprintf (output, "%d\n", * num);
    }
    fclose (file1);
    fclose (file2);
    fclose (output);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20254903_20255379_1_19
20254903_20256688_1_17
Title: Having trouble finding specific strings in a txt file 
----------------------------------------

void findKey (void) {
    const char *in = "hello Hello hello helloworld worldhello !hello! hello? hello, ?hello hello";
    const char *key = "hello";
    int count = 0;
    char temp [strlen (in) + 1];
    const char *p = in;
    while (*p) {
        int n;
        if (1 != sscanf (p, " %s%n", temp, &n)) {
            break;
        }
        if (0 == strcmp (key, temp)) {
            count++;
        }
        p = &p[n];
    }
    printf ("%d\n", count);
}
----------------------------------------

unsigned findKey (const char *in, const char *key) {
    unsigned count = 0;
    size_t keyLen = strlen (key);
    int Ready = 1;
    while (*in) {
        while (isspace ((unsigned char) *in)) {
            in++;
            Ready = 1;
        }
        if (Ready) {
            if (memcmp (in, key, keyLen) == 0 && (isspace ((unsigned char) in[keyLen]) || (in[keyLen] == '\0'))) {
                count++;
            }
            Ready = 0;
        }
        in++;
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20257596_20257740_1_16
20257596_20257744_1_25
Title: C - Qsort: Sort name in ascending order and grade in descending order 
----------------------------------------

int sort_nameasc_gradedes (const void *p, const void *q) {
    const record *pp = p;
    const record *qq = q;
    int n1 = strcmp (pp->name.first, qq->name.first);
    int n2 = strcmp (pp->name.last, qq->name.last);
    if (n1 != 0) {
        return n1;
    }
    else if (n2 != 0) {
        return n2;
    }
    else {
        return (qq->score - pp->score);
    }
}
----------------------------------------

int sort_nameasc_gradedes (const void *p, const void *q) {
    const record *pp = p;
    const record *qq = q;
    int n2 = strcmp (pp->name.last, qq->name.last);
    if (n2 != 0) {
        return n2;
    }
    else {
        int n1 = strcmp (pp->name.first, qq->name.first);
        if (n1 != 0) {
            return n1;
        }
        else {
            return qq->score - pp->score;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20257596_20257740_1_16
20257596_20257837_1_13
Title: C - Qsort: Sort name in ascending order and grade in descending order 
----------------------------------------

int sort_nameasc_gradedes (const void *p, const void *q) {
    const record *pp = p;
    const record *qq = q;
    int n1 = strcmp (pp->name.first, qq->name.first);
    int n2 = strcmp (pp->name.last, qq->name.last);
    if (n1 != 0) {
        return n1;
    }
    else if (n2 != 0) {
        return n2;
    }
    else {
        return (qq->score - pp->score);
    }
}
----------------------------------------

int sort_nameasc_gradedes (const void *p, const void *q) {
    const record *pp = p;
    const record *qq = q;
    int r;
    if ((r = strcmp (pp->name.last, qq->name.last)) != 0)
        return r;
    if ((r = strcmp (pp->name.first, qq->name.first)) != 0)
        return r;
    return (pp->score < qq->score) ? 1 : ((pp->score > qq->score) ? -1 : 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20257596_20257744_1_25
20257596_20257837_1_13
Title: C - Qsort: Sort name in ascending order and grade in descending order 
----------------------------------------

int sort_nameasc_gradedes (const void *p, const void *q) {
    const record *pp = p;
    const record *qq = q;
    int n2 = strcmp (pp->name.last, qq->name.last);
    if (n2 != 0) {
        return n2;
    }
    else {
        int n1 = strcmp (pp->name.first, qq->name.first);
        if (n1 != 0) {
            return n1;
        }
        else {
            return qq->score - pp->score;
        }
    }
}
----------------------------------------

int sort_nameasc_gradedes (const void *p, const void *q) {
    const record *pp = p;
    const record *qq = q;
    int r;
    if ((r = strcmp (pp->name.last, qq->name.last)) != 0)
        return r;
    if ((r = strcmp (pp->name.first, qq->name.first)) != 0)
        return r;
    return (pp->score < qq->score) ? 1 : ((pp->score > qq->score) ? -1 : 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20267400_20267328_3_14
20267400_20390406_1_10
Title: Undeclared identifier in C function 
----------------------------------------

void conversionTo (int number, int base) {
    if (number == 0)
        return;
    int remainder = number % base;
    conversionTo ((number / base), base);
    if (remainder < 10)
        printf ("%c", '0' + remainder);
    else
        printf ("%c", 'a' - 10 + remainder);
}
----------------------------------------

void conversionTo (int number, int base) {
    if (number >= 0 && base > 0 && base <= 36) {
        int remainder = number % base;
        number /= base;
        if (number > 0)
            conversionTo (number, base);
        printf ("%c", (remainder < 10) ? '0' + remainder : 'a' + remainder - 10);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20267400_20267401_3_14
20267400_20390406_1_10
Title: Undeclared identifier in C function 
----------------------------------------

void conversionTo (int number, int base) {
    int remainder = number % base;
    if (number == 0)
        return;
    conversionTo ((number / base), base);
    if (remainder < 10)
        printf ("%c", '0' + remainder);
    else
        printf ("%c", 'a' - 10 + remainder);
}
----------------------------------------

void conversionTo (int number, int base) {
    if (number >= 0 && base > 0 && base <= 36) {
        int remainder = number % base;
        number /= base;
        if (number > 0)
            conversionTo (number, base);
        printf ("%c", (remainder < 10) ? '0' + remainder : 'a' + remainder - 10);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20267400_20269012_1_13
20267400_20390406_1_10
Title: Undeclared identifier in C function 
----------------------------------------

void conversionTo (int number, int base) {
    if (number == 0)
        return;
    {
        int remainder = number % base;
        conversionTo ((number / base), base);
        if (remainder < 10)
            printf ("%c", '0' + remainder);
        else
            printf ("%c", 'a' - 10 + remainder);
    }
}
----------------------------------------

void conversionTo (int number, int base) {
    if (number >= 0 && base > 0 && base <= 36) {
        int remainder = number % base;
        number /= base;
        if (number > 0)
            conversionTo (number, base);
        printf ("%c", (remainder < 10) ? '0' + remainder : 'a' + remainder - 10);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20275506_20275611_1_28
20275506_20275936_1_25
Title: C Insertion Sort - Implementation 
----------------------------------------

struct person *insert_sorted (struct person *people, char *name, int age) {
    struct person *pointer = malloc (sizeof (struct person));
    if (pointer == NULL) {
        printf ("The program could not allocate memory ");
        exit (- 1);
    }
    strcpy (pointer -> name, name);
    pointer->age = age;
    struct person *cursor = people;
    struct person *previous = people;
    if (people == NULL) {
        pointer->next = NULL;
        return pointer;
    }
    while (cursor != NULL && strcmp (pointer->name, cursor->name) < 0) {
        previous = cursor;
        cursor = cursor->next;
    }
    if (previous != NULL)
        previous->next = pointer;
    pointer->next = cursor;
    return people;
}
----------------------------------------

struct person *insert_sorted (struct person *people, char *name, int age) {
    struct person *newperson = malloc (sizeof *newperson);
    if (newperson == NULL) {
        printf ("The program could not allocate memory ");
        exit (- 1);
    }
    strcpy (newperson -> name, name);
    newperson->age = age;
    newperson->next = people;
    if (people == NULL) {
        newperson->next = people;
        return newperson;
    }
    for (int i = 0; i < HOW_MANY; i++) {
        people = people->next;
        if (people->next == NULL)
            return people;
    }
    return newperson;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20276010_20276841_1_40
20276010_20277564_30_69
Title: C - Creating n threads 
----------------------------------------

void spawnThreads (unsigned int n) {
    pthread_t thread;
    struct s_threadId threadId;
    pthread_cond_init (& threadId.cond, NULL);
    pthread_mutex_init (& threadId.mtx, NULL);
    int i;
    for (i = 0; i < n; i++) {
        pthread_mutex_lock (& threadId.mtx);
        threadId.ready = 0;
        if (pthread_create (&thread, NULL, foo, &threadId)) {
            printf ("pthread error!\n");
        }
        else {
            while (!threadId.ready) {
                pthread_cond_wait (& threadId.cond, & threadId.mtx);
            }
            printf ("%d %d\n", i, threadId.id);
            printf ("I just created thread %d\n", i);
        }
        pthread_mutex_unlock (& threadId.mtx);
        pthread_join (thread, NULL);
    }
    pthread_mutex_destroy (& threadId.mtx);
    pthread_cond_destroy (& threadId.cond);
}
----------------------------------------

void spawnThreads (unsigned int numThreads) {
    int ret;
    pthread_t *tids = malloc (sizeof (pthread_t) * numThreads);
    int i;
    for (i = 0; i < numThreads; i++) {
        data *dp = malloc (sizeof (data) * numThreads);
        memset (dp, '\0', sizeof (* dp));
        dp->i = i;
        ret = pthread_create (&tids[i], NULL, foo, (void *) dp);
        if (ret != 0)
            perror ("pthread create error");
    }
    for (int i = 0; i < numThreads; ++i) {
        data *status;
        ret = pthread_join (tids[i], (void *) &status);
        if (ret != 0)
            perror ("pthread join error");
        else {
            printf ("thread num %d joined and reports pthreadId of %lu " "process pid of %d and linux tid of %d\n", status -> i, status -> ptid, status -> pid, status -> tid);
            free (status);
        }
    }
    free (tids);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20276111_20276228_4_18
20276111_20276262_5_29
Title: "How do I print two arrays using recursion one after another (i.e. not concurrently)?" 
----------------------------------------

void printcombo (int *a, int *b) {
    int first, second;
    first = *a;
    second = *b;
    if (first != 0) {
        printf ("%d ", first);
        printcombo (a + 1, b);
    }
    else if (second != 0) {
        printf ("%d ", second);
        printcombo (a, b + 1);
    }
    else {
        printf ("DONE\n");
    }
}
----------------------------------------

void printcombo (int *a, int *b) {
    int first, second;
    first = *a;
    second = *b;
    if (first == 0 && second == 0) {
        printf ("DONE\n");
        return;
    }
    if (first != 0 && second != 0) {
        if (first < second) {
            printf ("%d,", first);
            ++a;
        }
        else {
            printf ("%d,", second);
            ++b;
        }
    }
    else if (first != 0 && second == 0) {
        printf ("%d,", first);
        ++a;
    }
    else if (first == 0 && second != 0) {
        printf ("%d,", second);
        ++b;
    }
    printcombo (a, b);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2028457_2028529_3_23
2028457_2028582_5_16
Title: C Programming : how do I read and print out a byte from a binary file? 
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2)
        return 1;
    FILE *f = fopen (argv[1], "rb");
    int first = fgetc (f);
    if (first != EOF)
        printf ("first byte = %x\n", (unsigned) first);
    fclose (f);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int fd;
    unsigned char c;
    fd = open (argv[1], O_RDONLY);
    read (fd, & c, sizeof (c));
    close (fd);
    printf ("<0x%x>\n", c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20308617_21461480_5_24
20308617_25910711_7_32
Title: getcurrent time on second or millisecond 
----------------------------------------

int main (void) {
    struct timeval tv_start, tv_end;
    gettimeofday (& tv_start, NULL);
    sleep (5);
    gettimeofday (& tv_end, NULL);
    printf ("tv_start\n seconds: %u :: microseconds: %u\n\n", (unsigned int) tv_start.tv_sec, (unsigned int) tv_start.tv_usec);
    printf ("tv_end\n seconds: %u :: microseconds: %u\n\n", (unsigned int) tv_end.tv_sec, (unsigned int) tv_end.tv_usec);
    int deltaInUSecs = (tv_end.tv_sec - tv_start.tv_sec) * 1000000 - (tv_end.tv_usec - tv_start.tv_usec);
    printf ("delta in microseconds\n %u\n\n", deltaInUSecs);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    double cBuffer1;
    double cBuffer2;
    time_t zaman;
    struct tm *ltime;
    static struct timeval _t;
    static struct timezone tz;
    time (& zaman);
    ltime = (struct tm *) localtime (&zaman);
    gettimeofday (& _t, & tz);
    cBuffer1 = (double) _t.tv_sec + (double) _t.tv_usec / (1000 * 1000);
    printf (" %f \n", cBuffer1);
    sleep (1);
    gettimeofday (& _t, & tz);
    cBuffer2 = (double) _t.tv_sec + (double) _t.tv_usec / (1000 * 1000);
    printf (" %f \n", cBuffer2);
    printf (" duration : %f \n", cBuffer2 - cBuffer1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20314906_20315118_1_14
20314906_20315723_1_22
Title: optimized bit manipulation for getting the NOT value 
----------------------------------------

int negate (int num) {
    unsigned int bitMask = 0xFFFFFFFF;
    for (unsigned int bit = 0x80000000; bit != 0; bit >>= 1) {
        if (bit & num)
            break;
        bitMask /= 2;
    }
    return ~num & bitMask;
}
----------------------------------------

int negate (unsigned int a) {
    if (a == 0)
        ;
    else if (a == 1)
        a = 0;
    else if (a < 4)
        a ^= 0x0003;
    else if (a < 8)
        a ^= 0x0007;
    else if (a < 16)
        a ^= 0x000f;
    else if (a < 32)
        a ^= 0x001f;
    else if (a < 64)
        a ^= 0x003f;
    else if (a < 128)
        a ^= 0x007f;
    else if (a < 256)
        a ^= 0x00ff;
    else if (a < 512)
        a ^= 0x01ff;
    else if (a < 1024)
        a ^= 0x03ff;
    else if (a < 2048)
        a ^= 0x07ff;
    else if (a < 4096)
        a ^= 0x0fff;
    else if (a < 8192)
        a ^= 0x1fff;
    else if (a < 16384)
        a ^= 0x3fff;
    else if (a < 32768)
        a ^= 0x7fff;
    else
        a ^= 0xffff;
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20317832_20318055_1_21
20317832_20318271_4_36
Title: C language-weird output using fgets 
----------------------------------------

int main (int argc, const char *argv []) {
    FILE *fp;
    char str [256];
    char *temp = calloc (257, 1);
    fp = fopen ("file.txt", "r");
    if (fp == NULL) {
        perror ("Error opening file");
        return (-1);
    }
    while (fgets (str, sizeof (str), fp)) {
        int i;
        if (str[strlen (str) - 1] == '\n') {
            str[strlen (str) - 1] = ' ';
        }
        strncat (temp, str, 257);
    }
    puts (temp);
}
----------------------------------------

int main () {
    FILE *fp;
    char str [256];
    fp = fopen ("file.txt", "r");
    if (fp == NULL) {
        perror ("Error opening file");
        return (-1);
    }
    while (fgets (str, sizeof (str), fp)) {
        int i;
        char temp [256];
        char *temp1;
        temp1 = temp;
        for (i = 0; i < sizeof (str); i++) {
            int ch = str[i];
            if (isalpha (ch) || ch == '"') {
                *temp1++ = ch;
            }
            else if (ch == '\0') {
                *temp1 = ch;
                break;
            }
            else if (ch == '.') {
                continue;
            }
            else {
                *temp1++ = ' ';
            }
        }
        printf ("%s", temp);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20324332_20325192_18_28
20324332_20327509_20_30
Title: Error C language 
----------------------------------------

int main () {
    int k;
    char s [30];
    printf ("please enter first name ");
    gets (s);
    scanf ("%d", & k);
    shift (s, k);
    puts (s);
    getch ();
    return 0;
}
----------------------------------------

int main () {
    int k;
    Word w;
    printf ("please enter first name ");
    gets (w.str);
    scanf ("%d", & k);
    w = shift (w, k);
    puts (w.str);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20324332_20325192_5_16
20324332_20327509_8_18
Title: Error C language 
----------------------------------------

void shift (char s [], int k) {
    int i, len;
    char temp [50];
    for (i = 0; i < k; i++)
        temp[i] = s[i];
    temp[i] = '\0';
    len = strlen (s);
    for (i = 0; k < len; i++)
        s[i] = s[k++];
    strcpy (& s [i], temp);
}
----------------------------------------

Word shift (Word word, int k) {
    Word temp;
    int i = 0, j;
    for (j = k; word.str[j] != '\0'; ++j)
        temp.str[i++] = word.str[j];
    for (j = 0; j < k; ++j)
        temp.str[i++] = word.str[j];
    temp.str[i] = '\0';
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20334746_20335057_9_81
20334746_20339830_4_36
Title: Find the largest sum of 3 consecutive digits from number 
----------------------------------------

void main () {
    int a, b, c, d, e, i, maxsum;
    a = 0;
    b = 0;
    c = 0;
    d = 0;
    maxsum = 0;
    i = 0;
    int counter = 0;
    int numsearch = 1;
    int inside = 0;
    while ((i = getchar ()) != EOF) {
        if (numsearch == 1) {
            if (isempt (i) == 0) {
                numsearch = 0;
                inside = 1;
                a = i - '0';
                counter++;
            }
        }
        else if ((isempt (i) == 0) && (inside == 1)) {
            if (counter == 1) {
                b = i - '0';
                counter++;
            }
            else if (counter == 2) {
                c = i - '0';
                counter++;
            }
            else if (counter == 3) {
                d = i - '0';
                maxsum = a + b + c;
                if ((b + c + d) > maxsum) {
                    maxsum = (b + c + d);
                }
                a = b;
                b = c;
                c = d;
                counter++;
            }
            else if (counter == 4) {
                d = i - '0';
                if ((b + c + d) > maxsum) {
                    maxsum = b + c + d;
                }
                a = b;
                b = c;
                c = d;
            }
        }
        else if ((counter >= 3) && (isempt (i) == 1)) {
            printf ("\n%d\n", maxsum);
            counter = 0;
            numsearch = 1;
            inside = 0;
            a = 0;
            b = 0;
            c = 0;
            d = 0;
        }
        else {
            counter = 0;
            numsearch = 1;
            inside = 0;
            a = 0;
            b = 0;
            c = 0;
            d = 0;
        }
    }
}
----------------------------------------

int main () {
    int ch;
    int index = 0;
    char history [2];
    int maxsum = -1;
    int sum = 0;
    while ((ch = getchar ()) != EOF) {
        if (isdigit (ch)) {
            ch -= '0';
            sum += ch;
            if (index >= 2) {
                if (sum > maxsum) {
                    maxsum = sum;
                }
                sum -= history[0];
                history[0] = history[1];
                history[1] = ch;
            }
            else {
                history[index++] = ch;
            }
        }
        else {
            if (!isspace (ch)) {
                printf ("Unexpected text '%c'\n", ch);
            }
            index = 0;
            sum = 0;
        }
    }
    printf ("Maximum sum: %d\n", maxsum);
    return maxsum < 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20334746_20335057_9_81
20334746_20346824_4_35
Title: Find the largest sum of 3 consecutive digits from number 
----------------------------------------

void main () {
    int a, b, c, d, e, i, maxsum;
    a = 0;
    b = 0;
    c = 0;
    d = 0;
    maxsum = 0;
    i = 0;
    int counter = 0;
    int numsearch = 1;
    int inside = 0;
    while ((i = getchar ()) != EOF) {
        if (numsearch == 1) {
            if (isempt (i) == 0) {
                numsearch = 0;
                inside = 1;
                a = i - '0';
                counter++;
            }
        }
        else if ((isempt (i) == 0) && (inside == 1)) {
            if (counter == 1) {
                b = i - '0';
                counter++;
            }
            else if (counter == 2) {
                c = i - '0';
                counter++;
            }
            else if (counter == 3) {
                d = i - '0';
                maxsum = a + b + c;
                if ((b + c + d) > maxsum) {
                    maxsum = (b + c + d);
                }
                a = b;
                b = c;
                c = d;
                counter++;
            }
            else if (counter == 4) {
                d = i - '0';
                if ((b + c + d) > maxsum) {
                    maxsum = b + c + d;
                }
                a = b;
                b = c;
                c = d;
            }
        }
        else if ((counter >= 3) && (isempt (i) == 1)) {
            printf ("\n%d\n", maxsum);
            counter = 0;
            numsearch = 1;
            inside = 0;
            a = 0;
            b = 0;
            c = 0;
            d = 0;
        }
        else {
            counter = 0;
            numsearch = 1;
            inside = 0;
            a = 0;
            b = 0;
            c = 0;
            d = 0;
        }
    }
}
----------------------------------------

int main () {
    int ch;
    int count = 0;
    int first = 0;
    int second = 0;
    int sum = 0;
    int max_sum = 0;
    while (ch = getchar (), ch != EOF) {
        if (isdigit (ch)) {
            ++count;
            ch -= '0';
            sum += ch;
            if (sum > max_sum) {
                max_sum = sum;
            }
            sum -= first;
            first = second;
            second = ch;
        }
        else {
            printf ("Ignored unexpected text '%c'\n", ch);
        }
    }
    printf ("Maximum sum: %d\n", max_sum);
    return count < 3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20334746_20339830_4_36
20334746_20346824_4_35
Title: Find the largest sum of 3 consecutive digits from number 
----------------------------------------

int main () {
    int ch;
    int index = 0;
    char history [2];
    int maxsum = -1;
    int sum = 0;
    while ((ch = getchar ()) != EOF) {
        if (isdigit (ch)) {
            ch -= '0';
            sum += ch;
            if (index >= 2) {
                if (sum > maxsum) {
                    maxsum = sum;
                }
                sum -= history[0];
                history[0] = history[1];
                history[1] = ch;
            }
            else {
                history[index++] = ch;
            }
        }
        else {
            if (!isspace (ch)) {
                printf ("Unexpected text '%c'\n", ch);
            }
            index = 0;
            sum = 0;
        }
    }
    printf ("Maximum sum: %d\n", maxsum);
    return maxsum < 0;
}
----------------------------------------

int main () {
    int ch;
    int count = 0;
    int first = 0;
    int second = 0;
    int sum = 0;
    int max_sum = 0;
    while (ch = getchar (), ch != EOF) {
        if (isdigit (ch)) {
            ++count;
            ch -= '0';
            sum += ch;
            if (sum > max_sum) {
                max_sum = sum;
            }
            sum -= first;
            first = second;
            second = ch;
        }
        else {
            printf ("Ignored unexpected text '%c'\n", ch);
        }
    }
    printf ("Maximum sum: %d\n", max_sum);
    return count < 3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20341223_20341274_1_12
20341223_20341746_1_12
Title: Can't get string search to work properly 
----------------------------------------

int search (char array [10] [7], int size, char target [7]) {
    int n;
    for (n = 0; n < size; n++) {
        if (strncmp (array[n], target, COMPARE_LIMIT) == 0) {
            return n;
        }
    }
    return -1;
}
----------------------------------------

int search (char array [10] [7], int size, char target [7]) {
    int n;
    for (n = 0; n < size; n++) {
        if (strncmp (array[n], target, COMPARE_LIMIT) == 0) {
            return n;
        }
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20378430_20378587_4_29
20378430_30064832_3_17
Title: Reading numbers from a text file into an array in C 
----------------------------------------

int main () {
    FILE *myFile;
    myFile = fopen ("somenumbers.txt", "r");
    int numberArray [16];
    int i;
    if (myFile == NULL) {
        printf ("Error Reading File\n");
        exit (0);
    }
    for (i = 0; i < 16; i++) {
        fscanf (myFile, "%d,", & numberArray [i]);
    }
    for (i = 0; i < 16; i++) {
        printf ("Number is: %d\n\n", numberArray [i]);
    }
    fclose (myFile);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    short unsigned digitArray [16];
    i = 0;
    while (i != sizeof (digitArray) / sizeof (digitArray[0]) && 1 == scanf ("%1hu", digitArray +i)) {
        i++;
    }
    for (j = 0; j != i; j++) {
        printf ("%hu\n", digitArray [j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20381812_20382241_9_26
20381812_20382831_13_45
Title: mprotect always returns invalid arguments 
----------------------------------------

int main (int argc, char *argv []) {
    printf ("Before modification: foo = %d @ %p\n", foo, (void *) & foo);
    size_t pagesize = sysconf (_SC_PAGESIZE);
    void *foo_page = (void *) (((uintptr_t) &foo) & ~(pagesize - 1));
    if (mprotect (foo_page, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC)) {
        perror ("mprotect");
        return 1;
    }
    *(int*) &foo = 42;
    printf ("After modification: foo = %d @ %p\n", foo, (void *) & foo);
    return 0;
}
----------------------------------------

int main (void) {
    int NewValue = 23;
    size_t pagesize = sysconf (_SC_PAGESIZE);
    uintptr_t start = (uintptr_t) &foo + 5;
    uintptr_t end = start + sizeof NewValue;
    uintptr_t pagestart = start & -pagesize;
    if (mprotect ((void *) pagestart, end -pagestart, PROT_READ | PROT_WRITE | PROT_EXEC)) {
        perror ("mprotect");
        exit (EXIT_FAILURE);
    }
    memcpy ((void *) start, & NewValue, sizeof NewValue);
    printf ("foo returns %d.\n", foo ());
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20394387_20394444_1_23
20394387_20394445_3_18
Title: string reverse with loop and array in c 
----------------------------------------

void main () {
    char str [100], temp;
    int i, j = 0;
    printf ("nEnter the string :");
    gets (str);
    i = 0;
    j = strlen (str) - 1;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
    printf ("nReverse string is :%s", str);
    return (0);
}
----------------------------------------

int main () {
    char str [] = "str to rev";
    char revstr [12] = {'\0'};
    int i, j;
    int length = strlen (str);
    j = 0;
    for (i = length - 1; i >= 0; i--) {
        revstr[j] = str[i];
        j = j + 1;
    }
    printf ("%s", revstr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20401593_20401720_1_33
20401593_20402766_1_22
Title: string matching in C without using any predefined function? 
----------------------------------------

int main () {
    int flag = 0, j, i = 0;
    char b [] = "this is a dog\0";
    printf ("enter string \n");
    char input [50];
    char get;
    get = getchar ();
    while (get != '\n') {
        input[i] = get;
        i++;
        get = getchar ();
    }
    for (j = 0; j < i; j++) {
        if (input[j] == b[j]) {
        }
        else {
            flag = 1;
            break;
        }
    }
    if (flag == 0) {
        printf ("yes\n");
    }
    else {printf ("no\n");
}
----------------------------------------

int main () {
    int flag, j;
    char a [30] = {'\0'};
    char b [] = "This is a dog";
    printf ("enter string \n");
    gets (a);
    int p = strlen (b);
    for (j = 0; j < p; j++) {
        if (a[j] == b[j]) {
            flag = 0;
        }
        else {
            flag = 1;
            break;
        }
    }
    if (flag == 0)
        printf ("yes");
    else
        printf ("no");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20403623_20403752_5_29
20403623_20404070_2_37
Title: Why do i need to press '\n' three times for this to run? 
----------------------------------------

int main () {
    char L1 = 0, L2 = 0, L3 = 0;
    int count_hya = 0, countLA = 0, countLC = 0, countLH = 0, countLL = 0;
    printf ("give me some letters\n");
    while ((L1 != '\n') && (L2 != '\n') && (L3 != '\n')) {
        SCANF_CHK (L1);
        SCANF_CHK (L2);
        SCANF_CHK (L3);
        if (L1 == 'A')
            countLA++;
        if (L1 == 'C')
            countLC++;
        if (L1 == 'L')
            countLL++;
        if (L1 == 'H')
            countLH++;
        if (L1 == 'H' && L2 == 'Y' && L3 == 'A')
            count_hya++;
    }
    printf ("number of words begning with: A=%d  C=%d  L=%d  H=%d Hydra=%d\n", countLA, countLC, countLL, countLH, count_hya);
    return 0;
}
----------------------------------------

int main () {
    char L1 = 0, L2 = 0, L3 = 0;
    int count_hya = 0, countLA = 0, countLC = 0, countLH = 0, countLL = 0;
    int flag = 1;
    printf ("give me some letters\n");
    while (flag == 1) {
        if (flag == 1) {
            scanf ("%c", & L1);
            if (L1 == '\n')
                flag = 0;
        }
        if (flag == 1) {
            scanf ("%c", & L2);
            if (L2 == '\n')
                flag = 0;
        }
        if (flag == 1) {scanf ("%c", & L3);
        if (L3 == '\n')
            flag = 0;
    }
    if (L1 == 'A')
        countLA++;
    if (L1 == 'C')
        countLC++;
    if (L1 == 'L')
        countLL++;
    if (L1 == 'H')
        countLH++;
    if (L1 == 'H' && L2 == 'Y' && L3 == 'A')
        count_hya++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20412342_20412494_2_14
20412342_20412507_1_14
Title: C - quicker way to shift an array without using int 
----------------------------------------

void filter (char *array, bool (*function) (char)) {
    char *src;
    char *dest;
    char c;
    src = dest = array;
    while (c = *src++) {
        if (!function (c))
            *dest++ = c;
    }
    *dest = 0;
}
----------------------------------------

bool filter (char *array, bool (*function) (char)) {
    if (array) {
        char *start = array;
        while (*(array) != 0) {
            if (function (*array) == false) {
                *start = *array;
                start++;
            }
            array ++
        }
        *start = '\0';
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20412342_20412494_2_14
20412342_20412824_1_10
Title: C - quicker way to shift an array without using int 
----------------------------------------

void filter (char *array, bool (*function) (char)) {
    char *src;
    char *dest;
    char c;
    src = dest = array;
    while (c = *src++) {
        if (!function (c))
            *dest++ = c;
    }
    *dest = 0;
}
----------------------------------------

void filter (char *array, bool (*function) (char)) {
    char *dst;
    if (!array)
        return;
    for (dst = array; *dst = *array++;) {
        if (function (*dst))
            continue;
        dst++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20412342_20412507_1_14
20412342_20412824_1_10
Title: C - quicker way to shift an array without using int 
----------------------------------------

bool filter (char *array, bool (*function) (char)) {
    if (array) {
        char *start = array;
        while (*(array) != 0) {
            if (function (*array) == false) {
                *start = *array;
                start++;
            }
            array ++
        }
        *start = '\0';
    }
    return true;
}
----------------------------------------

void filter (char *array, bool (*function) (char)) {
    char *dst;
    if (!array)
        return;
    for (dst = array; *dst = *array++;) {
        if (function (*dst))
            continue;
        dst++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20442952_20443066_3_17
20442952_20443078_4_26
Title: How to correctly handle scanf() 
----------------------------------------

int main (void) {
    int i = 0;
    int Q = 2;
    char ch;
    int index;
    int num;
    while (i <= Q) {
        scanf (" %c %d %d", & ch, & index, & num);
        printf ("%c %d %d\n", ch, index, num);
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    int num, count, numone, numtwo;
    char charip;
    printf ("Enter numbr of elem:\t");
    scanf ("%d", & num);
    if (num < 0) {
        printf ("Enter positive value!!!!!\n");
        exit (- 1);
    }
    count = 0;
    while (count < num) {
        getchar ();
        scanf ("%c %d %d", & charip, & numone, & numtwo);
        printf ("%c %d %d\n", charip, numone, numtwo);
        count++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20445321_20445462_1_29
20445321_20445528_1_25
Title: Algorithm using recursion 
----------------------------------------

bool is_possible (int k, int n, int i, char *ch) {
    if (ifprime (k)) {
        ch[i] = '\0';
        return true;
    }
    if (n == 0)
        return false;
    if (is_possible (A (k), n -1, i +1, ch)) {
        ch[i] = 'A';
        return true;
    }
    if (is_possible (B (k), n -1, i +1, ch)) {
        ch[i] = 'B';
        return true;
    }
    if (is_possible (C (k), n -1, i +1, ch)) {
        ch[i] = 'C';
        return true;
    }
    return false;
}
----------------------------------------

bool is_possible (int k, int n, int a) {
    if (ifprime (k)) {
        return true;
    }
    if (n == 0) {
        return false;
    }
std :
    : cout << "n=" << n << " a = " << a << std : : endl;
    switch (a) {
    case 1 :
        k = A (k);
        break;
    case 2 :
        k = B (k);
        break;
    case 3 :
        k = C (k);
        break;
    }
    return is_possible (k, n -1, 1) || is_possible (k, n -1, 2) || is_possible (k, n -1, 3);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20446042_20446062_4_19
20446042_20446117_4_18
Title: Count number of occurrences of a digit within a string 
----------------------------------------

int main () {
    int inputNumbers [] = {1, 4, 5, 5, 5, 6, 6, 3, 2, 1};
    int resultCount [] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int countNumbers = sizeof (inputNumbers) / sizeof (inputNumbers[0]);
    for (int i = 0; i < countNumbers; i++) {
        resultCount[inputNumbers[i]]++;
    }
    for (int i = 0; i < countNumbers; i++) {
        printf ("Number %d has occured %d times \n", i, resultCount [i]);
    }
}
----------------------------------------

int main () {
    int numbers [10] = {1, 4, 5, 5, 5, 6, 6, 3, 2, 1};
    int count = 0;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (i == numbers[j]) {
                count++;
            }
        }
        printf ("Number %d has occured %d times \n", i, count);
        count = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20450556_33167062_20_106
20450556_46244959_10_49
Title: "Linux ""ls -l"" implementation using file descriptors in C/C++" 
----------------------------------------

int main (int argc, char *argv []) {
    DIR *thedirectory;
    struct dirent *thefile;
    struct stat thestat;
    struct passwd *tf;
    struct group *gf;
    char buf [512];
    thedirectory = opendir (argv[1]);
    while ((thefile = readdir (thedirectory)) != NULL) {
        sprintf (buf, "%s/%s", argv [1], thefile -> d_name);
        stat (buf, & thestat);
        switch (thestat.st_mode & S_IFMT) {
        case S_IFBLK :
            printf ("b ");
            break;
        case S_IFCHR :
            printf ("c ");
            break;
        case S_IFDIR :
            printf ("d ");
            break;
        case S_IFIFO :
            printf ("p ");
            break;
        case S_IFLNK :
            printf ("l ");
            break;
        case S_IFSOCK :
            printf ("s ");
            break;
        default :
            printf ("- ");
            break;
        }
        printf ((thestat.st_mode & S_IRUSR) ? " r" : " -");
        printf ((thestat.st_mode & S_IWUSR) ? "w" : "-");
        printf ((thestat.st_mode & S_IXUSR) ? "x" : "-");
        printf ((thestat.st_mode & S_IRGRP) ? "r" : "-");
        printf ((thestat.st_mode & S_IWGRP) ? "w" : "-");
        printf ((thestat.st_mode & S_IXGRP) ? "x" : "-");
        printf ((thestat.st_mode & S_IROTH) ? "r" : "-");
        printf ((thestat.st_mode & S_IWOTH) ? "w" : "-");
        printf ((thestat.st_mode & S_IXOTH) ? "x" : "-");
        printf ("\t%d ", thestat.st_nlink);
        tf = getpwuid (thestat.st_uid);
        printf ("\t%s ", tf -> pw_name);
        gf = getgrgid (thestat.st_gid);
        printf ("\t%s ", gf -> gr_name);
        printf ("%zu", thestat.st_size);
        printf (" %s", thefile -> d_name);
        printf (" %s", ctime (& thestat.st_mtime));
    }
    closedir (thedirectory);
}
----------------------------------------

int main (int argc, char **argv) {
    struct passwd *pw;
    struct group *gp;
    DIR *mydir;
    char *c;
    int i;
    struct dirent *myfile;
    struct stat fileStat;
    mydir = opendir (".");
    stat (".", & fileStat);
    while ((myfile = readdir (mydir)) != NULL) {
        stat (myfile -> d_name, & fileStat);
        printf ((S_ISDIR (fileStat.st_mode)) ? "d" : "-");
        printf ((fileStat.st_mode & S_IRUSR) ? "r" : "-");
        printf ((fileStat.st_mode & S_IWUSR) ? "w" : "-");
        printf ((fileStat.st_mode & S_IXUSR) ? "x" : "-");
        printf ((fileStat.st_mode & S_IRGRP) ? "r" : "-");
        printf ((fileStat.st_mode & S_IWGRP) ? "w" : "-");
        printf ((fileStat.st_mode & S_IXGRP) ? "x" : "-");
        printf ((fileStat.st_mode & S_IROTH) ? "r" : "-");
        printf ((fileStat.st_mode & S_IWOTH) ? "w" : "-");
        printf ((fileStat.st_mode & S_IXOTH) ? "x" : "-");
        printf (" ");
        printf ("%d ", fileStat.st_nlink);
        pw = getpwuid (fileStat.st_uid);
        printf ("%s ", pw -> pw_name);
        gp = getgrgid (fileStat.st_gid);
        printf ("%s ", gp -> gr_name);
        printf ("%4d ", fileStat.st_size);
        c = ctime (&fileStat.st_mtime);
        for (i = 4; i <= 15; i++)
            printf ("%c", c[i]);
        printf (" ");
        printf ("%s\n", myfile -> d_name);
    }
    closedir (mydir);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20460191_20460538_2_8
20460191_20460558_1_15
Title: Recursive exponentiation 
----------------------------------------

double intpower (double x, int n) {
    double result;
    if (n > 1 && n % 2 != 0) {
        result = x * intpower (x, (n - 1) / 2) * intpower (x, (n - 1) / 2);
        count += 2;
    }
    if (n > 1 && n % 2 == 0) {
        result = intpower (x, n / 2) * intpower (x, n / 2);
        count++;
    }
    if (n == 1)
        return x;
    else
        return result;
}
----------------------------------------

double intpower (double x, int n) {
    if (n == 0)
        return 1;
    if (n == 1)
        return x;
    if (n % 2 != 0) {
        return x * intpower (x, (n - 1));
    }
    else {
        x = intpower (x, n / 2);
        return x * x;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20468789_20469256_1_10
20468789_20469444_1_11
Title: printing a 2d array of string in c 
----------------------------------------

void print (char *a) {
    int i = 0;
    printf ("the list of names include : \n");
    while (i < (lim * maxx)) {
        printf ("%s\n", a);
        i += maxx;
        a = a + maxx;
    }
}
----------------------------------------

void print (char aray [lim] [maxx]) {
    int i, j;
    printf ("the list of names include : \n");
    for (i = 0; i < lim; i++) {
        for (j = 0; j < maxx; j++) {
            puts (aray [i] [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20469566_20469689_5_22
20469566_20470321_3_19
Title: How I can Gave The Variable To The Array in c 
----------------------------------------

int main (void) {
    int number = 4056;
    int remainder = 0;
    int i = 0;
    while (number > 0 && digits[i] >= 0) {
        remainder = number % 10;
        number /= 10;
        digits[i] = 48 + remainder;
        i++;
    }
    for (i--; i >= 0; i--) {
        printf ("%c", digits [i]);
    }
    printf ("\n");
}
----------------------------------------

int main () {
    unsigned int x = 456;
    int len = snprintf (NULL, 0, "%u", x);
    unsigned int i [len];
    unsigned int wk = x;
    for (int k = len - 1; k >= 0; --k, wk /= 10)
        i[k] = wk % 10;
    for (int k = 0; k < len; ++k)
        printf ("%u", i[k]);
    char string [len + 1];
    for (int k = 0; k < len; ++k)
        sprintf (string +k, "%u", i[k]);
    printf ("\n%s\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20477424_20477975_4_59
20477424_20479189_3_31
Title: Efficient way to find the sum of digits of an 8 digit number 
----------------------------------------

int main () {
    clock_t time1, time2;
    int M, N, res = 0, cnt, first4, second4, sum1, sum2, last4_ofM, first4_ofM, last4_ofN, first4_ofN, j;
    scanf ("%d", & M);
    scanf ("%d", & N);
    time1 = clock ();
    for (cnt = M; cnt <= N; cnt++) {
        first4 = cnt % 10000;
        sum1 = first4 % 10 + (first4 / 10) % 10 + (first4 / 100) % 10 + (first4 / 1000) % 10;
        second4 = cnt / 10000;
        sum2 = second4 % 10 + (second4 / 10) % 10 + (second4 / 100) % 10 + (second4 / 1000) % 10;
        if (sum1 == sum2)
            res++;
    }
    time2 = clock ();
    printf ("%d\n", res);
    printf ("first algorithm time: %f\n", ((float) time2 - (float) time1) / 1000000.0F);
    res = 0;
    time1 = clock ();
    first4_ofM = M / 10000;
    last4_ofM = M % 10000;
    first4_ofN = N / 10000;
    last4_ofN = N % 10000;
    for (int i = first4_ofM; i <= first4_ofN; i++) {
        sum1 = i % 10 + (i / 10) % 10 + (i / 100) % 10 + (i / 1000) % 10;
        if (i == first4_ofM)
            j = last4_ofM;
        else
            j = 0;
        while (j <= 9999) {
            sum2 = j % 10 + (j / 10) % 10 + (j / 100) % 10 + (j / 1000) % 10;
            if (sum1 == sum2)
                res++;
            if (i == first4_ofN && j == last4_ofN)
                break;
            j++;
        }
    }
    time2 = clock ();
    printf ("%d\n", res);
    printf ("second algorithm time: %f\n", ((float) time2 - (float) time1) / 1000000.0F);
    return 0;
}
----------------------------------------

int main () {
    int M, N;
    scanf ("%d", & M);
    scanf ("%d", & N);
    static int table [10000] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    {
        register int i = 0, i1, i2, i3, i4;
        for (i1 = 0; i1 < 10; ++i1)
            for (i2 = 0; i2 < 10; ++i2)
                for (i3 = 0; i3 < 10; ++i3)
                    for (i4 = 0; i4 < 10; ++i4)
                        table[i++] = table[i1] + table[i2] + table[i3] + table[i4];
    }
    register int cnt = M, second4 = M % 10000;
    int res = 0, first4 = M / 10000, sum1 = table[first4];
    for (; cnt <= N; ++cnt) {
        if (sum1 == table[second4])
            ++res;
        if (++second4 > 9999) {
            second4 -= 10000;
            if (++first4 > 9999)
                break;
            sum1 = table[first4];
        }
    }
    printf ("%d", res);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20481983_20482260_1_45
20481983_20482264_1_25
Title: Merge two int array from one array without duplication 
----------------------------------------

void unify (int set_A [], int size_A, int set_B [], int size_B, int set_C [], int size_C) {
    int counterC = 0;
    for (int i = 0; i < size_A && counterC < size_C; i++) {
        int discard = 0;
        for (int j = 0; j < i; j++) {
            if (set_A[j] == set_A[i]) {
                discard = 1;
                break;
            }
        }
        if (discard)
            continue;
        set_C[counterC++] = set_A[i];
    }
    for (int i = 0; i < size_B && counterC < size_C; i++) {
        int discard = 0;
        for (int j = 0; j < i; j++) {
            if (set_B[j] == set_B[i]) {
                discard = 1;
                break;
            }
        }
        if (discard)
            continue;
        for (int j = 0; j < counterC; j++) {
            if (set_C[j] == set_B[i]) {
                discard = 1;
                break;
            }
        }
        if (discard)
            continue;
        set_C[counterC++] = set_B[i];
    }
}
----------------------------------------

void unify (int set_A [], int size_A, int set_B [], int size_B, int set_C []) {
    int i, j, indx = size_A;
    for (i = 0; i < size_A; i++) {
        set_C[i] = set_A[i];
    }
    for (i = 0; i < size_B; i++) {
        int count = 0;
        for (j = 0; j < size_A; j++) {
            if (set_A[j] != set_B[i])
                ++count;
        }
        if (count == size_A) {
            set_C[indx] = set_B[i];
            ++indx;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20481983_20482260_1_45
20481983_20482698_1_19
Title: Merge two int array from one array without duplication 
----------------------------------------

void unify (int set_A [], int size_A, int set_B [], int size_B, int set_C [], int size_C) {
    int counterC = 0;
    for (int i = 0; i < size_A && counterC < size_C; i++) {
        int discard = 0;
        for (int j = 0; j < i; j++) {
            if (set_A[j] == set_A[i]) {
                discard = 1;
                break;
            }
        }
        if (discard)
            continue;
        set_C[counterC++] = set_A[i];
    }
    for (int i = 0; i < size_B && counterC < size_C; i++) {
        int discard = 0;
        for (int j = 0; j < i; j++) {
            if (set_B[j] == set_B[i]) {
                discard = 1;
                break;
            }
        }
        if (discard)
            continue;
        for (int j = 0; j < counterC; j++) {
            if (set_C[j] == set_B[i]) {
                discard = 1;
                break;
            }
        }
        if (discard)
            continue;
        set_C[counterC++] = set_B[i];
    }
}
----------------------------------------

void unify (int set_A [], int size_A, int set_B [], int size_B, int set_C [], int size_C) {
    int indexC, indexTemp;
    for (indexC = 0; indexC < size_A; indexC++)
        set_C[indexC] = set_A[indexC];
    for (int indexB = 0; indexB < size_B; indexB++) {
        for (indexTemp = 0; indexTemp < indexC; indexTemp++) {
            if (set_B[indexB] == set_C[indexTemp])
                break;
        }
        if (indexTemp == indexC)
            set_C[indexC++] = set_B[indexB];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20481983_20482264_1_25
20481983_20482698_1_19
Title: Merge two int array from one array without duplication 
----------------------------------------

void unify (int set_A [], int size_A, int set_B [], int size_B, int set_C []) {
    int i, j, indx = size_A;
    for (i = 0; i < size_A; i++) {
        set_C[i] = set_A[i];
    }
    for (i = 0; i < size_B; i++) {
        int count = 0;
        for (j = 0; j < size_A; j++) {
            if (set_A[j] != set_B[i])
                ++count;
        }
        if (count == size_A) {
            set_C[indx] = set_B[i];
            ++indx;
        }
    }
}
----------------------------------------

void unify (int set_A [], int size_A, int set_B [], int size_B, int set_C [], int size_C) {
    int indexC, indexTemp;
    for (indexC = 0; indexC < size_A; indexC++)
        set_C[indexC] = set_A[indexC];
    for (int indexB = 0; indexB < size_B; indexB++) {
        for (indexTemp = 0; indexTemp < indexC; indexTemp++) {
            if (set_B[indexB] == set_C[indexTemp])
                break;
        }
        if (indexTemp == indexC)
            set_C[indexC++] = set_B[indexB];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20495961_20496012_3_21
20495961_20496056_6_26
Title: Write strcat() function with pointers 
----------------------------------------

char *cat (char *a, char *b) {
    int i = 0, j = 0;
    int cont = 0;
    int h = strlen (a) + strlen (b) + 1;
    char *result = (char *) malloc (h * sizeof (char));
    for (i = 0; i < strlen (a); i++) {
        result[i] = a[i];
    }
    for (j = i; j < strlen (b) + strlen (a); j++) {
        result[j] = b[cont++];
    }
    result[h - 1] = '\0';
    return result;
}
----------------------------------------

char *cat (char *a, char *b) {
    int i = 0, cont = 0, h = strlen (a) + strlen (b), j;
    char *c;
    c = malloc (h +1);
    for (i; i < strlen (a); ++i) {
        c[i] = *(a + i);
    }
    j = 0;
    for (j; j < strlen (b); ++j) {
        c[i] = *(b + cont);
        i++;
        cont++;
    }
    c[i] = 0;
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20503477_20503603_1_11
20503477_20503685_1_10
Title: Pointer arithmetic for structures gives strange result 
----------------------------------------

void deleteInventory (struct book **inventory) {
    book **i = inventory;
    while (length != 0) {
        free (*i);
        length--;
        ++i;
    }
    free (inventory);
}
----------------------------------------

void deleteInventory (struct book **inventory) {
    struct book *ptr = NULL;
    for (int i = 0; i < length; ++i) {
        ptr = inventory[i];
        free (ptr);
    }
    length = 0;
    free (inventory);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20510718_20510908_4_20
20510718_20510979_2_17
Title: Moving file pointer back to string it already read 
----------------------------------------

int main (int argc, char **argv) {
    FILE *fr;
    char temp [20];
    fr = fopen ("file_to_open", "r+");
    while (fscanf (fr, "%s", temp) != EOF) {
        if (strcmp (temp, "cat") == 0) {
            fseek (fr, - strlen (temp), SEEK_CUR);
            fprintf (fr, "dog");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fr;
    fpos_t pos;
    int c;
    char temp [20];
    fr = fopen ("filename_to_open", "r+");
    do {
        fgetpos (fr, & pos);
        c = fscanf (fr, "%s", temp);
        if (strcmp (temp, "word_to_find") == 0) {
            fsetpos (fr, & pos);
            fprintf (fr, "word_to_replace_with");
        }
    }
    while (c != EOF);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20540172_20541452_1_30
20540172_20543731_138_198
Title: Circlular Linked List 
----------------------------------------

void DeleteNode (int value) {
    int flag = 0;
    if (head == NULL) {
        printf ("\n\nList is empty.");
    }
    else {
        curr = head;
        while (curr->next != head) {
            if (curr->data == value) {
                printf ("\n\nValue found.");
                flag = 1;
                if (curr == head) {
                    curr->next = head;
                    free (curr);
                    break;
                }
                else {
                    prev->next = curr->next;
                    free (curr);
                    break;
                }
            }
            else {
                prev = curr;
                curr = curr->next;
            }
        }
        printf ("Node deleted.");
    }
    if (flag == 0)
        printf ("\n\nValue not found.");
}
----------------------------------------

void DeleteNode (int value) {
    int flag = 0;
    if (head == NULL) {
        printf ("\n\nList is empty.");
    }
    else {
        curr = head;
        prev = tail;
        do {
            if (curr->data == value) {
                printf ("\n\nValue found.");
                flag = 1;
                if (curr == head) {
                    if (tail == head) {
                        free (head);
                        temp = NULL;
                        head = NULL;
                        prev = NULL;
                        curr = NULL;
                        tail = NULL;
                    }
                    else {
                        temp = curr;
                        free (temp);
                        temp = tail;
                        curr = head->next;
                        head = curr;
                        tail->next = curr;
                    }
                }
                else {
                    prev->next = curr->next;
                    if (curr == tail) {
                        tail = prev;
                    }
                    else {
                    }
                    free (curr);
                    curr = prev->next;
                    temp = prev;
                }
            }
            else {
                prev = curr;
                curr = curr->next;
            }
        }
        while (curr != head);
        printf ("Node deleted.");
    }
    if (flag == 0) {
        printf ("\n\nValue not found.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20553257_20553581_1_11
20553257_20553606_1_21
Title: Calculating A Determinant From A 2x3 Array Matrix 
----------------------------------------

int main () {
    int eq [2] [3];
    int sol [2];
    if (determinantFunction (eq, sol)) {
        printf ("%d %d\n", sol [0], sol [1]);
    }
    else {
        printf ("No unique solutions exist.\n");
    }
}
----------------------------------------

int main () {
    int eq [2] [3];
    int sol [2];
    printf ("Enter cofficients of first equation: ");
    scanf ("%d %d %d", & eq [0] [0], & eq [0] [1], & eq [0] [2]);
    printf ("Enter cofficients of second equation: ");
    scanf ("%d %d %d", & eq [1] [0], & eq [1] [1], & eq [1] [2]);
    if (determinantFunction (eq, sol)) {
        printf ("x = %d, y = %d \n", sol [0], sol [1]);
    }
    else {
        printf ("No unique solutions exist. \n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20561674_20561836_5_16
20561674_20561967_3_18
Title: How can I do this again? in C 
----------------------------------------

int main () {
    for (i = 0; i < G; i++) {
        for (j = 0; j < G; j++) {
            if (i == j)
                grid[i][j] = 0;
            else if (i < j)
                grid[i][j] = 1;
            else if (i > j)
                grid[i][j] = -1;
            printf ("%2d\t", grid [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int grid [G] [G], c, x;
    for (c = 0; c < 5; ++c) {
        for (x = 0; x < 5; ++x) {
            if (c == x)
                grid[c][x] = 0;
            else if (c < x)
                grid[c][x] = 1;
            else
                grid[c][x] = -1;
            printf ("%2d\t ", grid [c] [x]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20561674_20561836_5_16
20561674_20569499_2_22
Title: How can I do this again? in C 
----------------------------------------

int main () {
    for (i = 0; i < G; i++) {
        for (j = 0; j < G; j++) {
            if (i == j)
                grid[i][j] = 0;
            else if (i < j)
                grid[i][j] = 1;
            else if (i > j)
                grid[i][j] = -1;
            printf ("%2d\t", grid [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int grid [G] [G], c, x;
    for (c = 5; c >= 1; c--) {
        for (x = 1; x <= 5; x++) {
            if (c + x <= 5)
                grid[c][x] = -1;
            else if (c + x >= 7)
                grid[c][x] = 1;
            else
                grid[c][x] = 0;
            printf ("%2d\t ", grid [c] [x]);
        }
        printf ("\n");
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20561674_20561967_3_18
20561674_20569499_2_22
Title: How can I do this again? in C 
----------------------------------------

int main () {
    int grid [G] [G], c, x;
    for (c = 0; c < 5; ++c) {
        for (x = 0; x < 5; ++x) {
            if (c == x)
                grid[c][x] = 0;
            else if (c < x)
                grid[c][x] = 1;
            else
                grid[c][x] = -1;
            printf ("%2d\t ", grid [c] [x]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int grid [G] [G], c, x;
    for (c = 5; c >= 1; c--) {
        for (x = 1; x <= 5; x++) {
            if (c + x <= 5)
                grid[c][x] = -1;
            else if (c + x >= 7)
                grid[c][x] = 1;
            else
                grid[c][x] = 0;
            printf ("%2d\t ", grid [c] [x]);
        }
        printf ("\n");
    }
    getch ();
    return 0;
}
----------------------------------------

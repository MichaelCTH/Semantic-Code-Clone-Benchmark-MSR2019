$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
252748_10700827_4_25
252748_41374829_7_17
Title: How can I use an array of function pointers? 
----------------------------------------

int main () {
    int (*F_P) (int y);
    void (*F_A [5]) () = {F1, F2, F3, F4, F5};
    int xyz, i;
    printf ("Hello Function Pointer!\n");
    F_P = fun;
    xyz = F_P (5);
    printf ("The Value is %d\n", xyz);
    for (i = 0; i < 5; i++) {
        F_A[i] ();
    }
    printf ("\n\n");
    F_A[f1] ();
    F_A[f2] ();
    F_A[f3] ();
    F_A[f4] ();
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    printf ("multidimensional array with function pointers\n");
    p[0][0] = one;
    p[0][1] = two;
    p[1][0] = three;
    p[1][1] = four;
    for (i = 1;
    i >= 0;
    i --) for (j = 0;
    j < 2;
    j ++) (* p [i] [j]) ((i, i * j);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
252748_37553002_13_45
252748_38639669_19_29
Title: How can I use an array of function pointers? 
----------------------------------------

int main () {
    char a = 'a';
    char * (*functions [2]) (char *) = {func1, func2};
    printf ("%c, ", a);
    printf ("%c, ", * (* functions [0]) (& a));
    printf ("%c\n", * (* functions [1]) (& a));
    a = 'a';
    typedef char * (*funcp) (char *);
    funcp functions2 [2] = {func1, func2};
    printf ("%c, ", a);
    printf ("%c, ", * (* functions2 [0]) (& a));
    printf ("%c\n", * (* functions2 [1]) (& a));
    return 0;
}
----------------------------------------

int main () {
    for (int i = 0; i < 5; i++)
        (*fArrVoid[i]) ();
    printf ("\n");
    DBG_PRINT ((* fArrArgs [0]) (3, 2))
    DBG_PRINT ((* fArrArgs [1]) (3, 2))
    DBG_PRINT ((* fArrArgs [2]) (3, 2))
    DBG_PRINT ((* fArrArgs [3]) (3, 2))
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
252748_37553002_13_45
252748_41374829_7_17
Title: How can I use an array of function pointers? 
----------------------------------------

int main () {
    char a = 'a';
    char * (*functions [2]) (char *) = {func1, func2};
    printf ("%c, ", a);
    printf ("%c, ", * (* functions [0]) (& a));
    printf ("%c\n", * (* functions [1]) (& a));
    a = 'a';
    typedef char * (*funcp) (char *);
    funcp functions2 [2] = {func1, func2};
    printf ("%c, ", a);
    printf ("%c, ", * (* functions2 [0]) (& a));
    printf ("%c\n", * (* functions2 [1]) (& a));
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    printf ("multidimensional array with function pointers\n");
    p[0][0] = one;
    p[0][1] = two;
    p[1][0] = three;
    p[1][1] = four;
    for (i = 1;
    i >= 0;
    i --) for (j = 0;
    j < 2;
    j ++) (* p [i] [j]) ((i, i * j);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
252748_38639669_19_29
252748_41374829_7_17
Title: How can I use an array of function pointers? 
----------------------------------------

int main () {
    for (int i = 0; i < 5; i++)
        (*fArrVoid[i]) ();
    printf ("\n");
    DBG_PRINT ((* fArrArgs [0]) (3, 2))
    DBG_PRINT ((* fArrArgs [1]) (3, 2))
    DBG_PRINT ((* fArrArgs [2]) (3, 2))
    DBG_PRINT ((* fArrArgs [3]) (3, 2))
    return (0);
}
----------------------------------------

int main () {
    int i, j;
    printf ("multidimensional array with function pointers\n");
    p[0][0] = one;
    p[0][1] = two;
    p[1][0] = three;
    p[1][1] = four;
    for (i = 1;
    i >= 0;
    i --) for (j = 0;
    j < 2;
    j ++) (* p [i] [j]) ((i, i * j);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25278569_25278691_3_22
25278569_25278786_8_22
Title: Why are 2D array elements not printed using *(a+1)? 
----------------------------------------

int main () {
    int a [3] [4];
    int i, j, k, l;
    printf ("enter element\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 4; j++)
            scanf ("%d", &a[i][j]);
    }
    printf ("#####################\n");
    for (i = 0; i < 8; i++) {
        printf ("%d\n", * (* a + i));
    }
}
----------------------------------------

int main () {
    int a [2] [2];
    int i, j, k, l;
    printf ("enter element\n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++)
            scanf ("%d", &a[i][j]);
    }
    printf ("#####################\n");
    print (a, 2, 2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25278569_25278786_8_22
25278569_25279379_2_18
Title: Why are 2D array elements not printed using *(a+1)? 
----------------------------------------

int main () {
    int a [2] [2];
    int i, j, k, l;
    printf ("enter element\n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++)
            scanf ("%d", &a[i][j]);
    }
    printf ("#####################\n");
    print (a, 2, 2);
}
----------------------------------------

int main () {
    int a [3] [4];
    int i, j, k, li, *p;
    printf ("enter element\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 4; j++)
            scanf ("%d", &a[i][j]);
    }
    printf ("#####################\n");
    p = &a[0][0];
    for (i = 0; i < 12; i++) {
        printf ("%d\n", * (p + i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25297099_25297165_1_15
25297099_25297219_1_15
Title: K&R exercise 2-5 
----------------------------------------

int char_seek (char string [], char string2 []) {
    int i, j;
    for (i = j = 0; string[i] != '\0'; ++i) {
        while (string2[j] != '\0' && string[i] != string2[j])
            ++j;
        if (string2[j] == '\0')
            j = 0;
        else if (string[i] == string2[j])
            return i;
    }
    return -1;
}
----------------------------------------

int char_seek (char string [], char string2 []) {
    int j = 0;
    for (int i = 0; string[i] != '\0'; ++i) {
        while (string2[j] != '\0' && string[i] != string2[j]) {
            ++j;
        }
        if (string2[j] == '\0') {
            j = 0;
        }
        else if (string[i] == string2[j]) {
            return i;
        }
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25311371_25313444_14_35
25311371_25320593_1_10
Title: Convert number to comma separated number 
----------------------------------------

void printWithComma (long num) {
    int i, divisor, x;
    char s [8];
    divisor = 100000;
    for (i = 0; i < 7; i++) {
        if (i == 3) {
            s[i] = ',';
            continue;
        }
        if (divisor == 1) {
            s[i] = num % 10 + '0';
            break;
        }
        x = num / divisor;
        num %= divisor;
        s[i] = x + '0';
        divisor = divisor / 10;
    }
    s[7] = '\0';
    printf ("\n%s\n", s);
}
----------------------------------------

void printWithComma (long num) {
    char n [] = "000,000";
    char *p [6] = {n + 6, n + 5, n + 4, n + 2, n + 1, n};
    int i;
    for (i = 0; num && i < 6; ++i, num /= 10) {
        *p[i] += num % 10;
    }
    printf ("\nThe number you entered is       %s\n", n);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25313850_25314198_4_19
25313850_25314607_5_35
Title: C - How do i read all lines of a file 
----------------------------------------

int main (int argc, const char *argv []) {
    {
        FILE *file = fopen ("specification.txt", "r");
        char currentline [100];
        assert (file != NULL);
        while (fgets (currentline, sizeof (currentline), file) != NULL) {
            fprintf (stderr, "got line: %s\n", currentline);
        }
        (void) fclose (file);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp;
    fp = fopen ("specification.txt", "r");
    char **listofdetails;
    int ROWS = 6;
    listofdetails = calloc (ROWS, sizeof (char *));
    int i;
    size_t len;
    ssize_t readed;
    for (i = 0; i < ROWS; i++) {
        if ((readed = getline (&listofdetails[i], &len, fp)) == -1) {
            break;
        }
    }
    for (i = 0; i < ROWS; i++) {
        if (listofdetails[i] == NULL) {
            break;
        }
        printf ("%s\n", listofdetails [i]);
        free (listofdetails [i]);
    }
    fclose (fp);
    free (listofdetails);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2531605_21562792_3_22
2531605_2531750_123_212
Title: How to split a string with a delimiter larger than one single char? 
----------------------------------------

int main () {
    int i = 0, temp = 0, temp1 = 0, temp2 = 0;
    char buff [12] = "123;456;789";
    for (i = 0; buff[i] != ';', i++) {
        temp = temp * 10 + (buff[i] - 48);
    }
    for (i = 0; buff[i] != ';', i++) {
        temp1 = temp1 * 10 + (buff[i] - 48);
    }
    for (i = 0; buff[i], i++) {
        temp2 = temp2 * 10 + (buff[i] - 48);
    }
    printf ("temp=%d temp1=%d temp2=%d", temp, temp1, temp2);
    getch ();
    return 0;
}
----------------------------------------

int main (void) {
    struct {
        const char *input;
        const char *sep;
        char *output [MAX_OUTPUT];
    } tab [] = {{"", "and", {"", NULL,},}, {"and", "and", {"", "", NULL,},}, {"foo", "and", {"foo", NULL,},}, {"foo bar 1 and foo bar 2", " and ", {"foo bar 1", "foo bar 2", NULL,},},};
    const int tab_len = sizeof (tab) / sizeof (tab[0]);
    bool errors;
    errors = false;
    for (int i = 0; i < tab_len; ++i) {
        printf ("test %d\n", i);
        char **output = str_split (tab[i].input, tab[i].sep);
        if (output == NULL) {
            fprintf (stderr, "output is NULL\n");
            errors = true;
            break;
        }
        size_t num_output = str_array_len (output);
        printf ("num_output %lu\n", (unsigned long) num_output);
        size_t num_correct = str_array_len (tab[i].output);
        if (num_output != num_correct) {
            fprintf (stderr, "wrong number of outputs (%lu, not %lu)\n", (unsigned long) num_output, (unsigned long) num_correct);
            errors = true;
        }
        else {
            for (size_t j = 0; j < num_output; ++j) {
                if (strcmp (tab[i].output[j], output[j]) != 0) {
                    fprintf (stderr, "output[%lu] is '%s' not '%s'\n", (unsigned long) j, output [j], tab [i].output [j]);
                    errors = true;
                    break;
                }
            }
        }
        str_array_free (output);
        printf ("\n");
    }
    if (errors)
        return EXIT_FAILURE;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25325588_25326145_5_24
25325588_25327523_5_18
Title: "Splint: ""Value strings[] used before definition"" with dynamic array" 
----------------------------------------

int main () {
    int i, len, max;
    char *str = "hello";
    len = strlen (str) + 1;
    max = 10;
    char strings [max] [len];
    for (i = 0; i < max; i++) {
        strcpy (strings [i], str);
    }
    for (i = 0; i < max; i++) {
        printf ("string[%d] = %s\n", i, strings [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    size_t max_rows = 2;
    char *str = "dummpy";
    char *vec_s = (char *) malloc (max_rows * sizeof (char) * ((strlen (str) * max_rows) + 1));
    for (int i = 0; i < max_rows; i++) {
        strcpy ((vec_s + i), str);
        printf ("vec_s[%d]=%s\n", i, (vec_s + i));
    }
    free (vec_s);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25332302_25333818_6_22
25332302_25333901_1_11
Title: How to print array of element which is store in pointer to an array and this pointer to an array is store in array of pointer? 
----------------------------------------

int main () {
    int i;
    int arr [3] = {1, 2, 3};
    int *ptoa = arr;
    int *aofp [3];
    aofp[0] = ptoa;
    aofp[1] = ptoa + 1;
    aofp[2] = ptoa + 2;
    for (i = 0; i < 3; i++)
        printf ("%d", *aofp[i]);
}
----------------------------------------

int main () {
    int i;
    int arr [3] = {1, 2, 3};
    int *ptoa = arr;
    int *aofp [1];
    aofp[0] = ptoa;
    for (i = 0; i < 3; i++)
        printf ("%d", *aofp[0] + i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25332302_25333818_6_22
25332302_25334489_3_25
Title: How to print array of element which is store in pointer to an array and this pointer to an array is store in array of pointer? 
----------------------------------------

int main () {
    int i;
    int arr [3] = {1, 2, 3};
    int *ptoa = arr;
    int *aofp [3];
    aofp[0] = ptoa;
    aofp[1] = ptoa + 1;
    aofp[2] = ptoa + 2;
    for (i = 0; i < 3; i++)
        printf ("%d", *aofp[i]);
}
----------------------------------------

int main () {
    int i;
    int arr [3] = {1, 2, 3};
    int (*ptoa) [3];
    ptoa = &arr;
    int (*aofp [1]) [3];
    aofp[0] = ptoa;
    for (i = 0; i < 3; i++)
        printf ("%d", (*aofp[0])[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25332302_25333901_1_11
25332302_25334489_3_25
Title: How to print array of element which is store in pointer to an array and this pointer to an array is store in array of pointer? 
----------------------------------------

int main () {
    int i;
    int arr [3] = {1, 2, 3};
    int *ptoa = arr;
    int *aofp [1];
    aofp[0] = ptoa;
    for (i = 0; i < 3; i++)
        printf ("%d", *aofp[0] + i);
}
----------------------------------------

int main () {
    int i;
    int arr [3] = {1, 2, 3};
    int (*ptoa) [3];
    ptoa = &arr;
    int (*aofp [1]) [3];
    aofp[0] = ptoa;
    for (i = 0; i < 3; i++)
        printf ("%d", (*aofp[0])[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25341486_25342903_37_52
25341486_25345374_3_15
Title: Trouble understanding c linked list 
----------------------------------------

Student *add_new (Student *slist) {
    Student *ptemp;
    char name [NAME_SIZE];
    int mark;
    printf ("Adding new entry\nName\t=>");
    scanf ("%s", name);
    printf ("Marks\t=>");
    scanf ("%d", & mark);
    ptemp = malloc (sizeof (*ptemp));
    strcpy (ptemp -> name, name);
    ptemp->mark = mark;
    ptemp->next = slist;
    return ptemp;
}
----------------------------------------

Student *add_new (list curr) {
    list temp = &slist[entry_total];
    printf ("Adding new entry\nName\t=>");
    scanf ("%s", temp -> name);
    printf ("Marks\t=>");
    scanf ("%d", & temp -> mark);
    if (curr != NULL) {
        curr->next = temp;
    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25341486_25342903_63_82
25341486_25345374_17_43
Title: Trouble understanding c linked list 
----------------------------------------

int main () {
    Student *head = NULL;
    int opt;
    do {
        menu ();
        opt = getInput ();
        switch (opt) {
        case ADDNEW :
            if (entry_total < MAX_ENTRY) {
                head = add_new (head);
                entry_total++;
            }
            break;
        case LISTALL :
            printlist (head);
            break;
        }
    }
    while (opt != EXIT);
    return 0;
}
----------------------------------------

int main () {
    list head, curr;
    head = NULL;
    int opt, i, avg, max;
    do {
        menu ();
        opt = getInput ();
        switch (opt) {
        case ADDNEW :
            if (entry_total < MAX_ENTRY) {
                if (entry_total == 0) {
                    head = add_new (head);
                    curr = head;
                }
                else {
                    curr = add_new (curr);
                }
                entry_total++;
            }
            break;
        case LISTALL :
            printlist (head);
            break;
        }
    }
    while (opt != EXIT);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25355820_25356068_1_11
25355820_25359556_29_47
Title: something wrong with my dynamic array 
----------------------------------------

void add (myarray *array, int val) {
    int length = array->length;
    int size = array->size;
    if (size == length) {
        array->length *= 2;
        array->array = (int *) realloc (array->array, sizeof (int) * length);
    }
    array->array[size] = val;
    array->size++;
}
----------------------------------------

void add (myarray *da, int val) {
    int size = da->size;
    int length = da->length;
    int *ra = da->array;
    if (size == length) {
        length *= 2;
        ra = (int *) realloc (da->array, length * sizeof (int));
    }
    if (ra != NULL) {
        da->array = ra;
        da->length = length;
        da->array[size] = val;
        da->size++;
    }
    else {
        puts ("Warning: failed to realloc() extra space, array size unchanged");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25360402_25360702_1_22
25360402_25361091_1_31
Title: Deleting in a linked list having many occurences of a value 
----------------------------------------

void delete (int value, struct link **head) {
    if (!head) {
        printf ("error");
        return;
    }
    while (*head) {
        if ((*head)->data == value) {
            struct link *tmp = *head;
            *head = tmp->next;
            free (tmp);
        }
        else {
            head = &(*head)->next;
        }
    }
}
----------------------------------------

int delete (struct link **head, int value) {
    int success = 0;
    if (head == NULL)
        return success;
    struct link *target = *head;
    struct link *prev = NULL;
    while (target != NULL & target->data != value) {
        prev = target;
        target = target->next;
    }
    success = target != NULL;
    if (success) {
        if (prev == NULL) {
            *head = target->next;
        }
        else {
            prev->next = target->next;
        }
        free (target);
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25363329_25363404_3_13
25363329_25363448_3_17
Title: Code not executing 
----------------------------------------

int main () {
    int i = 4, j = -1, k = 0, w, x, y, z;
    w = i || j || k;
    x = i && j && k;
    y = i || j && k;
    z = i && j || k;
    printf ("w=%d x=%d y=%d z=%d\n", w, x, y, z);
    return 0;
}
----------------------------------------

int main () {
    int i = 4, j = -1, k = 0, w, x, y, z;
    w = i || j || k;
    x = i && j && k;
    y = i || j && k;
    z = i && j || k;
    printf ("w=%d x=%d y=%d z=%d", w, x, y, z);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25389458_25389739_3_25
25389458_25390196_46_60
Title: C Program to Find the Sum of Series 1^4 + 2^4 + 3^4 + … + n^4 
----------------------------------------

int main () {
    int numTerms, power, i;
    int sum = 0;
    printf ("Enter number of terms in the series n: ");
    scanf ("%d", & numTerms);
    printf ("\nEnter power of the series n: ");
    scanf ("%d", & power);
    printf ("\nSum of the series: ");
    for (i = 1; i <= numTerms; ++i) {
        sum += pow (i, power);
        if (i < numTerms) {
            printf ("%d^%d + ", i, power);
        }
        else
            printf ("%d^%d = %d \n", i, power, sum);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n, power, result;
    printf ("Enter number: ");
    scanf ("%d", & n);
    printf ("Enter power:  ");
    scanf ("%d", & power);
    if ((result = fn (n, power)) == 0 && n != 0) {
        fprintf (stderr, "Error computing fn(%d,%d)\n", n, power);
    }
    else {
        printf ("Sum of series: %d\n", result);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25400191_25400308_2_19
25400191_25400388_2_26
Title: Finding Prime numbers from 1 to 300 in C 
----------------------------------------

int main () {
    int i = 1, a = 2;
    while (i <= 300) {
        a = 2;
        while (a < i) {
            if (i % a == 0)
                break;
            else
                printf ("%d\n", i);
            a++;
        }
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1, a = 2, is_prime;
    while (i <= 300) {
        is_prime = 1;
        while (a < i) {
            if (i % a == 0) {
                is_prime = 0;
                break;
            }
            a++;
        }
        if (is_prime)
            printf ("%d\n", i);
        a = 2;
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25403280_25403430_5_13
25403280_25403518_3_18
Title: "Create new files whose name depends on a variable from the program" 
----------------------------------------

int main () {
    FILE *outfiles [X];
    unsigned short i;
    char fn [32];
    for (i = 0; i < X; ++i) {
        sprintf (fn, "outfile_%u", i);
        outfiles[i] = fopen (fn, "w");
    }
}
----------------------------------------

int main () {
    char *textfile;
    int i, X;
    textfile = (char *) malloc (128 * sizeof (char));
    FILE *fptr;
    printf ("Enter the value of X: ");
    scanf ("%d", & X);
    for (i = 1; i <= X; i++) {
        sprintf (textfile, "textfile_%d.txt", i);
        fptr = fopen (textfile, "w");
        fclose (fptr);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25404048_25404173_3_24
25404048_25404410_3_19
Title: How to create a 2d array with different column in C? 
----------------------------------------

int main () {
    const size_t N = 3;
    size_t sizes [3] = {3, 2, 4};
    int * * a = new int * [N];
    a [0] = new int [sizes [0]] {1, 2, 3};
    a [1] = new int [sizes [1]] {2, 3};
    a [2] = new int [sizes [2]] {1, 2, 3, 4};
    for (size_t i = 0; i < N; i++) {
        for (size_t j = 0; j < sizes[i]; j++)
        std :
        : cout << a [i] [j] << ' ';
    std :
        : cout << std : : endl;
    }
    for (size_t i = 0;
    i < N;
    i ++) delete [] a [i];
    delete [] a;
    return 0;
}
----------------------------------------

int main (void) {
    int *array [] = {(int []) {1, 2, 3}, (int []) {2, 3}, (int []) {1, 2, 3, 4}};
    int a_len [] = {3, 2, 4};
    int i, j;
    for (i = 0; i < sizeof (a_len) / sizeof (*a_len); ++i) {
        for (j = 0; j < a_len[i]; ++j) {
            printf ("%d ", array [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25419026_25419295_4_22
25419026_25419391_3_28
Title: How to print every third (or n-th) word from .txt FILE in C? 
----------------------------------------

int main () {
    char str [] = "I want to print every third word from this txt file";
    char *pch;
    int count = 0;
    pch = strtok (str, " ");
    count++;
    while (pch != NULL) {
        if (count % 3 == 0) {
            printf ("%s ", pch);
        }
        pch = strtok (NULL, " ");
        count++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    char buffer [20], arr [5] [20];
    int count = 0, i = 0, j;
    fp = fopen ("abcd", "r");
    if (fp == NULL) {
        printf ("Failed to open the file\n");
        return -1;
    }
    while (fscanf (fp, "%s", buffer) != EOF) {
        count += 1;
        if (count == 3) {
            printf ("%s ", buffer);
            strcpy (arr [i], buffer);
            count = 0;
            i++;
        }
    }
    printf ("\n");
    for (j = 0; j < i; j++)
        printf ("%s\n", arr[j]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25419026_25419295_4_22
25419026_25425686_5_35
Title: How to print every third (or n-th) word from .txt FILE in C? 
----------------------------------------

int main () {
    char str [] = "I want to print every third word from this txt file";
    char *pch;
    int count = 0;
    pch = strtok (str, " ");
    count++;
    while (pch != NULL) {
        if (count % 3 == 0) {
            printf ("%s ", pch);
        }
        pch = strtok (NULL, " ");
        count++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int ch;
    int state;
    unsigned nword, iword, wantword;
    if (argc < 2) {
        exit (EXIT_FAILURE);
    }
    if (sscanf (argv[1], "%u", &nword) < 1) {
        exit (EXIT_FAILURE);
    }
    if (sscanf (argv[2], "%u", &wantword) < 1) {
        exit (EXIT_FAILURE);
    }
    if (wantword >= nword) {
        exit (EXIT_FAILURE);
    }
    for (iword = 0, state = 0;;) {
        ch = getc (stdin);
        if (ch == EOF)
            break;
        switch (state) {
        case 0 :
            if (!isalpha (ch))
                continue;
            state = 1;
            iword++;
            break;
        case 1 :
            if (isalpha (ch))
                break;
            state = 0;
            putc (' ', stdout);
            continue;
        }
        if (iword % nword == wantword)
            putc (ch, stdout);
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25419026_25419391_3_28
25419026_25425686_5_35
Title: How to print every third (or n-th) word from .txt FILE in C? 
----------------------------------------

int main () {
    FILE *fp;
    char buffer [20], arr [5] [20];
    int count = 0, i = 0, j;
    fp = fopen ("abcd", "r");
    if (fp == NULL) {
        printf ("Failed to open the file\n");
        return -1;
    }
    while (fscanf (fp, "%s", buffer) != EOF) {
        count += 1;
        if (count == 3) {
            printf ("%s ", buffer);
            strcpy (arr [i], buffer);
            count = 0;
            i++;
        }
    }
    printf ("\n");
    for (j = 0; j < i; j++)
        printf ("%s\n", arr[j]);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int ch;
    int state;
    unsigned nword, iword, wantword;
    if (argc < 2) {
        exit (EXIT_FAILURE);
    }
    if (sscanf (argv[1], "%u", &nword) < 1) {
        exit (EXIT_FAILURE);
    }
    if (sscanf (argv[2], "%u", &wantword) < 1) {
        exit (EXIT_FAILURE);
    }
    if (wantword >= nword) {
        exit (EXIT_FAILURE);
    }
    for (iword = 0, state = 0;;) {
        ch = getc (stdin);
        if (ch == EOF)
            break;
        switch (state) {
        case 0 :
            if (!isalpha (ch))
                continue;
            state = 1;
            iword++;
            break;
        case 1 :
            if (isalpha (ch))
                break;
            state = 0;
            putc (' ', stdout);
            continue;
        }
        if (iword % nword == wantword)
            putc (ch, stdout);
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25438252_25438370_12_25
25438252_25438565_27_52
Title: c; converting 2 bytes to short and vice versa 
----------------------------------------

int main (int argc, const char *argv []) {
    char a [4] = "abcd";
    char b [4] = "1234";
    short c [5];
    c[4] = 0;
    union MyShort d;
    for (int i = 0; i < 4; i++) {
        d.byte1 = a[i];
        d.byte2 = b[i];
        c[i] = d.short_value;
    }
    printf ("%s\n", (char *) c);
    return 0;
}
----------------------------------------

int main (void) {
    size_t n = 2048;
    char *bytes1 = malloc (sizeof *bytes1 * n);
    Initialize (bytes, n);
    short *short_ints = malloc (sizeof *short_ints * n / 2);
    charpair_short (short_ints, bytes1, n);
    char *bytes2 = malloc (sizeof *bytes2 * n);
    short_charpair (bytes2, short_ints, n);
    compare (bytes1, bytes2, n);
    free (bytes1);
    free (short_ints);
    free (bytes2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25438252_25438370_12_25
25438252_25438965_52_61
Title: c; converting 2 bytes to short and vice versa 
----------------------------------------

int main (int argc, const char *argv []) {
    char a [4] = "abcd";
    char b [4] = "1234";
    short c [5];
    c[4] = 0;
    union MyShort d;
    for (int i = 0; i < 4; i++) {
        d.byte1 = a[i];
        d.byte2 = b[i];
        c[i] = d.short_value;
    }
    printf ("%s\n", (char *) c);
    return 0;
}
----------------------------------------

int main () {
    printf ("Calling test1 ...\n");
    test1 ();
    printf ("Done\n");
    printf ("Calling test2 ...\n");
    test2 ();
    printf ("Done\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25438252_25438565_27_52
25438252_25438965_52_61
Title: c; converting 2 bytes to short and vice versa 
----------------------------------------

int main (void) {
    size_t n = 2048;
    char *bytes1 = malloc (sizeof *bytes1 * n);
    Initialize (bytes, n);
    short *short_ints = malloc (sizeof *short_ints * n / 2);
    charpair_short (short_ints, bytes1, n);
    char *bytes2 = malloc (sizeof *bytes2 * n);
    short_charpair (bytes2, short_ints, n);
    compare (bytes1, bytes2, n);
    free (bytes1);
    free (short_ints);
    free (bytes2);
    return 0;
}
----------------------------------------

int main () {
    printf ("Calling test1 ...\n");
    test1 ();
    printf ("Done\n");
    printf ("Calling test2 ...\n");
    test2 ();
    printf ("Done\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25462692_25462727_5_25
25462692_25462738_6_21
Title: how to print 5 unique strings from array of 10 strings 
----------------------------------------

int main () {
    char arr [10] [10] = {"abc", "def", "ghi", "klm", "nop", "qrs", "tuv", "wxy", "zab", "cde"};
    int i = 0, j = 0;
    int done [10] = {0};
    srand (time (0));
    for (i = 0; i < 5; ++i) {
        do {
            j = rand () % 10;
        }
        while (done[j] == 1);
        done[j] = 1;
        printf ("%s\n", arr [j]);
    }
    return 0;
}
----------------------------------------

int main () {
    char arr [10] [10] = {"abc", "def", "ghi", "klm", "nop", "qrs", "tuv", "wxy", "zab", "cde"};
    int found [10] = {0};
    int i = 0, j = 0;
    srand (time (NULL));
    for (i = 0; i < 5; i++) {
        j = rand () % 10;
        while (1) {
            if (!found[j])
                break;
            j = rand () % 10;
        }
        found[j] = 1;
        printf ("%s\n", arr [j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25466459_25466580_4_18
25466459_25466727_1_11
Title: function in K&R example returning wrong string length? 
----------------------------------------

int trim (char s []) {
    int initial_strlen = strlen (s);
    int n;
    for (n = initial_strlen - 1; n >= 0; n--) {
        if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
            break;
    }
    s[n + 1] = '\0';
    printf ("s=%s, initial strlen=%d, current strlen=%d, n=%d\n", s, initial_strlen, strlen (s), n);
    return n + 1;
}
----------------------------------------

int trim (char s []) {
    int n;
    for (n = strlen (s); n > 0; n--) {
        if (s[n - 1] != ' ' && s[n - 1] != '\t' && s[n - 1] != '\n') {
            break;
        }
    }
    s[n] = '\0';
    return n;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25505633_25506190_21_37
25505633_25507091_71_96
Title: "How to word-wrap using specific delimiters without dynamic allocation" 
----------------------------------------

int main (void) {
    char input [] = "some randrom data; more.";
    size_t input_length = strlen (input);
    ssize_t delimiter_positions [input_length];
    for (size_t s = 0; s < input_length; ++s) {
        delimiter_positions[s] = -1;
    }
    find_delimiter_positions (input, DELIMITERS, delimiter_positions);
    for (size_t s = 0; -1 != delimiter_positions[s]; ++s) {
    }
}
----------------------------------------

int main () {
    const char *text = "I have a program that displays UTF-8 encoded strings " "with a size limitation (say MAX_LEN). Whenever I get a string with a " "length > MAX_LEN, I want to find out where I could split it so it " "would be printed gracefully.";
    substr_t lines [100];
    const uint32_t max_num_lines = sizeof (lines) / sizeof (lines[0]);
    const int num_lines = wrap (text, 48, lines, max_num_lines);
    if (num_lines < 0) {
        fprintf (stderr, "error: can't split into %d lines\n", max_num_lines);
        return EXIT_FAILURE;
    }
    for (int i = 0; i < num_lines; i++) {
        FILE *stream = stdout;
        const ptrdiff_t line_length = lines[i].end - lines[i].begin;
        write (fileno (stream), lines [i].begin, line_length);
        fputc ('\n', stream);
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25518196_25518373_12_23
25518196_25518613_1_24
Title: Is the following C function thread-safe? 
----------------------------------------

int func (char ctr) {
    int c = get_sequence ();
    if (c >= sizeof (arr)) {
        printf ("\n No storage\n");
        return -1;
    }
    arr[c] = ctr;
    return c;
}
----------------------------------------

bool func (char ctr) {
    bool result;
    if (count >= sizeof (arr)) {
        result = FAILURE;
    }
    else {
        arr[count] = ctr;
        count++;
        result = SUCCESS;
    }
    if (result == FAILURE)
        printf ("\n No storage\n");
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25518196_25518373_12_23
25518196_25519890_1_13
Title: Is the following C function thread-safe? 
----------------------------------------

int func (char ctr) {
    int c = get_sequence ();
    if (c >= sizeof (arr)) {
        printf ("\n No storage\n");
        return -1;
    }
    arr[c] = ctr;
    return c;
}
----------------------------------------

int func (char ctr) {
    for (;;) {
        int c = count;
        if (c >= sizeof (arr)) {
            printf ("\n No storage\n");
            return -1;
        }
        if (CSET (&count, c, c +1)) {
            arr[c] = ctr;
            return c;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25518196_25518613_1_24
25518196_25519890_1_13
Title: Is the following C function thread-safe? 
----------------------------------------

bool func (char ctr) {
    bool result;
    if (count >= sizeof (arr)) {
        result = FAILURE;
    }
    else {
        arr[count] = ctr;
        count++;
        result = SUCCESS;
    }
    if (result == FAILURE)
        printf ("\n No storage\n");
    return result;
}
----------------------------------------

int func (char ctr) {
    for (;;) {
        int c = count;
        if (c >= sizeof (arr)) {
            printf ("\n No storage\n");
            return -1;
        }
        if (CSET (&count, c, c +1)) {
            arr[c] = ctr;
            return c;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25523084_25523224_1_16
25523084_25523426_5_24
Title: "solving utopian tree  what is wrong with code?" 
----------------------------------------

int main () {
    int test, y [10], i, j, newvalue = 0;
    scanf ("%d", & test);
    for (i = 1; i <= test; i++) {
        scanf ("%d\n", & y [i]);
        if (y[i] % 2 == 0)
            newvalue = newvalue + 1;
        else
            newvalue = newvalue * 2;
        printf ("%d\n", newvalue);
    }
    return 0;
}
----------------------------------------

int main () {
    int test, y [10], i, j;
    scanf ("%d", & test);
    for (i = 1; i <= test; i++) {
        int newvalue = 0;
        scanf ("%d\n", & y [i]);
        for (j = 0; j <= y[i]; j++) {
            if (j % 2 == 0)
                newvalue = newvalue + 1;
            else
                newvalue = newvalue * 2;
        }
        printf ("%d\n", newvalue);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25523084_25523224_1_16
25523084_25523455_3_27
Title: "solving utopian tree  what is wrong with code?" 
----------------------------------------

int main () {
    int test, y [10], i, j, newvalue = 0;
    scanf ("%d", & test);
    for (i = 1; i <= test; i++) {
        scanf ("%d\n", & y [i]);
        if (y[i] % 2 == 0)
            newvalue = newvalue + 1;
        else
            newvalue = newvalue * 2;
        printf ("%d\n", newvalue);
    }
    return 0;
}
----------------------------------------

int main () {
    int num, i, max = 0, newvalue = 1;
    scanf ("%d", & num);
    int in [num];
    for (i = 0; i < num; ++i) {
        scanf ("%d", & in [i]);
        if (max < in[i])
            max = in[i];
    }
    int seq [max];
    for (i = 1; i <= max; ++i) {
        if (i % 2 == 0)
            newvalue = newvalue + 1;
        else
            newvalue = newvalue * 2;
        seq[i - 1] = newvalue;
    }
    for (i = 0; i < num; ++i)
        printf ("%d ", seq[in[i] - 1]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25523084_25523426_5_24
25523084_25523455_3_27
Title: "solving utopian tree  what is wrong with code?" 
----------------------------------------

int main () {
    int test, y [10], i, j;
    scanf ("%d", & test);
    for (i = 1; i <= test; i++) {
        int newvalue = 0;
        scanf ("%d\n", & y [i]);
        for (j = 0; j <= y[i]; j++) {
            if (j % 2 == 0)
                newvalue = newvalue + 1;
            else
                newvalue = newvalue * 2;
        }
        printf ("%d\n", newvalue);
    }
    return 0;
}
----------------------------------------

int main () {
    int num, i, max = 0, newvalue = 1;
    scanf ("%d", & num);
    int in [num];
    for (i = 0; i < num; ++i) {
        scanf ("%d", & in [i]);
        if (max < in[i])
            max = in[i];
    }
    int seq [max];
    for (i = 1; i <= max; ++i) {
        if (i % 2 == 0)
            newvalue = newvalue + 1;
        else
            newvalue = newvalue * 2;
        seq[i - 1] = newvalue;
    }
    for (i = 0; i < num; ++i)
        printf ("%d ", seq[in[i] - 1]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25535050_25535276_6_24
25535050_25535294_1_20
Title: how can we write a program that can allow us to input as many string as we want? 
----------------------------------------

int main () {
    int n;
    char str [MAX_STRING_COUNT] [MAX_STRING_LENGTH];
    int ret = scanf ("%d\n", &n);
    if (ret != 1 || n < 0 || n > MAX_STRING_COUNT) {
        puts ("Wrong number of strings!\n");
        return 1;
    }
    for (int i = 0; i < n; i++) {
        ret = fgets (str[i], MAX_STRING_LENGTH, stdin);
        if (ret == NULL) {
            puts ("Error reading string\n");
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n;
std :
    : string s;
    cout << "How many strings do you want to enter?" << std : : endl;
    cin >> n;
    for (int x = 0; x < n; x++) {
        cout << "Enter a string:" << std : : endl;
        cin >> s;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25535050_25535276_6_24
25535050_25537409_3_16
Title: how can we write a program that can allow us to input as many string as we want? 
----------------------------------------

int main () {
    int n;
    char str [MAX_STRING_COUNT] [MAX_STRING_LENGTH];
    int ret = scanf ("%d\n", &n);
    if (ret != 1 || n < 0 || n > MAX_STRING_COUNT) {
        puts ("Wrong number of strings!\n");
        return 1;
    }
    for (int i = 0; i < n; i++) {
        ret = fgets (str[i], MAX_STRING_LENGTH, stdin);
        if (ret == NULL) {
            puts ("Error reading string\n");
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    char str [n] [1000];
    for (int i = 0; i < n; i++) {
        scanf ("%999s", str [i]);
    }
    for (int i = 0; i < n; i++) {
        printf ("%s\n", str [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25535050_25535294_1_20
25535050_25537409_3_16
Title: how can we write a program that can allow us to input as many string as we want? 
----------------------------------------

int main () {
    int n;
std :
    : string s;
    cout << "How many strings do you want to enter?" << std : : endl;
    cin >> n;
    for (int x = 0; x < n; x++) {
        cout << "Enter a string:" << std : : endl;
        cin >> s;
    }
    return 0;
}
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    char str [n] [1000];
    for (int i = 0; i < n; i++) {
        scanf ("%999s", str [i]);
    }
    for (int i = 0; i < n; i++) {
        printf ("%s\n", str [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25539795_25539942_4_20
25539795_25540201_5_64
Title: How to find Min & Max from .text file 
----------------------------------------

int main () {
    FILE *fp = fopen ("loader.txt", "r");
    unsigned short *_min = malloc (1), *_max = malloc (1);
    unsigned short i = 0;
    char curLine [512];
    while (fgets (curLine, 512, fp)) {
        int scanned = sscanf (curLine, ",%i", &_min[i]);
        printf ("\nMinimum: %i\n", _min [i]);
        i++;
        realloc (_min, scanned);
    }
    fclose (fp);
    free (_min);
    free (_max);
    return 1;
}
----------------------------------------

int main () {
    FILE *file;
    char text [1000];
    char fName [20];
    char lName [20];
    char *token;
    int q1, q2, q3, q4, mid, mid2, final, finalgrade;
    int q1max = 0, q1min = 100;
    double ave, num = 0, min = 0, max = 0;
    file = fopen ("Input.txt", "r");
    while (fgets (text, sizeof (text), file) != NULL) {
        token = strtok (text, " ");
        strcpy (fName, token);
        token = strtok (NULL, ",");
        strcpy (lName, token);
        token = strtok (NULL, ",");
        q1 = atoi (token);
        token = strtok (NULL, ",");
        q2 = atoi (token);
        token = strtok (NULL, ",");
        q3 = atoi (token);
        token = strtok (NULL, ",");
        q4 = atoi (token);
        token = strtok (NULL, ",");
        mid = atoi (token);
        token = strtok (NULL, ",");
        mid2 = atoi (token);
        token = strtok (NULL, ",");
        final = atoi (token);
        if (q1 > q1max)
            q1max = q1;
        if (q1 < q1min)
            q1min = q1;
        printf ("%s %s, %d, %d, %d, %d, %d, %d, %d\n", fName, lName, q1, q2, q3, q4, mid, mid2, final);
        ave = (q1 + q2 + q3 + q4 + mid + mid2 + final) / 7;
        finalgrade = (q1 * .10 + q2 * .10 + q3 * .10 + q4 * .10 + mid * .20 + mid2 * .20 + final * .25);
        printf ("Average:\t%.2lf\n", ave);
    }
    printf ("Minimum for q1:\t %d\n", q1min);
    printf ("Maximum for q1:\t %d\n", q1max);
    printf ("\n");
    fclose (file);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25564864_25564973_4_19
25564864_25564989_4_14
Title: trouble with opening file for read with fopen 
----------------------------------------

int main () {
    FILE *test;
    test = fopen ("test.txt", "r");
    if (test == NULL) {
        printf ("didnt open");
    }
    else {
        printf ("opened!");
        fclose (test);
    }
}
----------------------------------------

int main () {
    FILE *test = fopen ("test.txt", "r");
    if (test == NULL)
        printf ("didnt open");
    else {
        printf ("opened!");
        fclose (test);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25588168_25588240_1_13
25588168_25588243_1_15
Title: How can I fix my code for clearing nodes in a linked structure 
----------------------------------------

void freeThis (This *p) {
    Nodes *tmp;
    if (!p)
        return;
    while (*p != NULL) {
        tmp = *p;
        *p = (*p)->next;
        freeNodes (tmp);
    }
}
----------------------------------------

void freeThis (This *p) {
    if (p != 0) {
        Nodes *tmp = *p;
        *p = NULL;
        while (tmp != NULL) {
            Nodes *next = tmp->next;
            freeNodes (tmp);
            tmp = next;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25589830_26229887_1_17
25589830_51165011_1_21
Title: "C : Create a function to diplay number just with ""write"" function" 
----------------------------------------

void ft_putnbr (int nbr) {
    if (nbr < 0) {
        ft_putchar ('-');
        ft_putnbr (- nbr);
    }
    else if (nbr > 9) {
        ft_putnbr (nbr / 10);
        ft_putnbr (nbr % 10);
    }
    else {
        ft_putchar (nbr + '0');
    }
}
----------------------------------------

void ft_putnbr (int nb) {
    if (nb == -2147483648) {
        ft_putchar ('-');
        ft_putchar ('2');
        ft_putnbr (147483648);
    }
    else if (nb < 0) {
        ft_putchar ('-');
        ft_putnbr (- nb);
    }
    else if (nb > 9) {
        ft_putnbr (nb / 10);
        ft_putnbr (nb % 10);
    }
    else
        ft_putchar (nb +'0');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25593754_25594468_3_20
25593754_25594507_3_28
Title: Code seems correct but the program hangs after printing the first row of the array 
----------------------------------------

int main (void) {
    int m [4] [4];
    int *p [4] = {m[0], m[1], m[2], m[3]};
    int **a = p;
    int count = 1;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            *(*(a + i) + j) = count++;
            printf ("%d\t", * (* (a + i) + j));
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main () {
    int **a;
    int i, j;
    int count = 1;
    a = malloc (4 * sizeof (int *));
    for (i = 0; i < 4; i++) {
        a[i] = malloc (4 * sizeof (int));
        for (j = 0; j < 4; j++) {
            *(*(a + i) + j) = count;
            count += 1;
            printf ("%d\t", * (* (a + i) + j));
        }
        printf ("\n");
    }
    for (i = 0; i < 4; i++) {
        free (a [i]);
    }
    free (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25593754_25594468_3_20
25593754_25594793_1_10
Title: Code seems correct but the program hangs after printing the first row of the array 
----------------------------------------

int main (void) {
    int m [4] [4];
    int *p [4] = {m[0], m[1], m[2], m[3]};
    int **a = p;
    int count = 1;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            *(*(a + i) + j) = count++;
            printf ("%d\t", * (* (a + i) + j));
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main () {
    int n = 4, count = 1;
    int (*matrix) [n] = malloc (n * sizeof (*matrix));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = count++;
        }
    }
    free (matrix);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25593754_25594507_3_28
25593754_25594793_1_10
Title: Code seems correct but the program hangs after printing the first row of the array 
----------------------------------------

int main () {
    int **a;
    int i, j;
    int count = 1;
    a = malloc (4 * sizeof (int *));
    for (i = 0; i < 4; i++) {
        a[i] = malloc (4 * sizeof (int));
        for (j = 0; j < 4; j++) {
            *(*(a + i) + j) = count;
            count += 1;
            printf ("%d\t", * (* (a + i) + j));
        }
        printf ("\n");
    }
    for (i = 0; i < 4; i++) {
        free (a [i]);
    }
    free (a);
    return 0;
}
----------------------------------------

int main () {
    int n = 4, count = 1;
    int (*matrix) [n] = malloc (n * sizeof (*matrix));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = count++;
        }
    }
    free (matrix);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25593838_25593918_5_35
25593838_25605302_5_27
Title: Splitting a string from fputs 
----------------------------------------

int main () {
    FILE *fp;
    char str [60];
    char data [50];
    char *pch;
    fp = fopen ("DATAtest.txt", "r");
    if (fp == NULL) {
        perror ("Error opening file");
        return (-1);
    }
    if (fgets (str, 60, fp) != NULL) {
    }
    if (fgets (str, 60, fp) != NULL) {
        puts (str);
        printf ("Splitting string \"%s\" into tokens:\n", str);
        for (pch = strtok (str, " ,.-"); pch != NULL; pch = strtok (NULL, " ,.-")) {
            puts (pch);
        }
        fclose (fp);
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    char str [60] = " 0 0 128 0 0 0 0 0 0 0;";
    char *data [50];
    char *pch;
    const char *delimiter = " ,.-;";
    int i, cnt = 0;
    printf ("Splitting string \"%s\" into tokens:\n", str);
    pch = strtok (str, delimiter);
    while (pch != NULL) {
        data[cnt++] = strdup (pch);
        pch = strtok (NULL, delimiter);
    }
    for (i = 0; i < cnt; ++i) {
        printf ("%s\n", data [i]);
        free (data [i]);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25593838_25594240_4_36
25593838_25605302_5_27
Title: Splitting a string from fputs 
----------------------------------------

int main () {
    FILE *fp;
    char str [60];
    char data [50];
    char *pch;
    fp = fopen ("DATAtest.txt", "r");
    if (fp == NULL) {
        perror ("Error opening file");
        return (-1);
    }
    if (fgets (str, 60, fp) != NULL) {
    }
    if (fgets (str, 60, fp) != NULL) {
        puts (str);
        str[strlen (str) - 1] = '\0';
        printf ("Splitting string \"%s\" into tokens:\n", str);
        pch = strtok (str, "\" ,.-;");
        while (pch != NULL) {
            printf ("%s\n", pch);
            pch = strtok (NULL, "\" ,.-;");
        }
    }
    fclose (fp);
    return (0);
}
----------------------------------------

int main () {
    FILE *fp;
    char str [60] = " 0 0 128 0 0 0 0 0 0 0;";
    char *data [50];
    char *pch;
    const char *delimiter = " ,.-;";
    int i, cnt = 0;
    printf ("Splitting string \"%s\" into tokens:\n", str);
    pch = strtok (str, delimiter);
    while (pch != NULL) {
        data[cnt++] = strdup (pch);
        pch = strtok (NULL, delimiter);
    }
    for (i = 0; i < cnt; ++i) {
        printf ("%s\n", data [i]);
        free (data [i]);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25595208_25595350_10_24
25595208_25595488_4_28
Title: replacing letters with numbers using C++ 
----------------------------------------

int main () {
    char ch = 'g';
    char alp [26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    string enc [26] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"};
    for (int i = 0; i <= 25; i++) {
        if (ch == alp[i]) {
            cout << enc[i];
        }
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    size_t N = 26;
    char ch = 'g';
    const char alp [N] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    const char *enc [N] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"};
    size_t i = 0;
    while (i < N && ch != alp[i])
        i++;
    if (i != N)
    std :
    : cout << enc [i] << std : : endl;
std :
    : system ("PAUSE");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25595208_25595350_10_24
25595208_25595648_6_34
Title: replacing letters with numbers using C++ 
----------------------------------------

int main () {
    char ch = 'g';
    char alp [26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    string enc [26] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"};
    for (int i = 0; i <= 25; i++) {
        if (ch == alp[i]) {
            cout << enc[i];
        }
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    char ch = 'b';
    char alp [26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    string enc [26] = {"00", "01", "02"};
    map < char, string > valueDecoderMap;
    for (int i = 0; i < (sizeof (alp)); i++) {
        valueDecoderMap[alp[i]] = enc[i];
    }
    map < char, string > : : iterator mapIterator;
    mapIterator = valueDecoderMap.find (ch);
    if (mapIterator != valueDecoderMap.end ()) {
        cout << "Key = " << mapIterator->first << " Value = " << mapIterator->second << endl;
    }
    else {
        cout << "No encoding present for " << ch << endl;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25595208_25595350_10_24
25595208_25595994_3_10
Title: replacing letters with numbers using C++ 
----------------------------------------

int main () {
    char ch = 'g';
    char alp [26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    string enc [26] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"};
    for (int i = 0; i <= 25; i++) {
        if (ch == alp[i]) {
            cout << enc[i];
        }
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    char input = std : : cin.get () - 'a';
    if (input < 9)
    std :
    : cout << 0;
std :
    : cout << int (input) << "\n\nPress Enter to exit program. ";
std :
    : cin.sync ();
std :
    : cin.ignore (std : : numeric_limits < streamsize > : : max (), '\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25595208_25595488_4_28
25595208_25595648_6_34
Title: replacing letters with numbers using C++ 
----------------------------------------

int main () {
    size_t N = 26;
    char ch = 'g';
    const char alp [N] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    const char *enc [N] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"};
    size_t i = 0;
    while (i < N && ch != alp[i])
        i++;
    if (i != N)
    std :
    : cout << enc [i] << std : : endl;
std :
    : system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    char ch = 'b';
    char alp [26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    string enc [26] = {"00", "01", "02"};
    map < char, string > valueDecoderMap;
    for (int i = 0; i < (sizeof (alp)); i++) {
        valueDecoderMap[alp[i]] = enc[i];
    }
    map < char, string > : : iterator mapIterator;
    mapIterator = valueDecoderMap.find (ch);
    if (mapIterator != valueDecoderMap.end ()) {
        cout << "Key = " << mapIterator->first << " Value = " << mapIterator->second << endl;
    }
    else {
        cout << "No encoding present for " << ch << endl;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25595208_25595488_4_28
25595208_25595994_3_10
Title: replacing letters with numbers using C++ 
----------------------------------------

int main () {
    size_t N = 26;
    char ch = 'g';
    const char alp [N] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    const char *enc [N] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"};
    size_t i = 0;
    while (i < N && ch != alp[i])
        i++;
    if (i != N)
    std :
    : cout << enc [i] << std : : endl;
std :
    : system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    char input = std : : cin.get () - 'a';
    if (input < 9)
    std :
    : cout << 0;
std :
    : cout << int (input) << "\n\nPress Enter to exit program. ";
std :
    : cin.sync ();
std :
    : cin.ignore (std : : numeric_limits < streamsize > : : max (), '\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25595208_25595648_6_34
25595208_25595994_3_10
Title: replacing letters with numbers using C++ 
----------------------------------------

int main () {
    char ch = 'b';
    char alp [26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    string enc [26] = {"00", "01", "02"};
    map < char, string > valueDecoderMap;
    for (int i = 0; i < (sizeof (alp)); i++) {
        valueDecoderMap[alp[i]] = enc[i];
    }
    map < char, string > : : iterator mapIterator;
    mapIterator = valueDecoderMap.find (ch);
    if (mapIterator != valueDecoderMap.end ()) {
        cout << "Key = " << mapIterator->first << " Value = " << mapIterator->second << endl;
    }
    else {
        cout << "No encoding present for " << ch << endl;
    }
    return 0;
}
----------------------------------------

int main () {
    char input = std : : cin.get () - 'a';
    if (input < 9)
    std :
    : cout << 0;
std :
    : cout << int (input) << "\n\nPress Enter to exit program. ";
std :
    : cin.sync ();
std :
    : cin.ignore (std : : numeric_limits < streamsize > : : max (), '\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25600370_25600541_14_31
25600370_25600604_2_16
Title: Data Validation in C when the user inputs an incorrect value to avoid program crash 
----------------------------------------

int main (void) {
    int i;
    char buffer [BUFSIZ];
    printf ("Enter a number: ");
    if (fgets (buffer, sizeof buffer, stdin) != NULL) {
        buffer[strlen (buffer) - 1] = '\0';
        if (validate (buffer) == 0) {
            i = atoi (buffer);
            printf ("%d\n", i);
        }
        else
            printf ("Error: Input validation\n");
    }
    else
        printf ("Error reading input\n");
    return 0;
}
----------------------------------------

int main () {
    int num;
    printf ("Enter the number\n");
    if ((scanf ("%d", &num)) == 1) {
        printf (": %d\n", num);
    }
    else
        printf ("Please recheck your input!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25610826_25610885_2_19
25610826_25610898_3_21
Title: how to create an array from one line of console input in C? 
----------------------------------------

void main () {
    int myArray [3] [5];
    int i;
    for (i = 0; i < 3; i++) {
        printf ("Enter five integer values: ");
        scanf ("%d %d %d %d %d", & myArray [i] [0], & myArray [i] [1], & myArray [i] [2], & myArray [i] [3], & myArray [i] [4]);
    }
    for (i = 0; i < 3; i++) {
        printf ("%d\t %d\t %d\t %d\t %d\t\n", myArray [i] [0], myArray [i] [1], myArray [i] [2], myArray [i] [3], myArray [i] [4]);
    }
}
----------------------------------------

int main (void) {
    int i;
    int x [5];
    printf ("Enter The Numbers: ");
    for (i = 0; i < 5; i++) {
        scanf ("%1d", & x [i]);
    }
    for (i = 0; i < 5; i++) {
        printf ("%d\n", x [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25635616_25635757_4_30
25635616_25636121_5_18
Title: How to assign 2-d arrays' to one another? 
----------------------------------------

int main (const int argc, char * const argv []) {
    char block [4] [256] = {0};
    char sentence [256] = "Bob walked his dog";
    int word_start = 0, word_end = 0, current_word = 0;
    for (int x = 0; x < strlen (sentence) + 1; x++) {
        if (sentence[x] == ' ' || sentence[x] == '\0') {
            word_end = x;
            int y, z;
            for (y = 0, z = word_start; z < word_end; y++, z++) {
                block[current_word][y] = sentence[z];
            }
            word_start = x + 1;
            current_word++;
        }
    }
    for (int x = 0; x < 4; x++) {
        printf ("%s\n", block [x]);
    }
}
----------------------------------------

int main () {
    char block [4] [256] = {0};
    char sentence [] = "Bob walked his dog";
std :
    : istringstream sstrm (sentence);
    int curWord = 0;
std :
    : string s;
    while (sstrm >> s) {
        memcpy (& block [curWord] [0], s.c_str (), s.size ());
        ++curWord;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25687694_25688657_2_24
25687694_25688917_1_21
Title: Exceptions in c programming language 
----------------------------------------

int main (void) {
    char ch;
    int order;
    char *info;
    while ((ch = getchar ()) != '\n') {
        printf ("%c", ch);
        if (ch >= 'a' && ch <= 'z')
            ch = (ch - 'a' + 'A');
        if (ch >= 'A' && ch <= 'Z')
            order = ch - 'A' + 1;
        else
            order = -1;
        if (order != -1)
            info = "is a letter";
        else
            info = "is not a letter";
        printf (" %16s: %4d \n", info, order);
    }
}
----------------------------------------

int main (void) {
    char ch;
    int order;
    printf ("Enter letters and it will tell you the location in the alphabet.\n");
    while ((ch = getchar ()) != EOF) {
        printf ("%c", ch);
        if (ch >= 'A' && ch <= 'Z') {
            order = ch - 'A' + 1;
            printf (" %d \n", order);
        }
        else if (ch >= 'a' && ch <= 'z') {
            order = ch - 'a' + 1;
            printf (" %d \n", order);
        }
        else if (ch == '\n') {
        }
        else {
            printf (" -1 \n");
        }
    }
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25691729_25691979_1_24
25691729_25751108_25_70
Title: how do I assign values from text file to a structure of arrays in C? 
----------------------------------------

int main () {
    int i = 0;
    struct candidates electionCandidate [7] = {0};
    FILE *file = fopen ("elections.txt", "r");
    for (i = 0; i < 7; i++) {
        char *res = fgets (electionCandidate[i].name, 100, file);
        printf ("%s\n", res);
    }
    system ("pause");
    return 0;
}
----------------------------------------

int main (void) {
    struct candidate electionCandidate [MAX_CANDIDATES];
    char buffer [4096];
    size_t i;
    for (i = 0; fgets (buffer, sizeof (buffer), stdin) != 0; i++) {
        if (strlen (buffer) < 2)
            break;
        if (i >= MAX_CANDIDATES) {
            fprintf (stderr, "Too many candidates: %s", buffer);
            return 1;
        }
        size_t len = strlen (buffer);
        if (len >= sizeof (electionCandidate[i].name)) {
            fprintf (stderr, "Candidate name too long: %s", buffer);
            return 1;
        }
        memmove (electionCandidate [i].name, buffer, len - 1);
        electionCandidate[i].name[len] = '\0';
        electionCandidate[i].votes = 0;
    }
    size_t n_cand = i;
    int spoiled = 0;
    unsigned votefor;
    while (scanf ("%u", &votefor) == 1) {
        if (votefor == 0 || votefor > n_cand)
            spoiled++;
        else
            electionCandidate[votefor - 1].votes++;
    }
    qsort (electionCandidate, n_cand, sizeof (electionCandidate [0]), vote_cmp);
    for (i = 0; i < n_cand; i++)
        printf ("%20s: %3d\n", electionCandidate[i].name, electionCandidate[i].votes);
    putchar ('\n');
    printf ("%20s: %3d\n", "Spoiled votes", spoiled);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25696466_25696491_4_45
25696466_25702903_6_51
Title: Populating 2d array of ints from string in C 
----------------------------------------

int main (void) {
    char input [] = \ "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 " \ "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 " \ "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 " \ "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 " \ "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 " \ "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 " \ "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 " \ "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 " \ "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 " \ "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 " \ "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 " \ "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 " \ "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 " \ "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 " \ "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 " \ "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 " \ "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 " \ "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 " \ "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 " \ "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
    int ii, jj;
    int grid [20] [20];
    char *s = strtok (input, " ");
    for (ii = 0; ii < 20; ii++) {
        for (jj = 0; jj < 20; jj++) {
            sscanf (s, "%d", & grid [ii] [jj]);
            s = strtok (NULL, " ");
        }
    }
    for (ii = 0; ii < 20; ii++) {
        for (jj = 0; jj < 20; jj++) {
            printf ("%02d ", grid [ii] [jj]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *s = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 " "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 " "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 " "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 " "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 " "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 " "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 " "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 " "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 " "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 " "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 " "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 " "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 " "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 " "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 " "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 " "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 " "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 " "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 " "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 ";
    int a [N] [N] = {{0}};
    int *p = (int *) a;
    const char *nptr = NULL;
    char *endptr = s;
    for (size_t i = 0; i < N * N && nptr != endptr; i++) {
        int x;
        nptr = endptr;
        x = (int) strtol (nptr, &endptr, 10);
        if (nptr != endptr)
            p[i] = x;
    }
    for (size_t i = 0; i < N; i++) {
        for (size_t j = 0; j < N; j++)
            printf ("%3d", a[i][j]);
        puts ("");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25696466_25696491_4_45
25696466_25705605_13_46
Title: Populating 2d array of ints from string in C 
----------------------------------------

int main (void) {
    char input [] = \ "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 " \ "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 " \ "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 " \ "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 " \ "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 " \ "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 " \ "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 " \ "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 " \ "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 " \ "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 " \ "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 " \ "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 " \ "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 " \ "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 " \ "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 " \ "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 " \ "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 " \ "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 " \ "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 " \ "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
    int ii, jj;
    int grid [20] [20];
    char *s = strtok (input, " ");
    for (ii = 0; ii < 20; ii++) {
        for (jj = 0; jj < 20; jj++) {
            sscanf (s, "%d", & grid [ii] [jj]);
            s = strtok (NULL, " ");
        }
    }
    for (ii = 0; ii < 20; ii++) {
        for (jj = 0; jj < 20; jj++) {
            printf ("%02d ", grid [ii] [jj]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    const char *numbers = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 " "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 " "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 " "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 " "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 " "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 " "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 " "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 " "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 " "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 " "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 " "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 " "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 " "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 " "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 " "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 " "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 " "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 " "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 " "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
    const char *p = numbers;
    int grid [20] [20];
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 20; j++) {
            grid[i][j] = populate (&p);
            printf ("%02d ", grid [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25696466_25702903_6_51
25696466_25705605_13_46
Title: Populating 2d array of ints from string in C 
----------------------------------------

int main (void) {
    char *s = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 " "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 " "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 " "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 " "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 " "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 " "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 " "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 " "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 " "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 " "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 " "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 " "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 " "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 " "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 " "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 " "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 " "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 " "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 " "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 ";
    int a [N] [N] = {{0}};
    int *p = (int *) a;
    const char *nptr = NULL;
    char *endptr = s;
    for (size_t i = 0; i < N * N && nptr != endptr; i++) {
        int x;
        nptr = endptr;
        x = (int) strtol (nptr, &endptr, 10);
        if (nptr != endptr)
            p[i] = x;
    }
    for (size_t i = 0; i < N; i++) {
        for (size_t j = 0; j < N; j++)
            printf ("%3d", a[i][j]);
        puts ("");
    }
    return 0;
}
----------------------------------------

int main () {
    const char *numbers = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 " "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 " "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 " "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 " "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 " "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 " "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 " "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 " "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 " "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 " "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 " "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 " "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 " "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 " "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 " "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 " "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 " "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 " "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 " "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
    const char *p = numbers;
    int grid [20] [20];
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 20; j++) {
            grid[i][j] = populate (&p);
            printf ("%02d ", grid [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25706424_25706593_20_32
25706424_25751622_1_22
Title: Reading through a file to create a matrix in c 
----------------------------------------

matrix_t mat_frd (char *fname) {
    int r = 0, c = 0;
    matrix_t mfile;
    FILE *matrix_file = fopen (fname, "r");
    fscanf (matrix_file, "%d %d", & r, & c);
    mfile = mat_new (r, c);
    for (r = 0; r < mfile.rows; ++r)
        for (c = 0; c < mfile.cols; ++c)
            fscanf (matrix_file, "%" SCN_MAT, &mfile.mat[r][c]);
    fclose (matrix_file);
    return mfile;
}
----------------------------------------

matrix_t mat_frd (char *fname) {
    int r, c;
    int i, j;
    FILE *matrix_file;
    matrix_file = fopen (fname, "r");
    fscanf (matrix_file, "%d", & r);
    fscanf (matrix_file, "%d", & c);
    matrix_t mfile = mat_new (r, c);
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            fscanf (matrix_file, "%lf", & mfile -> mat [i] [j]);
        }
    }
    fclose (matrix_file);
    return mfile;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25706424_25706593_33_43
25706424_25707752_37_53
Title: Reading through a file to create a matrix in c 
----------------------------------------

int main (void) {
    int r, c;
    matrix_t m = mat_frd ("data.txt");
    for (r = 0; r < m.rows; ++r) {
        for (c = 0; c < m.cols; ++c)
            printf ("%5.1" PRN_MAT " ", m.mat[r][c]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int r, c;
    matrix_t *m = mat_frd ("dat/mdata.txt");
    if (!m) {
        fprintf (stderr, "\n  mat_frd() returned NULL, read failed\n\n");
        return 1;
    }
    for (r = 0; r < m->rows; ++r) {
        for (c = 0; c < m->cols; ++c)
            printf ("%5.1" PRN_MAT " ", m->mat[r][c]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25707788_25724578_3_17
25707788_25766253_2_19
Title: End reading the file when a negative number is reached in c 
----------------------------------------

int main () {
    FILE *f = fopen ("input.in", "r");
    int count = 0;
    double x;
    if (f == NULL) {
        return 1;
    }
    while (fscanf (f, "%lf", &x) == 1 && !(x < 0)) {
        count++;
    }
    fclose (f);
    printf ("Number of Cases: %d\n", count);
    return 0;
}
----------------------------------------

int main () {
    FILE *f = fopen ("a.in", "r");
    float ld;
    int c = 0, i;
    double values [100];
    if (f == NULL) {
        printf ("File not found!");
        return;
    }
    while (fscanf (f, "%f\n", &ld) == 1) {
        if (ld == - 1.0) {printf ("Number of Cases: %d\n", c);
    }
    c++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25715163_25715230_2_15
25715163_25715419_4_22
Title: Duplicate numbers in an array 
----------------------------------------

int main () {
    int n, i;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    for (i = 0; i < 9; ++i) {
        if (a[i] == a[i + 1])
            if (i > 0 && a[i] == a[i - 1])
                continue;
            else
                printf ("%d ", a[i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i, c;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    c = 1;
    for (i = 0; i < 9; ++i) {
        if (a[i] == a[i + 1]) {
            n = a[i];
            c += 1;
        }
        else {
            if (c > 1) {
                printf ("Number: %d, Occurences: %d \n", n, c);
                c = 1;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25715163_25715230_2_15
25715163_25715781_3_17
Title: Duplicate numbers in an array 
----------------------------------------

int main () {
    int n, i;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    for (i = 0; i < 9; ++i) {
        if (a[i] == a[i + 1])
            if (i > 0 && a[i] == a[i - 1])
                continue;
            else
                printf ("%d ", a[i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int i, a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    int size = 10;
    for (i = 0; i < size; ++i) {
        int tmp = a[i];
        int c = 1;
        while (++i < size && tmp == a[i])
            ++c;
        if (c > 1)
            printf ("%d times %d\n", tmp, c);
        --i;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25715163_25715419_4_22
25715163_25715781_3_17
Title: Duplicate numbers in an array 
----------------------------------------

int main () {
    int n, i, c;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    c = 1;
    for (i = 0; i < 9; ++i) {
        if (a[i] == a[i + 1]) {
            n = a[i];
            c += 1;
        }
        else {
            if (c > 1) {
                printf ("Number: %d, Occurences: %d \n", n, c);
                c = 1;
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int i, a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    int size = 10;
    for (i = 0; i < size; ++i) {
        int tmp = a[i];
        int c = 1;
        while (++i < size && tmp == a[i])
            ++c;
        if (c > 1)
            printf ("%d times %d\n", tmp, c);
        --i;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25717820_25718022_1_14
25717820_25718084_2_18
Title: Unique numbers in array 
----------------------------------------

int main () {
    int i;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    for (i = 0; i < 10; ++i) {
        if (a[i] != a[(i + 1) % 10]) {
            if (i > 0 && a[i] != a[i - 1])
                printf ("%d ", a[i]);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int i;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    for (i = 0; i < 9; ++i) {
        if (a[i] != a[i + 1]) {
            if (i == 0 || a[i] != a[i - 1])
                printf ("%d ", a[i]);
        }
    }
    if (a[8] != a[9])
        printf ("%d", a[9]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25717820_25718022_1_14
25717820_25727547_3_15
Title: Unique numbers in array 
----------------------------------------

int main () {
    int i;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    for (i = 0; i < 10; ++i) {
        if (a[i] != a[(i + 1) % 10]) {
            if (i > 0 && a[i] != a[i - 1])
                printf ("%d ", a[i]);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int a [] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    size_t n = sizeof a / sizeof a[0];
    int previous = ~a[0];
    size_t i;
    for (i = 0; i < n; i++) {
        if (a[i] != previous)
            printf ("%d ", a[i]);
        previous = a[i];
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25717820_25718084_2_18
25717820_25727547_3_15
Title: Unique numbers in array 
----------------------------------------

int main () {
    int i;
    int a [10] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    for (i = 0; i < 9; ++i) {
        if (a[i] != a[i + 1]) {
            if (i == 0 || a[i] != a[i - 1])
                printf ("%d ", a[i]);
        }
    }
    if (a[8] != a[9])
        printf ("%d", a[9]);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int a [] = {2, 2, 2, 4, 6, 6, 9, 10, 10, 11};
    size_t n = sizeof a / sizeof a[0];
    int previous = ~a[0];
    size_t i;
    for (i = 0; i < n; i++) {
        if (a[i] != previous)
            printf ("%d ", a[i]);
        previous = a[i];
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25720180_25720453_1_11
25720180_25720648_1_11
Title: Understanding a recursive function 
----------------------------------------

int Max_Subarray_Sum (int arr [], int n) {
    if (n == 1) {
        return arr[0];
    }
    int m = n / 2;
    int left_MSS = Max_Subarray_Sum (arr, m);
    int right_MSS = Max_Subarray_Sum (arr +m, n -m);
    return left_MSS + right_MSS;
}
----------------------------------------

int Max_Subarray_Sum (int arr [], int n) {
    if (n == 1) {
        return arr[0];
    }
    int m = n / 2;
    int left_MSS = Max_Subarray_Sum (arr, m);
    int right_MSS = Max_Subarray_Sum (arr +m, n -m);
    return left_MSS + right_MSS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25746334_25746612_3_22
25746334_25750407_3_39
Title: Count words in a user-input string in C 
----------------------------------------

void main () {
    char s [200];
    int count = 0, i;
    int foundLetter = False;
    printf ("enter the string\n");
    gets (s);
    for (i = 0; i < strlen (s); i++) {
        if (s[i] == ' ')
            foundLetter = False;
        else {
            if (foundLetter == False)
                count++;
            foundLetter = True;
        }
    }
    printf ("number of words in given string are: %d\n", count);
}
----------------------------------------

int main (void) {
    char *line = NULL;
    char *p = NULL;
    ssize_t read = 0;
    size_t n = 0;
    int spaces = 0;
    int total = 0;
    printf ("\nEnter a line of text (or ctrl+d to quit)\n\n");
    while (printf (" input: ") && (read = getline (&line, &n, stdin)) != -1) {
        spaces = 0;
        p = line;
        if (read > 1) {
            while (*p) {
                if (*p == '\t' || *p == ' ') {
                    while (*p == '\t' || *p == ' ')
                        p++;
                    spaces += 1;
                }
                else
                    p++;
            }
        }
        total += spaces + 1;
        printf (" chars read: %2zd,  spaces: %2d  total: %3d  line: %s\n", read, spaces, total, (read > 1) ? line : "[enter]\n");
    }
    printf ("\n\n  Total words read: %d\n\n", total);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25746334_25746612_3_22
25746334_42287369_5_24
Title: Count words in a user-input string in C 
----------------------------------------

void main () {
    char s [200];
    int count = 0, i;
    int foundLetter = False;
    printf ("enter the string\n");
    gets (s);
    for (i = 0; i < strlen (s); i++) {
        if (s[i] == ' ')
            foundLetter = False;
        else {
            if (foundLetter == False)
                count++;
            foundLetter = True;
        }
    }
    printf ("number of words in given string are: %d\n", count);
}
----------------------------------------

int main () {
    freopen ("count_words_input.txt", "r", stdin);
    char c;
    long long i, wcount = 0, f = 0;
    i = 0;
    while (scanf ("%c", &c) == 1) {
        if (c == ' ' || c == '\n' || c == '\t' || c == '.')
            f = 0;
        else if (f == 0) {
            wcount++;
            f = 1;
        }
    }
    printf ("%lld\n", wcount);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25746334_25750407_3_39
25746334_42287369_5_24
Title: Count words in a user-input string in C 
----------------------------------------

int main (void) {
    char *line = NULL;
    char *p = NULL;
    ssize_t read = 0;
    size_t n = 0;
    int spaces = 0;
    int total = 0;
    printf ("\nEnter a line of text (or ctrl+d to quit)\n\n");
    while (printf (" input: ") && (read = getline (&line, &n, stdin)) != -1) {
        spaces = 0;
        p = line;
        if (read > 1) {
            while (*p) {
                if (*p == '\t' || *p == ' ') {
                    while (*p == '\t' || *p == ' ')
                        p++;
                    spaces += 1;
                }
                else
                    p++;
            }
        }
        total += spaces + 1;
        printf (" chars read: %2zd,  spaces: %2d  total: %3d  line: %s\n", read, spaces, total, (read > 1) ? line : "[enter]\n");
    }
    printf ("\n\n  Total words read: %d\n\n", total);
    return 0;
}
----------------------------------------

int main () {
    freopen ("count_words_input.txt", "r", stdin);
    char c;
    long long i, wcount = 0, f = 0;
    i = 0;
    while (scanf ("%c", &c) == 1) {
        if (c == ' ' || c == '\n' || c == '\t' || c == '.')
            f = 0;
        else if (f == 0) {
            wcount++;
            f = 1;
        }
    }
    printf ("%lld\n", wcount);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25752442_25752534_5_44
25752442_25752972_5_36
Title: String tokenizer without using strtok() 
----------------------------------------

void myToc (char *str) {
    int spcCount = 0;
    int ptrIndex = 0;
    int n = strlen (str);
    for (int i = 0; i < n; i++) {
        if (i != 0 && str[i] == ' ' && str[i - 1] != ' ') {
            spcCount++;
        }
    }
    char **ptr = (char **) calloc (spcCount +2, sizeof (char *));
    char temp;
    for (int j = 0; j < n; j++) {
        if (j == 0) {
            ptr[ptrIndex] = &str[j];
            temp = str[j];
            ptrIndex++;
        }
        else {
            if (str[j] == ' ') {
                temp = str[j];
                str[j] = '\0';
            }
            else if (str[j] != ' ' && str[j] != '\0' && temp == ' ') {
                ptr[ptrIndex] = &str[j];
                temp = str[j];
                ptrIndex++;
            }
        }
    }
    for (int k = 0; k < ptrIndex; ++k) {
        printf ("%s \n", ptr [k]);
    }
}
----------------------------------------

void myToc (char *str) {
    int spcCount = 0;
    int ptrIndex = 0;
    int n = strlen (str);
    for (int i = 0; i < n; i++) {
        if (i != 0 && str[i] == ' ' && str[i - 1] != ' ') {
            spcCount++;
        }
    }
    char **ptr = calloc (spcCount +2, sizeof (char *));
    char temp = ' ';
    for (int j = 0; j < n; j++) {
        if (str[j] == ' ') {
            temp = str[j];
            str[j] = '\0';
        }
        else if (str[j] != '\0' && temp == ' ') {
            ptr[ptrIndex++] = &str[j];
            temp = str[j];
        }
    }
    int k = 0;
    while (ptr[k] != NULL) {
        printf ("%s \n", ptr [k ++]);
    }
    free (ptr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25753905_25754502_5_18
25753905_25755395_3_16
Title: Updating string until period is found in C 
----------------------------------------

char *separate_name (char *machine_name) {
    char *absolute_name = malloc (strlen (machine_name) +1);
    int i = 0;
    while (i < strlen (machine_name) && machine_name[i] != '.') {
        absolute_name[i] = machine_name[i];
        ++i;
    }
    absolute_name[i] = '\0';
    return absolute_name;
}
----------------------------------------

char *separate_name (const char *machine_name) {
    static char absolute_name [1000];
    int i;
    for (i = 0; i < sizeof (absolute_name) - 1; i++) {
        if (machine_name[i] == '.' || machine_name[i] == '\0') {
            absolute_name[i] = '\0';
            break;
        }
        else {
            absolute_name[i] = machine_name[i];
        }
    }
    return absolute_name;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25775924_25776274_1_10
25775924_25776440_1_10
Title: How can I check if an element of an array is the terminating element and return a new line? 
----------------------------------------

char *my_strchr (const char *string, int ch) {
    int i;
    int c;
    for (i = 0; (c = string[i]) != '\0'; ++i) {
        if (c == ch)
            return string + i;
    }
    return "\n";
}
----------------------------------------

char *my_strchr (const char *string, int ch) {
    if (*string == '\0')
        putchar ('\n');
    while (*string) {
        if (*string == ch)
            return (char *) string;
        ++string;
    }
    return *string == ch ? (char *) string : NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25793719_25795854_4_110
25793719_25795984_4_99
Title: C Matrix Multiplication Using Pointers 
----------------------------------------

int main () {
    int i, j, k, m, n, p, q, m1_rows, m1_cols, m2_rows, m2_cols, mr_rows, mr_cols;
    double **m1, **m2, **mr;
    printf ("Enter number of rows and columns of 1st matrix:");
    scanf ("%d%d", & m, & n);
    printf ("Enter number of rows and columns of 2nd matrix:");
    scanf ("%d%d", & p, & q);
    m1_rows = m;
    m1_cols = n;
    m2_rows = p;
    m2_cols = q;
    mr_rows = m;
    mr_cols = q;
    if (n != p)
        printf ("Not possible");
    else {
        m1 = malloc (sizeof (double *) * m1_rows);
        for (i = 0; i < m1_rows; i++)
            m1[i] = malloc (sizeof (double) * m1_cols);
        m2 = malloc (sizeof (double *) * m2_rows);
        for (i = 0; i < m2_rows; i++)
            m2[i] = malloc (sizeof (double) * m2_cols);
        mr = malloc (sizeof (double *) * mr_rows);
        for (i = 0; i < mr_rows; i++)
            mr[i] = malloc (sizeof (double) * mr_cols);
        printf ("Enter 1st matrix values:");
        for (i = 0; i < m1_rows; i++) {
            for (j = 0; j < m1_cols; j++) {
                scanf ("%lf", & m1 [i] [j]);
            }
        }
        printf ("Enter 2nd matrix values:\n");
        for (i = 0; i < m2_rows; i++) {
            for (j = 0; j < m2_cols; j++) {
                scanf ("%lf", & m2 [i] [j]);
            }
        }
        printf ("First matrix is:\n");
        for (i = 0; i < m1_rows; i++) {
            printf ("\n");
            for (j = 0; j < m1_cols; j++) {
                printf ("%.2lf\t", * (* (m1 + i) + j));
            }
        }
        printf ("\nSecond matrix is:\n");
        for (i = 0; i < m2_rows; i++) {
            printf ("\n");
            for (j = 0; j < m2_cols; j++) {
                printf ("%.2lf\t", * (* (m2 + i) + j));
            }
        }
        for (i = 0; i < m1_rows; i++) {
            for (j = 0; j < m2_cols; j++) {
                mr[i][j] = 0;
                for (k = 0; k < m1_cols; k++) {
                    mr[i][j] = mr[i][j] + m1[i][k] * m2[k][j];
                }
            }
        }
        printf ("\nResult matrix is:\n");
        for (i = 0; i < mr_rows; i++) {
            printf ("\n");
            for (j = 0; j < mr_cols; j++) {
                printf ("%.2lf\t", mr [i] [j]);
            }
        }
        for (i = 0; i < m1_rows; i++) {
            free (m1 [i]);
        }
        free (m1);
        for (i = 0; i < m2_rows; i++) {
            free (m2 [i]);
        }
        free (m2);
        for (i = 0; i < mr_rows; i++) {
            free (mr [i]);
        }
        free (mr);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int c, i = 0, j = 0, m = 0, n = 0, p = 0, q = 0;
    double **m1, **m2, **mr;
    printf ("Enter number of rows and columns of 1st matrix: ");
    scanf ("%d %d", & m, & n);
    do {
        c = getchar ();
    }
    while (c != '\n' && c != EOF);
    printf ("Enter number of rows and columns of 2nd matrix: ");
    scanf ("%d %d", & p, & q);
    do {
        c = getchar ();
    }
    while (c != '\n' && c != EOF);
    if (n != p)
        printf ("Not possible\n");
    else {
        m1 = malloc (sizeof (double *) * m);
        for (int i = 0; i < m; i++)
            m1[i] = calloc (n, sizeof (double));
        m2 = malloc (sizeof (double *) * p);
        for (int i = 0; i < p; i++)
            m2[i] = calloc (q, sizeof (double));
        mr = malloc (sizeof (double *) * m);
        for (int i = 0; i < m; i++)
            mr[i] = calloc (q, sizeof (double));
        printf ("Enter 1st matrix values:\n");
        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                printf ("  m1[%d][%d]: ", i, j);
                scanf ("%lf", & m1 [i] [j]);
                do {
                    c = getchar ();
                }
                while (c != '\n' && c != EOF);
            }
        }
        printf ("Enter 2nd matrix values:\n");
        for (i = 0; i < p; i++)
            for (j = 0; j < q; j++) {
                printf ("  m1[%d][%d]: ", i, j);
                scanf ("%lf", & (* (* (m2 + i))));
                do {
                    c = getchar ();
                }
                while (c != '\n' && c != EOF);
            }
        printf ("\nFirst matrix is:\n");
        for (i = 0; i < m; i++) {
            printf ("\n");
            for (j = 0; j < n; j++)
                printf ("%lf\t", *(*(m1 + i) + j));
        }
        printf ("\n\nSecond matrix is:\n");
        for (i = 0; i < p; i++) {
            printf ("\n");
            for (j = 0; j < q; j++)
                printf ("%lf\t", *(*(m2 + i) + j));
        }
        printf ("\n");
        printf ("\nFree First matrix\n");
        for (i = 0; i < m; i++) {
            if (*(m1 + i))
                free (*(m1 + i));
        }
        if (m1)
            free (m1);
        printf ("Free Second matrix\n");
        for (i = 0; i < p; i++) {
            if (*(m2 + i))
                free (*(m2 + i));
        }
        if (m2)
            free (m2);
        printf ("Free Result matrix\n\n");
        for (i = 0; i < m; i++) {
            if (*(mr + i))
                free (*(mr + i));
        }
        if (mr)
            free (mr);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25795266_25795435_4_30
25795266_25795815_11_34
Title: "Greedy Algorithm in ""C""" 
----------------------------------------

int main (void) {
    float amount = 0;
    int cents = 0;
    int count = 0;
    int amount_left = 0;
    amount = .30;
    cents = (int) round (amount *100);
    printf ("%d\n", cents);
    amount_left = cents;
    count += amount_left / 25;
    amount_left %= 25;
    count += amount_left / 10;
    amount_left %= 10;
    count += amount_left / 5;
    amount_left %= 5;
    count += amount_left;
    printf ("You get %d coins\n", count);
}
----------------------------------------

int main (void) {
    float amount = 0;
    int cents = 0;
    int count = 0;
    int amount_left = 0;
    int coin_values [] = {25, 10, 5, 1};
    int i;
    amount = .30;
    cents = (int) round (amount *100);
    printf ("%d", cents);
    amount_left = cents;
    for (i = 0; i < 4; i++) {
        int current_count = count_number_of_coins (amount_left, coin_values[i]);
        amount_left -= current_count * coin_values[i];
        count += current_count;
    }
    printf ("You get %d coins\n", count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25798841_25798917_13_31
25798841_25801923_43_62
Title: Why are the conditional statements in the while loop causing the program to pause selectively forever? 
----------------------------------------

int CountGreed (int IntCents) {
    static const int Quarter = 25, Dime = 10, Nickel = 5, Penny = 1;
    int CoinCount = 0;
    while (IntCents > 0) {
        if (IntCents >= Quarter) {
            CoinCount += coin_count (IntCents, Quarter, &IntCents);
        }
        else if (IntCents >= Dime) {
            CoinCount += coin_count (IntCents, Dime, &IntCents);
        }
        else if (IntCents >= Nickel) {
            CoinCount += coin_count (IntCents, Nickel, &IntCents);
        }
        else if (IntCents >= Penny) {
            CoinCount += coin_count (IntCents, Penny, &IntCents);
        }
    }
    return CoinCount;
}
----------------------------------------

int CountGreed (int IntCents) {
    const int Quarter = 25, Dime = 10, Nickel = 5, Penny = 1;
    int CoinCount = 0;
    int Remainder = IntCents;
    CoinCount = Remainder / Quarter;
    Remainder = Remainder % Quarter;
    CoinCount += Remainder / Dime;
    Remainder = Remainder % Dime;
    CoinCount += Remainder / Nickle;
    Remainder = Remainder % Nickle;
    CoinCount += Remainder;
    return CoinCount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25813042_25813238_1_17
25813042_25813246_5_18
Title: Using a .txt to receive inputs in a C program 
----------------------------------------

int main (void) {
    FILE *fp;
    int a, b, c, d, e, f, g, h;
    fp = fopen ("myfile.txt", "r");
    if (fp == NULL) {
        perror ("open failed");
        return 1;
    }
    fscanf (fp, "%d %d %d", & a, & b, & c);
    fscanf (fp, "%d %d", & d, & e);
    fscanf (fp, "%d %d %d", & f, & g, & h);
    fclose (fp);
    return 0;
}
----------------------------------------

int main () {
    FILE *inputFile;
    inputFile = fopen ("yourDataFile.txt", "r");
    int input [MAX_NUMBER];
    int i = 0;
    while (!feof (inputFile) && i < MAX_NUMBER) {
        fscanf (inputFile, "%d", input [i]);
        i++;
    }
    fclose (inputFile);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25813905_25813961_1_15
25813905_25814056_1_16
Title: How to avoid GOTO in this code 
----------------------------------------

func () {
    if (!handler_1 ())
        goto fail;
    if (!handler_2 ())
        goto fail;
    if (!handler_3 ())
        goto fail;
    print ("success");
    return 0;
fail :
    print ("failure");
    return -1;
}
----------------------------------------

func () {
    int is_good = 0;
    if (handler_1 ())
        is_good = 1;
    else if (handler_2 ())
        is_good = 1;
    else if (handler_3 ())
        is_good = 1;
    if (is_good == 1) {
        print ("BAD");
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25813905_25813961_1_15
25813905_25814179_9_17
Title: How to avoid GOTO in this code 
----------------------------------------

func () {
    if (!handler_1 ())
        goto fail;
    if (!handler_2 ())
        goto fail;
    if (!handler_3 ())
        goto fail;
    print ("success");
    return 0;
fail :
    print ("failure");
    return -1;
}
----------------------------------------

func () {
    if (!handler_any ()) {
        print ("BAD");
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25813905_25813961_1_15
25813905_25814573_1_21
Title: How to avoid GOTO in this code 
----------------------------------------

func () {
    if (!handler_1 ())
        goto fail;
    if (!handler_2 ())
        goto fail;
    if (!handler_3 ())
        goto fail;
    print ("success");
    return 0;
fail :
    print ("failure");
    return -1;
}
----------------------------------------

func () {
    if (!handler_1 ()) {
        if (!handler_2 ()) {
            if (!handler_3 ()) {
                print ("BAD");
            }
            else {
                print ("GOOD");
            }
        }
        else {
            print ("GOOD");
        }
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25813905_25814056_1_16
25813905_25814179_9_17
Title: How to avoid GOTO in this code 
----------------------------------------

func () {
    int is_good = 0;
    if (handler_1 ())
        is_good = 1;
    else if (handler_2 ())
        is_good = 1;
    else if (handler_3 ())
        is_good = 1;
    if (is_good == 1) {
        print ("BAD");
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------

func () {
    if (!handler_any ()) {
        print ("BAD");
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25813905_25814056_1_16
25813905_25814573_1_21
Title: How to avoid GOTO in this code 
----------------------------------------

func () {
    int is_good = 0;
    if (handler_1 ())
        is_good = 1;
    else if (handler_2 ())
        is_good = 1;
    else if (handler_3 ())
        is_good = 1;
    if (is_good == 1) {
        print ("BAD");
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------

func () {
    if (!handler_1 ()) {
        if (!handler_2 ()) {
            if (!handler_3 ()) {
                print ("BAD");
            }
            else {
                print ("GOOD");
            }
        }
        else {
            print ("GOOD");
        }
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25813905_25814179_9_17
25813905_25814573_1_21
Title: How to avoid GOTO in this code 
----------------------------------------

func () {
    if (!handler_any ()) {
        print ("BAD");
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------

func () {
    if (!handler_1 ()) {
        if (!handler_2 ()) {
            if (!handler_3 ()) {
                print ("BAD");
            }
            else {
                print ("GOOD");
            }
        }
        else {
            print ("GOOD");
        }
    }
    else {
        print ("GOOD");
    }
    print ("DONE");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25835422_25835484_12_28
25835422_25835825_16_25
Title: Returning string from function having multiple NULL '\0' in C 
----------------------------------------

int main (void) {
    char *str;
    size_t n;
    str = compressor ("Muhammad Ashikuzzaman", &n);
    int i;
    printf ("Compressed Value = ");
    for (char *p = str; n; n -= i + 1, p += i + 1) {
        i = printf ("%s", p);
    }
    return 0;
}
----------------------------------------

int main () {
    char *str;
    int i, length = 0;
    str = func ("Muhammad Ashikuzzaman", &length);
    for (i = 0; i < length; i++)
        printf ("%c", str[i]);
    scanf ("%d", & i);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25835901_25835943_1_12
25835901_25836160_3_17
Title: how to represent enter key as char in c Language? 
----------------------------------------

int main () {
    char ch = '\n';
    switch (ch) {
    case '\n' :
        printf ("Enter pressed\n");
        break;
    default :
    }
}
----------------------------------------

int main () {
    int c;
    for (;;) {
        c = getc (stdin);
        switch (c) {
        case '\n' :
            printf ("enter pressed\n");
            break;
        case EOF :
            return 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25836221_25836527_10_27
25836221_25836660_1_14
Title: "Transpose matrix function in C with function receiving and returning a 2D array" 
----------------------------------------

int main (void) {
    int x [3] [2] = {{0, 1}, {2, 3}, {4, 5}};
    int y [2] [3];
    MatrixTranspose (3, 2, x, y);
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 2; j++) {
            printf ("X[%d][%d]=%d  ", i, j, x [i] [j]);
            printf ("Y[%d][%d]=%d\n", j, i, y [j] [i]);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int x [2] [3] = {1, 2, 3, 4, 5, 6};
    int (*a) [2] = (int (*)[2]) f_MatTrans (2, 3, x);
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            printf ("X[%d][%d]=%d\n", i, j, x [i] [j]);
            printf ("A[%d][%d]=%d\n", i, j, a [i] [j]);
        }
    }
    free (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25836642_25836872_8_39
25836642_25837560_8_55
Title: finding words that contain no vowels from a text file 
----------------------------------------

int main () {
    FILE *f = fopen ("test.txt", "r");
    char word [MAX_LENGTH];
    int length = strlen (word);
    int i, j, k, flag = 0;
    fgets (word, MAX_LENGTH, f);
    for (i = 0; i < length; i++) {
        if (word[i] == " ") {
            flag = 0;
            j = i;
            for (k = i; word[k] != " "; k++) {
                if (word[i] == 'a' | word[i] == 'e' | word[i] == 'i' | word[i] == 'o' | word[i] == 'u' | word[i] == 'y') {
                    flag = 1;
                    break;
                }
            }
            if (flag == 0)
                for (i = i; i <= k; i++)
                    printf ("%c", word[i]);
        }
    }
}
----------------------------------------

int main () {
    FILE *f = fopen ("test.txt", "r");
    char line [MAX_LINE_LENGTH];
    while (fgets (line, MAX_LINE_LENGTH, f)) {
        char word [MAX_WORD_LENGTH];
        char *curline = line;
        int charsread;
        if ((line[MAX_LINE_LENGTH - 1] != '\0') && (line[MAX_LINE_LENGTH - 1] != '\n')) {
            while (fgetc (f) != '\n')
                ;
        }
        while (sscanf (curline, "%s%n", word, &charsread) > 0) {
            int i;
            int wordlen = strlen (word);
            int vowelfnd = 0;
            for (i = 0; i < wordlen; i++) {
                if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'y') {
                    vowelfnd = 1;
                    break;
                }
            }
            if (!vowelfnd)
                printf ("%s ", word);
            curline += (charsread);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25839200_25839537_1_27
25839200_25839624_19_69
Title: How to read 2 lines of integer input in C? 
----------------------------------------

int main () {
    int it;
    int it1 = 0;
    int it2 = 0;
    int line1 [100];
    int line2 [100];
    scanf ("%d", & it1);
    scanf ("%d", & it2);
    it = 0;
    do {
        scanf ("%d", & line1 [it]);
    }
    while (++it < it1);
    fflush (stdin);
    it = 0;
    do {
        scanf ("%d", & line2 [it]);
    }
    while (++it < it2);
    return 0;
}
----------------------------------------

int main () {
    int isLineTwo = 0;
    int countOne = 0;
    int countTwo = 0;
    int inputNum;
    int num1;
    int num2;
    int array1 [ARRAY_SIZE];
    int array2 [ARRAY_SIZE];
    char ch;
    while (scanf ("%d%c", &inputNum, &ch) > 0) {
        if (isLineTwo) {
            array2[countOne] = inputNum;
            countOne++;
        }
        else {
            array1[countTwo] = inputNum;
            countTwo++;
        }
        if (ch == '\n') {
            isLineTwo++;
        }
        if (isLineTwo > 1) {
            printf ("Hey, no more than 2 input lines!\n");
        }
    }
    printArray (array1, countOne);
    printArray (array2, countTwo);
    num1 = array1[0];
    num2 = array2[0];
    shiftArrayBackByOne (array1);
    shiftArrayBackByOne (array2);
    printf ("num1 = %d\n", num1);
    printf ("num2 = %d\n", num2);
    printArray (array1, countOne);
    printArray (array2, countTwo);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25839369_25839490_1_13
25839369_25839582_1_24
Title: deleting specific part of a string in C 
----------------------------------------

char *string_delete (char *oldstr, char *str_to_remove) {
    char *address = strstr (oldstr, str_to_remove);
    if (NULL == address) {
        return NULL;
    }
    int new_len = strlen (oldstr) - strlen (str_to_remove);
    char *newstr = (char *) malloc (new_len +1);
    memcpy (newstr, oldstr, address - oldstr);
    memcpy (newstr + (address - oldstr), address + strlen (str_to_remove), strstr (oldstr) - strlen (str_to_remove));
    newstr[new_len] = '\0';
    return newstr;
}
----------------------------------------

char *string_delete (char *oldstr, char *str_to_remove) {
    size_t len_old = strlen (oldstr);
    size_t len_rem = strlen (str_to_remove);
    char *address = strstr (oldstr, str_to_remove);
    size_t len_new;
    char *newstr = NULL;
    if (address == NULL) {
        newstr = malloc (len_old +1);
        strcpy (newstr, oldstr);
    }
    else {
        len_new = len_old - len_rem;
        newstr = malloc (len_new +1);
        memcpy (newstr, oldstr, address - oldstr);
        memcpy (newstr + (address - oldstr), address + len_rem, len_new - (address - oldstr) + 1);
    }
    return newstr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25840771_25841090_1_18
25840771_25841131_1_17
Title: What makes the array rotate left without temp? 
----------------------------------------

void rotate_l (int *array, int size, int l) {
    int oo, kk;
    for (oo = 1; oo <= l; oo++) {
        for (kk = 0; kk < size - 1; ++kk) {
            array[kk] = array[kk + 1] + array[kk];
            array[kk + 1] = array[kk] - array[kk + 1];
            array[kk] = array[kk] - array[kk + 1];
        }
    }
    return;
}
----------------------------------------

void rotate_l (int *array, int size, int l) {
    int oo, kk;
    for (oo = 1; oo <= l; oo++) {
        for (kk = 1; kk < size; kk++) {
            array[kk - 1] = array[kk - 1] + array[kk];
            array[kk] = array[kk - 1] - array[kk];
            array[kk - 1] = array[kk - 1] - array[kk];
        }
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25840771_25841131_1_17
25840771_25849389_1_18
Title: What makes the array rotate left without temp? 
----------------------------------------

void rotate_l (int *array, int size, int l) {
    int oo, kk;
    for (oo = 1; oo <= l; oo++) {
        for (kk = 1; kk < size; kk++) {
            array[kk - 1] = array[kk - 1] + array[kk];
            array[kk] = array[kk - 1] - array[kk];
            array[kk - 1] = array[kk - 1] - array[kk];
        }
    }
    return;
}
----------------------------------------

void rotate_l (int *array, int size, int l) {
    int oo, kk;
    for (oo = 1; oo <= l; oo++) {
        for (kk = 0; kk < size - 1; ++kk) {
            array[kk] = array[kk + 1] + array[kk];
            array[kk + 1] = array[kk] - array[kk + 1];
            array[kk] = array[kk] - array[kk + 1];
        }
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25860644_25862277_14_61
25860644_25866669_11_111
Title: C program that removes comments 
----------------------------------------

void main () {
    FILE *input = NULL;
    char c;
    states state;
    state = CODE;
    input = fopen ("C:/c/code.txt", "r");
    if (input == NULL) {
        exit (EXIT_FAILURE);
    }
    while (fscanf (input, "%c", &c) == 1) {
        switch (c) {
        case '/' :
            switch (state) {
            case CODE :
                state = HASH_START;
                break;
            case STAR_END :
                fscanf (input, "%c", &c);
                state = CODE;
                break;
            }
            break;
        case '*' :
            switch (state) {
            case HASH_START :
                state = COMMENT;
                break;
            case COMMENT :
                state = STAR_END;
                break;
            }
            break;
        default :
            if (state == HASH_START) {
                state = CODE;
            }
        }
        if (state == CODE) {
            printf ("%c", c);
        }
    }
}
----------------------------------------

int main (void) {
    FILE *fp = stdin;
    int ch, chn;
    int nest_level = 0;
    enum {none, in_line_comment, in_range_comment, in_string, in_char_constant} status;
    status = none;
    while (EOF != (ch = fgetc (fp))) {
        switch (status) {
        case in_line_comment :
            if (ch == '\n') {
                status = none;
                putchar (ch);
            }
            continue;
        case in_range_comment :
            if (ch == '*') {
                chn = fgetc (fp);
                if (chn == '/') {
                    if (--nest_level == 0) {
                        status = none;
                        putchar (' ');
                    }
                    continue;
                }
                ungetc (chn, fp);
            }
            else if (ch == '/') {
                chn = fgetc (fp);
                if (chn == '*') {
                    ++nest_level;
                    continue;
                }
                ungetc (chn, fp);
            }
            continue;
        case in_string :
            if (ch == '\\') {
                putchar (ch);
                chn = fgetc (fp);
                if (chn == '"') {
                    putchar (chn);
                    continue;
                }
                ungetc (chn, fp);
            }
            else {
                if (ch == '"')
                    status = none;
                putchar (ch);
            }
            continue;
        case in_char_constant :
            if (ch == '\\') {
                putchar (ch);
                chn = fgetc (fp);
                if (chn == '\'') {
                    putchar (chn);
                    continue;
                }
                ungetc (chn, fp);
            }
            else {
                if (ch == '\'')
                    status = none;
                putchar (ch);
            }
            continue;
        case none :
            switch (ch) {
            case '/' :
                if ('/' == (chn = fgetc (fp))) {
                    status = in_line_comment;
                    continue;
                }
                else if ('*' == chn) {
                    status = in_range_comment;
                    ++nest_level;
                    continue;
                }
                else
                    ungetc (chn, fp);
                putchar (ch);
                break;
            case '"' :
                status = in_string;
                putchar (ch);
                break;
            case '\'' :
                status = in_char_constant;
                putchar (ch);
                break;
            default :
                putchar (ch);
            }
        }
    }
    return 0;
}
----------------------------------------

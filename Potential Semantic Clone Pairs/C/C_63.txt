$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9180027_9180605_1_43
9180027_9181783_1_41
Title: segmentation fault inside on loop 
----------------------------------------

char **split (char *delimiter, char *input) {
    int i;
    char **tokens;
    char *token;
    char *state;
    tokens = (char **) malloc (sizeof (char *) * (2));
    if (tokens == NULL) {
        printf ("Allocation failed.");
        return NULL;
    }
    tokens[0] = (char *) 1;
    tokens[1] = NULL;
    for (i = 1, token = strtok_r (input, delimiter, &state); token != NULL; token = strtok_r (NULL, delimiter, &state), i++) {
        {
            char **new = (char **) realloc (tokens, (i + 2) * sizeof (char *));
            if (new == NULL) {
                printf ("Realloc failed.");
                free (tokens);
                return NULL;
            }
            else {
                tokens = new;
                tokens[i + 1] = NULL;
            }
        }
        tokens[i] = token;
        tokens[0] = (char *) i;
    }
    return tokens;
}
----------------------------------------

char **split (char *delim, char *input) {
    char *save;
    char **tmp, **res;
    int i, count;
    if (!(res = malloc (sizeof (res[0])))) {
        fprintf (stderr, "split(): malloc() failed\n");
        return NULL;
    }
    res[0] = strtok_r (input, delim, &save);
    if (res[0])
        i = 0;
    count = 1;
    do {
        if (tmp = realloc (res, sizeof (res[0]) * ++count))
            res = tmp;
        else {
            free (res);
            fprintf (stderr, "split(): realloc() failed.\n");
            return NULL;
        }
        res[++i] = strtok_r (NULL, delim, &save);
    }
    while (res[i]);
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9181449_9181490_3_16
9181449_9181706_3_17
Title: How do you assign substrings in C? 
----------------------------------------

int main () {
    char *orig = "Hey you guys.";
    char buff [14];
    char *str = buff;
    strcpy (str, orig);
    while (*str) {
        if (*str == 'y')
            *str = '@';
        str++;
    }
    puts (buff);
    return 0;
}
----------------------------------------

int main () {
    char orig [] = "Hey you guys.";
    char *str;
    str = orig;
    int i;
    while (*str) {
        if (*str == 'y')
            *str = '@';
        *str++;
    }
    puts (str);
    puts (orig);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9211601_9211783_3_22
9211601_9212551_4_22
Title: parsing ip adress string in 4 single bytes 
----------------------------------------

int main () {
    char str [] = "192.168.0.1";
    unsigned char bytes [4];
    int i = 0;
    char *buff = malloc (10);
    buff = strtok (str, ".");
    while (buff != NULL) {
        printf ("%s\n", buff);
        bytes[i] = (unsigned char) atoi (buff);
        buff = strtok (NULL, ".");
        i++;
    }
    free (buff);
    return 0;
}
----------------------------------------

int main (void) {
    char *str = "192.168.0.1", *str2;
    unsigned char value [4] = {0};
    size_t index = 0;
    str2 = str;
    while (*str) {
        if (isdigit ((unsigned char) *str)) {
            value[index] *= 10;
            value[index] += *str - '0';
        }
        else {
            index++;
        }
        str++;
    }
    printf ("values in \"%s\": %d %d %d %d\n", str2, value [0], value [1], value [2], value [3]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_11429631_6_21
9243312_20516071_11_36
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main (int argc, char **argv) {
    if (argc <= 2) {
        if (argv)
            argc = atoi (argv[1]);
        else
            return argc;
    }
    argc *= main (argc -1, NULL);
    if (argv) {
        printf ("=%d\n", argc);
        return 0;
    }
    return argc;
}
----------------------------------------

void main () {
    clrscr ();
    int number, counter;
label1 :
    cout << "\n Enter the Number = ";
    cin >> number;
    if (number < 0) {
        cout << "\n Enter a non negative number, please!";
        goto label1;
    }
    cout << "\n\n ----------- Results ------------";
    cout << "\n\n The Factorial of the number " << number << "\n is " << factorial (number);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_11429631_6_21
9243312_36382009_19_28
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main (int argc, char **argv) {
    if (argc <= 2) {
        if (argv)
            argc = atoi (argv[1]);
        else
            return argc;
    }
    argc *= main (argc -1, NULL);
    if (argv) {
        printf ("=%d\n", argc);
        return 0;
    }
    return argc;
}
----------------------------------------

int main () {
    int no, ans;
    ` ` system ("clear");
    printf ("Enter a no. : ");
    scanf ("%d", & no);
    ans = fact (no);
    printf ("Fact : %d", ans);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_11429631_6_21
9243312_9243464_19_32
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main (int argc, char **argv) {
    if (argc <= 2) {
        if (argv)
            argc = atoi (argv[1]);
        else
            return argc;
    }
    argc *= main (argc -1, NULL);
    if (argv) {
        printf ("=%d\n", argc);
        return 0;
    }
    return argc;
}
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    count = 1;
    while (count <= n)
        factorial *= count++;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_11429631_6_21
9243312_9243464_37_48
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main (int argc, char **argv) {
    if (argc <= 2) {
        if (argv)
            argc = atoi (argv[1]);
        else
            return argc;
    }
    argc *= main (argc -1, NULL);
    if (argv) {
        printf ("=%d\n", argc);
        return 0;
    }
    return argc;
}
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    for (factorial = 1L, count = 1; count <= n; count++)
        factorial *= count;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_11429631_6_21
9243312_9243464_4_15
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main (int argc, char **argv) {
    if (argc <= 2) {
        if (argv)
            argc = atoi (argv[1]);
        else
            return argc;
    }
    argc *= main (argc -1, NULL);
    if (argv) {
        printf ("=%d\n", argc);
        return 0;
    }
    return argc;
}
----------------------------------------

int main () {
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    while (n > 0)
        factorial *= n--;
    printf ("The factorial is %ld\n", factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_20516071_11_36
9243312_36382009_19_28
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

void main () {
    clrscr ();
    int number, counter;
label1 :
    cout << "\n Enter the Number = ";
    cin >> number;
    if (number < 0) {
        cout << "\n Enter a non negative number, please!";
        goto label1;
    }
    cout << "\n\n ----------- Results ------------";
    cout << "\n\n The Factorial of the number " << number << "\n is " << factorial (number);
    getch ();
}
----------------------------------------

int main () {
    int no, ans;
    ` ` system ("clear");
    printf ("Enter a no. : ");
    scanf ("%d", & no);
    ans = fact (no);
    printf ("Fact : %d", ans);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_20516071_11_36
9243312_9243464_19_32
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

void main () {
    clrscr ();
    int number, counter;
label1 :
    cout << "\n Enter the Number = ";
    cin >> number;
    if (number < 0) {
        cout << "\n Enter a non negative number, please!";
        goto label1;
    }
    cout << "\n\n ----------- Results ------------";
    cout << "\n\n The Factorial of the number " << number << "\n is " << factorial (number);
    getch ();
}
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    count = 1;
    while (count <= n)
        factorial *= count++;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_20516071_11_36
9243312_9243464_37_48
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

void main () {
    clrscr ();
    int number, counter;
label1 :
    cout << "\n Enter the Number = ";
    cin >> number;
    if (number < 0) {
        cout << "\n Enter a non negative number, please!";
        goto label1;
    }
    cout << "\n\n ----------- Results ------------";
    cout << "\n\n The Factorial of the number " << number << "\n is " << factorial (number);
    getch ();
}
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    for (factorial = 1L, count = 1; count <= n; count++)
        factorial *= count;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_20516071_11_36
9243312_9243464_4_15
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

void main () {
    clrscr ();
    int number, counter;
label1 :
    cout << "\n Enter the Number = ";
    cin >> number;
    if (number < 0) {
        cout << "\n Enter a non negative number, please!";
        goto label1;
    }
    cout << "\n\n ----------- Results ------------";
    cout << "\n\n The Factorial of the number " << number << "\n is " << factorial (number);
    getch ();
}
----------------------------------------

int main () {
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    while (n > 0)
        factorial *= n--;
    printf ("The factorial is %ld\n", factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_36382009_19_28
9243312_9243464_19_32
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main () {
    int no, ans;
    ` ` system ("clear");
    printf ("Enter a no. : ");
    scanf ("%d", & no);
    ans = fact (no);
    printf ("Fact : %d", ans);
    return 0;
}
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    count = 1;
    while (count <= n)
        factorial *= count++;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_36382009_19_28
9243312_9243464_37_48
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main () {
    int no, ans;
    ` ` system ("clear");
    printf ("Enter a no. : ");
    scanf ("%d", & no);
    ans = fact (no);
    printf ("Fact : %d", ans);
    return 0;
}
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    for (factorial = 1L, count = 1; count <= n; count++)
        factorial *= count;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_36382009_19_28
9243312_9243464_4_15
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main () {
    int no, ans;
    ` ` system ("clear");
    printf ("Enter a no. : ");
    scanf ("%d", & no);
    ans = fact (no);
    printf ("Fact : %d", ans);
    return 0;
}
----------------------------------------

int main () {
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    while (n > 0)
        factorial *= n--;
    printf ("The factorial is %ld\n", factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_9243464_19_32
9243312_9243464_37_48
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    count = 1;
    while (count <= n)
        factorial *= count++;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    for (factorial = 1L, count = 1; count <= n; count++)
        factorial *= count;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_9243464_19_32
9243312_9243464_4_15
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    count = 1;
    while (count <= n)
        factorial *= count++;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------

int main () {
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    while (n > 0)
        factorial *= n--;
    printf ("The factorial is %ld\n", factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9243312_9243464_37_48
9243312_9243464_4_15
Title: Factorial program c using recursive function in C with while loop 
----------------------------------------

int main () {
    register int count;
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    for (factorial = 1L, count = 1; count <= n; count++)
        factorial *= count;
    printf ("%d! = %ld\n", n, factorial);
    return 0;
}
----------------------------------------

int main () {
    int n;
    long factorial;
    printf ("Compute the factorial of what number? ");
    scanf ("%d", & n);
    factorial = 1L;
    while (n > 0)
        factorial *= n--;
    printf ("The factorial is %ld\n", factorial);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9247115_9247202_4_33
9247115_9251411_22_51
Title: Reading formatted strings from file into Array in C 
----------------------------------------

int main (void) {
    char mydata [] = "\"John\",\"Smith\",\"Foo\",\"Bar\"";
    char namebuffer [20];
    unsigned int i, j;
    int begin = 1;
    unsigned int beginName, endName;
    for (i = 0; i < sizeof (mydata); i++) {
        if (mydata[i] == '"') {
            if (begin) {
                beginName = i;
            }
            else {
                endName = i;
                for (j = beginName + 1; j < endName; j++) {
                    namebuffer[j - beginName - 1] = mydata[j];
                }
                namebuffer[endName - beginName - 1] = '\0';
                printf ("%s\n", namebuffer);
            }
            begin = !begin;
        }
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    char fakeline [] = "\"Nameone\",\"Nametwo\",\"billy\",\"bobby\",\"frank\"";
    char *token;
    char namebuffer [MAX_NAME_LENGTH] = {'\0'};
    char *name;
    int index = 0;
    char nameArray [MAX_STRINGS] [MAX_NAME_LENGTH];
    token = strtok (fakeline, ",");
    if (token) {
        name = stripQuotes (token, namebuffer);
        strcpy (nameArray [index ++], name);
    }
    while (token != NULL) {
        token = strtok (NULL, ",");
        if (token) {
            memset (namebuffer, '\0', sizeof (namebuffer));
            name = stripQuotes (token, namebuffer);
            strcpy (nameArray [index ++], name);
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9296059_43140660_1_28
9296059_9296467_1_25
Title: read pixel value in bmp file 
----------------------------------------

unsigned char *readBMP (char *filename) {
    int i;
    FILE *f = fopen (filename, "rb");
    unsigned char info [54];
    fread (info, sizeof (unsigned char), 54, f);
    int width = *(int*) &info[18];
    int height = *(int*) &info[22];
    int heightSign = 1;
    if (height < 0) {
        heightSign = -1;
    }
    int size = 3 * width * abs (height);
    unsigned char * data = new unsigned char [size];
    fread (data, sizeof (unsigned char), size, f);
    fclose (f);
    if (heightSign == 1) {
        for (i = 0; i < size; i += 3) {
        }
    }
    return data;
}
----------------------------------------

unsigned char *readBMP (char *filename) {
    int i;
    FILE *f = fopen (filename, "rb");
    unsigned char info [54];
    fread (info, sizeof (unsigned char), 54, f);
    int width = *(int*) &info[18];
    int height = *(int*) &info[22];
    int size = 3 * width * height;
    unsigned char * data = new unsigned char [size];
    fread (data, sizeof (unsigned char), size, f);
    fclose (f);
    for (i = 0; i < size; i += 3) {
        unsigned char tmp = data[i];
        data[i] = data[i + 2];
        data[i + 2] = tmp;
    }
    return data;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9302681_30409481_5_23
9302681_32550362_1_10
Title: C: how to break apart a multi digit number into separate variables? 
----------------------------------------

void main () {
    int x, y, n = 0;
    scanf ("%d", & x);
    y = x;
    while (y != 0) {
        n += 1;
        y /= 10;
    }
    int i;
    for (i = ceil (pow (10, (n - 1))); i != 0; i /= 10)
        printf ("%d  ", (x / i) % 10);
}
----------------------------------------

int main () {
    long signed c = 0, z, a = 0, b = 1, d = 1;
    scanf ("%ld", & z);
    while (a++ < 2) {
        if (d++ == 1)
            z /= pow (10, 6);
        c += (z % 10) * b;
        z /= 10;
        b *= 10;
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9345981_9346020_11_31
9345981_9346287_4_37
Title: Ways to improve the following code 
----------------------------------------

int main (void) {
    char file1 [11], file2 [11];
    FILE *input1, *input2;
    printf ("Enter the name of the two files to be merged, separated by space: \n");
    fflush (stdout);
    scanf ("%10s %10s", file1, file2);
    input1 = fopen (file1, "r");
    input2 = fopen (file2, "r");
    if (!input1 || !input2)
        return 1;
    while (process_line (input1, input2, ' ') && process_line (input2, input1, 0))
        printf ("\n");
    fclose (input1);
    fclose (input2);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 3)
        return 1;
    FILE *fp, *fp2;
    char *line, *line2, buf [BUFSIZ];
    fp = fopen (argv[1], "r");
    if (!fp) {
        perror (argv [1]);
        return 0;
    }
    fp2 = fopen (argv[2], "r");
    if (!fp2) {
        perror (argv [2]);
        fclose (fp);
        return 0;
    }
    do {
        line = fgets (buf, BUFSIZ, fp);
        if (line)
            printf ("%s", line);
        line2 = fgets (buf, BUFSIZ, fp2);
        if (line2)
            printf ("%s", line2);
    }
    while (line || line2);
    fclose (fp);
    fclose (fp2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9352555_24670622_3_20
9352555_42527282_11_37
Title: Can I create an Array of Char pointers in C? 
----------------------------------------

int main (void) {
    char *CharPtr [3];
    char a [4] = "abc";
    char b [4] = "def";
    char c [4] = "ghi";
    CharPtr[0] = a;
    CharPtr[1] = b;
    CharPtr[2] = c;
    printf ("\n content of CharPtr[0] =%s", CharPtr [0]);
    printf ("\n content of CharPtr[1] =%s", CharPtr [1]);
    printf ("\n content of CharPtr[2] =%s\n", CharPtr [2]);
    printf (" \n content of char a[4]=%s", a);
    printf (" \n content of char b[4]=%s", b);
    printf (" \n content of char c[4]=%s\n", c);
}
----------------------------------------

int main () {
    char *iThink [10] = {"I am trying to grow, but it's a hard task to ", "accomplish. My father is short ", "my mother is even shorter than him, ", "what is the probability of me getting taller? ", "Well both my grandfather's were Six ", "Foot Five, and both my grandmother's ", "were over 5 foot 8 inches tall! If my ", "grandparent's genes point to my parents, and my ", "parent's genes point to mine, then I might have a chance ", "of being 6 foot. Do you know what I mean? "};
    int andy = 0;
    for (; andy < 10;) {
        thoughtAsAFunction (& iThink [andy]);
        ++andy;
    }
    printf (":-)\n");
    andy = 0;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9378593_32930566_114_143
9378593_9379775_131_157
Title: DBusWatch and DBusTimeout examples 
----------------------------------------

static dbus_bool_t add_timeout (DBusTimeout *t, void *data) {
    if (!dbus_timeout_get_enabled (t))
        return TRUE;
    int ms = dbus_timeout_get_interval (t);
    if (ms < 0 || ms > TIMEOUT_MAX_MS) {
        ms = TIMEOUT_MAX_MS;
        if (ms < 0 || ms > INT_MAX / 2 - 1) {
            ms = INT_MAX / 2 - 1;
        }
    }
    if (ms < 1) {
        ms = 1;
    }
    struct timeval tnow = {0, 0};
    gettimeofday (& tnow, NULL);
    unsigned int tnowms = TIME_TV_TO_MS (tnow);
    printf (" TIMEOUT: add dbus timeout %p value %u ms\n", t, ms);
    watched_timeout_start_tv = tnow;
    watched_timeout_setv = ms;
    watched_timeout_lastv = tnowms;
    watched_timeout = t;
    watched_chgevt_send (CHGEVT_ADD_TIMEOUT);
    return TRUE;
}
----------------------------------------

static dbus_bool_t add_timeout (DBusTimeout *t, void *data) {
    struct dbus_ctx *ctx = data;
    if (!dbus_timeout_get_enabled (t))
        return TRUE;
    logger (LOG_DEBUG "adding timeout %p\n", t);
    struct event *event = event_new (ctx->evbase, -1, EV_TIMEOUT | EV_PERSIST, handle_timeout, t);
    if (!event) {
        logger (LOG_ERROR "failed to allocate new event for timeout\n");
        return FALSE;
    }
    int ms = dbus_timeout_get_interval (t);
    struct timeval tv = {
        .tv_sec = ms / 1000,
        .tv_usec = (ms % 1000) * 1000,
    };
    event_add (event, & tv);
    dbus_timeout_set_data (t, event, NULL);
    return TRUE;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9378593_32930566_62_81
9378593_9379775_71_97
Title: DBusWatch and DBusTimeout examples 
----------------------------------------

static dbus_bool_t add_watch (DBusWatch *w, void *data) {
    if (!dbus_watch_get_enabled (w))
        return TRUE;
    int fd = dbus_watch_get_unix_fd (w);
    unsigned int flags = dbus_watch_get_flags (w);
    int old_rd_fd = watched_rd_fd;
    int old_wr_fd = watched_wr_fd;
    if (flags & DBUS_WATCH_READABLE)
        watched_rd_fd = fd;
    if (flags & DBUS_WATCH_WRITABLE)
        watched_wr_fd = fd;
    watched_watch = w;
    printf (" WATCH:    add dbus watch fd=%d watch=%p rd_fd=%d/%d wr_fd=%d/%d\n", fd, w, watched_rd_fd, old_rd_fd, watched_wr_fd, old_wr_fd);
    watched_chgevt_send (CHGEVT_ADD_WATCH);
    return TRUE;
}
----------------------------------------

static dbus_bool_t add_watch (DBusWatch *w, void *data) {
    if (!dbus_watch_get_enabled (w))
        return TRUE;
    struct dbus_ctx *ctx = data;
    ctx->extra = w;
    int fd = dbus_watch_get_unix_fd (w);
    unsigned int flags = dbus_watch_get_flags (w);
    short cond = EV_PERSIST;
    if (flags & DBUS_WATCH_READABLE)
        cond |= EV_READ;
    if (flags & DBUS_WATCH_WRITABLE)
        cond |= EV_WRITE;
    struct event *event = event_new (ctx->evbase, fd, cond, handle_watch, ctx);
    if (!event)
        return FALSE;
    event_add (event, NULL);
    dbus_watch_set_data (w, event, NULL);
    logger (LOG_DEBUG "added dbus watch fd=%d watch=%p cond=%d\n", fd, w, cond);
    return TRUE;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9381841_9382620_1_18
9381841_9765699_1_13
Title: Code to improve with neon 
----------------------------------------

unsigned desneon (unsigned v0 [8]) {
    unsigned outlo;
    __asm__ volatile ("vld1.32      {d2- d5}, [%1]          \n\t"
        "vld1.32      {d6- d9}, [%1]          \n\t"
        "vmul.s32     d0, d2, d6              \n\t"
        "vmla.s32     d0, d3, d7              \n\t"
        "vmla.s32     d0, d4, d8              \n\t"
        "vmla.s32     d0, d5, d9              \n\t"
        "vpadd.s32    d0, d0                  \n\t"
        "vmov         %0, r4, d0              \n\t"
        : "=r" (outlo)
        : "r" (v0)
        : "d0", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "r4"
    ) return outlo;
}
----------------------------------------

unsigned desneon (unsigned v0 [8]) {
    asm volatile ("vldmia      {q0-q1}, [%0]          \n\t"
        "vmul.u32    q0, q0, q0             \n\t"
        "vmla.u32    q0, q1, q1             \n\t"
        "vpaddl.u32  q0, q0                 \n\t"
        "vadd.u64    d0, d0, d1             \n\t"
        "vmov        r0, s0                 \n\t"
        :
        : "r" (v0)
        :
    )}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9413577_9413688_1_18
9413577_9413752_10_22
Title: How do I change a pointers value in a function in C 
----------------------------------------

insert (char *x, struct node **initialpointer, int numberofelements) {
    if (NULL == *initialpointer) {
        *initialpointer = malloc (sizeof (struct node));
        if (*initialpointer) {
            (*initialpointer)->word = x;
            (*initialpointer)->parent = NULL;
            (*initialpointer)->leftchild = NULL;
            (*initialpointer)->rightchild = NULL;
        }
    }
}
----------------------------------------

insert (char *x, struct node **initialpointer, int numberofelements) {
    struct node *B;
    B = (struct node *) malloc (sizeof (struct node));
    B->word = x;
    B->parent = NULL;
    B->leftchild = NULL;
    B->rightchild = NULL;
    printf ("%d", 12);
    if (*initialpointer == NULL) {
        *initialpointer = B;
        B->parent = NULL;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9433278_9433312_1_16
9433278_9433417_1_24
Title: C - Deleting whitespace inside a string 
----------------------------------------

void sortString (char phrase []) {
    int i, j;
    char temp [200];
    for (i = 0, j = 0; phrase[i] != '\0'; i++) {
        if (!(isspace (phrase[i]))) {
            temp[j++] = phrase[i];
        }
    }
    temp[j] = '\0';
    printf ("%s", temp);
}
----------------------------------------

void sortString (char phrase []) {
    int i = 0, j;
    char *temp = malloc (strlen (phrase) +1);
    if (temp == NULL) {
        perror ("A fatal error occured...\n");
        return;
    }
    for (j = 0; phrase[j]; j++) {
        if (!(isspace (phrase[j]))) {
            temp[i++] = phrase[j];
        }
    }
    temp[i] = 0;
    printf ("%s", temp);
    free (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9444476_9444513_45_67
9444476_9445083_5_44
Title: Get numbers separated by commas 
----------------------------------------

int main () {
    char s [] = "312 ,22 ,+12 ,-12 ,5331";
    int *int_list;
    size_t int_list_count = 0;
    printf ("s=[%s]\n\n", s);
    int_list = make_int_array (s, &int_list_count);
    if (int_list) {
        size_t i;
        for (i = 0; i < int_list_count; i++) {
            printf ("%d\n", * (int_list + i));
        }
        printf ("\n");
        free (int_list);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char sep = ',';
    char string [] = "  312 ,, 22 ,+12 ,-12 ,5331";
    char *str = string;
    int j = 0;
    while (*str) {
        printf ("str=%c\n", * str);
        if (*str == sep)
            j++;
        str++;
    }
    int n = j + 1;
    printf ("n=%d\n", n);
    long int *arr = malloc (n * sizeof (long int));
    char *endptr = NULL;
    str = string;
    j = 0;
    do {
        arr[j++] = strtol (str, &endptr, 10);
        if (*endptr != '\0') {
            while (*endptr != sep)
                endptr++;
            str = endptr + 1;
        }
    }
    while (j < n && *endptr);
    for (j = 0;
    j < n;
    j ++) {printf ("%d:%ld\n", j, arr [j]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9456058_9456136_6_24
9456058_9456218_1_16
Title: C programming good practice or not ? 
----------------------------------------

quadratic_roots_t quadratic_equation (double a, double b, double c) {
    quadratic_roots_t roots;
    double d;
    d = b * b - 4 * a * c;
    if (d < 0.0) {
        roots.num_roots = 0;
    }
    else if (d == 0.0) {
        roots.num_roots = 1;
        roots.roots[0] = -b / (2 * a);
    }
    else {
        roots.num_roots = 2;
        roots.roots[0] = (-b - sqrt (d)) / (2 * a);
        roots.roots[1] = (-b + sqrt (d)) / (2 * a);
    }
    return roots;
}
----------------------------------------

int quadratic_equation (double a, double b, double c, double *root_a, double *root_b) {
    double discriminant = ((b * b) - (4 * a * c));
    if (discriminant < 0) {
        return -1;
    }
    if (root_a != NULL) {
        *root_a = (-b + sqrt (discriminant)) / (2 * a);
    }
    if (root_b != NULL) {
        *root_b = (-b - sqrt (discriminant)) / (2 * a);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9456058_9456136_6_24
9456058_9456369_3_21
Title: C programming good practice or not ? 
----------------------------------------

quadratic_roots_t quadratic_equation (double a, double b, double c) {
    quadratic_roots_t roots;
    double d;
    d = b * b - 4 * a * c;
    if (d < 0.0) {
        roots.num_roots = 0;
    }
    else if (d == 0.0) {
        roots.num_roots = 1;
        roots.roots[0] = -b / (2 * a);
    }
    else {
        roots.num_roots = 2;
        roots.roots[0] = (-b - sqrt (d)) / (2 * a);
        roots.roots[1] = (-b + sqrt (d)) / (2 * a);
    }
    return roots;
}
----------------------------------------

enum QE_Status quadratic_equation (double a, double b, double c, double *r) {
    double discriminant;
    if (r == 0)
        return QE_NULL_POINTER;
    if (a == 0.0)
        return QE_NON_QUADRATIC;
    discriminant = (b * b) - (4 * a * c);
    if (discriminant < 0)
        return QE_COMPLEX_ROOTS;
    discriminant = sqrt (discriminant);
    r[0] = (-b + discriminant) / (2 * a);
    r[1] = (-b - discriminant) / (2 * a);
    return QE_OK;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9456058_9456218_1_16
9456058_9456369_3_21
Title: C programming good practice or not ? 
----------------------------------------

int quadratic_equation (double a, double b, double c, double *root_a, double *root_b) {
    double discriminant = ((b * b) - (4 * a * c));
    if (discriminant < 0) {
        return -1;
    }
    if (root_a != NULL) {
        *root_a = (-b + sqrt (discriminant)) / (2 * a);
    }
    if (root_b != NULL) {
        *root_b = (-b - sqrt (discriminant)) / (2 * a);
    }
    return 0;
}
----------------------------------------

enum QE_Status quadratic_equation (double a, double b, double c, double *r) {
    double discriminant;
    if (r == 0)
        return QE_NULL_POINTER;
    if (a == 0.0)
        return QE_NON_QUADRATIC;
    discriminant = (b * b) - (4 * a * c);
    if (discriminant < 0)
        return QE_COMPLEX_ROOTS;
    discriminant = sqrt (discriminant);
    r[0] = (-b + discriminant) / (2 * a);
    r[1] = (-b - discriminant) / (2 * a);
    return QE_OK;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9513764_10285210_11_56
9513764_10288931_1_30
Title: C - Find most frequent element in char array 
----------------------------------------

void main () {
    char string [300];
    gets (string);
    Alphabet Alph [300];
    int i = 0, j = 0;
    while (i <= strlen (string)) {
        while (j <= 300) {
            if (string[i] != Alph[j].letter) {
                Alph[i].letter = string[i];
                Alph[i].times = 1;
            }
            else {
                Alph[j].times++;
            }
            j++;
        }
        j = 0;
        i++;
    }
    int y, max = 0;
    char letter_max [0];
    for (y = 0; y < strlen (string); y++) {
        printf ("Letter: %c, Times: %d \n", Alph [y].letter, Alph [y].times);
        if (Alph[y].times > max) {
            max = Alph[y].times;
            letter_max[0] = Alph[y].letter;
        }
    }
    printf ("\n\n\t\tMost frequent letter: %c - %d times \n\n", letter_max [0], max);
}
----------------------------------------

void main () {
    int array [255] = {0};
    char str [] = "thequickbrownfoxjumpedoverthelazydog";
    int i, max, index;
    for (i = 0; str[i] != 0; i++) {
        ++array[str[i]];
    }
    max = array[0];
    index = 0;
    for (i = 0; str[i] != 0; i++) {
        if (array[str[i]] > max) {
            max = array[str[i]];
            index = i;
        }
    }
    printf ("The max character is: %c \n", str [index]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9554146_9554187_4_20
9554146_9554262_4_16
Title: c while loop stop before condition 
----------------------------------------

int main () {
    int i = 2, fibonacci = 0, fParcialone = 1, fParcialtwo = 0;
    printf ("The %2dst Fibonacci number is %3d\n", i - 1, fibonacci + 1);
    fibonacci = fParcialone + fParcialtwo;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
        fibonacci = fParcialone + fParcialtwo;
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1, fibonacci = 1, fParcialone = 1, fParcialtwo = 0;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = fParcialone + fParcialtwo;
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9554146_9554187_4_20
9554146_9554580_10_20
Title: c while loop stop before condition 
----------------------------------------

int main () {
    int i = 2, fibonacci = 0, fParcialone = 1, fParcialtwo = 0;
    printf ("The %2dst Fibonacci number is %3d\n", i - 1, fibonacci + 1);
    fibonacci = fParcialone + fParcialtwo;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
        fibonacci = fParcialone + fParcialtwo;
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1, fibonacci = 1;
    do {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = Fibonacci (++i);
    }
    while (fibonacci <= 100);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9554146_9554188_4_17
9554146_9554262_4_16
Title: c while loop stop before condition 
----------------------------------------

int main () {
    int i = 2, fibonacci = 0, fParcialone = 1, fParcialtwo = 0;
    printf ("The %2dst Fibonacci number is %3d\n", i - 1, fibonacci + 1);
    fibonacci = fParcialone + fParcialtwo;
    do {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
    }
    while ((fibonacci = fParcialone + fParcialtwo) <= 100);
    return 0;
}
----------------------------------------

int main () {
    int i = 1, fibonacci = 1, fParcialone = 1, fParcialtwo = 0;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = fParcialone + fParcialtwo;
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9554146_9554188_4_17
9554146_9554580_10_20
Title: c while loop stop before condition 
----------------------------------------

int main () {
    int i = 2, fibonacci = 0, fParcialone = 1, fParcialtwo = 0;
    printf ("The %2dst Fibonacci number is %3d\n", i - 1, fibonacci + 1);
    fibonacci = fParcialone + fParcialtwo;
    do {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
    }
    while ((fibonacci = fParcialone + fParcialtwo) <= 100);
    return 0;
}
----------------------------------------

int main () {
    int i = 1, fibonacci = 1;
    do {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = Fibonacci (++i);
    }
    while (fibonacci <= 100);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9554146_9554209_1_16
9554146_9554262_4_16
Title: c while loop stop before condition 
----------------------------------------

int main () {
    int i = 2, fibonacci = 0, fParcialone = 1, fParcialtwo = 0;
    printf ("The %2dst Fibonacci number is %3d\n", i - 1, fibonacci + 1);
    fibonacci = fParcialone + fParcialtwo;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        fibonacci = fParcialone + fParcialtwo;
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1, fibonacci = 1, fParcialone = 1, fParcialtwo = 0;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = fParcialone + fParcialtwo;
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9554146_9554209_1_16
9554146_9554580_10_20
Title: c while loop stop before condition 
----------------------------------------

int main () {
    int i = 2, fibonacci = 0, fParcialone = 1, fParcialtwo = 0;
    printf ("The %2dst Fibonacci number is %3d\n", i - 1, fibonacci + 1);
    fibonacci = fParcialone + fParcialtwo;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        fibonacci = fParcialone + fParcialtwo;
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1, fibonacci = 1;
    do {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = Fibonacci (++i);
    }
    while (fibonacci <= 100);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9554146_9554262_4_16
9554146_9554580_10_20
Title: c while loop stop before condition 
----------------------------------------

int main () {
    int i = 1, fibonacci = 1, fParcialone = 1, fParcialtwo = 0;
    while (fibonacci <= 100) {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = fParcialone + fParcialtwo;
        fParcialtwo = fParcialone;
        fParcialone = fibonacci;
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1, fibonacci = 1;
    do {
        printf ("The %2dst Fibonacci number is %3d\n", i, fibonacci);
        fibonacci = Fibonacci (++i);
    }
    while (fibonacci <= 100);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9593283_9593571_9_42
9593283_9593578_8_62
Title: Create new processes and expect output 
----------------------------------------

int main () {
    pid_t writer;
    pid_t reader;
    writer = fork ();
    if (writer == -1) {
        fprintf (stderr, "can't fork, error %d\n", errno);
        exit (1);
    }
    if (writer == 0) {
        printf ("Writer process created.\n");
        reader = fork ();
        if (reader == -1) {
            fprintf (stderr, "can't fork, error %d\n", errno);
            exit (1);
        }
        if (reader == 0) {
            printf ("Reader process created.\n");
            kill (reader);
            printf ("Reader was successfully murdered.\n");
        }
        kill (writer);
    }
    wait ();
    printf ("Writer killed.\n");
    return 0;
}
----------------------------------------

int main () {
    pid_t writer;
    pid_t reader;
    char buf;
    int pipefd [2] = {-1, -1};
    const char *pcszTextToChild = "Text sent to child";
    writer = fork ();
    if (writer == -1) {
        fprintf (stderr, "can't fork, error %d\n", errno);
        exit (1);
    }
    if (writer == 0) {
        printf ("Writer process created.\n");
        if (pipe (pipefd) == -1) {
            perror ("pipe");
            exit (EXIT_FAILURE);
        }
        reader = fork ();
        if (reader == -1) {
            fprintf (stderr, "can't fork, error %d\n", errno);
            exit (1);
        }
        if (reader == 0) {
            close (pipefd [1]);
            printf ("Reader process created.\n\tReading: ");
            fflush (stdout);
            while (read (pipefd[0], &buf, 1) > 0)
                write (STDOUT_FILENO, &buf, 1);
            write (STDOUT_FILENO, "\n", 1);
            close (pipefd [0]);
            printf ("Exiting reader process.\n");
            exit (EXIT_SUCCESS);
        }
        else {
            close (pipefd [0]);
            write (pipefd [1], pcszTextToChild, strlen (pcszTextToChild));
            close (pipefd [1]);
            wait (NULL);
            printf ("Exiting writer process.\n");
            exit (EXIT_SUCCESS);
        }
    }
    wait ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9593434_9593563_9_19
9593434_9593922_22_37
Title: using fork() function to make the child and parent process share memory 
----------------------------------------

int main (int argc, char *argv []) {
    pid_t pid = fork ();
    if (0 == pid) {
        strcpy (buffer, "I am the child.");
    }
    else {
        waitpid (pid, 0, 0);
        printf ("%s", buffer);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int j;
    pid_t pid = fork ();
    if (pid == 0) {
        sequence.sequence_size = argc;
        fibonacci (argc);
    }
    else {
        waitpid (pid, 0, 0);
        for (j = 0; j <= sequence.sequence_size; j++)
            printf ("%d\n", sequence.fib_sequence[j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9613960_25055600_1_30
9613960_9614379_40_59
Title: Removing Duplicates from an Array using C 
----------------------------------------

int main () {
    int a [10], b [10], i, n, j = 0, pos = 0;
    printf ("\n enter a n value ");
    scanf ("%d", & n);
    printf ("\n enter a array value");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    for (i = 0; i < n; i++) {
        if (check (a[i], pos, b) == 0) {
            b[j] = a[i];
            j++;
            pos++;
        }
    }
    printf ("\n after updating array");
    for (j = 0; j < pos; j++) {
        printf ("\n %d", b [j]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int a [11] = {1, 2, 3, 4, 5, 11, 11, 11, 11, 16, 16};
    int a_size = sizeof (a) / sizeof (a[0]);
    print (a, a_size, "Before", "a");
    a_size = compact (a, a_size);
    print (a, a_size, "After", "a");
    int b [11] = {11, 1, 11, 3, 16, 2, 5, 11, 4, 11, 16};
    int b_size = sizeof (b) / sizeof (b[0]);
    print (b, b_size, "Before", "b");
    qsort (b, b_size, sizeof (b [0]), intcmp);
    print (b, b_size, "Sorted", "b");
    b_size = compact (b, b_size);
    print (b, b_size, "After", "b");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9613960_25055600_1_30
9613960_9615396_3_28
Title: Removing Duplicates from an Array using C 
----------------------------------------

int main () {
    int a [10], b [10], i, n, j = 0, pos = 0;
    printf ("\n enter a n value ");
    scanf ("%d", & n);
    printf ("\n enter a array value");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    for (i = 0; i < n; i++) {
        if (check (a[i], pos, b) == 0) {
            b[j] = a[i];
            j++;
            pos++;
        }
    }
    printf ("\n after updating array");
    for (j = 0; j < pos; j++) {
        printf ("\n %d", b [j]);
    }
    return 0;
}
----------------------------------------

int main () {
    bool duplicate = false;
    int a [11] = {1, 2, 3, 4, 5, 11, 11, 11, 11, 16, 16};
    int b [11];
    int index = 0;
    for (int i = 0; i < arraysize (a); i++) {
        for (int j = 0; j < index; j++) {
            if (a[i] == b[j]) {
                duplicate = true;
                break;
            }
        }
        if (!duplicate) {
            b[index] = a[i];
            index++;
        }
        duplicate = false;
    }
    int c [index];
    for (int k = 0; k < index; k++) {
        c[k] = b[k];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9613960_25055600_1_30
9613960_9958072_38_61
Title: Removing Duplicates from an Array using C 
----------------------------------------

int main () {
    int a [10], b [10], i, n, j = 0, pos = 0;
    printf ("\n enter a n value ");
    scanf ("%d", & n);
    printf ("\n enter a array value");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    for (i = 0; i < n; i++) {
        if (check (a[i], pos, b) == 0) {
            b[j] = a[i];
            j++;
            pos++;
        }
    }
    printf ("\n after updating array");
    for (j = 0; j < pos; j++) {
        printf ("\n %d", b [j]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int a [] = {31, 44, 44, 67, 67, 99, 99, 100, 101};
    int k = remove_dups (a, 9);
    assert (k == 3);
    for (int i = 0; i < k; i++)
        printf ("%d ", a[i]);
    printf ("\n\n");
    int b [] = {-5, -3, -2, -2, -2, -2, 1, 3, 5, 5, 18, 18};
    k = remove_dups (b, 12);
    assert (k == 4);
    for (int i = 0; i < k; i++)
        printf ("%d ", b[i]);
    printf ("\n\n");
    int c [] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    k = remove_dups (c, 9);
    assert (k == 9);
    for (int i = 0; i < k; i++)
        printf ("%d ", c[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9613960_9614379_40_59
9613960_9615396_3_28
Title: Removing Duplicates from an Array using C 
----------------------------------------

int main (void) {
    int a [11] = {1, 2, 3, 4, 5, 11, 11, 11, 11, 16, 16};
    int a_size = sizeof (a) / sizeof (a[0]);
    print (a, a_size, "Before", "a");
    a_size = compact (a, a_size);
    print (a, a_size, "After", "a");
    int b [11] = {11, 1, 11, 3, 16, 2, 5, 11, 4, 11, 16};
    int b_size = sizeof (b) / sizeof (b[0]);
    print (b, b_size, "Before", "b");
    qsort (b, b_size, sizeof (b [0]), intcmp);
    print (b, b_size, "Sorted", "b");
    b_size = compact (b, b_size);
    print (b, b_size, "After", "b");
    return 0;
}
----------------------------------------

int main () {
    bool duplicate = false;
    int a [11] = {1, 2, 3, 4, 5, 11, 11, 11, 11, 16, 16};
    int b [11];
    int index = 0;
    for (int i = 0; i < arraysize (a); i++) {
        for (int j = 0; j < index; j++) {
            if (a[i] == b[j]) {
                duplicate = true;
                break;
            }
        }
        if (!duplicate) {
            b[index] = a[i];
            index++;
        }
        duplicate = false;
    }
    int c [index];
    for (int k = 0; k < index; k++) {
        c[k] = b[k];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9613960_9614379_40_59
9613960_9958072_38_61
Title: Removing Duplicates from an Array using C 
----------------------------------------

int main (void) {
    int a [11] = {1, 2, 3, 4, 5, 11, 11, 11, 11, 16, 16};
    int a_size = sizeof (a) / sizeof (a[0]);
    print (a, a_size, "Before", "a");
    a_size = compact (a, a_size);
    print (a, a_size, "After", "a");
    int b [11] = {11, 1, 11, 3, 16, 2, 5, 11, 4, 11, 16};
    int b_size = sizeof (b) / sizeof (b[0]);
    print (b, b_size, "Before", "b");
    qsort (b, b_size, sizeof (b [0]), intcmp);
    print (b, b_size, "Sorted", "b");
    b_size = compact (b, b_size);
    print (b, b_size, "After", "b");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int a [] = {31, 44, 44, 67, 67, 99, 99, 100, 101};
    int k = remove_dups (a, 9);
    assert (k == 3);
    for (int i = 0; i < k; i++)
        printf ("%d ", a[i]);
    printf ("\n\n");
    int b [] = {-5, -3, -2, -2, -2, -2, 1, 3, 5, 5, 18, 18};
    k = remove_dups (b, 12);
    assert (k == 4);
    for (int i = 0; i < k; i++)
        printf ("%d ", b[i]);
    printf ("\n\n");
    int c [] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    k = remove_dups (c, 9);
    assert (k == 9);
    for (int i = 0; i < k; i++)
        printf ("%d ", c[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9613960_9615396_3_28
9613960_9958072_38_61
Title: Removing Duplicates from an Array using C 
----------------------------------------

int main () {
    bool duplicate = false;
    int a [11] = {1, 2, 3, 4, 5, 11, 11, 11, 11, 16, 16};
    int b [11];
    int index = 0;
    for (int i = 0; i < arraysize (a); i++) {
        for (int j = 0; j < index; j++) {
            if (a[i] == b[j]) {
                duplicate = true;
                break;
            }
        }
        if (!duplicate) {
            b[index] = a[i];
            index++;
        }
        duplicate = false;
    }
    int c [index];
    for (int k = 0; k < index; k++) {
        c[k] = b[k];
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int a [] = {31, 44, 44, 67, 67, 99, 99, 100, 101};
    int k = remove_dups (a, 9);
    assert (k == 3);
    for (int i = 0; i < k; i++)
        printf ("%d ", a[i]);
    printf ("\n\n");
    int b [] = {-5, -3, -2, -2, -2, -2, 1, 3, 5, 5, 18, 18};
    k = remove_dups (b, 12);
    assert (k == 4);
    for (int i = 0; i < k; i++)
        printf ("%d ", b[i]);
    printf ("\n\n");
    int c [] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    k = remove_dups (c, 9);
    assert (k == 9);
    for (int i = 0; i < k; i++)
        printf ("%d ", c[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9629473_41250555_98_115
9629473_9629518_4_16
Title: C - extracting words from string 
----------------------------------------

int main (int argc, char const *argv []) {
    char c_keywords [300] = "auto else    long    switch\
    break\t   enum \t register    typedef\
    \ncase    extern,  return  union\
    ?char    float.   short   unsigned\
    const   !for signed  void\
    continue    goto    sizeof  volatile\
    .default???? if  static  while\
    do  int struct,,,,  _Packed\
    double.......";
    ListWithLength *list_with_length = getWords (c_keywords);
    printListWithLength (list_with_length);
    return 0;
}
----------------------------------------

int main () {
    char str [] = "- This, a sample string.";
    char *pch;
    printf ("Splitting string \"%s\" into tokens:\n", str);
    pch = strtok (str, " ,.-");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, " ,.-");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_31776664_4_42
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_38137910_2_26
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_38768379_3_17
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_44229222_1_43
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_9630752_16_68
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_9630847_19_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_9631577_2_34
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_22033363_36_46
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char *s = "this is a test";
    char *r = NULL;
    int len = strlen (s);
    cout << len << endl;
    r = stringrev (s, len);
    cout << r << endl;
    sentrev (r, len);
    return 0;
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_31776664_4_42
9630673_38137910_2_26
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_31776664_4_42
9630673_38768379_3_17
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_31776664_4_42
9630673_44229222_1_43
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_31776664_4_42
9630673_9630752_16_68
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_31776664_4_42
9630673_9630847_19_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_31776664_4_42
9630673_9631577_2_34
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_31776664_4_42
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char st [50], rst [50];
    printf ("Enter the sentence...\n");
    gets (st);
    int len = strlen (st), p;
    int j = -1, k;
    p = len;
    for (int i = (len - 1); i >= 0; i--) {
        if (st[i] == ' ') {
            for (k = i + 1; k < p; k++) {
                rst[++j] = st[k];
            }
            j++;
            rst[j] = ' ';
            printf ("\n");
            p = i;
        }
        else if (i == 0) {
            for (k = i; k < p; k++) {
                rst[++j] = st[k];
            }
        }
    }
    printf ("Now reversing the sentence...\n");
    puts (rst);
    return 0;
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38137910_2_26
9630673_38768379_3_17
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38137910_2_26
9630673_44229222_1_43
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38137910_2_26
9630673_9630752_16_68
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38137910_2_26
9630673_9630847_19_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38137910_2_26
9630673_9631577_2_34
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38137910_2_26
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char str [200];
    int i, j, k;
    scanf ("%[^\n]s", & str);
    for (i = 0; str[i] != '\0'; i++)
        ;
    i = i - 1;
    for (j = i; j >= 0; j--) {
        if ((str[j]) == ' ') {
            for (k = j + 1; k <= i; k++) {
                printf ("%c", str [k]);
            }
            i = j - 1;
            printf (" ");
        }
    }
    for (k = 0; k <= i; k++) {
        printf ("%c", str [k]);
    }
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38768379_3_17
9630673_44229222_1_43
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38768379_3_17
9630673_9630752_16_68
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38768379_3_17
9630673_9630847_19_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38768379_3_17
9630673_9631577_2_34
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_38768379_3_17
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main () {
    char s [20] [20];
    int i = 0, length = -1;
    for (i = 0;; i++) {
        scanf ("%s", s [i]);
        length++;
        if (getchar () == '\n')
            break;
    }
    for (i = length; i >= 0; i--)
        printf ("%s ", s[i]);
    return 0;
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_44229222_1_43
9630673_9630752_16_68
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_44229222_1_43
9630673_9630847_19_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_44229222_1_43
9630673_9631577_2_34
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_44229222_1_43
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

using stack int main () {
std :
    : stack < string > st;
    char *words = "this is a test";
    char *temp = (char *) calloc (1, sizeof (*temp));
    int size1 = strlen (words);
    int k2 = 0;
    int k3 = 0;
    for (int i = 0; i <= size1; i++) {
        temp[k2] = words[i];
        k2++;
        if (words[i] == ' ') {
            k3++;
            if (k3 == 1)
                temp[k2 - 1] = '\0';
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
        }
        if (words[i] == '\0') {
            temp[k2] = '\0';
            st.push (temp);
            k2 = 0;
            break;
        }
    }
    while (! st.empty ()) {printf ("%s", st.top ().c_str ());
    st.pop ();
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_9630752_16_68
9630673_9630847_19_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_9630752_16_68
9630673_9631577_2_34
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_9630752_16_68
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main (void) {
    char str [MAX_BUF];
    int end_anchor, start_ptr;
    int state;
    printf ("\nEnter a string: ");
    scanf (" %[^\n]", str);
    start_ptr = strlen (str) - 1;
    end_anchor = start_ptr;
    state = 0;
    while (start_ptr >= -1) {
        switch (state) {
        case 0 :
            if ((!isspace (str[start_ptr]) && (start_ptr >= 0))) {
                start_ptr--;
            }
            else {
                state = 1;
            }
            break;
        case 1 :
            show_string (str, start_ptr +1, end_anchor);
            state = 2;
            start_ptr--;
            printf (" ");
            break;
        case 2 :
            if (!isspace (str[start_ptr])) {
                state = 0;
                end_anchor = start_ptr;
            }
            else {
                start_ptr--;
            }
            break;
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_9630847_19_33
9630673_9631577_2_34
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_9630847_19_33
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = " one two three  four five six ";
    int len = strlen (str);
    char *lastWord = findLastWord (str, &len);
    while (lastWord != NULL) {
        printf ("%s\n", lastWord);
        lastWord = findLastWord (str, &len);
    }
    if (len > 1)
        printf ("%s\n", str);
    return 0;
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9630673_9631577_2_34
9630673_9634684_17_33
Title: how to perform reversing a sentence Word by Word in C? 
----------------------------------------

int main (int argc, char *argv []) {
    int i, j;
    char words [] = "this is a test";
    int L = strlen (words);
    for (i = 0; i < L; ++i) {
        int wordstart = -1;
        int wordend = -1;
        if (words[i] != ' ') {
            wordstart = i;
            for (j = wordstart; j < L; ++j) {
                if (words[j] == ' ') {
                    wordend = j - 1;
                    break;
                }
            }
            if (wordend == -1)
                wordend = L - 1;
            for (j = wordstart; j <= (wordend + wordstart) / 2; ++j) {
                char temp = words[j];
                words[j] = words[wordend - (j - wordstart)];
                words[wordend - (j - wordstart)] = temp;
            }
            i = wordend;
        }
    }
    printf ("reversed string is %s:", words);
    return 0;
}
----------------------------------------

int main (void) {
    char sentence [] = "one two three four five";
    size_t pos, len;
    printf ("Before:%s\n", sentence);
    for (pos = len = 0; sentence[pos]; pos += len) {
        pos += strspn (sentence +pos, " \t\n");
        len = strcspn (sentence +pos, " \t\n");
        reverse (sentence + pos, len);
    }
    reverse (sentence, pos);
    printf ("After:%s\n", sentence);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9631722_9631770_5_21
9631722_9631789_5_17
Title: printing a string 
----------------------------------------

int main () {
    char *s = "this is a string";
    char *space_ptr = strchr (s, ' ');
    if (0 != space_ptr) {
        printf ("%.*s\n", space_ptr - s, s);
    }
    else {
        printf ("%s\n", s);
    }
    return 0;
}
----------------------------------------

int main () {
    const char *f = "this is a string";
std :
    : stringstream s (f);
std :
    : istream_iterator < std : : string > beg (s);
std :
    : istream_iterator < std : : string > end;
std :
    : advance (beg, 3);
    if (beg != end)
    std :
    : cout << * beg << std : : endl;
    else
    std :
    : cerr << "too far" << std : : endl;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9665425_18254305_3_26
9665425_25339712_5_40
Title: C program for removing duplicate characters in a string...Shows run time error 
----------------------------------------

int main () {
    int i = 0, j, arr [26] = {}, temp;
    char s [10], arr1 [10], *p;
    printf ("Enter the string\n");
    scanf ("%s", s);
    p = s;
    while (*p != '\0') {
        temp = ((*p) > 92) ? (*p) - 'a' : (*p) - 'A';
        if (arr[temp] == 0) {
            arr1[i] = temp + 'a';
            arr[temp] = 1;
            i++;
        }
        p++;
    }
    for (j = 0; j < i; j++) {
        printf ("%c", arr1 [j]);
    }
    return 0;
}
----------------------------------------

void main () {
    clrscr ();
    char *str;
    int count = 0;
    cout << "enter the string which have repetative characters" << endl;
    cin >> str;
    char *str2;
    int m = 0;
    for (int i = 0; i <= strlen (str); i++) {
        char ch = str[i];
        if (i == 0) {
            str2[m] = str[i];
            m++;
        }
        for (int j = 0; j <= strlen (str2); j++) {
            if (ch == str2[j])
                count++;
        }
        if (count == 0) {
            str2[m] = str[i];
            m++;
        }
        count = 0;
        if (i == strlen (str))
            str2[m] = '\0';
    }
    puts (str2);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9665425_9665906_1_33
9665425_9668842_1_21
Title: C program for removing duplicate characters in a string...Shows run time error 
----------------------------------------

char *removeDuplicate (char str []) {
    int i = 0, j;
    char ch;
    int repIndex = 0;
    int temp = 0;
    printf ("\nstr is %s", str);
    while ((ch = str[i++]) != '\0') {
        j = i;
        printf ("\n----ch = %c----", ch);
        while (str[j] != '\0') {
            printf ("\n--------Checking whether %c =  %c \n", str [j], ch);
            repIndex = j;
            if (ch == str[repIndex]) {
                printf ("\n------------Yes");
                while (str[repIndex] != '\0') {
                    printf ("\nRemoving %c %d \n", str [j]);
                    temp = repIndex;
                    str[temp] = str[++repIndex];
                }
            }
            else {
                j++;
            }
        }
    }
    return str;
}
----------------------------------------

char *removeDuplicate (char str []) {
    int i = 0, j;
    char ch;
    while ((ch = str[i++]) != '\0') {
        j = i;
        while (str[j] != '\0') {
            if (ch == str[j]) {
                while (str[j] != '\0')
                    str[j] = str[++j];
                i--;
                break;
            }
            j++;
        }
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9685391_9685443_8_20
9685391_9685546_3_19
Title: Getting words from text file to an array 
----------------------------------------

main () {
    int i;
    string array [4];
    FILE *my;
    my = fopen ("my.txt", "r");
    for (i = 0; i < 4; i++) {
        fscanf (data, "%" MAX_CHARS_STR "s", & array [i]);
        ungetc ('x', data);
        fscanf (data, "%*s");
    }
    fclose (my);
}
----------------------------------------

main () {
    int i;
    string array [4];
    for (i = 0; i < 4; i++) {
        if ((array[i] = (char *) (malloc (sizeof (char) * LEN))) == NULL) {
            printf ("malloc failed");
            return 1;
        }
    }
    FILE *my;
    my = fopen ("my.txt", "r");
    for (i = 0; i < 4; i++)
        fscanf (data, "%s", &array[i]);
    fclose (my);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9699406_9699869_19_62
9699406_9699908_16_47
Title: reading structure within a structure from a file 
----------------------------------------

int main () {
    {
        FILE *fp;
        B n;
        n.m.a = 12;
        n.m.b = 'a';
        n.c = 13;
        n.d = 'b';
        fp = fopen ("x.dat", "wb");
        assert (0 != fp);
        if (1 != fwrite (&n, sizeof (B), 1, fp)) {
            fprintf (stderr, "Failed to fwrite(): %s\n", strerror (errno));
            return 1;
        }
        fclose (fp);
        printf ("wrote: ");
        print_B (& n);
        printf ("\n");
    }
    {
        FILE *fp;
        B q;
        fp = fopen ("x.dat", "rb");
        assert (0 != fp);
        if (1 != fread (&q, sizeof (B), 1, fp)) {
            fprintf (stderr, "Failed to fread(): %s\n", strerror (errno));
            return 1;
        }
        fclose (fp);
        printf ("read : ");
        print_B (& q);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fd;
    B n, q;
    n.m.a = 12;
    n.m.b = 'a';
    n.c = 13;
    n.d = 'b';
    if ((fd = fopen ("test.dat", "wb")) == NULL) {
        fprintf (stderr, "Error opening file: %s\n", strerror (errno));
        exit (- 1);
    }
    fwrite (& n, sizeof (n), 1, fd);
    fclose (fd);
    if ((fd = fopen ("test.dat", "rb")) == NULL) {
        fprintf (stderr, "Error opening file: %s\n", strerror (errno));
        exit (- 1);
    }
    fread (& q, sizeof (q), 1, fd);
    fclose (fd);
    printf ("n.m.a: %d, q.m.a: %d; n.m.b: %c, q.m.b: %c; n.c: %d, q.c: %d; n.d: %c, q.d: %c\n", n.m.a, q.m.a, n.m.b, q.m.b, n.c, q.c, n.d, q.d);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9731737_47056959_7_30
9731737_9732006_6_23
Title: Stop only if some key is pressed in C 
----------------------------------------

int main () {
    int x, y;
    for (;;) {
        x = poll (&attention, 1, 100);
        if (x < 0) {
            printf ("problem %d\n", errno);
            break;
        }
        else if (x) {
            printf ("you rang %x ?", x);
            y = getc (stdin);
            printf (" %c of course\n", y);
            if (y == '.')
                break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int m;
    clrscr ();
    do {
        if (kbhit ()) {
            if ((m = getch ()) == 97) {
                printf ("Key a is pressed....\n");
            }
        }
    }
    while (1);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9731737_47056959_7_30
9731737_9732541_8_40
Title: Stop only if some key is pressed in C 
----------------------------------------

int main () {
    int x, y;
    for (;;) {
        x = poll (&attention, 1, 100);
        if (x < 0) {
            printf ("problem %d\n", errno);
            break;
        }
        else if (x) {
            printf ("you rang %x ?", x);
            y = getc (stdin);
            printf (" %c of course\n", y);
            if (y == '.')
                break;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    fd_set readfds;
    struct timeval tv;
    int ch;
    int bool, ret;
    FD_ZERO (& readfds);
    bool = 1;
    while (bool) {
        FD_SET (STDIN_FILENO, & readfds);
        tv.tv_sec = 0;
        tv.tv_usec = 0;
        ret = select (STDIN_FILENO +1, &readfds, NULL, NULL, &tv);
        if (ret < 0) {
            perror ("select error");
            exit (1);
        }
        else if (ret == 0) {
        }
        else if (FD_ISSET (STDIN_FILENO, &readfds)) {
            ch = fgetc (stdin);
            if (ch == 'q') {
                bool = 0;
            }
        }
        sleep (1);
        fprintf (stderr, ".");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9731737_9732006_6_23
9731737_9732541_8_40
Title: Stop only if some key is pressed in C 
----------------------------------------

int main () {
    int m;
    clrscr ();
    do {
        if (kbhit ()) {
            if ((m = getch ()) == 97) {
                printf ("Key a is pressed....\n");
            }
        }
    }
    while (1);
    getch ();
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    fd_set readfds;
    struct timeval tv;
    int ch;
    int bool, ret;
    FD_ZERO (& readfds);
    bool = 1;
    while (bool) {
        FD_SET (STDIN_FILENO, & readfds);
        tv.tv_sec = 0;
        tv.tv_usec = 0;
        ret = select (STDIN_FILENO +1, &readfds, NULL, NULL, &tv);
        if (ret < 0) {
            perror ("select error");
            exit (1);
        }
        else if (ret == 0) {
        }
        else if (FD_ISSET (STDIN_FILENO, &readfds)) {
            ch = fgetc (stdin);
            if (ch == 'q') {
                bool = 0;
            }
        }
        sleep (1);
        fprintf (stderr, ".");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
980702_3246079_22_32
980702_984636_1_11
Title: Efficient (cycles wise) algorithm to compute modulo 25? 
----------------------------------------

int mod25 (int x) {
    int y = table0[x & 0xFF];
    x >>= 8;
    y += table1[x & 0xFF];
    x >>= 8;
    y += table2[x & 0xFF];
    x >>= 8;
    y += table3[x & 0xFF];
    y = table0[y];
    return y;
}
----------------------------------------

int mod25 (int x) {
    static int divisors [] = {2147483625, 244140625, 9765625, 390625, 15625, 625, 25};
    int i;
    for (i = 0; i < sizeof (divisors) / sizeof (int); i++) {
        int divisor = divisors[i];
        while (x >= divisor) {
            x -= divisor;
        }
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
980702_3246079_22_32
980702_988313_1_31
Title: Efficient (cycles wise) algorithm to compute modulo 25? 
----------------------------------------

int mod25 (int x) {
    int y = table0[x & 0xFF];
    x >>= 8;
    y += table1[x & 0xFF];
    x >>= 8;
    y += table2[x & 0xFF];
    x >>= 8;
    y += table3[x & 0xFF];
    y = table0[y];
    return y;
}
----------------------------------------

int mod25 (int x) {
    if (x >= 1677721600)
        x -= 1677721600;
    if (x >= 838860800)
        x -= 838860800;
    if (x >= 419430400)
        x -= 419430400;
    if (x >= 209715200)
        x -= 209715200;
    if (x >= 104857600)
        x -= 104857600;
    if (x >= 52428800)
        x -= 52428800;
    if (x >= 26214400)
        x -= 26214400;
    if (x >= 13107200)
        x -= 13107200;
    if (x >= 6553600)
        x -= 6553600;
    if (x >= 3276800)
        x -= 3276800;
    if (x >= 1638400)
        x -= 1638400;
    if (x >= 819200)
        x -= 819200;
    if (x >= 409600)
        x -= 409600;
    if (x >= 204800)
        x -= 204800;
    if (x >= 102400)
        x -= 102400;
    if (x >= 51200)
        x -= 51200;
    if (x >= 25600)
        x -= 25600;
    if (x >= 12800)
        x -= 12800;
    if (x >= 6400)
        x -= 6400;
    if (x >= 3200)
        x -= 3200;
    if (x >= 1600)
        x -= 1600;
    if (x >= 800)
        x -= 800;
    if (x >= 400)
        x -= 400;
    if (x >= 200)
        x -= 200;
    if (x >= 100)
        x -= 100;
    if (x >= 50)
        x -= 50;
    if (x >= 25)
        x -= 25;
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
980702_980783_1_15
980702_980903_1_14
Title: Efficient (cycles wise) algorithm to compute modulo 25? 
----------------------------------------

int mod (int n, int d) {
    int dx = d;
    while (((dx << 1) >> 1) == dx)
        dx <<= 1;
    while (dx >= d) {
        while (n >= dx)
            n -= dx;
        dx >>= 1;
    }
    return n;
}
----------------------------------------

int mod (int a, int b) {
    int s = b;
    while (s <= a) {
        s <<= 1;
    }
    int r = a;
    while (r >= b) {
        s >>= 1;
        if (s <= r) {
            r -= s;
        }
    }
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
980702_984636_1_11
980702_988313_1_31
Title: Efficient (cycles wise) algorithm to compute modulo 25? 
----------------------------------------

int mod25 (int x) {
    static int divisors [] = {2147483625, 244140625, 9765625, 390625, 15625, 625, 25};
    int i;
    for (i = 0; i < sizeof (divisors) / sizeof (int); i++) {
        int divisor = divisors[i];
        while (x >= divisor) {
            x -= divisor;
        }
    }
    return x;
}
----------------------------------------

int mod25 (int x) {
    if (x >= 1677721600)
        x -= 1677721600;
    if (x >= 838860800)
        x -= 838860800;
    if (x >= 419430400)
        x -= 419430400;
    if (x >= 209715200)
        x -= 209715200;
    if (x >= 104857600)
        x -= 104857600;
    if (x >= 52428800)
        x -= 52428800;
    if (x >= 26214400)
        x -= 26214400;
    if (x >= 13107200)
        x -= 13107200;
    if (x >= 6553600)
        x -= 6553600;
    if (x >= 3276800)
        x -= 3276800;
    if (x >= 1638400)
        x -= 1638400;
    if (x >= 819200)
        x -= 819200;
    if (x >= 409600)
        x -= 409600;
    if (x >= 204800)
        x -= 204800;
    if (x >= 102400)
        x -= 102400;
    if (x >= 51200)
        x -= 51200;
    if (x >= 25600)
        x -= 25600;
    if (x >= 12800)
        x -= 12800;
    if (x >= 6400)
        x -= 6400;
    if (x >= 3200)
        x -= 3200;
    if (x >= 1600)
        x -= 1600;
    if (x >= 800)
        x -= 800;
    if (x >= 400)
        x -= 400;
    if (x >= 200)
        x -= 200;
    if (x >= 100)
        x -= 100;
    if (x >= 50)
        x -= 50;
    if (x >= 25)
        x -= 25;
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9818807_9819040_4_19
9818807_9819076_1_16
Title: replace two consecutive spaces with one space in c 
----------------------------------------

int main () {
    char s [] = "a string with two  spaces";
    char *two_spaces_ptr = strstr (s, "  ");
    printf ("[%s]\n", s);
    if (two_spaces_ptr) {
        memmove (two_spaces_ptr + 1, two_spaces_ptr + 2, strlen (two_spaces_ptr + 2) + 1);
    }
    printf ("[%s]\n", s);
    return 0;
}
----------------------------------------

int main () {
    char *str = "This  is a  wonderful world. Let's  have a   good  time here.";
    int len = strlen (str);
    char *result = (char *) malloc (len);
    int j = 0;
    for (int i = 0; i < len; i++) {
        if (str[i] == ' ' && str[i - 1] == ' ') {
            i++;
        }
        result[j++] = str[i];
    }
    result[j] = '\0';
    printf ("%s\n", result);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9837506_9837560_8_26
9837506_9837561_1_11
Title: Reading unknown number of structs from file - C 
----------------------------------------

int main (void) {
    tStock book [10];
    size_t num, i;
    FILE *fptr = fopen ("stock.dat", "rb");
    if (fptr == NULL) {
        num = 0;
    }
    else {
        num = fread (book, sizeof (*book), sizeof (book) / sizeof (*book), fptr);
        fclose (fptr);
    }
    printf ("Read %d items\n", num);
    for (i = 0; i < num; i++) {
        printf ("   Item %d is %s, %d\n", book [i].name, book [i].stock);
    }
    return 0;
}
----------------------------------------

int main (void) {
    stock books [MAX_BOOKS];
    size_t cnt_books = 0;
    FILE *fptr;
    fptr = fopen ("stock.dat", "rb");
    cnt_books = fread (books, sizeof (struct stock), MAX_BOOKS, fptr);
    fclose (fptr);
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30774758_30775147_2_14
30774758_30775742_7_41
Title: How to add a string to a 2D array in C 
----------------------------------------

int main (void) {
    char a [2] [10];
    int i = 0;
    char temp [20];
    for (i = 0; i < 2; i++) {
        scanf ("%s", temp);
        strcpy (a [i], temp);
    }
    printf ("%s", a [0]);
    return 0;
}
----------------------------------------

int main (void) {
    char *c_array [SIZE] [SIZE] = {NULL};
    int x;
    int y;
    int i_user_input;
    char c_name [256];
    for (x = 0; x < SIZE; x++) {
        for (y = 0; y < SIZE; y++) {
            printf ("\nPlease enter a name to the system:");
            scanf ("%255s", c_name);
            printf ("The string is %s\n", c_name);
            printf ("Please press '1' if you would like to keep entering names\n");
            printf ("Please press '2' if you would like to print the list of names:");
            scanf ("%d", & i_user_input);
            c_array[x][y] = strdup (c_name);
            if (i_user_input == 1) {
                continue;
            }
            if (i_user_input == 2) {
                int x, y;
                for (x = 0; x < SIZE; x++) {
                    for (y = 0; y < SIZE; y++) {
                        if (c_array[x][y] != NULL)
                            printf ("c_array[%d][%d]=%s\n", x, y, c_array[x][y]);
                    }
                }
            }
        }
    }
    for (x = 0; x < SIZE; x++)
        for (y = 0; y < SIZE; y++)
            free (c_array[x][y]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30792278_30792411_2_15
30792278_30792511_4_20
Title: Counting lines in a file excluding the empty lines in C 
----------------------------------------

uint32_t countLines (FILE *file) {
    uint32_t lines = 0;
    int32_t c;
    int32_t last = '\n';
    while (EOF != (c = fgetc (file))) {
        if (c == '\n' && last != '\n') {
            ++lines;
        }
        last = c;
    }
    rewind (file);
    return lines;
}
----------------------------------------

unsigned int countLines (FILE *file) {
    unsigned int lines = 0;
    int c = '\0';
    int pc = '\n';
    while (c = fgetc (file), c != EOF) {
        if (c == '\n' && pc != '\n')
            lines++;
        pc = c;
    }
    if (pc != '\n')
        lines++;
    return lines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30794962_30795045_1_19
30794962_30795375_3_28
Title: How to return positive occurrence 
----------------------------------------

int Number (int *A, int N, int X) {
    int r, m, l;
    if (N == 0) {
        return -1;
    }
    l = 0;
    r = N - 1;
    while (l < r) {
        m = (l + r) / 2;
        if (A[m] == X)
            return m;
        if (A[m] > X) {
            r = m - 1;
        }
        else {
            l = m + 1;
        }
    }
    return -1;
}
----------------------------------------

int Number (int *A, int N, int X) {
    int r, m, l;
    if (N == 0) {
        return -1;
    }
    l = 0;
    r = N;
    while (l < r) {
        m = (l + r) / 2;
        printf ("l: %d, m: %d, r: %d\n", l, m, r);
        if (A[m] < X) {
            l = m + 1;
        }
        else {
            r = m;
        }
    }
    if (A[l] == X) {
        return l;
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3081289_3081307_3_17
3081289_3081405_8_33
Title: How to read a line from a text file in c/c++? 
----------------------------------------

int main () {
    char line [1024];
    FILE *fp = fopen ("filename.txt", "r");
    if (fp == NULL) {
        return 1;
    }
    while (fgets (line, 1024, fp)) {
        printf ("%s\n", line);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int size = 1024, pos;
    int c;
    char *buffer = (char *) malloc (size);
    FILE *f = fopen ("myfile.txt", "r");
    if (f) {
        do {
            pos = 0;
            do {
                c = fgetc (f);
                if (c != EOF)
                    buffer[pos++] = (char) c;
                if (pos >= size - 1) {
                    size *= 2;
                    buffer = (char *) realloc (buffer, size);
                }
            }
            while (c != EOF && c != '\n');
            buffer[pos] = 0;
            handle_line (buffer);
        }
        while (c != EOF);
        fclose (f);
    }
    free (buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30814429_30814451_1_15
30814429_30814830_4_13
Title: I don't see why this doesn't work 
----------------------------------------

void pyramid (int n) {
    int start = n, end = n + 1;
    int k;
    while (start > 0 && end < 2 * n) {
        printSpaces (start);
        for (k = start; k < end; k++) {
            printf ("*");
        }
        printf ("\n");
        start = n - 1;
        end = n + 1;
    }
}
----------------------------------------

void pyramid (int end) {
    int k, c;
    for (k = 1; k < end; k++) {
        printf (" ");
        end = end - 1;
        for (c = 1; c <= 2 * k - 1; c++)
            printf ("*");
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30814429_30814536_15_29
30814429_30814830_4_13
Title: I don't see why this doesn't work 
----------------------------------------

void pyramid (int n) {
    int start = n, end = n + 1;
    int k;
    while (start > 0 && end < 2 * n) {
        printSpaces (start);
        for (k = start; k < end; k++) {
            printf ("*");
        }
        printf ("\n");
        start--;
        end++;
    }
}
----------------------------------------

void pyramid (int end) {
    int k, c;
    for (k = 1; k < end; k++) {
        printf (" ");
        end = end - 1;
        for (c = 1; c <= 2 * k - 1; c++)
            printf ("*");
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30842947_30849401_1_9
30842947_30852809_5_25
Title: print double in scientific format with no integer part 
----------------------------------------

int printf_NoIntegerPart (double x, int prec) {
    char buf [20 + prec];
    sprintf (buf, "%+.*E", prec - 1, x * 10.0);
    if (buf[2] == '.') {
        buf[2] = buf[1];
        buf[1] = '.';
    }
    puts (buf);
}
----------------------------------------

int printf_NoIntegerPart (double x, int prec) {
    assert (prec >= 2 && prec <= 100);
    char buffer [prec + 16];
    sprintf (buffer, "%.*E", prec - 1, x);
    int dp = '.';
    char *dp_ptr = strchr (buffer, dp);
    char *E_ptr = strchr (buffer, 'E');
    if (dp_ptr && dp_ptr > buffer && E_ptr) {
        dp_ptr[0] = dp_ptr[-1];
        dp_ptr[-1] = dp;
        if (x != 0) {
            int expo = atoi (&E_ptr[1]);
            sprintf (& E_ptr [1], "%+.02d", expo + 1);
        }
    }
    return puts (buffer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30848858_41725621_3_24
30848858_43576867_3_62
Title: "how to print a string in cross X shape in any one language (c c++ java)" 
----------------------------------------

void main () {
    int n, r = 0, i, j;
    char arr [100] [100];
    clrscr ();
    printf ("Enter the size of word(odd): ");
    scanf ("%d", & n);
    printf ("Enter the word: ");
    for (i = 0; i < n + 1; i++) {
        for (j = 0; j < n + 1; j++) {
            if (i == j) {
                scanf ("%c", & arr [i] [j]);
                arr[n + 1 - r][j] = arr[i][j];
            }
        }
        r++;
    }
    for (i = 0; i < n + 1; i++) {
        for (j = 0; j < n + 1; j++)
            printf ("%c  ", arr[i][j]);
        printf ("\n\n");
    }
    getch ();
}
----------------------------------------

int main () {
    int i, j, N;
    printf ("Enter N: ");
    scanf ("%d", & N);
    for (i = N; i >= 1; i--) {
        for (j = i; j < N; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            if (j == 1 || j == (2 * i - 1)) {
                printf ("*");
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    for (i = 2; i <= N; i++) {
        for (j = i; j < N; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            if (j == 1 || j == (2 * i - 1)) {
                printf ("*");
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30848858_41725621_3_24
30848858_46128119_5_41
Title: "how to print a string in cross X shape in any one language (c c++ java)" 
----------------------------------------

void main () {
    int n, r = 0, i, j;
    char arr [100] [100];
    clrscr ();
    printf ("Enter the size of word(odd): ");
    scanf ("%d", & n);
    printf ("Enter the word: ");
    for (i = 0; i < n + 1; i++) {
        for (j = 0; j < n + 1; j++) {
            if (i == j) {
                scanf ("%c", & arr [i] [j]);
                arr[n + 1 - r][j] = arr[i][j];
            }
        }
        r++;
    }
    for (i = 0; i < n + 1; i++) {
        for (j = 0; j < n + 1; j++)
            printf ("%c  ", arr[i][j]);
        printf ("\n\n");
    }
    getch ();
}
----------------------------------------

int main () {
    char input [100];
    int length, i, j;
    clrscr ();
    printf ("Enter the String: \n");
    gets (input);
    length = strlen (input);
    if (length % 2 != 0) {
        for (i = 0; i <= (length - 1); i++) {
            for (j = length - 1; j >= 0; j--) {
                if (j == i || j == (length - 1 - i)) {
                    printf ("%c", input [i]);
                }
                else {
                    printf (" ");
                }
            }
            printf ("\n");
        }
    }
    else {
        return 0;
    }
    getch ();
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30848858_43576867_3_62
30848858_46128119_5_41
Title: "how to print a string in cross X shape in any one language (c c++ java)" 
----------------------------------------

int main () {
    int i, j, N;
    printf ("Enter N: ");
    scanf ("%d", & N);
    for (i = N; i >= 1; i--) {
        for (j = i; j < N; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            if (j == 1 || j == (2 * i - 1)) {
                printf ("*");
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    for (i = 2; i <= N; i++) {
        for (j = i; j < N; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            if (j == 1 || j == (2 * i - 1)) {
                printf ("*");
            }
            else {
                printf (" ");
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char input [100];
    int length, i, j;
    clrscr ();
    printf ("Enter the String: \n");
    gets (input);
    length = strlen (input);
    if (length % 2 != 0) {
        for (i = 0; i <= (length - 1); i++) {
            for (j = length - 1; j >= 0; j--) {
                if (j == i || j == (length - 1 - i)) {
                    printf ("%c", input [i]);
                }
                else {
                    printf (" ");
                }
            }
            printf ("\n");
        }
    }
    else {
        return 0;
    }
    getch ();
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30868051_30870340_12_20
30868051_30871520_7_17
Title: segmentation fault occur while reversing the string 
----------------------------------------

void reverse (void) {
    int c;
    if ((c = getchar ()) != '\n' && c != EOF) {
        reverse ();
    }
    if (c != EOF) {
        putchar (c);
    }
}
----------------------------------------

void reverse (char *a, char *b) {
    char temp;
    if (count < length / 2) {
        count++;
        reverse (str + count, str + (length - 1) - count);
    }
    temp = *a;
    *a = *b;
    *b = temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
308695_22988390_4_16
308695_40431747_1_19
Title: How do I concatenate const/literal strings in C? 
----------------------------------------

int main (int argc, const char *argv []) {
    char firstname [100], secondname [100];
    printf ("Enter First Name: ");
    fgets (firstname, 100, stdin);
    printf ("Enter Second Name: ");
    fgets (secondname, 100, stdin);
    firstname[strlen (firstname) - 1] = '\0';
    printf ("fullname is %s %s", firstname, secondname);
    return 0;
}
----------------------------------------

int main () {
    char input [100];
    gets (input);
    char str [101];
    strcpy (str, " ");
    strcat (str, input);
    char *p = str;
    while (*p) {
        if (*p == ' ' && isalpha (*(p + 1)) != 0)
            printf ("%c", *(p + 1));
        p++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30878877_30878951_3_18
30878877_30878970_32_50
Title: modifying double pointer to an integer array 
----------------------------------------

int main () {
    int *array;
    size_t i;
    function (& array);
    for (i = 0; i < 4; i++) {
        printf ("%d\n", array [i]);
    }
    free (array);
    return 0;
}
----------------------------------------

int main (void) {
    int *a;
    size_t n = 4;
    a = calloc (n, sizeof (int));
    init (& a, n, 0);
    display (a, n);
    alloc_new (& a, n);
    init (& a, n, 10);
    display (a, n);
    free (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30883330_30883400_1_19
30883330_30883469_1_24
Title: Problems with If-statement condition 
----------------------------------------

int checkLines (int mat [3] [3]) {
    int i = 0;
    int victory = 0;
    while ((victory == 0) && (i < 3)) {
        if ((mat[i][0] == 1) && (mat[i][1] == 1) && (mat[i][2] == 1)) {
            victory = 1;
        }
        else if ((mat[i][0] == 2) && (mat[i][1] == 2) && (mat[i][2] == 2)) {
            victory = 2;
        }
        i++;
    }
    return victory;
}
----------------------------------------

int checkLines (int mat [3] [3]) {
    int i;
    int victory;
    for (i = 0; i < 3; i++) {
        if ((mat[i][0] == 1) && (mat[i][1] == 1) && (mat[i][2] == 1)) {
            victory = 1;
            break;
        }
        else if ((mat[i][0] == 2) && (mat[i][1] == 2) && (mat[i][2] == 2)) {
            victory = 2;
            continue;
        }
        else {
            victory = 0;
            continue;
        }
    }
    return victory;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30902290_30902390_3_28
30902290_30902573_3_32
Title: Writing a 2-dimensional array table in C. How would I go about doing this. About neatness (such as dividing lines) as well 
----------------------------------------

int main () {
    static const int column = 5;
    static const int row = 3;
    int table [row] [column] = {{0, 1, 2, 3, 4}, {10, 11, 12, 13, 14}, {20, 21, 22, 23, 24}};
    for (int i = 0; i < row; ++i) {
        for (int j = 0; j < column; ++j) {
            printf ("%d ", table [i] [j]);
        }
        printf ("\n");
    }
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    int table [3] [5] = {{0, 1, 2, 3, 4}, {10, 11, 12, 13, 14}, {20, 21, 22, 23, 24}};
    printf ("    | 1  | 2  | 3  | 4  | 5\n----------------------------\n");
    for (int i = 0; i < 3; ++i) {
        printf ("%d   |", i);
        for (int j = 0; j < 5; ++j) {
            if (table[i][j] > 9) {
                printf (" %d |", table [i] [j]);
            }
            else {
                printf (" %d  |", table [i] [j]);
            }
        }
        printf ("\n----------------------------\n");
    }
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30923307_30924655_6_31
30923307_51906940_2_19
Title: printing an string in cross manner using c program 
----------------------------------------

int main (void) {
    while (1) {
        char s [N];
        printf ("Enter a string less than %zu characters (Enter-exit): ", N);
        if (!fgets (s, N, stdin) || s[0] == '\n')
            break;
        size_t n = strlen (s);
        if (s[n - 1] == '\n')
            s[--n] = '\0';
        printf ("\n");
        for (size_t i = 1, j = n; i <= n; i++, j--) {
            char c = s[i - 1];
            if (i < j)
                printf ("%*c%*c\n", i, c, j -i, c);
            else if (j < i)
                printf ("%*c%*c\n", j, c, i -j, c);
            else
                printf ("%*c\n", i, c);
        }
    }
    return 0;
}
----------------------------------------

void main () {
    char n [100], temp;
    int i = 0, j;
    scanf ("%s", & n);
    m = strlen (n);
    for (i = 0; i <= m - 1;)
        temp[i];
    i++;
    for (j = 0; j < m - 1; j++) {
        if (i == j + 1 || j == m - 1 - i + 1)
            printf ("%c", temp);
        else
            printf (" ")
        :
    }
    printf ("\n");
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30928462_30928556_3_17
30928462_42064830_58_93
Title: How would I make an array of all the integers between 0 and 1000? 
----------------------------------------

int main () {
    int myArray [1000];
    int i;
    for (i = 0; i <= 1000; i++) {
        myArray[i] = i;
        printf ("%d\n", myArray [i]);
    }
    return 0;
}
----------------------------------------

int main (const int argc, const char *argv []) {
    int arr1 [10];
    rangeIntArray (arr1, 0, 10, 1);
    printIntArray (arr1, 10);
    int arr2 [10];
    rangeIntArray (arr2, 0, - 10, - 1);
    printIntArray (arr2, 10);
    int arr3 [4];
    rangeIntArray (arr3, 20, 10, - 3);
    printIntArray (arr3, 4);
    int arr4 [5];
    rangeIntArray (arr4, - 20, - 10, 2);
    printIntArray (arr4, 5);
    int arr5 [5];
    rangeIntArray (arr5, - 20, - 10, - 5);
    printIntArray (arr5, 5);
    int arr6 [5];
    rangeIntArray (arr6, 20, 10, 5);
    printIntArray (arr6, 5);
    int arr7 [5];
    int result = rangeIntArray (arr7, 20, 10, 0);
    if (result != 0) {
        puts ("Raised error");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30939517_30939554_4_20
30939517_30939602_3_17
Title: Loop through user input with getchar 
----------------------------------------

int main (void) {
    char arr [MAX] = {0};
    int ret = 0;
    for (int i = 0; i < MAX; i++) {
        if ((ret = getchar ()) != EOF) {
            arr[i] = ret;
            printf ("%c", arr [i]);
        }
        else
            ;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int ch;
    while (1) {
        ch = getchar ();
    x :
        if (ch == EOF)
            break;
        printf ("%c", ch);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30962700_30962799_1_13
30962700_30962909_4_20
Title: Does static index of array will change the array? 
----------------------------------------

int main (void) {
    char test [] = "/hoe/wahoo/Documents/hello/test";
    char *str [8] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
    int count = 0;
    str[count] = strtok (test, "\\/");
    while (str[count] && *str[count]) {
        str[++count] = strtok (NULL, "\\/");
    }
    printf ("%d\n", count);
}
----------------------------------------

int main () {
    char test [] = "/hoe/wahoo/Documents/hello/test";
    char delims [] = "\\/";
    char *str [8];
    int count = 0;
    str[0] = strtok (test, delims);
    while (str[count]) {
        printf ("%s,", str [count]);
        count++;
        str[count] = strtok (NULL, delims);
    }
    printf ("\n%d\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30967267_30967362_1_15
30967267_30967422_3_21
Title: Arguments to open file 
----------------------------------------

int numeroLinhas (char *filename) {
    char ch;
    FILE *fp;
    int linhas = 0;
    fp = fopen (filename, "r");
    while ((ch = fgetc (fp)) != EOF) {
        if (ch == '\n') {
            linhas++;
        }
    }
    fclose (fp);
    fprintf (stats, "linhas: %d\n", linhas);
}
----------------------------------------

void numeroLinhas (const char *filename) {
    int ch;
    int linhas = 0;
    FILE *fp = fopen (filename, "r");
    if (fp == 0) {
        fprintf (stderr, "Failed to open file %s for reading\n", filename);
        return;
    }
    while ((ch = fgetc (fp)) != EOF) {
        if (ch == '\n')
            linhas++;
    }
    fclose (fp);
    fprintf (stats, "linhas: %d no %s\n", linhas, filename);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30982095_30982518_11_24
30982095_30983736_8_30
Title: Loop to read array input unexpected behavior? 
----------------------------------------

int main () {
    int n;
    int i;
    int x = 0;
    printf ("Enter n: ");
    scanf ("%d", & n);
    for (i = 0;
    i < n;
    i ++) {scanf ("%d", & a [i]);
    printf ("%d\n", i);
}
----------------------------------------

int main (void) {
    int i, n = 0;
    printf ("Enter n:");
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    printf ("Loop is over\n");
    int low = 0;
    int high = n;
    mergeSort (low, high);
    for (i = 0; i < n; i++)
        printf (" %d", a[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30991941_30992174_8_33
30991941_30992427_6_29
Title: How to ignore unneccessary comment line from the input file in C 
----------------------------------------

int main (void) {
    char line [MAXS] = {0};
    while (fgets (line, MAXS, stdin) != NULL) {
        char *p = line;
        size_t len = strlen (line);
        while (len > 0 && (line[len - 1] == '\n' || line[len - 1] == '\r'))
            line[--len] = 0;
        while (isspace (*p))
            p++;
        if (*p == '#' || *p == '@' || !*p)
            continue;
        printf ("%s\n", line);
    }
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp;
    char line [MAXL];
    char s1 [MAXL];
    if ((fp = fopen ("test.txt", "r")) == NULL) {
        fprintf (stderr, "Unable to open file: test.txt\n");
        exit (1);
    }
    while (fgets (line, sizeof line, fp)) {
        if (*line == '#' || *line == '@')
            continue;
        if (sscanf (line, "%s", s1) == 1)
            printf ("1st word on this line = '%s'\n", s1);
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30999056_30999294_4_33
30999056_30999438_3_33
Title: Program to reverse a string in C without declaring a char[] 
----------------------------------------

int main () {
    char *name = malloc (256);
    printf ("\nEnter string\n");
    scanf ("%s", name);
    printf ("\nYou entered%s", name);
    int i, count;
    count = 0;
    while ((*name) != '\0') {
        count++;
        name++;
    }
    printf ("\nPointer is: %p", name);
    printf ("\nLength is: %d\n", count);
    for (i = 1; i <= (count); i++) {
        printf ("%c", * (name - i));
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    char *name = malloc (256);
    printf ("\nEnter string\n");
    fgets (name, 254, stdin);
    printf ("\nYou entered %s", name);
    int i, count;
    count = 0;
    while ((*name) != '\0' && (*name) != '\r') {
        count++;
        name++;
    }
    for (i = count; i >= 0; i--) {
        printf ("%c", (* name));
        name = name - 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30999056_30999294_4_33
30999056_31003399_3_32
Title: Program to reverse a string in C without declaring a char[] 
----------------------------------------

int main () {
    char *name = malloc (256);
    printf ("\nEnter string\n");
    scanf ("%s", name);
    printf ("\nYou entered%s", name);
    int i, count;
    count = 0;
    while ((*name) != '\0') {
        count++;
        name++;
    }
    printf ("\nPointer is: %p", name);
    printf ("\nLength is: %d\n", count);
    for (i = 1; i <= (count); i++) {
        printf ("%c", * (name - i));
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    char *name = malloc (256);
    char *backup1 = *bakcup2 = name;
    printf ("\nEnter string\n");
    fgets (name, 254, stdin);
    printf ("\nYou entered %s", name);
    while ((*backup1) != '\0' && (*backup1) != '\r') {
        backup1++;
    }
    backup1--;
    while (backup1 > backup2) {
        char temp;
        temp = *backup1;
        *backup1 = *backup2;
        *backup2 = temp;
        backup1--;
        backup2++;
    }
    backup1 = name;
    while (*backup1 != '\0' && *backup1 != '\r') {
        printf ("%c", (* backup1));
        backup1++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30999056_30999438_3_33
30999056_31003399_3_32
Title: Program to reverse a string in C without declaring a char[] 
----------------------------------------

int main () {
    char *name = malloc (256);
    printf ("\nEnter string\n");
    fgets (name, 254, stdin);
    printf ("\nYou entered %s", name);
    int i, count;
    count = 0;
    while ((*name) != '\0' && (*name) != '\r') {
        count++;
        name++;
    }
    for (i = count; i >= 0; i--) {
        printf ("%c", (* name));
        name = name - 1;
    }
    return 0;
}
----------------------------------------

int main () {
    char *name = malloc (256);
    char *backup1 = *bakcup2 = name;
    printf ("\nEnter string\n");
    fgets (name, 254, stdin);
    printf ("\nYou entered %s", name);
    while ((*backup1) != '\0' && (*backup1) != '\r') {
        backup1++;
    }
    backup1--;
    while (backup1 > backup2) {
        char temp;
        temp = *backup1;
        *backup1 = *backup2;
        *backup2 = temp;
        backup1--;
        backup2++;
    }
    backup1 = name;
    while (*backup1 != '\0' && *backup1 != '\r') {
        printf ("%c", (* backup1));
        backup1++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31015912_31016086_2_10
31015912_31016189_1_21
Title: Using pointers to iterate through argv[] 
----------------------------------------

int main (int argc, char **argv) {
    int i;
    char *p;
    for (i = 0; i < argc; i++) {
        for (p = *(argv + i); *p; p++)
            printf ("%c", *p);
        printf ("\n");
    }
}
----------------------------------------

int main (int argc, char **argv) {
    char **i = argv;
    char **e = argv + argc;
    for (; i != e; ++i) {
        char *j = *i;
        for (; *j; ++j) {
            printf ("%c", * j);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31033451_31033776_4_23
31033451_31033932_4_33
Title: How to search for specific lines that starts with a string in a file 
----------------------------------------

int main (void) {
    char word [256] = {0};
    char buffer [256] = {0};
    FILE *fp;
    printf ("Enter your word: ");
    scanf ("%s", word);
    fp = fopen ("data.txt", "r+");
    if (!fp) {
    }
    while (fgets (buffer, sizeof buffer, fp)) {
        if (strstr (buffer, word) == buffer)
            printf ("Found: %s\n", buffer);
    }
    return 0;
}
----------------------------------------

int main () {
    char word [256];
    char buffer [256];
    char *sptr;
    FILE *fp;
    int found = 0;
    printf ("Enter your word: ");
    scanf ("%s", word);
    fp = fopen ("data.txt", "r");
    if (fp) {
        while (fgets (buffer, sizeof buffer, fp) != NULL) {
            sptr = strtok (buffer, " \t\r\n");
            if (sptr && strcmp (sptr, word) == 0) {
                sptr = strtok (NULL, " \t\r\n");
                if (sptr) {
                    printf ("%s\n", sptr);
                    found = 1;
                    break;
                }
            }
        }
        fclose (fp);
    }
    if (!found)
        printf ("%s not found\n", word);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31033451_31033776_4_23
31033451_31034335_3_21
Title: How to search for specific lines that starts with a string in a file 
----------------------------------------

int main (void) {
    char word [256] = {0};
    char buffer [256] = {0};
    FILE *fp;
    printf ("Enter your word: ");
    scanf ("%s", word);
    fp = fopen ("data.txt", "r+");
    if (!fp) {
    }
    while (fgets (buffer, sizeof buffer, fp)) {
        if (strstr (buffer, word) == buffer)
            printf ("Found: %s\n", buffer);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [256];
    char word [256], second_word [256];
    char format [256];
    FILE *fp;
    printf ("Enter your word: ");
    scanf ("%255[A-Za-z]", word);
    sprintf (format, "%s %%255s", word);
    fp = fopen ("data.txt", "r");
    while (fgets (buffer, sizeof buffer, fp) != NULL) {
        if (sscanf (buffer, format, second_word) == 1) {
            printf ("%s\n", second_word);
            break;
        }
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31033451_31033932_4_33
31033451_31034335_3_21
Title: How to search for specific lines that starts with a string in a file 
----------------------------------------

int main () {
    char word [256];
    char buffer [256];
    char *sptr;
    FILE *fp;
    int found = 0;
    printf ("Enter your word: ");
    scanf ("%s", word);
    fp = fopen ("data.txt", "r");
    if (fp) {
        while (fgets (buffer, sizeof buffer, fp) != NULL) {
            sptr = strtok (buffer, " \t\r\n");
            if (sptr && strcmp (sptr, word) == 0) {
                sptr = strtok (NULL, " \t\r\n");
                if (sptr) {
                    printf ("%s\n", sptr);
                    found = 1;
                    break;
                }
            }
        }
        fclose (fp);
    }
    if (!found)
        printf ("%s not found\n", word);
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [256];
    char word [256], second_word [256];
    char format [256];
    FILE *fp;
    printf ("Enter your word: ");
    scanf ("%255[A-Za-z]", word);
    sprintf (format, "%s %%255s", word);
    fp = fopen ("data.txt", "r");
    while (fgets (buffer, sizeof buffer, fp) != NULL) {
        if (sscanf (buffer, format, second_word) == 1) {
            printf ("%s\n", second_word);
            break;
        }
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
310363_310374_1_11
310363_37530208_4_15
Title: How to add one day to a time obtained from time() 
----------------------------------------

int main () {
    time_t base = 1142085600;
    for (int i = 0; i < 4; ++i) {
        struct tm *tm = localtime (&base);
        tm->tm_mday += i;
        time_t next = mktime (tm);
    std :
        : cout << ctime (& next);
    }
    return 0;
}
----------------------------------------

int main () {
    using namespace std : : chrono;
    using namespace date;
    auto base = make_zoned ("Pacific/Easter", sys_seconds {1142085600s});
    for (int i = 0; i < 4; ++i) {
    std :
        : cout << format ("%a %b %d %T %Y %Z", base) << '\n';
        base = base.get_local_time () + days {1};
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
310363_310374_1_11
310363_643257_1_23
Title: How to add one day to a time obtained from time() 
----------------------------------------

int main () {
    time_t base = 1142085600;
    for (int i = 0; i < 4; ++i) {
        struct tm *tm = localtime (&base);
        tm->tm_mday += i;
        time_t next = mktime (tm);
    std :
        : cout << ctime (& next);
    }
    return 0;
}
----------------------------------------

int main () {
    time_t base = 1238216400;
std :
    : time_t start_date_t = base;
std :
    : time_t end_date_t = base;
std :
    : tm start_date = * std : : localtime (& start_date_t);
std :
    : tm end_date = * std : : localtime (& end_date_t);
    end_date.tm_mday += 1;
std :
    : time_t b = mktime (& start_date);
std :
    : time_t e = mktime (& end_date);
std :
    : string start_date_str (ctime (& b));
std :
    : string stop_date_str (ctime (& e));
    cout << " begin (MSK) (DST is not active): " << start_date_str;
    cout << " end   (MSD) (DST is active):     " << stop_date_str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
310363_37530208_4_15
310363_643257_1_23
Title: How to add one day to a time obtained from time() 
----------------------------------------

int main () {
    using namespace std : : chrono;
    using namespace date;
    auto base = make_zoned ("Pacific/Easter", sys_seconds {1142085600s});
    for (int i = 0; i < 4; ++i) {
    std :
        : cout << format ("%a %b %d %T %Y %Z", base) << '\n';
        base = base.get_local_time () + days {1};
    }
}
----------------------------------------

int main () {
    time_t base = 1238216400;
std :
    : time_t start_date_t = base;
std :
    : time_t end_date_t = base;
std :
    : tm start_date = * std : : localtime (& start_date_t);
std :
    : tm end_date = * std : : localtime (& end_date_t);
    end_date.tm_mday += 1;
std :
    : time_t b = mktime (& start_date);
std :
    : time_t e = mktime (& end_date);
std :
    : string start_date_str (ctime (& b));
std :
    : string stop_date_str (ctime (& e));
    cout << " begin (MSK) (DST is not active): " << start_date_str;
    cout << " end   (MSD) (DST is active):     " << stop_date_str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31097556_31097874_1_12
31097556_31098640_3_28
Title: While loop error while implementing 'strend' 
----------------------------------------

int strend (const char *s, const char *t) {
    const char *p = s;
    const char *q = t;
    while (*s++)
        ;
    while (*t++)
        ;
    while (s != p && t != q && *(s - 1) == *(t - 1))
        --s, --t;
    return t == q;
}
----------------------------------------

int strend (char *s, char *t) {
    int len = 0;
    int i = 0, j = 0;
    while (*s++) {
        i++;
    }
    while (*t++) {
        j++;
    }
    if (i > j)
        len = j;
    else
        len = i;
    len++;
    for (; len > 0; len--) {
        if (*(s - len) != *(t - len))
            return 0;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31097973_31098379_1_25
31097973_31098445_4_29
Title: Reversing a two dimensional character array in C 
----------------------------------------

int main () {
    char string [100] [100];
    char ch;
    int i = 0, j = 0, l = 0, count = 0, x = 0, y = 0;
    while ((ch = getchar ()) != EOF) {
        string[i][l++] = ch;
        if (ch == ' ') {
            string[i][l] = '\0';
            i++;
            l = 0;
            count++;
        }
    }
    string[i][l] = '\0';
    for (x = count; x >= 0; x--) {
        int length = strlen (string[x]) - 1;
        for (y = length;
        y >= 0;
        -- y) {printf ("%c", string [x] [y]);
    }
}
----------------------------------------

int main () {
    char string [100] [100];
    char ch;
    int i = 0, j = 0, l = 0, count = 0, x = 0, y = 0;
    while ((ch = getchar ()) != EOF) {
        if (ch == ' ') {
            string[i][l] = '\0';
            i++;
            l = 0;
            count++;
        }
        else
            string[i][l++] = ch;
    }
    string[i][l] = '\0';
    for (x = count; x >= 0; x--) {
        int length = strlen (string[x]) - 1;
        for (y = length; y >= 0; --y)
            printf ("%c", string[x][y]);
        printf (" ");
        for (y = length; y >= 0; --y)
            printf ("%c", string[x][y]);
        printf (" ");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31097973_31098379_1_25
31097973_31098460_7_41
Title: Reversing a two dimensional character array in C 
----------------------------------------

int main () {
    char string [100] [100];
    char ch;
    int i = 0, j = 0, l = 0, count = 0, x = 0, y = 0;
    while ((ch = getchar ()) != EOF) {
        string[i][l++] = ch;
        if (ch == ' ') {
            string[i][l] = '\0';
            i++;
            l = 0;
            count++;
        }
    }
    string[i][l] = '\0';
    for (x = count; x >= 0; x--) {
        int length = strlen (string[x]) - 1;
        for (y = length;
        y >= 0;
        -- y) {printf ("%c", string [x] [y]);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input, usage: %s \"# string\"\n", argv [0]);
        return 1;
    }
    char *str = strdup (argv[1]);
    char *p = str;
    char *rev = NULL;
    int mult = 0;
    int i = 0;
    while (*p && *p != ' ')
        p++;
    *p = 0;
    mult = atoi (str);
    *p = ' ';
    if (!mult)
        return 1;
    while (*p && *p == ' ')
        p++;
    rev = strrevdup (p);
    char *r = rev;
    printf ("\n the reversed string with duplicated words '%d' times is:\n\n", mult);
    for (p = strtok (r, " "); p; p = strtok (NULL, " \n"))
        for (i = 0; i < mult; i++)
            printf (" %s", p);
    printf ("\n\n");
    free (str);
    free (rev);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31097973_31098445_4_29
31097973_31098460_7_41
Title: Reversing a two dimensional character array in C 
----------------------------------------

int main () {
    char string [100] [100];
    char ch;
    int i = 0, j = 0, l = 0, count = 0, x = 0, y = 0;
    while ((ch = getchar ()) != EOF) {
        if (ch == ' ') {
            string[i][l] = '\0';
            i++;
            l = 0;
            count++;
        }
        else
            string[i][l++] = ch;
    }
    string[i][l] = '\0';
    for (x = count; x >= 0; x--) {
        int length = strlen (string[x]) - 1;
        for (y = length; y >= 0; --y)
            printf ("%c", string[x][y]);
        printf (" ");
        for (y = length; y >= 0; --y)
            printf ("%c", string[x][y]);
        printf (" ");
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input, usage: %s \"# string\"\n", argv [0]);
        return 1;
    }
    char *str = strdup (argv[1]);
    char *p = str;
    char *rev = NULL;
    int mult = 0;
    int i = 0;
    while (*p && *p != ' ')
        p++;
    *p = 0;
    mult = atoi (str);
    *p = ' ';
    if (!mult)
        return 1;
    while (*p && *p == ' ')
        p++;
    rev = strrevdup (p);
    char *r = rev;
    printf ("\n the reversed string with duplicated words '%d' times is:\n\n", mult);
    for (p = strtok (r, " "); p; p = strtok (NULL, " \n"))
        for (i = 0; i < mult; i++)
            printf (" %s", p);
    printf ("\n\n");
    free (str);
    free (rev);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31119747_31120672_1_28
31119747_31120833_1_16
Title: Cut out section of a string with another string 
----------------------------------------

char *spleissen (char *array, char *G, char *A) {
    int l = strlen (array);
    int i, j = 0;
    char returnstr [10010];
    int b = 0;
    for (i = 0; i < l; i++) {
        if (G[0] == array[i] && G[1] == array[i + 1]) {
            b = 1, i++;
            continue;
        }
        else if (A[0] == array[i] && A[1] == array[i + 1] && b == 1) {
            b = 0, i++;
            continue;
        }
        if (b == 0) {
            returnstr[j] = array[i];
            j++;
        }
    }
    return returnstr;
}
----------------------------------------

char *spleissen (const char *src, const char *start, const char *end) {
    size_t len = strlen (src);
    char *s, *e, *ret, *work;
    ret = work = malloc (len +1);
    strcpy (work, src);
    len = strlen (end);
    while (s = strstr (work, start)) {
        if ((e = strstr (s, end)) == NULL)
            break;
        memmove (s, e + len, strlen (e + len) + 1);
        work = s;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31126462_31126753_14_47
31126462_31126914_24_69
Title: Sorting a 2D array with qsort 
----------------------------------------

int main (void) {
    int i, j;
    char **tab;
    tab = (char **) malloc (sizeof (char *) * 10);
    for (i = 0; i < 10; i++) {
        tab[i] = (char *) malloc (sizeof (char) * 16);
    }
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 15; j++) {
            tab[i][j] = rand () % 20 + 'b';
            printf ("%c ", tab [i] [j]);
        }
        tab[i][j] = 0;
        puts ("");
    }
    for (i = 0; i < 10; i++) {
        qsort (& tab [i] [0], 15, sizeof (char), ccmpr);
    }
    qsort (tab, 10, sizeof (char *), scmpr);
    puts ("");
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 15; j++) {
            printf ("%c ", tab [i] [j]);
        }
        puts ("");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char **tab;
    tab = (char **) malloc (M * sizeof (char *));
    for (size_t i = 0; i < M; i++) {
        tab[i] = (char *) malloc (N * sizeof (char));
    }
    srand ((unsigned int) time (NULL));
    for (size_t i = 0; i < M; i++) {
        for (size_t j = 0; j < N - 1; j++) {
            tab[i][j] = rand () % ('Z' - 'A' + 1) + 'A';
        }
        tab[i][N - 1] = '\0';
    }
    for (size_t i = 0; i < M; i++) {
        printf ("%s\n", tab [i]);
    }
    printf ("\n");
    for (size_t i = 0; i < M; i++) {
        qsort (tab [i], N - 1, sizeof (char), ccmp);
    }
    qsort (tab, M, sizeof (char *), scmp);
    for (size_t i = 0; i < M; i++) {
        printf ("%s\n", tab [i]);
    }
    printf ("\n");
    for (size_t i = 0; i < M; i++)
        free (tab[i]);
    free (tab);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31145629_31146017_6_24
31145629_31146065_7_23
Title: How to convert character string in microseconds to struct tm in C? 
----------------------------------------

int main () {
    struct tm now;
    time_t secs;
    char buffer [80];
    char str [] = "1435687921000000";
    int len = strlen (str);
    if (len < 7)
        return 1;
    str[len - 6] = 0;
    secs = (time_t) atol (str);
    now = *localtime (&secs);
    strftime (buffer, 80, "%Y-%m-%d", & now);
    printf ("%s\n", buffer);
    printf ("%s\n", asctime (& now));
    return 0;
}
----------------------------------------

int main (void) {
    struct tm *tm;
    char buffer [80];
    char *str = "1435687921000000";
    time_t ms = strtol (str, NULL, 10);
    ms = (time_t) ms / 1E6;
    tm = localtime (&ms);
    if (strftime (buffer, 80, "%Y-%m-%d", tm) == 0)
        return EXIT_FAILURE;
    printf ("%s\n", buffer);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31145629_31146017_6_24
31145629_31146078_5_21
Title: How to convert character string in microseconds to struct tm in C? 
----------------------------------------

int main () {
    struct tm now;
    time_t secs;
    char buffer [80];
    char str [] = "1435687921000000";
    int len = strlen (str);
    if (len < 7)
        return 1;
    str[len - 6] = 0;
    secs = (time_t) atol (str);
    now = *localtime (&secs);
    strftime (buffer, 80, "%Y-%m-%d", & now);
    printf ("%s\n", buffer);
    printf ("%s\n", asctime (& now));
    return 0;
}
----------------------------------------

int main () {
    struct tm *tm;
    char buffer [80];
    char *str = "1435687921000000";
    time_t t;
    t = (time_t) (atoll (str) / 1000000);
    tm = gmtime (&t);
    strftime (buffer, 80, "%Y-%m-%d", tm);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31145629_31146017_6_24
31145629_31147333_5_23
Title: How to convert character string in microseconds to struct tm in C? 
----------------------------------------

int main () {
    struct tm now;
    time_t secs;
    char buffer [80];
    char str [] = "1435687921000000";
    int len = strlen (str);
    if (len < 7)
        return 1;
    str[len - 6] = 0;
    secs = (time_t) atol (str);
    now = *localtime (&secs);
    strftime (buffer, 80, "%Y-%m-%d", & now);
    printf ("%s\n", buffer);
    printf ("%s\n", asctime (& now));
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [80];
    char *str = "1435687921000000";
    struct tm tm = {0};
    tm.tm_year = 1970 - 1900;
    tm.tm_mday = 1;
    tm.tm_sec = atoll (str) / 1000000;
    tm.tm_isdst = -1;
    if (mktime (&tm) == -1)
        exit (EXIT_FAILURE);
    if (strftime (buffer, 80, "%Y-%m-%d", &tm) == 0)
        exit (EXIT_FAILURE);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31145629_31146065_7_23
31145629_31146078_5_21
Title: How to convert character string in microseconds to struct tm in C? 
----------------------------------------

int main (void) {
    struct tm *tm;
    char buffer [80];
    char *str = "1435687921000000";
    time_t ms = strtol (str, NULL, 10);
    ms = (time_t) ms / 1E6;
    tm = localtime (&ms);
    if (strftime (buffer, 80, "%Y-%m-%d", tm) == 0)
        return EXIT_FAILURE;
    printf ("%s\n", buffer);
    return EXIT_SUCCESS;
}
----------------------------------------

int main () {
    struct tm *tm;
    char buffer [80];
    char *str = "1435687921000000";
    time_t t;
    t = (time_t) (atoll (str) / 1000000);
    tm = gmtime (&t);
    strftime (buffer, 80, "%Y-%m-%d", tm);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31145629_31146065_7_23
31145629_31147333_5_23
Title: How to convert character string in microseconds to struct tm in C? 
----------------------------------------

int main (void) {
    struct tm *tm;
    char buffer [80];
    char *str = "1435687921000000";
    time_t ms = strtol (str, NULL, 10);
    ms = (time_t) ms / 1E6;
    tm = localtime (&ms);
    if (strftime (buffer, 80, "%Y-%m-%d", tm) == 0)
        return EXIT_FAILURE;
    printf ("%s\n", buffer);
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    char buffer [80];
    char *str = "1435687921000000";
    struct tm tm = {0};
    tm.tm_year = 1970 - 1900;
    tm.tm_mday = 1;
    tm.tm_sec = atoll (str) / 1000000;
    tm.tm_isdst = -1;
    if (mktime (&tm) == -1)
        exit (EXIT_FAILURE);
    if (strftime (buffer, 80, "%Y-%m-%d", &tm) == 0)
        exit (EXIT_FAILURE);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31145629_31146078_5_21
31145629_31147333_5_23
Title: How to convert character string in microseconds to struct tm in C? 
----------------------------------------

int main () {
    struct tm *tm;
    char buffer [80];
    char *str = "1435687921000000";
    time_t t;
    t = (time_t) (atoll (str) / 1000000);
    tm = gmtime (&t);
    strftime (buffer, 80, "%Y-%m-%d", tm);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [80];
    char *str = "1435687921000000";
    struct tm tm = {0};
    tm.tm_year = 1970 - 1900;
    tm.tm_mday = 1;
    tm.tm_sec = atoll (str) / 1000000;
    tm.tm_isdst = -1;
    if (mktime (&tm) == -1)
        exit (EXIT_FAILURE);
    if (strftime (buffer, 80, "%Y-%m-%d", &tm) == 0)
        exit (EXIT_FAILURE);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170305_25_50
31170240_31170332_7_29
Title: Unable to get a palindrome check to work 
----------------------------------------

int main (void) {
    char string [N];
    char string2 [N];
    printf ("Please Enter a string: ");
    fgets (string, N, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    printf ("\nHere's what you typed: %s\n", string);
    printf ("Here's the Reversed: %s\n", reverse_copy (string2, string));
    if (testStrings (string, string2)) {
        printf ("\nThe input is a palindrome.\n");
    }
    else {
        printf ("\nThe input is not a palindrome.\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170305_25_50
31170240_31170618_6_20
Title: Unable to get a palindrome check to work 
----------------------------------------

int main (void) {
    char string [N];
    char string2 [N];
    printf ("Please Enter a string: ");
    fgets (string, N, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    printf ("\nHere's what you typed: %s\n", string);
    printf ("Here's the Reversed: %s\n", reverse_copy (string2, string));
    if (testStrings (string, string2)) {
        printf ("\nThe input is a palindrome.\n");
    }
    else {
        printf ("\nThe input is not a palindrome.\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    gets (string);
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170305_25_50
31170240_31170747_1_24
Title: Unable to get a palindrome check to work 
----------------------------------------

int main (void) {
    char string [N];
    char string2 [N];
    printf ("Please Enter a string: ");
    fgets (string, N, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    printf ("\nHere's what you typed: %s\n", string);
    printf ("Here's the Reversed: %s\n", reverse_copy (string2, string));
    if (testStrings (string, string2)) {
        printf ("\nThe input is a palindrome.\n");
    }
    else {
        printf ("\nThe input is not a palindrome.\n");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Need an argument\n");
        return -1;
    }
    int len = strlen (argv[1]) - 1;
    int i = 0;
    int palindrome = 1;
    for (; i < len; ++i, --len) {
        if (argv[1][i] != argv[1][len]) {
            palindrome = 0;
            break;
        }
    }
    if (palindrome) {
        printf ("I am a Palindrome\n");
    }
    else {
        printf ("I am NOT a Palindrome\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170305_25_50
31170240_31170909_15_28
Title: Unable to get a palindrome check to work 
----------------------------------------

int main (void) {
    char string [N];
    char string2 [N];
    printf ("Please Enter a string: ");
    fgets (string, N, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    printf ("\nHere's what you typed: %s\n", string);
    printf ("Here's the Reversed: %s\n", reverse_copy (string2, string));
    if (testStrings (string, string2)) {
        printf ("\nThe input is a palindrome.\n");
    }
    else {
        printf ("\nThe input is not a palindrome.\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char str [100];
    printf ("Please Enter a string:\n");
    scanf ("%99s", str);
    if (isPalindrome (str))
        printf ("The input is a palindrome.\n");
    else
        printf ("The input is not a palindrome.\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170305_25_50
31170240_31171274_4_18
Title: Unable to get a palindrome check to work 
----------------------------------------

int main (void) {
    char string [N];
    char string2 [N];
    printf ("Please Enter a string: ");
    fgets (string, N, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    printf ("\nHere's what you typed: %s\n", string);
    printf ("Here's the Reversed: %s\n", reverse_copy (string2, string));
    if (testStrings (string, string2)) {
        printf ("\nThe input is a palindrome.\n");
    }
    else {
        printf ("\nThe input is not a palindrome.\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t len = strlen (string) - 1;
    if (string[len] == '\n')
        len--;
    for (size_t left = 0; left < len && string[left] == string[len]; ++left, --len) {
    }
    printf ("%s is %s palidrome\n", string, (left < len ? " not a ", ""));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170332_31_40
31170240_31170618_22_31
Title: Unable to get a palindrome check to work 
----------------------------------------

void reverse (char *s) {
    int c, i, j;
    for (i = 0, j = strlen (s) - 1; i < j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
    return;
}
----------------------------------------

void reverse (char *s) {
    int c, i, j;
    for (i = 0, j = strlen (s) - 1; i < j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170332_7_29
31170240_31170618_6_20
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    gets (string);
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170332_7_29
31170240_31170747_1_24
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Need an argument\n");
        return -1;
    }
    int len = strlen (argv[1]) - 1;
    int i = 0;
    int palindrome = 1;
    for (; i < len; ++i, --len) {
        if (argv[1][i] != argv[1][len]) {
            palindrome = 0;
            break;
        }
    }
    if (palindrome) {
        printf ("I am a Palindrome\n");
    }
    else {
        printf ("I am NOT a Palindrome\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170332_7_29
31170240_31170909_15_28
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return 0;
}
----------------------------------------

int main () {
    char str [100];
    printf ("Please Enter a string:\n");
    scanf ("%99s", str);
    if (isPalindrome (str))
        printf ("The input is a palindrome.\n");
    else
        printf ("The input is not a palindrome.\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170332_7_29
31170240_31171274_4_18
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t n = strlen (string);
    if (n && string[n - 1] == '\n')
        string[--n] = '\0';
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t len = strlen (string) - 1;
    if (string[len] == '\n')
        len--;
    for (size_t left = 0; left < len && string[left] == string[len]; ++left, --len) {
    }
    printf ("%s is %s palidrome\n", string, (left < len ? " not a ", ""));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170618_6_20
31170240_31170747_1_24
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    gets (string);
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Need an argument\n");
        return -1;
    }
    int len = strlen (argv[1]) - 1;
    int i = 0;
    int palindrome = 1;
    for (; i < len; ++i, --len) {
        if (argv[1][i] != argv[1][len]) {
            palindrome = 0;
            break;
        }
    }
    if (palindrome) {
        printf ("I am a Palindrome\n");
    }
    else {
        printf ("I am NOT a Palindrome\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170618_6_20
31170240_31170909_15_28
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    gets (string);
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return;
}
----------------------------------------

int main () {
    char str [100];
    printf ("Please Enter a string:\n");
    scanf ("%99s", str);
    if (isPalindrome (str))
        printf ("The input is a palindrome.\n");
    else
        printf ("The input is not a palindrome.\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170618_6_20
31170240_31171274_4_18
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char string [100];
    char string2 [100];
    printf ("Please Enter a string:\n");
    gets (string);
    strcpy (string2, string);
    reverse (string);
    printf ("Here's what you typed:%s\n", string2);
    printf ("Here's the Reversed:%s\n", string);
    testStrings (string, string2);
    return;
}
----------------------------------------

int main () {
    char string [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t len = strlen (string) - 1;
    if (string[len] == '\n')
        len--;
    for (size_t left = 0; left < len && string[left] == string[len]; ++left, --len) {
    }
    printf ("%s is %s palidrome\n", string, (left < len ? " not a ", ""));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170747_1_24
31170240_31170909_15_28
Title: Unable to get a palindrome check to work 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Need an argument\n");
        return -1;
    }
    int len = strlen (argv[1]) - 1;
    int i = 0;
    int palindrome = 1;
    for (; i < len; ++i, --len) {
        if (argv[1][i] != argv[1][len]) {
            palindrome = 0;
            break;
        }
    }
    if (palindrome) {
        printf ("I am a Palindrome\n");
    }
    else {
        printf ("I am NOT a Palindrome\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char str [100];
    printf ("Please Enter a string:\n");
    scanf ("%99s", str);
    if (isPalindrome (str))
        printf ("The input is a palindrome.\n");
    else
        printf ("The input is not a palindrome.\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170747_1_24
31170240_31171274_4_18
Title: Unable to get a palindrome check to work 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Need an argument\n");
        return -1;
    }
    int len = strlen (argv[1]) - 1;
    int i = 0;
    int palindrome = 1;
    for (; i < len; ++i, --len) {
        if (argv[1][i] != argv[1][len]) {
            palindrome = 0;
            break;
        }
    }
    if (palindrome) {
        printf ("I am a Palindrome\n");
    }
    else {
        printf ("I am NOT a Palindrome\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t len = strlen (string) - 1;
    if (string[len] == '\n')
        len--;
    for (size_t left = 0; left < len && string[left] == string[len]; ++left, --len) {
    }
    printf ("%s is %s palidrome\n", string, (left < len ? " not a ", ""));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31170240_31170909_15_28
31170240_31171274_4_18
Title: Unable to get a palindrome check to work 
----------------------------------------

int main () {
    char str [100];
    printf ("Please Enter a string:\n");
    scanf ("%99s", str);
    if (isPalindrome (str))
        printf ("The input is a palindrome.\n");
    else
        printf ("The input is not a palindrome.\n");
    return 0;
}
----------------------------------------

int main () {
    char string [100];
    printf ("Please Enter a string:\n");
    fgets (string, 100, stdin);
    size_t len = strlen (string) - 1;
    if (string[len] == '\n')
        len--;
    for (size_t left = 0; left < len && string[left] == string[len]; ++left, --len) {
    }
    printf ("%s is %s palidrome\n", string, (left < len ? " not a ", ""));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3118490_42739426_18_31
3118490_44537930_4_27
Title: Getting each individual digit from a whole integer 
----------------------------------------

int main () {
    demo_number_get_digits (- 9999999999999);
    demo_number_get_digits (- 10000000000);
    demo_number_get_digits (- 1000);
    demo_number_get_digits (- 9);
    demo_number_get_digits (0);
    demo_number_get_digits (9);
    demo_number_get_digits (1000);
    demo_number_get_digits (10000000000);
    demo_number_get_digits (9999999999999);
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    unsigned int score = 42;
    printf ("score via printf:     %u\n", score);
    printf ("score digit by digit: ");
    unsigned int div = 1;
    unsigned int digit_count = 1;
    while (div <= score / 10) {
        digit_count++;
        div *= 10;
    }
    while (digit_count > 0) {
        printf ("%d", score / div);
        score %= div;
        div /= 10;
        digit_count--;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3118490_42739426_18_31
3118490_52171183_3_27
Title: Getting each individual digit from a whole integer 
----------------------------------------

int main () {
    demo_number_get_digits (- 9999999999999);
    demo_number_get_digits (- 10000000000);
    demo_number_get_digits (- 1000);
    demo_number_get_digits (- 9);
    demo_number_get_digits (0);
    demo_number_get_digits (9);
    demo_number_get_digits (1000);
    demo_number_get_digits (10000000000);
    demo_number_get_digits (9999999999999);
    return EXIT_SUCCESS;
}
----------------------------------------

int main () {
    int num;
    int reminder;
    int rev = 0;
    int count = 1;
    printf ("Enter the integer:");
    scanf ("%i", & num);
    while (num != 0) {
        reminder = num % 10;
        rev = rev * 10 + reminder;
        num /= 10;
    }
    while (rev != 0) {
        reminder = rev % 10;
        printf ("The %d digit is %d\n", count, reminder);
        rev /= 10;
        count++;
    }
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3118490_44537930_4_27
3118490_52171183_3_27
Title: Getting each individual digit from a whole integer 
----------------------------------------

int main (void) {
    unsigned int score = 42;
    printf ("score via printf:     %u\n", score);
    printf ("score digit by digit: ");
    unsigned int div = 1;
    unsigned int digit_count = 1;
    while (div <= score / 10) {
        digit_count++;
        div *= 10;
    }
    while (digit_count > 0) {
        printf ("%d", score / div);
        score %= div;
        div /= 10;
        digit_count--;
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int num;
    int reminder;
    int rev = 0;
    int count = 1;
    printf ("Enter the integer:");
    scanf ("%i", & num);
    while (num != 0) {
        reminder = num % 10;
        rev = rev * 10 + reminder;
        num /= 10;
    }
    while (rev != 0) {
        reminder = rev % 10;
        printf ("The %d digit is %d\n", count, reminder);
        rev /= 10;
        count++;
    }
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31188053_36890372_4_21
31188053_43973635_15_38
Title: How to read and overwrite text file in C? 
----------------------------------------

int main () {
    char buffer [500], read [50] [50];
    FILE *fp = fopen ("text.txt", "r+");
    int line = 1;
    while (fgets (buffer, 500, fp) != NULL) {
        buffer[0] = 'x';
        printf ("\n%d ", line);
        puts (buffer);
        strcat (read [line - 1], (const char *) buffer);
        line++;
    }
    fclose (fp);
    FILE *fp1 = fopen ("text.txt", "w");
    rewind (fp1);
    fprintf (fp1, "%s", read);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int x = 19530;
    FILE *fp1 = fopen ("D:\\Data\\BUFF.txt", "w+");
    if (fp1 == NULL)
        printf ("File not opening \n");
    int y = x;
    fprintf (fp1, "%d \n", y);
    fclose (fp1);
    printf ("\n file -> open -> write y value and close");
    freopen ("D:\\Data\\BUFF.txt", "w", fp1);
    rewind (fp1);
    y = 100;
    fprintf (fp1, "%d \n", y);
    printf ("\n file -> Reopen -> rewind write y values and close");
    fclose (fp1);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31188053_36890372_4_21
31188053_44016848_15_38
Title: How to read and overwrite text file in C? 
----------------------------------------

int main () {
    char buffer [500], read [50] [50];
    FILE *fp = fopen ("text.txt", "r+");
    int line = 1;
    while (fgets (buffer, 500, fp) != NULL) {
        buffer[0] = 'x';
        printf ("\n%d ", line);
        puts (buffer);
        strcat (read [line - 1], (const char *) buffer);
        line++;
    }
    fclose (fp);
    FILE *fp1 = fopen ("text.txt", "w");
    rewind (fp1);
    fprintf (fp1, "%s", read);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int x = 19530;
    FILE *fp1 = fopen ("D:\\Data\\BUFF.txt", "w+");
    if (fp1 == NULL)
        printf ("File not opening \n");
    int y = x;
    fprintf (fp1, "%d \n", y);
    fclose (fp1);
    printf ("\n file -> open -> write y value and close");
    freopen ("D:\\Data\\BUFF.txt", "w", fp1);
    rewind (fp1);
    y = 100;
    fprintf (fp1, "%d \n", y);
    printf ("\n file -> Reopen -> rewind write y values and close");
    fclose (fp1);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31192078_31192495_4_38
31192078_31193160_5_33
Title: Return non matching charaters in C language 
----------------------------------------

int main (int argc, char **argv) {
    char a [50];
    char b [50];
    char unmatched [100];
    int lena, lenb, i;
    int numUnmatched = 0;
    printf ("Enter any value here\n");
    scanf ("%s", a);
    printf ("Enter any value here\n");
    scanf ("%s", b);
    lena = strlen (a);
    lenb = strlen (b);
    unmatched[0] = '\0';
    for (i = 0; i < lena; i++) {
        if (!strchr (b, a[i])) {
            if (!strchr (unmatched, a[i])) {
                unmatched[numUnmatched++] = a[i];
            }
        }
    }
    for (i = 0; i < lenb; i++) {
        if (!strchr (a, b[i])) {
            if (!strchr (unmatched, b[i])) {
                unmatched[numUnmatched++] = b[i];
            }
        }
    }
    for (i = 0; i < numUnmatched; i++) {
        printf ("%c ", unmatched [i]);
    }
    printf ("\n");
    return EXIT_SUCCESS;
}
----------------------------------------

int main () {
    char a [50];
    char b [50];
    int a_chars [UCHAR_MAX + 1] = {0};
    int b_chars [UCHAR_MAX + 1] = {0};
    int i;
    clrscr ();
    printf ("Enter any value here\n");
    scanf ("%49s%*[^\n]", & a);
    printf ("Enter any value here\n");
    scanf ("%49s%*[^\n]", & b);
    for (i = 0; a[i]; i++) {
        a_chars[(unsigned char) a[i]] = 1;
    }
    for (i = 0; b[i]; i++) {
        b_chars[(unsigned char) b[i]] = 1;
    }
    for (i = 1; i <= UCHAR_MAX; i++) {
        if (a_chars[i] ^ b_chars[i]) {
            putchar (i);
        }
    }
    putchar ('\n');
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31194822_31195323_4_17
31194822_31195585_4_18
Title: How fork() function works in this program? 
----------------------------------------

int main () {
    int i, y, x = 1;
    for (i = 0; i < 4; i++)
        if (x && fork ()) {
            y = i;
            x = 0;
        }
    if (x)
        y = i;
    fork ();
    printf ("%i\n", y);
}
----------------------------------------

int main () {
    int i, y, x = 1;
    pid_t p, c;
    for (i = 0; i < 4; i++)
        if (x && 0 != (p = fork ())) {
            y = i;
            c = p;
            x = 0;
        }
    if (x)
        y = i;
    p = fork ();
    printf ("%i %d %d\n", y, p, c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31201637_31201903_1_12
31201637_31202106_6_18
Title: Pass static two dimensional struct array to function by reference 
----------------------------------------

static void initfield (struct test *a00, size_t sidelength) {
    for (size_t i = 0; i < sidelength; ++i) {
        for (size_t j = 0; j < sidelength; ++j) {
            struct test *aij = a00 + i * sidelength + j;
            aij->i = 1;
            aij->j = 1.0;
        }
    }
}
----------------------------------------

void initfield (struct test *a00, int structsize) {
    int i, j;
    for (i = 0; i < structsize; i++) {
        for (j = 0; j < structsize; j++) {
            struct test *acurrent = a00 + i * structsize + j;
            acurrent->i = 1;
            acurrent->d = 1.0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31217926_31218104_1_14
31217926_31218190_1_11
Title: How to delete head node in linked list? C 
----------------------------------------

int pop (MY_STACK *head) {
    if (*head != NULL) {
        MY_STACK node = *head;
        *head = (*head)->next;
        free (node);
        return SUCCESS;
    }
    else {
        return FAILURE;
    }
}
----------------------------------------

MY_STACK pop (MY_STACK *head) {
    MY_STACK tmpHead = *head;
    if ((*head) == NULL) {
        printf ("badness\n");
        return NULL;
    }
    else {
        *head = (*head)->next;
        tmpHead->next = NULL;
        return tmpHead;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31223753_31223899_1_24
31223753_31224131_1_32
Title: Finding commas inside a char array 
----------------------------------------

char *getHeader (char localString [], int seperatorNum) {
    int maxL = 50;
    const char seperator = ':';
    char newdata [maxL];
    memset (newdata, '\0', maxL);
    int counter = 0;
    int i = 0;
    for (int k = 0; k < maxL; k++) {
        if (localString[k] == seperator) {
            counter++;
            if (counter == seperatorNum) {
                Serial.println (newdata);
                return newdata;
            }
        }
        else {
            newdata[i] = localString[k];
            i++;
        }
    }
}
----------------------------------------

char *getHeader (char localString [], int seperatorNum) {
    int maxL = 50;
    const char seperator = ':';
    char newdata [maxL];
    int counter = 0;
    int divider = 0;
    for (int i = 0; i < maxL; ++i)
        newdata[i] = (char) 0;
    for (int k = 0; k < maxL; k++) {
        if (localString[k] == seperator) {
            counter++;
            divider = k + 1;
            if (counter == seperatorNum) {
                return newdata;
            }
        }
        if ((seperatorNum - 1) == counter)
            newdata[k - divider] = localString[k];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31225435_31225480_1_10
31225435_31225830_3_19
Title: how to have a new local array at each level of recursive function 
----------------------------------------

void fun (int a [], int j) {
    if (j == 5) {
        return;
    }
    int tmp = a[j];
    a[j] = j;
    fun (a, j + 1);
    a[j] = tmp;
}
----------------------------------------

int fun (int a [], int j) {
    static int i = 0;
    if (j < 5) {
        a[j] = j;
        i++;
        fun (a, j + 1);
    }
    i--;
    a[i] = 0;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31225811_31226442_1_17
31225811_31227982_1_24
Title: Find the first key bigger than X on Binary Search Tree 
----------------------------------------

tree *find_first_bigger (tree *t, int x) {
    if (t == NULL)
        return NULL;
    if (t->value > x) {
        tree *answer = find_first_bigger (t->left, x);
        if (answer != NULL)
            return answer;
        return t;
    }
    else if (t->value < x) {
        return find_first_bigger (t->right, x);
    }
    else if (t->value == x) {
        if (t->right != NULL)
            return tree_first_bigger (t->right);
        return NULL;
    }
}
----------------------------------------

tree *find_first_bigger (tree *t, int x) {
    static tree *PTR = NULL;
    if (t == NULL)
        return NULL;
    if (t->value > x) {
        PTR = t;
        find_first_bigger (t -> left, x);
    }
    else if (t->value < x)
        find_first_bigger (t->right, x);
    else if (t->value == x) {
        if (t->right != NULL) {
            t = t->right;
            while (t->left != NULL)
                t = t->left;
            return t;
        }
        else
            return PTR;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31242688_31243822_3_24
31242688_31244242_3_35
Title: Recursive finding the indexes of 2 biggest nums in massive (C) 
----------------------------------------

void get2 (int a [], int n, int *one, int *two) {
    int **pp_one = (int **) one;
    if (*two != NULL) {
        *pp_one = malloc (sizeof (int) * 3);
        (*pp_one)[0] = n;
        (*pp_one)[1] = 0;
        (*pp_one)[2] = 0;
    }
    if (n > 0) {
        if (a[0] > (*pp_one)[1]) {
            (*pp_one)[1] = a;
        }
        else if (a[0] > (*pp_one)[2]) {
            (*pp_one)[2] = a;
        }
        get2 (a + 1, n - 1, one, two);
    }
    else {
        int *t = *one;
        *two = (*pp_one)[1] - (*pp_one)[0];
        *one = (*pp_one)[2] - (*pp_one)[0];
        free (t);
    }
}
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    int m = -n - 1;
    if (n >= 0) {
        *i1 = *i2 = -1;
        get2 (a, - n - 1, i1, i2);
    }
    else if (m-- > 0) {
        if (*i1 == -1 || a[m] > a[*i1]) {
            *i2 = *i1;
            *i1 = m;
        }
        else if ((*i2 == -1 || a[m] > a[*i2]) && a[m] != a[*i1]) {
            *i2 = m;
        }
        get2 (a, - m - 1, i1, i2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31242688_31243822_3_24
31242688_31244682_1_30
Title: Recursive finding the indexes of 2 biggest nums in massive (C) 
----------------------------------------

void get2 (int a [], int n, int *one, int *two) {
    int **pp_one = (int **) one;
    if (*two != NULL) {
        *pp_one = malloc (sizeof (int) * 3);
        (*pp_one)[0] = n;
        (*pp_one)[1] = 0;
        (*pp_one)[2] = 0;
    }
    if (n > 0) {
        if (a[0] > (*pp_one)[1]) {
            (*pp_one)[1] = a;
        }
        else if (a[0] > (*pp_one)[2]) {
            (*pp_one)[2] = a;
        }
        get2 (a + 1, n - 1, one, two);
    }
    else {
        int *t = *one;
        *two = (*pp_one)[1] - (*pp_one)[0];
        *one = (*pp_one)[2] - (*pp_one)[0];
        free (t);
    }
}
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    if (n <= 0)
        return;
    if (*i1 == -1 && n < 2) {
        *i1 = n - 1;
        return;
    }
    if (*i1 == -1 && n >= 2) {
        if (a[n - 1] > a[n - 2]) {
            *i1 = n - 1;
            *i2 = n - 2;
        }
        else {
            *i1 = n - 2;
            *i2 = n - 1;
        }
        return get2 (a, n -2, i1, i2);
    }
    int max = a[*i1], less = a[*i2];
    if (a[n - 1] > max) {
        *i2 = *i1;
        *i1 = n - 1;
    }
    else if (a[n - 1] > less) {
        *i2 = n - 1;
    }
    get2 (a, n - 1, i1, i2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31242688_31243822_3_24
31242688_31248953_1_60
Title: Recursive finding the indexes of 2 biggest nums in massive (C) 
----------------------------------------

void get2 (int a [], int n, int *one, int *two) {
    int **pp_one = (int **) one;
    if (*two != NULL) {
        *pp_one = malloc (sizeof (int) * 3);
        (*pp_one)[0] = n;
        (*pp_one)[1] = 0;
        (*pp_one)[2] = 0;
    }
    if (n > 0) {
        if (a[0] > (*pp_one)[1]) {
            (*pp_one)[1] = a;
        }
        else if (a[0] > (*pp_one)[2]) {
            (*pp_one)[2] = a;
        }
        get2 (a + 1, n - 1, one, two);
    }
    else {
        int *t = *one;
        *two = (*pp_one)[1] - (*pp_one)[0];
        *one = (*pp_one)[2] - (*pp_one)[0];
        free (t);
    }
}
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    switch (n) {
    case 0 :
        *i1 = -1;
        *i2 = -1;
        return;
    case 1 :
        *i1 = 0;
        *i2 = -1;
        return;
    }
    int lower_half = n / 2, upper_half = (n / 2) + (n & 1);
    int li1, li2, ui1, ui2;
    assert (lower_half >= 1);
    assert (upper_half >= 1);
    assert (lower_half + upper_half == n);
    get2 (& a [0], n - upper_half, & li1, & li2);
    get2 (& a [lower_half], n - lower_half, & ui1, & ui2);
    ui1 += lower_half;
    if (ui2 != -1)
        ui2 += lower_half;
    assert (li1 != - 1);
    assert (ui1 != - 1);
    assert (li2 == - 1 || a [li2] < a [li1]);
    assert (ui2 == - 1 || a [ui2] < a [ui1]);
    if (a[li1] < a[ui1]) {
        *i1 = ui1;
        if (ui2 == -1 || a[li1] > a[ui2])
            *i2 = li1;
        else
            *i2 = ui2;
    }
    else if (a[li1] > a[ui1]) {
        *i1 = li1;
        if (li2 == -1 || a[ui1] > a[li2])
            *i2 = ui1;
        else
            *i2 = li2;
    }
    else {
        *i1 = li1;
        if (li2 == -1 || a[ui2] > a[li2])
            *i2 = ui2;
        else
            *i2 = li2;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31242688_31244242_3_35
31242688_31244682_1_30
Title: Recursive finding the indexes of 2 biggest nums in massive (C) 
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    int m = -n - 1;
    if (n >= 0) {
        *i1 = *i2 = -1;
        get2 (a, - n - 1, i1, i2);
    }
    else if (m-- > 0) {
        if (*i1 == -1 || a[m] > a[*i1]) {
            *i2 = *i1;
            *i1 = m;
        }
        else if ((*i2 == -1 || a[m] > a[*i2]) && a[m] != a[*i1]) {
            *i2 = m;
        }
        get2 (a, - m - 1, i1, i2);
    }
}
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    if (n <= 0)
        return;
    if (*i1 == -1 && n < 2) {
        *i1 = n - 1;
        return;
    }
    if (*i1 == -1 && n >= 2) {
        if (a[n - 1] > a[n - 2]) {
            *i1 = n - 1;
            *i2 = n - 2;
        }
        else {
            *i1 = n - 2;
            *i2 = n - 1;
        }
        return get2 (a, n -2, i1, i2);
    }
    int max = a[*i1], less = a[*i2];
    if (a[n - 1] > max) {
        *i2 = *i1;
        *i1 = n - 1;
    }
    else if (a[n - 1] > less) {
        *i2 = n - 1;
    }
    get2 (a, n - 1, i1, i2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31242688_31244242_3_35
31242688_31248953_1_60
Title: Recursive finding the indexes of 2 biggest nums in massive (C) 
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    int m = -n - 1;
    if (n >= 0) {
        *i1 = *i2 = -1;
        get2 (a, - n - 1, i1, i2);
    }
    else if (m-- > 0) {
        if (*i1 == -1 || a[m] > a[*i1]) {
            *i2 = *i1;
            *i1 = m;
        }
        else if ((*i2 == -1 || a[m] > a[*i2]) && a[m] != a[*i1]) {
            *i2 = m;
        }
        get2 (a, - m - 1, i1, i2);
    }
}
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    switch (n) {
    case 0 :
        *i1 = -1;
        *i2 = -1;
        return;
    case 1 :
        *i1 = 0;
        *i2 = -1;
        return;
    }
    int lower_half = n / 2, upper_half = (n / 2) + (n & 1);
    int li1, li2, ui1, ui2;
    assert (lower_half >= 1);
    assert (upper_half >= 1);
    assert (lower_half + upper_half == n);
    get2 (& a [0], n - upper_half, & li1, & li2);
    get2 (& a [lower_half], n - lower_half, & ui1, & ui2);
    ui1 += lower_half;
    if (ui2 != -1)
        ui2 += lower_half;
    assert (li1 != - 1);
    assert (ui1 != - 1);
    assert (li2 == - 1 || a [li2] < a [li1]);
    assert (ui2 == - 1 || a [ui2] < a [ui1]);
    if (a[li1] < a[ui1]) {
        *i1 = ui1;
        if (ui2 == -1 || a[li1] > a[ui2])
            *i2 = li1;
        else
            *i2 = ui2;
    }
    else if (a[li1] > a[ui1]) {
        *i1 = li1;
        if (li2 == -1 || a[ui1] > a[li2])
            *i2 = ui1;
        else
            *i2 = li2;
    }
    else {
        *i1 = li1;
        if (li2 == -1 || a[ui2] > a[li2])
            *i2 = ui2;
        else
            *i2 = li2;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31242688_31244682_1_30
31242688_31248953_1_60
Title: Recursive finding the indexes of 2 biggest nums in massive (C) 
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    if (n <= 0)
        return;
    if (*i1 == -1 && n < 2) {
        *i1 = n - 1;
        return;
    }
    if (*i1 == -1 && n >= 2) {
        if (a[n - 1] > a[n - 2]) {
            *i1 = n - 1;
            *i2 = n - 2;
        }
        else {
            *i1 = n - 2;
            *i2 = n - 1;
        }
        return get2 (a, n -2, i1, i2);
    }
    int max = a[*i1], less = a[*i2];
    if (a[n - 1] > max) {
        *i2 = *i1;
        *i1 = n - 1;
    }
    else if (a[n - 1] > less) {
        *i2 = n - 1;
    }
    get2 (a, n - 1, i1, i2);
}
----------------------------------------

void get2 (int a [], int n, int *i1, int *i2) {
    switch (n) {
    case 0 :
        *i1 = -1;
        *i2 = -1;
        return;
    case 1 :
        *i1 = 0;
        *i2 = -1;
        return;
    }
    int lower_half = n / 2, upper_half = (n / 2) + (n & 1);
    int li1, li2, ui1, ui2;
    assert (lower_half >= 1);
    assert (upper_half >= 1);
    assert (lower_half + upper_half == n);
    get2 (& a [0], n - upper_half, & li1, & li2);
    get2 (& a [lower_half], n - lower_half, & ui1, & ui2);
    ui1 += lower_half;
    if (ui2 != -1)
        ui2 += lower_half;
    assert (li1 != - 1);
    assert (ui1 != - 1);
    assert (li2 == - 1 || a [li2] < a [li1]);
    assert (ui2 == - 1 || a [ui2] < a [ui1]);
    if (a[li1] < a[ui1]) {
        *i1 = ui1;
        if (ui2 == -1 || a[li1] > a[ui2])
            *i2 = li1;
        else
            *i2 = ui2;
    }
    else if (a[li1] > a[ui1]) {
        *i1 = li1;
        if (li2 == -1 || a[ui1] > a[li2])
            *i2 = ui1;
        else
            *i2 = li2;
    }
    else {
        *i1 = li1;
        if (li2 == -1 || a[ui2] > a[li2])
            *i2 = ui2;
        else
            *i2 = li2;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3126882_3126908_4_24
3126882_3126936_5_28
Title: Concatenate all arguments (except the executable name) 
----------------------------------------

int main (int argc, char **argv) {
    int i;
    int len = 1;
    char *str;
    for (i = 1; i < argc; i++) {
        len += strlen (argv[i]);
    }
    str = malloc (sizeof (char) * len);
    str[0] = '\0';
    for (i = 1; i < argc; i++) {
        strcat (str, argv [i]);
    }
    printf ("My string is %s\n", str);
    free (str);
}
----------------------------------------

int main (int argc, char **argv) {
    unsigned int i;
    size_t len = 0;
    char *_all_args, *all_args;
    for (i = 1; i < argc; i++) {
        len += strlen (argv[i]);
    }
    _all_args = all_args = (char *) malloc (len +argc - 1);
    for (i = 1; i < argc; i++) {
        memcpy (_all_args, argv [i], strlen (argv [i]));
        _all_args += strlen (argv[i]) + 1;
        *(_all_args - 1) = ' ';
    }
    *(_all_args - 1) = 0;
    printf ("All %d args: '%s'\n", argc, all_args);
    free (all_args);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31281252_31281362_3_34
31281252_31281701_5_29
Title: C programming about scanf and array 
----------------------------------------

int main () {
    int a [10];
    int i, max, count, nn;
    printf ("Enter numbers: ");
    for (i = 0; i < 10; i++) {
        if (scanf ("%d", &a[i]) != 1)
            break;
        if (a[i] == 0)
            break;
    }
    nn = i;
    max = a[0];
    count = 1;
    for (i = 1; i < nn; i++) {
        if (max < a[i]) {
            count = 1;
            max = a[i];
        }
        else if (max == a[i]) {
            count++;
        }
    }
    printf ("The largest number is %d\n", max);
    printf ("The occurrence count of the largest number is %d\n", count);
    return 0;
}
----------------------------------------

int main (void) {
    int count = 0;
    int max = INT_MIN;
    printf ("Enter numbers: ");
    for (;;) {
        int ch;
        int num;
        while (isspace (ch = fgetc (stdin)) && ch != '\n') {
        }
        if (ch == '\n' || ch == EOF)
            break;
        ungetc (ch, stdin);
        if (scanf ("%d", &num) != 1)
            break;
        if (num >= max) {
            count++;
            if (num > max) {
                max = num;
                count = 1;
            }
        }
    }
    printf ("The largest number is %d\n", max);
    printf ("The occurrence count of the largest number is %d", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31283810_31284062_3_31
31283810_31284436_15_38
Title: c program to check digits in number are even 
----------------------------------------

void main () {
    char bill [4];
    int i, flag = 0;
    int digit, len;
    scanf ("%s", bill);
    len = strlen (bill);
    if (len < 3) {
        printf ("no\n");
        return;
    }
    for (i = 0; i < len; i++) {
        digit = bill[i] - '0';
        if (digit % 2 == 0)
            flag = 1;
        else {
            flag = 0;
            break;
        }
    }
    if (i == 3 && flag == 1)
        printf ("Yes\n");
    else
        printf ("No\n");
    return;
}
----------------------------------------

int main () {
    char input [3];
    int i;
    char *output;
    printf ("Enter the number");
    scanf ("%s", & input);
    if (strlen (input) == 3) {
        for (i = 0; i < strlen (input); i++) {
            output = checknum (input[i]);
            if (output == "NO") {
                printf ("NO\n");
                break;
            }
        }
        if (output == "YES") {
            printf ("YES\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31285658_31290393_34_61
31285658_31895929_9_22
Title: C programming for changing all capital letters and changing all lower letters 
----------------------------------------

int main (void) {
    int ch;
    size_t i = 0, size = 32;
    char *str = malloc (size);
    printf ("Enter Sentence\n");
    while ((ch = getchar ()) != '\n' && ch != EOF) {
        str[i++] = ch;
        str[i++] = '\0';
        if (i-- == size) {
            char *temp = realloc (str, (size += 32));
            if (!temp) {
                fprintf (stderr, "realloc error\n");
                free (str);
                exit (EXIT_FAILURE);
            }
            str = temp;
        }
    }
    printf ("original   : %s\n", str);
    printf ("vice versa : %s\n", strvrs (str));
    printf ("upper      : %s\n", strupr (str));
    printf ("lower      : %s\n", strlwr (str));
    free (str);
    return 0;
}
----------------------------------------

int main () {
    printf ("Enter Sentence\n");
    while ((ch = getchar ()) != '\n') {
        chaCap (ch);
        printf ("%c", ch);
    }
    printf (" \n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31331326_31331950_46_77
31331326_31332743_1_12
Title: largest sum contiguous sub array using recursion to directly output result 
----------------------------------------

int fun (int n) {
    if (n == 0)
        return a[0];
    int max_till_j = fun (n -1);
    if (a[n] > a[n] + max_till_j) {
        maxherearray[n] = a[n];
        if (maxherearray[n] > max_sum) {
            start_idx = end_idx = n;
            max_sum = maxherearray[n];
        }
    }
    else {
        maxherearray[n] = a[n] + max_till_j;
        if (maxherearray[n] > max_sum) {
            end_idx = n;
            max_sum = maxherearray[n];
        }
    }
    return maxherearray[n];
}
----------------------------------------

int fun (int n, int *result) {
    int max_here = 0;
    if (n == 0) {
        return a[n];
    }
    max_here = max (a[n], a[n] + fun (n -1, result));
    *result = max (*result, max_here);
    return max_here;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31355004_31355062_4_14
31355004_31355117_1_16
Title: C pointer value - unexpected change in the LHS value 
----------------------------------------

int main () {
std :
    : unique_ptr < int > x (new int (10));
std :
    : unique_ptr < int > y (new int (45));
std :
    : cout << "Before: *x = " << * x << ", *y = " << * y << std : : endl;
    *x = *y;
std :
    : cout << "After:  *x = " << * x << ", *y = " << * y << std : : endl;
}
----------------------------------------

int main () {
    int a, b;
    int *x = &a, *y = &b;
    *x = 10;
    *y = 45;
std :
    : cout << * x << " " << * y << std : : endl;
    *x = *y;
std :
    : cout << * x << " " << * y << std : : endl;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31355004_31355062_4_14
31355004_31355142_4_18
Title: C pointer value - unexpected change in the LHS value 
----------------------------------------

int main () {
std :
    : unique_ptr < int > x (new int (10));
std :
    : unique_ptr < int > y (new int (45));
std :
    : cout << "Before: *x = " << * x << ", *y = " << * y << std : : endl;
    *x = *y;
std :
    : cout << "After:  *x = " << * x << ", *y = " << * y << std : : endl;
}
----------------------------------------

int main () {
    int *x = malloc (sizeof (int));
    int *y = malloc (sizeof (int));
    *x = 10;
    *y = 45;
    printf ("Before\n");
    printf ("*x = %d, *y = %d\n\n", * x, * y);
    *x = *y;
    printf ("After\n");
    printf ("*x = %d, *y = %d\n\n", * x, * y);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31355004_31355117_1_16
31355004_31355142_4_18
Title: C pointer value - unexpected change in the LHS value 
----------------------------------------

int main () {
    int a, b;
    int *x = &a, *y = &b;
    *x = 10;
    *y = 45;
std :
    : cout << * x << " " << * y << std : : endl;
    *x = *y;
std :
    : cout << * x << " " << * y << std : : endl;
    return 0;
}
----------------------------------------

int main () {
    int *x = malloc (sizeof (int));
    int *y = malloc (sizeof (int));
    *x = 10;
    *y = 45;
    printf ("Before\n");
    printf ("*x = %d, *y = %d\n\n", * x, * y);
    *x = *y;
    printf ("After\n");
    printf ("*x = %d, *y = %d\n\n", * x, * y);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31365220_31366844_106_185
31365220_31388545_30_111
Title: Insert into Nth position from the head of the stack 
----------------------------------------

int main (void) {
    int choice;
    do {
        printf ("\n  1 - Push");
        printf ("\n  2 - Pop");
        printf ("\n  3 - Insert Into Stack ");
        printf ("\n  4 - Display Stack");
        printf ("\n  5 - clear Stack");
        printf ("\n  6 - Enqueue");
        printf ("\n  7 - Dequeue ");
        printf ("\n  8 - Insert Into Queue ");
        printf ("\n  9 - Display Queue ");
        printf ("\n 10 - Display Queue ");
        printf ("\n 11 - Clear Queue ");
        printf ("\n  0 - Exit ");
        printf ("\n\n Please enter your choice: ");
        choice = 0;
        scanf ("%d", & choice);
        switch (choice) {
        case 1 :
            {
                int data = 0;
                printf ("Enter Data : ");
                scanf ("%d", & data);
                push (data);
                break;
            }
        case 2 :
            {
                pop ();
                break;
            }
        case 3 :
            {
                int data = 0;
                printf ("Enter Data : ");
                scanf ("%d", & data);
                size_t index = 0;
                printf ("Enter the index: ");
                scanf ("%zu", & index);
                insert_into_stack (data, index);
                break;
            }
        case 4 :
            {
                display_stack ();
                break;
            }
        case 5 :
            {
                clear_stack ();
                break;
            }
        case 6 :
        case 7 :
        case 8 :
        case 9 :
        case 10 :
            {
                puts ("\nWrite it yourself\n");
                break;
            }
        default :
            {
                if (choice != 0) {
                    puts ("\nInvalid input. Try again.\n");
                }
                else {
                    if (!is_stack_empty ())
                        clear_stack ();
                }
                break;
            }
        }
    }
    while (choice != 0);
}
----------------------------------------

int main () {
    int choice;
    int num;
    int index;
    while (1) {
        printf ("\n 1 - Push");
        printf ("\n 2 - Pop");
        printf ("\n 3 - display stack");
        printf ("\n 4 - Enqueue");
        printf ("\n 5 - Dequeue ");
        printf ("\n 6 - Show Queue ");
        printf ("\n 7 - Insert Into Queue ");
        printf ("\n 8 - Insert Into Stack ");
        printf ("\n 9 - Exit ");
        printf ("\n Please enter your choice");
        if (1 != scanf ("%d", &choice)) {
            perror ("scanf for menu choice failed");
            exit (EXIT_FAILURE);
        }
        switch (choice) {
        case 1 :
            printf ("Enter Data : ");
            scanf ("%d", & num);
            push (num);
            break;
        case 2 :
            pop ();
            break;
        case 3 :
            display ();
            break;
        case 4 :
            printf ("Enter Data: ");
            scanf ("%d", & num);
            enqueue (num);
            break;
        case 5 :
            dequeue ();
            break;
        case 6 :
            displayQ ();
            break;
        case 7 :
            printf ("Enter Data: ");
            scanf ("%d", & num);
            printf ("Enter the index: ");
            scanf ("%d", & index);
            insertIntoQ (num, index);
            break;
        case 8 :
            printf ("Enter Data: ");
            scanf ("%d", & num);
            printf ("Enter the index: ");
            scanf ("%d", & index);
            insertIntoS (num, index);
            break;
        case 9 :
            exit (0);
        default :
            printf ("invalid value entered, valid values 0...9\n");
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31365220_31366844_23_36
31365220_31388545_142_154
Title: Insert into Nth position from the head of the stack 
----------------------------------------

void pop () {
    if (stack.top == NULL) {
        printf ("You are trying to pop from a stack that is empty");
    }
    else {
        struct Node *tmp = stack.top;
        stack.top = stack.top->next;
        printf ("The popped value from the stack: %d \n", tmp -> data);
        free (tmp);
    }
}
----------------------------------------

void pop () {
    Node *temp;
    if (NULL == top) {
        printf ("You are trying to pop from a stack that is empty");
        return;
    }
    temp = top;
    top = top->next;
    free (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31366098_31366240_1_18
31366098_31366302_1_12
Title: Hash function C 
----------------------------------------

int hash (char *word) {
    int sum = 0;
    while (*word != '\0') {
        if (*word >= 'A' && *word < 'A' + 26)
            sum = sum + (*word - 'A' + 1);
        else if (*word >= 'a' && *word < 'a' + 26)
            sum = sum + (*word - 'a' + 1);
        else
            return -1;
        word++;
    }
    return sum;
}
----------------------------------------

char hash (char const *string, int *h) {
    *h = 0;
    for (; *string; ++string) {
        int index = tolower (*string) - 'a' + 1;
        if ((index > 0) && (index < 27)) {
            *h += index;
        }
        else {
            return 0;
        }
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31373932_31374039_1_14
31373932_31374160_1_19
Title: Filter linked list and return new linked list C 
----------------------------------------

Entry *filterLen (int len, Entry *en) {
    Entry *result, **temp = &result;
    for (; en; en = en->next) {
        if (en->len == len) {
            *temp = malloc (sizeof (Entry));
            (*temp)->word = en->word;
            (*temp)->len = en->len;
            temp = &((*temp)->next);
        }
    }
    *temp = NULL;
    return result;
}
----------------------------------------

struct Entry *filterLen (int len, struct Entry *en) {
    struct Entry *first = NULL;
    struct Entry *last = NULL;
    while (en != NULL) {
        if (en->len == len) {
            if (last) {
                last->next = (struct Entry *) malloc (sizeof (struct Entry));
                last = last->next;
            }
            else {last = (struct Entry *) malloc (sizeof (struct Entry));
            first = last;
        }
        last->word = en->word;
        last->len = en->len;
        last->next = NULL;
    }
    en = en->next;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31373932_31374039_1_14
31373932_31374169_1_15
Title: Filter linked list and return new linked list C 
----------------------------------------

Entry *filterLen (int len, Entry *en) {
    Entry *result, **temp = &result;
    for (; en; en = en->next) {
        if (en->len == len) {
            *temp = malloc (sizeof (Entry));
            (*temp)->word = en->word;
            (*temp)->len = en->len;
            temp = &((*temp)->next);
        }
    }
    *temp = NULL;
    return result;
}
----------------------------------------

Entry *filterLen (int len, Entry *en) {
    Entry result = {NULL, 0, NULL};
    Entry *curr = &result;
    while (en != NULL) {
        if (en->len == len) {
            Entry *temp = malloc (sizeof (*temp));
            *temp = *en;
            temp->next = NULL;
            curr = curr->next = temp;
        }
        en = en->next;
    }
    return result.next;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31373932_31374039_1_14
31373932_31374173_1_23
Title: Filter linked list and return new linked list C 
----------------------------------------

Entry *filterLen (int len, Entry *en) {
    Entry *result, **temp = &result;
    for (; en; en = en->next) {
        if (en->len == len) {
            *temp = malloc (sizeof (Entry));
            (*temp)->word = en->word;
            (*temp)->len = en->len;
            temp = &((*temp)->next);
        }
    }
    *temp = NULL;
    return result;
}
----------------------------------------

struct Entry *filterLen (int len, struct Entry *en) {
    struct Entry *result = NULL, *temp = NULL;
    while (en != NULL) {
        if (en->len == len) {
            if (temp == NULL) {
                result = malloc (sizeof (struct Entry));
                temp = result;
            }
            else {
                temp->next = malloc (sizeof (struct Entry));
                temp = temp->next;
            }
            temp->word = strdup (en->word);
            temp->len = en->len;
            temp->next = NULL;
        }
        en = en->next;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31373932_31374160_1_19
31373932_31374169_1_15
Title: Filter linked list and return new linked list C 
----------------------------------------

struct Entry *filterLen (int len, struct Entry *en) {
    struct Entry *first = NULL;
    struct Entry *last = NULL;
    while (en != NULL) {
        if (en->len == len) {
            if (last) {
                last->next = (struct Entry *) malloc (sizeof (struct Entry));
                last = last->next;
            }
            else {last = (struct Entry *) malloc (sizeof (struct Entry));
            first = last;
        }
        last->word = en->word;
        last->len = en->len;
        last->next = NULL;
    }
    en = en->next;
}
----------------------------------------

Entry *filterLen (int len, Entry *en) {
    Entry result = {NULL, 0, NULL};
    Entry *curr = &result;
    while (en != NULL) {
        if (en->len == len) {
            Entry *temp = malloc (sizeof (*temp));
            *temp = *en;
            temp->next = NULL;
            curr = curr->next = temp;
        }
        en = en->next;
    }
    return result.next;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31373932_31374160_1_19
31373932_31374173_1_23
Title: Filter linked list and return new linked list C 
----------------------------------------

struct Entry *filterLen (int len, struct Entry *en) {
    struct Entry *first = NULL;
    struct Entry *last = NULL;
    while (en != NULL) {
        if (en->len == len) {
            if (last) {
                last->next = (struct Entry *) malloc (sizeof (struct Entry));
                last = last->next;
            }
            else {last = (struct Entry *) malloc (sizeof (struct Entry));
            first = last;
        }
        last->word = en->word;
        last->len = en->len;
        last->next = NULL;
    }
    en = en->next;
}
----------------------------------------

struct Entry *filterLen (int len, struct Entry *en) {
    struct Entry *result = NULL, *temp = NULL;
    while (en != NULL) {
        if (en->len == len) {
            if (temp == NULL) {
                result = malloc (sizeof (struct Entry));
                temp = result;
            }
            else {
                temp->next = malloc (sizeof (struct Entry));
                temp = temp->next;
            }
            temp->word = strdup (en->word);
            temp->len = en->len;
            temp->next = NULL;
        }
        en = en->next;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31373932_31374169_1_15
31373932_31374173_1_23
Title: Filter linked list and return new linked list C 
----------------------------------------

Entry *filterLen (int len, Entry *en) {
    Entry result = {NULL, 0, NULL};
    Entry *curr = &result;
    while (en != NULL) {
        if (en->len == len) {
            Entry *temp = malloc (sizeof (*temp));
            *temp = *en;
            temp->next = NULL;
            curr = curr->next = temp;
        }
        en = en->next;
    }
    return result.next;
}
----------------------------------------

struct Entry *filterLen (int len, struct Entry *en) {
    struct Entry *result = NULL, *temp = NULL;
    while (en != NULL) {
        if (en->len == len) {
            if (temp == NULL) {
                result = malloc (sizeof (struct Entry));
                temp = result;
            }
            else {
                temp->next = malloc (sizeof (struct Entry));
                temp = temp->next;
            }
            temp->word = strdup (en->word);
            temp->len = en->len;
            temp->next = NULL;
        }
        en = en->next;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31395283_31395446_5_18
31395283_31400435_6_20
Title: Check sorting of an array 
----------------------------------------

int main () {
    int i = 0, res = 0;
    int *arr = NULL;
    arr = (int *) malloc (sizeof (int));
    scanf ("%d", & arr [i]);
    while (arr[i] != 0) {
        i++;
        arr = (int *) realloc (arr, (i + 1) * sizeof (int));
        scanf ("%d", & arr [i]);
    }
    res = ordenado (arr);
    printf ("\n%d ", res);
    return 0;
}
----------------------------------------

int main () {
    int i = 0, n, res;
    int *arr = NULL;
    while (scanf ("%d", &n) == 1 && n != 0) {
        arr = realloc (arr, (i + 1) * sizeof (int));
        if (!arr) {
            printf ("out of memory\n");
            return 1;
        }
        arr[i++] = n;
    }
    res = ordenado (arr, i);
    printf ("%d\n", res);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31397373_31397860_41_51
31397373_31398234_1_12
Title: Check if a string is palindrome in C 
----------------------------------------

int pali (char *a) {
    int flag = 0, i;
    int len = strlen (a);
    for (i = 0; i < len; i++) {
        if (a[i] == a[len - i - 1])
            flag = flag + 1;
    }
    return flag;
}
----------------------------------------

int pali (char *texto) {
    char *end;
    for (end = texto; *end != '\0'; end++)
        ;
    for (--end; texto < end; ++texto, --end) {
        if (*texto != *end)
            return 0;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31429707_31430890_3_31
31429707_31431915_3_48
Title: Printing consecutive entries as pairs from an array 
----------------------------------------

void main () {
    int i, x, j = 0, n, *a, *b;
    printf ("insert N");
    scanf ("%d", & n);
    a = (int *) malloc (n * sizeof (int));
    b = (int *) malloc (n * sizeof (int));
    printf ("insert group of numbers");
    for (i = 0; i < n; i++)
        scanf ("%d", &a[i]);
    for (i = 0; i < n; ++i) {
        x = 0;
        while ((i + 1) < n && a[i] == a[i + 1]) {
            ++x;
            ++i;
        }
        if (x > 1) {
            b[j++] = a[i];
            b[j++] = x + 1;
        }
        else
            b[j++] = a[i];
    }
    for (i = 0; i < j; ++i)
        printf ("%d  ", b[i]);
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("\nEnter array size: ");
        size_t n = 0;
        scanf ("%zu", & n);
        if (!n)
            break;
        int a [n];
        printf ("Enter %zu elements of the array: ", n);
        for (size_t i = 0; i < n; i++)
            scanf ("%d", &a[i]);
        printf ("\na[%zu] = { ", n);
        for (size_t i = 0; i < n; i++)
            printf ("%d, ", a[i]);
        printf ("}\n");
        size_t m = 0;
        size_t count;
        for (size_t i = 0; i < n; i += count) {
            count = 0;
            while (++count + i < n && a[count + i] == a[i])
                ;
            m += count > 1 ? 2 : 1;
        }
        int b [m];
        for (size_t i = 0, j = 0; i < n; i += count) {
            count = 0;
            while (++count + i < n && a[count + i] == a[i])
                ;
            b[j++] = a[i];
            if (count > 1)
                b[j++] = count;
        }
        printf ("b[%zu] = { ", m);
        for (size_t i = 0; i < m; i++)
            printf ("%d, ", b[i]);
        printf ("}\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31448552_31449787_6_42
31448552_31450015_4_21
Title: In the following c program if condition is not working 
----------------------------------------

int main (void) {
    char line [20];
    unsigned int iRandom;
    unsigned int iResponse;
    const unsigned int Base = 10;
    srand ((unsigned int) time (NULL));
    iRandom = rand () % Base + 1;
    printf ("\nGuess a number between 1 and %u: ", Base);
    scanf ("%20s", line);
    errno = 0;
    iResponse = (unsigned int) strtoul (line, NULL, Base);
    if (!errno && iResponse >= 1 && iResponse <= 10) {
        if (iResponse == iRandom) {
            puts ("\nYou guessed right.");
        }
        else {
            puts ("\nSorry, you guessed wrong.");
            printf ("The correct guess was %u\n", iRandom);
        }
    }
    else {
        puts ("\nYou did not enter a number");
    }
    return 0;
}
----------------------------------------

int main () {
    srand (time (0));
    int iRandom = (rand () % 10) + 1, iResponse;
    printf ("\nGuess a number between 1 and 10: ");
    if (scanf ("%d", &iResponse)) {
        if (iResponse >= 1 && iResponse <= 10) {
            if (iResponse == iRandom)
                printf ("\nYou guessed right.\n");
            else
                printf ("\nSorry, The correct guess was %d\n", iRandom);
        }
        else
            printf ("You did not enter a number between 1 and 10.");
    }
    else
        printf ("\nYou did not enter a number.\n");
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52458464_52458505_1_16
52458464_52458512_1_19
Title: implementing strcat without changing the inputs 
----------------------------------------

char *my_strcat (const char *s1, const char *s2) {
    char *p = malloc (strlen (s1) +strlen (s2) + 1);
    char *start = p;
    if (p != NULL) {
        while (*s1 != '\0')
            *p++ = *s1++;
        while (*s2 != '\0')
            *p++ = *s2++;
        *p = '\0';
    }
    return start;
}
----------------------------------------

char *my_strcat (const char *s1, const char *s2) {
    char *result = malloc (strlen (s1) +strlen (s2) + 1);
    char *dest = result;
    while (*s1 != '\0')
        *dest++ = *s1++;
    while (*s2 != '\0')
        *dest++ = *s2++;
    *dest++ = '\0';
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52458464_52458505_1_16
52458464_52458570_1_12
Title: implementing strcat without changing the inputs 
----------------------------------------

char *my_strcat (const char *s1, const char *s2) {
    char *p = malloc (strlen (s1) +strlen (s2) + 1);
    char *start = p;
    if (p != NULL) {
        while (*s1 != '\0')
            *p++ = *s1++;
        while (*s2 != '\0')
            *p++ = *s2++;
        *p = '\0';
    }
    return start;
}
----------------------------------------

char *my_strcat (char *s1, char *s2) {
    char *p = malloc (strlen (s1) +strlen (s2) + 1);
    char *c = p;
    while (*s1 != '\0')
        *(c++) = *(s1++);
    printf ("%s\n\n", p);
    while (*s2 != '\0')
        *(c++) = *(s2++);
    *c = '\0';
    return p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52458464_52458512_1_19
52458464_52458570_1_12
Title: implementing strcat without changing the inputs 
----------------------------------------

char *my_strcat (const char *s1, const char *s2) {
    char *result = malloc (strlen (s1) +strlen (s2) + 1);
    char *dest = result;
    while (*s1 != '\0')
        *dest++ = *s1++;
    while (*s2 != '\0')
        *dest++ = *s2++;
    *dest++ = '\0';
    return result;
}
----------------------------------------

char *my_strcat (char *s1, char *s2) {
    char *p = malloc (strlen (s1) +strlen (s2) + 1);
    char *c = p;
    while (*s1 != '\0')
        *(c++) = *(s1++);
    printf ("%s\n\n", p);
    while (*s2 != '\0')
        *(c++) = *(s2++);
    *c = '\0';
    return p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52492501_52493067_5_21
52492501_52493174_1_31
Title: How to return a pointer to a string in C 
----------------------------------------

char *reverseStr (char s []) {
    printf ("Initial string is: %s\n", s);
    int cCounter = strlen (s);
    char *result = malloc (cCounter +1);
    printf ("String contains %d symbols\n", cCounter);
    int begin = cCounter;
    for (; cCounter > 0; cCounter--) {
        result[begin - cCounter] = s[cCounter - 1];
    }
    result[begin] = '\0';
    return result;
}
----------------------------------------

char *reverseStr (char s []) {
    printf ("Initial string is: %s\n", s);
    int cCounter = 0;
    while (*s != '\0') {
        cCounter++;
        s++;
    }
    s--;
    printf ("String contains %d symbols\n", cCounter);
    char *result = (char *) malloc (sizeof (char) * (cCounter + 1));
    if (result == NULL) {
        puts ("Can't allocate memory!");
        exit (0);
    }
    char *tempResult = result;
    for (int begin = 0; begin < cCounter; begin++) {
        *tempResult = *s;
        s--;
        tempResult++;
    }
    *tempResult = '\0';
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52548657_52548976_4_15
52548657_52549742_9_35
Title: Counting Number Of User Input in C Program 
----------------------------------------

int main (void) {
    int patients;
    char str [10];
    printf ("Enter number of patients:");
    int numberOfInputs = scanf ("%[0-9]", str);
    if (numberOfInputs != 1) {
        printf ("ERROR: Wrong number of arguments. Please enter one argument.\n");
    }
    patients = atoi (str);
}
----------------------------------------

int main () {
    char str [512];
    while (1) {
        printf ("Enter text: ");
        fgets (str, 512, stdin);
        int numberOfInput = getNumberOfInput (str);
        if (numberOfInput == 0)
            printf ("You must give an input\n");
        else if (numberOfInput > 1)
            printf ("You have to give exactly one input\n");
        else {
            if (!isNumber (str))
                printf ("The input is not an integer\n");
            else {
                int input = atoi (str);
                printf ("input: %d\n", input);
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52548997_52549110_5_18
52548997_52549344_6_11
Title: why sizeof type compared with integer returns false 
----------------------------------------

int main () {
    int x = (int) sizeof (int) > -1;
    bool z = sizeof (int);
    printf ("x is %d \t z is %d \n", x, z);
    if ((int) sizeof (int) > -1) {
        printf ("true\n");
    }
    else
        printf ("false\n");
}
----------------------------------------

int main (int argc, char **argv) {
    if (b < a)
    std :
    : cout << "The world is mad.\n";
    if (a > b)
    std :
    : cout << "Yes, it is.\n";
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52556865_52557722_3_67
52556865_52562378_3_50
Title: raise a Matrix to the power in c 
----------------------------------------

int main () {
    int n, p;
    printf ("Numer of Rows/Colums of sq matrix: ");
    scanf ("%d", & n);
    printf ("to the power of: ");
    scanf ("%d", & p);
    int m [n] [n];
    int r [n] [n];
    int temp [n] [n];
    printf ("Elements\n");
    for (int b = 0; b < n; b++) {
        for (int d = 0; d < n; d++) {
            printf ("[%d][%d] = ", b + 1, d + 1);
            scanf ("%d", & m [b] [d]);
        }
    }
    for (int b = 0; b < n; b++) {
        for (int d = 0; d < n; d++) {
            r[b][d] = m[b][d];
        }
    }
    for (int i = 0; i < p - 1; i++) {
        int sum = 0;
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                for (int k = 0; k < n; k++) {
                    sum += m[b][k] * r[k][d];
                }
                temp[b][d] = sum;
                sum = 0;
            }
        }
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                r[b][d] = temp[b][d];
            }
        }
    }
    printf ("RESULT:\n");
    for (int c = 0; c < n; c++) {
        for (int d = 0; d < n; d++) {
            printf ("%d   ", r [c] [d]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int n, p;
    printf ("Number of Rows/Colums of square matrix: ");
    if (scanf ("%d", &n) != 1 || n <= 0)
        return 1;
    printf ("to the power of: ");
    if (scanf ("%d", &p) != 1 || p < 0)
        return 1;
    int m [n] [n];
    int r [n] [n];
    int t [n] [n];
    printf ("Elements\n");
    for (int b = 0; b < n; b++) {
        for (int d = 0; d < n; d++) {
            printf ("[%d][%d] = ", b + 1, d + 1);
            if (scanf ("%d", &m[b][d]) != 1)
                return 1;
            r[b][d] = b == d;
        }
    }
    for (int i = 0; i < p; i++) {
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                int sum = 0;
                for (int k = 0; k < n; k++) {
                    sum += r[b][k] * m[k][d];
                }
                t[b][d] = sum;
            }
        }
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                r[b][d] = t[b][d];
            }
        }
    }
    printf ("RESULT:\n");
    for (int c = 0; c < n; c++) {
        for (int d = 0; d < n; d++) {
            printf ("%3d ", r [c] [d]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52556865_52558019_3_60
52556865_52562378_3_50
Title: raise a Matrix to the power in c 
----------------------------------------

int main () {
    int n, p;
    printf ("Numer of Rows/Colums of sq matrix: ");
    scanf ("%d", & n);
    printf ("to the power of: ");
    scanf ("%d", & p);
    int m [n] [n];
    int r [n] [n];
    int tmp [n] [n];
    printf ("Elements\n");
    for (int b = 0; b < n; b++) {
        for (int d = 0; d < n; d++) {
            printf ("[%d][%d] = ", b + 1, d + 1);
            scanf ("%d", & m [b] [d]);
            r[b][d] = m[b][d];
        }
    }
    int sum = 0;
    for (int i = 0; i < p - 1; i++) {
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                for (int k = 0; k < n; k++) {
                    sum += r[b][k] * m[k][d];
                }
                tmp[b][d] = sum;
                sum = 0;
            }
        }
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                r[b][d] = tmp[b][d];
            }
        }
    }
    printf ("RESULT:-\n");
    for (int c = 0; c < n; c++) {
        for (int d = 0; d < n; d++) {
            printf ("%d   ", r [c] [d]);
        }
        printf ("\n");
    }
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    int n, p;
    printf ("Number of Rows/Colums of square matrix: ");
    if (scanf ("%d", &n) != 1 || n <= 0)
        return 1;
    printf ("to the power of: ");
    if (scanf ("%d", &p) != 1 || p < 0)
        return 1;
    int m [n] [n];
    int r [n] [n];
    int t [n] [n];
    printf ("Elements\n");
    for (int b = 0; b < n; b++) {
        for (int d = 0; d < n; d++) {
            printf ("[%d][%d] = ", b + 1, d + 1);
            if (scanf ("%d", &m[b][d]) != 1)
                return 1;
            r[b][d] = b == d;
        }
    }
    for (int i = 0; i < p; i++) {
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                int sum = 0;
                for (int k = 0; k < n; k++) {
                    sum += r[b][k] * m[k][d];
                }
                t[b][d] = sum;
            }
        }
        for (int b = 0; b < n; b++) {
            for (int d = 0; d < n; d++) {
                r[b][d] = t[b][d];
            }
        }
    }
    printf ("RESULT:\n");
    for (int c = 0; c < n; c++) {
        for (int d = 0; d < n; d++) {
            printf ("%3d ", r [c] [d]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52557953_52558148_5_20
52557953_52558228_5_20
Title: generate random number of arithmetic progression in c programming 
----------------------------------------

int main () {
    float r;
    srand ((unsigned) time (NULL));
    r = (float) rand () / RAND_MAX * 20;
    d = (float) rand () / RAND_MAX * 1;
    if (d == 1) {
        r = r + 0.5;
    }
    printf ("%.1f\n", r);
    return (0);
}
----------------------------------------

int main () {
    float r;
    int n;
    srand ((unsigned) time (NULL));
    for (int i = 0; i < 10; ++i) {
        n = rand () % 40 + 1;
        r = n / 2.0;
        printf ("%.1f\n", r);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52561123_52561460_9_20
52561123_52561462_9_23
Title: Why does assignment with a pointer created using malloc cause segmentation fault 
----------------------------------------

int main (void) {
    char *str1 = malloc (initial_malloc);
    if (str1) {
        strcpy (str1, "hello");
        mystrncat (str1, "World", 3);
        printf ("%s\n", str1);
        free (str1);
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    char *str1 = malloc (initial_malloc);
    char *str2 = malloc (initial_malloc);
    if (str1 == NULL || str2 == NULL) {
        printf ("memory allocation failure\n");
        return EXIT_FAILURE;
    }
    strcpy (str1, "hello");
    strcpy (str2, "World");
    mystrncat (str1, str2, 3);
    printf ("%s\n", str1);
    free (str1);
    free (str2);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52571434_52572009_1_24
52571434_52574432_4_20
Title: Writing bits inside hexadecimal array 
----------------------------------------

void write_bits (uint32_t container [], unisgned offset, uint32_t value, unsigned size) {
    unsigned idx = offset / 32;
    unsigned bits = -offset % 32U;
    if (size <= bits) {
        unsigned shift = bits - size;
        uint32_t mask = (UINT32_C (1) << bits) - (UINT32_C (1) << shift);
        container[idx] &= ~mask;
        container[idx] |= value << shift;
    }
    else {
        unsigned shift = size - bits;
        uint32_t mask = (UINT32_C (1) << bits) - 1;
        container[idx] &= ~mask;
        container[idx] |= value >> shift;
        ++idx;
        shift = 32 - shift;
        mask = ~UINT32_C (0) << shift;
        container[idx] &= ~mask;
        container[idx] |= value << shift;
    }
}
----------------------------------------

void write_bits (unsigned *a, int off, unsigned v) {
    int elembits = (int) (sizeof *a) * CHAR_BIT, lsbits = elembits - off, msbits = off - lsbits, cont_idx = off / (sizeof *a * CHAR_BIT);
    a[cont_idx] = a[cont_idx] >> lsbits;
    a[cont_idx] = a[cont_idx] << lsbits;
    a[cont_idx] |= (v >> msbits);
    cont_idx++;
    a[cont_idx] = a[cont_idx] << msbits;
    a[cont_idx] = a[cont_idx] >> msbits;
    a[cont_idx] |= ((v >> lsbits) << msbits);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52577681_52578049_16_51
52577681_52578420_31_60
Title: Returning -1 to a user defined function is resulting to termination of program with exit code 0 
----------------------------------------

int display () {
    char buf [256];
    char *p;
    long value;
    for (;;) {
        printf ("Enter number to find factorial or press ENTER KEY to exit: ");
        if (fgets (buf, sizeof buf, stdin) == NULL || *buf == '\n')
            return -1;
        errno = 0;
        value = strtol (buf, &p, 0);
        if (p == buf) {
            printf ("Invalid input: not a number\n");
        }
        else {
            if (value < 0) {
                printf ("Invalid input: negative values not allowed\n");
            }
            else if (errno != 0 || value > INT_MAX) {
                printf ("Invalid input: value too large for type int\n");
            }
            else {
                return (int) value;
            }
        }
    }
    void fact_fun (int num_fact) {
        int fact = 1;
        for (int i = 1; i <= num_fact; i++) {
            if (fact > INT_MAX / i) {printf ("Invalid input: arithmetic overflow\n");
            return;
        }
        fact = fact * i;
    } printf ("Factorial of %d is %d\n", num_fact, fact);
}
----------------------------------------

int display () {
    char inp [10] = {0};
    char c;
    int input = 0;
    int index = 0;
    printf ("\nEnter number to find factorial or press ENTER KEY to exit: ");
    while (((c = getchar ()) != EOF) && (c != '\n') && (index < 10)) {
        if ((c >= '0') && (c <= '9')) {
            inp[index++] = c;
        }
        else {
            input = -1;
            break;
        }
    }
    while ((c != EOF) && (c != '\n')) {
        c = getchar ();
    }
    if (!input) {
        if (index)
            input = atoi (inp);
        else
            input = -2;
    }
    return input;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52584197_52584669_2_25
52584197_52584859_2_24
Title: C program to output the largest element of array with the index of the largest element of array 
----------------------------------------

int main () {
    int i, max_index;
    float arr [5], max;
    printf ("Please enter five numbers:\n ");
    for (i = 0; i < 5; ++i) {
        scanf ("%f", & arr [i]);
    }
    max = arr[0];
    for (i = 0; i < 5; i++) {
        if (arr[i] > max) {
            max = arr[i];
            max_index = i;
        }
    }
    printf ("Largest element = %.2f at index %d", max, max_index);
    return 0;
}
----------------------------------------

int main () {
    int i, temp = 0;
    float arr [5];
    printf ("Please enter five numbers:\n ");
    for (i = 0; i < 5; ++i) {
        scanf_s ("%f", & arr [i]);
    }
    for (i = 1; i < 5; ++i) {
        if (arr[temp] < arr[i])
            temp = i;
    }
    printf ("Largest element = %.2f", arr [temp]);
    printf ("Index = %d", temp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52587340_52587542_4_21
52587340_52587919_3_27
Title: c language ask a triangle formula 
----------------------------------------

int main () {
    int a = 0, b = 0, c = 0, count = 0;
    int sum = a + b + c;
    printf ("Sum of three sides: ");
    scanf ("%d", & sum);
    for (a = 1; a < sum; a++)
        for (b = 1; b < sum; b++)
            for (c = 1; c < sum; c++)
                if ((a + b + c == sum) && ((a + b > c) && (a + c > b) && (c + b > a))) {
                    printf ("%d\t %d\t %d\n", a, b, c);
                    count++;
                }
    printf ("number of triangles: %d", count);
}
----------------------------------------

int main () {
    int a, b, c, count = 0;
    int sum;
    printf ("Sum of three sides: ");
    scanf_s ("%d", & sum);
    for (a = 1; a < sum; a++) {
        for (b = 1; b < sum; b++) {
            c = sum - a - b;
            if (c < 1)
                break;
            if ((a + b > c) && (a + c > b) && (b + c > a)) {
                printf ("%d\t %d\t %d\n", a, b, c);
                ++count;
            }
        }
    }
    printf ("number of triangle: %d", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52587340_52587542_4_21
52587340_52588021_3_29
Title: c language ask a triangle formula 
----------------------------------------

int main () {
    int a = 0, b = 0, c = 0, count = 0;
    int sum = a + b + c;
    printf ("Sum of three sides: ");
    scanf ("%d", & sum);
    for (a = 1; a < sum; a++)
        for (b = 1; b < sum; b++)
            for (c = 1; c < sum; c++)
                if ((a + b + c == sum) && ((a + b > c) && (a + c > b) && (c + b > a))) {
                    printf ("%d\t %d\t %d\n", a, b, c);
                    count++;
                }
    printf ("number of triangles: %d", count);
}
----------------------------------------

int main () {
    int a = 1, b = 1, c = 1, count = 0;
    int sum = 0;
    printf ("Sum of three sides: ");
    scanf ("%d", & sum);
    while (a < sum) {
        b = 1;
        while (b < sum) {
            c = 1;
            while (c < sum) {
                if ((a + b + c == sum) && (a + b > c) && (a + c > b) && (c + b > a)) {
                    count += 1;
                    printf ("Triangle %d:\nSide 1: %d   Side 2: %d   Side 3: %d\n\n", count, a, b, c);
                }
                c++;
            }
            b++;
        }
        a++;
    }
    printf ("Possible number of triangles: %d", count);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52587340_52587919_3_27
52587340_52588021_3_29
Title: c language ask a triangle formula 
----------------------------------------

int main () {
    int a, b, c, count = 0;
    int sum;
    printf ("Sum of three sides: ");
    scanf_s ("%d", & sum);
    for (a = 1; a < sum; a++) {
        for (b = 1; b < sum; b++) {
            c = sum - a - b;
            if (c < 1)
                break;
            if ((a + b > c) && (a + c > b) && (b + c > a)) {
                printf ("%d\t %d\t %d\n", a, b, c);
                ++count;
            }
        }
    }
    printf ("number of triangle: %d", count);
    return 0;
}
----------------------------------------

int main () {
    int a = 1, b = 1, c = 1, count = 0;
    int sum = 0;
    printf ("Sum of three sides: ");
    scanf ("%d", & sum);
    while (a < sum) {
        b = 1;
        while (b < sum) {
            c = 1;
            while (c < sum) {
                if ((a + b + c == sum) && (a + b > c) && (a + c > b) && (c + b > a)) {
                    count += 1;
                    printf ("Triangle %d:\nSide 1: %d   Side 2: %d   Side 3: %d\n\n", count, a, b, c);
                }
                c++;
            }
            b++;
        }
        a++;
    }
    printf ("Possible number of triangles: %d", count);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52613856_52614482_7_38
52613856_52614523_7_40
Title: how to selectively pass columns or rows of a 2D array to a function? 
----------------------------------------

int main (void) {
    mac_t macs [3] = {0};
    macs[0][0] = 0x00;
    macs[0][1] = 0x00;
    macs[0][2] = 0x00;
    macs[0][3] = 0x00;
    macs[0][4] = 0x00;
    macs[0][5] = 0x00;
    macs[1][0] = 0x01;
    macs[1][1] = 0x01;
    macs[1][2] = 0x01;
    macs[1][3] = 0x01;
    macs[1][4] = 0x01;
    macs[1][5] = 0x01;
    macs[2][0] = 0x02;
    macs[2][1] = 0x02;
    macs[2][2] = 0x02;
    macs[2][3] = 0x02;
    macs[2][4] = 0x02;
    macs[2][5] = 0x02;
    mac_print (macs [0]);
    mac_print (macs [1]);
    mac_print (macs [2]);
}
----------------------------------------

int main (void) {
    mac_t macs [3] = {0};
    macs[0].v[0] = 0x00;
    macs[0].v[1] = 0x00;
    macs[0].v[2] = 0x00;
    macs[0].v[3] = 0x00;
    macs[0].v[4] = 0x00;
    macs[0].v[5] = 0x00;
    macs[1].v[0] = 0x01;
    macs[1].v[1] = 0x01;
    macs[1].v[2] = 0x01;
    macs[1].v[3] = 0x01;
    macs[1].v[4] = 0x01;
    macs[1].v[5] = 0x01;
    macs[2].v[0] = 0x02;
    macs[2].v[1] = 0x02;
    macs[2].v[2] = 0x02;
    macs[2].v[3] = 0x02;
    macs[2].v[4] = 0x02;
    macs[2].v[5] = 0x02;
    mac_print (macs [0]);
    mac_print (macs [1]);
    mac_print (macs [2]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52619631_52624812_80_104
52619631_52658505_2_57
Title: C program to output array lists and then swap the elements between lists and output them again 
----------------------------------------

int main () {
    Node head1 = NULL;
    Node head2 = NULL;
    struct Structure s;
    int c;
    do {
        c = Menu ();
        switch (c) {
        case 1 :
            Read (&s);
            NewNode (s, & head1);
            break;
        case 2 :
            Read (&s);
            NewNode (s, & head2);
            break;
        case 3 :
            SwapLists (head1, head2);
            break;
        case 4 :
            ViewLists (head1, head2);
            break;
        default :
            c = 0;
        }
    }
    while (c != 0);
}
----------------------------------------

int main () {
    int List1 [5], List2 [5];
    int i, j, temp;
    printf ("Please enter the values to List1 array\n ");
    for (i = 0; i < 5; i++) {
        scanf ("%d", & List1 [i]);
    }
    printf ("Please enter the values to List2 array\n");
    for (j = 0; j < 5; j++) {
        scanf ("%d", & List2 [j]);
    }
    printf ("List1 and List2 before swap\n");
    printf ("\nList 1:");
    for (i = 0; i < 5; i++) {
        printf ("\t%d", List1 [i]);
    }
    printf ("\nList 2:");
    for (j = 0; j < 5; j++) {
        printf ("\t%d", List2 [j]);
    }
    for (i = 0; i < 5; i++) {
        temp = List1[i];
        List1[i] = List2[i];
        List2[i] = temp;
    }
    printf ("\nList1 and List2 after swap");
    printf ("\nList 1:");
    for (i = 0; i < 5; i++) {
        printf ("\t%d", List1 [i]);
    }
    printf ("\nList 2:");
    for (j = 0; j < 5; j++) {
        printf ("\t%d", List2 [j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52625172_52625235_1_24
52625172_52626660_1_14
Title: pointer is not modifying in insert in c 
----------------------------------------

void insert (struct node **head, int data, int priority) {
    struct node *newnode = getnewnode (data, priority);
    if (*head == NULL) {
        *head = newnode;
        printf ("head in insert is %d", * head);
        return;
    }
    if ((*head)->priority > newnode->priority) {
        newnode->next = *head;
        *head = newnode;
        return;
    }
    if ((*head)->priority <= newnode->priority) {
        struct node *temp = *head;
        while (temp->priority <= newnode->priority && temp->next != NULL) {
            temp = temp->next;
        }
        newnode->next = temp->next;
        temp->next = newnode;
        return;
    }
}
----------------------------------------

void insert (struct node **head, int data, int priority) {
    struct node *newnode = getnewnode (data, priority);
    for (; *head; head = &(*head)->next) {
        if ((*head)->priority > newnode->priority)
            break;
    }
    newnode->next = *head;
    *head = newnode;
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5263018_10014756_5_45
5263018_19666043_3_18
Title: Copying Binary Files 
----------------------------------------

void main () {
    char s_file [100], d_file [100], buf [512];
    short char copy = 'y';
    int in_handle, out_handle, flg, len;
    printf ("\nEnter File Name : ");
    fflush (stdin);
    gets (s_file);
    printf ("\nEnter Destination File Name : ");
    fflush (stdin);
    gets (d_file);
    in_handle = open (s_file, O_RDONLY | O_BINARY);
    if (in_handle < 0) {
        printf ("\nSource File not Found... ");
    }
    else {
        out_handle = open (d_file, O_CREAT | O_WRONLY | O_BINARY, S_IWRITE);
        while ((len = read (in_handle, buf, 512)) > 0) {
            flg = write (out_handle, buf, len);
            if (flg == -1)
                break;
        }
        if (flg == -1) {
            printf ("Unable to Create");
        }
        else {
            printf ("File Created");
        }
    }
    if (!(in_handle < 0))
        close (in_handle);
    if (!(out_handle < 0))
        ;
    close (out_handle);
}
----------------------------------------

int main () {
    FILE *fp1, *fp2;
    char c;
    fp1 = fopen ("source file", "rb");
    if (fp1 == NULL)
        exit (1);
    fp2 = fopen ("destination file", "wb");
    if (fp2 == NULL)
        exit (1);
    while ((c = fgetc (fp1)) != EOF)
        fputc (c, fp2);
    fclose (fp1);
    fclose (fp2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5263018_10014756_5_45
5263018_5263038_5_20
Title: Copying Binary Files 
----------------------------------------

void main () {
    char s_file [100], d_file [100], buf [512];
    short char copy = 'y';
    int in_handle, out_handle, flg, len;
    printf ("\nEnter File Name : ");
    fflush (stdin);
    gets (s_file);
    printf ("\nEnter Destination File Name : ");
    fflush (stdin);
    gets (d_file);
    in_handle = open (s_file, O_RDONLY | O_BINARY);
    if (in_handle < 0) {
        printf ("\nSource File not Found... ");
    }
    else {
        out_handle = open (d_file, O_CREAT | O_WRONLY | O_BINARY, S_IWRITE);
        while ((len = read (in_handle, buf, 512)) > 0) {
            flg = write (out_handle, buf, len);
            if (flg == -1)
                break;
        }
        if (flg == -1) {
            printf ("Unable to Create");
        }
        else {
            printf ("File Created");
        }
    }
    if (!(in_handle < 0))
        close (in_handle);
    if (!(out_handle < 0))
        ;
    close (out_handle);
}
----------------------------------------

int main (int argc, char **argv) {
    charmybuf[BUFSIZE] = {0}, *p = NULL;
    FILE *ifd = NULL, *ofd = NULL;
    ifp = fopen (argv [1], � � � r � � �)
    ofp = fopen (argv [2], � � � w � � �)
    assert (ifp != NULL);
    assert (ofp != NULL);
    while ((n = fread (mybuf, sizeof (char), BUFSIZE, ifd)) > 0) {
        fwrite (mybuf, sizeof (char), BUFSIZE, ofd);
    }
    fclose (ifd);
    fclose (ofd);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5263018_19666043_3_18
5263018_5263038_5_20
Title: Copying Binary Files 
----------------------------------------

int main () {
    FILE *fp1, *fp2;
    char c;
    fp1 = fopen ("source file", "rb");
    if (fp1 == NULL)
        exit (1);
    fp2 = fopen ("destination file", "wb");
    if (fp2 == NULL)
        exit (1);
    while ((c = fgetc (fp1)) != EOF)
        fputc (c, fp2);
    fclose (fp1);
    fclose (fp2);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    charmybuf[BUFSIZE] = {0}, *p = NULL;
    FILE *ifd = NULL, *ofd = NULL;
    ifp = fopen (argv [1], � � � r � � �)
    ofp = fopen (argv [2], � � � w � � �)
    assert (ifp != NULL);
    assert (ofp != NULL);
    while ((n = fread (mybuf, sizeof (char), BUFSIZE, ifd)) > 0) {
        fwrite (mybuf, sizeof (char), BUFSIZE, ofd);
    }
    fclose (ifd);
    fclose (ofd);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52630930_52632096_1_16
52630930_52632380_1_31
Title: "My program return sometime true but not always Codewars question ""Are they same""" 
----------------------------------------

bool comp (int *a, int *b, size_t sizeArray) {
    for (int k = 0; k < sizeArray; k++) {
        for (int i = 0; i < sizeArray; i++) {
            if (b[i] < 0)
                return false;
            if ((a[k] == 0 && b[i] == 0) || (a[k] == (b[i] / a[k]) && (b[i] % a[k] == 0)))
                break;
            if (i + 1 == sizeArray)
                return false;
        }
    }
    return true;
}
----------------------------------------

bool comp (const int *a, const int *b, size_t sizeArray) {
    for (size_t k = 0; k < sizeArray; k++) {
        size_t i;
        for (i = 0; i < sizeArray; i++) {
            long long aa = (long long) a[i] * a[i];
            if (aa == b[k]) {
                break;
            }
        }
        if (i == sizeArray) {
            return false;
        }
    }
    for (size_t k = 0; k < sizeArray; k++) {
        size_t i;
        for (i = 0; i < sizeArray; i++) {
            long long aa = (long long) a[k] * a[k];
            if (aa == b[i]) {
                break;
            }
        }
        if (i == sizeArray) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52631751_52631833_4_26
52631751_52632249_4_29
Title: IO in C standard 
----------------------------------------

int main () {
    int seed;
    int Range;
    char ch;
    do {
        printf ("Enter a seed: ");
        scanf ("%d", & seed);
        printf ("Enter a Range: ");
        scanf ("%d", & Range);
        srand (seed);
        for (int i = 0; i < 10; i++) {
            scheduler (rand () % Range + 1);
        }
        printf ("Continue?\n");
        scanf (" %c", & ch);
    }
    while (ch != 'n');
    return 0;
}
----------------------------------------

int main () {
    int seed;
    int Range;
    char ch = '\0';
    while (ch != 'n') / single quote characters, double quote for strings imply null character \ 0 after last character in string * / {printf ("Enter a seed: ");
    fflush (stdout);
    scanf ("%d", & seed);
    printf ("Enter a Range: ");
    fflush (stdout);
    scanf ("%d", & Range);
    srand (seed);
    for (int i = 0; i < 10; i++) {
        scheduler (rand () % Range + 1);
    }
    printf ("Continue?\n");
    scanf ("%c", & ch);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5263567_31099086_9_40
5263567_6917962_10_33
Title: 2-color dithering 
----------------------------------------

int main () {
    int a [] = {0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1};
    int z = 0, o = 1, i;
    while (z < 17 && o < 17) {
        if (a[z] == 1 && a[o] == 0)
            swap (&a[z], &a[o]);
        if (a[z] == 0)
            z += 2;
        if (a[o] == 1)
            o += 2;
    }
    if (z < 17 && a[z] == 1) {
        while (z < 15) {
            swap (& a [z], & a [z + 2]);
            z += 2;
        }
    }
    if (o < 17 && a[o] == 0) {
        while (o < 15) {
            swap (& a [o], & a [o + 2]);
            o += 2;
        }
    }
    for (i = 0; i < 17; i++)
        printf ("%d ", a[i]);
}
----------------------------------------

int main () {
    int zero = 0, one = 1;
    int n = sizeof (a) / sizeof (*a);
    int i = 0;
    while (zero < n && one < n) {
        if (a[zero] != 0 && a[one] != 1) {
            swap (a [zero], a [one]);
        }
        if (a[zero] == 0) {
            zero = zero + 2;
        }
        if (a[one] == 1) {
            one = one + 2;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52649592_52649870_3_27
52649592_52650925_3_17
Title: How can I tell the compiler to re execute code at specific point when if statement is true 
----------------------------------------

int main () {
    char name [25];
    char first_name [25];
    char last_name [25];
input :
    printf ("Please put in your first name here: ");
    scanf ("%24s", first_name);
    printf ("Please put in your last name here: ");
    scanf ("%24s", last_name);
    if (strlen (first_name) > 5 || strlen (last_name) > 5) {
        printf ("Last name or First name is too long!\n");
        goto input;
    }
    printf ("Welcome %s %s!", first_name, last_name);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc <= 2) {
        fputs ("insufficient arguments", stderr);
        exit (EXIT_FAILURE);
    }
    if (strlen (argv[1]) > 5) {
        fputs ("first name too long", stderr);
        exit (EXIT_FAILURE);
    }
    if (strlen (argv[2]) > 5) {
        fputs ("last name too long", stderr);
        exit (EXIT_FAILURE);
    }
    printf ("Welcome %s %s!", argv [1], argv [2]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52652687_52654599_1_41
52652687_52655242_1_19
Title: Having trouble reading from text file into a struct array 
----------------------------------------

void read_from_file (Patient reg [], int *pNr_of_patients) {
    FILE *fp;
    fp = fopen ("file.txt", "r");
    if (fp != NULL) {
        int n;
        int i = 0;
        char refs [30];
        *pNr_of_patients = 0;
        while (EOF != (n = fscanf (fp, "%s %[^[]%[^]]]", reg[*pNr_of_patients].pers_nr, reg[*pNr_of_patients].name, refs))) {
            if (n > 2) {
                char *s = refs + 1;
                char *p;
                while (*s && i < 10) {
                    while (*s && *s == ' ')
                        s++;
                    p = s;
                    while (*p && *p != ',')
                        p++;
                    if (*p == ',')
                        *p = 0;
                    reg[*pNr_of_patients].photo_ref[i++] = atoi (s);
                    s = p + 1;
                }
            }
            (*pNr_of_patients)++;
        }
        fclose (fp);
    }
    else {
        printf ("File does not exist\n");
    }
}
----------------------------------------

void read_from_file (Patient reg [], int *pNr_of_patients) {
    *pNr_of_patients = 0;
    FILE *fp = fopen ("file.txt", "r");
    if (fp) {
        for (int i = 0; i < 10000; i++) {
            int count = read_once_from_file (fp, &reg[i]);
            if (count == EOF) {
                break;
            }
            if (count != 1) {
                fprintf (stderr, "Input error\n");
                break;
            }
        }
        *pNr_of_patients = i;
        fclose (fp);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52652687_52654599_1_41
52652687_52655781_1_27
Title: Having trouble reading from text file into a struct array 
----------------------------------------

void read_from_file (Patient reg [], int *pNr_of_patients) {
    FILE *fp;
    fp = fopen ("file.txt", "r");
    if (fp != NULL) {
        int n;
        int i = 0;
        char refs [30];
        *pNr_of_patients = 0;
        while (EOF != (n = fscanf (fp, "%s %[^[]%[^]]]", reg[*pNr_of_patients].pers_nr, reg[*pNr_of_patients].name, refs))) {
            if (n > 2) {
                char *s = refs + 1;
                char *p;
                while (*s && i < 10) {
                    while (*s && *s == ' ')
                        s++;
                    p = s;
                    while (*p && *p != ',')
                        p++;
                    if (*p == ',')
                        *p = 0;
                    reg[*pNr_of_patients].photo_ref[i++] = atoi (s);
                    s = p + 1;
                }
            }
            (*pNr_of_patients)++;
        }
        fclose (fp);
    }
    else {
        printf ("File does not exist\n");
    }
}
----------------------------------------

void read_from_file (Patient reg [], int *pNr_of_patients) {
    FILE *fp = fopen ("file.txt", "r");
    if (!fp) {
        fprintf (stderr, "Error opening file: %s\n", strerror (errno));
        *pNr_of_patients = 0;
        return;
    }
    char line [1024];
    int i = 0;
    while (fgets (line, sizeof line, fp)) {
        int offset = 0;
        int refs = 0;
        sscanf (line, "%11s %29[^[] [%n", & reg [i].pers_nr, & reg [i].name, & offset);
        for (char *tok = strtok (line +offset, ","); tok && refs < 10; tok = strtok (NULL, ",")) {
            if (*tok != ']')
                reg[i].photo_ref[refs++] = atoi (tok);
        }
        reg[i].nr_of_ref = refs;
        i++;
    }
    *pNr_of_patients = i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52652687_52655242_1_19
52652687_52655781_1_27
Title: Having trouble reading from text file into a struct array 
----------------------------------------

void read_from_file (Patient reg [], int *pNr_of_patients) {
    *pNr_of_patients = 0;
    FILE *fp = fopen ("file.txt", "r");
    if (fp) {
        for (int i = 0; i < 10000; i++) {
            int count = read_once_from_file (fp, &reg[i]);
            if (count == EOF) {
                break;
            }
            if (count != 1) {
                fprintf (stderr, "Input error\n");
                break;
            }
        }
        *pNr_of_patients = i;
        fclose (fp);
    }
}
----------------------------------------

void read_from_file (Patient reg [], int *pNr_of_patients) {
    FILE *fp = fopen ("file.txt", "r");
    if (!fp) {
        fprintf (stderr, "Error opening file: %s\n", strerror (errno));
        *pNr_of_patients = 0;
        return;
    }
    char line [1024];
    int i = 0;
    while (fgets (line, sizeof line, fp)) {
        int offset = 0;
        int refs = 0;
        sscanf (line, "%11s %29[^[] [%n", & reg [i].pers_nr, & reg [i].name, & offset);
        for (char *tok = strtok (line +offset, ","); tok && refs < 10; tok = strtok (NULL, ",")) {
            if (*tok != ']')
                reg[i].photo_ref[refs++] = atoi (tok);
        }
        reg[i].nr_of_ref = refs;
        i++;
    }
    *pNr_of_patients = i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52663211_52663646_3_25
52663211_52929449_1_11
Title: Variable number of arguments in C programmng 
----------------------------------------

int sum (int i, ... ) {
    int s = i;
    if (s) {
        va_list ap;
        va_start (ap, i);
        do {
            i = va_arg (ap, int);
            s += i;
        }
        while (i);
        va_end (ap);
    }
    return s;
}
----------------------------------------

int sum (int *a0, ... ) {
    int retval = *a0;
    va_list p;
    va_start (p, a0);
    int *nxt;
    while ((nxt = va_arg (p, int *)) != NULL) {
        retval += *nxt;
    }
    return retval;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52677882_52677924_13_24
52677882_52678080_14_25
Title: Why I got segementation fault while free array of string from other function? 
----------------------------------------

void freearr (char ***ptr) {
    int i = 0;
    while ((*ptr)[i] != NULL) {
        free ((*ptr) [i]);
        printf ("free(ptr[%d])\n", i);
        i++;
    }
    free (*ptr);
}
----------------------------------------

void freearr (char ***ptr) {
    int i = 0;
    while ((*ptr)[i] != NULL) {
        free ((*ptr) [i]);
        printf ("free(ptr[%d])\n", i);
        i++;
    }
    free (*ptr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52683012_52683131_1_15
52683012_52683167_1_11
Title: Why is my output wrong in this recursive function? 
----------------------------------------

int f (int x, int y) {
    if (x == y)
        return 0;
    if (x > y)
        return -1;
    if (2 * x < y) {
        int max = f (2 * x, y);
        return max;
    }
    else {
        int max = f (x +1, y);
        return max + 1;
    }
}
----------------------------------------

int f (int x, int y) {
    if (x < y) {
        if (x * 2 < y)
            return f (x *2, y);
        else if (x + 1 <= y)
            return 1 + f (x +1, y);
    }
    else if (x == y)
        return 0;
    else
        return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52688201_52688886_10_57
52688201_52689425_115_126
Title: Read a file during execution of C program and store all the items and their respective prices in an array of structure items 
----------------------------------------

int main (void) {
    int inp;
    int count_char = 0;
    int count_arr = 0;
    struct node EMPTY = {{'\0'}, 0};
    struct node arr [] = {
        [0 ... 99] = EMPTY
    };
    int temp_count = 0;
    int count_space = 0;
    while ((inp = getchar ()) != EOF) {
        if (inp == '\n') {
            count_space = 0;
            count_arr++;
            count_char = 0;
            continue;
        }
        if ((((inp >= 'A') && (inp <= 'Z')) || ((inp >= 'a') && (inp <= 'z'))) || (inp == ' ')) {
            if ((count_char == 0) && (inp == ' ')) {
                continue;
            }
            if (inp == ' ') {
                ++count_space;
            }
            else
                count_space = 0;
            if (count_space > 1)
                continue;
            arr[count_arr].name[count_char++] = inp;
        }
        if ((inp >= '0') && (inp <= '9')) {
            arr[count_arr].price = (arr[count_arr].price) * 10 + inp - '0';
        }
    }
    while (temp_count < count_arr) {
        printf ("%s", arr [temp_count].name);
        printf ("%d\n", arr [temp_count ++].price);
    }
    return 0;
}
----------------------------------------

int main (void) {
    products_list_t products = products_list_create ();
    if (!products_list_read (&products)) {
        perror ("Failed to read products list!\n\n");
        products_list_destroy (& products);
        return EXIT_FAILURE;
    }
    products_list_print (& products);
    products_list_destroy (& products);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52688201_52688886_10_57
52688201_52692051_8_51
Title: Read a file during execution of C program and store all the items and their respective prices in an array of structure items 
----------------------------------------

int main (void) {
    int inp;
    int count_char = 0;
    int count_arr = 0;
    struct node EMPTY = {{'\0'}, 0};
    struct node arr [] = {
        [0 ... 99] = EMPTY
    };
    int temp_count = 0;
    int count_space = 0;
    while ((inp = getchar ()) != EOF) {
        if (inp == '\n') {
            count_space = 0;
            count_arr++;
            count_char = 0;
            continue;
        }
        if ((((inp >= 'A') && (inp <= 'Z')) || ((inp >= 'a') && (inp <= 'z'))) || (inp == ' ')) {
            if ((count_char == 0) && (inp == ' ')) {
                continue;
            }
            if (inp == ' ') {
                ++count_space;
            }
            else
                count_space = 0;
            if (count_space > 1)
                continue;
            arr[count_arr].name[count_char++] = inp;
        }
        if ((inp >= '0') && (inp <= '9')) {
            arr[count_arr].price = (arr[count_arr].price) * 10 + inp - '0';
        }
    }
    while (temp_count < count_arr) {
        printf ("%s", arr [temp_count].name);
        printf ("%d\n", arr [temp_count ++].price);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num_entries;
    char line [512];
    if (fgets (line, sizeof line, stdin) == NULL) {
        fprintf (stderr, "Empty input file\n");
        return -1;
    }
    if (sscanf (line, "%d", &num_entries) != 1) {
        fprintf (stderr, "Formatting error in first line\n");
        return -1;
    }
    struct item items [num_entries];
    for (int i = 0; i < num_entries; i++) {
        if (fgets (line, sizeof line, stdin) == NULL) {
            fprintf (stderr, "Inconsistent file length\n");
            return -1;
        }
        if (line[0] == '\n') {
            --i;
            continue;
        }
        if (sscanf (line, "%255[^0123456789]%d", items[i].name, &items[i].price) != 2) {
            fprintf (stderr, "Formatting error in entry %d\n", i + 1);
            return -1;
        }
    }
    for (int i = 0; i < num_entries; i++) {
        printf ("Item %d: %s, $%d\n", i + 1, items [i].name, items [i].price);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52688201_52689425_115_126
52688201_52692051_8_51
Title: Read a file during execution of C program and store all the items and their respective prices in an array of structure items 
----------------------------------------

int main (void) {
    products_list_t products = products_list_create ();
    if (!products_list_read (&products)) {
        perror ("Failed to read products list!\n\n");
        products_list_destroy (& products);
        return EXIT_FAILURE;
    }
    products_list_print (& products);
    products_list_destroy (& products);
}
----------------------------------------

int main (void) {
    int num_entries;
    char line [512];
    if (fgets (line, sizeof line, stdin) == NULL) {
        fprintf (stderr, "Empty input file\n");
        return -1;
    }
    if (sscanf (line, "%d", &num_entries) != 1) {
        fprintf (stderr, "Formatting error in first line\n");
        return -1;
    }
    struct item items [num_entries];
    for (int i = 0; i < num_entries; i++) {
        if (fgets (line, sizeof line, stdin) == NULL) {
            fprintf (stderr, "Inconsistent file length\n");
            return -1;
        }
        if (line[0] == '\n') {
            --i;
            continue;
        }
        if (sscanf (line, "%255[^0123456789]%d", items[i].name, &items[i].price) != 2) {
            fprintf (stderr, "Formatting error in entry %d\n", i + 1);
            return -1;
        }
    }
    for (int i = 0; i < num_entries; i++) {
        printf ("Item %d: %s, $%d\n", i + 1, items [i].name, items [i].price);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52693154_52693373_1_18
52693154_52693448_4_18
Title: How to use for loop to calculate midpoint rule Riemann Sum in C 
----------------------------------------

double circle_pi (int rectangles) {
    double radius = 2.0;
    int i;
    double width = radius / (double) rectangles;
    double rect_area = 0.0;
    double midpoint, height;
    midpoint = width / 2.0;
    for (i = 1; i <= rectangles; i++) {
        height = sqrt ((radius * radius) - (midpoint * midpoint));
        midpoint = midpoint + width;
        rect_area = rect_area + width * height;
    }
    return rect_area;
}
----------------------------------------

double circle_pi (int rectangles) {
    int idx;
    double width = RADIUS / rectangles;
    double x = width / 2;
    double total_area = 0;
    for (idx = 0; idx < rectangles; idx++) {
        height = sqrt (RADIUS2 -(x * x));
        total_area += width * height;
        x += width;
    }
    return total_area;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52696261_52696601_4_17
52696261_52696798_9_44
Title: C multidimensional array pointing problem? 
----------------------------------------

int main (void) {
    int i, j, m;
    printf ("\nenter m value:");
    scanf ("%d", & m);
    char arr [m] [50];
    for (i = 0; i < m; i++) {
        printf ("\nplease enter a string no %d: ", (i + 1));
        scanf ("%s", arr [i]);
    }
    printf ("\nthe strings are: \n");
    for (i = 0; i < m; i++) {
        printf ("\n%s\n", arr [i]);
    }
}
----------------------------------------

int main (void) {
    int i, j, m;
    printf ("Enter number of strings: ");
    scanf ("%d", & m);
    discard_extra_input ();
    char arr [m] [50];
    for (i = 0; i < m; i++) {
        printf ("please enter string number %d: ", i + 1);
        for (j = 0; j < 49; j++) {
            scanf ("%c", & arr [i] [j]);
            if (arr[i][j] == '\n') {
                arr[i][j] = '\0';
                break;
            }
        }
        if (j == 49) {
            arr[i][j] = '\0';
            discard_extra_input ();
        }
    }
    for (i = 0; i < m; i++) {
        for (j = 0; j < 50 && arr[i][j] != '\0'; j++) {
            printf ("%c", arr [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52699455_52699671_2_14
52699455_52700157_5_22
Title: Can I put a for loop inside scanf? 
----------------------------------------

int main () {
    int i;
    int input [4];
    printf ("Enter the number of inputs you want to give : ");
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        printf ("Enter the input number %d : ", i);
        scanf ("%d", & input [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char input [100];
    int arr [10];
    strcpy (input, "1 2 42 56 -3 0 2018\n");
    char *pi = input;
    int tmp, pp, i = 0;
    while (sscanf (pi, "%d%n", &tmp, &pp) == 1) {
        if (i == 10) {
            fprintf (stderr, "array too small\n");
            exit (EXIT_FAILURE);
        }
        pi += pp;
        arr[i++] = tmp;
    }
    printf ("got this ==>");
    for (int k = 0; k < i; k++)
        printf (" %d", arr[k]);
    puts ("");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52703675_52703770_6_18
52703675_52704917_1_22
Title: Why can't asterisk triangle be larger than 23? 
----------------------------------------

int main (void) {
    int sn;
    printf ("Number of stars: ");
    scanf ("%d", & sn);
    for (int i = 1; i <= sn; i++) {
        char *str = nstars (i);
        printf ("\n%s", str);
        free (str);
    }
    return 0;
}
----------------------------------------

int main (void) {
    ...char * starstr = calloc (n + 1, sizeof * starstr);
    if (!starstr) {
        fprintf (stderr, "Could not allocate memory for string - exiting\n");
        exit (0);
    }
    for (int i = 0; i < n; i++) {
        starstr[i] = '*';
        printf ("%s\n", starstr);
    }
    free (starstr);
    ...
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52706072_52706870_5_28
52706072_52707787_6_30
Title: Can I either input int or terminate scanf function? 
----------------------------------------

int main (void) {
    char i = '\0';
    int value = 0;
    int result = 0;
    printf ("type number separated by space then enter\n");
    while (1 == scanf ("%c", &i)) {
        if (' ' == i || '\t' == i) {
            continue;
        }
        if (i == '\n') {
            break;
        }
        ungetc (i, stdin);
        if (1 == (result = scanf ("%d", &value))) {
            printf (" number entered as %d\n", value);
        }
        else {
            scanf ("%*[^0-9 \t\n]");
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char line [100], *p;
    long val;
    while (fgets (line, sizeof (line), stdin)) {
        if (!strcmp (line, "\n")) {
            break;
        }
        errno = 0;
        val = strtol (line, &p, 10);
        if (errno) {
            perror ("error reading value");
        }
        else if ((p != line) && (*p == '\n')) {
            printf ("read value %ld\n", val);
        }
        else {
            printf ("not a valid integer: %s", line);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52712559_52713044_13_28
52712559_52719190_24_47
Title: Passing threads a value from a for loop 
----------------------------------------

int main () {
    int i = 0;
    int reduces = 10;
    pthread_t *threadIDs;
    threadIDs = (pthread_t *) malloc (sizeof (pthread_t) * reduces);
    for (; i < reduces; i++) {
        Param *p;
        p = (Param *) malloc (sizeof (*p));
        p->index = i;
        pthread_create (& threadIDs [i], NULL, thread, p);
    }
    return 0;
}
----------------------------------------

int main (void) {
    pthread_t thread [THREADS_MAX];
    pthread_mutex_init (& m_init, NULL);
    pthread_cond_init (& c_init, NULL);
    for (size_t i = 0; i < THREADS_MAX; ++i) {
        pthread_mutex_lock (& m_init);
        init_done = 0;
        pthread_create (& thread [i], NULL, thread_function, & i);
        while (!init_done) {
            pthread_cond_wait (& c_init);
        }
        pthread_mutex_unlock (& m_init);
    }
    ...
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52717560_52718348_11_22
52717560_52718353_6_34
Title: "Function and strings checking if input strings match" 
----------------------------------------

int main () {
    char res = 0, word1 [10], word2 [10];
    printf ("Enter the first word : ");
    scanf ("%s", word1);
    printf ("Enter the second word : ");
    scanf ("%s", word2);
    res = LetterDifference (word1, word2);
    if (res == 1)
        printf ("Yes\n");
    else
        printf ("No\n");
}
----------------------------------------

int main () {
    int l1, l2, flag = 0, res;
    char a [10], b [10];
    while (flag == 0) {
        printf ("\nEnter 2 words each of the same length:");
        printf ("\nenter the 1st word: ");
        scanf ("%s", & a);
        printf ("\nenter the 2nd word: ");
        scanf ("%s", & b);
        l1 = strlen (a);
        l2 = strlen (b);
        if (l1 == l2) {
            flag = 1;
        }
        else {
            printf ("\nlengths of the words are unequal...enter again!!!");
            flag = 0;
        }
    }
    printf ("\n%s\n%s", a, b);
    res = LetterDifference (a, b);
    if (res == 1) {
        printf ("\nThere is a 1-letter difference.");
    }
    else {
        printf ("\nNO one letter difference.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52733310_52733846_1_37
52733310_52735051_2_21
Title: Why are my values for sum and count being lost each loop? 
----------------------------------------

void calculateAverage () {
    int sum = 0;
    int count = 0;
    int grade = 0;
    double average = 0.0;
    while (1) {
        if (scanf ("%d", &grade) != 1) {
            continue;
        }
        if (grade == -1) {
            if (count > 0) {
                average = (double) sum / count;
                printf ("Average: %lf\n", average);
            }
            else {
                puts ("You didn't enter any value. Cannot compute the average.\n");
            }
            return;
        }
        if ((grade < -1) || (100 < grade)) {
            puts ("Error, incorrect input.\n");
            continue;
        }
        sum += grade;
        count++;
    }
}
----------------------------------------

double calculateAverage (void) {
    double average;
    int sum = 0, count = 0, grade;
    while (1) {
        scanf ("%d", & grade);
        if ((grade > 100) || (grade < -1))
            printf ("Error, incorrect input.\n");
        else if (grade != -1) {
            sum = sum + grade;
            count = count + 1;
        }
        else
            break;
    }
    if (count == 0)
        average = -1.0;
    else
        average = (double) sum / count;
    return average;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52733310_52733846_1_37
52733310_52736565_3_30
Title: Why are my values for sum and count being lost each loop? 
----------------------------------------

void calculateAverage () {
    int sum = 0;
    int count = 0;
    int grade = 0;
    double average = 0.0;
    while (1) {
        if (scanf ("%d", &grade) != 1) {
            continue;
        }
        if (grade == -1) {
            if (count > 0) {
                average = (double) sum / count;
                printf ("Average: %lf\n", average);
            }
            else {
                puts ("You didn't enter any value. Cannot compute the average.\n");
            }
            return;
        }
        if ((grade < -1) || (100 < grade)) {
            puts ("Error, incorrect input.\n");
            continue;
        }
        sum += grade;
        count++;
    }
}
----------------------------------------

void calculateAverage () {
    int grade, count = 0, sum = 0;
    double average;
    printf ("\nenter the grades... enter -1 to terminate the entries\n.");
    while (1) {
        printf ("\nEnter the grade: ");
        if (scanf ("%d", &grade) != 1) {
            printf ("\nInvalid characters entered!!!");
            continue;
        }
        else if (((grade > 100) || (grade < -1))) {
            printf ("\nInvalid grade entered!!!");
            continue;
        }
        else {
            if (grade == -1) {
                average = sum / count;
                printf ("\nAverage value of grades: %.3lf", average);
                return;
            }
            else {
                sum += grade;
                count++;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52733310_52735051_2_21
52733310_52736565_3_30
Title: Why are my values for sum and count being lost each loop? 
----------------------------------------

double calculateAverage (void) {
    double average;
    int sum = 0, count = 0, grade;
    while (1) {
        scanf ("%d", & grade);
        if ((grade > 100) || (grade < -1))
            printf ("Error, incorrect input.\n");
        else if (grade != -1) {
            sum = sum + grade;
            count = count + 1;
        }
        else
            break;
    }
    if (count == 0)
        average = -1.0;
    else
        average = (double) sum / count;
    return average;
}
----------------------------------------

void calculateAverage () {
    int grade, count = 0, sum = 0;
    double average;
    printf ("\nenter the grades... enter -1 to terminate the entries\n.");
    while (1) {
        printf ("\nEnter the grade: ");
        if (scanf ("%d", &grade) != 1) {
            printf ("\nInvalid characters entered!!!");
            continue;
        }
        else if (((grade > 100) || (grade < -1))) {
            printf ("\nInvalid grade entered!!!");
            continue;
        }
        else {
            if (grade == -1) {
                average = sum / count;
                printf ("\nAverage value of grades: %.3lf", average);
                return;
            }
            else {
                sum += grade;
                count++;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52733978_52734438_1_14
52733978_52734546_1_16
Title: How do I convert an underscored pointer to a char array into camelCasing? 
----------------------------------------

void toCamelCase (char *phrase) {
    int j = 0;
    for (int i = 0; i < strlen (phrase); i++) {
        if (phrase[i] != '_' && isalnum (phrase[i])) {
            phrase[j++] = phrase[i];
        }
        else if (phrase[i] == '_') {
            phrase[j++] = toupper (phrase[i + 1]);
            i++;
        }
    }
    phrase[j] = '\0';
}
----------------------------------------

void toCamelCase (char *phrase) {
    int length = strlen (phrase);
    int res_ind = 0;
    for (int i = 0; i < length; i++) {
        if (phrase[i] == '_') {
            phrase[i + 1] = toupper (s[i + 1]);
            continue;
        }
        else
            phrase[res_ind++] = s[i];
    }
    phrase[res_ind] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52750299_52750346_3_12
52750299_52750489_3_12
Title: The value returned in this program is. . . .Queer to say the least 
----------------------------------------

int exchange (int *xp, int *yp, int *zp) {
    int x = *xp;
    int y = *yp;
    int z = *zp;
    *xp = z;
    *yp = x;
    *zp = y;
    return 1;
}
----------------------------------------

int exchange (int *xp, int *yp, int *zp) {
    int x = *xp;
    int y = *yp;
    int z = *zp;
    printf ("xp = %p, yp = %p, zp = %p\n", xp, yp, zp);
    *xp = z;
    *yp = x;
    *zp = y;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52755451_52756593_4_19
52755451_52756943_3_16
Title: How to change individual characters in string on C? 
----------------------------------------

int main (void) {
    size_t length, a;
    char gWord [100];
    char word [100] = "horse";
    length = strlen (word);
    for (a = 0; a < length; a = a + 1) {
        gWord[a] = '_';
        printf ("%c", gWord [a]);
    }
    gWord[a] = '\0';
    printf ("\n");
    printf ("%s\n", gWord);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int length, a, x;
    x = 0;
    char gWord [100];
    char word [100] = "horse";
    length = strlen (word) - 1;
    for (a = 0; a <= length; a = a + 1) {
        gWord[a] = '_';
        printf ("%c ", gWord [a]);
    }
    gWord[a] = '\0';
    printf ("\n%s", gWord);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52755451_52756593_4_19
52755451_52757693_5_20
Title: How to change individual characters in string on C? 
----------------------------------------

int main (void) {
    size_t length, a;
    char gWord [100];
    char word [100] = "horse";
    length = strlen (word);
    for (a = 0; a < length; a = a + 1) {
        gWord[a] = '_';
        printf ("%c", gWord [a]);
    }
    gWord[a] = '\0';
    printf ("\n");
    printf ("%s\n", gWord);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int length, a, x;
    x = 0;
    char gWord [100] = {0};
    char word [100] = "horse";
    length = strlen (word) - 1;
    for (a = 0; a <= length; a = a + 1) {
        gWord[a] = '_';
        printf ("%c", gWord [a]);
    }
    printf ("\n");
    printf ("%s", gWord);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52755451_52756943_3_16
52755451_52757693_5_20
Title: How to change individual characters in string on C? 
----------------------------------------

int main (int argc, char *argv []) {
    int length, a, x;
    x = 0;
    char gWord [100];
    char word [100] = "horse";
    length = strlen (word) - 1;
    for (a = 0; a <= length; a = a + 1) {
        gWord[a] = '_';
        printf ("%c ", gWord [a]);
    }
    gWord[a] = '\0';
    printf ("\n%s", gWord);
}
----------------------------------------

int main (int argc, char *argv []) {
    int length, a, x;
    x = 0;
    char gWord [100] = {0};
    char word [100] = "horse";
    length = strlen (word) - 1;
    for (a = 0; a <= length; a = a + 1) {
        gWord[a] = '_';
        printf ("%c", gWord [a]);
    }
    printf ("\n");
    printf ("%s", gWord);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52759684_52760077_3_19
52759684_52776406_4_86
Title: finding count of minima or maxima in a set of numbers 
----------------------------------------

int main (void) {
    int c, n, p, s;
    scanf ("%d%d", & n, & c);
    for (s = 0; 0 <= s && --n; s = (int [] [3]) {Table}[s][1 + (p > c) - (p < c)]) {
        p = c;
        scanf ("%d", & c);
    }
    printf ("%s\n", 0 <= s ? "Yes" : "No");
}
----------------------------------------

int main () {
    long long int n, temp;
    scanf ("%lld", & n);
    if (n == 1) {
        long long int l;
        scanf ("%lld", & l);
        printf ("Yes");
    }
    else {
        long long int a, b;
        long long int last;
        int flag = 1;
        long long int changes = 0;
        int incr = 0, decr = 0;
        int equ = 0;
        int dec = 0, inc = 0;
        scanf ("%lld %lld", & a, & b);
        if (a > b) {
            dec = 1;
        }
        else if (a < b) {
            inc = 1;
        }
        else {
            equ = 1;
        }
        last = b;
        for (long long int i = 2; i < n; i++) {
            scanf ("%lld", & temp);
            if (temp > last && equ == 1) {
                inc = 1;
                dec = 0;
                equ = 0;
            }
            else if (temp < last && equ == 1) {
                inc = 0;
                dec = 1;
                equ = 0;
            }
            else if (temp > last && dec == 1) {
                inc = 1;
                dec = 0;
                changes++;
                incr++;
            }
            else if (temp < last && inc == 1) {
                inc = 0;
                dec = 1;
                changes++;
                decr++;
            }
            if (changes >= 1 && temp == last && incr >= 0 && decr >= 0) {
                flag = 0;
                changes += 100;
            }
            last = temp;
        }
        if (changes <= 1 && flag) {
            printf ("Yes");
        }
        else {
            printf ("No");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52766205_52766565_7_29
52766205_52768734_73_97
Title: Sum all max elements of each row of a 2D array 
----------------------------------------

int main (void) {
    int arr [ROWS] [COLS] = {{12, 7, 23, 13, 4}, {67, 15, 34, -5, 9}, {2, 5, 17, -23, 45}, {26, -6, 23, -5, -9}, {18, 37, -8, 26, 12}};
    int maxsum = 0;
    for (int row = 0; row < ROWS; row++) {
        int rowmax = INT_MIN;
        for (int col = 0; col < COLS; col++) {
            if (rowmax < arr[row][col]) {
                rowmax = arr[row][col];
            }
        }
        printf ("Row %d max = %d\n", row + 1, rowmax);
        maxsum += rowmax;
    }
    printf ("Sum of max = %d\n", maxsum);
}
----------------------------------------

int main () {
    int arr [MATRIX_SIZE] [MATRIX_SIZE] = {{12, 7, 23, 13, 4}, {67, 15, 34, -5, 9}, {2, 5, 17, -23, 45}, {26, -6, 23, -5, -9}, {18, 37, -8, 26, 12}};
    printf ("Before sorting\n");
    printing (arr);
    bubleSort (arr);
    printf ("After sorting\n");
    printing (arr);
    int sumArr [MATRIX_SIZE];
    find_max_elm (arr, sumArr);
    print_max_element_of_each_row (sumArr);
    printf ("\nSum of max elements of each row: %d", sum_arr (sumArr));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52767226_52787175_6_22
52767226_53035516_16_31
Title: Array buffer and winapi 
----------------------------------------

BYTE *new_image (int width, int height) {
    BITMAPINFO bmi;
    memset (& bmi, 0, sizeof (BITMAPINFO));
    bmi.bmiHeader.biSize = sizeof (BITMAPINFOHEADER);
    bmi.bmiHeader.biWidth = width;
    bmi.bmiHeader.biHeight = -height;
    bmi.bmiHeader.biPlanes = 1;
    bmi.bmiHeader.biBitCount = 32;
    bmi.bmiHeader.biCompression = BI_RGB;
    BYTE *buffer;
    HDC hdc = GetDC (HWND_DESKTOP);
    hDib = CreateDIBSection (hdc, &bmi, DIB_RGB_COLORS, (void **) (&buffer), NULL, 0);
    ReleaseDC (HWND_DESKTOP, hdc);
    return buffer;
}
----------------------------------------

void *new_image (HWND hwnd, int width, int height) {
    BITMAPINFO bmi;
    void *buffer;
    HDC hdc;
    set_bmi_object (& bmi, width, height);
    hdc = GetDC (hwnd);
    hDib = CreateDIBSection (hdc, &bmi, DIB_RGB_COLORS, (void **) (&buffer), NULL, 0);
    ReleaseDC (instance -> win_list -> hwnd, hdc);
    return (buffer);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52774504_52775637_44_56
52774504_52776191_12_45
Title: How to record thousand of information by using Structure ? 
----------------------------------------

int main () {
    int i;
    class *c;
    student *s;
    c = newClass ();
    for (i = 0; i < 20; i++) {
        s = newStudent ("jim");
        addStudent (c, s);
    }
    printf ("%s", c -> students [19] -> name);
}
----------------------------------------

int main () {
    struct record s [N];
    int num_records = 0;
    printf ("How many records do you wish to store (1- 100): ");
    scanf ("%d", & num_records);
    while (num_records > N) {
        printf ("Enter between than (1- 100): ");
        scanf ("%d", & num_records);
    }
    for (int i = 0; i < num_records; i++) {
        printf ("\n____Enter details for Record %d _____\n", i + 1);
        printf ("Name : ");
        scanf ("%s", s [i].name);
        printf ("Id : ");
        scanf ("%d", & s [i].id);
        printf ("Marks : ");
        scanf ("%f", & s [i].marks);
        printf ("Grade : ");
        scanf (" %c", & s [i].grade);
    }
    for (int i = 0; i < num_records; i++)
        printf ("%s %d %.2f %c\n", s[i].name, s[i].id, s[i].marks, s[i].grade);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52774504_52775637_44_56
52774504_52776947_10_30
Title: How to record thousand of information by using Structure ? 
----------------------------------------

int main () {
    int i;
    class *c;
    student *s;
    c = newClass ();
    for (i = 0; i < 20; i++) {
        s = newStudent ("jim");
        addStudent (c, s);
    }
    printf ("%s", c -> students [19] -> name);
}
----------------------------------------

int main () {
    int i;
    for (i = 0; i < sizeof (s); i++) {
        printf ("name: ");
        scanf ("%s", s [i].name);
        printf ("id: ");
        scanf ("%d", & s [i].id);
        printf ("marks: ");
        scanf ("%d", & s [i].marks);
        if (s[i].marks >= 90)
            s[i].grade = 'S';
        else if (s[i].marks >= 80)
            s[i].grade = 'A';
        printf ("\n%s %d %d %c\n", s [i].name, s [i].id, s [i].marks, s [i].grade);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52774504_52775637_44_56
52774504_52777047_47_79
Title: How to record thousand of information by using Structure ? 
----------------------------------------

int main () {
    int i;
    class *c;
    student *s;
    c = newClass ();
    for (i = 0; i < 20; i++) {
        s = newStudent ("jim");
        addStudent (c, s);
    }
    printf ("%s", c -> students [19] -> name);
}
----------------------------------------

int main () {
    printf ("If you want to quit press q ,to continue press anything else");
    i = getch ();
    while (i != 'q') {
        printf ("\n Name : ");
        fgets (name, 10, stdin);
        printf ("\n Id : ");
        scanf ("%d", & id);
        printf ("\n Marks : ");
        scanf ("%f", & marks);
        printf ("\n Grade : ");
        scanf (" %c", & grade);
        printf ("\n name:  %s id: %d marks: %.2f grade: %c\n", name, id, marks, grade);
        addNode (head, name, id, marks, grade);
        x = 'y';
        do {
            printf ("\n If you want to quit press q ,to continue press anything else");
            i = getch ();
            if (i == 'q') {
                printf ("\n Are you sure you want to quit?");
                printf ("\n press y: for yes anything else: for NO");
                x = getch ();
            }
        }
        while (x != 'y');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52774504_52776191_12_45
52774504_52776947_10_30
Title: How to record thousand of information by using Structure ? 
----------------------------------------

int main () {
    struct record s [N];
    int num_records = 0;
    printf ("How many records do you wish to store (1- 100): ");
    scanf ("%d", & num_records);
    while (num_records > N) {
        printf ("Enter between than (1- 100): ");
        scanf ("%d", & num_records);
    }
    for (int i = 0; i < num_records; i++) {
        printf ("\n____Enter details for Record %d _____\n", i + 1);
        printf ("Name : ");
        scanf ("%s", s [i].name);
        printf ("Id : ");
        scanf ("%d", & s [i].id);
        printf ("Marks : ");
        scanf ("%f", & s [i].marks);
        printf ("Grade : ");
        scanf (" %c", & s [i].grade);
    }
    for (int i = 0; i < num_records; i++)
        printf ("%s %d %.2f %c\n", s[i].name, s[i].id, s[i].marks, s[i].grade);
}
----------------------------------------

int main () {
    int i;
    for (i = 0; i < sizeof (s); i++) {
        printf ("name: ");
        scanf ("%s", s [i].name);
        printf ("id: ");
        scanf ("%d", & s [i].id);
        printf ("marks: ");
        scanf ("%d", & s [i].marks);
        if (s[i].marks >= 90)
            s[i].grade = 'S';
        else if (s[i].marks >= 80)
            s[i].grade = 'A';
        printf ("\n%s %d %d %c\n", s [i].name, s [i].id, s [i].marks, s [i].grade);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52774504_52776191_12_45
52774504_52777047_47_79
Title: How to record thousand of information by using Structure ? 
----------------------------------------

int main () {
    struct record s [N];
    int num_records = 0;
    printf ("How many records do you wish to store (1- 100): ");
    scanf ("%d", & num_records);
    while (num_records > N) {
        printf ("Enter between than (1- 100): ");
        scanf ("%d", & num_records);
    }
    for (int i = 0; i < num_records; i++) {
        printf ("\n____Enter details for Record %d _____\n", i + 1);
        printf ("Name : ");
        scanf ("%s", s [i].name);
        printf ("Id : ");
        scanf ("%d", & s [i].id);
        printf ("Marks : ");
        scanf ("%f", & s [i].marks);
        printf ("Grade : ");
        scanf (" %c", & s [i].grade);
    }
    for (int i = 0; i < num_records; i++)
        printf ("%s %d %.2f %c\n", s[i].name, s[i].id, s[i].marks, s[i].grade);
}
----------------------------------------

int main () {
    printf ("If you want to quit press q ,to continue press anything else");
    i = getch ();
    while (i != 'q') {
        printf ("\n Name : ");
        fgets (name, 10, stdin);
        printf ("\n Id : ");
        scanf ("%d", & id);
        printf ("\n Marks : ");
        scanf ("%f", & marks);
        printf ("\n Grade : ");
        scanf (" %c", & grade);
        printf ("\n name:  %s id: %d marks: %.2f grade: %c\n", name, id, marks, grade);
        addNode (head, name, id, marks, grade);
        x = 'y';
        do {
            printf ("\n If you want to quit press q ,to continue press anything else");
            i = getch ();
            if (i == 'q') {
                printf ("\n Are you sure you want to quit?");
                printf ("\n press y: for yes anything else: for NO");
                x = getch ();
            }
        }
        while (x != 'y');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52774504_52776947_10_30
52774504_52777047_47_79
Title: How to record thousand of information by using Structure ? 
----------------------------------------

int main () {
    int i;
    for (i = 0; i < sizeof (s); i++) {
        printf ("name: ");
        scanf ("%s", s [i].name);
        printf ("id: ");
        scanf ("%d", & s [i].id);
        printf ("marks: ");
        scanf ("%d", & s [i].marks);
        if (s[i].marks >= 90)
            s[i].grade = 'S';
        else if (s[i].marks >= 80)
            s[i].grade = 'A';
        printf ("\n%s %d %d %c\n", s [i].name, s [i].id, s [i].marks, s [i].grade);
    }
    return 0;
}
----------------------------------------

int main () {
    printf ("If you want to quit press q ,to continue press anything else");
    i = getch ();
    while (i != 'q') {
        printf ("\n Name : ");
        fgets (name, 10, stdin);
        printf ("\n Id : ");
        scanf ("%d", & id);
        printf ("\n Marks : ");
        scanf ("%f", & marks);
        printf ("\n Grade : ");
        scanf (" %c", & grade);
        printf ("\n name:  %s id: %d marks: %.2f grade: %c\n", name, id, marks, grade);
        addNode (head, name, id, marks, grade);
        x = 'y';
        do {
            printf ("\n If you want to quit press q ,to continue press anything else");
            i = getch ();
            if (i == 'q') {
                printf ("\n Are you sure you want to quit?");
                printf ("\n press y: for yes anything else: for NO");
                x = getch ();
            }
        }
        while (x != 'y');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52783939_52784094_2_18
52783939_52784240_3_30
Title: C Pattern Code: Why this code for printing Star-Pyramid is not working? 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    for (int i = 0; i < n; i++) {
        for (int j = n - i - 1; j > 0; j--) {
            printf (" ");
        }
        for (int k = 0; k <= i; k++) {
            printf ("*");
        }
        for (int l = 0; l < i; l++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n, i, j;
    printf ("Input height: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++)
        ;
    {
        for (j = 1; j <= 2 * n - 1; j++) {
            if ((j >= n - i + 1) && (j <= n + i - 1)) {
                printf ("*");
            }
            else {
                printf ("");
            }
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52786736_52786919_11_26
52786736_52787044_10_19
Title: "How to return 1 if x*x can fit in a 32-bit integer and 0 otherwise?" 
----------------------------------------

int main (void) {
    int x = MAX_NEG_SQUARE - 2;
    int fits = -1;
    int prevoiusly_fit = 0;
    for (; x < MAX_POS_SQUARE + 5; x++) {
        fits = doesFit (x);
        if (!fits && prevoiusly_fit) {
            printf ("%d didnt fit and %d did\n", x, x - 1);
        }
        else if (fits && !prevoiusly_fit) {
            printf ("%d fit and %d did not\n", x, x - 1);
        }
        prevoiusly_fit = fits;
    }
    return 0;
}
----------------------------------------

int main () {
    long long x;
    for (x = INT32_MIN; x <= INT32_MAX; x++) {
        if (squaredOK (x) != (x * x <= INT32_MAX)) {
            printf ("failed on %lld\n", x);
            return 1;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52795781_52796054_4_14
52795781_52796069_4_23
Title: program to detect whether only integer has been given or not goes into infinite loop 
----------------------------------------

int main (void) {
    int a, b;
    char str [42];
    do {
        printf ("Enter 2 numeric values\n");
        if (fgets (str, sizeof str, stdin) == NULL) {
            exit (1);
        }
    }
    while (sscanf (str, "%d%d", &a, &b) != 2);
    printf ("Numbers are %d and %d\n", a, b);
}
----------------------------------------

int main () {
    int a, b, s, c;
    printf ("Enter two proper numbers: ");
    for (;;) {
        s = scanf ("%d%d", &a, &b);
        if (s == 2)
            break;
        if (s == EOF) {
            printf ("unexpected end of file\n");
            return 1;
        }
        while ((c = getchar ()) != EOF && c != '\n')
            continue;
        printf ("Invalid input. Try again: ");
    }
    printf ("The values are %d and %d\n", a, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52797274_52797459_1_20
52797274_52797460_1_12
Title: fusion of two arrays sorted 
----------------------------------------

void fus (int *A, int *B, int *C, int nA, int nB) {
    int iC = 0;
    int iA = 0;
    int iB = 0;
    for (; (iA < nA) && (iB < nB); ++iC) {
        if (A[iA] <= B[iB])
            C[iC] = A[iA++];
        else
            C[iC] = B[iB++];
    }
    for (; iA < nA; ++iA, ++iC)
        C[iC] = A[iA];
    for (; iB < nB; ++iB, ++iC)
        C[iC] = B[iB];
}
----------------------------------------

void fus (int *A, int *B, int *C, int n, int m) {
    int i = 0, j = 0, k = 0;
    for (; j < m && i < n; k++)
        C[k] = A[i] < B[j] ? A[i++] : B[j++];
    for (; i < n; i++, k++)
        C[k] = A[i];
    for (; j < m; j++, k++)
        C[k] = B[j];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52797274_52797459_1_20
52797274_52797916_1_20
Title: fusion of two arrays sorted 
----------------------------------------

void fus (int *A, int *B, int *C, int nA, int nB) {
    int iC = 0;
    int iA = 0;
    int iB = 0;
    for (; (iA < nA) && (iB < nB); ++iC) {
        if (A[iA] <= B[iB])
            C[iC] = A[iA++];
        else
            C[iC] = B[iB++];
    }
    for (; iA < nA; ++iA, ++iC)
        C[iC] = A[iA];
    for (; iB < nB; ++iB, ++iC)
        C[iC] = B[iB];
}
----------------------------------------

void fus (const int *A, const int *B, int *C, int n, int m) {
    int i = 0, j = 0, k = 0;
    if (i < n && j < m) {
        for (;;) {
            if (A[i] <= B[j]) {
                C[k++] = A[i++];
                if (i == n)
                    break;
            }
            else {
                C[k++] = B[j++];
                if (j == m)
                    break;
            }
        }
    }
    while (i < n)
        C[k++] = A[i++];
    while (j < m)
        C[k++] = B[j++];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52797274_52797460_1_12
52797274_52797916_1_20
Title: fusion of two arrays sorted 
----------------------------------------

void fus (int *A, int *B, int *C, int n, int m) {
    int i = 0, j = 0, k = 0;
    for (; j < m && i < n; k++)
        C[k] = A[i] < B[j] ? A[i++] : B[j++];
    for (; i < n; i++, k++)
        C[k] = A[i];
    for (; j < m; j++, k++)
        C[k] = B[j];
}
----------------------------------------

void fus (const int *A, const int *B, int *C, int n, int m) {
    int i = 0, j = 0, k = 0;
    if (i < n && j < m) {
        for (;;) {
            if (A[i] <= B[j]) {
                C[k++] = A[i++];
                if (i == n)
                    break;
            }
            else {
                C[k++] = B[j++];
                if (j == m)
                    break;
            }
        }
    }
    while (i < n)
        C[k++] = A[i++];
    while (j < m)
        C[k++] = B[j++];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52799651_52799691_3_26
52799651_52799728_3_38
Title: a C program that reads a sequence of numbers and display a message 
----------------------------------------

int main () {
    int i, j, k;
    printf ("Enter a Number:\n");
    scanf ("%d", & i);
    if (i <= 0) {
        printf ("Error_1\n");
    }
    else {
        scanf ("%d", & j);
        k = 0;
        while (j > 0) {
            k++;
            j = j / 10;
        }
        if (k < i)
            printf ("Error_2\n");
    }
}
----------------------------------------

int main () {
    int i, j, k;
    printf ("Enter any number: \n");
    scanf ("%d", & i);
    k = 0;
    if (i <= 0) {
        printf ("Error_01\n");
    }
    printf ("Enter value number: \n");
    scanf ("%d", & j);
    while (j != 0) {
        k++;
        j /= 10;
    }
    if (k != i) {
        printf ("Error_02\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52799651_52799691_3_26
52799651_52799912_4_21
Title: a C program that reads a sequence of numbers and display a message 
----------------------------------------

int main () {
    int i, j, k;
    printf ("Enter a Number:\n");
    scanf ("%d", & i);
    if (i <= 0) {
        printf ("Error_1\n");
    }
    else {
        scanf ("%d", & j);
        k = 0;
        while (j > 0) {
            k++;
            j = j / 10;
        }
        if (k < i)
            printf ("Error_2\n");
    }
}
----------------------------------------

int main () {
    int i, num, length;
    printf ("Enter a Number:\n");
    scanf ("%d", & i);
    if (i <= 0) {
        printf ("Error_1\n");
    }
    else {
        printf ("Enter the number: ");
        scanf ("%d", & num);
        length = (int) log10 (num) + 1;
        if (length < i)
            printf ("Error_2\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52799651_52799728_3_38
52799651_52799912_4_21
Title: a C program that reads a sequence of numbers and display a message 
----------------------------------------

int main () {
    int i, j, k;
    printf ("Enter any number: \n");
    scanf ("%d", & i);
    k = 0;
    if (i <= 0) {
        printf ("Error_01\n");
    }
    printf ("Enter value number: \n");
    scanf ("%d", & j);
    while (j != 0) {
        k++;
        j /= 10;
    }
    if (k != i) {
        printf ("Error_02\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, num, length;
    printf ("Enter a Number:\n");
    scanf ("%d", & i);
    if (i <= 0) {
        printf ("Error_1\n");
    }
    else {
        printf ("Enter the number: ");
        scanf ("%d", & num);
        length = (int) log10 (num) + 1;
        if (length < i)
            printf ("Error_2\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52801425_52801468_1_10
52801425_52801545_1_15
Title: how to pass struct member array to function in C 
----------------------------------------

int trova_max (struct rettangolo r [], int k) {
    int max, maxi, i;
    for (i = 0; i < k + 1; i++) {
        if (r[i].b > max) {
            max = r[i].b;
            maxi = i;
        }
    }
    return maxi;
}
----------------------------------------

int trova_max (struct rettangolo *r, size_t size, ptrdiff_t offset) {
    int max = *(int*) ((char *) &r[0] + offset);
    size_t maxi = 0;
    for (size_t i = 0; i < size; i++) {
        int v = *(int*) ((char *) &r[i] + offset);
        if (v > max) {
            max = v;
            maxi = i;
        }
    }
    return maxi;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52801425_52801531_19_31
52801425_52801545_1_15
Title: how to pass struct member array to function in C 
----------------------------------------

int trova_max (int k, enum COMP value_to_compare) {
    int max, maxi, i;
    for (i = 0; i < k + 1; i++) {
        if (compare (&r[i], max, value_to_compare)) {
            max = r[i].a;
            maxi = i;
        }
    }
    return maxi;
}
----------------------------------------

int trova_max (struct rettangolo *r, size_t size, ptrdiff_t offset) {
    int max = *(int*) ((char *) &r[0] + offset);
    size_t maxi = 0;
    for (size_t i = 0; i < size; i++) {
        int v = *(int*) ((char *) &r[i] + offset);
        if (v > max) {
            max = v;
            maxi = i;
        }
    }
    return maxi;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52807496_52807726_27_57
52807496_52807873_3_29
Title: Error when entering a words in array of pointers to char 
----------------------------------------

int main (int argc, char *argv []) {
    char **s;
    char ss [20];
    int i = 0, ret;
    scanf ("%s", ss);
    if (strcmp (ss, "stop") != 0) {
        s = (char **) malloc (1 * sizeof (char *));
        s[i] = malloc (20 * sizeof (char));
        strcpy (s [i], ss);
        i++;
    }
    while (1) {
        scanf ("%s", ss);
        if (strcmp (ss, "stop") != 0) {s = (char * *) realloc (s, (i + 1) * sizeof (char *));
        s[i] = malloc (20 * sizeof (char));
        strcpy (s [i], ss);
        i++;
    }
    else
        break;
}
----------------------------------------

int main (int argc, char *argv []) {
    char **s = NULL;
    char ss [20] = "";
    int i = 0, ret = 0;
    s = malloc (NPTR * sizeof *s);
    if (s == NULL) {
        perror ("malloc-s");
        return 1;
    }
    while (i < NPTR && scanf ("%19s", ss) == 1) {
        if (strcmp (ss, "stop") == 0)
            break;
        s[i] = strdup (ss);
        if (s[i] == NULL) {
            perror ("strdup-s[i]");
            break;
        }
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52808470_52808576_1_21
52808470_52809358_5_17
Title: Reads a number and should be counted as a symbol 
----------------------------------------

int main () {
    int i;
    int x;
    char s = '#';
    printf ("Enter an integer\n");
    scanf ("%d", & i);
    printf ("%d: ", i);
    for (x = 0; x < i; x = x + 1) {
        printf ("%c", s);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int n;
    while (scanf ("%d", &n) == 1) {
        printf ("%2d: ", n);
        for (int i = 0; i < n; i++)
            putchar (FILL);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52808754_52808866_19_28
52808754_52809294_20_29
Title: getPositiveValues won't return the values 
----------------------------------------

int main (void) {
    CHANNEL CHAN;
    printf ("Enter the name of the channel: ");
    fgets (CHAN.name, 50, stdin);
    getPositiveValue (CHAN);
    printf ("Channel data for %s\n Coefficient of roughness: %lf\n Slope: %lf\n Width: %lf\n Maximum depth: %lf\n", CHAN.name, CHAN.n, CHAN.S, CHAN.B, CHAN.D);
    printf ("Depth    Average Velocity\n");
    displayTable (CHAN);
}
----------------------------------------

int main (void) {
    CHANNEL CHAN;
    printf ("Enter the name of the channel: ");
    fgets (CHAN.name, 9, stdin);
    getPositiveValue (& CHAN);
    printf ("Channel data for %s\n Coefficient of roughness: %lf\n Slope: %lf\n Width: %lf\n Maximum depth: %lf\n", CHAN.name, CHAN.n, CHAN.S, CHAN.B, CHAN.D);
    printf ("Depth    Average Velocity\n");
    displayTable (CHAN);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52808754_52808866_30_41
52808754_52809294_31_45
Title: getPositiveValues won't return the values 
----------------------------------------

void getPositiveValue (CHANNEL CHAN) {
    int Flag;
    do {
        Flag = FALSE;
        printf ("Give the coefficient for roughness: \n Give the slope: \n Give the channel width: \n Give the maximum depth of the channel: ");
        scanf ("%lf %lf %lf %lf", & CHAN.n, & CHAN.S, & CHAN.B, & CHAN.D);
        if (CHAN.n < 0 || CHAN.S < 0 || CHAN.B < 0 || CHAN.D < 0) {
            Flag = TRUE;
            printf ("The values must be positive.\n");
        }
    }
    while (Flag == TRUE);
}
----------------------------------------

void getPositiveValue (CHANNEL *CHAN) {
    int Flag;
    do {
        Flag = FALSE;
        printf ("Give the coefficient for roughness, slope, width, and maxdepth: ");
        scanf ("%lf %lf %lf %lf", & CHAN -> n, & CHAN -> S, & CHAN -> B, & CHAN -> D);
        if (CHAN->n < 0 || CHAN->S < 0 || CHAN->B < 0 || CHAN->D < 0) {
            Flag = TRUE;
            printf ("The values must be positive.\n");
        }
    }
    while (Flag == TRUE);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52808754_52808866_57_67
52808754_52809294_63_72
Title: getPositiveValues won't return the values 
----------------------------------------

double computeVelocity (CHANNEL CHAN, double H) {
    double U;
    U = CHAN.B / H;
    U = U / (CHAN.B + (2 * H));
    U = pow (U, (2 / 3));
    U = U / CHAN.n;
    U = U * (sqrt (CHAN.S));
    return U;
}
----------------------------------------

double computeVelocity (CHANNEL CHAN, double H) {
    double U;
    U = CHAN.B / H;
    U = U / (CHAN.B + (2 * H));
    U = pow (U, (2.0 / 3.0));
    U = U / CHAN.n;
    U = U * (sqrt (CHAN.S));
    return U;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52810428_52810692_4_32
52810428_52811585_4_24
Title: How to put an array in int but using scanf 
----------------------------------------

int main (void) {
    int T, start, go;
    int *N;
    printf ("Please enter, How many entries do you want: \n");
    scanf ("%d", & T);
    N = malloc (sizeof (int *) * T);
    for (start = 0; start < T; start++) {
        scanf ("%d", & N [start]);
    }
    for (go = 0; go < T; go++) {
        printf ("Case #%d:\n", go);
        for (start = 0; start < N[go]; start++) {
            printf ("I will become a good boy.\n");
        }
    }
    free (N);
    return 0;
}
----------------------------------------

int main () {
    int T, start, go;
    int *N;
    scanf ("%d", & T);
    N = (int *) malloc (T * sizeof (int));
    for (start = 1; start <= T; start++) {
        scanf ("%d", & N [start]);
    }
    for (go = 1; go <= T; go++) {
        printf ("Case #%d:\n", go);
        for (start = 1; start <= N[start]; start++) {
            printf ("I will become a good boy.\n");
        }
    }
    free (N);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52810887_52810944_5_24
52810887_52811742_6_23
Title: C programming: A pyramid with asterisks 
----------------------------------------

void pyramid (FILE *f, int stars, int spaces) {
    if (stars > 0) {
        pyramid (f, stars - 2, spaces + 1);
        for (unsigned int i = 0; i < spaces; i++) {
            fputc (' ', f);
        }
        for (unsigned int i = 0; i < stars; i++) {
            fputc ('*', f);
        }
        fputc ('\n', f);
    }
}
----------------------------------------

void pyramid (int n) {
    if (n < 1)
        return;
    int l = 1, max = n * 2 - 1, pad = max / 2;
    for (int i = 0; i < n; i++) {
        if (pad)
            printf ("%*s", pad--, " ");
        for (int j = 0; j < l; j++)
            putchar (FILL);
        putchar ('\n');
        l += 2;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52811973_52812856_1_18
52811973_52812945_62_89
Title: segmentation fault while Addition of the station already present in list using c programming 
----------------------------------------

struct station *findStation (struct station *stations, char *station_name) {
    printf ("h1");
    while ((stations != NULL)) {
        if (strcmp (stations->station, station_name) == 0) {
            printf ("%s\n", stations -> station);
            printf ("%s\n", station_name);
            return stations;
        }
    }
    return NULL;
}
----------------------------------------

struct station *findStation (struct station *stations, char *station_name) {
    struct station *find = NULL;
    printf ("h1");
    while ((stations != NULL)) {
        if (strcmp (stations->station, station_name) != 0) {
            printf ("%s\n", stations -> station);
            printf ("%s\n", station_name);
            stations = stations->next;
            find = stations;
            printf ("Not found any match \n");
        }
        else {
            find = NULL;
            printf ("Found any match \n");
            return NULL;
        }
    }
    return find;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52864879_52865165_5_55
52864879_52865296_5_28
Title: C program that reads in a text file and displays each line except for all blank lines and comments 
----------------------------------------

int main (void) {
    char line [5000];
    FILE *fp;
    char *cp;
    char *bp;
    char *sep;
    (i.e.we will strip the fp = fopen ("gt.txt", "r");
    if (fp == NULL) {
        perror ("error opening file");
        exit (1);
    }
    while (fgets (line, sizeof (line), fp)) {
        cp = strchr (line, ';');
        if (cp != NULL)
            *cp = 0;
        bp = line;
        sep = "";
        while (1) {
            cp = strtok (bp, " ,.\t\n");
            bp = NULL;
            if (cp == NULL)
                break;
            printf ("%s%s", sep, cp);
            sep = " ";
        }
        if (sep[0] != 0)
            printf ("\n");
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp = fopen ("gt.txt", "r");
    if (fp == NULL) {
        perror ("error opening file");
        return EXIT_FAILURE;
    }
    bool blank_the_line = false;
    int previous = '\n';
    int ch;
    while ((ch = fgetc (fp)) != EOF) {
        if (previous == '\n') {
            blank_the_line = isspace (ch) || ch == COMMENT_CHAR;
        }
        if (!blank_the_line) {
            fputc (ch, stdout);
        }
        previous = ch;
    }
    fclose (fp);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52866497_52867129_5_38
52866497_52867506_3_27
Title: Coding for multiple modes in C? 
----------------------------------------

int main () {
    int x, i, c [101], mode;
    printf ("please enter test scores between 0 and 100\n");
    i = 0;
    mode = 0;
    while (i <= 100) {
        c[i] = 0;
        ++i;
    }
    scanf ("%d", & x);
    while ((x >= 0) && (x <= 100)) {
        c[x] = c[x] + 1;
        if (c[x] >= mode) {
            mode = c[x];
        }
        scanf ("%d", & x);
    }
    for (i = 0; i <= 100; i++) {
        if (c[i] == mode) {
            printf ("THE MODE(S) ARE %d\n", i);
        }
        i = 0;
        while (i <= 100) {
            if (c [i] > 0) {printf ("%d occurs %d times\n", i, c [i]);
        }
        ++i;
    }
}
----------------------------------------

int main () {
    int x, i, c [101] = {0}, max_repeat;
    printf ("please enter test scores between 0 and 100\n");
    max_repeat = 0;
    while (scanf ("%d", &x) == 1 && x >= 0 && x <= 100) {
        c[x] += 1;
        if (max_repeat < c[x]) {
            max_repeat = c[x];
        }
    }
    printf ("The mode(s) are");
    for (i = 0; i <= 100; i++) {
        if (c[i] == max_repeat) {
            printf (" %d", i);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5287506_18617670_205_241
5287506_21959069_5_97
Title: Broken Necklace USACO Problem 
----------------------------------------

int main () {
    ifstream fin ("beads.in");
    char necklace [MAXLEN];
    int i, j, max;
    fin >> necklace;
    nodeList *list = NULL;
    int repeat = 0;
    i = 0;
    while (i < strlen (necklace)) {
        repeat = 0;
        for (j = i; necklace[j] == necklace[i]; j++) {
            repeat++;
        }
        append (& list, necklace [i], repeat);
        i = i + repeat;
    }
    shiftNodes (& list);
    fillLenMax (& list);
    max = calcMaxLenMax (list);
    fout << max << endl;
    return 0;
}
----------------------------------------

int main () {
    int numBeads;
    char temp1 [705];
    char temp2 [705];
    int i, j, k, lim;
    int count1 = 0;
    int count2 = 0;
    int maxcount1 = 0;
    char virgin = ' ';
    bool flag = false;
    FILE *fin = fopen ("beads.in", "r");
    FILE *fout = fopen ("beads.out", "w");
    fscanf (fin, "%d", & numBeads);
    fscanf (fin, "%s", temp1);
    strcpy (temp2, temp1);
    strcat (temp1, temp2);
    for (i = 0, j = numBeads - 1; i < numBeads; i++, j++) {
        count1 = 0;
        count2 = 0;
        flag = false;
        virgin = ' ';
        for (k = i; flag == false && k < (i + numBeads); k++) {
            if (temp1[k] == 'w') {
                count1++;
            }
            else if (temp1[k] == 'r') {
                if (virgin == ' ') {
                    virgin = 'r';
                }
                if (virgin == 'r')
                    count1++;
                else {
                    flag = true;
                    k--;
                }
            }
            else if (temp1[k] == 'b') {
                if (virgin == ' ') {
                    virgin = 'b';
                }
                if (virgin == 'b')
                    count1++;
                else {
                    flag = true;
                    k--;
                }
            }
        }
        lim = k;
        flag = false;
        virgin = ' ';
        for (k = j; flag == false && k < (j + numBeads) && k >= lim; k--) {
            if (temp1[k] == 'w') {
                count2++;
            }
            else if (temp1[k] == 'r') {
                if (virgin == ' ') {
                    virgin = 'r';
                }
                if (virgin == 'r')
                    count2++;
                else {
                    flag = true;
                    k--;
                }
            }
            else if (temp1[k] == 'b') {
                if (virgin == ' ') {
                    virgin = 'b';
                }
                if (virgin == 'b')
                    count2++;
                else {
                    flag = true;
                    k--;
                }
            }
        }
        if (maxcount1 < (count1 + count2))
            maxcount1 = count1 + count2;
    }
    fprintf (fout, "%d\n", maxcount1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52889863_52890141_2_14
52889863_52891955_6_39
Title: digits sum of a number (c) 
----------------------------------------

int main () {
    int n, digit, sum = 0;
    printf ("Please gine a positive integer");
    scanf ("%d", & n);
    while (n > 0) {
        digit = n % 10;
        sum = sum + digit;
        n = n / 10;
    }
    printf ("%d", sum);
}
----------------------------------------

int main (void) {
    int sum;
    char digit_1, digit_2, digit_3, digit_4, digit_5;
    printf ("Please enter a five digit number\n");
    int result = scanf ("%c,%c,%c,%c,%c", &digit_1, &digit_2, &digit_3, &digit_4, &digit_5);
    if (EOF == result) {
        if (ferror (stdin)) {
            perror ("scanf() failed");
            exit (EXIT_FAILURE);
        }
        result = 0;
    }
    if (5 > result) {
        fprintf (stderr, "To few input: Should be %d, but is %d\n", 5, result);
        exit (EXIT_FAILURE);
    }
    sum = digit_1 + digit_2 + digit_3 + digit_4 + digit_5;
    printf ("the sum of the digits is: %d", sum);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52896355_52896548_5_26
52896355_52897429_5_14
Title: weird mktime behavior in standard c 
----------------------------------------

int main () {
    int ddate;
    double dt;
    char dstr1 [20], dstr2 [20];
    time_t s1, s2;
    struct tm d1, d2;
    memset (& d1, 0, sizeof (d1));
    memset (& d2, 0, sizeof (d2));
    strptime ("04/06/2015", "%m/%d/%Y", & d1);
    strptime ("08/06/2015", "%m/%d/%Y", & d2);
    strftime (dstr1, 20, "%Y-%m-%d", & d1);
    strftime (dstr2, 20, "%Y-%m-%d", & d2);
    printf ("%s,%s\n", dstr1, dstr2);
    s1 = mktime (&d1);
    s2 = mktime (&d2);
    printf ("%s", ctime (& s1));
    printf ("%s", ctime (& s2));
    return (0);
}
----------------------------------------

int main (void) {
    time_t s1;
    struct tm d1;
    strptime ("04/06/2015", "%m/%d/%Y", & d1);
    printf ("%02d:%02d:%02d\n", d1.tm_hour, d1.tm_min, d1.tm_sec);
    s1 = mktime (&d1);
    puts (ctime (& s1));
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52904020_52904101_9_24
52904020_52904414_10_29
Title: Split digits in array 
----------------------------------------

int main () {
    int a [5] = {14, 2, 7, 3, 2};
    int b [MAX];
    int k = 0;
    printarr (a, 5);
    char s [MAX];
    for (int i = 0; i < 5; i++) {
        sprintf (s, "%d", a [i]);
        int j = 0;
        while (s[j] != '\0') {
            b[k++] = s[j++] - '0';
        }
    }
    printarr (b, k);
    return 0;
}
----------------------------------------

int main () {
    int inputLength = 5;
    int input [] = {14, 1, 9, 0, 5819};
    int outputLength = 0;
    for (int i = 0; i < inputLength; ++i)
        outputLength += digitCount (input[i]);
    int output [outputLength];
    int o = outputLength;
    for (int i = inputLength - 1; i >= 0; --i) {
        int n = input[i];
        do {
            output[--o] = n % 10;
            n /= 10;
        }
        while (n);
    }
    while (o < outputLength) {
        printf ("%d ", output [o ++]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52905018_52905126_6_23
52905018_52907031_6_29
Title: "Program wont loop Prime Number finder C" 
----------------------------------------

int main () {
    int primenum = 0, i = 0, j = 0, c = 0;
    for (i = START; i <= END; i++) {
        c = 2;
        for (j = 2; j <= i - 1; j++) {
            if (i % j == 0) {
                c++;
            }
        }
        if (c == 2)
            primenum = primenum + 1;
    }
    printf ("THE PRIME NUMBERS ARE %d", primenum);
    return 0;
}
----------------------------------------

int main () {
    int primenum = 0, i = 0, j = 0, c = 0;
    for (i = START; i <= END; i++) {
        c = 2;
        for (j = 2; j < i; j++) {
            if (i % j == 0) {
                c++;
                break;
            }
        }
        if (c == 2) {
            primenum = primenum + 1;
        }
    }
    printf ("tHE PRIME NUMBERS ARE %d", primenum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52908346_52908521_11_21
52908346_52908523_5_23
Title: how to multiply 2 numbers using recursion 
----------------------------------------

int main () {
    printf ("%d\n", multiply (3, 6));
    printf ("%d\n", multiply (9, 9));
    printf ("%d\n", multiply (- 6, 2));
    printf ("%d\n", multiply (6, - 2));
    printf ("%d\n", multiply (0, 7));
    printf ("%d\n", multiply (7, 0));
    printf ("%d\n", multiply (0, 0));
    printf ("%d\n", multiply (- 10, - 2));
    return 0;
}
----------------------------------------

int main () {
    int a, b, c;
    a = 6;
    b = 3;
    c = multiply (a, b);
    printf ("%d\n", c);
    a = 9;
    b = 9;
    c = multiply (a, b);
    printf ("%d\n", c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52912284_52912319_1_12
52912284_52912344_1_14
Title: C: code does not work without a separate function. Why? 
----------------------------------------

void shorten (char *s, int new_len) {
    int len = 0;
    while (*s) {
        len++;
        s++;
    }
    while (len > new_len) {
        s--;
        len--;
        *s = '\0';
    }
}
----------------------------------------

void shorten (char *s, size_t new_len) {
    size_t len = 0;
    while (s[len] != '\0') {
        len++;
    }
    if (len > new_len) {
        s[new_len] = '\0';
        len = new_len;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52915174_52915291_3_14
52915174_52915316_4_17
Title: Error : Wrong comparison between pointer and integer 
----------------------------------------

int main () {
    char c [1];
    char exit = 'E';
    while ((c[0] = getchar ()) != exit) {
        if (c[0] == EOF)
            break;
        printf ("your character is : %c\n", c [0]);
    }
    printf ("ended");
}
----------------------------------------

int main () {
    char c [2];
    char exit = 'E';
    do {
        printf ("Enter a character\n\n");
        while (scanf ("%1s", c) != 1) {
            fputs ("Input error!\n");
            return EXIT_FAILURE;
        }
        printf ("your character is : %s\n-------------------\n", c);
    }
    while (c[0] != exit);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52917778_52917954_11_28
52917778_52918415_3_34
Title: The reverse of all numbers on the 5th column on matrix 
----------------------------------------

void main () {
    int mat [10] [10], i, j;
    printf ("Enter your matrix\n");
    for (i = 0; i < 2; i++)
        for (j = 0; j < 5; j++) {
            scanf ("%d", & mat [i] [j]);
        }
    printf ("\nHere is your matrix:\n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 5; j++) {
            printf ("%d ", mat [i] [j]);
            if (j == 4)
                mat[i][j] = inverse (mat[i][j]);
        }
        printf ("\n");
    }
}
----------------------------------------

int main () {
    int mat [10] [10], i, j;
    printf ("Enter your matrix\n");
    for (i = 0; i < 2; i++)
        for (j = 0; j < 5; j++) {
            scanf ("%d", & mat [i] [j]);
        }
    printf ("\nHere is your matrix:\n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 5; j++) {
            if (j == 4) {
                int remainder, reverse = 0;
                while (mat[i][j] > 0) {
                    remainder = mat[i][j] % 10;
                    reverse = reverse * 10 + remainder;
                    mat[i][j] = mat[i][j] / 10;
                }
                mat[i][j] = reverse;
            }
            printf ("%d ", mat [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52917778_52917954_11_28
52917778_52922776_29_42
Title: The reverse of all numbers on the 5th column on matrix 
----------------------------------------

void main () {
    int mat [10] [10], i, j;
    printf ("Enter your matrix\n");
    for (i = 0; i < 2; i++)
        for (j = 0; j < 5; j++) {
            scanf ("%d", & mat [i] [j]);
        }
    printf ("\nHere is your matrix:\n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 5; j++) {
            printf ("%d ", mat [i] [j]);
            if (j == 4)
                mat[i][j] = inverse (mat[i][j]);
        }
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    int mat [2] [5] = {1, 2, 3, 4, 89, 3, 8, 6, 8, 91};
    inverse (mat);
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 5; j++)
            printf ("%d ", mat[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52917778_52918415_3_34
52917778_52922776_29_42
Title: The reverse of all numbers on the 5th column on matrix 
----------------------------------------

int main () {
    int mat [10] [10], i, j;
    printf ("Enter your matrix\n");
    for (i = 0; i < 2; i++)
        for (j = 0; j < 5; j++) {
            scanf ("%d", & mat [i] [j]);
        }
    printf ("\nHere is your matrix:\n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 5; j++) {
            if (j == 4) {
                int remainder, reverse = 0;
                while (mat[i][j] > 0) {
                    remainder = mat[i][j] % 10;
                    reverse = reverse * 10 + remainder;
                    mat[i][j] = mat[i][j] / 10;
                }
                mat[i][j] = reverse;
            }
            printf ("%d ", mat [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int mat [2] [5] = {1, 2, 3, 4, 89, 3, 8, 6, 8, 91};
    inverse (mat);
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 5; j++)
            printf ("%d ", mat[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52926427_52927964_3_55
52926427_52928537_5_45
Title: Improving the performance of a program in C 
----------------------------------------

int main () {
    int number, i;
    scanf ("%d", & number);
    int num [number];
    for (i = 0; i < number; i++)
        scanf ("%d", &num[i]);
    int size = 1000;
    int auxiliary [size];
    for (i = 0; i < size; i++)
        auxiliary[i] = 0;
    for (i = 0; i < number; i++)
        auxiliary[num[i]]++;
    int majority, runner_up;
    majority = 0;
    runner_up = 0;
    for (i = 1; i < size; i++) {
        if (auxiliary[i] > auxiliary[majority]) {
            majority = i;
        }
    }
    for (i = 1; i < size; i++) {
        if (auxiliary[i] > auxiliary[runner_up] && i != majority) {
            runner_up = i;
        }
    }
    if (runner_up == 0) {
        printf ("MAJORITY>> %d", majority);
        return 0;
    }
    printf ("MAJORITY >> %d , RUNNER UP>>%d", majority, runner_up);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    unsigned int input;
    unsigned int total = 0;
    unsigned int currentMostFrequent = 0;
    unsigned int currentSecondMostFrequent = 0;
    while (scanf ("%u", &input)) {
        if (input == 0) {
            break;
        }
        else if (input > MAX_VALUE) {
            break;
        }
        else {
            total++;
            occurrences[input]++;
            if (occurrences[input] > currentSecondMostFrequent) {
                if (occurrences[input] > currentMostFrequent) {
                    currentSecondMostFrequent = currentMostFrequent;
                    currentMostFrequent = input;
                }
                else {
                    currentSecondMostFrequent = input;
                }
            }
        }
    }
    if (occurrences[currentMostFrequent] > total / 2) {
        printf ("majority: %d\n", currentMostFrequent);
        if (currentSecondMostFrequent > 0) {
            printf ("runner up: %d\n", currentSecondMostFrequent);
        }
        else {
            printf ("runner up: NONE\n");
        }
    }
    else {
        printf ("majority: NONE\n");
        if (currentMostFrequent > 0) {
            printf ("runner up: %d\n", currentMostFrequent);
        }
        else {
            printf ("runner up: NONE\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52932715_52933601_30_44
52932715_52943205_23_46
Title: C code for converting decimal to any base (from 2 to 36) 
----------------------------------------

int main (int argc, const char **argv) {
    char a [65];
    itoa (LLONG_MAX, 2, a);
    printf ("binary: %s \n", a);
    itoa (12345, 10, a);
    printf ("digit: %s \n", a);
    itoa (64018, 16, a);
    printf ("hex : 0x%s \n", a);
    itoa (- 24, 24, a);
    printf ("base 24 : base24x%s \n", a);
    itoa (LLONG_MAX, 36, a);
    printf ("base 36 : base36x%s \n", a);
    return 0;
}
----------------------------------------

int main () {
    int n, k;
    char a [81], b [81];
    setvbuf (stdout, NULL, _IONBF, 0);
    printf ("Enter a deicmal number you want to convert to binary: ");
    scanf ("%i", & n);
    fflush (stdout);
    printf ("Enter a base: ");
    scanf ("%i", & k);
    printBinary (n, k, 0, a);
    n = strlen (a);
    k = 0;
    n--;
    while (n >= 0) {
        b[k] = a[n];
        n--;
        k++;
    }
    b[k] = '\0';
    printf ("%s", b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52955008_52956653_4_37
52955008_52957036_6_35
Title: Converting 3 digit decimal number to binary (C) 
----------------------------------------

int main () {
    int dec_num;
    int i = 0;
    printf ("type in 3 digits number to convert to binary\n");
    int flag = scanf ("%d", &dec_num);
    if (flag != 1) {
        printf ("Input is not recognized as an integer");
        return 0;
    }
    int size = 0;
    int array [120] = {0};
    while (dec_num > 0) {
        if (dec_num % TWO != 0) {
            array[i] = 1;
        }
        else if (dec_num % TWO == 0) {
            array[i] = 0;
        }
        size = ++i;
        dec_num = dec_num / TWO;
    }
    for (i = size - 1; i >= 0; i--)
        printf ("%d", array[i]);
    return 0;
}
----------------------------------------

int main (void) {
    int dec_num;
    int i = MAX_BIN_DIGITS;
    int bin_bit;
    char bin_res [MAX_BIN_DIGITS + 1] = {0};
    printf ("Type in 3 digits number to convert to binary:\n");
    if (1 != scanf ("%d", &dec_num)) {
        printf ("Error: Invalid input value!");
        return ERR_INVALID_INPUT_VALUE;
    }
    while (i-- && dec_num) {
        bin_bit = dec_num & 1;
        dec_num >>= 1;
        bin_res[i] = '0' + bin_bit;
    }
    printf ("%s\n", (i != MAX_BIN_DIGITS - 1) ? & (bin_res [i + 1]) ? "0");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52955008_52956653_4_37
52955008_52961898_3_28
Title: Converting 3 digit decimal number to binary (C) 
----------------------------------------

int main () {
    int dec_num;
    int i = 0;
    printf ("type in 3 digits number to convert to binary\n");
    int flag = scanf ("%d", &dec_num);
    if (flag != 1) {
        printf ("Input is not recognized as an integer");
        return 0;
    }
    int size = 0;
    int array [120] = {0};
    while (dec_num > 0) {
        if (dec_num % TWO != 0) {
            array[i] = 1;
        }
        else if (dec_num % TWO == 0) {
            array[i] = 0;
        }
        size = ++i;
        dec_num = dec_num / TWO;
    }
    for (i = size - 1; i >= 0; i--)
        printf ("%d", array[i]);
    return 0;
}
----------------------------------------

int main () {
    int dec_num;
    printf ("type in a 3 digit number to convert to binary\n");
    if (scanf ("%d", &dec_num) != 1) {
        printf ("invalid input\n");
        return 1;
    }
    if (dec_num < 0 || dec_num > 999) {
        printf ("invalid value: must have at most 3 digits\n");
        return 1;
    }
    for (;;) {
        if (dec_num % 2 != 0) {
            printf ("1");
        }
        else {
            printf ("0");
        }
        dec_num = dec_num / 2;
        if (dec_num == 0)
            break;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52955008_52956653_4_37
52955008_52962818_11_46
Title: Converting 3 digit decimal number to binary (C) 
----------------------------------------

int main () {
    int dec_num;
    int i = 0;
    printf ("type in 3 digits number to convert to binary\n");
    int flag = scanf ("%d", &dec_num);
    if (flag != 1) {
        printf ("Input is not recognized as an integer");
        return 0;
    }
    int size = 0;
    int array [120] = {0};
    while (dec_num > 0) {
        if (dec_num % TWO != 0) {
            array[i] = 1;
        }
        else if (dec_num % TWO == 0) {
            array[i] = 0;
        }
        size = ++i;
        dec_num = dec_num / TWO;
    }
    for (i = size - 1; i >= 0; i--)
        printf ("%d", array[i]);
    return 0;
}
----------------------------------------

int main (void) {
    int decnum = 0;
    unsigned remain = 0;
    size_t nbits = sizeof decnum * CHAR_BIT;
    for (;;) {
        int rtn;
        fputs ("enter 3 digit integer: ", stdout);
        rtn = scanf ("%d", &decnum);
        if (rtn == EOF) {
            fputs ("(user canceled input)\n", stderr);
            return 1;
        }
        if (rtn == 0) {
            empty_stdin ();
            fputs ("  error: invalid integer input.\n", stderr);
        }
        else if (decnum < -999 || (decnum > -100 && decnum < 100) || decnum > 999) {
            empty_stdin ();
            fputs ("  error: not a 3 digit number.\n", stderr);
        }
        else {
            empty_stdin ();
            break;
        }
    }
    printf ("decimal: %d\nbinary : ", decnum);
    while (nbits--) {
        if ((remain = decnum >> nbits))
            putchar ((remain & 1) ? '1' : '0');
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52955008_52957036_6_35
52955008_52961898_3_28
Title: Converting 3 digit decimal number to binary (C) 
----------------------------------------

int main (void) {
    int dec_num;
    int i = MAX_BIN_DIGITS;
    int bin_bit;
    char bin_res [MAX_BIN_DIGITS + 1] = {0};
    printf ("Type in 3 digits number to convert to binary:\n");
    if (1 != scanf ("%d", &dec_num)) {
        printf ("Error: Invalid input value!");
        return ERR_INVALID_INPUT_VALUE;
    }
    while (i-- && dec_num) {
        bin_bit = dec_num & 1;
        dec_num >>= 1;
        bin_res[i] = '0' + bin_bit;
    }
    printf ("%s\n", (i != MAX_BIN_DIGITS - 1) ? & (bin_res [i + 1]) ? "0");
    return 0;
}
----------------------------------------

int main () {
    int dec_num;
    printf ("type in a 3 digit number to convert to binary\n");
    if (scanf ("%d", &dec_num) != 1) {
        printf ("invalid input\n");
        return 1;
    }
    if (dec_num < 0 || dec_num > 999) {
        printf ("invalid value: must have at most 3 digits\n");
        return 1;
    }
    for (;;) {
        if (dec_num % 2 != 0) {
            printf ("1");
        }
        else {
            printf ("0");
        }
        dec_num = dec_num / 2;
        if (dec_num == 0)
            break;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52955008_52957036_6_35
52955008_52962818_11_46
Title: Converting 3 digit decimal number to binary (C) 
----------------------------------------

int main (void) {
    int dec_num;
    int i = MAX_BIN_DIGITS;
    int bin_bit;
    char bin_res [MAX_BIN_DIGITS + 1] = {0};
    printf ("Type in 3 digits number to convert to binary:\n");
    if (1 != scanf ("%d", &dec_num)) {
        printf ("Error: Invalid input value!");
        return ERR_INVALID_INPUT_VALUE;
    }
    while (i-- && dec_num) {
        bin_bit = dec_num & 1;
        dec_num >>= 1;
        bin_res[i] = '0' + bin_bit;
    }
    printf ("%s\n", (i != MAX_BIN_DIGITS - 1) ? & (bin_res [i + 1]) ? "0");
    return 0;
}
----------------------------------------

int main (void) {
    int decnum = 0;
    unsigned remain = 0;
    size_t nbits = sizeof decnum * CHAR_BIT;
    for (;;) {
        int rtn;
        fputs ("enter 3 digit integer: ", stdout);
        rtn = scanf ("%d", &decnum);
        if (rtn == EOF) {
            fputs ("(user canceled input)\n", stderr);
            return 1;
        }
        if (rtn == 0) {
            empty_stdin ();
            fputs ("  error: invalid integer input.\n", stderr);
        }
        else if (decnum < -999 || (decnum > -100 && decnum < 100) || decnum > 999) {
            empty_stdin ();
            fputs ("  error: not a 3 digit number.\n", stderr);
        }
        else {
            empty_stdin ();
            break;
        }
    }
    printf ("decimal: %d\nbinary : ", decnum);
    while (nbits--) {
        if ((remain = decnum >> nbits))
            putchar ((remain & 1) ? '1' : '0');
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52955008_52961898_3_28
52955008_52962818_11_46
Title: Converting 3 digit decimal number to binary (C) 
----------------------------------------

int main () {
    int dec_num;
    printf ("type in a 3 digit number to convert to binary\n");
    if (scanf ("%d", &dec_num) != 1) {
        printf ("invalid input\n");
        return 1;
    }
    if (dec_num < 0 || dec_num > 999) {
        printf ("invalid value: must have at most 3 digits\n");
        return 1;
    }
    for (;;) {
        if (dec_num % 2 != 0) {
            printf ("1");
        }
        else {
            printf ("0");
        }
        dec_num = dec_num / 2;
        if (dec_num == 0)
            break;
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int decnum = 0;
    unsigned remain = 0;
    size_t nbits = sizeof decnum * CHAR_BIT;
    for (;;) {
        int rtn;
        fputs ("enter 3 digit integer: ", stdout);
        rtn = scanf ("%d", &decnum);
        if (rtn == EOF) {
            fputs ("(user canceled input)\n", stderr);
            return 1;
        }
        if (rtn == 0) {
            empty_stdin ();
            fputs ("  error: invalid integer input.\n", stderr);
        }
        else if (decnum < -999 || (decnum > -100 && decnum < 100) || decnum > 999) {
            empty_stdin ();
            fputs ("  error: not a 3 digit number.\n", stderr);
        }
        else {
            empty_stdin ();
            break;
        }
    }
    printf ("decimal: %d\nbinary : ", decnum);
    while (nbits--) {
        if ((remain = decnum >> nbits))
            putchar ((remain & 1) ? '1' : '0');
    }
    putchar ('\n');
}
----------------------------------------

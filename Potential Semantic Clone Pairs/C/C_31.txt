$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3305735_44699843_4_24
3305735_45591499_6_43
Title: K&R Exercise 1-9 (C) 
----------------------------------------

int main (void) {
    int c, flag = 0;
    while ((c = getchar ()) != EOF) {
        if (c == ' ') {
            if (flag == 0) {
                flag = 1;
                putchar (c);
            }
        }
        else {
            flag = 0;
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    double c;
    char blank = ' ';
    while ((c = getchar ()) != EOF) {
        if (c == ' ') {
            putchar (c);
            while ((c = getchar ()) == ' ') {
                if (c != ' ')
                    break;
            }
        }
        if (c == '\t') {
            putchar (blank);
            while ((c = getchar ()) == '\t') {
                if (c != '\t')
                    break;
            }
        }
        putchar (c);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3305735_44699843_4_24
3305735_50181284_4_21
Title: K&R Exercise 1-9 (C) 
----------------------------------------

int main (void) {
    int c, flag = 0;
    while ((c = getchar ()) != EOF) {
        if (c == ' ') {
            if (flag == 0) {
                flag = 1;
                putchar (c);
            }
        }
        else {
            flag = 0;
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int c = 0, sp = 0;
    while ((c = getchar ()) != EOF) {
        if (c == ' ')
            ++sp;
        if (c != ' ')
            sp = 0;
        if (sp < 2)
            putchar (c);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3305735_45591499_6_43
3305735_50181284_4_21
Title: K&R Exercise 1-9 (C) 
----------------------------------------

int main (void) {
    double c;
    char blank = ' ';
    while ((c = getchar ()) != EOF) {
        if (c == ' ') {
            putchar (c);
            while ((c = getchar ()) == ' ') {
                if (c != ' ')
                    break;
            }
        }
        if (c == '\t') {
            putchar (blank);
            while ((c = getchar ()) == '\t') {
                if (c != '\t')
                    break;
            }
        }
        putchar (c);
    }
    return 0;
}
----------------------------------------

int main () {
    int c = 0, sp = 0;
    while ((c = getchar ()) != EOF) {
        if (c == ' ')
            ++sp;
        if (c != ' ')
            sp = 0;
        if (sp < 2)
            putchar (c);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33060346_33060540_1_29
33060346_33060560_11_32
Title: Swapping double pointers in C 
----------------------------------------

int main (int argc, char *argv []) {
    char *name1 [3] = {"Chicago", "University", "Computer"};
    char *name2 [3] = {"I", "Love", "Uchicago"};
    int k;
    char *p1 [3];
    char *p2 [3];
    for (k = 0; k < 3; k++) {
        p1[k] = name1[k];
        p2[k] = name2[k];
    }
    for (k = 0; k < 3; k++) {
        printf ("%s %s\n", p1 [k], p2 [k]);
    }
    nameSwap (p1, p2);
    for (k = 0; k < 3; k++) {
        printf ("%s %s\n", p1 [k], p2 [k]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *name1 [3] = {"Chicago", "University", "Computer"};
    char *name2 [3] = {"I", "Love", "Uchicago"};
    int k;
    char * (*p1) [3];
    char * (*p2) [3];
    p1 = &name1;
    p2 = &name2;
    for (k = 0; k < 3; k++) {
        printf ("%s %s\n", (* p1) [k], (* p2) [k]);
    }
    nameSwap (& p1, & p2);
    for (k = 0; k < 3; k++) {
        printf ("%s %s\n", (* p1) [k], (* p2) [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33063494_33063586_3_17
33063494_33063760_4_21
Title: Why this program is crashing? 
----------------------------------------

int main () {
    int i = 0, j = 0;
    int *p = (int *) malloc (1 * sizeof (int));
    for (;;) {
        p = realloc (p, (i + 1) * sizeof (int));
        scanf ("%d", p + i);
        if (*(p + i) == 42) {
            break;
        }
        i++;
    }
    for (j = 0; j < i; j++) {
        printf ("%d\n", j);
    }
}
----------------------------------------

int main () {
    int in;
    for (;;) {
        scanf ("%d", & in);
        printf ("%d\n", in);
        if (in == 42) {
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33064264_33065059_40_56
33064264_33069669_33_42
Title: Sorting integer array to avoid repeating consecutive values in C 
----------------------------------------

int main (void) {
    int arr [7];
    arr[0] = 1;
    arr[1] = 2;
    arr[2] = 3;
    arr[3] = 1;
    arr[4] = 2;
    arr[5] = 3;
    arr[6] = 1;
    printArr ("Initial", arr, 7);
    qsort (arr, 7, sizeof (int), sortCallback);
    printArr ("Sorted", arr, 7);
    arrange (arr, 7);
    printArr ("Rearranged", arr, 7);
    return 0;
}
----------------------------------------

int main (void) {
    int arr [] = {1, 1, 1, 2, 2, 3, 3};
    int n = sizeof (arr) / sizeof (*arr);
    cnv (n, arr);
    for (int i = 0; i < n; ++i) {
        printf ("%d ", arr [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33064790_33064849_3_37
33064790_33064944_3_33
Title: GPA Calculator help in C 
----------------------------------------

int main () {
    float fGrades [30] = {0};
    float fAverage = 0;
    int x;
    int y = 0;
    int counter = 0;
    float fSum = 0;
    char cResp = '\0';
    printf ("\nGPA Calculater");
    printf ("\nYou can enter up to 30 grades");
    do {
        printf ("\nPlease enter a grade and press enter: ");
        scanf ("%f", & fGrades [counter]);
        counter++;
        printf ("\nDo you want to calculate the GPA? (Y or N): ");
        scanf ("\n%c", & cResp);
    }
    while (counter < 30 && cResp != 'Y' && cResp != 'y');
    for (x = 0; x < counter; x++) {
        fSum += fGrades[x];
    }
    fAverage = fSum / x;
    printf ("\nYour final GPA is: %.2f\n", fAverage);
    return 0;
}
----------------------------------------

int main () {
    float fGrades [30] = {0};
    float fAverage = 0;
    int x;
    int y = 0;
    float fSum = 0;
    char cResp = '\0';
    int count = 0;
    printf ("\nGPA Calculater");
    printf ("\nYou can enter up to 30 grades");
    do {
        printf ("\nPlease enter a grade and press enter: ");
        scanf ("%f", & fGrades [x]);
        fSum += fGrades[x];
        count++;
        printf ("\nDo you want to calculate the GPA? (Y or N): ");
        scanf ("\n%c", & cResp);
    }
    while (x < 30 && cResp != 'Y' && cResp != 'y');
    fAverage = fSum / count;
    printf ("\nYour final GPA is: %.2f\n", fAverage);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33068508_33069136_8_34
33068508_33071031_12_57
Title: "How to put strings of various length in a pointer say char *output[100]" 
----------------------------------------

int main (void) {
    char buf [MAXLEN];
    char *array [STRINGS];
    int i;
    for (i = 0; i < STRINGS; i++) {
        printf ("Enter string %d: ", i + 1);
        if (fgets (buf, MAXLEN, stdin) == NULL)
            return 0;
        buf[strcspn (buf, "\r\n")] = 0;
        array[i] = malloc (strlen (buf) +1);
        if (array[i] == NULL)
            return 0;
        strcpy (array [i], buf);
    }
    for (i = 0; i < STRINGS; i++) {
        printf ("%s\n", array [i]);
    }
    for (i = 0; i < STRINGS; i++) {
        free (array [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    strncpy (rectangular_array [0], "hello,", COLS - 1);
    strncpy (rectangular_array [1], "world!", COLS - 1);
    size_t i = 0;
    while (i < ROWS && rectangular_array[i][0]) {
        const char * const s = &rectangular_array[i][0];
        const size_t m = strlen (s) + 1;
        char * const t = malloc (m);
        printf ("%s ", s);
        assert (t);
        memcpy (t, s, m);
        ragged_array[i] = t;
        ++i;
    }
    if (i < ROWS)
        ragged_array[i] = NULL;
    puts ("\n");
    for (i = 0; i < ROWS && ragged_array[i]; ++i) {
        printf ("%s ", ragged_array [i]);
        free (ragged_array [i]);
        ragged_array[i] = NULL;
    }
    puts ("\n");
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33070765_33070922_1_14
33070765_33071587_1_20
Title: Read in first 3 characters of each line in file into an array of Strings 
----------------------------------------

int getName (FILE *inFile, char name [MAX] [4]) {
    char *line = NULL;
    char word [4] = {0};
    int counter = 0;
    while (fgets (line, sizeof (line), inFile) != NULL) {
        sscanf (line, "%c%c%c\n", & word [0], & word [1], & word [2]);
        strcpy (name [counter], word);
        counter++;
    }
    return counter;
}
----------------------------------------

int getName (FILE *inFile, char name [MAX] [4]) {
    int counter = 0;
    int ch;
    int i = 0;
    while ((ch = fgetc (inFile)) != EOF) {
        char word [3];
        if (i < 3) {
            word[i++] = ch;
            if (i == 3 || ch == '\n') {
                if (counter < MAX) {
                    strcpy (name [counter], word);
                    counter++;
                }
                else {
                    break;
                }
            }
        }
        if (ch == '\n') {
            i = 0;
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33093788_33093846_3_27
33093788_33093927_4_30
Title: Write a program that multiplies user entered number till product of these numbers reach 1000 
----------------------------------------

int main (void) {
    int start = 0;
    while (start < 2) {
        printf ("Enter a number greater than one: ");
        if (scanf ("%d", &start) != 1) {
            for (int ch = 0; ch != '\n'; ch = getchar ())
                ;
        }
    }
    int curr = 1;
    while (curr < 1000) {
        curr *= start;
        printf ("%d\n", curr);
    }
    return 0;
}
----------------------------------------

int main () {
    char input [10];
    unsigned currentTotal = 1;
    unsigned value;
    unsigned numEntered = 0;
    while (currentTotal < 1000) {
        printf ("Enter a number: \n");
        fgets (input, sizeof (input), stdin);
        value = atoi (input);
        if (value > 0) {
            currentTotal *= value;
            numEntered += 1;
        }
        else {
            printf ("Please enter a positive integer value\n");
        }
    }
    printf ("You entered %u numbers which when multiplied together equal %u\n", numEntered, currentTotal);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33093788_33093846_3_27
33093788_33096158_3_20
Title: Write a program that multiplies user entered number till product of these numbers reach 1000 
----------------------------------------

int main (void) {
    int start = 0;
    while (start < 2) {
        printf ("Enter a number greater than one: ");
        if (scanf ("%d", &start) != 1) {
            for (int ch = 0; ch != '\n'; ch = getchar ())
                ;
        }
    }
    int curr = 1;
    while (curr < 1000) {
        curr *= start;
        printf ("%d\n", curr);
    }
    return 0;
}
----------------------------------------

int main () {
    int input, output = 1;
    while (1) {
        scanf ("%d", & input);
        if (input <= 0)
            printf ("Please enter a positive integer not less than 1 :\n");
        else if (input > 0)
            output *= input;
        if (output > 1000) {
            printf ("\nThe result is: %d", output);
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33093788_33093927_4_30
33093788_33096158_3_20
Title: Write a program that multiplies user entered number till product of these numbers reach 1000 
----------------------------------------

int main () {
    char input [10];
    unsigned currentTotal = 1;
    unsigned value;
    unsigned numEntered = 0;
    while (currentTotal < 1000) {
        printf ("Enter a number: \n");
        fgets (input, sizeof (input), stdin);
        value = atoi (input);
        if (value > 0) {
            currentTotal *= value;
            numEntered += 1;
        }
        else {
            printf ("Please enter a positive integer value\n");
        }
    }
    printf ("You entered %u numbers which when multiplied together equal %u\n", numEntered, currentTotal);
    return 0;
}
----------------------------------------

int main () {
    int input, output = 1;
    while (1) {
        scanf ("%d", & input);
        if (input <= 0)
            printf ("Please enter a positive integer not less than 1 :\n");
        else if (input > 0)
            output *= input;
        if (output > 1000) {
            printf ("\nThe result is: %d", output);
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33096794_33097617_4_24
33096794_33097697_3_23
Title: How to get indexes alone from an array 
----------------------------------------

int main (void) {
    int x [] = {7, 7, 8, 8, 6, 9, 8, 7, 9};
    int n = sizeof (x) / sizeof (*x);
    int y [] = {7, 8, 9, 9, 8, 7, 7, 8, 9};
    int m = sizeof (y) / sizeof (*y);
    int index [10] [10];
    memset (index, - 1, sizeof (index));
    for (int i = n - 1; i >= 0; --i) {
        int j = 0;
        while (index[x[i]][j] >= 0)
            ++j;
        index[x[i]][j] = i;
    }
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < 10 && index[y[i]][j] >= 0; ++j) {
            printf ("%d", index [y [i]] [j]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int A [] = {7, 7, 8, 8, 6, 9, 8, 7, 9};
    for (int i = 0; i <= 9; i++) {
        int flag = 0;
        for (int j = 8; j >= 0; j--) {
            if (A[j] == i) {
                if (flag == 0)
                    printf ("%d:", i);
                flag = 1;
                printf (" %d", j);
            }
        }
        if (flag == 1)
            printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33096794_33097617_4_24
33096794_33098437_26_38
Title: How to get indexes alone from an array 
----------------------------------------

int main (void) {
    int x [] = {7, 7, 8, 8, 6, 9, 8, 7, 9};
    int n = sizeof (x) / sizeof (*x);
    int y [] = {7, 8, 9, 9, 8, 7, 7, 8, 9};
    int m = sizeof (y) / sizeof (*y);
    int index [10] [10];
    memset (index, - 1, sizeof (index));
    for (int i = n - 1; i >= 0; --i) {
        int j = 0;
        while (index[x[i]][j] >= 0)
            ++j;
        index[x[i]][j] = i;
    }
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < 10 && index[y[i]][j] >= 0; ++j) {
            printf ("%d", index [y [i]] [j]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    buildIndex (9, 9, 9);
    for (int k = 0; k < 9; k++)
        if (idx[k][8] != -1) {
            printf ("%d: ", k + 1);
            for (int l = 0; l < 9; l++)
                if (idx[k][l] != -1)
                    printf ("%d ", idx[k][l]);
            printf ("\n");
        }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33096794_33097697_3_23
33096794_33098437_26_38
Title: How to get indexes alone from an array 
----------------------------------------

int main () {
    int A [] = {7, 7, 8, 8, 6, 9, 8, 7, 9};
    for (int i = 0; i <= 9; i++) {
        int flag = 0;
        for (int j = 8; j >= 0; j--) {
            if (A[j] == i) {
                if (flag == 0)
                    printf ("%d:", i);
                flag = 1;
                printf (" %d", j);
            }
        }
        if (flag == 1)
            printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    buildIndex (9, 9, 9);
    for (int k = 0; k < 9; k++)
        if (idx[k][8] != -1) {
            printf ("%d: ", k + 1);
            for (int l = 0; l < 9; l++)
                if (idx[k][l] != -1)
                    printf ("%d ", idx[k][l]);
            printf ("\n");
        }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33102127_33102373_4_12
33102127_33102390_7_16
Title: Increment char arrays int values by 1 
----------------------------------------

int main (void) {
    char id [6] = "i0001";
    char a [5];
    int i;
    sscanf (id, "%[^1-9]%d", a, & i);
    i = i + 1;
    sprintf (id, "%s%d", a, i);
    printf ("%s", id);
}
----------------------------------------

int main (void) {
    char id [] = "i0001";
    printf ("before: %s\n", id);
    int digit = atoi (strtok (id, PREFIX));
    ++digit;
    snprintf (id, sizeof (id), "%s%04d", PREFIX, digit);
    printf ("after: %s\n", id);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33103052_33103132_1_24
33103052_33103297_1_29
Title: function returning a char (beginner) 
----------------------------------------

const char *BoolToString (bool prime, bool even) {
    if (prime == true && even == true) {
        return "is even and prime";
    }
    else if (prime == true && even == false) {
        return "is odd and prime";
    }
    else if (prime == false && even == true) {
        return "is even and not prime";
    }
    else if (prime == false && even == false) {
        return "is odd and prime";
    }
    else {
        return "error";
    }
}
----------------------------------------

const char *BoolToString (bool prime, bool even) {
    if (prime && even) {
        const char *result = "is even and prime";
        return result;
    }
    else if (prime && !even) {
        const char *result = "is odd and prime";
        return result;
    }
    else if (!prime && even) {
        const char *result = "is even and not prime";
        return result;
    }
    else if (!prime && !even) {
        const char *result = "is odd and prime";
        return result;
    }
    else {
        const char *result = "error";
        return result;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33118287_33118469_55_65
33118287_33119340_54_64
Title: Display function in Circular Linked List in C 
----------------------------------------

int main () {
    Insert_begin (0);
    Insert_begin (1);
    Insert_begin (2);
    Insert_begin (3);
    Insert_begin (4);
    Display ();
    return 0;
}
----------------------------------------

int main () {
    Insert_begin (0);
    Insert_begin (1);
    Insert_begin (2);
    Insert_begin (3);
    Insert_begin (4);
    Display ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33128405_33128537_1_29
33128405_33129734_1_14
Title: DFS to find all possible paths - Where am I going wrong? 
----------------------------------------

void dfs () {
    int i;
    for (i = 1; i <= nodecount; i++) {
        visited[i] = 0;
    }
    visited[item] = 1;
    push (item);
    while (top != 0) {
        pop ();
        for (i = 1; i <= nodecount; i++) {
            if (topo[item][i] == 1) {
                if (visited[i] == 0) {
                    int item_bak = item;
                    item = i;
                    visited[item] = 1;
                    push (item);
                    item = item_bak;
                }
            }
        }
    }
}
----------------------------------------

void dfs (int item) {
    int i;
    push (item);
    visited[item] = 1;
    pstack ();
    for (i = 1; i < nodecount; i++) {
        if ((nodes[item][i] == 1) && (visited[i] == 0)) {
            dfs (i);
            visited[i] = 0;
        }
    }
    pop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33137164_33137700_44_53
33137164_33151931_59_97
Title: 7-Segment display with printf and multidimensional array in C 
----------------------------------------

int main (void) {
    int a = 0;
    printf ("Enter a number:");
    scanf ("%d", & a);
    if (a >= 0 && a <= 9) {
        print_number (a);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char character_number = '\0';
    int a = 0;
    clear_digits_array ();
    printf ("Enter a number:");
    while ((character_number = getchar ()) != '\n') {
        int number = MAX_DIGITS;
        switch (character_number) {
        case '0' :
            number = 0;
            break;
        case '1' :
            number = 1;
            break;
        case '2' :
            number = 2;
            break;
        case '3' :
            number = 3;
            break;
        case '4' :
            number = 4;
            break;
        case '5' :
            number = 5;
            break;
        case '6' :
            number = 6;
            break;
        case '7' :
            number = 7;
            break;
        case '8' :
            number = 8;
            break;
        case '9' :
            number = 9;
            break;
        default :
            number = ' ';
        }
        if (a < MAX_DIGITS) {
            process_digit (number, a);
            a++;
        }
    }
    print_digits_array ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33137472_33137690_1_16
33137472_33140524_2_11
Title: Why (1.1-1.0)*10 isn't 1.0? 
----------------------------------------

int main (int argc, char **argv) {
    float x, y;
    x = 0.0;
    y = 0.0;
    x = 1.1 - 1.0;
    x = x * 10.0;
    x = x - 1.0;
    if (x == y)
        printf ("True");
    else
        printf ("False");
    return 0;
}
----------------------------------------

int main (void) {
    volatile double wpw = 1.1;
    volatile double one = 1.0;
    volatile double ten = 10.0;
    printf ("%.20e\n", wpw);
    printf ("%.20e\n", wpw - one);
    printf ("%.20e\n", (wpw - one) * ten);
    printf ("%.20e\n", (wpw - one) * ten - one);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33142971_33143048_1_11
33142971_33143212_1_17
Title: What mistake am I making in the function definition(C) 
----------------------------------------

int is_sorted (const int *a, int n) {
    assert (n >= 1);
    int k;
    for (k = 1; k < n; k++) {
        if (a[k - 1] > a[k])
            return 0;
    }
    return 1;
}
----------------------------------------

int is_sorted (const int *a, int n) {
    assert (n >= 1);
    if (n == 1)
        return 1;
    int k, result = 1;
    for (k = 0; k < n - 1; k++) {
        if (a[k] > a[k + 1]) {
            result = 0;
            break;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33150587_33348685_2_24
33150587_35774792_6_28
Title: "Find the Biggest Number in C BUT with characters" 
----------------------------------------

int main () {
    int i;
    int maxAge = 0, maxName = -1;
    int numberOfPeople = 0;
    scanf ("%d", & numberOfPeople);
    char peopleName [numberOfPeople] [20], peopleAge [numberOfPeople];
    for (i = 0; i < numberOfPeople; i++) {
        printf ("Name & Age %d :", i + 1);
        scanf ("%s", & peopleName [i]);
        scanf ("%d", & peopleAge [i]);
        if (peopleAge[i] > maxAge) {
            maxAge = i;
            maxName = i;
        }
    }
    printf ("%s %d", peopleName [maxName], peopleAge [maxAge]);
}
----------------------------------------

int main (void) {
    char peopleName [MAX_PEOPLE] [MAX_NAME];
    int peopleAge [MAX_PEOPLE];
    int n, i;
    int maxAge = 0, maxName = -1;
    puts ("How many people do you want to input?");
    scanf ("%d%*c", & n);
    if (n > MAX_PEOPLE)
        puts ("Too many people!");
    for (i = 0; i < n; i++) {
        printf ("Name & Age %d :", i + 1);
        scanf (" %s", peopleName [i]);
        scanf (" %d", & peopleAge [i]);
        if (peopleAge[i] > maxAge) {
            maxAge = peopleAge[i];
            maxName = i;
        }
    }
    printf ("%s %d", peopleName [maxName], maxAge);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33152082_33152228_2_11
33152082_33152408_3_15
Title: Display matrix in C 
----------------------------------------

int main () {
    int i, j;
    int x [2] [2] = {{1, 2}, {3, 4}};
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++) {
            printf (" %d", x [i] [j]);
        }
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    int matrix [2] [2] = {{1, 2}, {3, 4}};
    size_t i, j;
    for (i = 0; i < sizeof (matrix) / sizeof (matrix[0]); i++) {
        for (j = 0; j < sizeof (matrix[i]) / sizeof (matrix[i][0]); j++) {
            if (j > 0)
                putchar (' ');
            printf ("%d", matrix [i] [j]);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33152150_33152275_3_29
33152150_33153523_3_31
Title: "Find Biggest Number in C by N number of inputs" 
----------------------------------------

int main (void) {
    char (*peopleName) [20];
    int *peopleAge;
    int i;
    int maxAge = 0, maxName = -1;
    int dataNum;
    printf ("How many people? :");
    if (scanf ("%d", &dataNum) != 1)
        return 1;
    peopleName = malloc (sizeof (char [20]) * dataNum);
    peopleAge = malloc (sizeof (int) * dataNum);
    for (i = 0; i < dataNum; i++) {
        printf ("Name & Age %d :", i + 1);
        scanf ("%s", peopleName [i]);
        scanf ("%d", & peopleAge [i]);
        if (peopleAge[i] > maxAge) {
            maxAge = peopleAge[i];
            maxName = i;
        }
    }
    printf ("%s %d", peopleName [maxName], peopleAge [maxName]);
    free (peopleName);
    free (peopleAge);
    return 0;
}
----------------------------------------

int main (void) {
    char oldest [80] = "no-one";
    int max_age = -1;
    int count = 0;
    puts ("Enter name & age on each line, blank line to stop:");
    while (1) {
        char line [80];
        char name [80];
        int age;
        if (fgets (line, sizeof (line), stdin) == NULL)
            break;
        if (sscanf (line, "%s %d", name, &age) < 2)
            break;
        if (age > max_age) {
            strcpy (oldest, name);
            max_age = age;
        }
        count++;
    }
    printf ("The oldest of these %d people is %s, aged %d.\n", count, oldest, max_age);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33174642_33174679_1_22
33174642_33176576_4_28
Title: i don't know why it appears this mistake 
----------------------------------------

int main (int argc, char **argv) {
    int i, j, columna, n, m;
    char sala_cine [X] [Y] = {{' ', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {'1', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'2', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'3', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'4', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'5', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'6', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'7', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'8', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}};
    for (i = 0; i < X; i++) {
        for (j = 0; j < Y; j++)
            printf ("%c", sala_cine[i][j]);
        printf ("\n");
    }
    return (EXIT_SUCCESS);
}
----------------------------------------

int main (void) {
    int i, j;
    char (*sala_cine) [Y];
    sala_cine = (char [X] [Y]) {{' ', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {'1', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'2', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'3', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'4', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'5', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'6', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'7', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}, {'8', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}};
    for (i = 0; i < X; i++) {
        for (j = 0; j < Y; j++)
            printf ("%c", sala_cine[i][j]);
        printf ("\n");
    }
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33182391_33183072_9_32
33182391_33183189_9_24
Title: How do i print out my functions in main in C? 
----------------------------------------

int main (void) {
    int n1 = 0, n2 = 0, sum = 0, prod = 0;
    n1 = 1, n2 = 2;
    sum = CalculateSum (n1, n2);
    printf (" calculatesum value %d\n", sum);
    n1 = 3, n2 = 4;
    prod = CalculateProduct (n1, n2);
    printf (" calc product  %d\n", prod);
    n1 = 5, n2 = 6;
    CalculateBoth (n1, n2, & sum, & prod);
    printf (" calc both sumPtr   %d\n", sum);
    printf (" calc both prodPtr  %d\n", prod);
    return 0;
}
----------------------------------------

int main (void) {
    int x = 5, y = 6, prod, sum;
    sum = CalculateSum (x, y);
    prod = CalulateProduct (x, y);
    printf ("sum=%d Product=%d", x, y);
    printf ("now calulate both at once");
    x = 4;
    y = 3;
    CalculateBoth (x, y, & sum, & prod);
    printf ("%d %d", sum, prod);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33189895_33190038_4_20
33189895_33190067_56_75
Title: Finding a string between strings in efficient way 
----------------------------------------

int main (void) {
    char meida [] = "+IPD,0,206:GET /setWifi:home:0545881255 HTTP/1.1  Host: 192.168.4.1";
    char *keyworda = "GET /";
    char *keywordb = " HTTP/";
    char *aptr, *bptr;
    aptr = strstr (meida, keyworda);
    if (aptr != NULL) {
        aptr += strlen (keyworda);
        bptr = strstr (aptr, keywordb);
        if (bptr != NULL) {
            *bptr = '\0';
            printf ("%s\n", aptr);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char *meida = "+IPD,0,206:GET /setWifi:home:0545881255 HTTP/1.1  Host: 192.168.4.1";
    char writeable [] = "+IPD,0,206:GET /setWifi:home:0545881255 HTTP/1.1  Host: 192.168.4.1";
    char *substr;
    substr = substring_enclosed_const (meida, "GET /", " HTTP");
    if (substr != NULL) {
        puts (substr);
        free (substr);
    }
    substr = substring_enclosed (writeable, "GET /", " HTTP");
    if (substr != NULL)
        puts (substr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33198186_33198220_3_22
33198186_33198457_3_15
Title: How to loop an array of integers and save both positive and negative into another array? 
----------------------------------------

int main (void) {
    int n = 3;
    int arr [3] = {1, 2, 3};
    int result [6];
    int i;
    for (i = 0; i < n; i++) {
        result[i * 2] = arr[i];
        result[i * 2 + 1] = -arr[i];
    }
    for (i = 0; i < n * 2; i++) {
        printf ("%d\n", result [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n = 3;
    int arr [3] = {1, 2, 3};
    int i;
    for (i = 0; i < n; i++) {
        printf ("%d ", arr [i]);
        printf ("%d ", - 1 * arr [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33199627_33199797_3_27
33199627_33200080_3_38
Title: "Prime factorization changing output." 
----------------------------------------

int main () {
    int num, i, j, count = 0;
    int a = 0;
    printf ("Please input a number: ");
    scanf ("%d", & num);
    printf ("The Prime Factorization: ");
    for (i = 2; i <= num; i++) {
        count = 0;
        a = 0;
        while (num % i == 0) {
            a = 1;
            ++count;
            num /= i;
        }
        if (a == 1) {
            printf ("%d ^ %d *", i, count);
        }
    }
    if (a == 0) {
        printf ("%ld ", num);
    }
    return 0;
}
----------------------------------------

int main (void) {
    unsigned int num, i, count;
    int a = 0;
    printf ("Please input a number: ");
    scanf ("%d", & num);
    printf ("The Prime Factorization: ");
    i = 2;
    while (num > 1) {
        if (num % i == 0) {
            a = 1;
            count = 1;
            num /= i;
            while (num % i == 0) {
                count++;
                num /= i;
            }
            printf ("%ld", i);
            if (count > 1) {
                printf (" ^ %ld", count);
            }
            if (num > 1) {
                printf (" * ");
            }
        }
        i++;
    }
    if (a == 0) {
        printf ("%ld ", num);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33199_1774711_4_19
33199_784683_1_12
Title: "What's the ""condition"" in C interview test?" 
----------------------------------------

int main () {
    jmp_buf env;
    if (!setjmp (env)) {
        printf ("if executed\n");
        longjmp (env, 1);
    }
    else {
        printf ("else executed\n");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc == 2 || main (2, NULL)) {
        printf ("Hello ");
    }
    else {
        printf ("World\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33206194_33206555_13_37
33206194_33206856_11_51
Title: Printing random 2-dimensional array though a user-defined function in C 
----------------------------------------

int calc_results (int a [], int n) {
    int i, j, maximum = MIN_TEMP, minimum = MAX_TEMP, average, sum;
    float avg;
    printf ("Temperature conditions on October 17th, 2015:\n");
    for (int i = 0; i < n; ++i) {
        if (a[i] > maximum)
            maximum = a[i];
        if (a[i] < minimum)
            minimum = a[i];
        sum += a[i];
        printf ("%d\t%d\n", i, a [i]);
    }
    printf ("Maximum Temperature for the day: %d\n", maximum);
    printf ("Minimum Temperature for the day: %d\n", minimum);
    avg = (float) sum / n;
    printf ("Average Temperature for the day: %f\n", avg);
    return 0;
}
----------------------------------------

void calc_results (int *a, int n) {
    int i, maximum, minimum, average, sum;
    float avg = 0.0;
    i = average = sum = 0;
    maximum = INT_MIN;
    minimum = INT_MAX;
    printf ("Temperature conditions on October 17th, 2015:\n" "Time of Day     Temperature in degrees F\n");
    for (i = 0; i < n; i++) {
        if (i < 24)
            printf ("%-16d%d\n", i, a[i]);
        else
            printf ("%-16s%d\n", "Midnight", a[i]);
        if (a[i] > maximum)
            maximum = a[i];
        if (a[i] < minimum)
            minimum = a[i];
        sum += a[i];
    }
    avg = (float) sum / 25;
    printf ("Maximum Temperature for the day: %d\n", maximum);
    printf ("Minimum Temperature for the day: %d\n", minimum);
    printf ("Average Temperature for the day: %f\n", avg);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33206194_33206555_40_57
33206194_33206856_53_69
Title: Printing random 2-dimensional array though a user-defined function in C 
----------------------------------------

int main () {
    srand (time (NULL));
    int average, i;
    int temp [25];
    for (i = 0; i < 25; i++) {
        temp[i] = get_value ();
    }
    calc_results (temp, i);
    return 0;
}
----------------------------------------

int main (void) {
    int i = 0;
    int temp [25] = {0};
    srand (time (NULL));
    for (i = 0; i < 25; i++)
        temp[i] = get_value ();
    calc_results (temp, i);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33213273_33213796_5_26
33213273_33213847_5_18
Title: how to extract a string using two forward slashes 
----------------------------------------

int main () {
    char *str = "/709/nviTemp1";
    char *delims = "/";
    char *strCopy;
    char *tmpResult;
    strCopy = strdup (str);
    tmpResult = strtok (strCopy, delims);
    char *finalResult = (char *) calloc (strlen (tmpResult) +3, 1);
    strcat (finalResult, "/");
    strcat (finalResult, tmpResult);
    strcat (finalResult, "/");
    free (strCopy);
    printf ("%s", finalResult);
}
----------------------------------------

int main (int argc, char *argv []) {
    char *tok;
    char text [] = "/709/nvitemp1/d/s/";
    if ((tok = strchr (text, '/')) != NULL) {
        tok++;
        if ((tok = strchr (tok, '/')) != NULL) {
            tok++;
            *tok = '\0';
            printf ("%s\n", text);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33217793_33217890_4_12
33217793_33219437_22_39
Title: Can you lend me a hand with this word counting code? 
----------------------------------------

int count_p (char sentence [100]) {
    int i, m = 1;
    for (i = 0; i < 100 && sentence[i] != '\0'; i++) {
        if (sentence[i] == ' ') {
            m += 1;
        }
    }
    return (m);
}
----------------------------------------

int count_p (char *sentence) {
    int len = strlen (sentence);
    int x = 0, wordCount = 0;
    for (int n = 0; n < len; n++) {
        x++;
        if (sentence[n] == ' ')
            x = 0;
        if (x == 1)
            wordCount++;
    }
    return wordCount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3321833_3322676_2_12
3321833_3325354_7_32
Title: Side effects of exit() without exiting? 
----------------------------------------

int main () {
    const char *command = "whatever";
    int status = system (command);
    while (status == 9999) {
        command =...;
        status = system (command);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int pid, status;
fork_entry :
    pid = fork ();
    if (pid == 0) {
    }
    else if (pid > 0) {
        wait (& status);
        if (WIFEXITED (status)) {
            if (WEXITSTATUS (status) == OUT_OF_MEMORY) {
                goto fork_entry;
            }
        }
    }
    else {
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33219193_33219734_1_17
33219193_33219896_1_19
Title: I'm trying to use strcmp() to sort a string array in C 
----------------------------------------

void sort (char *strStates []) {
    int x, y;
    for (x = 0; x < 3; x++) {
        for (y = x + 1; y < 4; y++) {
            if ((strcmp (strStates[x], strStates[y])) > 0) {
                char *tmp = strStates[x];
                strStates[x] = strStates[y];
                strStates[y] = tmp;
            }
        }
    }
}
----------------------------------------

void sort (char **unsortedStrings) {
    int x;
    int y;
    for (x = 0; x < 3; x++) {
        for (y = x + 1; y < 4; y++) {
            if ((strcmp (unsortedStrings[x], unsortedStrings[y])) > 0) {
                char *tmp = unsortedStrings[x];
                unsortedStrings[x] = unsortedStrings[y];
                unsortedStrings[y] = tmp;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33222686_33223631_13_26
33222686_33225567_1_16
Title: Initializing function in LL 
----------------------------------------

bear_t *create_bear (void) {
    bear_t *bear = (bear_t *) malloc (sizeof (bear_t));
    bear->name = "bear";
    bear->eat = &eat_fish;
    bear->drink = &drink_water;
    bear->sleep = &sleep_lots;
    bear->live = &live;
    bear->study = NULL;
    bear->dtor = &delete_bear;
    bear->health = 0;
    bear->happiness = 0;
    return bear;
}
----------------------------------------

bear_t *create_bear (void) {
    bear_t const default_bear = {
        .eat = eat_fish
        .drink = drink_water
        .sleep = sleep_lots
        .live = live_the_life
        .dtor = delete_bear
        .name = "bear"
    };
    bear_t *new = malloc (sizeof *new);
    *new = default_bear;
    return new;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33239705_33239971_1_22
33239705_33520026_6_37
Title: strange characters printed when concatenate strings with memcpy 
----------------------------------------

bool execc (char *cmd, char *r) {
    FILE *fp;
    char t1 [1024];
    fp = popen (cmd, "r");
    if (fp == NULL) {
        return false;
    }
    while (fgets (t1, sizeof (t1), fp) != NULL) {
        memcpy (r, t1, strlen (t1));
        r = &r[strlen (t1)];
        r[0] = '\0';
    }
    pclose (fp);
    return true;
}
----------------------------------------

bool execc (char *cmd, char **value) {
    FILE *fp;
    char buffer [128];
    char *tmp;
    int size;
    fp = popen (cmd, "r");
    if (fp == NULL) {
        return false;
    }
    while (size = fread (buffer, 1, sizeof (buffer), fp)) {
        buffer[size] = '\0';
        if (*value == NULL) {
            *value = strdup (buffer);
        }
        else {
            tmp = *value;
            *value = (char *) calloc (strlen (tmp) +strlen (buffer), sizeof (char));
            memcpy (* value, tmp, strlen (tmp));
            memcpy (* value + strlen (tmp), buffer, strlen (buffer));
            free (tmp);
        }
    }
    pclose (fp);
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33257028_33257838_38_57
33257028_33260205_1_90
Title: splitting a string into a 3d array 
----------------------------------------

int main () {
    char buff [] = "0,1,2,4444444444;5,6,7,8888888888;.9,10,11,12121212;.";
    PrintLevel (0);
    char *p = buff;
    char c;
    int ret;
    int lvl;
    while (c = *p) {
        lvl = (c == ',') ? 1 : ((c == ';') ? 2 : ((c == '.') ? 3 : 0));
        if (lvl)
            PrintLevel (lvl);
        else
            addChar (c);
        p++;
    }
    PrintLevel (lvl);
}
----------------------------------------

int main (void) {
    char *data = "1,2,3,1445303228;4,5,6,1445303228;.7,8,9,1445303273;.";
    char *p;
    int size = DEFAULT_SIZE;
    int nb_element = 0;
    int s1 = 0;
    int s2 = 0;
    int cur1 = 0;
    int cur2 = 0;
    int cur3 = 0;
    int *d = malloc (sizeof (int) * DEFAULT_SIZE);
    int ***d3;
    if (!d) {
        return -1;
    }
    p = data;
    while (*p) {
        if (nb_element == size) {
            size *= 2;
            d = realloc (d, size * sizeof (int));
            if (!d) {
                return -1;
            }
        }
        d[nb_element++] = strtol (p, &p, 10);
        switch (*p) {
        case ',' :
            cur1++;
            if (s1 && cur1 > s1) {
                fprintf (stderr, "Too many element for %d, %d:" " get %d, expect %d\n", cur2, cur3, cur1, s1);
                return -1;
            }
            break;
        case ';' :
            cur1++;
            cur2++;
            if (s1 == 0) {
                s1 = cur1;
            }
            cur1 = 0;
            if (s2 && cur2 > s2) {
                fprintf (stderr, "Too many element for %d:" " get %d, expect %d\n", cur3, cur2, s2);
                return -1;
            }
            break;
        case '.' :
        dot :
            cur2++;
            cur3++;
            if (s2 == 0) {
                s2 = cur2;
            }
            cur2 = 0;
            cur1 = 0;
            break;
        }
        p++;
        if (*p == '.')
            goto dot;
    }
    cur3--;
    d3 = malloc (sizeof (int **) * cur3);
    for (int i = 0; i < cur3; i++) {
        d3[i] = malloc (sizeof (int *) * s2);
        for (int j = 0; j < s2; j++) {
            d3[i][j] = malloc (sizeof (int) * s1);
            for (int k = 0; k < s1; k++) {
                d3[i][j][k] = d[i * s2 + j * s1 + k];
            }
        }
    }
    free (d);
    for (int i = 0; i < cur3; i++) {
        for (int j = 0; j < s2; j++) {
            for (int k = 0; k < s1; k++) {
                fprintf (stdout, "d[%d][%d][%d] = %d\n", i, j, k, d3 [i] [j] [k]);
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33257028_33257838_38_57
33257028_33265128_97_131
Title: splitting a string into a 3d array 
----------------------------------------

int main () {
    char buff [] = "0,1,2,4444444444;5,6,7,8888888888;.9,10,11,12121212;.";
    PrintLevel (0);
    char *p = buff;
    char c;
    int ret;
    int lvl;
    while (c = *p) {
        lvl = (c == ',') ? 1 : ((c == ';') ? 2 : ((c == '.') ? 3 : 0));
        if (lvl)
            PrintLevel (lvl);
        else
            addChar (c);
        p++;
    }
    PrintLevel (lvl);
}
----------------------------------------

int main (void) {
    struct DATA **pdata, *data;
    char buff [] = "1,2,3,1445303228;4,5,6,1445303228;.7,8,9,1445303273;.";
    char *p = buff;
    unsigned short c1, c2;
    countArrBoudaries (buff, & c1, & c2);
    pdata = (struct DATA **) calloc ((c2 * c1), sizeof (pdata));
    if (pdata) {
        for (int i = 0; i < c1; i++)
            for (int j = 0; j < c2; j++)
                pdata[i + (j * c1)] = ParseString (&p);
        for (int i = 0; i < c1; i++)
            for (int j = 0; j < c2; j++) {
                data = pdata[i + (j * c1)];
                if (data) {
                    printf ("data[%u][%u]={%d,%d,%d,%u};\n", i, j, data -> a, data -> b, data -> c, data -> d);
                }
                else {
                    printf ("data[%u][%u]=NULL;\n", i, j);
                }
            }
        for (int i = 0; i < (c1 * c2); i++)
            free (pdata[i]);
        free (pdata);
    }
    printf ("\n\nDONE\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33257028_33260205_1_90
33257028_33265128_97_131
Title: splitting a string into a 3d array 
----------------------------------------

int main (void) {
    char *data = "1,2,3,1445303228;4,5,6,1445303228;.7,8,9,1445303273;.";
    char *p;
    int size = DEFAULT_SIZE;
    int nb_element = 0;
    int s1 = 0;
    int s2 = 0;
    int cur1 = 0;
    int cur2 = 0;
    int cur3 = 0;
    int *d = malloc (sizeof (int) * DEFAULT_SIZE);
    int ***d3;
    if (!d) {
        return -1;
    }
    p = data;
    while (*p) {
        if (nb_element == size) {
            size *= 2;
            d = realloc (d, size * sizeof (int));
            if (!d) {
                return -1;
            }
        }
        d[nb_element++] = strtol (p, &p, 10);
        switch (*p) {
        case ',' :
            cur1++;
            if (s1 && cur1 > s1) {
                fprintf (stderr, "Too many element for %d, %d:" " get %d, expect %d\n", cur2, cur3, cur1, s1);
                return -1;
            }
            break;
        case ';' :
            cur1++;
            cur2++;
            if (s1 == 0) {
                s1 = cur1;
            }
            cur1 = 0;
            if (s2 && cur2 > s2) {
                fprintf (stderr, "Too many element for %d:" " get %d, expect %d\n", cur3, cur2, s2);
                return -1;
            }
            break;
        case '.' :
        dot :
            cur2++;
            cur3++;
            if (s2 == 0) {
                s2 = cur2;
            }
            cur2 = 0;
            cur1 = 0;
            break;
        }
        p++;
        if (*p == '.')
            goto dot;
    }
    cur3--;
    d3 = malloc (sizeof (int **) * cur3);
    for (int i = 0; i < cur3; i++) {
        d3[i] = malloc (sizeof (int *) * s2);
        for (int j = 0; j < s2; j++) {
            d3[i][j] = malloc (sizeof (int) * s1);
            for (int k = 0; k < s1; k++) {
                d3[i][j][k] = d[i * s2 + j * s1 + k];
            }
        }
    }
    free (d);
    for (int i = 0; i < cur3; i++) {
        for (int j = 0; j < s2; j++) {
            for (int k = 0; k < s1; k++) {
                fprintf (stdout, "d[%d][%d][%d] = %d\n", i, j, k, d3 [i] [j] [k]);
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct DATA **pdata, *data;
    char buff [] = "1,2,3,1445303228;4,5,6,1445303228;.7,8,9,1445303273;.";
    char *p = buff;
    unsigned short c1, c2;
    countArrBoudaries (buff, & c1, & c2);
    pdata = (struct DATA **) calloc ((c2 * c1), sizeof (pdata));
    if (pdata) {
        for (int i = 0; i < c1; i++)
            for (int j = 0; j < c2; j++)
                pdata[i + (j * c1)] = ParseString (&p);
        for (int i = 0; i < c1; i++)
            for (int j = 0; j < c2; j++) {
                data = pdata[i + (j * c1)];
                if (data) {
                    printf ("data[%u][%u]={%d,%d,%d,%u};\n", i, j, data -> a, data -> b, data -> c, data -> d);
                }
                else {
                    printf ("data[%u][%u]=NULL;\n", i, j);
                }
            }
        for (int i = 0; i < (c1 * c2); i++)
            free (pdata[i]);
        free (pdata);
    }
    printf ("\n\nDONE\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33259430_33259781_1_25
33259430_33259809_16_37
Title: how to return two values in one function without using struct? 
----------------------------------------

double calculate (int ar [], int npts, int *gtr) {
    double total = 0;
    int i = 0;
    double average;
    for (i = 0; i < npts; i++) {
        total = total + ar[i];
    }
    average = total / npts;
    return average;
    for (i = 0; i < npts; i++) {
        if (average < ar[i]) {
            *gtr++;
        }
    }
    return avergage;
}
----------------------------------------

double calculate (int ar [], int npts, int *gtr) {
    double total = 0, average;
    int i = 0;
    for (i = 0; i < npts; i++) {
        total = total + ar[i];
    }
    average = total / npts;
    for (i = 0; i < npts; i++) {
        if (average < ar[i]) {
            *gtr += 1;
        }
    }
    return average;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33266709_33267301_3_16
33266709_33267802_3_25
Title: How do I convert double to unsigned for currency? 
----------------------------------------

int main (void) {
    FILE *inf;
    unsigned cents;
    double money;
    if ((inf = fopen ("test.txt", "r")) == NULL)
        return 1;
    while (fscanf (inf, "%lf", &money) == 1) {
        cents = (unsigned) (money * 100.0 + 0.1);
        printf ("File %f, cents %u\n", money, cents);
    }
    fclose (inf);
    return 0;
}
----------------------------------------

int main (int argc, char *argv [argc]) {
    unsigned dollars = 0;
    char dimes = 0;
    char pennies = 0;
    unsigned fixed = 0;
    FILE *values;
    values = fopen ("values", "r");
    while (fscanf (values, "%u.%c%c%*i\n", &dollars, &dimes, &pennies) != EOF) {
        dimes -= '0';
        pennies -= '0';
        fixed = (dollars * 100) + (dimes * 10) + pennies;
        printf ("$%u.%u%u -> %u (cents)\n", dollars, dimes, pennies, fixed);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33284072_33284256_3_15
33284072_33284393_5_15
Title: C language or programminng 
----------------------------------------

int main (int argc, char **argv) {
    for (int row = 1; row <= 7; row++) {
        for (int column = 1; column <= 10; column++) {
            if (column != row + 1)
                printf ("*");
            else
                printf (" ");
        }
        printf ("\n");
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    char a [11];
    for (int i = 0; i < 8; i++) {
        memset (a, '*', (sizeof a) - 1);
        a[i + 1] = ' ';
        printf ("%s\n", a);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33284813_33285083_1_14
33284813_33285495_1_26
Title: Exit the loop when I press enter (C-programming) 
----------------------------------------

int main (int ac, char **av, char **env) {
    char *name_term;
    struct termios term;
    if ((name_term = getenv ("TERM")) == NULL)
        return (-1);
    if (tgetent (NULL, &name_term) == ERR)
        return (-1);
    if (tcgetattr (0, term) == -1)
        return (-1);
    grab_key ();
    return (0);
}
----------------------------------------

int main (int argc, char *argv []) {
    int i = 0;
    char *text = malloc (sizeof (char));
    char symbol;
    char *aux;
    while (1) {
        symbol = getchar ();
        if (symbol == 13) {
            break;
        }
        text[i] = symbol;
        if ((aux = (char *) realloc (text, sizeof (char) * (i + 1))) == NULL) {
            return -1;
        }
        text = aux;
        i++;
    }
    text[i] = '\0';
    printf ("%s", text);
    free (text);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33288906_33288955_3_23
33288906_33289229_3_17
Title: Show the biggest number entered using while loop in C? 
----------------------------------------

int main (void) {
    int num1;
    int biggestValue = 0;
    printf ("Enter a number: ");
    scanf ("%d", & num1);
    while (num1 != 0) {
        if (biggestValue < num1) {
            biggestValue = num1;
        }
        printf ("Enter a number (0 to exit): ");
        scanf ("%d", & num1);
    }
    printf ("Biggest value is: %d \n", biggestValue);
}
----------------------------------------

int main (void) {
    int biggestValue = INT_MIN;
    const char *prompt = "Enter a number: ";
    for (;;) {
        fputs (prompt, stdout);
        int num1;
        if (scanf ("%d", &num1) != 1)
            break;
        if (num1 > biggestValue) {
            biggestValue = num1;
        }
        prompt = "Enter a number (or 'q' to exit): ";
    }
    printf ("Biggest value is: %d \n", biggestValue);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33288906_33289229_3_17
33288906_33289265_3_21
Title: Show the biggest number entered using while loop in C? 
----------------------------------------

int main (void) {
    int biggestValue = INT_MIN;
    const char *prompt = "Enter a number: ";
    for (;;) {
        fputs (prompt, stdout);
        int num1;
        if (scanf ("%d", &num1) != 1)
            break;
        if (num1 > biggestValue) {
            biggestValue = num1;
        }
        prompt = "Enter a number (or 'q' to exit): ";
    }
    printf ("Biggest value is: %d \n", biggestValue);
    return 0;
}
----------------------------------------

int main (void) {
    int num1;
    int biggestValue = 0;
    while (num1 != 0) {
        printf ("Enter a number (0 to exit): ");
        scanf ("%d", & num1);
        if (biggestValue < num1) {
            biggestValue = num1;
        }
    }
    printf ("Biggest value is: %d \n", biggestValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33289536_33289626_6_19
33289536_33289954_1_21
Title: Segmentation fault - Strtok - Linux C 
----------------------------------------

int dataCommand (char command [], char *data []) {
    char *ch;
    printf ("Split \"%s\"\n", command);
    int i = 0;
    ch = strtok (command, "_");
    while (ch != NULL) {
        data[i++] = ch;
        printf ("Valor ch Salida: %s\n", ch);
        ch = strtok (NULL, "_");
    }
    printf ("dataCommand END");
    return 0;
}
----------------------------------------

int dataCommand (char *command, char *data []) {
    char *ch;
    int i = 0;
    while (1) {
        ch = strtok (command, "_");
        command = NULL;
        if (ch == NULL)
            break;
        data[i++] = ch;
        printf ("Valor ch Salida: %s\n", ch);
    }
    printf ("dataCommand END\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33289536_33289635_1_13
33289536_33289954_1_21
Title: Segmentation fault - Strtok - Linux C 
----------------------------------------

int dataCommand (char command [], char *data []) {
    char *ch;
    printf ("Split \"%s\"\n", command);
    int i = 0;
    ch = strtok (command, "_");
    while (ch != NULL) {
        data[i++] = ch;
        printf ("Valor ch Salida: %s\n", ch);
        ch = strtok (NULL, "_");
    }
    printf ("dataCommand END");
    return 0;
}
----------------------------------------

int dataCommand (char *command, char *data []) {
    char *ch;
    int i = 0;
    while (1) {
        ch = strtok (command, "_");
        command = NULL;
        if (ch == NULL)
            break;
        data[i++] = ch;
        printf ("Valor ch Salida: %s\n", ch);
    }
    printf ("dataCommand END\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33325814_33326210_18_46
33325814_33326483_7_23
Title: How to loop generate random 256bit hex in c or c++? 
----------------------------------------

int main (void) {
    char str [1024];
    gmp_randstate_t state;
    mpz_t low, high;
    mpz_t ret;
    gmp_randinit_default (state);
    mpz_init (ret);
    mpz_init_set_str (low, "F", 16);
    mpz_init_set_str (high, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140", 16);
    for (;;) {
        randint (ret, state, low, high);
        str[0] = '0';
        str[1] = 'x';
        mpz_get_str (str + 2, 16, ret);
        if (str[0] != '\0' && str[1] != '\0') {
            int i;
            for (i = 2; i < 66 && str[i] != '\0'; i++)
                putchar (tolower (str[i]));
        }
        putchar ('\n');
    }
}
----------------------------------------

int main (void) {
    char cStrHex [(StringLength + 1)] = {0};
    srand ((unsigned int) time (0));
    int i = 0;
    for (; i < StringLength; i++) {
        sprintf (cStrHex + i, "%x", rand () % 16);
    }
    printf ("%s\n", cStrHex);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33328908_33328956_24_37
33328908_33329331_24_40
Title: Infinite Loop when counting with an array [C] 
----------------------------------------

int word_count (char str []) {
    int i = 0, word = 1;
    while (str[i] != '\0') {
        if ((isspace (str[i]))) {
            word++;
        }
        i++;
    }
    return word;
}
----------------------------------------

size_t word_count (const char s []) {
    size_t words = 0;
    while (*s != '\0') {
        while (isspace ((unsigned char) *s))
            ++s;
        if (*s != '\0')
            ++words;
        while (*s != '\0' && !isspace ((unsigned char) *s))
            ++s;
    }
    return words;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33328908_33328956_24_37
33328908_33329355_15_23
Title: Infinite Loop when counting with an array [C] 
----------------------------------------

int word_count (char str []) {
    int i = 0, word = 1;
    while (str[i] != '\0') {
        if ((isspace (str[i]))) {
            word++;
        }
        i++;
    }
    return word;
}
----------------------------------------

int word_count (char str []) {
    char *p = str;
    int word = 0;
    while (*p != '\0') {
        if ((isspace (*p)))
            word++;
        p++;
    }
    return word;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33328908_33329331_24_40
33328908_33329355_15_23
Title: Infinite Loop when counting with an array [C] 
----------------------------------------

size_t word_count (const char s []) {
    size_t words = 0;
    while (*s != '\0') {
        while (isspace ((unsigned char) *s))
            ++s;
        if (*s != '\0')
            ++words;
        while (*s != '\0' && !isspace ((unsigned char) *s))
            ++s;
    }
    return words;
}
----------------------------------------

int word_count (char str []) {
    char *p = str;
    int word = 0;
    while (*p != '\0') {
        if ((isspace (*p)))
            word++;
        p++;
    }
    return word;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33352418_33352834_1_27
33352418_33352911_47_64
Title: Check to see if the diagonal wins in tic tac toe 
----------------------------------------

int hasWonDiagonal (char board [BOARD_SIZE] [BOARD_SIZE], char mark) {
    int match = 1;
    int won = 0;
    int row = 0;
    for (row = 0; row < BOARD_SIZE && !won; row++) {
        if (board[row][row] != mark) {
            match = 0;
        }
    }
    if (match != 1) {
        int col = BOARD_SIZE - 1;
        for (row = 0; row < BOARD_SIZE && !won; row++, col--) {
            if (board[row][col] != mark) {
                match = 0;
            }
        }
    }
    won = match;
    return won;
}
----------------------------------------

int hasWonDiagonal (char board [BOARD_SIZE] [BOARD_SIZE], char mark) {
    int won = 0;
    int i = 0;
    while (i < BOARD_SIZE && board[i][i] == mark)
        ++i;
    won = i == BOARD_SIZE;
    if (!won) {
        i = 0;
        while (i < BOARD_SIZE && board[i][BOARD_SIZE - i - 1] == mark)
            ++i;
        won = i == BOARD_SIZE;
    }
    return won;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33355563_33355802_3_29
33355563_33355968_5_23
Title: Echoing Standard input to Standard Output 
----------------------------------------

int main () {
    int exit = 0, i = 0, newline = 1;
    printf ("Enter your text: \n");
    while (!exit) {
        int ch = getc (stdin);
        if (newline) {
            printf ("\n%d\t", ++ i);
            newline = 0;
        }
        switch (ch) {
        case '\n' :
            newline = 1;
            printf ("\n");
            break;
        case EOF :
            printf ("\n");
            exit = 1;
            break;
        default :
            printf ("%c", (char) ch);
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    size_t no = 0;
    bool line_top = true;
    printf ("Enter your text: \n");
    while (1) {
        int ch = fgetc (stdin);
        if (ch == EOF)
            break;
        if (line_top)
            printf ("%zu ", ++no);
        line_top = (ch == '\n');
        fputc (ch, stdout);
    }
    fflush (stdout);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33355563_33355802_3_29
33355563_33359763_2_12
Title: Echoing Standard input to Standard Output 
----------------------------------------

int main () {
    int exit = 0, i = 0, newline = 1;
    printf ("Enter your text: \n");
    while (!exit) {
        int ch = getc (stdin);
        if (newline) {
            printf ("\n%d\t", ++ i);
            newline = 0;
        }
        switch (ch) {
        case '\n' :
            newline = 1;
            printf ("\n");
            break;
        case EOF :
            printf ("\n");
            exit = 1;
            break;
        default :
            printf ("%c", (char) ch);
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char line [1000];
    int lineno = 0;
    while ((fgets (line, 1000, stdin)) != NULL) {
        lineno++;
        printf ("%d  ", lineno);
        fputs (line, stdout);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33355563_33355802_3_29
33355563_33370537_4_14
Title: Echoing Standard input to Standard Output 
----------------------------------------

int main () {
    int exit = 0, i = 0, newline = 1;
    printf ("Enter your text: \n");
    while (!exit) {
        int ch = getc (stdin);
        if (newline) {
            printf ("\n%d\t", ++ i);
            newline = 0;
        }
        switch (ch) {
        case '\n' :
            newline = 1;
            printf ("\n");
            break;
        case EOF :
            printf ("\n");
            exit = 1;
            break;
        default :
            printf ("%c", (char) ch);
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    unsigned long long line_number = 0;
    int ch;
    while ((ch = fgetc (stdin)) != EOF) {
        printf ("%llu\t", ++ line_number);
        while (ch != EOF && fputc (ch, stdout) != '\n') {
            ch = fgetc (stdin);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33355563_33355968_5_23
33355563_33359763_2_12
Title: Echoing Standard input to Standard Output 
----------------------------------------

int main (void) {
    size_t no = 0;
    bool line_top = true;
    printf ("Enter your text: \n");
    while (1) {
        int ch = fgetc (stdin);
        if (ch == EOF)
            break;
        if (line_top)
            printf ("%zu ", ++no);
        line_top = (ch == '\n');
        fputc (ch, stdout);
    }
    fflush (stdout);
    return 0;
}
----------------------------------------

int main () {
    char line [1000];
    int lineno = 0;
    while ((fgets (line, 1000, stdin)) != NULL) {
        lineno++;
        printf ("%d  ", lineno);
        fputs (line, stdout);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33355563_33355968_5_23
33355563_33370537_4_14
Title: Echoing Standard input to Standard Output 
----------------------------------------

int main (void) {
    size_t no = 0;
    bool line_top = true;
    printf ("Enter your text: \n");
    while (1) {
        int ch = fgetc (stdin);
        if (ch == EOF)
            break;
        if (line_top)
            printf ("%zu ", ++no);
        line_top = (ch == '\n');
        fputc (ch, stdout);
    }
    fflush (stdout);
    return 0;
}
----------------------------------------

int main (void) {
    unsigned long long line_number = 0;
    int ch;
    while ((ch = fgetc (stdin)) != EOF) {
        printf ("%llu\t", ++ line_number);
        while (ch != EOF && fputc (ch, stdout) != '\n') {
            ch = fgetc (stdin);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33355563_33359763_2_12
33355563_33370537_4_14
Title: Echoing Standard input to Standard Output 
----------------------------------------

int main () {
    char line [1000];
    int lineno = 0;
    while ((fgets (line, 1000, stdin)) != NULL) {
        lineno++;
        printf ("%d  ", lineno);
        fputs (line, stdout);
    }
}
----------------------------------------

int main (void) {
    unsigned long long line_number = 0;
    int ch;
    while ((ch = fgetc (stdin)) != EOF) {
        printf ("%llu\t", ++ line_number);
        while (ch != EOF && fputc (ch, stdout) != '\n') {
            ch = fgetc (stdin);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33359323_33360965_18_40
33359323_33383535_23_92
Title: Matrix sorting in C 
----------------------------------------

int main (void) {
    int matrix [] [COL_SIZE] = {{5, 10, 3}, {2, 4, 0}, {7, 14, 0}, {2, 6, 1}, {1, 2, 1}, {4, 8, 2}, {6, 12, 3}};
    size_t sizeof_row = sizeof (*matrix);
    size_t num_of_row = sizeof (matrix) / sizeof_row;
    qsort (matrix, num_of_row, sizeof_row, cmp);
    for (int r = 0; r < num_of_row; ++r) {
        for (int c = 0; c < COL_SIZE; ++c) {
            printf ("%2d ", matrix [r] [c]);
        }
        puts ("");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int **array, **array2;
    int pid [8], priority [8], arrival [8];
    FILE *fp;
    char buff [255];
    fp = fopen ("process.rtf", "r");
    if (fp == NULL)
        perror ("File not found");
    else {
        int i = 0;
        while (fgets (buff, 100, fp) != NULL) {
            sscanf (buff, "%d  %d  %d", & pid [i], & arrival [i], & priority [i]);
            i++;
        }
        fclose (fp);
    }
    for (int i = 0; i < 8; i++) {
        pid[i] = pid[i + 1];
        priority[i] = priority[i + 1];
        arrival[i] = arrival[i + 1];
    }
    array = malloc (8 * sizeof (int *));
    for (int i = 0; i < 8; i++) {
        array[i] = malloc (2 * sizeof (int));
        array[i][0] = pid[i];
        array[i][1] = arrival[i];
        array[i][2] = priority[i];
    }
    printf ("The original dataset\n");
    for (int i = 0; i < 7; ++i)
        printf ("%2d %2d %2d\n", array[i][0], array[i][1], array[i][2]);
    printf ("\n");
    printf ("Dataset sorted based on the arrival in ascending order:\n");
    qsort (array, 8, sizeof array [2], compareasc);
    for (int i = 1; i < 8; ++i)
        printf ("%2d %2d %2d\n", array[i][0], array[i][1], array[i][2]);
    printf ("\n");
    array2 = malloc (8 * sizeof (int *));
    for (int i = 0; i < 8; i++) {
        array2[i] = malloc (2 * sizeof (int));
        array2[i][0] = pid[i];
        array2[i][1] = arrival[i];
        array2[i][2] = priority[i];
    }
    printf ("Original Dataset:\n");
    for (int i = 0; i < 7; ++i)
        printf ("%2d %2d %2d\n", array2[i][0], array2[i][1], array2[i][2]);
    printf ("\n");
    printf ("Dataset sorted based on priority in descending order:\n");
    qsort (array2, 8, sizeof array2 [2], comparedsc);
    for (int i = 1; i < 8; ++i)
        printf ("%2d %2d %2d\n", array2[i][0], array2[i][1], array2[i][2]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33373343_33374037_12_32
33373343_33375023_4_27
Title: read a file line by line into structure 
----------------------------------------

int main () {
    char line [200];
    struct Text text = {0, "", "", ""};
    FILE *pf = NULL;
    if ((pf = fopen ("input.txt", "r")) == NULL) {
        printf ("could not open file\n");
        return 1;
    }
    while ((fgets (line, sizeof (line), pf))) {
        if ((sscanf (line, "%d %24[^\n] %19s %119[^\n]", &text.no, text.date, text.name, text.message)) == 4) {
            printf ("%d\n%s\n%s\n%s\n", text.no, text.date, text.name, text.message);
        }
    }
    fclose (pf);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp;
    const char s [3] = "  ";
    char *token, *end;
    char line [256];
    fp = fopen ("input.txt", "r");
    fgets (line, sizeof (line), fp);
    if (end = strchr (line, '\n'))
        *end = '\0';
    fclose (fp);
    token = line;
    while (token != NULL) {
        if (end = strstr (token, s))
            *end = '\0';
        printf ("'%s'\n", token);
        if (end != NULL)
            token = end + 2;
        else
            token = NULL;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3337455_23296724_1_12
3337455_3337812_1_11
Title: How to generate Fibonacci faster 
----------------------------------------

static int fib (int n) {
    if (n < 2)
        return n;
    if (n == 2)
        return 1;
    int k = n / 2;
    int a = fib (k +1);
    int b = fib (k);
    if (n % 2 == 1)
        return a * a + b * b;
    else
        return b * (2 * a - b);
}
----------------------------------------

int fib (int n) {
    int a = 0;
    int b = 1;
    while (n-- > 1) {
        int t = a;
        a = b;
        b += t;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33381298_33381347_1_18
33381298_33381584_1_21
Title: Find Quantity of Biggest integers in N integers in C 
----------------------------------------

int main () {
    int n, k, i, c;
    int count = 0;
    scanf (" %d", & n);
    scanf ("%d", & k);
    for (i = 1; i <= n; i++) {
        scanf ("%d", & c);
        if (c > k)
            count++;
    }
    printf ("%d", count);
    return 0
}
----------------------------------------

int main () {
    int num, s, i, cnt = 0;
    printf ("please input number of integers and int to compare with\n");
    scanf ("%d %d", & s, & num);
    int arr [s];
    for (i = 0; i < s; i++) {
        printf ("Please input %d. number", i + 1);
        scanf ("%d", & arr [i]);
    }
    for (i = 0; i < s; i++) {
        if (arr[i] >= num)
            cnt++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33381743_33381863_3_14
33381743_33381900_11_19
Title: C function is not returning the value 
----------------------------------------

const char *ignition_status (int st) {
    const char *ign_st;
    if (st == 1) {
        ign_st = "ON";
    }
    else {
        ign_st = "OFF";
    }
    return ign_st;
}
----------------------------------------

const char *ignition_status (int st) {
    if (st == 1) {
        ign_st = "ON";
    }
    else {
        ign_st = "OFF";
    }
    return ign_st;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33384806_33385050_4_36
33384806_33423199_4_59
Title: Read values from a column in a file 
----------------------------------------

int main () {
    FILE *fp;
    int id;
    float mark1;
    float mark2;
    float mark3;
    float mark4;
    int number;
    float somme [4];
    int nbLg = 0;
    int i;
    fp = fopen ("grades.txt", "r");
    if (fp == NULL) {
        printf ("File cannot be opened");
        exit (- 1);
    }
    while (fscanf (fp, "%d %f %f %f %f", &number, &mark1, &mark2, &mark3, &mark4) != EOF) {
        nbLg++;
        somme[0] += mark1;
        somme[1] += mark2;
        somme[2] += mark3;
        somme[3] += mark4;
    }
    for (i = 0; i <= 3; i++) {
        printf ("Average for %d : %.2f\n", i + 1, somme [i] / (float) nbLg);
    }
    fclose (fp);
}
----------------------------------------

int main (void) {
    FILE *fp;
    float mark1;
    float mark1Average = 0.0f;
    float mark2;
    float mark2Average = 0.0f;
    float mark3;
    float mark3Average = 0.0f;
    float mark4;
    float mark4Average = 0.0f;
    int number;
    int numberAverage = 0;
    fp = fopen ("grades.txt", "r");
    if (fp == NULL) {
        printf ("File cannot be opened");
        exit (- 1);
    }
    if (5 != fscanf (fp, "%d %f %f %f %f", &numberAverage, &mark1Average, &mark2Average, &mark3Average, &mark4Average)) {
        perror ("fscanf for first line of grades.txt failed");
        exit (EXIT_FAILURE);
    }
    while (5 == fscanf (fp, "%d %f %f %f %f", &number, &mark1, &mark2, &mark3, &mark4)) {
        numberAverage = (numberAverage + number) / 2;
        mark1Average = (mark1Average + mark1) / 2.0f;
        mark2Average = (mark2Average + mark2) / 2.0f;
        mark3Average = (mark3Average + mark3) / 2.0f;
        mark4Average = (mark4Average + mark4) / 2.0f;
    }
    printf ("numberAverage: %d\n", numberAverage);
    printf ("mark1Average:  %f\n", mark1Average);
    printf ("mark2Average:  %f\n", mark2Average);
    printf ("mark3Average:  %f\n", mark3Average);
    printf ("mark4Average:  %f\n", mark4Average);
    fclose (fp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33404295_33404562_3_19
33404295_33404760_49_65
Title: Add one to a binary representation with padding of 0 
----------------------------------------

int main (void) {
    unsigned int x;
    char binary [5];
    x = 6;
    for (size_t n = 0; n < 4; ++n) {
        binary[3 - n] = (((x >> n) & 1) == 1) ? '1' : '0';
    }
    binary[4] = '\0';
    fprintf (stderr, "%s\n", binary);
    return 0;
}
----------------------------------------

int main (void) {
    int n;
    char buff [33] = "0011";
    n = from_bin (buff);
    n += 1;
    if (to_bin (n, buff, 8) == -1) {
        printf ("ERROR: buffer too small\n");
    }
    else {
        printf ("bin of %d= '%s'\n", n, buff);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33443010_33443744_37_62
33443010_33443767_11_73
Title: "Using 2D arrays my arrays don't appear" 
----------------------------------------

int main () {
    printf ("Type a word or number, or both: ");
    scanf ("%s", line);
    for (row = 0; row < 7; row++) {
        for (i = 0; line[i]; i++) {
            for (col = 0; col < 6; col++) {
                if (chars[toupper (line[i]) - 'A'][row][col]) {
                    printf ("*");
                }
                else
                    printf (" ");
            }
        }
        printf ("\n");
    }
    return (0);
}
----------------------------------------

int main (void) {
    char line [MAXL] = {0};
    char allowed [] = "AB";
    size_t i, row, len;
    i = row = len = 0;
    bool A [ROWS] [COLS + 1] = {{0, 0, 1, 0, 0, 0}, {1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 1, 0}, {1, 1, 1, 1, 1, 0}, {1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 1, 0}};
    bool B [ROWS] [COLS + 1] = {{1, 1, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 0}, {1, 0, 0, 1, 0, 0}, {1, 1, 1, 1, 0, 0}, {1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 1, 0}, {1, 1, 1, 1, 0, 0}};
    while (!*line) {
        printf ("\nType a word or number, or both [A-B only]: ");
        if (!fgets (line, MAXL, stdin))
            fprintf (stderr, "error: no input provided - 'ctrl+d'.\n");
        len = strlen (line);
        if (line[len - 1] == '\n')
            line[--len] = 0;
        char *p = line;
        while (*p) {
            if (!strchr (allowed, *p)) {
                fprintf (stderr, "error: invalid character '%c'.\n", * p);
                *line = 0;
            }
            p++;
        }
    }
    printf ("valid: %s\n\n", line);
    for (row = 0; row < ROWS; row++) {
        for (i = 0; i < len; i++) {
            switch (line[i]) {
            case 'A' :
                prn_letter_row (A, row);
                break;
            case 'B' :
                prn_letter_row (B, row);
                break;
            }
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33445277_33445498_1_15
33445277_33445813_5_22
Title: My program doesn't print a string 
----------------------------------------

int delete_spaces (char oracion [100], char oracion2 [100]) {
    int deletions = 0;
    int i;
    int dest = 0;
    for (i = 0; oracion[i] != '\0'; i++) {
        if (oracion[i] == ' ' && oracion[i + 1] == ' ') {
            deletions++;
        }
        else {
            oracion2[dest++] = oracion[i];
        }
    }
    oracion2[dest] = '\0';
    return deletions;
}
----------------------------------------

int delete_spaces (char *s1, char *s2) {
    int found = 0;
    int i = 0, j = 0;
    while (s1[i] != '\0') {
        if (((s1[i] == ' ') && (s1[i + 1] == ' ')) || ((s1[i] == '\t') && (s1[i + 1] == '\t'))) {
            found++;
        }
        else {
            s2[j++] = s1[i];
        }
        i++;
    }
    s2[j] = '\0';
    printf ("s2 = %s\n", s2);
    return found;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33445277_33445498_1_15
33445277_33445875_8_19
Title: My program doesn't print a string 
----------------------------------------

int delete_spaces (char oracion [100], char oracion2 [100]) {
    int deletions = 0;
    int i;
    int dest = 0;
    for (i = 0; oracion[i] != '\0'; i++) {
        if (oracion[i] == ' ' && oracion[i + 1] == ' ') {
            deletions++;
        }
        else {
            oracion2[dest++] = oracion[i];
        }
    }
    oracion2[dest] = '\0';
    return deletions;
}
----------------------------------------

sentence delete_spaces (sentence frase) {
    int i, j;
    for (j = i = 0; frase.oracion[i] != '\0'; i++) {
        if (j && frase.oracion[j - 1] == ' ' && frase.oracion[i] == ' ') {
            continue;
        }
        frase.oracion[j++] = frase.oracion[i];
    }
    frase.oracion[j] = '\0';
    return frase;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33445277_33445813_24_36
33445277_33445875_34_46
Title: My program doesn't print a string 
----------------------------------------

int main (void) {
    char frase [100], frase2 [100];
    int num_spaces;
    printf ("Write here the phrase:");
    if ((fgets (frase, 99, stdin)) == NULL) {
        printf ("Error\n");
    }
    num_spaces = delete_spaces (frase, frase2);
    printf ("Number of deleted spaces = %d\n", num_spaces);
    return 0;
}
----------------------------------------

int main (void) {
    sentence frase, frase2;
    int num_spaces;
    printf ("Write here the phrase:");
    scanf ("%99[^\n]%*c", frase.oracion);
    frase2 = delete_spaces (frase);
    num_spaces = count_spaces (frase);
    printf ("%s\n", frase2.oracion);
    printf ("%d\n", num_spaces);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33445277_33445813_5_22
33445277_33445875_8_19
Title: My program doesn't print a string 
----------------------------------------

int delete_spaces (char *s1, char *s2) {
    int found = 0;
    int i = 0, j = 0;
    while (s1[i] != '\0') {
        if (((s1[i] == ' ') && (s1[i + 1] == ' ')) || ((s1[i] == '\t') && (s1[i + 1] == '\t'))) {
            found++;
        }
        else {
            s2[j++] = s1[i];
        }
        i++;
    }
    s2[j] = '\0';
    printf ("s2 = %s\n", s2);
    return found;
}
----------------------------------------

sentence delete_spaces (sentence frase) {
    int i, j;
    for (j = i = 0; frase.oracion[i] != '\0'; i++) {
        if (j && frase.oracion[j - 1] == ' ' && frase.oracion[i] == ' ') {
            continue;
        }
        frase.oracion[j++] = frase.oracion[i];
    }
    frase.oracion[j] = '\0';
    return frase;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33450727_33451795_1_18
33450727_33451911_1_21
Title: Removing even numbers from queue 
----------------------------------------

void deleteEven (Queue *que) {
    Queue *odd = (Queue *) malloc (sizeof (Queue));
    odd->list.size = 0;
    odd->list.first = NULL;
    while (!isEmptyQueue (que)) {
        if ((que->list.first->data) % 2 != 0) {
            enqueue (odd, que -> list.first -> data);
        }
        dequeue (que);
    }
    while (!isEmptyQueue (odd)) {
        enqueue (que, odd -> list.first -> data);
        dequeue (odd);
    }
    free (odd);
}
----------------------------------------

void deleteEven (Queue *que) {
    Queue newq;
    newq.List.first = NULL;
    newq.List.size = 0;
    while (!isEmptyQueue (que)) {
        if ((que->list.first->data) % 2 != 0) {
            enqueue (newq, que -> list.first -> data);
        }
        dequeue (que);
    }
    while (!isEmptyQueue (newq)) {
        enqueue (que, dequeue (newq));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33453381_33453444_20_33
33453381_33453465_14_27
Title: Using an array as a function parameter 
----------------------------------------

double stan_dev_seq (double stan_array []) {
    double mean_data = mean (stan_array);
    double a;
    for (int i = 0; i < 2000000; i++) {
        a = a + pow (stan_array[i] - mean_data, 2);
    }
    a = sqrt (a / 2000000);
    return a;
}
----------------------------------------

double stan_dev_seq (double stan_array []) {
    double mean = calc_mean (stan_array);
    double a = 0;
    for (int i = 0; i <= 2000; i++) {
        a = a + pow (stan_array[i] - mean, 2);
    }
    a = sqrt (a / 2000);
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33453381_33453444_35_53
33453381_33453465_29_44
Title: Using an array as a function parameter 
----------------------------------------

int pearson_seq (void) {
    static double a [2000000];
    static double b [2000000];
    double mean_a;
    double mean_b;
    for (int i = 0; i < 2000000; i++) {
        a[i] = sin (i);
        b[i] = sin (i +2);
    }
    double stan_dev_a = stan_dev_seq (a);
    double stan_dev_b = stan_dev_seq (b);
    return 0;
}
----------------------------------------

int pearson_seq () {
    double a [2000];
    double b [2000];
    for (int i = 0; i <= 2000; i++) {
        a[i] = sin (float (i));
        b [i] = sin (float (i + 2));
    }
    double stan_dev_a = stan_dev_seq (a);
    double stan_dev_b = stan_dev_seq (b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33460572_33460825_25_34
33460572_33476021_31_48
Title: printf creates no or wrong output 
----------------------------------------

char *createList () {
    char *msg = (char *) malloc (6 * sizeof (char));
    msg[0] = 'A';
    msg[1] = 'B';
    msg[2] = 'C';
    msg[3] = 'D';
    msg[4] = 'E';
    msg[5] = '\0';
    return msg;
}
----------------------------------------

char *createList () {
    char *msg = malloc (6);
    if (NULL == msg) {
        perror ("malloc failed");
        exit (EXIT_FAILURE);
    }
    msg[0] = 'A';
    msg[1] = 'B';
    msg[2] = 'C';
    msg[3] = 'D';
    msg[4] = 'E';
    msg[5] = '\0';
    return msg;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33460572_33460825_6_22
33460572_33476021_13_28
Title: printf creates no or wrong output 
----------------------------------------

int main (void) {
    setvbuf (stdout, NULL, _IONBF, 0);
    char input [50];
    for (;;) {
        if (fgets (input, 50, stdin) == NULL)
            break;
        printf ("%s\n", input);
    }
    fflush (stdout);
    char *myAnswer = createList ();
    printf ("%s\n", myAnswer);
    return 0;
}
----------------------------------------

int main (void) {
    char input [MAX_INPUT_LEN];
    while (1 == scanf ("%49s", input)) {
        printf ("%s\n", input);
    }
    char *myAnswer = createList ();
    printf ("%s\n", myAnswer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33465669_33465875_11_23
33465669_33466362_4_15
Title: How to return a multidimensional character array from a function in a header file in C 
----------------------------------------

int main () {
    int length = 2;
    char distribution [length] [2];
    character_distribution (length, distribution);
    int a;
    for (a = 0; a < length; a++) {
        printf ("%c\n", distribution [a] [0]);
    }
    return 0;
}
----------------------------------------

void main () {
    int length = 256;
    char distribution [length] [2];
    character_distribution (length, distribution);
    int a;
    for (a = 0; a < length; a++) {
        printf ("%c\n", distribution [a] [0]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33470187_33470305_1_27
33470187_33470638_41_143
Title: How to make this simple C program start over? 
----------------------------------------

int main (void) {
    int choice;
    bool loop = true;
    while (loop) {
        printf ("\n\nMenu\n----------\n\n");
        printf ("Enter the number that corresponds to your rate or press 5 to quit.\n");
        scanf_s ("%d", & choice);
        switch (choice) {
        case 5 :
            loop = false;
            break;
        default :
            printf ("Invalid choice.\n\n");
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int hours;
    float gross;
    float net;
    float taxes;
    int choice;
    while ((choice = intPrompt (szMainMenu)) != 5) {
        if (choice >= 1 && choice <= 4)
            hours = intPrompt ("Enter the number of hours worked this week: ");
        switch (choice) {
        case 1 :
            if (hours <= BASEHRS)
                gross = hours * BASEPAY1;
            else
                gross = BASEHRS * BASEPAY1 + (hours - BASEHRS) * BASEPAY1 * OVERTIME;
            if (gross <= AMT1)
                taxes = gross * RATE1;
            else if (gross <= AMT1 + AMT2)
                taxes = AMT1 * RATE1 + (gross - AMT1) * RATE2;
            else
                taxes = AMT1 * RATE1 + AMT2 * RATE2 + (gross - AMT1 - AMT2) * RATE3;
            net = gross - taxes;
            printf ("gross: $%.2f \n", gross);
            printf ("taxes: $%.2f \n", taxes);
            printf ("net: $%.2f \n", net);
            break;
        case 2 :
            if (hours <= BASEHRS)
                gross = hours * BASEPAY2;
            else
                gross = BASEHRS * BASEPAY2 + (hours - BASEHRS) * BASEPAY2 * OVERTIME;
            if (gross <= AMT1)
                taxes = gross * RATE1;
            else if (gross <= AMT1 + AMT2)
                taxes = AMT1 * RATE1 + (gross - AMT1) * RATE2;
            else
                taxes = AMT1 * RATE1 + AMT2 * RATE2 + (gross - AMT1 - AMT2) * RATE3;
            net = gross - taxes;
            printf ("gross: $%.2f \n", gross);
            printf ("taxes: $%.2f \n", taxes);
            printf ("net: $%.2f \n", net);
            break;
        case 3 :
            if (hours <= BASEHRS)
                gross = hours * BASEPAY3;
            else
                gross = BASEHRS * BASEPAY3 + (hours - BASEHRS) * BASEPAY3 * OVERTIME;
            if (gross <= AMT1)
                taxes = gross * RATE1;
            else if (gross <= AMT1 + AMT2)
                taxes = AMT1 * RATE1 + (gross - AMT1) * RATE2;
            else
                taxes = AMT1 * RATE1 + AMT2 * RATE2 + (gross - AMT1 - AMT2) * RATE3;
            net = gross - taxes;
            printf ("gross: $%.2f \n", gross);
            printf ("taxes: $%.2f \n", taxes);
            printf ("net: $%.2f \n", net);
            break;
        case 4 :
            if (hours <= BASEHRS)
                gross = hours * BASEPAY4;
            else
                gross = BASEHRS * BASEPAY4 + (hours - BASEHRS) * BASEPAY4 * OVERTIME;
            if (gross <= AMT1)
                taxes = gross * RATE1;
            else if (gross <= AMT1 + AMT2)
                taxes = AMT1 * RATE1 + (gross - AMT1) * RATE2;
            else
                taxes = AMT1 * RATE1 + AMT2 * RATE2 + (gross - AMT1 - AMT2) * RATE3;
            net = gross - taxes;
            printf ("gross: $%.2f \n", gross);
            printf ("taxes: $%.2f \n", taxes);
            printf ("net: $%.2f \n", net);
            break;
        default :
            _clrscr ();
            printf ("Invalid choice, please enter the number that corresponds\n" "to your rate or press 5 to quit.\n\n" "press a key to continue");
            _getch ();
        }
        _clrscr ();
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33473716_33474305_6_34
33473716_33474406_6_20
Title: Frequency Count of Number in an array in C is this code effective and efficient 
----------------------------------------

int main () {
    int arr [] = {1, 1, 1, 2, 3, 4, 2, 2, 3};
    int narr = sizeof (arr) / sizeof (arr[0]);
    int count [MAX + 1 - MIN] = {0};
    int uncounted = 0;
    int i;
    for (i = 0; i < narr; i++) {
        if (arr[i] < MIN || arr[i] > MAX) {
            uncounted++;
        }
        else {
            count[arr[i] - MIN]++;
        }
    }
    for (i = MIN; i < MAX + 1; i++) {
        if (count[i - MIN]) {
            printf ("element %d ocurs %d times.\n", i, count [i - MIN]);
        }
    }
    if (uncounted) {
        printf ("%d elements were not accounted for.\n", uncounted);
    }
    return 0;
}
----------------------------------------

int main () {
    int arr [] = {1, 1, 1, 2, 3, 4, 2, 2, 3, 1}, i;
    for (i = 0; i < MAX; i++)
        countArray[i] = 0;
    for (i = 0; i < MAX; i++)
        countArray[arr[i]]++;
    for (i = 0; i < MAX; i++) {
        if (countArray[i])
            printf ("%d %d\n", i, countArray[i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33495991_33496713_1_29
33495991_33496849_1_22
Title: how to use a pointer to pointer to insert in a linked list 
----------------------------------------

person *insert_sorted (person **people, char *name, int age) {
    person *p = malloc (sizeof (person));
    if (p == NULL) {
        printf ("malloc() failed\n");
    }
    else {
        p->name = name;
        p->age = age;
        person *prev = NULL;
        person *current = *people;
        while (current && !(compare_people (p, current) < 0)) {
            prev = current;
            current = current->next;
        }
        p->next = current;
        if (prev == NULL)
            *people = p;
        else
            prev->next = p;
    }
    return p;
}
----------------------------------------

person *insert_sorted (person **people, char *name, int age) {
    person *added = malloc (sizeof (person));
    added->name = name;
    added->age = age;
    added->next = NULL;
    person *previous = NULL;
    person *current = *people;
    while (current && compare_people (current, added) <= 0) {
        previous = current;
        current = current->next;
    }
    if (!people) {
        *people = added;
    }
    else {
        previous->next = added;
        added->next = current;
    }
    return added;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33510561_33510785_5_26
33510561_33510808_10_28
Title: C - Extracting capital letters from string 
----------------------------------------

int main () {
    FILE *pfile;
    int data;
    pfile = fopen ("test.txt", "r");
    printf ("Opening file...\n");
    if (pfile == NULL) {
        printf ("Error!\n");
    }
    while ((data = fgetc (pfile)) != EOF) {
        if (data >= 65 && data <= 90) {
            printf ("%c\n", data);
        }
    }
    fclose (pfile);
    return 0;
}
----------------------------------------

int main () {
    char string [BUFFER_SIZE] = {0};
    char ostring [BUFFER_SIZE] = {0};
    FILE *fp = NULL;
    fp = fopen (INPUT_FILE, "r");
    fscanf (fp, "%s", string);
    extractCaps (string, ostring, 0, 0);
    printf ("%s", ostring);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33510561_33510785_5_26
33510561_33511601_9_38
Title: C - Extracting capital letters from string 
----------------------------------------

int main () {
    FILE *pfile;
    int data;
    pfile = fopen ("test.txt", "r");
    printf ("Opening file...\n");
    if (pfile == NULL) {
        printf ("Error!\n");
    }
    while ((data = fgetc (pfile)) != EOF) {
        if (data >= 65 && data <= 90) {
            printf ("%c\n", data);
        }
    }
    fclose (pfile);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char buf [BUFFER_SIZE] = {0};
    char string [BUFFER_SIZE] = {0};
    size_t stridx = 0;
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input. usage: %s filename", argv [0]);
        return 1;
    }
    FILE *fp = NULL;
    if (!(fp = fopen (argv[1], "r"))) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (buf, BUFFER_SIZE, fp))
        extractCaps (string, buf, &stridx);
    printf ("\nAll caps in file : %s\n\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33510561_33510808_10_28
33510561_33511601_9_38
Title: C - Extracting capital letters from string 
----------------------------------------

int main () {
    char string [BUFFER_SIZE] = {0};
    char ostring [BUFFER_SIZE] = {0};
    FILE *fp = NULL;
    fp = fopen (INPUT_FILE, "r");
    fscanf (fp, "%s", string);
    extractCaps (string, ostring, 0, 0);
    printf ("%s", ostring);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char buf [BUFFER_SIZE] = {0};
    char string [BUFFER_SIZE] = {0};
    size_t stridx = 0;
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input. usage: %s filename", argv [0]);
        return 1;
    }
    FILE *fp = NULL;
    if (!(fp = fopen (argv[1], "r"))) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (buf, BUFFER_SIZE, fp))
        extractCaps (string, buf, &stridx);
    printf ("\nAll caps in file : %s\n\n", string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33510561_33510808_31_44
33510561_33511601_42_63
Title: C - Extracting capital letters from string 
----------------------------------------

void extractCaps (char *str, char *ostr, int iPos, int iCurrPos) {
    if (iPos < strlen (str)) {
        if ((str[iPos] >= 65 && str[iPos] <= 90)) {
            ostr[iCurrPos] = str[iPos];
            extractCaps (str, ostr, iPos + 1, iCurrPos + 1);
        }
        else
            extractCaps (str, ostr, iPos +1, iCurrPos);
    }
}
----------------------------------------

void extractCaps (char *str, char *buf, size_t *idx) {
    if (!buf || !str || !idx) {
        fprintf (stderr, "extractCaps() error: invalid parameter.\n");
        return;
    }
    char *p = buf;
    while (*p) {
        if ('A' <= *p && *p <= 'Z') {
            if (*idx == BUFFER_SIZE - 1) {
                fprintf (stderr, "extractCaps() error: BUFFER_SIZE reached.\n");
                return;
            }
            str[(*idx)++] = *p;
        }
        p++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33517003_33517211_16_29
33517003_33517242_1_18
Title: How to insert numbers into a binary search tree in C? 
----------------------------------------

void TREEinsert (struct node **t, int x) {
    if (*t == NULL) {
        *t = malloc (sizeof (**t));
        (*t)->info = x;
        (*t)->left = NULL;
        (*t)->right = NULL;
    }
    else {
        if (x < (*t)->info)
            TREEinsert (&(*t)->left, x);
        if (x > (*t)->info)
            TREEinsert (&(*t)->right, x);
    }
}
----------------------------------------

void TREEinsert (struct node **t, int x) {
    if (*t == NULL) {
        *t = (struct node *) malloc (sizeof (struct node));
        (*t)->info = x;
        (*t)->left = NULL;
        (*t)->right = NULL;
    }
    else if (x < (*t)->info) {
        TREEinsert (& (* t) -> left, x);
    }
    else if (x > (*t)->info) {
        TREEinsert (& (* t) -> right, x);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33517916_33518609_4_30
33517916_33520038_7_22
Title: "Removing spaces from string adding words to array in C" 
----------------------------------------

int main () {
    char str [] = "apple   banana orange  dogfood";
    char *items [20] = {NULL};
    char *pch;
    pch = strtok (str, " \t\n");
    int i = 0;
    while (NULL != pch) {
        items[i++] = pch;
        pch = strtok (NULL, " \t\n");
    }
    for (i = 0; i < 20; i++) {
        if (NULL != items[i]) {
            printf ("items[%d] = %s\n", i, items [i]);
        }
        else {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char command [120] = "   apple   banana orange  dogfood";
    char *items [20 + 1];
    int num_of_words = GetWords (command, items);
    for (int n = 0; n < num_of_words; n++) {
        printf ("%s ", items [n]);
        free (items [n]);
    }
    puts ("");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3352304_3352443_3_12
3352304_3352656_3_37
Title: tokenizing a string in C 
----------------------------------------

int main (void) {
    char str [] = "{Job Started}{Job Running}{Job Running}{Job Finished}";
    char *pch;
    pch = strtok (str, "{}");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, "{}");
    }
    return 0;
}
----------------------------------------

int main () {
    char *src = "{Job Started}{Job \\{ID1\\} Running}{Job \\{ID2\\} Running}{Job Finished}";
    char token [100] = {}, *dst = token, ch;
    int state = 0;
    while ((ch = *src++) != 0) {
        switch (state) {
        case 0 :
            if (ch == '{')
                state = 1;
            break;
        case 1 :
            switch (ch) {
            case '}' :
                printf ("token: %s\n", token);
                dst = token;
                *dst = 0;
                state = 0;
                break;
            case '\\' :
                state = 2;
                break;
            default :
                *dst++ = ch;
                *dst = 0;
            }
            break;
        case 2 :
            *dst++ = ch;
            *dst = 0;
            state = 1;
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33523405_33523762_1_13
33523405_33531206_6_33
Title: How to parse data between tags from a text file in C 
----------------------------------------

int main () {
    char line [500000];
    while (fgets (line, 500000, stdin)) {
        char *arg = line;
        const char *tok;
        while ((tok = getfield (arg, 2)) != NULL) {
            printf ("%s\n", tok);
            arg = NULL;
        }
    }
}
----------------------------------------

int main () {
    char letter, fileData [400];
    int numLetters;
    FILE *pfile;
    pfile = fopen ("test.txt", "r");
    if (pfile == NULL) {
        printf ("Error!Can not open file");
    }
    else {
        numLetters = 0;
        while ((letter = fgetc (pfile)) != EOF) {
            fileData[numLetters] = letter;
            numLetters++;
        }
        fileData[numLetters] = '\0';
        printf ("File Data:\n\n");
        printf ("%s", fileData);
        printf ("\nRemoving Tags.....\n");
        removeTags (fileData, numLetters);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33524651_33524823_6_17
33524651_33524828_6_25
Title: Pointer Error with C 
----------------------------------------

void main () {
    nums = malloc (10 * sizeof (int));
    printf ("Enter 10 numbers");
    for (int i = 0; i < 10; i++) {
        scanf_s ("%d", (nums + i));
    }
    printf ("Number are: ");
    for (int i = 0; i < 10; i++) {
        printf (" %d,", * (nums + i));
    }
}
----------------------------------------

int main (void) {
    int *nums = malloc (N * sizeof (int));
    printf ("Enter %d numbers: ", N);
    for (int i = 0; i < N; i++) {
        scanf_s ("%d", nums + i);
    }
    printf ("Number are: ");
    for (int i = 0; i < N; i++) {
        printf (" %d,", * (nums + i));
    }
    free (nums);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33560618_33561089_1_69
33560618_33561092_40_74
Title: C program returning 0 instead of max occurring integer from sequence of integer input 
----------------------------------------

int main () {
    int a_num [1000] = {0};
    int a_freq [1000] = {0};
    int len_n = 0;
    int i = 0, j = 0;
    int inputnum = getint ();
    if (EOF == inputnum) {
        printf ("No valid number input given\n");
        return -1;
    }
    a_num[0] = inputnum;
    a_freq[0] = 1;
    len_n = 1;
    inputnum = getint ();
    while (inputnum != EOF) {
        for (i = 0; i < len_n; i++) {
            if (a_num[i] == inputnum) {
                a_freq[i] = a_freq[i] + 1;
                break;
            }
        }
        if (i == len_n) {
            a_num[i] = inputnum;
            a_freq[i] = 1;
            len_n++;
        }
        if (1000 == len_n) {
            printf ("Reached 1000 entry read\n");
            break;
        }
        inputnum = getint ();
    }
    int max_freq = ar_max (a_freq);
    for (j = 0; j < len_n; j++) {
        if (a_freq[j] == max_freq) {
            printf ("%d\n", a_num [j]);
            break;
        }
    }
}
----------------------------------------

int main () {
    int inputnum = getint ();
    int a_num [MAX] = {};
    int a_freq [MAX] = {};
    int len = 0;
    while (inputnum != EOF) {
        int i = ar_find (a_num, len, inputnum);
        if (i < 0) {
            if (len >= MAX) {
                fprintf (stderr, "Array size %d exceeded\n", MAX);
                exit (1);
            }
            a_num[len] = inputnum;
            a_freq[len] = 1;
            len++;
        }
        else {
            a_freq[i]++;
        }
        inputnum = getint ();
    }
    int imax = ar_max (a_freq, len);
    if (imax >= 0) {
        printf ("%d (%d times)\n", a_num [imax], a_freq [imax]);
    }
    else {
        puts ("Empty input.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3356185_3356353_14_34
3356185_3356418_4_28
Title: C: sscanf problem 
----------------------------------------

int main () {
    int interval;
    char Name;
    int AT, ET;
    char tmp [256];
    FILE *iF = fopen ("stupid_input.txt", "r");
    fgets (tmp, 255, iF);
    sscanf (tmp, "%d", & interval);
    while (fgets (tmp, 255, iF)) {
        P *cur = malloc (sizeof (P));
        sscanf (tmp, "%c %d %d", & Name, & AT, & ET);
        cur->jobName = Name;
        cur->arrivalTime = AT;
        cur->execTime = ET;
        show_P (cur);
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char *fileName = "data.txt";
    FILE *iF;
    int interval;
    char Name [256], tmp [256];
    int AT, ET;
    iF = fopen (fileName, "r");
    if (fgets (tmp, 255, iF) == NULL)
        goto error;
    if (sscanf (tmp, "%d", &interval) != 1)
        goto error;
    while (fgets (tmp, 255, iF) != NULL) {
        if (sscanf (tmp, "%c %d %d", Name, &AT, &ET) != 3)
            goto error;
        fprintf (stdout, "%s, %d, %d\n", Name, AT, ET);
    }
    return 0;
error :
    fprintf (stderr, "error while reading from the file.\n");
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33577369_33577487_1_16
33577369_33577776_4_33
Title: Spliting string to an array in C 
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    for (i = 4; i >= 0; i--) {
        tempNum[i] = longNum % 10;
        longNum /= 10;
    }
    for (i = 0; i < 5; i++) {
        printf ("%d\n", tempNum [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    long long longNum = 1234512345;
    int tempNum [5], i;
    int num_digits = 0;
    long temp = longNum;
    while (temp > 0) {
        temp /= 10;
        num_digits++;
    }
    printf ("num_digits = %d\n", num_digits);
    int *pos = malloc (num_digits * sizeof (int));
    for (i = num_digits - 1; i >= 0; i--) {
        pos[i] = longNum % 10;
        longNum /= 10;
    }
    for (i = 0; i < num_digits; i++) {
        printf ("%d\n", pos [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33577369_33577487_1_16
33577369_33577886_1_15
Title: Spliting string to an array in C 
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    for (i = 4; i >= 0; i--) {
        tempNum[i] = longNum % 10;
        longNum /= 10;
    }
    for (i = 0; i < 5; i++) {
        printf ("%d\n", tempNum [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    char numstr [99];
    itoa (longNum, numstr, 10);
    for (i = 0; i < 5; i++) {
        tempNum[i] = numstr[i] - '0';
        printf ("\n%d", tempNum [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33577369_33577487_1_16
33577369_33578015_2_12
Title: Spliting string to an array in C 
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    for (i = 4; i >= 0; i--) {
        tempNum[i] = longNum % 10;
        longNum /= 10;
    }
    for (i = 0; i < 5; i++) {
        printf ("%d\n", tempNum [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    for (i = 1; i <= 5; i++) {
        tempNum[5 - i] = longNum % 10;
        longNum = longNum / 10;
    }
    printf ("%d%d%d%d%d\n", tempNum [0], tempNum [1], tempNum [2], tempNum [3], tempNum [4]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33577369_33577776_4_33
33577369_33577886_1_15
Title: Spliting string to an array in C 
----------------------------------------

int main () {
    long long longNum = 1234512345;
    int tempNum [5], i;
    int num_digits = 0;
    long temp = longNum;
    while (temp > 0) {
        temp /= 10;
        num_digits++;
    }
    printf ("num_digits = %d\n", num_digits);
    int *pos = malloc (num_digits * sizeof (int));
    for (i = num_digits - 1; i >= 0; i--) {
        pos[i] = longNum % 10;
        longNum /= 10;
    }
    for (i = 0; i < num_digits; i++) {
        printf ("%d\n", pos [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    char numstr [99];
    itoa (longNum, numstr, 10);
    for (i = 0; i < 5; i++) {
        tempNum[i] = numstr[i] - '0';
        printf ("\n%d", tempNum [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33577369_33577776_4_33
33577369_33578015_2_12
Title: Spliting string to an array in C 
----------------------------------------

int main () {
    long long longNum = 1234512345;
    int tempNum [5], i;
    int num_digits = 0;
    long temp = longNum;
    while (temp > 0) {
        temp /= 10;
        num_digits++;
    }
    printf ("num_digits = %d\n", num_digits);
    int *pos = malloc (num_digits * sizeof (int));
    for (i = num_digits - 1; i >= 0; i--) {
        pos[i] = longNum % 10;
        longNum /= 10;
    }
    for (i = 0; i < num_digits; i++) {
        printf ("%d\n", pos [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    for (i = 1; i <= 5; i++) {
        tempNum[5 - i] = longNum % 10;
        longNum = longNum / 10;
    }
    printf ("%d%d%d%d%d\n", tempNum [0], tempNum [1], tempNum [2], tempNum [3], tempNum [4]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33577369_33577886_1_15
33577369_33578015_2_12
Title: Spliting string to an array in C 
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    char numstr [99];
    itoa (longNum, numstr, 10);
    for (i = 0; i < 5; i++) {
        tempNum[i] = numstr[i] - '0';
        printf ("\n%d", tempNum [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int longNum = 12345, tempNum [5], i;
    for (i = 1; i <= 5; i++) {
        tempNum[5 - i] = longNum % 10;
        longNum = longNum / 10;
    }
    printf ("%d%d%d%d%d\n", tempNum [0], tempNum [1], tempNum [2], tempNum [3], tempNum [4]);
    return 0;
}
----------------------------------------

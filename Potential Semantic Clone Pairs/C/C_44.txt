$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41436265_41436376_5_52
41436265_41436455_7_67
Title: Segmentation fault (core dumped) due to fgets - I think 
----------------------------------------

int main (int argc, char *argv []) {
    char *input = malloc (sizeof (char) * 50);
    if (argc != 2) {
        printf ("Usage: %s [name of document]\n", argv [0]);
        return 1;
    }
    FILE *fp = fopen (argv[1], "w");
    if (fp == NULL) {
        printf ("Could not create %s\n", argv [1]);
        return 2;
    }
    while (1) {
        printf ("Enter a new line of text (or \"quit\"):\n");
        fgets (input, 50, stdin);
        if (input != NULL && strcmp (input, "quit\n") == 0) {
            free (input);
            break;
        }
        else if (input != NULL) {
            fputs (input, fp);
            fputs ("\n", fp);
            printf ("CHA-CHING!\n\n");
        }
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char input [MAXLINE];
    char *ch;
    char c;
    if (argc != 2) {
        printf ("Usage: %s [name of document]\n", argv [0]);
        return 1;
    }
    FILE *fp = fopen (argv[1], "w");
    if (fp == NULL) {
        printf ("Could not create %s\n", argv [1]);
        return 2;
    }
    while (true) {
        printf ("Enter a new line of text (or \"quit\"):\n");
        fgets (input, MAXLINE, stdin);
        ch = input;
        while (*ch != '\n' && *ch != '\0') {
            ++ch;
        }
        if (*ch) {
            *ch = '\0';
        }
        else {
            while ((c = getchar ()) != '\n' && c != EOF)
                continue;
        }
        if (strcmp (input, "quit") == 0) {
            break;
        }
        else if (input[0]) {
            fputs (input, fp);
            fputs ("\n", fp);
            printf ("CHA-CHING!\n\n");
        }
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41438497_41441355_8_21
41438497_41455464_1_42
Title: Local variable loses its value: selection sort algorithm 
----------------------------------------

int main (void) {
    int list [] = {10, 5, 6, 3, 4, 11, 9, 7, 2};
    size_t n = sizeof list / sizeof *list;
    printf ("Before: ");
    print_array (list, n);
    sort_list (list, n);
    printf ("After: ");
    print_array (list, n);
    return 0;
}
----------------------------------------

int main (void) {
    int list [] = {9, 5, 7, 8, 4, 3, 2, 1, 6};
    int minValPos = 0, maxTempVal = list[0];
    for (int j = 0, siz = sizeof (list) / sizeof (int); j < siz; j++) {
        int swaps = 0, minVal = list[j];
        for (int i = j; i < siz; i++) {
            if (list[i] < minVal) {
                minVal = list[i];
                minValPos = i;
            }
        }
        if (minValPos > j) {
            maxTempVal = list[j];
            list[j] = minVal;
            list[minValPos] = maxTempVal;
            swaps++;
        }
        if (swaps == 0) {
            for (int r = 0;
            r < siz;
            r ++) {printf ("Position [%d] = %d\n", r, list [r]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41444655_41445568_2_14
41444655_41447912_3_17
Title: Prime numbers between 1 to 100 in C Programming Language 
----------------------------------------

int main (void) {
    for (int i = 2; i < 100; i++) {
        for (int j = 2; j <= i; j++) {
            if (i == j)
                printf ("%d\n", i);
            else if (i % j == 0)
                break;
        }
    }
}
----------------------------------------

int main () {
    int i, j;
    int b = 0;
    for (i = 2; i <= 100; i++) {
        for (j = 2; j <= i; j++) {
            if (i % j == 0) {
                break;
            }
        }
        if (i == j) print f ("\n%d", j);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41444655_41445568_2_14
41444655_45800384_3_15
Title: Prime numbers between 1 to 100 in C Programming Language 
----------------------------------------

int main (void) {
    for (int i = 2; i < 100; i++) {
        for (int j = 2; j <= i; j++) {
            if (i == j)
                printf ("%d\n", i);
            else if (i % j == 0)
                break;
        }
    }
}
----------------------------------------

int main () {
    int i, j;
    for (i = 2; i < 100; i++) {
        for (j = 2; j <= (i / j); j++)
            if (!(i % j))
                break;
        if (j > (i / j))
            printf ("%d is prime", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41444655_41445568_2_14
41444655_46055849_2_27
Title: Prime numbers between 1 to 100 in C Programming Language 
----------------------------------------

int main (void) {
    for (int i = 2; i < 100; i++) {
        for (int j = 2; j <= i; j++) {
            if (i == j)
                printf ("%d\n", i);
            else if (i % j == 0)
                break;
        }
    }
}
----------------------------------------

int main () {
    int a, b, i, c, j;
    printf ("\n Enter the two no. in between you want to check:");
    scanf ("%d%d", & a, & c);
    printf ("%d-%d\n", a, c);
    for (j = a; j <= c; j++) {
        b = 0;
        for (i = 1; i <= c; i++) {
            if (j % i == 0) {
                b++;
            }
        }
        if (b == 2) {
            printf ("\nPrime number:%d\n", j);
        }
        else {
            printf ("\n\tNot prime:%d\n", j);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41444655_41447912_3_17
41444655_45800384_3_15
Title: Prime numbers between 1 to 100 in C Programming Language 
----------------------------------------

int main () {
    int i, j;
    int b = 0;
    for (i = 2; i <= 100; i++) {
        for (j = 2; j <= i; j++) {
            if (i % j == 0) {
                break;
            }
        }
        if (i == j) print f ("\n%d", j);
    }
    getch ();
}
----------------------------------------

int main () {
    int i, j;
    for (i = 2; i < 100; i++) {
        for (j = 2; j <= (i / j); j++)
            if (!(i % j))
                break;
        if (j > (i / j))
            printf ("%d is prime", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41444655_41447912_3_17
41444655_46055849_2_27
Title: Prime numbers between 1 to 100 in C Programming Language 
----------------------------------------

int main () {
    int i, j;
    int b = 0;
    for (i = 2; i <= 100; i++) {
        for (j = 2; j <= i; j++) {
            if (i % j == 0) {
                break;
            }
        }
        if (i == j) print f ("\n%d", j);
    }
    getch ();
}
----------------------------------------

int main () {
    int a, b, i, c, j;
    printf ("\n Enter the two no. in between you want to check:");
    scanf ("%d%d", & a, & c);
    printf ("%d-%d\n", a, c);
    for (j = a; j <= c; j++) {
        b = 0;
        for (i = 1; i <= c; i++) {
            if (j % i == 0) {
                b++;
            }
        }
        if (b == 2) {
            printf ("\nPrime number:%d\n", j);
        }
        else {
            printf ("\n\tNot prime:%d\n", j);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41444655_45800384_3_15
41444655_46055849_2_27
Title: Prime numbers between 1 to 100 in C Programming Language 
----------------------------------------

int main () {
    int i, j;
    for (i = 2; i < 100; i++) {
        for (j = 2; j <= (i / j); j++)
            if (!(i % j))
                break;
        if (j > (i / j))
            printf ("%d is prime", i);
    }
    return 0;
}
----------------------------------------

int main () {
    int a, b, i, c, j;
    printf ("\n Enter the two no. in between you want to check:");
    scanf ("%d%d", & a, & c);
    printf ("%d-%d\n", a, c);
    for (j = a; j <= c; j++) {
        b = 0;
        for (i = 1; i <= c; i++) {
            if (j % i == 0) {
                b++;
            }
        }
        if (b == 2) {
            printf ("\nPrime number:%d\n", j);
        }
        else {
            printf ("\n\tNot prime:%d\n", j);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41457280_41458227_11_47
41457280_41458365_12_47
Title: Not reading correct value in file handling in C 
----------------------------------------

int main () {
    FILE *fp = fopen ("File.txt", "r");
    while (1) {
        number_read = fgetc (fp);
        if (feof (fp)) {
            break;
        }
        base = 1;
        number_of_ones = remainder_value = binary = 0;
        printf ("\nnumber is=%c\n", number_read);
        number = number_read - 48;
        while (number > 0) {
            remainder_value = number % 2;
            if (remainder_value == 1) {
                number_of_ones++;
            }
            binary = binary + remainder_value * base;
            number = number / 2;
            base = base * 10;
            if (number == 1) {
                binary = binary + 1 * base;
                number = 0;
            }
        }
        printf ("\nINPUT number is = %d\n", number_read - 48);
        printf ("\nIt's in the binary number is = %d\n", binary);
        printf ("\nNo.of 1's in the binary number is = %d\n", number_of_ones);
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp, *fp1;
    char buff [5];
    fp = fopen ("C:\\Users\\50022314\\Desktop\\mytest.txt", "r+");
    fp1 = fopen ("C:\\Users\\50022314\\Desktop\\mytest1.txt", "a+");
    while (fgets (buff, sizeof (buff), fp) != NULL) {
        number_read = atoi (buff);
        printf ("\nnumber is=%d", number_read);
        while (number_read > 0) {
            remainder_value = number_read % 2;
            if (remainder_value == 1) {
                number_of_ones++;
            }
            binary = binary + remainder_value * base;
            number_read = number_read / 2;
            base = base * 10;
        }
        fprintf (fp1, "\nINPUT number is = %d\n", number);
        fprintf (fp1, "\nIt's in the binary number is = %d\n", binary);
        fprintf (fp1, "\nNo.of 1's in the binary number is = %d\n", number_of_ones);
    }
    fclose (fp);
    fclose (fp1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41457280_41458227_11_47
41457280_41479636_18_47
Title: Not reading correct value in file handling in C 
----------------------------------------

int main () {
    FILE *fp = fopen ("File.txt", "r");
    while (1) {
        number_read = fgetc (fp);
        if (feof (fp)) {
            break;
        }
        base = 1;
        number_of_ones = remainder_value = binary = 0;
        printf ("\nnumber is=%c\n", number_read);
        number = number_read - 48;
        while (number > 0) {
            remainder_value = number % 2;
            if (remainder_value == 1) {
                number_of_ones++;
            }
            binary = binary + remainder_value * base;
            number = number / 2;
            base = base * 10;
            if (number == 1) {
                binary = binary + 1 * base;
                number = 0;
            }
        }
        printf ("\nINPUT number is = %d\n", number_read - 48);
        printf ("\nIt's in the binary number is = %d\n", binary);
        printf ("\nNo.of 1's in the binary number is = %d\n", number_of_ones);
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    fp = fopen ("File.txt", "r+");
    while (fgets (buff, sizeof (buff), fp) != NULL) {
        number_read = atoi (buff);
        printf ("\nnumber is=%d", number_read);
        while (number_read > 0) {
            remainder_value = number_read % 2;
            if (remainder_value == 1) {
                number_of_ones++;
            }
            binary = binary + remainder_value * base;
            number_read = number_read / 2;
            base = base * 10;
        }
        printf ("\nNo.of 1's in It's binary representation is = %d\n", number_of_ones);
        number_of_ones = 0;
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41457280_41458365_12_47
41457280_41479636_18_47
Title: Not reading correct value in file handling in C 
----------------------------------------

int main () {
    FILE *fp, *fp1;
    char buff [5];
    fp = fopen ("C:\\Users\\50022314\\Desktop\\mytest.txt", "r+");
    fp1 = fopen ("C:\\Users\\50022314\\Desktop\\mytest1.txt", "a+");
    while (fgets (buff, sizeof (buff), fp) != NULL) {
        number_read = atoi (buff);
        printf ("\nnumber is=%d", number_read);
        while (number_read > 0) {
            remainder_value = number_read % 2;
            if (remainder_value == 1) {
                number_of_ones++;
            }
            binary = binary + remainder_value * base;
            number_read = number_read / 2;
            base = base * 10;
        }
        fprintf (fp1, "\nINPUT number is = %d\n", number);
        fprintf (fp1, "\nIt's in the binary number is = %d\n", binary);
        fprintf (fp1, "\nNo.of 1's in the binary number is = %d\n", number_of_ones);
    }
    fclose (fp);
    fclose (fp1);
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    fp = fopen ("File.txt", "r+");
    while (fgets (buff, sizeof (buff), fp) != NULL) {
        number_read = atoi (buff);
        printf ("\nnumber is=%d", number_read);
        while (number_read > 0) {
            remainder_value = number_read % 2;
            if (remainder_value == 1) {
                number_of_ones++;
            }
            binary = binary + remainder_value * base;
            number_read = number_read / 2;
            base = base * 10;
        }
        printf ("\nNo.of 1's in It's binary representation is = %d\n", number_of_ones);
        number_of_ones = 0;
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41459152_41460306_3_11
41459152_41460747_3_16
Title: Does not ask for 2nd input in do while loop 
----------------------------------------

int main () {
    int n;
    while (1) {
        printf ("Enter any number: ");
        if (scanf ("%d", &n) != 1)
            break;
        printf ("Square of %d is %d\n", n, n * n);
    }
}
----------------------------------------

void main () {
    char letter;
    int num;
    clrscr ();
    do {
        printf ("Enter any number: ");
        scanf (" %d", & num);
        printf ("Square of %d is %d\n", num, num * num);
        printf (" you want to enter another number? y/n");
        scanf (" %c", & letter);
    }
    while (letter == 'y');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4146897_4146932_12_35
4146897_4147562_62_104
Title: Read and write struct with unistd.h read/write 
----------------------------------------

int main (void) {
    int fd;
    prova_t result;
    ssize_t bytes_read;
    size_t nbytes;
    prova_t initial;
    fd = open ("file.bin", O_WRONLY | O_CREAT);
    initial.first = 4;
    initial.second = 5;
    write (fd, & initial, sizeof (prova_t));
    close (fp);
    fd = open ("file.bin", O_RDONLY);
    nbytes = sizeof (prova_t);
    bytes_read = read (fd, &result, nbytes);
    write (STDOUT_FILENO, & (result.first), sizeof (int));
    write (STDOUT_FILENO, & (result.second), sizeof (int));
    close (fp);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int fd;
    prova_t result;
    size_t nbytes;
    fd = creat (FILENAME, mode);
    if (fd < 0) {
        fprintf (stderr, "Unable to open " FILENAME ": %s\n", strerror (errno));
        exit (EXIT_FAILURE);
    }
    nbytes = sizeof (prova_t);
    result.first = 4;
    result.second = 5;
    if (0 != safewrite (fd, &result, nbytes)) {
        fprintf (stderr, "Unable to write to " FILENAME ": %s\n", strerror (errno));
        exit (EXIT_FAILURE);
    }
    close (fd);
    fd = -1;
    fd = open (FILENAME, O_RDONLY);
    nbytes = sizeof (prova_t);
    if (0 != saferead (fd, &result, nbytes)) {
        fprintf (stderr, "Unable to read file \"" FILENAME "\": %s\n", strerror (errno));
        exit (EXIT_FAILURE);
    }
    close (fd);
    printf ("Read: %d %d (%#.02x%.02x)\n", result.first, result.second, result.first, result.second);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41475819_41476036_4_60
41475819_41476639_4_86
Title: "matrix product c core dump error" 
----------------------------------------

int main () {
    int m;
    int n;
    int t;
    int i;
    int **A;
    int **B;
    int k;
    int j;
    scanf ("%d", & n);
    scanf ("%d", & m);
    scanf ("%d", & t);
    A = malloc (n * sizeof (int *));
    for (i = 0; i < n; i++) {
        A[i] = malloc (m * sizeof (int));
    }
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf ("%d", & (A [i] [j]));
        }
    }
    B = malloc (t * sizeof (int *));
    for (i = 0; i < t; i++) {
        B[i] = malloc (n * sizeof (int));
    }
    printf ("B\n");
    for (i = 0; i < t; i++) {
        for (j = 0; j < n; j++) {
            scanf ("%d", & (B [i] [j]));
        }
    }
    int **C;
    C = malloc (t * sizeof (int *));
    for (i = 0; i < t; i++) {
        C[i] = malloc (m * sizeof (int));
    }
    for (i = 0; i < t; i++) {
        for (j = 0; j < m; j++) {
            C[i][j] = 0;
            for (k = 0; k < n; k++) {
                (C[i][j]) = (C [i] [j]) +((A [k] [j]) *(B[i][k]));
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int m;
    int n;
    int t;
    int i;
    int **A;
    int **B;
    int **C;
    int k;
    int j;
    printf ("Enter number of rows in A: ");
    scanf ("%d", & m);
    printf ("Enter number of columns in A: ");
    scanf ("%d", & n);
    printf ("Enter number columns in B: ");
    scanf ("%d", & t);
    A = malloc (sizeof (int *) * m);
    for (i = 0; i < m; i++) {
        A[i] = malloc (sizeof (int) * n);
    }
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            scanf ("%d", & (A [i] [j]));
        }
    }
    B = malloc (sizeof (int *) * n);
    for (i = 0; i < n; i++) {
        B[i] = malloc (sizeof (int) * t);
    }
    for (i = 0; i < n; i++) {
        for (j = 0; j < t; j++) {
            scanf ("%d", & (B [i] [j]));
        }
    }
    C = malloc (sizeof (int *) * m);
    for (i = 0; i < m; i++) {
        C[i] = malloc (sizeof (int) * t);
    }
    for (i = 0; i < m; i++) {
        for (j = 0; j < t; j++) {
            C[i][j] = 0;
            for (k = 0; k < n; k++) {
                C[i][j] = C[i][j] + A[i][k] * B[k][j];
            }
        }
    }
    printf ("Matrix A:\n");
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            printf ("%-5d", A [i] [j]);
        }
        putchar ('\n');
    }
    printf ("Matrix B:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < t; j++) {
            printf ("%-5d", B [i] [j]);
        }
        putchar ('\n');
    }
    printf ("Matrix product:\n");
    for (i = 0; i < t; i++) {
        for (j = 0; j < m; j++) {
            printf ("%-5d", C [i] [j]);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41518039_41518512_8_65
41518039_41518611_6_30
Title: How to input strings into an array in C? 
----------------------------------------

int main (void) {
    char *words [NUMSTR];
    char buffer [BUFFSIZE];
    size_t i, count = 0, slen;
    for (i = 0; i < NUMSTR; i++) {
        printf ("Enter a word: ");
        if (fgets (buffer, BUFFSIZE, stdin) == NULL) {
            fprintf (stderr, "Error reading string into buffer.\n");
            exit (EXIT_FAILURE);
        }
        slen = strlen (buffer);
        if (slen > 0) {
            if (buffer[slen - 1] == '\n') {
                buffer[slen - 1] = '\0';
            }
            else {
                printf ("Exceeded buffer length of %d.\n", BUFFSIZE);
                exit (EXIT_FAILURE);
            }
        }
        if (!*buffer) {
            printf ("No string entered.\n");
            exit (EXIT_FAILURE);
        }
        words[count] = malloc (strlen (buffer) +1);
        if (!words[count]) {
            printf ("Cannot allocate memory for string.\n");
            exit (EXIT_FAILURE);
        }
        strcpy (words [count], buffer);
        count++;
    }
    printf ("\nYour strings:\n");
    for (i = 0; i < count; i++) {
        printf ("words[%zu] = %s\n", i, words [i]);
        free (words [i]);
        words[i] = NULL;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, n = 0;
    char word [NWDS] [50] = {""};
    for (i = 0; i < NWDS; i++) {
        printf ("Enter word : ");
        if (!fgets (word[i], sizeof word[i], stdin))
            break;
        size_t len = strlen (word[i]);
        if (word[i][len - 1] == '\n')
            word[i][--len] = 0;
    }
    n = i;
    putchar ('\n');
    for (i = 0; i < n; i++)
        printf (" word[%d] : %s\n", i, word[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41526986_41527700_4_22
41526986_41527992_1_57
Title: Randomly replace numbers in an array 
----------------------------------------

void main () {
    int Array [3] [3];
    int row, col;
    srand (time (NULL));
    for (row = 0; row < 3; row++)
        for (col = 0; col < 3; col++)
            Array[row][col] = rand () % 10;
    for (row = 0; row < 3; row++) {
        for (col = 0; col < 3; col++)
            if (rand () % 2)
                printf ("%d ", Array[row][col]);
            else
                printf ("X ");
        printf ("\n");
    }
}
----------------------------------------

void main () {
    int Array [3] [3];
    int row, col;
    srand (time (NULL));
    for (row = 0; row < 3; row++) {
        for (col = 0; col < 3; col++) {
            if (col == 0) {
                Array[row][col] = (rand () % 10);
            }
            else if (col == 1) {
                Array[row][col] = (rand () % 10);
            }
            else if (col == 2) {
                Array[row][col] = (rand () % 10);
            }
        }
        printf ("\n");
    }
    for (row = 0; row < 3; row++) {
        for (col = 0; col < 3; col++) {
            if (rand () % 9 < 4) {
                printf ("%d \t", Array [row] [col]);
            }
            else {
                printf ("%s \t", "X");
            }
        }
        printf ("\n");
    }
    _getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41528342_41528494_20_40
41528342_41529510_41_60
Title: Sort a array of array of integers lexicographically 
----------------------------------------

int main (void) {
    int A [] [COL_SIZE] = {{1, 2, 3}, {1, 1, 5}, {1, 0, 1}, {1, 2, 1}, {1, 2, 0}};
    qsort (A, sizeof (A) / sizeof (* A), sizeof (int [COL_SIZE]), cmp_rows);
    for (size_t i = 0; i < sizeof (A) / sizeof (*A); i++) {
        for (size_t j = 0; j < COL_SIZE; j++)
            printf ("%d ", A[i][j]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    size_t len;
    int A [] [COL_SIZE] = {{1, 2, 0}, {1, 19, 0}, {1, 19, 0}, {1, 19, 0}, {1, 2, 0}};
    len = sizeof (A) / sizeof (*A);
    printf ("\nBefore:\n");
    print_array (A, len);
    qsort (A, len, sizeof (* A), cmp_func);
    printf ("\nAfter:\n");
    print_array (A, len);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41528342_41529510_8_28
41528342_41530588_11_26
Title: Sort a array of array of integers lexicographically 
----------------------------------------

int cmp_func (const void *a, const void *b) {
    char str1 [STRSIZE], str2 [STRSIZE], temp [STRSIZE];
    size_t i;
    const int *row1 = (const int *) a;
    const int *row2 = (const int *) b;
    *str1 = '\0';
    *str2 = '\0';
    for (i = 0; i < COL_SIZE; i++) {
        sprintf (temp, "%d", row1 [i]);
        strcat (str1, temp);
        sprintf (temp, "%d", row2 [i]);
        strcat (str2, temp);
    }
    return strcmp (str1, str2);
}
----------------------------------------

int cmp_func (const void *va, const void *vb) {
    const int *a = *(constint(*)[COLS]) va;
    const int *b = *(constint(*)[COLS]) vb;
    for (int i = 0; i < COLS; i++) {
        char str1 [20], str2 [20];
        sprintf (str1, "%d", a [i]);
        sprintf (str2, "%d", b [i]);
        int rc = strcmp (str1, str2);
        if (rc != 0)
            return rc;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41529625_41529643_11_34
41529625_41530362_7_26
Title: While loop causing many issues with program 
----------------------------------------

int main () {
    char *answer = malloc (MAX_NAME_SZ);
    ....printf ("\nWould you like to begin? [Y/N]");
    fgets (answer, MAX_NAME_SZ, stdin);
    answerme (answer);
    if (*answer == 'y' || *answer == 'Y') {
        getinfo ();
        printf ("program starting now...\n");
    }
    else if (*answer == 'n' || *answer == 'N') {
        printf ("Thank you, program will close now.\n");
        return 0;
    }
    ...
}
----------------------------------------

int main () {
    char answer [SIZE] = "0";
    printf ("\nWould you like to begin? [Y/N]");
    scanf (" %s", answer);
    if ((strcmp (answer, "y") == 0) || (strcmp (answer, "Y") == 0)) {
        printf ("Answer is y\n");
        printf ("\nprogram starting now...");
        answerme ();
    }
    else {
        printf ("Wrong input..exiting\n");
        exit (1);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41555565_41558959_1_12
41555565_41559522_34_42
Title: Adding struct pointer to a pointer array 
----------------------------------------

void print_hash_tabelle () {
    for (int i = 0; i < MAX_HASH; i++) {
        printf ("%d)\t", i);
        Student *tmp = hash_tabelle[i];
        while (tmp != NULL) {
            printf ("%s (%d)", tmp -> name, tmp -> matnr);
            tmp = tmp->next_student;
        }
        printf ("\n");
    }
}
----------------------------------------

void print_hash_tabelle (void) {
    for (int i = 0; i < MAX_HASH; i++) {
        printf ("%d)\t", i);
        for (Student *p = hash_tabelle[i]; p; p = p->next_student) {
            printf ("%s (%d)\t", p -> name, p -> matnr);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41571939_41572256_3_29
41571939_41573321_11_34
Title: output different elements from two arrays 
----------------------------------------

int main (void) {
    int a [10], b [10], c, n, i, j;
    int counter = 0;
    printf ("enter a number: ");
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        printf ("Enter a[%d]: \n", i + 1);
        scanf ("%d", & a [i]);
    }
    printf ("\n");
    for (j = 0; j < n; j++) {
        printf ("Enter b[%d]: \n", j + 1);
        scanf ("%d", & b [j]);
    }
    for (i = 0; i < n; i++) {
        counter = 0;
        for (j = 0; j < n; j++) {
            if (a[i] != b[j]) {
                counter++;
            }
        }
        if (counter == n) {
            printf ("%d ", a [i]);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int array1 [NNUMBERS], array2 [NNUMBERS];
    size_t n;
    get_array_input (array1, array2, & n);
    printf ("\nFirst array: ");
    print_arrays (array1, n);
    printf ("\nSecond array: ");
    print_arrays (array2, n);
    qsort (array2, n, sizeof (* array2), cmp_func);
    printf ("\nSorted Second array: ");
    print_arrays (array2, n);
    search_elements (array1, array2, n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41579725_41580122_1_14
41579725_41580730_1_33
Title: Implement a function that returns the longest sequence of either 1s or 0s and the first index of it 
----------------------------------------

int longestSequence (int a [], int n, int *begin) {
    int i, count, max_length = 1;
    *begin = 0;
    for (i = 0; i + max_length < n; i += count) {
        for (count = 1; i + count < n && a[i] == a[i + count]; ++count)
            ;
        if (count > max_length) {
            max_length = count;
            *begin = i;
        }
    }
    return max_length;
}
----------------------------------------

int longestSequence (int a [], int n, int *begin) {
    int count = 1;
    int max_length = 1;
    int out_index = 0;
    int i;
    for (i = 1; i < n; i++) {
        if (a[i] == a[i - 1]) {
            count += 1;
        }
        else if (count > max_length) {
            max_length = count;
            out_index = i - count;
            count = 1;
        }
        else {
            count = 1;
        }
    }
    if (count > max_length) {
        max_length = count;
        out_index = i - count;
    }
    *begin = out_index;
    return max_length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41605269_41605338_1_12
41605269_42207150_1_13
Title: How to change arrays using void functions in C? 
----------------------------------------

void squeeze (char s [], char c) {
    int i, j;
    for (i = j = 0; s[i] != '\0'; i++) {
        if (s[i] != c) {
            s[j] = s[i];
            ++j;
        }
    }
    s[j] = '\0';
}
----------------------------------------

void squeeze (char s [], char c) {
    printf ("s=%s\n", s);
    int i, j;
    char new_s [20];
    for (i = j = 0; s[i] != '\0'; i++) {
        if (s [i] != c) {new_s [j] = s [i];
        j++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41628056_41629319_1_16
41628056_41629645_1_22
Title: C - [Error] invalid conversion from 'char' to 'const char*' [-fpermissive] 
----------------------------------------

int main (void) {
    char word [26], reverse [26];
    int length, i;
    printf ("Enter word: ");
    scanf ("%s", & word);
    length = strlen (word);
    for (i = 0; i < length; i++) {
        reverse[i] = word[length - i - 1];
        reverse[i + 1] = '\0';
        printf ("%s\n", reverse);
    }
}
----------------------------------------

int main () {
    char word [26], letter, length;
    int n, c, d;
    char reverse [26];
    char temp [26];
    printf ("Enter word: ");
    scanf ("%s", word);
    length = strlen (word);
    for (int i = 0; i <= length; i++) {
        letter = word[length - i];
        strcat (reverse, & letter);
        n = strlen (reverse);
        for (c = n - 1, d = 0; c >= 0; c--, d++)
            temp[d] = reverse[c];
        temp[d] = '\0';
        printf ("%s\n", temp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41628056_41629319_1_16
41628056_41631985_4_23
Title: C - [Error] invalid conversion from 'char' to 'const char*' [-fpermissive] 
----------------------------------------

int main (void) {
    char word [26], reverse [26];
    int length, i;
    printf ("Enter word: ");
    scanf ("%s", & word);
    length = strlen (word);
    for (i = 0; i < length; i++) {
        reverse[i] = word[length - i - 1];
        reverse[i + 1] = '\0';
        printf ("%s\n", reverse);
    }
}
----------------------------------------

int main (void) {
    char word [26];
    char reverse [26];
    size_t length;
    size_t i;
    printf ("Enter word: ");
    scanf ("%s", word);
    length = strlen (word);
    for (i = 0; i < length; i++) {
        reverse[i] = word[length - i - 1];
    }
    reverse[i] = '\0';
    printf ("Reverse: %s\n", reverse);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41628056_41629645_1_22
41628056_41631985_4_23
Title: C - [Error] invalid conversion from 'char' to 'const char*' [-fpermissive] 
----------------------------------------

int main () {
    char word [26], letter, length;
    int n, c, d;
    char reverse [26];
    char temp [26];
    printf ("Enter word: ");
    scanf ("%s", word);
    length = strlen (word);
    for (int i = 0; i <= length; i++) {
        letter = word[length - i];
        strcat (reverse, & letter);
        n = strlen (reverse);
        for (c = n - 1, d = 0; c >= 0; c--, d++)
            temp[d] = reverse[c];
        temp[d] = '\0';
        printf ("%s\n", temp);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char word [26];
    char reverse [26];
    size_t length;
    size_t i;
    printf ("Enter word: ");
    scanf ("%s", word);
    length = strlen (word);
    for (i = 0; i < length; i++) {
        reverse[i] = word[length - i - 1];
    }
    reverse[i] = '\0';
    printf ("Reverse: %s\n", reverse);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41633025_41638071_81_119
41633025_41638335_9_94
Title: Pipe to sort and back to main 
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        fprintf (stderr, "wrong argument\n");
        return 1;
    }
    int fd_pipe [2];
    pid_t pid = create_pipe_and_fork (fd_pipe);
    if (pid == -1) {
        return 1;
    }
    if (pid != 0) {
        close (fd_pipe [0]);
        FILE *file = fopen (argv[1], "r");
        if (file == NULL) {
            perror ("fopen():");
            close (fd_pipe [1]);
            wait_and_return (pid);
            return 1;
        }
        char buf [4048];
        size_t ret;
        while ((ret = fread (buf, sizeof *buf, sizeof buf / sizeof *buf, file))) {
            write (fd_pipe [1], buf, ret);
        }
        fclose (file);
        close (fd_pipe [1]);
        return wait_and_return (pid);
    }
    else {
        close (fd_pipe [1]);
        return child (fd_pipe[0]);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    int pipe1 [2];
    int pipe2 [2];
    pid_t childpid;
    FILE *fdin;
    if (argc != 2) {
        fprintf (stderr, "Usage: %s file\n", argv [0]);
        exit (1);
    }
    pipe (pipe1);
    pipe (pipe2);
    if ((childpid = fork ()) == -1) {
        perror ("fork");
        exit (1);
    }
    if (childpid != 0) {
        char buf [1024];
        close (pipe1 [0]);
        close (pipe2 [1]);
        fdin = fopen (argv[1], "r");
        if (fdin == 0) {
            fprintf (stderr, "%s: failed to open file '%s'\n", argv [0], argv [1]);
            exit (1);
        }
        int nbytes = fread (buf, 1, sizeof (buf), fdin);
        if (nbytes <= 0) {
            fprintf (stderr, "%s: no data in file '%s'\n", argv [0], argv [1]);
            exit (1);
        }
        fclose (fdin);
        write (pipe1 [1], buf, nbytes);
        close (pipe1 [1]);
    }
    else if (childpid == 0) {
        close (pipe1 [1]);
        close (pipe2 [0]);
        dup2 (pipe2 [1], STDOUT_FILENO);
        dup2 (pipe1 [0], STDIN_FILENO);
        close (pipe2 [1]);
        close (pipe1 [0]);
        execlp ("sort", "sort", (char *) 0);
        fprintf (stderr, "%s: failed to exec 'sort'\n", argv [0]);
        exit (1);
    }
    wait (NULL);
    if (childpid != 0) {
        char buf [1024];
        int nbytes;
        while ((nbytes = read (pipe2[0], buf, sizeof (buf))) > 0)
            printf ("%.*s", nbytes, buf);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41644980_41645334_5_31
41644980_41645577_5_31
Title: How do I extract space separated floating numbers from string into another array in c? 
----------------------------------------

int main (void) {
    char *input1 = get_string ();
    double numbers [100];
    int n;
    char *p = input1;
    char *q;
    for (n = 0; n < 100; n++) {
        numbers[n] = strtod (p, &q);
        if (p == q) {
            break;
        }
        p = q;
    }
    for (int i = 0; i < n; i++) {
        printf ("%f\n", numbers [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    string floats [FLOAT_STRING_N] [FLOAT_STRING_SIZE];
    string input1 = get_string ();
    char *p = input1;
    int count;
    for (count = 0; count < FLOAT_STRING_N; count++) {
        while (isspace ((unsigned char) * p) p ++;
        if (*p == '\0')
            break;
        int i;
        for (i = 0; i < FLOAT_STRING_SIZE - 1; i++) {
            if (isspace ((unsigned char) *p) || *p == '\0')
                break;
            floats[count][i] = *p++;
        }
        floats[count][i] = '\0';
    }
    int count;
    for (int c = 0; c < count; c++) {
        puts (floats [c]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41648403_41648444_6_22
41648403_41648717_7_25
Title: strcmp returning only 0 (palindrom algo bug) 
----------------------------------------

int main (void) {
    char str [MAX_LENGTH];
    char rev [MAX_LENGTH];
    puts ("Enter string (max length 100 chars): ");
    scanf ("%s", str);
    strcpy (rev, str);
    strrev (rev);
    if (strcmp (str, rev) == 0) {
        puts ("Palindrom");
    }
    else {
        puts ("Not Palindrom");
    }
}
----------------------------------------

int main (void) {
    char strArr [MAX_LENGTH], strArrRev [MAX_LENGTH];
    printf ("Enter string (max length 100 chars): ");
    fgets (strArr, MAX_LENGTH, stdin);
    strArr[strcspn (strArr, "\n")] = 0;
    strcpy (strArrRev, strArr);
    int pali = strcmp (strArr, strrev (strArrRev));
    if (pali == PALINDROM_TRUE) {
        printf ("Palindrom\n");
    }
    else {
        printf ("Not Palindrom\n");
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41654612_41654741_19_71
41654612_41654840_18_85
Title: Minumum and Maximum values aren't numbers in the array 
----------------------------------------

int main () {
    int inputNum = 0;
    int arr1 [SIZE];
    memset (& arr1, 0, sizeof (arr1));
    int sum = 0;
    int avg = 0;
    int min = INT_MAX;
    int max = INT_MIN;
    int location1 = 0, location2 = 0;
    srand (time (NULL));
    printf ("Enter an integer between 0 and 1000: ");
    scanf ("%d", & inputNum);
    for (size_t q = 0; q < inputNum; ++q) {
        arr1[q] = rand () % 1001;
    }
    for (size_t j = 0; j < inputNum; ++j) {
        if (arr1[j] > max) {
            max = arr1[j];
            location1 = j;
        }
        if (arr1[j] < min) {
            min = arr1[j];
            location2 = j;
        }
    }
    printf ("min: %6d pos:%4d\n", min, location2);
    printf ("max: %6d pos:%4d\n", max, location1);
    sum = arrSum (arr1, inputNum);
    printf ("sum: %6d\n", sum);
    avg = sum / inputNum;
    printf ("avg: %6d\n\n", avg);
    printf (" Pos   |  Val\n");
    printf ("-------------\n");
    for (size_t i = 0; i < inputNum; ++i) {
        printf ("%zu   |%d\n", i, arr1 [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    srand ((unsigned int) time (NULL));
    printf ("Enter an integer between 0 and 1000: ");
    size_t input_size;
    if (scanf ("%zu", &input_size) != 1) {
        return 1;
    }
    int *input = malloc (input_size * sizeof *input);
    if (input == NULL) {
        return 1;
    }
    for (size_t i = 0; i < input_size; i++) {
        input[i] = rand () % 1001;
    }
    if (input_size < 1) {
        free (input);
        return 1;
    }
    size_t index_min = 0;
    size_t index_max = 0;
    int min = input[index_min];
    int max = input[index_max];
    for (size_t i = 1; i < input_size; i++) {
        if (input[i] > max) {
            max = input[i];
            index_max = i;
        }
        else if (input[i] < min) {
            min = input[i];
            index_min = i;
        }
    }
    printf ("min: %6d pos:%4zu\n", min, index_min);
    printf ("max: %6d pos:%4zu\n", max, index_max);
    int sum = arrSum (input, 0, input_size, 0);
    printf ("sum: %6d\n", sum);
    if (input_size > INT_MAX) {
        free (input);
        return 1;
    }
    int avg = sum / (int) input_size;
    printf ("avg: %6d\n\n", avg);
    printf (" Pos   |  Val\n");
    printf ("-------------\n");
    for (size_t i = 0; i < input_size; i++) {
        printf ("%4zu   |%4d\n", i, input [i]);
    }
    free (input);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41654612_41654741_19_71
41654612_41654877_15_66
Title: Minumum and Maximum values aren't numbers in the array 
----------------------------------------

int main () {
    int inputNum = 0;
    int arr1 [SIZE];
    memset (& arr1, 0, sizeof (arr1));
    int sum = 0;
    int avg = 0;
    int min = INT_MAX;
    int max = INT_MIN;
    int location1 = 0, location2 = 0;
    srand (time (NULL));
    printf ("Enter an integer between 0 and 1000: ");
    scanf ("%d", & inputNum);
    for (size_t q = 0; q < inputNum; ++q) {
        arr1[q] = rand () % 1001;
    }
    for (size_t j = 0; j < inputNum; ++j) {
        if (arr1[j] > max) {
            max = arr1[j];
            location1 = j;
        }
        if (arr1[j] < min) {
            min = arr1[j];
            location2 = j;
        }
    }
    printf ("min: %6d pos:%4d\n", min, location2);
    printf ("max: %6d pos:%4d\n", max, location1);
    sum = arrSum (arr1, inputNum);
    printf ("sum: %6d\n", sum);
    avg = sum / inputNum;
    printf ("avg: %6d\n\n", avg);
    printf (" Pos   |  Val\n");
    printf ("-------------\n");
    for (size_t i = 0; i < inputNum; ++i) {
        printf ("%zu   |%d\n", i, arr1 [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int inputNum;
    int i, q;
    int arr1 [SIZE];
    int sum;
    int avg;
    int min = 1001;
    int max = 0;
    int location1, location2, j = 1;
    srand (time (0));
    printf ("Enter an integer between 0 and 1000: ");
    scanf ("%d", & inputNum);
    for (q = 0; q < inputNum; q++) {
        arr1[q] = rand () % 1001;
    }
    for (j = 0; j < inputNum; j++) {
        if (arr1[j] > max) {
            max = arr1[j];
            location1 = j + 1;
        }
        if (arr1[j] < min) {
            min = arr1[j];
            location2 = j + 1;
        }
    }
    printf ("min: %6d pos:%4d\n", min, location2);
    printf ("max: %6d pos:%4d\n", max, location1);
    sum = arrSum (arr1, inputNum);
    printf ("sum: %6d\n", sum);
    avg = sum / inputNum;
    printf ("avg: %6d\n\n", avg);
    printf (" Pos   |  Val\n");
    printf ("-------------\n");
    for (i = 0; i < inputNum; i++) {
        printf ("%4d   |%4d\n", i, arr1 [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41654612_41654840_18_85
41654612_41654877_15_66
Title: Minumum and Maximum values aren't numbers in the array 
----------------------------------------

int main () {
    srand ((unsigned int) time (NULL));
    printf ("Enter an integer between 0 and 1000: ");
    size_t input_size;
    if (scanf ("%zu", &input_size) != 1) {
        return 1;
    }
    int *input = malloc (input_size * sizeof *input);
    if (input == NULL) {
        return 1;
    }
    for (size_t i = 0; i < input_size; i++) {
        input[i] = rand () % 1001;
    }
    if (input_size < 1) {
        free (input);
        return 1;
    }
    size_t index_min = 0;
    size_t index_max = 0;
    int min = input[index_min];
    int max = input[index_max];
    for (size_t i = 1; i < input_size; i++) {
        if (input[i] > max) {
            max = input[i];
            index_max = i;
        }
        else if (input[i] < min) {
            min = input[i];
            index_min = i;
        }
    }
    printf ("min: %6d pos:%4zu\n", min, index_min);
    printf ("max: %6d pos:%4zu\n", max, index_max);
    int sum = arrSum (input, 0, input_size, 0);
    printf ("sum: %6d\n", sum);
    if (input_size > INT_MAX) {
        free (input);
        return 1;
    }
    int avg = sum / (int) input_size;
    printf ("avg: %6d\n\n", avg);
    printf (" Pos   |  Val\n");
    printf ("-------------\n");
    for (size_t i = 0; i < input_size; i++) {
        printf ("%4zu   |%4d\n", i, input [i]);
    }
    free (input);
}
----------------------------------------

int main () {
    int inputNum;
    int i, q;
    int arr1 [SIZE];
    int sum;
    int avg;
    int min = 1001;
    int max = 0;
    int location1, location2, j = 1;
    srand (time (0));
    printf ("Enter an integer between 0 and 1000: ");
    scanf ("%d", & inputNum);
    for (q = 0; q < inputNum; q++) {
        arr1[q] = rand () % 1001;
    }
    for (j = 0; j < inputNum; j++) {
        if (arr1[j] > max) {
            max = arr1[j];
            location1 = j + 1;
        }
        if (arr1[j] < min) {
            min = arr1[j];
            location2 = j + 1;
        }
    }
    printf ("min: %6d pos:%4d\n", min, location2);
    printf ("max: %6d pos:%4d\n", max, location1);
    sum = arrSum (arr1, inputNum);
    printf ("sum: %6d\n", sum);
    avg = sum / inputNum;
    printf ("avg: %6d\n\n", avg);
    printf (" Pos   |  Val\n");
    printf ("-------------\n");
    for (i = 0; i < inputNum; i++) {
        printf ("%4d   |%4d\n", i, arr1 [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4167728_4167856_1_15
4167728_4168212_52_67
Title: Search a Binary Tree And Print Children of Value 
----------------------------------------

void SearchTree (int num, struct Node *nodePtr) {
    if (nodePtr == NULL)
        return;
    if (NodePtr->Number == num) {
        PrintChild (nodePtr -> left);
        PrintChild (nodePtr -> right);
    }
    else {
        SearchTree (num, nodePtr -> left);
        SearchTree (num, nodePtr -> right);
    }
}
----------------------------------------

void SearchTree (int num, struct Node *nodePtr) {
    if (nodePtr == NULL)
        return;
    if (num == nodePtr->number) {
        if (nodePtr->left != NULL)
            PrintChild (nodePtr->left);
        PrintChild (nodePtr);
        if (nodePtr->right != NULL)
            PrintChild (nodePtr->right);
        printf ("\n");
        return;
    }
    else if (num > nodePtr->number) {
        SearchTree (num, nodePtr -> right);
    }
    else {
        SearchTree (num, nodePtr -> left);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4168244_4169168_4_15
4168244_4170051_6_21
Title: C - split/store string of X length into an array of structs 
----------------------------------------

int main () {
    ST st [SMAX] = {0};
    char *tmp = "For configuration options (arch/xxx/config.in, and all the Config.in files),somewhat different indentation is used.";
    int i = 0, j;
    for (; (st[i++] = *(ST*) tmp).str[SMAX] = 0, strlen (tmp) >= SMAX; tmp += SMAX)
        ;
    for (j = 0; j < i; ++j)
        puts (st[j].str);
    return 0;
}
----------------------------------------

int main () {
    struct st *mystruct;
    char tmp [] = "For configuration options (arch/xxx/config.in, and all the Config.in files),somewhat different indentation is used.";
    size_t max = 20, j = 0;
    size_t alloc = (strlen (tmp) + max - 1) / max;
    mystruct = malloc (alloc * sizeof mystruct);
    if (!mystruct)
        return 1;
    for (j = 0; j < alloc; j++) {
        mystruct[j].str = strndup (tmp +alloc * max, max);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41686990_41687045_1_10
41686990_41687216_1_10
Title: Pass pointer to struct by reference in C 
----------------------------------------

void init (A **a) {
    A *ret = malloc (sizeof *ret);
    if (ret != NULL) {
        ret->a = 3;
        ret->b = 2;
        ret->c = 1;
    }
    *a = ret;
}
----------------------------------------

void init (A **a) {
    A *ret = malloc (sizeof *ret);
    if (ret != NULL) {
        *ret = (A) {3, 2, 1};
        *ret = (A) {
        .a = 3,
        .b = 2,
        .c = 1};
    }
    *a = ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41714320_41716908_3_33
41714320_41717383_5_35
Title: How to read a file with Unicode contents 
----------------------------------------

int main () {
    HANDLE hndlRead;
    WCHAR *szReadBuffer;
    INT fileSize;
    hndlRead = CreateFileW (L "rdp.RDP", GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hndlRead != INVALID_HANDLE_VALUE) {
        fileSize = GetFileSize (hndlRead, NULL);
        szReadBuffer = (WCHAR *) calloc (fileSize + sizeof (WCHAR), 1);
        DWORD nb = 0;
        int nSize = fileSize;
        if (szReadBuffer != NULL) {
            ReadFile (hndlRead, szReadBuffer, nSize, & nb, NULL);
        }
        CloseHandle (hndlRead);
        WCHAR *textwithoutbom = szReadBuffer + 1;
        free (szReadBuffer);
    }
    return 0;
}
----------------------------------------

int main () {
    HANDLE hndlRead;
    OVERLAPPED ol = {0};
    INT fileSize;
    wchar_t *szReadBuffer;
    hndlRead = CreateFileW (L "rdp.RDP", GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hndlRead != INVALID_HANDLE_VALUE) {
        fileSize = GetFileSize (hndlRead, NULL);
        szReadBuffer = (wchar_t *) HeapAlloc (GetProcessHeap (), HEAP_ZERO_MEMORY, (fileSize) * sizeof (wchar_t));
        DWORD nb = 0;
        int nSize = fileSize;
        BOOL bRet;
        if (szReadBuffer != NULL) {
            bRet = ReadFile (hndlRead, szReadBuffer, nSize, &nb, &ol);
            if ((bRet) &&(nb == nSize)) {
                printf ("%02X,%02X... %02X\n", szReadBuffer [0], szReadBuffer [1], szReadBuffer [nb - 1]);
            std :
                : wcout << L "info " << (szReadBuffer + 1) << L " " << nb << std : : endl;
            }
        }
        CloseHandle (hndlRead);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41716738_41717336_4_22
41716738_41717505_6_32
Title: Issue with login function using strcspn and fgets in C 
----------------------------------------

int main () {
    char arr [10];
    char c = 'a';
    int k = 0;
    while (c != 32) {
        c = getch ();
        putch ('*');
        arr[k++] = c;
    }
    printf ("%s", arr);
    return 0;
}
----------------------------------------

int main (void) {
    char username [50] = "", password [50] = "";
    char real_Username [] = "user", real_Password [] = "pass";
    int confirm_User, confirm_Pass;
    printf ("Username ");
    fgets (username, 50, stdin);
    username[strcspn (username, "\n")] = '\0';
    printf ("\n");
    printf ("Password ");
    fgets (password, 50, stdin);
    password[strcspn (password, "\n")] = '\0';
    confirm_User = strcmp (username, real_Username);
    confirm_Pass = strcmp (password, real_Password);
    if (confirm_User == 0 && confirm_Pass == 0) {
        printf ("Correct\n");
    }
    else {
        printf ("Incorrect\n");
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41729517_41731153_4_37
41729517_41740787_39_53
Title: C - sorting two dimensional array of Integers 
----------------------------------------

int main () {
    int colors [64] [2];
    int r;
    int a;
    int b;
    int i;
    for (i = 0; i < 64; ++i) {
        r = rand () % 40;
        colors[i][0] = i;
        colors[i][1] = r;
    }
    for (i = 0; i < 64; ++i) {
        printf ("%d : ", colors [i] [0]);
        printf ("%d\n", colors [i] [1]);
    }
    printf ("--------------------------------------------------------------\n");
    for (i = 0; i < 64; ++i) {
        for (int j = i + 1; j < 64; ++j) {
            if (colors[j][1] < colors[i][1]) {
                a = colors[i][0];
                b = colors[i][1];
                colors[i][0] = colors[j][0];
                colors[i][1] = colors[j][1];
                colors[j][0] = a;
                colors[j][1] = b;
            }
        }
    }
    for (i = 0; i < 64; ++i) {
        printf ("%d : ", colors [i] [0]);
        printf ("%d\n", colors [i] [1]);
    }
}
----------------------------------------

int main (void) {
    int colors [ROWS] [COLS];
    add_numbers (colors, ROWS);
    printf ("\nBefore:\n");
    print_array (colors, ROWS);
    qsort (colors, ROWS, sizeof (* colors), cmp_func);
    printf ("\nAfter:\n");
    print_array (colors, ROWS);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4173090_4236904_1_20
4173090_4257998_3_20
Title: Creating a calculator in C 
----------------------------------------

void main () {
    int a, b, sum, sub, pro, divide;
    char operator;
    clrscr ();
    printf ("enter a value:");
    scanf ("%d", & a);
    printf ("enter another value:");
    scanf ("%d", & b);
    printf ("enter a operator:");
    scanf ("%c", & operator);
    operator == '+' ? printf ("%d,a+b") :;
    getch ();
}
----------------------------------------

void main () {
    float a, b;
    char c;
    printf ("Value 1:");
    scanf ("%f", & a);
    printf ("value 2:");
    scanf ("%f", & b);
    printf ("Enter a operator[ + - * /]\n");
    c = getche ();
    (c == '+') && (printf ("\nAnswer is:%3.2f", a +b));
    (c == '-') && (printf ("\nAnswer is:%3.2f", a -b));
    (c == '*') && (printf ("\nAnswer is:%3.2f", a *b));
    (c == '/') && (printf ("\nAnswer is:%3.2f", a / b));
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41731296_41731546_9_61
41731296_41731936_1_31
Title: Subtlety in strstr? 
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 3) {
        fprintf (sderr, "missing parameters\n");
        exit (1);
    }
    char *fname = argv[1];
    FILE *infile = fopen (fname, "rb");
    if (infile == NULL) {
        fprintf (sderr, "cannot open file %s: %s\n", fname, strerror (errno));
        exit (1);
    }
    char *tag = argv[2];
    size_t tag_len = strlen (tag);
    size_t overlap_len = 0;
    long long pos = 0;
    char *chunk = malloc (CHUNK_SIZE +tag_len - 1);
    if (chunk == NULL) {
        fprintf (sderr, "cannot allocate memory\n");
        exit (1);
    }
    for (;;) {
        size_t chunk_len = overlap_len + fread (chunk +overlap_len, 1, CHUNK_SIZE, infile);
        if (chunk_len < tag_len) {
            break;
        }
        char *tag_location = memmem (chunk, chunk_len, tag, tag_len);
        if (tag_location != NULL) {
            printf ("string found at %lld\n", pos + (tag_location - chunk));
            break;
        }
        else {
            overlap_len = tag_len - 1;
            memmove (chunk, chunk + chunk_len - overlap_len, overlap_len);
            pos += chunk_len - overlap_len;
        }
    }
    fclose (infile);
    free (chunk);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char *fname = argv[1];
    char *tag = argv[2];
    int fd = open (fname, O_RDONLY);
    struct stat sb;
    fstat (fd, & sb);
    char *contents = mmap (NULL, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
    close (fd);
    size_t tag_len = strlen (tag);
    size_t bytes_to_check = 1UL + sb.st_size - tag_len;
    for (size_t ii = 0; ii < bytes_to_check; ii++) {
        if (!memcmp (contents +ii, tag, tag_len)) {
        }
    }
    munmap (contents, sb.st_len);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41776955_41777000_5_30
41776955_41778165_7_24
Title: Check if a string has only numbers in C? 
----------------------------------------

int main () {
    char numbers [10];
    int i, correctNum = 0;
    scanf ("%s", numbers);
    for (i = 0; i < strlen (numbers); ++i) {
        if (!(numbers[i] >= '0' && numbers[i] <= '9')) {
            correctNum = 1;
            break;
        }
    }
    if (correctNum == 1) {
        printf ("That number has a char in it. FIX IT.\n");
    }
    else {
        printf ("All numbers. Good.\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char numbers [MAXNUM];
    char *endptr;
    int number;
    printf ("Enter string: ");
    scanf ("%9s", numbers);
    number = strtol (numbers, &endptr, BASE);
    if (*endptr != '\0' || endptr == numbers) {
        printf ("'%s' contains non-numbers\n", numbers);
    }
    else {
        printf ("'%s' gives %d, which has all numbers\n", numbers, number);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41776955_41777070_4_29
41776955_41778165_7_24
Title: Check if a string has only numbers in C? 
----------------------------------------

int main () {
    char numbers [10];
    int i, correctNum = 0;
    scanf ("%s", numbers);
    for (i = 0; i < 10; i++) {
        if (numbers[i] < 48 || numbers[i] > 57) {
            correctNum = 1;
            break;
        }
    }
    if (correctNum == 1) {
        printf ("That number has a char in it. FIX IT.\n");
    }
    else {
        printf ("All numbers. Good.\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char numbers [MAXNUM];
    char *endptr;
    int number;
    printf ("Enter string: ");
    scanf ("%9s", numbers);
    number = strtol (numbers, &endptr, BASE);
    if (*endptr != '\0' || endptr == numbers) {
        printf ("'%s' contains non-numbers\n", numbers);
    }
    else {
        printf ("'%s' gives %d, which has all numbers\n", numbers, number);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41783081_41783518_7_41
41783081_41790179_3_19
Title: "By default reading which character in the input buffer makes scanf() stop reading a string?" 
----------------------------------------

int main (void) {
    char n [LIMIT + 1] = {'\0'};
    int at = 0;
    int ch = 0;
    printf ("type the text and press enter\n");
    while ((ch = getchar ()) != EOF) {
        if (ch == '\n') {
            if (at) {
                fputs (n, stdout);
                fputc ('\n', stdout);
            }
            at = 0;
            break;
        }
        if (at >= LIMIT || isspace (ch)) {
            if (at) {
                fputs (n, stdout);
                fputc ('\n', stdout);
            }
            at = 0;
        }
        if (isgraph (ch)) {
            n[at] = ch;
            at++;
            n[at] = '\0';
        }
    }
    if (at) {
        fputs (n, stdout);
        fputc ('\n', stdout);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char n [20];
    int c, status;
    for (;;) {
        if ((c = getchar ()) == EOF || c == '\n')
            break;
        ungetc (c, stdin);
        if ((status = scanf ("%19[^ \n]", n)) == 1) {
            printf ("%d %s\n", status, n);
            scanf ("%*c");
        }
        else {
            printf ("stop with status=%d\n", status);
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41784131_41784163_5_21
41784131_41784190_5_21
Title: Random number in C with rand 
----------------------------------------

int main () {
    srand (time (NULL));
    int a = rand () % 36;
    int b = rand () % 36;
    int c = rand () % 36;
    int d = rand () % 36;
    printf ("1 = %d\n", a);
    printf ("2 = %d\n", b);
    printf ("3 = %d\n", c);
    printf ("4 = %d\n", d);
    return 0;
}
----------------------------------------

int main () {
    srand (time (NULL));
    int a = 1 + rand () % 36;
    int b = 1 + rand () % 36;
    int c = 1 + rand () % 36;
    int d = 1 + rand () % 36;
    printf ("1 = %d\n", a);
    printf ("2 = %d\n", b);
    printf ("3 = %d\n", c);
    printf ("4 = %d\n", d);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41793380_41793465_4_22
41793380_41793853_5_25
Title: Writing String to text file in C leaves bits of characters off 
----------------------------------------

int main () {
    FILE *fp = fopen ("/home/matthew/Desktop/BBE.txt", "w");
    if (fp == NULL) {
        printf ("Error opening file!\n");
        exit (1);
    }
    char comment [100];
    fp = fopen ("file.txt", "w");
    printf ("Enter, String: ");
    scanf ("%s", comment);
    fputs (comment, fp);
    fclose (fp);
}
----------------------------------------

int main () {
    FILE *fp;
    char comment [100] = {0};
    fp = fopen ("tempfile.txt", "w");
    if (fp == NULL) {
        printf ("Error opening file!\n");
        exit (1);
    }
    printf ("Enter String: ");
    gets (comment);
    fwrite (comment, sizeof (comment), 1, fp);
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41796762_41799761_7_22
41796762_41799766_1_29
Title: C hex character array to string representation 
----------------------------------------

int main () {
    char arr [4];
    arr[0] = 0x11;
    arr[1] = 0xc0;
    arr[2] = 0x0c;
    arr[3] = 0x00;
    char *str;
    str = malloc (32);
    sprintf (str, "%02x%02x%02x%02x", INT (arr [0]), INT (arr [1]), INT (arr [2]), INT (arr [3]));
    puts (str);
}
----------------------------------------

int main () {
    char arr [4];
    arr[0] = 0x11;
    arr[1] = 0xc0;
    arr[2] = 0x0c;
    arr[3] = 0x00;
    size_t len = sizeof (arr) / sizeof (*arr);
    char *str = (char *) malloc (len *2 + 1);
    for (size_t i = 0; i < len; i++) {
        const static char table [] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        unsigned char c = (unsigned char) (arr[i]);
        unsigned int lowbyte = c & 0x0f;
        unsigned int highbyte = (c >> 4) & 0x0f;
        str[2 * i] = table[highbyte];
        str[2 * i + 1] = table[lowbyte];
    }
    str[2 * len] = '\0';
    printf ("%s\n", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41815919_41816207_1_23
41815919_41816260_1_19
Title: Nested Loop Unrolling in C 
----------------------------------------

void transpose (int dim, int *src, int *dst) {
    int i, j;
    for (i = 0; i <= dim - 8; i += 8) {
        for (j = 0; j < dim; j++) {
            dst[j * dim + (i + 0)] = src[(i + 0) * dim + j];
            dst[j * dim + (i + 1)] = src[(i + 1) * dim + j];
            dst[j * dim + (i + 2)] = src[(i + 2) * dim + j];
            dst[j * dim + (i + 3)] = src[(i + 3) * dim + j];
            dst[j * dim + (i + 4)] = src[(i + 4) * dim + j];
            dst[j * dim + (i + 5)] = src[(i + 5) * dim + j];
            dst[j * dim + (i + 6)] = src[(i + 6) * dim + j];
            dst[j * dim + (i + 7)] = src[(i + 7) * dim + j];
        }
    }
    for (; i < dim; i++)
        for (j = 0; j < dim; j++)
            dst[j * dim + i] = src[i * dim + j];
}
----------------------------------------

void transpose (int dim, const int *src, int *dst) {
    if (dim == 3) {
        dst[0 * 3 + 0] = src[0 * 3 + 0];
        dst[0 * 3 + 1] = src[1 * 3 + 0];
        dst[0 * 3 + 2] = src[2 * 3 + 0];
        dst[1 * 3 + 0] = src[0 * 3 + 1];
        dst[1 * 3 + 1] = src[1 * 3 + 1];
        dst[1 * 3 + 2] = src[2 * 3 + 1];
        dst[2 * 3 + 0] = src[0 * 3 + 2];
        dst[2 * 3 + 1] = src[1 * 3 + 2];
        dst[2 * 3 + 2] = src[2 * 3 + 2];
    }
    else {
        for (int i = 0; i < dim; i++) {
            for (int j = 0; j < dim; j++) {
                dst[j * dim + i] = src[i * dim + j];
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41815919_41816207_1_23
41815919_41817120_1_49
Title: Nested Loop Unrolling in C 
----------------------------------------

void transpose (int dim, int *src, int *dst) {
    int i, j;
    for (i = 0; i <= dim - 8; i += 8) {
        for (j = 0; j < dim; j++) {
            dst[j * dim + (i + 0)] = src[(i + 0) * dim + j];
            dst[j * dim + (i + 1)] = src[(i + 1) * dim + j];
            dst[j * dim + (i + 2)] = src[(i + 2) * dim + j];
            dst[j * dim + (i + 3)] = src[(i + 3) * dim + j];
            dst[j * dim + (i + 4)] = src[(i + 4) * dim + j];
            dst[j * dim + (i + 5)] = src[(i + 5) * dim + j];
            dst[j * dim + (i + 6)] = src[(i + 6) * dim + j];
            dst[j * dim + (i + 7)] = src[(i + 7) * dim + j];
        }
    }
    for (; i < dim; i++)
        for (j = 0; j < dim; j++)
            dst[j * dim + i] = src[i * dim + j];
}
----------------------------------------

void transpose (int dim, int *src, int *dst) {
    int dstIndex = 0;
    int srcIndex = 0;
    int total = dim * dim;
    int unrolled = dim / 4;
    int dimx0 = dim * 0;
    int dimx1 = dim * 1;
    int dimx2 = dim * 2;
    int dimx3 = dim * 3;
    int dimx4 = dim * 4;
    int i = 0;
    int j = 0;
    for (j = 0; j < dim; j++) {
        for (i = 0; i < unrolled; i++) {
            dst[dstIndex + 0] = src[srcIndex + dimx0];
            dst[dstIndex + 1] = src[srcIndex + dimx1];
            dst[dstIndex + 2] = src[srcIndex + dimx2];
            dst[dstIndex + 3] = src[srcIndex + dimx3];
            dstIndex += 4;
            srcIndex += dimx4;
        }
        for (i = unrolled; i < dim; i++) {
            dst[dstIndex] = src[srcIndex];
            dstIndex += 1;
            srcIndex += dim;
        }
        srcIndex %= total;
        srcIndex += 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41815919_41816260_1_19
41815919_41817120_1_49
Title: Nested Loop Unrolling in C 
----------------------------------------

void transpose (int dim, const int *src, int *dst) {
    if (dim == 3) {
        dst[0 * 3 + 0] = src[0 * 3 + 0];
        dst[0 * 3 + 1] = src[1 * 3 + 0];
        dst[0 * 3 + 2] = src[2 * 3 + 0];
        dst[1 * 3 + 0] = src[0 * 3 + 1];
        dst[1 * 3 + 1] = src[1 * 3 + 1];
        dst[1 * 3 + 2] = src[2 * 3 + 1];
        dst[2 * 3 + 0] = src[0 * 3 + 2];
        dst[2 * 3 + 1] = src[1 * 3 + 2];
        dst[2 * 3 + 2] = src[2 * 3 + 2];
    }
    else {
        for (int i = 0; i < dim; i++) {
            for (int j = 0; j < dim; j++) {
                dst[j * dim + i] = src[i * dim + j];
            }
        }
    }
}
----------------------------------------

void transpose (int dim, int *src, int *dst) {
    int dstIndex = 0;
    int srcIndex = 0;
    int total = dim * dim;
    int unrolled = dim / 4;
    int dimx0 = dim * 0;
    int dimx1 = dim * 1;
    int dimx2 = dim * 2;
    int dimx3 = dim * 3;
    int dimx4 = dim * 4;
    int i = 0;
    int j = 0;
    for (j = 0; j < dim; j++) {
        for (i = 0; i < unrolled; i++) {
            dst[dstIndex + 0] = src[srcIndex + dimx0];
            dst[dstIndex + 1] = src[srcIndex + dimx1];
            dst[dstIndex + 2] = src[srcIndex + dimx2];
            dst[dstIndex + 3] = src[srcIndex + dimx3];
            dstIndex += 4;
            srcIndex += dimx4;
        }
        for (i = unrolled; i < dim; i++) {
            dst[dstIndex] = src[srcIndex];
            dstIndex += 1;
            srcIndex += dim;
        }
        srcIndex %= total;
        srcIndex += 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41820523_41821442_8_33
41820523_41865484_7_65
Title: Using strstr to find four different partial words 
----------------------------------------

int main (void) {
    item cursor = "", haystack [] = {"TP1", "OP0", "OP1", "OP2", "TP0", "DP3", "OOO"};
    size_t size = fread (cursor, sizeof cursor - 1, 1, stdin), nelem = sizeof haystack / sizeof *haystack;
    int c = 0, e = !size;
    qsort (haystack, nelem, sizeof * haystack, item_cmp);
    do {
        if (bsearch (cursor, haystack, nelem, sizeof *haystack, item_cmp)) {
            printf ("match found for %s\n", cursor);
        }
        memmove (cursor, cursor + 1, sizeof cursor - 1);
        if (!e) {
            c = fgetc (stdin);
            e = c < 0 && feof (stdin);
        }
        cursor[size] = e || c == '\n' ? '\0' : c;
        size -= e;
    }
    while (size);
    exit (0);
}
----------------------------------------

int main (void) {
    FILE *file1, *file2;
    char parts [MAX_LINE_LENGTH + 1] = "startingvaluebeforechange";
    char TP2 [4] = "TP2";
    char DP3 [4] = "DP3";
    char MOP1 [4] = "OP1";
    char MOP2 [4] = "OP2";
    char Equal [2] = "=";
    char TP2Temp [MAX_LINE_LENGTH];
    char TP2Equal [MAX_LINE_LENGTH];
    char DP3Temp [MAX_LINE_LENGTH];
    char DP3Equal [MAX_LINE_LENGTH];
    char MOP1Temp [MAX_LINE_LENGTH];
    char MOP1Equal [MAX_LINE_LENGTH];
    char MOP2Temp [MAX_LINE_LENGTH];
    char MOP2Equal [MAX_LINE_LENGTH];
    file1 = fopen ("input.txt", "r");
    file2 = fopen ("output.txt", "w");
    if (file1 == NULL || file2 == NULL) {
        exit (1);
    }
    while (fgets (parts, sizeof (parts), file1) != NULL) {
        int len = strlen (parts);
        if (parts[len - 1] == '\n') {
            parts[len - 1] = '\0';
        }
        if (strstr (parts, TP2) != NULL) {
            strcpy (TP2Temp, strstr (parts, TP2));
            strcpy (TP2Equal, strstr (TP2Temp, Equal));
            TP2Equal[strlen (TP2Equal) - 2] = '\0';
            fprintf (file2, "%s", TP2Equal + 2);
        }
        if (strstr (parts, DP3) != NULL) {
            strcpy (DP3Temp, strstr (parts, DP3));
            strcpy (DP3Equal, strstr (DP3Temp, Equal));
            DP3Equal[strlen (DP3Equal) - 1] = '\0';
            fprintf (file2, "\t%s", DP3Equal + 1);
        }
        if (strstr (parts, MOP1) != NULL) {
            strcpy (MOP1Temp, strstr (parts, MOP1));
            strcpy (MOP1Equal, strstr (MOP1Temp, Equal));
            MOP1Equal[strlen (MOP1Equal) - 1] = '\0';
            fprintf (file2, "\t%s", MOP1Equal + 1);
        }
        if (strstr (parts, MOP2) != NULL) {strcpy (MOP2Temp, strstr (parts, MOP2));
        strcpy (MOP2Equal, strstr (MOP2Temp, Equal));
        fprintf (file2, "\t%s", MOP2Equal + 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41833988_41834515_15_36
41833988_41834534_1_25
Title: C Fibonacci Sequence in Array Segmentation Fault 
----------------------------------------

void fib (int **seq, int n) {
    *seq = malloc (sizeof (int) * n);
    if (n == 1) {
        (*seq)[0] = 0;
    }
    if (n == 2) {
        (*seq)[0] = 0;
        (*seq)[1] = 1;
    }
    if (n >= 3) {
        (*seq)[0] = 0;
        (*seq)[1] = 1;
        (*seq)[2] = 1;
        for (int i = 3; i < n; i++) {
            (*seq)[i] = (*seq)[i - 1] + (*seq)[i - 2];
        }
    }
}
----------------------------------------

void fib (int *seq, int n) {
    if (n == 1) {
        seq[0] = 0;
    }
    if (n == 2) {
        seq[0] = 0;
        seq[1] = 1;
    }
    if (n >= 3) {
        seq[0] = 0;
        seq[1] = 1;
        seq[2] = 1;
        for (int i = 3; i < n; i++) {
            seq[i] = seq[i - 1] + seq[i - 2];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41843382_41843766_1_52
41843382_41844267_41_87
Title: stack smashing in string and infinite loop 
----------------------------------------

void split (char str1 [21]) {
    int i, j, k, ans, n;
    char strx [7], stry [7], strz [7];
    printf ("\n\n*    *    *    *    *    split    *    *    *    *    *\n\n");
    for (i = 0; i < 21;) {
        for (n = 0; j <= 7; n++) {
            strx[j] = str1[i];
            i = i + 1;
            stry[j] = str1[i];
            i = i + 1;
            strz[j] = str1[i];
            i = i + 1;
            j = j + 1;
        }
    }
    printf ("enter the group\n");
    scanf ("%d", & ans);
    switch (ans) {
    case 1 :
        strcat (stry, strx);
        strcat (stry, strz);
        strcpy (mstr, stry);
        break;
    case 2 :
        strcat (strx, stry);
        strcat (strx, strz);
        strcpy (mstr, strx);
        break;
    case 3 :
        strcat (strx, strz);
        strcat (strx, stry);
        strcpy (mstr, strx);
        break;
    default :
        printf ("invalid\n");
    }
    printf ("\n mstr values\n");
    for (k = 0; k < 21; k++) {
        printf ("%d\t", mstr [k]);
    }
}
----------------------------------------

void split (char str1 [22]) {
    int i, j, k, ans;
    char strx [8], stry [8], strz [8];
    printf ("\n\n*    *    *    *    *    split    *    *    *    *    *\n\n");
    for (i = 0, j = 0; j < 7; j++, i += 3) {
        strx[j] = str1[i];
        stry[j] = str1[i + 1];
        strz[j] = str1[i + 2];
    }
    strx[j] = '\0';
    stry[j] = '\0';
    strz[j] = '\0';
    printf ("enter    the    group\n");
    scanf ("%d", & ans);
    switch (ans) {
    case 1 :
        strcpy (str1, stry);
        strcat (str1, strx);
        strcat (str1, strz);
        break;
    case 2 :
        strcpy (str1, strx);
        strcat (str1, stry);
        strcat (str1, strz);
        break;
    case 3 :
        strcpy (str1, strx);
        strcat (str1, strz);
        strcat (str1, stry);
        break;
    default :
        printf ("invalid\n");
    }
    printf ("\n str1 values\n");
    for (k = 0; k < 21; k++) {
        printf ("%d\t", str1 [k]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41853360_41853486_1_21
41853360_41854391_4_25
Title: String array prints out trash values 
----------------------------------------

void deleteDuplicates (char string [], int *length) {
    for (int i = 0; i < *length; i++) {
        for (int j = i + 1; j < *length;) {
            if (string[j] == string[i]) {
                for (int k = j; k < *length; k++) {
                    string[k] = string[k + 1];
                }
                *length--;
            }
            else {
                j++;
            }
        }
    }
}
----------------------------------------

void deleteDuplicates (char string [], int *length) {
    int p = 1;
    int f = 0;
    for (int i = 1; i < *length; i++) {
        f = 0;
        for (int j = 0; j < i; j++) {
            if (string[j] == string[i]) {
                f = 1;
                break;
            }
        }
        if (!f)
            string[p++] = string[i];
    }
    string[p] = '\0';
    *length = p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41853776_41854622_1_16
41853776_41854725_5_26
Title: C Function Returning a Pointer to a Pointer 
----------------------------------------

char **parity_strings (const char *s) {
    int len = strlen (s);
    char **lst = malloc (sizeof (char *) * 2);
    for (i = 0; i < 2; i++) {
        lst[i] = malloc ((len + 3) / 2);
    }
    char *even = lst[0], *odd = lst[1];
    for (;;) {
        *even++ = *s++;
        if (*s == '\0')
            break;
        *odd++ = *s++;
        if (*s == '\0')
            break;
    }
    *even = *odd = '\0';
    return lst;
}
----------------------------------------

char **parity_strings (const char *s) {
    size_t len = strlen (s);
    char **lst = malloc (2 * sizeof (char *));
    lst[0] = (char *) malloc ((len + 1) / 2 + 1);
    lst[1] = (char *) malloc (len / 2 + 1);
    size_t i = 0;
    for (; i < len; i++) {
        lst[i % 2][i / 2] = s[i];
    }
    lst[i % 2][i / 2] = '\0';
    ++i;
    lst[i % 2][i / 2] = '\0';
    return lst;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41854503_41855164_1_25
41854503_41855177_1_15
Title: Linked List output not showing correctly 
----------------------------------------

void insert_sorted (List **head, int value) {
    List *temp = NULL;
    List *node = (List *) malloc (sizeof (List));
    node->data = value;
    node->next = NULL;
    if (*head == NULL || (*head)->data >= value) {
        node->next = *head;
        *head = node;
    }
    else {
        temp = *head;
        while (temp->next != NULL) {
            if ((temp->next)->data > value) {
                node->next = temp->next;
                temp->next = node;
                return;
            }
            else
                temp = temp->next;
        }
        temp->next = node;
    }
}
----------------------------------------

void insert_sorted (List **head, int value) {
    List *node = malloc (sizeof *node);
    node->data = value;
    for (; *head; head = &(*head)->next) {
        if ((*head)->data > value)
            break;
    }
    node->next = *head;
    *head = node;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41865514_41866661_9_41
41865514_41866889_7_61
Title: Check if stdin pipe is empty in C 
----------------------------------------

int main (int argc, char **argv []) {
    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            if (feof (stdin)) {
                printf ("eof\n");
            }
            char c = getchar ();
            if (c == '\n') {
                printf ("newline\n");
            }
            else if (isspace (c)) {
                printf ("advance and discard whiitespace\n");
            }
            else {
                ungetc (c, stdin);
                printf ("ungetc\n");
            }
            scanf ("%d", & arr [i] [j]);
            printf ("got %d\n", arr [i] [j]);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    size_t r = 3;
    size_t c = 5;
    size_t i, j;
    char buffer [BUF_SIZE];
    char *token;
    char *tail;
    const char delims [] = " \t\r\n";
    int arr [r] [c];
    int temp_val;
    printf ("Enter rows of %zu data elements:\n", c);
    for (i = 0; i < r; i++) {
        j = 0;
        if (fgets (buffer, BUF_SIZE, stdin) == NULL) {
            perror ("Error in fgets()");
            exit (EXIT_FAILURE);
        }
        token = strtok (buffer, delims);
        while (token != NULL) {
            temp_val = strtol (token, &tail, 10);
            if (*tail == '\0') {
                arr[i][j] = temp_val;
                ++j;
            }
            else {
                j = 0;
                break;
            }
            if (j > c) {
                break;
            }
            token = strtok (NULL, delims);
        }
        if (j != c) {
            printf ("insufficient datapoints\n");
            --i;
        }
    }
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf ("%5d", arr [i] [j]);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41867101_41867377_3_13
41867101_41867608_3_20
Title: print each word in new line with removing extra space in c programming 
----------------------------------------

int main () {
    char str [] = "I am joe";
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == ' ')
            str[i] = '\n';
    }
    printf ("%s\n", str);
    return 0;
}
----------------------------------------

int main () {
    int i = 0;
    char str [] = "I am joe";
    while (str[i] != '\0') {
        if (str[i] == ' ')
            printf ("\n");
        else
            printf ("%c", str[i]);
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41897606_41897852_1_17
41897606_41897858_1_19
Title: How do I implement binary search for an array of integers? 
----------------------------------------

bool search (int value, int array [], int n) {
    int left = 0;
    int right = n - 1;
    int middle;
    while (left <= right) {
        middle = (left + right) / 2;
        if (value > array[middle])
            left = middle + 1;
        else if (value < array[middle])
            right = middle - 1;
        else
            return true;
    }
    return false;
}
----------------------------------------

bool search (int value, int array [], int n) {
    int left = 0;
    int right = n - 1;
    int middle = left + (right - left) / 2;
    while (right >= left) {
        if (array[middle] == value)
            return true;
        else if (array[middle] > value)
            right = middle - 1;
        else if (array[middle] < value)
            left = middle + 1;
        middle = (left + right) / 2;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41900680_41900852_12_25
41900680_41900955_9_22
Title: Changing the address of an element in a char* array? C 
----------------------------------------

int main (void) {
    char *words [3] = {NULL};
    words[0] = "LOL0";
    words[1] = "LOL1";
    words[2] = "LOL2";
    test (& words [0]);
    printf ("%s\n%s\n%s", words [0], words [1], words [2]);
    return 0;
}
----------------------------------------

int main (void) {
    char *words [3] = {NULL};
    words[0] = "LOL0";
    words[1] = "LOL1";
    words[2] = "LOL2";
    test (& words [1]);
    printf ("%s\n%s\n%s", words [0], words [1], words [2]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41902705_41902906_4_24
41902705_41903684_3_59
Title: Printing values of an Array that are in odd numbers of columns and rows 
----------------------------------------

int main (int argc, char *argv []) {
    int r, c, i, j;
    printf ("Number of rows: ");
    fflush (stdout);
    scanf ("%d", & r);
    printf ("Number of columns: ");
    scanf ("%d", & c);
    int A [r] [c];
    printf ("Enter your numbers\n");
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++)
            scanf ("%d", &A[i][j]);
    }
    for (i = 1; i < r; i += 2) {
        printf ("\n\t");
        for (j = 1; j < c; j += 2)
            printf ("%d ", A[i][j]);
    }
}
----------------------------------------

int main (void) {
    int r, c, i, j;
    for (;;) {
        int rtn = 0;
        printf ("Number of rows: ");
        if ((rtn = scanf ("%d", &r)) != 1 || r < 1) {
            if (rtn == EOF) {
                putchar ('\n');
                return 1;
            }
            fprintf (stderr, "error: invalid number of rows provided.\n");
        }
        else
            break;
    }
    for (;;) {
        int rtn = 0;
        printf ("Number of columns: ");
        if ((rtn = scanf ("%d", &c)) != 1 || c < 1) {
            if (rtn == EOF) {
                putchar ('\n');
                return 1;
            }
            fprintf (stderr, "error: invalid number of columns provided.\n");
        }
        else
            break;
    }
    int A [r] [c];
    printf ("Enter your numbers\n");
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++)
            if (scanf ("%d", &A[i][j]) != 1) {
                fprintf (stderr, "error: invalid array input.\n");
                return 1;
            }
    }
    for (i = 0; i < r; i++) {
        if (i & 0x1) {
            putchar ('\n');
            continue;
        }
        for (j = 0; j < c; j++)
            if (!(j & 0x1))
                printf ("%2d  ", A[i][j]);
            else
                printf ("__  ");
        putchar ('\n');
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41907994_41908117_1_22
41907994_41908206_1_15
Title: Can't seem to get a char array to leave a function and be usable in main 
----------------------------------------

void halfstring (char stringIn [], char stringOut []) {
    int i = 0, k = 0;
    int modi;
    while (stringIn[i] != '\0') {
        if (i % 2 != 0) {
            stringOut[k] = stringIn[i];
            k++;
        }
        i++;
    }
    stringOut[k] = '\0';
}
----------------------------------------

void halfstring (char stringIn [], char stringOut []) {
    int i = 0;
    int n = 0;
    while (stringIn[i] != '\0') {
        if (i % 2 != 0) {
            stringOut[n++] = stringIn[i];
        }
        i++;
    }
    stringOut[n] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41911126_41911329_14_30
41911126_41911715_6_23
Title: HourGlass Star Pattern program in C 
----------------------------------------

void main () {
    int star, space, i, j;
    printf ("Enter number:");
    scanf ("%d", & star);
    j = star / 2;
    i = star;
    space = 0;
    while (space < j || star > 0) {
        print (space, star);
        space = space + 1;
        star = star - 2;
    }
    space = j - 1;
    star = 3;
    while (space > 0 || star <= i) {
        print (space, star);
        space = space - 1;
        star = star + 2;
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int a = 0;
    scanf ("%d", & a);
    int i = 0;
    char *asterisk = malloc (sizeof (char) * a);
    memset (asterisk, '*', a * sizeof (char));
    while (i < a) {
        if (i <= a / 2)
            printf ("%*.*s\n", a -i, a -2 * i, asterisk);
        else
            printf ("%*.*s\n", i +1, 2 * (i + 1) - a, asterisk);
        i++;
    }
    free (asterisk);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41911126_41911329_14_30
41911126_41912620_2_33
Title: HourGlass Star Pattern program in C 
----------------------------------------

void main () {
    int star, space, i, j;
    printf ("Enter number:");
    scanf ("%d", & star);
    j = star / 2;
    i = star;
    space = 0;
    while (space < j || star > 0) {
        print (space, star);
        space = space + 1;
        star = star - 2;
    }
    space = j - 1;
    star = 3;
    while (space > 0 || star <= i) {
        print (space, star);
        space = space - 1;
        star = star + 2;
    }
}
----------------------------------------

void main () {
    int i, j, n;
    printf ("Enter Odd value for n : ");
    scanf ("%d", & n);
    for (i = n / 2 + 1; i > 1; i--) {
        for (j = i; j < n; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            printf ("*");
        }
        printf ("\n");
    }
    for (i = 1; i <= n / 2 + 1; i++) {
        for (j = i; j < n; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            printf ("*");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41911126_41911715_6_23
41911126_41912620_2_33
Title: HourGlass Star Pattern program in C 
----------------------------------------

int main (int argc, char *argv []) {
    int a = 0;
    scanf ("%d", & a);
    int i = 0;
    char *asterisk = malloc (sizeof (char) * a);
    memset (asterisk, '*', a * sizeof (char));
    while (i < a) {
        if (i <= a / 2)
            printf ("%*.*s\n", a -i, a -2 * i, asterisk);
        else
            printf ("%*.*s\n", i +1, 2 * (i + 1) - a, asterisk);
        i++;
    }
    free (asterisk);
    return 0;
}
----------------------------------------

void main () {
    int i, j, n;
    printf ("Enter Odd value for n : ");
    scanf ("%d", & n);
    for (i = n / 2 + 1; i > 1; i--) {
        for (j = i; j < n; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            printf ("*");
        }
        printf ("\n");
    }
    for (i = 1; i <= n / 2 + 1; i++) {
        for (j = i; j < n; j++) {
            printf (" ");
        }
        for (j = 1; j <= (2 * i - 1); j++) {
            printf ("*");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41920089_41920230_3_21
41920089_41920687_6_34
Title: right left shift bits in C 
----------------------------------------

int main () {
    uint32_t code = 0xCDBAFFEE;
    uint64_t bit32R = ((uint64_t) code) >> 32;
    uint16_t bit16R = code >> 16;
    uint8_t bit8R = code >> 8;
    uint8_t bit0R = code >> 0;
    uint64_t bit32L = ((uint64_t) code) << 32;
    uint16_t bit16L = code << 16;
    uint8_t bit8L = code << 8;
    uint8_t bit0L = code << 0;
    printf ("Right shift:\nbit32R %llx\nbit16R %x\nbit8R %x\nbit0R %x\n\n", bit32R, bit16R, bit8R, bit0R);
    printf ("Leftt shift:\nbit32L %llx\nbit16L %x\nbit8L %x\nbit0L %x", bit32L, bit16L, bit8L, bit0L);
}
----------------------------------------

int main (void) {
    uint32_t code = 0xCDBAFFEE;
    uint64_t bit32R = (uint64_t) code >> 32;
    uint16_t bit16R = code >> 16;
    uint8_t bit8R = code >> 8;
    uint8_t bit0R = code >> 0;
    uint64_t bit32L = (uint64_t) code << 32;
    uint16_t bit16L = code << 16;
    uint8_t bit8L = code << 8;
    uint8_t bit0L = code << 0;
    printf ("Right shift:\n" "bit32R %.16" PRIx64 "\n" "bit16R %" PRIx16 "\n" "bit8R %" PRIx8 "\n" "bit0R %" PRIx8 "\n\n", bit32R, bit16R, bit8R, bit0R);
    printf ("Left shift:\n" "bit32L %.16" PRIx64 "\n" "bit16L %" PRIx16 "\n" "bit8L %" PRIx8 "\n" "bit0L %" PRIx8 "\n\n", bit32L, bit16L, bit8L, bit0L);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41958460_41959948_13_54
41958460_41960810_10_62
Title: Get line of regex match in C 
----------------------------------------

int main (int argc, const char *argv []) {
    char *str = strdup ("aaaaaaa match aaaaaaaaaaaaaaaaaaaa\n" "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n" "cc match ccccccccccccccccccccccccc");
    match_t *head = NULL;
    match_t *tail = NULL;
    char *c = str;
    regex_t regex;
    regmatch_t match;
    regcomp (& regex, "match", REG_EXTENDED);
    int prev = 0;
    while (regexec (&regex, str, 1, &match, 0) != REG_NOMATCH) {
        int beg = match.rm_so;
        int end = match.rm_eo;
        str = str + end + 1;
        match_t *match = malloc (sizeof (match_t));
        match->beg = beg + prev;
        match->next = NULL;
        prev += end + 1;
        if (head == NULL) {
            head = match;
            tail = match;
        }
        else {
            tail->next = match;
            tail = match;
        }
    }
    int line = 0;
    int i = 0;
    for (i = 0; c[i] != '\0' && head != NULL; i++) {
        if (c[i] == '\n') {
            line++;
        }
        else if (head->beg == i) {
            printf ("Match on line: %d\n", line);
            match_t *tmp = head->next;
            free (head);
            head = tmp;
        }
    }
    free (str);
    return 0;
}
----------------------------------------

int main (void) {
    char str [] = "aaaaaaa match aaaaaaaaaaaaaaaaaaaa\n" "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n" "cc match ccccccccccccccccccccccccc";
    const char *key = "match";
    const char *delim1 = "\n";
    const char *delim2 = " ";
    char *pattern;
    size_t numlines = 0, count = 0;
    for (size_t i = 0; str[i]; i++) {
        if (str[i] == '\n') {
            numlines++;
        }
    }
    line_t *lines = malloc ((numlines + 1) * sizeof (line_t));
    if (!lines) {
        printf ("Cannot allocate %zu members\n", numlines + 1);
        exit (EXIT_FAILURE);
    }
    pattern = strtok (str, delim1);
    while (pattern != NULL) {
        lines[count].str = malloc (strlen (pattern) +1);
        if (!lines[count].str) {
            printf ("Cannot allocate %zu bytes\n", strlen (pattern) + 1);
            exit (EXIT_FAILURE);
        }
        strcpy (lines [count].str, pattern);
        lines[count].lineno = count + 1;
        count++;
        pattern = strtok (NULL, delim1);
    }
    for (size_t i = 0; i < count; i++) {
        pattern = strtok (lines[i].str, delim2);
        while (pattern != NULL) {
            if (strcmp (pattern, key) == 0) {
                printf ("pattern '%s' found on line %zu\n", key, lines [i].lineno);
            }
            pattern = strtok (NULL, delim2);
        }
        free (lines [i].str);
        lines[i].str = NULL;
    }
    free (lines);
    lines = NULL;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41966954_41967588_5_30
41966954_41969176_12_26
Title: Reversing String in C for loop error 
----------------------------------------

int main () {
    const char *strs [] = {"racecar", "radar", "hello", "world"};
    static int i;
    char res [] = "";
    int length = (int) sizeof (strs) / sizeof (char *);
    for (i = 0; i < length; i++) {
        printf ("i is %d\n", i);
        revString (& res [0], strs [i]);
        printf ("i is now %d\n", i);
        if (strcmp (res, strs[i]) == 0) {
            printf ("Is a palindrome");
        }
        else {
            printf ("Not a palindrome");
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char *strs [] = {"racecar", "radar", "hello", "world"};
    char res [20];
    for (size_t i = 0; i < sizeof (strs) / sizeof (*strs); i++) {
        revString (res, strs [i]);
        if (strcmp (res, strs[i]) == 0) {
            printf ("Is a palindrome\n");
        }
        else {
            printf ("Not a palindrome\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41986135_41986433_1_24
41986135_41987323_1_22
Title: Char array rotation error in C - can't see reason why 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    char ar [n];
    char temp [n];
    for (int i = 0; i < n; i++) {
        scanf ("%c", & ar [i]);
    }
    int i;
    temp[0] = ar[0];
    getchar ();
    for (int i = 0; i < (n - 1); i++) {
        ar[0 + i] = ar[1 + i];
    }
    ar[n - 1] = temp[0];
    for (int i = 0; i < n; i++) {
        printf ("%c", ar [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n;
    scanf ("%d", & n);
    char ar [n];
    char temp;
    for (int i = 0; i < n; i++) {
        scanf (" %c", & ar [i]);
    }
    int i;
    temp = ar[0];
    for (i = 0; i < n - 1; i++) {
        ar[i] = ar[i + 1];
    }
    ar[n - 1] = temp;
    for (int i = 0; i < n; i++) {
        printf ("%c", ar [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41986135_41986433_1_24
41986135_41987708_22_41
Title: Char array rotation error in C - can't see reason why 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    char ar [n];
    char temp [n];
    for (int i = 0; i < n; i++) {
        scanf ("%c", & ar [i]);
    }
    int i;
    temp[0] = ar[0];
    getchar ();
    for (int i = 0; i < (n - 1); i++) {
        ar[0 + i] = ar[1 + i];
    }
    ar[n - 1] = temp[0];
    for (int i = 0; i < n; i++) {
        printf ("%c", ar [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    uint8_t n;
    scanf ("%d", & n);
    fflush (stdout);
    char arr [n + 1];
    scanf ("%s", & arr);
    fflush (stdout);
    n = strlen (arr);
    print_arr (arr, n);
    for (uint8_t i = 0; i < n; ++i) {
        rotate (arr, n);
        print_arr (arr, n);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41986135_41986612_1_23
41986135_41987708_22_41
Title: Char array rotation error in C - can't see reason why 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    char ar [n];
    char temp;
    for (int i = 0; i < n; i++) {
        scanf ("%c", & ar [i]);
    }
    int i;
    temp = ar[0];
    for (int i = 0; i < (n - 1); i++) {
        ar[i] = ar[1 + i];
    }
    ar[n - 1] = temp;
    for (int i = 0; i < n; i++) {
        printf ("%c", ar [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    uint8_t n;
    scanf ("%d", & n);
    fflush (stdout);
    char arr [n + 1];
    scanf ("%s", & arr);
    fflush (stdout);
    n = strlen (arr);
    print_arr (arr, n);
    for (uint8_t i = 0; i < n; ++i) {
        rotate (arr, n);
        print_arr (arr, n);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41986135_41987323_1_22
41986135_41987708_22_41
Title: Char array rotation error in C - can't see reason why 
----------------------------------------

int main (void) {
    int n;
    scanf ("%d", & n);
    char ar [n];
    char temp;
    for (int i = 0; i < n; i++) {
        scanf (" %c", & ar [i]);
    }
    int i;
    temp = ar[0];
    for (i = 0; i < n - 1; i++) {
        ar[i] = ar[i + 1];
    }
    ar[n - 1] = temp;
    for (int i = 0; i < n; i++) {
        printf ("%c", ar [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    uint8_t n;
    scanf ("%d", & n);
    fflush (stdout);
    char arr [n + 1];
    scanf ("%s", & arr);
    fflush (stdout);
    n = strlen (arr);
    print_arr (arr, n);
    for (uint8_t i = 0; i < n; ++i) {
        rotate (arr, n);
        print_arr (arr, n);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41993671_41993750_51_66
41993671_42055876_1_16
Title: Passing strings in C 
----------------------------------------

void main () {
    treeNode *root = NULL;
    char word [256];
    int length, a;
    for (a = 0; a < 3; a++) {
        printf ("Enter word: ");
        scanf ("%s", word);
        length = strlen (word);
        root = insert (root, a, word, length);
    }
    printf ("Print in order:\n");
    PrintInorder (root);
}
----------------------------------------

int main () {
    treeNode *root = NULL;
    int length, a;
    for (a = 0; a < 3; a++) {
        char *word = malloc (sizeof (char) * length + 1);
        printf ("Enter word: ");
        scanf ("%s", word);
        length = strlen (word);
        char *wordcpy = word;
        strcpy (wordcpy, word);
        root = insert (root, a, wordcpy, length);
    }
    PrintInorder (root);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42031650_42031859_28_44
42031650_42035413_30_44
Title: Understanding merge sort code 
----------------------------------------

void merge_sort (int array [], int arraySize) {
    if (arraySize > 1) {
        int leftSize = arraySize / 2;
        int rightSize = arraySize - leftSize;
        merge_sort (array, leftSize);
        merge_sort (array + leftSize, rightSize);
        int *targetArray = (int *) malloc (arraySize * sizeof (int));
        merge (array, leftSize, array + leftSize, rightSize, targetArray);
        memcpy (array, targetArray, arraySize * sizeof (int));
        free (targetArray);
    }
}
----------------------------------------

void merge_sort (int array [], int startIndex, int endIndex) {
    int size = (endIndex - startIndex) + 1;
    int midIndex;
    if (size > 1) {
        midIndex = (startIndex + endIndex) / 2;
        merge_sort (array, startIndex, midIndex);
        merge_sort (array, midIndex + 1, endIndex);
        merge (array, startIndex, midIndex, endIndex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42031650_42031859_46_80
42031650_42035413_46_129
Title: Understanding merge sort code 
----------------------------------------

void merge (int leftArray [], int leftSize, int rightArray [], int rightSize, int targetArray []) {
    int currentLeftIndex = 0;
    int currentRightIndex = 0;
    int targetIndex = 0;
    while ((currentLeftIndex < leftSize) && (currentRightIndex < rightSize)) {
        if (leftArray[currentLeftIndex] < rightArray[currentRightIndex]) {
            targetArray[targetIndex] = leftArray[currentLeftIndex];
            currentLeftIndex++;
        }
        else {
            targetArray[targetIndex] = rightArray[currentRightIndex];
            currentRightIndex++;
        }
        targetIndex++;
    }
    while (currentLeftIndex < leftSize) {
        targetArray[targetIndex] = leftArray[currentLeftIndex];
        targetIndex++;
        currentLeftIndex++;
    }
    while (currentRightIndex < rightSize) {
        targetArray[targetIndex] = rightArray[currentRightIndex];
        targetIndex++;
        currentRightIndex++;
    }
}
----------------------------------------

void merge (int array [], int startIndex, int midIndex, int endIndex) {
    int leftSize = midIndex - startIndex + 1;
    int rightSize = endIndex - midIndex;
    int originalArrayIndex = startIndex;
    int *leftArray = _alloca (leftSize * sizeof (int));
    int *rightArray = _alloca (rightSize * sizeof (int));
    int currentLeftIndex = 0;
    int currentRightIndex = 0;
    int i;
    for (i = 0; i < leftSize; i++) {
        leftArray[i] = array[startIndex + i];
        printf ("%i ", leftArray [i]);
    }
    printf (" === Left array\n");
    for (i = 0; i < rightSize; i++) {
        rightArray[i] = array[midIndex + 1 + i];
        printf ("%i ", rightArray [i]);
    }
    printf (" === Right array\n");
    while ((currentLeftIndex < leftSize) && (currentRightIndex < rightSize)) {
        if (leftArray[currentLeftIndex] < rightArray[currentRightIndex]) {
            array[originalArrayIndex] = leftArray[currentLeftIndex];
            originalArrayIndex++;
            currentLeftIndex++;
        }
        else {
            array[originalArrayIndex] = rightArray[currentRightIndex];
            originalArrayIndex++;
            currentRightIndex++;
        }
    }
    while (currentLeftIndex < leftSize) {
        array[originalArrayIndex] = leftArray[currentLeftIndex];
        originalArrayIndex++;
        currentLeftIndex++;
    }
    while (currentRightIndex < rightSize) {
        array[originalArrayIndex] = rightArray[currentRightIndex];
        originalArrayIndex++;
        currentRightIndex++;
    }
    for (i = 0; i < leftSize; i++) {
        printf ("%i ", leftArray [i]);
    }
    printf (" ==== left array after sort\n");
    for (i = 0; i < rightSize; i++) {
        printf ("%i ", rightArray [i]);
    }
    printf (" ==== right array after sort\n");
    for (i = startIndex; i < endIndex + 1; i++) {
        printf ("%i ", array [i]);
    }
    printf (" ===== post merge =====\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42031650_42031859_6_26
42031650_42035413_6_28
Title: Understanding merge sort code 
----------------------------------------

int main (void) {
    int numbers [8] = {14, 7, 3, 12, 9, 11, 6, 2};
    int size = sizeof (numbers) / sizeof (int);
    printf ("Unsorted Array!\n");
    for (int i = 0; i < size; i++) {
        printf ("%i, ", numbers [i]);
    }
    printf ("\n");
    merge_sort (numbers, size);
    printf ("Sorted Array!\n");
    for (int i = 0; i < size; i++) {
        printf ("%i ", numbers [i]);
    }
    printf ("\n");
}
----------------------------------------

int main (void) {
    int i;
    int size = 8;
    int numbers [8] = {14, 7, 3, 12, 9, 11, 6, 2};
    printf ("Unsorted Array!\n");
    for (i = 0; i < size; i++) {
        printf ("%i ", numbers [i]);
    }
    printf ("\n");
    merge_sort (numbers, 0, 7);
    printf ("Sorted Array!\n");
    for (i = 0; i < size; i++) {
        printf ("%i ", numbers [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42046712_42046897_8_20
42046712_51489040_5_19
Title: How to record elaspsed wall time in C? 
----------------------------------------

int main (int argc, char *argv []) {
    time_t start = time (0);
    print_timestamp ("Start:  ", start);
    sleep (2);
    time_t end = time (0);
    print_timestamp ("End:    ", end);
    double diff = difftime (end, start);
    printf ("Elapsed: %5.2lf seconds\n", diff);
}
----------------------------------------

int main () {
    clock_t start_t = clock ();
    double a = 0;
    for (int i = 0; i < 10000000; i++) {
        a += sqrt (a);
    }
    clock_t end_t = clock ();
    double total_t = (double) (end_t - start_t) / CLOCKS_PER_SEC;
    printf ("Total time taken by CPU: %lf\n", total_t);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42050699_42051095_6_29
42050699_42053473_5_38
Title: Use 'if' to find maximum and minimum 
----------------------------------------

int main (void) {
    int array [SIZE], min, max;
    printf ("Enter %d numbers:\n", SIZE);
    for (size_t i = 0; i < SIZE; i++) {
        if (scanf ("%d", &array[i]) != 1) {
            printf ("Invalid number entered\n");
            exit (EXIT_FAILURE);
        }
    }
    max = min = array[0];
    for (size_t i = 1; i < SIZE; i++) {
        if (array[i] > max) {
            max = array[i];
        }
        else if (array[i] < min) {
            min = array[i];
        }
    }
    printf ("Maximum: %d\nMinimum: %d\n", max, min);
    return 0;
}
----------------------------------------

int main (void) {
    int a, b, c, d, e, min, max;
    if (scanf ("%d%d%d%d%d", &a, &b, &c, &d, &e) != 5)
        return 1;
    min = max = a;
    if (b > max) {
        max = b;
    }
    if (c > max) {
        max = c;
    }
    if (d > max) {
        max = d;
    }
    if (e > max) {
        max = e;
    }
    if (min > b) {
        min = b;
    }
    if (min > c) {
        min = c;
    }
    if (min > d) {
        min = d;
    }
    if (min > e) {
        min = e;
    }
    printf ("Maximum: %d\nMinimum: %d", max, min);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42050699_42053473_5_38
42050699_42054724_7_25
Title: Use 'if' to find maximum and minimum 
----------------------------------------

int main (void) {
    int a, b, c, d, e, min, max;
    if (scanf ("%d%d%d%d%d", &a, &b, &c, &d, &e) != 5)
        return 1;
    min = max = a;
    if (b > max) {
        max = b;
    }
    if (c > max) {
        max = c;
    }
    if (d > max) {
        max = d;
    }
    if (e > max) {
        max = e;
    }
    if (min > b) {
        min = b;
    }
    if (min > c) {
        min = c;
    }
    if (min > d) {
        min = d;
    }
    if (min > e) {
        min = e;
    }
    printf ("Maximum: %d\nMinimum: %d", max, min);
    return 0;
}
----------------------------------------

int main (void) {
    int array [SIZE], min = INT_MAX, max = INT_MIN;
    printf ("Enter %d numbers:\n", SIZE);
    for (size_t i = 0; i < SIZE; i++) {
        if (scanf ("%d", &array[i]) != 1) {
            printf ("Invalid number entered\n");
            exit (EXIT_FAILURE);
        }
        if (max < array[i]) {
            max = array[i];
        }
        if (min > array[i]) {
            min = array[i];
        }
    }
    printf ("Maximum: %d\nMinimum: %d\n", max, min);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42056251_42056474_15_37
42056251_42056556_3_38
Title: Need 10 outputs per line 
----------------------------------------

int main () {
    int num_primes;
    printf ("How many primes would you like: ");
std :
    : cin >> num_primes;
    printf ("\r\nScanned Primes Are---\r\n");
    int foundPrimes = 0;
    int x = 0;
    for (; x <= num_primes; x++) {
        bool gotLuckyFindingPrime = is_prime (x);
        if (gotLuckyFindingPrime) {
            if (foundPrimes % 10 == 0) {
                printf ("\r\n");
            }
            printf ("     %d", x);
            foundPrimes = (foundPrimes + 1) % 10;
        }
    }
}
----------------------------------------

int main () {
    int n, i = 3, count, c;
    int counter = 1;
    printf ("How many primes would you like?");
    scanf ("%d", & n);
    if (n >= 1) {
        printf ("2");
    }
    for (count = 2; count <= n;) {
        for (c = 2; c <= i - 1; c++) {
            if (i % c == 0)
                break;
        }
        if (c == i) {
            if (counter % 10 == 0)
                printf ("\n");
            printf (" %2d", i);
            counter++;
            count++;
        }
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42074131_42074580_1_30
42074131_42074820_40_58
Title: "Sort array alphabetically upper letter always first" 
----------------------------------------

int compare (const void *w1, const void *w2) {
    char *a1 = w1;
    char *a2 = w2;
    register r;
    int caseDifference = 0;
    while (*a1 && *a2) {
        r = tolower (*a1) - tolower (*a2);
        if (r)
            return r;
        else if (caseDifference == 0 && (isupper (*a1) && !isupper (*a2))) {
            caseDifference = -1;
        }
        else if (caseDifference == 0 && (!isupper (*a1) && isupper (*a2))) {
            caseDifference = 1;
        }
        ++a1;
        ++a2;
    }
    r = tolower (*a1) - tolower (*a2);
    if (r != 0)
        return r;
    else
        return caseDifference;
}
----------------------------------------

int compare (const void *w1, const void *w2) {
    const char *a1 = w1;
    const char *a2 = w2;
    while (*a1 && *a2) {
        int r = tolower (*a1) - tolower (*a2);
        if (!r) {
            if (*a1 - *a2)
                return *a1 - *a2 > 0 ? 1 : -1;
        }
        else
            break;
        ++a1;
        ++a2;
    }
    return tolower (*a1) - tolower (*a2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42074131_42074580_1_30
42074131_42074822_43_58
Title: "Sort array alphabetically upper letter always first" 
----------------------------------------

int compare (const void *w1, const void *w2) {
    char *a1 = w1;
    char *a2 = w2;
    register r;
    int caseDifference = 0;
    while (*a1 && *a2) {
        r = tolower (*a1) - tolower (*a2);
        if (r)
            return r;
        else if (caseDifference == 0 && (isupper (*a1) && !isupper (*a2))) {
            caseDifference = -1;
        }
        else if (caseDifference == 0 && (!isupper (*a1) && isupper (*a2))) {
            caseDifference = 1;
        }
        ++a1;
        ++a2;
    }
    r = tolower (*a1) - tolower (*a2);
    if (r != 0)
        return r;
    else
        return caseDifference;
}
----------------------------------------

int compare (const void *a1, const void *a2) {
    const unsigned char *c1 = a1;
    const unsigned char *c2 = a2;
    register int r = strcoll ((const char []) {tolower (*c1), '\0'}, (const char []) {tolower (*c2), '\0'});
    if (r == 0) {
        if (isupper (*c1) && islower (*c2)) {
            r = -1;
        }
        else if (islower (*c1) && isupper (*c2)) {
            r = 1;
        }
    }
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42074131_42074820_12_38
42074131_42074822_10_41
Title: "Sort array alphabetically upper letter always first" 
----------------------------------------

int main (void) {
    char s1 [] [R] = {{"azghtdffopAsAfp"}, {"poiuyjklhgADHTp"}, {"hgjkFfGgBnVUuKk"}, {"lokijuhygtfrdek"}, {"AaaAdDcCFfgGhHI"}};
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; s1[i][j] && j < R; j++)
            putchar (s1[i][j]);
        putchar ('\n');
    }
    for (i = 0; i < N; i++)
        qsort (s1[i], R -1, sizeof *(s1[i]), compare);
    qsort (s1, N, sizeof * s1, comparestr);
    putchar ('\n');
    for (i = 0; i < N; i++) {
        for (j = 0; s1[i][j] && j < R; j++)
            putchar (s1[i][j]);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main (void) {
    char s1 [N] [16] = {{"azghtdffopAsAfp"}, {"poiuyjklhgADHTp"}, {"hgjkFfGgBnVUuKk"}, {"lokijuhygtfrdek"}, {"AaaAdDcCFfgGhHI"}};
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < 15; j++) {
            printf ("%c", s1 [i] [j]);
        }
        printf ("\n");
    }
    for (i = 0; i < N; i++) {
        size_t s1_len = strlen (s1[i]);
        qsort (s1 [i], s1_len, 1, compare);
    }
    printf ("\n");
    for (i = 0; i < N; i++) {
        for (j = 0; j < 15; j++) {
            printf ("%c", s1 [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42074131_42074820_12_38
42074131_42099279_8_28
Title: "Sort array alphabetically upper letter always first" 
----------------------------------------

int main (void) {
    char s1 [] [R] = {{"azghtdffopAsAfp"}, {"poiuyjklhgADHTp"}, {"hgjkFfGgBnVUuKk"}, {"lokijuhygtfrdek"}, {"AaaAdDcCFfgGhHI"}};
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; s1[i][j] && j < R; j++)
            putchar (s1[i][j]);
        putchar ('\n');
    }
    for (i = 0; i < N; i++)
        qsort (s1[i], R -1, sizeof *(s1[i]), compare);
    qsort (s1, N, sizeof * s1, comparestr);
    putchar ('\n');
    for (i = 0; i < N; i++) {
        for (j = 0; s1[i][j] && j < R; j++)
            putchar (s1[i][j]);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main (void) {
    char s1 [N] [15] = {{"azghtdffopAsAfp"}, {"poiuyjklhgADHTp"}, {"hgjkFfGgBnVUuKk"}, {"lokijuhygtfrdek"}, {"AaaAdDcCFfgGhHI"}};
    for (int i = 0; i < N; i++) {
        printf ("%.15s\n", s1 [i]);
    }
    for (int i = 0; i < N; i++) {
        qsort (s1 [i], 15, sizeof (char), compare);
    }
    printf ("\n");
    for (int i = 0; i < N; i++) {
        printf ("%.15s\n", s1 [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42074131_42074820_40_58
42074131_42074822_43_58
Title: "Sort array alphabetically upper letter always first" 
----------------------------------------

int compare (const void *w1, const void *w2) {
    const char *a1 = w1;
    const char *a2 = w2;
    while (*a1 && *a2) {
        int r = tolower (*a1) - tolower (*a2);
        if (!r) {
            if (*a1 - *a2)
                return *a1 - *a2 > 0 ? 1 : -1;
        }
        else
            break;
        ++a1;
        ++a2;
    }
    return tolower (*a1) - tolower (*a2);
}
----------------------------------------

int compare (const void *a1, const void *a2) {
    const unsigned char *c1 = a1;
    const unsigned char *c2 = a2;
    register int r = strcoll ((const char []) {tolower (*c1), '\0'}, (const char []) {tolower (*c2), '\0'});
    if (r == 0) {
        if (isupper (*c1) && islower (*c2)) {
            r = -1;
        }
        else if (islower (*c1) && isupper (*c2)) {
            r = 1;
        }
    }
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42074131_42074822_10_41
42074131_42099279_8_28
Title: "Sort array alphabetically upper letter always first" 
----------------------------------------

int main (void) {
    char s1 [N] [16] = {{"azghtdffopAsAfp"}, {"poiuyjklhgADHTp"}, {"hgjkFfGgBnVUuKk"}, {"lokijuhygtfrdek"}, {"AaaAdDcCFfgGhHI"}};
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < 15; j++) {
            printf ("%c", s1 [i] [j]);
        }
        printf ("\n");
    }
    for (i = 0; i < N; i++) {
        size_t s1_len = strlen (s1[i]);
        qsort (s1 [i], s1_len, 1, compare);
    }
    printf ("\n");
    for (i = 0; i < N; i++) {
        for (j = 0; j < 15; j++) {
            printf ("%c", s1 [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char s1 [N] [15] = {{"azghtdffopAsAfp"}, {"poiuyjklhgADHTp"}, {"hgjkFfGgBnVUuKk"}, {"lokijuhygtfrdek"}, {"AaaAdDcCFfgGhHI"}};
    for (int i = 0; i < N; i++) {
        printf ("%.15s\n", s1 [i]);
    }
    for (int i = 0; i < N; i++) {
        qsort (s1 [i], 15, sizeof (char), compare);
    }
    printf ("\n");
    for (int i = 0; i < N; i++) {
        printf ("%.15s\n", s1 [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42106582_42106978_5_32
42106582_42107349_8_36
Title: C Program Help in Upper Casing First Letter of Input 
----------------------------------------

int main (void) {
    char str_name [16] = {0};
    size_t len = 0;
    int ch;
    printf ("Please enter your first name to begin: ");
    while ((EOF != (ch = fgetc (stdin))) && (ch != '\n') && (len < sizeof (str_name))) {
        if (isalpha (ch)) {
            str_name[len++] = ch;
        }
    }
    if (len == sizeof (str_name)) {
        fprintf (stderr, "Name too long\n");
    }
    else {
        str_name[len] = '\0';
        printf ("Hi %c%s.\n", toupper (str_name [0]), & str_name [1]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str_name [NAMESTRLEN] = {'\0'};
    size_t slen;
    printf ("Please enter your first name to begin: ");
    if (fgets (str_name, NAMESTRLEN, stdin) == NULL) {
        fprintf (stderr, "Error from fgets()\n");
        return 1;
    }
    slen = strlen (str_name);
    if (slen > 0 && str_name[slen - 1] == '\n') {
        str_name[slen - 1] = '\0';
    }
    else {
        fprintf (stderr, "Too many characters\n");
        return 1;
    }
    if (str_name[0] == '\0') {
        fprintf (stderr, "No name entered\n");
        return 1;
    }
    str_name[0] = toupper ((unsigned char) str_name[0]);
    printf ("Hi %s.\n", str_name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42106582_42106978_5_32
42106582_42149420_4_19
Title: C Program Help in Upper Casing First Letter of Input 
----------------------------------------

int main (void) {
    char str_name [16] = {0};
    size_t len = 0;
    int ch;
    printf ("Please enter your first name to begin: ");
    while ((EOF != (ch = fgetc (stdin))) && (ch != '\n') && (len < sizeof (str_name))) {
        if (isalpha (ch)) {
            str_name[len++] = ch;
        }
    }
    if (len == sizeof (str_name)) {
        fprintf (stderr, "Name too long\n");
    }
    else {
        str_name[len] = '\0';
        printf ("Hi %c%s.\n", toupper (str_name [0]), & str_name [1]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str_name [17];
    printf ("Please enter your first name to begin: ");
    if (scanf_s ("%16s", str_name, sizeof (str_name))) {
        printf ("Premature end of file.\n");
        return 1;
    }
    if (strlen (str_name) > 15) {
        printf ("The entered name is too long, please restart the program and try again.");
        return 1;
    }
    str_name[0] = toupper ((unsigned char) str_name[0]);
    printf ("Hi %s\n", str_name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42106582_42107349_8_36
42106582_42149420_4_19
Title: C Program Help in Upper Casing First Letter of Input 
----------------------------------------

int main (void) {
    char str_name [NAMESTRLEN] = {'\0'};
    size_t slen;
    printf ("Please enter your first name to begin: ");
    if (fgets (str_name, NAMESTRLEN, stdin) == NULL) {
        fprintf (stderr, "Error from fgets()\n");
        return 1;
    }
    slen = strlen (str_name);
    if (slen > 0 && str_name[slen - 1] == '\n') {
        str_name[slen - 1] = '\0';
    }
    else {
        fprintf (stderr, "Too many characters\n");
        return 1;
    }
    if (str_name[0] == '\0') {
        fprintf (stderr, "No name entered\n");
        return 1;
    }
    str_name[0] = toupper ((unsigned char) str_name[0]);
    printf ("Hi %s.\n", str_name);
    return 0;
}
----------------------------------------

int main (void) {
    char str_name [17];
    printf ("Please enter your first name to begin: ");
    if (scanf_s ("%16s", str_name, sizeof (str_name))) {
        printf ("Premature end of file.\n");
        return 1;
    }
    if (strlen (str_name) > 15) {
        printf ("The entered name is too long, please restart the program and try again.");
        return 1;
    }
    str_name[0] = toupper ((unsigned char) str_name[0]);
    printf ("Hi %s\n", str_name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42116327_42117083_1_11
42116327_42117682_4_13
Title: Double from unsigned int[2]? 
----------------------------------------

double d_from_u2 (unsigned int *in) {
    double result;
    unsigned char *result_bytes = (unsigned char *) &result;
    for (int i = 0; i < 4; i++) {
        result_bytes[i] = in[0] >> (24 - 8 * i);
        result_bytes[i + 4] = in[1] >> (24 - 8 * i);
    }
    return result;
}
----------------------------------------

double d_from_u2 (unsigned int *v) {
    union {
        int32_t x [2];
        int64_t y;
    } u = {
        .x = {v[1], v[0]}
    };
    printf ("%llu\n", u.y);
    return (double) u.y;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42124421_42124651_5_29
42124421_42124801_6_39
Title: Parsing a text file of integers into an array 
----------------------------------------

int main (int argc, char *argv []) {
    printf ("Starting program\n");
    if (argc < 2) {
        return 1;
    }
    FILE *fp = fopen (argv[1], "r");
    if (fp == NULL) {
        perror (argv [1]);
        return 1;
    }
    char int_array [1000];
    if (fgets (int_array, 1000, fp)) {
        int nums [1000];
        int i = 0;
        char *token = strtok (int_array, " ");
        while (token) {
            nums[i++] = atoi (token);
            token = strtok (NULL, " ");
        }
        printf ("0: %i\n", nums [0]);
        printf ("1: %i\n", nums [1]);
        printf ("%d: %i\n", i - 1, nums [i - 1]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    printf ("Starting program\n");
    if (argc < 2) {
        fprintf (stderr, "missing command line argument\n");
        return 1;
    }
    FILE *fp = fopen (argv[1], "r");
    if (fp == NULL) {
        fprintf (stderr, "cannot open %s: %s\n", argv [1], strerror (errno));
        return 1;
    }
    char buf [1000];
    int nums [1000];
    int i = 0;
    while (fgets (buf, sizeof buf, fp)) {
        char *p = buf;
        char *q;
        for (; i < 1000; i++) {
            nums[i] = strtol (p, &q, 0);
            if (q == p) {
                break;
            }
            p = q;
        }
    }
    fclose (fp);
    for (int j = 0; j < i; j++) {
        printf ("%d ", nums [j]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42129784_42129827_3_17
42129784_42130098_1_16
Title: Question mark at end of printf 
----------------------------------------

int main () {
    char new_string [101] = {0};
    char string [100];
    scanf ("%s", string);
    printf ("original_number = %s\n", string);
    int i;
    int l = strlen (string) - 1;
    for (i = 0; i <= l; i++) {
        new_string[i] = string[l - i];
        printf ("%c\n", new_string [i]);
    }
    strcat (new_string, "?");
    printf ("rev_number = %s\n", new_string);
}
----------------------------------------

int main () {
    char new_string [100];
    char string1 [100];
    scanf ("%s", string1);
    printf ("original_number = %s\n", string1);
    int i;
    for (i = 0; i <= strlen (string1); i++) {
        new_string[i] = string1[i - 1];
        printf ("%c\n", new_string [i]);
    }
    printf ("rev_number = %s\n", new_string);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42138283_42140368_12_29
42138283_42140914_1_16
Title: Improve performance of reading volatile memory 
----------------------------------------

void myTask (void) {
    static uint8_t lastPingPong = 0;
    if (lastPingPong != PingPong) {
        for (uint8_t n = 0; n < 10; n++) {
            for (uint8_t m = 0; m < 20; m++) {
                foo (memoryBuffer [PingPong] [n] [m]);
            }
        }
        lastPingPong = PingPong;
    }
}
----------------------------------------

void myTask (uint8_t indexOppositeOfDMA) {
    for (uint8_t n = 0; n < 10; n++) {
        for (uint8_t m = 0; m < 20; m++) {
            volatile uint16_t *data = &memoryBuffer[indexOppositeOfDMA][n][m];
            uint16_t local_copy = *data;
            foo (& local_copy);
            *data = local_copy;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42143664_42148340_28_51
42143664_42149001_17_34
Title: Merge sort in C giving wrong results 
----------------------------------------

void merge (int a [], int start, int end, int size) {
    int left = start;
    int right = start + size / 2;
    int right_start = right;
    int *sr = (int *) malloc (size * sizeof (*sr));
    for (int i = 0; i < size; i++) {
        if (left < right_start) {
            if (right > end) {
                sr[i] = a[left++];
            }
            else if (a[left] < a[right]) {
                sr[i] = a[left++];
            }
            else {
                sr[i] = a[right++];
            }
        }
        else {
            sr[i] = a[right++];
        }
    }
    for (int i = 0; i < size; ++i)
        a[start + i] = sr[i];
    free (sr);
}
----------------------------------------

void merge (int a [], int mid, int size) {
    int sr [mid];
    if (a[mid - 1] <= a[mid]) {
        return;
    }
    for (int i = 0; i < mid; i++) {
        sr[i] = a[i];
    }
    for (int i = 0, left = 0, right = mid; left < mid; i++) {
        if (right == size || sr[left] <= a[right]) {
            a[i] = sr[left++];
        }
        else {
            a[i] = a[right++];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42144630_42144737_4_22
42144630_42144906_16_36
Title: How do I stop making this C code loop? 
----------------------------------------

int main () {
    int a = 1;
    while (a != 999) {
        scanf ("%d", & a);
        if (a == 1) {
            a = 0;
        }
        if (a == 2) {
            a = 0;
        }
        else if (a != 999) {
            a = 0;
            printf ("\nERROR: Please try again.\n\n");
        }
    }
}
----------------------------------------

int main () {
    char inputStr [10];
    while (1) {
        scanf ("%9s", inputStr);
        if (!isNumeric (inputStr)) {
            a = 0;
            printf ("\nERROR Not a number: Please try again.\n\n");
        }
        else {
            a = atoi (inputStr);
            if (a == 1) {
                a = 0;
            }
            else if (a == 2) {
                a == 0;
            }
            else {
                a = 0;
                printf ("\nERROR : Please try again.\n\n");
            }
        }
        ` enter code here `
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42144630_42144737_4_22
42144630_42144939_3_16
Title: How do I stop making this C code loop? 
----------------------------------------

int main () {
    int a = 1;
    while (a != 999) {
        scanf ("%d", & a);
        if (a == 1) {
            a = 0;
        }
        if (a == 2) {
            a = 0;
        }
        else if (a != 999) {
            a = 0;
            printf ("\nERROR: Please try again.\n\n");
        }
    }
}
----------------------------------------

int main (void) {
    int a, end = 1;
    do {
        scanf ("%d", & a);
        switch (a) {
        case 1 :
        case 2 :
            printf ("You entered %d\n", a);
            end = 0;
            break;
        default :
            printf ("\nERROR: Please try again.\n\n");
        }
    }
    while (end);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42144630_42144906_16_36
42144630_42144939_3_16
Title: How do I stop making this C code loop? 
----------------------------------------

int main () {
    char inputStr [10];
    while (1) {
        scanf ("%9s", inputStr);
        if (!isNumeric (inputStr)) {
            a = 0;
            printf ("\nERROR Not a number: Please try again.\n\n");
        }
        else {
            a = atoi (inputStr);
            if (a == 1) {
                a = 0;
            }
            else if (a == 2) {
                a == 0;
            }
            else {
                a = 0;
                printf ("\nERROR : Please try again.\n\n");
            }
        }
        ` enter code here `
    }
}
----------------------------------------

int main (void) {
    int a, end = 1;
    do {
        scanf ("%d", & a);
        switch (a) {
        case 1 :
        case 2 :
            printf ("You entered %d\n", a);
            end = 0;
            break;
        default :
            printf ("\nERROR: Please try again.\n\n");
        }
    }
    while (end);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42145593_42145942_5_29
42145593_42150771_8_45
Title: How to copy an array of characters to a char pointer without using strcpy 
----------------------------------------

int main () {
    int LEN = 20;
    int NUM = 3;
    char *Strings [NUM];
    char temp [LEN];
    int i, j;
    for (i = 0; i < NUM; i++) {
        fgets (temp, LEN, stdin);
        Strings[i] = (char *) malloc (strlen (temp) +1);
        for (j = 0; j <= strlen (temp); j++) {
            if (j == strlen (temp))
                Strings[i][j - 1] = temp[j];
            else
                Strings[i][j] = temp[j];
        }
    }
    for (i = 0; i < NUM; i++)
        printf ("%s\n", Strings[i]);
    return 0;
}
----------------------------------------

int main (void) {
    char *strings [LEN] = {NULL};
    char buffer [BUFFSIZE] = {'\0'};
    size_t slen, strcnt = 0, i;
    printf ("Input:\n");
    for (i = 0; i < LEN; i++) {
        if (fgets (buffer, BUFFSIZE, stdin) == NULL) {
            fprintf (stderr, "Error from fgets()\n");
            exit (EXIT_FAILURE);
        }
        slen = strlen (buffer);
        if (slen > 0 && buffer[slen - 1] == '\n') {
            buffer[slen - 1] = '\0';
        }
        else {
            fprintf (stderr, "Too many characters entered\n");
            exit (EXIT_FAILURE);
        }
        if (*buffer) {
            strings[strcnt] = strdup (buffer);
            if (strings[strcnt] == NULL) {
                fprintf (stderr, "Cannot allocate buffer\n");
                exit (EXIT_FAILURE);
            }
            strcnt++;
        }
    }
    printf ("\nOutput:\n");
    for (i = 0; i < strcnt; i++) {
        printf ("%s\n", strings [i]);
        free (strings [i]);
        strings[i] = NULL;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4215101_4215170_9_25
4215101_4216830_5_18
Title: C: can't write data on file 
----------------------------------------

int main () {
    struct String s;
    FILE *file = NULL;
    file = fopen ("filename", "wb+");
    memset (& s, '\0', sizeof (s));
    strcpy (s.data, "Hello, world!");
    s.size = strlen (s.data);
    fwrite (& s, 1, sizeof (s), file);
    if (!file)
        return 1;
    fclose (file);
}
----------------------------------------

int main () {
    char file_data [256];
    int file_size = sizeof (file_data);
    memcpy (file_data, SAMPLE_DATA, sizeof (SAMPLE_DATA));
    FILE *file = fopen (MY_FILE_NAME, "w+");
    if (file) {
        fwrite (file_data, 1, file_size, file);
        fclose (file);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42157170_42157321_1_13
42157170_42157426_3_21
Title: Simple C program is not storing the correct value of the input taken in the variable 
----------------------------------------

int main () {
    int num = 0, sum = 0;
    printf ("Enter the number: ");
    do {
        scanf_s ("%d", & num);
        sum = sum + num;
    }
    while (num != 0);
    printf ("Answer = %d", sum);
    return 0;
}
----------------------------------------

int main (void) {
    long long int sum = 0;
    while (1) {
        int num;
        printf ("Enter number (0 - exit): ");
        if (scanf ("%d", &num) != 1 || num == 0)
            break;
        sum += num;
    }
    printf ("\nAnswer = %lld\n", sum);
    return 0;
}
----------------------------------------

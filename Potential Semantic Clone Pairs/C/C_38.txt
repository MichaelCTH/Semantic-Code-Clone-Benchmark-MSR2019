$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37225997_37226119_9_36
37225997_37226130_1_24
Title: How to loop for Structures? 
----------------------------------------

int main () {
    struct student s [10];
    int i;
    printf ("Enter information of students:\n");
    for (i = 0; i < 10; ++i) {
        s[i].roll = i + 1;
        printf ("\nFor roll number %d\n", s [i].roll);
        printf ("Enter name: ");
        scanf ("%s", s [i].name);
        printf ("Enter marks: ");
        scanf ("%f", & s [i].marks);
        printf ("\n");
    }
    printf ("Displaying information of students:\n\n");
    for (i = 0; i < 10; ++i) {
        printf ("\nInformation for roll number %d:\n", i + 1);
        printf ("Name: ");
        puts (s [i].name);
        printf ("Marks: %.1f", s [i].marks);
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct perdata {
        char name [20];
        int age;
        float salary;
    };
    struct perdata p [4];
    for (int i = 0; i < 4; i++) {
        scanf ("%s", & p [i].name);
    }
    for (int i = 0; i < 4; i++) {
        printf ("p%d.name:%s\n", i + 1, p [i].name);
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37229448_37229679_5_31
37229448_37229907_4_30
Title: C programming : String calculation Using ASCII code 
----------------------------------------

int main (void) {
    char buffer [100];
    int no1, no2, no3;
    char number1 [] = {'1', '0', '0', '0', '\0'};
    char number2 [] = {'9', '0', '0', '\0'};
    no1 = atoi (number1);
    no2 = atoi (number2);
    no3 = no1 + no2;
    snprintf (buffer, 99, "%d", no3);
    printf ("no1 : %d\n", no1);
    printf ("no2 : %d\n", no2);
    printf ("no3 : %s\n", buffer);
    return 0;
}
----------------------------------------

int main (void) {
    char x [100] = "1000";
    char y [100] = "99";
    char result [100 + 1] = " ";
    int x_i = strlen (x) - 1;
    int y_i = strlen (y) - 1;
    int r_i = 1 + ((x_i > y_i) ? x_i + 1 : y_i + 1);
    int carray = 0, sum;
    result[r_i] = 0;
    while (--r_i > 0) {
        if (x_i >= 0 && y_i >= 0)
            sum = x[x_i--] - '0' + y[y_i--] - '0' + carray;
        else if (y_i < 0)
            sum = x[x_i--] - '0' + carray;
        else
            sum = y[y_i--] - '0' + carray;
        carray = sum > 9;
        result[r_i] = sum % 10 + '0';
    }
    if (carray)
        result[0] = '1';
    printf ("%s\n", result);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37229448_37229679_5_31
37229448_37229990_4_25
Title: C programming : String calculation Using ASCII code 
----------------------------------------

int main (void) {
    char buffer [100];
    int no1, no2, no3;
    char number1 [] = {'1', '0', '0', '0', '\0'};
    char number2 [] = {'9', '0', '0', '\0'};
    no1 = atoi (number1);
    no2 = atoi (number2);
    no3 = no1 + no2;
    snprintf (buffer, 99, "%d", no3);
    printf ("no1 : %d\n", no1);
    printf ("no2 : %d\n", no2);
    printf ("no3 : %s\n", buffer);
    return 0;
}
----------------------------------------

int main (void) {
    char y [100] = "1032";
    char x [100] = "2399";
    int carry = 0;
    char *b = (strlen (x) > strlen (y)) ? x : y;
    char *s = (strlen (x) <= strlen (y)) ? x : y;
    for (int i = strlen (s) - 1, j = strlen (b) - 1; i >= 0; --i, --j) {
        b[j] = (b[j] + s[i] + carry - '0');
        carry = 0;
        if (b[j] > '9') {
            b[j] = (b[j] - '0') % 10 + '0';
            carry = 1;
        }
    }
    puts (b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37229448_37229907_4_30
37229448_37229990_4_25
Title: C programming : String calculation Using ASCII code 
----------------------------------------

int main (void) {
    char x [100] = "1000";
    char y [100] = "99";
    char result [100 + 1] = " ";
    int x_i = strlen (x) - 1;
    int y_i = strlen (y) - 1;
    int r_i = 1 + ((x_i > y_i) ? x_i + 1 : y_i + 1);
    int carray = 0, sum;
    result[r_i] = 0;
    while (--r_i > 0) {
        if (x_i >= 0 && y_i >= 0)
            sum = x[x_i--] - '0' + y[y_i--] - '0' + carray;
        else if (y_i < 0)
            sum = x[x_i--] - '0' + carray;
        else
            sum = y[y_i--] - '0' + carray;
        carray = sum > 9;
        result[r_i] = sum % 10 + '0';
    }
    if (carray)
        result[0] = '1';
    printf ("%s\n", result);
    return 0;
}
----------------------------------------

int main (void) {
    char y [100] = "1032";
    char x [100] = "2399";
    int carry = 0;
    char *b = (strlen (x) > strlen (y)) ? x : y;
    char *s = (strlen (x) <= strlen (y)) ? x : y;
    for (int i = strlen (s) - 1, j = strlen (b) - 1; i >= 0; --i, --j) {
        b[j] = (b[j] + s[i] + carry - '0');
        carry = 0;
        if (b[j] > '9') {
            b[j] = (b[j] - '0') % 10 + '0';
            carry = 1;
        }
    }
    puts (b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37233560_37233867_4_26
37233560_37233894_4_30
Title: Scan each word or number in line and print to file using C 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fpt1, *fpt2;
    fpt1 = fopen ("data1.txt", "r");
    fpt2 = fopen ("data2.txt", "w");
    int i;
    double ep, si;
    char sto1 [100], sto2 [100];
    for (i = 0; i < 2; i++) {
        fscanf (fpt1, "%s", sto1);
        fscanf (fpt1, "%s", sto2);
        fscanf (fpt1, "%lf", & ep);
        fscanf (fpt1, "%lf", & si);
        fprintf (fpt2, "%s %s %2.8lf %2.8lf\n", sto1, sto2, ep, si);
    }
    fclose (fpt1);
    fclose (fpt2);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fpt1, *fpt2;
    fpt1 = fopen ("data1.txt", "r");
    fpt2 = fopen ("data2.txt", "w");
    int i;
    double ep, si;
    char *sto1, *sto2;
    sto1 = malloc (1000000);
    sto2 = malloc (1000000);
    for (i = 0; i < 2; i++) {
        fscanf (fpt1, "%s\n", sto1);
        fscanf (fpt1, "%s\n", sto2);
        fscanf (fpt1, "%lf\n", & ep);
        fscanf (fpt1, "%lf\n", & si);
        fprintf (fpt2, "%s %s %2.8lf %2.8lf\n", sto1, sto2, ep, si);
    }
    fclose (fpt1);
    fclose (fpt2);
    free (sto1);
    free (sto2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37233560_37233867_4_26
37233560_37234011_4_22
Title: Scan each word or number in line and print to file using C 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fpt1, *fpt2;
    fpt1 = fopen ("data1.txt", "r");
    fpt2 = fopen ("data2.txt", "w");
    int i;
    double ep, si;
    char sto1 [100], sto2 [100];
    for (i = 0; i < 2; i++) {
        fscanf (fpt1, "%s", sto1);
        fscanf (fpt1, "%s", sto2);
        fscanf (fpt1, "%lf", & ep);
        fscanf (fpt1, "%lf", & si);
        fprintf (fpt2, "%s %s %2.8lf %2.8lf\n", sto1, sto2, ep, si);
    }
    fclose (fpt1);
    fclose (fpt2);
    return 0;
}
----------------------------------------

int main () {
    FILE *pfile1 = NULL, *pfile2 = NULL;
    char *sto1 = NULL, *sto2 = NULL, line [MAX];
    double ep, si;
    pfile1 = fopen ("dS.txt", "r");
    pfile2 = fopen ("dR.txt", "w");
    if (pfile1 != NULL || pfile2 != NULL) {
        while (fgets (line, 255, pfile1) != NULL) {
            sscanf (line, "%s %s %Lf %Lf", & sto1, & sto2, & ep, & si);
            fprintf (pfile2, "%s %s %2.5Lf %2.8Lf\n", & sto1, & sto2, ep, si);
        }
        fclose (pfile1);
        fclose (pfile2);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37233560_37233894_4_30
37233560_37234011_4_22
Title: Scan each word or number in line and print to file using C 
----------------------------------------

int main (void) {
    FILE *fpt1, *fpt2;
    fpt1 = fopen ("data1.txt", "r");
    fpt2 = fopen ("data2.txt", "w");
    int i;
    double ep, si;
    char *sto1, *sto2;
    sto1 = malloc (1000000);
    sto2 = malloc (1000000);
    for (i = 0; i < 2; i++) {
        fscanf (fpt1, "%s\n", sto1);
        fscanf (fpt1, "%s\n", sto2);
        fscanf (fpt1, "%lf\n", & ep);
        fscanf (fpt1, "%lf\n", & si);
        fprintf (fpt2, "%s %s %2.8lf %2.8lf\n", sto1, sto2, ep, si);
    }
    fclose (fpt1);
    fclose (fpt2);
    free (sto1);
    free (sto2);
}
----------------------------------------

int main () {
    FILE *pfile1 = NULL, *pfile2 = NULL;
    char *sto1 = NULL, *sto2 = NULL, line [MAX];
    double ep, si;
    pfile1 = fopen ("dS.txt", "r");
    pfile2 = fopen ("dR.txt", "w");
    if (pfile1 != NULL || pfile2 != NULL) {
        while (fgets (line, 255, pfile1) != NULL) {
            sscanf (line, "%s %s %Lf %Lf", & sto1, & sto2, & ep, & si);
            fprintf (pfile2, "%s %s %2.5Lf %2.8Lf\n", & sto1, & sto2, ep, si);
        }
        fclose (pfile1);
        fclose (pfile2);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37235367_37235530_47_86
37235367_37236075_10_36
Title: Finding the longest common word in two strings in C Language? 
----------------------------------------

int main (int argc, char *argv []) {
    int i, longest, *ret;
    if (argc != 3) {
        char s [20], t [20];
        printf ("Type in a string s.\n");
        fgets (s, 20, stdin);
        printf ("Type in a string t.\n");
        fgets (t, 20, stdin);
        ret = lcommon (s, t);
        if ((longest = ret[0]) == 0) {
            printf ("There is no common substring\n");
            exit (2);
        }
        i = 0;
        while (ret[++i] != -1) {
            printf ("%.*s\n", longest, & s [ret [i] - longest + 1]);
        }
        exit (0);
    }
    else {
    }
    ret = lcommon (argv[1], argv[2]);
    if ((longest = ret[0]) == 0) {
        printf ("There is no common substring\n");
        exit (2);
    }
    i = 0;
    while (ret[++i] != -1) {
        printf ("%.*s\n", longest, & argv [1] [ret [i] - longest + 1]);
    }
    exit (0);
}
----------------------------------------

int main (void) {
    char res [MAXC] = "", s [MAXC] = "", t [MAXC] = "";
    printf ("Type in a string 's': ");
    if (!fgets (s, MAXC, stdin)) {
        fprintf (stderr, "error: invalid input for 's'.\n");
        return 1;
    }
    rmlf (s);
    printf ("Type in a string 't': ");
    if (!fgets (t, MAXC, stdin)) {
        fprintf (stderr, "error: invalid input for 's'.\n");
        return 1;
    }
    rmlf (t);
    printf ("\nThe longest common string is : %zu ('%s')\n", maxspn (s, t, res), res);
    printf ("\nThe longest common word is : %zu ('%s')\n", maxspnwhole (s, t, res), res);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3723658_3723670_4_25
3723658_3723677_2_11
Title: Does anyone have an example of a conditional statement in C? 
----------------------------------------

int main (void) {
    int var;
    char buff [100];
    printf ("Enter number> ");
    fflush (stdout);
    if (fgets (buff, sizeof (buff), stdin) == NULL) {
        printf ("\nfgets() failed\n");
        return 1;
    }
    if (sscanf (buff, "%d", &var) != 1) {
        printf ("\nsscanf() failed\n");
        return 1;
    }
    if (var > 5)
        printf ("%d is greater than 5\n", var);
    else
        printf ("%d is less than 6\n", var);
    return 0;
}
----------------------------------------

int main () {
    int var;
    scanf ("%d", & var);
    if (var > 5)
        printf ("var > 5\n");
    else
        printf ("var <= 5\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37240510_37240577_10_27
37240510_37240902_11_33
Title: Get input with fscanf 
----------------------------------------

int main (void) {
    struct movie m;
    puts ("What was the title of the movie you saw?");
    if (scanf (" %39[^\n]", m.title) != 1)
        return 1;
    puts ("What was the release year?");
    if (scanf ("%d", &m.year) != 1)
        return 1;
    puts ("How would you rate the movie? (1-10)");
    if (scanf ("%d", &m.rate) != 1)
        return 1;
    printf ("You saw the movie %s which was released in %d and you rated it a %d\n", m.title, m.year, m.rate);
    return 0;
}
----------------------------------------

int main () {
    struct movie m;
    char *newline_char = NULL;
    puts ("What was the title of the movie you saw?");
    fgets (m.title, 40, stdin);
    if ((newline_char = strchr (m.title, '\n')) != NULL) {
        *newline_char = '\0';
    }
    puts ("What was the relase year?");
    fscanf (stdin, "%d", & m.year);
    puts ("How would you rate the movie? (1-10)");
    fscanf (stdin, "%d", & m.rate);
    printf ("You saw the movie %s which was released %d and you rated it a %d", m.title, m.year, m.rate);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37264202_37264526_4_13
37264202_37264725_4_15
Title: How to iterate over combinations of a string 
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = "string";
    int len = strlen (str);
    int sz = len + 1;
    char cpy [sz];
    for (int i = 0; i < len; ++i)
        for (int j = i; j < len; ++j)
            printf ("%s\n", strncpy (memset (cpy, 0, sz), &str[i], len - j));
}
----------------------------------------

int main (int argc, char *argv []) {
    char str [] = "string";
    int len = strlen (str);
    int sz = len + 1;
    char cpy [sz + 1];
    for (int i = 0; i < sz; ++i)
        for (int j = i; j < len; ++j) {
            snprintf (cpy, sz - j, "%s\n", & str [i]);
            puts (cpy);
        }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37266763_37269267_4_28
37266763_37371018_1_16
Title: strtok function in C 
----------------------------------------

int main (void) {
    const char *dtstr = "mm/dd/yyyy";
    char *p = (char *) dtstr, *ep;
    char m [3] = "", d [3] = "", y [5] = "";
    if (!(ep = strchr (p, '/')))
        return 1;
    if (ep - p < 3 && strncpy (m, p, ep -p))
        p = ep + 1;
    else
        return 1;
    if (!(ep = strchr (p, '/')))
        return 1;
    if (ep - p < 3 && strncpy (d, p, ep -p))
        p = ep + 1;
    else
        return 1;
    if (!strncpy (y, p, 5))
        return 1;
    m[2] = d[2] = y[4] = 0;
    printf ("\n %s/%s/%s\n\n", m, d, y);
    return 0;
}
----------------------------------------

The short and simple program according to me would be void main () {
    char date [15];
    char *dd, *mm, *yy;
    gets (date);
    char *token = strtok (date, "\");
dd=token;  //you get the date
token=strtok(NULL," \ ");
mm=token; //you get the month
token=strtok(NULL," \ ");
    yy = token;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3727569_3727618_80_93
3727569_3727625_1_19
Title: Linked List in C 
----------------------------------------

int main (int argc, char *argv []) {
    NODE *head = create_list ();
    if (!head) {
        printf ("ERROR: Either malloc() failed or data not found\n");
    }
    else {
        print_list (head, NULL);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    NODE *head = create_list ();
    int toret = EXIT_SUCCESS;
    if (!head) {
        printf ("ERROR: Either malloc() failed or data not found\n");
        toret = EXIT_FAILURE;
        clear (head);
    }
    else {
        print_list (head, NULL);
        clear (head);
    }
    return toret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37282450_37282535_9_20
37282450_37282607_15_26
Title: Swap Issue in C [Beginner] 
----------------------------------------

int main (void) {
    int a, b;
    a = 666;
    b = 998;
    printf ("Before the swap a = %d, b = %d\n", a, b);
    swaplol (& a, & b);
    printf ("After the swap : a= %d, b=%d\n", a, b);
    return 0;
}
----------------------------------------

int main (void) {
    int a, b;
    a = 666;
    b = 998;
    printf ("Before the swap a = %d, b = %d\n", a, b);
    swaplol (& a, & b);
    printf ("After the swap : a= %d, b=%d\n", a, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37282450_37282535_9_20
37282450_37282751_10_23
Title: Swap Issue in C [Beginner] 
----------------------------------------

int main (void) {
    int a, b;
    a = 666;
    b = 998;
    printf ("Before the swap a = %d, b = %d\n", a, b);
    swaplol (& a, & b);
    printf ("After the swap : a= %d, b=%d\n", a, b);
    return 0;
}
----------------------------------------

int main (void) {
    int a, b;
    a = 666;
    b = 998;
    printf ("Before the swap a = %d, b = %d\n", a, b);
    swaplol (& a, & b);
    printf ("After the swap : a = %d, b = %d\n", a, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37282450_37282607_15_26
37282450_37282751_10_23
Title: Swap Issue in C [Beginner] 
----------------------------------------

int main (void) {
    int a, b;
    a = 666;
    b = 998;
    printf ("Before the swap a = %d, b = %d\n", a, b);
    swaplol (& a, & b);
    printf ("After the swap : a= %d, b=%d\n", a, b);
    return 0;
}
----------------------------------------

int main (void) {
    int a, b;
    a = 666;
    b = 998;
    printf ("Before the swap a = %d, b = %d\n", a, b);
    swaplol (& a, & b);
    printf ("After the swap : a = %d, b = %d\n", a, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37314153_37314704_1_26
37314153_37314804_4_33
Title: Creating patterns with multidimensional arrays in c 
----------------------------------------

int main () {
    int the_array [5] [5] = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0},};
    int dia = 80;
    for (int x = 4; x >= 0; --x) {
        the_array[x][x] = dia;
        dia /= 2;
        for (int y = 0; y < 5; ++y) {
            printf (" %02d ", the_array [x] [y]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int the_array [5] [5] = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0},};
    int dia = 5;
    int x = 0;
    int y = 0;
    for (x = 4; x >= 0; --x) {
        the_array[x][x] = dia;
        dia *= 2;
    }
    for (int i = 0; i < 5; i++) {
        for (int j = 4; j >= 0; j--) {
            printf ("%d ", the_array [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37314153_37314704_1_26
37314153_37321237_3_18
Title: Creating patterns with multidimensional arrays in c 
----------------------------------------

int main () {
    int the_array [5] [5] = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0},};
    int dia = 80;
    for (int x = 4; x >= 0; --x) {
        the_array[x][x] = dia;
        dia /= 2;
        for (int y = 0; y < 5; ++y) {
            printf (" %02d ", the_array [x] [y]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int the_array [5] [5] = {{0}};
    int x, y, dia = 80;
    for (x = 0; x < 5; ++x) {
        for (y = 0; y < 5; ++y) {
            if (x == 5 - y - 1) {
                the_array[x][y] = dia;
                dia /= 2;
            }
            printf (" %2d ", the_array [x] [y]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37314153_37314804_4_33
37314153_37321237_3_18
Title: Creating patterns with multidimensional arrays in c 
----------------------------------------

int main () {
    int the_array [5] [5] = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0},};
    int dia = 5;
    int x = 0;
    int y = 0;
    for (x = 4; x >= 0; --x) {
        the_array[x][x] = dia;
        dia *= 2;
    }
    for (int i = 0; i < 5; i++) {
        for (int j = 4; j >= 0; j--) {
            printf ("%d ", the_array [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int the_array [5] [5] = {{0}};
    int x, y, dia = 80;
    for (x = 0; x < 5; ++x) {
        for (y = 0; y < 5; ++y) {
            if (x == 5 - y - 1) {
                the_array[x][y] = dia;
                dia /= 2;
            }
            printf (" %2d ", the_array [x] [y]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37328895_37329320_17_27
37328895_37329916_18_34
Title: How to print the value stored in an char[] or string in the program itself 
----------------------------------------

int main () {
    unordered_map < string, function < void () >> func_map;
    func_map["test_0"] = test_0;
    func_map["test_1"] = test_1;
    for (int i = 0; i < 2; ++i) {
        func_map.at ("test_" + to_string (i)) ();
    }
    return 0;
}
----------------------------------------

int main () {
    void (*a) () = test_0;
    void (*b) () = test_1;
    void (*c) () = test_2;
    const int SIZE = 3;
    void (*arr [SIZE]) () = {{a}, {b}, {c}};
    for (int i = 0; i < SIZE; ++i) {
        arr[i] ();
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37335315_37335817_3_33
37335315_37335864_3_36
Title: Switch statements that read integers from input and reacts accordingly 
----------------------------------------

int main (void) {
    int num;
    int range = 0;
    printf ("input num:\n");
    scanf ("%d", & num);
    if (num < 1)
        range = -1;
    else {
        while (num /= 10) {
            ++range;
        }
    }
    switch (range) {
    case -1 :
        puts ("smaller than 1");
        break;
    case 0 :
        puts ("smaller than 10");
        break;
    case 1 :
        puts ("smaller than 100");
        break;
    case 2 :
        puts ("smaller than 1000");
        break;
    default :
        puts ("More than 1000\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    enum {LESS_THAN_1, LESS_THAN_10, LESS_THAN_100, LESS_THAN_1000};
    int a [] = {1, 10, 100, 1000};
    int x;
    printf ("Enter a number: ");
    if (scanf ("%d", &x) == 1) {
        int i = 0;
        while (i < sizeof (a) / sizeof (*a) && !(x < a[i]))
            ++i;
        switch (i) {
        case LESS_THAN_1 :
            printf ("x is smaller than %d\n", a[i]);
            break;
        case LESS_THAN_10 :
            printf ("x is smaller than %d\n", a[i]);
            break;
        case LESS_THAN_100 :
            printf ("x is smaller than %d\n", a[i]);
            break;
        case LESS_THAN_1000 :
            printf ("x is smaller than %d\n", a[i]);
            break;
        default :
            printf ("x is greater than or equal to %d\n", a[i - 1]);
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37337801_37337914_7_20
37337801_37338123_4_18
Title: Assign single dimension array as an element of two(multi) dimensional array in (C/C++) 
----------------------------------------

int main () {
    VERTEX v1 = {1, 2, 3};
    VERTEX v2 = {2, 2, 3};
    VERTEX v3 = {1, 2, 1};
    TRIANGLE tr;
    tr[0] = v1;
    TRIANGLE trArray [4];
    trArray[0] = tr;
std :
    : cout << v1 [0] << " " << v1 [1] << " " << v1 [2] << std : : endl;
}
----------------------------------------

int main () {
    VERTREX v1 = {1, 2, 3};
    VERTREX v2 = {2, 2, 3};
    VERTREX v3 = {1, 2, 1};
    TRIANGLE tr;
    tr[0] = v1;
    tr[1] = v2;
    tr[2] = v3;
    TRIANGLE triangle [4];
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37337801_37337914_7_20
37337801_37338261_4_22
Title: Assign single dimension array as an element of two(multi) dimensional array in (C/C++) 
----------------------------------------

int main () {
    VERTEX v1 = {1, 2, 3};
    VERTEX v2 = {2, 2, 3};
    VERTEX v3 = {1, 2, 1};
    TRIANGLE tr;
    tr[0] = v1;
    TRIANGLE trArray [4];
    trArray[0] = tr;
std :
    : cout << v1 [0] << " " << v1 [1] << " " << v1 [2] << std : : endl;
}
----------------------------------------

int main () {
    VERTREX v1 = {1, 2, 3};
    VERTREX v2 = {11, 21, 13};
    VERTREX v3 = {1, 12, 41};
    TRIANGLE tr;
    tr[0] = &v1;
    tr[1] = &v2;
    tr[2] = &v3;
    tr[3] = &v3;
    -- (1) std : : cout << (* (& v3)) [2] << std : : endl;
std :
    : cout << (* tr [2]) [2] << std : : endl;
    system ("Pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37337801_37338123_4_18
37337801_37338261_4_22
Title: Assign single dimension array as an element of two(multi) dimensional array in (C/C++) 
----------------------------------------

int main () {
    VERTREX v1 = {1, 2, 3};
    VERTREX v2 = {2, 2, 3};
    VERTREX v3 = {1, 2, 1};
    TRIANGLE tr;
    tr[0] = v1;
    tr[1] = v2;
    tr[2] = v3;
    TRIANGLE triangle [4];
    return 0;
}
----------------------------------------

int main () {
    VERTREX v1 = {1, 2, 3};
    VERTREX v2 = {11, 21, 13};
    VERTREX v3 = {1, 12, 41};
    TRIANGLE tr;
    tr[0] = &v1;
    tr[1] = &v2;
    tr[2] = &v3;
    tr[3] = &v3;
    -- (1) std : : cout << (* (& v3)) [2] << std : : endl;
std :
    : cout << (* tr [2]) [2] << std : : endl;
    system ("Pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37341693_37342226_3_35
37341693_37343964_10_50
Title: C - Read in float value using getchar and print out float using printf 
----------------------------------------

int main (void) {
    float num = 0.0;
    float i = 1.0;
    char ch;
    printf ("Enter a float number: ");
    while ((ch = getchar ()) != '\n') {
        if (ch == '.') {
            i = 0.1;
        }
        else if ((ch >= '0') && (ch <= '9')) {
            if (i == 1) {
                num *= 10;
                num += ch - '0';
            }
            else {
                num += (ch - '0') * i;
                i /= 10;
            }
        }
    }
    printf ("%.4f\n", num);
    return 0;
}
----------------------------------------

int main () {
    double f = 0.;
    int c;
    bool initial = 1, final = 0;
    int pos = 0;
    double decimal = 0;
    while (((c = getchar ()) != EOF) && (c != '\n')) {
        pos += 1;
        if (isspace (c)) {
            if (initial || final)
                continue;
            else {
                final = 1;
                continue;
            }
        }
        else if (final) {
            error (pos, c);
        }
        initial = 0;
        if (c == '.') {
            if (decimal) {
                error (pos, c);
            }
            else
                decimal = 1;
        }
        else if (!isdigit (c)) {
            error (pos, c);
        }
        else if (decimal == 0) {
            f = f * 10 + c - '0';
        }
        else {
            decimal *= .1;
            f += (c - '0') * decimal;
        }
    }
    printf ("%.4f\n", f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37341693_37342226_3_35
37341693_37348098_3_37
Title: C - Read in float value using getchar and print out float using printf 
----------------------------------------

int main (void) {
    float num = 0.0;
    float i = 1.0;
    char ch;
    printf ("Enter a float number: ");
    while ((ch = getchar ()) != '\n') {
        if (ch == '.') {
            i = 0.1;
        }
        else if ((ch >= '0') && (ch <= '9')) {
            if (i == 1) {
                num *= 10;
                num += ch - '0';
            }
            else {
                num += (ch - '0') * i;
                i /= 10;
            }
        }
    }
    printf ("%.4f\n", num);
    return 0;
}
----------------------------------------

int main (void) {
    float power_of_ten, num = 0.;
    char c, ch [32];
    int j, i = 0;
    int point_pos = -1;
    while (((c = getchar ()) != EOF) && (c != '\n'))
        if (((c >= '0') && (c <= '9')) || ((c == '.') && (point_pos == -1))) {
            ch[i] = c;
            if (ch[i] == '.')
                point_pos = i;
            i++;
        }
    ch[++i] = '\0';
    if (point_pos >= 0) {
        power_of_ten = .1;
        for (j = point_pos + 1; j < i - 1; j++) {
            num += (float) (ch[j] - '0') * power_of_ten;
            power_of_ten *= .1;
        }
    }
    power_of_ten = 1.;
    if (point_pos == -1)
        point_pos = i - 1;
    for (j = point_pos - 1; j >= 0; j--) {
        num += (float) (ch[j] - '0') * power_of_ten;
        power_of_ten *= 10;
    }
    printf ("%.4f\n", num);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37341693_37342226_3_35
37341693_41788466_6_34
Title: C - Read in float value using getchar and print out float using printf 
----------------------------------------

int main (void) {
    float num = 0.0;
    float i = 1.0;
    char ch;
    printf ("Enter a float number: ");
    while ((ch = getchar ()) != '\n') {
        if (ch == '.') {
            i = 0.1;
        }
        else if ((ch >= '0') && (ch <= '9')) {
            if (i == 1) {
                num *= 10;
                num += ch - '0';
            }
            else {
                num += (ch - '0') * i;
                i /= 10;
            }
        }
    }
    printf ("%.4f\n", num);
    return 0;
}
----------------------------------------

int main (void) {
    char c;
    float f, mod, fractional;
    char *buff = malloc (10), *fptr;
    char *str = buff;
    int digits;
    printf ("Enter any number\n");
    c = getchar ();
    while (c != '\n') {
        *buff = c;
        buff = buff + 1;
        c = getchar ();
    }
    *buff = '\0';
    mod = atoi (str);
    fptr = strstr (str, ".");
    if (fptr != NULL)
        fptr++;
    fractional = atoi (fptr);
    digits = findNumOfDigits (fractional);
    f = (mod + (fractional / pow (10, digits)));
    printf ("Number converted to float = %f", f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37341693_37343964_10_50
37341693_37348098_3_37
Title: C - Read in float value using getchar and print out float using printf 
----------------------------------------

int main () {
    double f = 0.;
    int c;
    bool initial = 1, final = 0;
    int pos = 0;
    double decimal = 0;
    while (((c = getchar ()) != EOF) && (c != '\n')) {
        pos += 1;
        if (isspace (c)) {
            if (initial || final)
                continue;
            else {
                final = 1;
                continue;
            }
        }
        else if (final) {
            error (pos, c);
        }
        initial = 0;
        if (c == '.') {
            if (decimal) {
                error (pos, c);
            }
            else
                decimal = 1;
        }
        else if (!isdigit (c)) {
            error (pos, c);
        }
        else if (decimal == 0) {
            f = f * 10 + c - '0';
        }
        else {
            decimal *= .1;
            f += (c - '0') * decimal;
        }
    }
    printf ("%.4f\n", f);
    return 0;
}
----------------------------------------

int main (void) {
    float power_of_ten, num = 0.;
    char c, ch [32];
    int j, i = 0;
    int point_pos = -1;
    while (((c = getchar ()) != EOF) && (c != '\n'))
        if (((c >= '0') && (c <= '9')) || ((c == '.') && (point_pos == -1))) {
            ch[i] = c;
            if (ch[i] == '.')
                point_pos = i;
            i++;
        }
    ch[++i] = '\0';
    if (point_pos >= 0) {
        power_of_ten = .1;
        for (j = point_pos + 1; j < i - 1; j++) {
            num += (float) (ch[j] - '0') * power_of_ten;
            power_of_ten *= .1;
        }
    }
    power_of_ten = 1.;
    if (point_pos == -1)
        point_pos = i - 1;
    for (j = point_pos - 1; j >= 0; j--) {
        num += (float) (ch[j] - '0') * power_of_ten;
        power_of_ten *= 10;
    }
    printf ("%.4f\n", num);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37341693_37343964_10_50
37341693_41788466_6_34
Title: C - Read in float value using getchar and print out float using printf 
----------------------------------------

int main () {
    double f = 0.;
    int c;
    bool initial = 1, final = 0;
    int pos = 0;
    double decimal = 0;
    while (((c = getchar ()) != EOF) && (c != '\n')) {
        pos += 1;
        if (isspace (c)) {
            if (initial || final)
                continue;
            else {
                final = 1;
                continue;
            }
        }
        else if (final) {
            error (pos, c);
        }
        initial = 0;
        if (c == '.') {
            if (decimal) {
                error (pos, c);
            }
            else
                decimal = 1;
        }
        else if (!isdigit (c)) {
            error (pos, c);
        }
        else if (decimal == 0) {
            f = f * 10 + c - '0';
        }
        else {
            decimal *= .1;
            f += (c - '0') * decimal;
        }
    }
    printf ("%.4f\n", f);
    return 0;
}
----------------------------------------

int main (void) {
    char c;
    float f, mod, fractional;
    char *buff = malloc (10), *fptr;
    char *str = buff;
    int digits;
    printf ("Enter any number\n");
    c = getchar ();
    while (c != '\n') {
        *buff = c;
        buff = buff + 1;
        c = getchar ();
    }
    *buff = '\0';
    mod = atoi (str);
    fptr = strstr (str, ".");
    if (fptr != NULL)
        fptr++;
    fractional = atoi (fptr);
    digits = findNumOfDigits (fractional);
    f = (mod + (fractional / pow (10, digits)));
    printf ("Number converted to float = %f", f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37341693_37348098_3_37
37341693_41788466_6_34
Title: C - Read in float value using getchar and print out float using printf 
----------------------------------------

int main (void) {
    float power_of_ten, num = 0.;
    char c, ch [32];
    int j, i = 0;
    int point_pos = -1;
    while (((c = getchar ()) != EOF) && (c != '\n'))
        if (((c >= '0') && (c <= '9')) || ((c == '.') && (point_pos == -1))) {
            ch[i] = c;
            if (ch[i] == '.')
                point_pos = i;
            i++;
        }
    ch[++i] = '\0';
    if (point_pos >= 0) {
        power_of_ten = .1;
        for (j = point_pos + 1; j < i - 1; j++) {
            num += (float) (ch[j] - '0') * power_of_ten;
            power_of_ten *= .1;
        }
    }
    power_of_ten = 1.;
    if (point_pos == -1)
        point_pos = i - 1;
    for (j = point_pos - 1; j >= 0; j--) {
        num += (float) (ch[j] - '0') * power_of_ten;
        power_of_ten *= 10;
    }
    printf ("%.4f\n", num);
    return 0;
}
----------------------------------------

int main (void) {
    char c;
    float f, mod, fractional;
    char *buff = malloc (10), *fptr;
    char *str = buff;
    int digits;
    printf ("Enter any number\n");
    c = getchar ();
    while (c != '\n') {
        *buff = c;
        buff = buff + 1;
        c = getchar ();
    }
    *buff = '\0';
    mod = atoi (str);
    fptr = strstr (str, ".");
    if (fptr != NULL)
        fptr++;
    fractional = atoi (fptr);
    digits = findNumOfDigits (fractional);
    f = (mod + (fractional / pow (10, digits)));
    printf ("Number converted to float = %f", f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37344876_37344954_3_36
37344876_37345972_24_36
Title: Reading input char by char using realloc in C 
----------------------------------------

int main (void) {
    char *ptr;
    char *word = malloc (1 * sizeof *word);
    char c;
    int numofChars = 0;
    printf ("Enter string terminated by a space :");
    c = getchar ();
    word[0] = c;
    numofChars++;
    while ((c = getchar ()) != ' ') {
        numofChars++;
        ptr = realloc (word, numofChars * sizeof *ptr);
        if (ptr != NULL) {
            word = ptr;
            word[numofChars - 1] = c;
        }
    }
    numofChars++;
    ptr = realloc (word, numofChars * sizeof *ptr);
    if (ptr != NULL) {
        word = ptr;
        word[numofChars - 1] = '\0';
    }
    printf ("Word : %s\n", word);
    free (word);
    return 0;
}
----------------------------------------

int main (void) {
    string_buffer_t *sb = sb_init ();
    int c;
    while ((c = getchar ()) != ' ' && c != '\n' && c != EOF)
        sb_append_char (sb, c);
    char *string = sb_release (sb);
    printf ("string : \"%s\"\nlength : %zu\n", string, strlen (string));
    free (string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37344876_37344954_3_36
37344876_37346030_5_28
Title: Reading input char by char using realloc in C 
----------------------------------------

int main (void) {
    char *ptr;
    char *word = malloc (1 * sizeof *word);
    char c;
    int numofChars = 0;
    printf ("Enter string terminated by a space :");
    c = getchar ();
    word[0] = c;
    numofChars++;
    while ((c = getchar ()) != ' ') {
        numofChars++;
        ptr = realloc (word, numofChars * sizeof *ptr);
        if (ptr != NULL) {
            word = ptr;
            word[numofChars - 1] = c;
        }
    }
    numofChars++;
    ptr = realloc (word, numofChars * sizeof *ptr);
    if (ptr != NULL) {
        word = ptr;
        word[numofChars - 1] = '\0';
    }
    printf ("Word : %s\n", word);
    free (word);
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    size_t n;
    char *word;
    char *tmp;
    n = 0;
    word = malloc (n +1);
    word[n++] = '\0';
    printf ("Enter a word: ");
    while ((c = getchar ()) != EOF && !isspace (c) && (tmp = realloc (word, n +1)) != NULL) {
        word = tmp;
        word[n - 1] = c;
        word[n++] = '\0';
    }
    printf ("You've entered \"%s\"\n", word);
    free (word);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37344876_37345972_24_36
37344876_37346030_5_28
Title: Reading input char by char using realloc in C 
----------------------------------------

int main (void) {
    string_buffer_t *sb = sb_init ();
    int c;
    while ((c = getchar ()) != ' ' && c != '\n' && c != EOF)
        sb_append_char (sb, c);
    char *string = sb_release (sb);
    printf ("string : \"%s\"\nlength : %zu\n", string, strlen (string));
    free (string);
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    size_t n;
    char *word;
    char *tmp;
    n = 0;
    word = malloc (n +1);
    word[n++] = '\0';
    printf ("Enter a word: ");
    while ((c = getchar ()) != EOF && !isspace (c) && (tmp = realloc (word, n +1)) != NULL) {
        word = tmp;
        word[n - 1] = c;
        word[n++] = '\0';
    }
    printf ("You've entered \"%s\"\n", word);
    free (word);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37345663_37345900_4_13
37345663_37346683_4_21
Title: C Array to Pointers 
----------------------------------------

int main (int argc, char **argv) {
    char ar [200] = "Hello World";
    strcat (ar, " !");
    printf ("%s\n", ar);
    char **p;
    (*p) = &ar;
    printf ("%s\n", * p);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char ar [200] = "Hello World";
    strcat (ar, " !");
    printf ("%s\n", ar);
    char *p = ar;
    char **pp = &p;
    printf ("%s\n", * pp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37355581_37355631_1_13
37355581_37356441_1_12
Title: Is it cheating to use 'static' when writing a recursive algorithm? 
----------------------------------------

int largest (int arr [], int length) {
    int split, lower, upper;
    switch (length) {
    case 1 :
        return arr[0];
    case 2 :
        if (arr[1] > arr[0])
            return arr[1];
        else
            return arr[0];
    default :
        if (len <= 0) throw error;
        split = length / 2;
        lower = largest (arr, split);
        upper = largest (arr +split, length -split);
        if (lower > upper)
            return lower;
        else
            return upper;
    }
}
----------------------------------------

int largest (int arr [], int length) {
    if (length <= 0)
        return INT_MIN;
    int big = arr[0];
    while (length > 1) {
        int length_r = length / 2;
        int length_l = length - length_r;
        int big_r = largest (&arr[length_l], length_r);
        if (big_r > big)
            big = big_r;
        length = length_l;
    }
    return big;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3739458_3739511_1_17
3739458_3739554_1_10
Title: Is there a C/C++ function to safely handle division by zero? 
----------------------------------------

float calcWeightedAverage (float v1, float v2, float w1, float w2) {
    float a1 = 0.0;
    float a2 = 0.0;
    if (v1 != 0) {
        a1 = v1 / (v1 + v2) * w1;
    }
    if (v2 != 0) {
        a2 = v2 / (v1 + v2) * w2;
    }
    return a1 + a2;
}
----------------------------------------

float calcWeightedAverage (float v1, float v2, float w1, float w2) {
    static const float eps = FLT_MIN;
    v1 = fabs (v1);
    v2 = fabs (v2);
    if (v1 + v2 < eps)
        return (w1 + w2) / 2.0f;
    else
        return (v1 / (v1 + v2)) * w1 + (v2 / (v1 + v2) * w2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3739458_3739511_1_17
3739458_3739678_1_13
Title: Is there a C/C++ function to safely handle division by zero? 
----------------------------------------

float calcWeightedAverage (float v1, float v2, float w1, float w2) {
    float a1 = 0.0;
    float a2 = 0.0;
    if (v1 != 0) {
        a1 = v1 / (v1 + v2) * w1;
    }
    if (v2 != 0) {
        a2 = v2 / (v1 + v2) * w2;
    }
    return a1 + a2;
}
----------------------------------------

float calcWeightedAverage (float v1, float v2, float w1, float w2) {
    v1 = fabs (v1);
    v2 = fabs (v2);
    if (v1 == v2) {
        v1 = 0.5;
    }
    else {
        v1 = v1 / (v1 + v2);
    }
    v2 = 1 - v1;
    return v1 * w1 + v2 * w2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3739458_3739554_1_10
3739458_3739678_1_13
Title: Is there a C/C++ function to safely handle division by zero? 
----------------------------------------

float calcWeightedAverage (float v1, float v2, float w1, float w2) {
    static const float eps = FLT_MIN;
    v1 = fabs (v1);
    v2 = fabs (v2);
    if (v1 + v2 < eps)
        return (w1 + w2) / 2.0f;
    else
        return (v1 / (v1 + v2)) * w1 + (v2 / (v1 + v2) * w2);
}
----------------------------------------

float calcWeightedAverage (float v1, float v2, float w1, float w2) {
    v1 = fabs (v1);
    v2 = fabs (v2);
    if (v1 == v2) {
        v1 = 0.5;
    }
    else {
        v1 = v1 / (v1 + v2);
    }
    v2 = 1 - v1;
    return v1 * w1 + v2 * w2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37397514_37398354_1_17
37397514_42014689_9_46
Title: Program does not return output for large value of input such as 50.It returns 0.this is a factorial program using recursion 
----------------------------------------

char *strfact_mult (char *s, unsigned x) {
    unsigned sum = 0;
    size_t len = strlen (s);
    size_t i = len;
    while (i > 0) {
        sum += (s[--i] - '0') * x;
        s[i] = sum % 10 + '0';
        sum /= 10;
    }
    while (sum) {
        len++;
        memmove (& s [1], s, len);
        s[i] = sum % 10 + '0';
        sum /= 10;
    }
    return s;
}
----------------------------------------

char *strfact_mult (char *s, unsigned x) {
    int len = strlen (s);
    int carry = 0;
    for (int i = 1; i <= len; ++i) {
        int product = (s[len - i] - '0') * x + carry;
        s[len - i] = product % 10 + '0';
        carry = 0;
        if (product > 9) {
            carry = product / 10;
            if (i == len) {
                ++len;
                memmove (& s [1], s, len);
                s[0] = '0';
            }
        }
    }
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403111_37403212_4_13
37403111_37403255_1_10
Title: Program for length and area of rectangle using functions 
----------------------------------------

int main () {
    double x, w;
    printf ("Enter the length: ");
    scanf ("%lf", & x);
    printf ("Enter the width: ");
    scanf ("%lf", & w);
    printf ("The perimeter is %lf\n", perimeter (x, w));
    printf ("The area is %lf\n", area (x, w));
    return 0;
}
----------------------------------------

int main () {
    double length, width;
    printf ("Enter the length: ");
    scanf ("%lf", & length);
    prntf ("Enter the width: ");
    scanf ("%lf", & width);
    printf ("The perimeter is %lf\n", perimeter (length, width);
    printf ("The area is %lf\n", area (length, width);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37403111_37403255_1_10
37403111_37403299_10_19
Title: Program for length and area of rectangle using functions 
----------------------------------------

int main () {
    double length, width;
    printf ("Enter the length: ");
    scanf ("%lf", & length);
    prntf ("Enter the width: ");
    scanf ("%lf", & width);
    printf ("The perimeter is %lf\n", perimeter (length, width);
    printf ("The area is %lf\n", area (length, width);
    return 0;
}
----------------------------------------

int main () {
    double x, w;
    printf ("Enter the length: ");
    scanf ("%lf", & x);
    printf ("Enter the width: ");
    scanf ("%lf", & w);
    printf ("The perimeter is %lf\n", perimeter (x, w));
    printf ("The area is %lf\n", area (x, w));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741000_3741097_3_24
3741000_3741221_8_26
Title: 2D array through pointers 
----------------------------------------

int main (void) {
    int i, j, n, a, b;
    int (* (*p) []) [];
    printf ("\n\tEnter the size of the matrix in the form aXb\t\n");
    scanf ("%dX%d", & a, & b);
    p = malloc (b * sizeof (int (*)[]));
    for (i = 0; i < b; i++) {
        (*p)[i] = malloc (a * sizeof (int));
        printf ("\t\bEnter Column %d\t\n", i);
        for (j = 0; j < a; j++)
            scanf ("%d", &(*(*p)[i])[j]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, j, n, rows, cols;
    int *p;
    printf ("Enter the size of the matrix in the form aXb\n");
    n = scanf ("%dX%d", &rows, &cols);
    assert ((n == 2) && ("scanf failed"));
    p = malloc (rows *cols * sizeof *p);
    assert ((p != NULL) && "malloc failed");
    for (i = 0; i < rows; i++) {
        int rowindex = i * cols;
        for (j = 0; j < cols; j++) {
            n = scanf ("%d", &p[rowindex + j]);
            assert ((n == 1) && "scanf failed");
        }
    }
    free (p);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37433525_37433621_32_44
37433525_37434038_37_49
Title: How to return different types from a single function 
----------------------------------------

int main () {
    int *ptr_int = func (3);
    char *ptr_char = func (4);
    fprintf (stdout, "int value = %d\n", * ptr_int);
    fprintf (stdout, "char value = %c\n", * ptr_char);
    free (ptr_int);
    free (ptr_char);
    return 0;
}
----------------------------------------

int main (void) {
    struct group x;
    srand (time (0));
    for (int k = 0; k < 20; k++) {
        x = f1 ();
        switch (x.lastunionmember) {
        default :
            printf ("invalid value\n");
            break;
        case 1 :
            printf ("int value is %d\n", *x.x.intp);
            break;
        case 2 :
            printf ("string is \"%s\"\n", x.x.charp);
            break;
        case 3 :
            printf ("double value is %f\n", x.x.doublev);
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37452590_37452934_8_29
37452590_37452951_10_29
Title: How to do char* array element swapping in C? 
----------------------------------------

int main (int argc, char *argv []) {
    int j = 0, n = 4;
    printf ("BEFORE str_swap(&char_array[0],&char_array[2]);\n");
    for (j = 0; j < n; j++) {
        printf ("char_array[%d] = %s\n", j, char_array [j]);
    }
    str_swap (& char_array [0], & char_array [2]);
    printf ("AFTER str_swap(&char_array[0],&char_array[2]);\n");
    for (j = 0; j < n; j++) {
        printf ("char_array[%d] = %s\n", j, char_array [j]);
    }
    return 0;
}
----------------------------------------

int main () {
    size_t j = 0;
    printf ("BEFORE str_swap(&char_array[0],&char_array[2]);\n");
    for (j = 0; j < ARRAY_SIZE; j++) {
        printf ("char_array[%zu] = %s\n", j, char_array [j]);
    }
    str_swap (& char_array [0], & char_array [2]);
    printf ("AFTER str_swap(&char_array[0],&char_array[2]);\n");
    for (j = 0; j < ARRAY_SIZE; j++) {
        printf ("char_array[%zu] = %s\n", j, char_array [j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37455656_37455757_12_54
37455656_37456461_1_35
Title: Linked List is Printed reverse in C 
----------------------------------------

int main () {
    student *hd_stdptr = NULL, *p;
    student **pp = &hd_stdptr;
    int i, x;
    char input [70];
    for (i = 0; i < 6 && fgets (input, sizeof (input), stdin) != NULL; ++i) {
        student *p = malloc (sizeof *p);
        if (p == NULL) {
            perror ("Failed to allocate new student: ");
            exit (EXIT_FAILURE);
        }
        for (x = 0; input[x] && input[x] != '-' && input[x] != '\n'; ++x)
            p->name[x] = input[x];
        p->name[x] = 0;
        *pp = p;
        pp = &p->next;
    }
    *pp = NULL;
    for (p = hd_stdptr; p; p = p->next)
        printf ("%s\n", p->name);
    while (hd_stdptr) {
        p = hd_stdptr;
        hd_stdptr = p->next;
        free (p);
    }
}
----------------------------------------

int main () {
    student *curr_stdptr;
    student *hd_stdptr = NULL;
    student *tail_stdptr = NULL;
    int i, x, y;
    char input [70];
    char in_name [60];
    for (i = 0; i < 6; i++) {
        curr_stdptr = (student *) malloc (sizeof (student));
        if (i == 0) {
            tail_stdptr = hd_stdptr = curr_stdptr;
        }
        else {
            tail_stdptr->next = curr_stdptr;
            tail_stdptr = curr_stdptr;
        }
        fgets (input, 60, stdin);
        for (x = 0; input[x] != '-'; x++)
            tail_stdptr->name[x] = input[x];
        tail_stdptr->name[x] = '\0';
    }
    curr_stdptr = hd_stdptr;
    while (curr_stdptr != NULL) {
        printf ("%s\n", curr_stdptr -> name);
        curr_stdptr = curr_stdptr->next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37473620_37473638_1_14
37473620_37476242_1_13
Title: Proper way to destroy linked List? 
----------------------------------------

void destroyList (listNode *List) {
    listNode *temp;
    listNode *originalHead = List;
    temp = List->next;
    while (List != NULL) {
        temp = List;
        List = List->next;
        free (temp);
    }
    originalHead->next = NULL;
}
----------------------------------------

void destroyList (listNode **List) {
    listNode *temp1, *temp2;
    if (!List) {
        return;
    }
    temp1 = *List;
    while (temp1) {
        temp2 = temp1->next;
        free (temp1);
        temp1 = temp2
    }
    free (*List);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37475655_37476063_3_56
37475655_37479299_2_66
Title: error in long number addition using character array 
----------------------------------------

int main () {
    int num1 [255], num2 [255], sum [255];
    char s1 [255], s2 [255];
    int l1, l2;
    printf ("Enter Number1:");
    scanf ("%s", s1);
    printf ("Enter Number2:");
    scanf ("%s", s2);
    for (l1 = 0; s1[l1] != '\0'; l1++)
        num1[l1] = s1[l1] - '0';
    for (l2 = 0; s2[l2] != '\0'; l2++)
        num2[l2] = s2[l2] - '0';
    int carry = 0;
    int k = 0;
    int i = l1 - 1;
    int j = l2 - 1;
    for (; i >= 0 && j >= 0; i--, j--, k++) {
        sum[k] = (num1[i] + num2[j] + carry) % 10;
        carry = (num1[i] + num2[j] + carry) / 10;
    }
    if (l1 > l2) {
        while (i >= 0) {
            sum[k++] = (num1[i] + carry) % 10;
            carry = (num1[i--] + carry) / 10;
        }
        if (sum[k - 1] != carry)
            sum[k++] = carry;
    }
    else if (l1 < l2) {
        while (j >= 0) {
            sum[k++] = (num2[j] + carry) % 10;
            carry = (num2[j--] + carry) / 10;
        }
        if (sum[k - 1] != carry)
            sum[k++] = carry;
    }
    else {
        if (carry > 0)
            sum[k++] = carry;
    }
    printf ("Result:");
    for (k--; k >= 0; k--)
        printf ("%d", sum[k]);
    return 0;
}
----------------------------------------

int main () {
    int num1 [255], num2 [255], sum [255];
    char s1 [255], s2 [255];
    int l1, l2, h;
    printf ("Enter Number1:");
    scanf ("%s", & s1);
    printf ("Enter Number2:");
    scanf ("%s", & s2);
    for (l1 = 0; s1[l1] != '\0'; l1++)
        num1[l1] = s1[l1] - '0';
    for (l2 = 0; s2[l2] != '\0'; l2++)
        num2[l2] = s2[l2] - '0';
    int carry = 0;
    int k = 0;
    int i = l1 - 1;
    int j = l2 - 1;
    for (; i >= 0 && j >= 0; i--, j--, k++) {
        sum[k] = (num1[i] + num2[j] + carry) % 10;
        carry = (num1[i] + num2[j] + carry) / 10;
    }
    if (i == -1 && j >= 0) {
        while (j >= 0) {
            sum[k++] = (num2[j] + carry) % 10;
            carry = (num2[j] + carry) / 10;
            j--;
        }
    }
    if (i >= 0 && j == -1) {
        while (i >= 0) {
            sum[k++] = (num1[i] + carry) % 10;
            carry = (num1[i] + carry) / 10;
            i--;
        }
    }
    if (i == -1 && j == -1) {
        if (carry > 0)
            sum[k++] = carry;
    }
    printf ("Result:");
    for (k = k - 1; k >= 0; k--)
        printf ("%d", sum[k]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37475655_37476344_2_58
37475655_37479299_2_66
Title: error in long number addition using character array 
----------------------------------------

int main () {
    int num1 [255], num2 [255], sum [255];
    char s1 [255], s2 [255];
    int l1, l2, h;
    printf ("Enter Number1:");
    scanf ("%s", s1);
    printf ("Enter Number2:");
    scanf ("%s", s2);
    for (l1 = 0; s1[l1] != '\0'; l1++)
        num1[l1] = s1[l1] - 48;
    for (l2 = 0; s2[l2] != '\0'; l2++)
        num2[l2] = s2[l2] - 48;
    int carry = 0;
    int k = 0;
    int i = l1 - 1;
    int j = l2 - 1;
    for (; i >= 0 && j >= 0; i--, j--, k++) {
        sum[k] = (num1[i] + num2[j] + carry) % 10;
        carry = (num1[i] + num2[j] + carry) / 10;
    }
    if (l1 == 0 && carry == 1) {
        sum[k++] = 1;
    }
    else if (l1 > l2) {
        while (i >= 0) {
            sum[k++] = (num1[i] + carry) % 10;
            carry = (num1[i--] + carry) / 10;
        }
        if (carry == 1) {
            sum[k++] = carry;
        }
    }
    else if (l1 < l2) {
        while (j >= 0) {
            sum[k++] = (num2[j] + carry) % 10;
            carry = (num2[j--] + carry) / 10;
        }
        if (carry == 1) {
            sum[k++] = carry;
        }
    }
    printf ("Result:");
    for (k--; k >= 0; k--)
        printf ("%d", sum[k]);
    return 0;
}
----------------------------------------

int main () {
    int num1 [255], num2 [255], sum [255];
    char s1 [255], s2 [255];
    int l1, l2, h;
    printf ("Enter Number1:");
    scanf ("%s", & s1);
    printf ("Enter Number2:");
    scanf ("%s", & s2);
    for (l1 = 0; s1[l1] != '\0'; l1++)
        num1[l1] = s1[l1] - '0';
    for (l2 = 0; s2[l2] != '\0'; l2++)
        num2[l2] = s2[l2] - '0';
    int carry = 0;
    int k = 0;
    int i = l1 - 1;
    int j = l2 - 1;
    for (; i >= 0 && j >= 0; i--, j--, k++) {
        sum[k] = (num1[i] + num2[j] + carry) % 10;
        carry = (num1[i] + num2[j] + carry) / 10;
    }
    if (i == -1 && j >= 0) {
        while (j >= 0) {
            sum[k++] = (num2[j] + carry) % 10;
            carry = (num2[j] + carry) / 10;
            j--;
        }
    }
    if (i >= 0 && j == -1) {
        while (i >= 0) {
            sum[k++] = (num1[i] + carry) % 10;
            carry = (num1[i] + carry) / 10;
            i--;
        }
    }
    if (i == -1 && j == -1) {
        if (carry > 0)
            sum[k++] = carry;
    }
    printf ("Result:");
    for (k = k - 1; k >= 0; k--)
        printf ("%d", sum[k]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37483439_37491898_3_25
37483439_37498559_18_33
Title: Read expression using fgets and get the numeric values using sscanf 
----------------------------------------

void main () {
    char str [100];
    char str2 [100];
    char *aux;
    int i, counter, len;
    printf ("Introduce operation: ");
    fgets (str, 100, stdin);
    strtok (str, "\n");
    len = strlen (str);
    for (i = 0, counter = 0; i < len; i++)
        if (str[i] == ' ')
            counter++;
    aux = str;
    for (i = 0; i < counter + 1; i++) {
        sscanf (aux, "%s", str2);
        printf ("Element: %s", str2);
        aux = str + strlen (str2) * sizeof (char);
    }
}
----------------------------------------

int main (void) {
    char str [] = "5 2 pi cos - 4 * + 3 -";
    char *token;
    double n;
    token = strtok (str, " \t\n");
    while (token) {
        if (isNumber (token, &n)) {
            printf ("%g\n", n);
        }
        else {
            printf ("%s\n", token);
        }
        token = strtok (NULL, " \t\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37489272_37493376_4_35
37489272_37501874_5_45
Title: reading unknown number of of integers and printing them in words 
----------------------------------------

int main (void) {
    char *a [20] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    char *b [8] = {"twenty", "thirty", "fourty", "fifty", "sixty", "seventy", "eighty", "ninety"};
    char line [1024], *ptr = NULL;
    long num;
    int tens = 0, ones = 0;
    if (fgets (line, sizeof (line), stdin) != NULL) {
        do {
            num = strtol (line, &ptr, 10);
            tens = num / 10;
            ones = num % 10;
            if (tens > 1) {
                printf ("%s ", b [tens - 2]);
                printf ("%s \n", a [ones]);
            }
            else
                printf ("%s \n", a[num]);
        }
        while (*ptr != '\n');
    }
    printf ("done");
    return 0;
}
----------------------------------------

int main (void) {
    char *a [] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    char *b [] = {"twenty", "thirty", "fourty", "fifty", "sixty", "seventy", "eighty", "ninety"};
    char line [1024] = "";
    long num;
    int tens = 0, ones = 0;
    if (fgets (line, sizeof (line), stdin) != NULL) {
        char *p = line, *ep = NULL;
        errno = 0;
        while (errno == 0) {
            num = strtol (p, &ep, 10);
            if (p == ep)
                break;
            p = ep;
            if (num < 0 || 99 < num) {
                fprintf (stderr, "error: %ld - out of range.\n", num);
                continue;
            }
            tens = num / 10;
            ones = num % 10;
            if (tens > 1) {
                printf ("%s ", b [tens - 2]);
                printf ("%s \n", a [ones]);
            }
            else
                printf ("%s \n", a[num]);
        }
    }
    printf ("done\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37493551_37493565_11_25
37493551_37493689_9_23
Title: Project in C won't work 
----------------------------------------

int main () {
    int Counter, Number = 0;
    long Number_of_residents;
    Phonebook *Information;
    scanf ("%ld", & Number_of_residents);
    Information = (Phonebook *) malloc (Number_of_residents * sizeof (Phonebook));
    for (Counter = 0; Counter < Number_of_residents; Counter++) {
        scanf ("%10s", Information [Counter].Name);
        scanf ("%10s", Information [Counter].Address);
        scanf ("%ld", & Information [Counter].Phone_number);
    }
    return 0;
}
----------------------------------------

void main () {
    int Counter;
    long Number_of_residents;
    scanf ("%ld", & Number_of_residents);
    getchar ();
    Phonebook *Information = (Phonebook *) malloc (Number_of_residents * sizeof (Phonebook));
    for (Counter = 0; Counter < Number_of_residents; Counter++) {
        gets (Information [Counter].Name);
        gets (Information [Counter].Address);
        scanf ("%ld", & Information [Counter].Phone_number);
        getchar ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37499273_37503798_5_22
37499273_37504002_3_24
Title: Summation of the absolute difference between every two adjacent number is maximum in a array 
----------------------------------------

int main (void) {
    long int a [100000], max = LONG_MIN;
    int n;
    scanf ("%d", & n);
    for (int i = 0; i < n; i++) {
        scanf ("%lu", & a [i]);
        if (a[i] > max)
            max = a[i];
    }
    long long int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += labs (a[i] - max);
    }
    printf ("%lld\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int max = INT_MIN;
    int min = INT_MAX;
    long long sum = 0;
    int n;
    scanf ("%d", & n);
    for (int i = 0; i < n; i++) {
        int a;
        if (scanf ("%d", &a) != 1) {
            puts ("fail");
            return -1;
        }
        if (a > max)
            max = a;
        if (a > min)
            min = a;
        sum += a;
    }
    printf ("min %d\n", min);
    printf ("max %d\n", max);
    printf ("m %lld\n", 1LL * n * max - sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37499493_37499723_24_39
37499493_37500257_8_21
Title: Passing an array of pointers by reference 
----------------------------------------

int main (void) {
    char *cmd, *args [ARGS_MAX] = {0};
    getCmd (& cmd, args, ARGS_MAX);
    printf ("\n\n%s \n%s\n%s", cmd, args [0], args [1]);
    free (cmd);
    for (size_t i = 0; i < ARGS_MAX; ++i) {
        free (args [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char cmd [MAXC] = "", args [NARGS] [MAXC] = {""};
    size_t i, n;
    if (!(n = getcmd (cmd, args)))
        return 1;
    printf ("  %s", cmd);
    for (i = 0; i < n; i++)
        printf (" %s", args[i]);
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37502078_37502256_7_36
37502078_37506534_4_33
Title: Storing integers from a text file into an integer array 
----------------------------------------

int main () {
    int i = 0, j = 0, matriu [LINE] [ROW];
    char letter = ' ';
    FILE *file = fopen ("matriu.txt", "r");
    if (!(file)) {
        printf ("file open ERROR!\n");
        return 1;
    }
    while (i < LINE * ROW) {
        letter = fgetc (file);
        if (letter != ' ' && letter != ',') {
            *(matriu + i) = letter - 30;
            i++;
        }
    }
    for (i = 0; i < LINE; i++) {
        for (j = 0; j < ROW; j++) {
            printf ("%d", matriu [i] [j]);
        }
        printf ("\n");
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    int i, j, matriu [7] [10];
    char ch;
    FILE *file;
    file = fopen ("matriu.txt", "r");
    for (i = 0; i < 7; i++) {
        for (j = 0; j < 10; j++) {
            do {
                ch = getc (file);
            }
            while (ch != '0' && ch != '1');
            matriu[i][j] = (ch - '0');
        }
    }
    for (i = 0; i < 7; i++) {
        for (j = 0; j < 10; j++) {
            printf ("%d\n", matriu [i] [j]);
        }
    }
    fclose (file);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37509289_37509414_6_23
37509289_37509973_5_22
Title: C: Not counting spaces and new lines 
----------------------------------------

int main () {
    int fd;
    int b = 0, nl = 0, c = 0;
    char ch [1];
    fd = open ("text.txt", O_RDONLY);
    while ((read (fd, ch, 1)) > 0) {
        if (strcasecmp (ch, " ") == 0)
            b++;
        if (ch[0] == '\n')
            nl++;
        c++;
    }
    printf ("no of blanks %d\n", b);
    printf ("no of new line %d\n", nl);
    printf ("no of characters %d\n", c);
}
----------------------------------------

int main () {
    int fdesc;
    int blanks = 0, newlines = 0, characters = 0;
    char buf [1];
    fdesc = open ("text.txt", O_RDONLY);
    while ((read (fdesc, buf, 1)) > 0) {
        if (strcmp (buf, " "))
            blanks++;
        if (strcmp (buf, "\n"))
            newlines++;
        characters++;
    }
    printf ("no of blanks %d\n", blanks);
    printf ("no of new line %d\n", newlines);
    printf ("no of characters %d\n", characters);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37509289_37509973_5_22
37509289_37510188_5_23
Title: C: Not counting spaces and new lines 
----------------------------------------

int main () {
    int fdesc;
    int blanks = 0, newlines = 0, characters = 0;
    char buf [1];
    fdesc = open ("text.txt", O_RDONLY);
    while ((read (fdesc, buf, 1)) > 0) {
        if (strcmp (buf, " "))
            blanks++;
        if (strcmp (buf, "\n"))
            newlines++;
        characters++;
    }
    printf ("no of blanks %d\n", blanks);
    printf ("no of new line %d\n", newlines);
    printf ("no of characters %d\n", characters);
}
----------------------------------------

int main () {
    int fd;
    int b = 0, nl = 0, c = 0;
    char ch [1];
    fd = open ("text.txt", O_RDONLY);
    while ((read (fd, ch, 1)) > 0) {
        if (ch[0] == ' ')
            b++;
        if (ch[0] == '\n')
            nl++;
        c++;
    }
    printf ("no of blanks %d\n", b);
    printf ("no of new line %d\n", nl);
    printf ("no of characters %d\n", c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37514621_37515220_26_49
37514621_37515261_14_68
Title: Printing part of a .txt file 
----------------------------------------

int main (int argc, char *argv []) {
    ssize_t read;
    char *line = NULL;
    size_t len = 0;
    FILE *fp;
    fp = fopen ("file.txt", "r");
    char str [80];
    strcpy (str, "");
    while ((read = getline (&line, &len, fp)) != -1) {
        char *date2 = strtok (line, " ");
        date2 = strtok (NULL, " ");
        strcat (str, strdup (date2));
        strcat (str, " ");
    }
    fclose (fp);
    rmdup (str);
    printf ("after: %s", str);
    exit (0);
}
----------------------------------------

int main (int argc, char **argv) {
    car cars [MAXS] = {{
            .id = 0
        }
    };
    char *colors [MAXN] = {NULL}, *manfs [MAXN] = {NULL};
    char buf [MAXC] = "";
    size_t i, j, idx = 0, nc = 0, nm = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (idx < MAXS && fgets (buf, MAXC, fp)) {
        int tid, tyr;
        char tcol [MAXC] = "", tman [MAXC] = "";
        if (sscanf (buf, " %d %s %s %d%*c", &tid, tcol, tman, &tyr) == 4) {
            cars[idx].id = tid;
            snprintf (cars [idx].color, MAXN, "%s", tcol);
            snprintf (cars [idx].manf, MAXN, "%s", tman);
            cars[idx++].year = tyr;
        }
    }
    if (fp != stdin)
        fclose (fp);
    for (i = 0; i < idx; i++)
        printf ("%4d  %-6s  %-10s %d\n", cars[i].id, cars[i].color, cars[i].manf, cars[i].year);
    putchar ('\n');
    for (i = 0; i < idx; i++) {
        if (!nc) {
            colors[nc++] = cars[i].color;
            continue;
        }
        for (j = 0; j < nc; j++)
            if (!strcmp (colors[j], cars[i].color))
                goto cdup;
        colors[nc++] = cars[i].color;
    cdup :
        ;
    }
    for (i = 0; i < idx; i++) {
        if (!nm) {
            manfs[nm++] = cars[i].manf;
            continue;
        }
        for (j = 0; j < nm; j++)
            if (*manfs[j] == *cars[i].manf)
                goto mdup;
        manfs[nm++] = cars[i].manf;
    mdup :
        ;
    }
    for (i = 0; i < nc; i++)
        printf ("%s\n", colors[i]);
    putchar ('\n');
    for (i = 0; i < nm; i++)
        printf ("%s\n", manfs[i]);
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37519126_37519355_6_37
37519126_37520033_4_27
Title: How to create try counter in C? 
----------------------------------------

int main () {
    srand (time (NULL));
    int r = (rand () % 10) + 1;
    int number;
    int c = 0;
    printf ("Guess a number from one to ten!\n");
    do {
        scanf ("%d", & number);
        c++;
        if (number > r) {
            printf ("Too high! Try again!\n");
        }
        else if (number < r) {
            printf ("Too low! Try again!\n");
        }
        else {
            printf ("Correct! You win!!!\n");
            c = MAX_TRY;
        }
    }
    while (c < MAX_TRY);
    return 0;
}
----------------------------------------

int main () {
    srand (time (NULL));
    int r = (rand () % 10) + 1;
    int number;
    int c = 0, n = 0;
    printf ("Guess a number from one to ten!\n");
    do {
        n += 1;
        scanf ("%d", & number);
        if (number == r) {
            printf ("Correct! You win!!!\n");
            c = 1;
        }
        else if (number > r) {
            printf ("Too high! Try again!\n");
        }
        else {
            printf ("Too low! Try again!\n");
        }
    }
    while (c == 0 && n != 5);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37519126_37519355_6_37
37519126_37521467_4_29
Title: How to create try counter in C? 
----------------------------------------

int main () {
    srand (time (NULL));
    int r = (rand () % 10) + 1;
    int number;
    int c = 0;
    printf ("Guess a number from one to ten!\n");
    do {
        scanf ("%d", & number);
        c++;
        if (number > r) {
            printf ("Too high! Try again!\n");
        }
        else if (number < r) {
            printf ("Too low! Try again!\n");
        }
        else {
            printf ("Correct! You win!!!\n");
            c = MAX_TRY;
        }
    }
    while (c < MAX_TRY);
    return 0;
}
----------------------------------------

int main () {
    srand (time (NULL));
    int r = (rand () % 10) + 1;
    int number;
    int c = 0;
    printf ("Guess a number from one to ten!\n");
    do {
        c += 1;
        scanf ("%d", & number);
        if (number == r) {
            printf ("Correct! You win!!!\n");
            break;
        }
        else if (number > r) {
            printf ("Too high! Try again!\n");
        }
        else {
            printf ("Too low! Try again!\n");
        }
    }
    while (c < 5);
    if (c == 5)
        printf ("You lose\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37531387_37531635_18_30
37531387_37532612_8_20
Title: C function to read 2 values from file 
----------------------------------------

int main () {
    int val1, val2;
    int array [2];
    char file_name [10];
    printf ("Filename: ");
    scanf ("%s", file_name);
    getValues (file_name, array);
    val1 = array[0];
    val2 = array[1];
}
----------------------------------------

int main () {
    int fd;
    char buf [3];
    if ((fd = open ("text.txt", O_RDONLY)) == -1) {
        perror ("can't open file or file does not exist\n");
        exit (0);
    }
    printf ("The values are:\n");
    reader (fd, buf);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3757800_3758052_1_17
3757800_3758290_1_20
Title: Return the result of sum of character arrays 
----------------------------------------

char *find_sum (char *a, char *b) {
    int l1 = strlen (a), l2 = strlen (b);
    int cmdLen = l1 + l2 + 30;
    char *cmd = malloc (cmdLen);
    snprintf (cmd, cmdLen, "echo \"%s+%s\"|bc", a, b);
    FILE *fp = popen (cmd, "r");
    int max = (l1 > l2) ? l1 : l2;
    max += 2;
    char *result = malloc (max);
    fgets (result, max, fp);
    return result;
}
----------------------------------------

char *find_sum (char *a, char *b) {
    int lenA = strlen (a), lenB = strlen (b);
    int max = lenA > lenB ? lenA : lenB;
    char *res = (char *) malloc (max +2);
    memset (res, '0', max + 1);
    res[max + 1] = '\0';
    int i = lenA - 1, j = lenB - 1, k = max;
    for (; i >= 0 || j >= 0; --i, --j, --k) {
        int sum = 0;
        if (i >= 0 && j >= 0)
            sum = a[i] - '0' + b[j] - '0' + res[k] - '0';
        else if (j >= 0)
            sum = b[j] - '0' + res[k] - '0';
        else if (i >= 0)
            sum = a[i] - '0' + res[k] - '0';
        res[k] = sum % 10 + '0';
        res[k - 1] = sum / 10 + '0';
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3757800_3758052_1_17
3757800_3759214_1_27
Title: Return the result of sum of character arrays 
----------------------------------------

char *find_sum (char *a, char *b) {
    int l1 = strlen (a), l2 = strlen (b);
    int cmdLen = l1 + l2 + 30;
    char *cmd = malloc (cmdLen);
    snprintf (cmd, cmdLen, "echo \"%s+%s\"|bc", a, b);
    FILE *fp = popen (cmd, "r");
    int max = (l1 > l2) ? l1 : l2;
    max += 2;
    char *result = malloc (max);
    fgets (result, max, fp);
    return result;
}
----------------------------------------

char *find_sum (char *a, char *b) {
    char *res;
    int alen, blen, rlen;
    int carry;
    alen = strlen (a);
    blen = strlen (b);
    rlen = 1 + ((alen > blen) ? alen : blen);
    res = malloc (1 + rlen);
    if (res) {
        int oldlen = rlen;
        res[rlen] = 0;
        carry = 0;
        while (rlen) {
            int tmp;
            if (alen && blen)
                tmp = a[--alen] - '0' + b[--blen] - '0';
            else if (alen)
                tmp = a[--alen] - '0';
            else if (blen)
                tmp = b[--blen] - '0';
            else
                tmp = 0;
            tmp += carry;
            res[--rlen] = '0' + tmp % 10;
            carry = tmp / 10;
        }
        if (res[0] == '0')
            memmove (res, res +1, oldlen);
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3757800_3758290_1_20
3757800_3759214_1_27
Title: Return the result of sum of character arrays 
----------------------------------------

char *find_sum (char *a, char *b) {
    int lenA = strlen (a), lenB = strlen (b);
    int max = lenA > lenB ? lenA : lenB;
    char *res = (char *) malloc (max +2);
    memset (res, '0', max + 1);
    res[max + 1] = '\0';
    int i = lenA - 1, j = lenB - 1, k = max;
    for (; i >= 0 || j >= 0; --i, --j, --k) {
        int sum = 0;
        if (i >= 0 && j >= 0)
            sum = a[i] - '0' + b[j] - '0' + res[k] - '0';
        else if (j >= 0)
            sum = b[j] - '0' + res[k] - '0';
        else if (i >= 0)
            sum = a[i] - '0' + res[k] - '0';
        res[k] = sum % 10 + '0';
        res[k - 1] = sum / 10 + '0';
    }
    return res;
}
----------------------------------------

char *find_sum (char *a, char *b) {
    char *res;
    int alen, blen, rlen;
    int carry;
    alen = strlen (a);
    blen = strlen (b);
    rlen = 1 + ((alen > blen) ? alen : blen);
    res = malloc (1 + rlen);
    if (res) {
        int oldlen = rlen;
        res[rlen] = 0;
        carry = 0;
        while (rlen) {
            int tmp;
            if (alen && blen)
                tmp = a[--alen] - '0' + b[--blen] - '0';
            else if (alen)
                tmp = a[--alen] - '0';
            else if (blen)
                tmp = b[--blen] - '0';
            else
                tmp = 0;
            tmp += carry;
            res[--rlen] = '0' + tmp % 10;
            carry = tmp / 10;
        }
        if (res[0] == '0')
            memmove (res, res +1, oldlen);
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37587445_37588249_1_16
37587445_37588518_11_32
Title: Counting length of each words in c char 
----------------------------------------

void wordsLen (char *text, int *words, int n) {
    int i, count = 0, s = 0;
    for (i = 0; i < n; i++) {
        if (text[i] != ' ') {
            count++;
        }
        else {printf ("%d", count);
        count = 0;
    }
}
----------------------------------------

void wordsLen (char *text, int *words, int n) {
    int i = 0;
    int count = 0;
    int numberOfWords = 0;
    for (i = 0; i < n; i++) {
        char ch = text[i];
        if (ch != ' ') {
            count++;
        }
        if (count > 0 && (ch == ' ' || (i == n - 1))) {
            print (numberOfWords + 1, count);
            addWord (& numberOfWords, & count);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37587445_37588249_1_16
37587445_37591553_1_19
Title: Counting length of each words in c char 
----------------------------------------

void wordsLen (char *text, int *words, int n) {
    int i, count = 0, s = 0;
    for (i = 0; i < n; i++) {
        if (text[i] != ' ') {
            count++;
        }
        else {printf ("%d", count);
        count = 0;
    }
}
----------------------------------------

void wordsLen (char *text, int *words, int n) {
    int i, count = 0, s = 0;
    for (i = 0; i <= n; i++) {
        if (text[i] != ' ' && text[i] != '\0') {
            count++;
        }
        else {
            printf ("%d ", count);
            count = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37587445_37588518_11_32
37587445_37591553_1_19
Title: Counting length of each words in c char 
----------------------------------------

void wordsLen (char *text, int *words, int n) {
    int i = 0;
    int count = 0;
    int numberOfWords = 0;
    for (i = 0; i < n; i++) {
        char ch = text[i];
        if (ch != ' ') {
            count++;
        }
        if (count > 0 && (ch == ' ' || (i == n - 1))) {
            print (numberOfWords + 1, count);
            addWord (& numberOfWords, & count);
        }
    }
}
----------------------------------------

void wordsLen (char *text, int *words, int n) {
    int i, count = 0, s = 0;
    for (i = 0; i <= n; i++) {
        if (text[i] != ' ' && text[i] != '\0') {
            count++;
        }
        else {
            printf ("%d ", count);
            count = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37605540_37605684_4_29
37605540_37605747_4_33
Title: "Declare an array fib[22]. If the user asks for the 22nd or greater Fibonacci number output an error msg" 
----------------------------------------

int main (int argc, char *argv []) {
    int fib [22], i, n;
    if (argc != 2) {
        fprintf (stderr, "usage: %s number\n", argv [0]);
        exit (1);
    }
    n = atoi (argv[1]);
    if (n <= 0 || n > 22) {
        printf ("Error");
        exit (1);
    }
    fib[0] = 1;
    fib[1] = 1;
    for (i = 2; i < 22; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    printf ("The fib number is: %d\n", fib [n - 1]);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        printf (stderr, "usage: %s number\n", argv [0]);
        return (1);
    }
    int n;
    n = atoi (argv[1]);
    if (n > 22) {
        printf (stderr, "number must be less then 22\n");
        return (1);
    }
    int i;
    if (n <= 1)
        printf ("%d\n", n);
    else {
        int f [n + 1];
        f[0] = 0;
        f[1] = 1;
        for (i = 2; i <= n; i++) {
            *(f + i) = *(f + i - 1) + *(f + i - 2);
        }
        printf ("%d\n", f [n]);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3761624_3762148_7_42
3761624_3762595_14_32
Title: What is the simplest way to write 4 arrays into a file in a multiplatform way? 
----------------------------------------

int main (int argc, char *argv []) {
    SomeInts ints;
    int i;
    FILE *fh;
    ints.count = 5;
    ints.values = (int *) malloc (ints.count * sizeof (int));
    for (i = 0; i < ints.count; i++)
        ints.values[i] = i * 42;
    fh = fopen (argv[1], "wb");
    fwrite (& ints.count, sizeof (ints.count), 1, fh);
    fwrite (ints.values, sizeof (ints.values [0]), ints.count, fh);
    fclose (fh);
    free (ints.values);
    memset (& ints, 0, sizeof (ints));
    fh = fopen (argv[1], "rb");
    fread (& ints.count, sizeof (ints.count), 1, fh);
    ints.values = (int *) malloc (ints.count * sizeof (int));
    fread (ints.values, sizeof (ints.values [0]), ints.count, fh);
    fclose (fh);
    for (i = 0; i < ints.count; i++)
        printf ("%d\n", ints.values[i]);
    free (ints.values);
}
----------------------------------------

int main () {
    FILE *stream;
    ca_type ca;
    char *ptr = (char *) &ca;
    char *ptr2 = (char *) &ca;
    init (& ca);
    if ((stream = fopen ("test.out", "wb")) != NULL)
        fwrite (ptr, sizeof (ca), 1, stream);
    else
        printf ("Problem opening for write\n");
    fclose (stream);
    memset ((void *) & ca, 0, sizeof (ca));
    if ((stream = fopen ("test.out", "rb")) != NULL)
        fread ((void *) ptr2, sizeof (ca), 1, stream);
    else
        printf ("Problem opening for read\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37622980_37624437_5_46
37622980_37624506_15_49
Title: Exit when press 0 in C 
----------------------------------------

int main () {
    int program = 0;
    char c;
    for (;;) {
        printf ("\nChoose one of the following programs: \n\n (1) Fibonacci Sequence Calculator \n (2) Decimal and Binary Calculator \n (3) Prime Number Calculator \n \nIf you want to exit the program, press (e).\nYour choice: ");
        scanf (" %c", & c);
        if (isalpha (c)) {
            printf ("ERROR");
            continue;
        }
        else if (isdigit (c)) {
            program = atoi (&c);
            if (program == 0) {
                printf ("Quitting the program...\n\n");
                return 0;
            }
            else if (program == 1) {
                printf ("FIBONACCI SEQUENCE CALCULATOR");
            }
            else if (program == 2) {
                printf ("DECIMAL AND BINARY CALCULATOR");
            }
            else if (program == 3) {
                printf ("PRIME NUMBER CALCULATOR");
            }
            else {
                printf ("ERROR");
            }
        }
    }
}
----------------------------------------

int main (void) {
    int program;
    while (1) {
        printf ("\n" "Choose one of the following programs: \n\n" " (1) Fibonacci Sequence Calculator \n" " (2) Decimal and Binary Calculator \n" " (3) Prime Number Calculator \n" " \n" "If you want to exit the program, press (e or 0).\n" "Your choice: ");
        if (1 == scanf ("%d", &program)) {
            if (program == 0) {
                end_proc ();
            }
            else if (program == 1) {
                printf ("FIBONACCI SEQUENCE CALCULATOR");
            }
            else if (program == 2) {
                printf ("DECIMAL AND BINARY CALCULATOR");
            }
            else if (program == 3) {
                printf ("PRIME NUMBER CALCULATOR");
            }
            else {
                input_error_proc ();
            }
        }
        else {
            char ch, check;
            if (2 == scanf (" %c%c", &ch, &check) && ch == 'e' && check == '\n')
                end_proc ();
            else
                input_error_proc ();
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37625280_37627106_8_73
37625280_37627131_72_88
Title: kolmogorov smrinov test in c++ 
----------------------------------------

int main () {
    printf ("Kolmogorov Test\n");
    int n;
    printf ("Enter number of elements to compute for test: ");
    scanf ("%d", & n);
    float num [n];
    for (int i = 0; i < n; i++) {
        scanf ("%f", & num [i]);
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (num[i] > num[j]) {
                float temp = num[i];
                num[i] = num[j];
                num[j] = temp;
            }
        }
    }
    printf ("Numbers in ascending order are: \t");
    for (int i = 0; i < n; i++) {
        printf ("%0.2f\t", num [i]);
    }
    printf ("\n");
    float dp = dplus (num, n);
    float dn = dminus (num, n);
    printf ("dp = %f\n", dp);
    printf ("dn = %f\n", dn);
    float dvalue = dn;
    if (dp > dn) {
        dvalue = dp;
    }
    printf ("Calculated D = %0.2f\n", dvalue);
    float dalpha = 0.565;
    if (dalpha > dvalue) {
        printf ("Since D is less than Dalpha, the data is uniformly distributed.\n");
    }
    else {
        printf ("Since D is greater than Dalpha, the data is not uniformly distributed.\n");
    }
    return 0;
}
----------------------------------------

int main () {
    printf ("Kolmogorov Test\n");
    int n;
    double dvalue1;
    printf ("Enter number of elements to compute for tets: \t");
    scanf ("%d", & n);
    double num [n];
    double dp, dn;
    int i;
    for (i = 0; i < n; i++) {
        scanf ("%lf", & num [i]);
    }
    kst (num, i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37636495_37636528_3_22
37636495_37636704_3_17
Title: Multiply char array of integers in C 
----------------------------------------

int main (void) {
    char x [] = {'0', '3', '0', '8', '9', '6', '4', '3', '8', '4', '0', '0', '7'};
    char *p = x;
    int i, ZZZ;
    int mnozi = 0;
    for (i = 0; i < 12; i++) {
        int j = 7 - i % 6;
        mnozi = ((int) p[i] - '0') * j;
        printf ("\n%d", mnozi);
        printf (" : i = %d, p[i] = '%c', i %% 6 = %d, j = %d", i, p [i], i % 6, j);
        ZZZ = ZZZ + mnozi;
    }
    printf ("\n%d\n", ZZZ);
    return 0;
}
----------------------------------------

int main (void) {
    char x [] = {'0', '3', '0', '8', '9', '6', '4', '3', '8', '4', '0', '0', '7'}, *p = x;
    int i = 7, r = 0, z = 0;
    for (; *p && p < x + sizeof x; p++) {
        printf (" %d * %d = %d\n", * p - '0', i, (* p - '0') * i);
        z += (*p - '0') * i--;
        if (i < 2) {
            i = 7;
            if (++r > 1)
                break;
        }
    }
    printf ("\n z : %d\n\n", z);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37641177_37641283_1_12
37641177_37641556_1_14
Title: how to change postition of digits in an integer in c 
----------------------------------------

int encrypt (int num) {
    int arr [4];
    int i = 0;
    arr[0] = (num / 1000);
    arr[1] = (num / 100) % 10;
    arr[2] = (num / 10) % 10;
    arr[3] = num % 10;
    for (; i < 4; i++) {
        arr[i] = (arr[i] + 7) % 10;
    }
    return arr[2] * 1000 + arr[3] * 100 + arr[0] * 10 + arr[1];
}
----------------------------------------

int encrypt (int value) {
    int first = value / 1000;
    int second = (value / 100) % 10;
    int third = (value / 10) % 10;
    int fourth = value % 10;
    first = (first + 7) % 10;
    second = (second + 7) % 10;
    third = (third + 7) % 10;
    fourth = (fourth + 7) % 10;
    return third * 1000 + fourth * 100 + first * 10 + second;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37667382_37667869_5_43
37667382_37685570_9_26
Title: Compare each line from two different files and print the lines that are different in C 
----------------------------------------

int main () {
    FILE *fp1, *fp2;
    int ch1, ch2;
    char fname1 [40], fname2 [40];
    char *line = NULL;
    size_t len = 0;
    ssize_t read;
    char *line2 = NULL;
    size_t len2 = 0;
    ssize_t read2;
    fp1 = fopen ("file1.txt", "r");
    fp2 = fopen ("file2.txt", "r");
    if (fp1 == NULL) {
        printf ("Cannot open %s for reading ", fname1);
        exit (1);
    }
    else if (fp2 == NULL) {
        printf ("Cannot open %s for reading ", fname2);
        exit (1);
    }
    else {
        while ((read = getline (&line, &len, fp1)) != -1 && (read2 = getline (&line2, &len2, fp2)) != -1) {
            if (!strcmp (line, line2)) {
                printf ("Retrieved diff on line %zu :\n", read);
                printf ("%s", line);
            }
        }
        if (ch1 == ch2)
            printf ("Files are identical \n");
        else if (ch1 != ch2)
            printf ("Files are Not identical \n");
        fclose (fp1);
        fclose (fp2);
    }
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp1 = fopen (argc > 1 ? argv[1] : "file1.txt", "r");
    FILE *fp2 = fopen (argc > 2 ? argv[2] : "file2.txt", "r");
    size_t n1 = 0, n2 = 0;
    if (!fp1 || !fp2) {
        fprintf (stderr, "error: file open failed.\n");
        return 1;
    }
    printf ("\nunique words in file1, not in file 2.\n\n");
    file1infile2 (fp2, fp1, & n2, & n1);
    printf ("\nanalyzed %zu lines in file1 against %zu lines in file2.\n\n", n1, n2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37686112_37686616_3_13
37686112_37688276_11_37
Title: Comparing Floating Point Numbers 
----------------------------------------

int main (void) {
    double x = 3.14;
    double y = 3.14;
    if (x < y || x > y) {
    }
    else {
        printf ("yes");
    }
}
----------------------------------------

int main (void) {
    double x = 3.14;
    double y = 3.14;
    if (x < y || y < x) {
        bar (x, y);
    }
    else {
        foo (x, y);
    }
    for (int i = 0; i < 1000; i++) {
        y = y + 0.1;
    }
    x = x + 100;
    if (x < y || y < x) {
        bar (x, y);
    }
    else {
        foo (x, y);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37689768_37689821_1_16
37689768_37690076_17_33
Title: C - place integer in a char array and extract it 
----------------------------------------

int main (void) {
    char buffer [256];
    int i;
    int j;
    sprintf (buffer, "%d %d", 1289, 9);
    if (sscanf (buffer, "%d %d", &i, &j) == 2)
        printf ("values: %d %d\n", i, j);
    else
        printf ("invalid input?\n");
}
----------------------------------------

int main (int argc, char **argv) {
    const char *strings [2];
    strings[0] = "100";
    strings[1] = "50";
    int *numbers;
    size_t length = 2, i;
    numbers = convert_to_int_array (strings, length);
    if (numbers == NULL) {
        fprintf (stderr, "failed to initialize numbers\n");
    }
    for (i = 0; i < length; i++) {
        printf ("%d\n", numbers [i]);
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37700983_37701588_1_15
37700983_37702356_1_13
Title: My function doesn't memorize the head of linked list 
----------------------------------------

Mynbr *Addnumber (Mynbr *first) {
    printf ("\n===Function to add a number===\n");
    Mynbr *head_nbr;
    head_nbr = malloc (sizeof (Mynbr));
    printf ("Enter a number :");
    scanf ("%d", & (head_nbr -> nbr));
    if (!first) {
        head_nbr->next = NULL;
    }
    else {
        head_nbr->next = first;
    }
    return head_nbr;
}
----------------------------------------

Mynbr *Addnumber (Mynbr *first) {
    printf ("\n===Function to add a number===\n");
    Mynbr *head_nbr = malloc (sizeof (Mynbr));
    printf ("Enter a number :");
    scanf ("%d", & (head_nbr -> nbr));
    head_nbr->next = NULL;
    if (first == NULL)
        first = head_nbr;
    else {
        Mynbr *last = first;
        while (last->next != NULL)
            last = last->next;
        last->next = head_nbr;
    }
    return first;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37715419_37715545_16_35
37715419_37717479_14_29
Title: i want array in structure and copy only one character 
----------------------------------------

int main () {
    int a, b;
    for (a = 0; a < 1; a++) {
        for (b = 0; b < 1; b++) {
            bodies[a].p = malloc (3);
            bodies[a].v = malloc (3);
            bodies[a].a = malloc (3);
            strncpy (bodies [a].p, "asd", sizeof (3));
            strncpy (bodies [a].v, "bbb", sizeof ("bbb"));
            strncpy (bodies [a].a, "ccc", sizeof ("ccc"));
            printf ("\n1. = %s\n", bodies [a].p);
            printf ("\n2. = %s\n", bodies [a].v);
            printf ("\n3. = %s\n", bodies [a].a);
        }
        bodies[a].mass = 0;
        bodies[a].radius = 1.0;
    }
    return 0;
}
----------------------------------------

int main () {
    int a, b;
    for (a = 0; a < 1; a++) {
        for (b = 0; b < 1; b++) {
            strncpy (& bodies [a].p [b], "asd", 3);
            strncpy (& bodies [a].v [b], "bbb", 3);
            strncpy (& bodies [a].a [b], "ccc", 3);
            printf ("\n1. = %s\n", & bodies [a].p [0]);
            printf ("\n2. = %s\n", & bodies [a].v [0]);
            printf ("\n3. = %s\n", & bodies [a].a [0]);
        }
        bodies[a].mass = 0;
        bodies[a].radius = 1.0;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3771691_3771792_4_20
3771691_3774782_5_29
Title: How can I enable ctrl-c / ctrl+break after calling system? 
----------------------------------------

int main (void) {
    while (1) {
        int result = system ("ls 2>&1 1>/dev/null");
        if (WIFEXITED (result)) {
            printf ("Exited normally with status %d\n", WEXITSTATUS (result));
        }
        else if (WIFSIGNALED (result)) {
            printf ("Exited with signal %d\n", WTERMSIG (result));
            exit (1);
        }
        else {
            printf ("Not sure how we exited.\n");
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    pid_t pid;
    while (1) {
        pid = fork ();
        if (pid > 0) {
            wait (0);
        }
        else if (pid == 0) {
            system ("ls 2>&1 1>/dev/null");
            return 0;
        }
        else {
            return 1;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37725393_37727759_1_27
37725393_37727781_1_12
Title: Reverse linked list recursively 
----------------------------------------

void reverseNumber (struct Mynbr **start) {
    struct Mynbr *head;
    struct Mynbr *rest;
    if (*start == NULL)
        return;
    head = *start;
    rest = head->next;
    if (rest == NULL)
        return;
    reverseNumber (& rest);
    head->next->next = head;
    head->next = NULL;
    *start = rest;
}
----------------------------------------

void reverseNumber (Mynbr **start) {
    Mynbr *header = *start;
    if (!header)
        return;
    Mynbr *current = header->next;
    if (!current)
        return;
    header->next = NULL;
    Mynbr *new_head = current;
    reverseNumber (& new_head);
    current->next = header;
    *start = new_head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3774109_3774151_1_13
3774109_3774179_1_14
Title: How to deallocate memory in prefix tree? (ANSI C) 
----------------------------------------

void dict_free (Dict *d) {
    if (d != NULL) {
        int i;
        for (i = 0; i < 256; i++) {
            if (d->branches[i] != NULL) {
                dict_free (d -> branches [i]);
                d->branches[i] = NULL;
            }
        }
        free (d);
    }
}
----------------------------------------

void dict_free (Dict *d) {
    if (d) {
        for (int i = 0; i < 256; i++) {
            if (d->branches[i]) {
                dict_free (d -> branches [i]);
                free (d -> branches [i]);
                d->branches[i] = 0;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37741349_37741530_5_22
37741349_37743351_10_27
Title: C Delete last character in string 
----------------------------------------

int main (int argc, char *argv []) {
    char *string;
    char *ptr;
    string = (char *) malloc (100);
    puts ("Input a String");
    fgets (string, 100, stdin);
    printf ("Before calling a function: %s\n", string);
    string[strlen (string) - 1] = 0;
    ptr = strtok (string, " ");
    printf ("%s\n", ptr);
    while (ptr) {
        ptr[strlen (ptr) - 1] = 0;
        printf ("%s\n", ptr);
        ptr = strtok (0, " ");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char buf [128];
    char *ptr;
    puts ("Input a string: ");
    if (fgets (buf, sizeof buf, stdin) == NULL) {
        exit (1);
    }
    printf ("Before calling a function: %s\n", string);
    ptr = strtok (string, " \n");
    while (ptr) {
        print_truncated_word (ptr);
        ptr = strtok (NULL, " \n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37748106_37748384_1_19
37748106_37748538_1_21
Title: weird number appears on output-C 
----------------------------------------

int main () {
    node *head = 0;
    node *cur = 0;
    node *prev = 0;
    while (1) {
        prev = cur;
        cur = (node *) malloc (sizeof (node));
        cur->next = NULL;
        printf ("Give me a number\n");
        scanf ("%d", & cur -> am);
        if (cur->am == 0)
            break;
        if (head == NULL)
            head = cur;
        if (prev != NULL)
            prev->next = cur;
    }
    travel (head);
    printf ("Total nodes available :%d\n", count (head));
    return 0;
}
----------------------------------------

int main (void) {
    int n;
    node anchor = {0, NULL};
    node *head, *cur = &anchor;
    while (1) {
        printf ("Give me a number\n");
        scanf ("%d", & n);
        if (n == 0)
            break;
        cur->next = malloc (sizeof (node));
        cur = cur->next;
        cur->am = n;
        cur->next = NULL;
    }
    head = anchor.next;
    travel (head);
    printf ("Total nodes available :%d\n", count (head));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37748106_37748384_1_19
37748106_37748718_14_35
Title: weird number appears on output-C 
----------------------------------------

int main () {
    node *head = 0;
    node *cur = 0;
    node *prev = 0;
    while (1) {
        prev = cur;
        cur = (node *) malloc (sizeof (node));
        cur->next = NULL;
        printf ("Give me a number\n");
        scanf ("%d", & cur -> am);
        if (cur->am == 0)
            break;
        if (head == NULL)
            head = cur;
        if (prev != NULL)
            prev->next = cur;
    }
    travel (head);
    printf ("Total nodes available :%d\n", count (head));
    return 0;
}
----------------------------------------

int main () {
    int n;
    node *head = (node *) malloc (sizeof (node));
    node *cur = head;
    printf ("Give me a number:\n");
    scanf (" %d", & head -> am);
    cur = head;
    while (1) {
        printf ("Give me a number\n");
        scanf (" %d", & n);
        if (n == 0)
            break;
        cur->next = (node *) malloc (sizeof (node));
        cur = cur->next;
        cur->am = n;
        cur->next = NULL;
    }
    travel (head);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37748106_37748538_1_21
37748106_37748718_14_35
Title: weird number appears on output-C 
----------------------------------------

int main (void) {
    int n;
    node anchor = {0, NULL};
    node *head, *cur = &anchor;
    while (1) {
        printf ("Give me a number\n");
        scanf ("%d", & n);
        if (n == 0)
            break;
        cur->next = malloc (sizeof (node));
        cur = cur->next;
        cur->am = n;
        cur->next = NULL;
    }
    head = anchor.next;
    travel (head);
    printf ("Total nodes available :%d\n", count (head));
    return 0;
}
----------------------------------------

int main () {
    int n;
    node *head = (node *) malloc (sizeof (node));
    node *cur = head;
    printf ("Give me a number:\n");
    scanf (" %d", & head -> am);
    cur = head;
    while (1) {
        printf ("Give me a number\n");
        scanf (" %d", & n);
        if (n == 0)
            break;
        cur->next = (node *) malloc (sizeof (node));
        cur = cur->next;
        cur->am = n;
        cur->next = NULL;
    }
    travel (head);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37751253_37751974_1_13
37751253_37752041_2_15
Title: C Programming - Two for loops to recursion 
----------------------------------------

void recursion (int n, int i, int j) {
    if (i < n) {
        if (j < n) {
            printf ("%d %d\n", i, j);
            recursion (n, i, ++ j);
        }
        else
            recursion (n, ++i, 0);
    }
}
----------------------------------------

void recursion (int n, int i, int j) {
    if (i < n) {
        if (j < n) {
            printf ("i=%d, j=%d\n", i, j);
            recursion (n, i, j + 1);
        }
        else {
            recursion (n, i + 1, 0);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37764378_37764716_6_41
37764378_37764766_4_42
Title: How to copy 1st column elements to 2nd column of an matrix in c program 
----------------------------------------

int main (void) {
    int a [M] [N] = {{2, 3, 4}, {5, 6, 7}, {7, 8, 9}};
    int b [M] [2 * N];
    for (size_t m = 0; m < M; m++) {
        for (size_t n = 0; n < N; n++)
            printf ("%d ", a[m][n]);
        printf ("\n");
    }
    printf ("\n");
    for (size_t n = 0, i = 0; n < N; n++) {
        for (size_t j = 0; j < 2; j++, i++) {
            for (size_t m = 0; m < M; m++)
                b[m][i] = a[m][n];
        }
    }
    for (size_t m = 0; m < M; m++) {
        for (size_t n = 0; n < 2 * N; n++)
            printf ("%d ", b[m][n]);
        printf ("\n");
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int inMat [SIZE] [SIZE];
    int outMat [SIZE] [SIZE * 2];
    int i, j, k;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            scanf ("%d", & inMat [i] [j]);
        }
    }
    for (i = 0; i < SIZE; i++) {
        for (j = 0, k = 0; j < SIZE * 2; k++, j++) {
            outMat[i][j] = inMat[i][k];
            outMat[i][++j] = inMat[i][k];
        }
    }
    printf ("Input Matrix:\n");
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf ("%d ", inMat [i] [j]);
        }
        printf ("\n");
    }
    printf ("Output Matrix:\n");
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE * 2; j++) {
            printf ("%d ", outMat [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37767634_37767753_27_41
37767634_39033619_72_81
Title: How can I make a function that returns a function? 
----------------------------------------

int main (void) {
    fun *foo;
    foo = decider ('+');
    printf ("%f\n", foo (42.0, 24.0));
    foo = decider ('-');
    printf ("%f\n", foo (42.0, 24.0));
    foo = decider ('*');
    printf ("%f\n", foo (42.0, 24.0));
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    CLOSURE c;
    if (getclosure (&c)) {
        printf ("\nsuccess!\n");
        superfunc (& c);
        free (c.stack_ptr);
        return 0;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37789451_37791284_11_73
37789451_37793664_10_23
Title: C Loop through a small array and add to a large array 
----------------------------------------

int main (int argc, char *argv []) {
    char sign = 1;
    char const plainmsg [] = "Plain text:  ";
    char const * const restrict key = "bbb";
    size_t const keylen = strlen (key);
    char shifts [keylen];
    char const * restrict plaintext = NULL;
    for (size_t i = 0; i < keylen; i++) {
        if (!(isalpha (key[i]))) {
            fprintf (stderr, "Invalid key\n");
            return 2;
        }
        char const charcase = (char) (isupper (key[i])) ? 'A' : 'a';
        shifts[i] = (key[i] - charcase) * sign;
    }
    do {
        fflush (stdout);
        printf ("%s", plainmsg);
        plaintext = get_input ();
        if (plaintext == NULL) {
            fprintf (stderr, "Error getting input\n");
            return 4;
        }
    }
    while (strcmp (plaintext, "") == 0);
    size_t const plainlen = strlen (plaintext);
    char * const restrict ciphertext = calloc (plainlen +1, sizeof *ciphertext);
    if (ciphertext == NULL) {
        fprintf (stderr, "Memory error\n");
        return 5;
    }
    for (size_t i = 0, j = 0; i < plainlen; i++) {
        if (!(isalpha (plaintext[i]))) {
            ciphertext[i] = plaintext[i];
            continue;
        }
        char const charcase = (isupper (plaintext[i])) ? 'A' : 'a';
        ciphertext[i] = ((plaintext[i] + shifts[j] - charcase + NUMLETTERS) % NUMLETTERS) + charcase;
        j = (j + 1) % keylen;
    }
    ciphertext[plainlen] = '\0';
    printf ("%s\n", ciphertext);
    free (ciphertext);
    free ((char *) plaintext);
    return 0;
}
----------------------------------------

int main () {
    char *text = "alligator", *key = "aaa", *new_text = NULL;
    size_t text_len = strlen (text), key_len = strlen (key), i = 0;
    if ((new_text = (char *) calloc (text_len +1, sizeof (char))) == NULL) {
        printf ("Malloc error\n");
        return 1;
    }
    for (i = 0; i < text_len; i++)
        new_text[i] = ((text[i] - BASE_CHR + key[i % key_len] - BASE_CHR + CUSTOM_OFFSET) % ALPHABET_LEN) + BASE_CHR;
    printf ("Text: %s,  Key: %s,  Crypted: %s\n", text, key, new_text);
    free (new_text);
    new_text = NULL;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37822400_37822504_1_25
37822400_37822692_1_15
Title: find smallest element of an array and set its index to 0 
----------------------------------------

void find_minimum (double a [], size_t n) {
    size_t i, index;
    double smallest;
    if (n > 0) {
        smallest = a[0];
        index = 0;
    }
    else {
        return;
    }
    for (i = 1; i < n; i++) {
        if (a[i] < smallest) {
            smallest = a[i];
            index = i;
        }
    }
    a[index] = 0.0;
}
----------------------------------------

void find_minimum (double a [], size_t n) {
    if (n <= 0) {
        return;
    }
    size_t smallest = 0;
    for (size_t i = 1; i < n; i++) {
        if (a[i] < a[smallest]) {
            smallest = i;
        }
    }
    a[smallest] = 0.0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37834937_37835423_5_26
37834937_37835498_4_23
Title: How to read these mixture of data in C 
----------------------------------------

int main (void) {
    FILE *sp1;
    char line [256];
    double array [256];
    int i = 0;
    sp1 = fopen ("data.txt", "r");
    while (1) {
        if (fgets (line, 150, sp1) == NULL)
            break;
        char *p = strtok (line, " ");
        while (p != NULL) {
            double fd = atof (p);
            array[i++] = fd;
            p = strtok (NULL, " ");
        }
    }
    for (int j = 0; j < i; j++)
        printf ("%f\n", array[j]);
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    double num;
    fp = fopen ("input.txt", "r");
    if (fp == NULL) {
        printf ("Unable to open file, terminating ...");
        exit (1);
    }
    else {
        while (fscanf (fp, "%lf", &num) == 1) {
            printf ("%lf %e\n", num, num);
        }
        fclose (fp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37849382_37849520_10_41
37849382_37850217_2_21
Title: Creating an array in C 
----------------------------------------

int main () {
    int nPairCount = 0;
    struct MyPair *pPairs = NULL;
    pPairs = malloc (nPairCount * sizeof (struct MyPair));
    if (pPairs == NULL) {
        return -1;
    }
    for (int i = 0; i < nPairCount; ++i) {
    }
    free (pPairs);
    return 0;
}
----------------------------------------

int main () {
    int a, i;
    printf ("Enter the number of pairs: ");
    scanf ("%d", & a);
    double b [a * 2];
    \ \ note that a is number of pairs, so 2a will make it elements printf ("Enter the numbers: \n");
    for (i = 0; i < (2 * a - 1); i = i + 2) {
        scanf ("%lf %lf", & b [i], & b [i + 1]);
    }
    printf ("The pairs entered by you are:\n ");
    for (i = 0; i < (2 * a - 1); i = i + 2) {
        printf ("%lf and %lf\n ", b [i], b [i + 1]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37878887_37879242_5_18
37878887_37879667_8_21
Title: Pattern with bitwise operators 
----------------------------------------

int main () {
    size_t i;
    unsigned int n = sizeof (int) * CHAR_BIT;
    unsigned int mask = 1 << (n - 1);
    for (i = 1; i <= n; ++i) {
        putchar (((a & mask) == 0) ? '0' : '1');
        mask >>= 1;
        if (i % CHAR_BIT == 0 && i < n)
            putchar (' ');
    }
    putchar ('\n');
}
----------------------------------------

int main () {
    int i;
    stampabit (0xD2D2D2D2);
    int n = sizeof (int) * CHAR_BIT;
    int mask = 1 << (n - 1);
    for (i = 1; i <= n; ++i) {
        putchar (((a & mask) == 0) ? '0' : '1');
        a <<= 1;
        if (i % CHAR_BIT == 0 && i < n)
            putchar (' ');
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37881547_37881885_3_26
37881547_37882245_4_43
Title: Binary search: Min value less than 
----------------------------------------

int main () {
    int array [11] = {1, 5, 9, 15, 37, 49, 56, 65, 74, 90, 95};
    int first = 0;
    int last = 11;
    int search = 95;
    int middle = (first + last) / 2;
    while (first <= last) {
        middle = (first + last) / 2;
        if (array[middle] < search)
            first = middle + 1;
        else if (array[middle] > search)
            last = middle - 1;
        else {
            printf ("Found");
            return 0;
        }
    }
    printf ("Not found");
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    int array_size = 11;
    int *array = malloc (sizeof (int) * array_size);
    for (i = 0; i < array_size; i++)
        scanf ("%d", &array[i]);
    for (i = 0; i < array_size; i++)
        printf ("%d \t", array[i]);
    printf ("\n");
    int first = 0;
    int last = array_size - 1;
    int search = 7;
    int middle = (first + last) / 2;
    while (first <= last) {
        if (array[middle] < search)
            first = middle + 1;
        else if (array[middle] > search)
            last = middle - 1;
        else {
            printf ("%d found at indext %d\n", array [middle], middle);
            return 0;
        }
        middle = (first + last) / 2;
        printf ("first= %d,last= %d, middle= %d, search= %d\n", first, last, middle, search);
    }
    printf ("%d: Element not found\n", search);
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892674_4_16
37892659_37892717_3_28
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main (void) {
    int i;
    double num [10];
    for (i = 1; i <= 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i - 1]) != 1) {
            puts ("read error");
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int array [100], maximum, size, c, location = 1;
    printf ("Enter the number of elements in array\n");
    scanf ("%d", & size);
    printf ("Enter %d integers\n", size);
    for (c = 0; c < size; c++)
        scanf ("%d", &array[c]);
    maximum = array[0];
    for (c = 1; c < size; c++) {
        if (array[c] > maximum) {
            maximum = array[c];
            location = c + 1;
        }
    }
    printf ("Maximum element is present at location %d and it's value is %d.\n", location, maximum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892674_4_16
37892659_37892879_4_30
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main (void) {
    int i;
    double num [10];
    for (i = 1; i <= 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i - 1]) != 1) {
            puts ("read error");
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    double num [10], max, min;
    for (i = 0; i < 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1) {
            puts ("invalid input");
            return 1;
        }
    }
    min = num[0];
    max = num[0];
    for (int i = 1; i < 10; i++) {
        if (min > num[i]) {
            min = num[i];
        }
        else if (max < num[i]) {
            max = num[i];
        }
    }
    printf ("The max is %lf and the min is %lf", max, min);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892674_4_16
37892659_37892914_9_38
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main (void) {
    int i;
    double num [10];
    for (i = 1; i <= 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i - 1]) != 1) {
            puts ("read error");
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    size_t i, n;
    double max, min, tmp, ad [MAXD] = {0.0};
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    for (n = 0; n < MAXD && fscanf (fp, " %lf", &tmp) == 1; n++)
        ad[n] = tmp;
    if (fp != stdin)
        fclose (fp);
    printf ("\narray values:\n\n");
    for (i = 0; i < n; i++)
        printf ("  ad[%2zu] : %13.2lf\n", i, ad[i]);
    if (maxmin_dbl (ad, &max, &min, n))
        printf ("\n maximum : %.2lf\n minimum : %.2lf\n\n", max, min);
    else {
        fprintf (stderr, "error: maxmin_dbl failed.\n");
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892674_4_16
37892659_37894739_5_22
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main (void) {
    int i;
    double num [10];
    for (i = 1; i <= 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i - 1]) != 1) {
            puts ("read error");
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    size_t i;
    double num [N];
    for (i = 0; i < N; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1)
            return -1;
    }
    double maximum = num[0];
    double minimum = num[0];
    for (i = 1; i < N; i++) {
        if (isnan (num[i]))
            continue;
        if (!(num[i] >= minimum))
            minimum = num[i];
        if (!(num[i] <= maximum))
            maximum = num[i];
    }
    printf ("min: %e\n", minimum);
    printf ("max: %e\n", maximum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892717_3_28
37892659_37892879_4_30
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main () {
    int array [100], maximum, size, c, location = 1;
    printf ("Enter the number of elements in array\n");
    scanf ("%d", & size);
    printf ("Enter %d integers\n", size);
    for (c = 0; c < size; c++)
        scanf ("%d", &array[c]);
    maximum = array[0];
    for (c = 1; c < size; c++) {
        if (array[c] > maximum) {
            maximum = array[c];
            location = c + 1;
        }
    }
    printf ("Maximum element is present at location %d and it's value is %d.\n", location, maximum);
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    double num [10], max, min;
    for (i = 0; i < 10; i++) {
        printf ("Enter a number: ");
        if (scanf ("%lf", &num[i]) != 1) {
            puts ("invalid input");
            return 1;
        }
    }
    min = num[0];
    max = num[0];
    for (int i = 1; i < 10; i++) {
        if (min > num[i]) {
            min = num[i];
        }
        else if (max < num[i]) {
            max = num[i];
        }
    }
    printf ("The max is %lf and the min is %lf", max, min);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37892659_37892717_3_28
37892659_37892914_9_38
Title: Finding max and minimum values from an array in C 
----------------------------------------

int main () {
    int array [100], maximum, size, c, location = 1;
    printf ("Enter the number of elements in array\n");
    scanf ("%d", & size);
    printf ("Enter %d integers\n", size);
    for (c = 0; c < size; c++)
        scanf ("%d", &array[c]);
    maximum = array[0];
    for (c = 1; c < size; c++) {
        if (array[c] > maximum) {
            maximum = array[c];
            location = c + 1;
        }
    }
    printf ("Maximum element is present at location %d and it's value is %d.\n", location, maximum);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    size_t i, n;
    double max, min, tmp, ad [MAXD] = {0.0};
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    for (n = 0; n < MAXD && fscanf (fp, " %lf", &tmp) == 1; n++)
        ad[n] = tmp;
    if (fp != stdin)
        fclose (fp);
    printf ("\narray values:\n\n");
    for (i = 0; i < n; i++)
        printf ("  ad[%2zu] : %13.2lf\n", i, ad[i]);
    if (maxmin_dbl (ad, &max, &min, n))
        printf ("\n maximum : %.2lf\n minimum : %.2lf\n\n", max, min);
    else {
        fprintf (stderr, "error: maxmin_dbl failed.\n");
        return 1;
    }
    return 0;
}
----------------------------------------

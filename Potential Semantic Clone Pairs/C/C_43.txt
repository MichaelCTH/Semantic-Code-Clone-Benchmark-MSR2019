$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40920965_40922221_1_16
40920965_40922617_1_10
Title: Understanding complex pointer sample code in C 
----------------------------------------

void f1 (char *s) {
    char *p, *q;
    for (p = q = s; *p != '\0'; p++) {
        if ((*p >= 'A' && *p <= 'Z') || (*p >= 'a' && *p <= 'z'))
            *q++ = *p;
        else if (q > s && *(q - 1) != '\n')
            *q++ = '\n';
    }
    *q = '\0';
}
----------------------------------------

void f1 (char *buf) {
    size_t src, dst;
    for (src = dst = 0; buf[src]; src++) {
        if ((buf[src] >= 'A' && buf[src] <= 'Z') || (buf[src] >= 'a' && buf[src] <= 'z'))
            buf[dst++] = buf[src];
        else if (dst && buf[dst - 1] != '\n')
            buf[dst++] = '\n';
    }
    *q = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40932931_40934360_7_31
40932931_40937840_24_80
Title: C - reading ints and chars into arrays from a file 
----------------------------------------

int main (void) {
    FILE *myFile;
    char letters [MAXSIZE];
    int numbers [MAXSIZE], count = 0, i;
    myFile = fopen ("input1.txt", "r");
    if (myFile == NULL) {
        fprintf (stderr, "%s\n", "Error reading file\n");
        exit (EXIT_FAILURE);
    }
    while (fscanf (myFile, " %c%d ,", &letters[count], &numbers[count]) == 2) {
        count++;
    }
    for (i = 0; i < count; i++) {
        printf ("%c%d ", letters [i], numbers [i]);
    }
    printf ("\n");
    fclose (myFile);
    return 0;
}
----------------------------------------

int main () {
    setbuf (stdout, NULL);
    setbuf (stdin, NULL);
    struct CharIntPair pairs [ARRLEN];
    int parsedPairCount = 0;
    for (parsedPairCount = 0; parsedPairCount < ARRLEN; parsedPairCount++) {
        int numRead = scanf (" %c%d ,", &pairs[parsedPairCount].letter, &pairs[parsedPairCount].number);
        if (numRead < 0) {
            printf ("scanf returned %d\n", numRead);
            break;
        }
        else if (numRead == 0) {
            printf ("scanf returned %d\n", numRead);
            printf ("Data format problem: No character? How weird is that...\n");
            break;
        }
        else if (numRead == 1) {
            printf ("scanf returned %d\n", numRead);
            printf ("Data format problem: No number after first non-whitespace character ->%c<- (ASCII %d).\n", pairs [parsedPairCount].letter, (int) pairs [parsedPairCount].letter);
            break;
        }
        else {
            printf ("Parsed pair %6d. Letter: %-2c, number: %11d\n", parsedPairCount, pairs [parsedPairCount].letter, pairs [parsedPairCount].number);
        }
    }
    printf ("parsed pair count: %d\n", parsedPairCount);
    printParsedPairs (pairs, parsedPairCount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40944947_40945367_3_33
40944947_40945990_9_59
Title: print the sentences of a file one after another 
----------------------------------------

int main () {
    FILE *fp, *fo;
    int c, flag = -1;
    fp = fopen ("input.txt", "r");
    fo = fopen ("output.txt", "w");
    while (fp != NULL) {
        c = fgetc (fp);
        if (feof (fp))
            break;
        if (c == '\n') {
            fprintf (fo, " ");
            continue;
        }
        if (flag != '.' && flag != '!' && flag != '?') {
            fprintf (fo, "%c", c);
        }
        else {
            fprintf (fo, "\n");
            if (c != ' ') {
                fprintf (fo, "%c", c);
            }
        }
        flag = c;
    }
    fclose (fp);
    fclose (fo);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (2 > argc) {
        fprintf (stderr, "USAGE: %s <inputFileName>\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    FILE *fp = NULL;
    if (NULL == (fp = fopen (argv[1], "r"))) {
        perror ("fopen failed");
        exit (EXIT_FAILURE);
    }
    int inSentence = 0;
    int ch;
    while (EOF != (ch = fgetc (fp))) {
        if (inSentence) {
            putchar (ch);
            if (PERIOD == ch || EXCLAMATION_MARK == ch || QUESTION_MARK == ch) {
                inSentence = 0;
                putchar ('\n');
            }
        }
        else {
            if (isalpha (ch)) {
                inSentence = 1;
                putchar (ch);
            }
        }
    }
    if (inSentence) {
        putchar ('\n');
    }
    fclose (fp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40946356_40946563_2_19
40946356_40946632_3_27
Title: Nested for loops in C language 
----------------------------------------

int main (void) {
    int k, i, j, s;
    scanf ("%d", & k);
    s = 0;
    for (i = 1; i <= (k / 2); i++) {
        if (k % i == 0) {
            s += i;
        }
    }
    printf ("sum is %d\n\r", s);
    if (k < s)
        printf ("%d is abundant\n\r", k);
    else
        printf ("%d is not abundant\n\r", k);
    return 0;
}
----------------------------------------

int main (void) {
    int upper_limit, candidate, divisor, s;
    scanf ("%d", & upper_limit);
    for (candidate = 1; candidate <= upper_limit; candidate++) {
        s = 0;
        for (divisor = 1; divisor <= (candidate / 2); divisor++) {
            if ((candidate % divisor) == 0) s = s + divisor :
        }
        if (candidate < s)
            printf ("%d" \ n ", candidate)
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40948697_40948843_5_26
40948697_40949246_4_33
Title: How to use fork() to create a child process out of a child? 
----------------------------------------

int main (void) {
    pid_t pid;
    if ((pid = fork ()) == 0) {
        printf ("Child process: %d\n", (int) getpid ());
        pid_t pid2;
        if ((pid2 = fork ()) == 0) {
            printf ("Child's child process: %d\n", (int) getpid ());
        }
        else {
            int st2;
            wait (& st2);
        }
    }
    else {
        printf ("Parent process: %d\n", (int) getpid ());
        int st;
        wait (& st);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int pid;
    int pid2;
    int st;
    int st2;
    if ((pid = fork ()) == 0) {
        if ((pid2 = fork ()) == 0) {
            printf ("Kindes Kind process: %d\n", getpid ());
        }
        else {
            printf ("Ich warte auf meinen Sohn1\n");
            wait (& st2);
            printf ("mein Sohn ist fertig2\n");
            printf ("Kind: %d\n", getpid ());
            printf ("Sohn1: Status = %d\n", st2);
        }
    }
    else {
        printf ("Ich warte auf meinen Sohn\n");
        wait (& st);
        printf ("mein Sohn ist fertig\n");
        printf ("Vater process: %d\n", getpid ());
        printf ("Vater: Status = %d\n", st);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40955438_40955514_7_41
40955438_40955696_9_45
Title: C storing strings into an array 
----------------------------------------

int main () {
    char word [WORD_LEN] = {0}, ch;
    char *a [MAX_NUM_WORD] = {0};
    int i = 0, j;
    for (;;) {
        printf ("Enter a word: ");
        fgets (word, WORD_LEN, stdin);
        strtok (word, "\n");
        a[i] = malloc (sizeof (char) * (strlen (word) + 1));
        strcpy (a [i], word);
        i++;
        if (strlen (word) == 4)
            break;
        if (MAX_NUM_WORD <= i)
            break;
    }
    for (j = 0; j < i; j++)
        printf ("%s\n", a[j]);
    for (i = 0; i < MAX_NUM_WORD && NULL != a[i]; i++)
        free (a[i]);
    return 0;
}
----------------------------------------

int main (void) {
    char word [WORD_LEN];
    char *a [MAX_NUM_WORD];
    int i = 0, wrd;
    while (i < MAX_NUM_WORD) {
        printf ("Enter a word: ");
        if (fgets (word, WORD_LEN, stdin) != NULL) {
            word[strlen (word) - 1] = '\0';
        }
        a[i] = malloc (strlen (word) +1);
        if (a[i] == NULL) {
            fprintf (stderr, "%s\n", "Malloc Problem");
            exit (EXIT_FAILURE);
        }
        strcpy (a [i], word);
        i++;
        if (strlen (word) == EXIT_LEN) {
            break;
        }
    }
    for (wrd = 0; wrd < i; wrd++) {
        printf ("%s\n", a [wrd]);
        free (a [wrd]);
        a[wrd] = NULL;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40956662_40956754_1_16
40956662_40956917_4_33
Title: A function to find the sum of prime factors of an integer number 
----------------------------------------

int sumPrime (int number) {
    int factor = 2;
    int sum = 0;
    while (1 != number) {
        if (number % factor == 0) {
            number /= factor;
            sum += factor;
            printf ("Factor [%d]\n", factor);
            continue;
        }
        factor++;
    }
    printf ("Sum [%d]\n", sum);
    return sum;
}
----------------------------------------

int sumPrime (int n) {
    int sum = 0;
    printf ("%6d: ", n);
    while (n % 2 == 0) {
        printf ("%d+", 2);
        n /= 2;
        sum += 2;
    }
    for (int i = 3; i <= sqrt (n); i += 2) {
        while (n % i == 0) {
            printf ("%d+", i);
            n /= i;
            sum += i;
        }
    }
    if (n > 2) {
        printf ("%d", n);
        sum += n;
    }
    printf (" = %d\n", sum);
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40961091_40961245_1_19
40961091_40961394_3_24
Title: "C Program - Finding the highest odd integer stops when input a number less than 1.(Beginner)" 
----------------------------------------

int main () {
    int c, array [MAXNUMBERS], maximum, amount_numbers;
    clrscr ();
    getNumbers (array);
    location = find_maximum (array, MAXNUMBERS);
    if (location == -1)
        printf ("No Even integer");
    else {
        maximum = array[location];
        printf ("Highest even integer :%d", maximum);
    }
    getch ();
}
----------------------------------------

int main (void) {
    int max = 0;
    int value;
    printf ("Enter a sequence of integer numbers.\n" "Enter a number less than 1 to end: ");
    while (scanf ("%d", &value) == 1 && !(value < 1)) {
        if (value % 2 == 0 && max < value)
            max = value;
    }
    if (max != 0) {
        printf ("Highest even integer: %d\n", max);
    }
    else {
        puts ("No even integer");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40961091_40961245_1_19
40961091_40961399_3_19
Title: "C Program - Finding the highest odd integer stops when input a number less than 1.(Beginner)" 
----------------------------------------

int main () {
    int c, array [MAXNUMBERS], maximum, amount_numbers;
    clrscr ();
    getNumbers (array);
    location = find_maximum (array, MAXNUMBERS);
    if (location == -1)
        printf ("No Even integer");
    else {
        maximum = array[location];
        printf ("Highest even integer :%d", maximum);
    }
    getch ();
}
----------------------------------------

int main (void) {
    int innum = 0;
    int maximum = 0;
    while (scanf ("%d", &innum) == 1 && innum > 0) {
        if (innum % 2 == 0 && maximum < innum) {
            maximum = innum;
        }
    }
    if (maximum < 2) {
        puts ("NO EVEN INTEGER");
    }
    else {
        printf ("Highest even integer: %d\n", maximum);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40961091_40961394_3_24
40961091_40961399_3_19
Title: "C Program - Finding the highest odd integer stops when input a number less than 1.(Beginner)" 
----------------------------------------

int main (void) {
    int max = 0;
    int value;
    printf ("Enter a sequence of integer numbers.\n" "Enter a number less than 1 to end: ");
    while (scanf ("%d", &value) == 1 && !(value < 1)) {
        if (value % 2 == 0 && max < value)
            max = value;
    }
    if (max != 0) {
        printf ("Highest even integer: %d\n", max);
    }
    else {
        puts ("No even integer");
    }
}
----------------------------------------

int main (void) {
    int innum = 0;
    int maximum = 0;
    while (scanf ("%d", &innum) == 1 && innum > 0) {
        if (innum % 2 == 0 && maximum < innum) {
            maximum = innum;
        }
    }
    if (maximum < 2) {
        puts ("NO EVEN INTEGER");
    }
    else {
        printf ("Highest even integer: %d\n", maximum);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40964455_40964609_1_43
40964455_49529680_1_15
Title: copy linked list in C using strdup 
----------------------------------------

struct list *copyList (struct list *list) {
    struct list *new = list_new ();
    struct link *current = list->first;
    struct link *newCurrent = malloc (sizeof (struct link));
    if ((current == NULL) || (newCurrent == NULL) || (new == NULL)) {
        if (newCurrent != NULL) {
            free (newCurrent);
        }
        if (new != NULL) {
            free (new);
        }
        return NULL;
    }
    else {
        new->first = newCurrent;
    }
    while (current != NULL) {
        newCurrent->name = strdup ((char *) current->name);
        current = current->next;
        if (current != NULL) {
            newCurrent->next = malloc (sizeof (struct link));
            newCurrent = newCurrent->next;
        }
        else {
            newCurrent->next = NULL;
            new->last = newCurrent;
        }
    }
    return new;
}
----------------------------------------

struct list *copyList (struct list *list) {
    struct list *new = list_new ();
    struct link *current = list->first;
    struct link *newCurrent = NULL;
    struct link **p = &new->first;
    for (; current; current = current->next, p = &newCurrent->next) {
        newCurrent = *p = malloc (sizeof **p);
        newCurrent->name = strdup (current->name);
    }
    *p = NULL;
    new->last = newCurrent;
    return new;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40984728_40984802_1_21
40984728_40989288_2_28
Title: Invert a string in C 
----------------------------------------

void main (void) {
    char palavra [10];
    int c, i, j;
    printf ("Introduza uma string: \n");
    scanf ("%[^\n]", palavra);
    palavra[strlen (palavra)] = '\0';
    for (i = 0, j = strlen (palavra) - 1; i < j; i++, j--) {
        c = palavra[i];
        palavra[i] = palavra[j];
        palavra[j] = c;
    }
    printf ("\nString invertida: %s", palavra);
}
----------------------------------------

int main (void) {
    char palavra [10];
    printf ("Introduza uma string: \n");
    scanf ("%[^\n]", palavra);
    char *start = palavra;
    int len = strlen (palavra);
    char *end = (palavra + len - 1);
    while (start < end) {
        *start = *start ^ *end;
        *end = *end ^ *start;
        *start = *end ^ *start;
        start++;
        end--;
    }
    printf ("\nString invertida: %s\n", palavra);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40995806_40996934_4_60
40995806_40997288_3_38
Title: How can I increase the efficiency of my code? 
----------------------------------------

int main () {
    long long int *primes = NULL;
    int primesSize = 0;
    int primesCapacity = 0;
    long long int *primeFactors = NULL;
    int primeFactorsSize = 0;
    int primeFactorsCapacity = 0;
    long long int number = 600851475143ll;
    number = 13456769ll;
    for (long long int f = 2; f < number / 2; ++f) {
        int primesIndex = 0;
        while (primesIndex < primesSize && (f % primes[primesIndex]) != 0)
            ++primesIndex;
        if (primesIndex >= primesSize) {
            if (primesSize == primesCapacity) {
                primesCapacity += 1000;
                primes = (long long int *) realloc (primes, primesCapacity * sizeof (long long int));
            }
            primes[primesSize++] = f;
            while ((number % f) == 0) {
                if (primeFactorsSize == primeFactorsCapacity) {
                    primeFactorsCapacity += 1000;
                    primeFactors = (long long int *) realloc (primeFactors, primeFactorsCapacity * sizeof (long long int));
                }
                primeFactors[primeFactorsSize++] = f;
                number /= f;
            }
        }
    }
    if (number != 1) {
        if (primeFactorsSize == primeFactorsCapacity) {
            primeFactorsCapacity += 1000;
            primeFactors = (long long int *) realloc (primeFactors, primeFactorsCapacity * sizeof (long long int));
        }
        primeFactors[primeFactorsSize++] = number;
    }
    printf ("Last prime factor is %lld", primeFactors [primeFactorsSize - 1]);
    return 0;
}
----------------------------------------

int main () {
    long long int number = 600851475143;
    long long largest_prime_factor = 1, i, j, k;
    long long remain = number;
    while (remain % 2 == 0) {
        remain /= 2;
        largest_prime_factor = 2;
    }
    for (i = 3; (largest_prime_factor == 1 && i * i <= number) || (largest_prime_factor > 1 && i <= remain); i += 2) {
        k = 0;
        j = 3;
        for (j = 3; j * j <= i; j += 2) {
            if (i % j == 0) {
                k++;
                break;
            }
        }
        if (k == 0 && remain % i == 0) {
            largest_prime_factor = i;
            while (remain % i == 0) {
                remain /= i;
            }
        }
    }
    printf ("The largest prime factor of %Ld is: %Ld", number, largest_prime_factor);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41000786_41001169_4_16
41000786_41001994_3_13
Title: conversion table from feet and inches to cm 
----------------------------------------

int main () {
    int i, j;
    int cm, p;
    for (i = 0; i <= 7; i++) {
        for (j = 0; j <= 11; j++) {
            cm = round (i *30.48 + j * 2.54);
            printf ("%5d", cm);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    for (int feet = 0; feet <= 7; ++feet) {
        for (int inches = 0; inches < 12; ++inches) {
            int microns = (feet * 12 + inches) * 25400;
            int rounded_cm = (microns + 5000) / 10000;
            printf ("%5d", rounded_cm);
        }
        puts ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41003693_41003971_3_20
41003693_41007710_5_31
Title: Putting Hex into a byte array 
----------------------------------------

int main () {
    int i, j;
    long long hex = 0x78661EB54FE76763;
    BYTE val [8];
    for (j = 0, i = 7; i >= 0; i--, j++) {
        val[j] = (hex >> (i * 8)) & 0xff;
    }
    printf ("Hexadecimal bytes are:\n");
    for (j = 0; j < 8; j++) {
        printf ("%02X ", val [j]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    long long hex [] = {0x78661EB54FE76763};
    unsigned char *pByte = (unsigned char *) hex;
    unsigned char byteArray [8];
    memset (byteArray, 0, sizeof (byteArray));
    for (int i = 7; i >= 0; i--) {
        byteArray[i] = *pByte;
        pByte++;
    }
    for (int i = 0; i < 8; i++) {
        printf ("The value of element %i is: %X\n", i, byteArray [i]);
    }
    printf ("Press any key to continue...");
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41015452_41016091_1_13
41015452_41016145_3_11
Title: Variable access in main function when returned by another function? 
----------------------------------------

char *reverse (char *s, size_t n) {
    if (!(n < 2)) {
        char c = s[0];
        s[0] = s[n - 1];
        s[n - 1] = c;
        reverse (s + 1, n - 2);
    }
    return s;
}
----------------------------------------

char *reverse (char *str) {
    for (size_t i = 0, length = strlen (str); i < length / 2; i++) {
        char temp;
        temp = str[i];
        str1[i] = str1[length - i - 1];
        str1[length - i - 1] = temp;
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41025752_41026162_33_52
41025752_41026224_21_32
Title: compare arrays integer values with shifted values 
----------------------------------------

int main (void) {
    {
        int a [] = {1, 2, 3, 4, 5};
        int b [] = {3, 4, 5, 1, 2};
        printf ("The arrays are equivalent: %d\n", is_equivalent (a, b, sizeof (a) / sizeof (* a)));
    }
    {
        int a [] = {1, 2, 3, 4, 5};
        int b [] = {3, 4, 5, 2, 1};
        printf ("The arrays are equivalent: %d\n", is_equivalent (a, b, sizeof (a) / sizeof (* a)));
    }
    return 0;
}
----------------------------------------

int main (void) {
    int arr1 [] = {1, 2, 3, 4, 5};
    int arr2 [] = {3, 4, 5, 1, 2};
    int arr3 [] = {3, 4, 5, 2, 1};
    int arr4 [] = {1, 0, 1, 1, 0};
    int arr5 [] = {1, 0, 1, 0, 1};
    size_t size = sizeof (arr1) / sizeof (*arr1);
    TEST (size, arr1, arr2);
    TEST (size, arr1, arr3);
    TEST (size, arr4, arr5);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41025752_41026162_33_52
41025752_41027546_20_29
Title: compare arrays integer values with shifted values 
----------------------------------------

int main (void) {
    {
        int a [] = {1, 2, 3, 4, 5};
        int b [] = {3, 4, 5, 1, 2};
        printf ("The arrays are equivalent: %d\n", is_equivalent (a, b, sizeof (a) / sizeof (* a)));
    }
    {
        int a [] = {1, 2, 3, 4, 5};
        int b [] = {3, 4, 5, 2, 1};
        printf ("The arrays are equivalent: %d\n", is_equivalent (a, b, sizeof (a) / sizeof (* a)));
    }
    return 0;
}
----------------------------------------

int main () {
    int arr1 [] = {1, 2, 3, 4, 5};
    int arr2 [] = {3, 4, 5, 1, 2};
    if (isArraySame (arr1, arr2, 5, 5)) {
        printf ("true");
    }
    else {
        printf ("false");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41025752_41026224_21_32
41025752_41027546_20_29
Title: compare arrays integer values with shifted values 
----------------------------------------

int main (void) {
    int arr1 [] = {1, 2, 3, 4, 5};
    int arr2 [] = {3, 4, 5, 1, 2};
    int arr3 [] = {3, 4, 5, 2, 1};
    int arr4 [] = {1, 0, 1, 1, 0};
    int arr5 [] = {1, 0, 1, 0, 1};
    size_t size = sizeof (arr1) / sizeof (*arr1);
    TEST (size, arr1, arr2);
    TEST (size, arr1, arr3);
    TEST (size, arr4, arr5);
}
----------------------------------------

int main () {
    int arr1 [] = {1, 2, 3, 4, 5};
    int arr2 [] = {3, 4, 5, 1, 2};
    if (isArraySame (arr1, arr2, 5, 5)) {
        printf ("true");
    }
    else {
        printf ("false");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41042558_41043632_22_60
41042558_41043802_15_43
Title: C Substitution Cipher 
----------------------------------------

int main (void) {
    FILE *fp = fopen ("code.txt", "rb+");
    char *buffer = NULL;
    size_t s_file;
    int i;
    if (!fp) {
        puts ("Could not open code.txt");
        exit (EXIT_FAILURE);
    }
    fseek (fp, 0, SEEK_END);
    s_file = ftell (fp);
    rewind (fp);
    buffer = malloc (s_file +1);
    if (!buffer) {
        perror ("malloc");
        exit (EXIT_FAILURE);
    }
    fread (buffer, 1, s_file, fp);
    fseek (fp, 0, SEEK_SET);
    for (i = 0; i < s_file; i++) {
        char c = encrypt (buffer[i]);
        fwrite (& c, 1, 1, fp);
    }
    free (buffer);
    buffer = NULL;
    fclose (fp);
    return 0;
}
----------------------------------------

int main (int argc, char **argv []) {
    FILE *inputFile;
    char inputBuffer [80];
    char *inputPtr = inputBuffer;
    char inchar;
    int i;
    inputFile = fopen ("code.txt", "r");
    if (inputFile == NULL) {
        printf ("Failed to open\n");
        return 0;
    }
    else {
        fgets (inputBuffer, 80, inputFile);
        for (i = 0; i < strlen (inputBuffer); i++) {
            encrypt (inputBuffer [i]);
        }
    }
    printf ("\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41049333_41049603_1_15
41049333_41049614_1_16
Title: When I add an element to a linked list contained in an array of linked lists why every other element of the list gets deleted? 
----------------------------------------

void addNode (node *iterator, int d) {
    newNode = (node *) malloc (sizeof (node));
    newNode->n = d;
    newNode->next_ptr = NULL;
    if (iterator != 0) {
        while (iterator->next != 0) {
            iterator = iterator->next;
        }
    }
    iterator->next = newNode;
}
----------------------------------------

int addNode (struct node **st, int d) {
    while (*st)
        st = &(*st)->next_ptr;
    *st = malloc (sizeof (struct node));
    int success = *st != NULL;
    if (success) {
        (*st)->n = d;
        (*st)->next_ptr = NULL;
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41053191_41053295_12_21
41053191_41059511_23_45
Title: Parsing words from string in C 
----------------------------------------

void parse (void) {
    int i = 0;
    char *pch = strtok (input, " \t");
    params[i++] = pch;
    while (pch != NULL) {
        pch = strtok (NULL, " \t");
        params[i++] = pch;
    }
}
----------------------------------------

void parse (char *input, char *params []) {
    int i, param = 0, buff_count = 0;
    char buffer [MAX_WORDS];
    for (i = 0; input[i] && param < MAX_PARAMS; i++) {
        if ((isspace (input[i]) && *buffer)) {
            add_param (params, buffer, & param);
            buff_count = 0;
        }
        else if (!isspace (input[i])) {
            buffer[buff_count++] = input[i];
            buffer[buff_count] = '\0';
        }
        if (i == strlen (input) - 1 && *buffer) {
            add_param (params, buffer, & param);
            buff_count = 0;
        }
    }
    print_and_free_params (params, param);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41065651_41066067_7_86
41065651_41067733_4_22
Title: C: Print only not common elements in 2 arrays 
----------------------------------------

int main (void) {
    int numElements1 = 0;
    int numElements2 = 0;
    const int maxHistVal = UINT8_MAX + 1;
    const int maxElements = 10;
    const int minElements = 1;
    uint8_t *arr1 = NULL, *arr2 = NULL;
    uint8_t *histogram = NULL;
    srand (time (NULL));
    numElements1 = (rand () % (maxElements - minElements)) + minElements;
    numElements2 = (rand () % (maxElements - minElements)) + minElements;
    if (NULL == (arr1 = calloc (numElements1, sizeof (uint8_t)))) {
        return ENOMEM;
    }
    else if (NULL == (arr2 = calloc (numElements2, sizeof (uint8_t)))) {
        free (arr1);
        return ENOMEM;
    }
    else if (NULL == (histogram = calloc (maxHistVal, sizeof (uint8_t)))) {
        free (arr2);
        free (arr1);
        return ENOMEM;
    }
    else {
        printf ("ARR1: ");
        uint8_t j = 0;
        for (int i = 0, j = 0; i < numElements1; i++) {
            j += (rand () % 2) + 1;
            arr1[i] = j;
            printf ("%-3d ", arr1 [i]);
            histogram[arr1[i]]++;
        }
        printf ("\n");
        printf ("ARR2: ");
        for (int i = 0, j = 0; i < numElements2; i++) {
            j += (rand () % 2) + 1;
            arr2[i] = j;
            printf ("%-3d ", arr2 [i]);
            histogram[arr2[i]]++;
        }
        printf ("\n");
        printf ("HISTOGRAM: UNIQUE VALUES: ");
        for (int i = 0, j = 0; i < maxHistVal; i++) {
            if (1 == histogram[i]) {
                printf ("%-3d ", i);
            }
        }
        printf ("\n");
        printf ("HISTOGRAM: DUPLICATE VALUES: ");
        for (int i = 0, j = 0; i < maxHistVal; i++) {
            if (1 < histogram[i]) {
                printf ("%-3d ", i);
            }
        }
    }
    free (histogram);
    free (arr2);
    free (arr1);
    return 0;
}
----------------------------------------

int main (void) {
    const int v1 [5] = {1, 3, 7, 13, 10};
    const int v2 [2] = {1, 10};
    unsigned long long mask = 0;
    for (size_t i = 0; i < sizeof (v2) / (sizeof *v2); i++) {
        assert (v2 [i] >= 0 && v2 [i] < 64);
        mask |= 1ull << v2[i];
    }
    mask = ~mask;
    for (size_t i = 0; i < sizeof (v1) / (sizeof *v1); i++) {
        assert (v1 [i] >= 0 && v2 [i] < 64);
        if ((1ull << v1[i]) & mask) {
            printf (" %d", v1 [i]);
        }
    }
    puts ("");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41065651_41066067_7_86
41065651_50624049_5_30
Title: C: Print only not common elements in 2 arrays 
----------------------------------------

int main (void) {
    int numElements1 = 0;
    int numElements2 = 0;
    const int maxHistVal = UINT8_MAX + 1;
    const int maxElements = 10;
    const int minElements = 1;
    uint8_t *arr1 = NULL, *arr2 = NULL;
    uint8_t *histogram = NULL;
    srand (time (NULL));
    numElements1 = (rand () % (maxElements - minElements)) + minElements;
    numElements2 = (rand () % (maxElements - minElements)) + minElements;
    if (NULL == (arr1 = calloc (numElements1, sizeof (uint8_t)))) {
        return ENOMEM;
    }
    else if (NULL == (arr2 = calloc (numElements2, sizeof (uint8_t)))) {
        free (arr1);
        return ENOMEM;
    }
    else if (NULL == (histogram = calloc (maxHistVal, sizeof (uint8_t)))) {
        free (arr2);
        free (arr1);
        return ENOMEM;
    }
    else {
        printf ("ARR1: ");
        uint8_t j = 0;
        for (int i = 0, j = 0; i < numElements1; i++) {
            j += (rand () % 2) + 1;
            arr1[i] = j;
            printf ("%-3d ", arr1 [i]);
            histogram[arr1[i]]++;
        }
        printf ("\n");
        printf ("ARR2: ");
        for (int i = 0, j = 0; i < numElements2; i++) {
            j += (rand () % 2) + 1;
            arr2[i] = j;
            printf ("%-3d ", arr2 [i]);
            histogram[arr2[i]]++;
        }
        printf ("\n");
        printf ("HISTOGRAM: UNIQUE VALUES: ");
        for (int i = 0, j = 0; i < maxHistVal; i++) {
            if (1 == histogram[i]) {
                printf ("%-3d ", i);
            }
        }
        printf ("\n");
        printf ("HISTOGRAM: DUPLICATE VALUES: ");
        for (int i = 0, j = 0; i < maxHistVal; i++) {
            if (1 < histogram[i]) {
                printf ("%-3d ", i);
            }
        }
    }
    free (histogram);
    free (arr2);
    free (arr1);
    return 0;
}
----------------------------------------

int main () {
    int old [] = {3, 4, 5, 6};
    int new [] = {4, 5};
    int temp [] = {0, 0, 0, 0, 0, 0, 0, 0};
    int j = 0, z = 0, i = 0;
    for (i = 0; i < MAX_NEW; i++) {
        for (; j < MAX_OLD; j++) {
            if (old[j] <= new[i]) {
                if (old[j] != new[i])
                    temp[z++] = old[j];
            }
            else {
                break;
            }
        }
    }
    while (j < MAX_OLD)
        temp[z++] = old[j++];
    printf ("Temp[0] : %d  %d %d %d %d %d %d %d\n", temp [0], temp [1], temp [2], temp [3], temp [4], temp [5], temp [6], temp [7]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41065651_41067733_4_22
41065651_50624049_5_30
Title: C: Print only not common elements in 2 arrays 
----------------------------------------

int main (void) {
    const int v1 [5] = {1, 3, 7, 13, 10};
    const int v2 [2] = {1, 10};
    unsigned long long mask = 0;
    for (size_t i = 0; i < sizeof (v2) / (sizeof *v2); i++) {
        assert (v2 [i] >= 0 && v2 [i] < 64);
        mask |= 1ull << v2[i];
    }
    mask = ~mask;
    for (size_t i = 0; i < sizeof (v1) / (sizeof *v1); i++) {
        assert (v1 [i] >= 0 && v2 [i] < 64);
        if ((1ull << v1[i]) & mask) {
            printf (" %d", v1 [i]);
        }
    }
    puts ("");
    return 0;
}
----------------------------------------

int main () {
    int old [] = {3, 4, 5, 6};
    int new [] = {4, 5};
    int temp [] = {0, 0, 0, 0, 0, 0, 0, 0};
    int j = 0, z = 0, i = 0;
    for (i = 0; i < MAX_NEW; i++) {
        for (; j < MAX_OLD; j++) {
            if (old[j] <= new[i]) {
                if (old[j] != new[i])
                    temp[z++] = old[j];
            }
            else {
                break;
            }
        }
    }
    while (j < MAX_OLD)
        temp[z++] = old[j++];
    printf ("Temp[0] : %d  %d %d %d %d %d %d %d\n", temp [0], temp [1], temp [2], temp [3], temp [4], temp [5], temp [6], temp [7]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41073905_51381613_2_14
41073905_51402169_3_37
Title: C puzzle: shuffled code for inverted triangle pattern output 
----------------------------------------

int main () {
    int n, x = 1, i, j;
    scanf ("%d", & n);
    for (i = n; i; i--) {
        if (x > 0)
            for (j = 1; j <= i; j++)
                printf ("%d ", j);
        else
            for (j = i; 1 <= j; j--)
                printf ("%d ", j);
        printf ("\n");
        x *= -1;
    }
    return 0;
}
----------------------------------------

int main () {
    int n, x = 1, y, z, a, b = 2, i, j, k;
    scanf ("%d", & n);
    y = n + 1;
    z = n - 1;
    a = n - 1;
    for (i = 1; i <= n; i++) {
        if (i % 2 != 0) {
            x = 1;
            for (j = 1; j < y; j++) {
                printf ("%d ", x);
                x++;
            }
            y = y - 2;
            printf ("\n");
        }
        else {
            for (k = 1; k <= a; k++) {
                printf ("%d ", z);
                z = z - 1;
            }
            a = a - 2;
            z = (n - 1) - b;
            b = b + 2;
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41074294_41076094_10_93
41074294_41076534_8_38
Title: Finding highest frequency of an element in an array (sometimes it works) 
----------------------------------------

int main (int argc, const char *argv []) {
    srand ((unsigned int) time (NULL));
    int array [MAX];
    for (int i = 0; i < MAX; i++) {
        array[i] = -1;
    }
    int npeople = -1;
    do {
        printf ("How many people (1 to %d)? ", MAX);
        scanf ("%d", & npeople);
    }
    while (npeople < 1 || npeople > MAX);
    const unsigned int min = 5;
    const unsigned int max = 15;
    for (int i = 0; i < npeople; i++) {
        array[i] = min + rand () % (max - min + 1);
    }
    const int f = max + 1;
    int freq [f];
    for (int i = 0; i < f; i++) {
        freq[i] = 0;
    }
    for (int i = 0; i < MAX; i++) {
        freq[array[i]]++;
    }
    printf ("\n");
    printf ("Input array\n");
    printf ("===========\n");
    for (int i = 0; i < MAX; i++) {
        printf ("%d", array [i]);
        i == MAX - 1 ? printf ("\n") : printf (" ");
    }
    printf ("\n");
    printf ("Frequency array\n");
    printf ("===============\n");
    for (int i = 0; i < f; i++) {
        printf ("%0d", freq [i]);
        i == f - 1 ? printf ("\n") : printf (" ");
    }
    printf ("\n");
    printf ("Note\n");
    printf ("====\n");
    printf ("freq[i] = k MEANS value i appears k times in array\n");
    int mse = -1;
    int h = -1;
    for (int i = 0; i < f; i++) {
        if (freq[i] > h) {
            h = freq[i];
            mse = i;
        }
    }
    printf ("\n");
    printf ("Conclusion\n");
    printf ("==========\n");
    printf ("The most frequent element is %d, appearing %d time(s).\n", mse, h);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int nrofpeople;
    int array [MAX];
    printf ("How many people?");
    if (scanf ("%d", &nrofpeople) != 1 || nrofpeople <= 0 || nrofpeople > MAX) {
        printf ("invalid number of people\n");
        return 1;
    }
    srand ((unsigned int) time (NULL));
    for (int i = 0; i < nrofpeople; i++) {
        array[i] = rand () % 3 + 1;
    }
    int num = 0, maxcount = 0;
    for (int i = 0; i < nrofpeople; i++) {
        int count = 1;
        for (int j = i + 1; j < nrofpeople; j++) {
            if (array[i] == array[j]) {
                count++;
            }
        }
        if (count > maxcount) {
            maxcount = count;
            num = array[i];
        }
    }
    printf ("Number: %d Occurred: %d times\n", num, maxcount);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41076368_41076566_7_54
41076368_41076804_5_30
Title: "C comparing arrays find a character" 
----------------------------------------

int main (int argc, const char *argv []) {
    char str [STRSIZE];
    int i, j, removedchar;
    size_t slen;
    printf ("Enter a string: ");
    if (fgets (str, STRSIZE, stdin) == NULL) {
        printf ("Error reading string\n");
        return 1;
    }
    slen = strlen (str);
    if (slen > 0) {
        if (str[slen - 1] == '\n') {
            str[slen - 1] = '\0';
        }
        else {
            printf ("Error: Exceeded Buffer length of %d.\n", STRSIZE);
            return 1;
        }
    }
    if (!*str) {
        printf ("Error: No string entered.\n");
        return 1;
    }
    printf ("Enter what character you wish to remove: ");
    removedchar = getchar ();
    if (removedchar == '\n') {
        removedchar = ' ';
        printf ("No character was entered. Spaces will be removed if found\n");
    }
    j = 0;
    for (i = 0; str[i] != '\0'; i++) {
        if (str[i] != removedchar) {
            str[j++] = str[i];
        }
    }
    str[j] = '\0';
    printf ("Changed String = %s\n", str);
    return 0;
}
----------------------------------------

int main (void) {
    char str [80], removedChar [80];
    int i, n, j;
    printf ("ENTER A STRING: ");
    if (!fgets (str, sizeof str, stdin))
        return 1;
    str[strcspn (str, "\n")] = '\0';
    printf ("ENTER WHAT CHAR YOU WISH TO REMOVE: ");
    if (!fgets (removedChar, sizeof removedChar, stdin))
        return 1;
    for (i = 0, j = 0; str[i] != '\0'; i++) {
        if (str[i] != removedChar[0]) {
            str[j] = str[i];
            j++;
        }
    }
    str[j] = '\0';
    printf ("string after removing character = %s\n", str);
    system ("pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41077073_41077592_5_69
41077073_41078144_4_49
Title: Replace a word in C 
----------------------------------------

int main (int args, char *argv [4]) {
    FILE *f1;
    FILE *f2;
    char *strings = 0;
    char *newstrings = 0;
    char *token = NULL;
    strings = (char *) malloc (1000);
    newstrings = (char *) malloc (1000);
    if ((strings == NULL) || (newstrings == NULL)) {
        printf ("Memory allocation was not successfull.");
        return 0;
    }
    if (args < 4) {
        puts ("Error: Not enough input parameters");
        puts ("Usage: ./change <oldword> <newword> <infile> <newfile>");
        return 0;
    }
    f1 = fopen (argv[3], "r");
    f2 = fopen (argv[4], "w");
    if (f1 == NULL) {
        puts ("No such file exists");
        return 0;
    }
    while (fgets (strings, 1000, f1) != NULL) {
        if (strstr (strings, argv[1]) != NULL) {
            token = strtok (strings, "\n\t ");
            while (token != NULL) {
                if (strcmp (token, argv[1]) == 0) {
                    strcat (newstrings, argv [2]);
                    strcat (newstrings, " ");
                }
                else {
                    strcat (newstrings, token);
                    strcat (newstrings, " ");
                }
                token = strtok (NULL, "\n\t ");
            }
        }
        else {
            strcpy (newstrings, strings);
        }
        fputs (newstrings, f2);
    }
    free (strings);
    free (newstrings);
    printf ("New file <%s> generated!\n", argv [4]);
    fclose (f1);
    fclose (f2);
    return 0;
}
----------------------------------------

int main () {
    char file_path [40] = {0}, stf [255] = {0}, rtf [255] = {0}, str [255] = {0};
    FILE *file = NULL;
    FILE *e_f;
    if ((e_f = fopen ("result.txt", "w")) == NULL) {
        printf ("ERROR\n");
        exit (1);
    }
    do {
        printf ("Enter file path: ");
        fgets (file_path, 40, stdin);
        file_path[strlen (file_path) - 1] = '\0';
        file = fopen (file_path, "r+");
    }
    while (file == NULL);
    printf ("Enter text to find: ");
    fgets (stf, 255, stdin);
    stf[strlen (stf) - 1] = '\0';
    printf ("Enter text to replace: ");
    fgets (rtf, 255, stdin);
    rtf[strlen (rtf) - 1] = '\0';
    while (fgets (str, 255, file) != NULL) {
        char *tmp_ptr = strstr (str, stf);
        while (tmp_ptr != NULL) {
            char tmp_str [255];
            strcpy (tmp_str, tmp_ptr + strlen (stf));
            strcpy (str + strlen (str) - strlen (tmp_ptr), rtf);
            strcat (str, tmp_str);
            tmp_ptr = strstr (str, stf);
        }
        printf ("%s", str);
    }
    fclose (file);
    fclose (e_f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41078525_41079051_3_28
41078525_41079211_3_36
Title: Returning to the start of a for loop in C 
----------------------------------------

int main () {
    unsigned n;
    int arr [30];
    printf ("Enter a whole number: ");
    scanf ("%i", & n);
    int f = 0;
    while (n) {
        int b = n % 10;
        arr[f] = b;
        n /= 10;
        ++f;
    }
    for (int i = 0; i < f; i++) {
        int count = 1;
        for (int j = i + 1; j <= f - 1; j++) {
            if (arr[i] == arr[j] && arr[i] != '\0') {
                count++;
                arr[j] = '\0';
            }
        }
        if (arr[i] != '\0') {
            printf ("%d is %d times.\n", arr [i], count);
        }
    }
}
----------------------------------------

int main (void) {
    int count [10] = {0};
    int n;
    int digit;
    int elems = 0;
    int diff = 0;
    printf ("Enter a whole number: ");
    if (scanf ("%d", &n) != 1 || n < 0) {
        puts ("Please enter a positive number");
        return 1;
    }
    do {
        elems++;
        digit = n % 10;
        if (count[digit] == 0) {
            diff++;
        }
        count[digit]++;
        n /= 10;
    }
    while (n);
    printf ("Number of digits entered: %d\n", elems);
    printf ("Number of different digits: %d\n", diff);
    printf ("Occurrence:\n");
    for (n = 0; n < 10; n++) {
        if (count[n]) {
            printf ("    %d of %d\n", count [n], n);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41082291_41082349_11_24
41082291_41082356_9_23
Title: Trouble printing decimal to binary number properly 
----------------------------------------

void getBinary (unsigned int num) {
    unsigned int mask = 1U << 31;
    unsigned int temp;
    for (int i = 31; i >= 0; i--) {
        temp = num & mask;
        if (temp != 0)
            printf ("1");
        else
            printf ("0");
        mask = mask >> 1;
    }
    printf ("\n");
}
----------------------------------------

void getBinary (int num) {
    unsigned int mask = 1 << 31;
    int i;
    unsigned int temp;
    for (i = 31; i >= 0; i--) {
        temp = num & mask;
        if (temp > 0)
            printf ("1");
        else
            printf ("0");
        mask = mask >> 1;
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41085520_41085561_5_23
41085520_41090902_161_195
Title: How to output integers more than 16 digits correctly in C? 
----------------------------------------

int main (void) {
    int n, i;
    unsigned long long c;
    FILE *fp;
    printf ("enter no. to find factorial till: ");
    if (scanf ("%d", &n) == 1) {
        fp = fopen ("output_of_factorial.txt", "w");
        if (fp != NULL) {
            fputs ("Number |            Factorial\n\n", fp);
            for (i = 1; i <= n; i++) {
                c = facto (i);
                fprintf (fp, "%6d | %20llu\n", i, c);
            }
            fclose (fp);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    unsigned int n0 = 1, n1 = 100, max_digits = -1;
    bignum c;
    if (argc > 1) {
        n0 = n1 = strtol (argv[1], NULL, 0);
        if (argc > 2) {
            n1 = strtol (argv[2], NULL, 0);
            if (argc > 3) {
                max_digits = strtol (argv[3], NULL, 0);
            }
        }
        if (n1 < n0) {
            max_digits = n1;
            n1 = n0;
        }
    }
    bignum_init_value (& c, 1);
    printf ("%6s | %s\n", "Number", "Factorial");
    for (unsigned int i = 1; i <= n1; i++) {
        bignum_mul_uint (& c, i);
        if (i >= n0) {
            if (c.size - c.offset > max_digits) {
                printf ("%6u | %.1s.%.*se%zu\n", i, c.number, max_digits - 1, c.number + 1, c.size - c.offset - 1);
            }
            else {
                printf ("%6u | %s\n", i, c.number);
            }
        }
    }
    bignum_free (& c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41088483_41090037_20_106
41088483_41092984_1_46
Title: Program crashes when malloc executed 
----------------------------------------

int load_clusters (char *filename, struct cluster_t **arr) {
    assert (arr != NULL);
    char buffer_load [256] = {'0'};
    int riadok = 0;
    int i = 0;
    int X;
    int Y;
    int ID;
    FILE *subor = NULL;
    if (NULL == (subor = fopen (filename, "r"))) {
        perror ("Chyba nacitania suobru fopen load_clusters!");
        exit (EXIT_FAILURE);
    }
    if (!fgets (buffer_load, sizeof (buffer_load), subor)) {
        fprintf (stderr, "unable to read first line from input file\n");
        exit (EXIT_FAILURE);
    }
    char *token = NULL;
    if (NULL == (token = strchr (buffer_load, '='))) {
        fclose (subor);
        exit (EXIT_FAILURE);
    }
    else {
        token++;
        i = atoi (token);
        if (NULL == (*arr = malloc ((size_t) i * sizeof (struct cluster_t *)))) {
            perror ("Chyba mallocu v load_clusters 400!");
            fclose (subor);
            exit (EXIT_FAILURE);
        }
    }
    while (riadok < i && fgets (buffer_load, sizeof buffer_load, subor)) {
        struct cluster_t shluk;
        sscanf (buffer_load, "%d %d %d", & ID, & X, & Y);
        init_cluster (& shluk, 1);
        struct obj_t objekt;
        objekt.id = ID;
        objekt.x = X;
        objekt.y = Y;
        append_cluster (& shluk, & objekt);
        if (NULL == (arr[riadok] = malloc (sizeof (struct cluster_t)))) {
            perror ("Chyba mallocu v load_clusters 388!");
            fclose (subor);
            for (int j = 0; j < riadok; j++) {
                free (arr [j]);
            }
            exit (EXIT_FAILURE);
        }
        memcpy (arr [riadok], & shluk, sizeof (struct cluster_t));
        riadok++;
    }
    fclose (subor);
    return i;
}
----------------------------------------

int load_clusters (const char *filename, struct cluster_t **arr) {
    char buffer_load [256];
    int riadok, count, X, Y, ID;
    struct cluster_t *cp;
    assert (arr != NULL);
    FILE *subor = fopen (filename, "r");
    if (subor == NULL) {
        perror ("Chyba nacitania suobru fopen load_clusters!");
        exit (EXIT_FAILURE);
    }
    if (fgets (buffer_load, sizeof buffer_load, subor) == NULL || sscanf (buffer_load, " count=%d", &count) != 1) {
        perror ("missing count line in file\n");
        fclose (subor);
        exit (EXIT_FAILURE);
    }
    *arr = cp = malloc (sizeof (**arr));
    if (cp == NULL) {
        perror ("Chyba mallocu v load_clusters 400!");
        exit (EXIT_FAILURE);
    }
    init_cluster (cp, count);
    riadok = 0;
    while (riadok < count && fgets (buffer_load, sizeof buffer_load, subor) != NULL) {
        if (sscanf (buffer_load, "%d %d %d", &ID, &X, &Y) == 3) {
            struct obj_t objekt;
            objekt.id = ID;
            objekt.x = X;
            objekt.y = Y;
            append_cluster (cp, objekt);
            riadok++;
        }
    }
    fclose (subor);
    return riadok;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41096192_41096455_1_20
41096192_41111847_1_32
Title: C character-by-character string manipulation from const char *src to char *dest 
----------------------------------------

void korsoroi (char *dest, const char *src) {
    char *dest_ptr = &dest[strlen (dest)];
    for (;
    * src != '\0; src++)
  {
    if(src[i] == whatever)
    {
      strcpy(dest_ptr, "something");
      dest_ptr += sizeof("something");
    }
    else
    {
      *dest_ptr = *src;
      dest_ptr++;
    }
  }

  *dest_ptr = ' \ 0 ';
}
----------------------------------------

void korsoroi (char *dest, const char *src) {
    int count = 0;
    while (*src) {
        if (*src == 'k' && *(src + 1) == 's') {
            *dest++ = 'x';
            src++;
        }
        else if (*src == 't' && *(src + 1) == 's') {
            *dest++ = 'z';
            src++;
        }
        else if (*src == ' ') {
            *dest++ = ' ';
            count++;
            if (!(count % 3)) {
                strcpy (dest, "niinku");
                dest += strlen ("niinku");
                if (*(src + 1)) {
                    *dest++ = ' ';
                }
            }
            else if (!(count % 4)) {
                strcpy (dest, "totanoin");
                dest += strlen ("totanoin");
                if (*(src + 1)) {
                    *dest++ = ' ';
                }
            }
        }
        else {
            *dest++ = *src;
        }
        src++;
    }
    *dest = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41127692_41128082_33_45
41127692_41128372_5_51
Title: Swapping largest and smallest numbers in C 
----------------------------------------

int main () {
    int max = indexofmax (a, 10);
    int min = indexofmin (a, 10);
    int i;
    swap (& a [min], & a [max]);
    for (i = 0; i < 10; i++) {
        printf ("%d ", a [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int a [N] = {4, 5, 9, 6, 7, 1, 8, 2, 4, 5};
    for (size_t i = 0; i < N; i++)
        printf ("%d ", a[i]);
    printf ("\n");
    size_t min = 0;
    size_t max = 0;
    for (size_t i = 1; i < N; i++) {
        if (a[max] < a[i]) {
            max = i;
        }
        else if (a[i] < a[min]) {
            min = i;
        }
    }
    if (max != min) {
        int min_value = a[min];
        int max_value = a[max];
        size_t j = N;
        for (size_t i = N; i != 0; --i) {
            if (i - 1 != min && i - 1 != max) {
                if (i != j) {
                    a[j - 1] = a[i - 1];
                }
                --j;
            }
        }
        a[--j] = min_value;
        a[--j] = max_value;
    }
    for (size_t i = 0; i < N; i++)
        printf ("%d ", a[i]);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41127692_41128082_33_45
41127692_41134041_11_35
Title: Swapping largest and smallest numbers in C 
----------------------------------------

int main () {
    int max = indexofmax (a, 10);
    int min = indexofmin (a, 10);
    int i;
    swap (& a [min], & a [max]);
    for (i = 0; i < 10; i++) {
        printf ("%d ", a [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int array [MAXNUM], i, smallest, biggest;
    printf ("Please enter 10 int values:\n");
    for (i = 0; i < MAXNUM; i++) {
        if (scanf ("%d", &array[i]) != 1) {
            printf ("invalid input\n");
            exit (EXIT_FAILURE);
        }
    }
    printf ("Before: ");
    print_array (array, MAXNUM);
    smallest = find_smallest (array, MAXNUM);
    biggest = find_biggest (array, MAXNUM);
    int_swap (& array [smallest], & array [biggest]);
    printf ("After: ");
    print_array (array, MAXNUM);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41127692_41128372_5_51
41127692_41134041_11_35
Title: Swapping largest and smallest numbers in C 
----------------------------------------

int main (void) {
    int a [N] = {4, 5, 9, 6, 7, 1, 8, 2, 4, 5};
    for (size_t i = 0; i < N; i++)
        printf ("%d ", a[i]);
    printf ("\n");
    size_t min = 0;
    size_t max = 0;
    for (size_t i = 1; i < N; i++) {
        if (a[max] < a[i]) {
            max = i;
        }
        else if (a[i] < a[min]) {
            min = i;
        }
    }
    if (max != min) {
        int min_value = a[min];
        int max_value = a[max];
        size_t j = N;
        for (size_t i = N; i != 0; --i) {
            if (i - 1 != min && i - 1 != max) {
                if (i != j) {
                    a[j - 1] = a[i - 1];
                }
                --j;
            }
        }
        a[--j] = min_value;
        a[--j] = max_value;
    }
    for (size_t i = 0; i < N; i++)
        printf ("%d ", a[i]);
    printf ("\n");
}
----------------------------------------

int main (void) {
    int array [MAXNUM], i, smallest, biggest;
    printf ("Please enter 10 int values:\n");
    for (i = 0; i < MAXNUM; i++) {
        if (scanf ("%d", &array[i]) != 1) {
            printf ("invalid input\n");
            exit (EXIT_FAILURE);
        }
    }
    printf ("Before: ");
    print_array (array, MAXNUM);
    smallest = find_smallest (array, MAXNUM);
    biggest = find_biggest (array, MAXNUM);
    int_swap (& array [smallest], & array [biggest]);
    printf ("After: ");
    print_array (array, MAXNUM);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41133940_41135458_1_37
41133940_41135737_4_41
Title: How to sort an array read from a file in ascending order using pointers 
----------------------------------------

int main (int argc, char *argv []) {
    char header [3] [30];
    memset (header, 0, sizeof (header [0] [0]) * 3 * 30);
    char state [51] [32];
    memset (state, 0, sizeof (state [0] [0]) * 51 * 32);
    int census [51] [2];
    memset (census, 0, sizeof (census [0] [0]) * 51 * 2);
    FILE *myfile;
    myfile = fopen (FILENAME, "r");
    int x;
    if (myfile == NULL) {
        printf ("Errror opening file. \n");
        return (1);
    }
    fscanf (myfile, "%s %s %s", header [0], header [1], header [2]);
    printf ("%s %s %s\n", header [0], header [1], header [2]);
    for (x = 0; x < 51; x++) {
        fscanf (myfile, "%*2c%s %d %d", state [x], & census [x] [0], & census [x] [1]);
        replace (state [x], '_', ' ');
        replace (state [x], '.', ' ');
        printf ("[%02d] %20s: %8d %8d\n", x, state [x], census [x] [0], census [x] [1]);
    }
    fclose (myfile);
    bubbleSort (census, state, 51);
    printf ("%s %s %s\n", header [0], header [1], header [2]);
    for (x = 0; x < 51; x++) {
        printf ("[%02d] %20s: %8d %8d\n", x, state [x], census [x] [0], census [x] [1]);
    }
    return (0);
}
----------------------------------------

int main (void) {
    void acensionOrder (int * populationData);
    void replace (char * s, char a, char b);
    char header [3] [30];
    char state [NUM] [32];
    int census [2] [NUM];
    FILE *myfile;
    myfile = fopen (FILENAME, "r");
    int x;
    if (myfile == NULL) {
        printf ("Errror opening file. \n");
    }
    else {
        fscanf (myfile, "%s%s%s", header [0], header [1], header [2]);
        for (x = 0; x < NUM; x++) {
            fscanf (myfile, "%*2c%s %d %d", state [x], & census [0] [x], & census [1] [x]);
            replace (state [x], '_', ' ');
            replace (state [x], '.', ' ');
        }
    }
    acensionOrder (& census [1] [0]);
    fclose (myfile);
    getchar ();
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41133940_41135458_1_37
41133940_41138193_17_43
Title: How to sort an array read from a file in ascending order using pointers 
----------------------------------------

int main (int argc, char *argv []) {
    char header [3] [30];
    memset (header, 0, sizeof (header [0] [0]) * 3 * 30);
    char state [51] [32];
    memset (state, 0, sizeof (state [0] [0]) * 51 * 32);
    int census [51] [2];
    memset (census, 0, sizeof (census [0] [0]) * 51 * 2);
    FILE *myfile;
    myfile = fopen (FILENAME, "r");
    int x;
    if (myfile == NULL) {
        printf ("Errror opening file. \n");
        return (1);
    }
    fscanf (myfile, "%s %s %s", header [0], header [1], header [2]);
    printf ("%s %s %s\n", header [0], header [1], header [2]);
    for (x = 0; x < 51; x++) {
        fscanf (myfile, "%*2c%s %d %d", state [x], & census [x] [0], & census [x] [1]);
        replace (state [x], '_', ' ');
        replace (state [x], '.', ' ');
        printf ("[%02d] %20s: %8d %8d\n", x, state [x], census [x] [0], census [x] [1]);
    }
    fclose (myfile);
    bubbleSort (census, state, 51);
    printf ("%s %s %s\n", header [0], header [1], header [2]);
    for (x = 0; x < 51; x++) {
        printf ("[%02d] %20s: %8d %8d\n", x, state [x], census [x] [0], census [x] [1]);
    }
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    int i = 0, ndx = 0;
    stcen census [NSTATE] = {{
            .name = ""
        }
    };
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "file open failed '%s'\n", argv [1]);
        return 1;
    }
    fscanf (fp, "%*[^\n]%*c");
    while (ndx < NSTATE && fscanf (fp, " %s %d %d", census[ndx].name, &census[ndx].cen, &census[ndx].est) == 3) {
        ndx++;
    }
    if (fp != stdin)
        fclose (fp);
    qsort (census, ndx, sizeof * census, cmpcen);
    for (i = 0; i < ndx; i++)
        printf (" %-*s  %*d  %*d\n", NMLEN, census[i].name, IWDTH, census[i].cen, IWDTH, census[i].est);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41133940_41135737_4_41
41133940_41138193_17_43
Title: How to sort an array read from a file in ascending order using pointers 
----------------------------------------

int main (void) {
    void acensionOrder (int * populationData);
    void replace (char * s, char a, char b);
    char header [3] [30];
    char state [NUM] [32];
    int census [2] [NUM];
    FILE *myfile;
    myfile = fopen (FILENAME, "r");
    int x;
    if (myfile == NULL) {
        printf ("Errror opening file. \n");
    }
    else {
        fscanf (myfile, "%s%s%s", header [0], header [1], header [2]);
        for (x = 0; x < NUM; x++) {
            fscanf (myfile, "%*2c%s %d %d", state [x], & census [0] [x], & census [1] [x]);
            replace (state [x], '_', ' ');
            replace (state [x], '.', ' ');
        }
    }
    acensionOrder (& census [1] [0]);
    fclose (myfile);
    getchar ();
    getchar ();
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int i = 0, ndx = 0;
    stcen census [NSTATE] = {{
            .name = ""
        }
    };
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "file open failed '%s'\n", argv [1]);
        return 1;
    }
    fscanf (fp, "%*[^\n]%*c");
    while (ndx < NSTATE && fscanf (fp, " %s %d %d", census[ndx].name, &census[ndx].cen, &census[ndx].est) == 3) {
        ndx++;
    }
    if (fp != stdin)
        fclose (fp);
    qsort (census, ndx, sizeof * census, cmpcen);
    for (i = 0; i < ndx; i++)
        printf (" %-*s  %*d  %*d\n", NMLEN, census[i].name, IWDTH, census[i].cen, IWDTH, census[i].est);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41135069_41135272_18_30
41135069_41135709_14_43
Title: Display char elements of a structure in C 
----------------------------------------

int main () {
    studentData admin = {1111, "Brian", "John", "7", "24", "1960"};
    printf ("ID: %d\n", admin.ID);
    printf ("Last Name: %s\n", admin.lastName);
    printf ("First Name: %s\n", admin.firstName);
    printf ("Birth Month: %s\n", admin.birthMonth);
    printf ("Birth Day: %s\n", admin.birthDay);
    printf ("Birth Year: %s\n", admin.birthYear);
    return 0;
}
----------------------------------------

int main (void) {
    studentData admin = {1111, "Brian", "John", "7", "24", "1960"};
    long bmonth, bday, byear;
    long birth_digits;
    bmonth = strtol (admin.birthMonth, NULL, 10);
    bday = strtol (admin.birthDay, NULL, 10);
    byear = strtol (admin.birthYear, NULL, 10);
    printf ("ID: %d\n", admin.ID);
    printf ("Last Name: %s\n", admin.lastName);
    printf ("First Name: %s\n", admin.firstName);
    printf ("Birth Month: %s\n", admin.birthMonth);
    printf ("Birth Day: %s\n", admin.birthDay);
    printf ("Birth Year: %s\n", admin.birthYear);
    printf ("DOB: %lu/%lu/%lu\n", bmonth, bday, byear);
    if (bday / 10) {
        birth_digits = bmonth * 100 + bday;
    }
    else {
        birth_digits = bmonth * 10 + bday;
    }
    printf ("DOB Number: %lu\n", birth_digits);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4113671_4113811_30_39
4113671_4115361_4_15
Title: fatal error C1083: Cannot open include file: 'aux.h': Permission denied 
----------------------------------------

void display (void) {
    GLuint i;
    glClear (GL_COLOR_BUFFER_BIT);
    glColor3f (0.0, 1.0, 0.0);
    for (i = 0; i < 10; i++)
        glCallList (listName);
    drawLine ();
    glFlush ();
}
----------------------------------------

void display (void) {
    glClear (GL_COLOR_BUFFER_BIT);
    glColor3f (1.0, 1.0, 1.0);
    glBegin (GL_LINES);
    glVertex2f (0.0, 0.5);
    glVertex2f (15.0, 0.5);
    glEnd ();
    glFlush ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4113671_4113811_57_69
4113671_4115361_28_55
Title: fatal error C1083: Cannot open include file: 'aux.h': Permission denied 
----------------------------------------

int main (int argc, char **argv) {
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
    glutInitWindowPosition (100, 100);
    glutInitWindowPosition (100, 100);
    glutInit (& argc, argv);
    myinit ();
    glutDisplayFunc (display);
    glutReshapeFunc (myReshape);
    glutMainLoop ();
}
----------------------------------------

int main (int argc, char **argv) {
    glutInit (& argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (250, 250);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("moofoo");
    init ();
    glutDisplayFunc (display);
    glutMainLoop ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4118016_4118304_12_41
4118016_4118556_6_21
Title: Set stack size with setrlimit() and provoke a stack overflow/segfault 
----------------------------------------

int main (int argc, char **argv) {
    char *newarg [] = {"argv[0]", "one", "two"};
    char *newenv [] = {NULL};
    struct rlimit lim;
    newarg[0] = argv[0];
    getrlimit (RLIMIT_STACK, & lim);
    printf ("lim: %d / %d\n", (int) lim.rlim_cur, (int) lim.rlim_max);
    switch (argc) {
    case 1 :
        lim.rlim_cur = 65536;
        lim.rlim_max = 65536;
        if (setrlimit (RLIMIT_STACK, &lim) == -1)
            return EXIT_FAILURE;
        newarg[2] = NULL;
        foo (1);
        execve (argv [0], newarg, newenv);
        break;
    case 2 :
        lim.rlim_cur = 1024;
        lim.rlim_max = 1024;
        if (setrlimit (RLIMIT_STACK, &lim) == -1)
            return EXIT_FAILURE;
        foo (2);
        execve (argv [0], newarg, newenv);
        break;
    default :
        foo (3);
        break;
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    struct rlimit lim = {1, 1};
    if (argc > 1 && argv[1][0] == '-' && argv[1][8] == 'l') {
        printf ("limiting stack size\n");
        if (setrlimit (RLIMIT_STACK, &lim) == -1) {
            printf ("rlimit failed\n");
            return 1;
        }
    }
    foo ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4118132_4118193_14_37
4118132_4118269_29_44
Title: Convert a set of chars to int from a file 
----------------------------------------

int main () {
    char buffer [1000];
    int sz = 0;
    char ch;
    FILE *input = fopen ("input.txt", "r");
    while ((ch = fgetc (input)) != EOF) {
        int number;
        if (isdigit (ch)) {
            buffer[sz++] = ch;
        }
        else {
            printf ("Got %d\n", read_buffer (buffer, & sz));
        }
    }
    if (sz)
        printf ("Got %d\n", read_buffer (buffer, &sz));
    fclose (input);
    return 0;
}
----------------------------------------

int main (void) {
    int array [1000] = {0};
    int n, k;
    n = fillarray (array, 1000, stdin);
    if (n > 0) {
        printf ("%d values read:\n", n);
        for (k = 0; k < n; k++) {
            printf (" %d", array [k]);
        }
        puts ("");
    }
    else {
        fprintf (stderr, "no data read\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41183105_41184812_6_30
41183105_41189253_5_24
Title: "How to copy hex representation of uint_64 to unsigned char array in hex in C?" 
----------------------------------------

int main (void) {
    uint64_t src;
    uint8_t destination [8] = {0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38};
    const uint16_t dummy = 1;
    const bool is_little_endian = *(constuint8_t*) &dummy == 1;
    src = 0;
    for (size_t i = 0; i < 8; i++) {
        size_t shift = i * 8;
        if (is_little_endian) {
            shift = 64 - 8 - shift;
        }
        src |= (uint64_t) destination[i] << shift;
    }
    printf ("%" PRIx64, src);
    return 0;
}
----------------------------------------

int main (void) {
    uint64_t src = 0x3132333435363738;
    uint8_t destination [8];
    uint64_t mask = 0xff << 56;
    size_t i;
    for (i = 0; i < 8; i++) {
        destination[i] = (uint8_t) ((src & mask) >> (56 - i * 8));
        mask >>= 8;
    }
    printf ("src: 0x%" PRIx64 "\n", src);
    for (i = 0; i < 8; i++) {
        printf ("destination[%zu] = 0x%" PRIx8 "\n", i, destination [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41195565_41195713_1_21
41195565_41195748_1_17
Title: returning NULL from an integer function in c 
----------------------------------------

int valueOf (t_node *node, int n, int *val) {
    int current = 0;
    int value;
    while (node->next != NULL) {
        value = node->val;
        if (current == n) {
            *val = value;
            return 0;
        }
        if (current > n) {
            return -1;
        }
        node = node->next;
        current += 1;
    }
    return -1;
}
----------------------------------------

int valueOf (t_node *node, int n, int *result) {
    int current = 0;
    while (current < n && node != NULL) {
        node = node->next;
        current += 1;
    }
    if (node == NULL) {
        return 0;
    }
    else {
        *result = node->value;
        return 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41196856_41197063_7_24
41196856_41197714_9_48
Title: String palindrom check 
----------------------------------------

int main () {
    char str [81];
    gets (str);
    int result = 0;
    char *p = strtok (str, " ");
    while (p != NULL) {
        result += palindrom (p);
        p = strtok (NULL, " ");
    }
    printf ("%d pali\n", result);
}
----------------------------------------

int main (void) {
    char str [STRSIZE];
    size_t slen;
    char *word;
    const char *delim = " ";
    int ispal = 0;
    printf ("Enter some text: ");
    if (fgets (str, STRSIZE, stdin) == NULL) {
        printf ("Cannot read text into buffer.\n");
        exit (EXIT_FAILURE);
    }
    slen = strlen (str);
    if (slen > 0) {
        if (str[slen - 1] == '\n') {
            str[slen - 1] = '\0';
        }
        else {
            printf ("Too many characters entered.\n");
            exit (EXIT_FAILURE);
        }
    }
    if (!*str) {
        printf ("No text entered.\n");
        exit (EXIT_FAILURE);
    }
    word = strtok (str, delim);
    while (word != NULL) {
        if (is_palindrome (word)) {
            ispal++;
        }
        word = strtok (NULL, delim);
    }
    printf ("%d palindromic words found.\n", ispal);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41199287_41200518_1_23
41199287_41200540_1_13
Title: How to print only the first sentence in string [C]? 
----------------------------------------

void stringEvaluation (char *name) {
    if (strstr (name, "Tall") != NULL) {
        char *nameEnd = strtok (name, "(");
        if (NULL != nameEnd) {
            int nameLength = nameEnd - name - 1;
            char *onlyName = malloc ((nameLength + 1) * sizeof (char));
            if (NULL != onlyName) {
                strncpy (onlyName, name, nameLength);
                onlyName[nameLength] = '\0';
                printf ("Name: [%s]\n", onlyName);
                free (onlyName);
                onlyName = NULL;
            }
        }
    }
}
----------------------------------------

void stringEvaluation (char *name) {
    char *p;
    char OutPut [50] = {0};
    if (strstr (name, "Tall") != NULL) {
        p = strstr (name, " ");
        p++;
        p = strstr (p, " ");
        strncpy (OutPut, name, (p - name));
        printf ("name=%s\n", OutPut);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41199287_41200518_1_23
41199287_41200714_5_22
Title: How to print only the first sentence in string [C]? 
----------------------------------------

void stringEvaluation (char *name) {
    if (strstr (name, "Tall") != NULL) {
        char *nameEnd = strtok (name, "(");
        if (NULL != nameEnd) {
            int nameLength = nameEnd - name - 1;
            char *onlyName = malloc ((nameLength + 1) * sizeof (char));
            if (NULL != onlyName) {
                strncpy (onlyName, name, nameLength);
                onlyName[nameLength] = '\0';
                printf ("Name: [%s]\n", onlyName);
                free (onlyName);
                onlyName = NULL;
            }
        }
    }
}
----------------------------------------

void stringEvaluation (const char *s) {
    const char *p;
    if (s == NULL || *s == '\0') {
        puts ("invalid format.");
        return;
    }
    (p = strchr (s, '(')) || (p = strchr (s, '.'));
    if (p == NULL) {
        puts ("invalid format.");
        return;
    }
    while (!isalpha ((unsigned char) p[-1]))
        --p;
    while (s < p)
        putchar (*s++);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41199287_41200540_1_13
41199287_41200714_5_22
Title: How to print only the first sentence in string [C]? 
----------------------------------------

void stringEvaluation (char *name) {
    char *p;
    char OutPut [50] = {0};
    if (strstr (name, "Tall") != NULL) {
        p = strstr (name, " ");
        p++;
        p = strstr (p, " ");
        strncpy (OutPut, name, (p - name));
        printf ("name=%s\n", OutPut);
    }
}
----------------------------------------

void stringEvaluation (const char *s) {
    const char *p;
    if (s == NULL || *s == '\0') {
        puts ("invalid format.");
        return;
    }
    (p = strchr (s, '(')) || (p = strchr (s, '.'));
    if (p == NULL) {
        puts ("invalid format.");
        return;
    }
    while (!isalpha ((unsigned char) p[-1]))
        --p;
    while (s < p)
        putchar (*s++);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41200878_41201170_201_210
41200878_41201170_75_84
Title: how to use enum with decision making switch statements 
----------------------------------------

int disBePoints (void) {
    float xOne = 0, xTwo = 0, yOne = 0, yTwo = 0, finish = 0;
    printf ("Enter point 1 coordinates:");
    scanf ("%f%f", & xOne, & yOne);
    printf ("\nEnter point 2 coordinates:");
    scanf ("%f%f", & xTwo, & yTwo);
    finish = sqrt (pow (xTwo - xOne, 2) + pow (yTwo -yOne, 2));
    return finish;
}
----------------------------------------

int disBePoints (void) {
    float xOne = 0, xTwo = 0, yOne = 0, yTwo = 0, finish = 0;
    printf ("Enter point 1 coordinates:");
    scanf ("%f%f", & xOne, & yOne);
    printf ("\nEnter point 2 coordinates:");
    scanf ("%f%f", & xTwo, & yTwo);
    finish = sqrt (pow (xTwo - xOne, 2) + pow (yTwo -yOne, 2));
    return finish;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41202543_41202902_1_19
41202543_41206238_17_47
Title: Read a file through a function + Structure 
----------------------------------------

void readfile (PASSENGERS *target, FILE *businfo) {
    while (fgets (buff, sizeof (buff), businfo)) {
        sscanf (buff, "%s %s %d %s", firstname, lastname, & temp, phone);
        strcpy (target -> fullname, firstname);
        strcat (target -> fullname, " ");
        strcat (target -> fullname, lastname);
        i = 0;
        for (p = phone; *p != '\0'; p++) {
            (target->phonenr[i]) = *p - '0';
            i++;
        }
        target = target + temp - 1;
    }
}
----------------------------------------

void readfile (void) {
    FILE *businfo;
    businfo = fopen ("bus.txt", "r");
    if (businfo == NULL) {
        printf ("Error Opening File, check if file bus.txt is present");
        exit (1);
    }
    else {
        fscanf (businfo, "%s %d", platenr, & numberofseats);
        printf ("Bus Licence plate Nr is: %s and number of seats is: %d", platenr, numberofseats);
        PASSENGERS passenger [numberofseats];
        for (j = 0; j < numberofseats; j++) {
            passenger[j].seatnr = j + 1;
            strcpy (passenger [j].fullname, "\0");
        }
        while (fgets (buff, sizeof (buff), businfo)) {
            sscanf (buff, "%s %s %d %s", firstname, lastname, & temp, phone);
            strcpy (passenger [temp - 1].fullname, firstname);
            strcat (passenger [temp - 1].fullname, " ");
            strcat (passenger [temp - 1].fullname, lastname);
            i = 0;
            for (p = phone; *p != '\0'; p++) {
                (passenger[temp - 1].phonenr[i]) = *p - '0';
                i++;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41203707_41203850_1_19
41203707_41203960_1_19
Title: sorting even and odd numbers in a linked list 
----------------------------------------

void sortlist (node *head) {
    if (head == NULL) {
        printf ("Empty list \n");
    }
    node *current = head->next;
    node *previous = head;
    while (current != NULL) {
        if (current->data % 2 == 0) {
            previous->next = current->next;
            node *new_node = (struct node *) malloc (sizeof (struct node));
            new_node->data = current->data;
            new_node->next = head;
            head = new_node;
        }
        else {
            previous = previous->next;
        }
        current = current->next;
    }
}
----------------------------------------

void sortlist (node **head) {
    if (*head == NULL) {
        printf ("Empty list \n");
    }
    node *index1 = (*head)->next;
    node *prev = *head;
    while (index1 != NULL) {
        if (index1->data % 2 == 0) {
            prev->next = index1->next;
            index1->next = *head;
            *head = index1;
        }
        else {
            prev = index1;
        }
        index1 = prev->next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41203707_41203850_1_19
41203707_41204673_1_17
Title: sorting even and odd numbers in a linked list 
----------------------------------------

void sortlist (node *head) {
    if (head == NULL) {
        printf ("Empty list \n");
    }
    node *current = head->next;
    node *previous = head;
    while (current != NULL) {
        if (current->data % 2 == 0) {
            previous->next = current->next;
            node *new_node = (struct node *) malloc (sizeof (struct node));
            new_node->data = current->data;
            new_node->next = head;
            head = new_node;
        }
        else {
            previous = previous->next;
        }
        current = current->next;
    }
}
----------------------------------------

void sortlist (node **head) {
    for (node **current = head; *current != NULL;) {
        if ((*current)->data % 2 == 0 && current != head) {
            node *tmp = *current;
            *current = (*current)->next;
            tmp->next = *head;
            *head = tmp;
        }
        else {
            current = &(*current)->next;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41203707_41203960_1_19
41203707_41204673_1_17
Title: sorting even and odd numbers in a linked list 
----------------------------------------

void sortlist (node **head) {
    if (*head == NULL) {
        printf ("Empty list \n");
    }
    node *index1 = (*head)->next;
    node *prev = *head;
    while (index1 != NULL) {
        if (index1->data % 2 == 0) {
            prev->next = index1->next;
            index1->next = *head;
            *head = index1;
        }
        else {
            prev = index1;
        }
        index1 = prev->next;
    }
}
----------------------------------------

void sortlist (node **head) {
    for (node **current = head; *current != NULL;) {
        if ((*current)->data % 2 == 0 && current != head) {
            node *tmp = *current;
            *current = (*current)->next;
            tmp->next = *head;
            *head = tmp;
        }
        else {
            current = &(*current)->next;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41217648_41221990_4_37
41217648_41228667_4_28
Title: C Continue reading a file after EOF 
----------------------------------------

int main (void) {
    FILE *f;
    int i;
    char line [1024];
    f = fopen ("yourfile", "r");
    i = 0;
    while (fgets (line, 1024, f) != NULL) {
        i++;
    }
    fclose (f);
    sleep (5);
    f = fopen ("yourfile", "r");
    while (i != 0) {
        fgets (line, 1024, f);
        i--;
    }
    while (fgets (line, 1024, f) != NULL) {
    }
    fclose (f);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        fprintf (stderr, "Usage: %s file\n", argv [0]);
        return 1;
    }
    FILE *fp = fopen (argv[1], "r");
    if (fp == 0) {
        fprintf (stderr, "%s: failed to open file '%s' for reading\n", argv [0], argv [1]);
        return 1;
    }
    while (1) {
        char buffer [4096];
        while (fgets (buffer, sizeof (buffer), fp) != 0)
            fputs (buffer, stdout);
        clearerr (fp);
        sleep (5);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41224361_41230095_16_39
41224361_41246609_1_29
Title: Linked List : Adding and removing issues 
----------------------------------------

void addMec (mechanic *first) {
    if (first != NULL) {
        mechanic *new = malloc (sizeof (mechanic));
        if (new != NULL) {
            inputMec (new);
            printf ("%d %s %s %d\n", new -> number, new -> name, new -> first_name, new -> speciality);
            mechanic *last = first;
            while (last->next != NULL) {
                last = last->next;
            }
            last->next = new;
            new->next = NULL;
        }
    }
}
----------------------------------------

void addMec (list *list, int number, char name [], char first_name [], int speciality) {
    int i;
    mechanics *new = malloc (sizeof (mechanics));
    if (list == NULL || new == NULL) {
        exit (EXIT_FAILURE);
    }
    new->number = number;
    strcpy (new -> name, name);
    strcpy (new -> first_name, first_name);
    new->speciality = speciality;
    for (i = 1; i <= 50; i++) {
        new->rep->year = 0;
        new->rep->day = 0;
        new->rep->month = 0;
        new->rep->price = 0;
        new->rep->emergency = 0;
        strcpy (new -> rep -> brkdwn, "");
    }
    new->next = list->first;
    list->first = new;
    list->nbElmt++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41231708_41232593_17_31
41231708_41232701_49_63
Title: c linked list delete smallest element 
----------------------------------------

void deleteNode (struct node **head_ref, int key) {
    struct node *temp = *head_ref, *prev;
    if (temp != NULL && temp->data == key) {
        *head_ref = temp->next;
        free (temp);
        return;
    }
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL)
        return;
    prev->next = temp->next;
    free (temp);
}
----------------------------------------

void deleteNode (node **head_ref, int key) {
    node *curr = *head_ref, *prev = NULL;
    while (curr != NULL && curr->value != key) {
        prev = curr;
        curr = curr->next;
    }
    if (curr == NULL)
        return;
    if (prev)
        prev->next = curr->next;
    else
        *head_ref = curr->next;
    free (curr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41231708_41232593_55_71
41231708_41232701_83_92
Title: c linked list delete smallest element 
----------------------------------------

int main () {
    struct node *head = NULL;
    FILE *file = fopen ("duom.txt", "r");
    int i = 0;
    fscanf (file, "%d", & i);
    while (!feof (file)) {
        push (& head, i);
        fscanf (file, "%d", & i);
    }
    fclose (file);
    puts ("Created Linked List: ");
    printList (head);
    min (& head);
    puts ("\nLinked List after Deletion of minimum: ");
    printList (head);
    return 0;
}
----------------------------------------

int main (void) {
    linkedList *A = readList ();
    int min = searchMin (A);
    printList (A);
    deleteNode (& A, min);
    printList (A);
    freeList (A);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41234426_41235099_15_37
41234426_41235139_12_53
Title: Proper use of structures and pointers 
----------------------------------------

int main () {
    int n;
    printf ("Enter number of groups: ");
    scanf ("%d", & n);
    printf ("\n");
    struct students *v = malloc (n * sizeof (struct students));
    int i;
    for (i = 0; i < n; i++) {
        v[i].group = i;
        printf ("\nName: ");
        scanf ("%s", v [i].name);
        printf ("Grade: ");
        scanf ("%d", & v [i].grade);
    }
    qsort (v, n, sizeof (* v), comp);
    for (i = 0; i < n; i++) {
        printf ("Group %d, Name %s, grade %d\n", v [i].group, v [i].name, v [i].grade);
    }
    return (0);
}
----------------------------------------

int main (void) {
    int n, i;
    printf ("Enter number of students: ");
    if (scanf ("%d", &n) != 1) {
        printf ("Invalid input.\n");
        exit (EXIT_FAILURE);
    }
    student_t *students = malloc (n * sizeof (*students));
    if (!students) {
        printf ("Cannot allocate memory for %d structs.\n", n);
        exit (EXIT_FAILURE);
    }
    for (i = 0; i < n; i++) {
        students[i].group = i;
        printf ("Enter student name: ");
        scanf ("%20s", students [i].name);
        printf ("Enter students grade: ");
        if (scanf ("%d", &(students[i].grade)) != 1) {
            printf ("Invalid grade entered.\n");
            exit (EXIT_FAILURE);
        }
    }
    printf ("\nStudent Information:\n");
    for (i = 0; i < n; i++) {
        printf ("Group: %d Name: %s Grade: %d\n", students [i].group, students [i].name, students [i].grade);
    }
    free (students);
    students = NULL;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41266467_41266963_3_39
41266467_41273301_28_40
Title: split/parse a char array and get value between two tokens C 
----------------------------------------

int main (void) {
    char text [] = "123 123 123 abcdef/456->ghijklm/789 123 123";
    char *ptr = strtok (text, " ");
    char *slash;
    char *str1;
    char *str2;
    while (ptr) {
        if (slash = strstr (ptr, "/")) {
            *slash = '\0';
            str1 = ptr;
            ptr = ++slash;
            break;
        }
        ptr = strtok (NULL, " ");
    }
    str2 = strtok (ptr, "><![CDATA[");
    while (ptr) {
        if (slash = strstr (ptr, "/")) {
            *slash = '\0';
            str2 = ptr;
            break;
        }
        ptr = strtok (NULL, " ");
    }
    printf ("Found a: %s; and b: %s\n", str1, str2);
    return 0;
}
----------------------------------------

int main (void) {
    const char *data = "123 123 123 abcdef/456->ghijklm/789 123 123";
    char *str1 = between (data, ' ', '/');
    if (str1) {
        printf ("str1: '%s'\n", str1);
        char *str2 = between (data, '>', '/');
        if (str2)
            printf ("str2: '%s'\n", str2);
        free (str1);
        free (str2);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41266467_41266963_3_39
41266467_41275314_6_30
Title: split/parse a char array and get value between two tokens C 
----------------------------------------

int main (void) {
    char text [] = "123 123 123 abcdef/456->ghijklm/789 123 123";
    char *ptr = strtok (text, " ");
    char *slash;
    char *str1;
    char *str2;
    while (ptr) {
        if (slash = strstr (ptr, "/")) {
            *slash = '\0';
            str1 = ptr;
            ptr = ++slash;
            break;
        }
        ptr = strtok (NULL, " ");
    }
    str2 = strtok (ptr, "><![CDATA[");
    while (ptr) {
        if (slash = strstr (ptr, "/")) {
            *slash = '\0';
            str2 = ptr;
            break;
        }
        ptr = strtok (NULL, " ");
    }
    printf ("Found a: %s; and b: %s\n", str1, str2);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char data [] = "123 123 123 abcdef/456->ghijklm/789 123 123";
    char *word;
    const char *delim = " /->";
    int i, validlet, strnum = 1;
    word = strtok (data, delim);
    while (word) {
        validlet = 0;
        for (i = 0; word[i]; i++) {
            if (!isalpha (word[i])) {
                break;
            }
            validlet++;
        }
        if (validlet == strlen (word)) {
            printf ("Found str %d: %s\n", strnum, word);
            strnum++;
        }
        word = strtok (NULL, delim);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41266467_41273301_28_40
41266467_41275314_6_30
Title: split/parse a char array and get value between two tokens C 
----------------------------------------

int main (void) {
    const char *data = "123 123 123 abcdef/456->ghijklm/789 123 123";
    char *str1 = between (data, ' ', '/');
    if (str1) {
        printf ("str1: '%s'\n", str1);
        char *str2 = between (data, '>', '/');
        if (str2)
            printf ("str2: '%s'\n", str2);
        free (str1);
        free (str2);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char data [] = "123 123 123 abcdef/456->ghijklm/789 123 123";
    char *word;
    const char *delim = " /->";
    int i, validlet, strnum = 1;
    word = strtok (data, delim);
    while (word) {
        validlet = 0;
        for (i = 0; word[i]; i++) {
            if (!isalpha (word[i])) {
                break;
            }
            validlet++;
        }
        if (validlet == strlen (word)) {
            printf ("Found str %d: %s\n", strnum, word);
            strnum++;
        }
        word = strtok (NULL, delim);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4128511_4128867_1_16
4128511_4128882_1_11
Title: cycling through leds 
----------------------------------------

void __vector_23 (void) {
    intrs++;
    if (intrs > 60) {
        intrs = 0;
        PORTB = (0xff << i);
        i++;
        if (i == 8) {
            i = 0;
            PORTB = 0xff;
        }
    }
}
----------------------------------------

void __vector_23 (void) {
    intrs++;
    if (intrs >= 61) {
        PORTB = (0xff << i);
        intrs = 0;
        i++;
        if (i > 8)
            i = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41305890_41307035_2_41
41305890_41307082_4_20
Title: why do I get wrong answer in c code for some of the input? 
----------------------------------------

int main () {
    long long int x;
    scanf ("%lld", & x);
    int k;
    scanf ("%d", & k);
    long long int max = (int) log10 (x) + 1;
    int arr [max];
    long long int temp = x;
    long long int i;
    for (i = max - 1; i >= 0; i--) {
        arr[i] = temp % 10;
        temp = temp / 10;
    }
    i = 0;
    int cnt = k;
    while (cnt != 0) {
        if (arr[i] != 9) {
            arr[i] = 9;
            cnt = cnt - 1;
        }
        i = i + 1;
    }
    for (i = 0; i < max; i++)
        printf ("%d", arr[i]);
    return 0;
}
----------------------------------------

int main () {
    char *line = NULL;
    size_t len = 0;
    ssize_t read;
    while ((read = getline (&line, &len, stdin)) != -1) {
        int loop = atoi (&(line[strlen (line) - 2]));
        for (int i = 0; i < loop; i++) {
            if (line[i] == '9')
                loop++;
            else
                line[i] = '9';
        }
        line[strlen (line) - 2] = '\0';
        printf ("%s\n", line);
    }
    free (line);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41308175_41308555_67_80
41308175_52019392_66_79
Title: 3 way quicksort (C implementation) 
----------------------------------------

int main (void) {
    int array [SIZE];
    srand ((unsigned int) time (NULL));
    for (size_t i = 0; i < SIZE; i++) {
        array[i] = rand () % SIZE - SIZE / 2;
    }
    print_int ("before", array, SIZE);
    qsort3way (array, array + SIZE, sizeof * array, cmp_int, swap_int);
    print_int ("after", array, SIZE);
}
----------------------------------------

int main (void) {
    double d [100];
    int i;
    for (i = 0; i < 100; i++)
        d[i] = rand () / ((double) RAND_MAX + 1);
    qsort3way (d, 100, sizeof (* d), cmp_double);
    for (i = 0; i < 100; i++)
        printf ("%.10lf\n", d[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41316292_41316416_4_18
41316292_41316550_4_16
Title: "Printing a right-aligned ""#"" staircase" 
----------------------------------------

int main () {
    int n, i, j, k;
    scanf ("%d", & n);
    for (k = 0; k < n; k++) {
        for (i = n - 1; i > k; i--) {
            printf (" ");
        }
        for (j = 0; j < k + 1; j++)
            printf ("*");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n, i;
    char str [50];
    scanf ("%d\n", & n);
    memset (str, '#', sizeof (str));
    for (i = 1; i <= n; i++)
        printf ("%*.*s\n", n, i, str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41317558_41317707_8_44
41317558_41319002_4_20
Title: How to know if the user didn't input something after a minute in C 
----------------------------------------

int main (void) {
    fd_set rfds;
    struct timeval tv;
    int retval;
    struct termios oldt, newt;
    tcgetattr (STDIN_FILENO, & oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr (STDIN_FILENO, TCSANOW, & newt);
    FD_ZERO (& rfds);
    FD_SET (0, & rfds);
    tv.tv_sec = 2;
    tv.tv_usec = 0;
    retval = select (1, &rfds, NULL, NULL, &tv);
    if (retval == -1)
        perror ("select()");
    else if (retval)
        printf ("Data is available now.\n");
    else
        printf ("No data within two seconds.\n");
    tcsetattr (STDIN_FILENO, TCSANOW, & oldt);
    return 0;
}
----------------------------------------

int main () {
    struct pollfd mypoll = {STDIN_FILENO, POLLIN | POLLPRI};
    char string [10];
    if (poll (&mypoll, 1, 10000)) {
        scanf ("%9s", string);
        printf ("Read string - %s\n", string);
    }
    else {
        puts ("Read nothing");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41321912_41322322_3_13
41321912_41324836_44_59
Title: function to separate a string in c 
----------------------------------------

void separate (char name [], char first [], char last []) {
    strcpy (first, name);
    for (int i = 0; i < strlen (first); i++) {
        if (first[i] == ' ') {
            first[i] = '\0';
        }
    }
    char *p = strchr (name, ' ');
    p++;
    strcpy (last, p);
}
----------------------------------------

void separate (char buffer [], char firstname [], char lastname []) {
    int i;
    char *last;
    const char sep = ' ';
    for (i = 0; buffer[i] != sep; i++) {
        firstname[i] = buffer[i];
    }
    firstname[i] = '\0';
    last = strchr (buffer, sep);
    last++;
    strcpy (lastname, last);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41328975_41329111_1_27
41328975_41329438_25_45
Title: Reverse the string using Function and returning the Whole string to main function 
----------------------------------------

char *xstrrev (char *string) {
    char *original_string = string;
    int len = 0, i = 0;
    while (*string != '\0') {
        len++;
        string++;
    }
    char *reverse = (char *) malloc (len +1);
    char *reverse_to_be_returned = reverse;
    len = len - 1;
    while (len >= 0) {
        *reverse = original_string[len];
        reverse++;
        len--;
    }
    *reverse = '\0';
    return reverse_to_be_returned;
}
----------------------------------------

char *xstrrev (char *string) {
    char *result;
    size_t slen, count = 0;
    int i;
    slen = strlen (string);
    result = malloc (slen +1);
    if (!result) {
        printf ("Cannot allocate space for string.\n");
        exit (EXIT_FAILURE);
    }
    for (i = slen - 1; i >= 0; i--) {
        result[count++] = string[i];
    }
    result[count] = '\0';
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41331820_41331899_3_14
41331820_41336280_2_17
Title: I want to print out the following to the console 
----------------------------------------

int main () {
    for (int i = 0; i < 6; i++) {
        for (int k = i; k < 5; k++) {
            printf ("+");
        }
        for (int j = 0; j < i; j++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int m = 6;
    int n = 5;
    int i, j, k;
    for (i = 0; i < m; i++) {
        k = i;
        for (j = n; j >= 0; j--) {
            if (k >= j)
                printf ("*");
            else
                printf ("+");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41332855_41333085_5_36
41332855_41333090_4_14
Title: Write a program in C that will take a base and n digits and will output a decimal number represented by those digits 
----------------------------------------

int main (int argc, char *argv []) {
    int base, n, i, x, sum = 0, power;
    printf ("Enter base: ");
    if (scanf ("%d", &base) != 1) {
        printf ("Invalid base.\n");
        exit (EXIT_FAILURE);
    }
    printf ("Enter n: ");
    if (scanf ("%d", &n) != 1) {
        printf ("Invalid n.\n");
        exit (EXIT_FAILURE);
    }
    power = n - 1;
    printf ("Enter numbers: ");
    for (i = 0; i < n; i++) {
        if (scanf ("%d", &x) != 1) {
            printf ("Invalid value.\n");
            exit (EXIT_FAILURE);
        }
        sum += x * pow (base, power);
        power--;
    }
    printf ("Sum = %d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int x, n, b, num = 0, i;
    scanf ("%d", & b);
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        scanf ("%d", & x);
        num += x * pow (b, n -i);
    }
    printf ("m=%d", num);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41334775_41334871_4_12
41334775_41334984_10_19
Title: Write and read different types to memory in C 
----------------------------------------

uint8_t *foo (int i, char c, char *s) {
    size_t offset1 = GET_ALIGNED_OFFSET (sizeof i, char);
    size_t offset2 = GET_ALIGNED_OFFSET (offset1 + sizeof c, char *);
    uint8_t *r = malloc (offset2 + sizeof s);
    *(int*) r = i;
    *(char*) (r + offset1) = c;
    *(char**) (r + offset2) = s;
    return r;
}
----------------------------------------

struct multi_type *foo (int i, char c, char *s) {
    struct multi_type *result = malloc (sizeof (*result));
    if (result == NULL) {
        return NULL;
    }
    result->i = i;
    result->c = c;
    result->s = s;
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41341936_41343963_16_28
41341936_41347958_68_117
Title: c- Segmentation fault after increasing array size and try to reach 
----------------------------------------

int **take (int *row, int *col) {
    int **array, i;
    printf ("Enter the row number for array \n");
    scanf ("%d", row);
    printf ("Enter the column number for the array \n");
    scanf ("%d", col);
    array = malloc (sizeof (int *) * (*row));
    for (i = 0; i < (*row); ++i) {
        array[i] = calloc (*col, sizeof (int));
    }
    return array;
}
----------------------------------------

int **take (int **array, int *row, int *col) {
    char line [256] = "";
    int i;
    int each = 0;
    int newrow = 0;
    int newcol = 0;
    int valid = 0;
    int **temp = 0;
    int *temprow = 0;
    do {
        printf ("Enter the row number for array \n");
        fgets (line, sizeof (line), stdin);
        valid = get_int_range (line, NULL, "\n", &newrow, (*row) + 1, INT_MAX);
    }
    while (!valid);
    do {
        printf ("Enter the column number for the array \n");
        fgets (line, sizeof (line), stdin);
        valid = get_int_range (line, NULL, "\n", &newcol, (*col) + 1, INT_MAX);
    }
    while (!valid);
    if ((temp = realloc (array, sizeof (int *) * (newrow))) == NULL) {
        fprintf (stderr, "problem reallocating\n");
        return array;
    }
    array = temp;
    for (i = 0; i < (*row); ++i) {
        if ((temprow = realloc (array[i], sizeof (int) * (newcol))) == NULL) {
            fprintf (stderr, "problem reallocating row \n");
            return array;
        }
        array[i] = temprow;
        for (each = *col; each < newcol; each++) {
            array[i][each] = rand () % 50;
        }
    }
    for (i = (*row); i < newrow; ++i) {
        if ((array[i] = malloc (sizeof (int) * (newcol))) == NULL) {
            fprintf (stderr, "problem allocating row \n");
            return array;
        }
        for (each = 0; each < newcol; each++) {
            array[i][each] = rand () % 50;
        }
    }
    *row = newrow;
    *col = newcol;
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41341936_41343963_60_78
41341936_41347958_129_143
Title: c- Segmentation fault after increasing array size and try to reach 
----------------------------------------

int main (void) {
    int **array = NULL;
    int row, col;
    array = take (&row, &col);
    assign (array, row, col);
    print (array, row, col);
    array = increase (array, &row, &col);
    array[2][0] = 1;
    print (array, row, col);
    for (int i = 0; i < row; ++i)
        free (array[i]);
    free (array);
    return 0;
}
----------------------------------------

int main () {
    int **array = NULL;
    int row = 0;
    int col = 0;
    srand (time (NULL));
    array = take (array, &row, &col);
    print (array, row, col);
    array = take (array, &row, &col);
    array[2][0] = 1;
    print (array, row, col);
    array = takeaway (array, &row, &col);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41341936_41343963_6_14
41341936_41347958_57_66
Title: c- Segmentation fault after increasing array size and try to reach 
----------------------------------------

void print (int **array, int row, int col) {
    int i, j;
    for (i = 0; i < row; ++i) {
        for (j = 0; j < col; ++j) {
            printf ("%2d ", array [i] [j]);
        }
        printf ("\n");
    }
}
----------------------------------------

void print (int **array, int row, int col) {
    int i, j;
    for (i = 0; i < row; ++i) {
        for (j = 0; j < col; ++j) {
            printf ("%d ", array [i] [j]);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41346859_3_14
41346797_41346880_3_20
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++)
        scanf ("%d", &ar[i]);
    for (i = 0; i < N; i++)
        sum = sum + ar[i];
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++) {
        scanf ("%d", & ar [i]);
    }
    for (i = 0; i < N; i++) {
        sum = sum + ar[i];
    }
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41346859_3_14
41346797_41347510_6_19
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++)
        scanf ("%d", &ar[i]);
    for (i = 0; i < N; i++)
        sum = sum + ar[i];
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int N;
    printf ("Give the array size: ");
    scanf ("%d", & N);
    int array [N];
    ReadArrayData (N, array);
    int sumOfArrayElements = CalculateArraySum (N, array);
    printf ("The sum of array elements is %d.\n", sumOfArrayElements);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41346859_3_14
41346797_41347753_4_30
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++)
        scanf ("%d", &ar[i]);
    for (i = 0; i < N; i++)
        sum = sum + ar[i];
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int i, N, sum;
    int *ar;
    if (scanf ("%d", &N) != 1 || N <= 0) {
        fprintf (stderr, "invalid number\n");
        return 1;
    }
    ar = malloc (sizeof (*ar) * N);
    if (ar == NULL) {
        fprintf (stderr, "cannot allocate array for %d items\n", N);
        return 1;
    }
    for (i = 0; i < N; i++) {
        if (scanf ("%d", &ar[i]) != 1) {
            fprintf (stderr, "invalid or missing number for entry %d\n", i);
            return 1;
        }
    }
    sum = 0;
    for (i = 0; i < N; i++) {
        sum += ar[i];
    }
    printf ("%d\n", sum);
    free (ar);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41346880_3_20
41346797_41347510_6_19
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++) {
        scanf ("%d", & ar [i]);
    }
    for (i = 0; i < N; i++) {
        sum = sum + ar[i];
    }
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int N;
    printf ("Give the array size: ");
    scanf ("%d", & N);
    int array [N];
    ReadArrayData (N, array);
    int sumOfArrayElements = CalculateArraySum (N, array);
    printf ("The sum of array elements is %d.\n", sumOfArrayElements);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41346880_3_20
41346797_41347753_4_30
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++) {
        scanf ("%d", & ar [i]);
    }
    for (i = 0; i < N; i++) {
        sum = sum + ar[i];
    }
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int i, N, sum;
    int *ar;
    if (scanf ("%d", &N) != 1 || N <= 0) {
        fprintf (stderr, "invalid number\n");
        return 1;
    }
    ar = malloc (sizeof (*ar) * N);
    if (ar == NULL) {
        fprintf (stderr, "cannot allocate array for %d items\n", N);
        return 1;
    }
    for (i = 0; i < N; i++) {
        if (scanf ("%d", &ar[i]) != 1) {
            fprintf (stderr, "invalid or missing number for entry %d\n", i);
            return 1;
        }
    }
    sum = 0;
    for (i = 0; i < N; i++) {
        sum += ar[i];
    }
    printf ("%d\n", sum);
    free (ar);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41347122_3_17
41346797_41347510_6_19
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++) {
        scanf ("%d", & ar [i]);
        sum = sum + ar[i];
    }
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int N;
    printf ("Give the array size: ");
    scanf ("%d", & N);
    int array [N];
    ReadArrayData (N, array);
    int sumOfArrayElements = CalculateArraySum (N, array);
    printf ("The sum of array elements is %d.\n", sumOfArrayElements);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41347122_3_17
41346797_41347753_4_30
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main () {
    int i = 0, N, sum = 0;
    scanf ("%d", & N);
    int ar [N];
    for (i = 0; i < N; i++) {
        scanf ("%d", & ar [i]);
        sum = sum + ar[i];
    }
    printf ("%d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int i, N, sum;
    int *ar;
    if (scanf ("%d", &N) != 1 || N <= 0) {
        fprintf (stderr, "invalid number\n");
        return 1;
    }
    ar = malloc (sizeof (*ar) * N);
    if (ar == NULL) {
        fprintf (stderr, "cannot allocate array for %d items\n", N);
        return 1;
    }
    for (i = 0; i < N; i++) {
        if (scanf ("%d", &ar[i]) != 1) {
            fprintf (stderr, "invalid or missing number for entry %d\n", i);
            return 1;
        }
    }
    sum = 0;
    for (i = 0; i < N; i++) {
        sum += ar[i];
    }
    printf ("%d\n", sum);
    free (ar);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41346797_41347510_6_19
41346797_41347753_4_30
Title: How to read space-separated integers representing the array's elements and sum them up in C 
----------------------------------------

int main (void) {
    int N;
    printf ("Give the array size: ");
    scanf ("%d", & N);
    int array [N];
    ReadArrayData (N, array);
    int sumOfArrayElements = CalculateArraySum (N, array);
    printf ("The sum of array elements is %d.\n", sumOfArrayElements);
    return 0;
}
----------------------------------------

int main (void) {
    int i, N, sum;
    int *ar;
    if (scanf ("%d", &N) != 1 || N <= 0) {
        fprintf (stderr, "invalid number\n");
        return 1;
    }
    ar = malloc (sizeof (*ar) * N);
    if (ar == NULL) {
        fprintf (stderr, "cannot allocate array for %d items\n", N);
        return 1;
    }
    for (i = 0; i < N; i++) {
        if (scanf ("%d", &ar[i]) != 1) {
            fprintf (stderr, "invalid or missing number for entry %d\n", i);
            return 1;
        }
    }
    sum = 0;
    for (i = 0; i < N; i++) {
        sum += ar[i];
    }
    printf ("%d\n", sum);
    free (ar);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41362212_41362301_1_24
41362212_41378924_52_80
Title: "Finding the number of row with the smallest sum of powers C" 
----------------------------------------

int smallest_powers_sum (int **array, int n, int m) {
    int sum = 0, minsum = 1000000, i, j, minindex = -1;
    for (i = 0; i < n; i++) {
        sum = 0;
        for (j = 0; j < m; j++) {
            sum += pow (array[i][j], 2);
        }
        if (sum <= minsum) {
            minindex = i;
            minsum = sum;
        }
        printf ("sum = %d, minsum = %d, minindex = %d\n", sum, minsum, minindex);
    }
    return minindex;
}
----------------------------------------

int smallest_powers_sum (int **array, int n, int m) {
    int sum = 0, minsum = 0, i, j, minindex = 0, minsumtemp;
    for (i = 0; i < n; i++) {
        minsum = sum;
        sum = 0;
        for (j = 0; j < m; j++) {
            sum += pow (array[i][j], 2);
        }
        if (i == 0)
            minsumtemp = sum;
        if (sum <= minsumtemp) {
            minindex = i;
            minsumtemp = sum;
        }
        printf ("sum = %d, minsum = %d, minindex = %d\n", sum, minsum, minindex);
    }
    return minindex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41362212_41363491_34_64
41362212_41378924_82_108
Title: "Finding the number of row with the smallest sum of powers C" 
----------------------------------------

int main (void) {
    int *array = malloc (NROWS *NCOLS);
    int listsum [NROWS];
    int i, j;
    array[0 * NROWS + 0] = 1;
    array[0 * NROWS + 1] = 1;
    array[0 * NROWS + 2] = 1;
    array[1 * NROWS + 0] = 2;
    array[1 * NROWS + 1] = 2;
    array[1 * NROWS + 2] = 2;
    array[2 * NROWS + 0] = 3;
    array[2 * NROWS + 1] = 3;
    array[2 * NROWS + 2] = 3;
    for (i = 0; i < NROWS; i++) {
        for (j = 0; j < NCOLS; j++) {
            array[i * NROWS + j] = pow (array[i * NROWS + j], 2);
        }
    }
    for (i = 0; i < NROWS; i++)
        listsum[i] = sumrow (&array[i], NCOLS);
    printf ("Min row: %d\n", getminrow (listsum, NROWS) - listsum);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int **array, n1 = 3, m1 = 3;
    array = alloc (n1, m1);
    fill (array, n1, m1, 1);
    array[0][0] = 1;
    array[0][1] = 1;
    array[0][2] = 1;
    array[1][0] = 2;
    array[1][1] = 2;
    array[1][2] = 2;
    array[2][0] = 3;
    array[2][1] = 3;
    array[2][2] = 3;
    int sum = smallest_powers_sum (array, n1, m1);
    printf ("index = %d\n", sum);
    dealloc (array, n1, m1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41400716_41400845_39_91
41400716_41404196_3_51
Title: how to change this code to be able to solve this challenge? 
----------------------------------------

int main (void) {
    char line [MAX_LINE];
    int i, j, s, k;
    int first, second, delta;
    int max [200], max_hour [200];
    int flag = 1;
    for (k = 0; k < 200; k++) {
        max[k] = 0;
    }
    while (scanf ("%i", &s) != EOF) {
        getchar ();
        for (i = 0; i < s - 1; i++) {
            if (i % 2 == 0) {
                scanf ("%[^\n]%*c", line);
                second = second_time (line);
                if (s % 2 == 0) {
                    i++;
                }
            }
            scanf ("%[^\n]%*c", line);
            first = first_time (line);
            delta = first - second;
            if (delta > max[k])
                max_hour[k] = second;
            max[k] = delta;
            second = second_time (line);
        }
        for (k = 0; k < s; k++) {
            if (delta < 60)
                printf ("Day #%i: the longest nap starts at %.2i:%.2i and will last for %i minutes.\n", k +1, max_hour[k] / 60, max_hour[k] % 60, max[k]);
            else
                printf ("Day #%i: the longest nap starts at %.2i:%.2i and will last for %i hours and %i minutes.\n", k +1, max_hour[k] / 60, max_hour[k] % 60, max[k] / 60, max[k] % 60);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int s, c, day = 0, z, cp, cb, m;
    int f [480], beg, max;
    int h1, m1, h2, m2;
    int p1, p2;
    char line [256];
    while (scanf ("%d\n", &s) != EOF) {
        ++day;
        for (z = 0; z < 480; ++z)
            f[z] = 1;
        beg = 0;
        max = 0;
        for (c = 0; c < s; ++c) {
            scanf ("%d:%d %d:%d", & h1, & m1, & h2, & m2);
            fgets (line, 256, stdin);
            p1 = (h1 - 10) * 60 + m1;
            p2 = (h2 - 10) * 60 + m2;
            for (cp = p1; cp < p2; ++cp)
                f[cp] = 0;
        }
        c = 0;
        while (c < 480) {
            if (f[c]) {
                cb = c;
                m = 0;
                while (f[c] && c < 480) {
                    ++c;
                    ++m;
                }
                if (m > max) {
                    beg = cb;
                    max = m;
                }
            }
            else {
                ++c;
            }
        }
        printf ("Day #%d: the longest nap starts at %02d:%02d and will last for ", day, 10 + beg / 60, beg % 60);
        if (max > 59)
            printf ("%d hours and ", max / 60);
        printf ("%d minutes.\n", max % 60);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41408108_41408141_4_20
41408108_41408195_1_16
Title: putchar() function: ambiguous output 
----------------------------------------

int main () {
    char x [] = "Yasser Mohamed";
    char ch;
    int i = 0;
    while (x[i] != '\0') {
        if (x[i] != ' ')
            putchar (x[i]);
        i++;
    }
    system ("pause");
    return 0;
}
----------------------------------------

int main () {
    char x [] = "Yasser Mohamed";
    char ch;
    int i = 0;
    while (x[i] != '\0') {
        if (x[i] != ' ') {
            printf ("%c", x [i]);
            fflush (stdout);
        }
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41408108_41408159_2_18
41408108_41408195_1_16
Title: putchar() function: ambiguous output 
----------------------------------------

int main () {
    char x [] = "Yasser Mohamed";
    char ch;
    int i = 0;
    while (x[i]) {
        if (x[i] != ' ')
            putchar (x[i]);
        i++;
    }
    system ("pause");
    return 0;
}
----------------------------------------

int main () {
    char x [] = "Yasser Mohamed";
    char ch;
    int i = 0;
    while (x[i] != '\0') {
        if (x[i] != ' ') {
            printf ("%c", x [i]);
            fflush (stdout);
        }
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41419992_41420976_16_43
41419992_41427052_13_37
Title: "C String File" 
----------------------------------------

int main (void) {
    char line [4096];
    Student stu [MAXSTUD];
    FILE *f = fopen ("grades.txt", "r");
    FILE *pa = fopen ("passed.txt", "w");
    FILE *fa = fopen ("failed.txt", "w");
    if (f == NULL || pa == NULL || fa == NULL) {
        perror ("Error");
        return 1;
    }
    fprintf (fa, "First name Last name Midterm Final Overall\n");
    fprintf (pa, "First name Last name Midterm Final Overall\n");
    if (fgets (line, sizeof (line), f) == 0)
        return 1;
    for (int i = 0; i < MAXSTUD && fgets (line, sizeof (line), f) != 0; i++) {
        if (scan_student (&stu[i], line) == 0) {
            if (stu[i].midterm * 0.4 + stu[i].final * 0.6 >= 50) {
                write_student (pa, "Student", & stu [i], stu [i].midterm * 0.4 + stu [i].final * 0.6);
            }
            else {
                write_student (fa, "Student", & stu [i], stu [i].midterm * 0.4 + stu [i].final * 0.6);
            }
        }
    }
    fclose (pa);
    fclose (fa);
    fclose (f);
    return 0;
}
----------------------------------------

int main (void) {
    char line [4096];
    FILE *f = fopen ("grades.txt", "r");
    FILE *pa = fopen ("passed.txt", "w");
    FILE *fa = fopen ("failed.txt", "w");
    fprintf (fa, "First name Last name Midterm Final Overall\n");
    fprintf (pa, "First name Last name Midterm Final Overall\n");
    while (fgets (line, sizeof (line), f) != 0) {
        Student stu;
        if (scan_student (&stu, line) != 0)
            continue;
        if (stu.midterm * 0.4 + stu.finall * 0.6 >= 50) {
            write_student (pa, "Student", & stu, stu.midterm * 0.4 + stu.finall * 0.6);
        }
        else {
            write_student (fa, "Student", & stu, stu.midterm * 0.4 + stu.finall * 0.6);
        }
    }
    fclose (pa);
    fclose (fa);
    fclose (f);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41421042_41421116_16_25
41421042_41423047_46_67
Title: Create array from another array in C 
----------------------------------------

int main () {
    int i;
    char av [100] [10] = {{0}};
    char *arr [100] = {"hi", "&&", "hello", 0};
    split_by_word (av, arr, "&&");
    for (i = 0; i < 2; ++i)
        printf ("%s\n", av[i]);
    return 0;
}
----------------------------------------

int main (void) {
    char *av [100] = {0};
    char *arr1 [100] = {"hi", "&&", "hello", 0};
    split_by_word (av, arr1, "&&");
    print_words (av);
    free_words (av);
    char *arr2 [] = {"Hello", "good", "morning", "out", "hello", "good", "afternoon", 0};
    split_by_word (av, arr2, "out");
    print_words (av);
    free_words (av);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41421042_41421116_16_25
41421042_41435864_10_26
Title: Create array from another array in C 
----------------------------------------

int main () {
    int i;
    char av [100] [10] = {{0}};
    char *arr [100] = {"hi", "&&", "hello", 0};
    split_by_word (av, arr, "&&");
    for (i = 0; i < 2; ++i)
        printf ("%s\n", av[i]);
    return 0;
}
----------------------------------------

int main (void) {
    char *arr [] = {"Hello", "good", "morning", "out", "hello", "good", "afternoon", 0}, *res [sizeof arr / sizeof *arr] = {NULL}, *tok = "out";
    if (split_by_word (res, arr, tok) > 0)
        for (int i = 0; res[i]; i++) {
            printf ("%s\n", res [i]);
            free (res [i]);
        }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41421042_41421214_4_27
41421042_41423047_5_29
Title: Create array from another array in C 
----------------------------------------

void split_by_word (char av [] [MAXLEN], char **arr, char *word) {
    size_t i = 0;
    size_t j = 0;
    while ((j + 1) < MAXNUM && arr[i]) {
        if (strcmp (arr[i], word)) {
            if ((strlen (av[j]) + strlen (arr[i]) + 1) < MAXLEN) {
                strcat (av [j], arr [i]);
                strcat (av [j], " ");
            }
            else {
                ++i;
                while (arr[i] && strcmp (arr[i], word)) {
                    ++i;
                }
                ++j;
            }
        }
        else {
            ++j;
        }
        if (arr[i])
            ++i;
    }
}
----------------------------------------

static void split_by_word (char **av, char **arr, char *word) {
    while (*arr != 0) {
        if (strcmp (*arr, word) == 0)
            av++;
        else if (*av == 0)
            *av = strdup (*arr);
        else {
            size_t len = strlen (*av) + strlen (*arr) + 2;
            void *space = realloc (*av, len);
            if (space == 0) {
                fprintf (stderr, "Memory allocation failed (%zu bytes)\n", len);
                exit (EXIT_FAILURE);
            }
            *av = space;
            strcat (* av, " ");
            strcat (* av, * arr);
        }
        arr++;
    }
    *++av = 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41421042_41421214_4_27
41421042_41435864_28_62
Title: Create array from another array in C 
----------------------------------------

void split_by_word (char av [] [MAXLEN], char **arr, char *word) {
    size_t i = 0;
    size_t j = 0;
    while ((j + 1) < MAXNUM && arr[i]) {
        if (strcmp (arr[i], word)) {
            if ((strlen (av[j]) + strlen (arr[i]) + 1) < MAXLEN) {
                strcat (av [j], arr [i]);
                strcat (av [j], " ");
            }
            else {
                ++i;
                while (arr[i] && strcmp (arr[i], word)) {
                    ++i;
                }
                ++j;
            }
        }
        else {
            ++j;
        }
        if (arr[i])
            ++i;
    }
}
----------------------------------------

int split_by_word (char **res, char **arr, char *tok) {
    int aidx = 0, cidx = 0, ridx = 0;
    size_t szres = MAXS;
    if (!res || !arr || !tok)
        return -1;
    if (!(res[ridx] = calloc (szres, sizeof *(res[ridx]))))
        return -1;
    while (arr[aidx]) {
        if (strcmp (arr[aidx], tok) == 0) {
            *(res[ridx] + cidx) = 0;
            ridx++;
            szres = MAXS;
            if (!(res[ridx] = calloc (szres, sizeof *(res[ridx]))))
                return -1;
            cidx = 0;
        }
        else {
            size_t len = strlen (arr[aidx]), reqd = cidx ? len + 2 : len + 1;
            if (cidx + reqd > szres)
                res[ridx] = xrealloc (res[ridx], sizeof *(res[ridx]), &szres, cidx +reqd);
            snprintf (res [ridx] + cidx, reqd, cidx ? " %s" : "%s", arr [aidx]);
            cidx += reqd - 1;
        }
        aidx++;
    }
    *(res[ridx] + cidx) = 0;
    return ridx ? ridx : cidx ? 1 : ridx;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41421042_41423047_46_67
41421042_41435864_10_26
Title: Create array from another array in C 
----------------------------------------

int main (void) {
    char *av [100] = {0};
    char *arr1 [100] = {"hi", "&&", "hello", 0};
    split_by_word (av, arr1, "&&");
    print_words (av);
    free_words (av);
    char *arr2 [] = {"Hello", "good", "morning", "out", "hello", "good", "afternoon", 0};
    split_by_word (av, arr2, "out");
    print_words (av);
    free_words (av);
    return 0;
}
----------------------------------------

int main (void) {
    char *arr [] = {"Hello", "good", "morning", "out", "hello", "good", "afternoon", 0}, *res [sizeof arr / sizeof *arr] = {NULL}, *tok = "out";
    if (split_by_word (res, arr, tok) > 0)
        for (int i = 0; res[i]; i++) {
            printf ("%s\n", res [i]);
            free (res [i]);
        }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41421042_41423047_5_29
41421042_41435864_28_62
Title: Create array from another array in C 
----------------------------------------

static void split_by_word (char **av, char **arr, char *word) {
    while (*arr != 0) {
        if (strcmp (*arr, word) == 0)
            av++;
        else if (*av == 0)
            *av = strdup (*arr);
        else {
            size_t len = strlen (*av) + strlen (*arr) + 2;
            void *space = realloc (*av, len);
            if (space == 0) {
                fprintf (stderr, "Memory allocation failed (%zu bytes)\n", len);
                exit (EXIT_FAILURE);
            }
            *av = space;
            strcat (* av, " ");
            strcat (* av, * arr);
        }
        arr++;
    }
    *++av = 0;
}
----------------------------------------

int split_by_word (char **res, char **arr, char *tok) {
    int aidx = 0, cidx = 0, ridx = 0;
    size_t szres = MAXS;
    if (!res || !arr || !tok)
        return -1;
    if (!(res[ridx] = calloc (szres, sizeof *(res[ridx]))))
        return -1;
    while (arr[aidx]) {
        if (strcmp (arr[aidx], tok) == 0) {
            *(res[ridx] + cidx) = 0;
            ridx++;
            szres = MAXS;
            if (!(res[ridx] = calloc (szres, sizeof *(res[ridx]))))
                return -1;
            cidx = 0;
        }
        else {
            size_t len = strlen (arr[aidx]), reqd = cidx ? len + 2 : len + 1;
            if (cidx + reqd > szres)
                res[ridx] = xrealloc (res[ridx], sizeof *(res[ridx]), &szres, cidx +reqd);
            snprintf (res [ridx] + cidx, reqd, cidx ? " %s" : "%s", arr [aidx]);
            cidx += reqd - 1;
        }
        aidx++;
    }
    *(res[ridx] + cidx) = 0;
    return ridx ? ridx : cidx ? 1 : ridx;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41431070_41431664_21_40
41431070_41431665_4_16
Title: Read file into multidimensional character array in C 
----------------------------------------

int main (void) {
    size_t rows, cols;
    if (scanf ("%zu %zu", &rows, &cols) != 2)
        return 1;
    char *mat [rows] [cols];
    if (readMatrix (stdin, rows, cols, mat) == 0) {
        for (size_t i = 0; i < rows; i++) {
            for (size_t j = 0; j < cols; j++) {
                printf (" %8s", mat [i] [j]);
            }
            printf ("\n");
        }
    }
    for (size_t i = 0; i < rows; i++) {
        for (size_t j = 0; j < cols; j++) {
            free (mat [i] [j]);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    FILE *cin = fopen ("input.txt", "r");
    char ***inputMatrix;
    readMatrix (cin, & inputMatrix);
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf ("%s ", * (* (inputMatrix + i) + j));
        }
        printf ("\n");
    }
    fclose (cin);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
41431070_41431664_5_19
41431070_41431665_17_36
Title: Read file into multidimensional character array in C 
----------------------------------------

int readMatrix (FILE *file, size_t rows, size_t cols, char *matrix [] [cols]) {
    int rc = 0;
    for (size_t i = 0; i < rows; i++) {
        for (size_t j = 0; j < cols; j++) {
            char buf [80];
            if (rc == 0 && fscanf (file, "%79s", buf) == 1) {
                matrix[i][j] = strdup (buf);
            }
            else {
                matrix[i][j] = NULL;
                rc = -1;
            }
        }
    }
    return rc;
}
----------------------------------------

void readMatrix (FILE *cin, char ****matrix) {
    int rowNum, columnNum;
    char buff [10];
    int intBuff;
    fscanf (cin, "%d", & intBuff);
    rowNum = intBuff;
    fscanf (cin, "%d", & intBuff);
    columnNum = intBuff;
    *matrix = malloc (rowNum * sizeof (char **));
    for (int i = 0; i < rowNum; i++) {
        *(*matrix + i) = malloc (columnNum * sizeof (char *));
    }
    for (int i = 0; i < rowNum; i++) {
        for (int j = 0; j < columnNum; j++) {
            *(*(*matrix + i) + j) = malloc (MAX_WORD_SIZE * sizeof (char));
            fscanf (cin, "%s", * (* (* matrix + i) + j));
        }
    }
}
----------------------------------------

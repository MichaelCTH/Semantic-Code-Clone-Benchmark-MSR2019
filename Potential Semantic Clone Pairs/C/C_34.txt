$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
346349_27415854_1_32
346349_346357_4_32
Title: A student grade practice not working 
----------------------------------------

void main () {
    int pass, fail, grade, studentcounter;
    pass = 0;
    fail = 0;
    grade = 0;
    studentcounter = 10;
    while (studentcounter != 0) {
        printf ("enter the next grade\n");
        scanf ("%d", grade);
        studentcounter--;
        switch (grade) {
        case 1 :
            if (grade >= 50)
                pass++;
            break;
        case 2 :
            if (grade <= 49)
                fail++;
            break;
        }
    }
    printf ("the number of fail is %d", fail);
    printf ("the number of pass is %d", pass);
}
----------------------------------------

int main () {
    int pass, fail, grade, studentcounter;
    pass = 0;
    fail = 0;
    grade = 0;
    studentcounter = 0;
    while (studentcounter < 10) {
        printf ("enter the next grade:\n");
        scanf ("%d", & grade);
        if (grade >= 50) {
            pass++;
        }
        else {
            fail++;
        }
        studentcounter++;
    }
    printf ("the number of fail is: %d \n", fail);
    printf ("the number of pass is: %d \n", pass);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
346349_27415854_1_32
346349_346368_3_23
Title: A student grade practice not working 
----------------------------------------

void main () {
    int pass, fail, grade, studentcounter;
    pass = 0;
    fail = 0;
    grade = 0;
    studentcounter = 10;
    while (studentcounter != 0) {
        printf ("enter the next grade\n");
        scanf ("%d", grade);
        studentcounter--;
        switch (grade) {
        case 1 :
            if (grade >= 50)
                pass++;
            break;
        case 2 :
            if (grade <= 49)
                fail++;
            break;
        }
    }
    printf ("the number of fail is %d", fail);
    printf ("the number of pass is %d", pass);
}
----------------------------------------

int main (int argc, char *argv []) {
    int pass = 0;
    int fail = 0;
    int grade = 0;
    int studentcounter;
    for (studentcounter = 1; studentcounter <= 10; studentcounter++) {
        printf ("Enter grade for student #%-2d  :", studentcounter);
        scanf ("%d", & grade);
        if (grade >= 50)
            pass++;
        if (grade <= 49)
            fail++;
    }
    printf ("the number of fail is %d\n", fail);
    printf ("the number of pass is %d\n", pass);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
346349_346357_4_32
346349_346368_3_23
Title: A student grade practice not working 
----------------------------------------

int main () {
    int pass, fail, grade, studentcounter;
    pass = 0;
    fail = 0;
    grade = 0;
    studentcounter = 0;
    while (studentcounter < 10) {
        printf ("enter the next grade:\n");
        scanf ("%d", & grade);
        if (grade >= 50) {
            pass++;
        }
        else {
            fail++;
        }
        studentcounter++;
    }
    printf ("the number of fail is: %d \n", fail);
    printf ("the number of pass is: %d \n", pass);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int pass = 0;
    int fail = 0;
    int grade = 0;
    int studentcounter;
    for (studentcounter = 1; studentcounter <= 10; studentcounter++) {
        printf ("Enter grade for student #%-2d  :", studentcounter);
        scanf ("%d", & grade);
        if (grade >= 50)
            pass++;
        if (grade <= 49)
            fail++;
    }
    printf ("the number of fail is %d\n", fail);
    printf ("the number of pass is %d\n", pass);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34635980_34636093_1_26
34635980_34636204_1_15
Title: Inserting at the end of a linked list 
----------------------------------------

void insert (node **head, int x) {
    node *new = (node *) malloc (sizeof (node));
    if (!new) {
        printf ("Memory allocation failed!\n");
        exit (1);
    }
    new->data = x;
    new->next = NULL;
    node *temp = *head;
    if (!temp)
        *head = new;
    else {
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new;
    }
    return;
}
----------------------------------------

void insert (node **head, int x) {
    node **ptr_new = head;
    while (*ptr_new != NULL) {
        ptr_new = &((*ptr_new)->next);
    }
    *ptr_new = malloc (sizeof (node));
    if (*ptr_new != NULL) {
        (*ptr_new)->next = NULL;
        (*ptr_new)->data = x;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34639004_34639826_5_24
34639004_34640332_5_30
Title: C language reading columnated text file 
----------------------------------------

int main (int argc, char **argv) {
    char line [] = "xxxx  893.14";
    char tmp [100];
    int thatDamnNumber;
    float myfloatykins;
    memcpy (tmp, line + 4, 4);
    sscanf (tmp, "%d", & thatDamnNumber);
    memset (line + 4, ' ', 4);
    sscanf (line, "%*4c%f", & myfloatykins);
    printf ("%d %f\n", thatDamnNumber, myfloatykins);
    return 0;
}
----------------------------------------

int main () {
    char *fmt = "%*4s%2[^0-9]%s";
    char *line = "xxxx  993.14";
    char istr [8] = {0};
    char fstr [16] = {0};
    int ival;
    float fval;
    sscanf (line, fmt, istr, fstr);
    errno = 0;
    if ((ival = (int) strtol (istr, NULL, 10)) == 0 && errno)
        fprintf (stderr, "error: integer conversion failed.\n");
    errno = 0;
    if ((fval = strtof (fstr, NULL)) == 0 && errno)
        fprintf (stderr, "error: integer conversion failed.\n");
    printf ("><![CDATA[>>>%d|%6.2f\n", ival, fval);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34645933_34648575_8_48
34645933_34667267_4_21
Title: Reading string and int for a matriix 
----------------------------------------

int main (int argc, char **argv) {
    char matrix [ROWS] [COLS] = {{0}};
    char string [MAX] = {0};
    FILE *file = argc > 1 ? fopen (argv[1], "r") : stdin;
    size_t lines, columns, idx, maxrow, i;
    lines = columns = idx = maxrow = i = 0;
    if (!file) {
        fprintf (stderr, "error: file open failed '%s'\n", argv [1]);
        return 1;
    }
    while (idx < ROWS && fscanf (file, "%s %zu %zu", string, &lines, &columns) == 3) {
        if (lines >= ROWS) {
            fprintf (stderr, "warning: invalid row index, line '%zu'\n", idx);
            continue;
        }
        if (columns + MAX + 1 >= COLS) {
            fprintf (stderr, "warning: invalid columns + MAX, line '%zu'\n", idx);
            continue;
        }
        memset (matrix [lines], ' ', columns);
        strcpy (& matrix [lines] [columns], string);
        maxrow = lines > maxrow ? lines : maxrow;
        idx++;
    }
    if (file != stdin)
        fclose (file);
    for (i = 0; i < maxrow + 1; i++)
        printf (" %s\n", matrix[i]);
    return 0;
}
----------------------------------------

int main () {
    int lines = 0, columns = 0;
    char string [5];
    char matrix [40] [40] [5];
    FILE *file = NULL;
    if ((file = fopen ("source.txt", "r")) == NULL) {
        perror ("fopen");
        return 1;
    }
    while ((fscanf (file, "%s %d %d", string, &lines, &columns)) != EOF) {
        strcpy (matrix [lines] [columns], string);
        printf ("matrix[%d][%d]:%s\n", lines, columns, matrix [lines] [columns]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34694824_34694892_3_26
34694824_34696842_28_53
Title: How to compare number with another number in an Array? [c] 
----------------------------------------

int main () {
    int my_arr [10];
    int secnum = 0;
    int i = 0;
    for (i = 0; i < ARR_SIZE; i++) {
        printf ("Enter a number: ");
        scanf ("%d", & my_arr [i]);
    }
    printf ("Enter the another number");
    scanf ("%d", & secnum);
    for (i = 0; i < ARR_SIZE; i++) {
        if (my_arr[i] == secnum) {
            printf ("Given number is in array\n");
            break;
        }
    }
}
----------------------------------------

int main () {
    int my_arr [ARR_SIZE];
    int secnum = 0;
    int i = 0;
    int n = 0;
    n = read_numbers (my_arr, ARR_SIZE);
    if (n < ARR_SIZE) {
        printf ("Warning, only %d numebers read out of %d!\n", n, ARR_SIZE);
    }
    printf ("Now, enter the value you want to find.\n");
    if (read_numbers (&secnum, 1) != 1) {
        printf ("Sorry, an error has occurred.\n");
        return -1;
    }
    i = find_number (my_arr, n, secnum);
    if (i < n) {
        printf ("Found!\n");
    }
    else {
        printf ("Not found.\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34694824_34695963_2_24
34694824_34696842_28_53
Title: How to compare number with another number in an Array? [c] 
----------------------------------------

int main () {
    int my_arr [ARR_SIZE];
    int secnum = 0;
    int i = 0;
    for (i = 0; i < ARR_SIZE; i++) {
        printf ("Enter a number: ");
        scanf ("%d", & my_arr [i]);
    }
    printf ("Enter the another number");
    scanf ("%d", & secnum);
    for (i = 0; i < ARR_SIZE; i++) {
        if (my_arr[i] == secnum) {
            printf ("an ex");
        }
    }
}
----------------------------------------

int main () {
    int my_arr [ARR_SIZE];
    int secnum = 0;
    int i = 0;
    int n = 0;
    n = read_numbers (my_arr, ARR_SIZE);
    if (n < ARR_SIZE) {
        printf ("Warning, only %d numebers read out of %d!\n", n, ARR_SIZE);
    }
    printf ("Now, enter the value you want to find.\n");
    if (read_numbers (&secnum, 1) != 1) {
        printf ("Sorry, an error has occurred.\n");
        return -1;
    }
    i = find_number (my_arr, n, secnum);
    if (i < n) {
        printf ("Found!\n");
    }
    else {
        printf ("Not found.\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34700182_34700332_1_18
34700182_34700387_1_14
Title: "If I use a while loop to iterate through the contents of a pointer to an array how do I return back to the first element in the array?" 
----------------------------------------

char *function (char *array) {
    const size_t maxLength = 49;
    char *a = malloc (maxLength +1);
    if (!a) {
        perror ("couldn't allocate memory");
        exit (EXIT_FAILURE);
    }
    size_t i;
    for (i = 0; array[i] && i < maxLength; ++i) {
        a[i] = array[i];
    }
    a[i] = '\0';
    return a;
}
----------------------------------------

char *function (char *array) {
    char *a, *t;
    t = a = malloc (50);
    while (*array) {
        *t = *array;
        ++t;
        ++array;
    }
    *t = '\0';
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34703946_3_14
34703806_34704086_3_26
Title: sprintf leading zero padding in C 
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    int length = 0;
    char buffer [100];
    char paddedbuffer [100] = "000000000000000";
    length = sprintf (buffer, "%x%x", var1, var2);
    char *here = length < 16 ? paddedbuffer + 16 - length : paddedbuffer;
    sprintf (here, "%s", buffer);
    printf ("%s\n", paddedbuffer);
    return 0;
}
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [17];
    char zeros [] = "0000000000000000";
    sprintf (buffer, "%x%x", var1, var2);
    int len = strlen (buffer);
    if (len < 16) {
        zeros[16 - len] = 0x0;
    }
    else {
        zeros[0] = 0x0;
    }
    printf ("%s%s\n", zeros, buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34703946_3_14
34703806_34704480_4_14
Title: sprintf leading zero padding in C 
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    int length = 0;
    char buffer [100];
    char paddedbuffer [100] = "000000000000000";
    length = sprintf (buffer, "%x%x", var1, var2);
    char *here = length < 16 ? paddedbuffer + 16 - length : paddedbuffer;
    sprintf (here, "%s", buffer);
    printf ("%s\n", paddedbuffer);
    return 0;
}
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    int padd = 16 - ceil (log (var1) / log (16)) - ceil (log (var2) / log (16));
    char buffer [100];
    sprintf (buffer, "%0*x%x%x", padd, 0, var1, var2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34703946_3_14
34703806_34704582_6_24
Title: sprintf leading zero padding in C 
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    int length = 0;
    char buffer [100];
    char paddedbuffer [100] = "000000000000000";
    length = sprintf (buffer, "%x%x", var1, var2);
    char *here = length < 16 ? paddedbuffer + 16 - length : paddedbuffer;
    sprintf (here, "%s", buffer);
    printf ("%s\n", paddedbuffer);
    return 0;
}
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char tmp [MAXC];
    char buffer [MAXC];
    char zeros [] = "0000000000000000";
    size_t len = 0;
    sprintf (tmp, "%x%x", var1, var2);
    len = strlen (tmp);
    zeros[PADLN - (len < PADLN ? len : PADLN)] = 0;
    sprintf (buffer, "%s%s", zeros, tmp);
    printf ("\n buffer : '%s'\n\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34703946_3_14
34703806_34710996_3_16
Title: sprintf leading zero padding in C 
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    int length = 0;
    char buffer [100];
    char paddedbuffer [100] = "000000000000000";
    length = sprintf (buffer, "%x%x", var1, var2);
    char *here = length < 16 ? paddedbuffer + 16 - length : paddedbuffer;
    sprintf (here, "%s", buffer);
    printf ("%s\n", paddedbuffer);
    return 0;
}
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [100];
    char bufvar2 [sizeof var2 * CHAR_BIT + 1];
    int len = sprintf (bufvar2, "%x", var2);
    sprintf (buffer, "%0*x%s", TOTAL_MIN_WIDTH - len, var1, bufvar2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34704086_3_26
34703806_34704480_4_14
Title: sprintf leading zero padding in C 
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [17];
    char zeros [] = "0000000000000000";
    sprintf (buffer, "%x%x", var1, var2);
    int len = strlen (buffer);
    if (len < 16) {
        zeros[16 - len] = 0x0;
    }
    else {
        zeros[0] = 0x0;
    }
    printf ("%s%s\n", zeros, buffer);
    return 0;
}
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    int padd = 16 - ceil (log (var1) / log (16)) - ceil (log (var2) / log (16));
    char buffer [100];
    sprintf (buffer, "%0*x%x%x", padd, 0, var1, var2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34704086_3_26
34703806_34704582_6_24
Title: sprintf leading zero padding in C 
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [17];
    char zeros [] = "0000000000000000";
    sprintf (buffer, "%x%x", var1, var2);
    int len = strlen (buffer);
    if (len < 16) {
        zeros[16 - len] = 0x0;
    }
    else {
        zeros[0] = 0x0;
    }
    printf ("%s%s\n", zeros, buffer);
    return 0;
}
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char tmp [MAXC];
    char buffer [MAXC];
    char zeros [] = "0000000000000000";
    size_t len = 0;
    sprintf (tmp, "%x%x", var1, var2);
    len = strlen (tmp);
    zeros[PADLN - (len < PADLN ? len : PADLN)] = 0;
    sprintf (buffer, "%s%s", zeros, tmp);
    printf ("\n buffer : '%s'\n\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34704086_3_26
34703806_34710996_3_16
Title: sprintf leading zero padding in C 
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [17];
    char zeros [] = "0000000000000000";
    sprintf (buffer, "%x%x", var1, var2);
    int len = strlen (buffer);
    if (len < 16) {
        zeros[16 - len] = 0x0;
    }
    else {
        zeros[0] = 0x0;
    }
    printf ("%s%s\n", zeros, buffer);
    return 0;
}
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [100];
    char bufvar2 [sizeof var2 * CHAR_BIT + 1];
    int len = sprintf (bufvar2, "%x", var2);
    sprintf (buffer, "%0*x%s", TOTAL_MIN_WIDTH - len, var1, bufvar2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34704480_4_14
34703806_34704582_6_24
Title: sprintf leading zero padding in C 
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    int padd = 16 - ceil (log (var1) / log (16)) - ceil (log (var2) / log (16));
    char buffer [100];
    sprintf (buffer, "%0*x%x%x", padd, 0, var1, var2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char tmp [MAXC];
    char buffer [MAXC];
    char zeros [] = "0000000000000000";
    size_t len = 0;
    sprintf (tmp, "%x%x", var1, var2);
    len = strlen (tmp);
    zeros[PADLN - (len < PADLN ? len : PADLN)] = 0;
    sprintf (buffer, "%s%s", zeros, tmp);
    printf ("\n buffer : '%s'\n\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34704480_4_14
34703806_34710996_3_16
Title: sprintf leading zero padding in C 
----------------------------------------

int main () {
    int var1 = 1048575;
    int var2 = 1048575;
    int padd = 16 - ceil (log (var1) / log (16)) - ceil (log (var2) / log (16));
    char buffer [100];
    sprintf (buffer, "%0*x%x%x", padd, 0, var1, var2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [100];
    char bufvar2 [sizeof var2 * CHAR_BIT + 1];
    int len = sprintf (bufvar2, "%x", var2);
    sprintf (buffer, "%0*x%s", TOTAL_MIN_WIDTH - len, var1, bufvar2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34703806_34704582_6_24
34703806_34710996_3_16
Title: sprintf leading zero padding in C 
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char tmp [MAXC];
    char buffer [MAXC];
    char zeros [] = "0000000000000000";
    size_t len = 0;
    sprintf (tmp, "%x%x", var1, var2);
    len = strlen (tmp);
    zeros[PADLN - (len < PADLN ? len : PADLN)] = 0;
    sprintf (buffer, "%s%s", zeros, tmp);
    printf ("\n buffer : '%s'\n\n", buffer);
    return 0;
}
----------------------------------------

int main (void) {
    int var1 = 1048575;
    int var2 = 1048575;
    char buffer [100];
    char bufvar2 [sizeof var2 * CHAR_BIT + 1];
    int len = sprintf (bufvar2, "%x", var2);
    sprintf (buffer, "%0*x%s", TOTAL_MIN_WIDTH - len, var1, bufvar2);
    printf ("%s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34706547_34706824_1_30
34706547_34706829_1_28
Title: Deleting elements in linked list until i find word 
----------------------------------------

void delete_from_list (shop **first, const char *word, int *check) {
    shop *tmp = *first;
    while (tmp != NULL && strcmp (tmp->name, word) != 0) {
        tmp = tmp->next;
    }
    if (tmp != NULL) {
        printf ("FOUND!");
    }
    else {
        *check = 1;
    }
    if (check == 0) {
        tmp = tmp->next;
        while (*first != tmp) {
            shop *current = *first;
            *first = (*first)->next;
            free (current);
        }
        if (*first)
            (*first)->prev = NULL;
    }
}
----------------------------------------

void delete_from_list (shop **first, char word [MAX], int *check) {
    shop *found = *first;
    while (found != NULL && strcmp (found->name, word) != 0)
        found = found->next;
    if (found != NULL) {
        printf ("FOUND!");
        shop *temp = *first;
        while (temp != found) {
            shop *next = temp->next;
            free (temp);
            temp = next;
        }
        *first = found;
        (*first)->prev = NULL;
    }
    else
        *check = 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3471076_3471326_4_32
3471076_3472297_5_24
Title: Checking for palindrome string in c 
----------------------------------------

int main (int argc, char **argv) {
    int i;
    char *str = argv[1];
    int flag;
    int len = strlen (str);
    for (i = 0; i < (len + 1) / 2; i++) {
        printf ("DEBUG: Comparing %c %c\n", str [i], str [len - (i + 1)]);
        if (str[i] == str[len - (i + 1)]) {
            flag = 0;
        }
        else {
            flag = 1;
            break;
        }
    }
    if (flag == 0)
        printf ("Palindrome\n");
    else
        printf ("Not a palindrome\n");
}
----------------------------------------

int main (int argc, char *argv []) {
    assert (argc != 1);
    char *text = argv[1];
    int len = strlen (text);
    int is_palindrome = 1;
    int i, j;
    for (i = 0, j = len - 1; i < len / 2; i++, j--) {
        if (text[i] != text[j]) {
            is_palindrome = 0;
            break;
        }
    }
    printf ("%s a palindrome.\n", is_palindrome ? "is" : "isn't");
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3471076_3471326_4_32
3471076_3473265_1_11
Title: Checking for palindrome string in c 
----------------------------------------

int main (int argc, char **argv) {
    int i;
    char *str = argv[1];
    int flag;
    int len = strlen (str);
    for (i = 0; i < (len + 1) / 2; i++) {
        printf ("DEBUG: Comparing %c %c\n", str [i], str [len - (i + 1)]);
        if (str[i] == str[len - (i + 1)]) {
            flag = 0;
        }
        else {
            flag = 1;
            break;
        }
    }
    if (flag == 0)
        printf ("Palindrome\n");
    else
        printf ("Not a palindrome\n");
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        printf ("usage: %s <string>\n", argv [0]);
        return 1;
    }
    if (is_palindrome (argv[1])) {
        printf ("Palindrome\n");
    }
    else {
        printf ("Not a Palindrome\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3471076_3471326_4_32
3471076_3482483_4_19
Title: Checking for palindrome string in c 
----------------------------------------

int main (int argc, char **argv) {
    int i;
    char *str = argv[1];
    int flag;
    int len = strlen (str);
    for (i = 0; i < (len + 1) / 2; i++) {
        printf ("DEBUG: Comparing %c %c\n", str [i], str [len - (i + 1)]);
        if (str[i] == str[len - (i + 1)]) {
            flag = 0;
        }
        else {
            flag = 1;
            break;
        }
    }
    if (flag == 0)
        printf ("Palindrome\n");
    else
        printf ("Not a palindrome\n");
}
----------------------------------------

int main (int argc, char *argv []) {
    char *s2;
    if (argc != 2)
        return (1);
    if ((s2 = strdup (argv[1])) == NULL)
        return (2);
    printf ("\"%s\" %s a palindrome.\n", argv [1], strcmp (argv [1], strrev (s2)) ? "is not" : "is");
    free (s2);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3471076_3472297_5_24
3471076_3473265_1_11
Title: Checking for palindrome string in c 
----------------------------------------

int main (int argc, char *argv []) {
    assert (argc != 1);
    char *text = argv[1];
    int len = strlen (text);
    int is_palindrome = 1;
    int i, j;
    for (i = 0, j = len - 1; i < len / 2; i++, j--) {
        if (text[i] != text[j]) {
            is_palindrome = 0;
            break;
        }
    }
    printf ("%s a palindrome.\n", is_palindrome ? "is" : "isn't");
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        printf ("usage: %s <string>\n", argv [0]);
        return 1;
    }
    if (is_palindrome (argv[1])) {
        printf ("Palindrome\n");
    }
    else {
        printf ("Not a Palindrome\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3471076_3472297_5_24
3471076_3482483_4_19
Title: Checking for palindrome string in c 
----------------------------------------

int main (int argc, char *argv []) {
    assert (argc != 1);
    char *text = argv[1];
    int len = strlen (text);
    int is_palindrome = 1;
    int i, j;
    for (i = 0, j = len - 1; i < len / 2; i++, j--) {
        if (text[i] != text[j]) {
            is_palindrome = 0;
            break;
        }
    }
    printf ("%s a palindrome.\n", is_palindrome ? "is" : "isn't");
    return (0);
}
----------------------------------------

int main (int argc, char *argv []) {
    char *s2;
    if (argc != 2)
        return (1);
    if ((s2 = strdup (argv[1])) == NULL)
        return (2);
    printf ("\"%s\" %s a palindrome.\n", argv [1], strcmp (argv [1], strrev (s2)) ? "is not" : "is");
    free (s2);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3471076_3473265_1_11
3471076_3482483_4_19
Title: Checking for palindrome string in c 
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 2) {
        printf ("usage: %s <string>\n", argv [0]);
        return 1;
    }
    if (is_palindrome (argv[1])) {
        printf ("Palindrome\n");
    }
    else {
        printf ("Not a Palindrome\n");
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    char *s2;
    if (argc != 2)
        return (1);
    if ((s2 = strdup (argv[1])) == NULL)
        return (2);
    printf ("\"%s\" %s a palindrome.\n", argv [1], strcmp (argv [1], strrev (s2)) ? "is not" : "is");
    free (s2);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34714120_34714361_6_24
34714120_34714452_7_29
Title: Check recursively if array is sorted up on the even indexes 
----------------------------------------

int main () {
    int sizeOfArr = 0, i = 0, *arr, num = 0, checkIfSorted = -1;
    printf ("Enter the size of the array : \n");
    scanf ("%d", & sizeOfArr);
    printf ("Enter %d numbers to the array \n: ", sizeOfArr);
    arr = (int *) malloc (sizeOfArr * sizeof (int));
    for (i = 0; i < sizeOfArr; i++) {
        scanf ("%d", & num);
        *(arr + i) = num;
        printf ("%d ", arr [i]);
    }
    checkIfSorted = SortedUpDown (arr, sizeOfArr);
    printf ("\ndone %d\n", checkIfSorted);
    return 0;
}
----------------------------------------

int main (void) {
    int sizeOfArr = 0, i = 0, *arr, num = 0, checkIfSorted = -1;
    printf ("Enter the size of the array : \n");
    scanf ("%d", & sizeOfArr);
    printf ("Enter %d numbers to the array \n: ", sizeOfArr);
    arr = (int *) malloc (sizeOfArr * sizeof (int));
    for (i = 0; i < sizeOfArr; i++) {
        scanf ("%d", arr + i);
        printf ("%d ", arr [i]);
    }
    puts ("");
    checkIfSorted = SortedUpDown (arr, sizeOfArr);
    if (checkIfSorted)
        puts ("Sorted");
    else
        puts ("Not Sorted");
    free (arr);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34746283_34746389_4_20
34746283_34746510_3_15
Title: Does C's strtok function support regex? 
----------------------------------------

int main (void) {
    char example [] = "exa$mple@str#ing";
    char *token;
    char *pointer;
    pointer = example;
    token = strtok (pointer, "@#$");
    if (token == NULL)
        return -1;
    do {
        fprintf (stdout, "%s\n", token);
        pointer = NULL;
    }
    while ((token = strtok (NULL, "@#$")) != NULL);
}
----------------------------------------

int main (void) {
    const char *s = "01/555555 01/555-5555";
    int a, b, c, d, e;
    int ret = sscanf (s, "%02d/%d %02d/%d-%d", &a, &b, &c, &d, &e);
    if (ret != 5) {
        printf ("The string is in bad format.\n");
    }
    else {
        printf ("%02d/%d %02d/%d-%d\n", a, b, c, d, e);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34756010_34756254_8_36
34756010_34757225_11_49
Title: "C Isolating ""only strings"" in a text file" 
----------------------------------------

int main (void) {
    FILE *file_ptr;
    int character;
    int prev_char_was_letter = 0;
    int word_count = 0;
    file_ptr = fopen ("my_file.txt", "r");
    if (!file_ptr) {
        fprintf (stderr, "can't open file\n");
        return 1;
    }
    character = fgetc (file_ptr);
    while (character != EOF) {
        if (is_alpha (character) && !prev_char_was_letter) {
            word_count++;
            prev_char_was_letter = 1;
        }
        else if (!is_alpha (character)) {
            prev_char_was_letter = 0;
        }
        character = fgetc (file_ptr);
    }
    printf ("%d\n", word_count);
    fclose (file_ptr);
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp;
    char line [MAX_LINE];
    char *s;
    int wcnt = 0;
    if (argc == 1) {
        fp = stdin;
    }
    else {
        fp = fopen (argv[1], "r");
    }
    if (fp == 0) {
        return -1;
    }
    while (!feof (fp)) {
        s = fgets (line, MAX_LINE, fp);
        if (s) {
            s = strtok (line, delim);
            while (s != NULL) {
                if (isaword (s)) {
                    wcnt++;
                }
                s = strtok (NULL, delim);
            }
        }
    }
    fclose (fp);
    printf ("word count = %d", wcnt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34763295_34763521_4_25
34763295_34763894_21_45
Title: Allocate memory for two dimensional array of integers but it should be continuous 
----------------------------------------

int main (void) {
    size_t m = 3;
    size_t n = 4;
    int (*a) [n] = malloc (m *n * sizeof (int));
    for (size_t i = 0; i < m; i++) {
        for (size_t j = 0; j < n; j++)
            a[i][j] = i * n + j;
    }
    for (size_t i = 0; i < m; i++) {
        for (size_t j = 0; j < n; j++)
            printf ("%2d ", a[i][j]);
        printf ("\n");
    }
    free (a);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int *array;
    int i, j;
    array = malloc (N *M * sizeof (int));
    for (i = 0; i < N; i++)
        for (j = 0; j < M; j++)
            array[i * N + j] = i + j;
    for (i = 0; i < N; i++)
        for (j = 0; j < M; j++)
            printf ("array[%d][%d] = %d\n", i, j, array[i * N + j]);
    printf ("Using the macro:\n");
    for (i = 0; i < N; i++)
        for (j = 0; j < M; j++)
            printf ("array[%d][%d] = %d\n", i, j, array[GET (i, j)]);
    free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34776201_34776571_1_48
34776201_34776943_15_44
Title: Why won't this work ? Dynamic memory beginner program 
----------------------------------------

int main (void) {
    FILE *in = fopen ("keimeno.txt", "r");
    if (in == NULL) {
        perror ("open failed");
        exit (1);
    }
    int fullbufflen = 0, i;
    char buffer [100];
    fgets (buffer, 100, in);
    int bufflen = strlen (buffer);
    char *text;
    text = calloc (bufflen +1, sizeof (char));
    if (text == NULL) {
        perror ("calloc failed");
        exit (1);
    }
    strcat (text, buffer);
    fullbufflen = bufflen;
    while (fgets (buffer, 100, in) != NULL) {
        bufflen = strlen (buffer);
        text = realloc (text, bufflen +fullbufflen + 1);
        if (text == NULL) {
            perror ("realloc failed");
            exit (1);
        }
        strcat (text, buffer);
        fullbufflen = bufflen + fullbufflen;
    }
    fclose (in);
    for (i = 0; i < fullbufflen; i++) {
        printf ("%c\n", text [i]);
    }
    free (text);
}
----------------------------------------

int main (void) {
    char *filename = "in.txt";
    size_t buffSize = 0;
    size_t buffUsed = 0;
    ssize_t bytesRead = 0;
    char *buffer = NULL;
    char *tmp;
    int fd;
    fd = open (filename, O_RDONLY, 0);
    if (fd == ERR)
        die ("open");
    do {
        buffUsed += (size_t) bytesRead;
        if (buffUsed == buffSize) {
            tmp = realloc (buffer, buffSize += GROW);
            if (tmp == NULL)
                die ("realloc");
            buffer = tmp;
        }
        bytesRead = read (fd, buffer +buffUsed, buffSize -buffUsed);
        if (bytesRead == ERR)
            die ("read");
    }
    while (bytesRead > 0);
    if (write (STDOUT_FILENO, buffer, buffUsed) == ERR)
        die ("write");
    free (buffer);
    if (close (fd) == ERR)
        die ("close");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3478636_3478741_5_16
3478636_3478961_31_46
Title: Extract a substring in C 
----------------------------------------

int main () {
    char str [] = "mail:username@example.com";
    char *pch;
    pch = strtok (str, " :@");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, " :@");
    }
    return 0;
}
----------------------------------------

int main () {
    const char *test = "mail:baltasarq@gmail.com";
    char *userName = extractUserName (test);
    if (userName != NULL) {
        printf ("User name: '%s'\n", userName);
        free (userName);
    }
    else {
        fprintf (stderr, "Error: invalid e.mail address\n");
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3478743_3478808_5_27
3478743_3480017_5_22
Title: Trying to write a code for finding the machine epsilon 
----------------------------------------

int main (void) {
    TYPE max = 1.0, min = 0.0, test;
    int i;
    for (i = 0; i < N; i++) {
        TYPE one_plus_test;
        test = (max + min) / ((TYPE) 2.0);
        one_plus_test = ((TYPE) 1.0) + test;
        if (one_plus_test == ((TYPE) 1.0)) {
            min = test;
        }
        else {
            max = test;
        }
    }
    printf ("The epsilon machine is %.50lf\n", max);
    return 0;
}
----------------------------------------

int main (void) {
    printf ("%30s: %g\n", "FLT_EPSILON", FLT_EPSILON);
    printf ("%30s: %g\n", "FLT_MIN", FLT_MIN);
    printf ("%30s: %g\n", "nextafterf(0.0, 1.0)", nextafterf (0.0, 1.0));
    printf ("%30s: %g\n", "nextafterf(1.0, 2.0)-1", (nextafterf (1.0, 2.0) - 1.0f));
    puts ("");
    printf ("%30s: %g\n", "DBL_EPSILON", DBL_EPSILON);
    printf ("%30s: %g\n", "DBL_MIN", DBL_MIN);
    printf ("%30s: %g\n", "nextafter(0.0, 1.0)", nextafter (0.0, 1.0));
    printf ("%30s: %g\n", "nextafter(1.0, 2.0)-1", (nextafter (1.0, 2.0) - 1.0));
    puts ("");
    printf ("%30s: %Lg\n", "LDBL_EPSILON", LDBL_EPSILON);
    printf ("%30s: %Lg\n", "LDBL_MIN", LDBL_MIN);
    printf ("%30s: %Lg\n", "nextafterl(0.0, 1.0)", nextafterl (0.0, 1.0));
    printf ("%30s: %Lg\n", "nextafterl(1.0, 2.0)-1", (nextafterl (1.0, 2.0) - 1.0));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34800668_34800890_14_50
34800668_34800994_15_58
Title: Trying to store values from file into array in C 
----------------------------------------

int getFileData (FILE *fp, Song *SongList, int *globalCounter) {
    int newCount = *globalCounter;
    char fileOut [1024];
    while (newCount < 1024 && fgets (fileOut, 1024, fp) != NULL) {
        char *p = fileOut;
        char *fileTitle;
        char *fileArtist;
        char *fileYear;
        fileTitle = p;
        if ((p = strchr (p, ',')) == NULL)
            continue;
        *p++ = '\0';
        p += strspn (p, " \t");
        fileArtist = p;
        if ((p = strchr (p, ',')) == NULL)
            continue;
        *p++ = '\0';
        p += strspn (p, " \t");
        fileYear = p;
        p += strcspn (p, ",\n");
        *p = '\0';
        SongList[newCount].title = strdup (fileTitle);
        SongList[newCount].artist = strdup (fileArtist);
        SongList[newCount].year = strdup (fileYear);
        printf ("%i\n", newCount);
        printf ("TITLE: %s\n", SongList [newCount].title);
        printf ("ARTIST: %s\n", SongList [newCount].artist);
        printf ("YEAR: %s\n\n", SongList [newCount].year);
        newCount++;
    }
    return *globalCounter = newCount;
}
----------------------------------------

int getFileData (FILE *fp, Song *SongList, int globalCounter) {
    int newCount = globalCounter;
    char fileOut [1024];
    int lineno = 0;
    while (!feof (fp)) {
        if (fgets (fileOut, 1024, fp) != NULL) {
            char *tokenizer;
            tokenizer = strtok (fileOut, ",");
            int counter = 0;
            SongList[newCount].title = strdup (tokenizer);
            counter++;
            while (tokenizer != NULL) {
                tokenizer = strtok (NULL, ",");
                if (counter == 1)
                    SongList[newCount].artist = strdup (tokenizer);
                if (counter == 2)
                    SongList[newCount].year = strdup (tokenizer);
                counter++;
            }
            printf ("%i\n", newCount);
            printf ("TITLE: %s\n", SongList [newCount].title);
            printf ("ARTIST: %s\n", SongList [newCount].artist);
            printf ("YEAR: %s\n", SongList [newCount].year);
            newCount++;
        }
    }
    return newCount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34800668_34800890_52_67
34800668_34800994_60_70
Title: Trying to store values from file into array in C 
----------------------------------------

int main () {
    FILE *fin;
    if ((fin = fopen ("test.txt", "r")) != NULL) {
        getFileData (fin, SongList, & globalCounter);
        fclose (fin);
    }
    for (int counter = 0; counter < globalCounter; counter++) {
        printf ("%s, %s, %s\n", SongList [counter].title, SongList [counter].artist, SongList [counter].year);
        counter++;
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fin = fopen ("test.txt", "rt");
    int newCount = getFileData (fin, SongList, globalCounter);
    int counter = 0;
    while (counter < newCount) {
        printf ("%s, %s, %s", SongList [counter].title, SongList [counter].artist, SongList [counter].year);
        counter++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3482129_3482165_1_20
3482129_3482959_1_14
Title: How to input into an array 
----------------------------------------

int main (int c, char **args) {
    int i;
    char input [100];
    bzero (input, 100);
    for (i = 1; i < c; i++) {
        if (strlen (input) + strlen (args[i]) + 2 <= 100) {
            strcat (input, args [i]);
            strcat (input, " ");
        }
    }
    puts (input);
    return 0;
}
----------------------------------------

int main (int c, char **args) {
    int i;
    int limit = 100;
    char *input = calloc (limit, sizeof (limit));
    memset (input, 0, limit * sizeof (char));
    for (i = 0; i < c; i++) {
        if (strlen (input) + strlen (args [i]) + 2 > limit) {limit = strlen (input) + strlen (args [i]) + 2;
        input = realloc (input, limit);
    }
    strcat (input, args [i]);
    strcat (input, " ");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34828895_34829016_21_39
34828895_34829052_15_41
Title: Call a function that receives an array using a pointer 
----------------------------------------

int main () {
    int workers;
    printf ("How many workers are there?\n");
    scanf ("%d", & workers);
    printf ("What are their preferences?\n");
    int **pref = malloc (workers * sizeof (int *));
    if (pref == NULL)
        return -1;
    fillPreferences (pref, workers);
    printf ("%d %d %d", pref [0] [0], pref [1] [0], pref [2] [0]);
    return 0;
}
----------------------------------------

int main () {
    int workers;
    printf ("How many workers are there?\n");
    scanf ("%d", & workers);
    printf ("What are their preferences?\n");
    int **pref = malloc (workers * sizeof (int *));
    if (pref == NULL)
        return -1;
    for (int i = 0; i < workers; i++) {
        pref[i] = malloc (workers * sizeof (int));
        if (pref [i] == NULL) {for (int j = 0;
        j < i;
        j ++) free (pref [j]);
        free (pref);
        return -1;
    }
    fillPreferences (pref, workers);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34829030_34829450_10_43
34829030_52036099_5_40
Title: "C program to print trapezoid pattern of numbersstars & hypens" 
----------------------------------------

void pattern (int n) {
    int i, j, k = 1, l = 2, h;
    int rest = n * (n + 1) + 1, rn = 0;
    for (i = n; i > 0; i--) {
        if (i < n) {
            for (h = 1; h <= l; h++)
                printf ("-");
            l = l + 2;
        }
        for (j = 1; j <= i; j++) {
            printf ("%d", k);
            k++;
            printf ("*");
        }
        rest = rest - i;
        rn = rest;
        for (int p = 1; p <= i; p++) {
            printf ("%d", rn);
            rn++;
            if (p != i)
                printf ("*");
        }
        printf ("\n");
    }
}
----------------------------------------

int pattern (int t) {
    int i, n, j, max = 1, k, max1, no = 1, l, no2, s = 1;
    printf ("enter the no of rows");
    scanf ("%d", & n);
    max1 = n;
    no2 = (n * n) + 1;
    for (i = 1; i <= n; i++) {
        for (j = 2; j <= max; j++) {
            printf ("-");
        }
        max = max + 2;
        for (k = 1; k <= max1; k++) {
            printf ("%d*", no);
            no++;
        }
        for (l = 1; l <= max1 - 1; l++) {
            printf ("%d*", no2);
            no2++;
        }
        printf ("%d", no2);
        max1--;
        no2 = no2 - 2 * (n - s);
        s++;
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34830245_34839202_3_46
34830245_34839677_3_51
Title: Using Loops in MPI 
----------------------------------------

int main (int argc, char *argv []) {
    int p_id, n_procs;
    MPI_Init (& argc, & argv);
    MPI_Status status;
    MPI_Comm_rank (MPI_COMM_WORLD, & p_id);
    MPI_Comm_size (MPI_COMM_WORLD, & n_procs);
    if (p_id == 0) {
        ARRAY = createRandomArray (N_DATA);
        while (hasBreakPoints (ARRAY, N_DATA)) {
            for (i = 1;
            i < n_procs;
            i ++) for (i = 1;
            i < n_procs;
            i ++) for (i = 1;
            i < n_procs;
            i ++)
        }
    }
    else {
        int *LOCAL;
        while (hasBreakPoints (LOCAL, N_DATA) {}
    }
    MPI_Finalize ();
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int p_id, n_procs, flag = 1;
    MPI_Init (& argc, & argv);
    MPI_Status status;
    MPI_Comm_rank (MPI_COMM_WORLD, & p_id);
    MPI_Comm_size (MPI_COMM_WORLD, & n_procs);
    const int COMPUTE = 1, STOP = 2;
    if (p_id == 0) {
        ARRAY = createRandomArray (N_DATA);
        while (hasBreakPoints (ARRAY, N_DATA)) {
            for (i = 1; i < n_procs; i++)
                MPI_Send (......, COMPUTE,...)
            for (i = 1;
            i < n_procs;
            i ++)
        }
        for (i = 1; i < n_procs; i++)
            MPI_Send (...., STOP,...)
    }
    else {
        while (flag == 1) {
            MPI_Recv (..., MPI_ANY_TAG,..., & status);
            if (status.MPI_TAG == COMPUTE) {
            }
            else
                flag = 0;
        }
    }
    MPI_Finalize ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34844915_34845084_4_18
34844915_34845144_4_23
Title: Using scanf to fill out a multidimensional array (C language) 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    int **sArray;
    sArray = (int **) malloc (n * sizeof (int *));
    int i;
    for (i = 0; i < n; i++) {
        sArray[i] = (int *) malloc (2 * sizeof (int));
        scanf ("%d %d", & sArray [i] [1], & sArray [i] [2]);
    }
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int n;
    int **sArray = malloc (2 * sizeof (int *));
    scanf ("%d", & n);
    sArray[0] = (int *) calloc (n, sizeof (int));
    sArray[1] = (int *) calloc (n, sizeof (int));
    int i;
    for (i = 0; i < n; i++) {
        scanf ("%d %d", & sArray [0] [i], & sArray [1] [i]);
    }
    free (sArray [0]);
    free (sArray [1]);
    free (sArray);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845328_34845746_1_19
34845328_34847819_5_25
Title: How do I change fill this string through a pointer which points to another pointer which then points to this string 
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp;
    fp = fopen ("testFile.txt", "r");
    if (fp == NULL) {
        printf ("Error while opening the file.\n");
    }
    char string [75];
    char *ptr1 = string;
    char *ptr2 = ptr1;
    readLine (fp, ptr2);
    printf ("%s", * * pbuff);
    fclose (fp);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char string [75] = {0};
    FILE *fp = NULL;
    char *fn = argc > 1 ? argv[1] : "testFile.txt";
    char *ptr1, *ptr2;
    ptr1 = ptr2 = string;
    if (!(fp = fopen (fn, "r"))) {
        fprintf (stderr, "error: file open failed '%s'.\n", fn);
        return 1;
    }
    if (readLine (fp, ptr2))
        printf ("%s\n", ptr1);
    else
        fprintf (stderr, "error: readLine failure.\n");
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845331_34845399_39_52
34845331_34845407_16_25
Title: How does one determine for what input this function will return true? 
----------------------------------------

int main (void) {
    char sol [3];
    revers_xor (sol);
    printf ("%c\n", sol [0]);
    printf ("%c\n", sol [1]);
    printf ("%c\n", sol [2]);
    int val = func (sol);
    printf ("%d\n", val);
    return 0;
}
----------------------------------------

int main () {
    for (int i = 0; i < 200; i++) {
        for (int j = 0; j < 200; j++) {
            for (int k = 0; k < 200; k++) {
                char s [3] = {i, j, k};
                if (!func (s))
                    printf ("%c%c%c\n", i, j, k);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845331_34845399_39_52
34845331_34845429_30_43
Title: How does one determine for what input this function will return true? 
----------------------------------------

int main (void) {
    char sol [3];
    revers_xor (sol);
    printf ("%c\n", sol [0]);
    printf ("%c\n", sol [1]);
    printf ("%c\n", sol [2]);
    int val = func (sol);
    printf ("%d\n", val);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char sol [3];
    int val;
    solv (sol);
    printf ("solv: %2.2X %2.2X %2.2X\n", sol [0], sol [1], sol [2]);
    val = func (sol);
    printf ("func: %2.2X %2.2X %2.2X %d\n", sol [0], sol [1], sol [2], val);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845331_34845399_4_13
34845331_34845407_3_14
Title: How does one determine for what input this function will return true? 
----------------------------------------

int func (char str [3]) {
    char check_string [3] = {0x63, 0x69, 0x71};
    int i = 0;
    int j = 42;
    for (i = 0; i < 3; i++, j += 3) {
        str[i] ^= j;
    }
    return strncmp (str, check_string, 3);
}
----------------------------------------

bool func (char str [3]) {
    char check_string [3] = {0x63, 0x69, 0x71};
    int i = 0;
    int j = 42;
    for (i = 0; i < 3; i++, j += 3) {
        str[i] ^= j;
    }
    return strncmp (str, check_string, 3);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845331_34845399_4_13
34845331_34845429_4_15
Title: How does one determine for what input this function will return true? 
----------------------------------------

int func (char str [3]) {
    char check_string [3] = {0x63, 0x69, 0x71};
    int i = 0;
    int j = 42;
    for (i = 0; i < 3; i++, j += 3) {
        str[i] ^= j;
    }
    return strncmp (str, check_string, 3);
}
----------------------------------------

int func (char str [3]) {
    char check_string [3] = {0x63, 0x69, 0x71};
    int i = 0;
    int j = 42;
    for (i = 0; i < 3; i++, j += 3) {
        str[i] ^= j;
    }
    return strncmp (str, check_string, 3);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845331_34845407_16_25
34845331_34845429_30_43
Title: How does one determine for what input this function will return true? 
----------------------------------------

int main () {
    for (int i = 0; i < 200; i++) {
        for (int j = 0; j < 200; j++) {
            for (int k = 0; k < 200; k++) {
                char s [3] = {i, j, k};
                if (!func (s))
                    printf ("%c%c%c\n", i, j, k);
            }
        }
    }
}
----------------------------------------

int main (int argc, char **argv) {
    char sol [3];
    int val;
    solv (sol);
    printf ("solv: %2.2X %2.2X %2.2X\n", sol [0], sol [1], sol [2]);
    val = func (sol);
    printf ("func: %2.2X %2.2X %2.2X %d\n", sol [0], sol [1], sol [2], val);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845331_34845407_3_14
34845331_34845429_4_15
Title: How does one determine for what input this function will return true? 
----------------------------------------

bool func (char str [3]) {
    char check_string [3] = {0x63, 0x69, 0x71};
    int i = 0;
    int j = 42;
    for (i = 0; i < 3; i++, j += 3) {
        str[i] ^= j;
    }
    return strncmp (str, check_string, 3);
}
----------------------------------------

int func (char str [3]) {
    char check_string [3] = {0x63, 0x69, 0x71};
    int i = 0;
    int j = 42;
    for (i = 0; i < 3; i++, j += 3) {
        str[i] ^= j;
    }
    return strncmp (str, check_string, 3);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34845417_34845438_1_13
34845417_34845500_1_10
Title: Char *strcat Implementation leading to Segmentation Fault 
----------------------------------------

char *strcat (char *dest, const char *src) {
    char *start_pos = dest;
    while (*dest != '\0')
        dest++;
    while (*src != '\0')
        *dest++ = *src++;
    *dest = '\0';
    return start_pos;
}
----------------------------------------

char *strcat (char *dest, const char *src) {
    char *saved = dest;
    while (*dest != '\0') {
        dest++;
    }
    while ((*dest++ = *src++) != '\0') {
        continue;
    }
    return saved;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34860500_34861227_4_41
34860500_34866304_4_51
Title: C Avoid cursor positioning on key press 
----------------------------------------

int main (void) {
    struct termios t;
    tcgetattr (0, & t);
    t.c_lflag &= ~(ECHO | ICANON);
    tcsetattr (0, TCSANOW, & t);
    while (1) {
        char ch = getchar ();
        if (ch == '\x1b') {
            do {
                ch = getchar ();
            }
            while (!isalpha (ch));
            printf ("Got escape sequence: ");
            switch (ch) {
            case 'A' :
                printf ("Cursor up\n");
                break;
            case 'B' :
                printf ("Cursor down\n");
                break;
            case 'D' :
                printf ("Cursor left\n");
                break;
            case 'C' :
                printf ("Cursor right\n");
                break;
            default :
                printf ("%c\n", ch);
            }
        }
        else {
            printf ("Got %c\n", ch);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct termios t, save;
    int last;
    tcgetattr (0, & t);
    save = t;
    t.c_lflag &= ~(ECHO | ICANON);
    tcsetattr (0, TCSANOW, & t);
    while (1) {
        int ch = getchar ();
        if (ch == '\033') {
            if (last == ch)
                break;
            do {
                last = ch;
                ch = getchar ();
            }
            while (ispunct (ch) || isdigit (ch));
            if (isalpha (ch)) {
                printf ("Got escape sequence: ");
                switch (ch) {
                case 'A' :
                    printf ("Cursor up\n");
                    break;
                case 'B' :
                    printf ("Cursor down\n");
                    break;
                case 'D' :
                    printf ("Cursor left\n");
                    break;
                case 'C' :
                    printf ("Cursor right\n");
                    break;
                default :
                    printf ("%c\n", ch);
                    break;
                    break;
                }
            }
        }
        else if (ch > 0) {
            printf ("Got %c\n", ch);
        }
        last = ch;
    }
    tcsetattr (0, TCSANOW, & save);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34868792_34868830_4_15
34868792_34869983_8_31
Title: Is there a way to find the line number of the current line being read from a file? 
----------------------------------------

int main (void) {
    FILE *p;
    int a;
    char str [10];
    p = popen ("sed -n '$=' loop.c", "r");
    fgets (str, 10, p);
    a = atoi (str);
    printf ("%d", a);
}
----------------------------------------

int main (int argc, char **argv) {
    char *filebuf = NULL;
    long fplen = 0, nlines = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'\n", argv [1]);
        return 1;
    }
    if (!read_file_into_buf (&filebuf, &fplen, fp))
        return 1;
    if (fp != stdin)
        fclose (fp);
    nlines = buf_lines (filebuf, fplen);
    printf ("\n total : %ld  lines read (from '%s')\n\n", nlines, argc > 1 ? argv [1] : "stdin");
    free (filebuf);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34880865_34880929_3_17
34880865_34881762_5_14
Title: Scanf in c seems to require double input? 
----------------------------------------

int main () {
    char str1 [20], str2 [30];
    printf ("Enter String 1: ");
    scanf ("%s", & str1);
    printf ("Enter your String 2: ");
    scanf ("%s", & str2);
    printf ("String 1: %s\n", str1);
    printf ("String 2:%s", str2);
    return (0);
}
----------------------------------------

int main () {
    float argument = 8.86;
    printf ("%f\n", argument);
    argument = 7.75;
    printf ("%f\n", argument);
    scanf ("%f", & argument);
    printf ("%f\n", argument);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34884386_34884643_20_41
34884386_34885015_1_14
Title: Linked list insertion function issue in C 
----------------------------------------

int main (void) {
    struct entry n1, n2, n3, *n4, n5;
    struct entry list_head, *list_pointer = list_head.next;
    list_head.next = &n1;
    list_pointer = &n1;
    n1.value = 100;
    n1.next = &n2;
    n2.value = 200;
    n2.next = &n3;
    n3.value = 300;
    n4 = insertentry (&n5, &list_head);
    n3.next = (struct entry *) 0;
    while (list_pointer != (struct entry *) 0) {
        printf ("%i\n", list_pointer -> value);
        list_pointer = list_pointer->next;
    }
    printf ("%i\n", n5.value);
    return 0;
}
----------------------------------------

int main (void) {
    struct entry n1, n2, n3, *n4, n5;
    struct entry list_head, *list_pointer = list_head.next;
    list_pointer.value = 0;
    list_head.next = &n1;
    n1.value = 100;
    n1.next = &n2;
    n2.value = 200;
    n2.next = &n3;
    n3.value = 300;
    ...
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34884386_34885015_1_14
34884386_34885141_19_42
Title: Linked list insertion function issue in C 
----------------------------------------

int main (void) {
    struct entry n1, n2, n3, *n4, n5;
    struct entry list_head, *list_pointer = list_head.next;
    list_pointer.value = 0;
    list_head.next = &n1;
    n1.value = 100;
    n1.next = &n2;
    n2.value = 200;
    n2.next = &n3;
    n3.value = 300;
    ...
}
----------------------------------------

int main (void) {
    struct entry n1, n2, n3, n4, n5, list_head;
    struct entry *list_pointer;
    n1.value = 100;
    list_head.next = &n1;
    n4 = insertentry (&n5, &list_head);
    list_pointer = &n4;
    n1.next = &n2;
    n2.value = 200;
    n2.next = &n3;
    n3.value = 300;
    n3.next = (struct entry *) 0;
    while (list_pointer != (struct entry *) 0) {
        printf ("%i\n", list_pointer -> value);
        list_pointer = list_pointer->next;
    }
    printf ("%i\n", n5.value);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34893053_34893344_15_36
34893053_34893570_3_48
Title: Extract file data to 4 seperate tables 
----------------------------------------

int main (void) {
    FILE *entree;
    char nom [30] [25 + 1] = {{0}}, poste [30];
    float nbHeure [30], taux [30];
    int i = 0;
    if (entree = fopen ("employes.dat", "r")) {
        while (i < 30 && 4 == fscanf (entree, " %25c %c %f %f", nom[i], &poste[i], &nbHeure[i], &taux[i])) {
            ++i;
        }
        fclose (entree);
        int n = i;
        for (i = 0; i < n; ++i)
            printf ("%s, %c, %.1f, %.2f\n", trimEnd (nom[i]), poste[i], nbHeure[i], taux[i]);
    }
    else
        printf ("Impossible d'ouvrir le fichier!");
    return 0;
}
----------------------------------------

int main () {
    FILE *entree;
    char nom [750], poste [30];
    int i = 0;
    int j = 0;
    int k = 0;
    float nbHeure [30], taux [30];
    if (entree = fopen ("employes.dat", "r")) {
        fscanf (entree, "%25c %1c %4f %5f", & nom [j], & poste [i], & nbHeure [i], & taux [i]);
        while (!feof (entree)) {
            j = j + 25;
            i = i + 1;
            fscanf (entree, "%25c %1c %4f %5f", & nom [j], & poste [i], & nbHeure [i], & taux [i]);
            if (!feof (entree)) {
            }
            else {
                j = j - 25;
                i = i - 1;
            }
        }
        fclose (entree);
    }
    else
        printf ("Impossible d'ouvrir le fichier!");
    printf ("%s \n \n", nom);
    printf ("%s \n \n", poste);
    for (k = 0; k < i; k++) {
        printf ("%f ", nbHeure [k]);
    }
    printf ("\n");
    for (k = 0; k < i; k++) {
        printf ("%f ", taux [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34929718_34930701_14_50
34929718_34930892_5_34
Title: Get number of integers per file line 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fp;
    char filename [100];
    char line [MAX_LINE_LEN];
    char *p;
    int i;
    int array [MAX_NUM] = {0};
    int count = 0;
    printf ("Enter the file name: \n");
    if (scanf ("%s", filename) != 1)
        fatal ("Bad filename entry");
    if ((fp = fopen (filename, "r")) == NULL)
        fatal ("Unable to open the file");
    while ((p = fgets (line, MAX_LINE_LEN, fp)) != NULL) {
        if (count >= MAX_NUM)
            fatal ("Broke the array");
        if (line[0] != '#') {
            p = strtok (line, " ");
            while (p != NULL) {
                if (isdigit (*p))
                    array[count]++;
                p = strtok (NULL, " ");
            }
        }
        count++;
    }
    for (i = 0; i < count; i++) {
        if (array[i]) {
            printf ("Integers: %d\n", array [i]);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char line [MAX_LINE_LEN], *p;
    int i, array [MAX_NUM] = {0}, count = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 0;
    }
    while (count < MAX_NUM && (p = fgets (line, MAX_LINE_LEN, fp))) {
        if (*p == '\n' || *p == '#') {
            count++;
            continue;
        }
        while (*p) {
            while (*p && (*p < '0' || '9' < *p))
                p++;
            if ('0' <= *p && *p <= '9')
                array[count]++;
            while (*p && ('0' <= *p && *p <= '9'))
                p++;
        }
        count++;
    }
    if (fp != stdin)
        fclose (fp);
    printf ("\nThe lines from '%s' contained the following integers:\n\n", argc > 1 ? argv [1] : "stdin");
    for (i = 0; i < count; i++)
        printf ("  line[%3d] : %d\n", i, array[i]);
    putchar ('\n');
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3495092_3495169_1_12
3495092_3495410_33_54
Title: Read from file or stdin 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *input;
    if (argc != 2) {
        usage ();
        return 1;
    }
    if (!strcmp (argv[1], "-")) {
        input = stdin;
    }
    else {input = fopen (argv [1], "rb");
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *input;
    if (argc > 1) {
        if (!strcmp (argv[1], "-")) {
            input = stdin;
        }
        else {
            input = fopen (argv[1], "r");
            if (NULL == input) {
                fprintf (stderr, "Unable to open '%s': %s\n", argv [1], strerror (errno));
                exit (EXIT_FAILURE);
            }
        }
    }
    else {
        input = stdin;
    }
    printf ("Size of file: %ld\n", getSizeOfInput (input));
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34950948_34951888_3_28
34950948_34955401_39_55
Title: "C best function to get split array on elements less equals and greater than some value" 
----------------------------------------

int main (void) {
    int array [] = {1, 4, 6, 7, 13, 1, 7, 3, 5, 11};
    int x = 7;
    int len = sizeof array / sizeof array[0];
    int i, j, m, n, tmp;
    for (i = 0; i < len - 1; i++) {
        m = array[i] < x ? -1 : array[i] == x ? 0 : 1;
        for (j = i + 1; j < len; j++) {
            n = array[j] < x ? -1 : array[j] == x ? 0 : 1;
            if (m > n) {
                tmp = array[i];
                array[i] = array[j];
                array[j] = tmp;
                m = n;
            }
        }
    }
    for (i = 0; i < len; i++)
        printf ("%d ", array[i]);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    int list [] = {1, 4, 6, 7, 13, 1, 7, 3, 5, 11};
    int list2 [] = {1, 4, 7, 6, 7, 13, 1, 7, 3, 5, 11};
    order (list, ARRAY_SIZE (list), 7);
    for (i = 0; i < ARRAY_SIZE (list); i++)
        printf ("%d ", list[i]);
    printf ("\n");
    order (list2, ARRAY_SIZE (list2), 7);
    for (i = 0; i < ARRAY_SIZE (list2); i++)
        printf ("%d ", list2[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34957726_34957905_15_61
34957726_34963985_5_45
Title: Seg. fault read line-by-line 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fp;
    char filename [100];
    char line [MAX_LINE_LEN];
    char *p;
    int array [MAX_NUM];
    int index, count, max;
    printf ("Please enter the file name: \n");
    if (scanf ("%99s", filename) != 1) {
        fatal ("Error in entering file.");
    }
    if ((fp = fopen (filename, "r")) == NULL) {
        fatal ("Unable to open the file.");
    }
    while ((p = fgets (line, MAX_LINE_LEN, fp)) != NULL) {
        p += strspn (p, " \t\n");
        if (*p == '#' || *p == '\0') {
            continue;
        }
        for (count = 0; *p != '\0';) {
            if (isdigit ((unsigned char) *p)) {
                array[count++] = strtol (p, &p, 10);
                printf ("%d\n", array [count]);
            }
            else {
                p += strcspn (p, " \t\n");
            }
            p += strspn (p, " \t\n");
        }
        index = get_max_occurrence_index (array, count);
        max = get_number_of_occurrences (array, count, array[index]);
        printf ("The element that occurs most often is %d\n", array [index]);
        printf ("And it has occurred %d times\n", max);
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main (void) {
    int array [sizea] = {1, 3, 6, 8, 3, 6, 7, 4, 6, 9, 0, 3, 5, 12, 65, 3, 76, 5, 3, 54, 1, 3, 6, 89, 3, 6, 7, 4, 6, 9, 0, 4, 5, 12, 65, 3, 76, 5, 3, 54, 1, 9, 6, 8, 3, 45, 7, 4, 6, 9, 0, 89, 5, 12, 65, 3, 76, 5, 3, 54, 6, 3, 6, 8, 3, 6, 7, 4, 6, 9, 0, 23, 5, 12, 65, 3, 76, 5, 3, 54, 1, 3, 6, 90, 3, 6, 7, 4, 6, 9, 0, 5, 5, 12, 65, 3, 76, 5, 3, 54};
    int number;
    int count = 1;
    int highest = 1;
    int highestCnt = 1;
    int end = sizea - 1;
    int j;
    int i;
    for (j = 0; j <= end; j++) {
        number = array[j];
        count = 1;
        for (i = j + 1; i <= end; i++) {
            while (array[i] == number && i <= end) {
                count++;
                array[i] = array[end];
                end--;
            }
        }
        if (count > highestCnt) {
            highest = number;
            highestCnt = count;
        }
    }
    printf ("number: %i, count: %i", highest, highestCnt);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34969717_34969790_2_13
34969717_34969942_17_30
Title: Checking if a Linked list is Empty in C 
----------------------------------------

void addToList (List *node) {
    if (node == NULL)
        return;
    List *temp = malloc (sizeof (List));
    temp->value = 4;
    while (node->next != NULL)
        node = node->next;
    node->next = temp;
    temp->next = NULL;
}
----------------------------------------

void addToList (List **node, int value) {
    while (*node)
        node = &(*node)->next;
    List *temp = malloc (sizeof (List));
    if (temp != NULL) {
        temp->value = value;
        temp->next = NULL;
        *node = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34981305_34986261_6_19
34981305_35000811_4_25
Title: Comparing 2 strings and getting the error expected expression 
----------------------------------------

int main (void) {
    printf ("Name: ");
    char name [20];
    gets (name);
    printf ("\n");
    int length = strlen (name);
    for (int l = 0; l < length; l++) {
        if (name[l] == ' ')
            printf ("found blank space");
    }
}
----------------------------------------

int main () {
    char str [] = "Bufford T Justice";
    char *token;
    char space = ' ';
    int count = 0;
    token = strtok (str, &space);
    while (token != NULL) {
        printf ("%s\n", token);
        token = strtok (NULL, &space);
        if (token) {
            count++;
        }
    }
    printf ("Number of spaces = %d\n", count);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34982375_34982562_4_41
34982375_34982700_3_14
Title: Calculating total number of adjacent integers 
----------------------------------------

int main (int argc, char **argv) {
    FILE *file;
    char line [100];
    file = fopen ("numbers.txt", "r");
    if (file == NULL)
        return -1;
    while (fgets (line, sizeof (line), file) != NULL) {
        char *start;
        int array [100];
        int count;
        int value;
        int step;
        count = 0;
        start = line;
        while (sscanf (start, "%d%n", array +count, &step) == 1) {
            start += step;
            count += 1;
        }
        fprintf (stderr, "%d ", array [0]);
        value = 1;
        for (int i = 1; i < count; ++i) {
            value += (array[i] - array[i - 1]) ? 1 : 0;
            fprintf (stderr, "%d ", array [i]);
        }
        fprintf (stderr, " -- %d\n", value);
    }
    fclose (file);
    return 0;
}
----------------------------------------

int main () {
    int array [] = {1, 3, 5, 7, 9};
    int count = 1;
    int i = 0;
    for (i = 1; i < (sizeof (array) / sizeof (array[0])); i++) {
        if (array[i] != array[i - 1]) {
            count++;
        }
    }
    printf ("%d", count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34982583_34982637_1_12
34982583_34982849_1_20
Title: C function to compare last elements of a string to another using pointers 
----------------------------------------

int string_ends_with (const char *str1, const char *str2) {
    const char *p1 = str1;
    const char *p2 = str2;
    while (*p1)
        ++p1;
    while (*p2)
        ++p2;
    while (p1 != str1 && p2 != str2 && *p1 == *p2)
        --p1, --p2;
    return p2 == str2 && *p1 == *p2;
}
----------------------------------------

int string_ends_with (char *p1, char *p2) {
    char *q1;
    char *q2;
    if (!p1 || !p2)
        return something;
    (p1 + (strlen (p1) - 1));
    (p2 + (strlen (p2) - 1));
    while (q1 >= p1 && q2 >= p2) {
        if (*q2 < *q1)
            return -1;
        else if (*q2 > *q1)
            return 1;
        q1--;
        q2--;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34983956_34984140_35_52
34983956_34984153_5_26
Title: for loop with switch statements 
----------------------------------------

int main () {
    int ch;
    printf ("Operator? ");
    ch = getchar ();
    printf ("ch = '%c'\n", ch);
    if (op_at (ch) == NULL) {
        printf ("invalid operator\n");
    }
    else {
        const int a = 10;
        const int b = 20;
        printf ("f   =   %d\n", op_at (ch) (a, b));
    }
}
----------------------------------------

int main () {
    int f, a = 10, b = 20;
    char ch;
    int finished = 0;
    do {
        ch = getchar ();
        printf ("ch  =   %c\n", ch);
        switch (ch) {
        case '+' :
            f = a + b;
            printf ("f   =   %d\n", f);
            break;
        case '-' :
            f = a - b;
            printf ("f   =   %d\n", f);
            break;
        case '*' :
            f = a * b;
            printf ("f   =   %d\n", f);
            break;
        case '/' :
            f = a / b;
            printf ("f   =   %d\n", f);
            break;
        case 'q' :
            finished = 1;
            break;
        default :
            printf ("invalid operator\n");
            break;
        }
    }
    while (!finished);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34985539_34986159_15_27
34985539_34986198_15_34
Title: sigaction and ignoring a signal with c in linux environment 
----------------------------------------

int main (int argc, char *argv []) {
    action.sa_handler = myhandle;
    sigaction (11, & action, & old_action);
    printf ("Before segfault\n");
    int *a = NULL;
    int b = *a;
    printf ("I am still alive\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    struct sigaction action;
    action.sa_sigaction = &myhandle;
    action.sa_flags = SA_SIGINFO;
    sigaction (11, & action, NULL);
    printf ("Before segfault\n");
    int *a = NULL;
    int b;
    b = *a;
    printf ("I am still alive\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3499821_10221226_18_55
3499821_3500193_2_18
Title: Program to print the binary equivalent of a number without using format specifiers 
----------------------------------------

int main (int argc, char *argv []) {
    char help [] = "><![CDATA[>> Please provide an integer number as argument!!!";
    char id [] = "d2b  (c) Andrey Vlassov     Apr 18, 2012 8:15PM PST";
    if (argc < 2) {
        printf ("%s\n", help);
        exit (0);
    }
    printf ("\n%s\n\n", id);
    int n = atoi (argv[1]);
    int i, bites, bits, mask;
    printf ("Number is %d\n", n);
    printf ("size: %d bites\n", bites = sizeof (n));
    printf ("dec: %d\n", n);
    printf ("hex: %#x\n", n);
    printf ("oct: %#o\n", n);
    printf ("bin: b");
    bits = bites * 8 - 1;
    mask = 0x01 << (bits - 1);
    for (i = 0; i < bits; i++) {
        printf ("%d", (n & mask ? 1 : 0));
        mask >>= 1;
    }
    printf ("\n\n");
    exit (0);
}
----------------------------------------

int main () {
    int n = 25;
    int k = 32;
    printf ("binary equivalent\n");
    for (int i = 0; i < 32; i++) {
        if ((n & 1) != 0)
            printf ("1");
        else
            printf ("0");
        n >>= 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3499821_10221226_18_55
3499821_38581612_5_22
Title: Program to print the binary equivalent of a number without using format specifiers 
----------------------------------------

int main (int argc, char *argv []) {
    char help [] = "><![CDATA[>> Please provide an integer number as argument!!!";
    char id [] = "d2b  (c) Andrey Vlassov     Apr 18, 2012 8:15PM PST";
    if (argc < 2) {
        printf ("%s\n", help);
        exit (0);
    }
    printf ("\n%s\n\n", id);
    int n = atoi (argv[1]);
    int i, bites, bits, mask;
    printf ("Number is %d\n", n);
    printf ("size: %d bites\n", bites = sizeof (n));
    printf ("dec: %d\n", n);
    printf ("hex: %#x\n", n);
    printf ("oct: %#o\n", n);
    printf ("bin: b");
    bits = bites * 8 - 1;
    mask = 0x01 << (bits - 1);
    for (i = 0; i < bits; i++) {
        printf ("%d", (n & mask ? 1 : 0));
        mask >>= 1;
    }
    printf ("\n\n");
    exit (0);
}
----------------------------------------

int main () {
    stack < int > st;
    int n = 25, k = 32;
    while (k != 0) {
        if ((n & 0x01) != 0)
            st.push (1);
        else
            st.push (0);
        k--;
        n = n >> 1;
    }
    while (!st.empty ()) {
        cout << st.top ();
        st.pop ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3499821_3500193_2_18
3499821_38581612_5_22
Title: Program to print the binary equivalent of a number without using format specifiers 
----------------------------------------

int main () {
    int n = 25;
    int k = 32;
    printf ("binary equivalent\n");
    for (int i = 0; i < 32; i++) {
        if ((n & 1) != 0)
            printf ("1");
        else
            printf ("0");
        n >>= 1;
    }
}
----------------------------------------

int main () {
    stack < int > st;
    int n = 25, k = 32;
    while (k != 0) {
        if ((n & 0x01) != 0)
            st.push (1);
        else
            st.push (0);
        k--;
        n = n >> 1;
    }
    while (!st.empty ()) {
        cout << st.top ();
        st.pop ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35002316_35002781_4_51
35002316_35002798_4_36
Title: How to check if particular characters appeared in same order? 
----------------------------------------

int main () {
    char str [20] = "PO-ELK=SAEER:SWE";
    int iExit = 0;
    int i = 0;
    char c;
    eState state = init;
    while (!iExit) {
        c = str[i];
        switch (state) {
        case init :
            if (c == '-')
                state = s1;
            else if ((c == '=') || (c == ':'))
                state = end;
            break;
        case s1 :
            if (c == '=')
                state = s2;
            else if (c == ':' || c == '-')
                state = end;
            break;
        case s2 :
            if (c == ':')
                state = s3;
            else if (c == '=' || c == '-')
                state = end;
            break;
        case s3 :
            printf ("Succes \n");
            iExit = 1;
            break;
        case end :
            printf ("Error \n"), iExit = 1;
            break;
        default :
            break;
        }
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char *s = "PO-ELK=SAEER:SWE";
    const char *t = "-=:";
    size_t n = 0;
    if (s[n = strcspn (s +n, t)] == t[0] && s[n += 1 + strcspn (s +n + 1, t)] == t[1] && s[n += 1 + strcspn (s +n + 1, t)] == t[2]) {
        printf ("\"%s\" is a valid string\n", s);
    }
    else {
        printf ("\"%s\" is not a valid string\n", s);
    }
    s = "PO-ELK:SAEER=SWE";
    n = 0;
    if (s[n = strcspn (s +n, t)] == t[0] && s[n += 1 + strcspn (s +n + 1, t)] == t[1] && s[n += 1 + strcspn (s +n + 1, t)] == t[2]) {
        printf ("\"%s\" is a valid string\n", s);
    }
    else {
        printf ("\"%s\" is not a valid string\n", s);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35024170_35024396_4_22
35024170_35025210_1_22
Title: Appending a char to a char* 
----------------------------------------

int main (void) {
    size_t b_len;
    char buf [256];
    char ch = '!';
    strcpy (buf, "Hello world");
    b_len = strlen (buf);
    snprintf (buf + b_len, sizeof buf - b_len, "%c", ch);
    printf ("%s", buf);
    char *p = malloc (256);
    strcpy (p, "Hello world");
    size_t len = strlen (p);
    snprintf (p + len, 256 - len, "%c", ch);
    printf ("%s", p);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char string [100];
    char lines [3] [14] = {"First line...", "Another line.", "One more line"};
    size_t i;
    i = 0;
    for (size_t j = 0; ((j < sizeof (lines) / sizeof (lines[0])) && (i < sizeof (string) - 1)); ++j) {
        for (size_t k = 0; ((k < 13) && (i < sizeof (string) - 1)); ++k)
            string[i++] = lines[j][k];
    }
    string[i] = '\0';
    puts (string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35033826_35036400_8_28
35033826_35063026_4_25
Title: Separating a string into smaller strings 
----------------------------------------

int main (void) {
    char buf [100], str1 [100], str2 [100];
    int x;
    const char *p = buf;
    fgets (buf, sizeof (buf), stdin);
    while (*p) {
        if (isalpha ((unsigned char) *p)) {
            extract (& p, str1, isalpha);
            puts (str1);
        }
        else if (isdigit ((unsigned char) *p)) {
            extract (& p, str2, isdigit);
            x = atoi (str2);
            printf ("%s, x=%d\n", str2, x);
        }
        else {
            ++p;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char string [] = "abcd1234";
    char digitStr [10];
    char charStr [10];
    int i, j = 0, k = 0;
    for (i = 0; string[i]; i++) {
        if (isdigit (string[i])) {
            charStr[j++] = string[i];
        }
        else {
            digitStr[k++] = string[i];
        }
    }
    charStr[j] = '\0';
    digitStr[k] = '\0';
    printf ("%s %s\n", digitStr, charStr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3503688_3503733_11_31
3503688_3503751_1_16
Title: "Array of pointers to struct only SIGSEGVs while debugging" 
----------------------------------------

int main (int argc, char **argv) {
    enemy **enemies;
    enemies = (enemy **) malloc (sizeof (enemy *) * 16);
    memset (enemies, 0, sizeof (enemy *) * 16);
    enemies[0] = (enemy *) malloc (sizeof (enemy));
    memset (enemies [0], 0, sizeof (enemy));
    enemies[0]->type = 23;
    printf ("type: %i  x: %i  y: %i\n\n", enemies [0] -> type, enemies [0] -> x, enemies [0] -> y);
    enemies[0]->x = 10;
    enemies[0]->y = 25;
    enemies[0]->type = 7;
    printf ("type: %i  x: %i  y: %i\n\n", enemies [0] -> type, enemies [0] -> x, enemies [0] -> y);
    free (enemies [0]);
    free (enemies);
    return 0;
}
----------------------------------------

int main () {
    enemy **enemies;
    int i;
    enemies = (enemy **) malloc (sizeof (enemy *) * 16);
    for (i = 0; i < 16; ++i) {
        enemies[i] = (enemy *) malloc (sizeof (enemy));
    }
    enemies[0]->type = 23;
    printf ("%i", enemies [0] -> type);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35040926_35042448_15_42
35040926_35045326_12_44
Title: Assigning 2-dimensional array to struct object 
----------------------------------------

int main () {
    const char items [2] [3] = {{' ', 'x', ' '}, {'x', 'x', 'x'}};
    Matrix A;
    int i, j;
    A.m = LEN (items);
    A.n = LEN (items[0]);
    NEW_ARRAY (A.table, A.m);
    for (i = 0; i < A.m; i++) {
        NEW_ARRAY (A.table [i], A.n);
        for (j = 0; j < A.n; j++) {
            A.table[i][j] = items[i][j];
        }
    }
    for (i = 0; i < A.m; i++) {
        for (j = 0; j < A.n; j++) {
            printf ("%c ", A.table [i] [j]);
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    struct Some_Struct yy;
    struct Some_Struct zz [10];
    yy.x = 1;
    yy.y = 2;
    yy.sth1_table[0][0] = '\0';
    yy.sth1_table[0][1] = 'a';
    yy.sth1_table[0][2] = '\0';
    yy.sth1_table[1][0] = 'b';
    yy.sth1_table[1][1] = 'c';
    yy.sth1_table[1][2] = 'd';
    for (i = 0; i < 10; i++) {
        zz[i].sth1_table[0][0] = '\0';
        zz[i].sth1_table[0][1] = 'a';
        zz[i].sth1_table[0][2] = '\0';
        zz[i].sth1_table[1][0] = 'b';
        zz[i].sth1_table[1][1] = 'c';
        zz[i].sth1_table[1][2] = 'd';
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35051733_35053546_363_399
35051733_35073709_24_58
Title: How do I find and replace a position in a text file with element in an array in C? 
----------------------------------------

int main (int argc, char **argv) {
    FILE *ftmpl;
    FILE *fcust;
    FILE *fout;
    int fldused;
    char *cp;
    char buf [5000];
    fcust = xfopen ("data.txt", "r");
    ftmpl = xfopen ("template.txt", "r");
    fout = xfopen ("/dev/null", "w");
    fldused = check_tmpl (fout, ftmpl);
    check_cust (fout, fcust, fldused);
    fout = xfclose (fout);
    rewind (fcust);
    while (1) {
        cp = fgets (buf, sizeof (buf), fcust);
        if (cp == NULL)
            break;
        cp = strchr (buf, '\n');
        if (cp != NULL)
            *cp = 0;
        docust (stdout, ftmpl, buf);
    }
    fcust = xfclose (fcust);
    ftmpl = xfclose (ftmpl);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char buf [MAXC] = {0};
    sp s [MAXS];
    size_t i, n = 0;
    FILE *ifp = argc > 1 ? fopen (argv[1], "r") : stdin;
    FILE *tfp = fopen (argc > 2 ? argv[2] : "../dat/template.txt", "r");
    FILE *ofp = argc > 3 ? fopen (argv[3], "w") : stdout;
    if (!ifp || !tfp || !ofp) {
        fprintf (stderr, "error: file open failed.\n");
        return 1;
    }
    while (fgets (buf, MAXC, ifp)) {
        char *p;
        size_t idx = 0;
        for (p = strtok (buf, "|"); p; p = strtok (NULL, "|\n")) {
            fillsp (& s [n], p, & idx);
        }
        if (++n == MAXS) {
            fprintf (stderr, "MAXS structs filled.\n");
            break;
        }
    }
    for (i = 0; i < n; i++)
        welcome (&s[i], tfp);
    if (ifp != stdin)
        fclose (ifp);
    if (ofp != stdout)
        fclose (ofp);
    fclose (tfp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35094582_35094735_5_19
35094582_35094801_2_20
Title: Simpe if and else in C programming 
----------------------------------------

int main (void) {
    printf ("What interval is G in the G chord triad \nEnter 1 2 or 3\n");
    int note;
    if (scanf ("%i", &note) == 1) {
        if (note == 1) {
            printf ("Yes G is %ist note in the G-chord\n", G);
        }
        else {
            printf ("no, wrong");
        }
    }
    else {
        printf ("Error, scanf\n");
    }
    return 0;
}
----------------------------------------

int main () {
    while (true) {
        printf ("What interval is G in the G chord triad \nEnter 1, 2, 3, or 0 to exit\n");
        Gchord note;
        scanf ("%i", & note);
        if (note == EXIT)
            break;
        if (note == G)
            printf ("Yes G is %ist note in the G-chord\n", G);
        else
            printf ("no, wrong\n");
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35094582_35094735_5_19
35094582_35094804_3_15
Title: Simpe if and else in C programming 
----------------------------------------

int main (void) {
    printf ("What interval is G in the G chord triad \nEnter 1 2 or 3\n");
    int note;
    if (scanf ("%i", &note) == 1) {
        if (note == 1) {
            printf ("Yes G is %ist note in the G-chord\n", G);
        }
        else {
            printf ("no, wrong");
        }
    }
    else {
        printf ("Error, scanf\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int note = 0;
    printf ("What interval is G in the G chord triad \nEnter 1 2 or 3\n");
    scanf ("%i", & note);
    if (note == 1) {
        printf ("Yes G is %ist note in the G-chord\n", G);
    }
    else {
        printf ("no, wrong");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35094582_35094801_2_20
35094582_35094804_3_15
Title: Simpe if and else in C programming 
----------------------------------------

int main () {
    while (true) {
        printf ("What interval is G in the G chord triad \nEnter 1, 2, 3, or 0 to exit\n");
        Gchord note;
        scanf ("%i", & note);
        if (note == EXIT)
            break;
        if (note == G)
            printf ("Yes G is %ist note in the G-chord\n", G);
        else
            printf ("no, wrong\n");
    }
    return (0);
}
----------------------------------------

int main () {
    int note = 0;
    printf ("What interval is G in the G chord triad \nEnter 1 2 or 3\n");
    scanf ("%i", & note);
    if (note == 1) {
        printf ("Yes G is %ist note in the G-chord\n", G);
    }
    else {
        printf ("no, wrong");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35097822_35097883_4_25
35097822_35098077_6_26
Title: How to split and recombine an unsigned long into signed shorts? 
----------------------------------------

int main () {
    uint32_t val1;
    int16_t val2a, val2b;
    uint32_t val3;
    val1 = 0x11223344;
    printf ("val1=%08x\n", val1);
    val2a = val1 >> 16;
    val2b = val1 & 0xFFFF;
    printf ("val2a=%04x\n", val2a);
    printf ("val2b=%04x\n", val2b);
    val3 = (uint32_t) val2a << 16;
    val3 |= (uint32_t) val2b;
    printf ("val3=%08x\n", val3);
    return 0;
}
----------------------------------------

int main (void) {
    uint64_t a = 0xfacedeadbeefcafe, b = 0;
    uint16_t s [4] = {0};
    uint32_t i = 0, n = 0;
    printf ("\n a : 0x%16" PRIx64 "\n\n", a);
    for (i = 0; i < sizeof a; i += 2, n++)
        printf (" s[%" PRIu32 "] : 0x%04" PRIx16 "\n", n, (s[n] = (a >> (i * CHAR_BIT))));
    for (n = i = 0; i < sizeof b; i += 2, n++)
        b |= (uint64_t) s[n] << i * CHAR_BIT;
    printf ("\n b : 0x%16" PRIx64 "\n\n", b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35099480_35099657_3_15
35099480_35099694_1_11
Title: invalid type argument of unary '*' (have 'int') lowest element in array 
----------------------------------------

int *lowest (int *j, int n) {
    int i, temp;
    int *tempAdd;
    temp = *j;
    tempAdd = j;
    for (i = 0; i < n; i++) {
        if (temp > *(j + i)) {
            temp = *(j + i);
            tempAdd = j + i;
        }
    }
    return tempAdd;
}
----------------------------------------

int *lowest (int *j, int n) {
    int i, temp = *j;
    int *tempAdd = NULL;
    for (i = 0; i < n; i++) {
        if (temp > *(j + i))
            temp = *(j + i);
        tempAdd = j + i;
    }
    return tempAdd;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35099495_35099566_4_30
35099495_35099645_1_26
Title: char search in a string 
----------------------------------------

int main (void) {
    int ctr = 0, c = 0, wordLength;
    char ch, theWord [99];
    printf ("Enter a Word: ");
    scanf ("%s", theWord);
    printf ("Enter the letter you want to find: ");
    scanf ("%c", & ch);
    wordLength = strlen (theWord);
    while (theWord[ctr] != '\0') {
        if (theWord[ctr] == ch) {
            printf ("the letter %c is found in the word\n", ch);
            c++;
        }
        ctr++;
    }
    if (c == 0) {
        printf ("the letter %c is NOT found in the word\n", ch);
    }
}
----------------------------------------

int main (void) {
    int ctr = 0;
    int wordLength;
    char theWord [99], ch;
    printf ("Enter a Word: ");
    scanf ("%s", theWord);
    printf ("Enter the letter you want to find: ");
    scanf ("%c", & ch);
    while (theWord[ctr] != '\0') {
        if (theWord[ctr] == ch) {
            print ("Character found at position %1", ctr);
            break;
        }
        ctr++;
    }
    if (theWord[ctr] == '\0') {
        printf ("Character not found");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35099495_35099566_4_30
35099495_35099852_2_21
Title: char search in a string 
----------------------------------------

int main (void) {
    int ctr = 0, c = 0, wordLength;
    char ch, theWord [99];
    printf ("Enter a Word: ");
    scanf ("%s", theWord);
    printf ("Enter the letter you want to find: ");
    scanf ("%c", & ch);
    wordLength = strlen (theWord);
    while (theWord[ctr] != '\0') {
        if (theWord[ctr] == ch) {
            printf ("the letter %c is found in the word\n", ch);
            c++;
        }
        ctr++;
    }
    if (c == 0) {
        printf ("the letter %c is NOT found in the word\n", ch);
    }
}
----------------------------------------

int main (void) {
    int ctr;
    char theWord [99], ch;
    ctr = 0;
    printf ("Enter a Word: ");
    scanf ("%s", theWord);
    printf ("Enter the letter you want to find: ");
    scanf (" %c", & ch);
    for (int i = 0; theWord[i]; i++) {
        if (theWord[i] == ch)
            ctr++;
    }
    if (ctr != 0)
        printf ("word is found\n");
    else
        printf ("word is not found\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35099495_35099645_1_26
35099495_35099852_2_21
Title: char search in a string 
----------------------------------------

int main (void) {
    int ctr = 0;
    int wordLength;
    char theWord [99], ch;
    printf ("Enter a Word: ");
    scanf ("%s", theWord);
    printf ("Enter the letter you want to find: ");
    scanf ("%c", & ch);
    while (theWord[ctr] != '\0') {
        if (theWord[ctr] == ch) {
            print ("Character found at position %1", ctr);
            break;
        }
        ctr++;
    }
    if (theWord[ctr] == '\0') {
        printf ("Character not found");
    }
}
----------------------------------------

int main (void) {
    int ctr;
    char theWord [99], ch;
    ctr = 0;
    printf ("Enter a Word: ");
    scanf ("%s", theWord);
    printf ("Enter the letter you want to find: ");
    scanf (" %c", & ch);
    for (int i = 0; theWord[i]; i++) {
        if (theWord[i] == ch)
            ctr++;
    }
    if (ctr != 0)
        printf ("word is found\n");
    else
        printf ("word is not found\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35101251_35101379_1_13
35101251_35101422_1_17
Title: segmentation fault while allocating dynamically 2D arrays 
----------------------------------------

int call_alloc (float **ptr, int d1, int d2) {
    int i, j;
    ptr = alloctab (d1, d2);
    for (i = 0; i < d1; i++)
        for (j = 0; j < d2; j++) {
            ptr[i][j] = (float) i + (float) j;
            printf ("ptr[%d][%d]=%f\n", i, j, ptr [i] [j]);
        }
    return 0;
}
----------------------------------------

int call_alloc (float ***ptr, int d1, int d2) {
    int i, j;
    *ptr = alloctab (d1, d2);
    for (i = 0; i < d1; i++) {
        for (j = 0; j < d2; j++) {
            (*ptr)[i][j] = (float) i + (float) j;
            printf ("ptr[%d][%d]=%f\n", i, j, (* ptr) [i] [j]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35103745_35103774_3_18
35103745_49719628_3_16
Title: Read a string as an input using scanf 
----------------------------------------

int main () {
    char str [25], car;
    printf ("Enter a character\n");
    car = getchar ();
    flush ();
    printf ("Enter a sentence\n");
    fgets (str, 25, stdin);
    printf ("\nThe sentence is %s, and the character is %c\n", str, car);
    return 0;
}
----------------------------------------

int main () {
    char car, str [25];
    printf ("Enter a character: ");
    car = getchar ();
    printf ("Enter a sentence: ");
    scanf ("%s", str);
    printf ("\nThe sentence is %s, and the character is %c\n", str, car);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35108094_35108441_5_26
35108094_35108536_1_21
Title: C - error checking input for character implementation 
----------------------------------------

int main (void) {
    char *ln = NULL;
    size_t lnsz = 0;
    double lf;
    printf ("Enter a number [between 1.0 - 10.0]: number = ");
    while (getline (&ln, &lnsz, stdin) > 0) {
        char c = 0;
        if (sscanf (ln, "%lf%c", &lf, &c) != 2 || c != '\n')
            printf ("Error: must be a number\n");
        else if (lf < 1)
            printf ("Error: number must be >= 1.000000\n");
        else if (lf > 10)
            printf ("Error: number must be <= 10.000000\n");
        else
            break;
        printf ("number = ");
    }
    printf ("lf = %f\n", lf);
    free (ln);
    return 0;
}
----------------------------------------

int main () {
    printf ("\nEnter a number [between 1.0 - 10.0]: ");
    double lf;
    for (;;) {
        printf ("number = ");
        if (scanf ("%lf", &lf) != 1) {
            printf ("Error: enter a number\n");
            int ch;
            while ((ch = getchar ()) != EOF && ch != '\n')
                ;
            continue;
        }
        else if (lf < 1) {
            printf ("Error: number must be >= 1.000000\n");
        }
        else if (lf > 10) {
            printf ("Error: number must be <= 10.000000\n");
        }
        else {break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35109242_35109324_3_31
35109242_35109325_1_29
Title: How to let scanf() keep reading integer inputs unless a character is input? 
----------------------------------------

int main (void) {
    int status, num, x, y, z, exit_code = 0;
    while ((status = scanf ("%d", &num)) >= 0) {
        if (status == 0) {
            fprintf (stderr, "Error: input is not a number\n");
            return 1;
        }
        if (num <= 0) {
            fprintf (stderr, "Error: input value %d is not positive\n", num);
            exit_code = 1;
            continue;
        }
        x = 0;
        y = 1;
        z = x + y;
        while (z < num) {
            x = y;
            y = z;
            z = x + y;
        }
        if (z == num) {
            printf ("%d is fib\n", num);
        }
        else {
            printf ("%d is not fib\n", num);
        }
    }
    return exit_code;
}
----------------------------------------

int main () {
    int num, x, y, z;
    while (scanf ("%d", &num) > 0) {
        if (num <= 0) {
            fprintf (stderr, "Error: input value %d is not positive\n", num);
        }
        else {
            x = 0;
            y = 1;
            z = x + y;
            while (z < num) {
                x = y;
                y = z;
                z = x + y;
            }
            if (z == num) {
                printf ("%d is fib\n", num);
            }
            else {
                printf ("%d is not fib\n", num);
            }
        }
    }
    if (feof (stdin))
        return 0;
    fprintf (stderr, "Error: input value is not a number\n");
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35109980_35110063_37_50
35109980_35110325_31_45
Title: Converting decimal array to binary string array with calloc 
----------------------------------------

void binstringconvert (unsigned long int *decimals, char **binarystrings) {
    int c, k;
    for (c = 31; c >= 0; c--) {
        k = decimals[0] >> (31 - c);
        if (k & 1)
            binarystrings[0][c] = '1';
        else
            binarystrings[0][c] = '0';
    }
    binarystrings[0][32] = '\0';
}
----------------------------------------

void binstringconvert (unsigned *decimals, char (*binarystrings) [DWRD + 1], int n) {
    int c, i, k;
    for (i = 0; i < n; i++) {
        for (c = 31; c >= 0; c--) {
            k = decimals[i] >> c;
            if (k & 1)
                binarystrings[i][31 - c] = '1';
            else
                binarystrings[i][31 - c] = '0';
        }
        binarystrings[i][DWRD] = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35109980_35110063_8_35
35109980_35110325_9_29
Title: Converting decimal array to binary string array with calloc 
----------------------------------------

int main (int argc, char **argv) {
    int numLines = 9;
    int binaryLength = 32;
    unsigned long int decimals [numLines];
    decimals[0] = 3241580200;
    int i;
    char **binarystrings;
    if ((binarystrings = calloc (numLines, sizeof (*binarystrings))) == NULL)
        return EXIT_FAILURE;
    for (i = 0; i < numLines; ++i) {
        if ((binarystrings[i] = malloc ((binaryLength + 1) * sizeof (**binarystrings))) == NULL)
            return EXIT_FAILURE;
    }
    binstringconvert (decimals, binarystrings);
    printf ("\n\n%lu in binary number system is: ", decimals [0]);
    printf ("\n%s", binarystrings [0]);
}
----------------------------------------

int main (void) {
    unsigned int decimals [] = {1, 255, 65535, 8388607, 3241580200, 2898560974, 4294967295, 3097295382, 1076482445, 1234567890};
    char (*binarystrings) [DWRD + 1] = {NULL};
    int i, n = sizeof decimals / sizeof *decimals;
    binarystrings = calloc (n, sizeof *binarystrings);
    binstringconvert (decimals, binarystrings, n);
    for (i = 0; i < n; i++)
        printf (" %10u : %s\n", decimals[i], binarystrings[i]);
    free (binarystrings);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35116796_35116890_3_15
35116796_35117340_1_27
Title: How to reverse the Fibonacci Series in c without using an Array? 
----------------------------------------

int main () {
    int n;
    printf ("Enter the range of the Fibonacci series: ");
    scanf ("%d", & n);
    printf ("Fibonacci Series: ");
    printFibonacci (n);
    printf ("%d %d ", 1, 0);
    return 0;
}
----------------------------------------

int main (void) {
    printf ("number of Fibonacci numbers: ");
    int n;
    scanf_s ("%d", & n);
    if (n > 47)
        n = 47;
    long int f1 = 0;
    long int f2 = 1;
    for (int i = 2; i < n; i++) {
        long int s = f1 + f2;
        f1 = f2;
        f2 = s;
    }
    while (f1 >= 0) {
        printf ("%ld ", f2);
        long int t = f2 - f1;
        f2 = f1;
        f1 = t;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35119313_35119499_15_23
35119313_35119554_21_33
Title: Pthread in C basic print 
----------------------------------------

int main (int argc, char *argv []) {
    printf ("parent: begin\n");
    pthread_t c;
    pthread_create (& c, NULL, child, NULL);
    printf ("parent: done\n");
    done = 1;
    pthread_join (c, NULL);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    printf ("parent: begin\n");
    pthread_t c;
    pthread_create (& c, NULL, child, NULL);
    pthread_mutex_lock (& mutex);
    done = 1;
    printf ("parent: end\n");
    pthread_cond_signal (& cond);
    pthread_mutex_unlock (& mutex);
    pthread_exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35147784_35148073_76_137
35147784_36736441_290_330
Title: First and last occurrence for binary search in C 
----------------------------------------

int main () {
    {
        const size_t N = 14;
        int a [N] = {1, 2, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10};
        ShowArray (a, N);
        IndexPair_t result;
        for (size_t i = 0; i < N; i++) {
            if (equal_range (a, 14, i, &result)) {
                printf ("%d(a[%d] = %d): (%d,%d)\n", i, i, a [i], result.a, result.b);
                assert (a [result.a] == a [result.b]);
            }
            else {
                printf ("For i = %d, equal_range() returned false.\n", i);
                assert (false);
            }
        }
    }
    {
        const size_t N = 1;
        int a [N] = {1};
        ShowArray (a, N);
        IndexPair_t result;
        for (size_t i = 0; i < N; i++) {
            if (equal_range (a, N, i, &result)) {
                printf ("%d(a[%d] = %d): (%d,%d)\n", i, i, a [i], result.a, result.b);
                assert (a [result.a] == a [result.b]);
            }
            else {
                printf ("For i = %d, equal_range() returned false.\n", i);
                assert (false);
            }
        }
    }
    {
        const size_t N = 5;
        int a [N] = {1, 1, 1, 1, 1};
        ShowArray (a, N);
        IndexPair_t result;
        for (size_t i = 0; i < N; i++) {
            if (equal_range (a, N, i, &result)) {
                printf ("%d(a[%d] = %d): (%d,%d)\n", i, i, a [i], result.a, result.b);
                assert (a [result.a] == a [result.b]);
            }
            else {
                printf ("For i = %d, equal_range() returned false.\n", i);
                assert (false);
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int A [] = {1, 2, 2, 4, 5, 5, 5, 5, 5, 6, 8, 8, 9, 10};
    enum {A_SIZE = sizeof (A) / sizeof (A [0])};
    test_abc_search ("A", A_SIZE, A);
    int B [] = {10, 12, 12, 12, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 18, 18, 18, 19, 19, 19, 19,};
    enum {B_SIZE = sizeof (B) / sizeof (B [0])};
    test_abc_search ("B", B_SIZE, B);
    int C [] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,};
    enum {C_SIZE = sizeof (C) / sizeof (C [0])};
    test_abc_search ("C", C_SIZE, C);
    static const Pair results_A [] = {{-1, -1}, {0, 0}, {1, 2}, {-1, -1}, {3, 3}, {4, 8}, {9, 9}, {-1, -1}, {10, 11}, {12, 12}, {13, 13}, {-1, -1},};
    test_d_search ("A", A_SIZE, A, results_A);
    int D [] = {2, 3, 3, 3, 5, 5, 6, 8};
    enum {D_SIZE = sizeof (D) / sizeof (D [0])};
    static const Pair results_D [] = {{-1, -1}, {0, 0}, {1, 3}, {-1, -1}, {4, 5}, {6, 6}, {-1, -1}, {7, 7}, {-1, -1},};
    test_d_search ("D", D_SIZE, D, results_D);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35158072_35159629_172_183
35158072_35165769_18_46
Title: Implementation of Delete operation in a Binary Search Tree in c 
----------------------------------------

void main () {
    struct node *root = NULL;
    struct node *ptr = NULL;
    root = create (root);
    inorder (root);
    printf ("\n");
    search (root);
    printf ("\n");
    inorder (root);
    printf ("\n");
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp1 = fopen (argc > 1 ? argv[1] : "myfile1.txt", "r");
    FILE *fp2 = fopen (argc > 2 ? argv[2] : "myfile2.txt", "r");
    if (fp1 == NULL) {
        fprintf (stderr, "cannot open fp1\n");
        return 1;
    }
    if (fp2 == NULL) {
        fprintf (stderr, "cannot open fp2\n");
        return 1;
    }
    struct node *root = NULL;
    root = create (root, fp1);
    fclose (fp1);
    inorder (root);
    putchar ('\n');
    check_delete (root, fp2);
    fclose (fp2);
    putchar ('\n');
    inorder (root);
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35158072_35159629_8_44
35158072_35165769_48_77
Title: Implementation of Delete operation in a Binary Search Tree in c 
----------------------------------------

struct node *insert (struct node *root, int item) {
    struct node *temp, *temp1, *pre;
    temp = (struct node *) malloc (sizeof (struct node));
    temp->info = item;
    temp->left = temp->right = NULL;
    if (root == NULL) {
        root = temp;
    }
    else {
        temp1 = root;
        while (temp1 != NULL) {
            pre = temp1;
            if (item < temp1->info) {
                temp1 = temp1->left;
            }
            else {
                temp1 = temp1->right;
            }
        }
        if (item < pre->info) {
            pre->left = temp;
        }
        else {
            pre->right = temp;
        }
    }
    return root;
}
----------------------------------------

struct node *insert (struct node *root, int item) {
    struct node *temp, *temp1, *pre;
    temp = malloc (sizeof *temp);
    temp->info = item;
    temp->left = temp->right = NULL;
    if (root == NULL) {
        root = temp;
    }
    else {
        temp1 = root;
        while (temp1 != NULL) {
            pre = temp1;
            if (item < temp1->info)
                temp1 = temp1->left;
            else
                temp1 = temp1->right;
        }
        if (item < pre->info)
            pre->left = temp;
        else
            pre->right = temp;
    }
    return root;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35158903_35159154_1_22
35158903_35170770_1_20
Title: Weird output of merge sort for no. of entries not being a power of 2. - c 
----------------------------------------

void Mergesort (struct record r [], int n) {
    int k;
    if (n > 1) {
        int i, j;
        struct record r1 [n / 2];
        struct record r2 [n - n / 2];
        for (i = 0; i < n / 2; i++) {
            r1[i] = r[i];
        }
        for (i = 0, j = n / 2; j < n; i++, j++) {
            r2[i] = r[j];
        }
        Mergesort (r1, n / 2);
        Mergesort (r2, n - n / 2);
        r = Merge (r1, r2, r, n / 2, n -n / 2);
    }
}
----------------------------------------

void Mergesort (struct record r [], int n) {
    if (n > 1) {
        int n1 = n / 2;
        int n2 = n - n1;
        int i;
        struct record r1 [n1];
        struct record r2 [n2];
        for (i = 0; i < n1; i++)
            r1[i] = r[i];
        for (i = 0; i < n2; i++)
            r2[i] = r[n1 + i];
        Mergesort (r1, n1);
        Mergesort (r2, n2);
        Merge (r1, r2, r, n1, n2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35168807_35169715_3_28
35168807_35185294_12_39
Title: "Seg Fault malloc char pointers" 
----------------------------------------

Whiskey *createWhiskey (int a, double p, char *n) {
    Whiskey *whiskey = malloc (sizeof (Whiskey));
    if (whiskey) {
        whiskey->age = a;
        whiskey->proof = p;
        if (strlen (n) > SOME_MAXIMUM) {
            free (whiskey);
            printf ("Some error... maybe\n");
            return NULL;
        }
        whiskey->name = malloc ((strlen (n) + 1) * sizeof (char));
        if (whiskey->name) {
            strcpy (whiskey -> name, n);
        }
        else {
            free (whiskey);
            printf ("Some error... \n");
            return NULL;
        }
    }
    return whiskey;
}
----------------------------------------

Whiskey *createWhiskey (int age, double proof, char *name) {
    Whiskey *whiskey = NULL;
    if (NULL == (whiskey = malloc (sizeof (Whiskey)))) {
        perror ("malloc for Whiskey failed");
        exit (EXIT_FAILURE);
    }
    whiskey->age = age;
    whiskey->proof = proof;
    whiskey->name = NULL;
    if (NULL == (whiskey->name = malloc (strlen (name) +1))) {
        perror ("malloc for name field failed");
        free (whiskey);
        exit (EXIT_FAILURE);
    }
    strcpy (whiskey -> name, name);
    return whiskey;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35197777_35198630_5_28
35197777_35198989_21_32
Title: Write a program to output all palindromic times displayed by a 24 hour digital clock (e.g. 13:31) 
----------------------------------------

int main () {
    time_t rawtime;
    struct tm *timeinfo;
    time (& rawtime);
    timeinfo = localtime (&rawtime);
    printf ("Current local time and date: %s\n", asctime (timeinfo));
    char hour [20], mints [20], rec [10];
    snprintf (hour, sizeof (hour), "%d", timeinfo -> tm_hour);
    snprintf (mints, sizeof (mints), "%d", timeinfo -> tm_min);
    int length = strlen (hour);
    int j = 0;
    for (int i = length; i > 0; i--) {
        rec[j++] = hour[i - 1];
    }
    rec[j] = '\0';
    if (strcmp (rec, mints) == 0)
        printf ("%d %d", timeinfo->tm_hour, timeinfo->tm_min);
    return 0;
}
----------------------------------------

int main (void) {
    int a = 0;
    int loop = 0;
    for (loop = 0; loop <= 59; loop++) {
        a = pallindrome (loop);
        if (a < 60)
            printf ("%.2d:%.2d\n", loop, a);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35197777_35198630_5_28
35197777_35199868_3_18
Title: Write a program to output all palindromic times displayed by a 24 hour digital clock (e.g. 13:31) 
----------------------------------------

int main () {
    time_t rawtime;
    struct tm *timeinfo;
    time (& rawtime);
    timeinfo = localtime (&rawtime);
    printf ("Current local time and date: %s\n", asctime (timeinfo));
    char hour [20], mints [20], rec [10];
    snprintf (hour, sizeof (hour), "%d", timeinfo -> tm_hour);
    snprintf (mints, sizeof (mints), "%d", timeinfo -> tm_min);
    int length = strlen (hour);
    int j = 0;
    for (int i = length; i > 0; i--) {
        rec[j++] = hour[i - 1];
    }
    rec[j] = '\0';
    if (strcmp (rec, mints) == 0)
        printf ("%d %d", timeinfo->tm_hour, timeinfo->tm_min);
    return 0;
}
----------------------------------------

int main () {
    int i;
    char h [3] = {'0', '0', 0};
    for (i = 0; i < 24; i++) {
        if ((i % 10) < 6) {
            snprintf (h, 3, "%02d", i);
            printf ("%s:%c%c\n", h, h [1], h [0]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
35197777_35198989_21_32
35197777_35199868_3_18
Title: Write a program to output all palindromic times displayed by a 24 hour digital clock (e.g. 13:31) 
----------------------------------------

int main (void) {
    int a = 0;
    int loop = 0;
    for (loop = 0; loop <= 59; loop++) {
        a = pallindrome (loop);
        if (a < 60)
            printf ("%.2d:%.2d\n", loop, a);
    }
    return 0;
}
----------------------------------------

int main () {
    int i;
    char h [3] = {'0', '0', 0};
    for (i = 0; i < 24; i++) {
        if ((i % 10) < 6) {
            snprintf (h, 3, "%02d", i);
            printf ("%s:%c%c\n", h, h [1], h [0]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3519959_3520106_1_21
3519959_37350908_4_66
Title: Computing the inverse of a matrix using lapack in C 
----------------------------------------

int main () {
    double M [3] [3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}
    }
    double pivotArray [3];
    int errorHandler;
    double lapackWorkspace [9];
    dgetrf_ (3, 3, M [3] [], 3, pivotArray [3], & errorHandler);
    dgetri_ (3, M [3] [], 3, pivotArray [3], 9, lapackWorkspace, & errorHandler);
}
----------------------------------------

int main () {
    int N = 3;
    int NN = 9;
    double M [3] [3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 19}};
    int pivotArray [3];
    int errorHandler;
    double lapackWorkspace [9];
    extern void dgetrf_ (int * m, int * n, double * A, int * LDA, int * IPIV, int * INFO);
    extern void dgetri_ (int * n, double * A, int * LDA, int * IPIV, double * WORK, int * LWORK, int * INFO);
    dgetrf_ (& N, & N, M [0], & N, pivotArray, & errorHandler);
    printf ("dgetrf eh, %d, should be zero\n", errorHandler);
    dgetri_ (& N, M [0], & N, pivotArray, lapackWorkspace, & NN, & errorHandler);
    printf ("dgetri eh, %d, should be zero\n", errorHandler);
    for (size_t row = 0; row < N; ++row) {
        for (size_t col = 0; col < N; ++col) {
            printf ("%g", M [row] [col]);
            if (N - 1 != col) {
                printf (", ");
            }
        }
        if (N - 1 != row) {
            printf ("\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3519959_3520106_1_21
3519959_41474839_36_59
Title: Computing the inverse of a matrix using lapack in C 
----------------------------------------

int main () {
    double M [3] [3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}
    }
    double pivotArray [3];
    int errorHandler;
    double lapackWorkspace [9];
    dgetrf_ (3, 3, M [3] [], 3, pivotArray [3], & errorHandler);
    dgetri_ (3, M [3] [], 3, pivotArray [3], 9, lapackWorkspace, & errorHandler);
}
----------------------------------------

int main () {
    double A [] = {0.378589, 0.971711, 0.016087, 0.037668, 0.312398, 0.756377, 0.345708, 0.922947, 0.846671, 0.856103, 0.732510, 0.108942, 0.476969, 0.398254, 0.507045, 0.162608, 0.227770, 0.533074, 0.807075, 0.180335, 0.517006, 0.315992, 0.914848, 0.460825, 0.731980};
    for (int i = 0; i < 25; i++) {
        if ((i % 5) == 0)
            putchar ('\n');
        printf ("%+12.8f ", A [i]);
    }
    putchar ('\n');
    matInv (A, 5);
    for (int i = 0; i < 25; i++) {
        if ((i % 5) == 0)
            putchar ('\n');
        printf ("%+12.8f ", A [i]);
    }
    putchar ('\n');
}
----------------------------------------

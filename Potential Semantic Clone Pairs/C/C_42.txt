$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40197914_40198983_1_13
40197914_40200318_6_21
Title: Why is my output a null? 
----------------------------------------

int main () {
    char str [1000] = "";
    char ch = 'M';
    char *findM;
    printf ("Enter a line of text\n");
    scanf ("%999[0-9a-zA-Z ]", str);
    findM = strchr (str, ch);
    findM++;
    printf ("string after %c is %s ", ch, findM);
    return 0;
}
----------------------------------------

int main () {
    char str [1000] = "";
    char ch = 'M';
    char *findM;
    printf ("Enter a line of text\n");
    scanf ("%s", str);
    findM = strchr (str, ch);
    if (findM)
        printf ("string after %c is %s ", ch, findM);
    else
        printf ("Character not found ...\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40199509_40199559_6_17
40199509_40200115_9_23
Title: Initializing n integers in 2-dimensional array 
----------------------------------------

int main (int argc, char **argv) {
    int arr [LENGTH] [LENGTH] = {{0}};
    for (int i = 0; i < LENGTH; i++) {
        fprintf (stderr, "%p contains %d elements\n", (void *) arr [i], (int) sizeof (arr) / sizeof (* arr));
        for (int j = 0; j < LENGTH; j++) {
            arr[i][j]++;
            fprintf (stderr, "%d ", arr [i] [j]);
        }
        fprintf (stderr, "\n");
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main (void) {
    int row, col;
    int arr [ROWS] [COLS] = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}};
    for (row = 0; row < ROWS; row++) {
        for (col = 0; col < COLS; col++) {
            arr[row][col] += 1;
        }
    }
    print_array (arr, ROWS);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40199509_40199559_6_17
40199509_40200120_2_21
Title: Initializing n integers in 2-dimensional array 
----------------------------------------

int main (int argc, char **argv) {
    int arr [LENGTH] [LENGTH] = {{0}};
    for (int i = 0; i < LENGTH; i++) {
        fprintf (stderr, "%p contains %d elements\n", (void *) arr [i], (int) sizeof (arr) / sizeof (* arr));
        for (int j = 0; j < LENGTH; j++) {
            arr[i][j]++;
            fprintf (stderr, "%d ", arr [i] [j]);
        }
        fprintf (stderr, "\n");
    }
    return EXIT_SUCCESS;
}
----------------------------------------

void main () {
    int i, j;
    int arr [5] [5] = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}};
    printf ("Sizeof(arr) : %d\n", sizeof (arr));
    printf ("Sizeof(arr[0]) : %d\n", sizeof (arr [0]));
    for (int i = 0; i < (sizeof (arr) / sizeof (arr[0])); i++) {
        for (int j = 0; j < (sizeof (arr[0]) / sizeof (arr[0][0])); j++)
            arr[i][j] += 1;
    }
    for (int i = 0; i < (sizeof (arr) / sizeof (arr[0])); i++) {
        for (int j = 0; j < (sizeof (arr[i]) / sizeof (arr[0][0])); j++)
            printf ("%d ", arr[i][j]);
        printf ("\n");
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40199509_40200115_9_23
40199509_40200120_2_21
Title: Initializing n integers in 2-dimensional array 
----------------------------------------

int main (void) {
    int row, col;
    int arr [ROWS] [COLS] = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}};
    for (row = 0; row < ROWS; row++) {
        for (col = 0; col < COLS; col++) {
            arr[row][col] += 1;
        }
    }
    print_array (arr, ROWS);
    return 0;
}
----------------------------------------

void main () {
    int i, j;
    int arr [5] [5] = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}};
    printf ("Sizeof(arr) : %d\n", sizeof (arr));
    printf ("Sizeof(arr[0]) : %d\n", sizeof (arr [0]));
    for (int i = 0; i < (sizeof (arr) / sizeof (arr[0])); i++) {
        for (int j = 0; j < (sizeof (arr[0]) / sizeof (arr[0][0])); j++)
            arr[i][j] += 1;
    }
    for (int i = 0; i < (sizeof (arr) / sizeof (arr[0])); i++) {
        for (int j = 0; j < (sizeof (arr[i]) / sizeof (arr[0][0])); j++)
            printf ("%d ", arr[i][j]);
        printf ("\n");
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40217219_40220026_1_13
40217219_52580740_14_35
Title: find lowest common multiple 
----------------------------------------

int main () {
    int arr [10] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    int GCD = arr[0];
    int LCM = arr[0];
    int i;
    for (i = 1; i < sizeof (arr) / sizeof (arr[0]); i++) {
        GCD = findGCD (GCD, arr[i]);
        LCM = (LCM * arr[i]) / findGCD (LCM, arr[i]);
    }
    printf ("GCD IS %d AND LCM IS %d", GCD, LCM);
}
----------------------------------------

int main () {
    int arr [10] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    int GCD = arr[0];
    int LCM = arr[0];
    size_t i;
    for (i = 1; i < sizeof (arr) / sizeof (arr[0]); i++) {
        if (LCM == 0 || arr[i] == 0) {
            LCM = 0;
            break;
        }
        GCD = findGCD (GCD, arr[i]);
        LCM = LCM / findGCD (LCM, arr[i]);
        if (arr[i] > INT_MAX / LCM) {
            printf ("integer overflow: the LCM exceeds the range of type int\n");
            return 1;
        }
        LCM = LCM * arr[i];
    }
    printf ("GCD IS %d AND LCM IS %d", GCD, LCM);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40217219_40220026_1_13
40217219_52621773_20_52
Title: find lowest common multiple 
----------------------------------------

int main () {
    int arr [10] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    int GCD = arr[0];
    int LCM = arr[0];
    int i;
    for (i = 1; i < sizeof (arr) / sizeof (arr[0]); i++) {
        GCD = findGCD (GCD, arr[i]);
        LCM = (LCM * arr[i]) / findGCD (LCM, arr[i]);
    }
    printf ("GCD IS %d AND LCM IS %d", GCD, LCM);
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *vstup;
    FILE *vystup;
    int c1, c2;
    int i = 1, j = 1;
    vstup = fopen (VSTUP, "r");
    if (vstup == NULL) {
        printf ("Soubor %s nebyl otevren.\n", VSTUP);
        return (EXIT_FAILURE);
    }
    vystup = fopen (VYSTUP, "w");
    printf ("Vypis cisel ze souboru %s\n-------------------------------- \n", VSTUP);
    fprintf (vystup, "Vypis delitelnych cisel ze souboru %s\n--------------------------------------------\n", VYSTUP);
    printf ("%7s%7s%7s%7s%7s\n", "poradi", "cislo1", "cislo2", "nsn", "nsd");
    fprintf (vystup, "%7s%7s%7s%7s%7s\n", "poradi", "cislo1", "cislo2", "nsn", "nsd");
    while (fscanf (vstup, "%d %d", &c1, &c2) == 2) {
        printf ("%6d.%7d%7d%7d%7d\n", i, c1, c2, nsn (c1, c2), nsd (c1, c2));
        if (nsd (c1, c2) != 1) {
            fprintf (vystup, "%6d.%7d%7d%7d%7d\n", j, c1, c2, nsn (c1, c2), nsd (c1, c2));
            j++;
        }
        i++;
    }
    printf ("\nSoubor %s obsahuje %d dvojic cisel.\n\n", VSTUP, i - 1);
    fprintf (vystup, "\nSoubor %s obsahuje %d dvojic cisel.\n", VYSTUP, j - 1);
    if (fclose (vstup) == EOF)
        printf ("Soubor %s nebyl uzavren.\n", VSTUP);
    if (fclose (vystup) == EOF)
        printf ("Soubor %s se nepovedlo vytvorit.\n", VYSTUP);
    else
        printf ("Byl vytvoren soubor delitelnych cisel %s.\n\n", VYSTUP);
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40217219_52580740_14_35
40217219_52621773_20_52
Title: find lowest common multiple 
----------------------------------------

int main () {
    int arr [10] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    int GCD = arr[0];
    int LCM = arr[0];
    size_t i;
    for (i = 1; i < sizeof (arr) / sizeof (arr[0]); i++) {
        if (LCM == 0 || arr[i] == 0) {
            LCM = 0;
            break;
        }
        GCD = findGCD (GCD, arr[i]);
        LCM = LCM / findGCD (LCM, arr[i]);
        if (arr[i] > INT_MAX / LCM) {
            printf ("integer overflow: the LCM exceeds the range of type int\n");
            return 1;
        }
        LCM = LCM * arr[i];
    }
    printf ("GCD IS %d AND LCM IS %d", GCD, LCM);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *vstup;
    FILE *vystup;
    int c1, c2;
    int i = 1, j = 1;
    vstup = fopen (VSTUP, "r");
    if (vstup == NULL) {
        printf ("Soubor %s nebyl otevren.\n", VSTUP);
        return (EXIT_FAILURE);
    }
    vystup = fopen (VYSTUP, "w");
    printf ("Vypis cisel ze souboru %s\n-------------------------------- \n", VSTUP);
    fprintf (vystup, "Vypis delitelnych cisel ze souboru %s\n--------------------------------------------\n", VYSTUP);
    printf ("%7s%7s%7s%7s%7s\n", "poradi", "cislo1", "cislo2", "nsn", "nsd");
    fprintf (vystup, "%7s%7s%7s%7s%7s\n", "poradi", "cislo1", "cislo2", "nsn", "nsd");
    while (fscanf (vstup, "%d %d", &c1, &c2) == 2) {
        printf ("%6d.%7d%7d%7d%7d\n", i, c1, c2, nsn (c1, c2), nsd (c1, c2));
        if (nsd (c1, c2) != 1) {
            fprintf (vystup, "%6d.%7d%7d%7d%7d\n", j, c1, c2, nsn (c1, c2), nsd (c1, c2));
            j++;
        }
        i++;
    }
    printf ("\nSoubor %s obsahuje %d dvojic cisel.\n\n", VSTUP, i - 1);
    fprintf (vystup, "\nSoubor %s obsahuje %d dvojic cisel.\n", VYSTUP, j - 1);
    if (fclose (vstup) == EOF)
        printf ("Soubor %s nebyl uzavren.\n", VSTUP);
    if (fclose (vystup) == EOF)
        printf ("Soubor %s se nepovedlo vytvorit.\n", VYSTUP);
    else
        printf ("Byl vytvoren soubor delitelnych cisel %s.\n\n", VYSTUP);
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40235955_40240079_1_22
40235955_40241864_14_28
Title: Read from a text file and use each line to compare if they are anagrams 
----------------------------------------

int main () {
    int flag;
    char buf [1000];
    FILE *ptr_file;
    while (fgets (buf, 1000, ptr_file) != NULL) {
        char *array1 = strtok (buf, "#");
        char *array2 = strtok (NULL, "\n");
        flag = find_anagram (array1, array2);
    }
    return 0;
}
----------------------------------------

int main (int argc, char const *argv []) {
    FILE *filename;
    if ((filename = fopen ("anagram.txt", "r")) == NULL) {
        fprintf (stderr, "Error opening file\n");
        exit (EXIT_FAILURE);
    }
    check_lines (filename);
    fclose (filename);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40256242_40256468_3_23
40256242_40256797_3_26
Title: Converting array to number in (Mikro) C 
----------------------------------------

int main (void) {
    int lenght = 6;
    int Array [lenght];
    Array[0] = 9;
    Array[1] = 4;
    Array[2] = 5;
    Array[3] = 8;
    Array[4] = 1;
    Array[5] = 0;
    int pow = 1;
    int val = 0;
    for (int i = 0; i < lenght; i++) {
        val += Array[lenght - i - 1] * pow;
        pow *= 10;
    }
    printf ("Val is %d", val);
    return 0;
}
----------------------------------------

int main (void) {
    int numbers [] = {1, 2, 3, 4, 5, 6};
    int multiplier = 1;
    printf ("First printout\n");
    for (int i = 0; i < 5; ++i)
        printf ("Numbers[%i] = %i\n", i, numbers[i]);
    for (int i = 0; i < 5; ++i) {
        numbers[i] *= multiplier;
        multiplier *= 10;
    }
    printf ("Second printout\n");
    for (int i = 0; i < 5; ++i)
        printf ("Numbers[%i] = %i\n", i, numbers[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40266877_40267151_2_13
40266877_40267157_2_12
Title: c getting Segmentation fault 
----------------------------------------

int find_item (cart_t *cart, const char *item_name) {
    int i;
    for (i = 0; i < cart->size; ++i) {
        if (strcmp (cart->items[i]->name, item_name) == 0) {
            return i;
        }
    }
    if (i == cart->size)
        return -1;
    return 0;
}
----------------------------------------

int find_item (cart_t *cart, const char *item_name) {
    int i;
    for (i = 0; i < cart->size; ++i) {
        if (strcmp (cart->items[i]->name, item_name) == 0) {
            return i;
        }
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40279621_40279976_1_27
40279621_40281159_1_19
Title: I want to ask my failed code 
----------------------------------------

char *concate (char *p, char *q) {
    int i, len = 0,;
    char *r, *temp;
    temp = p;
    for (; *temp; ++temp)
        len++;
    temp = q;
    for (; *temp; ++temp)
        len++;
    if ((r = malloc (len +1)) == NULL) {
        printf ("Allocate failed\n");
        exit (1);
    }
    for (temp = r; *p; p++, temp++)
        *temp = *p;
    for (; *q; q++, temp++)
        *temp = *q;
    *temp = '\0';
    return r;
}
----------------------------------------

char *concate (char *p, char *q) {
    char *res = p;
    while (*p)
        *p++;
    *p--;
    while (*q) {
        *p++;
        *p = *q;
        *q++;
    }
    *++p = *q;
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40307071_40307276_7_17
40307071_40307297_8_16
Title: Returning struct from function defined in thread 
----------------------------------------

command_t getfrombuffer (void) {
    sem_wait (& fullpositions);
    pthread_mutex_lock (& mutex);
    command_t item = cmd_buffer[buff_read_idx++];
    if (buff_read_idx >= 6)
        buff_read_idx = 0;
    pthread_mutex_unlock (& mutex);
    sem_post (& freepositions);
    return item;
}
----------------------------------------

void getfrombuffer (command_t *item) {
    sem_wait (& fullpositions);
    pthread_mutex_lock (& mutex);
    *item = cmd_buffer[buff_read_idx++];
    if (buff_read_idx >= 6)
        buff_read_idx = 0;
    pthread_mutex_unlock (& mutex);
    sem_post (& freepositions);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40315310_40316160_11_32
40315310_40316209_44_54
Title: I'm trying to learn how to use link lists 
----------------------------------------

int main (void) {
    struct linkList n1, n2, n3, *start;
    n1.val = 5.5;
    n2.val = 6.6;
    n3.val = 7.7;
    start = &n1;
    n1.next = &n2;
    n2.next = &n3;
    n3.next = 0;
    while (start->next != NULL) {
        printf ("%f \n", start -> val);
        start = start->next;
    }
    return 0;
}
----------------------------------------

int main () {
    insertFirst (1, 10);
    insertFirst (2, 20);
    insertFirst (3, 30);
    insertFirst (4, 1);
    insertFirst (5, 40);
    insertFirst (6, 56);
    printList ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40318093_40320746_8_44
40318093_40320913_13_31
Title: Realloc gives invalid pointer error when resizing array 
----------------------------------------

int main (int argc, char const *argv []) {
    int *numbers = NULL;
    int number, num_size = 1, count = 0, i;
    numbers = malloc (num_size * sizeof (*numbers));
    exit_if_null (numbers, "Initial Allocation");
    printf ("Enter numbers(0 to end): ");
    while (scanf ("%d", &number) == 1 && number != EXIT) {
        if (num_size == count) {
            num_size *= 2;
            numbers = realloc (numbers, num_size * sizeof (*numbers));
            exit_if_null (numbers, "Reallocation");
        }
        numbers[count++] = number;
    }
    printf ("Your numbers stored in array:\n");
    for (i = 0; i < count; i++) {
        printf ("%d ", numbers [i]);
    }
    free (numbers);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int number;
    int *numbers = NULL;
    int i, size = 0;
    while (scanf ("%d", &number) == 1 && number != 0) {
        numbers = resizeIntArray (numbers, size +1);
        numbers[size++] = number;
    }
    for (i = 0; i < size; i++) {
        printf ("%d ", numbers [i]);
    }
    printf ("\n");
    free (numbers);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40319526_40319615_17_33
40319526_40319637_18_31
Title: Using function and checking a greater value from arrays 
----------------------------------------

int main (void) {
    int j, v [4];
    printf ("Type four values\n");
    for (j = 0; j < 4; j++) {
        scanf ("%d", & v [j]);
    }
    printf ("%d", greater (v [4]));
    system ("pause");
    return 0;
}
----------------------------------------

int main (void) {
    int j, v [4];
    printf ("Type four values\n");
    for (j = 0; j < 4; j++) {
        scanf ("%d", & v [j]);
    }
    printf ("%d\n", greater (v));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40319526_40319615_3_15
40319526_40319637_3_16
Title: Using function and checking a greater value from arrays 
----------------------------------------

int greater (int array []) {
    int i, greater;
    for (i = 0; i < 4; i++) {
        if (array[i] > greater) {
            greater = array[i];
        }
    }
    return greater;
}
----------------------------------------

int greater (int array []) {
    int i, greater = 0;
    for (i = 0; i < 4; i++) {
        if (array[i] > greater) {
            greater = array[i];
        }
    }
    return greater;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40323390_40323543_5_52
40323390_40323950_4_21
Title: C coding: Read only floating point number with decimal and reject integer and speciall characters 
----------------------------------------

int main () {
    double decpart;
    printf ("Enter a floating number num: ");
    char buf [100];
    int len;
    char *endptr;
    while (fgets (buf, sizeof (buf), stdin) != NULL) {
        len = strlen (buf) - 1;
        while (len > 0) {
            len--;
            if (buf[len] == ' ') {
                buf[len] = '\n';
            }
            else {
                break;
            }
        }
        double floatnum = strtod (buf, &endptr);
        if ((endptr == buf) || (endptr[0] != '\n')) {
            printf ("Invalid floating point number, enter again: ");
        }
        else {
            int intpart = (int) floatnum;
            double decpart = floatnum - intpart;
            if (decpart == 0.000000) {
                printf ("Invalid floating point number, enter again: ");
            }
            else {
                printf ("Number entered = %.2f\n", floatnum);
                break;
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char buf [80];
    double floatnum;
    printf ("Enter floating point numbers: ");
    while (scanf ("%79s", buf) == 1) {
        int len = strlen (buf);
        int pos = -1;
        sscanf (buf, "%*[0-9].%*[0-9]%n", & pos);
        if (pos == len && sscanf (buf, "%lf", &floatnum) == 1) {
            printf ("Number entered = %.2f\n", floatnum);
        }
        else {
            printf ("Invalid floating point number: %s, enter again: ", buf);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4032568_4032628_1_13
4032568_4032656_1_11
Title: increment in a loop and keeping state 
----------------------------------------

int load_resources (int base_index) {
    size_t i = 0;
    size_t index;
    for (i = 0; i < NUMBER_OF_DEVICES; i++) {
        index = base_index + i;
        dev_tbl[index].resource_handle = get_resources ();
    }
    return index + 1;
}
----------------------------------------

void load_resources (int *pBase) {
    size_t i = 0;
    for (i = 0; i < NUMBER_OF_DEVICES; i++, (*pBase)++) {
        dev_tbl[i].resource_handle = get_resources ();
        printf ("dev_tbl[i].resource_handle [ %d ]\n", dev_tbl [i].resource_handle);
        dev_types[*pBase].id = i;
        dev_types[*pBase].dev_handle = dev_tbl[i].resource_handle;
        dev_types[*pBase].dev_type = RESOURCE;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40331301_40331625_5_95
40331301_40331894_11_50
Title: Verifying integer input in a union in C 
----------------------------------------

int main (void) {
    int c;
    int position = 0;
    int res;
    char date [9] = {'\0'};
    char input [20] = {'\0'};
    puts ("try if date is in the format \"YYYYMMDD\"");
    res = scanf ("%19s", input);
    if (res != 1) {
        fprintf (stderr, "input was a mess, aborting\n");
        goto __FAILURE;
    }
    c = input[position];
    while (c != '\0') {
        switch (position) {
        case 0 :
            if (c == '2' || c == '1') {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        case 1 :
            if (c == '9' || c == '0') {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        case 2 :
            if (isdigit (c)) {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        case 3 :
            if (isdigit (c)) {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        case 4 :
            if (c == '0' || c == '1') {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        case 5 :
            if (isdigit (c)) {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        case 6 :
            if (c == '0' || c == '1' || c == '2' || c == '3') {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        case 7 :
            if (isdigit (c)) {
                date[position] = (char) c;
            }
            else {
                goto __FAILURE;
            }
            break;
        default :
            break;
        }
        c = input[++position];
    }
    printf ("Date was correct and is %s\n", date);
    exit (EXIT_SUCCESS);
__FAILURE :
    printf ("Date was wrong at position %d with character %c or just too short/long\n", position, c);
    exit (EXIT_FAILURE);
}
----------------------------------------

int main (void) {
    int i;
    mydate_t dat = {0};
    int dayspermon [12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    char str [12];
    printf ("Enter a date (YYYYMMDD): ");
    fflush (stdout);
    if (fgets (str, sizeof str, stdin) == NULL) {
        exit (1);
    }
    for (i = 0; i < 8; i++) {
        if (!isdigit (str[i])) {
            exit (1);
        }
    }
    for (i = 0; i < 4; i++) {
        dat.year = dat.year * 10 + str[i] - '0';
    }
    for (i = 4; i < 6; i++) {
        dat.month = dat.month * 10 + str[i] - '0';
    }
    for (i = 6; i < 8; i++) {
        dat.day = dat.day * 10 + str[i] - '0';
    }
    if (dat.year < 2000 || dat.year > 3000)
        exit (1);
    if (dat.year % 4 == 0 && (dat.year % 100 != 0 || dat.year % 400 == 0)) {
        dayspermon[1]++;
    }
    if (dat.month < 1 || dat.month > 12)
        exit (1);
    if (dat.day < 1 || dat.day > dayspermon[dat.month - 1])
        exit (1);
    printf ("Date: %04d %02d %02d\n", dat.year, dat.month, dat.day);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40359365_40361477_3_20
40359365_40361597_2_50
Title: Not Getting Any output While Printing after combining strings 
----------------------------------------

int main (void) {
    char result [30];
    char *pntResult = result;
    char *appendStr (char *dest, char *strToAppend);
    char *name [3] = {"FirstName", "MiddleName", "LastName"};
    int i;
    for (i = 0; i < 3; ++i)
        pntResult = appendStr (pntResult, name[i]);
    *(pntResult - 1) = '\0';
    printf ("%s\n", result);
    return 0;
}
----------------------------------------

int main () {
    int i, j, k;
    char first_name [11] = "Gursheesh";
    char middle_name [10] = "Singh";
    char last_name [10] = "Chawla";
    char name [30];
    for (i = 0; first_name[i] != '\0'; i++) {
        name[i] = first_name[i];
    }
    name[i] = ' ';
    i++;
    for (j = 0; middle_name[j] != '\0'; j++) {
        name[i + j] = middle_name[j];
    }
    name[i + j] = ' ';
    j++;
    for (k = 0; last_name[k] != '\0'; k++) {
        name[i + j + k] = last_name[k];
    }
    name[i + j + k] = '\0';
    printf ("%s", name);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40382568_40382917_3_29
40382568_40383856_4_25
Title: keep track of successive repeatnace of a digit in C 
----------------------------------------

void main () {
    int a [10] = {1, 1, 1, 1, 1, 1, 0, 1, 1, 1};
    int count = 0;
    int temp = 0;
    for (int i = 0; i < 10; i++) {
        if (a[i] == 1)
            temp++;
        else {
            if (count < temp) {
                count = temp;
                temp = 0;
            }
        }
    }
    if (count < temp) {
        count = temp;
        temp = 0;
    }
    printf (" Total %d", count);
}
----------------------------------------

int main (int argc, char const *argv []) {
    int array [] = {0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1};
    int size, i, maxSoFar = 0, maxEndingHere = 0;
    size = sizeof (array) / sizeof (*array);
    for (i = 0; i < size; i++) {
        if (array[i] == 1) {
            maxEndingHere++;
        }
        else {
            maxEndingHere = 0;
        }
        if (maxEndingHere > maxSoFar) {
            maxSoFar = maxEndingHere;
        }
    }
    printf ("%d", maxSoFar);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40399825_40400573_1_23
40399825_40406999_1_13
Title: Scanf every number in input until user input 0 
----------------------------------------

int main () {
    long long number, div;
    while (scanf ("%lli", &number) == 1) {
        printf ("The prime factors of %lli are: \n", number);
        div = 2;
        while (number != 0) {
            if (number % div != 0)
                div = div + 1;
            else {
                number = number / div;
                printf ("%lli ", div);
                if (number == 1)
                    break;
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    long long number, div;
    int loop = (1 == scanf ("%lli", &number)) && (0 != number);
    while (loop) {
        printf ("The prime factors of %lli are: \n", number);
        printf ("\n");
        loop = (1 == scanf ("%lli", &number)) && (0 != number);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40407032_40408210_1_28
40407032_40411483_7_33
Title: Multiply two arbitrary numbers in a string 
----------------------------------------

void mult (char *n1, char *n2) {
    char *res, *pres, *p1, *p2;
    int mul, i, j, l1 = strlen (n1), l2 = strlen (n2);
    res = malloc (sizeof (*res) * (l1 + l2 + 1));
    memset (res, 0, l1 + l2);
    res[l1 + l2] = 0;
    for (i = 0, p1 = n1; i < l1; i++)
        *p1++ -= '0';
    for (j = 0, p2 = n2; j < l2; j++)
        *p2++ -= '0';
    p1 = n1 + l1 - 1;
    for (i = l1 - 1; i >= 0; i--, p1--) {
        p2 = n2 + l2 - 1;
        pres = res + i;
        for (j = l2 - 1; j >= 0; j--, p2--) {
            mul = *p1 * *p2;
            pres[j] += ((pres[j + 1] + mul) / 10);
            pres[j + 1] = ((pres[j + 1] + mul) % 10);
        }
    }
    for (i = 0, p1 = res; i < l1 + l2; i++)
        *p1++ += '0';
    printf ("%s\n", res);
    free (res);
}
----------------------------------------

void mult (const char *n1, const char *n2) {
    FILE *pipe = popen ("/usr/bin/bc", "r+");
    fprintf (pipe, "%s * %s\nquit\n", n1, n2);
    if (ferror (pipe)) {
        fprintf (stderr, "Output to pipe failed.\n");
        exit (EXIT_FAILURE);
    }
    char *buffer = malloc (BUFFER_SIZE);
    char *result = fgets (buffer, BUFFER_SIZE, pipe);
    while (result != NULL) {
        char *s = rindex (buffer, '\\');
        if (s != NULL) {
            *s = '\0';
        }
        fputs (buffer, stdout);
        result = fgets (buffer, BUFFER_SIZE, pipe);
    }
    (void) pclose (pipe);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40413537_40413835_19_51
40413537_40414153_14_56
Title: deleting a node passed by reference in c 
----------------------------------------

int main () {
    student *head, *node, *w;
    node = (student *) malloc (sizeof (student));
    gets (node -> name);
    node->gpa = 3.6;
    node->next = NULL;
    head = node;
    node = (student *) malloc (sizeof (student));
    gets (node -> name);
    node->gpa = 3.7;
    head->next = node;
    node->next = NULL;
    w = head;
    while (w != NULL) {
        printf ("%s %lf\n\n", w -> name, w -> gpa);
        w = w->next;
    }
    node = deletefirstnode (head, node);
    free (head);
    w = node;
    while (w != NULL) {
        printf ("%s %lf\n\n", w -> name, w -> gpa);
        w = w->next;
    }
    return 0;
}
----------------------------------------

int main () {
    student *head, *node, *w;
    node = (student *) malloc (sizeof (student));
    *node->name = 0;
    while (1 != scanf ("%19[^\n]%*c", node->name)) {
        printf ("input name\n");
        scanf ("%*[^\n]");
        scanf ("%*c");
    }
    node->gpa = 3.6;
    node->next = NULL;
    head = node;
    node = (student *) malloc (sizeof (student));
    *node->name = 0;
    while (1 != scanf ("%19[^\n]%*c", node->name)) {
        printf ("input name\n");
        scanf ("%*[^\n]");
        scanf ("%*c");
    }
    node->gpa = 3.7;
    node->next = head;
    head = node;
    w = head;
    while (w != NULL) {
        printf ("%s %lf\n\n", w -> name, w -> gpa);
        w = w->next;
    }
    node = deletefirstlist (&head, NULL);
    free (node);
    w = head;
    while (w != NULL) {
        printf ("%s %lf\n\n", w -> name, w -> gpa);
        w = w->next;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40429877_40430617_4_23
40429877_40431578_23_32
Title: Convert uint32 floating point representation to uint8 
----------------------------------------

int main () {
    uint32_t fValue = 0x43246ADD;
    uint8_t result = 0;
    float *f;
    f = (float *) &fValue;
    if (*f <= 255 && *f >= 0) {
        result = (uint8_t) (*f);
    }
    else {
    }
    printf ("%d\n", result);
}
----------------------------------------

int main () {
    printf ("%u\n", DN_float_to_uint8 (0x43246a00));
    printf ("%u\n", DN_float_to_uint8 (0x437e0000));
    printf ("%u\n", DN_float_to_uint8 (0x437f0000));
    printf ("%u\n", DN_float_to_uint8 (0x43800000));
    printf ("%u\n", DN_float_to_uint8 (0x3f7fffff));
    printf ("%u\n", DN_float_to_uint8 (0x3f800000));
    printf ("%u\n", DN_float_to_uint8 (0x40000000));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40430524_40431314_2_26
40430524_40431520_3_22
Title: How do I make printf from right to left 
----------------------------------------

int main () {
    int n;
    char buf [100];
    char *bp;
    printf ("Enter number: ");
    fflush (stdout);
    scanf ("%d", & n);
    bp = buf;
    for (; n > 0 || bp == buf; n = n / 2) {
        int d = n % 2;
        bp += sprintf (bp, "%d", d);
    }
    for (bp -= 1; bp >= buf; --bp)
        fputc (*bp, stdout);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int n = 0;
    int hadone = 0;
    int bits = 8 * sizeof n;
    unsigned mask = 1u << (bits - 1);
    scanf ("%d", & n);
    while (mask) {
        if (n & mask) {
            putchar ('1');
            hadone = 1;
        }
        else if (hadone || mask == 1) {
            putchar ('0');
        }
        mask >>= 1;
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40446207_40446241_9_27
40446207_40446252_1_18
Title: How can I pass an array of structures to a function by reference? 
----------------------------------------

int main (void) {
    struct ITEM items [10];
    for (int i = 0; i < 10; i++) {
        items[i].number = i;
        printf ("BEFORE:: %d\n", items [i].number);
    }
    changeValues (items);
    for (int i = 0; i < 10; i++) {
        printf ("AFTER:: %d\n", items [i].number);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *pA;
    char *pB;
    puts (strA);
    pA = strA;
    puts (pA);
    pB = strB;
    putchar ('\n');
    while (*pA != '\0') {
        *pB++ = *pA++;
    }
    *pB = '\0';
    puts (strB);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40450935_40451033_1_14
40450935_40454311_81_93
Title: How reverse my List in C? 
----------------------------------------

int main () {
    List L1;
    Position P;
    int i;
    P = Header (L1);
    for (i = 0; i < 10; i++) {
        Insert (i, L1, P);
        P = Advance (P);
    }
    printf (" List L1: ");
    PrintList (L1);
}
----------------------------------------

int main () {
    List L1 = calloc (1, sizeof (struct Node));
    Position P = Header (L1);
    for (int i = 0; i < 10; i++) {
        Insert (i, L1, P);
        P = Advance (P);
    }
    printf (" List L1: ");
    PrintList (L1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40505383_40505749_19_32
40505383_40505887_4_24
Title: Delete numbers from an array? 
----------------------------------------

int main (void) {
    char a [25];
    int c, d, i = 0;
    while (i < 25 && (c = getchar ()) != EOF && c != '\n') {
        a[i++] = c;
    }
    d = i;
    putchar ('\n');
    element (a, & d);
    return 0;
}
----------------------------------------

int main () {
    char a [MAX_SIZE];
    int i = 0, d = 0;
    char c;
    do {
        c = getchar ();
        if (isalpha (c)) {
            a[d++] = c;
        }
        ++i;
    }
    while (c != EOF && i < MAX_SIZE);
    putchar ('\n');
    for (i = 0; i < d; ++i) {
        printf ("%c", a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40506092_40506231_8_22
40506092_40506402_7_22
Title: Functions and separating a program 
----------------------------------------

int main () {
    int num1, num2, avres;
    printf ("Enter two integers:\n");
    scanf ("%i %i", & num1, & num2);
    float avg = getAvg (num1, num2);
    printf ("The smallest number is %d", getLow (num1, num2));
    printf ("The largest number is %d", getHigh (num1, num2));
    printf ("%f is the average of the two integers\n", avg);
    return 0;
}
----------------------------------------

int main () {
    float avg;
    int num1, num2, low, high;
    printf ("Enter two integers:\n");
    scanf ("%i %i", & num1, & num2);
    low = getLow (num1, num2);
    high = getHigh (num1, num2);
    avg = getAvg (num1, num2);
    printf ("Low: %d, High: %d, Average: %f", low, high, avg);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40509680_40510020_1_23
40509680_40510678_11_68
Title: C - Find a word and get the next two 
----------------------------------------

int main (void) {
    char *str = "rated rat cat bat hat";
    char *key = "rat ";
    char *pointer = NULL;
    char nwords = 2;
    if ((pointer = strstr (str, key)) != NULL) {
        while (*pointer != ' ')
            pointer++;
        while (nwords >= 0) {
            printf ("%c", * pointer);
            if (*pointer == ' ') {
                nwords--;
            }
            else if (*pointer == '\0') {
                exit (0);
            }
            pointer++;
        }
    }
}
----------------------------------------

int main (int argc, char const *argv []) {
    FILE *filename;
    char line [MAXCHAR];
    char *word, *newword;
    char **allwords;
    int init_size = 8, count = 0, i;
    const char *key = "WORDTOFIND";
    filename = fopen ("files.txt", "r");
    if (filename == NULL) {
        fprintf (stderr, "%s\n", "Error reading file!");
        exit (EXIT_FAILURE);
    }
    allwords = malloc (init_size * sizeof (*allwords));
    exit_if_null (allwords, "Initial Allocation");
    while (fgets (line, MAXCHAR, filename) != NULL) {
        word = strtok (line, " \n");
        while (word != NULL) {
            if (count == init_size) {
                init_size *= 2;
                allwords = realloc (allwords, init_size * sizeof (*allwords));
            }
            allwords[count] = malloc (strlen (word) +1);
            exit_if_null (allwords [count], "Initial Allocation");
            newword = stripped_word (word);
            strcpy (allwords [count], newword);
            count++;
            word = strtok (NULL, " \n");
            free (newword);
        }
    }
    for (i = 0; i < count; i++) {
        if (strcmp (key, allwords[i]) == 0) {
            printf ("Next two words:\n");
            printf ("%s\n", allwords [i + 1]);
            printf ("%s\n", allwords [i + 2]);
        }
        free (allwords [i]);
        allwords[i] = NULL;
    }
    free (allwords);
    allwords = NULL;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40511500_40511958_3_25
40511500_40513825_5_36
Title: Scanf returns 0 without waiting for input 
----------------------------------------

int main (void) {
    int a = 0;
    int b = 0;
    int c;
    printf ("Number a:\n");
    while (scanf ("%d", &a) != 1) {
        printf ("Not a number, try again:\n");
        while ((c = getchar ()) != EOF && c != '\n')
            continue;
        if (c == EOF)
            exit (1);
    }
    printf ("Number b:\n");
    while (scanf ("%d", &b) != 1) {
        printf ("Not a number, try again:\n");
        while ((c = getchar ()) != EOF && c != '\n')
            continue;
        if (c == EOF)
            exit (1);
    }
    printf ("%d\n", a + b);
    return 0;
}
----------------------------------------

int main () {
    int a;
    int b;
    char str1 [100];
    char str2 [100];
    printf ("Number a:\n");
    scanf ("%s", & str1);
    a = atoi (str1);
    snprintf (str2, 100, "%d", a);
    if (strcmp (str1, str2) != 0) {
        printf ("Not a number. a=0!\n");
        a = 0;
    }
    printf ("Number b:\n");
    scanf ("%s", & str1);
    b = atoi (str1);
    snprintf (str2, 100, "%d", b);
    if (strcmp (str1, str2) != 0) {
        printf ("Not a number. b=0!\n");
        b = 0;
    }
    printf ("%d\n", a + b);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40557434_40557506_5_23
40557434_40558276_1_63
Title: Having trouble using strtok on stdin 
----------------------------------------

int main () {
    char *inputLine = (char *) malloc (80);
    char *commands [80];
    char *input;
    int i;
    int numCommands = 0;
    fgets (inputLine, 80, stdin);
    input = strtok (inputLine, " \n");
    for (i = 0; input != NULL; i++) {
        numCommands++;
        commands[i] = malloc (strlen (input) +1);
        strncpy (commands [i], input, strlen (input));
        input = strtok (NULL, " \n");
    }
    for (i = 0; i < numCommands; i++) {
        puts (commands [i]);
    }
}
----------------------------------------

int main (void) {
    char *line = NULL, *buf = NULL;
    size_t len = 0;
    size_t bufpos = 0, buflen = 0;
    ssize_t bytes = 0;
    char *p;
    char **command = NULL;
    size_t count = 0;
    int k;
    while ((bytes = getline (&line, &len, stdin)) != -1) {
        fprintf (stderr, "buf:%p, bufpos:%lu, buflen: %lu\n", buf, bufpos, buflen);
        buflen += bytes;
        buf = realloc (buf, buflen);
        strncpy (buf + bufpos, line, bytes);
        *(buf + bufpos + bytes - 1) = ' ';
        bufpos = buflen;
    }
    free (line);
    if (buflen == 0) {
        exit (EXIT_FAILURE);
    }
    if (buf[buflen - 1] == ' ')
        buf[buflen - 1] = 0;
    command = malloc (sizeof (char *));
    command[0] = buf;
    count = 1;
    for (p = buf; *p != 0; p++) {
        int delimit = 0;
        while (isspace (*p)) {
            delimit = 1;
            *p = 0;
            p++;
            if (!*p || !isspace (*p))
                break;
        }
        if (delimit) {
            command = realloc (command, (1 + count) * sizeof (char *));
            command[count] = p;
            count++;
        }
    }
    for (k = 0; k < count; k++) {
        fprintf (stdout, "%d : %s\n", k, command [k]);
    }
    free (command);
    free (buf);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40571028_40571260_37_63
40571028_40638247_50_87
Title: Iterative Inorder Traversal 
----------------------------------------

static void inorder (Node *root) {
    stack s;
    s.top = -1;
    int flag = 1;
    while (flag) {
        if (s.top != 9 && root != 0) {
            push (& s, root);
            root = root->llink;
        }
        else {
            if (s.top != -1) {
                root = pop (&s);
                printf (" %d", root -> data);
                root = root->rlink;
            }
            else
                flag = 0;
        }
    }
}
----------------------------------------

void inorder (Node *root) {
    stack *s;
    s = (stack *) malloc (sizeof (stack));
    s->top = -1;
    int flag = 1;
    bool traverse_left = true;
    while (flag) {
        if (root->llink != NULL && traverse_left) {
            push (s, root);
            root = root->llink;
        }
        else if ((root->llink == NULL && root->rlink != NULL) || (root->llink != NULL && !traverse_left)) {
            printf ("%d  ", root -> data);
            root = root->rlink;
            traverse_left = true;
        }
        else if (root->llink == NULL && root->rlink == NULL) {
            printf ("%d  ", root -> data);
            if (root->llink == NULL && root->rlink == NULL && s->top == -1) {
                flag = 0;
            }
            else {
                root = pop (s);
            }
            traverse_left = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40571028_40571260_99_124
40571028_40638247_123_136
Title: Iterative Inorder Traversal 
----------------------------------------

int main (void) {
    int nodes [] = {37, 2, 19, 9, 7, 41};
    enum {NUM_NODES = sizeof (nodes) / sizeof (nodes[0])};
    Node *h = NULL;
    h = create (h, 5);
    h = create (h, 1);
    h = create (h, 3);
    h = create (h, 8);
    h = create (h, 12);
    h = create (h, 51);
    printf ("Recursive:\n");
    inor (h);
    putchar ('\n');
    printf ("Iterative:\n");
    inorder (h);
    putchar ('\n');
    for (int i = 0; i < NUM_NODES; i++) {
        h = create (h, nodes[i]);
        printf ("Iterative:\n");
        inorder (h);
        putchar ('\n');
    }
}
----------------------------------------

int main () {
    Node *h = NULL;
    h = create (h, 5);
    h = create (h, 1);
    h = create (h, 3);
    h = create (h, 8);
    h = create (h, 12);
    h = create (h, 51);
    inorder (h);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40572410_40572968_1_22
40572410_40573599_1_22
Title: How to delete specific words from char array? 
----------------------------------------

void RemoveSame (char *start) {
    int i, j, k;
    for (i = 0; start[i];) {
        if (start[i] != ' ') {
            for (j = i + 1;; ++j) {
                if (start[j] == ' ' || !start[j]) {
                    if (start[i] == start[j - 1]) {
                        for (k = i; (start[k] = start[k + j - i]); ++k)
                            ;
                    }
                    else {
                        i = j;
                    }
                    break;
                }
            }
        }
        else {
            ++i;
        }
    }
}
----------------------------------------

void RemoveSame (char *str) {
    int i, j, to = 0;
    for (i = 0; str[i] != '\0';) {
        if (str[i] == ' ') {
            str[to++] = str[i++];
            continue;
        }
        for (j = 1; str[i + j] != '\0'; j++) {
            if (str[i + j] == ' ')
                break;
        }
        if (str[i] == str[i + j - 1]) {
            i += j;
            continue;
        }
        for (; j > 0; j--) {
            str[to++] = str[i++];
        }
    }
    str[to] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40576025_40576041_1_26
40576025_40576273_1_15
Title: My c function returns gibberish 
----------------------------------------

char GradeFromPercentage (float percentage) {
    char grade;
    if (percentage >= 90) {
        grade = 'A';
    }
    else if (percentage >= 70) {
        grade = 'B';
    }
    else if (percentage >= 50) {
        grade = 'C';
    }
    else if (percentage >= 30) {
        grade = 'D';
    }
    else {
        grade = 'F';
    }
    return grade;
}
----------------------------------------

char GradeFromPercentage (float percentage) {
    if (percentage >= 90) {
        return 'A';
    }
    if (percentage >= 70) {
        return 'B';
    }
    if (percentage >= 50) {
        return 'C';
    }
    if (percentage >= 30) {
        return 'D';
    }
    return 'F';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40578545_40578616_3_17
40578545_40578679_3_17
Title: C recursion return 2 values 
----------------------------------------

void get_sums (int *fp, int *sp, int n1, int n2) {
    printf ("fp: %d\n", * fp);
    printf ("sp: %d\n", * sp);
    printf ("n1: %d\n", n1);
    printf ("n2: %d\n", n2);
    if (n1 == 0 && n2 == 0) {
        return;
    }
    *fp += n1 % 10;
    *sp += n2 % 10;
    get_sums (fp, sp, n1 / 10, n2 / 10);
}
----------------------------------------

void get_sums (int *fp, int *sp, int n1, int n2) {
    printf ("fp: %d\n", * fp);
    printf ("sp: %d\n", * sp);
    printf ("n1: %d\n", n1);
    printf ("n2: %d\n", n2);
    if (n1 != 0 && n2 != 0) {
        *fp += (n1 % 10);
        *sp += (n2 % 10);
        get_sums (fp, sp, n1 / 10, n2 / 10);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40579481_40579581_1_18
40579481_40579738_5_26
Title: Finding the position of a substring in a larger string 
----------------------------------------

int findSubString (const char *original, const char *toFind) {
    size_t originalLength = strlen (original);
    size_t toFindLength = strlen (toFind);
    if (toFindLength <= originalLength) {
        for (size_t i = 0; i <= originalLength - toFindLength; i++) {
            for (size_t j = 0;; j++) {
                if (toFind[j] == '\0') {
                    return i;
                }
                if (original[i + j] != toFind[j]) {
                    break;
                }
            }
        }
    }
    return -1;
}
----------------------------------------

long long int findSubString (const char original [], const char toFind []) {
    size_t n = strlen (original);
    size_t m = strlen (toFind);
    long long int success = -1;
    if (!(n < m)) {
        n = n - m + 1;
        for (size_t i = 0; success == -1 && i < n; i++) {
            size_t j = 0;
            while (j < m && original[i + j] == toFind[j])
                j++;
            if (j == m)
                success = i;
        }
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40592090_40592405_27_46
40592090_40592848_8_49
Title: Converting string to integer array in c 
----------------------------------------

int main (void) {
    gint16 frame [5] = {10, 2, 3, 7, 5};
    char *str = gint16_to_string (frame, 5);
    printf ("encoded string: %s\n", str);
    gint16 n_oframe [5];
    string_to_gint16 (n_oframe, 5, str);
    printf ("n_oframe: ");
    for (int i = 0; i < 5; i++) {
        printf ("%d, ", n_oframe [i]);
    }
    printf ("\n");
    free (str);
    return 0;
}
----------------------------------------

int main () {
    int16_t frame [5] = {10, 2, 3, 7, 5};
    char *str = malloc (3 * (sizeof (frame) / sizeof (frame[0]) + 1));
    char *strp = str;
    size_t j;
    for (j = 0; j < sizeof (frame) / sizeof (frame[0]); j++) {
        snprintf (strp, 3, "%02x", frame [j]);
        strp += 2;
    }
    strp = str;
    printf ("str = %s\n", str);
    int16_t n_oframe [5];
    size_t i_m;
    char *d = (char *) malloc (3);
    for (i_m = 0; i_m < 5; i_m++) {
        strncpy (d, str, 2);
        n_oframe[i_m] = (int16_t) strtol (d, NULL, 16);
        str = str + 2;
    }
    for (j = 0; j < 5; j++) {
        printf ("%d ", n_oframe [j]);
    }
    putchar ('\n');
    free (d);
    free (strp);
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40595219_40595444_5_37
40595219_40595715_5_21
Title: My program doesn't manipulate a string's values correctly 
----------------------------------------

int main (void) {
    char s [256];
    fgets (s, sizeof s, stdin);
    s[strcspn (s, "\n")] = 0;
    printf ("%s\n", s);
    int i, n = 0, v [100], nr = 0;
    size_t j = 0;
    for (i = 0; i < s[i]; i++) {
        if (isdigit ((unsigned char) s[i])) {
            v[j++] = s[i];
            n++;
        }
    }
    for (i = 0; i < j; i++) {
        printf ("%c\n", v [i]);
    }
    if (j) {
        int multiply = 1;
        for (i = j - 1; i >= 0; i--) {
            nr = nr + (v[i] - '0') * multiply;
            multiply *= 10;
        }
    }
    printf ("%d", nr);
    return 0;
}
----------------------------------------

int main (void) {
    char s [100];
    unsigned nr = 0;
    size_t i, len;
    if (fgets (s, sizeof s, stdin) != NULL) {
        len = strlen (s);
        for (i = 0; i < len; i++) {
            if (isdigit (s[i])) {
                nr = nr * 10;
                nr = nr + s[i] - '0';
            }
        }
        printf ("%u\n", nr);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40595219_40595444_5_37
40595219_40661664_4_16
Title: My program doesn't manipulate a string's values correctly 
----------------------------------------

int main (void) {
    char s [256];
    fgets (s, sizeof s, stdin);
    s[strcspn (s, "\n")] = 0;
    printf ("%s\n", s);
    int i, n = 0, v [100], nr = 0;
    size_t j = 0;
    for (i = 0; i < s[i]; i++) {
        if (isdigit ((unsigned char) s[i])) {
            v[j++] = s[i];
            n++;
        }
    }
    for (i = 0; i < j; i++) {
        printf ("%c\n", v [i]);
    }
    if (j) {
        int multiply = 1;
        for (i = j - 1; i >= 0; i--) {
            nr = nr + (v[i] - '0') * multiply;
            multiply *= 10;
        }
    }
    printf ("%d", nr);
    return 0;
}
----------------------------------------

int main () {
    int c;
    while ((c = getchar ()) != EOF) {
        switch (c) {
        case '0' :
        case '1' :
        case '2' :
        case '3' :
        case '4' :
        case '5' :
        case '6' :
        case '7' :
        case '8' :
        case '9' :
        case '\n' :
            putchar (c);
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40595219_40595715_5_21
40595219_40661664_4_16
Title: My program doesn't manipulate a string's values correctly 
----------------------------------------

int main (void) {
    char s [100];
    unsigned nr = 0;
    size_t i, len;
    if (fgets (s, sizeof s, stdin) != NULL) {
        len = strlen (s);
        for (i = 0; i < len; i++) {
            if (isdigit (s[i])) {
                nr = nr * 10;
                nr = nr + s[i] - '0';
            }
        }
        printf ("%u\n", nr);
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    while ((c = getchar ()) != EOF) {
        switch (c) {
        case '0' :
        case '1' :
        case '2' :
        case '3' :
        case '4' :
        case '5' :
        case '6' :
        case '7' :
        case '8' :
        case '9' :
        case '\n' :
            putchar (c);
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40596860_40597575_54_74
40596860_40597613_29_46
Title: Deleting node from linked list recursively in C 
----------------------------------------

int main (void) {
    const int N = 10;
    List *head = NULL;
    for (int i = 0; i < N; i++) {
        head = add_node (head, i);
        display_list (head);
        printf ("\n");
    }
    for (int i = N; i != 0; i--) {
        head = remove_node (head, i -1);
        display_list (head);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    CadastroVoo *cabeca = (CadastroVoo *) malloc (sizeof (CadastroVoo));
    cabeca->proximo = NULL;
    inserir (cabeca, 10);
    inserir (cabeca, 20);
    inserir (cabeca, 30);
    inserir (cabeca, 40);
    inserir (cabeca, 50);
    cancelarPassagem (cabeca -> proximo, 20);
    CadastroVoo *p = cabeca->proximo;
    while (p != NULL) {
        printf ("%d\n", p -> numero);
        p = p->proximo;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40624822_40625915_59_71
40624822_40627177_62_74
Title: C - No output printing after changing strtok to incorporate strcmp 
----------------------------------------

void upper_case (char string []) {
    int c = 0;
    while (string[c] != '\0') {
        if (string[c] >= 'a' && string[c] <= 'z') {
            string[c] = string[c] - 32;
        }
        c++;
    }
}
----------------------------------------

void upper_case (char string []) {
    int c = 0;
    while (string[c] != '\0') {
        if (string[c] >= 'a' && string[c] <= 'z') {
            string[c] = string[c] - 32;
        }
        c++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40624822_40625915_8_57
40624822_40627177_8_60
Title: C - No output printing after changing strtok to incorporate strcmp 
----------------------------------------

int main () {
    char c, string [201];
    int i = 0, k = 0, j = 0;
    char strip [] = ",.:;?!";
    char *phrases [1000];
    int tally = 0;
    printf ("What gibberish shall I parse?\n");
    while ((c = getchar ()) != EOF)
        string[i++] = c;
    string[i] = '\0';
    filter_spaces (string);
    upper_case (string);
    char *phrase = strtok (string, strip);
    puts ("\nThe phrases entered are: ");
    while (phrase != '\0') {
        phrases[i++] = strdup (phrase);
        phrase = strtok (NULL, strip);
    }
    for (k = 0; k < i - 1; k++) {
        for (j = k + 1; j < k; j++) {
            if (strcmp (phrases[k], phrases[j]) == 0) {
                tally = tally++;
            }
            else {
                printf ("<%s>\n", phrase);
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char c, string [201];
    int i = 0, k = 0, j = 0;
    char strip [] = " ,.:;?!";
    char *phrases [1000];
    int tally = 0;
    printf ("What gibberish shall I parse?\n");
    while ((c = getchar ()) != '\n')
        string[i++] = c;
    string[i] = '\0';
    filter_spaces (string);
    upper_case (string);
    char *phrase = strtok (string, strip);
    puts ("\nThe phrases entered are: ");
    i = 0;
    while (phrase != '\0') {
        phrases[i] = strdup (phrase);
        int flag = 0;
        for (k = 0; k < i; k++) {
            if (strcmp (phrases[k], phrase) == 0) {
                tally = tally++;
                flag = 1;
                break;
            }
        }
        if (flag == 0) {
            printf ("**** %s \n", phrase);
        }
        phrase = strtok (NULL, strip);
        ++i;
    }
    printf ("Total Number of repeated Words = %d\n", tally);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40630910_40633442_6_50
40630910_40816503_3_36
Title: Setting number of looping 
----------------------------------------

int main () {
    int count [256] = {0};
    int c;
    int index_min = -1;
    int min = INT_MAX;
    int index_max = -1;
    int max = INT_MIN;
    while ((c = getchar ()) != EOF) {
        if (isprint (c)) {
            count[c]++;
            if (count[c] < min) {
                min = count[c];
                index_min = c;
            }
            if (count[c] > max) {
                max = count[c];
                index_max = c;
            }
        }
    }
    printf ("least common printable char: ");
    if (index_min != -1) {
        printf ("`%c` (%d times)\n", index_min, min);
    }
    else {
        printf ("N/A\n");
    }
    printf ("most common printable char:  ");
    if (index_max != -1) {
        printf ("`%c` (%d times)\n", index_max, max);
    }
    else {
        printf ("N/A\n");
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int c = 0, count [ARSZ] = {0};
    while ((c = getchar ()) != EOF)
        if (' ' <= c && c <= '~')
            count[c - ' ']++;
    if (argc > 1 && *argv[1])
        switch (argv[1][1]) {
        case 'm' :
            mostoften (count);
            break;
        case 'M' :
            mostoften (count);
            break;
        case 'l' :
            leastoften (count);
            break;
        case 'L' :
            leastoften (count);
            break;
        default :
            fprintf (stderr, "warning: unrecognized option, using " "'mostoften'.\n");
            mostoften (count);
        }
    else {
        fprintf (stderr, "warning: no option given using 'mostoften'.\n");
        mostoften (count);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40639097_40639347_6_33
40639097_40639452_6_23
Title: converting signed integer array to char array 
----------------------------------------

int main (void) {
    int16_t frame_i [5] = {10, -26, 35, 7, -35};
    size_t i;
    char *s = malloc (5 * 3 + 1);
    char *tmp = s;
    for (i = 0; i < 5; i++) {
        if (frame_i[i] >= 0) {
            snprintf (tmp, 3, "%02hd", frame_i [i]);
            tmp += 2;
        }
        else {
            snprintf (tmp, 4, "%03hd", frame_i [i]);
            tmp += 3;
        }
    }
    printf ("%s\n", s);
    free (s);
    return 0;
}
----------------------------------------

int main (void) {
    int16_t frame_i [5] = {10, -26, 35, 7, -35};
    size_t i, j;
    char *s = malloc (5 * 3 + 1);
    for (i = 0, j = 0; i < 5; i++) {
        snprintf (s + j, 4, "%hd", frame_i [i]);
        if (frame_i[i] < 0 && frame_i[i] <= -10)
            j += 3;
        else if (frame_i[i] < 0)
            j += 2;
        else if (frame_i[i] < 10)
            j += 1;
        else
            j += 2;
    }
    printf ("%s", s);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40639482_40640018_1_16
40639482_40640405_7_29
Title: Assignment to write a program that gives the user a choice between two options - C 
----------------------------------------

int main (void) {
    int i, choice;
    printf ("What would you like to do?\n  1. Print my name\n  2. Count down from 10\n\n");
    scanf (% d, & choice);
    if (choice == 1) {
        greeting ();
    }
    else {
        countdown ();
    }
}
----------------------------------------

int main () {
    char decision;
    printf ("press 'a' to run function1, press 'b' to run function2\n");
    decision = getch ();
    int someInt = 10;
    float someFloat = 11;
    if (decision == 'a') {
        function1 (someInt);
    }
    else if (decision == 'b') {
        printf ("%f", funcion2 (someFloat));
    }
    else {
        printf ("No decision has been made");
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40639720_40640256_4_15
40639720_40640327_4_12
Title: Infinite loop till key pressed 
----------------------------------------

int main (void) {
    int c = 0;
    while (c != 'n') {
        do {
            printf ("Hello\n");
        }
        while (!kbhit ());
        c = getch ();
    }
    return 0;
}
----------------------------------------

int main (void) {
    char c = 'y';
    while (c != 'n') {
        while (!kbhit ()) {
            printf ("Hello\n");
        }
        c = getch ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40639720_40640256_4_15
40639720_40640350_4_19
Title: Infinite loop till key pressed 
----------------------------------------

int main (void) {
    int c = 0;
    while (c != 'n') {
        do {
            printf ("Hello\n");
        }
        while (!kbhit ());
        c = getch ();
    }
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Hello\n");
        if (kbhit ()) {
            if ('n' == getch ()) {
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40639720_40640327_4_12
40639720_40640350_4_19
Title: Infinite loop till key pressed 
----------------------------------------

int main (void) {
    char c = 'y';
    while (c != 'n') {
        while (!kbhit ()) {
            printf ("Hello\n");
        }
        c = getch ();
    }
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Hello\n");
        if (kbhit ()) {
            if ('n' == getch ()) {
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40654219_40654830_4_25
40654219_40655153_8_25
Title: Four 1byte char to One 4byte int? 
----------------------------------------

int main () {
    char char_array [8] = {'0', '9', '2', '8', '1', '2', '3', '4'};
    int array_size = sizeof (char_array) / sizeof (char_array[0]);
    int sizeof_int = sizeof (int);
    int int_array [array_size / sizeof_int];
    char buf [sizeof_int + 1];
    for (int i = 0; i < array_size; i += sizeof_int) {
        memcpy (buf, char_array + i, sizeof_int);
        buf[sizeof_int] = '\0';
        int val = 0;
        if (sscanf (buf, "%d", &val) == -1)
            return -1;
        int_array[i / sizeof_int] = val;
    }
    for (int i = 0; i < array_size / sizeof_int; i++)
        printf ("%d\n", int_array[i]);
}
----------------------------------------

int main () {
    char charArray [CHAR_ARRAY_SIZE] = {'1', '2', '3', '4', '5', '6', '7', '8'};
    int intArray [2];
    for (int i = 0; i < CHAR_ARRAY_SIZE / 4; i++) {
        char ch1 = (charArray[4 * i + 0] - '0');
        char ch2 = (charArray[4 * i + 1] - '0');
        char ch3 = (charArray[4 * i + 2] - '0');
        char ch4 = (charArray[4 * i + 3] - '0');
        intArray[i] = ch1 * 1000 + ch2 * 100 + ch3 * 10 + ch4;
    }
    cout << "intArray[0] : " << intArray[0] << endl;
    cout << "intArray[1] : " << intArray[1] << endl;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40677052_40678095_3_22
40677052_40678116_3_22
Title: How to print `1234567890` to `1 2 3 4 5 6 7 8 9 0` with `C`? 
----------------------------------------

int main (void) {
    int n;
    printf ("n = ");
    fflush (stdout);
    scanf ("%d", & n);
    int n1 = n;
    int base = 1;
    while (n1 >= 10) {
        n1 /= 10;
        base *= 10;
    }
    printf ("\n---\n\nm = ");
    while (base) {
        printf ("%d ", n1 = n / base);
        n -= n1 * base;
        base /= 10;
    }
    return 0;
}
----------------------------------------

int main () {
    int n;
    char sNumToText [80];
    printf ("n = ");
    scanf ("%d", & n);
    sprintf (sNumToText, "%d", n);
    printf ("\n---\n\n m = ");
    n = 0;
    while (sNumToText[n] != '\0') {
        printf ("%c ", sNumToText [n]);
        n++;
    }
    printf ("\n\n---\n\n");
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40677052_40678095_3_22
40677052_40678953_3_13
Title: How to print `1234567890` to `1 2 3 4 5 6 7 8 9 0` with `C`? 
----------------------------------------

int main (void) {
    int n;
    printf ("n = ");
    fflush (stdout);
    scanf ("%d", & n);
    int n1 = n;
    int base = 1;
    while (n1 >= 10) {
        n1 /= 10;
        base *= 10;
    }
    printf ("\n---\n\nm = ");
    while (base) {
        printf ("%d ", n1 = n / base);
        n -= n1 * base;
        base /= 10;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c, i = 0, k;
    int a [100];
    while ((c = getche ()) != 13) {
        a[i++] = c;
    }
    for (k = 0; k < i; k++) {
        printf ("%c ", a [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40677052_40678095_3_22
40677052_40679331_4_35
Title: How to print `1234567890` to `1 2 3 4 5 6 7 8 9 0` with `C`? 
----------------------------------------

int main (void) {
    int n;
    printf ("n = ");
    fflush (stdout);
    scanf ("%d", & n);
    int n1 = n;
    int base = 1;
    while (n1 >= 10) {
        n1 /= 10;
        base *= 10;
    }
    printf ("\n---\n\nm = ");
    while (base) {
        printf ("%d ", n1 = n / base);
        n -= n1 * base;
        base /= 10;
    }
    return 0;
}
----------------------------------------

int main () {
    int n = 0, i, n1, p;
    char *number;
    printf ("n = ");
    scanf ("%d", & n);
    n1 = n;
    while (n1 / 10 != 0) {
        p++;
        n1 /= 10;
    }
    number = malloc (p +1);
    if (number != NULL) {
        printf ("\n---\n\nm = ");
        memset (number, 0, p + 1);
        sprintf (number, "%d", n);
        for (i = 0; i < p + 1; i++) {
            printf ("%c ", number [i]);
        }
        free (number);
    }
    printf ("\n\n---\n\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40677052_40678116_3_22
40677052_40678953_3_13
Title: How to print `1234567890` to `1 2 3 4 5 6 7 8 9 0` with `C`? 
----------------------------------------

int main () {
    int n;
    char sNumToText [80];
    printf ("n = ");
    scanf ("%d", & n);
    sprintf (sNumToText, "%d", n);
    printf ("\n---\n\n m = ");
    n = 0;
    while (sNumToText[n] != '\0') {
        printf ("%c ", sNumToText [n]);
        n++;
    }
    printf ("\n\n---\n\n");
    return (0);
}
----------------------------------------

int main (void) {
    int c, i = 0, k;
    int a [100];
    while ((c = getche ()) != 13) {
        a[i++] = c;
    }
    for (k = 0; k < i; k++) {
        printf ("%c ", a [k]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40677052_40678116_3_22
40677052_40679331_4_35
Title: How to print `1234567890` to `1 2 3 4 5 6 7 8 9 0` with `C`? 
----------------------------------------

int main () {
    int n;
    char sNumToText [80];
    printf ("n = ");
    scanf ("%d", & n);
    sprintf (sNumToText, "%d", n);
    printf ("\n---\n\n m = ");
    n = 0;
    while (sNumToText[n] != '\0') {
        printf ("%c ", sNumToText [n]);
        n++;
    }
    printf ("\n\n---\n\n");
    return (0);
}
----------------------------------------

int main () {
    int n = 0, i, n1, p;
    char *number;
    printf ("n = ");
    scanf ("%d", & n);
    n1 = n;
    while (n1 / 10 != 0) {
        p++;
        n1 /= 10;
    }
    number = malloc (p +1);
    if (number != NULL) {
        printf ("\n---\n\nm = ");
        memset (number, 0, p + 1);
        sprintf (number, "%d", n);
        for (i = 0; i < p + 1; i++) {
            printf ("%c ", number [i]);
        }
        free (number);
    }
    printf ("\n\n---\n\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40677052_40678953_3_13
40677052_40679331_4_35
Title: How to print `1234567890` to `1 2 3 4 5 6 7 8 9 0` with `C`? 
----------------------------------------

int main (void) {
    int c, i = 0, k;
    int a [100];
    while ((c = getche ()) != 13) {
        a[i++] = c;
    }
    for (k = 0; k < i; k++) {
        printf ("%c ", a [k]);
    }
    return 0;
}
----------------------------------------

int main () {
    int n = 0, i, n1, p;
    char *number;
    printf ("n = ");
    scanf ("%d", & n);
    n1 = n;
    while (n1 / 10 != 0) {
        p++;
        n1 /= 10;
    }
    number = malloc (p +1);
    if (number != NULL) {
        printf ("\n---\n\nm = ");
        memset (number, 0, p + 1);
        sprintf (number, "%d", n);
        for (i = 0; i < p + 1; i++) {
            printf ("%c ", number [i]);
        }
        free (number);
    }
    printf ("\n\n---\n\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40680633_40681523_18_63
40680633_40681550_4_30
Title: "Given an array of single digit positive integers convert to a whole number multiply by 2 return an array of new product with each digit in array" 
----------------------------------------

int *multTwo (int *arr, size_t len) {
    int value = 0;
    int n_digits = 0;
    while (len--) {
        value += *arr;
        value *= 10;
        arr++;
    }
    value /= 10;
    value *= 2;
    int *digits = malloc (sizeof (*digits));
    while ((value > 0) && (digits != NULL)) {
        digits[n_digits++] = value % 10;
        value /= 10;
        digits = realloc (digits, sizeof (*digits) * (n_digits + 1));
    }
    if (digits != NULL) {
        invert (digits, & digits [n_digits - 1]);
        printf ("[ ");
        for (int i = 0; i < n_digits; i++)
            printf ("%d, ", digits[i]);
        printf ("]\n");
    }
    return digits;
}
----------------------------------------

int *multTwo (int *arr, int len) {
    int *newarr;
    int newlen;
    if (*arr >= 5)
        newlen = len + 1;
    else
        newlen = len;
    newarr = (int *) malloc (sizeof (int) * newlen);
    memset (newarr, 0, newlen);
    int i, temp;
    for (i = 1; i <= len; i++) {
        temp = *(arr + i - 1) * 2;
        if (temp < 10) {
            *(newarr + i - 1) += temp;
        }
        else {
            *(newarr + i - 1) += temp / 10;
            *(newarr + i) += temp % 10;
        }
    }
    return newarr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40689471_40689757_11_38
40689471_40690044_13_35
Title: reading a number of type double from a text file 
----------------------------------------

int main (int argc, char *argv []) {
    char ch;
    double f, a [SIZE], b [SIZE];
    FILE *fa, *fb;
    if (argc != 3)
        die (1);
    fa = fopen (argv[1], "r");
    if (!fa)
        die (2);
    fb = fopen (argv[2], "r");
    if (!fb)
        die (3);
    for (int i = 0; i < SIZE; ++i)
        a[i] = b[i] = -1.0;
    while (fscanf (fa, " %c%lf", &ch, &f) == 2)
        if ('A' <= ch && ch <= 'Z')
            a[ch - 'A'] = f;
        else
            die (4);
    fclose (fa);
    while (fscanf (fb, " %c%lf", &ch, &f) == 2)
        if ('A' <= ch && ch <= 'Z')
            b[ch - 'A'] = f;
        else
            die (5);
    fclose (fb);
    double sum_d2 = 0;
    for (int i = 0; i < SIZE; ++i) {
        if (a[i] < 0 || b[i] < 0)
            die (100 + i);
        double d = a[i] - b[i];
        sum_d2 += d * d;
    }
    double rms = sqrt (sum_d2 / SIZE);
    printf ("RMS Frequency: %f\n", rms);
    return 0;
}
----------------------------------------

int main (int argc, char const *argv []) {
    FILE *fp1, *fp2;
    double numbers1 [NUMLETTERS], numbers2 [NUMLETTERS];
    char letters1 [NUMLETTERS], letters2 [NUMLETTERS];
    double rms;
    fp1 = fopen (argv[1], "r");
    fp2 = fopen (argv[2], "r");
    if (fp1 == NULL || fp2 == NULL) {
        fprintf (stderr, "%s\n", "Error Reading a File");
        exit (EXIT_FAILURE);
    }
    read_file (numbers1, letters1, fp1);
    read_file (numbers2, letters2, fp2);
    if (calc_rms (numbers1, numbers2, NUMLETTERS, &rms) != RMS_INVALID) {
        printf ("RMS Frequency: %f\n", rms);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40694199_40694280_3_19
40694199_40695114_3_14
Title: unique element/s for array in every row 
----------------------------------------

int main (void) {
    char lets [29] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int k = 0;
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j <= i; j++) {
            printf ("%c", lets [k]);
            k++;
        }
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    char lets [] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    for (size_t i = 0, j = 0; lets[j]; i++) {
        for (size_t k = i + 1; lets[j] && k; --k)
            putchar (lets[j++]);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40712462_40712976_4_37
40712462_40713130_1_29
Title: Add spaces to words in textfile 
----------------------------------------

static int filterWords (const char *ifile, const char *ofile) {
    FILE *ptr_file1 = fopen (ifile, "r");
    if (!ptr_file1) {
        fprintf (stderr, "Failed to open file %s for reading\n", ifile);
        return 1;
    }
    FILE *ptr_file2 = fopen (ofile, "w");
    if (!ptr_file2) {
        fprintf (stderr, "Failed to open file %s for writing\n", ofile);
        fclose (ptr_file1);
        return 1;
    }
    char buf [1000];
    while (fgets (buf, sizeof (buf), ptr_file1) != NULL) {
        buf[strcspn (buf, "\n")] = '\0';
        int len = strlen (buf);
        if (len < 10) {
            memset (buf + len, 'x', 10 - len);
            buf[10] = '\0';
        }
        fprintf (ptr_file2, "%s\n", buf);
    }
    fclose (ptr_file1);
    fclose (ptr_file2);
    return 0;
}
----------------------------------------

int filterWords (void) {
    FILE *ptr_file;
    FILE *ptr_file2;
    char buf [1000];
    int strLen = 0;
    int numberSpaces;
    ptr_file = fopen ("animals.txt", "r");
    if (!ptr_file)
        return 1;
    while (fgets (buf, 1000, ptr_file) != NULL) {
        strLen = strlen (buf) - 1;
        if (strLen < 10) {
            numberSpaces = 10 - (strLen);
            memset (& buf [strLen], 'x', numberSpaces);
            buf[strLen + numberSpaces] = '\n';
            buf[strLen + numberSpaces + 1] = '\0';
            ptr_file2 = fopen ("newAnimal.txt", "a");
            fputs (buf, ptr_file2);
            fclose (ptr_file2);
        }
    }
    fclose (ptr_file);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_19875391_4_21
4072190_26188789_8_39
Title: Check if input is integer type in C 
----------------------------------------

int main () {
    int x;
    float check;
reprocess :
    printf ("enter a integer number:");
    scanf ("%f", & check);
    x = check;
    if (x == check)
        printf ("\nYour number is %d", x);
    else {
        printf ("\nThis is not an integer number, please insert an integer!\n\n");
        goto reprocess;
    }
    _getch ();
    return 0;
}
----------------------------------------

int main (void) {
    char n [10];
    int intTest;
    printf ("Give me an int: ");
    do {
        scanf (" %s", n);
        intTest = TRUE;
        int i = 0, l = strlen (n);
        if (n[0] == '-')
            i++;
        while (i < l) {
            if (n[i] < '0' || n[i] > '9') {
                intTest = FALSE;
                break;
            }
            i++;
        }
        if (intTest == TRUE)
            printf ("%i\n", atoi (n));
        else
            printf ("Retry: ");
    }
    while (intTest == FALSE);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_19875391_4_21
4072190_27032760_3_20
Title: Check if input is integer type in C 
----------------------------------------

int main () {
    int x;
    float check;
reprocess :
    printf ("enter a integer number:");
    scanf ("%f", & check);
    x = check;
    if (x == check)
        printf ("\nYour number is %d", x);
    else {
        printf ("\nThis is not an integer number, please insert an integer!\n\n");
        goto reprocess;
    }
    _getch ();
    return 0;
}
----------------------------------------

int main (void) {
    float a;
    int q;
    printf ("\nInsert number\t");
    scanf ("%f", & a);
    q = (int) a;
    ++q;
    if ((q - a) != 1)
        printf ("\nThe number is not an integer\n\n");
    else
        printf ("\nThe number is an integer\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_19875391_4_21
4072190_35035883_4_23
Title: Check if input is integer type in C 
----------------------------------------

int main () {
    int x;
    float check;
reprocess :
    printf ("enter a integer number:");
    scanf ("%f", & check);
    x = check;
    if (x == check)
        printf ("\nYour number is %d", x);
    else {
        printf ("\nThis is not an integer number, please insert an integer!\n\n");
        goto reprocess;
    }
    _getch ();
    return 0;
}
----------------------------------------

void main () {
    double x;
    int notDouble;
    int true = 1;
    while (true) {
        printf ("Input an integer: \n");
        scanf ("%lf", & x);
        if (x / x != 1) {
            notDouble = 1;
            fflush (stdin);
        }
        if (notDouble != 1) {
            printf ("Input is valid\n");
        }
        else {
            printf ("Input is invalid\n");
        }
        notDouble = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_19875391_4_21
4072190_40479619_4_18
Title: Check if input is integer type in C 
----------------------------------------

int main () {
    int x;
    float check;
reprocess :
    printf ("enter a integer number:");
    scanf ("%f", & check);
    x = check;
    if (x == check)
        printf ("\nYour number is %d", x);
    else {
        printf ("\nThis is not an integer number, please insert an integer!\n\n");
        goto reprocess;
    }
    _getch ();
    return 0;
}
----------------------------------------

int main () {
    char *string;
    int number;
    printf ("Enter a number :");
    scanf ("%s", string);
    number = atoi (string);
    if (number != 0)
        printf ("The number is %d\n", number);
    else
        printf ("Not a number !!!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_26188789_8_39
4072190_27032760_3_20
Title: Check if input is integer type in C 
----------------------------------------

int main (void) {
    char n [10];
    int intTest;
    printf ("Give me an int: ");
    do {
        scanf (" %s", n);
        intTest = TRUE;
        int i = 0, l = strlen (n);
        if (n[0] == '-')
            i++;
        while (i < l) {
            if (n[i] < '0' || n[i] > '9') {
                intTest = FALSE;
                break;
            }
            i++;
        }
        if (intTest == TRUE)
            printf ("%i\n", atoi (n));
        else
            printf ("Retry: ");
    }
    while (intTest == FALSE);
    return 0;
}
----------------------------------------

int main (void) {
    float a;
    int q;
    printf ("\nInsert number\t");
    scanf ("%f", & a);
    q = (int) a;
    ++q;
    if ((q - a) != 1)
        printf ("\nThe number is not an integer\n\n");
    else
        printf ("\nThe number is an integer\n\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_26188789_8_39
4072190_35035883_4_23
Title: Check if input is integer type in C 
----------------------------------------

int main (void) {
    char n [10];
    int intTest;
    printf ("Give me an int: ");
    do {
        scanf (" %s", n);
        intTest = TRUE;
        int i = 0, l = strlen (n);
        if (n[0] == '-')
            i++;
        while (i < l) {
            if (n[i] < '0' || n[i] > '9') {
                intTest = FALSE;
                break;
            }
            i++;
        }
        if (intTest == TRUE)
            printf ("%i\n", atoi (n));
        else
            printf ("Retry: ");
    }
    while (intTest == FALSE);
    return 0;
}
----------------------------------------

void main () {
    double x;
    int notDouble;
    int true = 1;
    while (true) {
        printf ("Input an integer: \n");
        scanf ("%lf", & x);
        if (x / x != 1) {
            notDouble = 1;
            fflush (stdin);
        }
        if (notDouble != 1) {
            printf ("Input is valid\n");
        }
        else {
            printf ("Input is invalid\n");
        }
        notDouble = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_26188789_8_39
4072190_40479619_4_18
Title: Check if input is integer type in C 
----------------------------------------

int main (void) {
    char n [10];
    int intTest;
    printf ("Give me an int: ");
    do {
        scanf (" %s", n);
        intTest = TRUE;
        int i = 0, l = strlen (n);
        if (n[0] == '-')
            i++;
        while (i < l) {
            if (n[i] < '0' || n[i] > '9') {
                intTest = FALSE;
                break;
            }
            i++;
        }
        if (intTest == TRUE)
            printf ("%i\n", atoi (n));
        else
            printf ("Retry: ");
    }
    while (intTest == FALSE);
    return 0;
}
----------------------------------------

int main () {
    char *string;
    int number;
    printf ("Enter a number :");
    scanf ("%s", string);
    number = atoi (string);
    if (number != 0)
        printf ("The number is %d\n", number);
    else
        printf ("Not a number !!!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_27032760_3_20
4072190_35035883_4_23
Title: Check if input is integer type in C 
----------------------------------------

int main (void) {
    float a;
    int q;
    printf ("\nInsert number\t");
    scanf ("%f", & a);
    q = (int) a;
    ++q;
    if ((q - a) != 1)
        printf ("\nThe number is not an integer\n\n");
    else
        printf ("\nThe number is an integer\n\n");
    return 0;
}
----------------------------------------

void main () {
    double x;
    int notDouble;
    int true = 1;
    while (true) {
        printf ("Input an integer: \n");
        scanf ("%lf", & x);
        if (x / x != 1) {
            notDouble = 1;
            fflush (stdin);
        }
        if (notDouble != 1) {
            printf ("Input is valid\n");
        }
        else {
            printf ("Input is invalid\n");
        }
        notDouble = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_27032760_3_20
4072190_40479619_4_18
Title: Check if input is integer type in C 
----------------------------------------

int main (void) {
    float a;
    int q;
    printf ("\nInsert number\t");
    scanf ("%f", & a);
    q = (int) a;
    ++q;
    if ((q - a) != 1)
        printf ("\nThe number is not an integer\n\n");
    else
        printf ("\nThe number is an integer\n\n");
    return 0;
}
----------------------------------------

int main () {
    char *string;
    int number;
    printf ("Enter a number :");
    scanf ("%s", string);
    number = atoi (string);
    if (number != 0)
        printf ("The number is %d\n", number);
    else
        printf ("Not a number !!!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4072190_35035883_4_23
4072190_40479619_4_18
Title: Check if input is integer type in C 
----------------------------------------

void main () {
    double x;
    int notDouble;
    int true = 1;
    while (true) {
        printf ("Input an integer: \n");
        scanf ("%lf", & x);
        if (x / x != 1) {
            notDouble = 1;
            fflush (stdin);
        }
        if (notDouble != 1) {
            printf ("Input is valid\n");
        }
        else {
            printf ("Input is invalid\n");
        }
        notDouble = 0;
    }
}
----------------------------------------

int main () {
    char *string;
    int number;
    printf ("Enter a number :");
    scanf ("%s", string);
    number = atoi (string);
    if (number != 0)
        printf ("The number is %d\n", number);
    else
        printf ("Not a number !!!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40725464_40726719_3_40
40725464_40728334_1_27
Title: Distinguish between new line and errors when using sscanf 
----------------------------------------

int main (int argc, char **argv) {
    char line [] = " egsdfgfd rgege 100 185 20 11  hey45hey2 0d0  00 sddbrsdtbrtsdbrsf 342";
    int arrOfInt [10];
    char *data = line;
    int track, status = 0, index = 0;
    char str [100];
    while ((status = sscanf (data, "%s%n", str, &track)) != EOF) {
        if (status != 0) {
            int num = (int) strtol (str, 0, 10);
            char *i = str;
            if (num == 0) {
                while (*i) {
                    if (*i != '0')
                        break;
                    i++;
                }
            }
            if (*i == 0 || num != 0) {
                arrOfInt[index] = num;
                index++;
            }
        }
        else
            track = 1;
        data += track;
    }
    int i;
    for (i = 0; i < index; i++)
        printf ("%d ", arrOfInt[i]);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char line [] = "100 185 20 11 1000";
    int arrOfInt [10];
    char *data = line;
    int track, number, index = 0;
    int statutLine;
    while ((statutLine = sscanf (data, " %d%n", &number, &track)) == 1) {
        arrOfInt[index] = number;
        data += track;
        index++;
    }
    if (statutLine == 0) {
        printf ("Line invalide");
    }
    if (statutLine == EOF) {
        printf ("Line valide");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40725868_40726429_2_15
40725868_40726624_3_94
Title: C Language: Write a program that would take 30 integers and prints the largest number and the smallest number 
----------------------------------------

int main () {
    int n [5], i, largest, smallest;
    scanf ("%d%d%d%d%d", & n [0], & n [1], & n [2], & n [3], & n [4]);
    smallest = largest = n[0];
    for (i = 1; i < 5; i++) {
        if (smallest > n[i])
            smallest = n[i];
        if (largest < n[i])
            largest = n[i];
    }
    printf ("%d\t%d\n", smallest, largest);
}
----------------------------------------

int main (void) {
    {
        const size_t N = 30;
        int value;
        int smallest, largest;
        printf ("\nEnter %zu integers.", N);
        printf ("\nAnd I will give you the smallest and the largest.\n");
        size_t i = 0;
        while (i < N && scanf ("%d", &value) == 1) {
            if (i++ == 0) {
                smallest = largest = value;
            }
            else {
                if (value < smallest) {
                    smallest = value;
                }
                else if (largest < value) {
                    largest = value;
                }
            }
        }
        if (i != 0) {
            printf ("\nAmong %zu entered values " "the smallest is %d and the largest is %d\n", i, smallest, largest);
        }
    }
    {
        int num1, num2, num3, num4, num5;
        printf ("\nEnter five integers.");
        printf ("\nAnd I will give you the smallest and the largest.\n");
        scanf ("%d%d%d%d%d", & num1, & num2, & num3, & num4, & num5);
        if (!(num2 < num1) && !(num3 < num1) && !(num4 < num1) && !(num5 < num1)) {
            printf ("The smallest number is the first number with value %d\n", num1);
        }
        else if (!(num3 < num2) && !(num4 < num2) && !(num5 < num2)) {
            printf ("The smallest number is the second number with value %d\n", num2);
        }
        else if (!(num4 < num3) && !(num5 < num3)) {
            printf ("The smallest number is the third number with value %d\n", num3);
        }
        else if (!(num5 < num4)) {
            printf ("The smallest number is the fouth number with value %d\n", num4);
        }
        else {
            printf ("The smallest number is the fifth number with value %d\n", num5);
        }
        if (!(num1 < num2) && !(num1 < num3) && !(num1 < num4) && !(num1 < num5)) {
            printf ("The largest number is the first number with value %d\n", num1);
        }
        else if (!(num2 < num3) && !(num2 < num4) && !(num2 < num5)) {
            printf ("The largest number is the second number with value %d\n", num2);
        }
        else if (!(num3 < num4) && !(num3 < num5)) {
            printf ("The largest number is the third number with value %d\n", num3);
        }
        else if (!(num4 < num5)) {
            printf ("The largest number is the fouth number with value %d\n", num4);
        }
        else {
            printf ("The largest number is the fifth number with value %d\n", num5);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40725868_40726429_2_15
40725868_40727122_2_16
Title: C Language: Write a program that would take 30 integers and prints the largest number and the smallest number 
----------------------------------------

int main () {
    int n [5], i, largest, smallest;
    scanf ("%d%d%d%d%d", & n [0], & n [1], & n [2], & n [3], & n [4]);
    smallest = largest = n[0];
    for (i = 1; i < 5; i++) {
        if (smallest > n[i])
            smallest = n[i];
        if (largest < n[i])
            largest = n[i];
    }
    printf ("%d\t%d\n", smallest, largest);
}
----------------------------------------

int main () {
    int input, i, largest, smallest;
    scanf ("%d", & input);
    smallest = largest = input;
    for (i = 1; i < 5; i++) {
        scanf ("%d", & input);
        if (smallest > input)
            smallest = input;
        if (largest < input)
            largest = input;
    }
    printf ("%d\t%d\n", smallest, largest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40725868_40726624_3_94
40725868_40727122_2_16
Title: C Language: Write a program that would take 30 integers and prints the largest number and the smallest number 
----------------------------------------

int main (void) {
    {
        const size_t N = 30;
        int value;
        int smallest, largest;
        printf ("\nEnter %zu integers.", N);
        printf ("\nAnd I will give you the smallest and the largest.\n");
        size_t i = 0;
        while (i < N && scanf ("%d", &value) == 1) {
            if (i++ == 0) {
                smallest = largest = value;
            }
            else {
                if (value < smallest) {
                    smallest = value;
                }
                else if (largest < value) {
                    largest = value;
                }
            }
        }
        if (i != 0) {
            printf ("\nAmong %zu entered values " "the smallest is %d and the largest is %d\n", i, smallest, largest);
        }
    }
    {
        int num1, num2, num3, num4, num5;
        printf ("\nEnter five integers.");
        printf ("\nAnd I will give you the smallest and the largest.\n");
        scanf ("%d%d%d%d%d", & num1, & num2, & num3, & num4, & num5);
        if (!(num2 < num1) && !(num3 < num1) && !(num4 < num1) && !(num5 < num1)) {
            printf ("The smallest number is the first number with value %d\n", num1);
        }
        else if (!(num3 < num2) && !(num4 < num2) && !(num5 < num2)) {
            printf ("The smallest number is the second number with value %d\n", num2);
        }
        else if (!(num4 < num3) && !(num5 < num3)) {
            printf ("The smallest number is the third number with value %d\n", num3);
        }
        else if (!(num5 < num4)) {
            printf ("The smallest number is the fouth number with value %d\n", num4);
        }
        else {
            printf ("The smallest number is the fifth number with value %d\n", num5);
        }
        if (!(num1 < num2) && !(num1 < num3) && !(num1 < num4) && !(num1 < num5)) {
            printf ("The largest number is the first number with value %d\n", num1);
        }
        else if (!(num2 < num3) && !(num2 < num4) && !(num2 < num5)) {
            printf ("The largest number is the second number with value %d\n", num2);
        }
        else if (!(num3 < num4) && !(num3 < num5)) {
            printf ("The largest number is the third number with value %d\n", num3);
        }
        else if (!(num4 < num5)) {
            printf ("The largest number is the fouth number with value %d\n", num4);
        }
        else {
            printf ("The largest number is the fifth number with value %d\n", num5);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int input, i, largest, smallest;
    scanf ("%d", & input);
    smallest = largest = input;
    for (i = 1; i < 5; i++) {
        scanf ("%d", & input);
        if (smallest > input)
            smallest = input;
        if (largest < input)
            largest = input;
    }
    printf ("%d\t%d\n", smallest, largest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40732902_40733311_4_32
40732902_40733551_4_26
Title: Copy only a part of the contents of file1.txt to file2.txt 
----------------------------------------

int main () {
    char line [100];
    FILE *ptr1 = fopen ("file1.txt", "r");
    FILE *ptr2 = fopen ("file2.txt", "a");
    while (fgets (line, sizeof (line), ptr1)) {
        if (line[0] == '\n')
            continue;
        char *lineEnd = strstr (line, ", Hobbies");
        *lineEnd = '\0';
        fprintf (ptr2, "%s\n", line);
    }
    fclose (ptr1);
    fclose (ptr2);
    return 0;
}
----------------------------------------

int main () {
    FILE *fp1;
    FILE *fp2;
    char line [100];
    char *token;
    const char s [2] = ",";
    fp1 = fopen ("file1.txt", "r");
    fp2 = fopen ("file2.txt", "a");
    while (fgets (line, sizeof (line), fp1)) {
        token = strtok (line, s);
        fprintf (fp2, "%s", token);
        token = strtok (NULL, s);
        fprintf (fp2, "%s\n", token);
    }
    fclose (fp1);
    fclose (fp2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40732902_40733311_4_32
40732902_40734129_11_46
Title: Copy only a part of the contents of file1.txt to file2.txt 
----------------------------------------

int main () {
    char line [100];
    FILE *ptr1 = fopen ("file1.txt", "r");
    FILE *ptr2 = fopen ("file2.txt", "a");
    while (fgets (line, sizeof (line), ptr1)) {
        if (line[0] == '\n')
            continue;
        char *lineEnd = strstr (line, ", Hobbies");
        *lineEnd = '\0';
        fprintf (ptr2, "%s\n", line);
    }
    fclose (ptr1);
    fclose (ptr2);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *inputFile, *outputFile;
    char *curLine = NULL, *token;
    size_t len = 0;
    ssize_t read;
    inputFile = fopen (INPUT_FILE_NAME, "r");
    if (NULL == inputFile) {
        printf ("Could not open the input file '%s'\n", INPUT_FILE_NAME);
        exit (EXIT_FAILURE);
    }
    outputFile = fopen (OUTPUT_FILE_NAME, "w");
    if (NULL == outputFile) {
        printf ("Could not open the output file '%s'\n", OUTPUT_FILE_NAME);
        fclose (inputFile);
        exit (EXIT_FAILURE);
    }
    while ((read = getline (&curLine, &len, inputFile)) != -1) {
        printf ("%s\n", curLine);
        token = strtok (curLine, TOKEN_STR);
        fprintf (outputFile, "%s", token);
        fprintf (outputFile, ", ");
        token = strtok (NULL, TOKEN_STR);
        fprintf (outputFile, "%s\n", token);
    }
    fclose (outputFile);
    fclose (inputFile);
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40732902_40733551_4_26
40732902_40734129_11_46
Title: Copy only a part of the contents of file1.txt to file2.txt 
----------------------------------------

int main () {
    FILE *fp1;
    FILE *fp2;
    char line [100];
    char *token;
    const char s [2] = ",";
    fp1 = fopen ("file1.txt", "r");
    fp2 = fopen ("file2.txt", "a");
    while (fgets (line, sizeof (line), fp1)) {
        token = strtok (line, s);
        fprintf (fp2, "%s", token);
        token = strtok (NULL, s);
        fprintf (fp2, "%s\n", token);
    }
    fclose (fp1);
    fclose (fp2);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *inputFile, *outputFile;
    char *curLine = NULL, *token;
    size_t len = 0;
    ssize_t read;
    inputFile = fopen (INPUT_FILE_NAME, "r");
    if (NULL == inputFile) {
        printf ("Could not open the input file '%s'\n", INPUT_FILE_NAME);
        exit (EXIT_FAILURE);
    }
    outputFile = fopen (OUTPUT_FILE_NAME, "w");
    if (NULL == outputFile) {
        printf ("Could not open the output file '%s'\n", OUTPUT_FILE_NAME);
        fclose (inputFile);
        exit (EXIT_FAILURE);
    }
    while ((read = getline (&curLine, &len, inputFile)) != -1) {
        printf ("%s\n", curLine);
        token = strtok (curLine, TOKEN_STR);
        fprintf (outputFile, "%s", token);
        fprintf (outputFile, ", ");
        token = strtok (NULL, TOKEN_STR);
        fprintf (outputFile, "%s\n", token);
    }
    fclose (outputFile);
    fclose (inputFile);
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4074353_4074369_1_9
4074353_4074380_1_9
Title: incompatible pointer type 
----------------------------------------

int function (int num []) {
    int i;
    srand ((unsigned (time (NULL));
    for (i = 0; i < 10; i++) {
        num[i] = rand () % 10;
        printf ("%d", num [i]);
    }
    return 0;
}
----------------------------------------

int function (int num []) {
    int i;
    for (i = 0; i < 10; i++) {
        srand ((unsigned) time (NULL));
        num[i] = rand () % 10;
        printf ("%d", num [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40746307_40746408_1_11
40746307_40746464_2_12
Title: Can printf print defined strings? 
----------------------------------------

int main () {
    char A [80];
    char ch;
    printf ("enter message");
    scanf (" %c", & ch);
    A[0] = ch;
    printf ("%c\t", A [0]);
    return 0;
}
----------------------------------------

int main () {
    char A [80] = {0};
    char ch;
    printf ("enter message");
    scanf (" %c", & ch);
    A[0] = ch;
    printf ("%s\t", A);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40746307_40746408_1_11
40746307_40746518_9_30
Title: Can printf print defined strings? 
----------------------------------------

int main () {
    char A [80];
    char ch;
    printf ("enter message");
    scanf (" %c", & ch);
    A[0] = ch;
    printf ("%c\t", A [0]);
    return 0;
}
----------------------------------------

int main (void) {
    char ch;
    int i;
    printf ("enter message");
    if (scanf (" %c", &ch) != 1) {
        puts ("read error");
        return 1;
    }
    for (i = 0; a[i] != NULL; i++) {
        if (a[i][0] == ch) {
            printf ("%s\t", a [i]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40746307_40746464_2_12
40746307_40746518_9_30
Title: Can printf print defined strings? 
----------------------------------------

int main () {
    char A [80] = {0};
    char ch;
    printf ("enter message");
    scanf (" %c", & ch);
    A[0] = ch;
    printf ("%s\t", A);
    return 0;
}
----------------------------------------

int main (void) {
    char ch;
    int i;
    printf ("enter message");
    if (scanf (" %c", &ch) != 1) {
        puts ("read error");
        return 1;
    }
    for (i = 0; a[i] != NULL; i++) {
        if (a[i][0] == ch) {
            printf ("%s\t", a [i]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40749674_40750274_1_19
40749674_40751060_3_27
Title: How to write multiple strings to file from user input? 
----------------------------------------

void createFile () {
    char userfilename [40];
    char *filecontent;
    FILE *filePointer;
    size_t len = 0;
    ssize_t read;
    printf ("How do you want to name your file? ");
    scanf ("%s", & userfilename);
    filePointer = fopen (userfilename, "w");
    printf ("Enter file content: ");
    while ((read = getline (&filecontent, &len, stdin)) != -1) {
        fprintf (filePointer, "%s", filecontent);
    }
    fclose (filePointer);
    printf ("Successful.");
}
----------------------------------------

void createFile () {
    char userfilename [40];
    char filecontent [1000];
    FILE *filePointer;
    printf ("How do you want to name your file? ");
    scanf ("%s", & userfilename);
    filePointer = fopen (userfilename, "w");
    printf ("Enter file content: ");
    char c;
    while ((c = getchar ()) != EOF)
        fputc (c, filePointer);
    fclose (filePointer);
    printf ("Successful.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40749674_40750274_1_19
40749674_40752822_1_20
Title: How to write multiple strings to file from user input? 
----------------------------------------

void createFile () {
    char userfilename [40];
    char *filecontent;
    FILE *filePointer;
    size_t len = 0;
    ssize_t read;
    printf ("How do you want to name your file? ");
    scanf ("%s", & userfilename);
    filePointer = fopen (userfilename, "w");
    printf ("Enter file content: ");
    while ((read = getline (&filecontent, &len, stdin)) != -1) {
        fprintf (filePointer, "%s", filecontent);
    }
    fclose (filePointer);
    printf ("Successful.");
}
----------------------------------------

void createFile () {
    char userfilename [40];
    char filecontent [1000];
    FILE *filePointer;
    printf ("How do you want to name your file? ");
    scanf ("%s", userfilename);
    if ((filePointer = fopen (userfilename, "w")) != NULL) {
        printf ("Enter file content(or exit): ");
        while ((fgets (filecontent, sizeof (filecontent), stdin))) {
            if (strcmp (filecontent, "exit\n") == 0) {
                break;
            }
            fputs (filecontent, filePointer);
        }
        fclose (filePointer);
        printf ("Successful.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40749674_40751060_3_27
40749674_40752822_1_20
Title: How to write multiple strings to file from user input? 
----------------------------------------

void createFile () {
    char userfilename [40];
    char filecontent [1000];
    FILE *filePointer;
    printf ("How do you want to name your file? ");
    scanf ("%s", & userfilename);
    filePointer = fopen (userfilename, "w");
    printf ("Enter file content: ");
    char c;
    while ((c = getchar ()) != EOF)
        fputc (c, filePointer);
    fclose (filePointer);
    printf ("Successful.");
}
----------------------------------------

void createFile () {
    char userfilename [40];
    char filecontent [1000];
    FILE *filePointer;
    printf ("How do you want to name your file? ");
    scanf ("%s", userfilename);
    if ((filePointer = fopen (userfilename, "w")) != NULL) {
        printf ("Enter file content(or exit): ");
        while ((fgets (filecontent, sizeof (filecontent), stdin))) {
            if (strcmp (filecontent, "exit\n") == 0) {
                break;
            }
            fputs (filecontent, filePointer);
        }
        fclose (filePointer);
        printf ("Successful.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40752731_40752895_3_23
40752731_40752923_3_22
Title: To check if two words are equal to each other?(C) 
----------------------------------------

int main () {
    int i;
    char word_array [10] [20] = {"araba", "car", "kalem", "pencil", "derin", "deep", "mavi", "blue", "el", "hand"};
    char search [10] = "araba";
    for (i = 0; i < 10; i++) {
        if (strcmp (word_array[i], search) == 0) {
            printf ("i found: %s\n", i);
            break;
        }
    }
    if (i >= 10) {
        printf ("The word %s isnt in the array.\n", search);
    }
    return 0;
}
----------------------------------------

int main () {
    int i;
    char word_array [10] [20] = {"araba", "car", "kalem", "pencil", "derin", "deep", "mavi", "blue", "el", "hand"};
    char search [10] = "araba";
    for (i = 0; i < 10; i = i + 1) {
        if (strcmp (word_array[i], search) == 0) {
            printf ("%i found: %s\n", i, word_array [i]);
        }
        else {
            printf ("The word isnt in the array. %s\n", word_array [i], search);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40764814_40776753_7_91
40764814_40863983_56_92
Title: "Unnamed pipes in C chaning stdinstdout in fork()" 
----------------------------------------

int main (void) {
    int pdesk [2];
    int pipedesk [2];
    int pid;
    if (pipe (pipedesk) == -1 || pipe (pdesk) == -1) {
        perror ("Pipe");
        exit (1);
    }
    switch (pid = fork ()) {
    case -1 :
        perror ("Creating process");
        exit (1);
    case 0 :
        dup2 (pdesk[1], STDOUT_FILENO);
        close (pdesk [0]);
        close (pdesk [1]);
        close (pipedesk [0]);
        close (pipedesk [1]);
        execlp ("ls", "ls", "-al", (char *) NULL);
        perror ("ls");
        exit (1);
    default :
        if ((pid = fork ()) == 0) {
            if ((pid = fork ()) == 0) {
                dup2 (pdesk [0], STDIN_FILENO);
                close (pdesk [0]);
                close (pdesk [1]);
                dup2 (pipedesk [1], STDOUT_FILENO);
                close (pipedesk [0]);
                close (pipedesk [1]);
                execlp ("tr", "tr", "a-z", "A-Z", (char *) NULL);
                perror ("tr");
                exit (1);
            }
            dup2 (pipedesk [0], STDIN_FILENO);
            close (pdesk [0]);
            close (pdesk [1]);
            close (pipedesk [0]);
            close (pipedesk [1]);
            int desk = open ("testing", O_WRONLY | O_CREAT, 0644);
            if (desk == -1) {
                perror ("opening file");
                exit (1);
            }
            dup2 (desk, STDOUT_FILENO);
            if (close (desk) == -1) {
                perror ("closing file");
                exit (1);
            }
            execlp ("grep", "grep", "X", (char *) NULL);
            perror ("grep");
            exit (1);
        }
        close (pdesk [0]);
        close (pdesk [1]);
        close (pipedesk [0]);
        close (pipedesk [1]);
        break;
    }
    int status;
    int corpse;
    while ((corpse = wait (&status)) != -1)
        fprintf (stderr, "PID %d: child %d died 0x%.4X\n", (int) getpid (), corpse, status);
    return 0;
}
----------------------------------------

void main (int argc, char **argv) {
    int pipe1 [2];
    int pipe2 [2];
    int fd_to_close [10];
    signal (SIGPIPE, SIG_IGN);
    if (pipe (pipe1) == -1 || pipe (pipe2) == -1) {
        perror ("Pipe");
        exit (1);
    }
    fd_to_close[0] = pipe1[0];
    fd_to_close[1] = pipe1[1];
    fd_to_close[2] = pipe2[0];
    fd_to_close[3] = pipe2[1];
    fd_to_close[4] = -1;
    char *cmd1 [] = {"ls", "-al", NULL};
    char *cmd2 [] = {"tr", "a-z", "A-Z", NULL};
    char *cmd3 [] = {"grep", "X", NULL};
    pid_t child1 = forkExec (STDIN_FILENO, pipe1[1], STDERR_FILENO, cmd1, fd_to_close);
    pid_t child2 = forkExec (pipe1[0], pipe2[1], STDERR_FILENO, cmd2, fd_to_close);
    pid_t child3 = forkExec (pipe2[0], STDOUT_FILENO, STDERR_FILENO, cmd3, fd_to_close);
    closeAll (fd_to_close);
    printf ("pid of %s is %d\n", cmd1 [0], (int) child1);
    printf ("pid of %s is %d\n", cmd2 [0], (int) child2);
    printf ("pid of %s is %d\n", cmd3 [0], (int) child3);
    waitFor (child1);
    waitFor (child2);
    waitFor (child3);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40796394_40797422_21_46
40796394_40797944_1_32
Title: C: Merge-Sort of an array with uneven number of elements 
----------------------------------------

int mergesort (int key [], size_t n) {
    size_t i, j, k, m;
    int *w;
    w = calloc (n, sizeof (int));
    if (w == NULL)
        return -1;
    for (k = 1; k < n; k *= 2) {
        for (j = 0; j + k < n; j += k + m) {
            m = k;
            if (j + k + m > n) {
                m = n - j - k;
            }
            merge (key + j, k, key + j + k, m, w + j);
            for (i = 0; i < k + m; i++) {
                key[j + i] = w[i];
            }
        }
    }
    free (w);
    return 0;
}
----------------------------------------

void mergesort (int key [], int n) {
    int j, k, neglected, *w;
    w = calloc (n, sizeof (int));
    assert (w != NULL);
    for (k = 1; k < n; k *= 2) {
        for (j = 0; j <= n - (k * 2); j += 2 * k) {
            merge (key + j, key + j + k, w + j, k, k);
        }
        neglected = n % (2 * k);
        for (j = 0; j < n - neglected; ++j) {
            key[j] = w[j];
        }
        if (neglected != 0 && neglected < n) {
            merge (key + n - (2 * k) - neglected, key + n - neglected, w + n - (2 * k) - neglected, 2 * k, neglected);
            for (j = n - (2 * k) - neglected; j < n; ++j) {
                key[j] = w[j];
            }
        }
        for (j = 0; j < n; ++j) {
            key[j] = w[j];
        }
    }
    free (w);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40797758_40797902_6_47
40797758_40798031_3_46
Title: C: Occurrence of Letters in Text file 
----------------------------------------

int main (int argc, char *argv []) {
    unsigned char buffer [BUFFER_SIZE];
    long count [UCHAR_MAX + 1] = {0};
    long other;
    size_t i, n;
    const char *s;
    FILE *fp;
    if (argc <= 1) {
        fprintf (stderr, "missing input file\n");
        return 1;
    }
    fp = fopen (argv[1], "r");
    if (fp == NULL) {
        fprintf (stderr, "cannot open input file %s\n", argv [1]);
        return 1;
    }
    while ((n = fread (buffer, 1, sizeof buffer, fp)) != 0) {
        for (i = 0; i < n; i++) {
            count[buffer[i]] += 1;
        }
    }
    other = 0;
    for (i = 0; i <= UCHAR_MAX; i++) {
        if (isupper (i)) {
            count[tolower (i)] += count[i];
        }
        else {
            if (!islower (i))
                other += count[i];
        }
    }
    printf ("Character frequency in %s\n", argv [1]);
    printf ("Character   Count\n");
    for (s = "abcdefghijklmnopqrstuvwxyz"; *s; s++) {
        printf ("%c:\t%9ld\n", * s, count [(unsigned char) * s]);
    }
    printf ("other:\t%9ld\n", other);
    fclose (fp);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2) {
        printf ("Not enough arguments!\n");
        return -1;
    }
    int A [27] = {0}, c;
    FILE *inFile = fopen (argv[1], "r");
    if (inFile == NULL) {
        printf ("The file \"%s\" could not be opened.\n", argv [1]);
        return -2;
    }
    while ((c = fgetc (inFile)) != EOF) {
        if (c >= 'a' && c <= 'z') {
            c -= 'a';
            A[c]++;
        }
        else if (c >= 'A' && c <= 'Z') {
            c -= 'A';
            A[c]++;
        }
        else if (c == '\n') {
            continue;
        }
        else {
            A[26]++;
        }
    }
    for (c = 0; c < sizeof A / sizeof A[0] - 1; c++) {
        printf ("%c: %d\n", c + 'a', A [c]);
    }
    printf ("Other: %d\n", A [26]);
    fclose (inFile);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40812161_40814811_5_104
40812161_40831370_5_86
Title: Switch statement won't reiterate counting 
----------------------------------------

int main () {
    int n;
    int randN;
    int rand ();
    int countOne = 0;
    int countTwo = 0;
    int countThree = 0;
    int countFour = 0;
    int countFive = 0;
    int countSix = 0;
    int *p1;
    printf ("What is the size of the array\n");
    scanf ("%d", & n);
    int array [n];
    int i;
    for (i = 0; i < n; i++) {
        randN = rand () % 999;
        array[i] = randN;
    }
    for (i = 0; i < n; i++) {
        printf ("%i\n", array [i]);
    }
    for (i = 0; i < n; i++) {
        int tempCategory = array[i] / 100;
        switch (tempCategory) {
        case 0 :
        case 1 :
            {
                countOne++;
            }
            break;
        case 2 :
        case 3 :
            {
                countTwo++;
            }
            break;
        case 4 :
        case 5 :
            {
                countThree++;
            }
            break;
        case 6 :
        case 7 :
            {
                countFour++;
            }
            break;
        case 8 :
        case 9 :
            {
                countFive++;
            }
            break;
        default :
            {
                printf ("Invalid number array[%d]=[%d] tempCategory[%d]\n", i, array [i], tempCategory);
            }
            break;
        }
    }
    printf ("There is %d integers between 0 and 199\n", countOne);
    printf ("There is %d integers between 200 and 399\n", countTwo);
    printf ("There is %d integers between 400 and 599\n", countThree);
    printf ("There is %d integers between 600 and 799\n", countFour);
    printf ("There is %d integers between 800 and 999\n", countFive);
}
----------------------------------------

int main () {
    int n;
    int randN;
    int rand ();
    int countOne = 0;
    int countTwo = 0;
    int countThree = 0;
    int countFour = 0;
    int countFive = 0;
    printf ("What is the size of the array\n");
    scanf ("%d", & n);
    int array [n];
    int i;
    for (i = 0; i < n; i++) {
        randN = rand () % 999;
        array[i] = randN;
    }
    for (i = 0; i < n; i++) {
        printf ("%i\n", array [i]);
    }
    for (i = 0; i < n; i++) {
        if (array[i] >= 0 && array[i] <= 199) {
            countOne++;
        }
        else if (array[i] >= 200 && array[i] <= 399) {
            countTwo++;
        }
        else if (array[i] >= 400 && array[i] <= 599) {
            countThree++;
        }
        else if (array[i] >= 600 && array[i] <= 799) {
            countFour++;
        }
        else {
            countFive++;
        }
    }
    printf ("There is %d integers between 0 and 199\n", countOne);
    printf ("There is %d integers between 200 and 399\n", countTwo);
    printf ("There is %d integers between 400 and 599\n", countThree);
    printf ("There is %d integers between 600 and 799\n", countFour);
    printf ("There is %d integers between 800 and 999\n", countFive);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40835625_40835937_1_20
40835625_40837615_25_43
Title: C Programming: Reading a file and storing in array of struct 
----------------------------------------

int main (void) {
    struct Item I;
    int i;
    FILE *ck;
    int ret;
    ck = fopen ("test.txt", "r");
    if (ck) {
        for (i = 0; i < 3; i++) {
            ret = load (&I, ck);
            if (ret < 0)
                break;
            display (I, 0);
        }
        fclose (ck);
    }
    return 0;
}
----------------------------------------

int main (void) {
    allitems_t *allitems;
    FILE *fp;
    fp = fopen ("test.txt", "r");
    if (fp == NULL) {
        fprintf (stderr, "%s\n", "Error reading file!\n");
        exit (EXIT_FAILURE);
    }
    allitems = initialize_arraystructs ();
    read_insert_items (fp, allitems);
    print_arraystructs (allitems);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40837206_40837703_4_27
40837206_40837751_7_46
Title: Unnecessary new line character while taking multiple strings as input 
----------------------------------------

void main () {
    char *arr [20], str [40];
    int n;
    int ch;
    printf ("enter the number of strings\n");
    scanf ("%d", & n);
    int i;
    printf ("Enter the strings\n");
    while ((ch = getchar ()) != '\n' && ch != EOF)
        ;
    for (i = 0; i < n; i++) {
        gets (str);
        arr[i] = (char *) malloc (sizeof str);
        strcpy (arr [i], str);
    }
    printf ("The Strings are:\n");
    for (i = 0; i < n; i++) {
        printf ("%s", arr [i]);
        printf ("\n");
    }
}
----------------------------------------

int main (void) {
    char *arr [MAXA] = {NULL}, str [MAXS] = "";
    int i = 0, n = 0, ndx = 0;
    printf ("enter the number of strings: ");
    if (scanf ("%d%*c", &n) != 1) {
        fprintf (stderr, "error: invalid integer input.\n");
        return 1;
    }
    if (n > MAXA) {
        fprintf (stderr, "warning: n > %d, using %d as limit.\n", MAXA, MAXA);
        n = MAXA;
    }
    printf ("Enter the strings\n");
    while (ndx < n && fgets (str, sizeof str, stdin)) {
        size_t len = strlen (str);
        if (str[len - 1] == '\n')
            str[--len] = 0;
        if (!(arr[ndx] = malloc (len +1))) {
            fprintf (stderr, "error: virtual memory exhausted.\n");
            break;
        }
        strcpy (arr [ndx], str);
        ndx++;
    }
    printf ("\nThe Strings are:\n");
    for (i = 0; i < ndx; i++) {
        printf (" arr[%2d] : %s\n", i, arr [i]);
        free (arr [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40857617_40857663_1_19
40857617_40869794_6_21
Title: Returning a pointer to the beginning of a linked list after adding nodes? 
----------------------------------------

Node *insert (int i) {
    Node *last_node = NULL;
    Node *first_node = NULL;
    for (int c = 0; c < i; c++) {
        Node *node = malloc (sizeof (Node));
        node->num = i;
        node->next = NULL;
        if (!last_node) {
            first_node = node;
        }
        else {
            last_node->next = node;
        }
        last_node = node;
    }
    return first_node;
}
----------------------------------------

Node *insert (int i) {
    Node *head;
    Node *tail;
    head = malloc (sizeof (Node));
    head.num = 0;
    tail = head;
    for (int c = 1; c < i; c++) {
        tail->next = malloc (sizeof (Node));
        tail = tail->next;
        tail->num = c;
    }
    return head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40894309_40894756_5_34
40894309_40895728_32_47
Title: C Program to check if string is Palindrome or not 
----------------------------------------

int main () {
    char sentence [200];
    int left = 0;
    int right;
    printf ("Enter a message: ");
    fgets (sentence, sizeof sentence, stdin);
    right = strlen (sentence);
    while (1) {
        while (left < right && !(isalpha (sentence[left])))
            left++;
        while (right > left && !(isalpha (sentence[right])))
            right--;
        if (left >= right)
            break;
        else {
            if (toupper (sentence[left]) != toupper (sentence[right])) {
                printf ("Not a Palindrome\n");
                return 0;
            }
            left++;
            right--;
        }
    }
    printf ("Palindrome\n");
    return 0;
}
----------------------------------------

int main () {
    while (1) {
        char s [N];
        printf ("Enter a sentence (Enter - exit): ");
        if (!fgets (s, sizeof (s), stdin) || s[0] == '\n')
            break;
        printf ("\nThe sentence is%s palindrome.\n\n", is_palindrome (s) ? "" : " not");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40894713_40895031_29_48
40894713_40895457_1_20
Title: C - Having trouble with the input/output of my structure in by using 2 functions 
----------------------------------------

void scan_element (struct element_t *pl) {
    printf ("number: ");
    scanf ("%d", & pl.number);
    printf ("name: ");
    scanf ("%s", pl.name);
    printf ("symbol: ");
    scanf ("%s", pl.symbol);
    printf ("class: ");
    scanf ("%s", pl.type);
    printf ("atomic weight: ");
    scanf ("%f", & pl.atomic_weight);
    printf ("shells use underscore for spaces: ");
    scanf ("%s", pl.shells);
}
----------------------------------------

void scan_element (struct element_t *pl) {
    printf ("number: ");
    scanf ("%d", & pl -> number);
    printf ("name: ");
    scanf ("%s", pl -> name);
    printf ("symbol: ");
    scanf ("%s", pl -> symbol);
    printf ("class: ");
    scanf ("%s", pl -> type);
    printf ("atomic weight: ");
    scanf ("%f", & pl -> atomic_weight);
    printf ("shells use underscore for spaces: ");
    scanf ("%s", pl -> shells);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40905819_40906336_1_18
40905819_40906451_1_23
Title: Segmentation fault error while trying to get file extension in C 
----------------------------------------

int estImage (struct dirent *fichier) {
    char nomFichier [256];
    strncpy (nomFichier, fichier -> d_name, 255);
    char *dot = strrchr (nomFichier, '.');
    int retour = 0;
    if (dot != NULL && ((!strcmp (dot, ".jpg")) || (!strcmp (dot, ".png")) || (!strcmp (dot, ".jpeg")) || (!strcmp (dot, ".bmp"))))
        retour = 1;
    return retour;
}
----------------------------------------

int estImage (struct dirent *fichier) {
    char nomFichier [256];
    strncpy (nomFichier, fichier -> d_name, 255);
    char *dot = strrchr (nomFichier, '.');
    if (dot == NULL)
        return 0;
    char *listeExtensionImage [] = {".png", ".jpg", ".jpeg", ".bmp"};
    int len = sizeof (listeExtensionImage) / sizeof (listeExtensionImage[0]);
    printf (dot);
    for (int i = 0; i < len; i++) {
        if (strcmp (listeExtensionImage[i], dot) == 0)
            return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40917629_40918303_4_31
40917629_40918477_5_30
Title: Load multiple input lines into 2d array 
----------------------------------------

int main (void) {
    FILE *fin = fopen ("fin.txt", "r");
    char *line = NULL;
    size_t len = 0;
    int cols = 0, rows = 1;
    int i = 0, j = 0;
    cols = getline (&line, &len, fin);
    cols--;
    printf ("Line is %d characters long\n", cols);
    while (getline (&line, &len, fin) != -1)
        rows++;
    printf ("File is %d lines long\n", rows);
    rewind (fin);
    char array [rows] [cols];
    char skip;
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            fscanf (fin, "%c", & array [i] [j]);
            printf ("%c ", array [i] [j]);
        }
        fscanf (fin, "%c", & skip);
        printf ("\n");
    }
    fclose (fin);
    return 0;
}
----------------------------------------

int main (void) {
    FILE *fp = stdin;
    char line [100 + 2];
    int rows = 0, cols = 0;
    fgets (line, sizeof (line), fp);
    cols = strlen (line) - 1;
    char (*mat) [cols] = malloc (++rows * sizeof (char [cols]));
    memcpy (mat [0], line, cols);
    while (fgets (line, sizeof (line), fp)) {
        if ((mat = realloc (mat, ++rows * sizeof (char [cols]))) == NULL) {
            perror ("realloc");
            exit (EXIT_FAILURE);
        }
        memcpy (mat [rows - 1], line, cols);
    }
    for (int r = 0; r < rows; ++r) {
        for (int c = 0; c < cols; ++c) {
            printf ("%c ", mat [r] [c]);
        }
        puts ("");
    }
    free (mat);
}
----------------------------------------

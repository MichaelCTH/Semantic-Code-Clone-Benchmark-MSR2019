$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52969865_52970452_5_38
52969865_52970601_1_18
Title: Sieve of Eratosthenes - C language implementation 
----------------------------------------

int main (void) {
    int n = lese_int ();
    int laenge = n - 1;
    int *array;
    array = malloc (sizeof (int) * laenge);
    for (int i = 2; i <= n; i++) {
        array[i] = 1;
    }
    for (int i = 0; i <= n; i++) {
        if (array[i] == 1) {
            for (int j = i; i * j <= n; j++) {
                array[i * j] = 0;
            }
        }
    }
    for (int i = 0; i < laenge; i++) {
        printf ("%d, ", array [i]);
    }
    printf ("\n");
    print_prim (array, laenge);
    free (array);
    return (0);
}
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    int *a = (int *) malloc (sizeof (int) * (n - 1));
    for (int i = 0; i < n - 1; i++)
        a[i] = 1;
    for (int i = 2; i * i <= n; i++) {
        if (a[i - 2] == 1) {
            for (int j = i * i; j <= n; j += i)
                a[j - 2] = 0;
        }
    }
    print_prim (a, n - 1);
    free (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52975430_52975702_12_30
52975430_52975749_24_45
Title: Assigning a function pointer to a function inside another function 
----------------------------------------

func promt_user_input () {
    int coice;
    printf ("Enter 1 or 2\n");
    scanf (" %d", & coice);
    switch (coice) {
    case 1 :
        printf ("you typed 1\n");
        return print_1;
    case 2 :
        printf ("you typed 2\n");
        return print_2;
    default :
        printf ("INVALID INPUT");
        return NULL;
    }
}
----------------------------------------

void promt_user_input (double (**fn) (void)) {
    unsigned int coice;
    int res;
    printf ("Enter 1 or 2\n");
    res = scanf ("%u", &coice);
    if (res != 1 || !coice || coice > 2) {
        printf ("Invalid input!\n");
        return;
    }
    switch (coice) {
    case 1 :
        *fn = print_1;
        printf ("you typed 1\n");
        break;
    case 2 :
        *fn = print_2;
        printf ("you typed 2\n");
        break;
    }
    printf ("hi %lf\n", (* fn) ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52977972_52978112_6_37
52977972_52978803_6_42
Title: C programming: Replacing if statements 
----------------------------------------

int main () {
    int i, array [30] = {0};
    srand (time (NULL));
    for (i = 0; i < 30; i++) {
        array[i] = rand () % 10;
        printf ("%d ", array [i]);
    }
    puts ("\n\n");
    for (i = 29; i >= 0; i--)
        printf ("%d ", array[i]);
    puts ("\n\n");
    int count [10] = {0};
    for (i = 0; i < 30; i++)
        count[array[i]]++;
    for (i = 0; i < 10; i++)
        printf ("There were %d %d's\n", count[i], i);
    return 0;
}
----------------------------------------

int main () {
    int i, array [30] = {0};
    srand (time (NULL));
    for (i = 0; i < 30; i++)
        array[i] = rand () % 10;
    for (i = 0; i < 30; i++)
        printf ("%d ", array[i]);
    printf ("\n\n");
    for (i = 29; i >= 0; i--)
        printf ("%d ", array[i]);
    printf ("\n\n");
    for (i = 0; i < 30; i++) {
        int j;
        int count = 0;
        int match = array[i];
        for (j = 0; j < 30 && match >= 0; j++) {
            array[j] == match && ++count && (array[j] = -1);
        }
        match >= 0 && printf ("There were %d %d's\n", count, match);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52989394_52990872_5_26
52989394_52997241_7_38
Title: C get odd numbers between a range and store it in int array 
----------------------------------------

int *oddNumbers (int l, int r, int *result_count) {
    int *result;
    int i;
    assert (result_count && l <= r && INT_MIN < r);
    l += !(l % 2);
    r -= !(r % 2);
    *result_count = (r - l) / 2 + 1;
    result = malloc (*result_count * sizeof (*result));
    if (!result)
        return NULL;
    for (i = 0; l <= r; ++i, l += 2)
        result[i] = l;
    return result;
}
----------------------------------------

int *oddNumbers (int l, int r, unsigned *result_count) {
    l += !(l % 2);
    if (l > r) {
        *result_count = 0;
        return NULL;
    }
    r -= !(r % 2);
    *result_count = ((unsigned) r - l) / 2 + 1;
    int *result = malloc (sizeof *result * *result_count);
    if (result == NULL) {
        return NULL;
    }
    result[0] = l;
    for (unsigned i = 1; i < *result_count; i++) {
        l += 2;
        result[i] = l;
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
530116_530242_11_37
530116_530414_27_82
Title: Using stdio to read and sort piped data in Linux 
----------------------------------------

int main (int argc, char **argv) {
    char *datum = malloc (entry_size);
    input_size = 4096;
    input = malloc (input_size);
    while (1) {
        if (fread (datum, 1, entry_size, stdin) < entry_size)
            break;
        size_t new_size = (num_items + 1) * entry_size;
        if (new_size > input_size) {
            input = realloc (input, input_size *2);
            input_size *= 2;
        }
        memcpy (input + num_items * entry_size, datum, entry_size);
        num_items++;
    }
    qsort (input, num_items, entry_size, compare_func);
    fwrite (input, entry_size, num_items, stdout);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 2 || stdin == NULL) {
        print_usage ();
        exit (EXIT_FAILURE);
    }
    entry_size = atoi (argv[1]);
    if (entry_size <= 0 || entry_size >= INT_MAX) {
        print_usage ();
        exit (EXIT_FAILURE);
    }
    char *input = NULL;
    char *datum = (char *) malloc (entry_size);
    if (datum == NULL)
        exit (EXIT_FAILURE);
    while (1) {
        int read_size = fread (datum, 1, entry_size, stdin);
        if (read_size == 0)
            break;
        if (read_size < entry_size) {
            while (read_size < entry_size) {
                memcpy (datum, '\0', 1);
                read_size++;
            }
            break;
        }
        size_t new_size = (num_items + 1) * entry_size;
        if (new_size > input_size) {
            input = (char *) realloc (input, new_size);
            if (input == NULL)
                exit (EXIT_FAILURE);
            input_size = new_size;
        }
        memcpy (input + num_items * entry_size, datum, entry_size);
        num_items++;
    }
    qsort (input, num_items, entry_size, compare);
    fwrite (input, entry_size, num_items, stdout);
    exit (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53029872_53030112_6_38
53029872_53031682_159_188
Title: Detect character in c 
----------------------------------------

int main (void) {
    char buffer [1000];
    while (fgets (buffer, 1000, stdin)) {
        char *p = buffer;
        while (*p) {
            while (*p && isspace (*p))
                ++p;
            if (!*p)
                break;
            if (!isdigit (*p)) {
                printf ("Variable/operator: %c\n", * p ++);
            }
            else {
                char *end;
                errno = 0;
                long number = strtol (p, &end, 10);
                if (errno == ERANGE) {
                    fputs ("Value out of range!\n", stderr);
                    break;
                }
                else if (p != end) {
                    printf ("Value: %ld\n", number);
                    p = end;
                }
            }
        }
    }
}
----------------------------------------

int main () {
    struct Node *poly1 = NULL, *poly2 = NULL, *poly = NULL;
    char input1 [1000], input2 [1000];
    while (scanf ("%s %s", input1, input2) == 2) {
        detext_string (input1, & poly1);
        detext_string (input2, & poly2);
        printf ("1st Number: ");
        show (poly1);
        printf ("\n2nd Number: ");
        show (poly2);
        polyadd (poly1, poly2, & poly);
        printf ("\nAdded polynomial: ");
        show (poly);
        printf ("\n");
        free_node (& poly1);
        free_node (& poly2);
        free_node (& poly);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53030381_53030610_2_21
53030381_53030686_3_45
Title: Need some advice with a simple C code program 
----------------------------------------

int main () {
    int x, y, z, loop_one, loop_two;
    printf ("Give a number: ");
    scanf ("%d", & x);
    while (x <= 0) {
        printf ("Error !, Enter a valid number: ");
        scanf ("%d", & x);
    }
    float ans = 0;
    for (loop_one = 1; loop_one < x; loop_one += 1) {
        ans += 1 / (float) loop_one;
        printf ("1/%d + ", loop_one);
    }
    ans += 1 / (float) x;
    printf ("1/%d = %f\n", x, ans);
}
----------------------------------------

int main () {
    float x, y, loop_one;
    x = -1;
    y = 0;
    while (x < 0) {
        printf ("Give a number \n");
        scanf ("%f", & x);
    }
    for (loop_one = 1; loop_one <= x; loop_one += 1) {
        y += (1 / loop_one);
        if (loop_one != x) {
            printf ("1/%.0f + ", loop_one);
        }
        else {
            printf ("1/%.0f  ", loop_one);
        }
    }
    printf (" = %.2f\n", y);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53030443_53031017_5_27
53030443_53220644_14_72
Title: the loop in magic 8 ball has a bug 
----------------------------------------

int main () {
    srand (time (0));
    int num, i;
    do {
        num = rand () % 10;
        char question [1000];
        puts ("MAGIC 8 BALL!");
        puts ("Press Enter When Ready.");
        puts ("Input Yes or No questions only!\n");
        scanf ("%s", question);
        printf ("\nTHE ANSWER | ");
        ans (num);
        printf ("\n\n");
        printf ("Press any key to try again.\nPress [x] to Exit.\n\n");
        char c = getchar ();
        c = getchar ();
        if (c == 'x') {
            break;
        }
    }
    while (1);
}
----------------------------------------

int main (void) {
    char temp;
    int rand;
    while (1) {
        system ("cls");
        printf ("MAGIC 8 BALL!\n");
        printf ("Press Enter When Ready.\n");
        getch ();
        system ("cls");
        printf ("What is your question?\n");
        printf ("Only enter yes or no questions!\n");
        scanf ("%c", & temp);
        fflush (stdin);
        printf ("The answer you seek: ");
        rand = random_num_generator ();
        statement_picker (rand);
        printf ("Would you like to ask another question?\n");
        printf ("Press [x] to quit\n");
        printf ("Press any other character to continue\n");
        scanf ("%c", & temp);
        if (temp == 'x')
            break;
        fflush (stdin);
    }
    system ("cls");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53031158_53031559_3_24
53031158_53031912_3_33
Title: Understanding returning values functions C 
----------------------------------------

int maxvolte (char a [], int DIM) {
    int count [26] = {0};
    for (int j = 0; j < DIM - 1; j++) {
        if (a[j] - a[j + 1] == -1) {
            int index = a[j] - 'A';
            ++count[index];
        }
    }
    int max = -1;
    int index = -1;
    for (int i = 0; i < 26; ++i) {
        if (count[i] > max) {
            max = count[i];
            index = i;
        }
    }
    assert (max != - 1);
    return index + 'A';
}
----------------------------------------

int maxvolte (char a [], int DIM) {
    int hold;
    int freq;
    int max = 0;
    int result;
    int i, j;
    for (int j = 0; j < DIM; j++) {
        hold = a[j];
        freq = 0;
        if (a[j] - a[j + 1] == -1) {
            freq++;
        }
        for (i = j + 1; i < DIM - 1; i++) {
            if (hold == a[i]) {
                if (a[i] - a[i + 1] == -1) {
                    freq++;
                }
            }
        }
        if (freq > max) {
            result = hold;
            max = freq;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53056369_53059527_11_49
53056369_53059818_3_28
Title: C infinite loop when char input instead of int 
----------------------------------------

int main (void) {
    int input = 0, rtn = 0;
    for (;;) {
        printf ("\nSelect top level domain:\n" "  1-EDU\n" "  2-COM\n" "  3-ORG\n" "  4-GOV\n" "  5-MIL\n" "  6-CN\n" "  7-COM.CN\n" "  8.CAN\n\n" "choice: ");
        rtn = scanf (" %d", &input);
        if (rtn == EOF) {
            fputs ("(user canceled input.)\n", stderr);
            return 1;
        }
        else if (rtn == 0) {
            fputs (" error: invalid integer input.\n", stderr);
            empty_stdin ();
        }
        else if (input < 1 || 8 < input) {
            fputs (" error: integer out of range [1-8]\n", stderr);
            empty_stdin ();
        }
        else {
            empty_stdin ();
            break;
        }
    }
    printf ("\nvalid input: %d\n", input);
}
----------------------------------------

int main (void) {
    int i;
    char input;
    printf ("You have the choice between the" " following top domains: 1-EDU, 2-COM" ", 3-ORG, 4-GOV, 5-MIL, 6-CN, 7-COM.CN, 8.CAN\n");
    printf ("Which one do you want to pick?");
    scanf (" %c", & input);
    if (input < '1' || input > '9') {
        do {
            printf ("Invalid input. Please try again.");
            printf ("You have the choice between the" " following top domains: 1-EDU, 2-COM" ", 3-ORG, 4-GOV, 5-MIL, 6-CN, 7-COM.CN, 8.CAN\n");
            printf ("Which one do you want to pick?");
            scanf (" %d", & input);
        }
        while ((input < '1') || (input > '8'));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53080187_53080659_1_33
53080187_53080712_2_32
Title: no repeating values in array 
----------------------------------------

int main () {
    int x, newNum, count, i;
    int user_nums [6];
    for (x = 0; x < 6; x++) {
        printf ("Enter a number(from the #'s 1-42): ");
        scanf ("%d", & newNum);
        if ((newNum > 1) && (newNum < 42)) {
            count = 0;
            for (i = 0; i < x; i++) {
                if (user_nums[i] == newNum) {
                    count = count + 1;
                    break;
                }
            }
            if (count == 0) {
                user_nums[x] = newNum;
            }
            else {
                count = 0;
                x = x - 1;
            }
        }
        else {
            x = x - 1;
        }
    }
    printf ("Your numbers: \n");
    for (x = 0; x < 6; x++) {
        printf ("%d ", user_nums [x]);
    }
    return 0;
}
----------------------------------------

int main () {
    int x, y;
    int exists = 0;
    int user_nums [6] = {0};
    for (x = 0; x < 6; x++) {
        do {
            exists = 0;
            printf ("Enter a number(from the #'s 1-42): ");
            scanf ("%d", & user_nums [x]);
            for (y = 0; y < x; y++) {
                if (user_nums[x] == user_nums[y]) {
                    printf ("Number already exists\n ");
                    exists = 1;
                    break;
                }
            }
        }
        while (user_nums[x] < 1 || user_nums[x] > 42 || exists);
    }
    printf ("Your numbers: \n");
    for (x = 0; x < 6; x++) {
        printf ("%d ", user_nums [x]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53080187_53080659_1_33
53080187_53080794_3_34
Title: no repeating values in array 
----------------------------------------

int main () {
    int x, newNum, count, i;
    int user_nums [6];
    for (x = 0; x < 6; x++) {
        printf ("Enter a number(from the #'s 1-42): ");
        scanf ("%d", & newNum);
        if ((newNum > 1) && (newNum < 42)) {
            count = 0;
            for (i = 0; i < x; i++) {
                if (user_nums[i] == newNum) {
                    count = count + 1;
                    break;
                }
            }
            if (count == 0) {
                user_nums[x] = newNum;
            }
            else {
                count = 0;
                x = x - 1;
            }
        }
        else {
            x = x - 1;
        }
    }
    printf ("Your numbers: \n");
    for (x = 0; x < 6; x++) {
        printf ("%d ", user_nums [x]);
    }
    return 0;
}
----------------------------------------

int main () {
    int user_nums [6];
    int index [50];
    for (int i = 0; i != sizeof (index) / sizeof (index[0]); ++i)
        index[i] = -1;
    for (int i = 0; i < sizeof (user_nums) / sizeof (user_nums[0]); ++i) {
        for (;;) {
            printf ("Enter a number(from the #'s 1-42): ");
            scanf ("%d", user_nums + i);
            if (user_nums[i] < 1 || user_nums[i] > 42) {
                printf ("wrong number\n");
                continue;
            }
            if (index[user_nums[i]] != -1) {
                printf ("dump number\n");
                continue;
            }
            index[user_nums[i]] = i;
            break;
        }
    }
    printf ("Your numbers: \n");
    for (int i = 0; i < 6; ++i)
        printf ("%d ", user_nums[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53080187_53080712_2_32
53080187_53080794_3_34
Title: no repeating values in array 
----------------------------------------

int main () {
    int x, y;
    int exists = 0;
    int user_nums [6] = {0};
    for (x = 0; x < 6; x++) {
        do {
            exists = 0;
            printf ("Enter a number(from the #'s 1-42): ");
            scanf ("%d", & user_nums [x]);
            for (y = 0; y < x; y++) {
                if (user_nums[x] == user_nums[y]) {
                    printf ("Number already exists\n ");
                    exists = 1;
                    break;
                }
            }
        }
        while (user_nums[x] < 1 || user_nums[x] > 42 || exists);
    }
    printf ("Your numbers: \n");
    for (x = 0; x < 6; x++) {
        printf ("%d ", user_nums [x]);
    }
    return 0;
}
----------------------------------------

int main () {
    int user_nums [6];
    int index [50];
    for (int i = 0; i != sizeof (index) / sizeof (index[0]); ++i)
        index[i] = -1;
    for (int i = 0; i < sizeof (user_nums) / sizeof (user_nums[0]); ++i) {
        for (;;) {
            printf ("Enter a number(from the #'s 1-42): ");
            scanf ("%d", user_nums + i);
            if (user_nums[i] < 1 || user_nums[i] > 42) {
                printf ("wrong number\n");
                continue;
            }
            if (index[user_nums[i]] != -1) {
                printf ("dump number\n");
                continue;
            }
            index[user_nums[i]] = i;
            break;
        }
    }
    printf ("Your numbers: \n");
    for (int i = 0; i < 6; ++i)
        printf ("%d ", user_nums[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53090162_53090344_4_18
53090162_53090493_2_80
Title: For loop producing unexpected results in C 
----------------------------------------

int main () {
    int height = get_int ("How tall are the pyramids: ");
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < height - i - 1; j++) {
            printf (" ");
        }
        for (int j = 0; j <= i; j++) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------

int main () {
    int height = 10;
    printf ("regular left justified\n");
    for (int i = 0; i < height; i++) {
        printf ("##");
        for (int j = 0; j < i; j++) {
            printf ("#");
        }
        printf ("\n");
    }
    printf ("Upside down left justified\n");
    for (int i = height; i > 0; i--) {
        printf ("##");
        for (int j = 0; j < i; j++) {
            printf ("#");
        }
        printf ("\n");
    }
    printf ("upside down centered pryamid\n");
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < i; j++) {
            printf (" ");
        }
        for (int j = i; j < height; j++) {
            printf ("##");
        }
        printf ("\n");
    }
    printf ("regular centered pryamid\n");
    for (int i = 0; i < height; i++) {
        for (int j = height; j > i; j--) {
            printf (" ");
        }
        for (int j = height; j >= height - i; j--) {
            printf ("##");
        }
        printf ("\n");
    }
    printf ("regular right justified\n");
    for (int i = 0; i < height; i++) {
        for (int j = height; j > i; j--) {
            printf (" ");
        }
        for (int j = height; j >= height - i; j--) {
            printf ("#");
        }
        printf ("\n");
    }
    printf ("upside down right justified\n");
    for (int i = 0; i < height; i++) {
        for (int j = height; j >= height - i; j--) {
            printf (" ");
        }
        for (int j = height; j > i; j--) {
            printf ("#");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53090485_53090777_1_14
53090485_53091113_25_39
Title: 64 Bit Long Integer Parameter 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Usage: p3 <int>\n");
    }
    else {
        int n = atoll (argv[1]);
        printf ("count = %d, largest run = %d\n", n, count (n));
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 2) {
        printf ("Usage: p3 <int>\n");
        return -1;
    }
    int64_t n = atoll (argv[1]);
    int k;
    int sum = count (n, &k);
    printf ("count = %d, largest run = %d\n", sum, k);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5309245_5309325_7_15
5309245_5309388_19_38
Title: c char * question 
----------------------------------------

int main (void) {
    char *buff;
    buff = malloc (sizeof (char));
    *buff = 'b';
    initialize (& buff);
    puts ("Contents of buffer are: ");
    printf ("%c\n", * buff);
    return 0;
}
----------------------------------------

int main (void) {
    char *buff;
    buff = malloc (sizeof (char));
    *buff = 'b';
    initialize (buff);
    puts ("Contents of buffer are: ");
    puts (buff);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53094581_53095332_7_34
53094581_53096289_6_30
Title: Read from any data 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 2) {
        fprintf (stderr, "Usage: %s <filename>\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    char buffer [MAX_LINE_LEN];
    FILE *fp = fopen (argv[1], "r");
    if (!fp) {
        perror ("fopen failed");
        exit (EXIT_FAILURE);
    }
    int i = 0;
    while ((i < MAX_LINES) && (fgets (buffer, sizeof (buffer), fp))) {
        printf ("%s", buffer);
        i++;
    }
    fclose (fp);
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    char line [MAXC];
    size_t ndx = 0;
    FILE *fp = NULL;
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input.\n" "usage: %s <filename>\n", argv [0]);
        return 1;
    }
    if ((fp = fopen (argv[1], "r")) == NULL) {
        perror ("fopen(argv[1],\"r\")");
        return 1;
    }
    while (ndx < NLINES && fgets (line, MAXC, fp))
        printf ("line[%2zu]: %s", ndx +++1, line);
    printf ("\ntotal lines read: %zu\n", ndx);
    fclose (fp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53099915_53100178_14_31
53099915_53100881_1_14
Title: Reversing a number with 0s in the last position in C 
----------------------------------------

int main (int argc, char **argv) {
    char buffer [MAX];
    size_t length;
    printf ("Enter a number: ");
    fgets (buffer, MAX, stdin);
    length = strlen (buffer);
    buffer[length - 1] = '\0';
    length--;
    for (int i = 0; i < length / 2; i++) {
        xor_swap (& buffer [i], & buffer [length - i - 1]);
    }
    printf ("buffer: %s\n", buffer);
}
----------------------------------------

int main () {
    int a, mod = 0, reverse = 0;
    printf ("Enter a number:");
    int n1, n2;
    scanf (" %n%d%n", & n1, & a, & n2);
    int width = n2 - n1;
    while (width-- > 0) {
        mod = a % 10;
        reverse = reverse * 10 + mod;
        a = a / 10;
    }
    printf ("%0*d", n2 - n1, reverse);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53105113_53105331_13_34
53105113_53106001_30_56
Title: C program to take integer if it is Prime or Not Prime 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Usage: p4 <number>\n");
        return -1;
    }
    char *p;
    long long n = strtoll (argv[1], &p, 10);
    if (n < 2 || *p != '\0') {
        printf ("input wrong\n");
        return -1;
    }
    int result = isprime (n);
    if (result == 1)
        printf ("%lld is prime\n", n);
    else
        printf ("%lld is not prime\n", n);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Usage: p4 <number>\n");
        return -1;
    }
    char *end;
    long n = strtol (argv[1], &end, 10);
    if (errno == ERANGE) {
        printf ("The number you entered is too large!\n");
        return -1;
    }
    if (n < 2) {
        printf ("input number should be > 1\n");
        return -1;
    }
    int result = isprime (n);
    if (result == 1)
        printf ("%ld is prime\n", n);
    else
        printf ("%ld is not prime\n", n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53110096_53111192_1_12
53110096_53122585_62_89
Title: how to optimize search of MAC 
----------------------------------------

int find_mac (int port, int vlan, l2_mac_t mac) {
    int i = 0;
    for (int i = 0; i < MAX_MAC; i++) {
        if (arr[i].prt != port)
            continue;
        if (arr[i].vln != vlan)
            continue;
        if (memcmp (arr [i].mac, mac, sizeof (l2_mac_t)) continue;
        return i;
    }
    return WHAT;
}
----------------------------------------

int find_mac (int port, int vlan, l2_mac_t mac) {
    int i = 0;
    int k = 0;
    k = (MacSum (mac)) % MAX_MAC;
    if (memcmp (arr[k].mac, mac, sizeof (l2_mac_t)) == 0) {
        return k;
    }
    else {
        for (int i = k; i < MAX_MAC; i++) {
            if (arr[i].prt != port)
                continue;
            if (arr[i].vln != vlan)
                continue;
            if (memcmp (arr[i].mac, mac, sizeof (l2_mac_t)))
                continue;
            return i;
        }
        for (int i = 0; i < k; i++) {
            if (arr[i].prt != port)
                continue;
            if (arr[i].vln != vlan)
                continue;
            if (memcmp (arr[i].mac, mac, sizeof (l2_mac_t)))
                continue;
            return i;
        }
    }
    printf ("Could not find MAC %02X:%02X:%02X:%02X:%02X:%02X\n", mac [0], mac [1], mac [2], mac [3], mac [4], mac [5]);
    return ERROR;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53111230_53127158_98_140
53111230_53138419_106_113
Title: Efficient way to find divisibility 
----------------------------------------

int main (int argc, char *argv []) {
    uint64_t kmin, kmax, dmin, dmax, k, count;
    if (argc != 5) {
        fprintf (stderr, "\n");
        fprintf (stderr, "Usage: %s [ -h | --help | help ]\n", argv [0]);
        fprintf (stderr, "       %s MIN MAX MIN_DIVISOR MAX_DIVISOR\n", argv [0]);
        fprintf (stderr, "\n");
        fprintf (stderr, "This program counts which positive integers between MIN and MAX,\n");
        fprintf (stderr, "inclusive, are divisible by MIN_DIVISOR to MAX_DIVISOR, inclusive.\n");
        fprintf (stderr, "\n");
        return EXIT_SUCCESS;
    }
    if (setlocale (LC_ALL, "") == NULL)
        fprintf (stderr, "Warning: Your C library does not support your current locale.\n");
    if (parse_u64 (argv[1], &kmin) || kmin < 1) {
        fprintf (stderr, "%s: Invalid minimum positive integer to test.\n", argv [1]);
        return EXIT_FAILURE;
    }
    if (parse_u64 (argv[2], &kmax) || kmax < kmin || kmax >= UINT64_MAX) {
        fprintf (stderr, "%s: Invalid maximum positive integer to test.\n", argv [2]);
        return EXIT_FAILURE;
    }
    if (parse_u64 (argv[3], &dmin) || dmin < 2) {
        fprintf (stderr, "%s: Invalid minimum divisor to test for.\n", argv [3]);
        return EXIT_FAILURE;
    }
    if (parse_u64 (argv[4], &dmax) || dmax < dmin) {
        fprintf (stderr, "%s: Invalid maximum divisor to test for.\n", argv [4]);
        return EXIT_FAILURE;
    }
    count = 0;
    for (k = kmin; k <= kmax; k++)
        count += is_divisible (k, dmin, dmax);
    printf ("%" PRIu64 "\n", count);
    return EXIT_SUCCESS;
}
----------------------------------------

int main () {
    uint64_t count = 0;
    for (uint64_t n = 18446744073709541615LLU; n <= 18446744073709551614LLU; n++) {
        if (divisible (n, 100000, 150000))
            ++count;
    }
    printf ("%llu", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53111230_53127158_98_140
53111230_53139064_57_106
Title: Efficient way to find divisibility 
----------------------------------------

int main (int argc, char *argv []) {
    uint64_t kmin, kmax, dmin, dmax, k, count;
    if (argc != 5) {
        fprintf (stderr, "\n");
        fprintf (stderr, "Usage: %s [ -h | --help | help ]\n", argv [0]);
        fprintf (stderr, "       %s MIN MAX MIN_DIVISOR MAX_DIVISOR\n", argv [0]);
        fprintf (stderr, "\n");
        fprintf (stderr, "This program counts which positive integers between MIN and MAX,\n");
        fprintf (stderr, "inclusive, are divisible by MIN_DIVISOR to MAX_DIVISOR, inclusive.\n");
        fprintf (stderr, "\n");
        return EXIT_SUCCESS;
    }
    if (setlocale (LC_ALL, "") == NULL)
        fprintf (stderr, "Warning: Your C library does not support your current locale.\n");
    if (parse_u64 (argv[1], &kmin) || kmin < 1) {
        fprintf (stderr, "%s: Invalid minimum positive integer to test.\n", argv [1]);
        return EXIT_FAILURE;
    }
    if (parse_u64 (argv[2], &kmax) || kmax < kmin || kmax >= UINT64_MAX) {
        fprintf (stderr, "%s: Invalid maximum positive integer to test.\n", argv [2]);
        return EXIT_FAILURE;
    }
    if (parse_u64 (argv[3], &dmin) || dmin < 2) {
        fprintf (stderr, "%s: Invalid minimum divisor to test for.\n", argv [3]);
        return EXIT_FAILURE;
    }
    if (parse_u64 (argv[4], &dmax) || dmax < dmin) {
        fprintf (stderr, "%s: Invalid maximum divisor to test for.\n", argv [4]);
        return EXIT_FAILURE;
    }
    count = 0;
    for (k = kmin; k <= kmax; k++)
        count += is_divisible (k, dmin, dmax);
    printf ("%" PRIu64 "\n", count);
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char *argv []) {
    unsigned long n, count = 0, lmin, lmax, range [2] = {1, 500000};
    int pos = 0, naive = 0, small = 0, sieve = 1;
    clock_t t;
    char *p;
    for (int i = 1; i < argc; i++) {
        n = strtoul (argv[i], &p, 0);
        if (*p == '\0' && pos < 2)
            range[pos++] = n;
        else if (!strcmp (argv[i], "naive"))
            naive = 1;
        else if (!strcmp (argv[i], "small"))
            small = 1;
        else if (!strcmp (argv[i], "sieve"))
            sieve = 1;
        else
            printf ("invalid argument: %s\n", argv[i]);
    }
    lmin = range[0];
    lmax = range[1] + 1;
    if (naive) {
        t = clock ();
        for (count = 0, n = lmin; n != lmax; n++) {
            count += divisibility_check_naive (n);
        }
        t = clock () - t;
        printf ("naive: [%lu..%lu] -> %lu non-divisible numbers, %10.2fms\n", lmin, lmax - 1, count, t * 1000.0 / CLOCKS_PER_SEC);
    }
    if (small) {
        t = clock ();
        for (count = 0, n = lmin; n != lmax; n++) {
            count += divisibility_check_small (n);
        }
        t = clock () - t;
        printf ("small: [%lu..%lu] -> %lu non-divisible numbers, %10.2fms\n", lmin, lmax - 1, count, t * 1000.0 / CLOCKS_PER_SEC);
    }
    if (sieve) {
        t = clock ();
        for (count = 0, n = lmin; n != lmax; n++) {
            count += divisibility_check_sieve (n);
        }
        t = clock () - t;
        printf ("sieve: [%lu..%lu] -> %lu non-divisible numbers, %10.2fms\n", lmin, lmax - 1, count, t * 1000.0 / CLOCKS_PER_SEC);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53111230_53138419_106_113
53111230_53139064_57_106
Title: Efficient way to find divisibility 
----------------------------------------

int main () {
    uint64_t count = 0;
    for (uint64_t n = 18446744073709541615LLU; n <= 18446744073709551614LLU; n++) {
        if (divisible (n, 100000, 150000))
            ++count;
    }
    printf ("%llu", count);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    unsigned long n, count = 0, lmin, lmax, range [2] = {1, 500000};
    int pos = 0, naive = 0, small = 0, sieve = 1;
    clock_t t;
    char *p;
    for (int i = 1; i < argc; i++) {
        n = strtoul (argv[i], &p, 0);
        if (*p == '\0' && pos < 2)
            range[pos++] = n;
        else if (!strcmp (argv[i], "naive"))
            naive = 1;
        else if (!strcmp (argv[i], "small"))
            small = 1;
        else if (!strcmp (argv[i], "sieve"))
            sieve = 1;
        else
            printf ("invalid argument: %s\n", argv[i]);
    }
    lmin = range[0];
    lmax = range[1] + 1;
    if (naive) {
        t = clock ();
        for (count = 0, n = lmin; n != lmax; n++) {
            count += divisibility_check_naive (n);
        }
        t = clock () - t;
        printf ("naive: [%lu..%lu] -> %lu non-divisible numbers, %10.2fms\n", lmin, lmax - 1, count, t * 1000.0 / CLOCKS_PER_SEC);
    }
    if (small) {
        t = clock ();
        for (count = 0, n = lmin; n != lmax; n++) {
            count += divisibility_check_small (n);
        }
        t = clock () - t;
        printf ("small: [%lu..%lu] -> %lu non-divisible numbers, %10.2fms\n", lmin, lmax - 1, count, t * 1000.0 / CLOCKS_PER_SEC);
    }
    if (sieve) {
        t = clock ();
        for (count = 0, n = lmin; n != lmax; n++) {
            count += divisibility_check_sieve (n);
        }
        t = clock () - t;
        printf ("sieve: [%lu..%lu] -> %lu non-divisible numbers, %10.2fms\n", lmin, lmax - 1, count, t * 1000.0 / CLOCKS_PER_SEC);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53116277_53116467_4_24
53116277_53116493_4_30
Title: How to input a string with unknown size 
----------------------------------------

int main () {
    char *str = NULL;
    int ch;
    size_t size = 0, len = 0;
    while ((ch = getchar ()) != EOF && ch != '\n') {
        if (len + 1 >= size) {
            size = size * 2 + 1;
            str = realloc (str, sizeof (char) * size);
        }
        str[len++] = ch;
    }
    if (str != NULL) {
        str[len] = '\0';
        printf ("%s\n", str);
        free (str);
    }
    return 0;
}
----------------------------------------

int main () {
    char *str;
    int ch;
    int size = 10, len = 0;
    str = realloc (NULL, sizeof (char) * size);
    if (str == NULL)
        return 1;
    while ((ch = getc (stdin)) && ch != EOF && ch != '\n') {
        str[len++] = (char) ch;
        if (len == size) {
            str = realloc (str, sizeof (char) * (size += 10));
            if (str == NULL)
                return 1;
        }
    }
    str[len] = '\0';
    printf ("%s\n", str);
    free (str);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53116277_53116467_4_24
53116277_53116609_4_27
Title: How to input a string with unknown size 
----------------------------------------

int main () {
    char *str = NULL;
    int ch;
    size_t size = 0, len = 0;
    while ((ch = getchar ()) != EOF && ch != '\n') {
        if (len + 1 >= size) {
            size = size * 2 + 1;
            str = realloc (str, sizeof (char) * size);
        }
        str[len++] = ch;
    }
    if (str != NULL) {
        str[len] = '\0';
        printf ("%s\n", str);
        free (str);
    }
    return 0;
}
----------------------------------------

int main () {
    char *str = NULL;
    int ch;
    int capacity = 10, size = 0;
    str = realloc (str, sizeof (*str) * (capacity + 1));
    if (!str)
        return 1;
    while ((ch = getchar ()) != EOF && ch != '\n') {
        if (size == capacity) {
            capacity += 10;
            str = realloc (str, sizeof (*str) * (capacity + 1));
            if (!str)
                return 1;
        }
        str[size] = (char) ch;
        size++;
    }
    str[size] = '\0';
    printf ("%s\n", str);
    free (str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53116277_53116493_4_30
53116277_53116609_4_27
Title: How to input a string with unknown size 
----------------------------------------

int main () {
    char *str;
    int ch;
    int size = 10, len = 0;
    str = realloc (NULL, sizeof (char) * size);
    if (str == NULL)
        return 1;
    while ((ch = getc (stdin)) && ch != EOF && ch != '\n') {
        str[len++] = (char) ch;
        if (len == size) {
            str = realloc (str, sizeof (char) * (size += 10));
            if (str == NULL)
                return 1;
        }
    }
    str[len] = '\0';
    printf ("%s\n", str);
    free (str);
}
----------------------------------------

int main () {
    char *str = NULL;
    int ch;
    int capacity = 10, size = 0;
    str = realloc (str, sizeof (*str) * (capacity + 1));
    if (!str)
        return 1;
    while ((ch = getchar ()) != EOF && ch != '\n') {
        if (size == capacity) {
            capacity += 10;
            str = realloc (str, sizeof (*str) * (capacity + 1));
            if (!str)
                return 1;
        }
        str[size] = (char) ch;
        size++;
    }
    str[size] = '\0';
    printf ("%s\n", str);
    free (str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53121470_53121666_4_25
53121470_53121791_3_10
Title: Add character after specific character in string 
----------------------------------------

int main () {
    char x [256], y [256];
    unsigned index = 0;
    scanf ("%s", x);
    for (unsigned i = 0; i < strlen (x); i++) {
        y[index++] = x[i];
        if (x[i] == '*')
            y[index++] = '*';
    }
    y[index] = '\0';
    printf ("%s", y);
    system ("pause");
    return 0;
}
----------------------------------------

int main () {
    while (1) {
        int input = fgetc (stdin);
        if (input == EOF) {
            break;
        }
        if (input == '*') {
            fputc ('*', stdout);
        }
        fputc (input, stdout);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53130276_53130470_1_17
53130276_53131099_4_50
Title: realloc() invalid pointer error when increasing size of string in a function 
----------------------------------------

char *input (void) {
    size_t i = 0;
    int c;
    char *str = malloc (1);
    if (!str)
        return 0;
    while ((c = getchar ()) != EOF && c != '\n') {
        str[i] = c;
        if ((newstr = realloc (str, i +1)) == 0)
            break;
        str = newstr;
        i++;
    }
    str[i] = '\0';
    return str;
}
----------------------------------------

char *input (void) {
    size_t n = 0;
    char *str = NULL;
    do {
        ++n;
        {
            void *pv = realloc (str, (n + 1) * sizeof *str);
            if (NULL == pv) {
                perror ("realloc() failed");
                break;
            }
            str = pv;
        }
        {
            int result = getchar ();
            if (EOF == result) {
                if (ferror (stdin)) {
                    fprintf (stderr, "getchar() failed\n");
                }
                --n;
                break;
            }
            str[n - 1] = result;
        }
    }
    while ('\n' != str[n - 1]);
    if (NULL != str) {
        str[n] = '\0';
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53132823_53133123_11_28
53132823_53133261_28_45
Title: Trying to tweak sscanf() to ignore \n and \t 
----------------------------------------

int main (void) {
    for (int i = 0; i < NUM_DATA; i++) {
        printf ("String: @@%s@@@\n", data [i]);
        double x_1 = -9.9, y_1 = -9.9;
        double x_2 = -9.9, y_2 = -9.9;
        double x_3 = -9.9, y_3 = -9.9;
        int rc = sscanf (data[i], "{ [ %lf ; %lf ] , [ %lf ; %lf ] , [ %lf ; %lf ] }", &x_1, &y_1, &x_2, &y_2, &x_3, &y_3);
        printf ("rc = %d: ", rc);
        printf (" 1 = (%.1lf,%.1lf)", x_1, y_1);
        printf (" 2 = (%.1lf,%.1lf)", x_2, y_2);
        printf (" 3 = (%.1lf,%.1lf)", x_3, y_3);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main (void) {
    char s [512];
    double x_1, x_2, x_3, y_1, y_2, y_3;
    size_t len;
    len = get_tuple (s, 512);
    while (len > 0) {
        printf ("%s\n", s);
        if (sscanf (s, "{ [ %lf ; %lf ] , [ %lf ; %lf ] , [ %lf ; %lf ] }", &x_1, &y_1, &x_2, &y_2, &x_3, &y_3) == 6) {
            printf ("read: x_1=%f, y_1=%f, x_2=%f, y_2=%f, x_3=%f, y_3=%f\n", x_1, y_1, x_2, y_2, x_3, y_3);
        }
        else {
            printf ("scanf failed\n");
        }
        len = get_tuple (s, 512);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53134028_53134060_4_17
53134028_53134087_3_13
Title: Remove all '\' from a string in C 
----------------------------------------

int main (void) {
    char result [100] = {'\0'}, string [] = "co\\din\\g";
    for (int i = 0, j = 0; i < strlen (string); i++) {
        if (string[i] != '\\')
            result[j++] = string[i];
    }
    printf ("%s %s\n", result, string);
    return 0;
}
----------------------------------------

int main () {
    char st [] = "co\\din\\g";
    int k = 0;
    for (int i = 0; st[i] != '\0'; ++i)
        if (st[i] != '\\')
            st[k++] = st[i];
    st[k] = '\0';
    fputs (st, stdout);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53136285_53136324_65_99
53136285_53144262_19_56
Title: Efficient algorithm to calculate the sum of number of base2 digits (number of bits) over an interval of positive integers 
----------------------------------------

int main (void) {
    unsigned int a, b, m;
    unsigned long l;
    clock_t start, end;
    l = 0;
    a = 0;
    b = UINT_MAX;
    start = clock ();
    unsigned int i;
    for (i = a; i < b; ++i) {
        l += numberOfBits (i);
    }
    if (i == b) {
        l += numberOfBits (i);
    }
    end = clock ();
    printf ("Naive\n");
    printf ("Digits: %ld; Time: %fs\n", l, ((double) (end - start)) / CLOCKS_PER_SEC);
    l = 0;
    start = clock ();
    do {
        m = findEndLimit (a, b);
        l += (b - m + 1) * (unsigned long) numberOfBits (b);
        b = m - 1;
    }
    while (b > a);
    l += (b - a + 1) * (unsigned long) numberOfBits (b);
    end = clock ();
    printf ("Binary search\n");
    printf ("Digits: %ld; Time: %fs\n", l, ((double) (end - start)) / CLOCKS_PER_SEC);
}
----------------------------------------

int main (int argc, char **argv) {
    if (2 >= argc) {
        fprintf (stderr, "%s a b\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    long a = atol (argv[1]), b = atol (argv[2]);
    if (0L >= a || 0L >= b || b < a) {
        puts ("Na ...!");
        exit (EXIT_FAILURE);
    }
    unsigned long long a_c = pow (2, floor (log2 (a)));
    unsigned long long b_c = pow (2, floor (log2 (b +1)) + 1);
    double log2_a_c = log2 (a_c);
    double log2_b_c = log2 (b_c);
    unsigned long p2s = pow2sum_min (log2_b_c, log2_a_c) - 1;
    double A = ((b_c * (LN (b_c) - 1)) - (a_c * (LN (a_c) - 1))) / LN (2) + (b + 1 - a);
    double D = p2s - (b_c - a_c) / LN (2);
    double C = (log2_b_c - 1) * (b_c - (b + 1)) + log2_a_c * (a - a_c);
    printf ("Total used digits: %lld\n", (long long) ((A - D - C) +.5));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53138161_53138566_24_47
53138161_53138570_35_68
Title: Values in array in main not updating when changing through function 
----------------------------------------

int readfile (unsigned char storage [], size_t capacity, char filename []) {
    FILE *content = fopen (filename, "r");
    if (content != NULL) {
        size_t numElements, bytesPer = sizeof (unsigned char);
        fseek (content, 0, SEEK_END);
        numElements = ftell (content);
        if (numElements > capacity)
            numElements = capacity;
        rewind (content);
        if (fread (storage, bytesPer, numElements, content) != numElements)
            printf ("Bogus input\n");
        printf ("Got %zu bytes\n", numElements);
        for (int i = 0; i < 16; i++)
            printf (" 0x%.2X", storage[i]);
        putchar ('\n');
        fclose (content);
    }
    else
        fprintf (stderr, "failed to open file '%s'\n", filename);
    return 0;
}
----------------------------------------

int readfile (unsigned char *storage, int capacity, char *filename) {
    size_t numElements, bytesPer = sizeof (unsigned char);
    FILE *content = fopen (filename, "r");
    if (!content) {
        perror ("fopen-filename");
        return 0;
    }
    if (fseek (content, 0, SEEK_END) == -1) {
        perror ("fseek-content");
        return 0;
    }
    if ((long) (numElements = ftell (content)) == -1) {
        perror ("ftell-content");
        return 0;
    }
    rewind (content);
    if (numElements > capacity * bytesPer)
        fprintf (stderr, "warning - file size exceeds read capacity.\n");
    if (fread (storage, bytesPer, numElements, content) != numElements) {
        fprintf (stderr, "error: less than %zu elements read from %s\n", numElements, filename);
        return 0;
    }
    fclose (content);
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53138181_53138387_40_76
53138181_53138529_57_72
Title: sort function won't print sorted array? 
----------------------------------------

int sorter (int numbList []) {
    int x;
    int temp;
    int swapped;
    while (1) {
        swapped = 0;
        for (int i = 0; i < x; i++) {
            if (i > numbList[i + 1]) {
                temp = numbList[x];
                numbList[x] = numbList[x + 1];
                numbList[x + 1] = numbList[x];
                swapped = 1;
            }
            if (swapped == 0) {
                break;
            }
        }
        printf ("Array as sorted:\n");
        for (int i = 0; i < x; i++) {
            printf ("%d\t", numbList [x]);
        }
        return (numbList[x]);
    }
}
----------------------------------------

void sorter (int numbList [], int x) {
    for (;;) {
        int swapped = 0;
        for (int i = 0; i < x - 1; i++) {
            if (numbList[i] > numbList[i + 1]) {
                int temp = numbList[i];
                numbList[i] = numbList[i + 1];
                numbList[i + 1] = temp;
                swapped = 1;
            }
        }
        if (swapped == 0) {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53144998_53145572_9_44
53144998_53145676_18_57
Title: How to handle extraction of double type numbers from a complex input (string) 
----------------------------------------

int main () {
    char t1 [STR_LEN], digits [STR_LEN], *dpt, per [2] = ".";
    int i, idig, digit, period;
    double x;
    fgets (t1, STR_LEN, stdin);
    idig = 0;
    for (i = 0; i < strlen (t1); i++) {
        digit = isdigit (t1[i]);
        period = (t1[i] == '.') ? 1 : 0;
        if (digit) {
            digits[idig++] = t1[i];
            digits[idig] = 0;
        }
        if (period == 1) {
            strcat (digits, per);
            idig += 1;
        }
    }
    x = strtod (digits, &dpt);
    int testOutput = strlen (digits);
    printf ("%s %d %lf\n", digits, testOutput, x);
    return 0;
}
----------------------------------------

int main () {
    const char *input = "some words before {[ 5.1 ; 4 ], [15.3 ; -3.2] } some words after";
    struct Pair *head = NULL, *p = NULL;
    char *err = NULL;
    double first, second;
    const char *s = strchr (input, '{');
    while (s) {
        s = strchr (s, '[');
        if (!s) {
            break;
        }
        while (*s == ' ' || *s == '[') {
            ++s;
        }
        first = strtod (s, &err);
        if (err && (*err == ' ' || *err == ';')) {
            s = err + 1;
            while (*s == ' ' || *s == ';') {
                ++s;
            }
            second = strtod (s, &err);
            if (err && (*err == ' ' || *err == ']')) {
                p = (struct Pair *) calloc (1, sizeof (struct Pair));
                p->first = first;
                p->second = second;
                p->tail = head;
                head = p;
            }
            else {
                fprintf (stderr, "Parse error, space or ']' expected\n");
                exit (EXIT_FAILURE);
            }
        }
        else {
            fprintf (stderr, "Parse error, space or ';' expected\n");
            exit (EXIT_FAILURE);
        }
    }
    printPairs (head);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53145071_53145204_3_24
53145071_53145344_3_42
Title: Making all lines one space inside than the rest in c 
----------------------------------------

int main (void) {
    int n, i, b;
    printf ("Enter number of rows: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        int offset = (n / 2) - (i - 1);
        if (offset < 0)
            offset = -offset;
        for (b = 1; b <= offset; b++)
            printf (" ");
        for (b = 1; b <= n + 1; b++)
            printf ("*");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i, b;
    printf ("Enter number of rows: ");
    scanf ("%d", & n);
    for (i = 1; i <= n / 2; i++) {
        for (b = i; b <= n / 2; b++)
            printf (" ");
        if (i == 1)
            for (b = 1; b <= n + i; b++)
                printf ("*");
        else
            for (b = 1; b <= n + i - 1; b++)
                printf ("*");
        printf ("\n");
    }
    for (i = 1; i <= n + (n / 2); i++)
        printf ("*");
    printf ("\n");
    for (i = 1; i <= n / 2; i++) {
        for (b = 1; b <= i; b++)
            printf (" ");
        if (i == n / 2)
            for (b = 1; b <= n + 1; b++)
                printf ("*");
        else
            for (b = 1; b <= n + (n / 2) - i; b++)
                printf ("*");
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53145071_53145204_3_24
53145071_53145381_3_32
Title: Making all lines one space inside than the rest in c 
----------------------------------------

int main (void) {
    int n, i, b;
    printf ("Enter number of rows: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        int offset = (n / 2) - (i - 1);
        if (offset < 0)
            offset = -offset;
        for (b = 1; b <= offset; b++)
            printf (" ");
        for (b = 1; b <= n + 1; b++)
            printf ("*");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i, b;
    printf ("Enter number of rows: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        if (i < (n / 2) + 1) {
            for (b = i; b < n / 2 + 1; b++) {
                printf (" ");
            }
        }
        else {
            for (b = i; b != (n / 2) + 1; b--) {
                printf (" ");
            }
        }
        for (b = 1; b <= n + 1; b++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53145071_53145344_3_42
53145071_53145381_3_32
Title: Making all lines one space inside than the rest in c 
----------------------------------------

int main () {
    int n, i, b;
    printf ("Enter number of rows: ");
    scanf ("%d", & n);
    for (i = 1; i <= n / 2; i++) {
        for (b = i; b <= n / 2; b++)
            printf (" ");
        if (i == 1)
            for (b = 1; b <= n + i; b++)
                printf ("*");
        else
            for (b = 1; b <= n + i - 1; b++)
                printf ("*");
        printf ("\n");
    }
    for (i = 1; i <= n + (n / 2); i++)
        printf ("*");
    printf ("\n");
    for (i = 1; i <= n / 2; i++) {
        for (b = 1; b <= i; b++)
            printf (" ");
        if (i == n / 2)
            for (b = 1; b <= n + 1; b++)
                printf ("*");
        else
            for (b = 1; b <= n + (n / 2) - i; b++)
                printf ("*");
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i, b;
    printf ("Enter number of rows: ");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        if (i < (n / 2) + 1) {
            for (b = i; b < n / 2 + 1; b++) {
                printf (" ");
            }
        }
        else {
            for (b = i; b != (n / 2) + 1; b--) {
                printf (" ");
            }
        }
        for (b = 1; b <= n + 1; b++) {
            printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5314767_25225520_5_65
5314767_25225536_4_27
Title: "Computing the nth number of the fibonacci sequence where n is entered at command line" 
----------------------------------------

int main (int c, char *v []) {
    int *numberOfTerms;
    int x, y, z, i, count;
    if (c == 1) {
        printf ("provide number of terms as command line argument");
        return 0;
    }
    numberOfTerms = (int *) malloc (sizeof (int));
    *numberOfTerms = atoi (v[1]);
    x = 0;
    y = 1;
    if (*numberOfTerms == 0)
        return 0;
    if (*numberOfTerms <= 2) {
        for (i = 0; i < *numberOfTerms; i++)
            printf ("%d\n", i);
        return 0;
    }
    printf ("%d\n", x);
    printf ("%d\n", y);
    count = 2;
    while (count < *numberOfTerms) {
        z = x + y;
        printf ("%d\n", z);
        x = y;
        y = z;
        count++;
    }
}
----------------------------------------

int main (int c, char *v []) {
    int *number;
    int x, y, z;
    if (c == 1) {
        printf ("provide number upto which febonacci is to be printed (greater than 2)");
        return 0;
    }
    number = (int *) malloc (sizeof (int));
    *number = atoi (v[1]);
    x = 0;
    y = 1;
    printf ("%d\n", x);
    printf ("%d\n", y);
    z = x + y;
    while (z <= *number) {
        printf ("%d\n", z);
        x = y;
        y = z;
        z = x + y;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5315428_19566456_8_27
5315428_5315473_6_24
Title: How to create a file with file holes? 
----------------------------------------

int main () {
    int fd;
    if ((fd = creat ("file_with_hole", FILE_MODE)) < 0)
        err_sys ("creat error");
    if (write (fd, buf1, 5) != 5)
        err_sys ("buf1 write error");
    if (lseek (fd, 815, SEEK_SET) == -1)
        err_sys ("lseek error");
    if (write (fd, buf2, 5) != 5)
        err_sys ("buf2 write error");
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    char random_garbage [8192];
    int fd = -1;
    if (argc < 2) {
        fprintf (stderr, "Usage: %s <filename>\n", argv [0]);
        return 1;
    }
    fd = open (argv[1], O_WRONLY | O_CREAT | O_TRUNC, 0666);
    if (fd < 0) {
        perror ("Can't open file: ");
        return 2;
    }
    write (fd, random_garbage, 8192);
    lseek (fd, 5 * 4096, SEEK_CUR);
    write (fd, random_garbage, 8192);
    close (fd);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53184546_53184670_3_22
53184546_53186602_5_27
Title: How would I only print out characters that have not appeared before in an argument? 
----------------------------------------

int main (int argc, char **argv) {
    int i;
    char f [128];
    unsigned char ch;
    if (argc != 2) {
        printf ("use : ./a.out str");
        return -1;
    }
    for (i = 0; i != sizeof (f); ++i)
        f[i] = 0;
    for (i = 0; argv[1][i] != '\0'; ++i) {
        ch = argv[1][i];
        if (f[ch] == 0) {
            putchar (ch);
            f[ch] = 1;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int *seen = calloc (256, sizeof (char));
    if (argv[1] == NULL) {
        printf ("No argument.\n");
        return 0;
    }
    for (int i = 0; i < strlen (argv[1]); i++) {
        if (seen[argv[1][i]] != 1) {
            seen[argv[1][i]] = 1;
            putchar (argv [1] [i]);
        }
    }
    free (seen);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53190809_53192387_6_28
53190809_53236751_1_18
Title: C - Deleting Node when there's only 1 element in a single Linked List 
----------------------------------------

void deleteNode (node **head, int value) {
    node *prev = NULL, *curr = *head;
    while (curr && curr->value != value) {
        prev = curr;
        curr = curr->next;
    }
    if (curr == NULL) {
        printf ("node to delete not found\n");
    }
    else if (prev == NULL) {
        *head = (*head)->next;
    }
    else {
        prev->next = curr->next;
    }
    free (curr);
}
----------------------------------------

nodeptr deleteNode (nodeptr head, int value) {
    if (value == head->data) {
        head = deleteBeginning (head);
        return head;
    }
    nodeptr current = head;
    nodeptr previous;
    while (current->data != value) {
        previous = current;
        current = current->next;
    }
    previous->next = current->next;
    free (current);
    return head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53193024_53193289_9_18
53193024_53193936_10_19
Title: Passing a 2d array with pointers and accessing it gives segmentation fault 
----------------------------------------

int main () {
    int i;
    char c [2] [10];
    puts ("enter two strings");
    for (i = 0; i < 2; i++)
        scanf ("%s", c[i]);
    ArrPrintMatrix (c, 2);
    return 0;
}
----------------------------------------

int main () {
    int i;
    char c [2] [10] = {0};
    puts ("enter two strings");
    for (i = 0; i < 2; i++)
        scanf ("%s", c[i]);
    ArrPrintMatrix (c, 2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53206676_53206873_15_28
53206676_53206981_15_28
Title: Recursive implementation of Fibonacci function 
----------------------------------------

int fib_rec (int n, int *count) {
    int b = 0, c = 1;
    *count = *count + 1;
    if (n <= 1) {
        return n;
    }
    else {
        printf ("count: %d\n", * count);
        return fib_rec (n -1, count) + fib_rec (n -2, count);
    }
}
----------------------------------------

int fib_rec (int n, int *count) {
    *count = *count + 1;
    if ((n <= 1)) {
        return 1;
    }
    else {
        printf ("%d ", n);
        return (fib_rec (n -1, count) + fib_rec (n -2, count));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53214049_53214447_3_28
53214049_53214963_66_107
Title: Creating a grid shape in C(Why is it creating one extra line?) 
----------------------------------------

int main (void) {
    int row, col, r, c;
    printf ("Enter Number Of Rows And Columns: ");
    scanf ("%d", & row);
    scanf ("%d", & col);
    for (r = 0; r < row; r++) {
        for (c = 0; c < col; c++)
            printf ("+--");
        printf ("+\n");
        for (c = 0; c < col; c++)
            printf ("|  ");
        printf ("|\n");
    }
    for (c = 0; c < col; c++)
        printf ("+--");
    printf ("+\n");
}
----------------------------------------

int main (int argc, char *argv []) {
    const int max = wcslen (names);
    int rows, cols;
    char dummy;
    if (!setlocale (LC_ALL, ""))
        fprintf (stderr, "Warning: Your C library does not support your current locale.\n");
    if (fwide (stdout, 1) < 1)
        fprintf (stderr, "Warning: Your C library does not support wide character standard output.\n");
    if (argc != 3) {
        fprintf (stderr, "\n");
        fprintf (stderr, "Usage: %s [ help ]\n", argv [0]);
        fprintf (stderr, "       %s ROWS COLUMNS\n", argv [0]);
        fprintf (stderr, "\n");
        return EXIT_SUCCESS;
    }
    if (sscanf (argv[1], " %d %c", &rows, &dummy) != 1 || rows < 1) {
        fprintf (stderr, "%s: Invalid number of rows.\n", argv [1]);
        return EXIT_FAILURE;
    }
    if (rows > max) {
        fprintf (stderr, "%s: Too many rows. The maximum is %d.\n", argv [1], max);
        return EXIT_FAILURE;
    }
    if (sscanf (argv[2], " %d %c", &cols, &dummy) != 1 || cols < 1) {
        fprintf (stderr, "%s: Invalid number of columns.\n", argv [2]);
        return EXIT_FAILURE;
    }
    if (cols > max) {
        fprintf (stderr, "%s: Too many columns. The maximum is %d.\n", argv [2], max);
        return EXIT_FAILURE;
    }
    wide_grid (stdout, rows, cols);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53220084_53220381_10_28
53220084_53221258_11_41
Title: Proper input method to take char string input in C 
----------------------------------------

int main () {
    char name [ITERATIONS] [MAX_NAME_LENGTH + 1];
    unsigned int score [ITERATIONS];
    int i;
    for (i = 0; i < ITERATIONS; i++) {
        scanf ("%30s", name [i]);
        scanf ("%u", & score [i]);
    }
    for (i = 0; i < ITERATIONS; i++) {
        printf ("%s scored %u in the test\n", name [i], score [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n = 0;
    student_t student [ROW] = {{
            .name = ""
        }
    };
    puts ("\n[note; press Enter alone to end input]\n");
    for (;;) {
        char buf [COL];
        fputs ("Enter student name: ", stdout);
        if (!fgets (buf, sizeof buf, stdin))
            break;
        if (*buf == '\n')
            break;
        if (sscanf (buf, "%63s %d", student[n].name, &student[n].score) != 2) {
            fputs ("  error: invalid input, conversion failed.\n", stderr);
            continue;
        }
        n++;
        if (n == ROW) {
            fputs ("\narray full - input complete.\n", stdout);
            break;
        }
    }
    for (int i = 0; i < n; i++)
        printf ("%-16s %3d\n", student[i].name, student[i].score);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53229661_53229831_9_38
53229661_53230143_10_24
Title: C programming problem pointers and arrays 2d 
----------------------------------------

void ArrPrintMatrix (char (*p) [8]) {
    int i = 0, j = 0, k = 0;
    while (k != 9) {
        if (p[i][j] == '\0') {
            ++i;
            j = 0;
        }
        printf ("%c ", p [i] [j ++]);
        ++k;
        if (k % 3 == 0)
            printf ("\n");
    }
}
----------------------------------------

void ArrPrintMatrix (char *p) {
    int i, j;
    for (i = 0, j = 0; i < 16; i++) {
        if (j >= 9)
            break;
        if (j == 3 || j == 6 || j == 9)
            printf ("\n");
        if (*(p + i) == 0)
            continue;
        printf ("%c ", * (p + i));
        j++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53238730_53238975_5_21
53238730_53239499_3_38
Title: Unable to print numbers entered into an array in reverse order 
----------------------------------------

int main () {
    int numbers [ARRAY_LENGTH];
    int i;
    int k;
    for (k = 0; k != ARRAY_LENGTH; ++k) {
        printf ("Enter an integer; 0 to quit: ");
        if (scanf ("%d", numbers +k) != 1 || numbers[k] == 0)
            break;
    }
    for (i = k - 1; i >= 0; --i)
        printf ("index %d -> %d\n", i, numbers[i]);
    return 0;
}
----------------------------------------

int main () {
    int numbers [ARRAY_LENGTH];
    int numbersEntered = 0;
    for (int i = 0; i < ARRAY_LENGTH; i++)
        numbers[i] = 0;
    int number = 0;
    do {
        printf ("Enter an integer; 0 to quit: ");
        scanf_s ("%d", & number);
        if (number == 0)
            break;
        numbers[numbersEntered++] = number;
    }
    while (number != 0 && numbersEntered < ARRAY_LENGTH);
    if (numbersEntered > 0) {
        for (int i = numbersEntered - 1; i >= 0; i--)
            printf ("index %d -> %d\n", i, numbers[i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53251914_53252438_5_62
53251914_53255043_50_69
Title: what is the better way to loop this problem? 
----------------------------------------

int main (void) {
    int i, j, dim;
    int matrix [N] [N];
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            matrix[i][j] = i * N + j;
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
    }
    printf ("\n");
    for (dim = 0; dim < (N + 1) / 2; dim++) {
        i = dim;
        for (j = dim; j < N - dim; j++) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
        j--;
        i++;
        for (; i < N - dim; i++) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
        i--;
        j--;
        for (; j >= dim; j--) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
        j++;
        i--;
        for (; i > dim; i--) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int var [5] [5];
    struct strangeite_s i;
    strangeite_init (& i, 5, 5);
    int idx = 0;
    for (size_t x, y; strangeite_loop (&i, &x, &y); strangeite_inc (&i)) {
        var[y][x] = ++idx;
    }
    for (size_t i = 0; i < 5; ++i) {
        for (size_t j = 0; j < 5; ++j) {
            printf ("%d ", var [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53251914_53252438_5_62
53251914_53264730_16_25
Title: what is the better way to loop this problem? 
----------------------------------------

int main (void) {
    int i, j, dim;
    int matrix [N] [N];
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            matrix[i][j] = i * N + j;
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
    }
    printf ("\n");
    for (dim = 0; dim < (N + 1) / 2; dim++) {
        i = dim;
        for (j = dim; j < N - dim; j++) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
        j--;
        i++;
        for (; i < N - dim; i++) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
        i--;
        j--;
        for (; j >= dim; j--) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
        j++;
        i--;
        for (; i > dim; i--) {
            printf ("%2d ", matrix [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, j;
    for (j = 0; j < N; j++) {
        for (i = 0; i < N; i++) {
            printf ("%3d ", a (i, j));
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53251914_53255043_50_69
53251914_53264730_16_25
Title: what is the better way to loop this problem? 
----------------------------------------

int main () {
    int var [5] [5];
    struct strangeite_s i;
    strangeite_init (& i, 5, 5);
    int idx = 0;
    for (size_t x, y; strangeite_loop (&i, &x, &y); strangeite_inc (&i)) {
        var[y][x] = ++idx;
    }
    for (size_t i = 0; i < 5; ++i) {
        for (size_t j = 0; j < 5; ++j) {
            printf ("%d ", var [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, j;
    for (j = 0; j < N; j++) {
        for (i = 0; i < N; i++) {
            printf ("%3d ", a (i, j));
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53287260_53287542_3_11
53287260_53287562_12_25
Title: error while initializing int type flexible array in structure in c 
----------------------------------------

void test (void) {
    s2g = malloc (sizeof (struct S2) + STUD_ROLL_SIZE * sizeof (int));
    if (s2g == NULL) {
        fprintf (stderr, "Abort ship! Abort ship!\n");
        exit (- 1);
    }
    s2g->stud_roll[0] = 1;
    free (s2g);
}
----------------------------------------

void test (void) {
    s2g = malloc (sizeof *s2g + ELEMENTS * sizeof *s2g->stud_roll);
    if (!s2g) {
        perror ("malloc-s2g");
        exit (EXIT_FAILURE);
    }
    s2g->foo = 1;
    s2g->bar = 2;
    for (int i = 0; i < ELEMENTS; i++)
        s2g->stud_roll[i] = i + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53290617_53290769_3_25
53290617_53290911_1_42
Title: Finding the Average in a sequence of number in c while ignoring the negative numbers in the sequence 
----------------------------------------

int main () {
    int num;
    int count = 0;
    double sum = 0.0;
    double avg;
    printf ("Enter the number of number in the sequence:\n");
    if (scanf ("%d", &num) == 1 && num > 0) {
        printf ("Enter the sequence:\n");
        while (num-- > 0) {
            int temp;
            if (scanf ("%d", &temp) != 1)
                break;
            if (temp >= 0) {
                sum += temp;
                count++;
            }
        }
        avg = sum / count;
        printf ("Average is %.2f\n", avg);
    }
    return 0;
}
----------------------------------------

int main () {
    printf ("Enter the number of number in the sequence:\n");
    int num = 0;
    int check = scanf ("%d", &num);
    int positive_count = 0;
    int sum = 0;
    if (check != 0 && num >= 0) {
        printf ("Enter the sequence:\n");
        int i = 0;
        while (i < num) {
            int value = 0;
            check = scanf ("%d", &value);
            if (check != 0) {
                i++;
                if (value >= 0) {
                    positive_count++;
                    sum += value;
                }
            }
        }
    }
    if (positive_count != 0) {
        float avg = (float) sum / positive_count;
        printf ("Average is %.2f\n", avg);
    }
    else {
        printf ("No positive numbers!\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53293666_53293737_1_17
53293666_53294401_16_29
Title: "scanf in function seems to be writing garbage values to one array but not the other despite both being identical" 
----------------------------------------

void updateRating (int *jerseyNumbers, int *playerRatings) {
    int i, n = -1, hold;
    printf ("Enter a jersey number:\n");
    scanf ("%d", n);
    for (i = 0; i < 5; ++i) {
        if (jerseyNumbers[i] == n) {
            hold = n;
        }
    }
    if (n = -1) {
        printf ("Error");
    }
    else {printf ("Enter a new rating for player:\n");
    scanf ("%d", & playerRatings [n]);
}
----------------------------------------

void updateRating (int *jerseyNumbers, int *playerRatings) {
    int i, n = -1, hold;
    printf ("Enter a jersey number:\n");
    scanf ("%d", n);
    for (i = 0; i < 5; ++i)
        if (jerseyNumbers[i] == n)
            hold = n;
    if (n = -1)
        printf ("Error");
    printf ("Enter a new rating for player:\n");
    scanf ("%d", & playerRatings [n]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53297231_53297540_3_15
53297231_53297578_17_29
Title: Finding duplicate values in array in c 
----------------------------------------

int main () {
    int index [256] = {0};
    int table [15] = {1, 2, 3, 5, 5, 6, 1, 2, 9, 10, 11, 2, 3, 4, 5};
    for (int i = 0; i < 15; i++) {
        index[table[i]]++;
    }
    for (int i = 0; i < 256; i++) {
        index[i] > 1 ? printf ("%d\n", i) : 0;
    }
}
----------------------------------------

int main (void) {
    int numbers [] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9};
    for (size_t i = 0; i < SIZEOF_ARRAY (numbers) - 1; ++i) {
        if (contains (numbers, i, numbers[i]))
            continue;
        if (contains (numbers +i + 1, SIZEOF_ARRAY (numbers) -i, numbers[i]))
            printf ("Number %d has duplicate values\n", numbers[i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53297231_53297540_3_15
53297231_53298234_2_39
Title: Finding duplicate values in array in c 
----------------------------------------

int main () {
    int index [256] = {0};
    int table [15] = {1, 2, 3, 5, 5, 6, 1, 2, 9, 10, 11, 2, 3, 4, 5};
    for (int i = 0; i < 15; i++) {
        index[table[i]]++;
    }
    for (int i = 0; i < 256; i++) {
        index[i] > 1 ? printf ("%d\n", i) : 0;
    }
}
----------------------------------------

int main () {
    int numbers [15] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9}, i, j;
    int dups [7];
    char dup_idx = 0;
    char found_new_duplicate;
    for (i = 0; i < 15; i++) {
        for (j = i + 1; j < 14; j++) {
            if (numbers[i] == numbers[j]) {
                found_new_duplicate = 1;
                for (int kk = 0; kk <= dup_idx; kk++) {
                    if (dups[kk] == numbers[i] && !(i == 0 && j == 1)) {
                        found_new_duplicate = 0;
                        break;
                    }
                }
                if (found_new_duplicate) {
                    dups[dup_idx] = numbers[i];
                    printf ("Number %d has duplicate values with indexes i=%d, j=%d\n", numbers [i], i, j);
                    printf ("New duplicate %d\n", dups [dup_idx]);
                    dup_idx++;
                    break;
                }
            }
        }
    }
    for (int kk = 0; kk < dup_idx; kk++)
        printf ("%d\n", dups[kk]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53297231_53297540_3_15
53297231_53298430_2_25
Title: Finding duplicate values in array in c 
----------------------------------------

int main () {
    int index [256] = {0};
    int table [15] = {1, 2, 3, 5, 5, 6, 1, 2, 9, 10, 11, 2, 3, 4, 5};
    for (int i = 0; i < 15; i++) {
        index[table[i]]++;
    }
    for (int i = 0; i < 256; i++) {
        index[i] > 1 ? printf ("%d\n", i) : 0;
    }
}
----------------------------------------

int main () {
    int numbers [15] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9}, i, j;
    int arr2 [15], k = 0, k1 = 0;
    int flag = 0;
    for (i = 0; i < 15; i++) {
        for (j = 0; j < 15; j++) {
            flag = 0;
            if (i != j && numbers[i] == numbers[j]) {
                for (k1 = 0; k1 < k; k1++)
                    if (arr2[k1] == numbers[j])
                        flag = 1;
                if (flag != 1)
                    arr2[k++] = numbers[j];
            }
        }
    }
    for (i = 0; i < k; i++)
        printf ("Number %d has duplicate values\n", arr2[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53297231_53297578_17_29
53297231_53298234_2_39
Title: Finding duplicate values in array in c 
----------------------------------------

int main (void) {
    int numbers [] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9};
    for (size_t i = 0; i < SIZEOF_ARRAY (numbers) - 1; ++i) {
        if (contains (numbers, i, numbers[i]))
            continue;
        if (contains (numbers +i + 1, SIZEOF_ARRAY (numbers) -i, numbers[i]))
            printf ("Number %d has duplicate values\n", numbers[i]);
    }
}
----------------------------------------

int main () {
    int numbers [15] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9}, i, j;
    int dups [7];
    char dup_idx = 0;
    char found_new_duplicate;
    for (i = 0; i < 15; i++) {
        for (j = i + 1; j < 14; j++) {
            if (numbers[i] == numbers[j]) {
                found_new_duplicate = 1;
                for (int kk = 0; kk <= dup_idx; kk++) {
                    if (dups[kk] == numbers[i] && !(i == 0 && j == 1)) {
                        found_new_duplicate = 0;
                        break;
                    }
                }
                if (found_new_duplicate) {
                    dups[dup_idx] = numbers[i];
                    printf ("Number %d has duplicate values with indexes i=%d, j=%d\n", numbers [i], i, j);
                    printf ("New duplicate %d\n", dups [dup_idx]);
                    dup_idx++;
                    break;
                }
            }
        }
    }
    for (int kk = 0; kk < dup_idx; kk++)
        printf ("%d\n", dups[kk]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53297231_53297578_17_29
53297231_53298430_2_25
Title: Finding duplicate values in array in c 
----------------------------------------

int main (void) {
    int numbers [] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9};
    for (size_t i = 0; i < SIZEOF_ARRAY (numbers) - 1; ++i) {
        if (contains (numbers, i, numbers[i]))
            continue;
        if (contains (numbers +i + 1, SIZEOF_ARRAY (numbers) -i, numbers[i]))
            printf ("Number %d has duplicate values\n", numbers[i]);
    }
}
----------------------------------------

int main () {
    int numbers [15] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9}, i, j;
    int arr2 [15], k = 0, k1 = 0;
    int flag = 0;
    for (i = 0; i < 15; i++) {
        for (j = 0; j < 15; j++) {
            flag = 0;
            if (i != j && numbers[i] == numbers[j]) {
                for (k1 = 0; k1 < k; k1++)
                    if (arr2[k1] == numbers[j])
                        flag = 1;
                if (flag != 1)
                    arr2[k++] = numbers[j];
            }
        }
    }
    for (i = 0; i < k; i++)
        printf ("Number %d has duplicate values\n", arr2[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53297231_53298234_2_39
53297231_53298430_2_25
Title: Finding duplicate values in array in c 
----------------------------------------

int main () {
    int numbers [15] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9}, i, j;
    int dups [7];
    char dup_idx = 0;
    char found_new_duplicate;
    for (i = 0; i < 15; i++) {
        for (j = i + 1; j < 14; j++) {
            if (numbers[i] == numbers[j]) {
                found_new_duplicate = 1;
                for (int kk = 0; kk <= dup_idx; kk++) {
                    if (dups[kk] == numbers[i] && !(i == 0 && j == 1)) {
                        found_new_duplicate = 0;
                        break;
                    }
                }
                if (found_new_duplicate) {
                    dups[dup_idx] = numbers[i];
                    printf ("Number %d has duplicate values with indexes i=%d, j=%d\n", numbers [i], i, j);
                    printf ("New duplicate %d\n", dups [dup_idx]);
                    dup_idx++;
                    break;
                }
            }
        }
    }
    for (int kk = 0; kk < dup_idx; kk++)
        printf ("%d\n", dups[kk]);
    return 0;
}
----------------------------------------

int main () {
    int numbers [15] = {1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9}, i, j;
    int arr2 [15], k = 0, k1 = 0;
    int flag = 0;
    for (i = 0; i < 15; i++) {
        for (j = 0; j < 15; j++) {
            flag = 0;
            if (i != j && numbers[i] == numbers[j]) {
                for (k1 = 0; k1 < k; k1++)
                    if (arr2[k1] == numbers[j])
                        flag = 1;
                if (flag != 1)
                    arr2[k++] = numbers[j];
            }
        }
    }
    for (i = 0; i < k; i++)
        printf ("Number %d has duplicate values\n", arr2[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53311240_53312556_22_39
53311240_53312645_4_16
Title: Finding a reversed words in a given string using C program 
----------------------------------------

int main () {
    char *inputStr = "bakelovekac";
    char *cur = inputStr;
    char *tmp;
    while (*cur != '\0') {
        tmp = cur + 1;
        while (*tmp != '\0') {
            if (*tmp == *cur) {
                checkForRevWord (cur, tmp);
            }
            tmp++;
        }
        cur++;
    }
}
----------------------------------------

int main () {
    char text [50];
    int len, i;
    printf ("Enter a text\n");
    scanf ("%[^\n]s", text);
    len = strlen (text);
    for (i = len - 1; i >= 0; i--) {
        printf ("%c", text [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53332212_53334495_1_37
53332212_53342769_1_28
Title: Inserting a node at given position 
----------------------------------------

void insert_at_position (struct node **head, int x, int pos) {
    struct node *temp = *head, *t, *tails = *head;
    int i = 0;
    t = (struct node *) malloc (sizeof (struct node));
    if (t == NULL) {
        return;
    }
    if (pos == 0) {
        t->data = x;
        t->next = start;
        start = t;
        return;
    }
    if (start == NULL) {
        free (t);
        return;
    }
    count++;
    while (temp != NULL) {
        tails = temp;
        temp = temp->next;
        if (i + 1 == pos) {
            tails->next = t;
            t->data = x;
            t->next = temp;
            return;
        }
        i++;
    }
    free (t);
}
----------------------------------------

void insert_at_position (struct node **head, int x, int pos) {
    struct node *new;
    if (!head) {
        return;
    }
    for (; *head; head = &(*head)->next) {
        if (!pos)
            break;
        pos--;
    }
    if (pos) {
        return;
    }
    new = malloc (sizeof *new);
    if (!new) {
        return;
    }
    new->data = x;
    new->next = *head;
    *head = new;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53349077_53350656_3_39
53349077_53354984_3_55
Title: Nested if statement in C 
----------------------------------------

int main () {
    int length;
    char gender;
    printf ("enter gender: ");
    scanf ("%c", & gender);
    printf ("enter length: ");
    scanf ("%d", & length);
    if (gender == 'M' || gender == 'm') {
        if (length <= 160)
            printf ("short\n");
        if (161 <= length && length <= 180)
            printf ("medium\n");
        if (181 <= length && length <= 199)
            printf ("tall\n");
    }
    if (gender == 'W' || gender == 'w') {
        if (length <= 140)
            printf ("short\n");
        if (141 <= length && length <= 165)
            printf ("medium\n");
        if (166 <= length && length <= 180)
            printf ("tall\n");
        if (length >= 180)
            printf ("error \n");
    }
    else if (gender != 'm' || gender != 'M' || gender != 'w' || gender != 'W')
        printf ("error");
    return 0;
}
----------------------------------------

int main () {
    int length;
    char gender;
    printf ("enter gender: ");
    scanf ("%c", & gender);
    printf ("enter length: ");
    scanf ("%d", & length);
    if (gender == 'M' || gender == 'm') {
        if (length >= 140 && length <= 160) {
            printf ("short");
        }
        else if (length >= 161 && length <= 180) {
            printf ("medium");
        }
        else if (length >= 181 && length <= 199) {
            printf ("tall");
        }
    }
    else if (gender == 'W' || gender == 'w') {
        if (length >= 120 && length <= 140) {
            printf ("short");
        }
        else if (length >= 141 && length <= 165) {
            printf ("medium");
        }
        else if (length >= 166 && length <= 180) {
            printf ("tall");
        }
        else {
            printf ("error");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53350832_53350997_23_34
53350832_53351110_1_11
Title: Function that copies an array and modifies its elements 
----------------------------------------

int *array_ncopy (int *ptr, int length, int upperBound) {
    int *cpy = (int *) malloc (length * sizeof (int));
    for (int i = 0; i < length; i++) {
        if (i >= upperBound)
            cpy[i] = 0;
        else
            cpy[i] = ptr[i];
    }
    return cpy;
}
----------------------------------------

int *array_ncopy (int *ptr, int array, int number) {
    int *new_array = malloc (array * sizeof (int));
    for (int i = 0; i < array; i++) {
        if (i >= number) {
            new_array[i] = 0;
        }
        else
            new_array[i] = ptr[i];
    }
    return new_array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53350832_53350997_23_34
53350832_53351468_1_17
Title: Function that copies an array and modifies its elements 
----------------------------------------

int *array_ncopy (int *ptr, int length, int upperBound) {
    int *cpy = (int *) malloc (length * sizeof (int));
    for (int i = 0; i < length; i++) {
        if (i >= upperBound)
            cpy[i] = 0;
        else
            cpy[i] = ptr[i];
    }
    return cpy;
}
----------------------------------------

int *array_ncopy (int *ptr, unsigned int size, unsigned int number) {
    int *newArray = calloc (size, sizeof (*newArray));
    if (!newArray) {
        return (NULL);
    }
    number = MIN (number, size);
    memcpy (newArray, ptr, number * sizeof (* newArray));
    return (newArray);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53350832_53351110_1_11
53350832_53351468_1_17
Title: Function that copies an array and modifies its elements 
----------------------------------------

int *array_ncopy (int *ptr, int array, int number) {
    int *new_array = malloc (array * sizeof (int));
    for (int i = 0; i < array; i++) {
        if (i >= number) {
            new_array[i] = 0;
        }
        else
            new_array[i] = ptr[i];
    }
    return new_array;
}
----------------------------------------

int *array_ncopy (int *ptr, unsigned int size, unsigned int number) {
    int *newArray = calloc (size, sizeof (*newArray));
    if (!newArray) {
        return (NULL);
    }
    number = MIN (number, size);
    memcpy (newArray, ptr, number * sizeof (* newArray));
    return (newArray);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53359154_53359237_2_17
53359154_53359260_3_14
Title: "Read N and print following: 24 (2numbers); 3927 (3 numbers)" 
----------------------------------------

int main () {
    int i, j, n, pro;
    printf ("Enter n:");
    scanf ("%d", & n);
    for (i = 1; i <= n; i++) {
        pro = 1;
        for (j = 1; j <= i; j++) {
            pro = pro * i;
            printf ("%d ", pro);
        }
        printf ("\n");
    }
}
----------------------------------------

int main () {
    int N;
    scanf ("%d", & N);
    for (int i = 2; i <= N; ++i) {
        for (int j = 0, k = i; j < i; ++j, k *= i)
            printf ("%d ", k);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53384946_53385567_28_37
53384946_53385594_5_29
Title: How do I parse a string of numbers into a array of integers? 
----------------------------------------

int main () {
    char *line = "10 10 10 4 4 4 9 9 9 2";
    int numIntsExtracted = 0;
    int *skyline = parse_line (line, &numIntsExtracted);
    for (int j = 0; j < numIntsExtracted; ++j) {
        printf ("%d \n", skyline [j]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *number_str = "10 10 10 4 4 4 9 9 9 2";
    char *ptr;
    char *next_number;
    int numbers [1000];
    int number_count = 0;
    long num;
    next_number = number_str;
    do {
        ptr = next_number;
        num = strtol (ptr, &next_number, 10);
        if (ptr != next_number) {
            numbers[number_count] = (int) num;
            printf ("Stored %3d into numbers[%d]\n", numbers [number_count], number_count);
            number_count += 1;
        }
    }
    while (ptr != next_number);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53384946_53385567_28_37
53384946_53385856_8_49
Title: How do I parse a string of numbers into a array of integers? 
----------------------------------------

int main () {
    char *line = "10 10 10 4 4 4 9 9 9 2";
    int numIntsExtracted = 0;
    int *skyline = parse_line (line, &numIntsExtracted);
    for (int j = 0; j < numIntsExtracted; ++j) {
        printf ("%d \n", skyline [j]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str [MAXC] = "";
    while (fgets (str, MAXC, stdin)) {
        char *p = str, *endptr = NULL;
        while (*p) {
            long val = strtol (p, &endptr, 0);
            if (p != endptr) {
                if (!errno) {
                    char ascii [MAXC] = "";
                    strncpy (ascii, p, endptr - p);
                    ascii[endptr - p] = 0;
                    if (*p == '0' && (*(p + 1) == 'x' || *(p + 1) == 'X'))
                        printf ("hex conversion:  %-10s %10lu  0x%lx\n", ascii, val, val);
                    else
                        printf ("int conversion:  %-10s % ld\n", ascii, val);
                }
                p = endptr;
            }
            for (; *p; p++) {
                if ('0' <= *p && *p <= '9')
                    break;
                if ((*p == '+' || *p == '-') && '0' <= *(p + 1) && *(p + 1) <= '9')
                    break;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53384946_53385594_5_29
53384946_53385856_8_49
Title: How do I parse a string of numbers into a array of integers? 
----------------------------------------

int main (void) {
    char *number_str = "10 10 10 4 4 4 9 9 9 2";
    char *ptr;
    char *next_number;
    int numbers [1000];
    int number_count = 0;
    long num;
    next_number = number_str;
    do {
        ptr = next_number;
        num = strtol (ptr, &next_number, 10);
        if (ptr != next_number) {
            numbers[number_count] = (int) num;
            printf ("Stored %3d into numbers[%d]\n", numbers [number_count], number_count);
            number_count += 1;
        }
    }
    while (ptr != next_number);
    return 0;
}
----------------------------------------

int main (void) {
    char str [MAXC] = "";
    while (fgets (str, MAXC, stdin)) {
        char *p = str, *endptr = NULL;
        while (*p) {
            long val = strtol (p, &endptr, 0);
            if (p != endptr) {
                if (!errno) {
                    char ascii [MAXC] = "";
                    strncpy (ascii, p, endptr - p);
                    ascii[endptr - p] = 0;
                    if (*p == '0' && (*(p + 1) == 'x' || *(p + 1) == 'X'))
                        printf ("hex conversion:  %-10s %10lu  0x%lx\n", ascii, val, val);
                    else
                        printf ("int conversion:  %-10s % ld\n", ascii, val);
                }
                p = endptr;
            }
            for (; *p; p++) {
                if ('0' <= *p && *p <= '9')
                    break;
                if ((*p == '+' || *p == '-') && '0' <= *(p + 1) && *(p + 1) <= '9')
                    break;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53398680_53399014_3_16
53398680_53399345_2_16
Title: "C beginner execise  taking integer from user and calculate how many time the number of 1 is in it" 
----------------------------------------

int main () {
    int choosen_number;
    int count = 0;
    printf ("Please enter an integer: ");
    scanf ("%d", & choosen_number);
    while (choosen_number != 0) {
        if (choosen_number % 10 == 1)
            ++count;
        choosen_number /= 10;
    }
    printf ("the number of ones is %d\n", count);
    return 0;
}
----------------------------------------

int main () {
    unsigned int choosen_number, digit, onesnumber = 0;
    printf ("Please gine a positive integer\n");
    scanf (" %d", & choosen_number);
    while (choosen_number > 0) {
        digit = choosen_number % 10;
        onesnumber = onesnumber + (digit == 1);
        choosen_number = choosen_number / 10;
    }
    printf ("the number of ones is %d\n", onesnumber);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53400262_53400433_5_31
53400262_53400507_5_23
Title: Turning a word into *** symbols 
----------------------------------------

int main (void) {
    char input [] = "The Mississippi river is very Wide.";
    printf ("%s\n", input);
    for (int i = 0; i < strlen (input); i++) {
        if ((i != 0) && isupper (input[i])) {
            printf ("*** ");
            while (input[i] != ' ')
                i++;
        }
        else {
            printf ("%c", input [i]);
        }
    }
    if (ispunct (input[strlen (input) - 1]))
        printf ("\b%c\n", input[strlen (input) - 1]);
    else
        printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    char line [1024] = "This should Replace capitalized Words!";
    int i = 0;
    printf ("line: %s\n", line);
    for (i = 0; i < strlen (line); i++) {
        if (isupper (line[i])) {
            while (line[i] != ' ' && line[i] != '\0' && isalpha (line[i])) {
                line[i] = '*';
                i++;
            }
        }
    }
    printf ("line: %s\n", line);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53400262_53400433_5_31
53400262_53431750_8_43
Title: Turning a word into *** symbols 
----------------------------------------

int main (void) {
    char input [] = "The Mississippi river is very Wide.";
    printf ("%s\n", input);
    for (int i = 0; i < strlen (input); i++) {
        if ((i != 0) && isupper (input[i])) {
            printf ("*** ");
            while (input[i] != ' ')
                i++;
        }
        else {
            printf ("%c", input [i]);
        }
    }
    if (ispunct (input[strlen (input) - 1]))
        printf ("\b%c\n", input[strlen (input) - 1]);
    else
        printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int status = IDLE;
    int c;
    while ((c = getchar ()) != EOF) {
        if (isupper (c)) {
            switch (status) {
            case IDLE :
                status = FIRST;
                printf ("***");
                break;
            case FIRST :
            case NEXT :
                status = NEXT;
                break;
            }
        }
        else if (islower (c)) {
            switch (status) {
            case IDLE :
                putchar (c);
                break;
            case FIRST :
            case NEXT :
                status = NEXT;
            }
        }
        else {
            switch (status) {
            case IDLE :
                putchar (c);
                break;
            case FIRST :
            case NEXT :
                putchar (c);
                status = IDLE;
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53400262_53400507_5_23
53400262_53431750_8_43
Title: Turning a word into *** symbols 
----------------------------------------

int main () {
    char line [1024] = "This should Replace capitalized Words!";
    int i = 0;
    printf ("line: %s\n", line);
    for (i = 0; i < strlen (line); i++) {
        if (isupper (line[i])) {
            while (line[i] != ' ' && line[i] != '\0' && isalpha (line[i])) {
                line[i] = '*';
                i++;
            }
        }
    }
    printf ("line: %s\n", line);
    return 0;
}
----------------------------------------

int main () {
    int status = IDLE;
    int c;
    while ((c = getchar ()) != EOF) {
        if (isupper (c)) {
            switch (status) {
            case IDLE :
                status = FIRST;
                printf ("***");
                break;
            case FIRST :
            case NEXT :
                status = NEXT;
                break;
            }
        }
        else if (islower (c)) {
            switch (status) {
            case IDLE :
                putchar (c);
                break;
            case FIRST :
            case NEXT :
                status = NEXT;
            }
        }
        else {
            switch (status) {
            case IDLE :
                putchar (c);
                break;
            case FIRST :
            case NEXT :
                putchar (c);
                status = IDLE;
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53401540_53401846_3_14
53401540_53409774_11_33
Title: Calculating a Serie in C 
----------------------------------------

int main () {
    int i;
    float x;
    float sum = 0;
    printf ("enter an x\n");
    scanf ("%f", & x);
    for (i = 0; i < 101; i++)
        sum += (pow (x, i));
    printf ("result=%f", sum);
    return 0;
}
----------------------------------------

int main (void) {
    double x = 0.1;
    const int N = 100;
    double sum = 1.0;
    for (int i = 1; i <= N; ++i) {
        double old_sum = sum;
        sum = sum + pow (x, i);
        if (old_sum == sum) {
            fprintf (stderr, "Numerical precision limit reached at i = %d\n", i);
            break;
        }
    }
    printf ("  result = %.*e\n", DBL_DECIMAL_DIG, sum);
    printf ("expected = %.*e\n", DBL_DECIMAL_DIG, sum_of_powers_limit (x));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53410581_53412362_16_36
53410581_53413670_3_26
Title: C - The loop doesn't continue 
----------------------------------------

int main (void) {
    char answer = 'y';
    do {
        int num = 0;
        printf ("Enter a number: \n");
        scanf (" %d", & num);
        unsigned long mult = factorial (num);
        printf ("%d! = %lu\n", num, mult);
        printf ("Would you like to try another number? \n");
        printf ("Enter: y for yes | n for no\n");
        scanf (" %c", & answer);
    }
    while (answer != 'n');
    return 0;
}
----------------------------------------

int main (void) {
    char answer = 'y';
    int num = 0;
    while (answer != 'n') {
        printf ("Enter a number: \n");
        scanf ("%d", & num);
        int mult = 1;
        int k = 1;
        while (k <= num) {
            mult *= k;
            k++;
        }
        printf ("%d! = %d\n", num, mult);
        printf ("Would you like to try another number? \n");
        printf ("Enter: any key for  yes | n for no\n");
        getchar ();
        scanf ("%c", & answer);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53416987_53417343_6_34
53416987_53417698_1_44
Title: Pair-wise difference using recursion 
----------------------------------------

int iterateIt (int a_count, int *a) {
    unsigned long long i, j, k;
    unsigned long long count = a_count;
    for (i = 1; i < a_count; i++)
        count *= count - 1;
    size_t size = count * sizeof (int);
    printf ("Allocating %llu ints: %llu bytes\n", count, (unsigned long long) size);
    total_allocated += size;
    printf ("Total allocated: %llu bytes\n", (unsigned long long) total_allocated);
    int *b = (int *) malloc (count * sizeof (int));
    count = 0;
    k = 0;
    for (i = 0; i < a_count; i++) {
        for (j = i; j < a_count; j++) {
            if (a[i] != a[j]) {
                b[k] = abs (a[i] - a[j]);
                k++;
            }
        }
    }
    if (k > 0) {
        return 1 + iterateIt (k, b);
    }
    free (b);
    return 1;
}
----------------------------------------

unsigned iterateIt (size_t a_count, int *a) {
    unsigned rep = 1;
    bool first_time = true;
    while (true) {
        int *b = calloc ((a_count * a_count) / 2, sizeof (int));
        if (b == NULL) {
            perror ("calloc failed!");
            exit (1);
        }
        size_t b_count = 0;
        for (size_t i = 0; i < a_count; i++) {
            for (size_t j = i + 1; j < a_count; j++) {
                if (a[i] != a[j]) {
                    b[b_count++] = abs (a[i] - a[j]);
                }
            }
        }
        if (b_count == 0) {
            free (b);
            break;
        }
        if (first_time) {
            first_time = false;
        }
        else {
            free (a);
        }
        a = b;
        a_count = b_count;
        rep++;
    }
    return rep;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53444743_53445035_2_21
53444743_53445947_20_40
Title: Clean ways to do multiple undos in C 
----------------------------------------

int main (int argc, char **argv) {
    int errorCode = 0;
    if (Do1 ()) {
        errorCode = 1;
        goto undo_0;
    }
    if (Do2 ()) {
        errorCode = 2;
        goto undo_1;
    }
    if (Do3 ()) {
        errorCode = 3;
        goto undo_2;
    }
    if (Do4 ()) {
        errorCode = 4;
        goto undo_3;
    }
    if (Do5 ()) {
        errorCode = 5;
        goto undo_4;
    }
undo_5 :
    Undo5 ();
undo_4 :
    Undo4 ();
undo_3 :
    Undo3 ();
undo_2 :
    Undo2 ();
undo_1 :
    Undo1 ();
undo_0 :
    if (errorCode != 0) {
        printf ("Failed %d\n", errorCode);
    }
    return errorCode;
}
----------------------------------------

int main (void) {
    action_s actions [] = {{Do1, Undo1}, {Do2, Undo2}, {Do3, Undo3}, {Do4, Undo4}, {Do5, Undo5}, {NULL, NULL}};
    for (size_t i = 0; actions[i].Do; ++i) {
        if (!actions[i].Do ()) {
            printf ("Failed %zu.\n", i + 1);
            for (int j = i - 1; j >= 0; --j) {
                actions[j].Undo ();
            }
            return (i);
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53444743_53445796_1_39
53444743_53451690_1_34
Title: Clean ways to do multiple undos in C 
----------------------------------------

int foo (void) {
    int rc;
    if (0 || (rc = 1, do1 ()) || (rc = 2, do2 ()) || (rc = 3, do3 ()) || (rc = 4, do4 ()) || (rc = 5, do5 ()) || (rc = 0)) {
        switch (rc - 1) {
        case 5 :
            undo5 ();
        case 4 :
            undo4 ();
        case 3 :
            undo3 ();
        case 2 :
            undo2 ();
        case 1 :
            undo1 ();
        default :
            break;
        }
    }
    return rc;
}
----------------------------------------

void foo () {
    int result = -1;
    int *p = NULL;
    int *p2 = NULL;
    int *p3 = NULL;
    p = malloc (...)
    if (p == NULL) {
        result = 1;
        goto exit;
    }
    p2 = malloc (...)
    if (p2 == NULL) {
        result = 2;
        goto exit;
    }
    p3 = malloc (...)
    if (p3 == NULL) {
        result = 3;
        goto exit;
    }
    bar (p, p2, p3);
    result = 0;
exit :
    free (p3);
    if (result != 0) {
        free (p2);
        free (p1);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53474700_53474816_3_19
53474700_53474902_10_33
Title: C: scanf did not stop in infinite while loop 
----------------------------------------

int main () {
    int num;
    int result;
    while (printf ("Please input an unsigned integer: "), (result = scanf (" %d", &num)) != 1 || num < 0) {
        if (result != 1)
            fputs ("ERROR: Not an integer.\n", stderr);
        else
            fputs ("ERROR: Not positive.\n", stderr);
        int ch;
        while ((ch = getchar ()) != '\n' && ch != EOF)
            ;
    }
    printf ("You entered: %d\n", num);
}
----------------------------------------

int main (void) {
    int num;
    while (1) {
        printf ("Input the value of integer: ");
        int result = scanf (" %d", &num);
        if (result == EOF) {
            printf (" user canceled input (manual EOF)\n");
            break;
        }
        else if (result == 0) {
            printf ("ERROR-Not an integer.\n");
            empty_stdin ();
        }
        else if (num < 0) {
            printf ("ERROR- Not positive.\n");
        }
        else
            break;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53477980_53478188_5_21
53477980_53478195_2_19
Title: Why doesn't this C nested loop code work? 
----------------------------------------

int main () {
    for (int i = 0; i != N; ++i) {
        int j = 0;
        while (j + i + 1 < N) {
            putchar ('c');
            ++j;
        }
        while (j != N) {
            putchar ('X');
            ++j;
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main () {
    int A, B, C;
    for (A = 0; A < 5; A++) {
        for (C = 4; C > A; C = C - 1) {
            printf ("c");
        }
        for (B = 0; B <= A; B++) {
            printf ("X");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53477980_53478188_5_21
53477980_53478251_1_19
Title: Why doesn't this C nested loop code work? 
----------------------------------------

int main () {
    for (int i = 0; i != N; ++i) {
        int j = 0;
        while (j + i + 1 < N) {
            putchar ('c');
            ++j;
        }
        while (j != N) {
            putchar ('X');
            ++j;
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

enter code here int main () {
    int A, B, C = 5;
    for (A = 0; A < 5; A++) {
        printf ("%d: ", A);
        for (C = 0; C < (5 - A - 1); C++) {
            putchar ('c');
        }
        for (B = C; B < 5; B++) {
            putchar ('X');
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53477980_53478195_2_19
53477980_53478251_1_19
Title: Why doesn't this C nested loop code work? 
----------------------------------------

int main () {
    int A, B, C;
    for (A = 0; A < 5; A++) {
        for (C = 4; C > A; C = C - 1) {
            printf ("c");
        }
        for (B = 0; B <= A; B++) {
            printf ("X");
        }
        printf ("\n");
    }
}
----------------------------------------

enter code here int main () {
    int A, B, C = 5;
    for (A = 0; A < 5; A++) {
        printf ("%d: ", A);
        for (C = 0; C < (5 - A - 1); C++) {
            putchar ('c');
        }
        for (B = C; B < 5; B++) {
            putchar ('X');
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53487477_53487625_1_16
53487477_53487767_1_12
Title: "How to ""delete"" every element in array by value in C" 
----------------------------------------

void strdel (char array [], char c) {
    int string_lenght;
    int i, j;
    for (string_lenght = 0; array[string_lenght] != '\0'; string_lenght++) {
    }
    for (i = 0; i < string_lenght; i++) {
        if (array[i] == c) {
            for (j = i; array[j] != '\0'; ++j)
                array[j] = array[j + 1];
            --i;
            --string_lenght;
        }
    }
}
----------------------------------------

void strdel (char array [], char c) {
    int read_index = 0;
    int write_index = 0;
    while (array[read_index] != '\0') {
        if (array[read_index] != c) {
            array[write_index] = array[read_index];
            write_index++;
        }
        read_index++;
    }
    array[write_index] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53489830_53489950_3_21
53489830_53495202_1_14
Title: Function that concatenates two pointer strings together 
----------------------------------------

char *strconcat (char *user2p, char *user1p) {
    char *orig2p = user2p;
    while (*user2p) {
        user2p++;
    }
    while (*user1p) {
        *user2p = *user1p;
        *user2p++;
        *user1p++;
    }
    *user2p = '\0';
    printf ("test: %s\n", orig2p);
    return orig2p;
}
----------------------------------------

char *strconcat (char *string1, char *string2) {
    int lenStr1 = 0, lenStr2 = 0;
    char *tmpStr1 = string1, *tmpStr2 = string2, *returnStr;
    while (*tmpStr1++)
        lenStr1++;
    while (*tmpStr2++)
        lenStr2++;
    if ((returnStr = (char *) malloc (lenStr1 +lenStr2 + 1))) {
        memcpy (returnStr, string1, lenStr1);
        memcpy (& returnStr [lenStr1], string2, lenStr2);
        returnStr[lenStr1 + lenStr2] = 0;
        return returnStr;
    }
    else {
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53489830_53489950_58_74
53489830_53495202_16_26
Title: Function that concatenates two pointer strings together 
----------------------------------------

int main (void) {
    char userString1 [MAXLEN], userString2 [MAXLEN + 1];
    char *user1p, *user2p;
    printf ("Please enter the first string: ");
    user1p = xgets (userString1, MAXLEN / 2);
    printf ("Please enter the second string: ");
    user2p = xgets (userString2, MAXLEN / 2);
    if ((user2p != NULL) && (user1p != NULL))
        printf ("String 2 after concatenation: %s\n", strconcat (user2p, user1p));
    return 0;
}
----------------------------------------

int main () {
    char *string1 = "String 1 ", *string2 = "String 2 ", *result;
    if ((result = strconcat (string1, string2))) {
        printf ("-> %s \n", result);
        free (result);
    }
    else {
        printf ("Out of memory");
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53490082_53490657_4_15
53490082_53491472_38_56
Title: Tried to call text file and copy the text file to my new variable in C programming 
----------------------------------------

int main (int argc, char **argv) {
    char *fname = "./someFileNameHere";
    struct stat st;
    stat (fname, & st);
    char *content = malloc (st.st_size + 1);
    content[st.st_size] = 0;
    FILE *infile = fopen (fname, "rb");
    size_t read = fread (content, sizeof (char), st.st_size, infile);
    fclose (infile);
    puts (content);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    size_t nbytes;
    char *content;
    if (argc < 2) {
        fprintf (stderr, "error: insufficient input. filename req'd.\n");
        return 1;
    }
    if ((content = read_file (argv[1], &nbytes))) {
        printf ("read %zu bytes of data from %s\n" "------content------\n%s\n-------------------\n", nbytes, argv [1], content);
        free (content);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53492725_53492832_16_31
53492725_53492867_16_31
Title: fgets returning NULL even though file is not empty 
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp;
    if (argc < 2) {
        printf ("USAGE: myprog <filename>\n");
        return 1;
    }
    fp = fopen (argv[1], "r");
    if (!fp) {
        perror ("File open error");
        return 1;
    }
    readFile (fp);
    fclose (fp);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        perror ("file open failed");
        return 1;
    }
    readFile (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53521060_53521222_4_16
53521060_53522942_4_19
Title: How to overwrite part of a string in C? 
----------------------------------------

int main () {
    char src [40];
    char src2 [40];
    char dest [20];
    memset (dest, '\0', sizeof (dest));
    strcpy (src, "This is a string");
    strcpy (src2, "That");
    strncpy (dest, src, strlen (src));
    strncpy (dest, src2, strlen (src2));
    printf ("Final copied string : %s\n", dest);
}
----------------------------------------

int main () {
    char src [40] = {0};
    char src2 [40] = {0};
    char dest [20] = {0};
    strncpy (src, "This is a string", sizeof (src) - 1);
    strncpy (src2, "That is a long rubbish string and sooooooooooooooooooooooooo much more", sizeof (src2) - 1);
    strncpy (dest, src, sizeof (dest) - 1);
    memcpy (dest, src2, strlen (src2) < sizeof (dest) ? strlen (src2) : sizeof (dest));
    printf ("Final copied string : %s\n", dest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53521060_53521829_4_16
53521060_53522942_4_19
Title: How to overwrite part of a string in C? 
----------------------------------------

int main () {
    char src [40];
    char src2 [40];
    char dest [20];
    strcpy (src, "This is a string");
    strcpy (src2, "That");
    strcpy (dest, src, strlen (src));
    strncpy (dest, src2, strlen (src2));
    printf ("Final copied string : %s\n", dest);
}
----------------------------------------

int main () {
    char src [40] = {0};
    char src2 [40] = {0};
    char dest [20] = {0};
    strncpy (src, "This is a string", sizeof (src) - 1);
    strncpy (src2, "That is a long rubbish string and sooooooooooooooooooooooooo much more", sizeof (src2) - 1);
    strncpy (dest, src, sizeof (dest) - 1);
    memcpy (dest, src2, strlen (src2) < sizeof (dest) ? strlen (src2) : sizeof (dest));
    printf ("Final copied string : %s\n", dest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53526319_53526520_13_22
53526319_53526855_29_40
Title: Using pointers to change a matrix 
----------------------------------------

void printBoard (char *board) {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            printf ("%c", board [i * BOARD_SIZE + j]);
            printf (" ");
        }
        printf ("\n");
    }
}
----------------------------------------

void printBoard (char board [] [Size]) {
    for (size_t i = 0; i < Size; i++) {
        for (size_t j = 0; j < Size; j++) {
            printf ("%c ", board [i] [j]);
            printf (" ");
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53557201_53558176_22_62
53557201_53559071_39_48
Title: String matching by deleting one characters 
----------------------------------------

int main () {
    char stringToLookIn [100];
    char stringToFind [100];
    uint32_t matchingPosition;
    printf ("First string \n");
    gets (stringToLookIn);
    printf ("Second string \n");
    gets (stringToFind);
    if (foundWord (stringToLookIn, stringToFind, &matchingPosition)) {
        printf ("String found in position %d, without deleting anything \n", matchingPosition);
    }
    else {
        for (int i = 0; i < strlen (stringToLookIn); i++) {
            char copyOfString [100];
            memcpy (copyOfString, stringToLookIn, sizeof (copyOfString));
            memmove (& copyOfString [i], & copyOfString [i + 1], strlen (copyOfString) - i);
            if (foundWord (copyOfString, stringToFind, &matchingPosition)) {
                matchingPosition = ((uint32_t) matchingPosition - (uint32_t) (copyOfString));
                printf ("String found in position %d, after deleting position %d \n", matchingPosition, i);
                break;
            }
        }
    }
    printf ("Reached end \n");
    while (1)
        ;
    {
    }
}
----------------------------------------

int main (void) {
    const int LENGTH = 100;
    char txt [LENGTH], pat [LENGTH];
    printf ("Enter some text:\n>> ");
    fgets (txt, LENGTH - 1, stdin);
    printf ("Enter a string to find:\n>> ");
    fgets (pat, LENGTH - 1, stdin);
    search (pat, txt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53561945_53562082_5_21
53561945_53562203_3_30
Title: How to fix infinite printing of random number? C language 
----------------------------------------

int main () {
    int *pSet = (int *) malloc (sizeof (int));
    int c;
    int i = 0;
    printf ("Please enter a stream of numbers to make a set out of them: ");
    while (scanf ("%d", &c) == 1) {
        pSet[i] = c;
        pSet = (int *) realloc (pSet, sizeof (int) * (i + 1));
        if (pSet == NULL) {
            return FAIL;
        }
        printf ("%d ", c);
        i++;
    }
    free (pSet);
}
----------------------------------------

int main (void) {
    int *pSet = NULL;
    printf ("Please enter a stream of numbers to make a set out of them: ");
    printf ("\n");
    int i = 0;
    int c;
    while (1) {
        if (scanf ("%d", &c) != 1) {
            printf ("Terminating input loop\n");
            break;
        }
        int *tmp = realloc (pSet, sizeof (int) * (i + 1));
        if (tmp == NULL) {
            printf ("oh dear...\n");
            break;
        }
        pSet = tmp;
        pSet[i++] = c;
        printf ("%d ", c);
    }
    for (int j = 0; j < i; ++j)
        printf ("%d\n", pSet[j]);
    free (pSet);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53561945_53562082_5_21
53561945_53563075_4_28
Title: How to fix infinite printing of random number? C language 
----------------------------------------

int main () {
    int *pSet = (int *) malloc (sizeof (int));
    int c;
    int i = 0;
    printf ("Please enter a stream of numbers to make a set out of them: ");
    while (scanf ("%d", &c) == 1) {
        pSet[i] = c;
        pSet = (int *) realloc (pSet, sizeof (int) * (i + 1));
        if (pSet == NULL) {
            return FAIL;
        }
        printf ("%d ", c);
        i++;
    }
    free (pSet);
}
----------------------------------------

int main (void) {
    printf ("Please enter a stream of numbers to make a set out of them:\n");
    int *pSet = NULL;
    size_t i = 0;
    int c;
    for (i = 0; scanf ("%d", &c) == 1; i++) {
        void *p = realloc (pSet, sizeof *pSet * (i + 1));
        if (p == NULL) {
            free (pSet);
            return EXIT_FAILURE;
        }
        pSet = p;
        pSet[i] = c;
    }
    for (size_t j = 0; j < i; j++) {
        printf ("%d ", pSet [j]);
    }
    free (pSet);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53561945_53562203_3_30
53561945_53563075_4_28
Title: How to fix infinite printing of random number? C language 
----------------------------------------

int main (void) {
    int *pSet = NULL;
    printf ("Please enter a stream of numbers to make a set out of them: ");
    printf ("\n");
    int i = 0;
    int c;
    while (1) {
        if (scanf ("%d", &c) != 1) {
            printf ("Terminating input loop\n");
            break;
        }
        int *tmp = realloc (pSet, sizeof (int) * (i + 1));
        if (tmp == NULL) {
            printf ("oh dear...\n");
            break;
        }
        pSet = tmp;
        pSet[i++] = c;
        printf ("%d ", c);
    }
    for (int j = 0; j < i; ++j)
        printf ("%d\n", pSet[j]);
    free (pSet);
    return 0;
}
----------------------------------------

int main (void) {
    printf ("Please enter a stream of numbers to make a set out of them:\n");
    int *pSet = NULL;
    size_t i = 0;
    int c;
    for (i = 0; scanf ("%d", &c) == 1; i++) {
        void *p = realloc (pSet, sizeof *pSet * (i + 1));
        if (p == NULL) {
            free (pSet);
            return EXIT_FAILURE;
        }
        pSet = p;
        pSet[i] = c;
    }
    for (size_t j = 0; j < i; j++) {
        printf ("%d ", pSet [j]);
    }
    free (pSet);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53564875_53565160_8_83
53564875_53565223_4_37
Title: How to indicate the last line of the file 
----------------------------------------

int main (void) {
    char const *filename = "test.txt";
    FILE *is = fopen (filename, "r");
    if (!is) {
        fprintf (stderr, "Couldn't open \"%s\" for reading :(\n\n", filename);
        return EXIT_FAILURE;
    }
    int result = EXIT_SUCCESS;
    char buffer [BUFFER_SIZE];
    size_t num_lines = 0;
    char **lines = NULL;
    while (fgets (buffer, sizeof (buffer), is)) {
        ++num_lines;
        char **temp = realloc (lines, num_lines * sizeof (*lines));
        if (!temp) {
            fputs ("Not enough memory :(\n\n", stderr);
            fclose (is);
            result = EXIT_FAILURE;
            goto cleanup;
        }
        lines = temp;
        size_t length = strlen (buffer);
        length = strlen (buffer);
        if (length && buffer[length - 1] == '\n')
            buffer[--length] = '\0';
        size_t line_length = length;
        lines[num_lines - 1] = malloc ((length + 1) * sizeof (*lines));
        if (!lines[num_lines - 1]) {
            fputs ("Not enough memory :(\n\n", stderr);
            fclose (is);
            result = EXIT_FAILURE;
            goto cleanup;
        }
        strcpy (lines [num_lines - 1], buffer);
        while (length == BUFFER_SIZE - 1 && fgets (buffer, sizeof (buffer), is)) {
            length = strlen (buffer);
            if (length && buffer[length - 1] == '\n')
                buffer[--length] = '\0';
            char *temp = realloc (lines[num_lines - 1], line_length +length + 1);
            if (!temp) {
                fputs ("Not enough memory :(\n\n", stderr);
                fclose (is);
                result = EXIT_FAILURE;
                goto cleanup;
            }
            lines[num_lines - 1] = temp;
            strcpy (lines [num_lines - 1] + line_length, buffer);
            line_length += length;
        }
    }
    fclose (is);
    for (size_t i = 0; i < num_lines; ++i)
        puts (lines[i]);
cleanup :
    for (size_t i = 0; i < num_lines; ++i)
        free (lines[i]);
    free (lines);
    return result;
}
----------------------------------------

int main (void) {
    FILE *fp = fopen ("abc.txt", "r");
    if (fp) {
        char loadtext [LINES_N] [LINE_SIZE];
        int ch_index = 0;
        int line_count = 0;
        int character;
        int previous_character = '\n';
        while ((character = fgetc (fp)) != EOF) {
            if (previous_character == '\n') {
                if (++line_count > LINES_N) {
                    printf ("Too many lines\n");
                    return EXIT_FAILURE;
                }
            }
            loadtext[line_count - 1][ch_index++] = (char) character;
            loadtext[line_count - 1][ch_index] = '\0';
            if (ch_index + 1 >= LINE_SIZE) {
                printf ("Too long a line\n");
                return EXIT_FAILURE;
            }
            previous_character = character;
        }
        if (line_count >= 1)
            printf ("%s", loadtext[0]);
        if (line_count >= 2)
            printf ("%s", loadtext[1]);
        if (line_count >= 3)
            printf ("%s", loadtext[2]);
        fclose (fp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53571447_53571648_5_41
53571447_53571660_1_31
Title: I need help figuring out why is this not working. (C) 
----------------------------------------

int main () {
    int x = 0;
    int max = 0;
    int max2 = 0;
    int flag = 0;
    do {
        printf ("Enter the number  -999 to stop: ");
        scanf ("%d", & x);
        if (x != -999) {
            if (x > max) {
                max2 = max;
                max = x;
            }
            else if (x > max2) {
                max2 = x;
            }
        }
        else {
            flag = 1;
        }
    }
    while (flag == 0);
    printf ("The max number is: %d\n", max);
    printf ("The second max number is: %d\n", max2);
    return 0;
}
----------------------------------------

int main () {
    int x = 0;
    int max = 0;
    int max2 = 0;
    while (true) {
        printf ("Enter the number (-999 to stop): ");
        scanf ("%d", & x);
        if (x == -999) {
            break;
        }
        if (x > max) {
            max2 = max;
            max = x;
        }
        else if (x > max2) {
            max2 = x;
        }
    }
    printf ("\n\nThe max number is: %d\n", max);
    printf ("The second max number is: %d\n", max2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53573555_53573684_7_22
53573555_53574068_4_15
Title: "Create an array of size N and then assign to each element the value ""[ ]""" 
----------------------------------------

int main (int argc, char **argv) {
    char Array [N] [4];
    for (int i = 0; i < N; i++) {
        strcpy (Array [i], "[ ]");
    }
    for (int i = 0; i < N; i++) {
        printf ("Array[%d] = %s\n", i, Array [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char term [L_TERM] = "[ ]";
    char Array [N_TERMS * L_TERM] = "";
    for (int i = 0; i < N_TERMS; i++) {
        strcat (Array, term);
    }
    printf ("%s", Array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5361719_27056086_6_26
5361719_32246970_3_28
Title: Decimal to octal in C 
----------------------------------------

int main (int argc, char **argv) {
    int indecimal = 1337;
    char output [OCTALSIZE + 1];
    output[OCTALSIZE] = '\0';
    int outindex = OCTALSIZE;
    int outdigit = 0;
    int outvalue = indecimal;
    while (--outindex >= 0) {
        outdigit = outvalue % OCTALBASE;
        if (outvalue > 0 || outdigit > 0) {
            output[outindex] = '0' + outdigit;
        }
        else {
            output[outindex] = ' ';
        }
        outvalue /= OCTALBASE;
    }
    fprintf (stdout, "{ DEC: %8d, OCT: %s }\n", indecimal, output);
    fflush (stdout);
    return 0;
}
----------------------------------------

void main () {
A :
    long int n, n1, m = 1, rem, ans = 0;
    clrscr ();
    printf ("\nEnter Your Decimal No :: ");
    scanf ("%ld", & n);
    n1 = n;
    while (n > 0) {
        rem = n % 8;
        ans = (rem * m) + ans;
        n = n / 8;
        m = m * 10;
    }
    printf ("\nYour Decimal No is :: %ld", n1);
    printf ("\nConvert into Octal No is :: %ld", ans);
    printf ("\n\nPress 0 to Continue...");
    if (getch () == '0')
        goto A;
    printf ("\n\n\n\tThank You");
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5403103_31231124_4_16
5403103_5403170_18_30
Title: Hex to ascii string conversion 
----------------------------------------

int main (int argc, char **argv) {
    long int num = 0;
    long int num2 = 0;
    char * str.= "f00d";
    char *str2 = "0xf00d";
    num = strtol (str, 0, 16);
    num2 = strtol (str2, 0, 0);
    printf ("%ld\n", num);
    printf ("%ld\n", num);
}
----------------------------------------

int main () {
    const char *st = "48656C6C6F3B";
    int length = strlen (st);
    int i;
    char buf = 0;
    for (i = 0; i < length; i++) {
        if (i % 2 != 0) {
            printf ("%c", hex_to_ascii (buf, st [i]));
        }
        else {
            buf = st[i];
        }
    }
}
----------------------------------------

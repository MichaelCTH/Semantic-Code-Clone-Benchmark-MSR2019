$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13213422_19565575_6_29
13213422_41257655_3_28
Title: Count the number of occurrences of each letter in string 
----------------------------------------

int main () {
    FILE *fp;
    int count [26] = {0}, i, c;
    char ch;
    char alpha [27] = "abcdefghijklmnopqrstuwxyz";
    fp = fopen (filename, "r");
    if (fp == NULL)
        printf ("file not found\n");
    while ((ch = fgetc (fp)) != EOF) {
        c = 0;
        while (alpha[c] != '\0') {
            if (alpha[c] == ch) {
                count[c]++;
            }
            c++;
        }
    }
    for (i = 0; i < 26; i++) {
        printf ("character %c occured %d number of times\n", alpha [i], count [i]);
    }
    return 0;
}
----------------------------------------

void main () {
    printf ("PLEASE ENTER A STRING\n");
    printf ("GIVE ONLY ONE SPACE BETWEEN WORDS\n");
    printf ("PRESS ENETR WHEN FINISHED\n");
    char str [100];
    int arr [26] = {0};
    char ch;
    int i;
    gets (str);
    int n = strlen (str);
    for (i = 0; i < n; i++) {
        ch = tolower (str[i]);
        if (ch >= 97 && ch <= 122) {
            arr[ch - 97]++;
        }
    }
    for (i = 97; i <= 122; i++)
        printf ("%c OCCURS %d NUMBER OF TIMES\n", i, arr[i - 97]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13213422_30994603_10_27
13213422_35369008_1_24
Title: Count the number of occurrences of each letter in string 
----------------------------------------

int main () {
    char string [100];
    int count [26] = {0};
    int i;
    printf ("Input a string: ");
    if (!fgets (string, sizeof string, stdin))
        return 1;
    find_frequency (string, count);
    printf ("Character Counts\n");
    for (i = 0; i < 26; i++) {
        printf ("%c\t%d\n", letters [i], count [i]);
    }
    return 0;
}
----------------------------------------

void main () {
    int i, j;
    int c [26], count = 0;
    char a [] = "shahid";
    clrscr ();
    for (i = 0; i < 26; i++) {
        count = 0;
        for (j = 0; j < strlen (a); j++) {
            if (a[j] == 97 + i) {
                count++;
            }
        }
        c[i] = count;
    }
    for (i = 0; i < 26; i++) {
        j = 97 + i;
        if (c[i] != 0) {
            printf ("%c of %d times\n", j, c [i]);
        }
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13213422_30994603_10_27
13213422_41257655_3_28
Title: Count the number of occurrences of each letter in string 
----------------------------------------

int main () {
    char string [100];
    int count [26] = {0};
    int i;
    printf ("Input a string: ");
    if (!fgets (string, sizeof string, stdin))
        return 1;
    find_frequency (string, count);
    printf ("Character Counts\n");
    for (i = 0; i < 26; i++) {
        printf ("%c\t%d\n", letters [i], count [i]);
    }
    return 0;
}
----------------------------------------

void main () {
    printf ("PLEASE ENTER A STRING\n");
    printf ("GIVE ONLY ONE SPACE BETWEEN WORDS\n");
    printf ("PRESS ENETR WHEN FINISHED\n");
    char str [100];
    int arr [26] = {0};
    char ch;
    int i;
    gets (str);
    int n = strlen (str);
    for (i = 0; i < n; i++) {
        ch = tolower (str[i]);
        if (ch >= 97 && ch <= 122) {
            arr[ch - 97]++;
        }
    }
    for (i = 97; i <= 122; i++)
        printf ("%c OCCURS %d NUMBER OF TIMES\n", i, arr[i - 97]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13213422_35369008_1_24
13213422_41257655_3_28
Title: Count the number of occurrences of each letter in string 
----------------------------------------

void main () {
    int i, j;
    int c [26], count = 0;
    char a [] = "shahid";
    clrscr ();
    for (i = 0; i < 26; i++) {
        count = 0;
        for (j = 0; j < strlen (a); j++) {
            if (a[j] == 97 + i) {
                count++;
            }
        }
        c[i] = count;
    }
    for (i = 0; i < 26; i++) {
        j = 97 + i;
        if (c[i] != 0) {
            printf ("%c of %d times\n", j, c [i]);
        }
    }
    getch ();
}
----------------------------------------

void main () {
    printf ("PLEASE ENTER A STRING\n");
    printf ("GIVE ONLY ONE SPACE BETWEEN WORDS\n");
    printf ("PRESS ENETR WHEN FINISHED\n");
    char str [100];
    int arr [26] = {0};
    char ch;
    int i;
    gets (str);
    int n = strlen (str);
    for (i = 0; i < n; i++) {
        ch = tolower (str[i]);
        if (ch >= 97 && ch <= 122) {
            arr[ch - 97]++;
        }
    }
    for (i = 97; i <= 122; i++)
        printf ("%c OCCURS %d NUMBER OF TIMES\n", i, arr[i - 97]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13219054_13219120_1_10
13219054_13219390_3_12
Title: Reading string over args 
----------------------------------------

void replace_e_with_a (char *str) {
    int i;
    if (!str)
        return;
    for (i = 0; str[i]; i++) {
        if (str[i] == 'e')
            str[i] = 'a';
    }
}
----------------------------------------

void replace_e_with_a (char *str) {
    int i;
    if (NULL != str)
        while ('\0' != *str) {
            if (*str == 'e')
                *str = 'a';
            ++str;
        }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13224759_13224845_1_15
13224759_13224860_1_14
Title: 99 Bottle of Beer Recursion Doesn't Seem to Work 
----------------------------------------

void SingTheSong (int NumOfBottles) {
    if (NumOfBottles == 0) {
        printf ("there are simply no more bottles of beer on the wall. \n");
    }
    else {
        printf ("%d bottles of beer on the wall, %d bottles of beer.\n", NumOfBottles, NumOfBottles);
        int Bottleless = NumOfBottles - 1;
        printf ("Take one down pass it around, %d bottles of beer on the wall. \n", Bottleless);
        printf ("Put a bottle in the recycling bin, there are now %d empty bottles in the bin.\n", 99 - Bottleless);
        SingTheSong (Bottleless);
    }
}
----------------------------------------

void SingTheSong (int bottlesOnWall, int bottlesInBin) {
    if (bottlesOnWall == 0) {
        printf ("there are simply no more bottles of beer on the wall. \n");
    }
    else {
        printf ("%d bottles of beer on the wall, %d bottles of beer.\n", bottlesOnWall, bottlesOnWall);
        printf ("Take one down pass it around, %d bottles of beer on the wall. \n", -- bottlesOnWall);
        printf ("Put a bottle in the recycling bin, there are now %d empty bottles in the bin.\n", ++ bottlesInBin);
        SingTheSong (bottlesOnWall, bottlesInBin);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13266138_13266163_2_32
13266138_13267045_4_28
Title: C program to read a file and print just the numbers 
----------------------------------------

int main () {
    char c, ch;
    int flag = 0;
    FILE *fp = fopen ("file.txt", "r");
    if (fp) {
        while ((c = fgetc (fp)) != EOF) {
            if (c == '-' || c == '+') {
                ch = c;
                flag = 1;
                continue;
            }
            if (c >= '0' && c <= '9') {
                if (flag == 1) {
                    printf ("%c", ch);
                    flag = 0;
                }
                printf ("%c", c);
            }
            else
                flag = 0;
        }
    }
    else
        printf ("Error : file not found");
    fclose (fp);
}
----------------------------------------

int main (void) {
    int ch, n, sign;
    sign = 1;
    ch = getchar ();
    while (ch != EOF) {
        if (ch == '-') {
            sign = -1;
            ch = getchar ();
        }
        else if (isdigit (ch)) {
            n = 0;
            do {
                n = n * 10 + ch - '0';
                ch = getchar ();
            }
            while (isdigit (ch));
            n *= sign;
        }
        else {
            sign = 1;
            ch = getchar ();
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13277009_13277103_4_29
13277009_13277318_1_23
Title: Trying to store numbers in an array and display them by reading from a file 
----------------------------------------

int main () {
    int a [20];
    int i, j;
    char str [256];
    FILE *fp;
    fp = fopen ("C:/Users/PSN/Desktop/Store-1.txt", "r");
    if (fp > 0) {
        for (i = 0; i < 3; i++) {
            fscanf (fp, "%s", str);
            fscanf (fp, "%d", & a [i])
        }
    }
    for (j = 0; j < 3; j++) {
        printf ("%d", a [j]);
    }
    fclose (fp);
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    int a [20];
    int i, j;
    FILE *fp;
    fp = fopen ("store-1.txt", "r");
    fscanf (fp, "%*s%d%*s%d%*s%d", word, & a [0], word, & a [1], word, & a [2]);
    for (j = 0; j < 3; j++) {
        printf ("%d\n", a [j]);
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13277009_13277111_4_28
13277009_13277318_1_23
Title: Trying to store numbers in an array and display them by reading from a file 
----------------------------------------

int main () {
    int a [20];
    int i, j;
    FILE *fp;
    fp = fopen ("C:/Users/PSN/Desktop/Store-1.txt", "r");
    if (fp > 0) {
        for (i = 0; i < 4; i++) {
            fscanf (fp, "%d", & a [i]);
        }
    }
    for (j = 0; j < 3; j++) {
        printf ("%d", a [j]);
    }
    fclose (fp);
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    int a [20];
    int i, j;
    FILE *fp;
    fp = fopen ("store-1.txt", "r");
    fscanf (fp, "%*s%d%*s%d%*s%d", word, & a [0], word, & a [1], word, & a [2]);
    for (j = 0; j < 3; j++) {
        printf ("%d\n", a [j]);
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13280384_13280640_34_54
13280384_13281198_11_40
Title: Treat functions by name 
----------------------------------------

int main () {
    student_solution_t solutions [2];
    load ("./student1.so", & solutions [0]);
    load ("./student2.so", & solutions [1]);
    (solutions[0].entry) ();
    (solutions[1].entry) ();
    dlclose (solutions [0].library_handle);
    dlclose (solutions [1].library_handle);
    return 0;
}
----------------------------------------

int main (void) {
    void *libstud;
    int (*student [2]) (int, int);
    char fname [32];
    int i, r;
    libstud = dlopen ("./shalib.so", RTLD_NOW);
    if (!libstud) {
        fprintf (stderr, "error: %s\n", dlerror ());
        exit (EXIT_FAILURE);
    }
    dlerror ();
    for (i = 0; i < 2; i++) {
        sprintf (fname, "func%d", i);
        *(void**) (&student[i]) = dlsym (libstud, fname);
    }
    for (i = 0; i < 2; i++) {
        r = student[i] (i, i);
        printf ("i=%d,r=%d\n", i, r);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13325824_13326040_5_35
13325824_13326074_6_25
Title: Moving a string from one array to another in C 
----------------------------------------

int main (void) {
    int i, newx;
    char w [] = "name1234";
    int length = strlen (w);
    char *new = malloc (length +1);
    if (!new) {
        fprintf (stderr, "out of memory\n");
        return 1;
    }
    for (i = 0, newx = 0; length > i; i++) {
        if (isalpha ((unsigned char) w[i])) {
            new[newx++] = w[i];
        }
    }
    new[newx] = '\0';
    printf ("This is the new one: %s\n", new);
    free (new);
    return 0;
}
----------------------------------------

int main (void) {
    int i, j = 0;
    char w [20] = "name1234";
    char nw [20] = "";
    int length = strlen (w);
    for (i = 0; i < length; i++) {
        if (isalpha (w[i]) || w[i] == '\0') {
            nw[j] = w[i];
            j++;
        }
    }
    printf ("This is the new one: %s\n", nw);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13325824_13326040_5_35
13325824_13326084_5_24
Title: Moving a string from one array to another in C 
----------------------------------------

int main (void) {
    int i, newx;
    char w [] = "name1234";
    int length = strlen (w);
    char *new = malloc (length +1);
    if (!new) {
        fprintf (stderr, "out of memory\n");
        return 1;
    }
    for (i = 0, newx = 0; length > i; i++) {
        if (isalpha ((unsigned char) w[i])) {
            new[newx++] = w[i];
        }
    }
    new[newx] = '\0';
    printf ("This is the new one: %s\n", new);
    free (new);
    return 0;
}
----------------------------------------

int main () {
    char org [] = "abc123defg";
    int size = sizeof (org) / sizeof (org[0]);
    char *res = malloc ((sizeof (char) * size) + 1);
    if (!res)
        return 1;
    int i;
    int k = 0;
    for (i = 0; i < size; i++) {
        if (isalpha (org[i])) {
            res[k] = org[i];
            k++;
        }
    }
    res[k] = '\0';
    printf ("%s\n", res);
    free (res);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13325824_13326074_6_25
13325824_13326084_5_24
Title: Moving a string from one array to another in C 
----------------------------------------

int main (void) {
    int i, j = 0;
    char w [20] = "name1234";
    char nw [20] = "";
    int length = strlen (w);
    for (i = 0; i < length; i++) {
        if (isalpha (w[i]) || w[i] == '\0') {
            nw[j] = w[i];
            j++;
        }
    }
    printf ("This is the new one: %s\n", nw);
    return 0;
}
----------------------------------------

int main () {
    char org [] = "abc123defg";
    int size = sizeof (org) / sizeof (org[0]);
    char *res = malloc ((sizeof (char) * size) + 1);
    if (!res)
        return 1;
    int i;
    int k = 0;
    for (i = 0; i < size; i++) {
        if (isalpha (org[i])) {
            res[k] = org[i];
            k++;
        }
    }
    res[k] = '\0';
    printf ("%s\n", res);
    free (res);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1335786_13085122_3_37
1335786_1336461_4_18
Title: C: differences between char pointer and array 
----------------------------------------

int main () {
    char amessage [] = "now is the time";
    char *pmessage = "now is the time";
    pmessage = NULL;
    amessage = NULL;
    printf ("%d\n", sizeof (amessage));
    printf ("%d\n", sizeof (pmessage));
    printf ("%p, %p\n", pmessage, & pmessage);
    printf ("%p, %p\n", amessage, & amessage);
    if (pmessage == amessage) {
        printf ("A string literal is defined only once. You are sharing space");
        "now is the time"[0] = 'W';
        printf ("You have modified both!! %s == %s \n", amessage, pmessage);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char amessage [] = "now is the time";
    char *pmessage = "now is the time";
    printf ("&amessage   : %#016" PRIxPTR "\n", (uintptr_t) & amessage);
    printf ("&amessage[0]: %#016" PRIxPTR "\n", (uintptr_t) & amessage [0]);
    printf ("&pmessage   : %#016" PRIxPTR "\n", (uintptr_t) & pmessage);
    printf ("&pmessage[0]: %#016" PRIxPTR "\n", (uintptr_t) & pmessage [0]);
    printf ("&\"now is the time\": %#016" PRIxPTR "\n", (uintptr_t) & "now is the time");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13366287_13367580_1_13
13366287_13367675_1_20
Title: Trying to call a function in Lua with nested tables 
----------------------------------------

void myregister (lua_State *L, const char *libname, const char *sublibname, const luaL_Reg *l) {
    lua_newtable (L);
    lua_pushvalue (L, - 1);
    lua_setglobal (L, libname);
    if (sublibname != NULL) {
        lua_newtable (L);
        lua_pushvalue (L, - 1);
        lua_setfield (L, - 3, sublibname);
    }
    luaL_setfuncs (L, l, 0);
}
----------------------------------------

void myregister (lua_State *L, const char *libname, const char *sublibname, const luaL_Reg *lib) {
    lua_newtable (L);
    if (sublibname == NULL) {
        luaL_setfuncs (L, lib, 0);
    }
    else {
        lua_newtable (L);
        luaL_setfuncs (L, lib, 0);
        lua_setfield (L, - 2, sublibname);
    }
    lua_setglobal (L, libname);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13371673_13371960_12_49
13371673_13372484_1_46
Title: How can I count only certain items in a list? 
----------------------------------------

void delete_contact (fr *friends, int counter) {
    char name_search [50] = {'\0'};
    char name_search3 [50] = {'\0'};
    int flag = 0;
    int i;
    printf ("Search by last name\n");
    scanf ("%s", name_search);
    for (i = 0; i < counter; i++) {
        if (strcmp (name_search, friends[i].Last_Name) == 0)
            flag++;
    }
    if (flag == 1) {
        friends[i].Last_Name = NULL;
        printf ("Name was deleted");
    }
    if (flag > 1) {
        printf ("There is more then 1 " "%s " ",please enter a first name\n", name_search);
        scanf ("%s", name_search3);
        for (i = 0; i < counter; i++) {
            if (strcmp (name_search3, friends[i].First_Name) == 0) {
                friends[i].Last_Name = NULL;
                printf ("Name was deleted");
            }
        }
    }
}
----------------------------------------

char delete_contact (fr *friends, int *counter, int i) {
    char name_search [50] = {'\0'};
    char name_search3 [50] = {'\0'};
    char Delete [5] = {'\0'};
    int flag = 0;
    printf ("Search by last name\n");
    scanf ("%s", name_search);
    for (i = 0; i < *counter; i++) {
        if (strcmp (name_search, friends[i].Last_Name) == 0)
            flag++;
    }
    if (flag == 1) {
        strcpy (friends [i].Last_Name, Delete);
        free (friends [i].First_Name);
        free (friends [i].Last_Name);
        free (friends [i].home);
        free (friends [i].cell);
        printf ("Name was deleted");
    }
    if (flag > 1) {
        printf ("There is more then 1 " "%s " ",please enter a first name\n", name_search);
        scanf ("%s", name_search3);
        for (i = 0; i < *counter; i++) {
            if ((strcmp (name_search3, friends[i].First_Name) == 0) && (strcmp (name_search, friends[i].Last_Name) == 0)) {
                strcpy (friends [i].First_Name, Delete);
                free (friends [i].First_Name);
                free (friends [i].Last_Name);
                free (friends [i].home);
                free (friends [i].cell);
                printf ("Name was deleted");
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13377548_13377818_1_11
13377548_13377833_4_12
Title: c pointers in string array 
----------------------------------------

void copy (char a [], char b []) {
    char *ptr_a = a;
    char *ptr_b = b;
    while (*ptr_b != '\0') {
        *ptr_a = *ptr_b;
        ptr_a++;
        ptr_b++;
    }
    *ptr_a = '\0';
}
----------------------------------------

void copy (char a [], char b []) {
    char **apoint = &a;
    printf ("%d\n", apoint);
    printf ("%d\n", & a);
    *apoint = b;
    printf ("%d\n", * apoint);
    printf ("%s\n", a);
    printf ("%s\n", b);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13381607_13382070_1_18
13381607_13382260_8_53
Title: Counting the number of characters in comments line in C 
----------------------------------------

int characters (FILE *file) {
    int i = 0;
    char ch [500], *p;
    fread (ch, sizeof (char), 500, file);
    p = ch;
    while (*p) {
        if (*p == '/' && *(p + 1) == '*') {
            while (*p && (*p != '*' && *(p + 1) != '/'))
                ++p;
            ++i;
        }
        ++p;
    }
    return i;
}
----------------------------------------

int characters (FILE *file) {
    int ccount = 0;
    char ch;
    int state = S_CODE;
    while ((ch = fgetc (file)) != EOF) {
        switch (state) {
        case S_CODE :
            if (ch == '/')
                state = S_ONESLASH;
            break;
        case S_ONESLASH :
            if (ch == '/')
                state = S_LINECOMMENT;
            else if (ch == '*')
                state = S_BLOCKCOMMENT;
            else
                state = S_CODE;
            break;
        case S_LINECOMMENT :
            if (ch == '\n')
                state = S_CODE;
            else
                ccount++;
            break;
        case S_BLOCKCOMMENT :
            if (ch == '*')
                state = S_BLOCKSTAR;
            ccount++;
            break;
        case S_BLOCKSTAR :
            if (ch == '/')
                state = S_CODE;
            else if (ch == '*')
                state = S_BLOCKSTAR;
            else
                state = S_CODE;
            ccount++;
            break;
        }
    }
    return ccount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13399594_13400895_8_22
13399594_53557354_4_18
Title: How to extract numbers from string in c? 
----------------------------------------

int main () {
    int x;
    tmp[0] = '\0';
    while (sscanf (str, "%[^0123456789]%s", tmp, str) > 1 || sscanf (str, "%d%s", &x, str)) {
        if (tmp[0] == '\0') {
            printf ("%d\r\n", x);
        }
        tmp[0] = '\0';
    }
}
----------------------------------------

void main (int argc, char *argv []) {
    char *str = "ab234cid*(s349*(20kd", *ptr = str;
    while (*ptr) {
        if (isdigit (*ptr)) {
            int val = (int) strtol (ptr, &ptr, 10);
            printf ("%d\n", val);
        }
        else {
            ptr++;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13400602_13400661_2_51
13400602_13401112_3_34
Title: Printing an integer in english 
----------------------------------------

int main (void) {
    int num, num_copy, accum = 1;
    printf ("Enter an integer ");
    scanf ("%i", & num);
    char str [15];
    sprintf (str, "%d", num);
    for (num = 0; str[i] != '\O'; num++) {
        switch (num) {
        case (1) :
            printf ("one ");
            break;
        case (2) :
            printf ("two ");
            break;
        case (3) :
            printf ("three ");
            break;
        case (4) :
            printf ("four ");
            break;
        case (5) :
            printf ("five ");
            break;
        case (6) :
            printf ("six ");
            break;
        case (7) :
            printf ("seven ");
            break;
        case (8) :
            printf ("eight ");
            break;
        case (9) :
            printf ("nine ");
            break;
        case (0) :
            printf ("zero ");
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int num, i = 0, j, digit;
    char *buf [MAX_BUF];
    printf ("Integer: ");
    scanf ("%d", & num);
    while (num) {
        digit = num % 10;
        num = num / 10;
        switch (digit) {
        case 0 :
            buf[i++] = "zero";
            break;
        case 1 :
            buf[i++] = "one";
            break;
        case 2 :
            buf[i++] = "two";
            break;
        case 3 :
            buf[i++] = "three";
            break;
        case 4 :
            buf[i++] = "four";
            break;
        case 5 :
            buf[i++] = "five";
            break;
        case 6 :
            buf[i++] = "six";
            break;
        case 7 :
            buf[i++] = "seven";
            break;
        case 8 :
            buf[i++] = "eight";
            break;
        case 9 :
            buf[i++] = "nine";
            break;
        }
    }
    for (j = i - 1; j >= 0; j--) {
        printf ("%s-", buf [j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13400602_13400661_2_51
13400602_13401738_2_66
Title: Printing an integer in english 
----------------------------------------

int main (void) {
    int num, num_copy, accum = 1;
    printf ("Enter an integer ");
    scanf ("%i", & num);
    char str [15];
    sprintf (str, "%d", num);
    for (num = 0; str[i] != '\O'; num++) {
        switch (num) {
        case (1) :
            printf ("one ");
            break;
        case (2) :
            printf ("two ");
            break;
        case (3) :
            printf ("three ");
            break;
        case (4) :
            printf ("four ");
            break;
        case (5) :
            printf ("five ");
            break;
        case (6) :
            printf ("six ");
            break;
        case (7) :
            printf ("seven ");
            break;
        case (8) :
            printf ("eight ");
            break;
        case (9) :
            printf ("nine ");
            break;
        case (0) :
            printf ("zero ");
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num, backwards = 0, digit, backupzeros = 0;
    printf ("Enter an integer ");
    scanf ("%i", & num);
    while (num > 0) {
        digit = num % 10;
        num /= 10;
        if ((backwards == 0) && (digit == 0))
            backupzeros++;
        backwards = (backwards * 10) + digit;
    }
    while (backwards > 0) {
        digit = backwards % 10;
        backwards /= 10;
        switch (digit) {
        case 1 :
            printf ("one ");
            break;
        case 2 :
            printf ("two ");
            break;
        case 3 :
            printf ("three ");
            break;
        case 4 :
            printf ("four ");
            break;
        case 5 :
            printf ("five ");
            break;
        case 6 :
            printf ("six ");
            break;
        case 7 :
            printf ("seven ");
            break;
        case 8 :
            printf ("eight ");
            break;
        case 9 :
            printf ("nine ");
            break;
        default :
            printf ("zero ");
            break;
        }
    }
    while (backupzeros > 0) {
        printf ("zero ");
        backupzeros--;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13400602_13401112_3_34
13400602_13401738_2_66
Title: Printing an integer in english 
----------------------------------------

int main () {
    int num, i = 0, j, digit;
    char *buf [MAX_BUF];
    printf ("Integer: ");
    scanf ("%d", & num);
    while (num) {
        digit = num % 10;
        num = num / 10;
        switch (digit) {
        case 0 :
            buf[i++] = "zero";
            break;
        case 1 :
            buf[i++] = "one";
            break;
        case 2 :
            buf[i++] = "two";
            break;
        case 3 :
            buf[i++] = "three";
            break;
        case 4 :
            buf[i++] = "four";
            break;
        case 5 :
            buf[i++] = "five";
            break;
        case 6 :
            buf[i++] = "six";
            break;
        case 7 :
            buf[i++] = "seven";
            break;
        case 8 :
            buf[i++] = "eight";
            break;
        case 9 :
            buf[i++] = "nine";
            break;
        }
    }
    for (j = i - 1; j >= 0; j--) {
        printf ("%s-", buf [j]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num, backwards = 0, digit, backupzeros = 0;
    printf ("Enter an integer ");
    scanf ("%i", & num);
    while (num > 0) {
        digit = num % 10;
        num /= 10;
        if ((backwards == 0) && (digit == 0))
            backupzeros++;
        backwards = (backwards * 10) + digit;
    }
    while (backwards > 0) {
        digit = backwards % 10;
        backwards /= 10;
        switch (digit) {
        case 1 :
            printf ("one ");
            break;
        case 2 :
            printf ("two ");
            break;
        case 3 :
            printf ("three ");
            break;
        case 4 :
            printf ("four ");
            break;
        case 5 :
            printf ("five ");
            break;
        case 6 :
            printf ("six ");
            break;
        case 7 :
            printf ("seven ");
            break;
        case 8 :
            printf ("eight ");
            break;
        case 9 :
            printf ("nine ");
            break;
        default :
            printf ("zero ");
            break;
        }
    }
    while (backupzeros > 0) {
        printf ("zero ");
        backupzeros--;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1340876_1343508_26_38
1340876_1345129_48_61
Title: How to read a string of length 'n' from Standard input 
----------------------------------------

int main (int argc, char **argv) {
    char str1 [STRING_LEN];
    char str2 [STRING_LEN];
    getString (str1, STRING_LEN);
    getString (str2, STRING_LEN);
    fprintf (stdout, "%s\n", str1);
    fprintf (stdout, "%s\n", str2);
    return 0;
}
----------------------------------------

int main (void) {
    int i = 0;
    char buf [BUF_SIZE];
    do {
        getString (buf, BUF_SIZE, STRING_SIZE);
        printf ("\nString : %s\n", buf);
        i++;
    }
    while (i < 2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13422394_13422549_1_14
13422394_13422582_1_20
Title: How can i have multiple threads in C working on the same for loop of a two-dimensional array? 
----------------------------------------

void *CalculateSum (void *dummyPtr) {
    int j, sum = 0;
    int i = (int) dummyPtr;
    for (j = 0; j <= M - 1; j++) {
        sum += dimensional_array[i][j];
    }
    printf (" Sum = %d\n", sum);
    pthread_mutex_lock (& mutex1);
    counter++;
    pthread_mutex_unlock (& mutex1);
}
----------------------------------------

void *CalculateSum (void *args) {
    int *argPtr = args;
    int i, j, sum = 0;
    int threadindex = *argPtr;
    for (i = 0; i <= N - 1; i++) {
        if (i % NTHREADS != threadindex)
            continue;
        for (j = 0; j <= M - 1; j++) {
            sum += dimensional_array[i][j];
        }
    }
    pthread_mutex_lock (& mutex1);
    Mutex
    must go here counter ++;
    pthread_mutex_unlock (& mutex1);
    *argPtr = sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13431567_13431656_3_21
13431567_13432026_17_35
Title: How to make an array with a dynamic size? General usage of dynamic arrays (maybe pointers too)? 
----------------------------------------

int main (int argc, char *argv []) {
    int *my_dynamic_array;
    int size;
std :
    : cin >> size;
    my_dynamic_array = new int [size];
    for (int k = 0; k < size; k++)
        my_dynamic_array[k] = k;
    for (int k = 0; k < size; k++)
    std :
    : cout << my_dynamic_array [k] << std : : endl;
    delete [] my_dynamic_array;
    return 0;
}
----------------------------------------

int main () {
    int x;
    struct linked_list *p;
    do {
        printf ("Enter Number : ");
        scanf ("%d", & x);
        add_element (x)
        printf ("Press 'q' or 'Q' to quit or any other key to continue : ");
        scanf ("%c", & c);
    }
    while (c != 'q' && c != 'Q');
    for (p = head; p != NULL; p = p->next) {
        printf (% d \ r \ n ", p -> x);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13442561_13442587_1_14
13442561_13442627_9_21
Title: How to pass variables onto another function? 
----------------------------------------

int main (void) {
    float a, b, c;
    double d;
    printf ("Enter the values of 'a','b' and 'c': ");
    if (scanf ("%f %f %f", &a, &b, &c) == 3) {
        d = my_function (a, b, c);
        printf ("Result: %f\n", d);
    }
    else
        printf ("Oops: I didn't understand what you typed\n");
}
----------------------------------------

int main () {
    float a, b, c;
    float result;
    printf ("Enter the values of 'a','b' and 'c':");
    scanf ("%f %f %f", & a, & b, & c);
    result = my_function (a, b, c);
    printf ("\nResult is %f", result);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13469381_13469489_1_11
13469381_48403899_5_15
Title: How to make generic function using void * in c? 
----------------------------------------

int main () {
    int i1, i2;
    double d1, d2;
    i1 = 10;
    i2 = 20;
    d1 = 1.12;
    d2 = 2.23;
    memswap_arr (& i1, & i2, sizeof (int));
    printf ("i1==%d i2==%d \n", i1, i2);
    memswap_arr (& d1, & d2, sizeof (double));
    printf ("d1==%f d2==%f \n", d1, d2);
    return 0;
}
----------------------------------------

int main () {
    int i = 0;
    float f = 0;
    char c = 0;
    add1 (i);
    add1 (f);
    add1 (c);
    printf ("i = %d\tf = %g\tc = %d", i, f, c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13480213_13485322_47_110
13480213_49762848_33_51
Title: How to dynamically allocate arrays inside a kernel? 
----------------------------------------

int main () {
    cudaError_t cuda_status;
    cudaSetDevice (0);
    int blocks_per_launch (1024 * 10);
    int threads_per_block (256);
    int threads_per_launch (blocks_per_launch * threads_per_block);
    int *totals_d;
    cudaMalloc ((void * *) & totals_d, threads_per_launch * sizeof (int));
    cudaEvent_t start, stop;
    cudaEventCreate (& start);
    cudaEventCreate (& stop);
    cudaDeviceSynchronize ();
    cudaEventRecord (start, 0);
    int *items_d;
    cudaMalloc ((void * *) & items_d, threads_per_launch * sizeof (int) * N_ITEMS);
    test_malloc_2 << < blocks_per_launch, threads_per_block >> > (items_d, totals_d);
    cudaFree (items_d);
    cuda_status = cudaDeviceSynchronize ();
    if (cuda_status != cudaSuccess) {
        printf ("Error: %d\n", cuda_status);
        exit (1);
    }
    cudaEventRecord (stop, 0);
    cudaEventSynchronize (stop);
    float elapsedTime;
    cudaEventElapsedTime (& elapsedTime, start, stop);
    printf ("Elapsed: %f\n", elapsedTime);
    int *totals_h (new int [threads_per_launch]);
    cuda_status = cudaMemcpy (totals_h, totals_d, threads_per_launch * sizeof (int), cudaMemcpyDeviceToHost);
    if (cuda_status != cudaSuccess) {
        printf ("Error: %d\n", cuda_status);
        exit (1);
    }
    for (int i (0); i < 10; ++i) {
        printf ("%d ", totals_h [i]);
    }
    printf ("\n");
    cudaFree (totals_d);
    delete [] totals_h;
    return cuda_status;
}
----------------------------------------

int main () {
    Timer cuda_malloc_timer ("cuda malloc timer");
    for (int i = 0; i < ITERATIONS; ++i) {
        if (i == 1)
            cuda_malloc_timer.start ();
        int *foo;
        cudaMalloc (& foo, sizeof (int) * ARRAY_SIZE);
        cudaFree (foo);
    }
    cuda_malloc_timer.stop_and_report ();
    CUDA_CHECK_RETURN (cudaDeviceSynchronize ());
    Timer device_malloc_timer ("device malloc timer");
    device_malloc_timer.start ();
    mallocai << < BLOCK_COUNT, THREADS_PER_BLOCK >> > ();
    CUDA_CHECK_RETURN (cudaDeviceSynchronize ());
    device_malloc_timer.stop_and_report ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13518495_13518552_30_98
13518495_13519440_8_48
Title: Looping back to User Input Validation C 
----------------------------------------

void validatePass () {
    char password [MAX + 1];
    int iUpper, iLower, iSymbol, iNumber, iTotal;
    printf ("\n\n\t\tPassword rules: ");
    printf ("1. Passwords must be at least 9 characters long and less than 15 characters.");
    printf ("2. Passwords must have at least 2 numbers in them.");
    printf ("3. Passwords must have at least 2 uppercase letters and 2 lowercase letters in them.");
    printf ("4. Passwords must have at least 1 symbol in them (eg ?, $, £, %%).");
    printf ("5. Passwords may not have small, common words in them eg hat, pow or ate.");
    bool pw_invalid;
    do {
        printf ("Enter your password following password rules: ");
        scanf ("%" STRINGIFY_VALUE (MAX) "s", password);
        countLetters (password, & iUpper, & iLower, & iSymbol, & iNumber, & iTotal);
        pw_invalid = false;
        pw_invalid = pw_invalid || test_and_complain ((iUpper < 2), "Not enough uppercase letters!!!");
        pw_invalid = pw_invalid || test_and_complain ((iLower < 2), "Not enough lowercase letters!!!");
        pw_invalid = pw_invalid || test_and_complain ((iSymbol < 1), "Not enough symbols!!!");
        pw_invalid = pw_invalid || test_and_complain ((iNumber < 2), "Not enough numbers!!!");
        pw_invalid = pw_invalid || test_and_complain ((iTotal < 9), "Not enough characters!!!");
        pw_invalid = pw_invalid || test_and_complain ((checkWordInFile ("dictionary.txt", password) == gC_FOUND), "Found your word in the dictionary");
        pw_invalid = pw_invalid || test_and_complain ((checkWordInFile ("passHistory.txt", password) == gC_FOUND), "You already used this password recently");
    }
    while (pw_invalid);
    printf ("\nYour new password is verified\n");
    printf ("%s\n", password);
    write_history (password);
    printf ("\n\n\n");
    system ("pause");
}
----------------------------------------

void validatePass () {
    FILE *fptr;
    char password [MAX + 1];
    int iChar, iUpper, iLower, iSymbol, iNumber, iTotal, iResult, iCount;
    printf ("\n\n\t\tPassword rules: ");
    printf ("\n\n\t\t 1. Passwords must be at least 9 characters long and less than 15 characters. ");
    printf ("\n\n\t\t 2. Passwords must have at least 2 numbers in them.");
    printf ("\n\n\t\t 3. Passwords must have at least 2 uppercase letters and 2 lowercase letters in them.");
    printf ("\n\n\t\t 4. Passwords must have at least 1 symbol in them (eg ?, $, £, %).");
    printf ("\n\n\t\t 5. Passwords may not have small, common words in them eg hat, pow or ate.");
get_user_password :
    printf ("\n\n\t\tEnter your password following password rules: ");
    scanf ("%s", & password);
    iChar = countLetters (password, &iUpper, &iLower, &iSymbol, &iNumber, &iTotal);
    iUpper =...iLower =...iSymbol =...iNumber =...iTotal =...if (verifyThat (iUpper >= 2, "Not enough uppercase letters!!!\n") || verifyThat (iLower >= 2, "Not enough lowercase letters!!!\n") || verifyThat (iSymbol >= 1, "Not enough symbols!!!\n") || verifyThat (iNumber >= 2, "Not enough numbers!!!\n") || verifyThat (iTotal >= 9, "Not enough characters!!!\n") || verifyThat (iTotal <= 15, "Too many characters!!!\n")) goto get_user_password;
    iResult = checkWordInFile ("dictionary.txt", password);
    if (verifyThat (iResult != gC_FOUND, "Password used."))
        goto get_user_password;
    printf ("Your new password is verified.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13520067_13540879_3_11
13520067_14636260_1_12
Title: About Rot13-Implementation 
----------------------------------------

int rot13 (int c) {
    if ('a' <= c && c <= 'z') {
        return rot13b (c, 'a');
    }
    else if ('A' <= c && c <= 'Z') {
        return rot13b (c, 'A');
    }
    else {
        return c;
    }
}
----------------------------------------

void rot13 (char *s) {
    if (s == NULL)
        return;
    int i;
    for (i = 0; s[i]; i++) {
        if (s[i] >= 'a' && s[i] <= 'm') {
            s[i] += 13;
            continue;
        }
        if (s[i] >= 'A' && s[i] <= 'M') {
            s[i] += 13;
            continue;
        }
        if (s[i] >= 'n' && s[i] <= 'z') {
            s[i] -= 13;
            continue;
        }
        if (s[i] >= 'N' && s[i] <= 'Z') {
            s[i] -= 13;
            continue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13522916_13523035_7_26
13522916_13523045_5_28
Title: C - Storing Values from text into Arrays 
----------------------------------------

int main (void) {
    FILE *ptrfile = fopen ("text.txt", "r");
    char buffer [1000];
    int line;
    struct player players [16];
    line = 0;
    if (ptrfile == NULL)
        return 0;
    while (fgets (buffer, sizeof (buffer), ptrfile) != NULL) {
        if (strcmp (buffer, "") == 0)
            return 0;
        char *number = strtok (buffer, ",");
        char *player_name = strtok (NULL, ",");
        char *title_name = strtok (NULL, ",");
        players[line].number = atoi (number);
        strcpy (players [line].player_name, player_name);
        strcpy (players [line].title_name, title_name);
        line++;
    }
    fclose (ptrfile);
    return 0
}
----------------------------------------

int main () {
    char *msg [100];
    char temp [100];
    int length, i;
    int num = 0;
    while ((scanf ("%s", &temp[0]) != EOF)) {
        length = strlen (temp);
        msg[num] = malloc ((length + 1) * sizeof (char));
        strcpy (msg [num], temp);
        num++;
    }
    printf ("There are %d words in the this input.\n", num);
    for (i = 0; i < num; i++) {
        printf ("%s\n", msg [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13533414_14490307_10_19
13533414_14652508_30_44
Title: Not getting proper output from Pollard's rho algorithm implementation 
----------------------------------------

int main (void) {
    ULL factor;
    ULL n;
std :
    : cout << "Enter the number for which you want a prime factor: ";
std :
    : cin >> n;
    factor = pollard (n);
    if (factor == 0)
    std :
    : cout << "No factor found.  Your number may be prime, but it is     not certain.\n\n";
    else
    std :
    : cout << "One factor is: " << factor << "\n\n";
}
----------------------------------------

int main () {
    while (1) {
        primeIndex = 0;
        compositeIndex = 0;
        tempIndex = 0;
        initializeArrays ();
        compositeFactors[0] = getNumberToFactor ();
        cout << "\n\n";
        if (compositeFactors[0] == 0)
            return 0;
        numberOfCompositeFactors = 1;
        factorComposites ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13533414_14490307_21_44
13533414_14652508_208_238
Title: Not getting proper output from Pollard's rho algorithm implementation 
----------------------------------------

ULL pollard (ULL n) {
    ULL x = 2ULL;
    ULL y = 2ULL;
    ULL d = 1ULL;
    while (d == 1 || d == n) {
        x = f (x, n);
        y = f (y, n);
        y = f (y, n);
        if (y > x) {
            d = gcd (y -x, n);
        }
        else {
            d = gcd (x -y, n);
        }
    }
    return d;
}
----------------------------------------

BU pollard (BU n) {
    if (n == 4)
        return 2;
    BU x = 2;
    BU y = 2;
    BU d = 1;
    int increment = 1;
    while (d == 1 || d == n || d == 0) {
        x = f (x, n, increment);
        y = f (y, n, increment);
        y = f (y, n, increment);
        if (y > x) {
            d = gcda (y -x, n);
        }
        else {
            d = gcda (x -y, n);
        }
        if (d == 0) {
            x = 2;
            y = 2;
            d = 1;
            increment++;
        }
    }
    return d;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13535557_13535618_4_13
13535557_13535645_4_22
Title: Why does printf return a value? 
----------------------------------------

int main (void) {
    int result = printf ("This is a test!");
    if (result > 0) {
        printf ("%d characters were written!", result);
        return EXIT_SUCCESS;
    }
    else
        return EXIT_FAILURE;
}
----------------------------------------

int main (void) {
    FILE *fp;
    printf ("This will display on the screen.\n");
    if ((fp = freopen ("OUT", "w", stdout)) == NULL) {
        printf ("Cannot open file.\n");
        exit (1);
    }
    if (printf ("This will be written to the file OUT.") < 0) {
        return -1;
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1353559_1353591_3_18
1353559_43650129_2_14
Title: Trying to make this star output using a for loop in C 
----------------------------------------

int main (void) {
    int r, c;
    for (r = 0; r != 4; r++) {
        for (c = 0; c < 7; c++) {
            if (c > 3 - r && c < 3 + r)
                printf ("  ");
            else
                printf ("* ");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 7; j++) {
            if (j <= 3 - i || j >= 3 + i)
                printf ("*");
            else
                printf (" ");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13551058_13551550_8_39
13551058_13551565_9_39
Title: Input within a time limit in Standard C 
----------------------------------------

int main () {
    int flags = fcntl (0, F_GETFL, 0);
    if (flags == -1) {
        perror ("fcntl");
        return -1;
    }
    flags |= O_NONBLOCK;
    if (fcntl (0, F_SETFL, flags) == -1) {
        perror ("fcntl");
        return -1;
    }
    char st [1024] = {0};
    printf ("Please enter a line of text : ");
    time_t end = time (0) + 5;
    while (time (0) < end && scanf ("%s", st) < 1 && errno == EAGAIN)
        ;
    if (st[0])
        printf ("Thank you, you entered >%s<\n", st);
    return 0;
}
----------------------------------------

int main () {
    printf ("Please enter a line of text : ");
    fflush (stdout);
    time_t end = time (0) + 5;
    int flags = fcntl (STDIN_FILENO, F_GETFL, 0);
    fcntl (STDIN_FILENO, F_SETFL, flags | O_NONBLOCK);
    char answer [INPUT_LEN];
    int pos = 0;
    while (time (0) < end) {
        int c = getchar ();
        if (c != EOF && c != 10 && pos < INPUT_LEN - 1)
            answer[pos++] = c;
        if (c == 10)
            break;
    }
    answer[pos] = '\0';
    if (pos > 0)
        printf ("%s\n", answer);
    else
        puts ("\nSorry, I got tired waiting for your input. Good bye!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13555856_13556022_1_14
13555856_13556119_1_18
Title: Optimization of C code 
----------------------------------------

int foobar (int a, int b, int N) {
    int i, j, iLimit, jLimit;
    a = 0;
    b = 512;
    iLimit = N << 3;
    jLimit = N << 2;
    for (i = 0; i <= iLimit; i += 8) {
        for (j = i >> 1 + 4; j <= jLimit; j += 4) {
            a = a + (i + j) * b;
        }
        b++;
    }
    return a;
}
----------------------------------------

int foobar (int a, int b, int N) {
    int i, j, k, x, y;
    x = 0;
    k = 256;
    for (i = 0; i <= N; i++) {
        for (j = i + 1; j <= N; j++) {
            x = x + 4 * (2 * i + j) * (i + 2 * k);
        }
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13555856_13556022_1_14
13555856_13557209_1_62
Title: Optimization of C code 
----------------------------------------

int foobar (int a, int b, int N) {
    int i, j, iLimit, jLimit;
    a = 0;
    b = 512;
    iLimit = N << 3;
    jLimit = N << 2;
    for (i = 0; i <= iLimit; i += 8) {
        for (j = i >> 1 + 4; j <= jLimit; j += 4) {
            a = a + (i + j) * b;
        }
        b++;
    }
    return a;
}
----------------------------------------

int foobar (int N) {
    int x = 0, i = 0, i2 = 0, j, k, z;
    while (i < N) {
        k = (2 * i2) + 2048;
        x = x + (i2 * k) * (N - i);
        z = i * k;
        for (j = i + 1; j <= N; j++) {
            z = z + k;
            x = x + z;
        }
        i++;
        i2 += 2;
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13555856_13556119_1_18
13555856_13557209_1_62
Title: Optimization of C code 
----------------------------------------

int foobar (int a, int b, int N) {
    int i, j, k, x, y;
    x = 0;
    k = 256;
    for (i = 0; i <= N; i++) {
        for (j = i + 1; j <= N; j++) {
            x = x + 4 * (2 * i + j) * (i + 2 * k);
        }
    }
    return x;
}
----------------------------------------

int foobar (int N) {
    int x = 0, i = 0, i2 = 0, j, k, z;
    while (i < N) {
        k = (2 * i2) + 2048;
        x = x + (i2 * k) * (N - i);
        z = i * k;
        for (j = i + 1; j <= N; j++) {
            z = z + k;
            x = x + z;
        }
        i++;
        i2 += 2;
    }
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13573831_13652751_1_35
13573831_13653155_1_24
Title: Thread locks simulating an intersection 
----------------------------------------

static void gostraight (orientation_t cardirection, unsigned int carnumber) {
    int CAR;
    cAR = carnumber;
    switch (cardirection) {
    case NORTH :
        lock_SE (CAR);
        lock_NE (CAR);
        printf ("Car %d, Moving South-North\n", carnumber);
        unlock_NE (CAR);
        unlock_SE (CAR);
        break;
    case SOUTH :
        lock_NW (CAR);
        lock_SW (CAR);
        printf ("Car %d, Moving North-South\n", carnumber);
        unlock_SW (CAR);
        unlock_NW (CAR);
        break;
    case EAST :
        lock_SE (CAR);
        lock_SW (CAR);
        printf ("Car %d, Moving West-East\n", carnumber);
        unlock_SE (CAR);
        unlock_SW (CAR);
        break;
    case WEST :
        lock_NE (CAR);
        lock_NW (CAR);
        printf ("Car %d, Moving East-West\n", carnumber);
        unlock_NW (CAR);
        unlock_NE (CAR);
        break;
    }
}
----------------------------------------

static void gostraight (orientation_t cardirection, unsigned int carnumber) {
    switch (cardirection) {
    case NORTH :
        lock_two (&SE_mutex, &NE_mutex);
        printf ("Car %d, Moving South-North\n", carnumber);
        unlock_two (& SE_mutex, & NE_mutex);
        break;
    case SOUTH :
        lock_two (&NW_mutex, &SW_mutex);
        printf ("Car %d, Moving North-South\n", carnumber);
        unlock_two (& NW_mutex, & SW_mutex);
        break;
    case EAST :
        lock_two (&SW_mutex, &SE_mutex);
        printf ("Car %d, Moving West-East\n", carnumber);
        unlock_two (& SW_mutex, & SE_mutex);
        break;
    case WEST :
        lock_two (&NE_mutex, &NW_mutex);
        printf ("Car %d, Moving East-West\n", carnumber);
        unlock_two (& NE_mutex, & NW_mutex);
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13600991_13601096_1_14
13600991_13601259_1_17
Title: Why is a negative int greater than unsigned int? 
----------------------------------------

int main (void) {
    unsigned int y = 10;
    int x = � � � 4;
    if (x > (int) y)
        Printf ("x is greater");
    else
        Printf ("y is greater");
    getch ();
    return (0);
}
----------------------------------------

int main () {
    int x = -4;
    unsigned int y = 10;
    unsigned char z = 10;
    if (x > y)
        printf ("x>y\n");
    else
        printf ("x<y\n");
    if (x > z)
        printf ("x>z\n");
    else
        printf ("x<z\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13621062_13621265_1_42
13621062_13621267_12_46
Title: No program output in C 
----------------------------------------

int main () {
    int i = 0;
    node *temp;
    while (i != 10) {
        temp = (node *) malloc (sizeof (node));
        if (temp == NULL)
            return -1;
        temp->i = i++;
        temp->link = head;
        head = temp;
    }
    temp = head;
    while (temp != NULL) {
        node *temp2 = temp;
        temp = temp->link;
        printf ("\n The data is: %d\n", temp2 -> i);
        free (temp2);
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 1;
    node *temp = NULL;
    while (i <= 10) {
        temp = (node *) malloc (sizeof (node));
        if (temp == NULL) {
            printf ("\n malloc for temp node failed! \n");
            exit (1);
        }
        temp->i = i;
        temp->link = NULL;
        if (head == NULL) {
            head = temp;
        }
        else {
            temp->link = head;
            head = temp;
        }
        i++;
    }
    for (temp = head; temp != NULL; temp = temp->link) {
        printf ("\n The data is:%d \n", temp -> i);
    }
    while (head != NULL) {
        temp = head->link;
        free (head);
        head = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13638653_13638904_10_24
13638653_13638907_5_21
Title: Copying struct problems 
----------------------------------------

void foo (struct foo_t *f, size_t limit, size_t *result_length) {
    int i = 0;
    struct foo_t a, b, c;
    a.X = 5;
    b.X = 10;
    c.X = 4;
    f[i++] = a;
    f[i++] = b;
    f[i++] = c;
    *result_length = i;
}
----------------------------------------

static void foo (struct foo_t *f, size_t limit, size_t *result_length) {
    size_t i = 0;
    struct foo_t a;
    a.X = 5;
    struct foo_t b;
    b.X = 10;
    struct foo_t c;
    c.X = 4;
    if (i < limit)
        f[i++] = a;
    if (i < limit)
        f[i++] = b;
    if (i < limit)
        f[i++] = c;
    *result_length = i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13638653_13638904_26_58
13638653_13638907_23_45
Title: Copying struct problems 
----------------------------------------

int main (int argc, char **argv) {
    struct foo_t buf [12];
    struct foo_t positive [12];
    struct foo_t negative [12];
    size_t len;
    int c, positive_len, negative_len;
    foo (buf, sizeof (buf) / sizeof (buf [0]), & len);
    for (c = positive_len = negative_len = 0; c < len; c++) {
        if (buf[c].X < 8)
            positive[positive_len++] = buf[c];
        else
            negative[negative_len++] = buf[c];
    }
    {
        int i;
        puts ("POSITIVE:");
        for (i = 0; i < positive_len; i++)
            printf ("%d\n", positive[i].X);
        puts ("NEGATIVE:");
        for (i = 0; i < negative_len; i++)
            printf ("%d\n", negative[i].X);
    }
    getchar ();
}
----------------------------------------

int main (void) {
    struct foo_t buf [12];
    struct foo_t positive [12];
    struct foo_t negative [12];
    size_t len;
    foo (buf, sizeof (buf) / sizeof (buf [0]), & len);
    size_t c, positive_len, negative_len;
    for (c = positive_len = negative_len = 0; c < len; c++) {
        if (buf[c].X < 8)
            positive[positive_len++] = buf[c];
        else
            negative[negative_len++] = buf[c];
    }
    puts ("POSITIVE:");
    for (size_t i = 0; i < positive_len; i++)
        printf ("%d\n", positive[i].X);
    puts ("NEGATIVE:");
    for (size_t i = 0; i < negative_len; i++)
        printf ("%d\n", negative[i].X);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13666396_13666459_4_19
13666396_13666574_4_16
Title: C code hanging at scanf() statement 
----------------------------------------

int main () {
    int input [ARRAYSIZE];
    int i = 0;
    int entry = 0;
    while (entry != -1 && i < ARRAYSIZE) {
        printf ("Enter data #%d or -1 to exit: ", i);
        scanf ("%d", & input [i]);
        entry = input[i];
        fprintf (stderr, "entry= %d, input[i]= %d...\n", entry, input [i]);
        i++;
    }
    printf ("Done.\n");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int data [ARRAYSIZE];
    int input = 0;
    int i = 0;
    while (input != -1 && i < ARRAYSIZE) {
        scanf ("%d", & input);
        data[i] = input;
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13690498_13690982_3_17
13690498_13691309_4_24
Title: "Using fscan() for a file how can I do something with the values inside the file?" 
----------------------------------------

int main (void) {
    double sum = 0.0;
    char const *filename = "data.file";
    FILE *fp = fopen (filename, "r");
    if (fp != 0) {
        double d;
        while (fscanf (fp, "%lf", &d) == 1)
            sum += d;
        fclose (fp);
    }
    printf ("%g\n", sum);
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    float sum = 0;
    float eachValue;
    FILE *fp;
    fp = fopen (argv[1], "r");
    while (true) {
        int scanned = fscanf (fp, "%f\n", &eachValue);
        if (scanned == 1) {
            sum += eachValue;
        }
        else {
            break;
        }
    }
    fclose (fp);
    printf ("%f\n", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13692268_13692434_3_18
13692268_13692471_6_32
Title: Getting multiple struct entries from stdin 
----------------------------------------

int main () {
    struct course {
        char title [20];
        int num;
    };
    struct course class;
    printf ("Enter a course title and course number");
    scanf ("%s %d", class.title, & class.num);
    printf ("%s %d", class.title, class.num);
    return 0;
}
----------------------------------------

int main () {
    struct course {
        char title [20];
        int num;
    };
    struct course classes [MAX_CLASSES];
    int nCurClass = 0;
    bool bEnterMore = true;
    while (bEnterMore == true) {
        printf ("Enter a course title and course number");
        scanf ("%s %d", classes [nCurClass].title, & classes [nCurClass].num);
        if (classes[nCurClass].num == -1 || nCurClass > MAX_CLASSES - 1)
            bEnterMore = false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13746852_13747685_1_18
13746852_13751236_1_18
Title: malloc array of structs in a struct 
----------------------------------------

main () {
    struct course *my_course;
    my_course = calloc (1, sizeof (struct course));
    struct node *my_nodes;
    my_nodes = calloc (3, sizeof (struct node));
    my_course.num_nodes = 3;
    my_course.nodes = my_nodes;
    free (my_nodes);
    free (my_course);
}
----------------------------------------

main () {
    int i;
    struct course *c;
    c = malloc (sizeof (struct course));
    c->num_nodes = 3;
    c->nodes = malloc (sizeof (struct node) * c->num_nodes);
    for (i = 0; i < c->num_nodes; i++)
        c->nodes[i] = malloc (sizeof (struct node));
    for (i = 0; i < c->num_nodes; i++)
        free (c->nodes[i]);
    free (c -> nodes);
    free (c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13755307_13755415_4_16
13755307_13755438_4_25
Title: How to scan multiple words using sscanf in C? 
----------------------------------------

int main () {
    char str [] = "- This, a sample string.";
    char *pch;
    printf ("Splitting string \"%s\" into tokens:\n", str);
    pch = strtok (str, " ,.-");
    while (pch != NULL) {
        printf ("%s\n", pch);
        pch = strtok (NULL, " ,.-");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [1024];
    while (fgets (buffer, sizeof (buffer), stdin) != 0) {
        char *str = buffer;
        char word [256];
        int posn;
        while (sscanf (str, "%255[a-zA-Z_0-9]%n", word, &posn) == 1) {
            printf ("Word: <<%s>>\n", word);
            str += posn;
            if (!isalnum ((unsigned char) *str)) {
                if (sscanf (str, "%*[^a-zA-Z_0-9]%n", &posn) == 0)
                    str += posn;
            }
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13787348_13788121_1_21
13787348_13790074_25_47
Title: Search most right string in another string - in c 
----------------------------------------

int strindex (char s [], char t []) {
    int foundIndex = -1;
    int i, j;
    for (i = 0; s[i] != '\0'; i++) {
        if (s[i] == t[0]) {
            for (j = 1; s[i + j] != '\0' && t[j] != '\0' && s[i + j] == t[j]; j++)
                ;
            if (t[j] == '\0') {
                printf ("found match");
                foundIndex = i;
            }
        }
    }
    return foundIndex;
}
----------------------------------------

int strindex (char s [], char t []) {
    int foundIndex = -1;
    int tempFound, startNext;
    int i, j;
    i = j = 0;
    while (s[i] != '\n') {
        if (s[i] == t[j]) {
            startNext = i + 1;
            tempFound = i;
            while (s[i] != '\n' && t[j] != '\n' && s[i] == t[j])
                i++, j++;
            if (t[j] == '\n')
                foundIndex = tempFound;
            i = startNext;
            j = 0;
        }
        else
            i++;
    }
    return foundIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13854673_13854722_1_12
13854673_13854776_1_17
Title: "Write the definition of a function isReverse" 
----------------------------------------

int isReverse (int array1 [], int array2 [], int size) {
    int flag = 0;
    for (int i = 0; i < size; i++) {
        if (array1[i] != array2[size - 1]) {
            flag = 1;
            break;
        }
        return flag;
    }
}
----------------------------------------

int isReverse (int array1 [], int array2 [], int size) {
    int i, status = 1;
    for (i = 0; i < size; i++) {
        if (array1[i] == array2[size]) {
            status = 0;
            --size;
        }
        else
            return 1;
    }
    return status;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13854673_13854722_1_12
13854673_13855176_1_10
Title: "Write the definition of a function isReverse" 
----------------------------------------

int isReverse (int array1 [], int array2 [], int size) {
    int flag = 0;
    for (int i = 0; i < size; i++) {
        if (array1[i] != array2[size - 1]) {
            flag = 1;
            break;
        }
        return flag;
    }
}
----------------------------------------

int isReverse (int a [], int b [], int n) {
    int i = 0;
    while (i < n) {
        if (a[i] != b[n - i - 1]) {
            return 0;
            break;
        }
        else
            i++;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13854673_13854776_1_17
13854673_13855176_1_10
Title: "Write the definition of a function isReverse" 
----------------------------------------

int isReverse (int array1 [], int array2 [], int size) {
    int i, status = 1;
    for (i = 0; i < size; i++) {
        if (array1[i] == array2[size]) {
            status = 0;
            --size;
        }
        else
            return 1;
    }
    return status;
}
----------------------------------------

int isReverse (int a [], int b [], int n) {
    int i = 0;
    while (i < n) {
        if (a[i] != b[n - i - 1]) {
            return 0;
            break;
        }
        else
            i++;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1391314_1391367_53_74
1391314_1391406_9_58
Title: Easy way to display a continuously updating image in C/Linux 
----------------------------------------

int main (int argc, char *argv []) {
    (void) argc, (void) argv;
    static uint8_t buffer [WIDTH * HEIGHT * 3];
    _Bool ok = init_app ("SDL example", NULL, SDL_INIT_VIDEO) && SDL_SetVideoMode (WIDTH, HEIGHT, 24, SDL_HWSURFACE);
    assert (ok);
    SDL_Surface *data_sf = SDL_CreateRGBSurfaceFrom (init_data (buffer), WIDTH, HEIGHT, 24, WIDTH *3, mask32 (0), mask32 (1), mask32 (2), 0);
    SDL_SetEventFilter (filter);
    for (; process (buffer); SDL_Delay (10))
        render (data_sf);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int x, y, t;
    SDL_Event event;
    SDL_Surface *scr;
    SDL_Init (SDL_INIT_VIDEO);
    scr = SDL_SetVideoMode (640, 480, 24, SDL_SWSURFACE);
    assert (scr);
    SDL_LockSurface (scr);
    for (y = 0; y < scr->h; y++)
        for (x = 0; x < scr->w; x++) {
            t = ((x * x + y * y) & 511) - 256;
            if (t < 0)
                t = -(t + 1);
            pel (scr, x, y, 0) = 255 - t;
            pel (scr, x, y, 1) = t;
            pel (scr, x, y, 2) = t;
        }
    SDL_UnlockSurface (scr);
    SDL_UpdateRect (scr, 0, 0, 0, 0);
    while (SDL_WaitEvent (&event)) {
        if (event.type == SDL_QUIT || event.type == SDL_KEYDOWN || event.type == SDL_KEYUP)
            break;
    }
    SDL_Quit ();
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13924215_22556848_10_18
13924215_44953363_11_21
Title: LCM And GCD in C using recursion or normal method 
----------------------------------------

int GCD (int x, int y) {
    if (x < y)
        GCD (y, x);
    if (x % y == 0)
        return y;
    else {
        GCD (y, x % y);
    }
}
----------------------------------------

int GCD (int a, int b) {
    while (a != b) {
        if (a > b) {
            a = a - b;
        }
        else {
            b = b - a;
        }
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13924537_13924549_5_17
13924537_13924594_4_18
Title: Convert characters in string to integers for multiplication 
----------------------------------------

int main (void) {
    char numbers [17];
    int i;
    printf ("Please enter number\n");
    scanf ("%s", numbers);
    for (i = 0; i < strlen (numbers); i++) {
        printf ("%c\n", atoi (numbers [i]) * 2);
    }
    return 0;
}
----------------------------------------

int main () {
    char numbers [17];
    int i, len;
    printf ("Please enter number\n");
    scanf ("%s", numbers);
    len = strlen (numbers);
    for (int i = 0; i < len; i++) {
        printf ("%d\n", (numbers [i] - '0') * 2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13957667_13958058_1_18
13957667_13966706_1_17
Title: How does one compute a time_t for the epoch in pure ISO C? 
----------------------------------------

time_t get_epoch (time_t t0) {
    struct tm gmt = *gmtime (&t0);
    struct tm tmp = *localtime (&t0);
    long long offset = posix_time (&gmt);
    while (offset > INT_MAX) {
        offset -= INT_MAX;
        tmp.tm_sec -= INT_MAX;
        mktime (& tmp);
    }
    while (offset < -INT_MAX + 61) {
        offset -= -INT_MAX + 61;
        tmp.tm_sec -= -INT_MAX + 61;
        mktime (& tmp);
    }
    tmp.tm_sec -= offset;
    return mktime (&tmp);
}
----------------------------------------

time_t get_epoch () {
    struct tm tm0 = {
        .tm_year = 70,
        .tm_mday = 1
    }, gmt;
    time_t t0;
    for (;;) {
        t0 = mktime (&tm0);
        gmt = *gmtime (&t0);
        if (!gmt.tm_sec && !gmt.tm_min && !gmt.tm_hour && !gmt.tm_yday && gmt.tm_year == 70)
            return t0;
        tm0.tm_sec -= gmt.tm_sec;
        tm0.tm_min -= gmt.tm_min;
        tm0.tm_hour -= gmt.tm_hour;
        tm0.tm_mday -= gmt.tm_mday - 1;
        tm0.tm_mon -= gmt.tm_mon;
        tm0.tm_year -= gmt.tm_year - 70;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13999881_13999933_5_15
13999881_13999982_1_11
Title: "In C are variables declared within a loop local?" 
----------------------------------------

void myproc () {
    int a = 2;
    while (a == 2) {
        int a = 3;
        printf ("a = %d\t", a);
        break;
    }
    printf ("a = %d\t", a);
}
----------------------------------------

void myproc () {
    int a = 2;
    while (a == 2) {
        int a = 3;
        printf ("a = %d\t", a);
        break;
    }
    printf ("a = %d\t", a);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14001907_14001919_5_21
14001907_14002310_4_21
Title: read data from file till end of line in C/C++ 
----------------------------------------

void main () {
    fp = fopen ("26.txt", "r");
    char buffer [128];
    int a [100];
    int i = 0;
    freopen ("26.txt", "r", stdin);
    while (scanf ("%i", &a[i]) == 1 && buffer[i] != EOF)
        ++i;
    for (int j = 0; j < i; ++j)
        printf ("[%i]: %i\n", j, a[j]);
    fclose (stdin);
}
----------------------------------------

int main (void) {
    char buffer [10000];
    char *pbuff;
    int value;
    while (1) {
        if (!fgets (buffer, sizeof buffer, stdin))
            break;
        printf ("Line contains");
        pbuff = buffer;
        while (1) {
            if (*pbuff == '\n')
                break;
            value = strtol (pbuff, &pbuff, 10);
            printf (" %d", value);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14004993_14005004_8_18
14004993_14005088_1_11
Title: "Thread can't count giving wrong result" 
----------------------------------------

void count () {
    int i = 0;
    for (i = 0; i < NITERS; i++) {
        sem_wait (& mysem);
        cnt++;
        sem_post (& mysem);
    }
    pthread_exit (0);
}
----------------------------------------

void count () {
    int i = 0;
    for (i = 0; i < NITERS; i++) {
        pthread_mutex_lock (& mux);
        cnt++;
        pthread_mutex_unlock (& mux);
    }
    pthread_exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14031819_14031844_15_32
14031819_14031859_2_22
Title: Matching with arrays results segmentation fault 
----------------------------------------

int main () {
    int node [4] = {5, 3, 2, 6};
    int neighbor [4] = {4, 8, 2, 9};
    int sub, i, flag = 0, k = 0;
    for (k = 0; k < 3; k++) {
        if (present (node[k], node[k + 1], neighbor)) {
            flag = 1;
            printf ("Element found");
            break;
        }
    }
    if (flag == 0)
        printf ("Element not found");
    return 0;
}
----------------------------------------

int main () {
    int node [4] = {5, 3, 2, 6};
    int neighbor [4] = {4, 3, 2, 9};
    int i = 0, j = 0, k = 0;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (node[i] == neighbor[j]) {
                for (k = 0; k < 4; k++) {
                    if (node[i + 1] == neighbor[k]) {
                        printf ("Element found: %d %d\n", node [i], node [i + 1]);
                        return 0;
                    }
                }
            }
        }
    }
    printf ("Element not found\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14037263_14037485_1_18
14037263_14037814_3_44
Title: How to compress a string and replace duplicates with its count using C? 
----------------------------------------

char *StrCompress (char myStr []) {
    char *s, *in;
    for (s = myStr, in = myStr; *s; s++) {
        int count = 1;
        in[0] = s[0];
        in++;
        while (s[0] == s[1]) {
            count++;
            s++;
        }
        if (count > 1) {
            int len = sprintf (in, "%d", count);
            in += len;
        }
    }
    in[0] = 0;
    return myStr;
}
----------------------------------------

char *StrCompress (char myStr []) {
    char *s = myStr;
    char *r, *p;
    int count, i;
    while (*s) {
        count = 1;
        while (*s == *(s + 1) && *s) {
            count++;
            s++;
        }
        if (count > 1) {
            *(s - count + 2) = count + '0';
            for (i = 0; i < count - 2; i++) {
                p = s + 1;
                r = s;
                while (*r)
                    *r++ = *p++;
                s--;
            }
        }
        s++;
    }
    return myStr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14045105_14045137_9_28
14045105_14087683_22_40
Title: Arduino IDE: Print once inside loop 
----------------------------------------

void loop () {
    int sensorValue = analogRead (A0);
    float voltage = sensorValue * (5.0 / 1023.0);
    if (!wasLit && voltage > 1.5) {
        wasLit = 1;
        Serial.print ("Light");
        Serial.println ();
        delay (5000);
    }
    else if (wasLit && voltage <= 1.5) {
        wasLit = 0;
        Serial.print ("No Light");
        Serial.println ();
        delay (50);
    }
}
----------------------------------------

void loop () {
    float v = getLight ();
    if (bLast) {
        if (v < (vTrip - vHyst)) {
            bLast = false;
            Serial.print ("Dark");
        }
    }
    else {
        if (v > (vTrip + vHyst)) {
            bLast = true;
            Serial.print ("Light");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14069737_20348147_2_13
14069737_25597551_4_16
Title: switch case: error: case label does not reduce to an integer constant 
----------------------------------------

int foo (int i, int b) {
    const int c = 0;
    int a = 0;
    switch (i) {
    case c :
    case a :
    case (b + a) :
    case SOME_HARDCODED_CONSTANT :
    case 5 :
    }
}
----------------------------------------

int foo (int i, int b) {
    const int c = 1;
    switch (i) {
    case SOME_HARDCODED_CONSTANT :
        printf ("case SOME_HARDCODED_CONSTANT\n");
        break;
    case c :
        printf ("case c\n");
        break;
    case 5 :
        printf ("case 5\n");
        break;
    }
    return i + b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1407461_1407472_4_20
1407461_1407640_3_15
Title: Putting user input into char array (C Programming) 
----------------------------------------

int main () {
    int c;
    int count;
    int arr [50];
    c = getchar ();
    count = 0;
    while (c != EOF && count < 50) {
        arr[count++] = c;
        c = getchar ();
    }
    return (EXIT_SUCCESS);
}
----------------------------------------

int main () {
    int c;
    int count;
    char arr [50];
    c = getchar ();
    count = 0;
    while ((count < 50) && (c != EOF)) {
        arr[count] = c;
        ++count;
        c = getchar ();
    }
    return (EXIT_SUCCESS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14084241_14085648_66_84
14084241_47292911_83_115
Title: C++ vector equivalent in C 
----------------------------------------

int main () {
    int i;
    darray myarray;
    const int *a;
    darray_create (& myarray);
    for (i = 0; i < 100; i++) {
        darray_append (& myarray, i);
    }
    a = darray_data (&myarray);
    for (i = 0; i < darray_size (&myarray); i++) {
        printf ("i=%d, value=%d\n", i, a [i]);
    }
    darray_destroy (& myarray);
}
----------------------------------------

int main (void) {
    struct vector v;
    int rc;
    init_vector (& v);
    rc = append (&v, 1);
    assert (rc == 0);
    rc = append (&v, 2);
    assert (rc == 0);
    rc = append (&v, 3);
    assert (rc == 0);
    rc = append (&v, 4);
    assert (rc == 0);
    rc = append (&v, 5);
    assert (rc == 0);
    print (& v);
    rc = delete (&v, 2);
    assert (rc == 0);
    print (& v);
    free (v.data);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14084916_14085198_5_17
14084916_14085201_4_26
Title: printing a paragraph using putchar() 
----------------------------------------

int main () {
    int c;
    char *buf = calloc (1, sizeof (char));
    int len;
    while ((c = getchar ()) != EOF) {
        len = strlen (buf);
        buf = realloc (buf, len +1);
        buf[len] = (char) c;
        buf[len + 1] = '\0';
    }
    printf ("%s", buf);
}
----------------------------------------

void main () {
    int buffer [SIZE] int ch;
    int i = 0;
    while ((ch = getchar ()) != EOF) {
        buffer[i] = ch;
        i++;
    }
    buffer[i] = EOF;
    i = 0;
    while ((ch = buffer[i]) != EOF) {
        putchar (ch);
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14152315_14153192_15_27
14152315_30501335_1_17
Title: string reverse program in C 
----------------------------------------

int main () {
    char *str;
    int length;
    str = (char *) malloc (50);
    printf ("Enter a string: ");
    scanf ("%s", str);
    length = str_len (str) - 1;
    for (int i = length; i >= 0; i--)
        printf ("%c", str[i]);
    return 0;
}
----------------------------------------

you can use this code to reverse the string int main () {
    int n, i;
    char str2 [100], str1 [100];
    printf ("enter teh string 1\n");
    gets (str1);
    n = strlen (str1);
    for (i = 0; i < n; i++) {
        str2[n - 1 - i] = str1[i];
    }
    printf ("%s\n", str2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14160392_14160889_6_29
14160392_14162037_6_23
Title: How do I transform an IF statement with 2 variables onto a switch function using C? 
----------------------------------------

int main () {
    char play1, play2;
    printf ("\nPlayer 1 - Enter your Play: ");
    scanf ("%c", & play1);
    printf ("\nPlayer 2 - Enter your play: ");
    scanf (" %c", & play2);
    switch (PAIR (play1, play2)) {
    case PAIR ('R', 'P') :
        printf ("Paper wins!\n");
        break;
    case PAIR ('R', 'S') :
        printf ("Rock wins!\n");
        break;
    case PAIR ('R', 'R') :
        printf ("Draw!\n");
        break;
    default :
        printf ("Default!\n");
        break;
    }
}
----------------------------------------

int main (void) {
    char play1, play2;
    printf ("\nPlayer 1 - Enter your Play:");
    scanf ("%c", & play1);
    getchar ();
    printf ("\nPlayer 2 - Enter your Play:");
    scanf ("%c", & play2);
    getchar ();
    SWITCH (play1, play2) {
        CASE ('R', 'P')
        printf ("Paper wins!");
        CASE ('R', 'S')
        printf ("Rock wins!");
        CASE ('R', 'R')
        printf ("Draw!");
    } return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14166350_32340524_1_20
14166350_49649964_5_15
Title: How to display a matrix in C 
----------------------------------------

void main () {
    int matrix [3] [4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};
    int row, column = 0;
    for (row = 0; row < 3; row++) {
        for (column = 0; column < 4; column++) {
            printf ("%d     ", matrix [row] [column]);
        }
        printf ("\n");
    }
    getchar ();
}
----------------------------------------

void main () {
    int matrix [3] [3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int columns, rows;
    for (columns = 0; columns <= 2; columns++) {
        for (rows = 0;
        rows <= 2;
        rows ++) {printf (" %d ", matrix [columns] [rows]);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14199294_19963118_8_29
14199294_38670852_5_14
Title: prime numbers in a given range 
----------------------------------------

int main () {
    unsigned long long int i, j, k, m, n;
    unsigned long long int * a = new unsigned long long int [max];
    scanf ("%ul %ul", & m, & n);
    for (i = 1; i <= n; i++)
        a[i] = i;
    a[1] = 0;
    for (i = 2; (i * i) <= n; i++)
        if (a[i] != 0)
            for (k = 2 * i; k <= n; k = k + i)
                if (a[k] != 0)
                    a[k] = 0;
    for (i = m; i <= n; i++)
        if (a[i] != 0)
            printf ("%ul ", a[i]);
    memset (a, 0, sizeof (a));
    return 0;
}
----------------------------------------

int main () {
    int x, end;
    printf ("Enter end of the range:\n");
    scanf ("%d", & end);
    for (x = 2; x <= end; x++) {
        prime (x);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14209929_14210289_1_14
14209929_30454105_19_36
Title: accessing structure elements through pointer 
----------------------------------------

int main () {
    struct point *pqq = NULL;
    ptt = malloc (sizeof (struct point));
    ptt->x = ptt->y = 0;
    pqq = ptt;
    pqq = pointer (100, 123);
    printf ("Pointer value is %d\n", pqq -> x);
    free (pqq);
    free (ptt);
    return 0;
}
----------------------------------------

int main () {
    ptt = (struct point *) malloc (sizeof (struct point));
    struct point *pqq = NULL;
    pqq = ptt;
    pqq = pointer (100, 123);
    printf ("Pointer value is %d\n", pqq -> x);
    free (ptt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_14280677_6_22
14280336_18179683_3_30
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    int x = 192;
    int n;
    n = x;
    int r;
    do {
        r = n % 2;
        if (r == 1)
            strcat (output, "1");
        else
            strcat (output, "0");
        n = n / 2;
    }
    while (n > 0);
    printf ("%s\n", output);
}
----------------------------------------

int main () {
    long long int a, c;
    int i = 0, count = 0;
    char bol [10000];
    scanf ("%lld", & a);
    c = a;
    while (a != 0) {
        bol[i] = a % 2;
        a = a / 2;
        count++;
        i++;
    }
    if (c == 0) {
        printf ("0");
    }
    else {
        for (i = count - 1; i >= 0; i--) {
            printf ("%d", bol [i]);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_14280677_6_22
14280336_32175628_4_36
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    int x = 192;
    int n;
    n = x;
    int r;
    do {
        r = n % 2;
        if (r == 1)
            strcat (output, "1");
        else
            strcat (output, "0");
        n = n / 2;
    }
    while (n > 0);
    printf ("%s\n", output);
}
----------------------------------------

int main () {
    long decimal, tempDecimal;
    char binary [65];
    int index = 0;
    printf ("Enter any decimal value : ");
    scanf ("%ld", & decimal);
    tempDecimal = decimal;
    while (tempDecimal != 0) {
        binary[index] = (tempDecimal % 2) + '0';
        tempDecimal /= 2;
        index++;
    }
    binary[index] = '\0';
    strrev (binary);
    printf ("\nDecimal value = %ld\n", decimal);
    printf ("Binary value of decimal = %s", binary);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_14280677_6_22
14280336_32245866_2_19
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    int x = 192;
    int n;
    n = x;
    int r;
    do {
        r = n % 2;
        if (r == 1)
            strcat (output, "1");
        else
            strcat (output, "0");
        n = n / 2;
    }
    while (n > 0);
    printf ("%s\n", output);
}
----------------------------------------

void main () {
    long int n, n1, m = 1, rem, ans = 0;
    printf ("\nEnter Your Decimal No (between 0 to 1023) :: ");
    scanf ("%ld", & n);
    n1 = n;
    while (n > 0) {
        rem = n % 2;
        ans = (rem * m) + ans;
        n = n / 2;
        m = m * 10;
    }
    printf ("\nYour Decimal No is   :: %ld", n1);
    printf ("\nConvert into Binary No is :: %ld", ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_14280677_6_22
14280336_39887329_20_40
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    int x = 192;
    int n;
    n = x;
    int r;
    do {
        r = n % 2;
        if (r == 1)
            strcat (output, "1");
        else
            strcat (output, "0");
        n = n / 2;
    }
    while (n > 0);
    printf ("%s\n", output);
}
----------------------------------------

void main () {
    int num, total = 0, item;
    print f ("Please enter a decimal: ");
    scanf ("%d", & num);
    while (num > 0) {
        total = num % 2;
        push (total);
        num /= 2;
    }
    for (i = top; top > -1; top--) {
        item = pop ();
        print f ("%d", item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_14280677_6_22
14280336_40183193_1_14
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    int x = 192;
    int n;
    n = x;
    int r;
    do {
        r = n % 2;
        if (r == 1)
            strcat (output, "1");
        else
            strcat (output, "0");
        n = n / 2;
    }
    while (n > 0);
    printf ("%s\n", output);
}
----------------------------------------

int main () {
    int n, c, k;
    printf ("Enter an integer in decimal number system: ");
    scanf ("%d", & n);
    printf ("%d in binary number system is: ", n);
    for (c = n; c > 0; c = c / 2) {
        k = c % 2;
        k = (k > 0) ? printf ("1") : printf ("0");
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_18179683_3_30
14280336_32175628_4_36
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    long long int a, c;
    int i = 0, count = 0;
    char bol [10000];
    scanf ("%lld", & a);
    c = a;
    while (a != 0) {
        bol[i] = a % 2;
        a = a / 2;
        count++;
        i++;
    }
    if (c == 0) {
        printf ("0");
    }
    else {
        for (i = count - 1; i >= 0; i--) {
            printf ("%d", bol [i]);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    long decimal, tempDecimal;
    char binary [65];
    int index = 0;
    printf ("Enter any decimal value : ");
    scanf ("%ld", & decimal);
    tempDecimal = decimal;
    while (tempDecimal != 0) {
        binary[index] = (tempDecimal % 2) + '0';
        tempDecimal /= 2;
        index++;
    }
    binary[index] = '\0';
    strrev (binary);
    printf ("\nDecimal value = %ld\n", decimal);
    printf ("Binary value of decimal = %s", binary);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_18179683_3_30
14280336_32245866_2_19
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    long long int a, c;
    int i = 0, count = 0;
    char bol [10000];
    scanf ("%lld", & a);
    c = a;
    while (a != 0) {
        bol[i] = a % 2;
        a = a / 2;
        count++;
        i++;
    }
    if (c == 0) {
        printf ("0");
    }
    else {
        for (i = count - 1; i >= 0; i--) {
            printf ("%d", bol [i]);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

void main () {
    long int n, n1, m = 1, rem, ans = 0;
    printf ("\nEnter Your Decimal No (between 0 to 1023) :: ");
    scanf ("%ld", & n);
    n1 = n;
    while (n > 0) {
        rem = n % 2;
        ans = (rem * m) + ans;
        n = n / 2;
        m = m * 10;
    }
    printf ("\nYour Decimal No is   :: %ld", n1);
    printf ("\nConvert into Binary No is :: %ld", ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_18179683_3_30
14280336_39887329_20_40
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    long long int a, c;
    int i = 0, count = 0;
    char bol [10000];
    scanf ("%lld", & a);
    c = a;
    while (a != 0) {
        bol[i] = a % 2;
        a = a / 2;
        count++;
        i++;
    }
    if (c == 0) {
        printf ("0");
    }
    else {
        for (i = count - 1; i >= 0; i--) {
            printf ("%d", bol [i]);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

void main () {
    int num, total = 0, item;
    print f ("Please enter a decimal: ");
    scanf ("%d", & num);
    while (num > 0) {
        total = num % 2;
        push (total);
        num /= 2;
    }
    for (i = top; top > -1; top--) {
        item = pop ();
        print f ("%d", item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_18179683_3_30
14280336_40183193_1_14
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    long long int a, c;
    int i = 0, count = 0;
    char bol [10000];
    scanf ("%lld", & a);
    c = a;
    while (a != 0) {
        bol[i] = a % 2;
        a = a / 2;
        count++;
        i++;
    }
    if (c == 0) {
        printf ("0");
    }
    else {
        for (i = count - 1; i >= 0; i--) {
            printf ("%d", bol [i]);
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    int n, c, k;
    printf ("Enter an integer in decimal number system: ");
    scanf ("%d", & n);
    printf ("%d in binary number system is: ", n);
    for (c = n; c > 0; c = c / 2) {
        k = c % 2;
        k = (k > 0) ? printf ("1") : printf ("0");
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_32175628_4_36
14280336_32245866_2_19
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    long decimal, tempDecimal;
    char binary [65];
    int index = 0;
    printf ("Enter any decimal value : ");
    scanf ("%ld", & decimal);
    tempDecimal = decimal;
    while (tempDecimal != 0) {
        binary[index] = (tempDecimal % 2) + '0';
        tempDecimal /= 2;
        index++;
    }
    binary[index] = '\0';
    strrev (binary);
    printf ("\nDecimal value = %ld\n", decimal);
    printf ("Binary value of decimal = %s", binary);
    return 0;
}
----------------------------------------

void main () {
    long int n, n1, m = 1, rem, ans = 0;
    printf ("\nEnter Your Decimal No (between 0 to 1023) :: ");
    scanf ("%ld", & n);
    n1 = n;
    while (n > 0) {
        rem = n % 2;
        ans = (rem * m) + ans;
        n = n / 2;
        m = m * 10;
    }
    printf ("\nYour Decimal No is   :: %ld", n1);
    printf ("\nConvert into Binary No is :: %ld", ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_32175628_4_36
14280336_39887329_20_40
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    long decimal, tempDecimal;
    char binary [65];
    int index = 0;
    printf ("Enter any decimal value : ");
    scanf ("%ld", & decimal);
    tempDecimal = decimal;
    while (tempDecimal != 0) {
        binary[index] = (tempDecimal % 2) + '0';
        tempDecimal /= 2;
        index++;
    }
    binary[index] = '\0';
    strrev (binary);
    printf ("\nDecimal value = %ld\n", decimal);
    printf ("Binary value of decimal = %s", binary);
    return 0;
}
----------------------------------------

void main () {
    int num, total = 0, item;
    print f ("Please enter a decimal: ");
    scanf ("%d", & num);
    while (num > 0) {
        total = num % 2;
        push (total);
        num /= 2;
    }
    for (i = top; top > -1; top--) {
        item = pop ();
        print f ("%d", item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_32175628_4_36
14280336_40183193_1_14
Title: Convert decimal to binary in C 
----------------------------------------

int main () {
    long decimal, tempDecimal;
    char binary [65];
    int index = 0;
    printf ("Enter any decimal value : ");
    scanf ("%ld", & decimal);
    tempDecimal = decimal;
    while (tempDecimal != 0) {
        binary[index] = (tempDecimal % 2) + '0';
        tempDecimal /= 2;
        index++;
    }
    binary[index] = '\0';
    strrev (binary);
    printf ("\nDecimal value = %ld\n", decimal);
    printf ("Binary value of decimal = %s", binary);
    return 0;
}
----------------------------------------

int main () {
    int n, c, k;
    printf ("Enter an integer in decimal number system: ");
    scanf ("%d", & n);
    printf ("%d in binary number system is: ", n);
    for (c = n; c > 0; c = c / 2) {
        k = c % 2;
        k = (k > 0) ? printf ("1") : printf ("0");
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_32245866_2_19
14280336_39887329_20_40
Title: Convert decimal to binary in C 
----------------------------------------

void main () {
    long int n, n1, m = 1, rem, ans = 0;
    printf ("\nEnter Your Decimal No (between 0 to 1023) :: ");
    scanf ("%ld", & n);
    n1 = n;
    while (n > 0) {
        rem = n % 2;
        ans = (rem * m) + ans;
        n = n / 2;
        m = m * 10;
    }
    printf ("\nYour Decimal No is   :: %ld", n1);
    printf ("\nConvert into Binary No is :: %ld", ans);
}
----------------------------------------

void main () {
    int num, total = 0, item;
    print f ("Please enter a decimal: ");
    scanf ("%d", & num);
    while (num > 0) {
        total = num % 2;
        push (total);
        num /= 2;
    }
    for (i = top; top > -1; top--) {
        item = pop ();
        print f ("%d", item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_32245866_2_19
14280336_40183193_1_14
Title: Convert decimal to binary in C 
----------------------------------------

void main () {
    long int n, n1, m = 1, rem, ans = 0;
    printf ("\nEnter Your Decimal No (between 0 to 1023) :: ");
    scanf ("%ld", & n);
    n1 = n;
    while (n > 0) {
        rem = n % 2;
        ans = (rem * m) + ans;
        n = n / 2;
        m = m * 10;
    }
    printf ("\nYour Decimal No is   :: %ld", n1);
    printf ("\nConvert into Binary No is :: %ld", ans);
}
----------------------------------------

int main () {
    int n, c, k;
    printf ("Enter an integer in decimal number system: ");
    scanf ("%d", & n);
    printf ("%d in binary number system is: ", n);
    for (c = n; c > 0; c = c / 2) {
        k = c % 2;
        k = (k > 0) ? printf ("1") : printf ("0");
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14280336_39887329_20_40
14280336_40183193_1_14
Title: Convert decimal to binary in C 
----------------------------------------

void main () {
    int num, total = 0, item;
    print f ("Please enter a decimal: ");
    scanf ("%d", & num);
    while (num > 0) {
        total = num % 2;
        push (total);
        num /= 2;
    }
    for (i = top; top > -1; top--) {
        item = pop ();
        print f ("%d", item);
    }
}
----------------------------------------

int main () {
    int n, c, k;
    printf ("Enter an integer in decimal number system: ");
    scanf ("%d", & n);
    printf ("%d in binary number system is: ", n);
    for (c = n; c > 0; c = c / 2) {
        k = c % 2;
        k = (k > 0) ? printf ("1") : printf ("0");
    }
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14297169_28213412_16_28
14297169_47072854_21_34
Title: How to make an array return type from C function? 
----------------------------------------

int main () {
    int *arrptr;
    arrptr = function_Random ();
    cout << "We are Inside Main" << endl;
    for (int j = 0; j < 100; j++) {
        cout << "\t" << arrptr[j];
    }
    return 0;
}
----------------------------------------

int main () {
    int *p;
    int i;
    p = getRandom ();
    for (i = 0; i < 10; i++) {
        printf ("*(p + %d) : %d\n", i, * (p + i));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14324182_14324212_21_34
14324182_14324226_39_52
Title: Passing two different structs into same function 
----------------------------------------

function print_struct (people *p, int id) {
    switch (id) {
    case 1 :
        break;
    case 2 :
        break;
    default :
        break;
    }
}
----------------------------------------

void print_struct (person p) {
    switch (p.type) {
    case PERSON1 :
        p.person.p1;
        break;
    case PERSON2 :
        p.person.p2;
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14324182_14324212_21_34
14324182_14324251_15_26
Title: Passing two different structs into same function 
----------------------------------------

function print_struct (people *p, int id) {
    switch (id) {
    case 1 :
        break;
    case 2 :
        break;
    default :
        break;
    }
}
----------------------------------------

void print_struct (void *ptr, int structKind) {
    switch (structKind) {
    case 1 :
        struct person1 *p1 = (struct person1_t *) ptr;
        break;
    case 2 :
        struct person2 *p2 = (struct person2_t *) ptr;
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14324182_14324226_39_52
14324182_14324251_15_26
Title: Passing two different structs into same function 
----------------------------------------

void print_struct (person p) {
    switch (p.type) {
    case PERSON1 :
        p.person.p1;
        break;
    case PERSON2 :
        p.person.p2;
        break;
    }
}
----------------------------------------

void print_struct (void *ptr, int structKind) {
    switch (structKind) {
    case 1 :
        struct person1 *p1 = (struct person1_t *) ptr;
        break;
    case 2 :
        struct person2 *p2 = (struct person2_t *) ptr;
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14344625_14344963_1_20
14344625_14345100_1_23
Title: show character ASCII code and number of appearance 
----------------------------------------

int main () {
    char buf [] = "abcaabde";
    char val [256] = {0};
    int i = 0;
    for (i = 0; i < sizeof (buf); i++) {
        val[buf[i]]++;
    }
    for (i = 0; i < 256; i++) {
        if (val[i] != 0) {
            printf ("%c occured %d times\n", i, val [i]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int temp = 0, i;
    int occ [256] = {0};
    FILE *pFile = fopen ("test.txt", "r");
    if (pFile == NULL)
        perror ("Error opening file");
    else {
        while (!feof (pFile)) {
            temp = getc (pFile);
            if ((temp < 255) && (temp >= 0))
                occ[temp]++;
        }
    }
    for (i = 0; i < sizeof (occ) / sizeof (int); i++) {
        if (occ[i] > 0)
            printf (" Char %c (ASCII %#x) was seen %d times\n", i, i, occ[i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14352367_14352542_5_32
14352367_14352544_3_23
Title: Addition with arrays in C 
----------------------------------------

int main (void) {
    int i = 0;
    int j = 0;
    int k = 0;
    int redSize = 6;
    int blueSize = 9;
    int greenSize = 9;
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    for (i = 0; i < redSize; i++) {
        for (j = 0; j < blueSize; j++) {
            for (k = 0; k < greenSize; k++) {
                int result = red[i] + blue[j] + green[k];
                if (result == 91 && red[i] < blue[j] && blue[j] < green[k]) {
                    printf ("The red value is %d, the blue value is %d, and the green value is %d\n", red [i], blue [j], green [k]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int r, g, b;
    for (r = 0; r < (sizeof (red) / sizeof (int)); ++r) {
        for (g = 0; g < (sizeof (green) / sizeof (int)); ++g) {
            for (b = 0; b < (sizeof (green) / sizeof (int)); ++b) {
                int s = red[r] + green[g] + blue[b];
                if (s == 91 && red[r] < blue[b] && blue[r] < green[g]) {
                    printf ("%d %d %d", red [r], blue [b], green [g]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14352367_14352542_5_32
14352367_14352547_3_24
Title: Addition with arrays in C 
----------------------------------------

int main (void) {
    int i = 0;
    int j = 0;
    int k = 0;
    int redSize = 6;
    int blueSize = 9;
    int greenSize = 9;
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    for (i = 0; i < redSize; i++) {
        for (j = 0; j < blueSize; j++) {
            for (k = 0; k < greenSize; k++) {
                int result = red[i] + blue[j] + green[k];
                if (result == 91 && red[i] < blue[j] && blue[j] < green[k]) {
                    printf ("The red value is %d, the blue value is %d, and the green value is %d\n", red [i], blue [j], green [k]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int i, j, k;
    for (i = 0; i < sizeof (red) / sizeof (red[0]); ++i) {
        for (j = 0; j < sizeof (blue) / sizeof (blue[0]); ++j) {
            if (red[i] < blue[j])
                for (k = 0; k < sizeof (green) / sizeof (green[0]); ++k) {
                    if (blue[j] < green[k] && red[i] + blue[j] + green[k] == 91)
                        printf ("red:%d blue:%d green:%d\n", red[i], blue[j], green[k]);
                }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14352367_14352542_5_32
14352367_14352611_3_24
Title: Addition with arrays in C 
----------------------------------------

int main (void) {
    int i = 0;
    int j = 0;
    int k = 0;
    int redSize = 6;
    int blueSize = 9;
    int greenSize = 9;
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    for (i = 0; i < redSize; i++) {
        for (j = 0; j < blueSize; j++) {
            for (k = 0; k < greenSize; k++) {
                int result = red[i] + blue[j] + green[k];
                if (result == 91 && red[i] < blue[j] && blue[j] < green[k]) {
                    printf ("The red value is %d, the blue value is %d, and the green value is %d\n", red [i], blue [j], green [k]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int i = 0, j = 0, k = 0;
    while (i < redSize) {
        while (j < blueSize) {
            kValue = 91 - red[i] - blue[j];
            while (k < greenSize) {
                if (green[k] == kValue && red[i] < blue[j] && blue[j] < green[k]) {
                    printf ("The red value is %d, the blue value is %d, and the green value is %d", red [i], blue [j], green [k]);
                }
                k++;
            }
            j++;
        }
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14352367_14352544_3_23
14352367_14352547_3_24
Title: Addition with arrays in C 
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int r, g, b;
    for (r = 0; r < (sizeof (red) / sizeof (int)); ++r) {
        for (g = 0; g < (sizeof (green) / sizeof (int)); ++g) {
            for (b = 0; b < (sizeof (green) / sizeof (int)); ++b) {
                int s = red[r] + green[g] + blue[b];
                if (s == 91 && red[r] < blue[b] && blue[r] < green[g]) {
                    printf ("%d %d %d", red [r], blue [b], green [g]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int i, j, k;
    for (i = 0; i < sizeof (red) / sizeof (red[0]); ++i) {
        for (j = 0; j < sizeof (blue) / sizeof (blue[0]); ++j) {
            if (red[i] < blue[j])
                for (k = 0; k < sizeof (green) / sizeof (green[0]); ++k) {
                    if (blue[j] < green[k] && red[i] + blue[j] + green[k] == 91)
                        printf ("red:%d blue:%d green:%d\n", red[i], blue[j], green[k]);
                }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14352367_14352544_3_23
14352367_14352611_3_24
Title: Addition with arrays in C 
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int r, g, b;
    for (r = 0; r < (sizeof (red) / sizeof (int)); ++r) {
        for (g = 0; g < (sizeof (green) / sizeof (int)); ++g) {
            for (b = 0; b < (sizeof (green) / sizeof (int)); ++b) {
                int s = red[r] + green[g] + blue[b];
                if (s == 91 && red[r] < blue[b] && blue[r] < green[g]) {
                    printf ("%d %d %d", red [r], blue [b], green [g]);
                }
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int i = 0, j = 0, k = 0;
    while (i < redSize) {
        while (j < blueSize) {
            kValue = 91 - red[i] - blue[j];
            while (k < greenSize) {
                if (green[k] == kValue && red[i] < blue[j] && blue[j] < green[k]) {
                    printf ("The red value is %d, the blue value is %d, and the green value is %d", red [i], blue [j], green [k]);
                }
                k++;
            }
            j++;
        }
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14352367_14352547_3_24
14352367_14352611_3_24
Title: Addition with arrays in C 
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int i, j, k;
    for (i = 0; i < sizeof (red) / sizeof (red[0]); ++i) {
        for (j = 0; j < sizeof (blue) / sizeof (blue[0]); ++j) {
            if (red[i] < blue[j])
                for (k = 0; k < sizeof (green) / sizeof (green[0]); ++k) {
                    if (blue[j] < green[k] && red[i] + blue[j] + green[k] == 91)
                        printf ("red:%d blue:%d green:%d\n", red[i], blue[j], green[k]);
                }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int red [] = {9, 22, 21, 18, 34, 13};
    int blue [] = {20, 60, 14, 17, 39, 16, 6, 33, 18};
    int green [] = {40, 7, 51, 26, 8, 24, 12, 11, 27};
    int i = 0, j = 0, k = 0;
    while (i < redSize) {
        while (j < blueSize) {
            kValue = 91 - red[i] - blue[j];
            while (k < greenSize) {
                if (green[k] == kValue && red[i] < blue[j] && blue[j] < green[k]) {
                    printf ("The red value is %d, the blue value is %d, and the green value is %d", red [i], blue [j], green [k]);
                }
                k++;
            }
            j++;
        }
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14364627_14367406_42_98
14364627_14376061_22_82
Title: Changing image on mouse click 
----------------------------------------

int main (int argc, char **argv) {
    GtkWidget *window, *layout;
    int i = 0, x, y;
    gtk_init (& argc, & argv);
    led_on = gdk_pixbuf_new_from_file ("led-on.png", NULL);
    led_off = gdk_pixbuf_new_from_file ("led-off.png", NULL);
    for (x = 0; x < 50; x++) {
        for (y = 0; y < 50; y++) {
            leds[i].img = gtk_image_new ();
            leds[i].pos.x = x * ICON_WIDTH;
            leds[i].pos.y = y * ICON_HEIGHT;
            leds[i].status = OFF;
            gtk_image_set_from_pixbuf (GTK_IMAGE (leds [i].img), led_off);
            i++;
        }
    }
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title (GTK_WINDOW (window), "LEDs");
    gtk_signal_connect (GTK_OBJECT (window), "destroy", G_CALLBACK (gtk_main_quit), NULL);
    layout = gtk_layout_new (NULL, NULL);
    for (i = 0; i < NUM_LEDS; i++) {
        GtkWidget *eb = gtk_event_box_new ();
        g_signal_connect (G_OBJECT (eb), "button_press_event", G_CALLBACK (click_handler), & leds [i]);
        gtk_container_add (GTK_CONTAINER (eb), leds [i].img);
        gtk_layout_put (GTK_LAYOUT (layout), eb, leds [i].pos.x, leds [i].pos.y);
    }
    gtk_container_add (GTK_CONTAINER (window), layout);
    gtk_widget_show_all (window);
    gtk_main ();
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    GtkWidget *window, *table;
    gboolean leds [NUM_LEDS];
    int i = 0;
    gtk_init (& argc, & argv);
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title (GTK_WINDOW (window), "LEDs");
    gtk_signal_connect (GTK_OBJECT (window), "destroy", G_CALLBACK (gtk_main_quit), NULL);
    led_on = gdk_pixbuf_new_from_file ("on.png", NULL);
    led_off = gdk_pixbuf_new_from_file ("off.png", NULL);
    int n_rows = (NUM_LEDS / MAX_LEDS_PER_LINE) + 1;
    int n_cols = (NUM_LEDS / MAX_LEDS_PER_LINE) + 1;
    table = gtk_table_new (n_rows, n_cols, FALSE);
    for (i = 0; i < NUM_LEDS; i++) {
        leds[i] = FALSE;
        GtkWidget *image = gtk_image_new ();
        gtk_image_set_from_pixbuf (GTK_IMAGE (image), led_off);
        GtkWidget *eb = gtk_event_box_new ();
        g_signal_connect (G_OBJECT (eb), "button-press-event", G_CALLBACK (click_handler), & leds [i]);
        gtk_container_add (GTK_CONTAINER (eb), image);
        int row = i / MAX_LEDS_PER_LINE;
        int col = i % MAX_LEDS_PER_LINE;
        gtk_table_attach (GTK_TABLE (table), eb, row, row + 1, col, col + 1, 0, 0, 0, 0);
    }
    gtk_container_add (GTK_CONTAINER (window), table);
    gtk_widget_show_all (window);
    gtk_main ();
    return 0;
}
----------------------------------------

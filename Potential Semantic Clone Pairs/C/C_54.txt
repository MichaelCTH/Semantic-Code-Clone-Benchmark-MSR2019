$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49183894_49184203_1_37
49183894_49188818_1_17
Title: Scanf is being skipped after the first iteration of the for loop 
----------------------------------------

int enterStudents () {
    printf ("How many students do you want to enter? \n");
    if (scanf ("%d", &n) != 1) {
        fprintf (stderr, "Could not read from the user\n");
        return -1;
    }
    if (n <= 0) {
        fprintf (stderr, "invalid number of students\n");
        return -1;
    }
    struct student list [n];
    for (int i = 0; i < n; i++) {
        printf ("Enter student number %d's age: ", i + 1);
        if (scanf ("%d", &list[i].age) != 1) {
            fprintf (stderr, "could not read age from the user\n");
            return -1;
        }
        printf ("Enter student number %d's name: ", i + 1);
        if (scanf ("%19s", list[i].name) != 1) {
            fprintf (stderr, "could not read name from the user\n");
            return -1;
        }
        clean_stdin ();
    }
    ...return n;
}
----------------------------------------

void enterStudents () {
    printf ("How many students do you want to enter? \n");
    scanf ("%d", & n);
    struct student list [n];
    for (int i = 0; i < n; i++) {
        printf ("Enter student number %d's age: ", i + 1);
        scanf ("%d", & list [i].age);
        fflush (stdin);
        printf ("Enter student number %d's name: ", i + 1);
        scanf (" %s", list [i].name);
    }
    listSort (list);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49185287_49185482_2_37
49185287_49185525_2_36
Title: i don't know what is the error in my program the loop won't stop please check it 
----------------------------------------

int main () {
    int n, max, min, i, j;
    max = 0;
    min = 0;
    printf ("please enter the number of numbers you wish to evaluate \n");
    scanf ("%d", & n);
    printf ("please enter %d numbers \n", n);
    for (i = 0; i < n; i++) {
        scanf ("%d", & j);
        if (j[i] > max)
            max = j[i];
        if (j[i] < min)
            min = j[i];
    }
    printf ("the max number is %d", & max);
    for (i = max; i >= 1; i--) {
        printf ("&d", i);
        printf (" ");
    }
    printf ("the min number is %d", & min);
    for (i = min; i >= 1; i--) {
        printf ("\n &d", i);
        printf (" ");
    }
    return 0;
}
----------------------------------------

int main () {
    int n, max, min, i, j, k, l, m;
    printf ("please enter the number of numbers you wish to evaluate \n");
    scanf ("%d", & n);
    printf ("please enter %d numbers \n", n);
    max = 0;
    min = 0;
    for (i = 1; i <= n; i++) {
        scanf ("%d", & j);
        if (j > max)
            max = j;
        if (j < k)
            min = j;
        k = min;
    }
    printf ("the max number is %d \n", max);
    for (l = max; l >= 1; l--) {
        printf ("%d \n", l);
        printf (" ");
    }
    printf ("the min number is %d \n", min);
    for (m = min; m >= 1; m--) {
        printf ("\n %d", m);
        printf (" ");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49186506_49186949_13_42
49186506_49229479_23_37
Title: Using Pointers in to call array elements from a function in C 
----------------------------------------

int main (void) {
    int i, x;
    printf ("Enter the length of the array: ");
    if (scanf ("%d", &x) != 1) {
        fprintf (stderr, "error: invalid input.\n");
        return 1;
    }
    int a [x], b [x], *p = b;
    printf ("Enter the elements\n");
    for (i = 0; i < x; i++) {
        printf ("  a[%2d]: ", i);
        if (scanf ("%d", &a[i]) != 1) {
            fprintf (stderr, "error: invalid input.\n");
            return 1;
        }
        b[i] = a[i];
    }
    roll (a, x, b);
    printf ("The output array is:");
    while (x--)
        printf (" %2d", *p++);
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    int i, x;
    printf ("Enter the length of the array:\n");
    scanf ("%d", & x);
    int a [x];
    int b [x];
    printf ("Enter the elements of the array:\n");
    for (i = 0;
    i < x;
    i ++) {scanf ("%d", & a [i]);
    b[i] = a[i];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49205783_49205936_3_18
49205783_49206124_2_37
Title: Cannot convert an int number into array (in C) to output next 10 octal numbers 
----------------------------------------

int main () {
    int res = 0;
    printf ("Enter octal number");
    scanf ("%4o", & res);
    int i;
    printf ("%4o\n", res);
    char nextNum [10];
    for (i = 0; i < 10; ++i) {
        sprintf (nextNum, "%4o", ++ res);
        printf ("%s\n", nextNum);
    }
    return 0;
}
----------------------------------------

int main () {
    int octNum [4];
    int num;
    printf ("Enter the digits of 4-digit octal number to print next 10 octal    numbers:\n");
    scanf ("%i", & num);
    int i = 3;
    do {
        octNum[i] = num % 10;
        num /= 10;
        i--;
    }
    while (num != 0);
    printf ("\nThe number is %i%i%i%i\n", octNum [0], octNum [1], octNum [2], octNum [3]);
    for (int x = 0; x < 10; x++) {
        octNum[3]++;
        for (int j = 3; j > 0; j--) {
            if (octNum[j] == 8) {
                octNum[j - 1]++;
                octNum[j] = 0;
            }
            else
                break;
        }
        for (i = 0; i <= 3; ++i)
            printf ("%d\t", octNum[i]);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49212994_49213495_32_49
49212994_49224395_35_51
Title: C program to find bell's numbers using factorial calculation 
----------------------------------------

int main (int argc, char **argv) {
    int restart = 1, userNum;
    while (restart) {
        printf ("Enter a positive number :");
        scanf ("%d", & userNum);
        printf ("The %ith number is : %llu\n", userNum, bell (userNum - 1));
        printf ("Restart program? (1 = yes : 0 = no) ");
        scanf ("%d", & restart);
    }
    return 0;
}
----------------------------------------

int main () {
    int restart = 1, userNum;
    while (restart) {
        printf ("Enter the value of n:");
        scanf ("%d", & userNum);
        for (int i = 1; i <= userNum; i++)
            printf ("Bell Number [%d] = %lli\n", i, bell (i - 1));
        printf ("Restart program? (1 = yes : 0 = no) ");
        scanf ("%d", & restart);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49233929_49234175_17_40
49233929_49235365_1_15
Title: Call and Return function using pointers locally in c 
----------------------------------------

int main () {
    int n1 = 0;
    int n2 = 0;
    int *r = &n1;
    int *b = &n2;
    int g, s;
    while (1) {
        printf ("Please choose the Arithmetic operation: \n");
        printf ("Addition-> 1 \nSubtraction-> 2 \nDevision-> 3 \nMultiplication-> 4 \nExit-> 0\n ");
        scanf ("%d", & g);
        if (g == 1) {
            s = Addition (r, b);
            printf ("The addition result is %d+%d=%d", * r, * b, s);
        }
        return 0;
    }
}
----------------------------------------

int main (void) {
    double a = 4.5;
    double b = 10.8;
    double result_1, result_2, result_3, result_4;
    result_1 = add (a, b);
    result_2 = sub (a, b);
    result_3 = mul (a, b);
    result_4 = div (a, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
492384_32951430_45_66
492384_42734883_28_58
Title: How to find the 'sizeof' (a pointer pointing to an array)? 
----------------------------------------

int main () {
    int i;
    Array *negativeTest, *days = NewArray (5);
    double moreDays [] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    for (i = 0; i < days->length; i++)
        days->array[i] = i + 1;
    PrintArray (days);
    SetArray (days, 10, moreDays);
    PrintArray (days);
    negativeTest = NewArray (-5);
    PrintArray (negativeTest);
    return 0;
}
----------------------------------------

int main (void) {
    array_t initialize (int,...);
    array_t array = initialize (4, "foo", "bar", "baz", "foobar");
    int size (array_t);
    printf ("size %i:\n", size (array));
    void aprint (char *, array_t);
    aprint ("%s\n", array);
    type_t getval (array_t, int);
    int i = 2;
    type_t val = getval (array, i);
    printf ("%i: %s\n", i, val);
    void delete (array_t);
    delete (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
492384_32951430_45_66
492384_5655614_7_17
Title: How to find the 'sizeof' (a pointer pointing to an array)? 
----------------------------------------

int main () {
    int i;
    Array *negativeTest, *days = NewArray (5);
    double moreDays [] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    for (i = 0; i < days->length; i++)
        days->array[i] = i + 1;
    PrintArray (days);
    SetArray (days, 10, moreDays);
    PrintArray (days);
    negativeTest = NewArray (-5);
    PrintArray (negativeTest);
    return 0;
}
----------------------------------------

int main () {
    days_t days;
    days_t *ptr = &days;
    printf ("SIZEOF_DAYS:  %u\n", SIZEOF_DAYS);
    printf ("sizeof(days): %u\n", sizeof (days));
    printf ("sizeof(*ptr): %u\n", sizeof (* ptr));
    printf ("sizeof(ptr):  %u\n", sizeof (ptr));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
492384_42734883_28_58
492384_5655614_7_17
Title: How to find the 'sizeof' (a pointer pointing to an array)? 
----------------------------------------

int main (void) {
    array_t initialize (int,...);
    array_t array = initialize (4, "foo", "bar", "baz", "foobar");
    int size (array_t);
    printf ("size %i:\n", size (array));
    void aprint (char *, array_t);
    aprint ("%s\n", array);
    type_t getval (array_t, int);
    int i = 2;
    type_t val = getval (array, i);
    printf ("%i: %s\n", i, val);
    void delete (array_t);
    delete (array);
    return 0;
}
----------------------------------------

int main () {
    days_t days;
    days_t *ptr = &days;
    printf ("SIZEOF_DAYS:  %u\n", SIZEOF_DAYS);
    printf ("sizeof(days): %u\n", sizeof (days));
    printf ("sizeof(*ptr): %u\n", sizeof (* ptr));
    printf ("sizeof(ptr):  %u\n", sizeof (ptr));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49242346_49242682_10_34
49242346_49242936_17_36
Title: pthread_detach doesn't change anything 
----------------------------------------

int main () {
    pthread_t tid;
    pthread_create (& tid, NULL, myFunction, NULL);
    int isDetached = -10;
    isDetached = pthread_detach (tid);
    printf ("Is my thread detached: %d\n", isDetached);
    pthread_join (tid, NULL);
    int i;
    for (i = 0; i < 15; i++)
        printf ("%d\n", i);
    pthread_create (& tid, NULL, myFunction, NULL);
    pthread_join (tid, NULL);
    for (i = 0; i < 15; i++)
        printf ("%d\n", i);
    return 0;
}
----------------------------------------

int main () {
    pthread_t tid;
    pthread_create (& tid, NULL, myFunction1, NULL);
    int isDetached = -10;
    isDetached = pthread_detach (tid);
    printf ("Is my thread detached: %d\n", isDetached);
    int i;
    pthread_create (& tid, NULL, myFunction2, NULL);
    pthread_join (tid, NULL);
    for (i = 0; i < 15; i++)
        printf ("%d\n", i);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49260938_49266495_5_36
49260938_49266596_3_22
Title: "String is longer than expected and is treated as multiple inputs" 
----------------------------------------

int main (void) {
    char buffer [1024] = "";
    for (;;) {
        printf ("\nprogram processing....\n\n");
        for (;;) {
            int rtn;
            printf ("Do you want to continue (yes/no): ");
            rtn = scanf ("%1023[^\n]", buffer);
            if (rtn == EOF) {
                fprintf (stderr, "user canceled input.\n");
                exit (EXIT_FAILURE);
            }
            else if (rtn == 1) {
                if (strcmp (buffer, "yes") == 0) {
                    empty_stdin ();
                    break;
                }
                else if (strcmp (buffer, "no") == 0)
                    goto alldone;
            }
            empty_stdin ();
            fprintf (stderr, "error: invalid input.\n\n");
        }
    }
alldone :
    ;
    printf ("that's all folks...\n");
}
----------------------------------------

int main (void) {
    char userInput [4];
    userInput[0] = '\0';
    int c;
    while ((strcmp (userInput, "yes") != 0) && (strcmp (userInput, "no") != 0)) {
        printf ("Do you want to continue (yes/no) :");
        scanf ("%3s", userInput);
        while (1) {
            c = getchar ();
            if (c == '\n')
                break;
            if (c == EOF)
                return -1;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49269560_49270034_3_37
49269560_49287215_2_13
Title: How to add two 24hour times 
----------------------------------------

int main (void) {
    int time1 = 1045;
    int time2 = 930;
    int time1Hours = time1 / 100;
    int time2Hours = time2 / 100;
    int time1Min = time1 % 100;
    int time2Min = time2 % 100;
    int totalHours = time1Hours + time2Hours;
    int totalMin = time1Min + time2Min;
    return 0;
}
----------------------------------------

int main () {
    int t1 = 2330;
    int t2 = 2340;
    int sum = ((t1 / 100) * 60) + (t1 % 100) + ((t2 / 100) * 60) + (t2 % 100);
    int day = sum / (24 * 60);
    sum = sum % (24 * 60);
    int hours = sum / (60);
    int mins = sum % 60;
    printf ("days = %d \t hours = %d \t mins=%d\n", day, hours, mins);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49277375_49281947_1_30
49277375_49281950_1_33
Title: C - segfault at 1021 iterations and unable to open i2c at 1020 iterations 
----------------------------------------

int read_eeprom (unsigned char address) {
    int i, value;
    static int xio = -1;
    if (xio == -1) {
        xio = wiringPiI2CSetup (address);
        if (xio < 0) {
            fprintf (stderr, "xio: Can't initialise I2C: %s\n", strerror (errno));
            return 1;
        }
    }
    for (i = 0; i < 128; i++) {
        value = wiringPiI2CReadReg8 (xio, i);
        if (value > 0) {
            if (address == 0x50)
                A50[i] = value;
            else
                A51[i] = value;
        }
        else {
            fprintf (stderr, "xio: Can't read i2c address 0x%x: %s\n", address, strerror (errno));
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int read_eeprom (unsigned char address) {
    int xio, i, fd1;
    xio = wiringPiI2CSetup (address);
    if (xio < 0) {
        fprintf (stderr, "xio: Can't initialise I2C: %s\n", strerror (errno));
        return 1;
    }
    for (i = 0; i < 128; i++) {
        fd1 = wiringPiI2CReadReg8 (xio, i);
        if (address == 0x50) {
            A50[i] = fd1;
        }
        else {
            A51[i] = fd1;
        }
        if (fd1 < 0) {
            fprintf (stderr, "xio: Can't read i2c address 0x%x: %s\n", address, strerror (errno));
            return 1;
        }
    }
    close (fd1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49278887_49279767_16_29
49278887_49279806_12_30
Title: "I want to search an element of the string str in the string s but when I'm trying to search anything(e.g. str[1]) in the string s it returns 0" 
----------------------------------------

int main () {
    int i, z;
    char s [100];
    scanf ("%s", s);
    char str [100];
    scanf ("%s", str);
    z = lsearch (s, 0, strlen (s), str[1]);
    printf ("%d", z);
}
----------------------------------------

int main (void) {
    char s [] = "Hello Utkarsh Pandey";
    size_t start_pos = 6;
    size_t n = 7;
    size_t pos = lsearch (s +start_pos, n, 'a');
    if (pos != n) {
        printf ("The character 'a' is found at position %zu\n", pos + start_pos);
    }
    else {
        puts ("The character 'a' is not found");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49288600_49289226_12_30
49288600_49291789_2_17
Title: How can I replace one variable's array with another? 
----------------------------------------

int main (void) {
    double a [dim];
    double b [dim] = {9, 8, 7, 6, 5};
    double *pa = a;
    double *pb = b;
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < dim; ++j) {
            pa[j] = 1.0 - 0.5 * pb[j];
            printf ("%10.6f", pa [j]);
        }
        puts ("");
        swap_dptr (& pa, & pb);
    }
    return 0;
}
----------------------------------------

void main () {
    int array [100], temparray [100];
    int i, n;
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%d", & array [i]);
    }
    for (i = 0; i < n; i++) {
        temparray[i] = array[i];
    }
    for (i = 0; i < n; i++) {
        printf ("%d", temparray [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49290953_49291191_26_40
49290953_49291539_26_36
Title: How do I make conditions in printf statements? 
----------------------------------------

int main (void) {
    int lo = -7;
    int hi = +6;
    int jp = +6;
    for (int i = lo; i < hi; i += jp) {
        for (int j = lo; j < hi; j += jp) {
            for (int k = lo; k < hi; k += jp)
                print_smallest (i, j, k);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n [3] = {30, 59, 100};
    int tmp1 = n[0] > n[2];
    int tmp2 = n[0] > n[1];
    int tmp3 = n[1] > n[2];
    printf ("1.) %d\n", n [map [tmp1] [tmp2] [tmp3] [0]]);
    printf ("2.) %d\n", n [map [tmp1] [tmp2] [tmp3] [1]]);
    printf ("3.) %d\n", n [map [tmp1] [tmp2] [tmp3] [2]]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49290953_49291191_26_40
49290953_49293546_3_20
Title: How do I make conditions in printf statements? 
----------------------------------------

int main (void) {
    int lo = -7;
    int hi = +6;
    int jp = +6;
    for (int i = lo; i < hi; i += jp) {
        for (int j = lo; j < hi; j += jp) {
            for (int k = lo; k < hi; k += jp)
                print_smallest (i, j, k);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n [5], o [5], s [5];
    while (scanf ("%d%d%d%d%d", &n[0], &n[1], &n[2], &n[3], &n[4]) == 5) {
        o[0] = (n[0] > n[1]) + (n[0] > n[2]) + (n[0] > n[3]) + (n[0] > n[4]);
        o[1] = (n[1] >= n[0]) + (n[1] > n[2]) + (n[1] > n[3]) + (n[1] > n[4]);
        o[2] = (n[2] >= n[0]) + (n[2] >= n[1]) + (n[2] > n[3]) + (n[2] > n[4]);
        o[3] = (n[3] >= n[0]) + (n[3] >= n[1]) + (n[3] >= n[2]) + (n[3] > n[4]);
        o[4] = (n[4] >= n[0]) + (n[4] >= n[1]) + (n[4] >= n[2]) + (n[4] >= n[3]);
        s[o[0]] = n[0];
        s[o[1]] = n[1];
        s[o[2]] = n[2];
        s[o[3]] = n[3];
        s[o[4]] = n[4];
        printf ("%d %d %d %d %d\n", s [0], s [1], s [2], s [3], s [4]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49290953_49291539_26_36
49290953_49293546_3_20
Title: How do I make conditions in printf statements? 
----------------------------------------

int main () {
    int n [3] = {30, 59, 100};
    int tmp1 = n[0] > n[2];
    int tmp2 = n[0] > n[1];
    int tmp3 = n[1] > n[2];
    printf ("1.) %d\n", n [map [tmp1] [tmp2] [tmp3] [0]]);
    printf ("2.) %d\n", n [map [tmp1] [tmp2] [tmp3] [1]]);
    printf ("3.) %d\n", n [map [tmp1] [tmp2] [tmp3] [2]]);
}
----------------------------------------

int main () {
    int n [5], o [5], s [5];
    while (scanf ("%d%d%d%d%d", &n[0], &n[1], &n[2], &n[3], &n[4]) == 5) {
        o[0] = (n[0] > n[1]) + (n[0] > n[2]) + (n[0] > n[3]) + (n[0] > n[4]);
        o[1] = (n[1] >= n[0]) + (n[1] > n[2]) + (n[1] > n[3]) + (n[1] > n[4]);
        o[2] = (n[2] >= n[0]) + (n[2] >= n[1]) + (n[2] > n[3]) + (n[2] > n[4]);
        o[3] = (n[3] >= n[0]) + (n[3] >= n[1]) + (n[3] >= n[2]) + (n[3] > n[4]);
        o[4] = (n[4] >= n[0]) + (n[4] >= n[1]) + (n[4] >= n[2]) + (n[4] >= n[3]);
        s[o[0]] = n[0];
        s[o[1]] = n[1];
        s[o[2]] = n[2];
        s[o[3]] = n[3];
        s[o[4]] = n[4];
        printf ("%d %d %d %d %d\n", s [0], s [1], s [2], s [3], s [4]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49308188_49308313_14_25
49308188_49308463_1_35
Title: Iterative Binary Search Tree Insert in C 
----------------------------------------

node *BST_insert_iterative (node *root, int data) {
    node **pp = &root;
    while (*pp != NULL) {
        if (data > (*pp)->data)
            pp = &(*pp)->right;
        else
            pp = &(*pp)->left;
    }
    *pp = create_node (data);
    return root;
}
----------------------------------------

node *BST_insert_iterative (node *root, int data) {
    node *temp = root;
    int condition = 1;
    if (root == NULL)
        return create_node (data);
    while (condition) {
        if (data > temp->data) {
            if (temp->right == NULL) {
                temp->right = create_node (data);
                condition = 0;
            }
            else
                temp = temp->right;
        }
        else {
            if (temp->left == NULL) {
                temp->left = create_node (data);
                condition = 0;
            }
            else
                temp = temp->left;
        }
    }
    return root;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49312078_49312200_14_35
49312078_49312200_38_50
Title: Basic square function done with array & malloc 
----------------------------------------

int main () {
    int *sq = malloc (10 * sizeof *sq);
    if (sq == NULL) {
        fprintf (stderr, "not enough memory\n");
        return 1;
    }
    squares (sq, 10);
    int i;
    for (i = 0; i < 10; i++) {
        printf ("%d\t", sq [i]);
    }
    printf ("\n");
    free (sq);
    return 0;
}
----------------------------------------

int main () {
    int sq [10];
    squares (sq, sizeof sq / sizeof sq [0]);
    int i;
    for (i = 0; i < 10; i++) {
        printf ("%d\t", sq [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49312078_49312200_14_35
49312078_49312207_10_21
Title: Basic square function done with array & malloc 
----------------------------------------

int main () {
    int *sq = malloc (10 * sizeof *sq);
    if (sq == NULL) {
        fprintf (stderr, "not enough memory\n");
        return 1;
    }
    squares (sq, 10);
    int i;
    for (i = 0; i < 10; i++) {
        printf ("%d\t", sq [i]);
    }
    printf ("\n");
    free (sq);
    return 0;
}
----------------------------------------

int main () {
    int sq [10];
    squares (sq, 10);
    int i;
    for (i = 0; i < 10; i++) {
        printf ("%d\t", sq [i]);
    }
    printf ("\n");
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49342522_49342795_1_15
49342522_49342950_5_56
Title: How to get hex values from string? 
----------------------------------------

int main () {
    const char *input = "80 9c 95 95 96 11 bc 96 b9 95 9d 10";
    const char *current = input;
    char *end = NULL;
    while (1) {
        unsigned long val = strtoul (current, &end, 16);
        if (current == end)
            break;
        printf ("val: %lX\n", val);
        current = end;
    }
}
----------------------------------------

int main (void) {
    char text [] = "80 9c 95 95 96 11 bc 96 b9 95 9d 10";
    size_t len = strlen (text);
    size_t arr_len = (len / 3) + 1;
    printf ("len= %zu arr_len= %zu\n", len, arr_len);
    printf ("Text:\n%s\n", text);
    char array [arr_len];
    const char *p1 = text;
    char tmp [3];
    tmp[2] = 0;
    printf ("Parsing:\n");
    for (size_t i = 0; i < arr_len; i++) {
        p1 = strchr (p1, ' ');
        if (p1) {
            tmp[0] = *(p1 - 2);
            tmp[1] = *(p1 - 1);
            array[i] = (char) strtoul (tmp, NULL, 16);
            printf ("%2x ", (unsigned char) array [i]);
            p1++;
            if (strlen (p1) == 2) {
                i++;
                tmp[0] = *(p1);
                tmp[1] = *(p1 + 1);
                array[i] = (char) strtoul (tmp, NULL, 16);
                printf ("%2x", (unsigned char) array [i]);
            }
        }
    }
    printf ("\nArray content:\n");
    for (size_t i = 0; i < arr_len; i++) {
        printf ("%2x ", (unsigned char) array [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49342761_49342908_1_16
49342761_49343786_1_16
Title: Simple I/O Function w/ C 
----------------------------------------

void triangle (int width) {
    int line, i, rev = 0;
    for (line = 1; line < width; ++line) {
        for (i = 0; i < line && i < width; i++) {
            printf ("*");
        }
        printf ("\n");
    }
    for (; line; --line) {
        for (i = 0; i < line && i < width; i++) {
            printf ("*");
        }
        printf ("\n");
    }
}
----------------------------------------

void triangle (int width) {
    int i, j, height, tmp;
    height = 2 * width - 1;
    tmp = 1;
    for (i = 0; i < height; i++) {
        for (j = 0; j < tmp; j++) {
            putchar ('*');
        }
        putchar ('\n');
        if (i < height / 2) {
            tmp++;
        }
        else {
            tmp--;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49357456_49357679_4_30
49357456_49357895_4_31
Title: Process finished with exit code 11 | Error during malloc 
----------------------------------------

int main () {
    int **a = (int **) malloc (sizeof (int *) * 4);
    int **b = (int **) malloc (sizeof (int *) * 4);
    for (int i = 0; i < 4; i++) {
        printf ("Enter value \n");
        a[i] = (int *) malloc (sizeof (int));
        b[i] = (int *) malloc (sizeof (int));
        scanf ("%d", & a [i]);
        scanf ("%d", & b [i]);
    }
    for (int i = 0; i < 4; i++) {
        printf ("%d = %x\n  ", a [i], & a [i]);
    }
    for (int i = 0; i < 4; i++) {
        printf ("%d = %x\n  ", b [i], & b [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int *a;
    int *b;
    a = malloc (sizeof (*a) * 4);
    b = malloc (sizeof (*b) * 4);
    if (a == NULL || b == NULL) {
        fprintf (stderr, "cannot allocate memory\n");
        exit (1);
    }
    for (int i = 0; i < 4; i++) {
        printf ("Enter 2 values\n");
        if (scanf ("%d%d", &a[i], &b[i]) != 2) {
            fprintf (stderr, "invalid input\n");
            exit (1);
        }
    }
    for (int i = 0; i < 4; i++) {
        printf ("  %d = %x\n", a [i], a [i]);
    }
    for (int i = 0; i < 4; i++) {
        printf ("  %d = %x\n", b [i], b [i]);
    }
    free (a);
    free (b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49358398_49358603_1_31
49358398_49358738_2_26
Title: "I am trying to arrange three 3 numbers in ascending manner using if statement but this doesn't work for the third number. What can be done about it?" 
----------------------------------------

int main () {
    int a, b, c, temp;
    int ret = scanf ("%d %d %d", &a, &b, &c);
    if (ret != 3) {
        printf ("scanf() error\n");
        exit (1);
    }
    if ((b < a) && (b < c)) {
        temp = a;
        a = b;
        b = temp;
    }
    else if ((c < a) && (c < b)) {
        temp = a;
        a = c;
        c = temp;
    }
    if (c < b) {
        temp = b;
        b = c;
        c = temp;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------

int main () {
    int a, b, c, temp, min;
    scanf ("%d %d %d", & a, & b, & c);
    if (a > b) {
        temp = a;
        a = b;
        b = temp;
    }
    if (c < a) {
        min = c;
        c = b;
        b = a;
        a = min;
    }
    else if (c > a && b < c) {
        min = c;
        c = b;
        b = min;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49358398_49358603_1_31
49358398_49359106_3_33
Title: "I am trying to arrange three 3 numbers in ascending manner using if statement but this doesn't work for the third number. What can be done about it?" 
----------------------------------------

int main () {
    int a, b, c, temp;
    int ret = scanf ("%d %d %d", &a, &b, &c);
    if (ret != 3) {
        printf ("scanf() error\n");
        exit (1);
    }
    if ((b < a) && (b < c)) {
        temp = a;
        a = b;
        b = temp;
    }
    else if ((c < a) && (c < b)) {
        temp = a;
        a = c;
        c = temp;
    }
    if (c < b) {
        temp = b;
        b = c;
        c = temp;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------

int main () {
    int a, b, c;
    printf ("Enter the number : \n");
    scanf ("%d %d %d", & a, & b, & c);
    if ((a > b) && (a > c)) {
        if (b > c)
            printf ("%d %d %d", a, b, c);
        else
            printf ("%d %d %d", a, c, b);
    }
    else if ((b > c) && (b > a)) {
        if (c > a)
            printf ("%d %d %d", b, c, a);
        else
            printf ("%d %d %d", b, a, c);
    }
    else if ((c > a) && (c > b)) {
        if (a > b)
            printf ("%d %d %d", c, a, b);
        else
            printf ("%d %d %d", c, b, a);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49358398_49358603_1_31
49358398_49359307_2_27
Title: "I am trying to arrange three 3 numbers in ascending manner using if statement but this doesn't work for the third number. What can be done about it?" 
----------------------------------------

int main () {
    int a, b, c, temp;
    int ret = scanf ("%d %d %d", &a, &b, &c);
    if (ret != 3) {
        printf ("scanf() error\n");
        exit (1);
    }
    if ((b < a) && (b < c)) {
        temp = a;
        a = b;
        b = temp;
    }
    else if ((c < a) && (c < b)) {
        temp = a;
        a = c;
        c = temp;
    }
    if (c < b) {
        temp = b;
        b = c;
        c = temp;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------

int main () {
    int a, b, c, temp;
    scanf ("%d %d %d", & a, & b, & c);
    if (a > b) {
        temp = a;
        a = b;
        b = temp;
    }
    if (b > c) {
        temp = b;
        b = c;
        c = temp;
        if (a > b) {
            temp = a;
            a = b;
            b = temp;
        }
    }
    else if (a > c) {
        temp = c;
        c = a;
        a = temp;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49358398_49358738_2_26
49358398_49359106_3_33
Title: "I am trying to arrange three 3 numbers in ascending manner using if statement but this doesn't work for the third number. What can be done about it?" 
----------------------------------------

int main () {
    int a, b, c, temp, min;
    scanf ("%d %d %d", & a, & b, & c);
    if (a > b) {
        temp = a;
        a = b;
        b = temp;
    }
    if (c < a) {
        min = c;
        c = b;
        b = a;
        a = min;
    }
    else if (c > a && b < c) {
        min = c;
        c = b;
        b = min;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------

int main () {
    int a, b, c;
    printf ("Enter the number : \n");
    scanf ("%d %d %d", & a, & b, & c);
    if ((a > b) && (a > c)) {
        if (b > c)
            printf ("%d %d %d", a, b, c);
        else
            printf ("%d %d %d", a, c, b);
    }
    else if ((b > c) && (b > a)) {
        if (c > a)
            printf ("%d %d %d", b, c, a);
        else
            printf ("%d %d %d", b, a, c);
    }
    else if ((c > a) && (c > b)) {
        if (a > b)
            printf ("%d %d %d", c, a, b);
        else
            printf ("%d %d %d", c, b, a);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49358398_49358738_2_26
49358398_49359307_2_27
Title: "I am trying to arrange three 3 numbers in ascending manner using if statement but this doesn't work for the third number. What can be done about it?" 
----------------------------------------

int main () {
    int a, b, c, temp, min;
    scanf ("%d %d %d", & a, & b, & c);
    if (a > b) {
        temp = a;
        a = b;
        b = temp;
    }
    if (c < a) {
        min = c;
        c = b;
        b = a;
        a = min;
    }
    else if (c > a && b < c) {
        min = c;
        c = b;
        b = min;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------

int main () {
    int a, b, c, temp;
    scanf ("%d %d %d", & a, & b, & c);
    if (a > b) {
        temp = a;
        a = b;
        b = temp;
    }
    if (b > c) {
        temp = b;
        b = c;
        c = temp;
        if (a > b) {
            temp = a;
            a = b;
            b = temp;
        }
    }
    else if (a > c) {
        temp = c;
        c = a;
        a = temp;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49358398_49359106_3_33
49358398_49359307_2_27
Title: "I am trying to arrange three 3 numbers in ascending manner using if statement but this doesn't work for the third number. What can be done about it?" 
----------------------------------------

int main () {
    int a, b, c;
    printf ("Enter the number : \n");
    scanf ("%d %d %d", & a, & b, & c);
    if ((a > b) && (a > c)) {
        if (b > c)
            printf ("%d %d %d", a, b, c);
        else
            printf ("%d %d %d", a, c, b);
    }
    else if ((b > c) && (b > a)) {
        if (c > a)
            printf ("%d %d %d", b, c, a);
        else
            printf ("%d %d %d", b, a, c);
    }
    else if ((c > a) && (c > b)) {
        if (a > b)
            printf ("%d %d %d", c, a, b);
        else
            printf ("%d %d %d", c, b, a);
    }
    return 0;
}
----------------------------------------

int main () {
    int a, b, c, temp;
    scanf ("%d %d %d", & a, & b, & c);
    if (a > b) {
        temp = a;
        a = b;
        b = temp;
    }
    if (b > c) {
        temp = b;
        b = c;
        c = temp;
        if (a > b) {
            temp = a;
            a = b;
            b = temp;
        }
    }
    else if (a > c) {
        temp = c;
        c = a;
        a = temp;
    }
    printf ("%d %d %d", a, b, c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49374965_49375079_5_18
49374965_49375142_5_25
Title: How to delete '#' symbols from a given file C 
----------------------------------------

int main (int argc, char **argv) {
    FILE *file = fopen (argv[1], "r");
    char buf [100];
    char *p;
    while (fgets (buf, sizeof (buf), file)) {
        if ((p = strchr (buf, '#'))) {
            *(p++) = '\n';
            *p = '\0';
        }
        printf ("%s", buf + (strncmp (buf, ":once:", 6) == 0 ? 6 : 0));
    }
    fclose (file);
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *file;
    if (!(file = fopen (argv[1], "r"))) {
        fprintf (stderr, "The specified file does not exist\n");
        return 1;
    }
    char buf [100];
    int x;
    while (fgets (buf, sizeof (buf), file)) {
        for (x = 0; x < sizeof (buf); x++) {
            if (buf[x] == '#')
                buf[x] = '\0';
        }
        if (strncmp (buf, ":once:", 6) == 0)
            printf ("%s\n", buf +6);
        else
            printf ("%s\n", buf);
    }
    fclose (file);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49377469_49377530_4_15
49377469_49377629_4_15
Title: How to index: in C? 
----------------------------------------

int main () {
    char a [] = "1234:once:echo hello";
    int i;
    for (i = 0; i < strlen (a); i++) {
        if (a[i] == ':') {
            break;
        }
    }
    printf ("%s\n", a + i);
}
----------------------------------------

int main (void) {
    char a [] = "1234:once:echo hello";
    int i = 0;
    while (a[i]) {
        if (a[i] == ':')
            break;
        i++;
    }
    printf ("%s\n", a + i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49389461_49389933_3_43
49389461_49390234_1_33
Title: Longest sequence of the same number&how many longest seqeuences exist (without array) 
----------------------------------------

void MaxLength (void) {
    size_t max_length = 0, max_count = 0;
    int prev_number = 0;
    size_t n = 0;
    _Bool valid_input;
    printf ("Please enter positive integers: ");
    do {
        int number = 0;
        valid_input = scanf ("%d", &number) == 1 && number > 0;
        if (!valid_input || number != prev_number) {
            if (max_length < n) {
                max_length = n;
                max_count = 1;
            }
            else if (valid_input && max_length == n) {
                max_count++;
            }
            prev_number = number;
            n = 1;
        }
        else {
            ++n;
        }
    }
    while (valid_input);
    printf ("\nmaximum length - %zu\n", max_length);
    printf ("occured - %zu\n", max_count);
}
----------------------------------------

void MaxLength (void) {
    int inputNumber;
    int previousNumber = -1;
    int currentLen = 0;
    int maxLen = 0;
    int nbMaxLen = 0;
    printf ("Please enter positive integers: ");
    while (scanf ("%d", &inputNumber) == 1 && inputNumber > 0) {
        ++currentLen;
        if (inputNumber != previousNumber) {
            if (currentLen == maxLen) {
                ++nbMaxLen;
            }
            else if (currentLen > maxLen) {
                maxLen = currentLen;
                nbMaxLen = 1;
            }
            currentLen = 1;
        }
        previousNumber = inputNumber;
    }
    if (currentLen == maxLen) {
        ++nbMaxLen;
    }
    else if (currentLen > maxLen) {
        maxLen = currentLen;
        nbMaxLen = 1;
    }
    printf ("maxLen   = %d\n", maxLen);
    printf ("nbMaxLen = %d\n", nbMaxLen);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49396902_49397405_28_43
49396902_49398917_16_54
Title: Coin Change Algorithm C 
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2)
        return EXIT_FAILURE;
    unsigned int denoms [] = {100, 50, 25, 10, 0};
    long t = strtol (argv[1], NULL, 10);
    if (t < 0 || t >= LONG_MAX)
        return EXIT_FAILURE;
    if (!coin_find (t, denoms))
        printf ("No solution found");
    printf ("\n");
}
----------------------------------------

int main () {
    prev[0] = 0;
    for (int i = 1; i < 10000; i++)
        prev[i] = -1;
    for (int i = 0; i < COINS; i++)
        for (int j = M; j >= 0; j--)
            if (prev[j] != -1) {
                int k = 1;
                while (k <= quant[i] && j + k * value[i] <= M) {
                    if (prev[j + k * value[i]] == -1) {
                        prev[j + k * value[i]] = j;
                        coin[j + k * value[i]] = value[i];
                    }
                    k++;
                }
            }
    if (prev[M] != -1) {
        int current = M;
        while (current > 0) {
            int k = 0;
            while (k < COINS && coin[current] != value[k])
                k++;
            answer[k] += (current - prev[current]) / coin[current];
            current = prev[current];
        }
        printf ("Change\n");
        for (int i = 0; i < COINS; i++)
            printf ("\t%d %d cent coin(s).\n", answer[i], value[i]);
    }
    else {
        printf ("It was not possible to change the value");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49396902_49397405_28_43
49396902_49401188_8_83
Title: Coin Change Algorithm C 
----------------------------------------

int main (int argc, char **argv) {
    if (argc < 2)
        return EXIT_FAILURE;
    unsigned int denoms [] = {100, 50, 25, 10, 0};
    long t = strtol (argv[1], NULL, 10);
    if (t < 0 || t >= LONG_MAX)
        return EXIT_FAILURE;
    if (!coin_find (t, denoms))
        printf ("No solution found");
    printf ("\n");
}
----------------------------------------

int main () {
    int change = 30;
    int changecoins [4] = {0};
    struct coins available_coins [4] = {0};
    int temp;
    available_coins[3].value = 10;
    available_coins[2].value = 25;
    available_coins[1].value = 50;
    available_coins[0].value = 100;
    available_coins[3].quant = 10;
    available_coins[2].quant = 15;
    available_coins[1].quant = 8;
    available_coins[0].quant = 12;
    if (((change / 10 < 2) && (change % 10 != 0)) || (change / 10 >= 2) && ((change % 10 != 5) && change % 10 != 0)) {
        printf ("It was not possible to change the value\n");
        return 0;
    }
    else {
        for (int i = 0; i < 2; i++) {
            changecoins[i] = change / available_coins[i].value;
            change = change % available_coins[i].value;
            if (changecoins[i] >= available_coins[i].quant) {
                change = change + (changecoins[i] - available_coins[i].quant) * available_coins[i].value;
                changecoins[i] = available_coins[i].quant;
            }
        }
        if (change % 10 == 5) {
            if (available_coins[2].quant < 1) {
                printf ("It was not possible to change the value\n");
                return 0;
            }
            else {
                changecoins[2] = change / available_coins[2].value;
                change = change % available_coins[2].value;
                if (changecoins[2] >= available_coins[2].quant) {
                    change = change + (changecoins[2] - available_coins[2].quant) * available_coins[2].value;
                    changecoins[2] = available_coins[2].quant;
                }
                if (change % 10 == 5) {
                    changecoins[2]--;
                    change = change + available_coins[2].value;
                }
            }
        }
        changecoins[3] = change / available_coins[3].value;
        change = change % available_coins[3].value;
        if (changecoins[3] >= available_coins[3].quant) {
            change = change + (changecoins[3] - available_coins[3].quant) * available_coins[3].value;
            changecoins[3] = available_coins[3].quant;
        }
        if (change > 0) {
            printf ("It was not possible to change the value\n");
        }
        else {
            printf ("Change:\n");
            printf ("\t%d 100 cent coin(s).\n", changecoins [0]);
            printf ("\t%d 50 cent coin(s).\n", changecoins [1]);
            printf ("\t%d 25 cent coin(s).\n", changecoins [2]);
            printf ("\t%d 10 cent coin(s).\n", changecoins [3]);
            for (int i = 0; i < 4; i++) {
                available_coins[i].quant -= changecoins[i];
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49396902_49398917_16_54
49396902_49401188_8_83
Title: Coin Change Algorithm C 
----------------------------------------

int main () {
    prev[0] = 0;
    for (int i = 1; i < 10000; i++)
        prev[i] = -1;
    for (int i = 0; i < COINS; i++)
        for (int j = M; j >= 0; j--)
            if (prev[j] != -1) {
                int k = 1;
                while (k <= quant[i] && j + k * value[i] <= M) {
                    if (prev[j + k * value[i]] == -1) {
                        prev[j + k * value[i]] = j;
                        coin[j + k * value[i]] = value[i];
                    }
                    k++;
                }
            }
    if (prev[M] != -1) {
        int current = M;
        while (current > 0) {
            int k = 0;
            while (k < COINS && coin[current] != value[k])
                k++;
            answer[k] += (current - prev[current]) / coin[current];
            current = prev[current];
        }
        printf ("Change\n");
        for (int i = 0; i < COINS; i++)
            printf ("\t%d %d cent coin(s).\n", answer[i], value[i]);
    }
    else {
        printf ("It was not possible to change the value");
    }
    return 0;
}
----------------------------------------

int main () {
    int change = 30;
    int changecoins [4] = {0};
    struct coins available_coins [4] = {0};
    int temp;
    available_coins[3].value = 10;
    available_coins[2].value = 25;
    available_coins[1].value = 50;
    available_coins[0].value = 100;
    available_coins[3].quant = 10;
    available_coins[2].quant = 15;
    available_coins[1].quant = 8;
    available_coins[0].quant = 12;
    if (((change / 10 < 2) && (change % 10 != 0)) || (change / 10 >= 2) && ((change % 10 != 5) && change % 10 != 0)) {
        printf ("It was not possible to change the value\n");
        return 0;
    }
    else {
        for (int i = 0; i < 2; i++) {
            changecoins[i] = change / available_coins[i].value;
            change = change % available_coins[i].value;
            if (changecoins[i] >= available_coins[i].quant) {
                change = change + (changecoins[i] - available_coins[i].quant) * available_coins[i].value;
                changecoins[i] = available_coins[i].quant;
            }
        }
        if (change % 10 == 5) {
            if (available_coins[2].quant < 1) {
                printf ("It was not possible to change the value\n");
                return 0;
            }
            else {
                changecoins[2] = change / available_coins[2].value;
                change = change % available_coins[2].value;
                if (changecoins[2] >= available_coins[2].quant) {
                    change = change + (changecoins[2] - available_coins[2].quant) * available_coins[2].value;
                    changecoins[2] = available_coins[2].quant;
                }
                if (change % 10 == 5) {
                    changecoins[2]--;
                    change = change + available_coins[2].value;
                }
            }
        }
        changecoins[3] = change / available_coins[3].value;
        change = change % available_coins[3].value;
        if (changecoins[3] >= available_coins[3].quant) {
            change = change + (changecoins[3] - available_coins[3].quant) * available_coins[3].value;
            changecoins[3] = available_coins[3].quant;
        }
        if (change > 0) {
            printf ("It was not possible to change the value\n");
        }
        else {
            printf ("Change:\n");
            printf ("\t%d 100 cent coin(s).\n", changecoins [0]);
            printf ("\t%d 50 cent coin(s).\n", changecoins [1]);
            printf ("\t%d 25 cent coin(s).\n", changecoins [2]);
            printf ("\t%d 10 cent coin(s).\n", changecoins [3]);
            for (int i = 0; i < 4; i++) {
                available_coins[i].quant -= changecoins[i];
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4940874_4941047_73_138
4940874_4952508_3_71
Title: C File processing and matching help 
----------------------------------------

int main (void) {
    int cli_acct, txn_acct, last_acct = -1;
    char txn_date [10], cli_nm [10];
    double cli_bal, txn_amt;
    FILE *fCli, *fTxn, *fNew;
    if (!openFiles (&fCli, &fTxn, &fNew))
        return 1;
    outHeader (HDR_FULL);
    getTxn (fTxn, & txn_acct, txn_date, & txn_amt);
    while (!feof (fCli)) {
        getCli (fCli, & last_acct, & cli_acct, cli_nm, & cli_bal);
        outHeader (HDR_LINE);
        outCli (cli_acct, cli_nm, cli_bal, "<--");
        while (cli_acct < txn_acct) {
            fprintf (fNew, "%d %s %.2lf\n", cli_acct, cli_nm, cli_bal);
            outCli (- 1, "", cli_bal, "-->");
            outHeader (HDR_LINE);
            fscanf (fCli, "%d%s%lf\n", & cli_acct, & cli_nm, & cli_bal);
            outCli (cli_acct, cli_nm, cli_bal, "<--");
        }
        if ((cli_acct != txn_acct) && (txn_acct != -1)) {
            printf ("Orphan transaction for account # %d\n", txn_acct);
            closeFiles (fCli, fTxn, fNew);
            return 1;
        }
        while (cli_acct == txn_acct) {
            cli_bal = cli_bal + txn_amt;
            outTxn (txn_date, txn_amt, cli_bal);
            if (feof (fTxn))
                txn_acct = -1;
            else
                fscanf (fTxn, "%d%s%lf\n", &txn_acct, &txn_date, &txn_amt);
        }
        fprintf (fNew, "%d %s %.2lf\n", cli_acct, cli_nm, cli_bal);
    }
    if (last_acct != -1)
        outCli (-1, "", cli_bal, "-->");
    outHeader (HDR_LINE);
    closeFiles (fCli, fTxn, fNew);
    return 0;
}
----------------------------------------

int main (void) {
    int account;
    char date [30];
    double balance, saleamount;
    int transaccount;
    char name [30];
    int newaccount;
    char newname [30];
    double newbalance;
    int match = 0;
    FILE *cfPtr;
    FILE *ctPtr;
    FILE *cfPtr2;
    cfPtr2 = fopen ("clientupdate.dat", "w");
    if ((cfPtr = fopen ("clients.dat", "r")) == NULL) {
        printf ("clients could not be opened\n");
    }
    else if ((ctPtr = fopen ("transactions.dat", "r")) == NULL) {
        printf ("File could not be opened\n");
    }
    else {
        fscanf (cfPtr, "%d%s%lf", & account, & name, & balance);
        fscanf (ctPtr, "%d%s%lf", & transaccount, & date, & saleamount);
        fscanf (cfPtr2, "%d%s%lf", & newaccount, & newname, & newbalance);
        while (!feof (cfPtr)) {
            transaccount = 1;
            newbalance = balance;
            while (!feof (ctPtr)) {
                if (transaccount == account && match == 0) {
                    newbalance = balance + saleamount;
                    match++;
                }
                else if (transaccount == account && match > 0)
                    newbalance = newbalance + saleamount;
                fscanf (ctPtr, "%d%s%lf", & transaccount, date, & saleamount);
            }
            rewind (ctPtr);
            match = 0;
            fprintf (cfPtr2, "%d %s %.2f\n", account, name, newbalance);
            fscanf (cfPtr, "%d%s%lf", & account, name, & balance);
        }
        rewind (cfPtr2);
    }
    fclose (cfPtr2);
    fclose (cfPtr);
    fclose (ctPtr);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4941405_4942412_91_108
4941405_4952420_3_71
Title: C File updating and creating help 
----------------------------------------

int main (int argc, char *argv []) {
    oldClientFile = fopen ("clients.dat", "r");
    newClientFile = fopen ("newclients.dat", "w");
    transactionFile = fopen ("transactions.dat", "r");
    if (performTransactionUpdate (oldClientFile, newClientFile, transactionFile))
        printf ("\nUpdate completed without errors!\n");
    else
        printf ("\nUnsorted files or invalid transactions encountered\n");
    close (newClientFile);
    close (oldClientFile);
    close (transactionFile);
    return 0;
}
----------------------------------------

int main (void) {
    int account;
    char date [30];
    double balance, saleamount;
    int transaccount;
    char name [30];
    int newaccount;
    char newname [30];
    double newbalance;
    int match = 0;
    FILE *cfPtr;
    FILE *ctPtr;
    FILE *cfPtr2;
    cfPtr2 = fopen ("clientupdate.dat", "w");
    if ((cfPtr = fopen ("clients.dat", "r")) == NULL) {
        printf ("clients could not be opened\n");
    }
    else if ((ctPtr = fopen ("transactions.dat", "r")) == NULL) {
        printf ("File could not be opened\n");
    }
    else {
        fscanf (cfPtr, "%d%s%lf", & account, & name, & balance);
        fscanf (ctPtr, "%d%s%lf", & transaccount, & date, & saleamount);
        fscanf (cfPtr2, "%d%s%lf", & newaccount, & newname, & newbalance);
        while (!feof (cfPtr)) {
            transaccount = 1;
            newbalance = balance;
            while (!feof (ctPtr)) {
                if (transaccount == account && match == 0) {
                    newbalance = balance + saleamount;
                    match++;
                }
                else if (transaccount == account && match > 0)
                    newbalance = newbalance + saleamount;
                fscanf (ctPtr, "%d%s%lf", & transaccount, date, & saleamount);
            }
            rewind (ctPtr);
            match = 0;
            fprintf (cfPtr2, "%d %s %.2f\n", account, name, newbalance);
            fscanf (cfPtr, "%d%s%lf", & account, name, & balance);
        }
        rewind (cfPtr2);
    }
    fclose (cfPtr2);
    fclose (cfPtr);
    fclose (ctPtr);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49440350_49440430_1_11
49440350_49440623_4_16
Title: "Design a Character Searching Function While Forced to Use strchr" 
----------------------------------------

int ch_search (char array_to_search [], char char_to_search_for, int array_size) {
    int count = 0;
    for (char *ptr = array_to_search; ptr != &array_to_search[array_size]; ptr++) {
        ptr = strchr (ptr, char_to_search_for);
        if (!ptr) {
            break;
        }
        count++;
    }
    return count;
}
----------------------------------------

int ch_search (char array_to_search [], char char_to_search_for, int search_length) {
    int count = 0;
    for (char *p = array_to_search;; p++) {
        p = strchr (p, char_to_search_for);
        if (p != NULL && (p - array_to_search < search_length))
            count++;
        else
            break;
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49440350_49440430_1_11
49440350_49447505_1_15
Title: "Design a Character Searching Function While Forced to Use strchr" 
----------------------------------------

int ch_search (char array_to_search [], char char_to_search_for, int array_size) {
    int count = 0;
    for (char *ptr = array_to_search; ptr != &array_to_search[array_size]; ptr++) {
        ptr = strchr (ptr, char_to_search_for);
        if (!ptr) {
            break;
        }
        count++;
    }
    return count;
}
----------------------------------------

int ch_search (char array_to_search [], char char_to_search_for, int array_size) {
    char *buffer = malloc (array_size +1);
    strncpy (buffer, array_to_search, array_size);
    buffer[array_size] = '\0';
    int count = 0;
    for (char *i = buffer; (i = strchr (i, char_to_search_for)) != NULL; i++) {
        count++;
    }
    free (buffer);
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49440350_49440623_4_16
49440350_49447505_1_15
Title: "Design a Character Searching Function While Forced to Use strchr" 
----------------------------------------

int ch_search (char array_to_search [], char char_to_search_for, int search_length) {
    int count = 0;
    for (char *p = array_to_search;; p++) {
        p = strchr (p, char_to_search_for);
        if (p != NULL && (p - array_to_search < search_length))
            count++;
        else
            break;
    }
    return count;
}
----------------------------------------

int ch_search (char array_to_search [], char char_to_search_for, int array_size) {
    char *buffer = malloc (array_size +1);
    strncpy (buffer, array_to_search, array_size);
    buffer[array_size] = '\0';
    int count = 0;
    for (char *i = buffer; (i = strchr (i, char_to_search_for)) != NULL; i++) {
        count++;
    }
    free (buffer);
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49459963_49460053_4_16
49459963_49460077_4_17
Title: C - Int Array to Integer with Mixed Digit Numbers 
----------------------------------------

int main () {
    char dummy [100];
    int answer;
    int input [4] = {3, 4, 0, 345};
    sprintf (dummy, "%d%d%d%d", input [0], input [1], input [2], input [3]);
    answer = atoi (dummy);
    printf ("%d\n", answer);
    return 0;
}
----------------------------------------

int main (void) {
    int arr [] = {0, 6, 88, 54};
    char buffer [1000] = {0};
    for (size_t i = 0; i < sizeof arr / sizeof *arr; ++i)
        sprintf (buffer, "%s%d", buffer, arr[i]);
    int val = strtol (buffer, NULL, 10);
    printf ("%d\n", val);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49468188_49468553_1_23
49468188_49468788_3_38
Title: C: assigning 2 dimensional array to another array 
----------------------------------------

int main () {
    FILE *fp = fopen ("fileA.txt", "r");
    if (fp == NULL) {
        return 0;
    }
    char name [200] [100], goods [200] [100], qty [200] [100], temp [200] [100];
    int x = 0, result = 0, i = 0;
    while ((fscanf (fp, "%[^,] , %[^,] , %s ", name[i], goods[i], qty[i])) == 3) {
        if (strcmp (goods[i], "Football") == 0) {
            strcpy (temp [x], qty [i]);
            if (strcmp (temp[x], temp[x + 1]) > 0) {
                result = x;
                x += 1;
            }
        }
    }
    printf ("%s is team leader in class. \n", name [result]);
    fclose (fp);
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    FILE *fp = fopen ("fileA.txt", "r");
    char buf [300];
    char name [200] [100];
    char goods [200] [100];
    char qty [200] [100];
    int i, qty, max_qty = 0, result = -1;
    if (fp == NULL) {
        fprintf (stderr, "cannot open file\n");
        return 1;
    }
    for (i = 0; i < 200; i++) {
        if (!fgets (buf, sizeof buf, fp))
            break;
        if (sscanf (buf, " %99[^,], %99[^,],%99s", name[i], item[i], qty[i]) != 3) {
            fprintf (stderr, "invalid input: %s\n", buf);
            break;
        }
        if (strcmp (item[i], "Football") == 0) {
            qty = atoi (qty[i]);
            if (result == -1 || qty > max_qty) {
                result = i;
            }
        }
    }
    if (result < 0)
        printf ("no Football fan at all!\n");
    else
        printf ("%s is team leader in class with %d in Football.\n", name[result], max_qty);
    fclose (fp);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49470849_49470960_5_27
49470849_49471233_18_32
Title: Counting number of words which starts with 'A' letter? - C 
----------------------------------------

int main () {
    char sentence [200];
    int i = 1;
    int counter = 0;
    printf ("Enter sentence: ");
    fgets (sentence, 200, stdin);
    if (sentence[0] == 'A')
        counter++;
    while (sentence[i] != '\n') {
        if (sentence[i - 1] == ' ' && sentence[i] == 'A')
            counter++;
        i++;
    }
    printf ("No. of A in string is %d\n", counter);
    return 0;
}
----------------------------------------

int main (void) {
    enum {N = 200};
    char sentence [N];
    char c = 'A';
    printf ("Enter sentence: ");
    fgets (sentence, N, stdin);
    printf ("No. of %c in string \"%s\" is %zu\n", c, sentence, count_words_start_with (sentence, c));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49474717_49474868_3_30
49474717_49474969_3_20
Title: "How do I print an ""x"" shape?" 
----------------------------------------

int main () {
    int size, row, column;
    scanf ("%d", & size);
    row = 0;
    while (row < size) {
        column = 0;
        while (column < size) {
            if (column == row || column == size - row - 1) {
                printf ("x");
            }
            else {
                printf (" ");
            }
            column++;
        }
        printf ("\n");
        row++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int size = 11;
    char line [size + 1];
    int i;
    for (i = 0; i < size; i++)
        line[i] = ' ';
    line[size] = '\0';
    int se = 0;
    int sw = size - 1;
    while (se < size && sw >= 0) {
        line[se] = line[sw] = 'x';
        printf ("%s\n", line);
        line[se++] = line[sw--] = ' ';
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49493926_49494525_1_58
49493926_49495421_4_21
Title: Write a C program that sequentially writes two strings into each other? 
----------------------------------------

int main (int argc, char **argv) {
    char str1 [] = "I love C-Programming!";
    char str2 [strlen (str1)];
    memset (str2, 'X', sizeof (str2));
    str2[strlen (str1) - 1] = 0;
    int length = strlen (str1);
    int i = 0;
    int j = length - 1;
    do {
        printf ("%s\n", str2);
        str2[i] = str1[i];
        str2[j] = str1[j];
    }
    while (i++ != j--);
    printf ("%s", str2);
    printf ("\n");
    printf ("\n");
    printf ("Final String = %s\n", str2);
    return 0;
}
----------------------------------------

int main () {
    char s1 [] = "XXXXXXXXXXXXXXXXXXXXX";
    const char s2 [] = "I love C-Programming!";
    const int n = strlen (s1);
    const int h = n / 2;
    int i;
    int j;
    puts (s1);
    for (i = 0, j = n - 1; i <= h; ++i, --j) {
        s1[i] = s2[i];
        s1[j] = s2[j];
        puts (s1);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49500409_49500470_3_14
49500409_49500548_4_18
Title: "Loop inverse of pointer last character?" 
----------------------------------------

int main () {
    char str [128] = "Some Text";
    char *p;
    int i;
    for (i = strlen (str); i > 0; i--) {
        str[i] = 0;
        printf (" value => %s \n ", str);
    }
    return 0;
}
----------------------------------------

int main () {
    char str [128] = "Some Text";
    char *p = str;
    char *end = str + strlen (str);
    for (; end > p; *(--end) = '\0') {
        printf (" value => %s \n", p);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49501907_49502431_20_35
49501907_49502694_4_24
Title: Trying to determine if a string contains a period 
----------------------------------------

void typenumber (char *str) {
    if (typeNumber (str) == 1) {
        printf ("String %s is a real number.\n", str);
    }
    if (typeNumber (str) == -1) {
        printf ("String %s is not a numeric value", str);
    }
    if (typeNumber (str) == 0) {
        printf ("String %s is an integer.\n", str);
    }
    return;
}
----------------------------------------

int typenumber (char *str) {
    int num_type = INT_NUM;
    if ((str == NULL) || (*str == '\0')) {
        printf ("Invalid input\n");
        return 0;
    }
    while (*str != '\0') {
        if (!isdigit (*str)) {
            if ((*str == '.') && (num_type == INT_NUM)) {
                num_type = REAL_NUM;
            }
            else {
                return -1;
            }
        }
        str++;
    }
    return num_type;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49503989_49504260_38_53
49503989_49504649_21_50
Title: Find Acronyms from a sentence in C 
----------------------------------------

int main () {
    char *acronymz [] = {"TBH", "BRB", "LOL", "IDK", "TTYL", "IRL", "TIA", "AFK", "CYA", "FYI", "OMG"};
    char *sentence1;
    printf ("Please enter a sentence no larger than 1000 characters: ");
    sentence1 = my_getline ();
    for (int i = 0; i < 11; i++) {
        if (strstr (sentence1, acronymz[i]) != NULL) {
            printf ("%s\n", acronymz [i]);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char *acronyms [] = {"TBH", "BRB", "LOL", "IDK", "TTYL", "IRL", "TIA", "AFK", "CYA", "FYI", "OMG"}, *delim = " \t\n,.!";
    char line [MAXC] = "", *p = NULL;
    size_t n = sizeof acronyms / sizeof *acronyms;
    printf ("Input [%d character max]: ", MAXC);
    if (read_line (line, MAXC, stdin) == NULL) {
        fprintf (stderr, "error: invalid input.\n");
        return 1;
    }
    puts ("Output:");
    p = strtok (line, delim);
    while (p != NULL) {
        size_t i;
        for (i = 0; i < n; i++) {
            if (strcmp (p, acronyms[i]) == 0) {
                printf ("%s\n", p);
                break;
            }
        }
        p = strtok (NULL, delim);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49503989_49504260_38_53
49503989_49507554_12_75
Title: Find Acronyms from a sentence in C 
----------------------------------------

int main () {
    char *acronymz [] = {"TBH", "BRB", "LOL", "IDK", "TTYL", "IRL", "TIA", "AFK", "CYA", "FYI", "OMG"};
    char *sentence1;
    printf ("Please enter a sentence no larger than 1000 characters: ");
    sentence1 = my_getline ();
    for (int i = 0; i < 11; i++) {
        if (strstr (sentence1, acronymz[i]) != NULL) {
            printf ("%s\n", acronymz [i]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    static const char s [] [LONGEST] = {"TBH", "BRB", "LOL", "IDK", "TTYL", "IRL", "TIA", "AFK", "CYA", "FYI", "OMG",};
    char sc [ARRAYSIZE (s)];
    char b [LONGEST];
    int word = -1;
    int c = 0;
    int i;
    memset (sc, 0, sizeof (sc));
    for (;;) {
        if (c == '\n')
            break;
        c = getchar ();
        if (word == -1) {
            if (issep (c))
                continue;
            if (c == '\n')
                break;
            word = 0;
        }
        if (word >= 0) {
            if (c != '\n' && !issep (c)) {
                if (word >= LONGEST)
                    continue;
                b[word] = c;
                ++word;
                continue;
            }
            if (word >= LONGEST) {
                word = -1;
                continue;
            }
            for (i = 0; i < ARRAYSIZE (s); ++i) {
                if (sc[i])
                    continue;
                if (memcmp (s[i], b, word) == 0)
                    sc[i] = 1;
            }
            word = -1;
        }
    }
    for (i = 0; i < ARRAYSIZE (s); ++i)
        if (sc[i])
            puts (s[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49503989_49504649_21_50
49503989_49507554_12_75
Title: Find Acronyms from a sentence in C 
----------------------------------------

int main (void) {
    const char *acronyms [] = {"TBH", "BRB", "LOL", "IDK", "TTYL", "IRL", "TIA", "AFK", "CYA", "FYI", "OMG"}, *delim = " \t\n,.!";
    char line [MAXC] = "", *p = NULL;
    size_t n = sizeof acronyms / sizeof *acronyms;
    printf ("Input [%d character max]: ", MAXC);
    if (read_line (line, MAXC, stdin) == NULL) {
        fprintf (stderr, "error: invalid input.\n");
        return 1;
    }
    puts ("Output:");
    p = strtok (line, delim);
    while (p != NULL) {
        size_t i;
        for (i = 0; i < n; i++) {
            if (strcmp (p, acronyms[i]) == 0) {
                printf ("%s\n", p);
                break;
            }
        }
        p = strtok (NULL, delim);
    }
    return 0;
}
----------------------------------------

int main () {
    static const char s [] [LONGEST] = {"TBH", "BRB", "LOL", "IDK", "TTYL", "IRL", "TIA", "AFK", "CYA", "FYI", "OMG",};
    char sc [ARRAYSIZE (s)];
    char b [LONGEST];
    int word = -1;
    int c = 0;
    int i;
    memset (sc, 0, sizeof (sc));
    for (;;) {
        if (c == '\n')
            break;
        c = getchar ();
        if (word == -1) {
            if (issep (c))
                continue;
            if (c == '\n')
                break;
            word = 0;
        }
        if (word >= 0) {
            if (c != '\n' && !issep (c)) {
                if (word >= LONGEST)
                    continue;
                b[word] = c;
                ++word;
                continue;
            }
            if (word >= LONGEST) {
                word = -1;
                continue;
            }
            for (i = 0; i < ARRAYSIZE (s); ++i) {
                if (sc[i])
                    continue;
                if (memcmp (s[i], b, word) == 0)
                    sc[i] = 1;
            }
            word = -1;
        }
    }
    for (i = 0; i < ARRAYSIZE (s); ++i)
        if (sc[i])
            puts (s[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49516685_49517464_29_43
49516685_49517773_36_51
Title: C Malloc of array within a struct 
----------------------------------------

int main (void) {
    long int a = 250;
    struct moeda m = initialize_return (a);
    m.return_value[0] = 2000;
    printf ("%lf", m.return_value [0]);
    struct moeda m2;
    m2.num_values = 20;
    moeda_alloc_values (& m2);
    m2.return_value[0] = 2000;
    printf ("%lf", m2.return_value [0]);
    return 0;
}
----------------------------------------

int main (void) {
    size_t a = 250;
    moeda m = iniMoeda (a);
    if (m.var) {
        m.var[0] = 2000;
        printf ("%lf", m.var [0]);
    }
    else {
        printf ("m.var is NULL.\n");
    }
    freeMoeda (& m);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49516685_49517464_29_43
49516685_49518222_19_33
Title: C Malloc of array within a struct 
----------------------------------------

int main (void) {
    long int a = 250;
    struct moeda m = initialize_return (a);
    m.return_value[0] = 2000;
    printf ("%lf", m.return_value [0]);
    struct moeda m2;
    m2.num_values = 20;
    moeda_alloc_values (& m2);
    m2.return_value[0] = 2000;
    printf ("%lf", m2.return_value [0]);
    return 0;
}
----------------------------------------

int main () {
    long int a = 250;
    example *structure = NULL;
    structure = allocateMemory (a, structure);
    structure[0].number = 2000;
    printf ("%lf\n", structure [0].number);
    free (structure);
    structure = NULL;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49516685_49517464_29_43
49516685_49559571_28_59
Title: C Malloc of array within a struct 
----------------------------------------

int main (void) {
    long int a = 250;
    struct moeda m = initialize_return (a);
    m.return_value[0] = 2000;
    printf ("%lf", m.return_value [0]);
    struct moeda m2;
    m2.num_values = 20;
    moeda_alloc_values (& m2);
    m2.return_value[0] = 2000;
    printf ("%lf", m2.return_value [0]);
    return 0;
}
----------------------------------------

int main (void) {
    size_t n_coins = 3;
    coin mycoin;
    mycoin.ret = malloc (n_coins * sizeof (double));
    if (!mycoin.ret) {
        perror ("malloc failed");
        exit (EXIT_FAILURE);
    }
    mycoin.ret[0] = 2000.0;
    printf ("%lf", mycoin.ret [0]);
    free (mycoin.ret);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49516685_49517773_36_51
49516685_49518222_19_33
Title: C Malloc of array within a struct 
----------------------------------------

int main (void) {
    size_t a = 250;
    moeda m = iniMoeda (a);
    if (m.var) {
        m.var[0] = 2000;
        printf ("%lf", m.var [0]);
    }
    else {
        printf ("m.var is NULL.\n");
    }
    freeMoeda (& m);
    return 0;
}
----------------------------------------

int main () {
    long int a = 250;
    example *structure = NULL;
    structure = allocateMemory (a, structure);
    structure[0].number = 2000;
    printf ("%lf\n", structure [0].number);
    free (structure);
    structure = NULL;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49516685_49517773_36_51
49516685_49559571_28_59
Title: C Malloc of array within a struct 
----------------------------------------

int main (void) {
    size_t a = 250;
    moeda m = iniMoeda (a);
    if (m.var) {
        m.var[0] = 2000;
        printf ("%lf", m.var [0]);
    }
    else {
        printf ("m.var is NULL.\n");
    }
    freeMoeda (& m);
    return 0;
}
----------------------------------------

int main (void) {
    size_t n_coins = 3;
    coin mycoin;
    mycoin.ret = malloc (n_coins * sizeof (double));
    if (!mycoin.ret) {
        perror ("malloc failed");
        exit (EXIT_FAILURE);
    }
    mycoin.ret[0] = 2000.0;
    printf ("%lf", mycoin.ret [0]);
    free (mycoin.ret);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49516685_49518222_19_33
49516685_49559571_28_59
Title: C Malloc of array within a struct 
----------------------------------------

int main () {
    long int a = 250;
    example *structure = NULL;
    structure = allocateMemory (a, structure);
    structure[0].number = 2000;
    printf ("%lf\n", structure [0].number);
    free (structure);
    structure = NULL;
    return 0;
}
----------------------------------------

int main (void) {
    size_t n_coins = 3;
    coin mycoin;
    mycoin.ret = malloc (n_coins * sizeof (double));
    if (!mycoin.ret) {
        perror ("malloc failed");
        exit (EXIT_FAILURE);
    }
    mycoin.ret[0] = 2000.0;
    printf ("%lf", mycoin.ret [0]);
    free (mycoin.ret);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49531219_49531709_1_21
49531219_49531825_4_18
Title: C replace special character 
----------------------------------------

int main () {
    int i, j = 0;
    char str [] = "HELLO'All";
    char pch [128] = {0};
    for (i = 0; i < strlen (str); i++) {
        if (str[i] == '\'') {
            pch[j] = '\\';
            j++;
            pch[j] = '\'';
            pch[++j] = str[i];
            continue;
        }
        pch[j++] = str[i];
    }
    printf ("pch = *%s* \n", pch);
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    char str [] = "HELLO'All";
    char pch [128];
    for (i = j = 0, str[i] != '\0'; i++) {
        if (str[i] == '\'') {
            pch[j++] = '\\';
        }
        pch[j++] = str[i];
    }
    pch[j] = '\0';
    printf ("pch = *%s*\n", pch);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49547455_49549468_41_55
49547455_49550832_49_70
Title: Structures/Linked Lists/Pointers/Strings in C 
----------------------------------------

int main () {
    insertNode ("Alice", 1, 'F');
    insertNode ("Peter", 2, 'M');
    insertNode ("Mike", 3, 'M');
    while (head != NULL) {
        printf ("%s\n", (* head).name);
        head = (*head).next;
    }
}
----------------------------------------

int main (void) {
    student *head = NULL;
    insertnode (& head, "Alice", 1000, 'F');
    insertnode (& head, "Peter", 1001, 'M');
    insertnode (& head, "Mike", 1002, 'M');
    student *iter = head;
    while (iter != NULL) {
        printf ("%-8s  %4d  %c\n", iter -> name, iter -> idnum, iter -> sex);
        iter = iter->next;
    }
    while (head != NULL) {
        student *victim = head;
        head = head->next;
        free (victim -> name);
        free (victim);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49563155_49563944_20_54
49563155_49565602_60_118
Title: Point arrays to same memory location 
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    tstStruct_t mytst [4];
    struct1_t struct1;
    struct2_t struct2;
    memset (& struct2, 0, sizeof (struct2_t));
    for (i = 0; i < 4; i++) {
        mytst[i].tst1 = i + 23;
        mytst[i].tst2 = i + 37;
    }
    struct1.tst = &mytst;
    printf ("tst1: %d\n", struct1.tst [0] -> tst1);
    for (i = 0; i < 4; i++) {
        struct2.tst[i] = mytst[i];
    }
    struct1.tst = &struct2.tst;
    for (i = 0; i < 4; i++) {
        struct1.var[i] = struct2.var[i];
    }
    struct2.tst[0].tst1 = 1;
    printf ("frame1: %d\n", struct1.tst [0] -> tst1);
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    tstStruct_t xtst [4];
    struct1_t struct1 = {&xtst, 0};
    struct1_2_t struct1_2_1 = mapStruct1_to_1_2 (&struct1);
    struct2_t struct2 = {0};
    struct1_2_t struct1_2_2 = mapStruct2_to_1_2 (&struct2);
    for (i = 0; i < 4; i++) {
        tstStruct_t *p = struct1.tst;
        p[i].tst1 = 50 + i;
        p[i].tst2 = 500 + i;
        struct1.var[i] = i + 5000;
    }
    for (i = 0; i < 4; i++) {
        struct2.tst[i].tst1 = 10 + i;
        struct2.tst[i].tst2 = 100 + i;
        struct2.var[i] = i + 1000;
    }
    printf ("Step 1 printStructs1(struct1, struct1_2_1). Are they the same?\n");
    printStructs1 (struct1, struct1_2_1);
    printf ("Step 2 printStructs2(struct2, struct1_2_2). Are they the same?\n");
    printStructs2 (struct2, struct1_2_2);
    for (i = 0; i < 4; i++) {
        struct1_2_1.tst[i].tst1 *= 2;
        struct1_2_1.tst[i].tst2 *= 12;
        struct1_2_1.var[i] += 120;
    }
    printf ("Step 3 printStructs1(struct1, struct1_2_1). Are they the same?\n");
    printStructs1 (struct1, struct1_2_1);
    for (i = 0; i < 4; i++) {
        struct1_2_2.tst[i].tst1 *= 3;
        struct1_2_2.tst[i].tst2 *= 14;
        struct1_2_2.var[i] += 150;
    }
    printf ("Step 4 printStructs2(struct2, struct1_2_2). Are they the same?\n");
    printStructs2 (struct2, struct1_2_2);
    updateStructs1 (& struct1_2_1);
    printf ("Step 5 printStructs1(struct1, struct1_2_1). Are they the same?\n");
    printStructs1 (struct1, struct1_2_1);
    updateStructs1 (& struct1_2_2);
    printf ("Step 6 printStructs2(struct2, struct1_2_2). Are they the same?\n");
    printStructs2 (struct2, struct1_2_2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49564216_49564453_3_16
49564216_49565057_5_29
Title: sprintf to convert hexadecimal array to decimal char array only reads first byte 
----------------------------------------

int main (void) {
    unsigned char datalog [4];
    char finalarray [20] = {0};
    datalog[0] = 0xa3;
    datalog[1] = 0x50;
    datalog[2] = 0xce;
    datalog[3] = 0x00;
    sprintf (finalarray, "%lu", * (unsigned long *) datalog);
    printf ("Answer: %s\n", finalarray);
    return 0;
}
----------------------------------------

int main () {
    uint8_t datalog [4];
    datalog[0] = 0;
    datalog[1] = 0xce;
    datalog[2] = 0x50;
    datalog[3] = 0xa3;
    uint32_t temp = *((uint32_t *) datalog);
    printf ("%u\n", temp);
    uint8_t datalog2 [4];
    datalog2[0] = 0xa3;
    datalog2[1] = 0x50;
    datalog2[2] = 0xce;
    datalog2[3] = 0;
    uint32_t temp2 = *((uint32_t *) datalog2);
    printf ("%u\n", temp2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49566557_49566726_24_38
49566557_49566730_21_62
Title: Write a program which places user's input in a float array until user inserts 0 
----------------------------------------

int main (void) {
    float numbers [N];
    size_t size = 0;
    while (size < N && scanf ("%f", numbers +size) == 1 && numbers[size] != 0) {
        size++;
    }
    for (size_t i = 0; i < size; i++) {
        printf ("%.2f ", numbers [i]);
    }
    float result;
    sum (numbers, size, & result);
    printf ("\nSuma elementow tablicy T[%zu]: %f\n", size, result);
    avg (numbers, size, & result);
    printf ("Srednia elementow tablicy T[%zu]: %f\n", size, result);
}
----------------------------------------

int main () {
    unsigned int size = 1, i;
    float T [N], val = 0, wynik = 0;
    float *result = &wynik, *tab = T;
    while (scanf ("%f", &val) == 1 && val != 0) {
        if (scanf ("%f", &val) == 0) {
            printf ("Wprowadzono niepoprawny znak. Koczenie...\n");
            return 0;
        }
        else if (val == 0) {
            break;
        }
        else {
            *tab = val;
            tab++;
            size++;
        }
    }
    tab = T;
    for (i = 0; i < size - 1; i++) {
        printf ("%.2lf ", * tab);
        tab++;
    }
    tab = T;
    sum (tab, size, & wynik);
    printf ("\nSuma elementow tablicy T[%u]: %f\n", size - 1, wynik);
    avg (tab, size, & wynik);
    printf ("Srednia elementow tablicy T[%u]: %f\n", size - 1, wynik);
    getch ();
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49581349_49581820_7_51
49581349_49581832_1_18
Title: How to get return value from child process to parent? 
----------------------------------------

int main (int argc, char *argv []) {
    pid_t childpid;
    int i, fib_sum = 0, fib1 = 1, fib2 = 1, temp, status;
    int fd [2];
    int val = 0;
    pipe (fd);
    childpid = fork ();
    if (childpid != 0) {
        close (fd [1]);
        read (fd [0], & val, sizeof (val));
        printf ("Parent received value: %d\n", val);
        close (fd [0]);
    }
    else {
        close (fd [0]);
        for (i = 1; i <= 12; i++) {
            temp = fib1;
            fib_sum = fib1 + fib2;
            fib1 = fib_sum;
            fib2 = temp;
        }
        write (fd [1], & fib_sum, sizeof (fib_sum));
        printf ("Child send value: %d\n", fib_sum);
        close (fd [1]);
        return fib_sum;
    }
}
----------------------------------------

int main (int argc, char *argv []) {
    int fib_sum = 0;
    if (argc <= 1) {
        print_usage ();
        return 1;
    }
    FILE *f = fopen (argv[1], "w");
    if (f == NULL) {
        printf ("Error opening file!\n");
        return 1;
    }
    fprintf (f, "%d", fib_sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49582461_49582532_4_42
49582461_49582768_4_45
Title: Why is my C program not asking for char choice 
----------------------------------------

int main () {
    int mynumholder [100], userinput, i;
    char userchoice;
    printf ("Enter the number that you want to be converted: ");
    scanf ("%d", & userinput);
    printf ("Press B for binary and O for Octal: ");
    scanf (" %c", & userchoice);
    if (userchoice == 'B' || userchoice == 'b') {
        for (i = 0; userinput > 0; ++i) {
            mynumholder[i] = userinput % 2;
            userinput = userinput / 2;
        }
        printf ("Now I will print the binary values: ");
        for (i = i - 1; i >= 0; --i)
            printf ("%d", mynumholder[i]);
    }
    else {
        if (userchoice == 'O' || userchoice == 'o') {
            int o = 0;
            while (userinput > 0) {
                mynumholder[o] = userinput % 8;
                userinput = userinput / 8;
            }
            for (i = i - 1; i >= 0; i--)
                printf ("%d\n", mynumholder[o]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int mynumholder [100];
    int userinput;
    int i;
    char userchoice;
    printf ("Enter the number that you want to be converted.");
    scanf ("%d", & userinput);
    printf ("Click B for binary and O for Octal");
    scanf (" %c", & userchoice);
    if (userchoice == 'B') {
        for (i = 0; userinput > 0; i++) {
            mynumholder[i] = userinput % 2;
            userinput = userinput / 2;
        }
        printf ("Now I will print the binary values");
        for (i = i - 1; i >= 0; i--) {
            printf ("%d", mynumholder [i]);
        }
    }
    else {
        if (userchoice == 'O') {
            int o = 0;
            while (userinput > 0) {
                mynumholder[o++] = userinput % 8;
                userinput = userinput / 8;
            }
            for (o = o - 1; o >= 0; o--) {
                printf ("%d\n", mynumholder [o]);
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49595265_49595862_19_33
49595265_49596202_14_32
Title: How to split a text file using tab space in c? 
----------------------------------------

int main (void) {
    char *line = NULL;
    size_t size;
    FILE *fp = fopen ("split_text.txt", "r");
    if (fp == NULL) {
        return -1;
    }
    while (getline (&line, &size, fp) != -1) {
        split_string (line);
    }
    free (line);
    return 0;
}
----------------------------------------

int main (void) {
    rec_t record [MAXR] = {{
            .idx = ""
        }
    }, tmp = {
        .idx = ""
    };
    unsigned n = 0;
    while (n < MAXR) {
        int rtn = scanf (" %7s\t%63[^\t]\t%u\t%lf", tmp.idx, tmp.desc, &tmp.n, &tmp.price);
        if (rtn == EOF)
            break;
        if (rtn == 4)
            record[n++] = tmp;
    }
    for (unsigned i = 0; i < n; i++)
        printf ("record[%3u]:  %-8s %-24s %3u    %9.2f\n", i, record[i].idx, record[i].desc, record[i].n, record[i].price);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49595265_49595862_19_33
49595265_49596773_17_43
Title: How to split a text file using tab space in c? 
----------------------------------------

int main (void) {
    char *line = NULL;
    size_t size;
    FILE *fp = fopen ("split_text.txt", "r");
    if (fp == NULL) {
        return -1;
    }
    while (getline (&line, &size, fp) != -1) {
        split_string (line);
    }
    free (line);
    return 0;
}
----------------------------------------

int main () {
    char line [256];
    char filename [] = "input_file.txt";
    int lineno = 0;
    FILE *fp = fopen (filename, "r");
    if (fp != NULL) {
        while (fgets (line, sizeof line, fp)) {
            char *p = line;
            char *reference = getfield (&p, '\t');
            char *description = getfield (&p, '\t');
            char *quantity = getfield (&p, '\t');
            char * price = strtod (getfield (& p, '\n');
            lineno++;
            if (price != NULL) {
                printf ("reference: %s\n, reference);
                printf(" description : % s \ n, description);
                printf ("quantity: %d\n, atoi(quantity));
                printf(" price : %.2f \ n \ n, strtod (price, NULL));
            }
            else {
                fprintf (stderr, "%s:%d: invalid line\n", filename, lineno);
            }
        }
        fclose (fp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49595265_49596202_14_32
49595265_49596773_17_43
Title: How to split a text file using tab space in c? 
----------------------------------------

int main (void) {
    rec_t record [MAXR] = {{
            .idx = ""
        }
    }, tmp = {
        .idx = ""
    };
    unsigned n = 0;
    while (n < MAXR) {
        int rtn = scanf (" %7s\t%63[^\t]\t%u\t%lf", tmp.idx, tmp.desc, &tmp.n, &tmp.price);
        if (rtn == EOF)
            break;
        if (rtn == 4)
            record[n++] = tmp;
    }
    for (unsigned i = 0; i < n; i++)
        printf ("record[%3u]:  %-8s %-24s %3u    %9.2f\n", i, record[i].idx, record[i].desc, record[i].n, record[i].price);
}
----------------------------------------

int main () {
    char line [256];
    char filename [] = "input_file.txt";
    int lineno = 0;
    FILE *fp = fopen (filename, "r");
    if (fp != NULL) {
        while (fgets (line, sizeof line, fp)) {
            char *p = line;
            char *reference = getfield (&p, '\t');
            char *description = getfield (&p, '\t');
            char *quantity = getfield (&p, '\t');
            char * price = strtod (getfield (& p, '\n');
            lineno++;
            if (price != NULL) {
                printf ("reference: %s\n, reference);
                printf(" description : % s \ n, description);
                printf ("quantity: %d\n, atoi(quantity));
                printf(" price : %.2f \ n \ n, strtod (price, NULL));
            }
            else {
                fprintf (stderr, "%s:%d: invalid line\n", filename, lineno);
            }
        }
        fclose (fp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49601261_49601506_3_32
49601261_49601807_2_27
Title: c scaning for 2D arrays 
----------------------------------------

int main () {
    int st_objects;
    printf ("Square Matrix length \n");
    scanf ("%d", & st_objects);
    int x_cord;
    int y_cord;
    int array [st_objects] [st_objects];
    for (int i = 0; i < st_objects * st_objects; i++) {
        printf ("x-position  \n");
        scanf ("%d", & x_cord);
        printf ("y-position   \n");
        scanf ("%d", & y_cord);
        scanf ("%d", & array [y_cord] [x_cord]);
    }
    for (int i = 0; i < st_objects; i++) {
        for (int j = 0; j < st_objects; j++) {
            printf ("%d ", array [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int st_objects;
    scanf ("%d", & st_objects);
    int x_cord;
    int y_cord;
    int array [st_objects] [st_objects];
    for (int i = 0; i < (st_objects * st_objects); i++) {
        printf ("Enter x,y coordinate:\n");
        scanf ("%d", & x_cord);
        scanf ("%d", & y_cord);
        if (x_cord < st_objects && y_cord < st_objects) {
            printf ("Enter value at x,y:\n");
            scanf ("%d", & array [x_cord] [y_cord]);
        }
        else
            printf ("\nWrong coordinate\n");
    }
    for (int i = 0; i < st_objects; i++) {
        for (int j = 0; j < st_objects; j++) {
            printf ("%d\t", array [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4961041_4961079_2_20
4961041_4961080_2_12
Title: C puzzle {MACRO} 
----------------------------------------

int main () {
    {
    }
    int a = 0, ooOoO = 0;
    {
        ooOoO += a;
    }
    printf ("%d", ooOoO);
    return 0;
}
----------------------------------------

int main () {
    int ooOoO = 0;
    {
        int a = 3;
        ooOoO += a;
    }
    printf ("%d", ooOoO);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4961041_4961080_2_12
4961041_4962423_2_15
Title: C puzzle {MACRO} 
----------------------------------------

int main () {
    int ooOoO = 0;
    {
        int a = 3;
        ooOoO += a;
    }
    printf ("%d", ooOoO);
    return 0;
}
----------------------------------------

int main () {
    {
    }
    int ooOoO = 0, a = 3;
    {
        ooOoO += a;
    }
    printf ("%d", ooOoO);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49610594_49610666_9_37
49610594_49610774_8_34
Title: Replacing three 'a' in with a single '*' in a string 
----------------------------------------

int main () {
    while ((c = getchar ()) != '\n') {
        buffer[counter] = c;
        counter++;
        if (counter > 255) {
            break;
        }
    }
    buffer[counter] = 0;
    for (i = 0, j = 0; i < 256; i++, j++) {
        if (buffer[i] == 'a' && buffer[i + 1] == 'a' && buffer[i + 2] == 'a') {
            output[j] = '*';
            i += 2;
        }
        else
            output[j] = buffer[i];
        putchar (output [j]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    while ((c = getchar ()) != '\n') {
        buffer[counter] = c;
        counter++;
        if (counter >= 255) {
            break;
        }
    }
    buffer[counter] = '\0';
    for (i = 0; i < 256; i++) {
        if (buffer[i] == 'a' && buffer[i + 1] == 'a' && buffer[i + 2] == 'a') {
            buffer[i] = '*';
            putchar (buffer [i]);
            i = i + 2;
            continue;
        }
        putchar (buffer [i]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49610594_49610666_9_37
49610594_49612674_3_26
Title: Replacing three 'a' in with a single '*' in a string 
----------------------------------------

int main () {
    while ((c = getchar ()) != '\n') {
        buffer[counter] = c;
        counter++;
        if (counter > 255) {
            break;
        }
    }
    buffer[counter] = 0;
    for (i = 0, j = 0; i < 256; i++, j++) {
        if (buffer[i] == 'a' && buffer[i + 1] == 'a' && buffer[i + 2] == 'a') {
            output[j] = '*';
            i += 2;
        }
        else
            output[j] = buffer[i];
        putchar (output [j]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main () {
    char buffer [256];
    int c;
    size_t i, j, counter;
    for (counter = 0; counter < sizeof (buffer) - 1; counter++) {
        if ((c = getchar ()) == EOF || c == '\n')
            break;
        buffer[counter] = c;
    }
    buffer[counter] = '\0';
    for (i = j = 0; i < counter; i++, j++) {
        if (buffer[i] == 'a' && buffer[i + 1] == 'a' && buffer[i + 2] == 'a') {
            buffer[j] = '*';
            i += 2;
        }
        else {
            buffer[j] = buffer[i];
        }
    }
    buffer[j] = '\0';
    printf ("modified string: %s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49610594_49610774_8_34
49610594_49612674_3_26
Title: Replacing three 'a' in with a single '*' in a string 
----------------------------------------

int main (void) {
    while ((c = getchar ()) != '\n') {
        buffer[counter] = c;
        counter++;
        if (counter >= 255) {
            break;
        }
    }
    buffer[counter] = '\0';
    for (i = 0; i < 256; i++) {
        if (buffer[i] == 'a' && buffer[i + 1] == 'a' && buffer[i + 2] == 'a') {
            buffer[i] = '*';
            putchar (buffer [i]);
            i = i + 2;
            continue;
        }
        putchar (buffer [i]);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main () {
    char buffer [256];
    int c;
    size_t i, j, counter;
    for (counter = 0; counter < sizeof (buffer) - 1; counter++) {
        if ((c = getchar ()) == EOF || c == '\n')
            break;
        buffer[counter] = c;
    }
    buffer[counter] = '\0';
    for (i = j = 0; i < counter; i++, j++) {
        if (buffer[i] == 'a' && buffer[i + 1] == 'a' && buffer[i + 2] == 'a') {
            buffer[j] = '*';
            i += 2;
        }
        else {
            buffer[j] = buffer[i];
        }
    }
    buffer[j] = '\0';
    printf ("modified string: %s\n", buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49612210_49614327_5_40
49612210_49641750_16_41
Title: C reverse two words in a single string in a void function 
----------------------------------------

static void reverse (char *name) {
    char c1, c2;
    size_t pos1 = 0, pos2 = 0, pos_sep, name_len, count;
    {
        char *p_sep = strchr (name, ' ');
        if (!p_sep) {
            return;
        }
        pos_sep = p_sep - name;
        name_len = pos_sep + strlen (p_sep);
    }
    c1 = name[0];
    for (count = name_len; count != 0; count--) {
        {
            if (pos2 < pos_sep) {
                pos2 = pos2 + name_len - pos_sep;
            }
            else if (pos2 > pos_sep) {
                pos2 = pos2 - (pos_sep + 1);
            }
            else {
                pos2 = name_len - (pos_sep + 1);
            }
            c2 = name[pos2];
            name[pos2] = c1;
            c1 = c2;
            if (pos2 == pos1) {
                pos1++;
                pos2 = pos1;
                c1 = name[pos1];
            }
        }
    }
}
----------------------------------------

void reverse (char *name) {
    char genFirst [strlen (name) + 1];
    char genSecond [strlen (name) + 1];
    memset (genFirst, '\0', strlen (name));
    memset (genSecond, '\0', strlen (name));
    size_t i;
    for (i = 0; name[i] && name[i] != ' '; i++) {
        genFirst[i] = name[i];
    }
    i++;
    for (size_t j = 0; name[j]; j++) {
        genSecond[j] = name[i + j];
    }
    genSecond[i] = ' ';
    strcpy (name, genSecond);
    strcat (name, genFirst);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49618293_49618383_18_32
49618293_49618401_17_28
Title: Using Functions to Pass an Array 
----------------------------------------

void DisplayArray (int a [2] [2]) {
    int i, j;
    printf ("\n The 2-D Array contains : \n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++) {
            printf ("%d \n", a [i] [j]);
            if (j == 2)
                printf ("\n");
        }
    }
}
----------------------------------------

void DisplayArray (int a [2] [2]) {
    int i, j;
    printf ("\n The 2-D Array contains : \n");
    for (i = 0; i < 2; i++)
        for (j = 0; j < 2; j++) {
            printf ("%d ", a [i] [j]);
            if (j == 1)
                printf ("\n");
        }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49618293_49618383_2_17
49618293_49618401_4_16
Title: Using Functions to Pass an Array 
----------------------------------------

int main () {
    int a [2] [2], i, j, k;
    printf ("***** Functions ***** \n");
    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++) {
            printf ("\n Enter numeric values for each Array [%d] [%d]: \n", i, j);
            scanf ("%d", & a [i] [j]);
        }
    }
    DisplayArray (a);
    return 0;
}
----------------------------------------

int main () {
    int a [2] [2], i, j, k;
    printf ("***** Functions ***** \n");
    for (i = 0; i < 2; i++)
        for (j = 0; j < 2; j++) {
            printf ("\n Enter numeric values for each Array [%d] [%d]: \n", i, j);
            scanf (" %d", & a [i] [j]);
            DisplayArray (a);
        }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49623290_49623381_6_24
49623290_49624147_1_10
Title: read() end line not being found causing code to output weird symbol 
----------------------------------------

int main (int argc, char **argv) {
    char buf [10];
    int ret;
    while (1) {
        ret = read (0, buf, sizeof (buf) - 1);
        if (ret == -1) {
            printf ("error:%s\n", strerror (errno));
            break;
        }
        else if (ret == 0) {
            break;
        }
        else {
            buf[ret] = '\0';
            printf ("%s\n", buf);
        }
    }
    return (0);
}
----------------------------------------

int main (int argc, char **argv) {
    char buf [10] = {'\0'};
    int ret;
    while (1) {
        ret = read (0, buf, sizeof buf);
        printf ("\n%s\n", buf);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
496330_496346_4_24
496330_496403_4_21
Title: Help with custom getline() function 
----------------------------------------

char *getline (int lim) {
    char c;
    int i;
    char *line, *tmp;
    tmp = line = malloc (sizeof (char) * lim);
    i = 0;
    while ((c = getchar ()) != '\n' && c != EOF && i < lim - 1) {
        *tmp = c;
        tmp++;
        i++;
    }
    *tmp = '\0';
    printf ("%s", line);
    return line;
}
----------------------------------------

char *getline (int lim) {
    char *result = malloc (sizeof (char) * lim);
    int i = 0;
    char c;
    char *line = result;
    while ((c = getchar ()) != '\n' && c != EOF && i < lim - 1) {
        *line = c;
        line++;
        i++;
    }
    *line = '\0';
    printf ("%s", result);
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49647858_49651145_21_69
49647858_49675311_26_64
Title: Storing user input whilst still asking questions 
----------------------------------------

int main () {
    int i, a;
    char wit [10] = "witness";
    char yes [10] = "yes";
    char comp1 [10];
    fp = fopen ("sheetstore.dat", "a+");
    printf ("Hate crime reporting system\n\n\n");
    printf ("If the crime you are reporting is an emergency,\nplease call 999, do not proceed any further with this form\n\n\n\nPlease press enter to confirm you have read the above and continue\n");
    char enter = 0;
    while (enter != '\r' && enter != '\n') {
        enter = getchar ();
    }
    for (i = 0; i < ARRAYLEN; i++) {
        printf ("Which police constabulary did the offence take place in?\n\n");
        scanf ("%s", sheetArr [i].constab);
        printf ("Are you a victim or witness of the crime?\nPlease answer victim/witness\n\n");
        scanf ("%s", sheetArr [i].comp1);
        int res1 = (strcmp (sheetArr[i].comp1, wit));
        if (res1 == 0) {
            printf ("Please enter the details including phone number and address of any other witnesses that were present\n");
            scanf ("%s", sheetArr [i].witdet);
        }
        else {
            printf ("Where did the incident take place?\nIf in a house please provide the full address including postcode\n");
            scanf ("%s", sheetArr [i].incdest);
        }
        fwrite (& sheetArr [i], sizeof (sheetstore), 1, fp);
    }
    fclose (fp);
    fopen ("sheetstore.dat", "r");
    for (i = 0; i < ARRAYLEN; i++) {
        fread (& sheetArr [i], sizeof (sheetstore), 1, fp);
        printf ("Which police constabulary did the offence take place in? : %s\n", sheetArr [i].constab);
        printf ("Are you a victim or witness of the crime? : %s\n", sheetArr [i].comp1);
        printf ("Please enter the details including phone number and address of any other witnesses that were present : %s\n", sheetArr [i].witdet);
        printf ("Where did the incident take place? : %s\n", sheetArr [i].incdest);
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    char wit [10] = "witness";
    char comp1 [10];
    fp = fopen ("sheetstore.dat", "a+");
    if (!fp) {
        perror ("fopen for appending to 'sheetstore.dat' failed");
        exit (EXIT_FAILURE);
    }
    puts ("Hate crime reporting system\n\n\n");
    puts ("If the crime you are reporting is an emergency,\n" "please call 999, " " do not proceed any further with this form\n\n\n\n" "Please press enter" " to confirm you have read the above and continue\n");
    int enter = 0;
    while (enter != '\r' && enter != '\n') {
        enter = getchar ();
    }
    for (i = 0;
    i < ARRAYLEN;
    i ++) {puts ("Which police constabulary did the offence take place in?\n\n");
    if (scanf ("%29s", a [i].constab) != 1) {fprintf (stderr, "scanf for which police constabulary failed");
    fclose (fp);
    exit (EXIT_FAILURE);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4966121_4966309_1_26
4966121_4966337_2_19
Title: C Code for Hexadecimal without using standard libraries 
----------------------------------------

int main (void) {
    char hexChars [] = "0123456789ABCDEF";
    char ipString [] = "172.24.18.254";
    char hexString [9] = "";
    const char *pch = ipString;
    int num = 0;
    int i = 0;
    do {
        if (*pch != '.' && *pch != '\0') {
            num *= 10;
            num += (*pch - '0');
        }
        else {
            hexString[i++] = hexChars[num / 16];
            hexString[i++] = hexChars[num % 16];
            num = 0;
        }
    }
    while (*pch++);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char *ipString = argc > 1 ? argv[1] : "172.24.18.240";
    char *ip = ipString;
    unsigned int hex;
    for (int i = 0; i < 4; i++) {
        unsigned int n = 0;
        for (char c; (c = *ip) >= '0' && c <= '9'; ip++)
            n = 10 * n + c - '0';
        hex = (hex << 8) + n;
        if (*ip == '.')
            ip++;
    }
    printf ("%08X\n", hex);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49665449_49665790_15_59
49665449_49665848_16_58
Title: How to keep track of the initial head pointer in C? 
----------------------------------------

struct equipment *append_to_list (struct equipment *list) {
    char type [NAME_LEN + 1], description [NAME_LEN + 1];
    int quantity;
    printf ("Enter equipment type: ");
    fgets (type, NAME_LEN, stdin);
    printf ("Enter description of the equipment: ");
    fgets (description, NAME_LEN, stdin);
    printf ("Enter quantity: ");
    scanf ("%d", & quantity);
    struct equipment *temp = (struct equipment *) malloc (sizeof (struct equipment));
    strcpy (temp -> type, type);
    strcpy (temp -> description, description);
    temp->quantity = quantity;
    temp->next = NULL;
    bool doesExist = false;
    static struct equipment *head = NULL;
    if (list == NULL) {
        list = temp;
        head = list;
    }
    else {
        while (list->next != NULL) {
            if (list == temp) {
                printf ("This equipment is already in the list\n");
            }
            list = list->next;
        }
        list->next = temp;
    }
    return head;
}
----------------------------------------

struct equipment *append_to_list (struct equipment *list) {
    char type [BUFSIZ], description [BUFSIZ], quantity_string [BUFSIZ];
    int quantity;
    nputs ("Enter equipment type: ");
    fgets (type, BUFSIZ, stdin);
    nputs ("Enter description of the equipment: ");
    fgets (description, BUFSIZ, stdin);
    nputs ("Enter quantity: ");
    fgets (quantity_string, BUFSIZ, stdin);
    char *endptr;
    quantity = strtol (quantity_string, &endptr, 10);
    if (quantity_string == endptr) {
        fprintf (stderr, "Error: invalid integer input '%s'\n", quantity_string);
        exit (1);
    }
    struct equipment *temp = malloc (sizeof *temp);
    strlcpy (temp -> type, type, NAME_LEN);
    strlcpy (temp -> description, description, NAME_LEN);
    temp->quantity = quantity;
    temp->next = NULL;
    bool doesExist = false;
    if (list == NULL) {
        list = temp;
    }
    else {
        while (list->next != NULL) {
            if (list == temp)
                puts ("This equipment is already in the list");
            list = list->next;
        }
        list->next = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49674914_49675101_3_19
49674914_49675295_3_28
Title: Is there something wrong with my for loop causing it to display incorrect asterisks on screen? 
----------------------------------------

int main (void) {
    int height;
    int pad;
    puts ("Enter an integer> \n");
    scanf ("%d", & height);
    puts ("Enter padding columns> \n");
    scanf ("%d", & pad);
    for (int i = 0; i < height; ++i) {
        printf ("%*s%*.*s\n", pad, "", height + i, 2 * i + 1, "********************");
    }
    return 0;
}
----------------------------------------

int main (void) {
    const char c = '*';
    while (1) {
        printf ("Enter a non-negative number (0 - exit): ");
        int n;
        if (scanf ("%d", &n) != 1 || n < 1)
            break;
        putchar ('\n');
        for (unsigned int i = 0; i < n; i++) {
            for (unsigned int j = 0; j < n - i - 1; j++)
                putchar (' ');
            for (unsigned int j = 0; j < 2 * i + 1; j++)
                putchar (c);
            putchar ('\n');
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49674914_49675101_3_19
49674914_49675545_3_32
Title: Is there something wrong with my for loop causing it to display incorrect asterisks on screen? 
----------------------------------------

int main (void) {
    int height;
    int pad;
    puts ("Enter an integer> \n");
    scanf ("%d", & height);
    puts ("Enter padding columns> \n");
    scanf ("%d", & pad);
    for (int i = 0; i < height; ++i) {
        printf ("%*s%*.*s\n", pad, "", height + i, 2 * i + 1, "********************");
    }
    return 0;
}
----------------------------------------

int main () {
    int inp;
    printf ("Enter an interger> \n");
    scanf ("%d", & inp);
    printf ("\nYou entered:  %d\n\n", inp);
    if (inp >= 1) {
        int i, space, j;
        for (i = 1; i <= inp; i++) {
            for (space = i; space <= inp - 1; space++) {
                printf (" ");
            }
            for (j = 1; j <= (2 * i) - 1; j++) {
                printf ("*");
            }
            printf ("\n");
        }
    }
    if (inp <= 0) {
        printf ("Input must be greater or equal to 1\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49674914_49675101_3_19
49674914_49675734_3_27
Title: Is there something wrong with my for loop causing it to display incorrect asterisks on screen? 
----------------------------------------

int main (void) {
    int height;
    int pad;
    puts ("Enter an integer> \n");
    scanf ("%d", & height);
    puts ("Enter padding columns> \n");
    scanf ("%d", & pad);
    for (int i = 0; i < height; ++i) {
        printf ("%*s%*.*s\n", pad, "", height + i, 2 * i + 1, "********************");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int inp;
    printf ("Enter an integer> \n");
    scanf ("%d", & inp);
    printf ("\n");
    if (inp >= 1) {
        for (int i = 0; i < inp; i++) {
            for (int space = 0; space < inp - i; space++) {
                printf (" ");
            }
            for (int j = 0; j < 2 * i + 1; j++) {
                printf ("*");
            }
            printf ("\n");
        }
    }
    if (inp <= 0) {
        printf ("Input must be greater or equal to 1\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49674914_49675295_3_28
49674914_49675545_3_32
Title: Is there something wrong with my for loop causing it to display incorrect asterisks on screen? 
----------------------------------------

int main (void) {
    const char c = '*';
    while (1) {
        printf ("Enter a non-negative number (0 - exit): ");
        int n;
        if (scanf ("%d", &n) != 1 || n < 1)
            break;
        putchar ('\n');
        for (unsigned int i = 0; i < n; i++) {
            for (unsigned int j = 0; j < n - i - 1; j++)
                putchar (' ');
            for (unsigned int j = 0; j < 2 * i + 1; j++)
                putchar (c);
            putchar ('\n');
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main () {
    int inp;
    printf ("Enter an interger> \n");
    scanf ("%d", & inp);
    printf ("\nYou entered:  %d\n\n", inp);
    if (inp >= 1) {
        int i, space, j;
        for (i = 1; i <= inp; i++) {
            for (space = i; space <= inp - 1; space++) {
                printf (" ");
            }
            for (j = 1; j <= (2 * i) - 1; j++) {
                printf ("*");
            }
            printf ("\n");
        }
    }
    if (inp <= 0) {
        printf ("Input must be greater or equal to 1\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49674914_49675295_3_28
49674914_49675734_3_27
Title: Is there something wrong with my for loop causing it to display incorrect asterisks on screen? 
----------------------------------------

int main (void) {
    const char c = '*';
    while (1) {
        printf ("Enter a non-negative number (0 - exit): ");
        int n;
        if (scanf ("%d", &n) != 1 || n < 1)
            break;
        putchar ('\n');
        for (unsigned int i = 0; i < n; i++) {
            for (unsigned int j = 0; j < n - i - 1; j++)
                putchar (' ');
            for (unsigned int j = 0; j < 2 * i + 1; j++)
                putchar (c);
            putchar ('\n');
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main (void) {
    int inp;
    printf ("Enter an integer> \n");
    scanf ("%d", & inp);
    printf ("\n");
    if (inp >= 1) {
        for (int i = 0; i < inp; i++) {
            for (int space = 0; space < inp - i; space++) {
                printf (" ");
            }
            for (int j = 0; j < 2 * i + 1; j++) {
                printf ("*");
            }
            printf ("\n");
        }
    }
    if (inp <= 0) {
        printf ("Input must be greater or equal to 1\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49674914_49675545_3_32
49674914_49675734_3_27
Title: Is there something wrong with my for loop causing it to display incorrect asterisks on screen? 
----------------------------------------

int main () {
    int inp;
    printf ("Enter an interger> \n");
    scanf ("%d", & inp);
    printf ("\nYou entered:  %d\n\n", inp);
    if (inp >= 1) {
        int i, space, j;
        for (i = 1; i <= inp; i++) {
            for (space = i; space <= inp - 1; space++) {
                printf (" ");
            }
            for (j = 1; j <= (2 * i) - 1; j++) {
                printf ("*");
            }
            printf ("\n");
        }
    }
    if (inp <= 0) {
        printf ("Input must be greater or equal to 1\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int inp;
    printf ("Enter an integer> \n");
    scanf ("%d", & inp);
    printf ("\n");
    if (inp >= 1) {
        for (int i = 0; i < inp; i++) {
            for (int space = 0; space < inp - i; space++) {
                printf (" ");
            }
            for (int j = 0; j < 2 * i + 1; j++) {
                printf ("*");
            }
            printf ("\n");
        }
    }
    if (inp <= 0) {
        printf ("Input must be greater or equal to 1\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49697460_1_25
49697227_49697942_28_78
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

int split (char *str, char ***arr) {
    int arrsz = 0;
    char delim [2] = ":";
    char *tok;
    *arr = malloc (sizeof (char **));
    *arr[0] = malloc (1);
    **arr[0] = '\0';
    tok = strtok (str, delim);
    while (tok != NULL) {
        arrsz++;
        *arr = (char **) realloc (*arr, (arrsz * sizeof (char *)) + 1);
        *arr[arrsz - 1] = malloc ((sizeof (char) * strlen (tok)) + 1);
        strcpy (* arr [arrsz - 1], tok);
        *arr[arrsz] = malloc (1);
        *arr[arrsz] = '\0';
        tok = strtok (NULL, delim);
    }
    return (arrsz);
}
----------------------------------------

int split (char *str, char **arr) {
    int arrsz = 0;
    char delim [2] = ":";
    char *tok;
    arr = malloc (sizeof (char **));
    tok = strtok (str, delim);
    while (tok != NULL) {
        arrsz++;
        arr = (char **) realloc (arr, sizeof (char *) * (arrsz + 1));
        arr[arrsz - 1] = strdup (tok);
        tok = strtok (NULL, delim);
    }
    return (arrsz);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49697460_1_25
49697227_49698040_27_49
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

int split (char *str, char ***arr) {
    int arrsz = 0;
    char delim [2] = ":";
    char *tok;
    *arr = malloc (sizeof (char **));
    *arr[0] = malloc (1);
    **arr[0] = '\0';
    tok = strtok (str, delim);
    while (tok != NULL) {
        arrsz++;
        *arr = (char **) realloc (*arr, (arrsz * sizeof (char *)) + 1);
        *arr[arrsz - 1] = malloc ((sizeof (char) * strlen (tok)) + 1);
        strcpy (* arr [arrsz - 1], tok);
        *arr[arrsz] = malloc (1);
        *arr[arrsz] = '\0';
        tok = strtok (NULL, delim);
    }
    return (arrsz);
}
----------------------------------------

int split (char *str, char ***arrreturn) {
    int arrsz = 1;
    int len = 0;
    char delim [2] = ":";
    char *tok;
    char **arr;
    arr = malloc (sizeof (char **));
    tok = strtok (str, delim);
    while (tok != NULL) {
        len++;
        if (len >= arrsz) {
            arrsz *= 2;
            arr = realloc (arr, arrsz * sizeof (char **));
        }
        arr[len - 1] = strdup (tok);
        tok = strtok (NULL, delim);
    }
    *arrreturn = arr;
    return (len);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49697460_1_25
49697227_49699396_9_33
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

int split (char *str, char ***arr) {
    int arrsz = 0;
    char delim [2] = ":";
    char *tok;
    *arr = malloc (sizeof (char **));
    *arr[0] = malloc (1);
    **arr[0] = '\0';
    tok = strtok (str, delim);
    while (tok != NULL) {
        arrsz++;
        *arr = (char **) realloc (*arr, (arrsz * sizeof (char *)) + 1);
        *arr[arrsz - 1] = malloc ((sizeof (char) * strlen (tok)) + 1);
        strcpy (* arr [arrsz - 1], tok);
        *arr[arrsz] = malloc (1);
        *arr[arrsz] = '\0';
        tok = strtok (NULL, delim);
    }
    return (arrsz);
}
----------------------------------------

string_list split (const char *pattern, const char *expr) {
    string_list list = {0, NULL};
    size_t length;
    while ((length = strspn (expr, pattern)), expr[length]) {
        expr += length;
        length = strcspn (expr, pattern);
        void *tmp = realloc (list.strings, sizeof *(list.strings) * (list.n + 1));
        if (tmp == NULL)
            TBD_Code ();
        list.strings = tmp;
        list.strings[list.n] = malloc (length +1u);
        if (list.strings[list.n] == 0)
            TBD_Code ();
        memcpy (list.strings [list.n], expr, length);
        list.strings[list.n][length] = '\0';
        list.n++;
        expr += length;
    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49697942_28_78
49697227_49698040_27_49
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

int split (char *str, char **arr) {
    int arrsz = 0;
    char delim [2] = ":";
    char *tok;
    arr = malloc (sizeof (char **));
    tok = strtok (str, delim);
    while (tok != NULL) {
        arrsz++;
        arr = (char **) realloc (arr, sizeof (char *) * (arrsz + 1));
        arr[arrsz - 1] = strdup (tok);
        tok = strtok (NULL, delim);
    }
    return (arrsz);
}
----------------------------------------

int split (char *str, char ***arrreturn) {
    int arrsz = 1;
    int len = 0;
    char delim [2] = ":";
    char *tok;
    char **arr;
    arr = malloc (sizeof (char **));
    tok = strtok (str, delim);
    while (tok != NULL) {
        len++;
        if (len >= arrsz) {
            arrsz *= 2;
            arr = realloc (arr, arrsz * sizeof (char **));
        }
        arr[len - 1] = strdup (tok);
        tok = strtok (NULL, delim);
    }
    *arrreturn = arr;
    return (len);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49697942_28_78
49697227_49699396_9_33
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

int split (char *str, char **arr) {
    int arrsz = 0;
    char delim [2] = ":";
    char *tok;
    arr = malloc (sizeof (char **));
    tok = strtok (str, delim);
    while (tok != NULL) {
        arrsz++;
        arr = (char **) realloc (arr, sizeof (char *) * (arrsz + 1));
        arr[arrsz - 1] = strdup (tok);
        tok = strtok (NULL, delim);
    }
    return (arrsz);
}
----------------------------------------

string_list split (const char *pattern, const char *expr) {
    string_list list = {0, NULL};
    size_t length;
    while ((length = strspn (expr, pattern)), expr[length]) {
        expr += length;
        length = strcspn (expr, pattern);
        void *tmp = realloc (list.strings, sizeof *(list.strings) * (list.n + 1));
        if (tmp == NULL)
            TBD_Code ();
        list.strings = tmp;
        list.strings[list.n] = malloc (length +1u);
        if (list.strings[list.n] == 0)
            TBD_Code ();
        memcpy (list.strings [list.n], expr, length);
        list.strings[list.n][length] = '\0';
        list.n++;
        expr += length;
    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49697942_8_25
49697227_49698282_9_24
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

void main (int argc, char *argv []) {
    int x;
    int arrsz;
    char str [] = "aaa:bbb:ccc";
    char **arr;
    arrsz = split (str, arr);
    for (x = 0; x < arrsz; x++) {
        printf ("%s\n", arr [x]);
    }
    exit (0);
}
----------------------------------------

int main (void) {
    size_t x;
    size_t arrsz;
    char str [] = "aaa:bbb:ccc";
    char **arr = split (str, &arrsz);
    for (x = 0; x < arrsz; x++) {
        printf ("%s\n", arr [x]);
    }
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49698040_27_49
49697227_49699396_9_33
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

int split (char *str, char ***arrreturn) {
    int arrsz = 1;
    int len = 0;
    char delim [2] = ":";
    char *tok;
    char **arr;
    arr = malloc (sizeof (char **));
    tok = strtok (str, delim);
    while (tok != NULL) {
        len++;
        if (len >= arrsz) {
            arrsz *= 2;
            arr = realloc (arr, arrsz * sizeof (char **));
        }
        arr[len - 1] = strdup (tok);
        tok = strtok (NULL, delim);
    }
    *arrreturn = arr;
    return (len);
}
----------------------------------------

string_list split (const char *pattern, const char *expr) {
    string_list list = {0, NULL};
    size_t length;
    while ((length = strspn (expr, pattern)), expr[length]) {
        expr += length;
        length = strcspn (expr, pattern);
        void *tmp = realloc (list.strings, sizeof *(list.strings) * (list.n + 1));
        if (tmp == NULL)
            TBD_Code ();
        list.strings = tmp;
        list.strings[list.n] = malloc (length +1u);
        if (list.strings[list.n] == 0)
            TBD_Code ();
        memcpy (list.strings [list.n], expr, length);
        list.strings[list.n][length] = '\0';
        list.n++;
        expr += length;
    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49697227_49698040_9_24
49697227_49698282_9_24
Title: "In C how can one dynamically build an array of strings in a function and return to caller" 
----------------------------------------

void main (int argc, char *argv []) {
    int x;
    int arrsz;
    char str [] = "aaa:bbb:ccc";
    char **arr;
    arrsz = split (str, &arr);
    for (x = 0; x < arrsz; x++) {
        printf ("%s\n", arr [x]);
    }
    exit (0);
}
----------------------------------------

int main (void) {
    size_t x;
    size_t arrsz;
    char str [] = "aaa:bbb:ccc";
    char **arr = split (str, &arrsz);
    for (x = 0; x < arrsz; x++) {
        printf ("%s\n", arr [x]);
    }
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49702444_49702960_1_34
49702444_49702985_5_20
Title: Concatenate strings literal in C 
----------------------------------------

int main (void) {
    const char *a = "3";
    const char *b = "2";
    char *dest = malloc (strlen (a) +1);
    if (dest == NULL) {
        fprintf (stderr, "Not enough memory\n");
        return 1;
    }
    strcpy (dest, a);
    char *tmp = realloc (a, strlen (a) +strlen (b) + 1);
    if (tmp == NULL) {
        fprintf (stderr, "Not enough memory\n");
        free (dest);
        return 1;
    }
    dest = tmp;
    strcat (dest, b);
    puts (dest);
    free (dest);
    return 0;
}
----------------------------------------

int main () {
    char *a = "3";
    char *b = "2";
    char *buf;
    buf = malloc (strlen (a) +strlen (b) + 1);
    if (buf == NULL) {
        exit (EXIT_FAILURE);
    }
    sprintf (buf, "%s%s", a, b);
    printf ("%s\n", buf);
    free (buf);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49702933_49703029_58_69
49702933_49703159_43_50
Title: Linked List in C too slow 
----------------------------------------

void print_list_data (struct List *list) {
    if (list == NULL)
        return;
    struct Node *current = list->head;
    while (current) {
        printf ("Node: %d\n", current -> data);
        current = current->next;
    }
}
----------------------------------------

void print_list_data (const struct Node *list) {
    const struct Node *tail = list;
    const struct Node *current = tail->next;
    do {
        printf ("Node: %d\n", current -> data);
        current = current->next;
    }
    while (current != tail);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49708766_49708819_4_27
49708766_49708826_1_18
Title: error: free(): invalid next size (fast) 
----------------------------------------

int main (void) {
    unsigned int n = 0;
    printf ("input a non-negative number:\t");
    scanf ("%u", & n);
    int *arr = malloc (n * sizeof (int));
    for (unsigned int i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
    }
    for (unsigned int i = 0; i < n; i++) {
        printf ("%d ", arr [i]);
    }
    putchar ('\n');
    free (arr);
    return 0;
}
----------------------------------------

int main () {
    int n;
    printf ("input number:\t");
    scanf ("%d", & n);
    int *arr = malloc (n * sizeof (*arr));
    if (arr == NULL) {
        printf ("memory allocation failed \n");
        exit (0);
    }
    for (int i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
    }
    for (int i = 0; i < n; i++) {
        printf ("%d", arr [i]);
    }
    free (arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49759849_49760061_4_17
49759849_49760085_4_24
Title: Malloc and double issue 
----------------------------------------

int main (int argc, const char **argv) {
    double *dd;
    dd = (double *) malloc (2 * sizeof (double));
    dd[0] = 35;
    dd[1] = 88.5;
    printf (" %2.1f ", dd [0]);
    printf (" %2.1f ", dd [1]);
    free (dd);
    return 0;
}
----------------------------------------

int main () {
    double *dd;
    dd = malloc (2 * sizeof *dd);
    if (dd == NULL) {
        fprintf (stderr, "Not enough memory\n");
        return 1;
    }
    dd[0] = 35;
    dd[1] = 88.5;
    printf (" %f\n", dd [0]);
    printf (" %f\n", dd [1]);
    free (dd);
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21357980_21358123_1_35
21357980_21358183_1_33
Title: Java - Printing out the least occurring elements in an array 
----------------------------------------

public static void main (String [] args) {
    int [] array = {1, 2, 3, 3, 2, 2, 4, 4, 5, 4};
    int count = 0;
    int maxCount = 10;
    int [] results = new int [array.length];
    int k = 0;
    for (int i = 0;
    i < results.length; i ++) {
        results [i] = - 1;
    }
    for (int i = 0;
    i < array.length; i ++) {
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == array [i]) {
                count ++;
            }
        }
        if (count <= maxCount) {
            maxCount = count;
            results [k ++] = array [i];
        }
        count = 0;
    }
    for (int i : results) {
        if (i != - 1) {
            System.out.println ("Element: " + i + ", Number of occurences: " + maxCount);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] array = {1, 2, 3, 3, 2, 2, 4, 4, 5, 4};
    Map < Integer, Integer > counts = new HashMap < > ();
    for (Integer i : array) {
        if (counts.get (i) == null) {
            counts.put (i, 1);
        } else {
            counts.put (i, counts.get (i) + 1);
        }
    }
    List < Integer > cs = new ArrayList < Integer > (counts.values ());
    Collections.sort (cs);
    int minVal = cs.get (0);
    List < Integer > minElements = new ArrayList < > ();
    for (Entry < Integer, Integer > entry : counts.entrySet ()) {
        if (entry.getValue () == minVal) {
            minElements.add (entry.getKey ());
        }
    }
    for (Integer i : minElements) {
        System.out.println ("Element: " + i + " Number of occurences: " + minVal);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21375463_21375954_1_11
21375463_21380147_10_23
Title: How can I change the background color of an activity dynamically within the onCreate statement with Android SDK? 
----------------------------------------

private void changeTheme () {
    if (settings.getBoolean ("Blue", true)) {
        View currentView = (View) findViewById (R.layout.home_screen);
        currentView.setBackgroundColor (getResources ().getColor (R.color.blue));
    } else if (settings.getBoolean ("Red", false)) {
        View currentView = (View) findViewById (R.layout.home_screen);
        currentView.setBackgroundColor (getResources ().getColor (R.color.red));
    }

}
----------------------------------------

private void changeTheme () {
    SharedPreferences settings = getSharedPreferences (Settings, 0);
    View currentView = (View) findViewById (R.id.activity_home_screen);
    if (settings.getBoolean ("Blue", true)) {
        currentView.setBackgroundColor (getResources ().getColor (R.color.blue));
    } else if (settings.getBoolean ("Red", false)) {
        currentView.setBackgroundColor (getResources ().getColor (R.color.red));
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_29742155_9_34
2137755_48291738_4_26
Title: How do I reverse an int array in Java? 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    row = n;
    int [] arr = new int [row];
    for (int i = 0;
    i < row; i ++) {
        arr [i] = sc.nextInt ();
        System.out.print (arr [i] + " ");
        System.out.println ();
    }
    for (int i = 0;
    i < arr.length / 2; i ++) {
        int temp = arr [i];
        arr [i] = arr [arr.length - i - 1];
        arr [arr.length - i - 1] = temp;
    }
    for (int i = 0;
    i < row; i ++) {
        System.out.print (arr [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] arra = new int [10];
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter Array Elements : ");
    for (int i = 0;
    i < arra.length; i ++) {
        arra [i] = sc.nextInt ();
    }
    System.out.println ("Printing  Array : ");
    for (int i = 0;
    i < arra.length; i ++) {
        System.out.print (arra [i] + " ");
    }
    System.out.println ();
    System.out.println ("Printing  Reverse Array : ");
    for (int i = arra.length - 1;
    i >= 0; i --) {
        System.out.print (arra [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_29742155_9_34
2137755_8991351_1_15
Title: How do I reverse an int array in Java? 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    row = n;
    int [] arr = new int [row];
    for (int i = 0;
    i < row; i ++) {
        arr [i] = sc.nextInt ();
        System.out.print (arr [i] + " ");
        System.out.println ();
    }
    for (int i = 0;
    i < arr.length / 2; i ++) {
        int temp = arr [i];
        arr [i] = arr [arr.length - i - 1];
        arr [arr.length - i - 1] = temp;
    }
    for (int i = 0;
    i < row; i ++) {
        System.out.print (arr [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

public static void main (String args []) {
    String [] stuff = {"eggs", "lasers", "hats", "pie", "apples"};
    for (String x : stuff) System.out.printf ("%s ", x);

    System.out.println ();
    for (int i = stuff.length - 1;
    i >= 0; i --) System.out.printf ("%s ", stuff [i]);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_35090812_14_25
2137755_3523066_1_15
Title: How do I reverse an int array in Java? 
----------------------------------------

public static < T > void reverse (T [] seed, int startIndexInclusive, int endIndexExclusive) {
    if (seed == null || seed.length == 0) {
        LOGGER.warning ("Nothing to rotate");
    }
    int start = startIndexInclusive < 0 ? 0 : startIndexInclusive;
    int end = Math.min (seed.length, endIndexExclusive) - 1;
    while (start < end) {
        swap (seed, start, end);
        start ++;
        end --;
    }
}
----------------------------------------

public static void reverse (int [] data) {
    int left = 0;
    int right = data.length - 1;
    while (left < right) {
        int temp = data [left];
        data [left] = data [right];
        data [right] = temp;
        left ++;
        right --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_35090812_14_25
2137755_46827036_1_11
Title: How do I reverse an int array in Java? 
----------------------------------------

public static < T > void reverse (T [] seed, int startIndexInclusive, int endIndexExclusive) {
    if (seed == null || seed.length == 0) {
        LOGGER.warning ("Nothing to rotate");
    }
    int start = startIndexInclusive < 0 ? 0 : startIndexInclusive;
    int end = Math.min (seed.length, endIndexExclusive) - 1;
    while (start < end) {
        swap (seed, start, end);
        start ++;
        end --;
    }
}
----------------------------------------

void reverse (int [] array) {
    int start = 0;
    int end = array.length - 1;
    while (start < end) {
        int temp = array [start];
        array [start] = array [end];
        array [end] = temp;
        start ++;
        end --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_35090812_14_25
2137755_51521511_1_14
Title: How do I reverse an int array in Java? 
----------------------------------------

public static < T > void reverse (T [] seed, int startIndexInclusive, int endIndexExclusive) {
    if (seed == null || seed.length == 0) {
        LOGGER.warning ("Nothing to rotate");
    }
    int start = startIndexInclusive < 0 ? 0 : startIndexInclusive;
    int end = Math.min (seed.length, endIndexExclusive) - 1;
    while (start < end) {
        swap (seed, start, end);
        start ++;
        end --;
    }
}
----------------------------------------

public static int [] reverse (int [] array) {
    int j = array.length - 1;
    for (int i = 0;
    i <= j; i ++) {
        int temp = array [i];
        array [i] = array [j];
        array [j] = temp;
        j --;
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_3523066_1_15
2137755_51521511_1_14
Title: How do I reverse an int array in Java? 
----------------------------------------

public static void reverse (int [] data) {
    int left = 0;
    int right = data.length - 1;
    while (left < right) {
        int temp = data [left];
        data [left] = data [right];
        data [right] = temp;
        left ++;
        right --;
    }
}
----------------------------------------

public static int [] reverse (int [] array) {
    int j = array.length - 1;
    for (int i = 0;
    i <= j; i ++) {
        int temp = array [i];
        array [i] = array [j];
        array [j] = temp;
        j --;
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_46827036_1_11
2137755_51521511_1_14
Title: How do I reverse an int array in Java? 
----------------------------------------

void reverse (int [] array) {
    int start = 0;
    int end = array.length - 1;
    while (start < end) {
        int temp = array [start];
        array [start] = array [end];
        array [end] = temp;
        start ++;
        end --;
    }
}
----------------------------------------

public static int [] reverse (int [] array) {
    int j = array.length - 1;
    for (int i = 0;
    i <= j; i ++) {
        int temp = array [i];
        array [i] = array [j];
        array [j] = temp;
        j --;
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2137755_48291738_4_26
2137755_8991351_1_15
Title: How do I reverse an int array in Java? 
----------------------------------------

public static void main (String [] args) {
    int [] arra = new int [10];
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter Array Elements : ");
    for (int i = 0;
    i < arra.length; i ++) {
        arra [i] = sc.nextInt ();
    }
    System.out.println ("Printing  Array : ");
    for (int i = 0;
    i < arra.length; i ++) {
        System.out.print (arra [i] + " ");
    }
    System.out.println ();
    System.out.println ("Printing  Reverse Array : ");
    for (int i = arra.length - 1;
    i >= 0; i --) {
        System.out.print (arra [i] + " ");
    }
}
----------------------------------------

public static void main (String args []) {
    String [] stuff = {"eggs", "lasers", "hats", "pie", "apples"};
    for (String x : stuff) System.out.printf ("%s ", x);

    System.out.println ();
    for (int i = stuff.length - 1;
    i >= 0; i --) System.out.printf ("%s ", stuff [i]);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21378390_21379895_130_143
21378390_21380072_116_129
Title: How to add a row in a JTable when click focus is out of the Table and <ENTER> key is pressed 
----------------------------------------

private static void createAndShowGUI () {
    JFrame frame = new JFrame ("SimpleTableDemo");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    SimpleTableDemo newContentPane = new SimpleTableDemo ();
    newContentPane.setOpaque (true);
    frame.setContentPane (newContentPane);
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------

private static void createAndShowGUI () {
    JFrame frame = new JFrame ("SimpleTableDemo");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    SimpleTableDemo newContentPane = new SimpleTableDemo ();
    newContentPane.setOpaque (true);
    frame.setContentPane (newContentPane);
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21378390_21379895_27_93
21378390_21380072_24_79
Title: How to add a row in a JTable when click focus is out of the Table and <ENTER> key is pressed 
----------------------------------------

public SimpleTableDemo () {
    super (new GridLayout (1, 0));
    String [] columnNames = {"First Name", "Last Name", "Sport", "# of Years", "Vegetarian"};
    Object [] [] data = {{"Kathy", "Smith", "Snowboarding", new Integer (5), new Boolean (false)}, {"John", "Doe", "Rowing", new Integer (3), new Boolean (true)}};
    table = new JTable (new javax.swing.table.DefaultTableModel (data, columnNames));
    table.setPreferredScrollableViewportSize (new Dimension (500, 70));
    table.setFillsViewportHeight (true);
    if (DEBUG) {
        table.addMouseListener (new MouseAdapter () {
            public void mouseClicked (MouseEvent e) {
                printDebugData (table);
            }}

        );
    }
    table.addKeyListener (new KeyListener () {
        @Override
        public void keyPressed (KeyEvent e) {
            if (e.getID () == KeyEvent.KEY_PRESSED) {
                if (e.getKeyCode () == KeyEvent.VK_ENTER) {
                    addRow ();
                }
            }
        }@Override
        public void keyReleased (KeyEvent e) {
        }@Override
        public void keyTyped (KeyEvent e) {
        }}

    );
    JScrollPane scrollPane = new JScrollPane (table);
    add (scrollPane);
}
----------------------------------------

public SimpleTableDemo () {
    super (new GridLayout (1, 0));
    String [] columnNames = {"First Name", "Last Name", "Sport", "# of Years", "Vegetarian"};
    Object [] [] data = {{"Kathy", "Smith", "Snowboarding", new Integer (5), new Boolean (false)}, {"John", "Doe", "Rowing", new Integer (3), new Boolean (true)}};
    DefaultTableModel tableModel = new DefaultTableModel (data, columnNames);
    table = new JTable (tableModel);
    table.setPreferredScrollableViewportSize (new Dimension (500, 70));
    table.setFillsViewportHeight (true);
    if (DEBUG) {
        table.addMouseListener (new MouseAdapter () {
            public void mouseClicked (MouseEvent e) {
                printDebugData (table);
            }}

        );
    }
    JScrollPane scrollPane = new JScrollPane (table);
    KeyboardFocusManager.getCurrentKeyboardFocusManager ().addKeyEventDispatcher (new KeyEventDispatcher () {
        @Override
        public boolean dispatchKeyEvent (KeyEvent e) {
            if (e.getID () == KeyEvent.KEY_PRESSED) {
                if (e.getKeyCode () == KeyEvent.VK_ENTER && table.isEditing () == false) {
                    addRow ();
                }
            }
            return false;
        }}

    );
    add (scrollPane);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21380701_21380939_21_37
21380701_21380939_2_16
Title: Compare two long Strings 
----------------------------------------

public static void main (String args []) {
    String s1 = "1390785186301";
    String s2 = "1390785191301";
    if (Long.parseLong (s1) < Long.parseLong (s2)) {
        System.out.println ("s1 is less then s2");
    } else if (Long.parseLong (s1) > Long.parseLong (s2)) {
        System.out.println ("s1 is bigger then s2");
    } else {
        System.out.println ("s1 and s2 are same.");
    }

}
----------------------------------------

public static void main (String args []) {
    String s1 = "1390785186301";
    String s2 = "1390785191301";
    if (s1.compareTo (s2) == 0) {
        System.out.println ("s1 and S2 its same");
    }
    if (s1.compareTo (s2) > 0) {
        System.out.println ("S1 is bigger then s2");
    }
    if (s1.compareTo (s2) < 0) {
        System.out.println ("S2 is less then S1");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21389712_21389885_1_15
21389712_21389887_1_14
Title: How to equals a single character in string and then calculate it 
----------------------------------------

public static void main (String [] args) {
    int letter_count = 0;
    char [] check_word = "How to equals a single character in string and then calculate it ".toCharArray ();
    char single_letter = 'a';
    for (int i = 0;
    i < check_word.length; i ++) {
        if (single_letter == check_word [i]) {
            letter_count ++;
        }
    }
    System.out.println (" - \"a\"" + " was found " + letter_count + " times");
}
----------------------------------------

public static void main (String [] args) {
    int letter_count = 0;
    String check_word = new String ("How to equals a single character in string and then calculate it ");
    char toCheck = 'a';
    for (int i = 0;
    i < check_word.length (); i ++) {
        char cursor = check_word.charAt (i);
        if (cursor == toCheck) {
            letter_count ++;
        }
    }
    System.out.println (" - \"a\"" + " was found " + letter_count + " times");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21419783_43875201_18_46
21419783_43875267_20_43
Title: Extract embedded files from doc using java 
----------------------------------------

public static void main (String [] args) throws Exception {
    String path = "ParentExcel.xls";
    File file = new File (path);
    NPOIFSFileSystem fs = new NPOIFSFileSystem (file);
    HSSFWorkbook wb = new HSSFWorkbook (fs.getRoot (), true);
    for (HSSFObjectData obj : wb.getAllEmbeddedObjects ()) {
        System.out.println (obj.getDirectory () + "***************HSSFObject data value************" + obj.getOLE2ClassName ());
        String oleName = obj.getOLE2ClassName ();
        System.out.println ("Has directory Entry node" + obj.hasDirectoryEntry ());
        DirectoryNode dn = (DirectoryNode) obj.getDirectory ();
        Iterator < Entry > ab = dn.getEntries ();
        System.out.println ("The entries in the directory node are" + dn.getEntries () + "And also the count" + dn.getEntryCount ());
        if (oleName.contains ("Worksheet")) {
            InputStream is;
            Entry entry = ab.next ();
            is = dn.createDocumentInputStream (entry);
            FileOutputStream fos = new FileOutputStream ("EmbeddedWorkbook.xlsx");
            IOUtils.copy (is, fos);
            fos.close ();
        }
    }
}
----------------------------------------

public static void main (String [] args) throws Exception {
    String path = "DummyParent.xls";
    File file = new File (path);
    POIFSFileSystem fs = new POIFSFileSystem (new FileInputStream (file));
    HSSFWorkbook wb = new HSSFWorkbook (fs.getRoot (), true);
    for (HSSFObjectData obj : wb.getAllEmbeddedObjects ()) {
        System.out.println (obj.getDirectory () + "***************HSSFObject data value************" + obj.getOLE2ClassName ());
        String oleName = obj.getOLE2ClassName ();
        System.out.println ("Has directory Entry node" + obj.hasDirectoryEntry ());
        DirectoryNode dn = (DirectoryNode) obj.getDirectory ();
        Iterator < Entry > ab = dn.getEntries ();
        System.out.println ("The entries in the directory node are" + dn.getEntries () + "And also the count" + dn.getEntryCount ());
        if (oleName.contains ("Worksheet")) {
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook (dn, fs, false);
            int number = hssfWorkbook.getNumberOfSheets ();
            System.out.println ("The number of sheets in the Embedded excel - xls" + number);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21420252_34624669_12_38
21420252_34672822_9_43
Title: How to receive Mpeg-ts stream over UDP from FFMpeg in Java 
----------------------------------------

public static void main (String [] args) throws UnknownHostException {
    InetAddress address = InetAddress.getByName (INET_ADDR);
    byte [] buffer = new byte [256];
    try (MulticastSocket clientSocket = new MulticastSocket (PORT)) {
        clientSocket.joinGroup (address);
        while (true) {
            DatagramPacket msgPacket = new DatagramPacket (buffer, buffer.length);
            clientSocket.receive (msgPacket);
            String data = new String (buffer, 0, buffer.length);
            System.out.println ("Data ->  " + data);
        }
    } catch (IOException exception) {
        exception.printStackTrace ();
    }
}
----------------------------------------

public static void main (String args []) {
    try {
        int port = 1234;
        FileOutputStream output = new FileOutputStream ("testStream.ts", true);
        DatagramSocket socket = new DatagramSocket (port);
        System.out.println ("The server is ready...");
        DatagramPacket packet = new DatagramPacket (new byte [PACKETSIZE], PACKETSIZE);
        for (;;) {
            socket.receive (packet);
            try {
                output.write (packet.getData ());
            } finally {
                output.close ();
            }
        }
    } catch (IOException exception) {
        exception.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21434258_21434433_5_27
21434258_21434609_6_31
Title: Comparing two rows in a single 2D array 
----------------------------------------

public static void main (String [] args) {
    String [] row1 = new String [10];
    String [] row2 = new String [10];
    String [] [] fruit = {{"apple", "banana", "kiwi"}, {"kiwi", "oranges", "grapes"}};
    for (int i = 0;
    i < fruit [0].length; i ++) {
        for (int j = 0;
        j < fruit [1].length; j ++) {
            if (fruit [0] [i].equals (fruit [1] [j])) {
                row1 [i] = fruit [0] [i];
                row2 [j] = fruit [1] [j];
                System.out.println ("Match found");
            } else {
                System.out.println ("Not found");
            }
        }
    }
    System.out.println ("row1");
    System.out.println (Arrays.deepToString (row1));
    System.out.println ("row2");
    System.out.println (Arrays.deepToString (row2));
}
----------------------------------------

public static final void main (String [] igno_red) {
    String [] row1Output = new String [10];
    String [] row2Output = new String [10];
    String [] [] fruit = {{"apple", "banana", "kiwi"}, {"kiwi", "oranges", "grapes"}};
    String [] row1Temp = fruit [0];
    String [] row2Temp = fruit [1];
    for (int i = 0;
    i < row1Temp.length; i ++) {
        for (int j = 0;
        j < row2Temp.length; j ++) {
            if (row1Temp [i].equals (row2Temp [j])) {
                System.out.println ("Match found");
                row1Output [i] = row1Temp [i];
                row2Output [j] = row2Temp [j];
            } else {
                System.out.println ("Not found");
            }
        }
    }
    System.out.println ("row1Output");
    System.out.println (Arrays.deepToString (row1Output));
    System.out.println ("row2Output");
    System.out.println (Arrays.deepToString (row2Output));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21438807_21438868_2_11
21438807_21439069_2_11
Title: Facing issue in getting the largest integer from Array 
----------------------------------------

public static void main (String [] args) {
    int a [] = new int [] {1, 2, 5, 9, 7};
    int big = a [0];
    for (int i = 1;
    i < a.length; i ++) {
        if (big < a [i]) big = a [i];

    }
    System.out.println (big);
}
----------------------------------------

public static void main (String [] args) {
    int a [] = new int [] {1, 2, 5, 9, 7};
    int big = a [0];
    for (int i = 1;
    i < a.length; i ++) {
        if (big < a [i]) big = a [i];

    }
    System.out.println ("Big: " + big);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21444221_21471718_24_53
21444221_21471718_31_46
Title: Markers not showing on map after stackmob query 
----------------------------------------

public void run () {
    int i = 0;
    while (i ++ < 1) {
        try {
            runOnUiThread (new Runnable () {
                @Override
                public void run () {
                    for (int j = 0;
                    j < stops.size (); j ++) {
                        LatLng markerPos = new LatLng (stops.get (j).getLatitude (), stops.get (j).getLongitude ());
                        System.out.println (markerPos);
                        System.out.println (stops.get (j).getName ());
                        System.out.println (j);
                        try {
                            map.addMarker (new MarkerOptions ().title (stops.get (j).getName ()).snippet ("test").position (markerPos));
                        } catch (Exception e) {
                            System.err.println (e.getMessage ());
                        }
                    }
                }}

            );
            Thread.sleep (10000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    for (int j = 0;
    j < stops.size (); j ++) {
        LatLng markerPos = new LatLng (stops.get (j).getLatitude (), stops.get (j).getLongitude ());
        System.out.println (markerPos);
        System.out.println (stops.get (j).getName ());
        System.out.println (j);
        try {
            map.addMarker (new MarkerOptions ().title (stops.get (j).getName ()).snippet ("test").position (markerPos));
        } catch (Exception e) {
            System.err.println (e.getMessage ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21445425_21445640_1_21
21445425_21445797_1_25
Title: Printing out the least occurring elements in an array 
----------------------------------------

public static void main (String [] args) {
    int [] array = {5, 1, 2, 2, - 1, 1, 5, 4};
    int [] results = new int [array.length];
    int minCount = Integer.MAX_VALUE;
    for (int i = 0;
    i < array.length; i ++) {
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == array [i]) {
                results [i] ++;
            }
        }
        if (results [i] <= minCount) {
            minCount = results [i];
        }
    }
    for (int i = 0;
    i < results.length; i ++) {
        if (results [i] == minCount) {
            System.out.println ("Element: " + i + ", Number of occurences: " + minCount);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] array = {1, 1, 2, 3, 3, 2, 2, 6, 4, 4, 4, 0};
    Arrays.sort (array);
    int currentMin = Integer.MAX_VALUE;
    int index = 0;
    Pair [] minOcc = new Pair [array.length];
    minOcc [index] = new Pair (array [0]);
    for (int i = 1;
    i < array.length; i ++) {
        if (array [i - 1] == array [i]) {
            minOcc [index].increaseOcc ();
        } else {
            currentMin = currentMin > minOcc [index].occ ? minOcc [index].occ : currentMin;
            minOcc [++ index] = new Pair (array [i]);
        }
    }
    for (Pair p : minOcc) {
        if (p != null && p.occ == currentMin) {
            System.out.println (p);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21447308_21447367_1_22
21447308_21447573_14_26
Title: Can't verify data on Java 
----------------------------------------

public static void check (String s) {
    boolean decimalPoint = false;
    for (int i = 0;
    i < s.length (); i ++) {
        if (s.charAt (i) == '.') {
            if (! decimalPoint) {
                decimalPoint = true;
            } else {
                JOptionPane.showMessageDialog (null, "Not a valid number (contains more than one .)");
                System.exit (0);
            }
        }
    }
    if (decimalPoint) {
        {
            JOptionPane.showMessageDialog (null, "You must enter an integer value");
            System.exit (0);
        }}
}
----------------------------------------

public static boolean check (String s) {
    boolean decimalPoint = false;
    for (int i = 0;
    i < s.length (); i = i + 1) {
        if (s.charAt (i) == '.') {
            if (! decimalPoint) {
                decimalPoint = true;
            } else {
                return (false);
            }
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21462530_21462610_1_13
21462530_21462672_1_13
Title: Check if a Row exists in a 2D array in Java 
----------------------------------------

public static boolean isRow (int row, double [] [] array) {
    boolean flag = false;
    if (array != null && row >= 0 && row < array.length) {
        if (array [row] != null) {
            flag = true;
        }
    }
    return flag;
}
----------------------------------------

public static boolean isRow (int row, double [] [] array) {
    boolean flag = false;
    if (array != null && array.length >= 0 && array.length > row) {
        if (array [row] != null) {
            flag = true;
        }
    }
    return flag;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21465232_21465395_1_19
21465232_21466515_1_23
Title: shift every other elements of linkedlist (in place) to end of linkedlist in java 
----------------------------------------

public void shift () {
    if (front == null) return;

    ListNode curr = front;
    ListNode temp;
    ListNode back = front;
    while (back.next != null) back = back.next;

    ListNode originalBack = back;
    while (curr.next != originalBack) {
        temp = curr.next;
        curr.next = curr.next.next;
        temp.next = null;
        back = back.next = temp;
        curr = curr.next;
    }
}
----------------------------------------

public void shift () {
    if (front == null) return;

    ListNode oddList, even, odd;
    oddList = even = odd = front;
    oddList = front.next;
    while (even.next != null) {
        odd.next = even.next;
        odd = even.next;
        even.next = odd.next;
        if (odd.next != null) {
            even = odd.next;
            odd.next = null;
        } else {
            odd.next = null;
            break;
        }
    }
    if (oddList != null) {
        even.next = oddList;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21465258_21465386_5_22
21465258_21465894_8_40
Title: "Java: Three strings lexicographic order" 
----------------------------------------

public static void main (String [] args) {
    String firstString, secondString, thirdString;
    Scanner keyboard = new Scanner (System.in);
    System.out.println ("Enter three different strings.");
    System.out.println ("The string in the middle order lexicographically will be displayed.");
    firstString = keyboard.nextLine ();
    secondString = keyboard.nextLine ();
    thirdString = keyboard.nextLine ();
    String [] array = new String [] {firstString, secondString, thirdString};
    Arrays.sort (array);
    System.out.println ("The second string in lexicographic order: " + array [1]);
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter the FIRST string:");
    String first = scanner.nextLine ();
    System.out.println ("Enter the SECOND string:");
    String second = scanner.nextLine ();
    System.out.println ("Enter the THIRD string:");
    String third = scanner.nextLine ();
    List < String > strings = new ArrayList < String > ();
    strings.add (first);
    strings.add (second);
    strings.add (third);
    System.out.println ("Before sort:");
    for (String s : strings) {
        System.out.println (s);
    }
    Collections.sort (strings);
    System.out.println ("After sort:");
    for (String s : strings) {
        System.out.println (s);
    }
    System.out.println ("The Middle String is '" + strings.get (1) + "'");
    scanner.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21466924_21466995_1_13
21466924_21467312_1_21
Title: How do I determine if an array contains all the integers in a separate array 
----------------------------------------

public static boolean contains (int [] set1, int [] set2) {
    for (int i = 0, j = 0;
    i < set1.length; i ++) {
        if (set1 [i] == set2 [j]) {
            if (++ j >= set2.length) return true;

        } else {
            i -= j;
            j = 0;
        }
    }
    return false;
}
----------------------------------------

public static boolean contains (int [] a, int [] b) {
    for (int i = 0;
    i < a.length - b.length + 1; i ++) {
        for (int j = 0;
        j < b.length; j ++) {
            if (a [i + j] != b [j]) break;

            if (j == b.length - 1) return true;

        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21466924_21466995_1_13
21466924_21467337_1_28
Title: How do I determine if an array contains all the integers in a separate array 
----------------------------------------

public static boolean contains (int [] set1, int [] set2) {
    for (int i = 0, j = 0;
    i < set1.length; i ++) {
        if (set1 [i] == set2 [j]) {
            if (++ j >= set2.length) return true;

        } else {
            i -= j;
            j = 0;
        }
    }
    return false;
}
----------------------------------------

public static boolean contains (int [] set1, int [] set2) {
    if (set1.length < set2.length) return false;

    int numMatched = 0;
    while (numMatched < set2.length && set1 [numMatched] == set2 [numMatched]) {
        numMatched ++;
    }
    if (numMatched == set2.length) return true;
    else {
        int [] subset = Arrays.copyOfRange (set1, 1, set1.length);
        return contains (subset, set2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21466924_21466995_1_13
21466924_21479598_1_15
Title: How do I determine if an array contains all the integers in a separate array 
----------------------------------------

public static boolean contains (int [] set1, int [] set2) {
    for (int i = 0, j = 0;
    i < set1.length; i ++) {
        if (set1 [i] == set2 [j]) {
            if (++ j >= set2.length) return true;

        } else {
            i -= j;
            j = 0;
        }
    }
    return false;
}
----------------------------------------

static boolean contains (final int [] list1, final int [] list2) {
    final int limit = list1.length - list2.length + 1;
    for (int indexL1 = 0, indexL2 = 0;
    indexL1 < limit; ++ indexL1) {
        while (list1 [indexL1 + indexL2] == list2 [indexL2]) {
            ++ indexL2;
            if (indexL2 == list2.length) {
                return true;
            }
        }
        indexL2 = 0;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21466924_21467312_1_21
21466924_21467337_1_28
Title: How do I determine if an array contains all the integers in a separate array 
----------------------------------------

public static boolean contains (int [] a, int [] b) {
    for (int i = 0;
    i < a.length - b.length + 1; i ++) {
        for (int j = 0;
        j < b.length; j ++) {
            if (a [i + j] != b [j]) break;

            if (j == b.length - 1) return true;

        }
    }
    return false;
}
----------------------------------------

public static boolean contains (int [] set1, int [] set2) {
    if (set1.length < set2.length) return false;

    int numMatched = 0;
    while (numMatched < set2.length && set1 [numMatched] == set2 [numMatched]) {
        numMatched ++;
    }
    if (numMatched == set2.length) return true;
    else {
        int [] subset = Arrays.copyOfRange (set1, 1, set1.length);
        return contains (subset, set2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21466924_21467312_1_21
21466924_21479598_1_15
Title: How do I determine if an array contains all the integers in a separate array 
----------------------------------------

public static boolean contains (int [] a, int [] b) {
    for (int i = 0;
    i < a.length - b.length + 1; i ++) {
        for (int j = 0;
        j < b.length; j ++) {
            if (a [i + j] != b [j]) break;

            if (j == b.length - 1) return true;

        }
    }
    return false;
}
----------------------------------------

static boolean contains (final int [] list1, final int [] list2) {
    final int limit = list1.length - list2.length + 1;
    for (int indexL1 = 0, indexL2 = 0;
    indexL1 < limit; ++ indexL1) {
        while (list1 [indexL1 + indexL2] == list2 [indexL2]) {
            ++ indexL2;
            if (indexL2 == list2.length) {
                return true;
            }
        }
        indexL2 = 0;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21466924_21467337_1_28
21466924_21479598_1_15
Title: How do I determine if an array contains all the integers in a separate array 
----------------------------------------

public static boolean contains (int [] set1, int [] set2) {
    if (set1.length < set2.length) return false;

    int numMatched = 0;
    while (numMatched < set2.length && set1 [numMatched] == set2 [numMatched]) {
        numMatched ++;
    }
    if (numMatched == set2.length) return true;
    else {
        int [] subset = Arrays.copyOfRange (set1, 1, set1.length);
        return contains (subset, set2);
    }
}
----------------------------------------

static boolean contains (final int [] list1, final int [] list2) {
    final int limit = list1.length - list2.length + 1;
    for (int indexL1 = 0, indexL2 = 0;
    indexL1 < limit; ++ indexL1) {
        while (list1 [indexL1 + indexL2] == list2 [indexL2]) {
            ++ indexL2;
            if (indexL2 == list2.length) {
                return true;
            }
        }
        indexL2 = 0;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21467204_21467966_14_25
21467204_36040395_1_10
Title: Passing data between two Fragments in a VIewPager (Android) (NullPointerException) 
----------------------------------------

public Fragment getItem (int position) {
    switch (position) {
        case 0 :
            return mFragFavourites;
        case 1 :
            return mFragConverter;
        default :
            return null;
    }
}
----------------------------------------

@Override
public Fragment getItem (int position) {
    switch (position) {
        case 0 :
            fragment = FragmentPost.newInstance (position);
            registeredFragments.put (position, fragment);
            return fragment;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21472947_21473149_1_13
21472947_21473198_1_16
Title: Array list in java 
----------------------------------------

public static List < String > stutter (ArrayList < String > list, int k) {
    List < String > resultList = new ArrayList < String > ();
    if (k <= 0) {
        return resultList;
    } else {
        for (String s : list) {
            for (int i = 0;
            i < k; i ++) {
                resultList.add (s);
            }
        }
        return resultList;
    }
}
----------------------------------------

public static void stutter (List < String > list, int k) {
    String s = "";
    List < String > newList = new ArrayList < String > ();
    if (k > 0) {
        for (int i = 0;
        i < list.size (); i ++) {
            s = list.get (i);
            for (int j = 0;
            j < k; j ++) {
                newList.add (s);
            }
        }
    }
    list = newList;
    System.out.println (list.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21478662_21479285_4_23
21478662_21479522_14_33
Title: Android restrict user input 
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String testRegex = "^\\d+\\,?\\d{0,2}$";
    String s = source.toString ();
    String d = dest.toString ();
    String r = d.substring (0, dstart) + s.substring (start, end) + d.substring (dend);
    if (r.matches (testRegex)) {
        return null;
    } else {
        return "";
    }
}
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String tmp;
    try {
        tmp = (et.getText ().toString ()).substring (et.getText ().toString ().length () - 2, et.getText ().toString ().length ());
        if (Character.isDigit (tmp.charAt (0)) && Character.isDigit (tmp.charAt (1)) && Character.isDigit (source.toString ().charAt (0))) {
            return "";
        }
        if (specialCharSet.contains ("" + tmp.charAt (1)) && specialCharSet.contains ("" + source)) {
            return "";
        }
    } catch (Exception e) {
        if (et.getText ().toString ().length () >= 1 && specialCharSet.contains ("" + et.getText ().toString ().charAt (0)) && specialCharSet.contains (source)) {
            return "";
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2148103_2148293_2_12
2148103_2153614_6_36
Title: Swing layout problem 
----------------------------------------

public static void main (String [] args) {
    JFrame main = new JFrame ();
    JPanel p = new JPanel ();
    p.setLayout (new BorderLayout ());
    p.add (new JLabel ("test"), BorderLayout.WEST);
    p.add (new JTextField ("growable"), BorderLayout.CENTER);
    p.add (new JComboBox (), BorderLayout.EAST);
    main.add (p);
    main.pack ();
    main.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    JFrame frame = new JFrame ("GridBagLayout Demo");
    frame.setLayout (new GridBagLayout ());
    JLabel label = new JLabel ("Demo Label");
    JTextField textField = new JTextField ("Demo Text");
    JComboBox comboBox = new JComboBox (new String [] {"hello", "goodbye", "foo"});
    GridBagConstraints cons = new GridBagConstraints ();
    cons.insets = new Insets (10, 10, 10, 10);
    frame.add (label, cons);
    cons.gridx = 1;
    cons.weightx = 1;
    cons.weighty = 1;
    cons.insets = new Insets (10, 0, 10, 10);
    cons.fill = GridBagConstraints.HORIZONTAL;
    frame.add (textField, cons);
    cons.gridx = 2;
    cons.weightx = 0;
    cons.weighty = 0;
    cons.insets = new Insets (10, 0, 10, 10);
    cons.fill = GridBagConstraints.NONE;
    frame.add (comboBox, cons);
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21482785_21482860_1_11
21482785_29635058_3_13
Title: Factorial Java Program 
----------------------------------------

public static void main (String [] args) {
    BigInteger num;
    BigInteger fact = BigInteger.valueOf (1);
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number: ");
    num = input.nextBigInteger ();
    for (int i = 2;
    i <= num; i ++) {
        fact = fact.multiply (BigInteger.valueOf (i));
    }
    System.out.println (fact);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int i, num, a, b;
    int c = 1;
    System.out.println ("Enter the no.= ");
    num = sc.nextInt ();
    for (i = 1; i <= num; i ++) {
        c = i * c;
    }
    System.out.println ("Factorial is " + c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21482785_21482860_1_11
21482785_34589192_3_15
Title: Factorial Java Program 
----------------------------------------

public static void main (String [] args) {
    BigInteger num;
    BigInteger fact = BigInteger.valueOf (1);
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number: ");
    num = input.nextBigInteger ();
    for (int i = 2;
    i <= num; i ++) {
        fact = fact.multiply (BigInteger.valueOf (i));
    }
    System.out.println (fact);
}
----------------------------------------

public static void main (String arg []) {
    int factorial = 1;
    int number = 6;
    for (int i = 1;
    i <= number; i ++) {
        factorial *= i;
    }
    System.out.println ("Factorial of number " + number + " is " + factorial);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21482785_29635058_3_13
21482785_34589192_3_15
Title: Factorial Java Program 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int i, num, a, b;
    int c = 1;
    System.out.println ("Enter the no.= ");
    num = sc.nextInt ();
    for (i = 1; i <= num; i ++) {
        c = i * c;
    }
    System.out.println ("Factorial is " + c);
}
----------------------------------------

public static void main (String arg []) {
    int factorial = 1;
    int number = 6;
    for (int i = 1;
    i <= number; i ++) {
        factorial *= i;
    }
    System.out.println ("Factorial of number " + number + " is " + factorial);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21489779_21490078_1_10
21489779_21490427_1_15
Title: modify an array list 
----------------------------------------

public static void addItem (List < String > list, int k) {
    int size = list.size () * k;
    for (int i = 0;
    i < size; i = i + k) {
        String s = list.get (i);
        for (int j = 0;
        j < k - 1; j ++) {
            list.add (i + j, s);
        }
    }
}
----------------------------------------

public static void addItem (List < String > list, int k) {
    int size = list.size ();
    for (int i = 0;
    i < size * (k - 1); i ++) {
        list.add ("");
    }
    for (int i = size - 1;
    i >= 0; i --) {
        for (int m = k - 1;
        m >= 0; m --) {
            list.set (k * i + m, list.get (i));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21491635_21492113_40_62
21491635_21492296_1_20
Title: swap pair elements in linked list implemented in Java 
----------------------------------------

public ListNode switchPairs () {
    if (this == null || this.next == null) return this;

    ListNode top = this.next;
    ListNode first = this;
    ListNode second = first.next;
    do {
        ListNode third = second.next;
        second.next = first;
        first.next = third;
        first = third;
        System.out.println ("@@@ " + this.toString ());
        if (first != null) {
            second.next.next = first.next;
            second = first.next;
        }
    } while (first != null && second != null);
    return top;
}
----------------------------------------

public void switchPairs () {
    if (front == null || front.next == null) return;

    ListNode current = front.next;
    front.next = current.next;
    current.next = front;
    front = current;
    current = current.next;
    while (current.next != null && current.next.next != null) {
        ListNode temp = current.next.next;
        current.next.next = temp.next;
        temp.next = current.next;
        current.next = temp;
        current = temp.next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21491635_21492113_40_62
21491635_24528115_1_18
Title: swap pair elements in linked list implemented in Java 
----------------------------------------

public ListNode switchPairs () {
    if (this == null || this.next == null) return this;

    ListNode top = this.next;
    ListNode first = this;
    ListNode second = first.next;
    do {
        ListNode third = second.next;
        second.next = first;
        first.next = third;
        first = third;
        System.out.println ("@@@ " + this.toString ());
        if (first != null) {
            second.next.next = first.next;
            second = first.next;
        }
    } while (first != null && second != null);
    return top;
}
----------------------------------------

public void switchPairs () {
    ListNode prev = front;
    if (front != null && front.next != null) {
        ListNode temp = front;
        front = front.next;
        temp.next = front.next;
        front.next = temp;
        prev = temp;
    }
    while (prev != null && prev.next != null && prev.next.next != null) {
        ListNode first_node = prev.next;
        ListNode second_node = first_node.next;
        first_node.next = second_node.next;
        second_node.next = first_node;
        prev.next = second_node;
        prev = first_node;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21491635_21492113_40_62
21491635_26660786_2_18
Title: swap pair elements in linked list implemented in Java 
----------------------------------------

public ListNode switchPairs () {
    if (this == null || this.next == null) return this;

    ListNode top = this.next;
    ListNode first = this;
    ListNode second = first.next;
    do {
        ListNode third = second.next;
        second.next = first;
        first.next = third;
        first = third;
        System.out.println ("@@@ " + this.toString ());
        if (first != null) {
            second.next.next = first.next;
            second = first.next;
        }
    } while (first != null && second != null);
    return top;
}
----------------------------------------

public void switchPairs (SingleLinkListNode prev, SingleLinkListNode node) {
    if (node == null || node.next == null) {
        return;
    }
    SingleLinkListNode nextNode = node.next;
    SingleLinkListNode temp = nextNode.next;
    nextNode.next = node;
    node.next = temp;
    if (prev != null) {
        prev.next = nextNode;
    } else {
        head = nextNode;
    }
    switchPairs (node, node.next);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21491635_21492296_1_20
21491635_24528115_1_18
Title: swap pair elements in linked list implemented in Java 
----------------------------------------

public void switchPairs () {
    if (front == null || front.next == null) return;

    ListNode current = front.next;
    front.next = current.next;
    current.next = front;
    front = current;
    current = current.next;
    while (current.next != null && current.next.next != null) {
        ListNode temp = current.next.next;
        current.next.next = temp.next;
        temp.next = current.next;
        current.next = temp;
        current = temp.next;
    }
}
----------------------------------------

public void switchPairs () {
    ListNode prev = front;
    if (front != null && front.next != null) {
        ListNode temp = front;
        front = front.next;
        temp.next = front.next;
        front.next = temp;
        prev = temp;
    }
    while (prev != null && prev.next != null && prev.next.next != null) {
        ListNode first_node = prev.next;
        ListNode second_node = first_node.next;
        first_node.next = second_node.next;
        second_node.next = first_node;
        prev.next = second_node;
        prev = first_node;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21491635_21492296_1_20
21491635_26660786_2_18
Title: swap pair elements in linked list implemented in Java 
----------------------------------------

public void switchPairs () {
    if (front == null || front.next == null) return;

    ListNode current = front.next;
    front.next = current.next;
    current.next = front;
    front = current;
    current = current.next;
    while (current.next != null && current.next.next != null) {
        ListNode temp = current.next.next;
        current.next.next = temp.next;
        temp.next = current.next;
        current.next = temp;
        current = temp.next;
    }
}
----------------------------------------

public void switchPairs (SingleLinkListNode prev, SingleLinkListNode node) {
    if (node == null || node.next == null) {
        return;
    }
    SingleLinkListNode nextNode = node.next;
    SingleLinkListNode temp = nextNode.next;
    nextNode.next = node;
    node.next = temp;
    if (prev != null) {
        prev.next = nextNode;
    } else {
        head = nextNode;
    }
    switchPairs (node, node.next);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21491635_24528115_1_18
21491635_26660786_2_18
Title: swap pair elements in linked list implemented in Java 
----------------------------------------

public void switchPairs () {
    ListNode prev = front;
    if (front != null && front.next != null) {
        ListNode temp = front;
        front = front.next;
        temp.next = front.next;
        front.next = temp;
        prev = temp;
    }
    while (prev != null && prev.next != null && prev.next.next != null) {
        ListNode first_node = prev.next;
        ListNode second_node = first_node.next;
        first_node.next = second_node.next;
        second_node.next = first_node;
        prev.next = second_node;
        prev = first_node;
    }
}
----------------------------------------

public void switchPairs (SingleLinkListNode prev, SingleLinkListNode node) {
    if (node == null || node.next == null) {
        return;
    }
    SingleLinkListNode nextNode = node.next;
    SingleLinkListNode temp = nextNode.next;
    nextNode.next = node;
    node.next = temp;
    if (prev != null) {
        prev.next = nextNode;
    } else {
        head = nextNode;
    }
    switchPairs (node, node.next);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21499100_21503203_19_43
21499100_21508878_36_73
Title: How to show arraylist in AlertDialog 
----------------------------------------

public void onItemClick (AdapterView < ? > a, View view, int position, long id) {
    AlertDialog.Builder mAlert = new AlertDialog.Builder (SOF_AlertDialog.this);
    mAlert.setIcon (image_detail.get (position).getImageNumber ()).setTitle (image_detail.get (position).getName ()).setMessage (image_detail.get (position).getItemDescription () + "\nPrice: " + image_detail.get (position).getPrice ()).setPositiveButton ("Buy", new DialogInterface.OnClickListener () {
        @Override
        public void onClick (DialogInterface dialog, int which) {
            dialog.dismiss ();
        }}

    ).setNegativeButton ("Cancel", new DialogInterface.OnClickListener () {
        @Override
        public void onClick (DialogInterface dialog, int which) {
            dialog.dismiss ();
        }}

    ).create ().show ();
}
----------------------------------------

public void onItemClick (AdapterView < ? > a, View view, int position, long id) {
    AlertDialog.Builder mAlert = new AlertDialog.Builder (SOF_AlertDialog.this);
    view = getLayoutInflater ().inflate (R.layout.alert_background, null);
    ImageView Content_img = (ImageView) view.findViewById (R.id.imageView1);
    TextView Content_txt1 = (TextView) view.findViewById (R.id.textView1);
    TextView Content_txt2 = (TextView) view.findViewById (R.id.textView2);
    TextView Content_txt3 = (TextView) view.findViewById (R.id.textView3);
    Content_img.setImageResource (image_detail.get (position).getImageNumber ());
    Content_txt1.setText (image_detail.get (position).getName ());
    Content_txt2.setText (image_detail.get (position).getItemDescription ());
    Content_txt3.setText ("Price: " + image_detail.get (position).getPrice ());
    mAlert.setTitle (image_detail.get (position).getName ()).setView (view).setPositiveButton ("Buy", new DialogInterface.OnClickListener () {
        @Override
        public void onClick (DialogInterface dialog, int which) {
            dialog.dismiss ();
        }}

    ).setNegativeButton ("Cancel", new DialogInterface.OnClickListener () {
        @Override
        public void onClick (DialogInterface dialog, int which) {
            dialog.dismiss ();
        }}

    ).create ().show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21499100_21503203_47_75
21499100_21508878_77_105
Title: How to show arraylist in AlertDialog 
----------------------------------------

private ArrayList < ItemDetail > GetSearchResult () {
    ArrayList < ItemDetail > result = new ArrayList < ItemDetail > ();
    ItemDetail item_detail = new ItemDetail ();
    item_detail.setName ("Cake");
    item_detail.setItemDescription ("");
    item_detail.setPrice ("5.000");
    item_detail.setImageNumber (images [0]);
    result.add (item_detail);
    item_detail = new ItemDetail ();
    item_detail.setName ("Coklat");
    item_detail.setItemDescription ("Bulat");
    item_detail.setPrice ("5.500");
    item_detail.setImageNumber (images [1]);
    result.add (item_detail);
    item_detail = new ItemDetail ();
    item_detail.setName ("Purple");
    item_detail.setItemDescription ("Cupcake");
    item_detail.setPrice ("6.000");
    item_detail.setImageNumber (images [2]);
    result.add (item_detail);
    return result;
}
----------------------------------------

private ArrayList < ItemDetail > GetSearchResult () {
    ArrayList < ItemDetail > result = new ArrayList < ItemDetail > ();
    ItemDetail item_detail = new ItemDetail ();
    item_detail.setName ("Cake");
    item_detail.setItemDescription ("");
    item_detail.setPrice ("5.000");
    item_detail.setImageNumber (images [0]);
    result.add (item_detail);
    item_detail = new ItemDetail ();
    item_detail.setName ("Coklat");
    item_detail.setItemDescription ("Bulat");
    item_detail.setPrice ("5.500");
    item_detail.setImageNumber (images [1]);
    result.add (item_detail);
    item_detail = new ItemDetail ();
    item_detail.setName ("Purple");
    item_detail.setItemDescription ("Cupcake");
    item_detail.setPrice ("6.000");
    item_detail.setImageNumber (images [2]);
    result.add (item_detail);
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21499100_21503203_6_45
21499100_21508878_23_75
Title: How to show arraylist in AlertDialog 
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_sof__alert_dialog);
    image_detail = GetSearchResult ();
    final ListView lv1 = (ListView) findViewById (R.id.listV_main);
    lv1.setAdapter (new ItemListBaseAdapter ());
    lv1.setOnItemClickListener (new OnItemClickListener () {
        @Override
        public void onItemClick (AdapterView < ? > a, View view, int position, long id) {
            AlertDialog.Builder mAlert = new AlertDialog.Builder (SOF_AlertDialog.this);
            mAlert.setIcon (image_detail.get (position).getImageNumber ()).setTitle (image_detail.get (position).getName ()).setMessage (image_detail.get (position).getItemDescription () + "\nPrice: " + image_detail.get (position).getPrice ()).setPositiveButton ("Buy", new DialogInterface.OnClickListener () {
                @Override
                public void onClick (DialogInterface dialog, int which) {
                    dialog.dismiss ();
                }}

            ).setNegativeButton ("Cancel", new DialogInterface.OnClickListener () {
                @Override
                public void onClick (DialogInterface dialog, int which) {
                    dialog.dismiss ();
                }}

            ).create ().show ();
        }}

    );
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_sof__alert_dialog);
    image_detail = GetSearchResult ();
    final ListView lv1 = (ListView) findViewById (R.id.listV_main);
    lv1.setAdapter (new ItemListBaseAdapter ());
    lv1.setOnItemClickListener (new OnItemClickListener () {
        @Override
        public void onItemClick (AdapterView < ? > a, View view, int position, long id) {
            AlertDialog.Builder mAlert = new AlertDialog.Builder (SOF_AlertDialog.this);
            view = getLayoutInflater ().inflate (R.layout.alert_background, null);
            ImageView Content_img = (ImageView) view.findViewById (R.id.imageView1);
            TextView Content_txt1 = (TextView) view.findViewById (R.id.textView1);
            TextView Content_txt2 = (TextView) view.findViewById (R.id.textView2);
            TextView Content_txt3 = (TextView) view.findViewById (R.id.textView3);
            Content_img.setImageResource (image_detail.get (position).getImageNumber ());
            Content_txt1.setText (image_detail.get (position).getName ());
            Content_txt2.setText (image_detail.get (position).getItemDescription ());
            Content_txt3.setText ("Price: " + image_detail.get (position).getPrice ());
            mAlert.setTitle (image_detail.get (position).getName ()).setView (view).setPositiveButton ("Buy", new DialogInterface.OnClickListener () {
                @Override
                public void onClick (DialogInterface dialog, int which) {
                    dialog.dismiss ();
                }}

            ).setNegativeButton ("Cancel", new DialogInterface.OnClickListener () {
                @Override
                public void onClick (DialogInterface dialog, int which) {
                    dialog.dismiss ();
                }}

            ).create ().show ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21499100_21503203_99_113
21499100_21508878_129_143
Title: How to show arraylist in AlertDialog 
----------------------------------------

public View getView (int position, View convertView, ViewGroup parent) {
    convertView = getLayoutInflater ().inflate (R.layout.custom_row, parent, false);
    TextView txtName = (TextView) convertView.findViewById (R.id.textView1);
    TextView txtDescription = (TextView) convertView.findViewById (R.id.textView2);
    TextView txtPrice = (TextView) convertView.findViewById (R.id.textView3);
    ImageView img = (ImageView) convertView.findViewById (R.id.imageView1);
    txtName.setText (image_detail.get (position).getName ());
    txtDescription.setText (image_detail.get (position).getItemDescription ());
    txtPrice.setText (image_detail.get (position).getPrice ());
    img.setImageResource (image_detail.get (position).getImageNumber ());
    return convertView;
}
----------------------------------------

public View getView (int position, View convertView, ViewGroup parent) {
    convertView = getLayoutInflater ().inflate (R.layout.custom_row, parent, false);
    TextView txtName = (TextView) convertView.findViewById (R.id.textView1);
    TextView txtDescription = (TextView) convertView.findViewById (R.id.textView2);
    TextView txtPrice = (TextView) convertView.findViewById (R.id.textView3);
    ImageView img = (ImageView) convertView.findViewById (R.id.imageView1);
    txtName.setText (image_detail.get (position).getName ());
    txtDescription.setText (image_detail.get (position).getItemDescription ());
    txtPrice.setText (image_detail.get (position).getPrice ());
    img.setImageResource (image_detail.get (position).getImageNumber ());
    return convertView;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21519021_21519103_10_40
21519021_33664507_4_33
Title: Count occurrence of integers in an array 
----------------------------------------

public static final void main (String [] igno_red) {
    int [] ai = new int [] {52, 67, 32, 43, 32, 21, 12, 5, 0, 3, 2, 0, 0};
    Map < Integer, Integer > mpNumWHits = new TreeMap < Integer, Integer > ();
    for (int i = 0;
    i < ai.length; i ++) {
        int iValue = ai [i];
        if (! mpNumWHits.containsKey (iValue)) {
            mpNumWHits.put (iValue, 1);
        } else {
            mpNumWHits.put (iValue, (mpNumWHits.get (iValue) + 1));
        }
    }
    Set < Integer > stInts = mpNumWHits.keySet ();
    Iterator < Integer > itrInts = stInts.iterator ();
    int [] ai100 = new int [100];
    int i = 0;
    while (itrInts.hasNext ()) {
        int iValue = itrInts.next ();
        int iHits = mpNumWHits.get (iValue);
        System.out.println (iValue + " found " + iHits + " times");
        ai100 [iValue] = iHits;
    }
    for (int j = 0;
    j < ai100.length; j ++) {
        if (ai100 [j] > 0) {
            System.out.println ("ai100[" + j + "]=" + ai100 [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int [] frequency = new int [100];
    System.out.println ("Enter the first integer: ");
    int number = input.nextInt ();
    while (number != 0) {
        ++ frequency [number];
        System.out.print ("Enter the next int value (zero to exit): ");
        number = input.nextInt ();
    }
    input.close ();
    System.out.println ("Value\tFrequency");
    for (int i = 0;
    i < frequency.length; i ++) {
        if (frequency [i] > 0) {
            if (frequency [i] > 1) System.out.println (i + " occurs " + frequency [i] + " times");
            else System.out.println (i + " occurs " + frequency [i] + " time");

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21519021_21519103_10_40
21519021_38393457_5_19
Title: Count occurrence of integers in an array 
----------------------------------------

public static final void main (String [] igno_red) {
    int [] ai = new int [] {52, 67, 32, 43, 32, 21, 12, 5, 0, 3, 2, 0, 0};
    Map < Integer, Integer > mpNumWHits = new TreeMap < Integer, Integer > ();
    for (int i = 0;
    i < ai.length; i ++) {
        int iValue = ai [i];
        if (! mpNumWHits.containsKey (iValue)) {
            mpNumWHits.put (iValue, 1);
        } else {
            mpNumWHits.put (iValue, (mpNumWHits.get (iValue) + 1));
        }
    }
    Set < Integer > stInts = mpNumWHits.keySet ();
    Iterator < Integer > itrInts = stInts.iterator ();
    int [] ai100 = new int [100];
    int i = 0;
    while (itrInts.hasNext ()) {
        int iValue = itrInts.next ();
        int iHits = mpNumWHits.get (iValue);
        System.out.println (iValue + " found " + iHits + " times");
        ai100 [iValue] = iHits;
    }
    for (int j = 0;
    j < ai100.length; j ++) {
        if (ai100 [j] > 0) {
            System.out.println ("ai100[" + j + "]=" + ai100 [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int a [] = {52, 67, 32, 43, 32, 21, 12, 5, 0, 3, 2, 0, 0};
    Arrays.sort (a);
    int len = a [a.length - 1] + 1;
    int count [] = new int [len];
    for (int n : a) {
        count [n] ++;
    }
    for (int j = 0;
    j < count.length; j ++) {
        if (count [j] >= 1) {
            System.out.println ("count:" + j + "---" + count [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21519021_33664507_4_33
21519021_38393457_5_19
Title: Count occurrence of integers in an array 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int [] frequency = new int [100];
    System.out.println ("Enter the first integer: ");
    int number = input.nextInt ();
    while (number != 0) {
        ++ frequency [number];
        System.out.print ("Enter the next int value (zero to exit): ");
        number = input.nextInt ();
    }
    input.close ();
    System.out.println ("Value\tFrequency");
    for (int i = 0;
    i < frequency.length; i ++) {
        if (frequency [i] > 0) {
            if (frequency [i] > 1) System.out.println (i + " occurs " + frequency [i] + " times");
            else System.out.println (i + " occurs " + frequency [i] + " time");

        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int a [] = {52, 67, 32, 43, 32, 21, 12, 5, 0, 3, 2, 0, 0};
    Arrays.sort (a);
    int len = a [a.length - 1] + 1;
    int count [] = new int [len];
    for (int n : a) {
        count [n] ++;
    }
    for (int j = 0;
    j < count.length; j ++) {
        if (count [j] >= 1) {
            System.out.println ("count:" + j + "---" + count [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21519979_21520074_1_16
21519979_21520089_1_11
Title: Array of Characters 
----------------------------------------

public static char [] getDigits (char [] charArray) {
    int digitCount = 0;
    for (char ch : charArray) {
        if (Character.isDigit (ch)) {
            digitCount ++;
        }
    }
    char [] toReturnDigits = new char [digitCount];
    int index = 0;
    for (char ch : charArray) {
        if (Character.isDigit (ch)) {
            toReturnDigits [index ++] = ch;
        }
    }
    return toReturnDigits;
}
----------------------------------------

public static char [] getDigits (char [] charArray) {
    int arrayLength = charArray.length;
    char [] toReturnDigits = new char [arrayLength];
    int index = 0;
    for (int i = 0;
    i < arrayLength; i ++) {
        if (parseInt (charArray [i].toString (), 10)) {
            toReturnDigits [index ++] = charArray [i];
        }
    }
    return toReturnDigits;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21521520_21521718_15_28
21521520_28426867_5_16
Title: How to convert an int so as to return the string which is how we say the int 
----------------------------------------

public static void main (String [] args) {
    int n = 0;
    Scanner scanf = new Scanner (System.in);
    System.out.println ("Enter an integer number: ");
    n = scanf.nextInt ();
    if (n <= 0) System.out.println ("Enter numbers greater than 0");
    else {
        YourNumberMyWord a = new YourNumberMyWord ();
        a.pw ((n / 1000000000), " Hundred");
        a.pw ((n / 10000000) % 100, " crore");
        a.pw (((n / 100000) % 100), " lakh");
        a.pw (((n / 1000) % 100), " thousand");
        a.pw (((n / 100) % 10), " hundred");
        a.pw ((n % 100), " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    String inputValue = JOptionPane.showInputDialog ("Please input a value");
    int num = Integer.parseInt (inputValue.toString ());
    if (num <= 10) {
        System.out.println (words [num - 1]);
    } else {
        JOptionPane.showMessageDialog (null, "You must put number 1 - 10", "alert", JOptionPane.ERROR_MESSAGE);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2153663_21935504_25_50
2153663_31682494_28_52
Title: Controlling Task execution order with ExecutorService 
----------------------------------------

public void execute (Runnable task, Object key) {
    if (key == null) {
        execute (task);
        return;
    }
    boolean first;
    Runnable wrappedTask;
    synchronized (keyedTasks) {
        Queue < Runnable > dependencyQueue = keyedTasks.get (key);
        first = (dependencyQueue == null);
        if (dependencyQueue == null) {
            dependencyQueue = new LinkedList < Runnable > ();
            keyedTasks.put (key, dependencyQueue);
        }
        wrappedTask = wrap (task, dependencyQueue, key);
        if (! first) dependencyQueue.add (wrappedTask);

    }
    if (first) delegate.execute (wrappedTask);

}
----------------------------------------

public void execute (Runnable runnable, Object key) {
    if (stopped) {
        return;
    }
    if (key == null) {
        delegate.execute (runnable);
        return;
    }
    Queue < Runnable > queueForKey = taskMap.computeIfPresent (key, (k, v) -> {
        v.add (runnable);
        return v;
    });
    if (queueForKey == null) {
        Queue < Runnable > newQ = new QueueWithHashCodeAndEquals < Runnable > (new ConcurrentLinkedQueue < Runnable > ());
        newQ.add (runnable);
        queueForKey = taskMap.putIfAbsent (key, newQ);
        if (queueForKey != null) queueForKey.add (runnable);

        delegate.execute (new InternalRunnable (key));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2153663_21935504_69_84
2153663_24175725_20_32
Title: Controlling Task execution order with ExecutorService 
----------------------------------------

public void run () {
    try {
        task.run ();
    } finally {
        Runnable nextTask = null;
        synchronized (keyedTasks) {
            if (dependencyQueue.isEmpty ()) {
                keyedTasks.remove (key);
            } else {
                nextTask = dependencyQueue.poll ();
            }
        }
        if (nextTask != null) delegate.execute (nextTask);

    }
}
----------------------------------------

public void run () {
    try {
        cdl1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Task 2");
    cdl2.countDown ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2153663_21935504_69_84
2153663_24175725_36_48
Title: Controlling Task execution order with ExecutorService 
----------------------------------------

public void run () {
    try {
        task.run ();
    } finally {
        Runnable nextTask = null;
        synchronized (keyedTasks) {
            if (dependencyQueue.isEmpty ()) {
                keyedTasks.remove (key);
            } else {
                nextTask = dependencyQueue.poll ();
            }
        }
        if (nextTask != null) delegate.execute (nextTask);

    }
}
----------------------------------------

public void run () {
    try {
        cdl2.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Task 3");
    cdl3.countDown ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2153663_21935504_69_84
2153663_31682494_75_94
Title: Controlling Task execution order with ExecutorService 
----------------------------------------

public void run () {
    try {
        task.run ();
    } finally {
        Runnable nextTask = null;
        synchronized (keyedTasks) {
            if (dependencyQueue.isEmpty ()) {
                keyedTasks.remove (key);
            } else {
                nextTask = dependencyQueue.poll ();
            }
        }
        if (nextTask != null) delegate.execute (nextTask);

    }
}
----------------------------------------

public void run () {
    while (true) {
        Runnable r = taskMap.get (key).poll ();
        while (r != null) {
            r.run ();
            r = taskMap.get (key).poll ();
        }
        boolean removed = taskMap.remove (key, EMPTY_QUEUE);
        if (removed) {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2153663_24175725_20_32
2153663_24175725_36_48
Title: Controlling Task execution order with ExecutorService 
----------------------------------------

public void run () {
    try {
        cdl1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Task 2");
    cdl2.countDown ();
}
----------------------------------------

public void run () {
    try {
        cdl2.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Task 3");
    cdl3.countDown ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2153663_24175725_20_32
2153663_31682494_75_94
Title: Controlling Task execution order with ExecutorService 
----------------------------------------

public void run () {
    try {
        cdl1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Task 2");
    cdl2.countDown ();
}
----------------------------------------

public void run () {
    while (true) {
        Runnable r = taskMap.get (key).poll ();
        while (r != null) {
            r.run ();
            r = taskMap.get (key).poll ();
        }
        boolean removed = taskMap.remove (key, EMPTY_QUEUE);
        if (removed) {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2153663_24175725_36_48
2153663_31682494_75_94
Title: Controlling Task execution order with ExecutorService 
----------------------------------------

public void run () {
    try {
        cdl2.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Task 3");
    cdl3.countDown ();
}
----------------------------------------

public void run () {
    while (true) {
        Runnable r = taskMap.get (key).poll ();
        while (r != null) {
            r.run ();
            r = taskMap.get (key).poll ();
        }
        boolean removed = taskMap.remove (key, EMPTY_QUEUE);
        if (removed) {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21537302_21537500_1_34
21537302_21538050_4_34
Title: I need help making a loop in an if-else statement in Java 
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    System.out.println ("Please enter your phone number: ");
    String number = keyboard.next ();
    String area_code = number.substring (0, 3);
    String first_three = number.substring (3, 6);
    String rest = number.substring (6, 9);
    String formatted_number = "";
    int new_number = Integer.parseInt (number);
    if (new_number < 10) {
        System.out.println ("It seems that you have entered an invalid phone number, please try again!");
    } else {
        formatted_number = "(" + area_code + ")" + " " + first_three + "-" + rest;
    }
    String final_number = formatted_number;
    System.out.println (formatted_number);
}
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    boolean notValid = true;
    System.out.println ("Please enter your phone number: ");
    while (notValid) {
        String number = keyboard.next ();
        if (number.length () != 10) {
            System.out.println ("It seems that you have entered an invalid phone number, please try again!");
        } else {
            String area_code = number.substring (0, 3);
            String first_three = number.substring (3, 6);
            String rest = number.substring (6, 10);
            String formatted_number = "(" + area_code + ")" + " " + first_three + "-" + rest;
            System.out.println (formatted_number);
            notValid = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21558458_21558542_4_11
21558458_21558642_4_11
Title: Refer to enclosing class' this from anonymous inner class 
----------------------------------------

public DecisionFunctionJ add (final DecisionFunctionJ another) {
    return new DecisionFunctionJ () {
        @Override
        public double evaluate () {
            return DecisionFunctionJ.this.evaluate () + another.evaluate ();
        }}

    ;
}
----------------------------------------

public DecisionFunctionJ add (final DecisionFunctionJ another) {
    return new DecisionFunctionJ () {
        @Override
        public double evaluate () {
            return outerEvaluate () + another.evaluate ();
        }}

    ;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21560566_21560793_8_30
21560566_21561345_9_39
Title: Java Filtering in collections 
----------------------------------------

public static void main (String [] args) {
    List < Emp > emps = new ArrayList < Emp > ();
    emps.add (new Emp (10, "Anitha", 1000, "AE"));
    emps.add (new Emp (20, "Chaitanya", 2000, "SE"));
    System.out.println ("filterEmpsByName(emps, \"Anitha\") output:");
    for (Emp emp : filterEmpsByName (emps, "Anitha")) {
        System.out.println (emp.toString ());
    }
    System.out.println ("getDistinctlyNamedEmps(emps) output:");
    for (Emp emp : getDistinctlyNamedEmps (emps)) {
        System.out.println (emp.toString ());
    }
}
----------------------------------------

public static void main (String [] args) {
    List < Emp > list = new ArrayList < Emp > ();
    list.add (new Emp (10, "Anitha", 1000, "AE"));
    list.add (new Emp (20, "Chaitanya", 2000, "SE"));
    list.add (new Emp (30, "Chaitanya", 3000, "SE"));
    list.add (new Emp (40, "Deepthi", 2100, "AE"));
    list.add (new Emp (50, "Deepthi", 2200, "CE"));
    list.add (new Emp (60, "Deepthi", 2300, "BE"));
    list.add (new Emp (70, "Anitha", 2300, "BE"));
    list.add (new Emp (80, "Anitha", 2400, "ME"));
    list.add (new Emp (90, "Sita", 2200, "CE"));
    list.add (new Emp (100, "Hari", 2200, "CE"));
    list.add (new Emp (110, "Krishna", 2200, "CE"));
    Function < Emp, String > keyFunction = new Function < Emp, String > () {
        @Override
        public String apply (Emp s) {
            return s.getName ();
        }}

    ;
    List < Emp > fiteredOnUnique = filterOnUnique (list, keyFunction);
    System.out.println ("Filtered on unique:");
    print (fiteredOnUnique);
    List < Emp > filteredOnSame = filterOnSame (list, keyFunction);
    System.out.println ("Filtered on same:");
    print (filteredOnSame);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21568582_21568869_19_54
21568582_21569108_18_49
Title: Reading a txt file using scanner class get InputMismatchException. What am I doing wrong? 
----------------------------------------

public static void main (final String [] args) {
    Scanner input = null;
    final int MAX_LEN = 25;
    int counter = 0;
    final String filePath = "records.txt";
    final Records [] rec = new Records [MAX_LEN];
    File file;
    try {
        file = new File (filePath);
        input = new Scanner (file);
        final Pattern pat = Pattern.compile ("[ \r\n]");
        input.useDelimiter (pat);
        do {
            rec [counter] = new Records ();
            rec [counter].id = input.nextInt ();
            rec [counter].name = input.next ();
            rec [counter].gender = input.next ();
            ++ counter;
        } while (input.hasNext () && (input.next () != null));
    } catch (final IOException ex) {
        System.out.println ("File access error");
        counter = 0;
    }
    System.out.println (rec [0].name);
}
----------------------------------------

public static void main (String [] args) {
    String filePath = "records.txt";
    ArrayList < Records > rec = new ArrayList < Records > ();
    try {
        FileReader fr = new FileReader (filePath);
        BufferedReader br = new BufferedReader (fr);
        String nextLine;
        String splitText [];
        while ((nextLine = br.readLine ()) != null) {
            Records temp = new Records ();
            splitText = nextLine.split (", ");
            temp.id = Integer.parseInt (splitText [0]);
            temp.name = splitText [1];
            temp.gender = splitText [2];
            rec.add (temp);
        }
        br.close ();
    } catch (IOException ex) {
        System.out.println ("File access error");
    }
    for (int i = 0;
    i < rec.size (); i ++) {
        System.out.println ("Record ID: " + rec.get (i).id + "\n" + "Record Name: " + rec.get (i).name + "\n" + "Record Gender: " + rec.get (i).gender);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21568851_21569036_200_223
21568851_21569036_35_48
Title: java making a screen shot preview with JPanel 
----------------------------------------

public void run () {
    try {
        Robot bot = new Robot ();
        while (true) {
            BufferedImage img = bot.createScreenCapture (bounds);
            double scale = puzzler.getScale ();
            Rectangle scaled = new Rectangle (bounds);
            scaled.x *= scale;
            scaled.y *= scale;
            scaled.width *= scale;
            scaled.height *= scale;
            BufferedImage imgScaled = getScaledInstance (img, scale);
            publish (new PuzzlePiece (scaled, imgScaled));
            Thread.sleep (500);
        }
    } catch (AWTException | InterruptedException exp) {
        exp.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (new TestPane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21572185_35600226_8_33
21572185_38937946_28_64
Title: informix jdbc stuck connecting 
----------------------------------------

public static void main (String [] args) {
    try {
        Class.forName ("com.informix.jdbc.IfxDriver");
    } catch (Exception e) {
        System.out.println ("ERROR: failed to load Informix JDBC driver.");
        e.printStackTrace ();
        return;
    }
    try {
        DriverManager.registerDriver ((com.informix.jdbc.IfxDriver) Class.forName ("com.informix.jdbc.IfxDriver").newInstance ());
    } catch (Exception ex) {
        System.out.println ("Driver is not Registered");
    }
    try {
        Connection conn = DriverManager.getConnection (url);
        System.out.println ("Connection Successful");
    } catch (SQLException e) {
        System.out.println ("ERROR: failed to connect!");
        System.out.println ("ERROR: " + e.getMessage ());
        e.printStackTrace ();
        return;
    }
}
----------------------------------------

public static void main (String [] args) {
    if (args.length == 0) {
        System.out.println ("FAILED: connection URL must be provided in order to run the demo!");
        return;
    }
    String url = args [0];
    String testName = "Simple Connection";
    Connection conn = null;
    System.out.println ("><![CDATA[>>" + testName + " test.");
    System.out.println ("URL = \"" + url + "\"");
    try {
        Class.forName ("com.informix.jdbc.IfxDriver");
    } catch (Exception e) {
        System.out.println ("FAILED: failed to load Informix JDBC driver.");
    }
    try {
        PrintWriter out = new PrintWriter (System.out, true);
        DriverManager.setLogWriter (out);
        conn = DriverManager.getConnection (url);
    } catch (SQLException e) {
        System.out.println ("FAILED: failed to connect!");
    }
    try {
        conn.close ();
    } catch (SQLException e) {
        System.out.println ("FAILED: failed to close the connection!");
    }
    System.out.println ("><![CDATA[>>End of " + testName + " test.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21578432_21578535_17_26
21578432_21578725_8_17
Title: How do you compare enum to int? 
----------------------------------------

public State getState (int x, int y) {
    y = 1;
    for (x = 5; x > 0; x --) {
        if (x == State.BLANK.getValue () && y == State.BLANK.getValue ()) {
            return State.RED;
        }
    }
    return State.BLANK;
}
----------------------------------------

public State getState (int x, int y) {
    y = 1;
    for (x = 5; x > 0; x --) {
        if (x == State.BLANK.ordinal () && y == State.BLANK.ordinal ()) {
            return State.RED;
        }
    }
    return State.BLANK;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21589139_21589186_1_10
21589139_21589229_1_11
Title: Getting error trying to reverse a string in Java 
----------------------------------------

public static String revSentence (String str) {
    String [] givenString = str.split (" ");
    StringBuilder result = new StringBuilder ();
    for (int i = givenString.length - 1;
    i >= 0; i --) {
        result.append (givenString [i]);
    }
    return result.toString ();
}
----------------------------------------

public static String revSentence (String str) {
    String [] givenString = str.split (" ");
    StringBuilder sb = new StringBuilder ();
    for (int i = givenString.length - 1;
    i >= 0; i --) {
        sb.append (givenString [i]);
        if (i != 0) sb.append (" ");

    }
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21589139_21589186_1_10
21589139_21589310_2_10
Title: Getting error trying to reverse a string in Java 
----------------------------------------

public static String revSentence (String str) {
    String [] givenString = str.split (" ");
    StringBuilder result = new StringBuilder ();
    for (int i = givenString.length - 1;
    i >= 0; i --) {
        result.append (givenString [i]);
    }
    return result.toString ();
}
----------------------------------------

public static String revSentence (String str) {
    String retString = "";
    String [] givenString = str.split (" ");
    for (int i = givenString.length - 1;
    i >= 0; i --) {
        retString += givenString [i] + " ";
    }
    return retString;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21589139_21589229_1_11
21589139_21589310_2_10
Title: Getting error trying to reverse a string in Java 
----------------------------------------

public static String revSentence (String str) {
    String [] givenString = str.split (" ");
    StringBuilder sb = new StringBuilder ();
    for (int i = givenString.length - 1;
    i >= 0; i --) {
        sb.append (givenString [i]);
        if (i != 0) sb.append (" ");

    }
    return sb.toString ();
}
----------------------------------------

public static String revSentence (String str) {
    String retString = "";
    String [] givenString = str.split (" ");
    for (int i = givenString.length - 1;
    i >= 0; i --) {
        retString += givenString [i] + " ";
    }
    return retString;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21590908_37423875_1_17
21590908_45457018_1_18
Title: How to find all odd occurring elements in an array in JAVA 
----------------------------------------

public int solution (int [] A) {
    Set < Integer > unpaired = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (unpaired.contains (A [i])) {
            unpaired.remove (new Integer (A [i]));
        } else {
            unpaired.add (A [i]);
        }
    }
    for (Integer res : unpaired) {
        System.out.println (res);
    }
}
----------------------------------------

public int solution (int [] A) {
    HashMap < Integer, Integer > map = new HashMap < > ();
    HashSet < Integer > val = new HashSet < > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (map.get (A [i]) == null) {
            map.put (A [i], 1);
        } else map.put (A [i], map.get (A [i]) + 1);

        if (map.get (A [i]) % 2 == 1) val.add (A [i]);
        else val.remove (A [i]);

    }
    Iterator < Integer > itr = val.iterator ();
    return itr.next ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21616404_21616574_7_24
21616404_21616901_1_18
Title: How can I make java look at the previous value in an arrayList and return an error if it is the same as the next? 
----------------------------------------

public static void main (String...args) {
    input = new Scanner (System.in);
    arr = new ArrayList < > ();
    while (true) {
        System.out.print ("Please enter a value: ");
        String val = input.nextLine ();
        if (arr.contains (val)) System.out.println ("Please enter some other value you've already entered : " + val);
        else arr.add (val);

    }
}
----------------------------------------

public static void main (final String [] args) {
    final ArrayList < String > strings = new ArrayList < String > ();
    addToArray (strings, "apple");
    addToArray (strings, "banana");
    addToArray (strings, "apple");
    addToArray (strings, "cherry");
    try {
        addToArray (strings, "cherry");
    } catch (IllegalArgumentException e) {
        System.err.println (e.getMessage ());
    }
    try {
        addToArray (strings, "apple");
    } catch (IllegalArgumentException e) {
        System.err.println (e.getMessage ());
    }
    System.out.println (strings);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21618885_21618909_1_15
21618885_21619332_1_15
Title: Get a least occurred value in a Map 
----------------------------------------

public static int rarest (Map < String, Integer > map) {
    List < Integer > list = new ArrayList < Integer > ();
    for (Integer i : map.values ()) {
        list.add (i);
    }
    int min = Integer.MAX_VALUE, rarestValue = 0;
    for (Integer i : list) {
        int count = Collections.frequency (list, i);
        if (count < min || (count == min && i < rarestValue)) {
            min = count;
            rarestValue = i;
        }
    }
    return rarestValue;
}
----------------------------------------

public static int rarest (Map < String, Integer > map) {
    List < Integer > list = new ArrayList < > (map.values ());
    Collections.sort (list);
    int min = list.get (0);
    int count = 0, rarest = 0;
    for (Integer i : list) {
        count = Collections.frequency (list, i);
        if (count < min) {
            min = count;
            rarest = i;
        }
    }
    return rarest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21630732_21630822_1_11
21630732_21630926_1_14
Title: How to return a String Array 
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] asAllWordsInLine = line.split (" ");
    java.util.ArrayList < String > alsAllWordsWithChar = new java.util.ArrayList < String > ();
    for (String ss : asAllWordsInLine) {
        if (ss.indexOf (letter) != - 1) {
            alsAllWordsWithChar.add (ss);
            continue;
        }
    }
    return alsAllWordsWithChar.toArray (new String [alsAllWordsWithChar.size ()]);
}
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    for (String ss : arr) {
        String ary [] = {ss};
        for (int i = 0;
        i < ary.length; i ++) {
            int numindex = ss.indexOf (letter);
            if (numindex != - 1) {
                String result = ary [i];
            }
        }
    }
    return ary;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21630732_21630822_1_11
21630732_21631201_1_14
Title: How to return a String Array 
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] asAllWordsInLine = line.split (" ");
    java.util.ArrayList < String > alsAllWordsWithChar = new java.util.ArrayList < String > ();
    for (String ss : asAllWordsInLine) {
        if (ss.indexOf (letter) != - 1) {
            alsAllWordsWithChar.add (ss);
            continue;
        }
    }
    return alsAllWordsWithChar.toArray (new String [alsAllWordsWithChar.size ()]);
}
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    String [] result = new String [ary.length];
    for (String ss : arr) {
        String ary [] = {ss};
        for (int i = 0;
        i < ary.length; i ++) {
            int numindex = ss.indexOf (letter);
            if (numindex != - 1) {
                result [i] = ary [i];
            }
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21630732_21630926_1_14
21630732_21631201_1_14
Title: How to return a String Array 
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    for (String ss : arr) {
        String ary [] = {ss};
        for (int i = 0;
        i < ary.length; i ++) {
            int numindex = ss.indexOf (letter);
            if (numindex != - 1) {
                String result = ary [i];
            }
        }
    }
    return ary;
}
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    String [] result = new String [ary.length];
    for (String ss : arr) {
        String ary [] = {ss};
        for (int i = 0;
        i < ary.length; i ++) {
            int numindex = ss.indexOf (letter);
            if (numindex != - 1) {
                result [i] = ary [i];
            }
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21630732_21630926_1_14
21630732_21631318_1_12
Title: How to return a String Array 
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    for (String ss : arr) {
        String ary [] = {ss};
        for (int i = 0;
        i < ary.length; i ++) {
            int numindex = ss.indexOf (letter);
            if (numindex != - 1) {
                String result = ary [i];
            }
        }
    }
    return ary;
}
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    List < String > result = new ArrayList < > ();
    for (String ss : arr) {
        int numindex = ss.indexOf (letter);
        if (numindex != - 1) {
            result.add (ss);
        }
    }
    return result.toArray (new String [result.size ()]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21630732_21631201_1_14
21630732_21631318_1_12
Title: How to return a String Array 
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    String [] result = new String [ary.length];
    for (String ss : arr) {
        String ary [] = {ss};
        for (int i = 0;
        i < ary.length; i ++) {
            int numindex = ss.indexOf (letter);
            if (numindex != - 1) {
                result [i] = ary [i];
            }
        }
    }
    return result;
}
----------------------------------------

public String [] allWordsWith (char letter) {
    String [] arr = line.split (" ");
    List < String > result = new ArrayList < > ();
    for (String ss : arr) {
        int numindex = ss.indexOf (letter);
        if (numindex != - 1) {
            result.add (ss);
        }
    }
    return result.toArray (new String [result.size ()]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_21987633_8_41
21635397_29332929_1_28
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    double minAvg = 100000;
    int index = 0;
    if (A.length <= 2) {
        return 0;
    }
    for (int i = 0;
    i < A.length - 2; i ++) {
        if ((A [i] + A [i + 1]) / 2.0 < minAvg) {
            minAvg = (A [i] + A [i + 1]) / 2.0;
            index = i;
        }
        if ((A [i] + A [i + 1] + A [i + 2]) / 3.0 < minAvg) {
            minAvg = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
            index = i;
        }
    }
    int aMax = A.length - 2;
    if ((A [aMax] + A [aMax + 1]) / 2.0 < minAvg) {
        minAvg = (A [aMax] + A [aMax + 1]) / 2.0;
        index = aMax;
    }
    return index;
}
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return 0;

    int minSliceTwo = A [0] + A [1];
    int minTwoIndex = 0;
    int minSliceThree = Integer.MAX_VALUE;
    int minThreeIndex = 0;
    for (int i = 2;
    i < A.length; i ++) {
        int sliceTwo = A [i - 1] + A [i];
        if (sliceTwo < minSliceTwo) {
            minSliceTwo = sliceTwo;
            minTwoIndex = i - 1;
        }
        int sliceThree = sliceTwo + A [i - 2];
        if (sliceThree < minSliceThree) {
            minSliceThree = sliceThree;
            minThreeIndex = i - 2;
        }
    }
    int averageMinTwo = minSliceTwo * 3;
    int averageMinThree = minSliceThree * 2;
    if (averageMinTwo == averageMinThree) return Math.min (minTwoIndex, minThreeIndex);
    else return averageMinTwo < averageMinThree ? minTwoIndex : minThreeIndex;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_21987633_8_41
21635397_31901400_1_31
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    double minAvg = 100000;
    int index = 0;
    if (A.length <= 2) {
        return 0;
    }
    for (int i = 0;
    i < A.length - 2; i ++) {
        if ((A [i] + A [i + 1]) / 2.0 < minAvg) {
            minAvg = (A [i] + A [i + 1]) / 2.0;
            index = i;
        }
        if ((A [i] + A [i + 1] + A [i + 2]) / 3.0 < minAvg) {
            minAvg = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
            index = i;
        }
    }
    int aMax = A.length - 2;
    if ((A [aMax] + A [aMax + 1]) / 2.0 < minAvg) {
        minAvg = (A [aMax] + A [aMax + 1]) / 2.0;
        index = aMax;
    }
    return index;
}
----------------------------------------

public int solution (int [] A) {
    int minIndex = 0;
    double minAvgVal = Double.MaxValue;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        double twoDigitMin = (A [i] + A [i + 1]) / 2.0;
        if (minAvgVal > twoDigitMin) {
            minAvgVal = twoDigitMin;
            minIndex = i;
        }
        double threDigitMin = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
        if (minAvgVal > threDigitMin) {
            minAvgVal = threDigitMin;
            minIndex = i;
        }
    }
    double last2Avg = (A [A.Length - 2] + A [A.Length - 1]) / 2.0;
    if (minAvgVal > last2Avg) {
        minIndex = A.Length - 2;
    }
    return minIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_21987633_8_41
21635397_32085588_1_32
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    double minAvg = 100000;
    int index = 0;
    if (A.length <= 2) {
        return 0;
    }
    for (int i = 0;
    i < A.length - 2; i ++) {
        if ((A [i] + A [i + 1]) / 2.0 < minAvg) {
            minAvg = (A [i] + A [i + 1]) / 2.0;
            index = i;
        }
        if ((A [i] + A [i + 1] + A [i + 2]) / 3.0 < minAvg) {
            minAvg = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
            index = i;
        }
    }
    int aMax = A.length - 2;
    if ((A [aMax] + A [aMax + 1]) / 2.0 < minAvg) {
        minAvg = (A [aMax] + A [aMax + 1]) / 2.0;
        index = aMax;
    }
    return index;
}
----------------------------------------

public static int solution (int [] A) {
    float min_avg = (A [0] + A [1]) / 2;
    int minpos = 0;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        float firsttwo = (float) (A [i] + A [i + 1]) / 2;
        if (firsttwo < min_avg) {
            min_avg = firsttwo;
            minpos = i;
        }
        float three = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (three < min_avg) {
            min_avg = three;
            minpos = i;
        }
        float lasttwo = (float) (A [i + 1] + A [i + 2]) / 2;
        if (lasttwo < min_avg) {
            min_avg = lasttwo;
            minpos = i + 1;
        }
    }
    return minpos;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_21987633_8_41
21635397_38538843_1_33
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    double minAvg = 100000;
    int index = 0;
    if (A.length <= 2) {
        return 0;
    }
    for (int i = 0;
    i < A.length - 2; i ++) {
        if ((A [i] + A [i + 1]) / 2.0 < minAvg) {
            minAvg = (A [i] + A [i + 1]) / 2.0;
            index = i;
        }
        if ((A [i] + A [i + 1] + A [i + 2]) / 3.0 < minAvg) {
            minAvg = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
            index = i;
        }
    }
    int aMax = A.length - 2;
    if ((A [aMax] + A [aMax + 1]) / 2.0 < minAvg) {
        minAvg = (A [aMax] + A [aMax + 1]) / 2.0;
        index = aMax;
    }
    return index;
}
----------------------------------------

private static int solution (int [] a) {
    int sum = 0;
    int absSum = 0;
    int minAbsSlice = 10000;
    for (int i = 0;
    i < a.length; i ++) {
        sum = a [i];
        for (int j = 1;
        j < a.length; j ++) {
            if (j >= i) {
                absSum = sum + a [j];
                if (absSum < sum) {
                    sum = absSum;
                    absSum = Math.abs (absSum);
                } else {
                    absSum = Math.abs (sum);
                    sum = absSum;
                }
            }
        }
        sum = 0;
        if (minAbsSlice < absSum) {
            minAbsSlice = minAbsSlice;
        } else {
            minAbsSlice = absSum;
        }
    }
    return minAbsSlice;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_21987633_8_41
21635397_48398165_1_46
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    double minAvg = 100000;
    int index = 0;
    if (A.length <= 2) {
        return 0;
    }
    for (int i = 0;
    i < A.length - 2; i ++) {
        if ((A [i] + A [i + 1]) / 2.0 < minAvg) {
            minAvg = (A [i] + A [i + 1]) / 2.0;
            index = i;
        }
        if ((A [i] + A [i + 1] + A [i + 2]) / 3.0 < minAvg) {
            minAvg = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
            index = i;
        }
    }
    int aMax = A.length - 2;
    if ((A [aMax] + A [aMax + 1]) / 2.0 < minAvg) {
        minAvg = (A [aMax] + A [aMax + 1]) / 2.0;
        index = aMax;
    }
    return index;
}
----------------------------------------

public int solution (int vect []) {
    double minAvg = (vect [0] + vect [1]) / 2.;
    int minIndex = 0;
    double tempAvg = minAvg;
    int tempSum = vect [0] + vect [1];
    int tempIndex = 0;
    int tempLength = 2;
    double newAvg;
    int newSum, newIndex;
    for (int j = 2;
    j < vect.length; ++ j) {
        ++ tempLength;
        tempSum += vect [j];
        tempAvg = (double) tempSum / tempLength;
        newSum = tempSum - vect [tempIndex];
        newIndex = tempIndex + 1;
        newAvg = newSum / (j - newIndex + 1.);
        while (newAvg < tempAvg && newIndex < j) {
            tempIndex = newIndex;
            tempSum = newSum;
            tempAvg = newAvg;
            -- tempLength;
            newSum = tempSum - vect [tempIndex];
            newIndex = tempIndex + 1;
            newAvg = newSum / (j - newIndex + 1.);
        }
        if (tempAvg < minAvg) {
            minIndex = tempIndex;
            minAvg = tempAvg;
        } else if (tempAvg > minAvg && j - tempIndex > 1) {
            tempIndex = j;
            tempLength = 1;
            tempSum = vect [j];
        }

    }
    return minIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_21987633_8_41
21635397_50605322_1_23
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    double minAvg = 100000;
    int index = 0;
    if (A.length <= 2) {
        return 0;
    }
    for (int i = 0;
    i < A.length - 2; i ++) {
        if ((A [i] + A [i + 1]) / 2.0 < minAvg) {
            minAvg = (A [i] + A [i + 1]) / 2.0;
            index = i;
        }
        if ((A [i] + A [i + 1] + A [i + 2]) / 3.0 < minAvg) {
            minAvg = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
            index = i;
        }
    }
    int aMax = A.length - 2;
    if ((A [aMax] + A [aMax + 1]) / 2.0 < minAvg) {
        minAvg = (A [aMax] + A [aMax + 1]) / 2.0;
        index = aMax;
    }
    return index;
}
----------------------------------------

public int solution (int [] A) {
    float tempAverage, finalAverage = Float.MAX_VALUE;
    int startLocation = 0;
    int lengthOfTheSlice = 0;
    for (int i = 0;
    i < A.length - 1; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1]) / 2;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 2;
        }
    }
    for (int i = 0;
    i < A.length - 2; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 3;
        }
    }
    System.out.print ("Length of the slice \t" + lengthOfTheSlice);
    return startLocation;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_29332929_1_28
21635397_31901400_1_31
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return 0;

    int minSliceTwo = A [0] + A [1];
    int minTwoIndex = 0;
    int minSliceThree = Integer.MAX_VALUE;
    int minThreeIndex = 0;
    for (int i = 2;
    i < A.length; i ++) {
        int sliceTwo = A [i - 1] + A [i];
        if (sliceTwo < minSliceTwo) {
            minSliceTwo = sliceTwo;
            minTwoIndex = i - 1;
        }
        int sliceThree = sliceTwo + A [i - 2];
        if (sliceThree < minSliceThree) {
            minSliceThree = sliceThree;
            minThreeIndex = i - 2;
        }
    }
    int averageMinTwo = minSliceTwo * 3;
    int averageMinThree = minSliceThree * 2;
    if (averageMinTwo == averageMinThree) return Math.min (minTwoIndex, minThreeIndex);
    else return averageMinTwo < averageMinThree ? minTwoIndex : minThreeIndex;

}
----------------------------------------

public int solution (int [] A) {
    int minIndex = 0;
    double minAvgVal = Double.MaxValue;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        double twoDigitMin = (A [i] + A [i + 1]) / 2.0;
        if (minAvgVal > twoDigitMin) {
            minAvgVal = twoDigitMin;
            minIndex = i;
        }
        double threDigitMin = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
        if (minAvgVal > threDigitMin) {
            minAvgVal = threDigitMin;
            minIndex = i;
        }
    }
    double last2Avg = (A [A.Length - 2] + A [A.Length - 1]) / 2.0;
    if (minAvgVal > last2Avg) {
        minIndex = A.Length - 2;
    }
    return minIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_29332929_1_28
21635397_32085588_1_32
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return 0;

    int minSliceTwo = A [0] + A [1];
    int minTwoIndex = 0;
    int minSliceThree = Integer.MAX_VALUE;
    int minThreeIndex = 0;
    for (int i = 2;
    i < A.length; i ++) {
        int sliceTwo = A [i - 1] + A [i];
        if (sliceTwo < minSliceTwo) {
            minSliceTwo = sliceTwo;
            minTwoIndex = i - 1;
        }
        int sliceThree = sliceTwo + A [i - 2];
        if (sliceThree < minSliceThree) {
            minSliceThree = sliceThree;
            minThreeIndex = i - 2;
        }
    }
    int averageMinTwo = minSliceTwo * 3;
    int averageMinThree = minSliceThree * 2;
    if (averageMinTwo == averageMinThree) return Math.min (minTwoIndex, minThreeIndex);
    else return averageMinTwo < averageMinThree ? minTwoIndex : minThreeIndex;

}
----------------------------------------

public static int solution (int [] A) {
    float min_avg = (A [0] + A [1]) / 2;
    int minpos = 0;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        float firsttwo = (float) (A [i] + A [i + 1]) / 2;
        if (firsttwo < min_avg) {
            min_avg = firsttwo;
            minpos = i;
        }
        float three = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (three < min_avg) {
            min_avg = three;
            minpos = i;
        }
        float lasttwo = (float) (A [i + 1] + A [i + 2]) / 2;
        if (lasttwo < min_avg) {
            min_avg = lasttwo;
            minpos = i + 1;
        }
    }
    return minpos;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_29332929_1_28
21635397_38538843_1_33
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return 0;

    int minSliceTwo = A [0] + A [1];
    int minTwoIndex = 0;
    int minSliceThree = Integer.MAX_VALUE;
    int minThreeIndex = 0;
    for (int i = 2;
    i < A.length; i ++) {
        int sliceTwo = A [i - 1] + A [i];
        if (sliceTwo < minSliceTwo) {
            minSliceTwo = sliceTwo;
            minTwoIndex = i - 1;
        }
        int sliceThree = sliceTwo + A [i - 2];
        if (sliceThree < minSliceThree) {
            minSliceThree = sliceThree;
            minThreeIndex = i - 2;
        }
    }
    int averageMinTwo = minSliceTwo * 3;
    int averageMinThree = minSliceThree * 2;
    if (averageMinTwo == averageMinThree) return Math.min (minTwoIndex, minThreeIndex);
    else return averageMinTwo < averageMinThree ? minTwoIndex : minThreeIndex;

}
----------------------------------------

private static int solution (int [] a) {
    int sum = 0;
    int absSum = 0;
    int minAbsSlice = 10000;
    for (int i = 0;
    i < a.length; i ++) {
        sum = a [i];
        for (int j = 1;
        j < a.length; j ++) {
            if (j >= i) {
                absSum = sum + a [j];
                if (absSum < sum) {
                    sum = absSum;
                    absSum = Math.abs (absSum);
                } else {
                    absSum = Math.abs (sum);
                    sum = absSum;
                }
            }
        }
        sum = 0;
        if (minAbsSlice < absSum) {
            minAbsSlice = minAbsSlice;
        } else {
            minAbsSlice = absSum;
        }
    }
    return minAbsSlice;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_29332929_1_28
21635397_48398165_1_46
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return 0;

    int minSliceTwo = A [0] + A [1];
    int minTwoIndex = 0;
    int minSliceThree = Integer.MAX_VALUE;
    int minThreeIndex = 0;
    for (int i = 2;
    i < A.length; i ++) {
        int sliceTwo = A [i - 1] + A [i];
        if (sliceTwo < minSliceTwo) {
            minSliceTwo = sliceTwo;
            minTwoIndex = i - 1;
        }
        int sliceThree = sliceTwo + A [i - 2];
        if (sliceThree < minSliceThree) {
            minSliceThree = sliceThree;
            minThreeIndex = i - 2;
        }
    }
    int averageMinTwo = minSliceTwo * 3;
    int averageMinThree = minSliceThree * 2;
    if (averageMinTwo == averageMinThree) return Math.min (minTwoIndex, minThreeIndex);
    else return averageMinTwo < averageMinThree ? minTwoIndex : minThreeIndex;

}
----------------------------------------

public int solution (int vect []) {
    double minAvg = (vect [0] + vect [1]) / 2.;
    int minIndex = 0;
    double tempAvg = minAvg;
    int tempSum = vect [0] + vect [1];
    int tempIndex = 0;
    int tempLength = 2;
    double newAvg;
    int newSum, newIndex;
    for (int j = 2;
    j < vect.length; ++ j) {
        ++ tempLength;
        tempSum += vect [j];
        tempAvg = (double) tempSum / tempLength;
        newSum = tempSum - vect [tempIndex];
        newIndex = tempIndex + 1;
        newAvg = newSum / (j - newIndex + 1.);
        while (newAvg < tempAvg && newIndex < j) {
            tempIndex = newIndex;
            tempSum = newSum;
            tempAvg = newAvg;
            -- tempLength;
            newSum = tempSum - vect [tempIndex];
            newIndex = tempIndex + 1;
            newAvg = newSum / (j - newIndex + 1.);
        }
        if (tempAvg < minAvg) {
            minIndex = tempIndex;
            minAvg = tempAvg;
        } else if (tempAvg > minAvg && j - tempIndex > 1) {
            tempIndex = j;
            tempLength = 1;
            tempSum = vect [j];
        }

    }
    return minIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_29332929_1_28
21635397_50605322_1_23
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return 0;

    int minSliceTwo = A [0] + A [1];
    int minTwoIndex = 0;
    int minSliceThree = Integer.MAX_VALUE;
    int minThreeIndex = 0;
    for (int i = 2;
    i < A.length; i ++) {
        int sliceTwo = A [i - 1] + A [i];
        if (sliceTwo < minSliceTwo) {
            minSliceTwo = sliceTwo;
            minTwoIndex = i - 1;
        }
        int sliceThree = sliceTwo + A [i - 2];
        if (sliceThree < minSliceThree) {
            minSliceThree = sliceThree;
            minThreeIndex = i - 2;
        }
    }
    int averageMinTwo = minSliceTwo * 3;
    int averageMinThree = minSliceThree * 2;
    if (averageMinTwo == averageMinThree) return Math.min (minTwoIndex, minThreeIndex);
    else return averageMinTwo < averageMinThree ? minTwoIndex : minThreeIndex;

}
----------------------------------------

public int solution (int [] A) {
    float tempAverage, finalAverage = Float.MAX_VALUE;
    int startLocation = 0;
    int lengthOfTheSlice = 0;
    for (int i = 0;
    i < A.length - 1; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1]) / 2;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 2;
        }
    }
    for (int i = 0;
    i < A.length - 2; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 3;
        }
    }
    System.out.print ("Length of the slice \t" + lengthOfTheSlice);
    return startLocation;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_31901400_1_31
21635397_32085588_1_32
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    int minIndex = 0;
    double minAvgVal = Double.MaxValue;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        double twoDigitMin = (A [i] + A [i + 1]) / 2.0;
        if (minAvgVal > twoDigitMin) {
            minAvgVal = twoDigitMin;
            minIndex = i;
        }
        double threDigitMin = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
        if (minAvgVal > threDigitMin) {
            minAvgVal = threDigitMin;
            minIndex = i;
        }
    }
    double last2Avg = (A [A.Length - 2] + A [A.Length - 1]) / 2.0;
    if (minAvgVal > last2Avg) {
        minIndex = A.Length - 2;
    }
    return minIndex;
}
----------------------------------------

public static int solution (int [] A) {
    float min_avg = (A [0] + A [1]) / 2;
    int minpos = 0;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        float firsttwo = (float) (A [i] + A [i + 1]) / 2;
        if (firsttwo < min_avg) {
            min_avg = firsttwo;
            minpos = i;
        }
        float three = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (three < min_avg) {
            min_avg = three;
            minpos = i;
        }
        float lasttwo = (float) (A [i + 1] + A [i + 2]) / 2;
        if (lasttwo < min_avg) {
            min_avg = lasttwo;
            minpos = i + 1;
        }
    }
    return minpos;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_31901400_1_31
21635397_38538843_1_33
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    int minIndex = 0;
    double minAvgVal = Double.MaxValue;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        double twoDigitMin = (A [i] + A [i + 1]) / 2.0;
        if (minAvgVal > twoDigitMin) {
            minAvgVal = twoDigitMin;
            minIndex = i;
        }
        double threDigitMin = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
        if (minAvgVal > threDigitMin) {
            minAvgVal = threDigitMin;
            minIndex = i;
        }
    }
    double last2Avg = (A [A.Length - 2] + A [A.Length - 1]) / 2.0;
    if (minAvgVal > last2Avg) {
        minIndex = A.Length - 2;
    }
    return minIndex;
}
----------------------------------------

private static int solution (int [] a) {
    int sum = 0;
    int absSum = 0;
    int minAbsSlice = 10000;
    for (int i = 0;
    i < a.length; i ++) {
        sum = a [i];
        for (int j = 1;
        j < a.length; j ++) {
            if (j >= i) {
                absSum = sum + a [j];
                if (absSum < sum) {
                    sum = absSum;
                    absSum = Math.abs (absSum);
                } else {
                    absSum = Math.abs (sum);
                    sum = absSum;
                }
            }
        }
        sum = 0;
        if (minAbsSlice < absSum) {
            minAbsSlice = minAbsSlice;
        } else {
            minAbsSlice = absSum;
        }
    }
    return minAbsSlice;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_31901400_1_31
21635397_48398165_1_46
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    int minIndex = 0;
    double minAvgVal = Double.MaxValue;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        double twoDigitMin = (A [i] + A [i + 1]) / 2.0;
        if (minAvgVal > twoDigitMin) {
            minAvgVal = twoDigitMin;
            minIndex = i;
        }
        double threDigitMin = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
        if (minAvgVal > threDigitMin) {
            minAvgVal = threDigitMin;
            minIndex = i;
        }
    }
    double last2Avg = (A [A.Length - 2] + A [A.Length - 1]) / 2.0;
    if (minAvgVal > last2Avg) {
        minIndex = A.Length - 2;
    }
    return minIndex;
}
----------------------------------------

public int solution (int vect []) {
    double minAvg = (vect [0] + vect [1]) / 2.;
    int minIndex = 0;
    double tempAvg = minAvg;
    int tempSum = vect [0] + vect [1];
    int tempIndex = 0;
    int tempLength = 2;
    double newAvg;
    int newSum, newIndex;
    for (int j = 2;
    j < vect.length; ++ j) {
        ++ tempLength;
        tempSum += vect [j];
        tempAvg = (double) tempSum / tempLength;
        newSum = tempSum - vect [tempIndex];
        newIndex = tempIndex + 1;
        newAvg = newSum / (j - newIndex + 1.);
        while (newAvg < tempAvg && newIndex < j) {
            tempIndex = newIndex;
            tempSum = newSum;
            tempAvg = newAvg;
            -- tempLength;
            newSum = tempSum - vect [tempIndex];
            newIndex = tempIndex + 1;
            newAvg = newSum / (j - newIndex + 1.);
        }
        if (tempAvg < minAvg) {
            minIndex = tempIndex;
            minAvg = tempAvg;
        } else if (tempAvg > minAvg && j - tempIndex > 1) {
            tempIndex = j;
            tempLength = 1;
            tempSum = vect [j];
        }

    }
    return minIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_31901400_1_31
21635397_50605322_1_23
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int [] A) {
    int minIndex = 0;
    double minAvgVal = Double.MaxValue;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        double twoDigitMin = (A [i] + A [i + 1]) / 2.0;
        if (minAvgVal > twoDigitMin) {
            minAvgVal = twoDigitMin;
            minIndex = i;
        }
        double threDigitMin = (A [i] + A [i + 1] + A [i + 2]) / 3.0;
        if (minAvgVal > threDigitMin) {
            minAvgVal = threDigitMin;
            minIndex = i;
        }
    }
    double last2Avg = (A [A.Length - 2] + A [A.Length - 1]) / 2.0;
    if (minAvgVal > last2Avg) {
        minIndex = A.Length - 2;
    }
    return minIndex;
}
----------------------------------------

public int solution (int [] A) {
    float tempAverage, finalAverage = Float.MAX_VALUE;
    int startLocation = 0;
    int lengthOfTheSlice = 0;
    for (int i = 0;
    i < A.length - 1; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1]) / 2;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 2;
        }
    }
    for (int i = 0;
    i < A.length - 2; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 3;
        }
    }
    System.out.print ("Length of the slice \t" + lengthOfTheSlice);
    return startLocation;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_32085588_1_32
21635397_38538843_1_33
Title: Min Average Two Slice Codility 
----------------------------------------

public static int solution (int [] A) {
    float min_avg = (A [0] + A [1]) / 2;
    int minpos = 0;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        float firsttwo = (float) (A [i] + A [i + 1]) / 2;
        if (firsttwo < min_avg) {
            min_avg = firsttwo;
            minpos = i;
        }
        float three = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (three < min_avg) {
            min_avg = three;
            minpos = i;
        }
        float lasttwo = (float) (A [i + 1] + A [i + 2]) / 2;
        if (lasttwo < min_avg) {
            min_avg = lasttwo;
            minpos = i + 1;
        }
    }
    return minpos;
}
----------------------------------------

private static int solution (int [] a) {
    int sum = 0;
    int absSum = 0;
    int minAbsSlice = 10000;
    for (int i = 0;
    i < a.length; i ++) {
        sum = a [i];
        for (int j = 1;
        j < a.length; j ++) {
            if (j >= i) {
                absSum = sum + a [j];
                if (absSum < sum) {
                    sum = absSum;
                    absSum = Math.abs (absSum);
                } else {
                    absSum = Math.abs (sum);
                    sum = absSum;
                }
            }
        }
        sum = 0;
        if (minAbsSlice < absSum) {
            minAbsSlice = minAbsSlice;
        } else {
            minAbsSlice = absSum;
        }
    }
    return minAbsSlice;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_32085588_1_32
21635397_48398165_1_46
Title: Min Average Two Slice Codility 
----------------------------------------

public static int solution (int [] A) {
    float min_avg = (A [0] + A [1]) / 2;
    int minpos = 0;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        float firsttwo = (float) (A [i] + A [i + 1]) / 2;
        if (firsttwo < min_avg) {
            min_avg = firsttwo;
            minpos = i;
        }
        float three = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (three < min_avg) {
            min_avg = three;
            minpos = i;
        }
        float lasttwo = (float) (A [i + 1] + A [i + 2]) / 2;
        if (lasttwo < min_avg) {
            min_avg = lasttwo;
            minpos = i + 1;
        }
    }
    return minpos;
}
----------------------------------------

public int solution (int vect []) {
    double minAvg = (vect [0] + vect [1]) / 2.;
    int minIndex = 0;
    double tempAvg = minAvg;
    int tempSum = vect [0] + vect [1];
    int tempIndex = 0;
    int tempLength = 2;
    double newAvg;
    int newSum, newIndex;
    for (int j = 2;
    j < vect.length; ++ j) {
        ++ tempLength;
        tempSum += vect [j];
        tempAvg = (double) tempSum / tempLength;
        newSum = tempSum - vect [tempIndex];
        newIndex = tempIndex + 1;
        newAvg = newSum / (j - newIndex + 1.);
        while (newAvg < tempAvg && newIndex < j) {
            tempIndex = newIndex;
            tempSum = newSum;
            tempAvg = newAvg;
            -- tempLength;
            newSum = tempSum - vect [tempIndex];
            newIndex = tempIndex + 1;
            newAvg = newSum / (j - newIndex + 1.);
        }
        if (tempAvg < minAvg) {
            minIndex = tempIndex;
            minAvg = tempAvg;
        } else if (tempAvg > minAvg && j - tempIndex > 1) {
            tempIndex = j;
            tempLength = 1;
            tempSum = vect [j];
        }

    }
    return minIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_32085588_1_32
21635397_50605322_1_23
Title: Min Average Two Slice Codility 
----------------------------------------

public static int solution (int [] A) {
    float min_avg = (A [0] + A [1]) / 2;
    int minpos = 0;
    for (int i = 0;
    i < A.Length - 2; i ++) {
        float firsttwo = (float) (A [i] + A [i + 1]) / 2;
        if (firsttwo < min_avg) {
            min_avg = firsttwo;
            minpos = i;
        }
        float three = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (three < min_avg) {
            min_avg = three;
            minpos = i;
        }
        float lasttwo = (float) (A [i + 1] + A [i + 2]) / 2;
        if (lasttwo < min_avg) {
            min_avg = lasttwo;
            minpos = i + 1;
        }
    }
    return minpos;
}
----------------------------------------

public int solution (int [] A) {
    float tempAverage, finalAverage = Float.MAX_VALUE;
    int startLocation = 0;
    int lengthOfTheSlice = 0;
    for (int i = 0;
    i < A.length - 1; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1]) / 2;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 2;
        }
    }
    for (int i = 0;
    i < A.length - 2; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 3;
        }
    }
    System.out.print ("Length of the slice \t" + lengthOfTheSlice);
    return startLocation;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_38538843_1_33
21635397_48398165_1_46
Title: Min Average Two Slice Codility 
----------------------------------------

private static int solution (int [] a) {
    int sum = 0;
    int absSum = 0;
    int minAbsSlice = 10000;
    for (int i = 0;
    i < a.length; i ++) {
        sum = a [i];
        for (int j = 1;
        j < a.length; j ++) {
            if (j >= i) {
                absSum = sum + a [j];
                if (absSum < sum) {
                    sum = absSum;
                    absSum = Math.abs (absSum);
                } else {
                    absSum = Math.abs (sum);
                    sum = absSum;
                }
            }
        }
        sum = 0;
        if (minAbsSlice < absSum) {
            minAbsSlice = minAbsSlice;
        } else {
            minAbsSlice = absSum;
        }
    }
    return minAbsSlice;
}
----------------------------------------

public int solution (int vect []) {
    double minAvg = (vect [0] + vect [1]) / 2.;
    int minIndex = 0;
    double tempAvg = minAvg;
    int tempSum = vect [0] + vect [1];
    int tempIndex = 0;
    int tempLength = 2;
    double newAvg;
    int newSum, newIndex;
    for (int j = 2;
    j < vect.length; ++ j) {
        ++ tempLength;
        tempSum += vect [j];
        tempAvg = (double) tempSum / tempLength;
        newSum = tempSum - vect [tempIndex];
        newIndex = tempIndex + 1;
        newAvg = newSum / (j - newIndex + 1.);
        while (newAvg < tempAvg && newIndex < j) {
            tempIndex = newIndex;
            tempSum = newSum;
            tempAvg = newAvg;
            -- tempLength;
            newSum = tempSum - vect [tempIndex];
            newIndex = tempIndex + 1;
            newAvg = newSum / (j - newIndex + 1.);
        }
        if (tempAvg < minAvg) {
            minIndex = tempIndex;
            minAvg = tempAvg;
        } else if (tempAvg > minAvg && j - tempIndex > 1) {
            tempIndex = j;
            tempLength = 1;
            tempSum = vect [j];
        }

    }
    return minIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_38538843_1_33
21635397_50605322_1_23
Title: Min Average Two Slice Codility 
----------------------------------------

private static int solution (int [] a) {
    int sum = 0;
    int absSum = 0;
    int minAbsSlice = 10000;
    for (int i = 0;
    i < a.length; i ++) {
        sum = a [i];
        for (int j = 1;
        j < a.length; j ++) {
            if (j >= i) {
                absSum = sum + a [j];
                if (absSum < sum) {
                    sum = absSum;
                    absSum = Math.abs (absSum);
                } else {
                    absSum = Math.abs (sum);
                    sum = absSum;
                }
            }
        }
        sum = 0;
        if (minAbsSlice < absSum) {
            minAbsSlice = minAbsSlice;
        } else {
            minAbsSlice = absSum;
        }
    }
    return minAbsSlice;
}
----------------------------------------

public int solution (int [] A) {
    float tempAverage, finalAverage = Float.MAX_VALUE;
    int startLocation = 0;
    int lengthOfTheSlice = 0;
    for (int i = 0;
    i < A.length - 1; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1]) / 2;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 2;
        }
    }
    for (int i = 0;
    i < A.length - 2; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 3;
        }
    }
    System.out.print ("Length of the slice \t" + lengthOfTheSlice);
    return startLocation;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21635397_48398165_1_46
21635397_50605322_1_23
Title: Min Average Two Slice Codility 
----------------------------------------

public int solution (int vect []) {
    double minAvg = (vect [0] + vect [1]) / 2.;
    int minIndex = 0;
    double tempAvg = minAvg;
    int tempSum = vect [0] + vect [1];
    int tempIndex = 0;
    int tempLength = 2;
    double newAvg;
    int newSum, newIndex;
    for (int j = 2;
    j < vect.length; ++ j) {
        ++ tempLength;
        tempSum += vect [j];
        tempAvg = (double) tempSum / tempLength;
        newSum = tempSum - vect [tempIndex];
        newIndex = tempIndex + 1;
        newAvg = newSum / (j - newIndex + 1.);
        while (newAvg < tempAvg && newIndex < j) {
            tempIndex = newIndex;
            tempSum = newSum;
            tempAvg = newAvg;
            -- tempLength;
            newSum = tempSum - vect [tempIndex];
            newIndex = tempIndex + 1;
            newAvg = newSum / (j - newIndex + 1.);
        }
        if (tempAvg < minAvg) {
            minIndex = tempIndex;
            minAvg = tempAvg;
        } else if (tempAvg > minAvg && j - tempIndex > 1) {
            tempIndex = j;
            tempLength = 1;
            tempSum = vect [j];
        }

    }
    return minIndex;
}
----------------------------------------

public int solution (int [] A) {
    float tempAverage, finalAverage = Float.MAX_VALUE;
    int startLocation = 0;
    int lengthOfTheSlice = 0;
    for (int i = 0;
    i < A.length - 1; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1]) / 2;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 2;
        }
    }
    for (int i = 0;
    i < A.length - 2; ++ i) {
        tempAverage = (float) (A [i] + A [i + 1] + A [i + 2]) / 3;
        if (tempAverage < finalAverage) {
            finalAverage = tempAverage;
            startLocation = i;
            lengthOfTheSlice = 3;
        }
    }
    System.out.print ("Length of the slice \t" + lengthOfTheSlice);
    return startLocation;
}
----------------------------------------

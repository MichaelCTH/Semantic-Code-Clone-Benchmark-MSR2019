$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19562052_19562154_7_44
19562052_19563047_5_42
Title: convert string to char with switch case 
----------------------------------------

public static void main (String args []) throws IOException {
    String sentence = "";
    System.out.println ("Enter the word : ");
    Scanner scan = new Scanner (System.in);
    String word = scan.next ();
    char [] chars = word.toCharArray ();
    for (int i = 0;
    i < word.length (); i ++) {
        System.out.println ("---" + chars [i]);
        switch (chars [i]) {
            case '0' :
                sentence = " ";
                System.out.println ("B");
                break;
            case '1' :
                sentence = "A";
                break;
            case '2' :
                sentence = "B";
                System.out.println ("B");
                break;
            case '3' :
                sentence = "C";
                break;
        }
        sentence += sentence;
        System.out.println (sentence);
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    String sentence = "";
    System.out.println ("Enter the word : ");
    Scanner scan = new Scanner (System.in);
    String word = scan.next ();
    final char CHARONE = '1';
    final char CHARTWO = '2';
    final char CHARTHREE = '3';
    final char CHARFOUR = '4';
    char [] chars = word.toCharArray ();
    for (int i = 0;
    i < word.length (); i ++) {
        System.out.println ("---" + chars [i]);
        switch (chars [i]) {
            case 0 :
                sentence = " ";
                System.out.println ("B");
                break;
            case CHARONE :
                sentence = "A";
                break;
            case CHARTWO :
                sentence = "B";
                System.out.println ("B");
                break;
            case CHARTHREE :
                sentence = "C";
                break;
        }
        sentence += sentence;
        System.out.println (sentence);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19570373_19571043_6_17
19570373_27991873_9_19
Title: starting 10 different thread in java at the sametime 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < THREADS; i ++) {
        addThread ();
    }
    Timer timer = new Timer (true);
    timer.schedule (new TimerTask () {
        public void run () {
            System.out.println (heinz.getBalance ());
        }}

    , 100, 1000);
}
----------------------------------------

public static void main (String [] args) {
    CountDownLatch cdl = new CountDownLatch (NUMTHREADS);
    ExecutorService executor = Executors.newFixedThreadPool (NUMTHREADS);
    for (int i = 0;
    i < NUMTHREADS; i ++) {
        executor.submit (new Imp (cdl));
        cdl.countDown ();
        System.out.println ("one thread sumbmited " + cdl.getCount ());
    }
    System.out.println ("All threads submmited");
    executor.shutdown ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19574147_19574194_1_12
19574147_19574235_1_19
Title: Reading input as array 
----------------------------------------

public static void main (String [] args) {
    List < Integer > array = new ArrayList < Integer > ();
    String input;
    Scanner scan = new Scanner (System.in);
    while (scan.hasNextInt ()) {
        array.add (scan.nextInt ());
    }
    System.out.println ("Count=" + array.size ());
    System.out.println (array);
}
----------------------------------------

public static void main (String [] args) {
    int count = 0;
    int [] array = new int [10];
    String input;
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter up to 10 integers: ");
    while (scan.hasNextInt ()) {
        array [count] = scan.nextInt ();
        count ++;
    }
    for (int i = 0;
    i < array.length; i ++) {
        System.out.println (array [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19575308_19575418_6_36
19575308_40497293_16_61
Title: Read a file separated by tab and put the words in an ArrayList 
----------------------------------------

public static void main (String [] args) {
    try {
        BufferedReader buf = new BufferedReader (new FileReader ("/home/little/Downloads/test"));
        ArrayList < String > words = new ArrayList < > ();
        String lineJustFetched = null;
        String [] wordsArray;
        while (true) {
            lineJustFetched = buf.readLine ();
            if (lineJustFetched == null) {
                break;
            } else {
                wordsArray = lineJustFetched.split ("\t");
                for (String each : wordsArray) {
                    if (! "".equals (each)) {
                        words.add (each);
                    }
                }
            }
        }
        for (String each : words) {
            System.out.println (each);
        }
        buf.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        InputStream fileInputStream;
        BufferedReader bufferedReader;
        final String filepathInSamePackage = "textfile.txt";
        Predicate < String > filterFirstLine = line -> ! ("Name".equals (line.split ("\t", - 1) [0]) && "Hobby".equals (line.split ("\t", - 1) [1]));
        System.out.println ("==ArrayList==");
        fileInputStream = StreamTests.class.getResourceAsStream (filepathInSamePackage);
        bufferedReader = new BufferedReader (new InputStreamReader (fileInputStream));
        bufferedReader.lines ().filter (filterFirstLine).map (s -> {
            String [] splitStrings = s.split ("\t", - 1);
            return Arrays.asList (splitStrings);
        }).forEach (System.out :: println);
        fileInputStream = StreamTests.class.getResourceAsStream (filepathInSamePackage);
        bufferedReader = new BufferedReader (new InputStreamReader (fileInputStream));
        System.out.println ("\n==HashMap==");
        bufferedReader.lines ().filter (filterFirstLine).map (s -> {
            String [] splitStrings = s.split ("\t", - 1);
            HashMap < String, String > stringStringMap = new HashMap < > ();
            stringStringMap.put (splitStrings [0], splitStrings [1]);
            return stringStringMap;
        }).forEach (System.out :: println);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19578436_29968195_8_42
19578436_33429573_17_77
Title: How to remove duplicate character from a string in java? 
----------------------------------------

public static void main (String args []) {
    String input = "";
    System.out.println ("Enter string to remove duplicates: \t");
    Scanner in = new Scanner (System.in);
    input = in.next ();
    in.close ();
    ArrayList < Character > String_array = new ArrayList < Character > ();
    for (char element : input.toCharArray ()) {
        String_array.add (element);
    }
    HashSet < Character > charset = new HashSet < Character > ();
    int array_len = String_array.size ();
    System.out.println ("\nLength of array = " + array_len);
    if (String_array != null && array_len > 0) {
        Iterator < Character > itr = String_array.iterator ();
        while (itr.hasNext ()) {
            Character c = (Character) itr.next ();
            if (charset.add (c)) {
            } else {
                itr.remove ();
                array_len --;
            }
        }
    }
    System.out.println ("\nThe new string with no duplicates: \t");
    for (int i = 0;
    i < array_len; i ++) {
        System.out.println (String_array.get (i).toString ());
    }
}
----------------------------------------

public static void main (String [] args) {
    int i, j, k = 0, count = 0, m;
    char a [] = new char [10];
    char b [] = new char [10];
    Scanner ob = new Scanner (System.in);
    String str;
    str = ob.next ();
    a = str.toCharArray ();
    int c = str.length ();
    for (j = 0; j < c; j ++) {
        for (i = 0; i < j; i ++) {
            if (a [i] == a [j]) {
                count = 1;
            }
        }
        if (count == 0) {
            b [k ++] = a [i];
        }
        count = 0;
    }
    for (m = 0; b [m] != '\0'; m ++) {
        System.out.println (b [m]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19578436_29968195_8_42
19578436_41540448_5_15
Title: How to remove duplicate character from a string in java? 
----------------------------------------

public static void main (String args []) {
    String input = "";
    System.out.println ("Enter string to remove duplicates: \t");
    Scanner in = new Scanner (System.in);
    input = in.next ();
    in.close ();
    ArrayList < Character > String_array = new ArrayList < Character > ();
    for (char element : input.toCharArray ()) {
        String_array.add (element);
    }
    HashSet < Character > charset = new HashSet < Character > ();
    int array_len = String_array.size ();
    System.out.println ("\nLength of array = " + array_len);
    if (String_array != null && array_len > 0) {
        Iterator < Character > itr = String_array.iterator ();
        while (itr.hasNext ()) {
            Character c = (Character) itr.next ();
            if (charset.add (c)) {
            } else {
                itr.remove ();
                array_len --;
            }
        }
    }
    System.out.println ("\nThe new string with no duplicates: \t");
    for (int i = 0;
    i < array_len; i ++) {
        System.out.println (String_array.get (i).toString ());
    }
}
----------------------------------------

public static void main (String arg []) {
    Scanner sc = new Scanner (System.in);
    StringBuilder s = new StringBuilder (sc.nextLine ());
    for (int i = 0;
    i < s.length (); i ++) {
        String a = s.substring (i, i + 1);
        while (s.indexOf (a) != s.lastIndexOf (a)) {
            s.deleteCharAt (s.lastIndexOf (a));
        }
    }
    System.out.println (s.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19578436_29968195_8_42
19578436_51806422_5_19
Title: How to remove duplicate character from a string in java? 
----------------------------------------

public static void main (String args []) {
    String input = "";
    System.out.println ("Enter string to remove duplicates: \t");
    Scanner in = new Scanner (System.in);
    input = in.next ();
    in.close ();
    ArrayList < Character > String_array = new ArrayList < Character > ();
    for (char element : input.toCharArray ()) {
        String_array.add (element);
    }
    HashSet < Character > charset = new HashSet < Character > ();
    int array_len = String_array.size ();
    System.out.println ("\nLength of array = " + array_len);
    if (String_array != null && array_len > 0) {
        Iterator < Character > itr = String_array.iterator ();
        while (itr.hasNext ()) {
            Character c = (Character) itr.next ();
            if (charset.add (c)) {
            } else {
                itr.remove ();
                array_len --;
            }
        }
    }
    System.out.println ("\nThe new string with no duplicates: \t");
    for (int i = 0;
    i < array_len; i ++) {
        System.out.println (String_array.get (i).toString ());
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scn = new Scanner (System.in);
    System.out.println ("enter a String:");
    String s = scn.nextLine ();
    String ans = "";
    while (s.length () > 0) {
        char ch = s.charAt (0);
        ans += ch;
        s = s.replace (ch + "", "");
    }
    System.out.println ("after removing all duplicate letters:" + ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19578436_33429573_17_77
19578436_41540448_5_15
Title: How to remove duplicate character from a string in java? 
----------------------------------------

public static void main (String [] args) {
    int i, j, k = 0, count = 0, m;
    char a [] = new char [10];
    char b [] = new char [10];
    Scanner ob = new Scanner (System.in);
    String str;
    str = ob.next ();
    a = str.toCharArray ();
    int c = str.length ();
    for (j = 0; j < c; j ++) {
        for (i = 0; i < j; i ++) {
            if (a [i] == a [j]) {
                count = 1;
            }
        }
        if (count == 0) {
            b [k ++] = a [i];
        }
        count = 0;
    }
    for (m = 0; b [m] != '\0'; m ++) {
        System.out.println (b [m]);
    }
}
----------------------------------------

public static void main (String arg []) {
    Scanner sc = new Scanner (System.in);
    StringBuilder s = new StringBuilder (sc.nextLine ());
    for (int i = 0;
    i < s.length (); i ++) {
        String a = s.substring (i, i + 1);
        while (s.indexOf (a) != s.lastIndexOf (a)) {
            s.deleteCharAt (s.lastIndexOf (a));
        }
    }
    System.out.println (s.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19578436_33429573_17_77
19578436_51806422_5_19
Title: How to remove duplicate character from a string in java? 
----------------------------------------

public static void main (String [] args) {
    int i, j, k = 0, count = 0, m;
    char a [] = new char [10];
    char b [] = new char [10];
    Scanner ob = new Scanner (System.in);
    String str;
    str = ob.next ();
    a = str.toCharArray ();
    int c = str.length ();
    for (j = 0; j < c; j ++) {
        for (i = 0; i < j; i ++) {
            if (a [i] == a [j]) {
                count = 1;
            }
        }
        if (count == 0) {
            b [k ++] = a [i];
        }
        count = 0;
    }
    for (m = 0; b [m] != '\0'; m ++) {
        System.out.println (b [m]);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scn = new Scanner (System.in);
    System.out.println ("enter a String:");
    String s = scn.nextLine ();
    String ans = "";
    while (s.length () > 0) {
        char ch = s.charAt (0);
        ans += ch;
        s = s.replace (ch + "", "");
    }
    System.out.println ("after removing all duplicate letters:" + ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19578436_41540448_5_15
19578436_51806422_5_19
Title: How to remove duplicate character from a string in java? 
----------------------------------------

public static void main (String arg []) {
    Scanner sc = new Scanner (System.in);
    StringBuilder s = new StringBuilder (sc.nextLine ());
    for (int i = 0;
    i < s.length (); i ++) {
        String a = s.substring (i, i + 1);
        while (s.indexOf (a) != s.lastIndexOf (a)) {
            s.deleteCharAt (s.lastIndexOf (a));
        }
    }
    System.out.println (s.toString ());
}
----------------------------------------

public static void main (String [] args) {
    Scanner scn = new Scanner (System.in);
    System.out.println ("enter a String:");
    String s = scn.nextLine ();
    String ans = "";
    while (s.length () > 0) {
        char ch = s.charAt (0);
        ans += ch;
        s = s.replace (ch + "", "");
    }
    System.out.println ("after removing all duplicate letters:" + ans);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_34968977_33_45
19579568_38425128_6_41
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the String");
    String s = scan.nextLine ();
    if (s.trim ().isEmpty ()) {
        System.out.println ("String is empty");
    } else {
        char [] arr = s.toCharArray ();
        getHighestDupsOccurrancesInString (arr);
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter any word : ");
    String str = in.readLine ();
    str = str.toLowerCase ();
    int g = 0, count;
    int ar [] = new int [26];
    char ch [] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    for (int i = 0;
    i < ch.length; i ++) {
        count = 0;
        for (int j = 0;
        j < str.length (); j ++) {
            char ch1 = str.charAt (j);
            if (ch [i] == ch1) count ++;

        }
        ar [i] = (int) count;
    }
    int max = ar [0];
    for (int j = 1;
    j < 26; j ++) {
        if (max < ar [j]) {
            max = ar [j];
            g = j;
        } else {
            max = ar [0];
            g = 0;
        }
    }
    System.out.println ("Maximum Occurence is " + max + " of character " + ch [g]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_34968977_33_45
19579568_40669835_4_30
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the String");
    String s = scan.nextLine ();
    if (s.trim ().isEmpty ()) {
        System.out.println ("String is empty");
    } else {
        char [] arr = s.toCharArray ();
        getHighestDupsOccurrancesInString (arr);
    }
}
----------------------------------------

public static void main (String args []) {
    String s;
    int max = 0;
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter String:");
    s = sc.next ();
    String s1 = " ";
    for (int i = 0;
    i < s.length (); i ++) {
        int count = 0;
        for (int j = i + 1;
        j < s.length (); j ++) {
            if (s.charAt (i) == s.charAt (j)) count ++;

        }
        if (count > max) {
            s1 = Character.toString (s.charAt (i));
            max = count;
        } else if (count == max) s1 = s1 + " " + Character.toString (s.charAt (i));

    }
    System.out.println (s1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_34968977_33_45
19579568_45482804_7_36
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the String");
    String s = scan.nextLine ();
    if (s.trim ().isEmpty ()) {
        System.out.println ("String is empty");
    } else {
        char [] arr = s.toCharArray ();
        getHighestDupsOccurrancesInString (arr);
    }
}
----------------------------------------

public static void main (String args []) {
    String str = "Ramrrnarmmmesh";
    Map < Character, Integer > map1 = new HashMap < Character, Integer > ();
    for (int k = 0;
    k < str.length (); k ++) {
        char currentChar = str.charAt (k);
        if (map1.get (currentChar) == null) {
            map1.put (currentChar, 1);
        } else {
            map1.put (currentChar, map1.get (currentChar) + 1);
        }
    }
    int max = 0;
    char maxCharacter = 'a';
    for (Map.Entry < Character, Integer > entry : map1.entrySet ()) {
        System.out.println ("Key=" + entry.getKey () + ":Value" + entry.getValue ());
        if (max < entry.getValue ()) {
            max = entry.getValue ();
            maxCharacter = entry.getKey ();
        }
    }
    System.out.println ("Max Character=" + maxCharacter + "Max Count" + max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_34968977_33_45
19579568_52525189_17_50
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the String");
    String s = scan.nextLine ();
    if (s.trim ().isEmpty ()) {
        System.out.println ("String is empty");
    } else {
        char [] arr = s.toCharArray ();
        getHighestDupsOccurrancesInString (arr);
    }
}
----------------------------------------

public static void main (String [] args) {
    String lang = "malayalaaaaammmmmmmmmmmm";
    Map < Character, Integer > countmapper = new HashMap < > ();
    int i = 0, j = 0;
    int count = 1;
    char [] ch = new char [lang.length ()];
    for (int k = 0;
    k < ch.length; k ++) {
        ch [k] = lang.charAt (k);
    }
    for (j = 0; j < lang.length (); j ++) {
        count = 1;
        if (countmapper.containsKey (ch [j])) {
            continue;
        } else {
            for (i = j + 1; i < lang.length (); i ++) {
                if (lang.charAt (j) == ch [i]) {
                    count ++;
                }
            }
            if (! countmapper.containsKey (ch [j])) {
                countmapper.put (lang.charAt (j), count);
            }
        }
    }
    Collection < Integer > values = countmapper.values ();
    System.out.println ("The maximum repeated character from the string " + lang + " is :" + getKey (countmapper, Collections.max (values)));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_38425128_6_41
19579568_40669835_4_30
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter any word : ");
    String str = in.readLine ();
    str = str.toLowerCase ();
    int g = 0, count;
    int ar [] = new int [26];
    char ch [] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    for (int i = 0;
    i < ch.length; i ++) {
        count = 0;
        for (int j = 0;
        j < str.length (); j ++) {
            char ch1 = str.charAt (j);
            if (ch [i] == ch1) count ++;

        }
        ar [i] = (int) count;
    }
    int max = ar [0];
    for (int j = 1;
    j < 26; j ++) {
        if (max < ar [j]) {
            max = ar [j];
            g = j;
        } else {
            max = ar [0];
            g = 0;
        }
    }
    System.out.println ("Maximum Occurence is " + max + " of character " + ch [g]);
}
----------------------------------------

public static void main (String args []) {
    String s;
    int max = 0;
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter String:");
    s = sc.next ();
    String s1 = " ";
    for (int i = 0;
    i < s.length (); i ++) {
        int count = 0;
        for (int j = i + 1;
        j < s.length (); j ++) {
            if (s.charAt (i) == s.charAt (j)) count ++;

        }
        if (count > max) {
            s1 = Character.toString (s.charAt (i));
            max = count;
        } else if (count == max) s1 = s1 + " " + Character.toString (s.charAt (i));

    }
    System.out.println (s1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_38425128_6_41
19579568_45482804_7_36
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter any word : ");
    String str = in.readLine ();
    str = str.toLowerCase ();
    int g = 0, count;
    int ar [] = new int [26];
    char ch [] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    for (int i = 0;
    i < ch.length; i ++) {
        count = 0;
        for (int j = 0;
        j < str.length (); j ++) {
            char ch1 = str.charAt (j);
            if (ch [i] == ch1) count ++;

        }
        ar [i] = (int) count;
    }
    int max = ar [0];
    for (int j = 1;
    j < 26; j ++) {
        if (max < ar [j]) {
            max = ar [j];
            g = j;
        } else {
            max = ar [0];
            g = 0;
        }
    }
    System.out.println ("Maximum Occurence is " + max + " of character " + ch [g]);
}
----------------------------------------

public static void main (String args []) {
    String str = "Ramrrnarmmmesh";
    Map < Character, Integer > map1 = new HashMap < Character, Integer > ();
    for (int k = 0;
    k < str.length (); k ++) {
        char currentChar = str.charAt (k);
        if (map1.get (currentChar) == null) {
            map1.put (currentChar, 1);
        } else {
            map1.put (currentChar, map1.get (currentChar) + 1);
        }
    }
    int max = 0;
    char maxCharacter = 'a';
    for (Map.Entry < Character, Integer > entry : map1.entrySet ()) {
        System.out.println ("Key=" + entry.getKey () + ":Value" + entry.getValue ());
        if (max < entry.getValue ()) {
            max = entry.getValue ();
            maxCharacter = entry.getKey ();
        }
    }
    System.out.println ("Max Character=" + maxCharacter + "Max Count" + max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_38425128_6_41
19579568_52525189_17_50
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter any word : ");
    String str = in.readLine ();
    str = str.toLowerCase ();
    int g = 0, count;
    int ar [] = new int [26];
    char ch [] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    for (int i = 0;
    i < ch.length; i ++) {
        count = 0;
        for (int j = 0;
        j < str.length (); j ++) {
            char ch1 = str.charAt (j);
            if (ch [i] == ch1) count ++;

        }
        ar [i] = (int) count;
    }
    int max = ar [0];
    for (int j = 1;
    j < 26; j ++) {
        if (max < ar [j]) {
            max = ar [j];
            g = j;
        } else {
            max = ar [0];
            g = 0;
        }
    }
    System.out.println ("Maximum Occurence is " + max + " of character " + ch [g]);
}
----------------------------------------

public static void main (String [] args) {
    String lang = "malayalaaaaammmmmmmmmmmm";
    Map < Character, Integer > countmapper = new HashMap < > ();
    int i = 0, j = 0;
    int count = 1;
    char [] ch = new char [lang.length ()];
    for (int k = 0;
    k < ch.length; k ++) {
        ch [k] = lang.charAt (k);
    }
    for (j = 0; j < lang.length (); j ++) {
        count = 1;
        if (countmapper.containsKey (ch [j])) {
            continue;
        } else {
            for (i = j + 1; i < lang.length (); i ++) {
                if (lang.charAt (j) == ch [i]) {
                    count ++;
                }
            }
            if (! countmapper.containsKey (ch [j])) {
                countmapper.put (lang.charAt (j), count);
            }
        }
    }
    Collection < Integer > values = countmapper.values ();
    System.out.println ("The maximum repeated character from the string " + lang + " is :" + getKey (countmapper, Collections.max (values)));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_40669835_4_30
19579568_45482804_7_36
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) {
    String s;
    int max = 0;
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter String:");
    s = sc.next ();
    String s1 = " ";
    for (int i = 0;
    i < s.length (); i ++) {
        int count = 0;
        for (int j = i + 1;
        j < s.length (); j ++) {
            if (s.charAt (i) == s.charAt (j)) count ++;

        }
        if (count > max) {
            s1 = Character.toString (s.charAt (i));
            max = count;
        } else if (count == max) s1 = s1 + " " + Character.toString (s.charAt (i));

    }
    System.out.println (s1);
}
----------------------------------------

public static void main (String args []) {
    String str = "Ramrrnarmmmesh";
    Map < Character, Integer > map1 = new HashMap < Character, Integer > ();
    for (int k = 0;
    k < str.length (); k ++) {
        char currentChar = str.charAt (k);
        if (map1.get (currentChar) == null) {
            map1.put (currentChar, 1);
        } else {
            map1.put (currentChar, map1.get (currentChar) + 1);
        }
    }
    int max = 0;
    char maxCharacter = 'a';
    for (Map.Entry < Character, Integer > entry : map1.entrySet ()) {
        System.out.println ("Key=" + entry.getKey () + ":Value" + entry.getValue ());
        if (max < entry.getValue ()) {
            max = entry.getValue ();
            maxCharacter = entry.getKey ();
        }
    }
    System.out.println ("Max Character=" + maxCharacter + "Max Count" + max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_40669835_4_30
19579568_52525189_17_50
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) {
    String s;
    int max = 0;
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter String:");
    s = sc.next ();
    String s1 = " ";
    for (int i = 0;
    i < s.length (); i ++) {
        int count = 0;
        for (int j = i + 1;
        j < s.length (); j ++) {
            if (s.charAt (i) == s.charAt (j)) count ++;

        }
        if (count > max) {
            s1 = Character.toString (s.charAt (i));
            max = count;
        } else if (count == max) s1 = s1 + " " + Character.toString (s.charAt (i));

    }
    System.out.println (s1);
}
----------------------------------------

public static void main (String [] args) {
    String lang = "malayalaaaaammmmmmmmmmmm";
    Map < Character, Integer > countmapper = new HashMap < > ();
    int i = 0, j = 0;
    int count = 1;
    char [] ch = new char [lang.length ()];
    for (int k = 0;
    k < ch.length; k ++) {
        ch [k] = lang.charAt (k);
    }
    for (j = 0; j < lang.length (); j ++) {
        count = 1;
        if (countmapper.containsKey (ch [j])) {
            continue;
        } else {
            for (i = j + 1; i < lang.length (); i ++) {
                if (lang.charAt (j) == ch [i]) {
                    count ++;
                }
            }
            if (! countmapper.containsKey (ch [j])) {
                countmapper.put (lang.charAt (j), count);
            }
        }
    }
    Collection < Integer > values = countmapper.values ();
    System.out.println ("The maximum repeated character from the string " + lang + " is :" + getKey (countmapper, Collections.max (values)));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19579568_45482804_7_36
19579568_52525189_17_50
Title: Most repeating character in a string 
----------------------------------------

public static void main (String args []) {
    String str = "Ramrrnarmmmesh";
    Map < Character, Integer > map1 = new HashMap < Character, Integer > ();
    for (int k = 0;
    k < str.length (); k ++) {
        char currentChar = str.charAt (k);
        if (map1.get (currentChar) == null) {
            map1.put (currentChar, 1);
        } else {
            map1.put (currentChar, map1.get (currentChar) + 1);
        }
    }
    int max = 0;
    char maxCharacter = 'a';
    for (Map.Entry < Character, Integer > entry : map1.entrySet ()) {
        System.out.println ("Key=" + entry.getKey () + ":Value" + entry.getValue ());
        if (max < entry.getValue ()) {
            max = entry.getValue ();
            maxCharacter = entry.getKey ();
        }
    }
    System.out.println ("Max Character=" + maxCharacter + "Max Count" + max);
}
----------------------------------------

public static void main (String [] args) {
    String lang = "malayalaaaaammmmmmmmmmmm";
    Map < Character, Integer > countmapper = new HashMap < > ();
    int i = 0, j = 0;
    int count = 1;
    char [] ch = new char [lang.length ()];
    for (int k = 0;
    k < ch.length; k ++) {
        ch [k] = lang.charAt (k);
    }
    for (j = 0; j < lang.length (); j ++) {
        count = 1;
        if (countmapper.containsKey (ch [j])) {
            continue;
        } else {
            for (i = j + 1; i < lang.length (); i ++) {
                if (lang.charAt (j) == ch [i]) {
                    count ++;
                }
            }
            if (! countmapper.containsKey (ch [j])) {
                countmapper.put (lang.charAt (j), count);
            }
        }
    }
    Collection < Integer > values = countmapper.values ();
    System.out.println ("The maximum repeated character from the string " + lang + " is :" + getKey (countmapper, Collections.max (values)));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19589231_32781802_1_32
19589231_48153597_1_18
Title: Can I iterate through a NodeList using for-each in Java? 
----------------------------------------

public static Iterable < Node > iterable (final NodeList n) {
    return new Iterable < Node > () {
        @Override
        public Iterator < Node > iterator () {
            return new Iterator < Node > () {
                int index = 0;
                @Override
                public boolean hasNext () {
                    return index < n.getLength ();
                }@Override
                public Node next () {
                    if (hasNext ()) {
                        return n.item (index ++);
                    } else {
                        throw new NoSuchElementException ();
                    }
                }@Override
                public void remove () {
                    throw new UnsupportedOperationException ();
                }}

            ;
        }}

    ;
}
----------------------------------------

public static Iterable < Node > iterable (final NodeList nodeList) {
    return () -> new Iterator < Node > () {
        private int index = 0;
        @Override
        public boolean hasNext () {
            return index < nodeList.getLength ();
        }@Override
        public Node next () {
            if (! hasNext ()) throw new NoSuchElementException ();

            return nodeList.item (index ++);
        }}

    ;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19589231_32781802_5_30
19589231_35762965_7_41
Title: Can I iterate through a NodeList using for-each in Java? 
----------------------------------------

public Iterator < Node > iterator () {
    return new Iterator < Node > () {
        int index = 0;
        @Override
        public boolean hasNext () {
            return index < n.getLength ();
        }@Override
        public Node next () {
            if (hasNext ()) {
                return n.item (index ++);
            } else {
                throw new NoSuchElementException ();
            }
        }@Override
        public void remove () {
            throw new UnsupportedOperationException ();
        }}

    ;
}
----------------------------------------

public Iterator < Node > iterator () {
    return new Iterator < Node > () {
        private int index = - 1;
        private Node lastNode = null;
        private boolean isCurrentReplaced () {
            return lastNode != null && index < nodeList.getLength () && lastNode != nodeList.item (index);
        }@Override
        public boolean hasNext () {
            return index + 1 < nodeList.getLength () || isCurrentReplaced ();
        }@Override
        public Node next () {
            if (hasNext ()) {
                if (isCurrentReplaced ()) {
                    lastNode = nodeList.item (index);
                } else {
                    lastNode = nodeList.item (++ index);
                }
                return lastNode;
            } else {
                throw new NoSuchElementException ();
            }
        }@Override
        public void remove () {
            throw new UnsupportedOperationException ();
        }}

    ;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19590242_19590979_1_10
19590242_48919651_1_12
Title: Finding Max value in an array using recursion 
----------------------------------------

int findMax (int [] data, int a, int b) {
    if (b - a <= 1) {
        return Math.max (data [a], data [b]);
    } else {
        int mid = (a + b) / 2;
        int leftMax = findMax (a, mid);
        int rightMax = findMax (mid + 1, b);
        return Math.max (leftMax, rightMax);
    }
}
----------------------------------------

private static int findMax (int [] a, int head, int last, int max) {
    if (last == head) {
        return max;
    } else if (a [head] > a [last]) {
        max = a [head];
        return findMax (a, head, last - 1, max);
    } else {
        max = a [last];
        return findMax (a, head + 1, last, max);
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19602425_19602501_6_22
19602425_19602786_5_31
Title: link or merge 2 arrays into 1 and sort them in java 
----------------------------------------

public static void main (String [] args) {
    TreeSet tSet = new TreeSet ();
    tSet.add (new Integer ("1"));
    tSet.add (new Integer ("2"));
    tSet.add (new Integer ("3"));
    Iterator itr = tSet.iterator ();
    System.out.println ("TreeSet contains : ");
    while (itr.hasNext ()) System.out.println (itr.next ());

}
----------------------------------------

public static void main (String [] args) {
    String [] name = new String [] {"Percy", "Daniel", "Layla"};
    int [] marks = new int [] {90, 87, 91};
    TreeMap < String, Integer > map = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < name.length; i ++) {
        map.put (name [i], marks [i]);
    }
    for (String key : map.keySet ()) {
        System.out.println (key + "\t" + map.get (key));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19606020_19606200_10_25
19606020_19606333_31_38
Title: no luck with javax timer with Jlabel 
----------------------------------------

public static void main (String Args []) {
    JFrame testing = new JFrame ();
    testing.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    testing.setSize (1000, 1000);
    testing.setVisible (true);
    JLabel countDownLabel = new JLabel ();
    countDownLabel.setText ("Now it's : " + Globals.seconds);
    testing.add (countDownLabel);
    CountDown countdown = new CountDown (countDownLabel);
    Timer timer = new Timer (5000, countDown);
    timer.start ();
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new MainFrame ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19612239_19616096_20_36
19612239_19616096_49_65
Title: "Java: MultiThread Synchronization causing deadlock" 
----------------------------------------

public void run () {
    while (true) {
        try {
            oddMutex.acquire ();
            System.out.println (no);
            no += 2;
            Thread.sleep (1000);
            evenMutex.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            oddMutex.release ();
            evenMutex.acquire ();
            System.out.println (no);
            no += 2;
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19613240_19613354_1_31
19613240_19613427_1_55
Title: Comparing 2D arrays Java 
----------------------------------------

public static int [] find (char [] [] large, char [] [] small) {
    outer : for (int i = 0;
    i < large.length - small.length; i ++) {
        int column = - 1;
        for (int j = 0;
        j < small.length; j ++) {
            String largerString = new String (large [i + j]);
            String smallString = new String (small [j]);
            Matcher matcher = Pattern.compile (smallString).matcher (largerString);
            if (! matcher.find ()) {
                continue outer;
            }
            int thisColumn = matcher.start ();
            if (column != - 1 && column != thisColumn) {
                continue outer;
            }
            column = thisColumn;
        }
        System.out.printf ("found it: %d, %d!", i, column);
    }
    return null;
}
----------------------------------------

private static int [] find (char [] [] image, char [] [] waldo) {
    int row = - 1;
    int column = - 1;
    char first_waldo = waldo [0] [0];
    boolean continue1 = true;
    int size = waldo.length * waldo [0].length;
    int cont = 0;
    for (int i = 0;
    i < image.length; i ++) {
        for (int j = 0;
        j < image [i].length; j ++) {
            char current = image [i] [j];
            if (current == first_waldo) {
                row = i;
                column = j;
                cont = 0;
                for (int k = row;
                k < row + waldo.length; k ++) {
                    for (int l = column;
                    l < column + waldo [0].length; l ++) {
                        if (waldo [k - row] [l - column] == '.') {
                            cont ++;
                            continue;
                        }
                        if (image [k] [l] != waldo [k - row] [l - column]) {
                            row = - 1;
                            column = - 1;
                            continue1 = false;
                            break;
                        } else {
                            cont ++;
                        }
                    }
                    if (continue1 == false) {
                        continue1 = true;
                        break;
                    }
                }
                if (cont == size) {
                    int [] res = {row, column};
                    return res;
                }
            } else {
                row = - 1;
                column = - 1;
            }
        }
    }
    int [] res = {- 1, - 1};
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19614669_19615050_5_54
19614669_19615137_1_62
Title: Issue when iterating through lists: IndexOutOfBoundsException in Java 
----------------------------------------

public static void main (String [] args) {
    String stoplist = "of a in to and under";
    String defA1 = "Free fall descent  of a body subjected only to            the   action of  gravity";
    String defA2 = "Free fall movement of a body in        a    gravitational field under  the influence of gravity";
    String [] sList = stoplist.split (" ");
    String [] definition1 = defA1.split (" ");
    String [] definition2 = defA2.split (" ");
    List < String > def1 = new ArrayList < String > ();
    List < String > def2 = new ArrayList < String > ();
    List < String > stopList = new ArrayList < String > ();
    for (String word : definition1) {
        def1.add (word);
    }
    for (String word : definition2) {
        def2.add (word);
    }
    for (String word : sList) {
        stopList.add (word);
    }
    int mdef = (def1.size () <= def2.size ()) ? def1.size () : def2.size ();
    for (int i = 0;
    i < mdef; i ++) {
        if (stopList.contains (def1.get (i))) {
            if (! stopList.contains (def2.get (i))) {
                def2.add (i, " ");
                if (mdef == def2.size ()) mdef ++;

            }
        } else if (stopList.contains (def2.get (i))) {
            if (! stopList.contains (def1.get (i))) {
                def1.add (i, " ");
                if (mdef == def1.size ()) mdef ++;

            }
        }

    }
    for (String word : def1) {
        System.out.print (word + ",");
    }
    System.out.println ();
    for (String word : def2) {
        System.out.print (word + ",");
    }
}
----------------------------------------

static public void main (String [] argv) {
    String [] sList = "of a in to under".split (" ");
    String [] definition1 = "Free fall descent of a body subjected only to the action of gravity".split (" ");
    String [] definition2 = "Free fall movement of a body in a gravitational field under the influence of gravity".split (" ");
    List < String > def1 = new ArrayList < String > ();
    List < String > def2 = new ArrayList < String > ();
    List < String > stopList = new ArrayList < String > ();
    for (String word : definition1) {
        def1.add (word);
    }
    for (String word : definition2) {
        def2.add (word);
    }
    for (String word : sList) {
        stopList.add (word);
    }
    int mdef = (def1.size () <= def2.size ()) ? def1.size () : def2.size ();
    for (int i = 0;
    i < mdef; i ++) {
        System.out.println (i);
        if (! stopList.contains (def1.get (i)) && ! stopList.contains (def2.get (i))) {
            continue;
        } else if (stopList.contains (def1.get (i)) && stopList.contains (def2.get (i))) {
            continue;
        } else if (! stopList.contains (def1.get (i)) && stopList.contains (def2.get (i))) {
            def1.add (i, " ");
            mdef = (def1.size () <= def2.size ()) ? def1.size () : def2.size ();
        } else if (stopList.contains (def1.get (i)) && ! stopList.contains (def2.get (i))) {
            def2.add (i, " ");
            mdef = (def1.size () <= def2.size ()) ? def1.size () : def2.size ();
        }

    }
    for (String word : def1) {
        if (word.equals (" ")) System.out.print ("_ ");
        else System.out.print (word + " ");

    }
    System.out.println ();
    for (String word : def2) {
        if (word.equals (" ")) System.out.print ("_ ");
        else System.out.print (word + " ");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19616857_19641868_1_16
19616857_19644551_1_19
Title: eMail address from SharedPreference for messageIntent 
----------------------------------------

private final void mailNote () {
    Intent messageIntent = new Intent (android.content.Intent.ACTION_SEND);
    messageIntent.addFlags (Intent.FLAG_GRANT_READ_URI_PERMISSION);
    SharedPreferences settings = getPreferences (MODE_PRIVATE);
    settings = PreferenceManager.getDefaultSharedPreferences (getBaseContext ());
    eMailAdress = settings.getString ("emailkey", "");
    messageIntent.putExtra (android.content.Intent.EXTRA_EMAIL, eMailAdress);
    messageIntent.putExtra (Intent.EXTRA_TEXT, "eMail from CED-APP");
    messageIntent.putExtra (Intent.EXTRA_SUBJECT, "CED-Info");
    messageIntent.putExtra (Intent.EXTRA_STREAM, Uri.parse ("file:///mnt/sdcard/CEDApp/CEDApp_export.txt"));
    startActivity (Intent.createChooser (messageIntent, "Email:"));
    Intent chooser = Intent.createChooser (messageIntent, "choose an option:");
    startActivity (chooser);
}
----------------------------------------

private final void mailNote () {
    Intent messageIntent = new Intent (android.content.Intent.ACTION_SEND);
    messageIntent.addFlags (Intent.FLAG_GRANT_READ_URI_PERMISSION);
    SharedPreferences settings = getPreferences (MODE_PRIVATE);
    settings = PreferenceManager.getDefaultSharedPreferences (getBaseContext ());
    settings.edit ().putString ("emailkey", "my@email.com").commit ();
    messageIntent.putExtra (android.content.Intent.EXTRA_EMAIL, eMailAdress);
    messageIntent.putExtra (Intent.EXTRA_TEXT, "eMail from CED-APP");
    messageIntent.putExtra (Intent.EXTRA_SUBJECT, "CED-Info");
    messageIntent.setType ("plain/text");
    messageIntent.putExtra (Intent.EXTRA_STREAM, Uri.parse ("file:///mnt/sdcard/CEDApp/CEDApp_export.txt"));
    startActivity (Intent.createChooser (messageIntent, "Email:"));
    Intent chooser = Intent.createChooser (messageIntent, "choose an option:");
    startActivity (chooser);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19624440_19624570_2_68
19624440_19624587_10_56
Title: Creating a nested for loop 
----------------------------------------

public static void main (String [] args) {
    Color g = Color.gray;
    Color lg = g.brighter ();
    UIManager.put ("OptionPane.background", lg);
    UIManager.put ("Panel.background", lg);
    Random random = new Random ();
    int attempts = 0;
    int randomNumber = random.nextInt (100);
    System.out.println (randomNumber);
    JOptionPane.showMessageDialog (null, "This program will generate a random number from 0 to 100 which you have to guess.", "Number Guesser", JOptionPane.INFORMATION_MESSAGE);
    while (true) {
        attempts ++;
        String guess = JOptionPane.showInputDialog (null, "Guess a number.", "Guess", JOptionPane.QUESTION_MESSAGE);
        if (guess == null) {
            System.out.println ("The user has terminated the program");
            System.exit (0);
        }
        int guess1 = Integer.parseInt (guess);
        if (guess1 > 100 || guess1 < 0) JOptionPane.showMessageDialog (null, "Guess is out of range!\nPlease enter valid input.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
        else if (randomNumber > guess1) JOptionPane.showMessageDialog (null, "You guessed too low.\nGuess again!", "Your guess", JOptionPane.INFORMATION_MESSAGE);
        else if (randomNumber < guess1) JOptionPane.showMessageDialog (null, "You guessed too high.\nGuess again!", "Your guess", JOptionPane.INFORMATION_MESSAGE);
        else {
            JOptionPane.showMessageDialog (null, "You guessed the number right!\nIt took you " + attempts + " attempt(s) to guess it.", "Congratulations!", JOptionPane.INFORMATION_MESSAGE);
            if (JOptionPane.showConfirmDialog (null, "Want to play again?", "Play again?", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                System.out.println ("Play again soon!");
                System.exit (0);
            } else {
                randomNumber = random.nextInt (100);
                System.out.println (randomNumber);
                attempts = 0;
            }
        }

    }
}
----------------------------------------

public static void main (String [] args) {
    UIManager m1 = new UIManager ();
    Color g = Color.gray;
    Color lg = g.brighter ();
    m1.put ("OptionPane.background", lg);
    m1.put ("Panel.background", lg);
    int x;
    for (x = 1; true; x ++) {
        Random random = new Random ();
        int randomNumber = random.nextInt (100);
        System.out.println (randomNumber);
        JOptionPane.showMessageDialog (null, "This program will generate a random number from 0 to 100 which you have to guess.", "Number Guesser", JOptionPane.INFORMATION_MESSAGE);
        String guess = getInputFromUser ();
        int guess1 = Integer.parseInt (guess);
        int y;
        for (y = 1; true; y ++) {
            if (guess1 > 100 || guess1 < 0) {
                JOptionPane.showMessageDialog (null, "Guess is out of range!\nPlease enter valid input.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
            } else if (randomNumber == guess1) {
                JOptionPane.showMessageDialog (null, "You guessed the number right!\nIt took you " + y + " attempt(s) to guess it.", "Congratulations!", JOptionPane.INFORMATION_MESSAGE);
                if (JOptionPane.showConfirmDialog (null, "Want to play again?", "Play again?", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                    System.out.println ("Play again soon!");
                    System.exit (0);
                } else {
                    y = 0;
                    break;
                }
            } else if (randomNumber > guess1) {
                JOptionPane.showMessageDialog (null, "You guessed too low.\nGuess again!", "Your guess", JOptionPane.INFORMATION_MESSAGE);
                guess = getInputFromUser ();
                guess1 = Integer.parseInt (guess);
            } else if (randomNumber < guess1) {
                JOptionPane.showMessageDialog (null, "You guessed too high.\nGuess again!", "Your guess", JOptionPane.INFORMATION_MESSAGE);
                guess = getInputFromUser ();
                guess1 = Integer.parseInt (guess);
            }

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19645123_49473985_36_58
19645123_49473985_6_28
Title: Java JCheckBox ArrayList help needed 
----------------------------------------

public void actionPerformed (ActionEvent a) {
    boolean [] checkboxState = new boolean [256];
    for (int i = 0;
    i < 256; i ++) {
        JCheckBox check = checkboxList.get (i);
        if (check.isSelected ()) {
            checkboxState [i] = true;
        }
    }
    try {
        JFileChooser fin = new JFileChooser ();
        fin.showOpenDialog (theFrame);
        File selectedFile = fin.getSelectedFile ();
        if (selectedFile != null) {
            FileOutputStream fileStream = new FileOutputStream (selectedFile);
            ObjectOutputStream os = new ObjectOutputStream (fileStream);
            os.writeObject (checkboxState);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent a) {
    boolean [] checkboxState = null;
    try {
        JFileChooser fin = new JFileChooser ();
        fin.showOpenDialog (theFrame);
        File selectedFile = fin.getSelectedFile ();
        ObjectInputStream ois = new ObjectInputStream (new FileInputStream (selectedFile));
        checkboxState = (boolean []) ois.readObject ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
    for (JCheckBox check : checkboxList) {
        check.setSelected (check.isSelected ());
    }
    for (int i = 0;
    i < 256; i ++) {
        JCheckBox check = checkboxList.get (i);
        check.setSelected (checkboxState != null && checkboxState [i]);
    }
    sequencer.stop ();
    buildTrackAndStart ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19646325_19646402_6_23
19646325_19647318_9_43
Title: Integer partition into sums and products 
----------------------------------------

public static void main (String [] args) {
    int terms = 4;
    int sum = 7;
    int [] array = new int [terms];
    for (int i = 0;
    i < terms; i ++) {
        array [i] = 1;
    }
    boolean end = false;
    int total = 0;
    while (end == false) {
        if (sumAr (array) == sum) {
            print (array, sum);
            total ++;
        }
        end = increase (array, sum);
    }
    System.out.println ("Total numbers: " + total);
}
----------------------------------------

public static void main (String [] args) {
    int n = 6;
    List < List < Integer > > numberPermutations = Permutations.getPermutations (n);
    for (Iterator < List < Integer > > iterator = numberPermutations.iterator ();
    iterator.hasNext ();) {
        List < Integer > permutation = iterator.next ();
        if (permutation.size () <= 1) {
            iterator.remove ();
        }
    }
    Set < List < Character > > symbolPermutations = Permutations.getSymbols (n);
    for (List < Integer > numberPermutation : numberPermutations) {
        for (List < Character > symbolPermutation : symbolPermutations) {
            if (numberPermutation.size () - 1 == symbolPermutation.size ()) {
                int sum = numberPermutation.get (0);
                String equation = sum + "";
                for (int i = 1;
                i < numberPermutation.size (); i ++) {
                    Integer thisInt = numberPermutation.get (i);
                    if (symbolPermutation.get (i - 1) == '+') {
                        sum += thisInt;
                        equation += " + " + thisInt;
                    } else {
                        sum *= thisInt;
                        equation += " * " + thisInt;
                    }
                }
                if (sum == n) {
                    System.out.println (sum + " = " + equation);
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19656630_19656714_1_16
19656630_19656813_1_12
Title: "Two OnClickListeners two buttons. (savedpreferences)" 
----------------------------------------

@Override
public void onClick (View v) {
    if (v == button) {
        savePreferences ("storedName", editText.getText ().toString ());
        Toast.makeText (getApplicationContext (), "Meldingtekst is aangepast.", Toast.LENGTH_LONG).show ();
    } else if (v == button1) {
        savePreferences1 ("storedOnderwerp", editText1.getText ().toString ());
        Toast.makeText (getApplicationContext (), "Meldingonderwerp is aangepast.", Toast.LENGTH_LONG).show ();
    }

}
----------------------------------------

@Override
public void onClick (View v) {
    switch (v.getId ()) {
        case R.id.button :
            break;
        case R.id.button1 :
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1965775_1965866_11_24
1965775_1965866_26_39
Title: Problem in data insertion in Ms access..But Code runs fine 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace (e);
    }
}
----------------------------------------

public static void close (Statement statement) {
    try {
        if (statement != null) {
            statement.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1965775_1965866_11_24
1965775_1965866_41_54
Title: Problem in data insertion in Ms access..But Code runs fine 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace (e);
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1965775_1965866_26_39
1965775_1965866_41_54
Title: Problem in data insertion in Ms access..But Code runs fine 
----------------------------------------

public static void close (Statement statement) {
    try {
        if (statement != null) {
            statement.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace (e);
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19661199_19661565_1_30
19661199_33430356_9_27
Title: How to count vowels and consonants and capitalizing first letter in a string while output using a method and return result 
----------------------------------------

public static void main (String args []) {
    Scanner stdin = new Scanner (System.in);
    String string1;
    System.out.println ("Enter a string");
    string1 = stdin.nextLine ();
    string1 = string1.toLowerCase ();
    int count = 0;
    int vowels = 0;
    int consonants = 0;
    for (String retval : string1.split (" ")) {
        for (int i = 0;
        i < retval.length (); i ++) {
            char ch = retval.charAt (i);
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                vowels ++;
            } else {
                consonants ++;
            }
        }
        System.out.println (retval.substring (0, 1).toUpperCase () + retval.substring (1) + " has " + vowels + " vowels and " + consonants + " cosonants");
        vowels = 0;
        consonants = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    @SuppressWarnings ("resource")
    Scanner name = new Scanner (System.in);
    String nm = name.nextLine ();
    System.out.println ();
    int vowel = 0;
    int consonant = 0;
    for (int i = 0;
    i < nm.length (); i ++) {
        for (int j = 0;
        j < Vowels.length (); j ++) {
            if (Vowels.charAt (j) == nm.charAt (i)) {
                vowel ++;
                break;
            }
        }
    }
    consonant = nm.length () - vowel;
    System.out.println ("no of Vowels :" + vowel + "\nno of consonant :" + consonant);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19661199_19661565_1_30
19661199_33845996_2_22
Title: How to count vowels and consonants and capitalizing first letter in a string while output using a method and return result 
----------------------------------------

public static void main (String args []) {
    Scanner stdin = new Scanner (System.in);
    String string1;
    System.out.println ("Enter a string");
    string1 = stdin.nextLine ();
    string1 = string1.toLowerCase ();
    int count = 0;
    int vowels = 0;
    int consonants = 0;
    for (String retval : string1.split (" ")) {
        for (int i = 0;
        i < retval.length (); i ++) {
            char ch = retval.charAt (i);
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                vowels ++;
            } else {
                consonants ++;
            }
        }
        System.out.println (retval.substring (0, 1).toUpperCase () + retval.substring (1) + " has " + vowels + " vowels and " + consonants + " cosonants");
        vowels = 0;
        consonants = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String test = "qwertyYVTA";
    test = test.trim ();
    int vowels = 0;
    int consonants = 0;
    Pattern patternVow = Pattern.compile ("[eyuioa]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    Matcher matcherVow = patternVow.matcher (test);
    while (matcherVow.find ()) {
        vowels ++;
    }
    Pattern patternCons = Pattern.compile ("[wrtpsdfghjklzxcvbnm]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    Matcher matcherCons = patternCons.matcher (test);
    while (matcherCons.find ()) {
        consonants ++;
    }
    System.out.println ("Vowels in test String is " + vowels);
    System.out.println ("Consonants in test String is " + consonants);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19661199_19661565_1_30
19661199_43105738_5_23
Title: How to count vowels and consonants and capitalizing first letter in a string while output using a method and return result 
----------------------------------------

public static void main (String args []) {
    Scanner stdin = new Scanner (System.in);
    String string1;
    System.out.println ("Enter a string");
    string1 = stdin.nextLine ();
    string1 = string1.toLowerCase ();
    int count = 0;
    int vowels = 0;
    int consonants = 0;
    for (String retval : string1.split (" ")) {
        for (int i = 0;
        i < retval.length (); i ++) {
            char ch = retval.charAt (i);
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                vowels ++;
            } else {
                consonants ++;
            }
        }
        System.out.println (retval.substring (0, 1).toUpperCase () + retval.substring (1) + " has " + vowels + " vowels and " + consonants + " cosonants");
        vowels = 0;
        consonants = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    int vowels_count = 0;
    int consonents_count = 0;
    Scanner sc = new Scanner (System.in);
    String str = sc.nextLine ();
    String str2 = str.toLowerCase ();
    char [] chr = str2.toCharArray ();
    for (int i = 0;
    i < chr.length; i ++) {
        if (chr [i] == 'a' || chr [i] == 'e' || chr [i] == 'i' || chr [i] == 'o' || chr [i] == 'u') vowels_count ++;
        else consonents_count ++;

    }
    System.out.println (vowels_count + " " + consonents_count);
    sc.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19661199_33430356_9_27
19661199_33845996_2_22
Title: How to count vowels and consonants and capitalizing first letter in a string while output using a method and return result 
----------------------------------------

public static void main (String [] args) {
    @SuppressWarnings ("resource")
    Scanner name = new Scanner (System.in);
    String nm = name.nextLine ();
    System.out.println ();
    int vowel = 0;
    int consonant = 0;
    for (int i = 0;
    i < nm.length (); i ++) {
        for (int j = 0;
        j < Vowels.length (); j ++) {
            if (Vowels.charAt (j) == nm.charAt (i)) {
                vowel ++;
                break;
            }
        }
    }
    consonant = nm.length () - vowel;
    System.out.println ("no of Vowels :" + vowel + "\nno of consonant :" + consonant);
}
----------------------------------------

public static void main (String [] args) {
    String test = "qwertyYVTA";
    test = test.trim ();
    int vowels = 0;
    int consonants = 0;
    Pattern patternVow = Pattern.compile ("[eyuioa]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    Matcher matcherVow = patternVow.matcher (test);
    while (matcherVow.find ()) {
        vowels ++;
    }
    Pattern patternCons = Pattern.compile ("[wrtpsdfghjklzxcvbnm]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    Matcher matcherCons = patternCons.matcher (test);
    while (matcherCons.find ()) {
        consonants ++;
    }
    System.out.println ("Vowels in test String is " + vowels);
    System.out.println ("Consonants in test String is " + consonants);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19661199_33430356_9_27
19661199_43105738_5_23
Title: How to count vowels and consonants and capitalizing first letter in a string while output using a method and return result 
----------------------------------------

public static void main (String [] args) {
    @SuppressWarnings ("resource")
    Scanner name = new Scanner (System.in);
    String nm = name.nextLine ();
    System.out.println ();
    int vowel = 0;
    int consonant = 0;
    for (int i = 0;
    i < nm.length (); i ++) {
        for (int j = 0;
        j < Vowels.length (); j ++) {
            if (Vowels.charAt (j) == nm.charAt (i)) {
                vowel ++;
                break;
            }
        }
    }
    consonant = nm.length () - vowel;
    System.out.println ("no of Vowels :" + vowel + "\nno of consonant :" + consonant);
}
----------------------------------------

public static void main (String [] args) {
    int vowels_count = 0;
    int consonents_count = 0;
    Scanner sc = new Scanner (System.in);
    String str = sc.nextLine ();
    String str2 = str.toLowerCase ();
    char [] chr = str2.toCharArray ();
    for (int i = 0;
    i < chr.length; i ++) {
        if (chr [i] == 'a' || chr [i] == 'e' || chr [i] == 'i' || chr [i] == 'o' || chr [i] == 'u') vowels_count ++;
        else consonents_count ++;

    }
    System.out.println (vowels_count + " " + consonents_count);
    sc.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19661199_33845996_2_22
19661199_43105738_5_23
Title: How to count vowels and consonants and capitalizing first letter in a string while output using a method and return result 
----------------------------------------

public static void main (String [] args) {
    String test = "qwertyYVTA";
    test = test.trim ();
    int vowels = 0;
    int consonants = 0;
    Pattern patternVow = Pattern.compile ("[eyuioa]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    Matcher matcherVow = patternVow.matcher (test);
    while (matcherVow.find ()) {
        vowels ++;
    }
    Pattern patternCons = Pattern.compile ("[wrtpsdfghjklzxcvbnm]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
    Matcher matcherCons = patternCons.matcher (test);
    while (matcherCons.find ()) {
        consonants ++;
    }
    System.out.println ("Vowels in test String is " + vowels);
    System.out.println ("Consonants in test String is " + consonants);
}
----------------------------------------

public static void main (String [] args) {
    int vowels_count = 0;
    int consonents_count = 0;
    Scanner sc = new Scanner (System.in);
    String str = sc.nextLine ();
    String str2 = str.toLowerCase ();
    char [] chr = str2.toCharArray ();
    for (int i = 0;
    i < chr.length; i ++) {
        if (chr [i] == 'a' || chr [i] == 'e' || chr [i] == 'i' || chr [i] == 'o' || chr [i] == 'u') vowels_count ++;
        else consonents_count ++;

    }
    System.out.println (vowels_count + " " + consonents_count);
    sc.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19665879_19666083_1_41
19665879_19666970_39_47
Title: How do I concatenate sequential files in order with Java? 
----------------------------------------

public static void main (String [] args) {
    final int BUFFERSIZE = 1024 << 8;
    File baseDir = new File ("C:\\path\\logs\\");
    String [] fileNames = baseDir.list (new FilenameFilter () {
        @Override
        public boolean accept (File dir, String name) {
            return name.endsWith (".log");
        }}

    );
    Arrays.sort (fileNames);
    File output = new File (baseDir.getAbsolutePath () + File.separatorChar + "MERGED.log");
    try {
        BufferedOutputStream out = new BufferedOutputStream (new FileOutputStream (output), BUFFERSIZE);
        byte [] bytes = new byte [BUFFERSIZE];
        int bytesRead;
        final byte [] newLine = "\n".getBytes ();
        for (String s : fileNames) {
            String fullName = baseDir.getAbsolutePath () + File.separatorChar + s;
            BufferedInputStream in = new BufferedInputStream (new FileInputStream (fullName), BUFFERSIZE);
            while ((bytesRead = in.read (bytes, 0, bytes.length)) != - 1) {
                out.write (bytes, 0, bytesRead);
            }
            try {
                in.close ();
            } catch (IOException e) {
            }
            out.write (newLine);
        }
        out.close ();
    } catch (Exception e) {
        throw new RuntimeException (e);
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    String dir = "<path-to-dir-with-logs>";
    File [] logs = logs (dir);
    for (File f : logs) {
        System.out.println (f.getAbsolutePath ());
    }
    System.out.println ();
    System.out.println (cat (logs));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19666366_31444316_1_20
19666366_48218941_1_34
Title: Compression algorithm in java 
----------------------------------------

public static void compressString (String string) {
    StringBuffer stringBuffer = new StringBuffer ();
    for (int i = 0;
    i < string.length (); i ++) {
        int count = 1;
        while (i + 1 < string.length () && string.charAt (i) == string.charAt (i + 1)) {
            count ++;
            i ++;
        }
        if (count > 1) {
            stringBuffer.append (count);
        }
        stringBuffer.append (string.charAt (i));
    }
    System.out.println ("Compressed string: " + stringBuffer);
}
----------------------------------------

public static void compressString (String string) {
    LinkedHashSet < String > charMap = new LinkedHashSet < String > ();
    HashMap < String, Integer > countMap = new HashMap < String, Integer > ();
    int count;
    String key;
    for (int i = 0;
    i < string.length (); i ++) {
        key = new String (string.charAt (i) + "");
        charMap.add (key);
        if (countMap.containsKey (key)) {
            count = countMap.get (key);
            countMap.put (key, count + 1);
        } else {
            countMap.put (key, 1);
        }
    }
    Iterator < String > iterator = charMap.iterator ();
    String resultStr = "";
    while (iterator.hasNext ()) {
        key = iterator.next ();
        count = countMap.get (key);
        if (count > 1) {
            resultStr = resultStr + count + key;
        } else {
            resultStr = resultStr + key;
        }
    }
    System.out.println (resultStr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671234_19671260_5_13
19671234_19671265_5_13
Title: Returning wrong count in a recursive method 
----------------------------------------

public int recSearch (E item, Node node, int index) {
    if (node == null) {
        return - 1;
    } else if (node.data.equals (item)) {
        return index;
    } else {
        return recSearch (item, node.next, index + 1);
    }

}
----------------------------------------

public int recSearch (E item, Node node, int searchCnt) {
    if (head == null) {
        return - 1;
    } else if (node.data.equals (item)) {
        return searchCnt;
    } else {
        return recSearch (item, node.next, ++ searchCnt);
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671453_19691413_2_24
19671453_29776503_4_21
Title: How do I get the max and min values from a set of numbers entered? 
----------------------------------------

public static void main (String [] args) {
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;
    Scanner s = new Scanner (System.in);
    while (true) {
        System.out.print ("Enter a Value: ");
        int val = s.nextInt ();
        if (val == 0) {
            break;
        }
        if (val < min) {
            min = val;
        }
        if (val > max) {
            max = val;
        }
    }
    System.out.println ("min: " + min);
    System.out.println ("max: " + max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("enter number");
    int val = input.nextInt ();
    int min = val;
    while (input.hasNextInt () == true) {
        val = input.nextInt ();
        if (val < min) min = val;

    }
    System.out.println ("min is: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671453_19691413_2_24
19671453_35729594_3_24
Title: How do I get the max and min values from a set of numbers entered? 
----------------------------------------

public static void main (String [] args) {
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;
    Scanner s = new Scanner (System.in);
    while (true) {
        System.out.print ("Enter a Value: ");
        int val = s.nextInt ();
        if (val == 0) {
            break;
        }
        if (val < min) {
            min = val;
        }
        if (val > max) {
            max = val;
        }
    }
    System.out.println ("min: " + min);
    System.out.println ("max: " + max);
}
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter numbers: ");
    Scanner input = new Scanner (System.in);
    double max = Double.MIN_VALUE;
    double min = Double.MAX_VALUE;
    while (true) {
        if (! input.hasNextDouble ()) break;

        Double num = input.nextDouble ();
        min = Math.min (min, num);
        max = Math.max (max, num);
    }
    System.out.println ("Max is: " + max);
    System.out.println ("Min is: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671453_19691413_2_24
19671453_49690669_1_22
Title: How do I get the max and min values from a set of numbers entered? 
----------------------------------------

public static void main (String [] args) {
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;
    Scanner s = new Scanner (System.in);
    while (true) {
        System.out.print ("Enter a Value: ");
        int val = s.nextInt ();
        if (val == 0) {
            break;
        }
        if (val < min) {
            min = val;
        }
        if (val > max) {
            max = val;
        }
    }
    System.out.println ("min: " + min);
    System.out.println ("max: " + max);
}
----------------------------------------

public static void main (String [] args) {
    int min, max;
    Scanner s = new Scanner (System.in);
    System.out.print ("Enter a Value: ");
    int val = s.nextInt ();
    min = max = val;
    while (val != 0) {
        if (val < min) {
            min = val;
        }
        if (val > max) {
            max = val;
        }
        System.out.print ("Enter a Value: ");
        val = s.nextInt ();
    }
    System.out.println ("Min: " + min);
    System.out.println ("Max: " + max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671453_29776503_4_21
19671453_35729594_3_24
Title: How do I get the max and min values from a set of numbers entered? 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("enter number");
    int val = input.nextInt ();
    int min = val;
    while (input.hasNextInt () == true) {
        val = input.nextInt ();
        if (val < min) min = val;

    }
    System.out.println ("min is: " + min);
}
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter numbers: ");
    Scanner input = new Scanner (System.in);
    double max = Double.MIN_VALUE;
    double min = Double.MAX_VALUE;
    while (true) {
        if (! input.hasNextDouble ()) break;

        Double num = input.nextDouble ();
        min = Math.min (min, num);
        max = Math.max (max, num);
    }
    System.out.println ("Max is: " + max);
    System.out.println ("Min is: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671453_29776503_4_21
19671453_49690669_1_22
Title: How do I get the max and min values from a set of numbers entered? 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("enter number");
    int val = input.nextInt ();
    int min = val;
    while (input.hasNextInt () == true) {
        val = input.nextInt ();
        if (val < min) min = val;

    }
    System.out.println ("min is: " + min);
}
----------------------------------------

public static void main (String [] args) {
    int min, max;
    Scanner s = new Scanner (System.in);
    System.out.print ("Enter a Value: ");
    int val = s.nextInt ();
    min = max = val;
    while (val != 0) {
        if (val < min) {
            min = val;
        }
        if (val > max) {
            max = val;
        }
        System.out.print ("Enter a Value: ");
        val = s.nextInt ();
    }
    System.out.println ("Min: " + min);
    System.out.println ("Max: " + max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671453_35729594_3_24
19671453_49690669_1_22
Title: How do I get the max and min values from a set of numbers entered? 
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter numbers: ");
    Scanner input = new Scanner (System.in);
    double max = Double.MIN_VALUE;
    double min = Double.MAX_VALUE;
    while (true) {
        if (! input.hasNextDouble ()) break;

        Double num = input.nextDouble ();
        min = Math.min (min, num);
        max = Math.max (max, num);
    }
    System.out.println ("Max is: " + max);
    System.out.println ("Min is: " + min);
}
----------------------------------------

public static void main (String [] args) {
    int min, max;
    Scanner s = new Scanner (System.in);
    System.out.print ("Enter a Value: ");
    int val = s.nextInt ();
    min = max = val;
    while (val != 0) {
        if (val < min) {
            min = val;
        }
        if (val > max) {
            max = val;
        }
        System.out.print ("Enter a Value: ");
        val = s.nextInt ();
    }
    System.out.println ("Min: " + min);
    System.out.println ("Max: " + max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19671500_19671542_6_23
19671500_19671681_1_32
Title: sorting a particular string of a certain format 
----------------------------------------

public int compare (String one, String two) {
    String [] partsOne = one.split (" ");
    String [] partsTwo = two.split (" ");
    if (partsOne.length != 2 || partsTwo.length != 2) {
        throw new IllegalArgumentException ();
    }
    if (! SEASONS.contains (partsOne [0]) || ! SEASONS.contains (partsTwo [0])) {
        throw new IllegalArgumentException ();
    }
    int comparison = partsOne [1].compareTo (partsTwo [1]);
    if (comparison == 0) {
        comparison = SEASONS.indexOf (partsOne [0]).compareTo (SEASONS.indexOf (partsTwo [0]));
    }
    return comparison;
}
----------------------------------------

int compare (String o1, String o2) {
    if (o1 == o2) return 0;

    if (o1 == null) return - 1;

    if (o2 == null) return 1;

    String [] parts1 = o1.split (' ');
    String [] parts2 = o2.split (' ');
    if (parts1.length != 2 || parts2.length != 2) {
        return parts2.length - parts1.length;
    }
    var yearCompare = parts [1].compareTo (parts [2]);
    if (yearCompare != 0) {
        return yearCompare;
    }
    String [] termWeights = {"Spring", "Summer", "Fall", "Winter"};
    var term1 = termWeights.indexOf (parts1 [0]);
    var term2 = termWeights.indexOf (parts2 [0]);
    if (term1 == term2) return 0;

    if (term1 == - 1) return - 1;

    if (term2 == - 1) return 1;

    return term2 - term1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19681413_19681656_108_132
19681413_19681656_220_247
Title: View file in JTextField with pagination - Java 
----------------------------------------

protected void layoutMajorAxis (int targetSpan, int axis, int [] offsets, int [] spans) {
    super.layoutMajorAxis (targetSpan, axis, offsets, spans);
    int totalOffset = PAGE_INSET + PAGE_MARGIN.top;
    int pageBreak;
    pageNumber = 1;
    PagingParagraphView view;
    for (int i = 0;
    i < offsets.length; i ++) {
        offsets [i] = totalOffset;
        pageBreak = calculatePageBreak (pageNumber);
        view = (PagingParagraphView) getView (i);
        view.setPargraphOffset (totalOffset);
        view.setStartPage (pageNumber);
        if ((spans [i] + offsets [i]) > pageBreak) {
            view.layout (view.getWidth (), getHeight ());
            pageNumber = view.getEndPage ();
            spans [i] += view.getAdjustedSpan ();
        }
        totalOffset = offsets [i] + spans [i];
    }
}
----------------------------------------

protected void layoutMajorAxis (int targetSpan, int axis, int [] offsets, int [] spans) {
    super.layoutMajorAxis (targetSpan, axis, offsets, spans);
    if (paragraphOffset != 0) {
        endPage = startPage;
        int relativeBreak = calculatePageBreak (endPage) - paragraphOffset;
        int correctedOffset;
        adjustedSpan = 0;
        for (int i = 0;
        i < offsets.length; i ++) {
            if (offsets [i] + spans [i] > relativeBreak) {
                correctedOffset = relativeBreak + PAGE_MARGIN.bottom + (2 * PAGE_INSET) + PAGE_MARGIN.top - offsets [i];
                for (int j = i;
                j < offsets.length; j ++) {
                    offsets [j] += correctedOffset;
                }
                adjustedSpan += correctedOffset;
                endPage ++;
                relativeBreak = calculatePageBreak (endPage) - paragraphOffset;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19687811_19687864_1_14
19687811_19688341_2_13
Title: Node not added to tree 
----------------------------------------

public void insert (int x) {
    if (x < this.info) {
        if (this.left == null) this.left = new NODE (x);
        else this.left.insert (x);

    } else {
        if (this.right == null) this.right = new NODE (x);
        else this.right.insert (x);

    }
}
----------------------------------------

public boolean insert (int x, Node node, boolean leftChild) {
    if (node == null) return false;

    Node child = new Node (x);
    if (leftChild) {
        if (node.left != null) return false;

        node.left = child;
    } else {
        if (node.right != null) return false;

        node.right = child;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19691830_24925724_3_26
19691830_34668828_2_14
Title: find the sum of the multiples of 3 and 5 below 1000 
----------------------------------------

public static void main (String [] args) {
    int firstNumber = 3;
    int secondNumber = 5;
    ArrayList < Integer > numberToCheck = new ArrayList < Integer > ();
    ArrayList < Integer > multiples = new ArrayList < Integer > ();
    int sumOfMultiples = 0;
    for (int i = 0;
    i < 1000; i ++) {
        numberToCheck.add (i);
        if (numberToCheck.get (i) % firstNumber == 0 || numberToCheck.get (i) % secondNumber == 0) {
            multiples.add (numberToCheck.get (i));
        }
    }
    for (int i = 0;
    i < multiples.size (); i ++) {
        sumOfMultiples += multiples.get (i);
    }
    System.out.println (multiples);
    System.out.println ("Sum Of Multiples: " + sumOfMultiples);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int t = sc.nextInt ();
    while (t > 0) {
        int sum = 0;
        int count = 0;
        int n = sc.nextInt ();
        n --;
        System.out.println ((n / 3 * (6 + (n / 3 - 1) * 3)) / 2 + (n / 5 * (10 + (n / 5 - 1) * 5)) / 2 - (n / 15 * (30 + (n / 15 - 1) * 15)) / 2);
        t --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19694006_30533462_1_12
19694006_30533590_1_15
Title: MongoDB and multiple upsert 
----------------------------------------

public static BulkWriteResult insertAll (MongoCollection < Document > coll, List < Document > docs, String keyTag, boolean upsert) {
    if (docs.isEmpty ()) return null;

    List < UpdateOneModel < Document > > requests = new ArrayList < > (docs.size ());
    UpdateOptions opt = new UpdateOptions ().upsert (upsert);
    for (Document doc : docs) {
        BasicDBObject filter = new BasicDBObject (keyTag, doc.get (keyTag));
        BasicDBObject action = new BasicDBObject ("$set", doc);
        requests.add (new UpdateOneModel < Document > (filter, action, opt));
    }
    return coll.bulkWrite (requests);
}
----------------------------------------

public static BulkWriteResult insertAll (MongoCollection < Document > coll, List < Document > docs, String [] keyTags, boolean upsert) {
    if (docs.isEmpty ()) return null;

    List < UpdateOneModel < Document > > requests = new ArrayList < > (docs.size ());
    UpdateOptions opt = new UpdateOptions ().upsert (upsert);
    for (Document doc : docs) {
        BasicDBObject filter = new BasicDBObject ();
        for (String keyTag : keyTags) {
            filter.append (keyTag, doc.get (keyTag));
        }
        BasicDBObject action = new BasicDBObject ("$set", doc);
        requests.add (new UpdateOneModel < Document > (filter, action, opt));
    }
    return coll.bulkWrite (requests);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19694966_19703301_1_44
19694966_19753712_1_68
Title: "How should i prevent tab key to activate my radio button but it still should be able to focus on text of radio button" 
----------------------------------------

public static void main (String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    shell.setLayout (new GridLayout (1, false));
    new Button (shell, SWT.TOGGLE);
    new Scale (shell, SWT.HORIZONTAL);
    final Canvas invisible = new Canvas (shell, SWT.NONE);
    invisible.addListener (SWT.KeyDown, new Listener () {
        @Override
        public void handleEvent (Event event) {
        }}

    );
    final Button radioButton1 = new Button (shell, SWT.RADIO);
    radioButton1.setText ("text1");
    final Button radioButton2 = new Button (shell, SWT.RADIO);
    radioButton2.setText ("text2");
    invisible.addFocusListener (new FocusListener () {
        @Override
        public void focusGained (FocusEvent e) {
            final boolean selection1 = radioButton1.getSelection ();
            final boolean selection2 = radioButton2.getSelection ();
            radioButton1.setFocus ();
            radioButton1.setSelection (selection1);
            radioButton2.setSelection (selection2);
        }@Override
        public void focusLost (FocusEvent e) {
        }}

    );
    shell.open ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
    display.dispose ();
}
----------------------------------------

public static void main (String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    shell.setLayout (new FillLayout ());
    final Composite composite = new Composite (shell, SWT.NO_RADIO_GROUP);
    composite.setLayout (new GridLayout (2, false));
    new Button (composite, SWT.TOGGLE);
    new Scale (composite, SWT.HORIZONTAL);
    final Button radioButton1 = new Button (composite, SWT.RADIO);
    radioButton1.setText ("text1");
    radioButton1.setData ("selection", false);
    new Text (composite, SWT.SINGLE);
    final Button radioButton2 = new Button (composite, SWT.RADIO);
    radioButton2.setText ("text2");
    radioButton2.setData ("selection", false);
    new Text (composite, SWT.SINGLE);
    final Button [] radioGroup = {radioButton1, radioButton2};
    final Listener listener = new Listener () {
        @Override
        public void handleEvent (Event event) {
            final Button button = (Button) event.widget;
            switch (event.type) {
                case SWT.MouseDown :
                    event.widget.setData ("selection", true);
                    break;
                case SWT.KeyDown :
                    if (event.keyCode == SWT.SPACE) {
                        event.widget.setData ("selection", true);
                    }
                    break;
                case SWT.Selection :
                    final boolean selection = (boolean) button.getData ("selection");
                    if (selection != button.getSelection ()) {
                        button.setSelection (selection);
                    }
                    if (selection) {
                        for (Button radioButton : radioGroup) {
                            if (radioButton != button) {
                                radioButton.setData ("selection", false);
                                radioButton.setSelection (false);
                            }
                        }
                    }
                    break;
            }
        }}

    ;
    radioButton1.addListener (SWT.MouseDown, listener);
    radioButton1.addListener (SWT.KeyDown, listener);
    radioButton1.addListener (SWT.Selection, listener);
    radioButton2.addListener (SWT.MouseDown, listener);
    radioButton2.addListener (SWT.KeyDown, listener);
    radioButton2.addListener (SWT.Selection, listener);
    shell.open ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
    display.dispose ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19694966_19703301_1_44
19694966_19798580_29_107
Title: "How should i prevent tab key to activate my radio button but it still should be able to focus on text of radio button" 
----------------------------------------

public static void main (String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    shell.setLayout (new GridLayout (1, false));
    new Button (shell, SWT.TOGGLE);
    new Scale (shell, SWT.HORIZONTAL);
    final Canvas invisible = new Canvas (shell, SWT.NONE);
    invisible.addListener (SWT.KeyDown, new Listener () {
        @Override
        public void handleEvent (Event event) {
        }}

    );
    final Button radioButton1 = new Button (shell, SWT.RADIO);
    radioButton1.setText ("text1");
    final Button radioButton2 = new Button (shell, SWT.RADIO);
    radioButton2.setText ("text2");
    invisible.addFocusListener (new FocusListener () {
        @Override
        public void focusGained (FocusEvent e) {
            final boolean selection1 = radioButton1.getSelection ();
            final boolean selection2 = radioButton2.getSelection ();
            radioButton1.setFocus ();
            radioButton1.setSelection (selection1);
            radioButton2.setSelection (selection2);
        }@Override
        public void focusLost (FocusEvent e) {
        }}

    );
    shell.open ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
    display.dispose ();
}
----------------------------------------

public static void main (String [] args) {
    Display display = Display.getDefault ();
    Shell shell = new Shell ();
    Composite composite = new Composite (shell, SWT.NONE);
    composite.setBounds (197, 177, 393, 110);
    composite.setLayout (new GridLayout (2, false));
    new Label (composite, SWT.NONE);
    new Label (composite, SWT.NONE);
    Button btnButton = new Button (composite, SWT.RADIO);
    btnButton.setText (" Button1");
    Composite composite_1 = new Composite (composite, SWT.NONE);
    composite_1.setLayout (new GridLayout (4, false));
    GridData gd_composite_1 = new GridData (SWT.LEFT, SWT.CENTER, false, false, 1, 1);
    gd_composite_1.heightHint = 37;
    gd_composite_1.widthHint = 306;
    composite_1.setLayoutData (gd_composite_1);
    text = new Text (composite_1, SWT.BORDER);
    text.setSize (new Point (10, 8));
    GridData gd_text = new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1);
    gd_text.widthHint = 72;
    text.setLayoutData (gd_text);
    Label lblLabel = new Label (composite_1, SWT.NONE);
    lblLabel.setLayoutData (new GridData (SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
    lblLabel.setText ("Label2");
    text_1 = new Text (composite_1, SWT.BORDER);
    text_1.setSize (new Point (12, 8));
    GridData gd_text_1 = new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1);
    gd_text_1.widthHint = 60;
    text_1.setLayoutData (gd_text_1);
    Label lblLabel_1 = new Label (composite_1, SWT.NONE);
    lblLabel_1.setText (" Label3");
    new Label (composite_1, SWT.NONE);
    new Label (composite_1, SWT.NONE);
    new Label (composite_1, SWT.NONE);
    new Label (composite_1, SWT.NONE);
    Button btnButton_1 = new Button (composite, SWT.RADIO);
    btnButton_1.setText (" Button2");
    Composite composite_2 = new Composite (composite, SWT.NONE);
    composite_2.setLayout (new GridLayout (5, false));
    GridData gd_composite_2 = new GridData (SWT.LEFT, SWT.CENTER, false, false, 1, 1);
    gd_composite_2.widthHint = 305;
    gd_composite_2.heightHint = 30;
    composite_2.setLayoutData (gd_composite_2);
    Combo combo = new Combo (composite_2, SWT.NONE);
    combo.setSize (new Point (10, 8));
    combo.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1));
    combo.setEnabled (false);
    Combo combo_1 = new Combo (composite_2, SWT.NONE);
    combo_1.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1));
    combo_1.setEnabled (false);
    Label lblLabelxyz = new Label (composite_2, SWT.NONE);
    lblLabelxyz.setLayoutData (new GridData (SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
    lblLabelxyz.setText ("LabelXYZ1");
    text_2 = new Text (composite_2, SWT.BORDER);
    text_2.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1));
    Label lblLabelxyz_1 = new Label (composite_2, SWT.NONE);
    lblLabelxyz_1.setText ("LabelXYZ2");
    text_2.setEnabled (false);
    Label label = new Label (shell, SWT.NONE);
    label.setBounds (62, 112, 55, 15);
    label.setText ("");
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19694966_19753712_1_68
19694966_19798580_29_107
Title: "How should i prevent tab key to activate my radio button but it still should be able to focus on text of radio button" 
----------------------------------------

public static void main (String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    shell.setLayout (new FillLayout ());
    final Composite composite = new Composite (shell, SWT.NO_RADIO_GROUP);
    composite.setLayout (new GridLayout (2, false));
    new Button (composite, SWT.TOGGLE);
    new Scale (composite, SWT.HORIZONTAL);
    final Button radioButton1 = new Button (composite, SWT.RADIO);
    radioButton1.setText ("text1");
    radioButton1.setData ("selection", false);
    new Text (composite, SWT.SINGLE);
    final Button radioButton2 = new Button (composite, SWT.RADIO);
    radioButton2.setText ("text2");
    radioButton2.setData ("selection", false);
    new Text (composite, SWT.SINGLE);
    final Button [] radioGroup = {radioButton1, radioButton2};
    final Listener listener = new Listener () {
        @Override
        public void handleEvent (Event event) {
            final Button button = (Button) event.widget;
            switch (event.type) {
                case SWT.MouseDown :
                    event.widget.setData ("selection", true);
                    break;
                case SWT.KeyDown :
                    if (event.keyCode == SWT.SPACE) {
                        event.widget.setData ("selection", true);
                    }
                    break;
                case SWT.Selection :
                    final boolean selection = (boolean) button.getData ("selection");
                    if (selection != button.getSelection ()) {
                        button.setSelection (selection);
                    }
                    if (selection) {
                        for (Button radioButton : radioGroup) {
                            if (radioButton != button) {
                                radioButton.setData ("selection", false);
                                radioButton.setSelection (false);
                            }
                        }
                    }
                    break;
            }
        }}

    ;
    radioButton1.addListener (SWT.MouseDown, listener);
    radioButton1.addListener (SWT.KeyDown, listener);
    radioButton1.addListener (SWT.Selection, listener);
    radioButton2.addListener (SWT.MouseDown, listener);
    radioButton2.addListener (SWT.KeyDown, listener);
    radioButton2.addListener (SWT.Selection, listener);
    shell.open ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
    display.dispose ();
}
----------------------------------------

public static void main (String [] args) {
    Display display = Display.getDefault ();
    Shell shell = new Shell ();
    Composite composite = new Composite (shell, SWT.NONE);
    composite.setBounds (197, 177, 393, 110);
    composite.setLayout (new GridLayout (2, false));
    new Label (composite, SWT.NONE);
    new Label (composite, SWT.NONE);
    Button btnButton = new Button (composite, SWT.RADIO);
    btnButton.setText (" Button1");
    Composite composite_1 = new Composite (composite, SWT.NONE);
    composite_1.setLayout (new GridLayout (4, false));
    GridData gd_composite_1 = new GridData (SWT.LEFT, SWT.CENTER, false, false, 1, 1);
    gd_composite_1.heightHint = 37;
    gd_composite_1.widthHint = 306;
    composite_1.setLayoutData (gd_composite_1);
    text = new Text (composite_1, SWT.BORDER);
    text.setSize (new Point (10, 8));
    GridData gd_text = new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1);
    gd_text.widthHint = 72;
    text.setLayoutData (gd_text);
    Label lblLabel = new Label (composite_1, SWT.NONE);
    lblLabel.setLayoutData (new GridData (SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
    lblLabel.setText ("Label2");
    text_1 = new Text (composite_1, SWT.BORDER);
    text_1.setSize (new Point (12, 8));
    GridData gd_text_1 = new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1);
    gd_text_1.widthHint = 60;
    text_1.setLayoutData (gd_text_1);
    Label lblLabel_1 = new Label (composite_1, SWT.NONE);
    lblLabel_1.setText (" Label3");
    new Label (composite_1, SWT.NONE);
    new Label (composite_1, SWT.NONE);
    new Label (composite_1, SWT.NONE);
    new Label (composite_1, SWT.NONE);
    Button btnButton_1 = new Button (composite, SWT.RADIO);
    btnButton_1.setText (" Button2");
    Composite composite_2 = new Composite (composite, SWT.NONE);
    composite_2.setLayout (new GridLayout (5, false));
    GridData gd_composite_2 = new GridData (SWT.LEFT, SWT.CENTER, false, false, 1, 1);
    gd_composite_2.widthHint = 305;
    gd_composite_2.heightHint = 30;
    composite_2.setLayoutData (gd_composite_2);
    Combo combo = new Combo (composite_2, SWT.NONE);
    combo.setSize (new Point (10, 8));
    combo.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1));
    combo.setEnabled (false);
    Combo combo_1 = new Combo (composite_2, SWT.NONE);
    combo_1.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1));
    combo_1.setEnabled (false);
    Label lblLabelxyz = new Label (composite_2, SWT.NONE);
    lblLabelxyz.setLayoutData (new GridData (SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
    lblLabelxyz.setText ("LabelXYZ1");
    text_2 = new Text (composite_2, SWT.BORDER);
    text_2.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 1, 1));
    Label lblLabelxyz_1 = new Label (composite_2, SWT.NONE);
    lblLabelxyz_1.setText ("LabelXYZ2");
    text_2.setEnabled (false);
    Label label = new Label (shell, SWT.NONE);
    label.setBounds (62, 112, 55, 15);
    label.setText ("");
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19704925_19705018_1_11
19704925_19705049_1_14
Title: I am writing a program which detect misspelled words with Array in Java 
----------------------------------------

public static boolean checkWord (String [] dictionary, String userWord) {
    for (int i = 0;
    i < dictionary.length; i ++) {
        if (userWord.equals (dictionary [i])) {
            return true;
        }
    }
    return false;
}
----------------------------------------

public static boolean checkWord (String [] dictionary, String userWord) {
    boolean correctSpelling = false;
    for (int i = 0;
    i < dictionary.length; i ++) {
        if (userWord.equals (dictionary [i])) {
            correctSpelling = true;
            break;
        }
    }
    return correctSpelling;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19705860_19706145_1_17
19705860_19707094_9_63
Title: java drawing a rainbow 
----------------------------------------

public void paintComponent (Graphics page) {
    super.paintComponent (page);
    int x = 0, y = 0, diameter = MAX_WIDTH;
    Color myColors [] = {Color.red, Color.yellow, Color.pink, Color.green, Color.purple, Color.orange, Color.blue};
    for (int count = 0;
    count < NUM_RINGS; count ++) {
        page.setColor (myColors [count % NUM_RINGS]);
        page.fillArc (x, y, diameter, diameter, 0, 180);
        diameter -= (2 * RING_WIDTH);
        x += RING_WIDTH;
        y += RING_WIDTH;
    }
}
----------------------------------------

public void paintComponent (Graphics page) {
    super.paintComponent (page);
    int x = 0, y = 0, diameter = MAX_WIDTH;
    page.setColor (Color.red);
    for (int count = 0;
    count < 2; count ++) {
        if (page.getColor () == Color.yellow) page.setColor (Color.red);
        else page.setColor (Color.yellow);

        page.fillArc (x, y, diameter, diameter, 0, 180);
        diameter -= (2 * RING_WIDTH);
        x += RING_WIDTH;
        y += RING_WIDTH;
    }
    for (int count = 0;
    count < 2; count ++) {
        if (page.getColor () == Color.blue) page.setColor (Color.green);
        else page.setColor (Color.blue);

        page.fillArc (x, y, diameter, diameter, 0, 180);
        diameter -= (2 * RING_WIDTH);
        x += RING_WIDTH;
        y += RING_WIDTH;
    }
    for (int count = 0;
    count < 2; count ++) {
        if (page.getColor () == Color.pink) page.setColor (Color.LIGHT_GRAY);
        else page.setColor (Color.pink);

        page.fillArc (x, y, diameter, diameter, 0, 180);
        diameter -= (2 * RING_WIDTH);
        x += RING_WIDTH;
        y += RING_WIDTH;
    }
    for (int count = 0;
    count < 1; count ++) {
        if (page.getColor () == Color.cyan) page.setColor (Color.LIGHT_GRAY);
        else page.setColor (Color.cyan);

        page.fillArc (x, y, diameter, diameter, 0, 180);
        diameter -= (2 * RING_WIDTH);
        x += RING_WIDTH;
        y += RING_WIDTH;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1971141_16045911_1_38
1971141_32964059_10_23
Title: "Java: ""Add Tab Button"" for a JTabbedPane" 
----------------------------------------

public static void main (String [] args) {
    JFrame parent = new JFrame ();
    final JTabbedPane pane = new JTabbedPane ();
    pane.addTab ("test", null);
    FlowLayout f = new FlowLayout (FlowLayout.CENTER, 5, 0);
    JPanel pnlTab = new JPanel (f);
    pnlTab.setOpaque (false);
    JButton addTab = new JButton ("+");
    addTab.setOpaque (false);
    addTab.setBorder (null);
    addTab.setContentAreaFilled (false);
    addTab.setFocusPainted (false);
    addTab.setFocusable (false);
    pnlTab.add (addTab);
    pane.setTabComponentAt (pane.getTabCount () - 1, pnlTab);
    ActionListener listener = new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent e) {
            String title = "Tab " + String.valueOf (pane.getTabCount () - 1);
            pane.addTab (title, new JLabel (title));
        }}

    ;
    addTab.setFocusable (false);
    addTab.addActionListener (listener);
    pane.setVisible (true);
    parent.add (pane);
    parent.setSize (new Dimension (400, 200));
    parent.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    JFrame parent = new JFrame ();
    final JTabbedPane tabEntity = new JTabbedPane ();
    tabEntity.addTab ("Details", null, new JScrollPane ());
    tabEntity.addTab ("Context", null, new JScrollPane ());
    tabEntity.addTab ("", null, new JScrollPane ());
    addButtonToTab (tabEntity);
    parent.add (tabEntity);
    parent.setSize (new Dimension (400, 200));
    parent.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19712437_22638591_14_39
19712437_22721062_16_101
Title: How to create a method to fill up an excel table 
----------------------------------------

void fillData (JTable table, File file) {
    try {
        WritableWorkbook workbook1 = Workbook.createWorkbook (file);
        WritableSheet sheet1 = workbook1.createSheet ("First Sheet", 0);
        TableModel model = table.getModel ();
        for (int i = 0;
        i < model.getColumnCount (); i ++) {
            Label column = new Label (i, 0, model.getColumnName (i));
            sheet1.addCell (column);
        }
        int j = 0;
        for (int i = 0;
        i < model.getRowCount (); i ++) {
            for (j = 0; j < model.getColumnCount (); j ++) {
                Label row = new Label (j, i + 1, model.getValueAt (i, j).toString ());
                sheet1.addCell (row);
            }
        }
        workbook1.write ();
        workbook1.close ();
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

void fillData (JTable table, File file) {
    try {
        File a = new File ("E:\\result.xls");
        if (! a.exists ()) {
            System.out.println ("The file doesn't exist.");
            try {
                WritableWorkbook workbook1 = Workbook.createWorkbook (file);
                WritableSheet sheet1 = workbook1.createSheet ("First Sheet", 0);
                TableModel model = table.getModel ();
                for (int i = 0;
                i < model.getColumnCount (); i ++) {
                    Label column = new Label (i + 1, 0, model.getColumnName (i));
                    sheet1.addCell (column);
                }
                int j = 0;
                for (int i = 0;
                i < model.getRowCount (); i ++) {
                    for (j = 0; j < model.getColumnCount (); j ++) {
                        Label row = new Label (i + 1, j, model.getValueAt (i, j).toString ());
                        sheet1.addCell (row);
                    }
                }
                workbook1.write ();
                workbook1.close ();
            } catch (Exception ex) {
                ex.printStackTrace ();
            }
        } else {
            Workbook workbook1 = Workbook.getWorkbook (a);
            WritableWorkbook copy = Workbook.createWorkbook (file, workbook1);
            WritableSheet sheet2 = copy.getSheet (0);
            TableModel model = table.getModel ();
            for (int i = 0;
            i < model.getRowCount (); i ++) {
                Label row = new Label (i + 1, 0, "Hello_Column");
                sheet2.addCell (row);
            }
            int j = 0;
            for (int i = 0;
            i < model.getRowCount (); i ++) {
                for (j = 1; j < model.getColumnCount (); j ++) {
                    Label row = new Label (i + 1, j + x + 1, model.getValueAt (i, j).toString ());
                    sheet2.addCell (row);
                }
            }
            copy.write ();
            copy.close ();
        }
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19712437_22638591_57_68
19712437_22721062_120_138
Title: How to create a method to fill up an excel table 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    try {
        dexceleporte exp = new dexceleporte ();
        exp.fillData (table, new File ("E:\\result.xls"));
        JOptionPane.showMessageDialog (null, "Data saved at " + "': \\ result.xls' successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    try {
        ExcelExporter_UpdatesGood exp = new ExcelExporter_UpdatesGood ();
        File a = new File ("E:\\result.xls");
        x = x + 1;
        exp.fillData (table, a);
        JOptionPane.showMessageDialog (null, "Data saved at " + "'E: \\ result.xls' successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19719218_19719399_1_11
19719218_19720070_1_24
Title: "Exception ""String must not end with a space"" in Java" 
----------------------------------------

public int wordCount (final String sentence) {
    int wordCount = 0;
    String trimmedSentence = sentence.trim ();
    String [] words = trimmedSentence.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        if (words [i] != null && ! words [i].equals ("")) {
            wordCount ++;
        }
    }
    return wordCount;
}
----------------------------------------

public int wordCount (final String sentence) {
    if (sentence == null) {
        throw new IllegalArgumentException ("Sentence cannot be null.");
    }
    if (sentence.equals ("")) {
        throw new IllegalArgumentException ("Sentence cannot be empty.");
    }
    if (sentence.matches (".* $")) {
        throw new IllegalArgumentException ("Sentence cannot end with a space.");
    }
    if (sentence.matches ("^ .*")) {
        throw new IllegalArgumentException ("Sentence cannot start with a space.");
    }
    int wordCount = 0;
    return wordCount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19721322_19721343_9_19
19721322_19723289_10_20
Title: Java multithreading synchronized method with two threads 
----------------------------------------

public synchronized void testPrint () {
    System.out.println ("I am sleeping..." + Thread.currentThread ().getName ());
    try {
        Thread.sleep (3000);
        System.out.println ("I am done sleeping..." + Thread.currentThread ().getName ());
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void testPrint () {
    synchronized (monitor) {
        System.out.println ("I am sleeping..." + Thread.currentThread ().getName ());
        try {
            Thread.sleep (3000);
            System.out.println ("I am done sleeping..." + Thread.currentThread ().getName ());
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19725182_19725247_3_20
19725182_19725256_3_21
Title: Java - When there is no user input prevent an error message - Homework 
----------------------------------------

public static void main (String [] args) {
    String s = args [0];
    String rev = "";
    if (! args [0].isEmpty () && args.length == 0) {
        System.out.println ("Input a string to be reversed");
    } else {
        for (int i = 0;
        i < s.length (); i ++) {
            rev = s.charAt (i) + rev;
        }
        System.out.println (rev);
    }
}
----------------------------------------

public static void main (String [] args) {
    if (args.length == 0 || args [0].isEmpty ()) {
        System.out.println ("Input a string to be reversed");
        return;
    }
    String s = args [0];
    String rev = "";
    for (int i = 0;
    i < s.length (); i ++) {
        rev = s.charAt (i) + rev;
    }
    System.out.println (rev);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19727896_19727958_5_23
19727896_19728129_2_19
Title: "Why doesn't my ""While Loop"" print the computation of finding the average ""score""?" 
----------------------------------------

public static void main (String [] args) {
    int integer = 0, count = 0;
    double sum = 0.0, average = 0.0;
    Scanner input = new Scanner (System.in);
    System.out.println ("Please enter an integer: ");
    integer = input.nextInt ();
    while (integer != 0) {
        count = count + 1;
        sum = sum + integer;
        System.out.println ("Please enter an integer: ");
        integer = input.nextInt ();
    }
    average = sum / count;
    System.out.println ("Average = " + average);
}
----------------------------------------

public static void main (String [] args) {
    int integer;
    double sum = 0;
    double average = 0;
    Scanner input = new Scanner (System.in);
    int count = 0;
    System.out.println ("Please enter an integer: ");
    while ((integer = input.nextInt ()) != 0) {
        count ++;
        sum += integer;
    }
    average = sum / count;
    System.out.println ("Average = " + average);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19730522_39737060_4_33
19730522_49510032_4_22
Title: Remove repeated characters in a string 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    StringBuffer sf = new StringBuffer ();
    System.out.println ("enter a string");
    sf.append (sc.nextLine ());
    System.out.println ("string=" + sf);
    int i = 0;
    while (i < sf.length ()) {
        int j = 1 + i;
        while (j < sf.length ()) {
            if (sf.charAt (i) == sf.charAt (j)) {
                sf.deleteCharAt (j);
            } else {
                j = j + 1;
            }
        }
        i = i + 1;
    }
    System.out.println ("string=" + sf);
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < input.length (); i ++) {
        char temp = input.charAt (i);
        boolean check = false;
        for (int j = 0;
        j < output.length (); j ++) {
            if (output.charAt (j) == input.charAt (i)) {
                check = true;
            }
        }
        if (! check) {
            output = output + input.charAt (i);
        }
    }
    System.out.println ("  " + output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19730522_39737060_4_33
19730522_50111497_3_15
Title: Remove repeated characters in a string 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    StringBuffer sf = new StringBuffer ();
    System.out.println ("enter a string");
    sf.append (sc.nextLine ());
    System.out.println ("string=" + sf);
    int i = 0;
    while (i < sf.length ()) {
        int j = 1 + i;
        while (j < sf.length ()) {
            if (sf.charAt (i) == sf.charAt (j)) {
                sf.deleteCharAt (j);
            } else {
                j = j + 1;
            }
        }
        i = i + 1;
    }
    System.out.println ("string=" + sf);
}
----------------------------------------

public static void main (String [] args) {
    String rS = "maaaakkee";
    String outCome = rS.charAt (0) + "";
    int count = 0;
    char [] cA = rS.toCharArray ();
    for (int i = 0;
    i + 1 < cA.length; ++ i) {
        if (rS.charAt (i) != rS.charAt (i + 1)) {
            outCome += rS.charAt (i + 1);
        }
    }
    System.out.println (outCome);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19730522_39737060_4_33
19730522_51094671_7_38
Title: Remove repeated characters in a string 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    StringBuffer sf = new StringBuffer ();
    System.out.println ("enter a string");
    sf.append (sc.nextLine ());
    System.out.println ("string=" + sf);
    int i = 0;
    while (i < sf.length ()) {
        int j = 1 + i;
        while (j < sf.length ()) {
            if (sf.charAt (i) == sf.charAt (j)) {
                sf.deleteCharAt (j);
            } else {
                j = j + 1;
            }
        }
        i = i + 1;
    }
    System.out.println ("string=" + sf);
}
----------------------------------------

public static void main (String...args) {
    int i, j = 0, count = 0;
    String str = "noordeen";
    String str2 = "noordeen";
    char [] ch = str.toCharArray ();
    for (i = 0; i <= 5; i ++) {
        count = 0;
        for (j = 0; j < str2.length (); j ++) {
            if (ch [i] == str2.charAt (j)) {
                count ++;
                System.out.println ("at the index " + j + "position  " + ch [i] + "+ count is" + count);
                if (count >= 2) {
                    str = str2;
                    str2 = str.replaceFirst (Character.toString (ch [j]), Character.toString (' '));
                }
                System.out.println ("after replacing    " + str2);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19730522_49510032_4_22
19730522_50111497_3_15
Title: Remove repeated characters in a string 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < input.length (); i ++) {
        char temp = input.charAt (i);
        boolean check = false;
        for (int j = 0;
        j < output.length (); j ++) {
            if (output.charAt (j) == input.charAt (i)) {
                check = true;
            }
        }
        if (! check) {
            output = output + input.charAt (i);
        }
    }
    System.out.println ("  " + output);
}
----------------------------------------

public static void main (String [] args) {
    String rS = "maaaakkee";
    String outCome = rS.charAt (0) + "";
    int count = 0;
    char [] cA = rS.toCharArray ();
    for (int i = 0;
    i + 1 < cA.length; ++ i) {
        if (rS.charAt (i) != rS.charAt (i + 1)) {
            outCome += rS.charAt (i + 1);
        }
    }
    System.out.println (outCome);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19730522_49510032_4_22
19730522_51094671_7_38
Title: Remove repeated characters in a string 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < input.length (); i ++) {
        char temp = input.charAt (i);
        boolean check = false;
        for (int j = 0;
        j < output.length (); j ++) {
            if (output.charAt (j) == input.charAt (i)) {
                check = true;
            }
        }
        if (! check) {
            output = output + input.charAt (i);
        }
    }
    System.out.println ("  " + output);
}
----------------------------------------

public static void main (String...args) {
    int i, j = 0, count = 0;
    String str = "noordeen";
    String str2 = "noordeen";
    char [] ch = str.toCharArray ();
    for (i = 0; i <= 5; i ++) {
        count = 0;
        for (j = 0; j < str2.length (); j ++) {
            if (ch [i] == str2.charAt (j)) {
                count ++;
                System.out.println ("at the index " + j + "position  " + ch [i] + "+ count is" + count);
                if (count >= 2) {
                    str = str2;
                    str2 = str.replaceFirst (Character.toString (ch [j]), Character.toString (' '));
                }
                System.out.println ("after replacing    " + str2);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19730522_50111497_3_15
19730522_51094671_7_38
Title: Remove repeated characters in a string 
----------------------------------------

public static void main (String [] args) {
    String rS = "maaaakkee";
    String outCome = rS.charAt (0) + "";
    int count = 0;
    char [] cA = rS.toCharArray ();
    for (int i = 0;
    i + 1 < cA.length; ++ i) {
        if (rS.charAt (i) != rS.charAt (i + 1)) {
            outCome += rS.charAt (i + 1);
        }
    }
    System.out.println (outCome);
}
----------------------------------------

public static void main (String...args) {
    int i, j = 0, count = 0;
    String str = "noordeen";
    String str2 = "noordeen";
    char [] ch = str.toCharArray ();
    for (i = 0; i <= 5; i ++) {
        count = 0;
        for (j = 0; j < str2.length (); j ++) {
            if (ch [i] == str2.charAt (j)) {
                count ++;
                System.out.println ("at the index " + j + "position  " + ch [i] + "+ count is" + count);
                if (count >= 2) {
                    str = str2;
                    str2 = str.replaceFirst (Character.toString (ch [j]), Character.toString (' '));
                }
                System.out.println ("after replacing    " + str2);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19735292_19735378_1_17
19735292_19735626_1_15
Title: indices of the max values of an array 
----------------------------------------

public static int methodname3 (int d []) {
    int largest = 0;
    int index [];
    int c = 0;
    for (int i = 0;
    i < d.length; i ++) {
        if (d [i] > largest) {
            largest = d [i];
            index [c] = i;
            c ++;
        }
    }
    return index [];
}
----------------------------------------

public List < Integer > methodname3 (int d []) {
    int largest = 0;
    List < Integer > index = new ArrayList < Integer > ();
    for (int i = 0;
    i < d.length; i ++) {
        if (d [i] > largest) {
            largest = d [i];
            index.add (i);
        }
    }
    return index;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19735292_19735378_1_17
19735292_19736714_1_26
Title: indices of the max values of an array 
----------------------------------------

public static int methodname3 (int d []) {
    int largest = 0;
    int index [];
    int c = 0;
    for (int i = 0;
    i < d.length; i ++) {
        if (d [i] > largest) {
            largest = d [i];
            index [c] = i;
            c ++;
        }
    }
    return index [];
}
----------------------------------------

public static int [] methodname3 (int d []) {
    int largest = d [0] - 1;
    int instances = 0;
    int [] indices = null;
    for (int i = 0;
    i < d.length; i ++) {
        if (d [i] > largest) {
            largest = d [i];
            instances = 1;
        } else if (d [i] == largest) {
            instances ++;
        }

    }
    indices = new int [instances];
    for (int i = 0, j = 0;
    i < d.length; i ++) {
        if (d [i] == largest) {
            indices [j] = i;
            j ++;
        }
    }
    return indices;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19735292_19735626_1_15
19735292_19736714_1_26
Title: indices of the max values of an array 
----------------------------------------

public List < Integer > methodname3 (int d []) {
    int largest = 0;
    List < Integer > index = new ArrayList < Integer > ();
    for (int i = 0;
    i < d.length; i ++) {
        if (d [i] > largest) {
            largest = d [i];
            index.add (i);
        }
    }
    return index;
}
----------------------------------------

public static int [] methodname3 (int d []) {
    int largest = d [0] - 1;
    int instances = 0;
    int [] indices = null;
    for (int i = 0;
    i < d.length; i ++) {
        if (d [i] > largest) {
            largest = d [i];
            instances = 1;
        } else if (d [i] == largest) {
            instances ++;
        }

    }
    indices = new int [instances];
    for (int i = 0, j = 0;
    i < d.length; i ++) {
        if (d [i] == largest) {
            indices [j] = i;
            j ++;
        }
    }
    return indices;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19738402_19739656_26_89
19738402_19740937_3_78
Title: How do I get a JPanel with an empty JLabel to take up space in a GridBagLayout 
----------------------------------------

public GridBagLayoutDemo () throws HeadlessException {
    setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    JPanel panel = new JPanel (new java.awt.GridBagLayout ());
    panel.setBorder (new EmptyBorder (10, 10, 10, 10));
    GridBagConstraints labCnst = new GridBagConstraints ();
    Dimension preferredSize = new Dimension (140, 20);
    labCnst.insets = new Insets (3, 3, 3, 3);
    JLabel title = new JLabel ("My Title");
    JLabel title2 = new JLabel ("My Title");
    JLabel title3 = new JLabel ("My Title");
    JLabel selectionLabel1 = new JLabel ("");
    selectionLabel1.setBorder (new LineBorder (Color.BLACK));
    JLabel selectionLabel2 = new JLabel ("");
    selectionLabel2.setBorder (new LineBorder (Color.BLACK));
    JLabel selectionLabel3 = new JLabel ("");
    selectionLabel3.setBorder (new LineBorder (Color.BLACK));
    selectionLabel1.setPreferredSize (preferredSize);
    selectionLabel2.setPreferredSize (preferredSize);
    selectionLabel3.setPreferredSize (preferredSize);
    JButton browse1 = new JButton ("Browse");
    JButton browse2 = new JButton ("Browse");
    JButton browse3 = new JButton ("Browse");
    labCnst.gridx = 0;
    labCnst.gridy = 0;
    panel.add (title, labCnst);
    labCnst.gridy = 1;
    panel.add (title2, labCnst);
    labCnst.gridy = 2;
    panel.add (title3, labCnst);
    labCnst.gridx = 1;
    labCnst.gridy = 0;
    panel.add (selectionLabel1, labCnst);
    labCnst.gridy = 1;
    panel.add (selectionLabel2, labCnst);
    labCnst.gridy = 2;
    panel.add (selectionLabel3, labCnst);
    labCnst.gridx = 3;
    labCnst.gridy = 0;
    panel.add (browse1, labCnst);
    labCnst.gridy = 1;
    panel.add (browse2, labCnst);
    labCnst.gridy = 2;
    panel.add (browse3, labCnst);
    add (panel);
    pack ();
}
----------------------------------------

public GridBagLayoutDemo () throws HeadlessException {
    setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    this.setLayout (new BorderLayout ());
    JPanel panel = new JPanel (new java.awt.GridBagLayout ());
    panel.setBorder (new EmptyBorder (10, 10, 10, 10));
    GridBagConstraints labCnst = new GridBagConstraints ();
    Dimension preferredSize = new Dimension (140, 1);
    labCnst.insets = new Insets (3, 3, 3, 3);
    JLabel title = new JLabel ("My Title");
    JLabel title2 = new JLabel ("My Title");
    JLabel title3 = new JLabel ("My Title");
    final JLabel selectionLabel1 = new JLabel (" ");
    selectionLabel1.setBorder (new LineBorder (Color.BLACK));
    final JLabel selectionLabel2 = new JLabel (" ");
    selectionLabel2.setBorder (new LineBorder (Color.BLACK));
    final JLabel selectionLabel3 = new JLabel (" ");
    selectionLabel3.setBorder (new LineBorder (Color.BLACK));
    setPreferredWidth (selectionLabel1, 120);
    setPreferredWidth (selectionLabel2, 120);
    setPreferredWidth (selectionLabel3, 120);
    JButton browse1 = new JButton (new AbstractAction ("Browse 1") {
        public void actionPerformed (ActionEvent arg0) {
            selectionLabel1.setText ("C:\\Documents and Settings\\jsmith\\My Documents\\Studio 2014\\Projects\\1");
        }}

    );
    JButton browse2 = new JButton (new AbstractAction ("Browse 2") {
        public void actionPerformed (ActionEvent arg0) {
            selectionLabel2.setText ("C:\\Documents and Settings\\jsmith\\My Documents\\Studio 2014\\Projects\\2");
        }}

    );
    JButton browse3 = new JButton (new AbstractAction ("Browse 3") {
        public void actionPerformed (ActionEvent arg0) {
            selectionLabel3.setText ("C:\\Documents and Settings\\jsmith\\My Documents\\Studio 2014\\Projects\\3");
        }}

    );
    labCnst.gridx = 0;
    labCnst.gridy = 0;
    panel.add (title, labCnst);
    labCnst.gridy = 1;
    panel.add (title2, labCnst);
    labCnst.gridy = 2;
    panel.add (title3, labCnst);
    labCnst.weightx = 1;
    labCnst.fill = GridBagConstraints.HORIZONTAL;
    labCnst.gridx = 1;
    labCnst.gridy = 0;
    panel.add (selectionLabel1, labCnst);
    labCnst.gridy = 1;
    panel.add (selectionLabel2, labCnst);
    labCnst.gridy = 2;
    panel.add (selectionLabel3, labCnst);
    labCnst.weightx = 0;
    labCnst.gridx = 3;
    labCnst.gridy = 0;
    panel.add (browse1, labCnst);
    labCnst.gridy = 1;
    panel.add (browse2, labCnst);
    labCnst.gridy = 2;
    panel.add (browse3, labCnst);
    add (panel, BorderLayout.CENTER);
    pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19738402_19739656_92_100
19738402_19740937_86_96
Title: How do I get a JPanel with an empty JLabel to take up space in a GridBagLayout 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new GridBagLayoutDemo ().setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            GridBagLayoutDemo demo = new GridBagLayoutDemo ();
            demo.setLocationRelativeTo (null);
            demo.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19745211_19745550_1_34
19745211_19745550_36_46
Title: How to check String using stack 
----------------------------------------

public boolean stringChecker (String input) {
    boolean result = true;
    char [] arr = input.toCharArray ();
    Stack < Character > stack = new Stack < > ();
    try {
        for (int i = 0;
        result && i < arr.length; i ++) {
            if (arr [i] == '(' || arr [i] == '[' || arr [i] == '<') {
                stack.push (arr [i]);
            } else if (arr [i] == ')') {
                Character c = stack.pop ();
                result = c.equals ('(');
            } else if (arr [i] == ']') {
                Character c = stack.pop ();
                result = c.equals ('[');
            } else if (arr [i] == '>') {
                Character c = stack.pop ();
                result = c.equals ('<');
            } else {
                result = false;
            }

        }
        result = result && stack.isEmpty ();
    } catch (EmptyStackException e) {
        result = false;
    }
    return result;
}
----------------------------------------

@Test
public void stringChecker () {
    Assert.assertTrue (stringChecker ("[]"));
    Assert.assertTrue (stringChecker ("[(<>)]"));
    Assert.assertFalse (stringChecker ("([<>)]"));
    Assert.assertFalse (stringChecker ("><![CDATA["));
    Assert.assertFalse (stringChecker ("<[]e>"));
    Assert.assertFalse (stringChecker ("("));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749632_19749776_1_14
19749632_19750257_36_45
Title: Linked List Inserting in sorted format 
----------------------------------------

public static Node insert (Node head, int value) {
    Node T;
    if (head == null || head.data >= value) {
        T = new Node (value, head);
        return T;
    } else {
        head.next = insert (head.next, value);
        return head;
    }
}
----------------------------------------

public static Node insert (Node head, int value) {
    Node T;
    if (head == null || head.data <= value) {
        T = new Node (value, head);
        return T;
    } else {
        head.next = insert (head.next, value);
        return head;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749819_28_38
19749789_19749842_24_31
Title: Reverse each word in a sentence 
----------------------------------------

private static String reverseWord (String sentence) {
    Stack < Character > rev = new Stack ();
    for (int ii = 0;
    ii < sentence.length (); ii ++) {
        rev.push (sentence.charAt (ii));
    }
    String out = "";
    while (rev.size () != 0) {
        out += rev.pop ();
    }
    return out;
}
----------------------------------------

private static String reverseWord (String word) {
    String result = "";
    char [] array = word.toCharArray ();
    for (int i = array.length - 1;
    i >= 0; i --) {
        result += array [i];
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749819_28_38
19749789_19749864_30_44
Title: Reverse each word in a sentence 
----------------------------------------

private static String reverseWord (String sentence) {
    Stack < Character > rev = new Stack ();
    for (int ii = 0;
    ii < sentence.length (); ii ++) {
        rev.push (sentence.charAt (ii));
    }
    String out = "";
    while (rev.size () != 0) {
        out += rev.pop ();
    }
    return out;
}
----------------------------------------

private static String reverseWord (String sentence) {
    Deque < Character > rev = new ArrayDeque < Character > ();
    for (int ii = 0;
    ii < sentence.length (); ii ++) {
        rev.push (sentence.charAt (ii));
    }
    String out = "";
    while (rev.size () != 0) {
        out += rev.pop ();
    }
    return out;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749819_5_26
19749789_19749834_1_12
Title: Reverse each word in a sentence 
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    boolean containsPeriod = false;
    if (".".equals (sentence.substring (sentence.length () - 1, sentence.length ()))) {
        sentence = sentence.substring (0, sentence.length () - 1);
        containsPeriod = true;
    }
    String [] words = sentence.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        String word = words [i];
        System.out.print (reverseWord (word));
        if (i != words.length - 1) System.out.print (" ");

    }
    if (containsPeriod) System.out.print (".");

    read.close ();
}
----------------------------------------

public static void main (String args []) {
    String input = "The fox jumped over the fence";
    StringBuilder sbReverseSentance = new StringBuilder ();
    String words [] = input.split (" ");
    for (String word : words) {
        for (int i = word.length () - 1;
        i >= 0; i --) {
            sbReverseSentance.append (word.charAt (i));
        }
        sbReverseSentance.append (" ");
    }
    System.out.println (sbReverseSentance.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749819_5_26
19749789_19749842_5_22
Title: Reverse each word in a sentence 
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    boolean containsPeriod = false;
    if (".".equals (sentence.substring (sentence.length () - 1, sentence.length ()))) {
        sentence = sentence.substring (0, sentence.length () - 1);
        containsPeriod = true;
    }
    String [] words = sentence.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        String word = words [i];
        System.out.print (reverseWord (word));
        if (i != words.length - 1) System.out.print (" ");

    }
    if (containsPeriod) System.out.print (".");

    read.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    String [] words = sentence.split (" ");
    String [] reversed_words = new String [words.length];
    for (int i = 0;
    i < words.length; i ++) {
        reversed_words [i] = reverseWord (words [i]);
    }
    for (int i = 0;
    i < reversed_words.length; i ++) System.out.println (reversed_words [i]);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749819_5_26
19749789_19749864_6_28
Title: Reverse each word in a sentence 
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    boolean containsPeriod = false;
    if (".".equals (sentence.substring (sentence.length () - 1, sentence.length ()))) {
        sentence = sentence.substring (0, sentence.length () - 1);
        containsPeriod = true;
    }
    String [] words = sentence.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        String word = words [i];
        System.out.print (reverseWord (word));
        if (i != words.length - 1) System.out.print (" ");

    }
    if (containsPeriod) System.out.print (".");

    read.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    String [] words = sentence.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        String word = words [i];
        System.out.print (reverseWord (word));
        System.out.print (" ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749834_1_12
19749789_19749842_5_22
Title: Reverse each word in a sentence 
----------------------------------------

public static void main (String args []) {
    String input = "The fox jumped over the fence";
    StringBuilder sbReverseSentance = new StringBuilder ();
    String words [] = input.split (" ");
    for (String word : words) {
        for (int i = word.length () - 1;
        i >= 0; i --) {
            sbReverseSentance.append (word.charAt (i));
        }
        sbReverseSentance.append (" ");
    }
    System.out.println (sbReverseSentance.toString ());
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    String [] words = sentence.split (" ");
    String [] reversed_words = new String [words.length];
    for (int i = 0;
    i < words.length; i ++) {
        reversed_words [i] = reverseWord (words [i]);
    }
    for (int i = 0;
    i < reversed_words.length; i ++) System.out.println (reversed_words [i]);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749834_1_12
19749789_19749864_6_28
Title: Reverse each word in a sentence 
----------------------------------------

public static void main (String args []) {
    String input = "The fox jumped over the fence";
    StringBuilder sbReverseSentance = new StringBuilder ();
    String words [] = input.split (" ");
    for (String word : words) {
        for (int i = word.length () - 1;
        i >= 0; i --) {
            sbReverseSentance.append (word.charAt (i));
        }
        sbReverseSentance.append (" ");
    }
    System.out.println (sbReverseSentance.toString ());
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    String [] words = sentence.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        String word = words [i];
        System.out.print (reverseWord (word));
        System.out.print (" ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749842_24_31
19749789_19749864_30_44
Title: Reverse each word in a sentence 
----------------------------------------

private static String reverseWord (String word) {
    String result = "";
    char [] array = word.toCharArray ();
    for (int i = array.length - 1;
    i >= 0; i --) {
        result += array [i];
    }
    return result;
}
----------------------------------------

private static String reverseWord (String sentence) {
    Deque < Character > rev = new ArrayDeque < Character > ();
    for (int ii = 0;
    ii < sentence.length (); ii ++) {
        rev.push (sentence.charAt (ii));
    }
    String out = "";
    while (rev.size () != 0) {
        out += rev.pop ();
    }
    return out;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749789_19749842_5_22
19749789_19749864_6_28
Title: Reverse each word in a sentence 
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    String [] words = sentence.split (" ");
    String [] reversed_words = new String [words.length];
    for (int i = 0;
    i < words.length; i ++) {
        reversed_words [i] = reverseWord (words [i]);
    }
    for (int i = 0;
    i < reversed_words.length; i ++) System.out.println (reversed_words [i]);

}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    System.out.print ("Enter a sentence: ");
    String sentence = read.nextLine ();
    String [] words = sentence.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        String word = words [i];
        System.out.print (reverseWord (word));
        System.out.print (" ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19749956_19750010_1_14
19749956_19750097_1_11
Title: Why this code never deadlocks when I run it? 
----------------------------------------

public static void transfer (DeadLock from, DeadLock to, double d) {
    synchronized (from) {
        try {
            System.out.println (Thread.currentThread ().getName () + " acquires lock " + from);
            Thread.sleep (5000);
            synchronized (to) {
                System.out.println (Thread.currentThread ().getName () + " acquires lock " + to);
                from.withdraw (d);
                to.deposit (d);
                System.out.println ("Done");
            }
        } catch (Exception e) {
        }
    }
}
----------------------------------------

public static void transfer (Deadlock from, Deadlock to, double d) throws InterruptedException {
    synchronized (from) {
        Thread.sleep (5000);
        synchronized (to) {
            from.withdraw (d);
            System.out.println (Thread.currentThread ().getName ());
            to.deposit (d);
            System.out.println ("Done");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19760325_19760348_1_11
19760325_19760368_1_12
Title: missing return statement Fibonnacci Java 
----------------------------------------

public static int getFibonacci (int n) {
    FibonacciGenerator generator = new FibonacciGenerator ();
    int result = 0;
    for (int i = 1;
    i <= n; i ++) {
        generator.next ();
        return result;
    }
}
----------------------------------------

public static int getFibonacci (int n) {
    FibonacciGenerator generator = new FibonacciGenerator ();
    int result = 0;
    for (int i = 1;
    i <= n; i ++) {
        generator.next ();
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19762531_19762669_1_28
19762531_19762717_7_67
Title: decide if two names are brothers or not 
----------------------------------------

public static void main (String [] args) {
    String n1 = "Ali Ibrahim Mohammed";
    String n2 = "Ahmad Ibrahim Mohammed";
    String name1FirstName = n1.split (" ") [0];
    String name2FirstName = n2.split (" ") [0];
    String name1LastName = n1.split (" ") [2];
    String name2LastName = n2.split (" ") [2];
    String name1MiddleName = n1.split (" ") [1];
    String name2MiddleName = n2.split (" ") [1];
    if (name1LastName.equals (name2LastName)) {
        if (name1MiddleName.equals (name2MiddleName)) {
            System.out.println (name1FirstName + "  and " + name2FirstName + " are brothers");
        } else {
            System.out.println (name1FirstName + "  and " + name2FirstName + " are not brothers");
        }
    } else {
        System.out.println (name1FirstName + "  and " + name2FirstName + " are not brothers");
    }
}
----------------------------------------

public static void main (String args []) {
    String firstname1 = "";
    String firstname2 = "";
    String fname = "";
    String lname = "";
    String lname1 = "";
    String lname2 = "";
    String string, string2;
    int space;
    int i = 0;
    int j = 0;
    System.out.println ("Enter 2 names :");
    while (i < 2) {
        if (i == 0) System.out.println ("- First name :");
        else System.out.println ("- Second name :");

        while (j == i) {
            string = scan.nextLine ();
            space = string.indexOf (" ");
            fname = string.substring (0, space);
            string2 = string.toLowerCase ();
            lname = string.substring (space);
            string2 = lname.toLowerCase ();
            j ++;
        }
        if (i == 0) {
            firstname1 = fname;
            lname1 = lname;
        } else if (i == 1) {
            firstname2 = fname;
            lname2 = lname;
        }

        i ++;
    }
    if (lname1.equals (lname2)) System.out.println (firstname1 + " and " + firstname2 + " are brothers ");
    else System.out.println (firstname1 + " and " + firstname2 + " are NOT brothers ");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19766_24777687_33_50
19766_27215934_3_16
Title: How do I make a list with checkboxes in Java Swing? 
----------------------------------------

public Component getListCellRendererComponent (JList < ? extends JCheckBox > list, JCheckBox value, int index, boolean isSelected, boolean cellHasFocus) {
    JCheckBox checkbox = value;
    checkbox.setBackground (isSelected ? getSelectionBackground () : getBackground ());
    checkbox.setForeground (isSelected ? getSelectionForeground () : getForeground ());
    checkbox.setEnabled (isEnabled ());
    checkbox.setFont (getFont ());
    checkbox.setFocusPainted (false);
    checkbox.setBorderPainted (true);
    checkbox.setBorder (isSelected ? UIManager.getBorder ("List.focusCellHighlightBorder") : noFocusBorder);
    return checkbox;
}
----------------------------------------

public Component getListCellRendererComponent (JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
    setComponentOrientation (list.getComponentOrientation ());
    setFont (list.getFont ());
    setBackground (list.getBackground ());
    setForeground (list.getForeground ());
    setSelected (isSelected);
    setEnabled (list.isEnabled ());
    setText (value == null ? "" : value.toString ());
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19766_27215934_3_16
19766_32712019_36_53
Title: How do I make a list with checkboxes in Java Swing? 
----------------------------------------

public Component getListCellRendererComponent (JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
    setComponentOrientation (list.getComponentOrientation ());
    setFont (list.getFont ());
    setBackground (list.getBackground ());
    setForeground (list.getForeground ());
    setSelected (isSelected);
    setEnabled (list.isEnabled ());
    setText (value == null ? "" : value.toString ());
    return this;
}
----------------------------------------

public Component getListCellRendererComponent (JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
    JCheckBox checkbox = (JCheckBox) value;
    checkbox.setBackground (isSelected ? getSelectionBackground () : getBackground ());
    checkbox.setForeground (isSelected ? getSelectionForeground () : getForeground ());
    checkbox.setEnabled (isEnabled ());
    checkbox.setFont (getFont ());
    checkbox.setFocusPainted (false);
    checkbox.setBorderPainted (true);
    checkbox.setBorder (isSelected ? UIManager.getBorder ("List.focusCellHighlightBorder") : noFocusBorder);
    return checkbox;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19780442_19780776_19_33
19780442_19780776_54_65
Title: Suggestions on my implementation of Producer Consumer 
----------------------------------------

public void run () {
    try {
        while (! Thread.isInterrupted ()) {
            SomeMessage message = produceAMessage ();
            synchronized (queue) {
                queue.add (message);
                queue.notifyAll ();
            }
        }
    } catch (InterruptedException ex) {
        System.out.println ("Producer shutting down per request.");
    } finally {
        thread = null;
    }
}
----------------------------------------

public void run () {
    try {
        while (! thread.isInterrupted ()) {
            SomeMessage message = take ();
            doSomethingWithMessage (message);
        }
    } catch (InterruptedException ex) {
        System.out.println ("Stop processing - consumer per request.");
    } finally {
        thread = null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19780442_19780776_19_33
19780442_19781618_60_71
Title: Suggestions on my implementation of Producer Consumer 
----------------------------------------

public void run () {
    try {
        while (! Thread.isInterrupted ()) {
            SomeMessage message = produceAMessage ();
            synchronized (queue) {
                queue.add (message);
                queue.notifyAll ();
            }
        }
    } catch (InterruptedException ex) {
        System.out.println ("Producer shutting down per request.");
    } finally {
        thread = null;
    }
}
----------------------------------------

public void run () {
    for (Integer i = 0;
    i < size; i ++) {
        syncQueue.put (i);
        System.out.println ("Produced:" + i);
        try {
            sleep ((int) Math.random () * 100);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19780442_19780776_19_33
19780442_19781618_86_95
Title: Suggestions on my implementation of Producer Consumer 
----------------------------------------

public void run () {
    try {
        while (! Thread.isInterrupted ()) {
            SomeMessage message = produceAMessage ();
            synchronized (queue) {
                queue.add (message);
                queue.notifyAll ();
            }
        }
    } catch (InterruptedException ex) {
        System.out.println ("Producer shutting down per request.");
    } finally {
        thread = null;
    }
}
----------------------------------------

public void run () {
    for (Integer i = 0;
    i < size; i ++) {
        try {
            sleep ((int) Math.random () * 100);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
        System.out.println ("Consumed:" + syncQueue.get ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19780442_19780776_54_65
19780442_19781618_60_71
Title: Suggestions on my implementation of Producer Consumer 
----------------------------------------

public void run () {
    try {
        while (! thread.isInterrupted ()) {
            SomeMessage message = take ();
            doSomethingWithMessage (message);
        }
    } catch (InterruptedException ex) {
        System.out.println ("Stop processing - consumer per request.");
    } finally {
        thread = null;
    }
}
----------------------------------------

public void run () {
    for (Integer i = 0;
    i < size; i ++) {
        syncQueue.put (i);
        System.out.println ("Produced:" + i);
        try {
            sleep ((int) Math.random () * 100);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

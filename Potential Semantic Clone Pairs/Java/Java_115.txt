$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48109248_48109300_1_12
48109248_48144449_1_13
Title: @RequestBody in Spring Restful Web API not accepting request from client where request is JSON 
----------------------------------------

@RequestMapping (value = "addFlightDetails", method = RequestMethod.POST)
public@ResponseBody
void addFlightDetails (@RequestBody
String data, HttpServletRequest request, HttpServletResponse response, HttpSession session, OutputStream outp) {
    DBObject dBObject = new BasicDBObject ();
    String message = "";
    JSONParser parser = new JSONParser ();
    Object obj = parser.parse (new StringReader (data));
    JSONObject jsonObject = (JSONObject) obj;
    System.out.println (jsonObject);
}
----------------------------------------

@RequestMapping (value = "addFlightDetails", method = RequestMethod.POST)
public void addOfferTest (HttpServletRequest request, HttpServletResponse response,@RequestBody
String json) {
    JSONObject mainObject = new JSONObject (json);
    JSONObject flightdetails = mainObject.getJSONObject ("flight_details");
    String flight_from = flightdetails.getString ("flight_from");
    String flight_from = flightdetails.getString ("flight_from");
    System.out.println (flight_from);
    System.out.println (flight_to);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48111270_48121956_1_21
48111270_48190220_1_16
Title: "How can I simplify this set of if statements? (Or what's making it feel so awkward?)" 
----------------------------------------

private List < Foo > parseResponse (Response < ByteString > response) {
    if (response.status ().code () == Status.NOT_FOUND.code () && ! response.payload ().isPresent ()) return Lists.newArrayList ();

    if (response.status ().code () != Status.OK.code ()) {
        LOG.error ("Cannot fetch recently played, got status code {}", response.status ());
        return Lists.newArrayList ();
    }
    if (! response.payload ().isPresent ()) {
        LOG.error ("Cannot fetch recently played, got status code {}, but payload is not present!", response.status ());
        return Lists.newArrayList ();
    }
    return someOtherList;
}
----------------------------------------

private List < Foo > parseResponse (Response < ByteString > response) {
    if (! response.payload.isPresent ()) {
        LOG.error ("Response payload not present");
        return Lists.newArrayList ();
    }
    Status status = response.status ();
    if (status != Status.OK || status != Status.NOT_FOUND) {
        LOG.error ("Cannot fetch recently played, got status code {}", status);
        return Lists.newArrayList ();
    }
    return someOtherList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48112604_48112764_8_96
48112604_48113500_7_55
Title: Java - Building an Array of Objects using Scanner 
----------------------------------------

public static void main (String [] args) {
    class Animal {
        private String species;
        private String animalname;
        private String breed;
        private double weight;
        private String gender;
        private int age;
        private String location;
        private String vet;
        private double vaccine;
        private double medicine;
        private double food;
        private double muandv;
        void GetAnimalData () {
            Scanner sc = new Scanner (System.in);
            System.out.print ("\n\tEnter Animal Species : ");
            species = (sc.nextLine ());
            System.out.print ("\n\tEnter Animal Name : ");
            animalname = sc.nextLine ();
            System.out.print ("\n\tEnter Animal Breed : ");
            breed = (sc.nextLine ());
            System.out.print ("\n\tEnter Animal Weight : ");
            weight = (sc.nextDouble ());
            System.out.print ("\n\tEnter Animal Gender : ");
            gender = (sc.nextLine ());
            System.out.print ("\n\tEnter Animal Age : ");
            age = Integer.parseInt (sc.nextLine ());
            System.out.print ("\n\tEnter Animal Location : ");
            location = (sc.nextLine ());
            System.out.print ("\n\tEnter Vet Name: ");
            vet = (sc.nextLine ());
            System.out.print ("\n\tEnter Vaccine Cost : ");
            vaccine = (sc.nextDouble ());
            System.out.print ("\n\tEnter Medicine Cost : ");
            medicine = sc.nextDouble ();
            System.out.print ("\n\tEnter Food Cost : ");
            food = (sc.nextDouble ());
            System.out.print ("\n\tEnter Maintenance, Utility and Vet Cost : ");
            muandv = (sc.nextDouble ());
        } void PrintAnimalData () {
            System.out.print ("\n\t" + species + "\t" + animalname + "\t" + breed + "\t" + weight + "\t" + gender + "\t" + age + "\t" + location + "\t" + vet + "\t" + vaccine + "\t" + medicine + "\t" + food + "\t" + muandv);
        } public void main (String args []) {
        }}

    Animal [] AnimalList = new Animal [100];
    int i = 0;
    for (i = 0; i < AnimalList.length; i ++) AnimalList [i] = new Animal ();

    for (i = 0; i < AnimalList.length; i ++) {
        System.out.print ("\nEnter details of " + (i + 1) + " Animal\n");
        AnimalList [i].GetAnimalData ();
    }
    System.out.print ("\nAnimal Details\n");
    for (i = 0; i < AnimalList.length; i ++) AnimalList [i].PrintAnimalData ();

}
----------------------------------------

public static void main (String [] args) {
    final int COUNT = 2;
    Scanner sc = new Scanner (System.in);
    AnimalParametrizedConstructor [] paramAnimals = new AnimalParametrizedConstructor [COUNT];
    for (int i = 0;
    i < COUNT; i ++) {
        System.out.println ("What a name?");
        String name = sc.nextLine ();
        System.out.println ("What a description?");
        String desc = sc.nextLine ();
        AnimalParametrizedConstructor newAnimal = new AnimalParametrizedConstructor (name, desc);
        paramAnimals [i] = newAnimal;
    }
    for (int i = 0;
    i < paramAnimals.length; i ++) {
        System.out.println ("animal no. " + i + ": " + paramAnimals [i].toString ());
    }
    AnimalGettersSetters [] animalsGS = new AnimalGettersSetters [COUNT];
    for (int i = 0;
    i < COUNT; i ++) {
        AnimalGettersSetters newGS = new AnimalGettersSetters ();
        System.out.println ("What a name?");
        newGS.setName (sc.nextLine ());
        System.out.println ("What a description?");
        newGS.setDesc (sc.nextLine ());
        animalsGS [i] = newGS;
    }
    for (int i = 0;
    i < COUNT; i ++) {
        System.out.println ("animal no." + i + ": name: " + animalsGS [i].getName () + ", desc: " + animalsGS [i].getDesc ());
    }
    sc.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48122282_48122379_2_13
48122282_48122408_3_19
Title: Java Breaking for loop when counter reaches certain point 
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i < 1000; i ++) {
        sum = sum + i;
        System.out.println (sum);
        if (sum >= 3000) {
            System.out.println (i);
            break;
        }
    }
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i < 1000; i ++) {
        sum = sum + i;
        if (sum >= 3000) {
            sum = sum - i;
            System.out.println (i - 1);
            break;
        }
    }
    System.out.println (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48122282_48122379_2_13
48122282_48122750_1_13
Title: Java Breaking for loop when counter reaches certain point 
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i < 1000; i ++) {
        sum = sum + i;
        System.out.println (sum);
        if (sum >= 3000) {
            System.out.println (i);
            break;
        }
    }
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i <= 1000 && sum <= 3001; i ++) {
        sum = sum + i;
        if (sum == 3000) {
            System.out.println (i);
        }
    }
    System.out.println (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48122282_48122408_3_19
48122282_48122750_1_13
Title: Java Breaking for loop when counter reaches certain point 
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i < 1000; i ++) {
        sum = sum + i;
        if (sum >= 3000) {
            sum = sum - i;
            System.out.println (i - 1);
            break;
        }
    }
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i <= 1000 && sum <= 3001; i ++) {
        sum = sum + i;
        if (sum == 3000) {
            System.out.println (i);
        }
    }
    System.out.println (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48124998_48125092_7_19
48124998_48126596_11_19
Title: How to write a custom time ProgressBar with preset time? 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.main_activity);
    timer = new Timer ();
    progressBar = new ProgressDialog (this);
    progressBar.setCancelable (true);
    progressBar.setMessage ("Something downloading ...");
    progressBar.setProgressStyle (ProgressDialog.STYLE_HORIZONTAL);
    progressBar.setProgress (0);
    progressBar.setMax (100);
    progressBar.show ();
    timer.schedule (this, 2000);
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_travel_request);
    progress_bar = (ProgressBar) findViewById (R.id.progress_bar);
    progress_count = (TextView) findViewById (R.id.progress_count);
    REQUEST_TIMER = getIntent ().getIntExtra ("timeout", 0);
    progress_bar.setMax (REQUEST_TIMER);
    timer.scheduleAtFixedRate (task, 500, 1000);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48124998_48126596_29_44
48124998_48126596_32_42
Title: How to write a custom time ProgressBar with preset time? 
----------------------------------------

public void run () {
    handler.post (new Runnable () {
        @Override
        public void run () {
            counter ++;
            progress_count.setText (String.format (Locale.getDefault (), "%d", counter));
            progress_bar.setProgress (counter);
            if (counter >= REQUEST_TIMER) {
                TravelRequestActivity.this.finish ();
                Toast.makeText (getApplicationContext (), "STOP", Toast.LENGTH_SHORT).show ();
            }
        }}

    );
}
----------------------------------------

public void run () {
    counter ++;
    progress_count.setText (String.format (Locale.getDefault (), "%d", counter));
    progress_bar.setProgress (counter);
    if (counter >= REQUEST_TIMER) {
        TravelRequestActivity.this.finish ();
        Toast.makeText (getApplicationContext (), "STOP", Toast.LENGTH_SHORT).show ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48135004_48135094_1_16
48135004_48135206_1_13
Title: How to remove duplicate from list 
----------------------------------------

@Override
public boolean equals (Object obj) {
    if (obj instanceof ContactVO) {
        ContactVO temp = (ContactVO) obj;
        if (getContactNumber ().length () >= temp.getContactNumber ().length ()) {
            if (this.getContactNumber ().endsWith (temp.getContactNumber ()) && this.getContactName ().equals (temp.getContactName ())) return true;

        } else {
            if (temp.getContactNumber ().endsWith (this.getContactNumber ()) && this.getContactName ().equals (temp.getContactName ())) return true;

        }
    }
    return false;
}
----------------------------------------

@Override
public boolean equals (Object obj) {
    if (obj instanceof ContactVO) {
        ContactVO temp = (ContactVO) obj;
        System.out.println ("this.getctno" + this.getContactNumber ());
        System.out.println ("temp.getctno" + temp.getContactNumber ());
        if (this.getContactNumber ().equals (temp.getContactNumber ()) || this.getContactNumber ().endsWith (temp.getContactNumber ()) || temp.getContactNumber ().endsWith (this.getContactNumber ())) return true;

    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48170707_48170885_12_22
48170707_48170913_3_15
Title: javafx graphics without a window 
----------------------------------------

public void start (Stage stage) {
    stage.initStyle (StageStyle.TRANSPARENT);
    Text text = new Text ("!");
    text.setFont (new Font (40));
    VBox box = new VBox ();
    box.getChildren ().add (text);
    final Scene scene = new Scene (box, 300, 250);
    scene.setFill (null);
    stage.setScene (scene);
    stage.show ();
}
----------------------------------------

public void start (Stage stage) throws Exception {
    stage.initStyle (StageStyle.TRANSPARENT);
    Circle c = new Circle (30);
    c.setFill (Color.RED);
    VBox box = new VBox ();
    box.getChildren ().add (c);
    final Scene scene = new Scene (box, 300, 250);
    scene.setFill (null);
    stage.setScene (scene);
    stage.setX (20);
    stage.setY (Screen.getPrimary ().getBounds ().getHeight () - 100);
    stage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48179036_48179122_11_25
48179036_48195406_1_21
Title: "Java - How can I make a variable that is assigned a value in on object accessible to all objects?" 
----------------------------------------

CO2FromWaste (int numPeople, boolean paper, boolean plastic, boolean glass, boolean cans) {
    this.ogGrosss = numPeople * 1018;
    if (paper == true) gross -= 184 * numPeople;

    if (plastic == true) gross -= 25.6 * numPeople;

    if (glass == true) gross -= 46.6 * numPeople;

    if (cans == true) gross -= 165.8 * numPeople;

}
----------------------------------------

CO2FromWaste (int numPeople, WasteMaterial material) {
    this.ogGrosss = numPeople * 1018;
    switch (material) {
        case PAPER :
            gross -= 184 * numPeople;
            break;
        case PLASTIC :
            gross -= 25.6 * numPeople;
            break;
        case GLASS :
            gross -= 46.6 * numPeople;
            break;
        case CANS :
            gross -= 165.8 * numPeople;
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48181218_48181278_18_31
48181218_48181882_14_29
Title: Updating main thread from new Runnable class 
----------------------------------------

public void run () {
    for (int i = 0;
    i <= 10; i ++) {
        final int value = i;
        doFakeWork ();
        progress.post (new Runnable () {
            @Override
            public void run () {
                text.setText ("Updating");
                progress.setProgress (value);
            }}

        );
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 10; i ++) {
        try {
            count ++;
            mHandler.post (new Runnable () {
                @Override
                public void run () {
                    mWorkerThreadListener.onUpdate (count);
                }}

            );
            TimeUnit.SECONDS.sleep (3);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_15602079_11_60
4820716_18502918_1_18
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter a string :");
    String s1 = sc.nextLine ();
    String s2 = s1.replace (" ", "");
    char [] ch = s2.toCharArray ();
    int counter = 0;
    for (int i = 0;
    i < ch.length; i ++) {
        int count = 0;
        for (int j = 0;
        j < ch.length; j ++) {
            if (ch [i] == ch [j]) count ++;

        }
        if (count > 1) {
            boolean flag = false;
            for (int k = i - 1;
            k >= 0; k --) {
                if (ch [i] == ch [k]) flag = true;

            }
            if (! flag) counter = counter + 1;

        }
    }
    if (counter > 0) System.out.println ("Number of repeating charcters in the given string is/are " + counter);
    else System.out.println ("Sorry there is/are no repeating charcters in the given string");

}
----------------------------------------

public static void main (String [] args) {
    String s = "sdf sdfsdfsd sdfsdfsd sdfsdfsd sdf sdf sdf ";
    String st [] = s.split (" ");
    System.out.println (st.length);
    Map < String, Integer > mp = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < st.length; i ++) {
        Integer count = mp.get (st [i]);
        if (count == null) {
            count = 0;
        }
        mp.put (st [i], ++ count);
    }
    System.out.println (mp.size ());
    System.out.println (mp.get ("sdfsdfsd"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_15602079_11_60
4820716_29217025_3_25
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter a string :");
    String s1 = sc.nextLine ();
    String s2 = s1.replace (" ", "");
    char [] ch = s2.toCharArray ();
    int counter = 0;
    for (int i = 0;
    i < ch.length; i ++) {
        int count = 0;
        for (int j = 0;
        j < ch.length; j ++) {
            if (ch [i] == ch [j]) count ++;

        }
        if (count > 1) {
            boolean flag = false;
            for (int k = i - 1;
            k >= 0; k --) {
                if (ch [i] == ch [k]) flag = true;

            }
            if (! flag) counter = counter + 1;

        }
    }
    if (counter > 0) System.out.println ("Number of repeating charcters in the given string is/are " + counter);
    else System.out.println ("Sorry there is/are no repeating charcters in the given string");

}
----------------------------------------

public static void main (String args []) {
    String value = "This is testing Program testing Program";
    String item [] = value.split (" ");
    HashMap < String, Integer > map = new HashMap < > ();
    for (String t : item) {
        if (map.containsKey (t)) {
            map.put (t, map.get (t) + 1);
        } else {
            map.put (t, 1);
        }
    }
    Set < String > keys = map.keySet ();
    for (String key : keys) {
        System.out.println (key);
        System.out.println (map.get (key));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_15602079_11_60
4820716_36277662_11_40
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter a string :");
    String s1 = sc.nextLine ();
    String s2 = s1.replace (" ", "");
    char [] ch = s2.toCharArray ();
    int counter = 0;
    for (int i = 0;
    i < ch.length; i ++) {
        int count = 0;
        for (int j = 0;
        j < ch.length; j ++) {
            if (ch [i] == ch [j]) count ++;

        }
        if (count > 1) {
            boolean flag = false;
            for (int k = i - 1;
            k >= 0; k --) {
                if (ch [i] == ch [k]) flag = true;

            }
            if (! flag) counter = counter + 1;

        }
    }
    if (counter > 0) System.out.println ("Number of repeating charcters in the given string is/are " + counter);
    else System.out.println ("Sorry there is/are no repeating charcters in the given string");

}
----------------------------------------

public static void main (String [] args) {
    String para = "this is what it is this is what it can be";
    List < String > paraList = new ArrayList < String > ();
    paraList = Arrays.asList (para.split (" "));
    System.out.println (paraList);
    int size = paraList.size ();
    int i = 0;
    Map < String, Integer > duplicatCountMap = new HashMap < String, Integer > ();
    for (int j = 0;
    size > j; j ++) {
        int count = 0;
        for (i = 0; size > i; i ++) {
            if (paraList.get (j).equals (paraList.get (i))) {
                count ++;
                duplicatCountMap.put (paraList.get (j), count);
            }
        }
    }
    System.out.println (duplicatCountMap);
    List < Integer > myCountList = new ArrayList < > ();
    Set < String > myValueSet = new HashSet < > ();
    for (Map.Entry < String, Integer > entry : duplicatCountMap.entrySet ()) {
        myCountList.add (entry.getValue ());
        myValueSet.add (entry.getKey ());
    }
    System.out.println (myCountList);
    System.out.println (myValueSet);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_15602079_11_60
4820716_41919682_7_41
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter a string :");
    String s1 = sc.nextLine ();
    String s2 = s1.replace (" ", "");
    char [] ch = s2.toCharArray ();
    int counter = 0;
    for (int i = 0;
    i < ch.length; i ++) {
        int count = 0;
        for (int j = 0;
        j < ch.length; j ++) {
            if (ch [i] == ch [j]) count ++;

        }
        if (count > 1) {
            boolean flag = false;
            for (int k = i - 1;
            k >= 0; k --) {
                if (ch [i] == ch [k]) flag = true;

            }
            if (! flag) counter = counter + 1;

        }
    }
    if (counter > 0) System.out.println ("Number of repeating charcters in the given string is/are " + counter);
    else System.out.println ("Sorry there is/are no repeating charcters in the given string");

}
----------------------------------------

public static void main (String [] args) {
    String original = "I am rahul am i sunil so i can say am i";
    String [] originalSplit = original.split (" ");
    int count = 1;
    Map < String, Integer > wordMap = new LinkedHashMap < String, Integer > ();
    for (int i = 0;
    i < originalSplit.length - 1; i ++) {
        for (int j = i + 1;
        j < originalSplit.length; j ++) {
            if (originalSplit [i].equals (originalSplit [j])) {
                count ++;
            }
        }
        if (wordMap.containsKey (originalSplit [i])) {
            count = 1;
        } else {
            wordMap.put (originalSplit [i], count);
            count = 1;
        }
    }
    Set word = wordMap.entrySet ();
    Iterator itr = word.iterator ();
    while (itr.hasNext ()) {
        Map.Entry map = (Map.Entry) itr.next ();
        System.out.println (map.getKey () + " " + map.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_15602079_11_60
4820716_42835753_1_15
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter a string :");
    String s1 = sc.nextLine ();
    String s2 = s1.replace (" ", "");
    char [] ch = s2.toCharArray ();
    int counter = 0;
    for (int i = 0;
    i < ch.length; i ++) {
        int count = 0;
        for (int j = 0;
        j < ch.length; j ++) {
            if (ch [i] == ch [j]) count ++;

        }
        if (count > 1) {
            boolean flag = false;
            for (int k = i - 1;
            k >= 0; k --) {
                if (ch [i] == ch [k]) flag = true;

            }
            if (! flag) counter = counter + 1;

        }
    }
    if (counter > 0) System.out.println ("Number of repeating charcters in the given string is/are " + counter);
    else System.out.println ("Sorry there is/are no repeating charcters in the given string");

}
----------------------------------------

public static void main (String [] args) {
    String string = "elamparuthi, elam, elamparuthi";
    String [] s = string.replace (" ", "").split (",");
    String [] op;
    String ops = "";
    for (int i = 0;
    i <= s.length - 1; i ++) {
        if (! ops.contains (s [i] + "")) {
            if (ops != "") ops += ", ";

            ops += s [i];
        }
    }
    System.out.println (ops);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_15602079_11_60
4820716_4824465_5_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter a string :");
    String s1 = sc.nextLine ();
    String s2 = s1.replace (" ", "");
    char [] ch = s2.toCharArray ();
    int counter = 0;
    for (int i = 0;
    i < ch.length; i ++) {
        int count = 0;
        for (int j = 0;
        j < ch.length; j ++) {
            if (ch [i] == ch [j]) count ++;

        }
        if (count > 1) {
            boolean flag = false;
            for (int k = i - 1;
            k >= 0; k --) {
                if (ch [i] == ch [k]) flag = true;

            }
            if (! flag) counter = counter + 1;

        }
    }
    if (counter > 0) System.out.println ("Number of repeating charcters in the given string is/are " + counter);
    else System.out.println ("Sorry there is/are no repeating charcters in the given string");

}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new LinkedHashMap < String, Integer > ();
    for (String string : "House, House, House, Dog, Dog, Dog, Dog".split (", ")) {
        if (unique.get (string) == null) unique.put (string, 1);
        else unique.put (string, unique.get (string) + 1);

    }
    String uniqueString = join (unique.keySet (), ", ");
    List < Integer > value = new ArrayList < Integer > (unique.values ());
    System.out.println ("Output = " + uniqueString);
    System.out.println ("Values = " + value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_15602079_11_60
4820716_9142492_7_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter a string :");
    String s1 = sc.nextLine ();
    String s2 = s1.replace (" ", "");
    char [] ch = s2.toCharArray ();
    int counter = 0;
    for (int i = 0;
    i < ch.length; i ++) {
        int count = 0;
        for (int j = 0;
        j < ch.length; j ++) {
            if (ch [i] == ch [j]) count ++;

        }
        if (count > 1) {
            boolean flag = false;
            for (int k = i - 1;
            k >= 0; k --) {
                if (ch [i] == ch [k]) flag = true;

            }
            if (! flag) counter = counter + 1;

        }
    }
    if (counter > 0) System.out.println ("Number of repeating charcters in the given string is/are " + counter);
    else System.out.println ("Sorry there is/are no repeating charcters in the given string");

}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new TreeMap < String, Integer > ();
    String string1 = "Ram:Ram: Dog: Dog: Dog: Dog:leela:leela:house:house:shayam";
    String string2 [] = string1.split (":");
    for (int i = 0;
    i < string2.length; i ++) {
        String string = string2 [i];
        unique.put (string, (unique.get (string) == null ? 1 : (unique.get (string) + 1)));
    }
    System.out.println (unique);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_18502918_1_18
4820716_29217025_3_25
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String s = "sdf sdfsdfsd sdfsdfsd sdfsdfsd sdf sdf sdf ";
    String st [] = s.split (" ");
    System.out.println (st.length);
    Map < String, Integer > mp = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < st.length; i ++) {
        Integer count = mp.get (st [i]);
        if (count == null) {
            count = 0;
        }
        mp.put (st [i], ++ count);
    }
    System.out.println (mp.size ());
    System.out.println (mp.get ("sdfsdfsd"));
}
----------------------------------------

public static void main (String args []) {
    String value = "This is testing Program testing Program";
    String item [] = value.split (" ");
    HashMap < String, Integer > map = new HashMap < > ();
    for (String t : item) {
        if (map.containsKey (t)) {
            map.put (t, map.get (t) + 1);
        } else {
            map.put (t, 1);
        }
    }
    Set < String > keys = map.keySet ();
    for (String key : keys) {
        System.out.println (key);
        System.out.println (map.get (key));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_18502918_1_18
4820716_36277662_11_40
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String s = "sdf sdfsdfsd sdfsdfsd sdfsdfsd sdf sdf sdf ";
    String st [] = s.split (" ");
    System.out.println (st.length);
    Map < String, Integer > mp = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < st.length; i ++) {
        Integer count = mp.get (st [i]);
        if (count == null) {
            count = 0;
        }
        mp.put (st [i], ++ count);
    }
    System.out.println (mp.size ());
    System.out.println (mp.get ("sdfsdfsd"));
}
----------------------------------------

public static void main (String [] args) {
    String para = "this is what it is this is what it can be";
    List < String > paraList = new ArrayList < String > ();
    paraList = Arrays.asList (para.split (" "));
    System.out.println (paraList);
    int size = paraList.size ();
    int i = 0;
    Map < String, Integer > duplicatCountMap = new HashMap < String, Integer > ();
    for (int j = 0;
    size > j; j ++) {
        int count = 0;
        for (i = 0; size > i; i ++) {
            if (paraList.get (j).equals (paraList.get (i))) {
                count ++;
                duplicatCountMap.put (paraList.get (j), count);
            }
        }
    }
    System.out.println (duplicatCountMap);
    List < Integer > myCountList = new ArrayList < > ();
    Set < String > myValueSet = new HashSet < > ();
    for (Map.Entry < String, Integer > entry : duplicatCountMap.entrySet ()) {
        myCountList.add (entry.getValue ());
        myValueSet.add (entry.getKey ());
    }
    System.out.println (myCountList);
    System.out.println (myValueSet);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_18502918_1_18
4820716_41919682_7_41
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String s = "sdf sdfsdfsd sdfsdfsd sdfsdfsd sdf sdf sdf ";
    String st [] = s.split (" ");
    System.out.println (st.length);
    Map < String, Integer > mp = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < st.length; i ++) {
        Integer count = mp.get (st [i]);
        if (count == null) {
            count = 0;
        }
        mp.put (st [i], ++ count);
    }
    System.out.println (mp.size ());
    System.out.println (mp.get ("sdfsdfsd"));
}
----------------------------------------

public static void main (String [] args) {
    String original = "I am rahul am i sunil so i can say am i";
    String [] originalSplit = original.split (" ");
    int count = 1;
    Map < String, Integer > wordMap = new LinkedHashMap < String, Integer > ();
    for (int i = 0;
    i < originalSplit.length - 1; i ++) {
        for (int j = i + 1;
        j < originalSplit.length; j ++) {
            if (originalSplit [i].equals (originalSplit [j])) {
                count ++;
            }
        }
        if (wordMap.containsKey (originalSplit [i])) {
            count = 1;
        } else {
            wordMap.put (originalSplit [i], count);
            count = 1;
        }
    }
    Set word = wordMap.entrySet ();
    Iterator itr = word.iterator ();
    while (itr.hasNext ()) {
        Map.Entry map = (Map.Entry) itr.next ();
        System.out.println (map.getKey () + " " + map.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_18502918_1_18
4820716_42835753_1_15
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String s = "sdf sdfsdfsd sdfsdfsd sdfsdfsd sdf sdf sdf ";
    String st [] = s.split (" ");
    System.out.println (st.length);
    Map < String, Integer > mp = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < st.length; i ++) {
        Integer count = mp.get (st [i]);
        if (count == null) {
            count = 0;
        }
        mp.put (st [i], ++ count);
    }
    System.out.println (mp.size ());
    System.out.println (mp.get ("sdfsdfsd"));
}
----------------------------------------

public static void main (String [] args) {
    String string = "elamparuthi, elam, elamparuthi";
    String [] s = string.replace (" ", "").split (",");
    String [] op;
    String ops = "";
    for (int i = 0;
    i <= s.length - 1; i ++) {
        if (! ops.contains (s [i] + "")) {
            if (ops != "") ops += ", ";

            ops += s [i];
        }
    }
    System.out.println (ops);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_18502918_1_18
4820716_4824465_5_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String s = "sdf sdfsdfsd sdfsdfsd sdfsdfsd sdf sdf sdf ";
    String st [] = s.split (" ");
    System.out.println (st.length);
    Map < String, Integer > mp = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < st.length; i ++) {
        Integer count = mp.get (st [i]);
        if (count == null) {
            count = 0;
        }
        mp.put (st [i], ++ count);
    }
    System.out.println (mp.size ());
    System.out.println (mp.get ("sdfsdfsd"));
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new LinkedHashMap < String, Integer > ();
    for (String string : "House, House, House, Dog, Dog, Dog, Dog".split (", ")) {
        if (unique.get (string) == null) unique.put (string, 1);
        else unique.put (string, unique.get (string) + 1);

    }
    String uniqueString = join (unique.keySet (), ", ");
    List < Integer > value = new ArrayList < Integer > (unique.values ());
    System.out.println ("Output = " + uniqueString);
    System.out.println ("Values = " + value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_18502918_1_18
4820716_9142492_7_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String s = "sdf sdfsdfsd sdfsdfsd sdfsdfsd sdf sdf sdf ";
    String st [] = s.split (" ");
    System.out.println (st.length);
    Map < String, Integer > mp = new TreeMap < String, Integer > ();
    for (int i = 0;
    i < st.length; i ++) {
        Integer count = mp.get (st [i]);
        if (count == null) {
            count = 0;
        }
        mp.put (st [i], ++ count);
    }
    System.out.println (mp.size ());
    System.out.println (mp.get ("sdfsdfsd"));
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new TreeMap < String, Integer > ();
    String string1 = "Ram:Ram: Dog: Dog: Dog: Dog:leela:leela:house:house:shayam";
    String string2 [] = string1.split (":");
    for (int i = 0;
    i < string2.length; i ++) {
        String string = string2 [i];
        unique.put (string, (unique.get (string) == null ? 1 : (unique.get (string) + 1)));
    }
    System.out.println (unique);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_29217025_3_25
4820716_36277662_11_40
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String args []) {
    String value = "This is testing Program testing Program";
    String item [] = value.split (" ");
    HashMap < String, Integer > map = new HashMap < > ();
    for (String t : item) {
        if (map.containsKey (t)) {
            map.put (t, map.get (t) + 1);
        } else {
            map.put (t, 1);
        }
    }
    Set < String > keys = map.keySet ();
    for (String key : keys) {
        System.out.println (key);
        System.out.println (map.get (key));
    }
}
----------------------------------------

public static void main (String [] args) {
    String para = "this is what it is this is what it can be";
    List < String > paraList = new ArrayList < String > ();
    paraList = Arrays.asList (para.split (" "));
    System.out.println (paraList);
    int size = paraList.size ();
    int i = 0;
    Map < String, Integer > duplicatCountMap = new HashMap < String, Integer > ();
    for (int j = 0;
    size > j; j ++) {
        int count = 0;
        for (i = 0; size > i; i ++) {
            if (paraList.get (j).equals (paraList.get (i))) {
                count ++;
                duplicatCountMap.put (paraList.get (j), count);
            }
        }
    }
    System.out.println (duplicatCountMap);
    List < Integer > myCountList = new ArrayList < > ();
    Set < String > myValueSet = new HashSet < > ();
    for (Map.Entry < String, Integer > entry : duplicatCountMap.entrySet ()) {
        myCountList.add (entry.getValue ());
        myValueSet.add (entry.getKey ());
    }
    System.out.println (myCountList);
    System.out.println (myValueSet);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_29217025_3_25
4820716_41919682_7_41
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String args []) {
    String value = "This is testing Program testing Program";
    String item [] = value.split (" ");
    HashMap < String, Integer > map = new HashMap < > ();
    for (String t : item) {
        if (map.containsKey (t)) {
            map.put (t, map.get (t) + 1);
        } else {
            map.put (t, 1);
        }
    }
    Set < String > keys = map.keySet ();
    for (String key : keys) {
        System.out.println (key);
        System.out.println (map.get (key));
    }
}
----------------------------------------

public static void main (String [] args) {
    String original = "I am rahul am i sunil so i can say am i";
    String [] originalSplit = original.split (" ");
    int count = 1;
    Map < String, Integer > wordMap = new LinkedHashMap < String, Integer > ();
    for (int i = 0;
    i < originalSplit.length - 1; i ++) {
        for (int j = i + 1;
        j < originalSplit.length; j ++) {
            if (originalSplit [i].equals (originalSplit [j])) {
                count ++;
            }
        }
        if (wordMap.containsKey (originalSplit [i])) {
            count = 1;
        } else {
            wordMap.put (originalSplit [i], count);
            count = 1;
        }
    }
    Set word = wordMap.entrySet ();
    Iterator itr = word.iterator ();
    while (itr.hasNext ()) {
        Map.Entry map = (Map.Entry) itr.next ();
        System.out.println (map.getKey () + " " + map.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_29217025_3_25
4820716_42835753_1_15
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String args []) {
    String value = "This is testing Program testing Program";
    String item [] = value.split (" ");
    HashMap < String, Integer > map = new HashMap < > ();
    for (String t : item) {
        if (map.containsKey (t)) {
            map.put (t, map.get (t) + 1);
        } else {
            map.put (t, 1);
        }
    }
    Set < String > keys = map.keySet ();
    for (String key : keys) {
        System.out.println (key);
        System.out.println (map.get (key));
    }
}
----------------------------------------

public static void main (String [] args) {
    String string = "elamparuthi, elam, elamparuthi";
    String [] s = string.replace (" ", "").split (",");
    String [] op;
    String ops = "";
    for (int i = 0;
    i <= s.length - 1; i ++) {
        if (! ops.contains (s [i] + "")) {
            if (ops != "") ops += ", ";

            ops += s [i];
        }
    }
    System.out.println (ops);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_29217025_3_25
4820716_4824465_5_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String args []) {
    String value = "This is testing Program testing Program";
    String item [] = value.split (" ");
    HashMap < String, Integer > map = new HashMap < > ();
    for (String t : item) {
        if (map.containsKey (t)) {
            map.put (t, map.get (t) + 1);
        } else {
            map.put (t, 1);
        }
    }
    Set < String > keys = map.keySet ();
    for (String key : keys) {
        System.out.println (key);
        System.out.println (map.get (key));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new LinkedHashMap < String, Integer > ();
    for (String string : "House, House, House, Dog, Dog, Dog, Dog".split (", ")) {
        if (unique.get (string) == null) unique.put (string, 1);
        else unique.put (string, unique.get (string) + 1);

    }
    String uniqueString = join (unique.keySet (), ", ");
    List < Integer > value = new ArrayList < Integer > (unique.values ());
    System.out.println ("Output = " + uniqueString);
    System.out.println ("Values = " + value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_29217025_3_25
4820716_9142492_7_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String args []) {
    String value = "This is testing Program testing Program";
    String item [] = value.split (" ");
    HashMap < String, Integer > map = new HashMap < > ();
    for (String t : item) {
        if (map.containsKey (t)) {
            map.put (t, map.get (t) + 1);
        } else {
            map.put (t, 1);
        }
    }
    Set < String > keys = map.keySet ();
    for (String key : keys) {
        System.out.println (key);
        System.out.println (map.get (key));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new TreeMap < String, Integer > ();
    String string1 = "Ram:Ram: Dog: Dog: Dog: Dog:leela:leela:house:house:shayam";
    String string2 [] = string1.split (":");
    for (int i = 0;
    i < string2.length; i ++) {
        String string = string2 [i];
        unique.put (string, (unique.get (string) == null ? 1 : (unique.get (string) + 1)));
    }
    System.out.println (unique);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_36277662_11_40
4820716_41919682_7_41
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String para = "this is what it is this is what it can be";
    List < String > paraList = new ArrayList < String > ();
    paraList = Arrays.asList (para.split (" "));
    System.out.println (paraList);
    int size = paraList.size ();
    int i = 0;
    Map < String, Integer > duplicatCountMap = new HashMap < String, Integer > ();
    for (int j = 0;
    size > j; j ++) {
        int count = 0;
        for (i = 0; size > i; i ++) {
            if (paraList.get (j).equals (paraList.get (i))) {
                count ++;
                duplicatCountMap.put (paraList.get (j), count);
            }
        }
    }
    System.out.println (duplicatCountMap);
    List < Integer > myCountList = new ArrayList < > ();
    Set < String > myValueSet = new HashSet < > ();
    for (Map.Entry < String, Integer > entry : duplicatCountMap.entrySet ()) {
        myCountList.add (entry.getValue ());
        myValueSet.add (entry.getKey ());
    }
    System.out.println (myCountList);
    System.out.println (myValueSet);
}
----------------------------------------

public static void main (String [] args) {
    String original = "I am rahul am i sunil so i can say am i";
    String [] originalSplit = original.split (" ");
    int count = 1;
    Map < String, Integer > wordMap = new LinkedHashMap < String, Integer > ();
    for (int i = 0;
    i < originalSplit.length - 1; i ++) {
        for (int j = i + 1;
        j < originalSplit.length; j ++) {
            if (originalSplit [i].equals (originalSplit [j])) {
                count ++;
            }
        }
        if (wordMap.containsKey (originalSplit [i])) {
            count = 1;
        } else {
            wordMap.put (originalSplit [i], count);
            count = 1;
        }
    }
    Set word = wordMap.entrySet ();
    Iterator itr = word.iterator ();
    while (itr.hasNext ()) {
        Map.Entry map = (Map.Entry) itr.next ();
        System.out.println (map.getKey () + " " + map.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_36277662_11_40
4820716_42835753_1_15
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String para = "this is what it is this is what it can be";
    List < String > paraList = new ArrayList < String > ();
    paraList = Arrays.asList (para.split (" "));
    System.out.println (paraList);
    int size = paraList.size ();
    int i = 0;
    Map < String, Integer > duplicatCountMap = new HashMap < String, Integer > ();
    for (int j = 0;
    size > j; j ++) {
        int count = 0;
        for (i = 0; size > i; i ++) {
            if (paraList.get (j).equals (paraList.get (i))) {
                count ++;
                duplicatCountMap.put (paraList.get (j), count);
            }
        }
    }
    System.out.println (duplicatCountMap);
    List < Integer > myCountList = new ArrayList < > ();
    Set < String > myValueSet = new HashSet < > ();
    for (Map.Entry < String, Integer > entry : duplicatCountMap.entrySet ()) {
        myCountList.add (entry.getValue ());
        myValueSet.add (entry.getKey ());
    }
    System.out.println (myCountList);
    System.out.println (myValueSet);
}
----------------------------------------

public static void main (String [] args) {
    String string = "elamparuthi, elam, elamparuthi";
    String [] s = string.replace (" ", "").split (",");
    String [] op;
    String ops = "";
    for (int i = 0;
    i <= s.length - 1; i ++) {
        if (! ops.contains (s [i] + "")) {
            if (ops != "") ops += ", ";

            ops += s [i];
        }
    }
    System.out.println (ops);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_36277662_11_40
4820716_4824465_5_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String para = "this is what it is this is what it can be";
    List < String > paraList = new ArrayList < String > ();
    paraList = Arrays.asList (para.split (" "));
    System.out.println (paraList);
    int size = paraList.size ();
    int i = 0;
    Map < String, Integer > duplicatCountMap = new HashMap < String, Integer > ();
    for (int j = 0;
    size > j; j ++) {
        int count = 0;
        for (i = 0; size > i; i ++) {
            if (paraList.get (j).equals (paraList.get (i))) {
                count ++;
                duplicatCountMap.put (paraList.get (j), count);
            }
        }
    }
    System.out.println (duplicatCountMap);
    List < Integer > myCountList = new ArrayList < > ();
    Set < String > myValueSet = new HashSet < > ();
    for (Map.Entry < String, Integer > entry : duplicatCountMap.entrySet ()) {
        myCountList.add (entry.getValue ());
        myValueSet.add (entry.getKey ());
    }
    System.out.println (myCountList);
    System.out.println (myValueSet);
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new LinkedHashMap < String, Integer > ();
    for (String string : "House, House, House, Dog, Dog, Dog, Dog".split (", ")) {
        if (unique.get (string) == null) unique.put (string, 1);
        else unique.put (string, unique.get (string) + 1);

    }
    String uniqueString = join (unique.keySet (), ", ");
    List < Integer > value = new ArrayList < Integer > (unique.values ());
    System.out.println ("Output = " + uniqueString);
    System.out.println ("Values = " + value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_36277662_11_40
4820716_9142492_7_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String para = "this is what it is this is what it can be";
    List < String > paraList = new ArrayList < String > ();
    paraList = Arrays.asList (para.split (" "));
    System.out.println (paraList);
    int size = paraList.size ();
    int i = 0;
    Map < String, Integer > duplicatCountMap = new HashMap < String, Integer > ();
    for (int j = 0;
    size > j; j ++) {
        int count = 0;
        for (i = 0; size > i; i ++) {
            if (paraList.get (j).equals (paraList.get (i))) {
                count ++;
                duplicatCountMap.put (paraList.get (j), count);
            }
        }
    }
    System.out.println (duplicatCountMap);
    List < Integer > myCountList = new ArrayList < > ();
    Set < String > myValueSet = new HashSet < > ();
    for (Map.Entry < String, Integer > entry : duplicatCountMap.entrySet ()) {
        myCountList.add (entry.getValue ());
        myValueSet.add (entry.getKey ());
    }
    System.out.println (myCountList);
    System.out.println (myValueSet);
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new TreeMap < String, Integer > ();
    String string1 = "Ram:Ram: Dog: Dog: Dog: Dog:leela:leela:house:house:shayam";
    String string2 [] = string1.split (":");
    for (int i = 0;
    i < string2.length; i ++) {
        String string = string2 [i];
        unique.put (string, (unique.get (string) == null ? 1 : (unique.get (string) + 1)));
    }
    System.out.println (unique);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_41919682_7_41
4820716_42835753_1_15
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String original = "I am rahul am i sunil so i can say am i";
    String [] originalSplit = original.split (" ");
    int count = 1;
    Map < String, Integer > wordMap = new LinkedHashMap < String, Integer > ();
    for (int i = 0;
    i < originalSplit.length - 1; i ++) {
        for (int j = i + 1;
        j < originalSplit.length; j ++) {
            if (originalSplit [i].equals (originalSplit [j])) {
                count ++;
            }
        }
        if (wordMap.containsKey (originalSplit [i])) {
            count = 1;
        } else {
            wordMap.put (originalSplit [i], count);
            count = 1;
        }
    }
    Set word = wordMap.entrySet ();
    Iterator itr = word.iterator ();
    while (itr.hasNext ()) {
        Map.Entry map = (Map.Entry) itr.next ();
        System.out.println (map.getKey () + " " + map.getValue ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String string = "elamparuthi, elam, elamparuthi";
    String [] s = string.replace (" ", "").split (",");
    String [] op;
    String ops = "";
    for (int i = 0;
    i <= s.length - 1; i ++) {
        if (! ops.contains (s [i] + "")) {
            if (ops != "") ops += ", ";

            ops += s [i];
        }
    }
    System.out.println (ops);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_41919682_7_41
4820716_4824465_5_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String original = "I am rahul am i sunil so i can say am i";
    String [] originalSplit = original.split (" ");
    int count = 1;
    Map < String, Integer > wordMap = new LinkedHashMap < String, Integer > ();
    for (int i = 0;
    i < originalSplit.length - 1; i ++) {
        for (int j = i + 1;
        j < originalSplit.length; j ++) {
            if (originalSplit [i].equals (originalSplit [j])) {
                count ++;
            }
        }
        if (wordMap.containsKey (originalSplit [i])) {
            count = 1;
        } else {
            wordMap.put (originalSplit [i], count);
            count = 1;
        }
    }
    Set word = wordMap.entrySet ();
    Iterator itr = word.iterator ();
    while (itr.hasNext ()) {
        Map.Entry map = (Map.Entry) itr.next ();
        System.out.println (map.getKey () + " " + map.getValue ());
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new LinkedHashMap < String, Integer > ();
    for (String string : "House, House, House, Dog, Dog, Dog, Dog".split (", ")) {
        if (unique.get (string) == null) unique.put (string, 1);
        else unique.put (string, unique.get (string) + 1);

    }
    String uniqueString = join (unique.keySet (), ", ");
    List < Integer > value = new ArrayList < Integer > (unique.values ());
    System.out.println ("Output = " + uniqueString);
    System.out.println ("Values = " + value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_41919682_7_41
4820716_9142492_7_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String original = "I am rahul am i sunil so i can say am i";
    String [] originalSplit = original.split (" ");
    int count = 1;
    Map < String, Integer > wordMap = new LinkedHashMap < String, Integer > ();
    for (int i = 0;
    i < originalSplit.length - 1; i ++) {
        for (int j = i + 1;
        j < originalSplit.length; j ++) {
            if (originalSplit [i].equals (originalSplit [j])) {
                count ++;
            }
        }
        if (wordMap.containsKey (originalSplit [i])) {
            count = 1;
        } else {
            wordMap.put (originalSplit [i], count);
            count = 1;
        }
    }
    Set word = wordMap.entrySet ();
    Iterator itr = word.iterator ();
    while (itr.hasNext ()) {
        Map.Entry map = (Map.Entry) itr.next ();
        System.out.println (map.getKey () + " " + map.getValue ());
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new TreeMap < String, Integer > ();
    String string1 = "Ram:Ram: Dog: Dog: Dog: Dog:leela:leela:house:house:shayam";
    String string2 [] = string1.split (":");
    for (int i = 0;
    i < string2.length; i ++) {
        String string = string2 [i];
        unique.put (string, (unique.get (string) == null ? 1 : (unique.get (string) + 1)));
    }
    System.out.println (unique);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_42835753_1_15
4820716_4824465_5_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String string = "elamparuthi, elam, elamparuthi";
    String [] s = string.replace (" ", "").split (",");
    String [] op;
    String ops = "";
    for (int i = 0;
    i <= s.length - 1; i ++) {
        if (! ops.contains (s [i] + "")) {
            if (ops != "") ops += ", ";

            ops += s [i];
        }
    }
    System.out.println (ops);
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new LinkedHashMap < String, Integer > ();
    for (String string : "House, House, House, Dog, Dog, Dog, Dog".split (", ")) {
        if (unique.get (string) == null) unique.put (string, 1);
        else unique.put (string, unique.get (string) + 1);

    }
    String uniqueString = join (unique.keySet (), ", ");
    List < Integer > value = new ArrayList < Integer > (unique.values ());
    System.out.println ("Output = " + uniqueString);
    System.out.println ("Values = " + value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_42835753_1_15
4820716_9142492_7_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    String string = "elamparuthi, elam, elamparuthi";
    String [] s = string.replace (" ", "").split (",");
    String [] op;
    String ops = "";
    for (int i = 0;
    i <= s.length - 1; i ++) {
        if (! ops.contains (s [i] + "")) {
            if (ops != "") ops += ", ";

            ops += s [i];
        }
    }
    System.out.println (ops);
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new TreeMap < String, Integer > ();
    String string1 = "Ram:Ram: Dog: Dog: Dog: Dog:leela:leela:house:house:shayam";
    String string2 [] = string1.split (":");
    for (int i = 0;
    i < string2.length; i ++) {
        String string = string2 [i];
        unique.put (string, (unique.get (string) == null ? 1 : (unique.get (string) + 1)));
    }
    System.out.println (unique);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4820716_4824465_5_20
4820716_9142492_7_20
Title: Finding repeated words on a string and counting the repetitions 
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new LinkedHashMap < String, Integer > ();
    for (String string : "House, House, House, Dog, Dog, Dog, Dog".split (", ")) {
        if (unique.get (string) == null) unique.put (string, 1);
        else unique.put (string, unique.get (string) + 1);

    }
    String uniqueString = join (unique.keySet (), ", ");
    List < Integer > value = new ArrayList < Integer > (unique.values ());
    System.out.println ("Output = " + uniqueString);
    System.out.println ("Values = " + value);
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > unique = new TreeMap < String, Integer > ();
    String string1 = "Ram:Ram: Dog: Dog: Dog: Dog:leela:leela:house:house:shayam";
    String string2 [] = string1.split (":");
    for (int i = 0;
    i < string2.length; i ++) {
        String string = string2 [i];
        unique.put (string, (unique.get (string) == null ? 1 : (unique.get (string) + 1)));
    }
    System.out.println (unique);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48208510_48209979_8_54
48208510_48215288_9_64
Title: Print numerals in order in a sine wave 
----------------------------------------

public static void main (String [] args) {
    double xd;
    String str = "";
    for (int start = (int) (1 * yPrecision), y = start;
    y >= - start; y --) {
        double x0 = Math.asin (y / yPrecision), x1 = bringXValueWithinPrecision (x0), x2 = bringXValueWithinPrecision (x0 + TPI / xPrecision), x3 = bringXValueWithinPrecision (PI / xPrecision - x0);
        for (int x = 0;
        x <= TPI; x ++) {
            xd = (x / xPrecision);
            if (x1 == xd || x2 == xd || x3 == xd) str += "*";
            else str += " ";

        }
        str += "\n";
    }
    String [] rows = str.split ("\n");
    int half = (int) (1 * yPrecision);
    int val = 0;
    for (int i = half;
    i >= 0; i --) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    for (int i = 0;
    i <= half; i ++) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    for (int i = half + 1;
    i < rows.length; i ++) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    for (int i = rows.length - 1;
    i >= half; i --) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    System.out.println (String.join ("\n", rows));
}
----------------------------------------

public static void main (String [] args) {
    double xd;
    int cycleoffset, cycleoffset2, topbottomoffset = 1;
    for (int start = (int) (1 * yPrecision), y = start;
    y >= - start; y --) {
        double x0 = Math.asin (y / yPrecision), x1 = bringXValueWithinPrecision (x0), x2 = bringXValueWithinPrecision (x0 + TPI / xPrecision), x3 = bringXValueWithinPrecision (PI / xPrecision - x0), tmp;
        if (y == start) {
            if (x1 == x3) topbottomoffset = 0;
            else if (x1 > x3) {
                tmp = x1;
                x1 = x3;
                x3 = tmp;
            }

        } else if (y == - start) {
            if (topbottomoffset == 0) x2 = x3;
            else if (x2 < x3) {
                tmp = x2;
                x2 = x3;
                x3 = tmp;
            }

        }

        cycleoffset = (int) (4 * yPrecision + 2 * topbottomoffset);
        cycleoffset2 = - cycleoffset;
        int start1 = topbottomoffset + 2 * (int) yPrecision, start2 = 2 * topbottomoffset + 4 * (int) yPrecision;
        for (int x = 0, lim = cycles * TPI;
        x <= lim; x ++) {
            xd = ((x % TPI) / xPrecision);
            if (x % TPI == 0) cycleoffset2 += cycleoffset;

            if (x1 == xd) System.out.print ((cycleoffset2 + y) % 10);
            else if (x2 == xd) System.out.print ((cycleoffset2 + start2 + y) % 10);
            else if (x3 == xd) System.out.print ((cycleoffset2 + start1 - y) % 10);
            else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48208510_48209979_8_54
48208510_48229679_9_37
Title: Print numerals in order in a sine wave 
----------------------------------------

public static void main (String [] args) {
    double xd;
    String str = "";
    for (int start = (int) (1 * yPrecision), y = start;
    y >= - start; y --) {
        double x0 = Math.asin (y / yPrecision), x1 = bringXValueWithinPrecision (x0), x2 = bringXValueWithinPrecision (x0 + TPI / xPrecision), x3 = bringXValueWithinPrecision (PI / xPrecision - x0);
        for (int x = 0;
        x <= TPI; x ++) {
            xd = (x / xPrecision);
            if (x1 == xd || x2 == xd || x3 == xd) str += "*";
            else str += " ";

        }
        str += "\n";
    }
    String [] rows = str.split ("\n");
    int half = (int) (1 * yPrecision);
    int val = 0;
    for (int i = half;
    i >= 0; i --) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    for (int i = 0;
    i <= half; i ++) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    for (int i = half + 1;
    i < rows.length; i ++) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    for (int i = rows.length - 1;
    i >= half; i --) {
        if (val == 10) val = 0;

        rows [i] = rows [i].replaceFirst ("\\*", Integer.toString (val ++));
    }
    System.out.println (String.join ("\n", rows));
}
----------------------------------------

public static void main (String [] args) {
    Boolean [] [] graph = new Boolean [points + 1] [points + 1];
    for (Double x = 0.0;
    x <= points; x ++) {
        Double pi = (x / points) * 2 * PI;
        Integer sinx = (int) Math.round ((sin (pi) * points / 2) + points / 2);
        graph [sinx] [x.intValue ()] = true;
    }
    for (Integer i = 0;
    i <= points; i ++) {
        for (Integer j = 0;
        j <= points; j ++) {
            Integer pt = (int) Math.floor (Math.log10 (points) + 1);
            String space = String.format ("%" + pt + "s", " ");
            String p = String.format ("%0" + (pt) + "d", abs (i - points / 2) * 2);
            System.out.print (graph [i] [j] != null ? p : space);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48208510_48215288_9_64
48208510_48229679_9_37
Title: Print numerals in order in a sine wave 
----------------------------------------

public static void main (String [] args) {
    double xd;
    int cycleoffset, cycleoffset2, topbottomoffset = 1;
    for (int start = (int) (1 * yPrecision), y = start;
    y >= - start; y --) {
        double x0 = Math.asin (y / yPrecision), x1 = bringXValueWithinPrecision (x0), x2 = bringXValueWithinPrecision (x0 + TPI / xPrecision), x3 = bringXValueWithinPrecision (PI / xPrecision - x0), tmp;
        if (y == start) {
            if (x1 == x3) topbottomoffset = 0;
            else if (x1 > x3) {
                tmp = x1;
                x1 = x3;
                x3 = tmp;
            }

        } else if (y == - start) {
            if (topbottomoffset == 0) x2 = x3;
            else if (x2 < x3) {
                tmp = x2;
                x2 = x3;
                x3 = tmp;
            }

        }

        cycleoffset = (int) (4 * yPrecision + 2 * topbottomoffset);
        cycleoffset2 = - cycleoffset;
        int start1 = topbottomoffset + 2 * (int) yPrecision, start2 = 2 * topbottomoffset + 4 * (int) yPrecision;
        for (int x = 0, lim = cycles * TPI;
        x <= lim; x ++) {
            xd = ((x % TPI) / xPrecision);
            if (x % TPI == 0) cycleoffset2 += cycleoffset;

            if (x1 == xd) System.out.print ((cycleoffset2 + y) % 10);
            else if (x2 == xd) System.out.print ((cycleoffset2 + start2 + y) % 10);
            else if (x3 == xd) System.out.print ((cycleoffset2 + start1 - y) % 10);
            else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Boolean [] [] graph = new Boolean [points + 1] [points + 1];
    for (Double x = 0.0;
    x <= points; x ++) {
        Double pi = (x / points) * 2 * PI;
        Integer sinx = (int) Math.round ((sin (pi) * points / 2) + points / 2);
        graph [sinx] [x.intValue ()] = true;
    }
    for (Integer i = 0;
    i <= points; i ++) {
        for (Integer j = 0;
        j <= points; j ++) {
            Integer pt = (int) Math.floor (Math.log10 (points) + 1);
            String space = String.format ("%" + pt + "s", " ");
            String p = String.format ("%0" + (pt) + "d", abs (i - points / 2) * 2);
            System.out.print (graph [i] [j] != null ? p : space);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48215728_48216070_3_15
48215728_48216442_1_35
Title: "Java task Validate ""course code"" with letters and numbers" 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Amber's Copy");
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a course code to validate (e.g. IT4872):");
    String s = input.nextLine ();
    if (s.toLowerCase ().matches ("it[0-9][0-9][0-9][0-9]")) System.out.println ("ok");
    else System.out.println ("wrong");

}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Amber's Copy");
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a course code to validate (e.g. IT4872):");
    String s = input.nextLine ();
    Pattern pattern = Pattern.compile ("^([i|I])(t|T)([0-9])([0-9])([0-9])([0-9])$");
    Matcher m = pattern.matcher (s);
    if (m.matches ()) {
        System.out.println ("Course code is valid." + s);
    } else {
        if (s.charAt (0) != 'i' && s.charAt (0) != 'I') {
            System.out.println ("Course Code must begin with the letter I.");
        }
        if (s.charAt (1) != 't' && s.charAt (1) != 'T') {
            System.out.println ("Course Code must have second letter T.");
        }
        if (! Character.isDigit (s.charAt (2))) {
            System.out.println ("Course code must have digit in third spot.");
        }
        if (! Character.isDigit (s.charAt (3))) {
            System.out.println ("Course code must have digit in fourth place.");
        }
        if (! Character.isDigit (s.charAt (4))) {
            System.out.println ("Course code must have digit in fifth place.");
        }
        if (! Character.isDigit (s.charAt (5))) {
            System.out.println ("Course code must have digit in sixth place.");
        }
        System.out.println ("Course code not valid.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4821704_15206147_1_20
4821704_5804121_1_12
Title: Java: How to find if a method is overridden from base class? 
----------------------------------------

public static boolean isMethodOverrriden (final Method myMethod) {
    Class < ? > declaringClass = myMethod.getDeclaringClass ();
    if (declaringClass.equals (Object.class)) {
        return false;
    }
    try {
        declaringClass.getSuperclass ().getMethod (myMethod.getName (), myMethod.getParameterTypes ());
        return true;
    } catch (NoSuchMethodException e) {
        for (Class < ? > iface : declaringClass.getInterfaces ()) {
            try {
                iface.getMethod (myMethod.getName (), myMethod.getParameterTypes ());
                return true;
            } catch (NoSuchMethodException ignored) {
            }
        }
        return false;
    }
}
----------------------------------------

public static boolean isMethodOverrriden (Method myMethod) {
    Class < ? > declaringClass = myMethod.getDeclaringClass ();
    if (declaringClass.equals (Object.class)) {
        return false;
    }
    try {
        declaringClass.getSuperclass ().getMethod (myMethod.getName (), myMethod.getParameterTypes ());
        return true;
    } catch (NoSuchMethodException e) {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48226384_48226625_9_18
48226384_48294860_9_18
Title: How to use a non abstract method from a Abstract class in another class without extending 
----------------------------------------

void something () {
    MyAbstract a = new MyAbstract () {
        @Override
        public void abstractMethod () {
        }}

    ;
    a.callNonAbstractMethod ();
}
----------------------------------------

void something () {
    MyAbstract a = new MyAbstract () {
        @Override
        public void abstractMethod () {
        }}

    ;
    a.callNonAbstractMethod ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48261534_48261731_17_25
48261534_48262204_15_35
Title: Java searching for a string in char[][] array 
----------------------------------------

public static Boolean search (char [] [] puzzle, String word) {
    for (int i = 0;
    i < puzzle.length; i ++) {
        String puzzleWord = new String (puzzle [i]);
        if (word.equals (puzzleWord)) {
            return true;
        }
    }
    return false;
}
----------------------------------------

public static Boolean search (char [] [] puzzle, String word) {
    char [] charArray = word.toCharArray ();
    for (int i = 0;
    i < puzzle.length; i ++) {
        for (int j = 0;
        j < puzzle [i].length && j < charArray.length; j ++) {
            if (puzzle [i] [j] != charArray [j] || puzzle [i].length != charArray.length) break;
            else if (j + 1 == puzzle [i].length) {
                return true;
            }

        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48265517_48265638_1_17
48265517_48265734_1_19
Title: Looping through LinkedLinkst in two places gives error 
----------------------------------------

@Override
public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

@Override
public void tick (float delta) {
    for (Entity e : entities) {
        if (color == Color.WHITE) {
            if (getSurrounding (- 32, - 32) != null && getSurrounding (- 32, - 32).getColor () == Color.BLACK) {
                if (getSurrounding (- 32, - 32).getStrength () < strength) {
                    getSurrounding (- 32, - 32).setStrength (- 50);
                }
            }
        }
        if (! inGame.entities.isEmpty () && strength <= 0) {
            inGame.entities.remove (this);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48265517_48265638_1_17
48265517_48266046_1_14
Title: Looping through LinkedLinkst in two places gives error 
----------------------------------------

@Override
public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

public boolean tick (float delta) {
    if (color == Color.WHITE) {
        if (getSurrounding (- 32, - 32) != null && getSurrounding (- 32, - 32).getColor () == Color.BLACK) {
            if (getSurrounding (- 32, - 32).getStrength () < strength) {
                getSurrounding (- 32, - 32).setStrength (- 50);
            }
        }
    }
    if (! inGame.entities.isEmpty () && strength <= 0) {
        return true;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48265517_48265734_1_19
48265517_48266046_1_14
Title: Looping through LinkedLinkst in two places gives error 
----------------------------------------

@Override
public void tick (float delta) {
    for (Entity e : entities) {
        if (color == Color.WHITE) {
            if (getSurrounding (- 32, - 32) != null && getSurrounding (- 32, - 32).getColor () == Color.BLACK) {
                if (getSurrounding (- 32, - 32).getStrength () < strength) {
                    getSurrounding (- 32, - 32).setStrength (- 50);
                }
            }
        }
        if (! inGame.entities.isEmpty () && strength <= 0) {
            inGame.entities.remove (this);
        }
    }
}
----------------------------------------

public boolean tick (float delta) {
    if (color == Color.WHITE) {
        if (getSurrounding (- 32, - 32) != null && getSurrounding (- 32, - 32).getColor () == Color.BLACK) {
            if (getSurrounding (- 32, - 32).getStrength () < strength) {
                getSurrounding (- 32, - 32).setStrength (- 50);
            }
        }
    }
    if (! inGame.entities.isEmpty () && strength <= 0) {
        return true;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48269446_48270025_52_66
48269446_48270025_85_99
Title: Javafx TableView change Font of an Column programmatically NOT-CSS 
----------------------------------------

public void updateItem (String item, boolean empty) {
    super.updateItem (item, empty);
    if (isEmpty ()) {
        setText ("");
    } else {
        setTextFill (Color.RED);
        setFont (Font.font ("Verdana", 20));
        setText (item);
    }
}
----------------------------------------

public void updateItem (String item, boolean empty) {
    super.updateItem (item, empty);
    if (isEmpty ()) {
        setText ("");
    } else {
        setTextFill (Color.BLUE);
        setFont (Font.font ("Verdana", 20));
        setText (item);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48278105_48281507_1_20
48278105_48281783_1_16
Title: Java 8 streams: conditional Collector 
----------------------------------------

public static String log (List < String > values) {
    Spliterator < String > sp = values.stream ().map (x -> "'" + x + "'").spliterator ();
    StringBuilder sb = new StringBuilder ("Value = ");
    sp.tryAdvance (x -> sb.append (x));
    if (sp.tryAdvance (x -> {
        sb.replace (5, 6, "s ");
        sb.append (",").append (x);
    })) {
        sp.forEachRemaining (x -> {
            sb.append (",").append (x);
        });
    }
    return sb.toString ();
}
----------------------------------------

public static String log (List < String > values) {
    return values.stream ().collect (() -> new Object () {
        StringJoiner sj = new StringJoiner ("', '", "'", "' added");
        int num;
        String result () {
            return num == 0 ? "No values added" : (num == 1 ? "Value " : "Values ") + sj;
        }}

    , (o, s) -> {
        o.sj.add (s);
        o.num ++;
    }, (o, p) -> {
        o.sj.merge (p.sj);
        o.num += p.num;
    }).result ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48280166_48280313_1_14
48280166_48281085_1_47
Title: How to stop Java recursion in Finding Peak inside 2D Array 
----------------------------------------

private static void printPath (int [] [] mat, int i, int j) {
    System.out.println ("(" + i + "," + j + ")");
    if (i >= 0 && i < mat.length - 1 && mat [i] [j] < mat [i + 1] [j]) {
        printPath (mat, i + 1, j);
    } else if (j >= 0 && j < mat [0].length - 1 && mat [i] [j] < mat [i] [j + 1]) {
        printPath (mat, i, j + 1);
    } else if (i > 0 && i < mat.length - 1 && mat [i] [j] < mat [i - 1] [j]) {
        printPath (mat, i - 1, j);
    } else if (j > 0 && j < mat [0].length - 1 && mat [i] [j] < mat [i] [j - 1]) {
        printPath (mat, i, j - 1);
    }

}
----------------------------------------

private static void printPath (int [] [] mat, int i, int j) {
    if (mat.length == 0 || mat [0].length == 0) {
        System.out.println ("Empty matrix");
        return;
    }
    System.out.println ("(" + i + "," + j + ")");
    int rightValue = i >= 0 && i < mat.length - 1 && mat [i] [j] < mat [i + 1] [j] ? mat [i + 1] [j] : mat [i] [j];
    int belowValue = j >= 0 && j < mat [0].length - 1 && mat [i] [j] < mat [i] [j + 1] ? mat [i] [j + 1] : mat [i] [j];
    int aboveValue = i > 0 && i < mat.length - 1 && mat [i] [j] < mat [i - 1] [j] ? mat [i - 1] [j] : mat [i] [j];
    int leftValue = j > 0 && j < mat [0].length - 1 && mat [i] [j] < mat [i] [j - 1] ? mat [i] [j - 1] : mat [i] [j];
    if (rightValue > leftValue) {
        if (rightValue > belowValue) {
            if (rightValue > aboveValue) {
                printPath (mat, i + 1, j);
            } else {
                printPath (mat, i, j + 1);
            }
        } else {
            if (belowValue > aboveValue) {
                printPath (mat, i - 1, j);
            } else {
                printPath (mat, i, j + 1);
            }
        }
    } else {
        if (leftValue > belowValue) {
            if (leftValue > aboveValue) {
                printPath (mat, i - 1, j);
            } else {
                printPath (mat, i, j + 1);
            }
        } else {
            if (belowValue > aboveValue) {
                printPath (mat, i - 1, j);
            } else {
                printPath (mat, i, j + 1);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48305552_48305941_5_44
48305552_48306001_1_20
Title: How to keep score correctly 
----------------------------------------

public static void main (String [] args) {
    List < String > keywords = Arrays.asList ("who", "what", "where", "when", "why", "how");
    int RunningTotal = 0;
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Please enter a sentence\n");
    String input = scanner.nextLine ().toLowerCase ();
    if (! keywords.contains (input.trim ().toLowerCase ())) {
        System.out.println ("No keywords detected...");
    } else {
        System.out.println ("Found keyword: " + input);
        switch (input) {
            case "who" :
                RunningTotal ++;
                break;
            case "what" :
                RunningTotal ++;
                break;
            case "where" :
                RunningTotal ++;
                break;
            case "when" :
                RunningTotal ++;
                break;
            case "why" :
                RunningTotal ++;
                break;
            case "how" :
                RunningTotal ++;
                break;
        }
    }
    System.out.println (RunningTotal);
    if (RunningTotal <= 3) {
        System.out.println ("Lack of communication skills");
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] keywords = {"who", "what", "where", "when", "why", "how"};
    int keywordsFound = 0;
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Please enter a sentence");
    String input = scanner.nextLine ().toLowerCase ();
    for (String keyword : keywords) {
        if (input.contains (keyword)) {
            keywordsFound ++;
            System.out.println ("Found keyword: " + keyword);
        }
    }
    System.out.printf ("Found %d keywords\n", keywordsFound);
    if (keywordsFound <= 3) {
        System.out.println ("Lack of communication skills");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48305552_48305941_5_44
48305552_48307035_1_20
Title: How to keep score correctly 
----------------------------------------

public static void main (String [] args) {
    List < String > keywords = Arrays.asList ("who", "what", "where", "when", "why", "how");
    int RunningTotal = 0;
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Please enter a sentence\n");
    String input = scanner.nextLine ().toLowerCase ();
    if (! keywords.contains (input.trim ().toLowerCase ())) {
        System.out.println ("No keywords detected...");
    } else {
        System.out.println ("Found keyword: " + input);
        switch (input) {
            case "who" :
                RunningTotal ++;
                break;
            case "what" :
                RunningTotal ++;
                break;
            case "where" :
                RunningTotal ++;
                break;
            case "when" :
                RunningTotal ++;
                break;
            case "why" :
                RunningTotal ++;
                break;
            case "how" :
                RunningTotal ++;
                break;
        }
    }
    System.out.println (RunningTotal);
    if (RunningTotal <= 3) {
        System.out.println ("Lack of communication skills");
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] keywords = {"who", "what", "where", "when", "why", "how"};
    int keywordsFound = 0;
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Please enter a sentence");
    String input = scanner.nextLine ().toLowerCase ();
    for (String keyword : keywords) {
        if (input.contains (keyword)) {
            keywordsFound ++;
            System.out.println ("Found keyword: " + keyword);
        }
    }
    System.out.printf ("Found %d keywords\n", keywordsFound);
    if (keywordsFound <= 3) {
        System.out.println ("Lack of communication skills");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48321997_48322496_11_17
48321997_48322496_2_8
Title: how to compare two objects and find the fields/properties changed? 
----------------------------------------

public static List < String > difference (Address s1, Address s2) {
    List < String > res = new ArrayList < > ();
    if (! s1.hno.equalsIgnoreCase (s2.hno)) res.add ("adress.hno");

    if (! s1.street.equalsIgnoreCase (s2.street)) res.add ("adress.street");

    if (s1.pin != s2.pin) res.add ("pin");

    return res;
}
----------------------------------------

public static List < String > difference (Student s1, Student s2) {
    List < String > res = new ArrayList < > ();
    if (! s1.name.equalsIgnoreCase (s2.name)) res.add ("name");

    if (s1.age != s2.age) res.add ("age");

    res.addAll (Address.difference (s1.address, s2.address));
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48325885_48326112_1_20
48325885_48326112_22_35
Title: Mixing two generic lists java 
----------------------------------------

static < R > List < R > listeMischen (List < ? extends R > l1, List < ? extends R > l2) {
    if (! (l1 instanceof RandomAccess && l2 instanceof RandomAccess)) return listeMischen ((Iterable < ? extends R >) l1, (Iterable < ? extends R >) l2);

    List < R > newList = new ArrayList < > (l1.size () + l2.size ());
    int sizeOfSmallerList = Math.min (l1.size (), l2.size ());
    int i;
    for (i = 0; i < sizeOfSmallerList; i ++) {
        newList.add (l1.get (i));
        newList.add (l2.get (i));
    }
    for (; i < l1.size (); i ++) newList.add (l1.get (i));

    for (; i < l2.size (); i ++) newList.add (l2.get (i));

    return newList;
}
----------------------------------------

static < R > List < R > listeMischen (Iterable < ? extends R > l1, Iterable < ? extends R > l2) {
    List < R > newList = new ArrayList < > ();
    Iterator < ? extends R > it1 = l1.iterator ();
    Iterator < ? extends R > it2 = l2.iterator ();
    while (it1.hasNext () && it2.hasNext ()) {
        newList.add (it1.next ());
        newList.add (it2.next ());
    }
    it1.forEachRemaining (newList :: add);
    it2.forEachRemaining (newList :: add);
    return newList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48325885_48326112_1_20
48325885_48326117_1_18
Title: Mixing two generic lists java 
----------------------------------------

static < R > List < R > listeMischen (List < ? extends R > l1, List < ? extends R > l2) {
    if (! (l1 instanceof RandomAccess && l2 instanceof RandomAccess)) return listeMischen ((Iterable < ? extends R >) l1, (Iterable < ? extends R >) l2);

    List < R > newList = new ArrayList < > (l1.size () + l2.size ());
    int sizeOfSmallerList = Math.min (l1.size (), l2.size ());
    int i;
    for (i = 0; i < sizeOfSmallerList; i ++) {
        newList.add (l1.get (i));
        newList.add (l2.get (i));
    }
    for (; i < l1.size (); i ++) newList.add (l1.get (i));

    for (; i < l2.size (); i ++) newList.add (l2.get (i));

    return newList;
}
----------------------------------------

public < S extends T, T > List < T > listeMischen (Iterable < S > l1, Iterable < T > l2) {
    List < T > newlist = new ArrayList < T > ();
    Iterator < S > l1i = l1.iterator ();
    Iterator < T > l2i = l2.iterator ();
    while (l1i.hasNext () && l2i.hasNext ()) {
        newlist.add (l1i.next ());
        newlist.add (l2i.next ());
    }
    while (l1i.hasNext ()) {
        newlist.add (l1i.next ());
    }
    while (l2i.hasNext ()) {
        newlist.add (l2i.next ());
    }
    return newlist;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48325885_48326112_22_35
48325885_48326117_1_18
Title: Mixing two generic lists java 
----------------------------------------

static < R > List < R > listeMischen (Iterable < ? extends R > l1, Iterable < ? extends R > l2) {
    List < R > newList = new ArrayList < > ();
    Iterator < ? extends R > it1 = l1.iterator ();
    Iterator < ? extends R > it2 = l2.iterator ();
    while (it1.hasNext () && it2.hasNext ()) {
        newList.add (it1.next ());
        newList.add (it2.next ());
    }
    it1.forEachRemaining (newList :: add);
    it2.forEachRemaining (newList :: add);
    return newList;
}
----------------------------------------

public < S extends T, T > List < T > listeMischen (Iterable < S > l1, Iterable < T > l2) {
    List < T > newlist = new ArrayList < T > ();
    Iterator < S > l1i = l1.iterator ();
    Iterator < T > l2i = l2.iterator ();
    while (l1i.hasNext () && l2i.hasNext ()) {
        newlist.add (l1i.next ());
        newlist.add (l2i.next ());
    }
    while (l1i.hasNext ()) {
        newlist.add (l1i.next ());
    }
    while (l2i.hasNext ()) {
        newlist.add (l2i.next ());
    }
    return newlist;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4833423_17543917_5_21
4833423_4833494_1_14
Title: Shell sort Java example 
----------------------------------------

public static < T extends Comparable < ? super T > > void shellsort (T [] a) {
    int j;
    for (int gap = a.length / 2;
    gap > 0; gap /= 2) {
        for (int i = gap;
        i < a.length; i ++) {
            T tmp = a [i];
            for (j = i; j >= gap && tmp.compareTo (a [j - gap]) < 0; j -= gap) {
                a [j] = a [j - gap];
            }
            a [j] = tmp;
        }
    }
}
----------------------------------------

public static void shellsort (Comparable [] a) {
    for (int gap = a.length / 2;
    gap > 0; gap = gap == 2 ? 1 : (int) (gap / 2.2)) for (int i = gap;
    i < a.length; i ++) {
        Comparable tmp = a [i];
        int j = i;
        for (; j >= gap && tmp.compareTo (a [j - gap]) < 0; j -= gap) a [j] = a [j - gap];

        a [j] = tmp;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4833423_47314184_1_20
4833423_4837697_5_19
Title: Shell sort Java example 
----------------------------------------

int sort (int arr []) {
    int n = arr.length;
    int gap = n / 2;
    int i, j;
    while (gap > 0) {
        for (i = 0, j = i + gap; j < n; i ++, ++ j) {
            if (arr [i] > arr [j]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
        gap = gap / 2;
    }
    return 0;
}
----------------------------------------

public < T extends Comparable < ? super T > > void sort (T [] a) {
    int h = 1;
    while ((h * 3 + 1) < a.length) h = 3 * h + 1;

    while (h > 0) {
        for (int i = h - 1;
        i < a.length; i ++) {
            T s = a [i];
            int j = i;
            for (j = i; (j >= h) && (a [j - h].compareTo (s) > 0); j -= h) a [j] = a [j - h];

            a [j] = s;
        }
        h /= 3;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4833423_4835281_23_46
4833423_48871239_1_30
Title: Shell sort Java example 
----------------------------------------

public void shellSort () {
    int inner, outer;
    long temp;
    int h = 1;
    while (h <= len / 3) h = h * 3 + 1;

    while (h > 0) {
        for (outer = h; outer < len; outer ++) {
            temp = data [outer];
            inner = outer;
            while (inner > h - 1 && data [inner - h] >= temp) {
                data [inner] = data [inner - h];
                inner -= h;
            }
            data [inner] = temp;
        }
        h = (h - 1) / 3;
    }
}
----------------------------------------

public void shellSort (Integer [] arr) {
    int interval = arr.length / 2;
    while (interval != 0) {
        for (int i = 0;
        i < interval; i ++) {
            for (int p = i + interval;
            p < arr.length; p += interval) {
                int key = arr [p];
                int j = p - interval;
                while (j >= 0) {
                    if (key < arr [j]) {
                        arr [j + interval] = arr [j];
                    } else break;

                    j -= interval;
                }
                arr [j + interval] = key;
            }
        }
        interval /= 2;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48335694_48335932_22_37
48335694_48335932_50_75
Title: RecyclerView getting wrong position When Apply Search with Search Filter 
----------------------------------------

public void onClick (View v) {
    final int position = Integer.parse (v.getTag ().toString ());
    if (position == 0) {
        Toast.makeText (mContext, "iOS", Toast.LENGTH_SHORT).show ();
    }
    if (position == 1) {
        Toast.makeText (mContext, "Android", Toast.LENGTH_SHORT).show ();
    }
}
----------------------------------------

public void onClick (View v) {
    PopupMenu popupMenu = new PopupMenu (mContext, holder.txtOptionDigit);
    popupMenu.inflate (R.menu.option_menu);
    popupMenu.setOnMenuItemClickListener (new PopupMenu.OnMenuItemClickListener () {
        @Override
        public boolean onMenuItemClick (MenuItem item) {
            switch (item.getItemId ()) {
                case R.id.mnu_item_save :
                    Toast.makeText (mContext, "Saved " + listItems.get (position).getTitle (), Toast.LENGTH_SHORT).show ();
                    break;
                case R.id.mnu_item_delete :
                    Toast.makeText (mContext, "Deleted " + listItems.get (position).getTitle (), Toast.LENGTH_SHORT).show ();
                    listItems.remove (position);
                    notifyDataSetChanged ();
                    break;
                default :
                    break;
            }
            return false;
        }}

    );
    popupMenu.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48336249_48341066_126_139
48336249_48341066_37_91
Title: Increase JTextField number exists in another JFrame 
----------------------------------------

private void init () {
    setTitle ("Second Frame");
    setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    getContentPane ().setLayout (new GridLayout (1, 1));
    setBounds (500, 412, 250, 70);
    number = new Integer (0);
    textField = new JTextField (String.valueOf (number));
    textField.setFont (new Font ("Dialog", Font.BOLD + Font.ITALIC, 22));
    getContentPane ().add (textField);
    setVisible (true);
}
----------------------------------------

private void init () {
    setTitle ("First Frame");
    setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    getContentPane ().setLayout (new GridLayout (2, 1));
    setBounds (500, 300, 250, 110);
    final JButton increaseBtn = new JButton ("Increase Number");
    final JButton start = new JButton ("Start");
    final JButton stop = new JButton ("Stop");
    stop.setEnabled (false);
    JPanel panel = new JPanel ();
    increaseBtn.addMouseListener (new MouseAdapter () {
        @Override
        public void mouseClicked (MouseEvent evt) {
            if (! flag) {
                number = secondFrame.getNumber ();
                secondFrame.setNumber (number + 1);
            }
        }}

    );
    start.addActionListener (new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent evt) {
            flag = true;
            startContinuousIncreasing ();
            start.setEnabled (false);
            stop.setEnabled (true);
            increaseBtn.setEnabled (false);
        }}

    );
    stop.addActionListener (new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent evt) {
            flag = false;
            stop.setEnabled (false);
            start.setEnabled (true);
            increaseBtn.setEnabled (true);
        }}

    );
    getContentPane ().add (increaseBtn);
    getContentPane ().add (panel);
    panel.add (start);
    panel.add (stop);
    setVisible (true);
    secondFrame = SecondFrame.getSecondFrame ();
    increaseBtn.requestFocus ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48337036_48337237_5_13
48337036_48337262_5_13
Title: How to write a function using natural order and comparators 
----------------------------------------

public C max (C [] xs, Comparator < ? super C > c) {
    C res = xs [0];
    for (int i = 1;
    i < xs.length; i ++) {
        if (c.compare (xs [i], res) > 0) {
            res = points [i];
        }
    }
    return res;
}
----------------------------------------

public < C > C max (C [] xs, Comparator < C > c) {
    C res = xs [0];
    for (C x : xs) {
        if (c.compare (x, res) > 0) {
            res = x;
        }
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48337658_50551598_3_17
48337658_51277458_1_16
Title: Program that finds smallest positive integer NOT present in an array. How could I make the code more readable? 
----------------------------------------

public int solution (int [] a) {
    HashSet < Integer > hashSet = new HashSet < Integer > ();
    int smallInt = 1;
    for (int i = 0;
    i < a.length; i ++) {
        hashSet.add (a [i]);
    }
    while (hashSet.contains (smallInt)) {
        smallInt ++;
    }
    return smallInt;
}
----------------------------------------

public static int solution (int [] A) {
    int num = 1;
    for (int j = 0;
    j < A.length; j ++) {
        for (int i = 0;
        i < A.length; i ++) {
            if (A [i] > 0) {
                if (A [i] == num) {
                    num ++;
                    break;
                }
            }
        }
    }
    return num;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48339199_48378761_3_16
48339199_49766246_2_17
Title: Java 8u161/8u162 makes Swing app use CPU 
----------------------------------------

public static final void main (String [] args) {
    SwingUtilities.invokeLater (() -> {
        installTextComponentFocusWorkaround ();
        JFrame window = new JFrame ("Test");
        window.setLocationByPlatform (true);
        window.add (new JButton ("Button"), BorderLayout.CENTER);
        window.add (new JTextField (), BorderLayout.SOUTH);
        window.pack ();
        window.setDefaultCloseOperation (WindowConstants.EXIT_ON_CLOSE);
        window.setVisible (true);
    });
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        public void run () {
            JFrame f = new JFrame ("Test");
            JTabbedPane tp = new JTabbedPane ();
            JTextField tf = new JTextField ();
            tf.enableInputMethods (false);
            tp.addTab ("tab 1", tf);
            f.add (tp);
            f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            f.pack ();
            f.setLocationRelativeTo (null);
            f.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48347874_48348181_41_49
48347874_51415352_1_22
Title: Set custom typeface for eche RecyclerView item 
----------------------------------------

public void onBindViewHolder (ViewHolder holder, int position) {
    if (position == 0) {
        FontViewHolder vh = (FontViewHolder) holder;
        vh.bind (listItems.get (position));
    } else {
        NormalViewHolder vh = (NormalViewHolder) holder;
        vh.bind (listItems.get (position));
    }
}
----------------------------------------

@Override
public void onBindViewHolder (RecyclerView.ViewHolder holder, int position) {
    MyHolder myHolder = (MyHolder) holder;
    Current current = currentList.get (position);
    myHolder.textDescription.setText (current.getDescription ());
    myHolder.textTitle.setText (current.getTitle ());
    myHolder.textSource.setText (current.getRelease_date ());
    myHolder.textType.setText (current.getContent_type ());
    Typeface font1 = Typeface.createFromAsset (context.getAssets (), "myFirstFont.ttf");
    Typeface font2 = Typeface.createFromAsset (context.getAssets (), "mySecondFont.ttf");
    if (position % 2 == 0) {
        myHolder.textDescription.setTypeface (font1);
    } else myHolder.textDescription.setTypeface (font2);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48366059_48368188_121_132
48366059_48368188_137_148
Title: Remove Image from the JButton 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    revalidateLabel (label1, index.get (0));
    revalidateLabel (label2, index.get (1));
    revalidateLabel (label3, index.get (2));
    revalidateLabel (label4, index.get (3));
    addImage.setEnabled (false);
    removeImage.setEnabled (true);
    prev.setEnabled (true);
    next.setEnabled (true);
    removeImage.requestFocus ();
}
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    removeLabelImage (label1);
    removeLabelImage (label2);
    removeLabelImage (label3);
    removeLabelImage (label4);
    prev.setEnabled (false);
    next.setEnabled (false);
    removeImage.setEnabled (false);
    addImage.setEnabled (true);
    addImage.requestFocus ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48370931_48371077_25_37
48370931_48371160_11_24
Title: Error while printing out arraylist elements 
----------------------------------------

public static void add () {
    String name;
    String answer;
    do {
        Scanner s = new Scanner (System.in);
        System.out.println ("name");
        name = s.next ();
        Radnik f = new Radnik (name);
        workers.add (f);
        System.out.println ("More");
        answer = s.next ();
    } while (answer.equals ("yes"));
}
----------------------------------------

public void add () {
    String name;
    String answer;
    do {
        Scanner s = new Scanner (System.in);
        System.out.println ("name");
        name = s.next ();
        Radnik f = new Radnik ();
        f.setName (name);
        workers.add (f);
        System.out.println ("More");
        answer = s.next ();
    } while (answer.equals ("yes"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48392147_48393450_8_18
48392147_48393849_8_39
Title: Mutual Exclusion using JAVA 2-Threads Solution 
----------------------------------------

public void lock () {
    for (;;) {
        if (! locked.get ()) {
            if (locked.compareAndSet (false, true)) {
                current = Thread.currentThread ().getName ();
                System.out.println (current + " locked");
                return;
            }
        }
    }
}
----------------------------------------

public void lock () {
    Long threadId = Thread.currentThread ().getId ();
    this.next.add (threadId);
    boolean acquired = false;
    while (! acquired) {
        synchronized (this.syncLock) {
            if (this.holder == null) {
                if (this.next.peek () == threadId) {
                    this.holder = Thread.currentThread ().getName ();
                    System.out.println (this.holder + " locked");
                    acquired = true;
                }
            } else {
                if (this.holder.equals (Thread.currentThread ().getName ())) {
                    acquired = true;
                }
            }
        }
    }
    this.next.remove (threadId);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48395015_48395134_1_13
48395015_48395207_1_16
Title: How to double input of an array in java? 
----------------------------------------

public static int [] twice (int [] ary) {
    int [] A = new int [ary.length * 2];
    int c = 0;
    for (int n : ary) {
        A [c] = A [c + 1] = n;
        c += 2;
    }
    return A;
}
----------------------------------------

public int [] twice (int [] ary) {
    int [] temporary = new int [ary.length];
    for (int i = 0;
    i < ary.length; i ++) {
        temporary [i] = ary [i];
    }
    Arrays.sort (temporary);
    int [] result = new int [ary.length * 2];
    for (int i = 0;
    i < temporary.length; i ++) {
        result [i] = temporary [i];
    }
    int j = 0;
    for (int i = result.length - 1;
    i >= result.length / 2; i --) {
        result [i] = temporary [j ++];
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48406731_48407465_1_12
48406731_48451172_22_44
Title: Identifying the specific PDF field type with iText7 
----------------------------------------

private String getSimpleFieldType (PdfFormField field) {
    if (field.getFormType () == PdfName.Tx) {
        return "text box";
    } else if (field.getFormType () == PdfName.Ch) {
        return "check box";
    } else if (field.getFormType () == PdfName.Btn) {
        return "button";
    } else {
        return field.getFormType ().toString ();
    }

}
----------------------------------------

private String getSimpleFieldType (PdfFormField field, PdfName type, String key) {
    if (0 == PdfName.Btn.compareTo (type)) {
        if (((PdfButtonFormField) form.getField (key)).isPushButton ()) {
            return "Push Button";
        } else {
            if (((PdfButtonFormField) form.getField (key)).isRadio ()) {
                return "Radio Button";
            } else {
                return "Check Box";
            }
        }
    } else if (0 == PdfName.Ch.compareTo (type)) {
        return "List Box";
    } else if (0 == PdfName.Sig.compareTo (type)) {
        return "Signature";
    } else if (0 == PdfName.Tx.compareTo (type)) {
        return "Text Box";
    } else {
        return "Unknown type";
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48416028_48416130_5_21
48416028_48416408_6_27
Title: if gender = male or female print out result 
----------------------------------------

public static void main (String [] args) {
    String gender;
    Scanner scan = new Scanner (System.in);
    System.out.println ("What is your gender, male of female?");
    gender = scan.nextLine ();
    if (gender == "f" || gender == "F" || gender == "female" || gender == "Female" || gender == "FEMALE") {
        System.out.println ("A female");
    } else if (gender == "m" || gender == "M" || gender == "male" || gender == "Male" || gender == "MALE") {
        System.out.println ("A male.");
    } else {
        System.out.println ("Unknown");
    }

}
----------------------------------------

public static void main (String [] args) {
    String gender;
    Scanner scan = new Scanner (System.in);
    System.out.println ("What is your gender, male or female?");
    gender = scan.nextLine ();
    if (gender.equals ("f") || gender.equals ("F") || gender.equals ("female") || gender.equals ("Female") || gender.equals ("FEMALE")) {
        System.out.println ("A female");
    }
    if (gender.equals ("m") || gender.equals ("M") || gender.equals ("male") || gender.equals ("Male") || gender.equals ("MALE")) {
        System.out.println ("A male.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48420906_48421678_16_52
48420906_48428873_34_70
Title: Print Binary Tree With Proper Spaces in Java 
----------------------------------------

static void printLevelOrder (Node root) {
    if (root == null) return;

    Queue < Node > q = new LinkedList < Node > ();
    q.add (root);
    while (true) {
        int nodeCount = q.size ();
        if (nodeCount == 0) break;

        while (nodeCount > 0) {
            Node node = q.peek ();
            System.out.print ("(" + node.data + ")");
            q.remove ();
            if (node.left != null) q.add (node.left);

            if (node.right != null) q.add (node.right);

            if (node.depth != null) System.out.print (" ");

            if (nodeCount > 1) {
                System.out.print (", ");
            }
            nodeCount --;
        }
        System.out.println ();
    }
}
----------------------------------------

static void printLevelOrder (Node root, int depth) {
    if (root == null) return;

    Queue < Node > q = new LinkedList < Node > ();
    q.add (root);
    while (true) {
        int nodeCount = q.size ();
        if (nodeCount == 0) break;

        for (int i = 0;
        i < depth; i ++) {
            System.out.print ("  ");
        }
        while (nodeCount > 0) {
            Node node = q.peek ();
            System.out.print ("(" + node.data + ")");
            q.remove ();
            if (node.left != null) q.add (node.left);

            if (node.right != null) q.add (node.right);

            if (nodeCount > 1) {
                System.out.print (", ");
            }
            nodeCount --;
        }
        depth --;
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48420906_48421678_53_63
48420906_48428873_71_83
Title: Print Binary Tree With Proper Spaces in Java 
----------------------------------------

public static void main (String [] args) {
    Node root = new Node (6);
    root.left = new Node (3);
    root.right = new Node (2);
    root.left.left = new Node (8);
    root.left.right = new Node (9);
    root.right.right = new Node (- 2);
    root.right.left = new Node (3);
    printLevelOrder (root);
}
----------------------------------------

public static void main (String [] args) {
    Node root = new Node (6);
    root.left = new Node (3);
    root.right = new Node (2);
    root.left.left = new Node (8);
    root.left.right = new Node (9);
    root.right.right = new Node (- 2);
    root.right.left = new Node (3);
    int d = depthOfTree (root, 1);
    printLevelOrder (root, d);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48426410_48426499_1_10
48426410_48426526_1_15
Title: Java Print string input as an array with each word in string on a new line 
----------------------------------------

public static void main (String [] args) {
    String text = "hello I am here, how are  you?";
    String [] separated = text.split (" ");
    for (String word : separated) {
        if (! word.trim ().isEmpty ()) {
            System.out.println (word);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String text = "THIS IS A SAMPLE TEXT";
    String [] separated = text.split (" ");
    if (text.isEmpty ()) {
        System.out.println ("empty text");
    } else {
        for (Integer position = 0;
        position < separated.length; position ++) {
            System.out.println (separated [position]);
        }
    }
    int WordCount = separated.length;
    System.out.println ("number of words: " + WordCount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_155_226
48454072_48456290_234_257
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    System.out.println ("====> ");
    if (evt.getSource () == (JButton) button) {
        System.out.println ("====> login");
        StudentIDSS = textfield.getText ();
        StudentIDPrint.setText ("Student IDS Are:" + StudentIDSS);
        if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        if (EnterSID.isVisible ()) EnterSID.setVisible (false);

        if (! textfield.isVisible ()) textfield.setVisible (true);

        if (! Thank.isVisible ()) Thank.setVisible (true);

        if (AdminText.isVisible ()) AdminText.setVisible (false);

        if (AdminButton.isVisible ()) AdminButton.setVisible (false);

        if (button.isVisible ()) button.setVisible (false);

        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! goback.isVisible ()) goback.setVisible (true);

    }
    if (evt.getSource () == (JButton) goback) {
        System.out.println ("====> goback");
        String p = textfield.getText ();
        if (p != null && ! p.equals ("")) textfield.setText ("");

        if (goback.isVisible ()) goback.setVisible (false);

        if (! button.isVisible ()) button.setVisible (true);

        if (! EnterSID.isVisible ()) EnterSID.setVisible (true);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminButton.isVisible ()) AdminButton.setVisible (true);

        if (! WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (true);

        if (Thank.isVisible ()) Thank.setVisible (false);

        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

    }
    if (evt.getSource () == (JButton) AdminButton) {
        System.out.println ("====> AdminButton");
        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

        String p = AdminText.getText ();
        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (p.compareTo ("Password") == 0) {
            if (! Thank.isVisible ()) Thank.setVisible (true);

            if (! goback.isVisible ()) goback.setVisible (true);

            if (! AdminThank.isVisible ()) AdminThank.setVisible (true);

            if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        } else {
            if (! goback.isVisible ()) goback.setVisible (true);

            if (AdminText.isVisible ()) AdminText.setVisible (false);

        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    StudentIDSS = textfield.getText ();
    EnterSID.setVisible (false);
    textfield.setVisible (true);
    Thank.setVisible (true);
    AdminText.setVisible (false);
    AdminButton.setVisible (false);
    button.setVisible (false);
    WaukeeAPEX.setVisible (false);
    textfield.setVisible (false);
    goback.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_155_226
48454072_48456290_262_277
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    System.out.println ("====> ");
    if (evt.getSource () == (JButton) button) {
        System.out.println ("====> login");
        StudentIDSS = textfield.getText ();
        StudentIDPrint.setText ("Student IDS Are:" + StudentIDSS);
        if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        if (EnterSID.isVisible ()) EnterSID.setVisible (false);

        if (! textfield.isVisible ()) textfield.setVisible (true);

        if (! Thank.isVisible ()) Thank.setVisible (true);

        if (AdminText.isVisible ()) AdminText.setVisible (false);

        if (AdminButton.isVisible ()) AdminButton.setVisible (false);

        if (button.isVisible ()) button.setVisible (false);

        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! goback.isVisible ()) goback.setVisible (true);

    }
    if (evt.getSource () == (JButton) goback) {
        System.out.println ("====> goback");
        String p = textfield.getText ();
        if (p != null && ! p.equals ("")) textfield.setText ("");

        if (goback.isVisible ()) goback.setVisible (false);

        if (! button.isVisible ()) button.setVisible (true);

        if (! EnterSID.isVisible ()) EnterSID.setVisible (true);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminButton.isVisible ()) AdminButton.setVisible (true);

        if (! WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (true);

        if (Thank.isVisible ()) Thank.setVisible (false);

        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

    }
    if (evt.getSource () == (JButton) AdminButton) {
        System.out.println ("====> AdminButton");
        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

        String p = AdminText.getText ();
        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (p.compareTo ("Password") == 0) {
            if (! Thank.isVisible ()) Thank.setVisible (true);

            if (! goback.isVisible ()) goback.setVisible (true);

            if (! AdminThank.isVisible ()) AdminThank.setVisible (true);

            if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        } else {
            if (! goback.isVisible ()) goback.setVisible (true);

            if (AdminText.isVisible ()) AdminText.setVisible (false);

        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent al) {
    textfield.setVisible (false);
    EnterSID.setVisible (false);
    button.setVisible (false);
    AdminText.setVisible (true);
    AdminButton.setVisible (false);
    AdminButton2.setVisible (true);
    goback.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_155_226
48454072_48456290_283_306
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    System.out.println ("====> ");
    if (evt.getSource () == (JButton) button) {
        System.out.println ("====> login");
        StudentIDSS = textfield.getText ();
        StudentIDPrint.setText ("Student IDS Are:" + StudentIDSS);
        if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        if (EnterSID.isVisible ()) EnterSID.setVisible (false);

        if (! textfield.isVisible ()) textfield.setVisible (true);

        if (! Thank.isVisible ()) Thank.setVisible (true);

        if (AdminText.isVisible ()) AdminText.setVisible (false);

        if (AdminButton.isVisible ()) AdminButton.setVisible (false);

        if (button.isVisible ()) button.setVisible (false);

        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! goback.isVisible ()) goback.setVisible (true);

    }
    if (evt.getSource () == (JButton) goback) {
        System.out.println ("====> goback");
        String p = textfield.getText ();
        if (p != null && ! p.equals ("")) textfield.setText ("");

        if (goback.isVisible ()) goback.setVisible (false);

        if (! button.isVisible ()) button.setVisible (true);

        if (! EnterSID.isVisible ()) EnterSID.setVisible (true);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminButton.isVisible ()) AdminButton.setVisible (true);

        if (! WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (true);

        if (Thank.isVisible ()) Thank.setVisible (false);

        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

    }
    if (evt.getSource () == (JButton) AdminButton) {
        System.out.println ("====> AdminButton");
        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

        String p = AdminText.getText ();
        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (p.compareTo ("Password") == 0) {
            if (! Thank.isVisible ()) Thank.setVisible (true);

            if (! goback.isVisible ()) goback.setVisible (true);

            if (! AdminThank.isVisible ()) AdminThank.setVisible (true);

            if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        } else {
            if (! goback.isVisible ()) goback.setVisible (true);

            if (AdminText.isVisible ()) AdminText.setVisible (false);

        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent al2) {
    String p = AdminText.getText ();
    AdminButton2.setVisible (false);
    textfield.setVisible (false);
    AdminText.setVisible (true);
    AdminText.getSelectedText ();
    WaukeeAPEX.setVisible (false);
    if (p.compareTo ("Password") == 0) {
        Thank.setVisible (true);
        goback.setVisible (true);
        AdminThank.setVisible (true);
        StudentIDPrint.setVisible (true);
    } else {
        goback.setVisible (true);
        AdminText.setVisible (false);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_155_226
48454072_48456290_311_333
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    System.out.println ("====> ");
    if (evt.getSource () == (JButton) button) {
        System.out.println ("====> login");
        StudentIDSS = textfield.getText ();
        StudentIDPrint.setText ("Student IDS Are:" + StudentIDSS);
        if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        if (EnterSID.isVisible ()) EnterSID.setVisible (false);

        if (! textfield.isVisible ()) textfield.setVisible (true);

        if (! Thank.isVisible ()) Thank.setVisible (true);

        if (AdminText.isVisible ()) AdminText.setVisible (false);

        if (AdminButton.isVisible ()) AdminButton.setVisible (false);

        if (button.isVisible ()) button.setVisible (false);

        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! goback.isVisible ()) goback.setVisible (true);

    }
    if (evt.getSource () == (JButton) goback) {
        System.out.println ("====> goback");
        String p = textfield.getText ();
        if (p != null && ! p.equals ("")) textfield.setText ("");

        if (goback.isVisible ()) goback.setVisible (false);

        if (! button.isVisible ()) button.setVisible (true);

        if (! EnterSID.isVisible ()) EnterSID.setVisible (true);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminButton.isVisible ()) AdminButton.setVisible (true);

        if (! WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (true);

        if (Thank.isVisible ()) Thank.setVisible (false);

        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (AdminThank.isVisible ()) AdminThank.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

    }
    if (evt.getSource () == (JButton) AdminButton) {
        System.out.println ("====> AdminButton");
        if (AdminButton2.isVisible ()) AdminButton2.setVisible (false);

        if (textfield.isVisible ()) textfield.setVisible (false);

        if (! AdminText.isVisible ()) AdminText.setVisible (true);

        String p = AdminText.getText ();
        if (WaukeeAPEX.isVisible ()) WaukeeAPEX.setVisible (false);

        if (p.compareTo ("Password") == 0) {
            if (! Thank.isVisible ()) Thank.setVisible (true);

            if (! goback.isVisible ()) goback.setVisible (true);

            if (! AdminThank.isVisible ()) AdminThank.setVisible (true);

            if (! StudentIDPrint.isVisible ()) StudentIDPrint.setVisible (true);

        } else {
            if (! goback.isVisible ()) goback.setVisible (true);

            if (AdminText.isVisible ()) AdminText.setVisible (false);

        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent rb) {
    goback.setVisible (false);
    button.setVisible (true);
    EnterSID.setVisible (true);
    textfield.setVisible (true);
    AdminButton.setVisible (true);
    WaukeeAPEX.setVisible (true);
    Thank.setVisible (false);
    AdminButton2.setVisible (false);
    AdminThank.setVisible (false);
    AdminText.setVisible (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_234_257
48454072_48456290_262_277
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    StudentIDSS = textfield.getText ();
    EnterSID.setVisible (false);
    textfield.setVisible (true);
    Thank.setVisible (true);
    AdminText.setVisible (false);
    AdminButton.setVisible (false);
    button.setVisible (false);
    WaukeeAPEX.setVisible (false);
    textfield.setVisible (false);
    goback.setVisible (true);
}
----------------------------------------

public void actionPerformed (ActionEvent al) {
    textfield.setVisible (false);
    EnterSID.setVisible (false);
    button.setVisible (false);
    AdminText.setVisible (true);
    AdminButton.setVisible (false);
    AdminButton2.setVisible (true);
    goback.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_234_257
48454072_48456290_283_306
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    StudentIDSS = textfield.getText ();
    EnterSID.setVisible (false);
    textfield.setVisible (true);
    Thank.setVisible (true);
    AdminText.setVisible (false);
    AdminButton.setVisible (false);
    button.setVisible (false);
    WaukeeAPEX.setVisible (false);
    textfield.setVisible (false);
    goback.setVisible (true);
}
----------------------------------------

public void actionPerformed (ActionEvent al2) {
    String p = AdminText.getText ();
    AdminButton2.setVisible (false);
    textfield.setVisible (false);
    AdminText.setVisible (true);
    AdminText.getSelectedText ();
    WaukeeAPEX.setVisible (false);
    if (p.compareTo ("Password") == 0) {
        Thank.setVisible (true);
        goback.setVisible (true);
        AdminThank.setVisible (true);
        StudentIDPrint.setVisible (true);
    } else {
        goback.setVisible (true);
        AdminText.setVisible (false);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_262_277
48454072_48456290_283_306
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent al) {
    textfield.setVisible (false);
    EnterSID.setVisible (false);
    button.setVisible (false);
    AdminText.setVisible (true);
    AdminButton.setVisible (false);
    AdminButton2.setVisible (true);
    goback.setVisible (true);
}
----------------------------------------

public void actionPerformed (ActionEvent al2) {
    String p = AdminText.getText ();
    AdminButton2.setVisible (false);
    textfield.setVisible (false);
    AdminText.setVisible (true);
    AdminText.getSelectedText ();
    WaukeeAPEX.setVisible (false);
    if (p.compareTo ("Password") == 0) {
        Thank.setVisible (true);
        goback.setVisible (true);
        AdminThank.setVisible (true);
        StudentIDPrint.setVisible (true);
    } else {
        goback.setVisible (true);
        AdminText.setVisible (false);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_262_277
48454072_48456290_311_333
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent al) {
    textfield.setVisible (false);
    EnterSID.setVisible (false);
    button.setVisible (false);
    AdminText.setVisible (true);
    AdminButton.setVisible (false);
    AdminButton2.setVisible (true);
    goback.setVisible (true);
}
----------------------------------------

public void actionPerformed (ActionEvent rb) {
    goback.setVisible (false);
    button.setVisible (true);
    EnterSID.setVisible (true);
    textfield.setVisible (true);
    AdminButton.setVisible (true);
    WaukeeAPEX.setVisible (true);
    Thank.setVisible (false);
    AdminButton2.setVisible (false);
    AdminThank.setVisible (false);
    AdminText.setVisible (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48454072_48456290_283_306
48454072_48456290_311_333
Title: Trying To Set A String From A JTextField 
----------------------------------------

public void actionPerformed (ActionEvent al2) {
    String p = AdminText.getText ();
    AdminButton2.setVisible (false);
    textfield.setVisible (false);
    AdminText.setVisible (true);
    AdminText.getSelectedText ();
    WaukeeAPEX.setVisible (false);
    if (p.compareTo ("Password") == 0) {
        Thank.setVisible (true);
        goback.setVisible (true);
        AdminThank.setVisible (true);
        StudentIDPrint.setVisible (true);
    } else {
        goback.setVisible (true);
        AdminText.setVisible (false);
    }
}
----------------------------------------

public void actionPerformed (ActionEvent rb) {
    goback.setVisible (false);
    button.setVisible (true);
    EnterSID.setVisible (true);
    textfield.setVisible (true);
    AdminButton.setVisible (true);
    WaukeeAPEX.setVisible (true);
    Thank.setVisible (false);
    AdminButton2.setVisible (false);
    AdminThank.setVisible (false);
    AdminText.setVisible (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48477650_48478603_7_25
48477650_48478883_1_18
Title: Function won't return the value I need it to 
----------------------------------------

public static int findWhichLocation (int array []) {
    int location = 0;
    if (array [0] > 99 && array [0] < 200) {
        location = 1;
    } else if (array [0] > 199 && array [0] < 300) {
        location = 2;
    } else if (array [0] > 299 && array [0] <= 400) {
        location = 3;
    } else if (array [0] > 399 && array [0] < 500) {
        location = 4;
    } else if (array [0] > 499 && array [0] < 600) {
        location = 5;
    }

    return location;
}
----------------------------------------

public static int findWhichLocation (int array []) {
    if (array [0] > 99 && array [0] < 200) {
        return 1;
    } else if (array [0] > 199 && array [0] < 300) {
        return 2;
    } else if (array [0] > 299 && array [0] <= 400) {
        return 3;
    } else if (array [0] > 399 && array [0] < 500) {
        return 4;
    } else if (array [0] > 499 && array [0] < 600) {
        return 5;
    }

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48488694_48488823_3_19
48488694_48489237_3_18
Title: Validating user's input for only int or double values 
----------------------------------------

public static double [] inputmethod () {
    double list [] = new double [10];
    Scanner in = new Scanner (System.in);
    double number;
    System.out.println ("please enter a double : ");
    for (int i = 0;
    i < list.length; i ++) {
        while (! in.hasNextDouble ()) {
            in.next ();
            System.out.println ("Wrong input, Please enter a double! ");
        }
        list [i] = in.nextDouble ();
        System.out.println ("you entered a double, Enter another double: ");
    }
    return list;
}
----------------------------------------

public static double [] inputmethod () {
    double list [] = new double [10];
    Scanner in = new Scanner (System.in);
    double number;
    System.out.print ("Please enter a double: ");
    for (int i = 0;
    i < list.length; i ++) {
        while (! in.hasNextDouble ()) {
            in.next ();
            System.out.print ("Wrong input! Please enter a double: ");
        }
        System.out.print ("You entered a double! Enter another double: ");
        list [i] = in.nextDouble ();
    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48494282_48494713_1_45
48494282_48494784_1_33
Title: Filling a double[][] from the CSV file 
----------------------------------------

public double [] [] getParsedTable () throws IOException {
    double [] [] table = new double [4] [10];
    int indexRow = 0;
    int indexColumn = 0;
    BufferedReader br = new BufferedReader (new FileReader (fileName));
    String line = null;
    try {
        br.readLine ();
        br.readLine ();
        br.readLine ();
        line = br.readLine ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    while (line != null && ! line.isEmpty ()) {
        String [] array = line.split (",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", - 1);
        for (int i = 1;
        i < array.length; i ++) {
            table [indexRow] [indexColumn] = Double.parseDouble (array [i]);
            indexColumn ++;
        }
        indexColumn = 0;
        indexRow ++;
        try {
            line = br.readLine ();
        } catch (IOException e) {
            e.printStackTrace ();
        }
    }
    System.out.print (Arrays.deepToString (table));
    return table;
}
----------------------------------------

public double [] [] getParsedTable () throws IOException {
    double [] [] table = new double [4] [10];
    int indexRow = 0;
    int indexColumn = 0;
    BufferedReader br = new BufferedReader (new FileReader (fileName));
    br.readLine ();
    br.readLine ();
    br.readLine ();
    String line;
    while (true) {
        line = br.readLine ();
        if (line == null) break;

        int index = 0;
        while (true) {
            index = line.indexOf (",", index) + 1;
            if (Character.isDigit (line.charAt (index))) {
                break;
            }
        }
        String [] array = line.substring (index).split (",");
        for (int i = 0;
        i < array.length; i ++) {
            table [indexRow] [indexColumn] = Double.parseDouble (array [i]);
            indexColumn ++;
        }
        indexColumn = 0;
        indexRow ++;
    }
    System.out.print (Arrays.deepToString (table));
    return table;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4850098_7104977_16_24
4850098_7104977_6_14
Title: Spring 3 MVC Handle multiple form submit with a single Controller 
----------------------------------------

@RequestMapping (value = "/register.do", method = RequestMethod.POST)
public String registerFormPost (@ModelAttribute ("registerForm")
RegisterForm registerForm, BindingResult result, final Model model) {
    registerValidator.validate (registerForm, result);
    if (result.hasErrors ()) {
        model.addAttribute ("contactForm", new ContactForm ());
        return "contactOrRegister";
    }
}
----------------------------------------

@RequestMapping (value = "/contact.do", method = RequestMethod.POST)
public String contactFormPost (@ModelAttribute ("contactForm")
ContactForm contactForm, BindingResult result, final Model model) {
    contactValidator.validate (contactForm, result);
    if (result.hasErrors ()) {
        model.addAttribute ("registerForm", new RegisterForm ());
        return "contactOrRegister";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48501795_48501882_3_22
48501795_48502243_7_18
Title: "how to get the sum average minimum and maximum of five numbers-java using do-while loop" 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    double average;
    int count = 0, sum = 0, num = 0;
    int max = Integer.MIN_VALUE;
    int min = Integer.MAX_VALUE;
    System.out.println ("Please enter the number of numbers you wish to evaluate:");
    do {
        if (num > max) max = num;

        if (num < min) min = num;

        num = scan.nextInt ();
        sum += num;
        count ++;
    } while (count < 5);
    average = sum / 5;
    System.out.println ("Your average is" + average);
    System.out.println ("The sum is:" + sum);
    System.out.printf ("Your maximum number is %d\n", max);
    System.out.printf ("Your minimum number is %d\n", min);
}
----------------------------------------

public static void main (String [] args) {
    List < Integer > numbers = new ArrayList < > ();
    Scanner in = new Scanner (System.in);
    while (true) {
        System.out.println ("Next number?");
        numbers.add (in.nextInt ());
        IntSummaryStatistics summaryStatistics = numbers.stream ().mapToInt (Integer :: valueOf).summaryStatistics ();
        System.out.println (String.format ("Max: %d, Min: %d, Average: %s, Sum: %d", summaryStatistics.getMax (), summaryStatistics.getMin (), summaryStatistics.getAverage (), summaryStatistics.getSum ()));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48505050_48505145_1_10
48505050_48505744_1_15
Title: How to make fragment replaced by a specific fragment when back button pressed 
----------------------------------------

@Override
public void onBackPressed () {
    int count = getFragmentManager ().getBackStackEntryCount ();
    if (count == 0) {
        super.onBackPressed ();
    } else {
        getFragmentManager ().popBackStack ();
    }
}
----------------------------------------

@Override
public void onBackPressed () {
    int stackCount = getFragmentManager ().getBackStackEntryCount ();
    if (stackCount == 1) {
        super.onBackPressed ();
    } else {
        FragmentManager fm = getFragmentManager ();
        fm.popBackStack (null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        FragmentTransaction transaction = fm.beginTransaction ();
        transaction.replace (R.id.container, new HomeFragment ());
        transaction.commit ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48508331_48511109_1_29
48508331_48515069_1_49
Title: "Level order traversal of Binary Tree in ""Reverse Order"" line by line with O(n) time complexity" 
----------------------------------------

public void levelOrderTraversalInReverseOrderUsingStackAndQueue (Node root) {
    Map < Integer, Stack < Node > > levelMap = new TreeMap < > ((a, b) -> {
        return - (a - b);
    });
    Queue < Node > queue = new LinkedList < > ();
    Node temp;
    int level = 0;
    queue.add (root);
    levelMap.put (level, new Stack < > ());
    levelMap.get (level).push (root);
    while (! queue.isEmpty ()) {
        temp = queue.poll ();
        if (temp.left != null) {
            level ++;
            queue.add (temp.left);
            levelMap.put (level, new Stack < > ());
            levelMap.get (level).push (temp.left);
        }
        if (temp.right != null) {
            queue.add (temp.right);
            levelMap.get (level).push (temp.right);
        }
    }
    for (Integer lvl : levelMap.keySet ()) {
        System.out.print ("level " + lvl + "\t:");
        for (Node node : levelMap.get (lvl)) {
            System.out.print (node + "\t");
        }
        System.out.println ();
    }
}
----------------------------------------

public void levelOrderTraversalInReverseOrderUsingStackAndQueue (Node root) {
    Stack < Node > stack = new Stack < > ();
    Queue < Node > queue1 = new LinkedList < > ();
    Queue < Node > queue2 = new LinkedList < > ();
    Node temp;
    queue1.add (root);
    while (! queue1.isEmpty () || ! queue1.isEmpty ()) {
        while (! queue1.isEmpty ()) {
            temp = queue1.poll ();
            stack.push (temp);
            if (temp.right != null) {
                queue2.add (temp.right);
            }
            if (temp.left != null) {
                queue2.add (temp.left);
            }
        }
        stack.push (new Node (- 99999));
        while (! queue2.isEmpty ()) {
            temp = queue2.poll ();
            stack.push (temp);
            if (temp.right != null) {
                queue1.add (temp.right);
            }
            if (temp.left != null) {
                queue1.add (temp.left);
            }
        }
        stack.push (new Node (- 99999));
    }
    while (! stack.isEmpty ()) {
        temp = stack.pop ();
        if (temp.data == - 99999) {
            System.out.println ();
            continue;
        }
        System.out.print (temp.data + "\t");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
48509510_48548194_108_125
48509510_48548194_29_53
Title: Reopen Java window after hiding it on close 
----------------------------------------

public void run () {
    try {
        for (String line = reader.readLine ();
        line != null; line = reader.readLine ()) readBuffer.add (line);

    } catch (IOException e) {
        System.out.println ("Client disconnected");
        e.printStackTrace ();
        synchronized (clients) {
            clients.remove (me);
        }
        System.out.println ("removed " + clients.isEmpty ());
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            Client c = new Client (ss.accept ());
            if (multipleClients || clients.isEmpty ()) {
                System.out.println ("writing " + new String (data));
                c.write (displayData (data, index [0]));
                synchronized (clients) {
                    clients.add (c);
                }
            } else c.write ("refused");

        } catch (IOException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4850957_17699874_16_28
4850957_29996025_33_77
Title: How to force timeout for DriverManager.getConnection() method call? 
----------------------------------------

public java.sql.Connection getConnection () {
    Dummy d = new Dummy ();
    d.start ();
    try {
        for (int i = 1;
        i <= 10; i ++) {
            if (d.sleep) {
                Thread.sleep (1000);
            }
        }
    } catch (InterruptedException e) {
    }
    return d.conn;
}
----------------------------------------

public static Connection getConnection (String url, String user, String password, String driver, int timeoutInSeconds) throws SQLException, ClassNotFoundException {
    checkStringOrThrow (url, "url");
    checkStringOrThrow (user, "user");
    checkStringOrThrow (password, "password");
    checkStringOrThrow (driver, "driver");
    if (timeoutInSeconds < 1) {
        throw new IllegalArgumentException ("timeoutInSeconds must be positive");
    }
    _url = url;
    _user = user;
    _password = password;
    _driver = driver;
    ConnectWithTimeout conn = new ConnectWithTimeout ();
    conn.start ();
    try {
        for (int i = 0;
        i < timeoutInSeconds; i ++) {
            if (_sleep) {
                Thread.sleep (1000);
            }
        }
    } catch (InterruptedException ex) {
    }
    if (_sqlException != null) {
        throw _sqlException;
    }
    if (_classNotFoundException != null) {
        throw _classNotFoundException;
    }
    return _connection;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4850957_17699874_16_28
4850957_4851070_11_18
Title: How to force timeout for DriverManager.getConnection() method call? 
----------------------------------------

public java.sql.Connection getConnection () {
    Dummy d = new Dummy ();
    d.start ();
    try {
        for (int i = 1;
        i <= 10; i ++) {
            if (d.sleep) {
                Thread.sleep (1000);
            }
        }
    } catch (InterruptedException e) {
    }
    return d.conn;
}
----------------------------------------

static public Connection getConnection () {
    Dummy d = new Dummy ();
    d.start ();
    try {
        Thread.sleep (2000);
    } catch (InterruptedException e) {
    }
    return d.conn;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4850957_17699874_5_15
4850957_29996025_19_31
Title: How to force timeout for DriverManager.getConnection() method call? 
----------------------------------------

public void run () {
    try {
        String driver = "net.sourceforge.jtds.jdbc.Driver";
        Class.forName (driver).newInstance ();
        DriverManager.setLoginTimeout (10);
        this.conn = DriverManager.getConnection (url, user, pwd);
        sleep = false;
    } catch (Exception e) {
    }
}
----------------------------------------

public void run () {
    try {
        Class.forName (_driver);
        _connection = DriverManager.getConnection (_url, _user, _password);
    } catch (SQLException ex) {
        _sqlException = ex;
    } catch (ClassNotFoundException ex) {
        _classNotFoundException = ex;
    }
    _sleep = false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4850957_29996025_33_77
4850957_4851070_11_18
Title: How to force timeout for DriverManager.getConnection() method call? 
----------------------------------------

public static Connection getConnection (String url, String user, String password, String driver, int timeoutInSeconds) throws SQLException, ClassNotFoundException {
    checkStringOrThrow (url, "url");
    checkStringOrThrow (user, "user");
    checkStringOrThrow (password, "password");
    checkStringOrThrow (driver, "driver");
    if (timeoutInSeconds < 1) {
        throw new IllegalArgumentException ("timeoutInSeconds must be positive");
    }
    _url = url;
    _user = user;
    _password = password;
    _driver = driver;
    ConnectWithTimeout conn = new ConnectWithTimeout ();
    conn.start ();
    try {
        for (int i = 0;
        i < timeoutInSeconds; i ++) {
            if (_sleep) {
                Thread.sleep (1000);
            }
        }
    } catch (InterruptedException ex) {
    }
    if (_sqlException != null) {
        throw _sqlException;
    }
    if (_classNotFoundException != null) {
        throw _classNotFoundException;
    }
    return _connection;
}
----------------------------------------

static public Connection getConnection () {
    Dummy d = new Dummy ();
    d.start ();
    try {
        Thread.sleep (2000);
    } catch (InterruptedException e) {
    }
    return d.conn;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4851933_29727677_1_13
4851933_30441228_21_56
Title: Using ImageIO.read with a redirecting URL 
----------------------------------------

public static void main (String args []) throws Exception {
    String url = "http://graph.facebook.com/804672289/picture?width=800";
    HttpClient client = HttpClients.createDefault ();
    HttpResponse response = client.execute (new HttpGet (url));
    BufferedImage image = ImageIO.read (input);
    if (image == null) {
        throw new RuntimeException ("Ooops");
    } else {
        System.out.println (image.getHeight ());
    }
}
----------------------------------------

public static void main (String [] args) {
    int height = 0, width = 0;
    String imagePath = "https://www.sampledomain.com/sampleimage.jpg";
    System.out.println ("URL==" + imagePath);
    InputStream connection;
    try {
        URL url = new URL (imagePath);
        if (imagePath.indexOf ("https://") != - 1) {
            final SSLContext sc = SSLContext.getInstance ("SSL");
            sc.init (null, getTrustingManager (), new java.security.SecureRandom ());
            HttpsURLConnection.setDefaultSSLSocketFactory (sc.getSocketFactory ());
            connection = url.openStream ();
        } else {
            connection = url.openStream ();
        }
        BufferedImage bufferedimage = ImageIO.read (connection);
        width = bufferedimage.getWidth ();
        height = bufferedimage.getHeight ();
        System.out.println ("width=" + width);
        System.out.println ("height=" + height);
    } catch (MalformedURLException e) {
        System.out.println ("URL is not correct : " + imagePath);
    } catch (IOException e) {
        System.out.println ("IOException Occurred : " + e);
    } catch (Exception e) {
        System.out.println ("Exception Occurred  : " + e);
    }
}
----------------------------------------

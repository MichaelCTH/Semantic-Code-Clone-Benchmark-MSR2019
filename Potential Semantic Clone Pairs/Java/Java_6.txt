$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_21_29
12052232_12052750_33_41
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        a.acquire (1);
        System.out.println ("Doing B");
        b.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        b.acquire (1);
        System.out.println ("Doing C");
        c.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_21_29
12052232_12052750_9_17
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        a.acquire (1);
        System.out.println ("Doing B");
        b.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        c.acquire (1);
        System.out.println ("Doing A");
        a.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_21_29
12052232_12053007_22_31
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        a.acquire (1);
        System.out.println ("Doing B");
        b.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            b.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task B");
            c.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_21_29
12052232_12053007_36_45
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        a.acquire (1);
        System.out.println ("Doing B");
        b.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            c.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task C");
            a.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_21_29
12052232_12053007_8_17
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        a.acquire (1);
        System.out.println ("Doing B");
        b.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            a.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task A");
            b.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_33_41
12052232_12052750_9_17
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        b.acquire (1);
        System.out.println ("Doing C");
        c.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        c.acquire (1);
        System.out.println ("Doing A");
        a.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_33_41
12052232_12053007_22_31
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        b.acquire (1);
        System.out.println ("Doing C");
        c.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            b.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task B");
            c.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_33_41
12052232_12053007_36_45
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        b.acquire (1);
        System.out.println ("Doing C");
        c.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            c.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task C");
            a.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_33_41
12052232_12053007_8_17
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        b.acquire (1);
        System.out.println ("Doing C");
        c.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            a.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task A");
            b.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_9_17
12052232_12053007_22_31
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        c.acquire (1);
        System.out.println ("Doing A");
        a.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            b.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task B");
            c.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_9_17
12052232_12053007_36_45
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        c.acquire (1);
        System.out.println ("Doing A");
        a.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            c.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task C");
            a.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052232_12052750_9_17
12052232_12053007_8_17
Title: Thread syncronization 
----------------------------------------

public void run () {
    try {
        c.acquire (1);
        System.out.println ("Doing A");
        a.release (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            a.acquire (1);
            Thread.sleep ((long) (Math.random () * 1000));
            System.out.println ("performing task A");
            b.release (1);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12052921_12053009_12_25
12052921_12053138_1_14
Title: Substring-based method not running properly 
----------------------------------------

private String extractRow (int row, String inputString) {
    String rowString1 = inputString.substring (row, row + 1);
    String rowString2 = inputString.substring (row + 6, row + 7);
    String rowString3 = inputString.substring (row + 12, row + 13);
    String rowString4 = inputString.substring (row + 18, row + 19);
    String rowString5 = inputString.substring (row + 24, row + 25);
    String rowString6 = inputString.substring (row + 30, row + 31);
    String rowString7 = inputString.substring (row + 36, row + 37);
    return rowString1 + "|" + rowString2 + "|" + rowString3 + "|" + rowString4 + "|" + rowString5 + "|" + rowString6 + "|" + rowString7 + "|";
}
----------------------------------------

private String extractRow (int row, String inputString) {
    String rowString1 = inputString.substring (row, row + 1);
    String rowString2 = inputString.substring (row + 6, row + 7);
    String rowString3 = inputString.substring (row + 12, row + 13);
    String rowString4 = inputString.substring (row + 18, row + 19);
    String rowString5 = inputString.substring (row + 24, row + 25);
    String rowString6 = inputString.substring (row + 30, row + 31);
    String rowString7 = inputString.substring (row + 36, row + 37);
    return rowString1 + "|" + rowString2 + "|" + rowString3 + "|" + rowString4 + "|" + rowString5 + "|" + rowString6 + "|" + rowString7 + "|";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12053241_12053669_33_43
12053241_12110151_48_70
Title: Sentence comparison with NLP 
----------------------------------------

public static void main (String [] args) {
    String sent1 = "Mary and Meera are my classmates.";
    String sent2 = "Meera and Mary are my classmates.";
    String sent3 = "Alice and Bobe are not my classmates.";
    String sent4 = "Some totally different sentence.";
    System.out.println ("Distance between \n'" + sent1 + "' \nand '" + sent2 + "': \n" + computeDistance (sent1, sent2));
    System.out.println ("Distance between \n'" + sent1 + "' \nand '" + sent3 + "': \n" + computeDistance (sent1, sent3));
    System.out.println ("Distance between \n'" + sent1 + "' \nand '" + sent4 + "': \n" + computeDistance (sent1, sent4));
}
----------------------------------------

public static void main (String [] args) {
    try {
        ArrayList < String > sentences = null;
        sentences = new ArrayList < String > ();
        sentences.add ("Mary and Meera are my classmates.");
        sentences.add ("Mary and Meera are my classmates.");
        sentences.add ("Meera and Mary are my classmates.");
        sentences.add ("Alice and Bobe are not my classmates.");
        sentences.add ("Some totally different sentence.");
        wordAnalyser (sentences);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12054287_12054333_2_10
12054287_12054360_3_12
Title: "Sort objects of any type java" 
----------------------------------------

public void sort (T [] s) {
    for (int i = 0;
    i < s.length; i ++) {
        for (int j = i + 1;
        j < s.length; j ++) {
            if (s [i].compareTo (s [j]) > 0) {
                T t = s [i];
                s [i] = s [j];
                s [j] = t;
            }
        }
    }
}
----------------------------------------

static void sort (Comparable [] s) {
    for (int i = 0;
    i < s.length; i ++) {
        for (int j = i + 1;
        j < s.length; j ++) {
            if (s [i].compareTo (s [j]) > 0) {
                Comparable t;
                t = s [i];
                s [i] = s [j];
                s [j] = t;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12054287_12054333_2_10
12054287_12054417_1_12
Title: "Sort objects of any type java" 
----------------------------------------

public void sort (T [] s) {
    for (int i = 0;
    i < s.length; i ++) {
        for (int j = i + 1;
        j < s.length; j ++) {
            if (s [i].compareTo (s [j]) > 0) {
                T t = s [i];
                s [i] = s [j];
                s [j] = t;
            }
        }
    }
}
----------------------------------------

static < T extends Comparable < ? super T > > void sort (T [] s) {
    for (int i = 0;
    i < s.length; i ++) {
        for (int j = i + 1;
        j < s.length; j ++) {
            if (s [i].compareTo (s [j]) > 0) {
                T t;
                t = s [i];
                s [i] = s [j];
                s [j] = t;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12057214_12057216_57_83
12057214_12060120_28_50
Title: JLayer - Pause and resume song 
----------------------------------------

public boolean play (int pos) {
    valid = true;
    canResume = false;
    try {
        FIS = new FileInputStream (path);
        total = FIS.available ();
        if (pos > - 1) FIS.skip (pos);

        BIS = new BufferedInputStream (FIS);
        player = new Player (BIS);
        new Thread (new Runnable () {
            public void run () {
                try {
                    player.play ();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog (null, "Error playing mp3 file");
                    valid = false;
                }
            }}

        ).start ();
    } catch (Exception e) {
        JOptionPane.showMessageDialog (null, "Error playing mp3 file");
        valid = false;
    }
    return valid;
}
----------------------------------------

public void play () throws JavaLayerException {
    synchronized (playerLock) {
        switch (playerStatus) {
            case NOTSTARTED :
                final Runnable r = new Runnable () {
                    public void run () {
                        playInternal ();
                    }}

                ;
                final Thread t = new Thread (r);
                t.setDaemon (true);
                t.setPriority (Thread.MAX_PRIORITY);
                playerStatus = PLAYING;
                t.start ();
                break;
            case PAUSED :
                resume ();
                break;
            default :
                break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12057460_12057669_1_19
12057460_12057881_1_19
Title: Java programming test for interview 
----------------------------------------

public Solver () {
    functionList = new ArrayList < MathFunction > ();
    MathFunction sqrt = new MathFunction () {
        @Override
        public double calculate (double x) {
            return Math.sqrt (x);
        }}

    ;
    functionList.add (sqrt);
    MathFunction inverse = new MathFunction () {
        @Override
        public double calculate (double x) {
            return 1.0D / x;
        }}

    ;
    functionList.add (inverse);
}
----------------------------------------

public Solver () {
    functionList = new ArrayList < MathFunction > ();
    functionList.add (new MathFunction () {
        @Override
        public double calculate (double x) {
            return 1d / x;
        }}

    );
    functionList.add (new MathFunction () {
        @Override
        public double calculate (double x) {
            return Math.sqrt (x);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12060066_12060132_36_45
12060066_12060132_53_61
Title: Stop a loop in java with graphical interface (buttons) 
----------------------------------------

public void actionPerformed (ActionEvent event) {
    if (thread != null) {
        thread.stopRunning ();
    }
    tsPanel.getRedLight ().setLightOn (false);
    tsPanel.getYellowLight ().setLightOn (false);
    tsPanel.getGreenLight ().setLightOn (false);
    thread = new TrafficSignalCycle (tsPanel);
    thread.start ();
}
----------------------------------------

public void actionPerformed (ActionEvent event) {
    if (thread != null) {
        thread.stopRunning ();
        thread = null;
    }
    tsPanel.getRedLight ().setLightOn (true);
    tsPanel.getYellowLight ().setLightOn (false);
    tsPanel.getGreenLight ().setLightOn (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12077669_12077703_2_30
12077669_45346729_1_29
Title: Ping value in java 
----------------------------------------

public static void main (String [] args) {
    String ip = "localhost";
    String time = "";
    String pingCmd = "ping " + ip;
    Runtime runtime = Runtime.getRuntime ();
    try {
        Process process = runtime.exec (pingCmd);
        BufferedReader in = new BufferedReader (new InputStreamReader (process.getInputStream ()));
        String inputLine = in.readLine ();
        while ((inputLine != null)) {
            if (inputLine.length () > 0 && inputLine.contains ("time")) {
                time = inputLine.substring (inputLine.indexOf ("time"));
                break;
            }
            inputLine = in.readLine ();
        }
        System.out.println ("time --> " + time);
    } catch (Exception ex) {
        System.out.println (ex);
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Enter the host to be pinged : ");
    Scanner sc = new Scanner (in);
    String str = sc.next ();
    System.out.println ("Enter the no. of packets to be sent : ");
    int packets = sc.nextByte ();
    String pingResult;
    int count = 0;
    try {
        String command = "ping -c " + packets + " -w 10 " + str;
        Process process = Runtime.getRuntime ().exec (command);
        BufferedReader reader = new BufferedReader (new InputStreamReader (process.getInputStream ()));
        String inputLine;
        while ((inputLine = reader.readLine ()) != null) {
            if (count == packets + 4) {
                pingResult = (inputLine.substring (inputLine.indexOf ("=")));
                pingResult = (pingResult.substring (pingResult.indexOf ("/") + 1, pingResult.indexOf ("/") + 7));
                System.out.println (pingResult + " ms");
            }
            count ++;
        }
        in.close ();
        if (count == 0) System.out.println ("Wrong host entered.");

    } catch (Exception e) {
        System.out.println ("Exception caught: " + e.toString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12078982_12102173_47_56
12078982_12144220_5_15
Title: Apply '@Rule' after each '@Test' and before each '@After' in JUnit 
----------------------------------------

public void evaluate () throws Throwable {
    try {
        baseStatement.evaluate ();
    } catch (Error e) {
        System.out.println ("I take a Screenshot");
        throw e;
    } finally {
        after ();
    }
}
----------------------------------------

public void evaluate () throws Throwable {
    try {
        statement.evaluate ();
    } catch (Throwable t) {
        captureScreenshot (frameworkMethod.getName ());
        throw t;
    } finally {
        tearDown ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12086981_12087157_15_25
12086981_12227092_21_33
Title: "Open folder on button click with ""My files"" application" 
----------------------------------------

void ListDir (File f) {
    File [] files = f.listFiles ();
    fileList.clear ();
    for (File file : files) {
        fileList.add (file.getPath ());
    }
    ArrayAdapter < String > directoryList = new ArrayAdapter < String > (this, android.R.layout.simple_list_item_1, fileList);
    setListAdapter (directoryList);
}
----------------------------------------

void ListDir (File f) {
    File [] files = f.listFiles ();
    fileList.clear ();
    for (File file : files) {
        fileList.add (file.getPath ());
    }
    ArrayAdapter < String > directoryList = new ArrayAdapter < String > (this, android.R.layout.simple_list_item_1, fileList);
    setListAdapter (directoryList);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12108127_12108209_180_189
12108127_12111465_37_50
Title: getting the cancel event of Java ProgressMonitor 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            SwingWorkerExample swingWorkerExample = new SwingWorkerExample ();
        }}

    );
}
----------------------------------------

public static void main (String args []) {
    EventQueue.invokeLater (new Runnable () {
        public void run () {
            JFrame frame = new JFrame ();
            frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            frame.setContentPane (new TempProject ());
            frame.pack ();
            frame.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12108127_12108209_44_68
12108127_12111465_11_21
Title: getting the cancel event of Java ProgressMonitor 
----------------------------------------

protected ArrayList < Integer > doInBackground () {
    if (javax.swing.SwingUtilities.isEventDispatchThread ()) {
        System.out.println ("javax.swing.SwingUtilities.isEventDispatchThread() returned true.");
    }
    Integer tmpValue = new Integer (1);
    ArrayList < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < 100; i ++) {
        for (int j = 0;
        j < 100; j ++) {
            tmpValue = FindNextPrime (tmpValue.intValue ());
            if (isCancelled ()) {
                System.out.println ("SwingWorker - isCancelled");
                return list;
            }
        }
        publish (new Integer (i));
        list.add (tmpValue);
    }
    return list;
}
----------------------------------------

protected Integer doInBackground () throws Exception {
    int i = 0;
    while (i ++ < 100 && ! pm.isCanceled ()) {
        System.out.println (i);
        publish (i);
        Thread.sleep (100);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12115275_12115436_42_73
12115275_12115436_58_68
Title: How to move a JPanel 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    JFrame owner = (JFrame) SwingUtilities.getWindowAncestor ((Component) e.getSource ());
    final JDialog dialog = new JDialog (owner, "Dialog", ModalityType.APPLICATION_MODAL);
    dialog.getContentPane ().add (panel);
    dialog.pack ();
    dialog.setLocation (0, 0);
    int delay = 20;
    new Timer (delay, new ActionListener () {
        int x = 0;
        int y = 0;
        Dimension scrn = Toolkit.getDefaultToolkit ().getScreenSize ();
        @Override
        public void actionPerformed (ActionEvent e) {
            int maxX = scrn.width - dialog.getWidth ();
            int maxY = scrn.height - dialog.getHeight ();
            if (x < maxX && y < maxY) {
                x ++;
                y ++;
                dialog.setLocation (x, y);
            } else {
                ((Timer) e.getSource ()).stop ();
            }
        }}

    ).start ();
    dialog.setVisible (true);
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int maxX = scrn.width - dialog.getWidth ();
    int maxY = scrn.height - dialog.getHeight ();
    if (x < maxX && y < maxY) {
        x ++;
        y ++;
        dialog.setLocation (x, y);
    } else {
        ((Timer) e.getSource ()).stop ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12123854_12123997_34_42
12123854_12124791_1_17
Title: Java: Why are my object arrays being created & having their references passed so slowly? 
----------------------------------------

public static void main (String args []) {
    T1 t = new T1 ();
    long st = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        t.createTransitionTerms (RelevantSubwordHitIndexType.FIRST_INDEX);
    }
    long et = System.currentTimeMillis ();
    System.out.println (et - st);
}
----------------------------------------

public static void main (String [] args) {
    List < MyTest > l = new ArrayList < MyTest > ();
    for (int i = 0;
    i < 1000000; i ++) {
        l.add (new MyTest ());
    }
    long start = System.nanoTime ();
    for (MyTest t : l) {
        t.createTransitionTerms (t.relevantSubwordHitIndexType);
    }
    double dur_nano = System.nanoTime () - start;
    double dur_mili = dur_nano / 1000000.0;
    System.out.println ("Finished in : " + dur_mili);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12123960_12124016_1_14
12123960_27764327_44_98
Title: What does comparison being consistent with equals mean ? What can possibly happen if my class doesn't follow this principle? 
----------------------------------------

public static void main (String [] args) {
    Map < String, String > brokenMap = new TreeMap < String, String > (new Comparator < String > () {
        @Override
        public int compare (String o1, String o2) {
            return 0;
        }}

    );
    brokenMap.put ("a", "a");
    brokenMap.put ("b", "b");
    System.out.println ("size: " + brokenMap.size ());
    System.out.println ("content: " + brokenMap);
}
----------------------------------------

public static void main (String [] args) {
    String format = "%30.30s: %s\n";
    Map < MyObject, Object > map = new HashMap ();
    map.put (new MyObject (1, 100), 0);
    map.put (new MyObject (2, 100), 0);
    map.put (new MyObject (3, 200), 0);
    map.put (new MyObject (4, 100), 0);
    map.put (new MyObject (5, 500), 0);
    System.out.printf (format, "Random Order", map.keySet ());
    Comparator < MyObject > naiveComp = new Comparator < MyObject > () {
        @Override
        public int compare (MyObject o1, MyObject o2) {
            return o2.quantity - o1.quantity;
        }}

    ;
    Map < MyObject, Object > badMap = new TreeMap (naiveComp);
    badMap.putAll (map);
    System.out.printf (format, "Non Consistent and Non Total", badMap.keySet ());
    Comparator < MyObject > slightlyBetterComp = new Comparator < MyObject > () {
        @Override
        public int compare (MyObject o1, MyObject o2) {
            if (o1.equals (o2)) {
                return 0;
            }
            if (o1.quantity == o2.quantity) {
                return - 1;
            }
            return o2.quantity - o1.quantity;
        }}

    ;
    Map < MyObject, Object > slightlyBetterMap = new TreeMap (naiveComp);
    slightlyBetterMap.putAll (map);
    System.out.printf (format, "Non Consistent but Total", slightlyBetterMap.keySet ());
    Comparator < MyObject > betterComp = new Comparator < MyObject > () {
        @Override
        public int compare (MyObject o1, MyObject o2) {
            if (o1.equals (o2)) {
                return 0;
            }
            if (o1.quantity == o2.quantity) {
                return o1.id - o2.id;
            }
            return o2.quantity - o1.quantity;
        }}

    ;
    Map < MyObject, Object > betterMap = new TreeMap (betterComp);
    betterMap.putAll (map);
    System.out.printf (format, "Consistent and Total", betterMap.keySet ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12123960_27764327_68_76
12123960_27764327_85_93
Title: What does comparison being consistent with equals mean ? What can possibly happen if my class doesn't follow this principle? 
----------------------------------------

public int compare (MyObject o1, MyObject o2) {
    if (o1.equals (o2)) {
        return 0;
    }
    if (o1.quantity == o2.quantity) {
        return - 1;
    }
    return o2.quantity - o1.quantity;
}
----------------------------------------

public int compare (MyObject o1, MyObject o2) {
    if (o1.equals (o2)) {
        return 0;
    }
    if (o1.quantity == o2.quantity) {
        return o1.id - o2.id;
    }
    return o2.quantity - o1.quantity;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12152493_12152582_7_14
12152493_14720620_1_17
Title: Java: Thread sequential order 
----------------------------------------

public static void main (String [] args) {
    ExecutorService service = Executors.newSingleThreadExecutor ();
    for (int i = 0;
    i < 10; i ++) {
        service.submit (new MyThread (i));
    }
    try {
        Thread.sleep (2 * 1000);
    } catch (Exception ex) {
    }
    service.shutdown ();
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < 10; i ++) {
        Thread th = new Thread (new Thread1 ());
        th.start ();
        try {
            th.join ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12163291_12163453_1_18
12163291_12172789_1_13
Title: Interleave a List with itself 
----------------------------------------

List < String > interleave (final List < String > original, final int f) {
    final int size = f * original.size ();
    final List < String > originalCopy = new ArrayList < String > ();
    for (String each : original) {
        originalCopy.add (new String (each));
    }
    return new AbstractList < String > () {
        @Override
        public String get (int index) {
            return originalCopy.get (index / f);
        }@Override
        public int size () {
            return size;
        }}

    ;
}
----------------------------------------

List < Foo > interleave (List < Foo > original, int factor) {
    int newSize = original.size () * factor;
    List < Foo > interleaved = new ArrayList < Foo > (newSize);
    for (Foo foo : original) {
        interleaved.add (foo);
        for (int j = 1;
        j < factor; j ++) {
            interleaved.add (new Foo (foo));
        }
    }
    return interleaved;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12163947_12165647_1_73
12163947_52178964_1_18
Title: LDAP: How to authenticate user with connection details 
----------------------------------------

public static Boolean validateLogin (String userName, String userPassword) {
    Hashtable < String, String > env = new Hashtable < String, String > ();
    env.put (Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env.put (Context.PROVIDER_URL, "ldap://" + LDAP_SERVER + ":" + LDAP_SERVER_PORT + "/" + LDAP_BASE_DN);
    env.put (Context.REFERRAL, "follow");
    env.put (Context.SECURITY_AUTHENTICATION, "simple");
    env.put (Context.SECURITY_PRINCIPAL, LDAP_BIND_DN);
    env.put (Context.SECURITY_CREDENTIALS, LDAP_BIND_PASSWORD);
    DirContext ctx;
    try {
        ctx = new InitialDirContext (env);
    } catch (NamingException e) {
        throw new RuntimeException (e);
    }
    NamingEnumeration < SearchResult > results = null;
    try {
        SearchControls controls = new SearchControls ();
        controls.setSearchScope (SearchControls.SUBTREE_SCOPE);
        controls.setCountLimit (1);
        controls.setTimeLimit (5000);
        String searchString = "(&(objectCategory=user)(sAMAccountName=" + userName + "))";
        results = ctx.search ("", searchString, controls);
        if (results.hasMore ()) {
            SearchResult result = (SearchResult) results.next ();
            Attributes attrs = result.getAttributes ();
            Attribute dnAttr = attrs.get ("distinguishedName");
            String dn = (String) dnAttr.get ();
            env.put (Context.SECURITY_PRINCIPAL, dn);
            env.put (Context.SECURITY_CREDENTIALS, userPassword);
            new InitialDirContext (env);
            return true;
        } else return false;

    } catch (AuthenticationException e) {
        return false;
    } catch (NameNotFoundException e) {
        return false;
    } catch (SizeLimitExceededException e) {
        throw new RuntimeException ("LDAP Query Limit Exceeded, adjust the query to bring back less records", e);
    } catch (NamingException e) {
        throw new RuntimeException (e);
    } finally {
        if (results != null) {
            try {
                results.close ();
            } catch (Exception e) {
            }
        }
        if (ctx != null) {
            try {
                ctx.close ();
            } catch (Exception e) {
            }
        }
    }
}
----------------------------------------

public static Boolean validateLogin (String userName, String userPassword) {
    Hashtable < String, String > env = new Hashtable < String, String > ();
    env.put (Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env.put (Context.PROVIDER_URL, "ldap://" + LDAP_SERVER + ":" + LDAP_SERVER_PORT + "/" + LDAP_BASE_DN);
    env.put (Context.SECURITY_AUTHENTICATION, "simple");
    env.put (Context.SECURITY_PRINCIPAL, userName + "@" + LDAP_SERVER);
    env.put (Context.SECURITY_CREDENTIALS, userPassword);
    DirContext ctx;
    try {
        ctx = new InitialDirContext (env);
        return true;
    } catch (Exception e) {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12175985_12176282_49_61
12175985_12176282_63_75
Title: How to make ScheduledThreadPool report errors? 
----------------------------------------

private Runnable wrap (final Runnable runnable) {
    return new Runnable () {
        @Override
        public void run () {
            try {
                runnable.run ();
            } catch (final Throwable t) {
                ueh.uncaughtException (Thread.currentThread (), t);
                throw t;
            }
        }}

    ;
}
----------------------------------------

private < T > Callable < T > wrap (final Callable < T > callable) {
    return new Callable < T > () {
        @Override
        public T call () throws Exception {
            try {
                return callable.call ();
            } catch (Throwable t) {
                ueh.uncaughtException (Thread.currentThread (), t);
                throw t;
            }
        }}

    ;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1219548_1219580_5_20
1219548_1219820_5_20
Title: java and python equivalent of php's foreach($array as $key => $value) 
----------------------------------------

public static void main (String [] args) {
    Map < String, String > stateMap = new HashMap < String, String > ();
    stateMap.put ("ALABAMA", "AL");
    stateMap.put ("ALASKA", "AK");
    stateMap.put ("WYOMING", "WY");
    for (Map.Entry < String, String > state : stateMap.entrySet ()) {
        System.out.printf ("The abbreviation for %s is %s%n", state.getKey (), state.getValue ());
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, String > stateMap = new TreeMap < String, String > ();
    stateMap.put ("ALABAMA", "AL");
    stateMap.put ("ALASKA", "AK");
    stateMap.put ("WYOMING", "WY");
    for (Map.Entry < String, String > state : stateMap.entrySet ()) {
        System.out.printf ("The abbreviation for %s is %s%n", state.getKey (), state.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1220115_1222484_36_62
1220115_1683287_3_21
Title: Resizing JPanel to prepare for printing without removing it from its original position 
----------------------------------------

public static void main (String [] args) throws Exception {
    final MockFrame frame = new MockFrame ();
    frame.setVisible (true);
    final int WIDTH = 500;
    final int HEIGHT = 700;
    final BufferedImage b = new BufferedImage (WIDTH, HEIGHT, BufferedImage.TYPE_INT_ARGB);
    final Graphics2D g2d = (Graphics2D) b.getGraphics ();
    final int previousWidth = frame.getWidth ();
    final int previousHeight = frame.getHeight ();
    frame.setSize (WIDTH, HEIGHT);
    frame.repaint ();
    JOptionPane.showMessageDialog (null, "Press OK when the window has finished resizing");
    frame.print (g2d);
    frame.setSize (previousWidth, previousHeight);
    ImageIO.write (b, "png", new File ("test.png"));
}
----------------------------------------

public static void main (String [] args) throws Exception {
    UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    final JFrame f = new JFrame ("SCCE");
    f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    f.getContentPane ().setLayout (new BorderLayout ());
    f.getContentPane ().add (SCCE.createPanel ());
    final CellRendererPane backgroundRenderer = new CellRendererPane ();
    f.getContentPane ().add (backgroundRenderer, BorderLayout.NORTH);
    f.getContentPane ().add (createSaveButton (backgroundRenderer), BorderLayout.SOUTH);
    f.pack ();
    f.setLocationRelativeTo (null);
    f.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12207483_13543152_7_56
12207483_32244255_3_14
Title: find the frequency of elements in a java array 
----------------------------------------

public static void main (String [] args) {
    try {
        int count = 1, index = 1;
        BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
        System.out.print ("Enter the Size of array : ");
        int size = Integer.parseInt (br.readLine ());
        System.out.print ("Enter the Elements of array : ");
        int arr [] = new int [size];
        for (int i = 0;
        i < arr.length; i ++) {
            System.out.print ("arr[" + i + "] :  ");
            arr [i] = Integer.parseInt (br.readLine ());
        }
        System.out.print ("Sorted Array is :");
        SortingArray.sortDescendind (arr);
        for (int i = 0;
        i < arr.length; i ++) {
            System.out.println ("arr[" + i + "] :  " + arr [i]);
        }
        for (int i = 0;
        i < arr.length;) {
            count = 1;
            for (index = i + 1; index < arr.length; index ++) {
                if (arr [i] == arr [index]) {
                    count ++;
                } else {
                    break;
                }
            }
            System.out.println ("" + arr [i] + "----> " + count);
            i += count;
        }
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public static void main (String args []) {
    HashMap < Integer, Integer > h = new HashMap < Integer, Integer > ();
    int arr [] = new int [] {2, 2, 3, 3, 5, 6, 7, 9, 9, 0};
    for (int i = 0;
    i < arr.length; i ++) {
        if (h.containsKey (arr [i])) {
            h.put (arr [i], h.get (arr [i]) + 1);
        } else {
            h.put (arr [i], 1);
        }
    }
    System.out.println (h);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12207483_13543152_7_56
12207483_34612711_4_34
Title: find the frequency of elements in a java array 
----------------------------------------

public static void main (String [] args) {
    try {
        int count = 1, index = 1;
        BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
        System.out.print ("Enter the Size of array : ");
        int size = Integer.parseInt (br.readLine ());
        System.out.print ("Enter the Elements of array : ");
        int arr [] = new int [size];
        for (int i = 0;
        i < arr.length; i ++) {
            System.out.print ("arr[" + i + "] :  ");
            arr [i] = Integer.parseInt (br.readLine ());
        }
        System.out.print ("Sorted Array is :");
        SortingArray.sortDescendind (arr);
        for (int i = 0;
        i < arr.length; i ++) {
            System.out.println ("arr[" + i + "] :  " + arr [i]);
        }
        for (int i = 0;
        i < arr.length;) {
            count = 1;
            for (index = i + 1; index < arr.length; index ++) {
                if (arr [i] == arr [index]) {
                    count ++;
                } else {
                    break;
                }
            }
            System.out.println ("" + arr [i] + "----> " + count);
            i += count;
        }
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public static void main (String args []) {
    int t, i, j, len, count = 0;
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter number of elements to insert in an array: ");
    len = in.nextInt ();
    int [] arr = new int [len];
    System.out.println ("Enter elements to insert in an array: ");
    for (i = 0; i < len; i ++) {
        t = in.nextInt ();
        arr [i] = t;
    }
    System.out.println ("\n");
    for (i = 0; i < len; i ++) {
        count = 1;
        for (j = i + 1; j <= len - 1; j ++) {
            if (arr [i] == arr [j] && arr [i] != '\0') {
                count ++;
                arr [j] = '\0';
            }
        }
        if (arr [i] != '\0') {
            System.out.println (arr [i] + " is " + count + " times.\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12207483_32244255_3_14
12207483_34612711_4_34
Title: find the frequency of elements in a java array 
----------------------------------------

public static void main (String args []) {
    HashMap < Integer, Integer > h = new HashMap < Integer, Integer > ();
    int arr [] = new int [] {2, 2, 3, 3, 5, 6, 7, 9, 9, 0};
    for (int i = 0;
    i < arr.length; i ++) {
        if (h.containsKey (arr [i])) {
            h.put (arr [i], h.get (arr [i]) + 1);
        } else {
            h.put (arr [i], 1);
        }
    }
    System.out.println (h);
}
----------------------------------------

public static void main (String args []) {
    int t, i, j, len, count = 0;
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter number of elements to insert in an array: ");
    len = in.nextInt ();
    int [] arr = new int [len];
    System.out.println ("Enter elements to insert in an array: ");
    for (i = 0; i < len; i ++) {
        t = in.nextInt ();
        arr [i] = t;
    }
    System.out.println ("\n");
    for (i = 0; i < len; i ++) {
        count = 1;
        for (j = i + 1; j <= len - 1; j ++) {
            if (arr [i] == arr [j] && arr [i] != '\0') {
                count ++;
                arr [j] = '\0';
            }
        }
        if (arr [i] != '\0') {
            System.out.println (arr [i] + " is " + count + " times.\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12210972_12211017_1_21
12210972_12211048_53_61
Title: setDefaultCloseOperation to show a JFrame instead 
----------------------------------------

public static void main (String [] args) {
    final JFrame frame = new JFrame ("Test Frame");
    frame.setDefaultCloseOperation (JFrame.DO_NOTHING_ON_CLOSE);
    frame.setSize (800, 600);
    frame.addWindowListener (new WindowAdapter () {
        @Override
        public void windowClosing (WindowEvent e) {
            if (JOptionPane.showConfirmDialog (frame, "Are you sure ?") == JOptionPane.OK_OPTION) {
                frame.setVisible (false);
                frame.dispose ();
            }
        }}

    );
    frame.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            ClosingFrame cf = new ClosingFrame ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12210972_12211017_1_21
12210972_12211743_6_32
Title: setDefaultCloseOperation to show a JFrame instead 
----------------------------------------

public static void main (String [] args) {
    final JFrame frame = new JFrame ("Test Frame");
    frame.setDefaultCloseOperation (JFrame.DO_NOTHING_ON_CLOSE);
    frame.setSize (800, 600);
    frame.addWindowListener (new WindowAdapter () {
        @Override
        public void windowClosing (WindowEvent e) {
            if (JOptionPane.showConfirmDialog (frame, "Are you sure ?") == JOptionPane.OK_OPTION) {
                frame.setVisible (false);
                frame.dispose ();
            }
        }}

    );
    frame.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    Runnable r = new Runnable () {
        @Override
        public void run () {
            final JFrame frame = new JFrame ("Test Frame");
            frame.setDefaultCloseOperation (JFrame.DO_NOTHING_ON_CLOSE);
            frame.setSize (600, 400);
            frame.addWindowListener (new WindowAdapter () {
                @Override
                public void windowClosing (WindowEvent e) {
                    int result = JOptionPane.showConfirmDialog (frame, "Are you sure?");
                    if (result == JOptionPane.OK_OPTION) {
                        frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
                        frame.setVisible (false);
                        frame.dispose ();
                    }
                }}

            );
            frame.setVisible (true);
        }}

    ;
    SwingUtilities.invokeLater (r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12210972_12211048_53_61
12210972_12211743_6_32
Title: setDefaultCloseOperation to show a JFrame instead 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            ClosingFrame cf = new ClosingFrame ();
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    Runnable r = new Runnable () {
        @Override
        public void run () {
            final JFrame frame = new JFrame ("Test Frame");
            frame.setDefaultCloseOperation (JFrame.DO_NOTHING_ON_CLOSE);
            frame.setSize (600, 400);
            frame.addWindowListener (new WindowAdapter () {
                @Override
                public void windowClosing (WindowEvent e) {
                    int result = JOptionPane.showConfirmDialog (frame, "Are you sure?");
                    if (result == JOptionPane.OK_OPTION) {
                        frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
                        frame.setVisible (false);
                        frame.dispose ();
                    }
                }}

            );
            frame.setVisible (true);
        }}

    ;
    SwingUtilities.invokeLater (r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12215447_12215633_1_15
12215447_12216092_7_33
Title: Is there a way to make this Java program more interactive? 
----------------------------------------

public static void main (String [] args) {
    string output;
    string fname = readFileName ();
    if (fileValid (fname)) {
        int lineCount = scaneFile (fname);
        output = "some output text including line numbers"
    } else {
        output = "File Not Valid..."
    }
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 1) {
        System.out.println ("Usage: java countlines/Main filePath");
        System.exit (1);
    }
    File f = new File (args [0]);
    if (! f.exists ()) {
        System.out.println ("File " + f.getAbsolutePath () + " doesn't exist");
        System.exit (2);
    }
    if (f.isDirectory ()) {
        System.out.println (f.getAbsolutePath () + " is a directory");
        System.exit (2);
    }
    LineCounter c;
    try {
        c = new LineCounter (f);
        System.out.println (c.getLineCount ());
    } catch (IOException e) {
        System.out.println ("Error reading file " + f.getAbsolutePath ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12219326_12219623_143_161
12219326_12219623_166_195
Title: Basic GUI program layout positioning 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    MyClass obj = new MyClass ();
    button1.setEnabled (false);
    button2.setEnabled (true);
    item1.setEditable (false);
    obj.openFile ();
    obj.readFile ();
    for (int i = 0;
    i < idArray.length; i ++) {
        if (item2.getText ().equals (obj.idArray [i]) == true) {
            item4.setText (obj.idArray [i] + " " + obj.recordArray [i] + " $" + obj.priceArray [i].replaceAll ("\\s", ""));
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (myNum == Integer.parseInt (item1.getText ())) {
        JOptionPane.showMessageDialog (null, "Item #" + (myNum) + " accepted");
        button2.setEnabled (false);
        button1.setText ("Process Item");
        button2.setText ("Confirm Item");
        button1.setEnabled (false);
        button3.setEnabled (true);
        button4.setEnabled (true);
        item2.setText ("");
        item3.setText ("");
        label2.setText ("");
        label3.setText ("");
        item2.setEditable (false);
        item3.setEditable (false);
    } else {
        button1.setEnabled (true);
        button2.setEnabled (false);
        JOptionPane.showMessageDialog (null, "Item #" + (myNum) + " accepted");
        item2.setText ("");
        item3.setText ("");
        label2.setText ("Enter CD ID for Item #" + (myNum + 1) + ":");
        label3.setText ("Enter quantity for Item #" + (myNum + 1) + ":");
        label4.setText ("Item #" + (myNum + 1) + " info:");
        myNum ++;
        button1.setText ("Process item #" + (myNum));
        button2.setText ("Confirm item #" + (myNum));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12231011_12231079_26_37
12231011_12231175_19_29
Title: How to avoid an else if marathon in Java? 
----------------------------------------

public static void question (String n, int num) {
    Scanner input = new Scanner (System.in);
    System.out.print ("How many moons does " + n + " have? ");
    int ans = input.nextInt ();
    if (ans == num) {
        System.out.println ("Correct!");
    } else if (ans != num) {
        System.out.println ("Incorrect!");
        question (n, num);
    }

}
----------------------------------------

public void question () {
    Scanner input = new Scanner (System.in);
    System.out.print ("How many moons does " + this.name + " have? ");
    int ans = input.nextInt ();
    if (ans == this.moons) {
        System.out.println ("Correct!");
    } else {
        System.out.println ("Incorrect!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12231011_12231079_5_24
12231011_12231175_33_46
Title: How to avoid an else if marathon in Java? 
----------------------------------------

public static void main (String args []) {
    String planets [] = new String [4];
    planets [0] = "Mercury";
    planets [1] = "Venus";
    planets [2] = "Earth";
    planets [3] = "Mars";
    int moons [] = new int [4];
    moons [0] = 0;
    moons [1] = 0;
    moons [2] = 1;
    moons [3] = 2;
    while (true) {
        System.out.println ("Moons");
        Random r = new Random ();
        int rI = r.nextInt (4);
        question (planets [rI], moons [rI]);
    }
}
----------------------------------------

public static void main (String args []) {
    List < Planet > planets = new ArrayList < Planets > ();
    Planet earth = new Planet ("Earth", 1);
    for (int x = 1;
    x <= 1000; x ++) {
        System.out.println ("Moons");
        Random r = new Random ();
        int rI = r.nextInt (planets.size ());
        Planet p = planets.get (rI);
        p.question ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12241999_12242100_1_28
12241999_15937146_1_27
Title: Android: How to write newline in CSV file? 
----------------------------------------

public void writeData (String data, String strFilePath) {
    PrintWriter csvWriter;
    try {
        StringBuffer oneLineStringBuffer = new StringBuffer ();
        File file = new File (strFilePath);
        if (! file.exists ()) {
            file = new File (strFilePath);
        }
        csvWriter = new PrintWriter (new FileWriter (file, true));
        oneLineStringBuffer.append (data + "," + "hello");
        oneLineStringBuffer.append ("\n");
        oneLineStringBuffer.append ("world");
        csvWriter.print (oneLineStringBuffer);
        csvWriter.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void writeData (String data, String strFilePath) {
    PrintWriter csvWriter;
    try {
        File file = new File (strFilePath);
        if (! file.exists ()) {
            file = new File (strFilePath);
        }
        csvWriter = new PrintWriter (new FileWriter (file, true));
        csvWriter.println (data + "," + "hello");
        csvWriter.print ("world");
        csvWriter.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12243672_12245652_13_26
12243672_12245652_37_49
Title: Java- Method Synchronization 
----------------------------------------

public void run () {
    try {
        sharedCountDownLatch.countDown ();
        sharedCountDownLatch.await ();
        System.out.print (a);
        masterCountDownLatch.countDown ();
    } catch (InterruptedException ex) {
        Logger.getLogger (test.class.getName ()).log (Level.SEVERE, null, ex);
    } finally {
        doneCountDownLatch.countDown ();
    }
}
----------------------------------------

public void run () {
    try {
        sharedCountDownLatch.countDown ();
        sharedCountDownLatch.await ();
        masterCountDownLatch.await ();
        System.out.print (" " + a + " ");
    } catch (InterruptedException ex) {
        Logger.getLogger (test.class.getName ()).log (Level.SEVERE, null, ex);
    } finally {
        doneCountDownLatch.countDown ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12247470_12546412_26_37
12247470_16797740_63_81
Title: Redirecting standard iostream of JSch to primefaces' terminal 
----------------------------------------

public String handleCommand (String command, String [] params) {
    command = command + StringUtils.join (params, " ");
    toChannel.println (command);
    StringBuilder result = new StringBuilder ();
    while (true) {
        String line = fromChannel.readLine ();
        result.append (line);
        if (looksLikePrompt (line)) return result.toString ();

        result.append ("\n");
    }
}
----------------------------------------

public String handleCommand (String command, String [] params) throws IOException {
    command = command + " " + StringUtils.join (params, " ");
    toChannel.println (command);
    toChannel.flush ();
    StringBuilder result = new StringBuilder ();
    AnsiConsole.systemInstall ();
    while (true) {
        char c = (char) fromChannel.read ();
        result.append (c);
        if (c == '$') {
            AnsiString as = new AnsiString (result.toString ());
            String s = as.getPlain ().toString ();
            s = s.replaceAll ("\n", "<br>");
            AnsiConsole.systemUninstall ();
            return s;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12247470_12546412_8_24
12247470_16797740_29_61
Title: Redirecting standard iostream of JSch to primefaces' terminal 
----------------------------------------

public TerminalController () {
    jsch = new JSch ();
    try {
        session = jsch.getSession (user, ip, port);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword (passwd);
        session.connect ();
        channel = session.openChannel ("shell");
        InputStream inStream = channel.getInputStream ();
        fromChannel = new BufferedReader (new InputStreamReader (inStream, "UTF-8"));
        OutputStream outStream = channel.getOutputStream ();
        toChannel = new PrintWriter (new OutputStreamWriter (outStream, "UTF-8"));
        channel.connect ();
    } catch (Exception ee) {
        ee.printStackTrace ();
    }
}
----------------------------------------

public TerminalController () {
    jsch = new JSch ();
    try {
        session = jsch.getSession ("leoks", "localhost", 22);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword ("xxx");
        session.connect (Integer.MAX_VALUE);
        channel = session.openChannel ("shell");
        InputStream inStream = channel.getInputStream ();
        fromChannel = new BufferedReader (new InputStreamReader (inStream, "UTF-8"));
        OutputStream outStream = channel.getOutputStream ();
        toChannel = new PrintWriter (new OutputStreamWriter (outStream, "UTF-8"));
        channel.connect ();
        StringBuilder result = new StringBuilder ();
        boolean stop = false;
        while (! stop) {
            char c = (char) fromChannel.read ();
            result.append (c);
            System.out.print (c);
            if (result.toString ().endsWith ("$")) {
                System.out.print ("<<<");
                stop = true;
            }
        }
    } catch (Exception ee) {
        ee.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12253739_12253928_1_39
12253739_40522116_1_36
Title: How to remove a border with an unknown width from an image 
----------------------------------------

private void cropBorderFromBitmap (Bitmap bmp) {
    int [] pixels;
    bmp.getPixels (pixels, 0, width, 0, 0, width, height);
    int width = bmp.getWidth ();
    int height = bmp.getHeight ();
    int length = pixels.length;
    int borderColor = pixels [0];
    int borderStart;
    for (int i = 0;
    i < length; i ++) {
        if (pixels [i] != borderColor) {
            borderStart = i;
            break;
        }
    }
    int borderEnd;
    for (int i = length - 1;
    i >= 0; i --) {
        if (pixels [i] != borderColor) {
            borderEnd = length - i;
            break;
        }
    }
    int leftMargin = borderStart % width;
    int rightMargin = borderEnd % width;
    int topMargin = borderStart / width;
    int bottomMargin = borderEnd / width;
    bmp = createBitmap (bmp, leftMargin, topMargin, width - leftMargin - rightMargin, height - topMargin - bottomMargin);
}
----------------------------------------

private Bitmap cropBorderFromBitmap (Bitmap bmp) {
    final int borderWidth = 10;
    final int borderColor = - 1;
    int width = bmp.getWidth ();
    int height = bmp.getHeight ();
    int [] pixels = new int [width * height];
    bmp.getPixels (pixels, 0, width, 0, 0, width, height);
    int minX = - 1;
    int minY = - 1;
    int maxX = - 1;
    int maxY = - 1;
    for (int y = 0;
    y < height; y ++) {
        for (int x = 0;
        x < width; x ++) {
            if (bmp.getPixel (x, y) != borderColor) {
                minX = (minX == - 1) ? x : Math.min (x, minX);
                minY = (minY == - 1) ? y : Math.min (y, minY);
                maxX = (maxX == - 1) ? x : Math.max (x, maxX);
                maxY = (maxY == - 1) ? y : Math.max (y, maxY);
            }
        }
    }
    minX = Math.max (0, minX - borderWidth);
    maxX = Math.min (width, maxX + borderWidth);
    minY = Math.max (0, minY - borderWidth);
    maxY = Math.min (height, maxY + borderWidth);
    return Bitmap.createBitmap (bmp, minX, minY, maxX - minX, maxY - minY);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12256866_12257007_3_15
12256866_12257065_1_14
Title: Removing white spaces from string using loops 
----------------------------------------

public static void main (String [] args) {
    String input = "sample test";
    char noSpace = ' ';
    System.out.println ("String original:" + input);
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) != noSpace) {
            System.out.print (input.charAt (i));
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "";
    char space = ' ';
    Scanner scan = new Scanner (System.in);
    input = scan.nextLine ();
    System.out.println (input);
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) != space) {
            System.out.print (input.charAt (i));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12257933_12258296_37_48
12257933_12267697_6_23
Title: Drawing a line from 2 mouse clicks 
----------------------------------------

public void mousePressed (MouseEvent e) {
    Point p = e.getPoint ();
    if (! drawing) {
        path = new GeneralPath ();
        path.moveTo (p.x, p.y);
        drawing = true;
    } else {
        path.lineTo (p.x, p.y);
    }
    repaint ();
}
----------------------------------------

public void mousePressed (MouseEvent e) {
    if (twoPoints == false) {
        nextPoint = e.getPoint ();
        twoPoints = true;
    } else {
        previousPoint = nextPoint;
        nextPoint = e.getPoint ();
        drawLineHelper (previousPoint, nextPoint);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12258241_12258497_1_29
12258241_12259142_1_43
Title: Adding data from CSV file & output data must be aligned in row in java 
----------------------------------------

public static void main (String [] args) {
    String fileName = "/home/Csvfile.csv";
    try {
        BufferedReader br = new BufferedReader (new FileReader (fileName));
        String strLine = null;
        StringTokenizer st = null;
        int lineNumber = 0, tokenNumber = 0;
        while ((fileName = br.readLine ()) != null) {
            lineNumber ++;
            st = new StringTokenizer (fileName, ",");
            System.out.print ("\n" + lineNumber + " | ");
            while (st.hasMoreTokens ()) {
                tokenNumber ++;
                System.out.print (st.nextToken () + " | ");
            }
            tokenNumber = 0;
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    String fileName = "cvsFile.csv";
    ArrayList < Integer > margins = new ArrayList < Integer > ();
    BufferedReader br;
    String line, token;
    int i;
    try {
        br = new BufferedReader (new FileReader (fileName));
        while ((line = br.readLine ()) != null) {
            StringTokenizer st = new StringTokenizer (line, ",\"");
            i = 0;
            while (st.hasMoreTokens ()) {
                token = st.nextToken ();
                if (margins.size () <= i) {
                    margins.add ((Integer) token.length ());
                } else {
                    margins.set (i, Math.max (margins.get (i), (Integer) token.length ()));
                }
                i ++;
            }
        }
        br = new BufferedReader (new FileReader (fileName));
        while ((line = br.readLine ()) != null) {
            StringTokenizer st = new StringTokenizer (line, ",\"");
            i = 0;
            while (st.hasMoreTokens ()) {
                token = st.nextToken ();
                System.out.print (token);
                for (int j = 0;
                j < margins.get (i) - token.length (); j ++) {
                    System.out.print (" ");
                }
                System.out.print ("|");
                i ++;
            }
            System.out.println ();
        }
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12265715_12267202_127_143
12265715_12267202_96_112
Title: How to set size of swing components 
----------------------------------------

public void actionPerformed (ActionEvent event) {
    JFontChooser fontChooser = new JFontChooser ();
    fontChooser.setSelectedFont (model.getConnectorFont ());
    int result = fontChooser.showDialog (dialog);
    if (result == JFontChooser.OK_OPTION) {
        Font font = fontChooser.getSelectedFont ();
        String text = getFontText (font);
        model.setConnectorFont (font);
        connectorTextFontButton.setText (text);
        connectorTextFontButton.setFont (font);
        JButton dummy = new JButton (text);
        setButtonSizes (activityTextFontButton, connectorTextFontButton, dummy);
        dialog.validate ();
        dialog.pack ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent event) {
    JFontChooser fontChooser = new JFontChooser ();
    fontChooser.setSelectedFont (model.getActivityFont ());
    int result = fontChooser.showDialog (dialog);
    if (result == JFontChooser.OK_OPTION) {
        Font font = fontChooser.getSelectedFont ();
        String text = getFontText (font);
        model.setActivityFont (font);
        activityTextFontButton.setText (text);
        activityTextFontButton.setFont (font);
        JButton dummy = new JButton (text);
        setButtonSizes (activityTextFontButton, connectorTextFontButton, dummy);
        dialog.validate ();
        dialog.pack ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12265849_12266768_2_24
12265849_14579219_3_14
Title: Pyramid of numbers in java 
----------------------------------------

public static void main (String [] args) {
    int [] arry = new int [10];
    for (int i = 1;
    i <= 9; i ++) arry [i] = i;

    int index = 0;
    for (int i = 9;
    i > 0; i --) {
        int loop = 1, tempLoop = 0;
        for (int k = 0;
        k < 9; k ++) {
            if (k < (9 - index)) System.out.print (" ");
            else System.out.print (arry [k] + " ");

        }
        for (int k = 9;
        k >= i && (tempLoop ++) <= index; k --) {
            System.out.print (arry [k] + " ");
        }
        index ++;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 8;
    for (int i = 1;
    i < n; i = i + 2) {
        for (int j = 1;
        j < i + 1; j ++) {
            System.out.println (" " + j);
        }
    }
    System.out.println ("");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12265849_12266768_2_24
12265849_30825059_3_52
Title: Pyramid of numbers in java 
----------------------------------------

public static void main (String [] args) {
    int [] arry = new int [10];
    for (int i = 1;
    i <= 9; i ++) arry [i] = i;

    int index = 0;
    for (int i = 9;
    i > 0; i --) {
        int loop = 1, tempLoop = 0;
        for (int k = 0;
        k < 9; k ++) {
            if (k < (9 - index)) System.out.print (" ");
            else System.out.print (arry [k] + " ");

        }
        for (int k = 9;
        k >= i && (tempLoop ++) <= index; k --) {
            System.out.print (arry [k] + " ");
        }
        index ++;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int part = 2;
    int stage = 5;
    if (part == 2) {
        int cnt = 0;
        for (int i = stage;
        i > 0; i --) {
            for (int j = 1;
            j <= stage; j ++) {
                if (stage - j <= cnt) {
                    System.out.print (j + " ");
                } else {
                    System.out.print ("  ");
                }
            }
            for (int k = stage;
            k > 0; k --) {
                if (k != stage) {
                    if (stage - cnt <= k) {
                        System.out.print (k + " ");
                    } else {
                        System.out.print ("  ");
                    }
                }
            }
            System.out.println ("");
            cnt ++;
        }
    } else if (part == 1) {
        int gap = 0;
        for (int j = 0;
        j < stage; j ++) {
            for (int i = 1;
            i <= stage * 2; i ++) {
                if (Math.abs (i - stage) <= gap) {
                    System.out.print (stage - gap + " ");
                } else System.out.print ("  ");

            }
            System.out.println ("");
            gap ++;
        }
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12265849_12266768_2_24
12265849_36269914_6_33
Title: Pyramid of numbers in java 
----------------------------------------

public static void main (String [] args) {
    int [] arry = new int [10];
    for (int i = 1;
    i <= 9; i ++) arry [i] = i;

    int index = 0;
    for (int i = 9;
    i > 0; i --) {
        int loop = 1, tempLoop = 0;
        for (int k = 0;
        k < 9; k ++) {
            if (k < (9 - index)) System.out.print (" ");
            else System.out.print (arry [k] + " ");

        }
        for (int k = 9;
        k >= i && (tempLoop ++) <= index; k --) {
            System.out.print (arry [k] + " ");
        }
        index ++;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int min = 1;
    int max = 9;
    List < List < String > > pyramid = new ArrayList < > ();
    IntStream.iterate (max, i -> i - 1).limit (max).forEach (s -> {
        List < String > pyramidRow = new ArrayList < > ();
        IntStream.rangeClosed (min, max).forEach (j -> {
            if (j < s) pyramidRow.add (" ");
            else pyramidRow.add (String.valueOf (j));

        });
        IntStream.iterate (max - 1, i -> i - 1).limit (max - 1).forEach (j -> {
            if (j < s) pyramidRow.add (" ");
            else pyramidRow.add (String.valueOf (j));

        });
        pyramid.add (pyramidRow);
    });
    pyramid.stream ().forEach (pyra -> {
        pyra.forEach (System.out :: print);
        System.out.println ();
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12265849_14579219_3_14
12265849_30825059_3_52
Title: Pyramid of numbers in java 
----------------------------------------

public static void main (String [] args) {
    int n = 8;
    for (int i = 1;
    i < n; i = i + 2) {
        for (int j = 1;
        j < i + 1; j ++) {
            System.out.println (" " + j);
        }
    }
    System.out.println ("");
}
----------------------------------------

public static void main (String [] args) {
    int part = 2;
    int stage = 5;
    if (part == 2) {
        int cnt = 0;
        for (int i = stage;
        i > 0; i --) {
            for (int j = 1;
            j <= stage; j ++) {
                if (stage - j <= cnt) {
                    System.out.print (j + " ");
                } else {
                    System.out.print ("  ");
                }
            }
            for (int k = stage;
            k > 0; k --) {
                if (k != stage) {
                    if (stage - cnt <= k) {
                        System.out.print (k + " ");
                    } else {
                        System.out.print ("  ");
                    }
                }
            }
            System.out.println ("");
            cnt ++;
        }
    } else if (part == 1) {
        int gap = 0;
        for (int j = 0;
        j < stage; j ++) {
            for (int i = 1;
            i <= stage * 2; i ++) {
                if (Math.abs (i - stage) <= gap) {
                    System.out.print (stage - gap + " ");
                } else System.out.print ("  ");

            }
            System.out.println ("");
            gap ++;
        }
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12265849_14579219_3_14
12265849_36269914_6_33
Title: Pyramid of numbers in java 
----------------------------------------

public static void main (String [] args) {
    int n = 8;
    for (int i = 1;
    i < n; i = i + 2) {
        for (int j = 1;
        j < i + 1; j ++) {
            System.out.println (" " + j);
        }
    }
    System.out.println ("");
}
----------------------------------------

public static void main (String [] args) {
    int min = 1;
    int max = 9;
    List < List < String > > pyramid = new ArrayList < > ();
    IntStream.iterate (max, i -> i - 1).limit (max).forEach (s -> {
        List < String > pyramidRow = new ArrayList < > ();
        IntStream.rangeClosed (min, max).forEach (j -> {
            if (j < s) pyramidRow.add (" ");
            else pyramidRow.add (String.valueOf (j));

        });
        IntStream.iterate (max - 1, i -> i - 1).limit (max - 1).forEach (j -> {
            if (j < s) pyramidRow.add (" ");
            else pyramidRow.add (String.valueOf (j));

        });
        pyramid.add (pyramidRow);
    });
    pyramid.stream ().forEach (pyra -> {
        pyra.forEach (System.out :: print);
        System.out.println ();
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12265849_30825059_3_52
12265849_36269914_6_33
Title: Pyramid of numbers in java 
----------------------------------------

public static void main (String [] args) {
    int part = 2;
    int stage = 5;
    if (part == 2) {
        int cnt = 0;
        for (int i = stage;
        i > 0; i --) {
            for (int j = 1;
            j <= stage; j ++) {
                if (stage - j <= cnt) {
                    System.out.print (j + " ");
                } else {
                    System.out.print ("  ");
                }
            }
            for (int k = stage;
            k > 0; k --) {
                if (k != stage) {
                    if (stage - cnt <= k) {
                        System.out.print (k + " ");
                    } else {
                        System.out.print ("  ");
                    }
                }
            }
            System.out.println ("");
            cnt ++;
        }
    } else if (part == 1) {
        int gap = 0;
        for (int j = 0;
        j < stage; j ++) {
            for (int i = 1;
            i <= stage * 2; i ++) {
                if (Math.abs (i - stage) <= gap) {
                    System.out.print (stage - gap + " ");
                } else System.out.print ("  ");

            }
            System.out.println ("");
            gap ++;
        }
    }

}
----------------------------------------

public static void main (String [] args) {
    int min = 1;
    int max = 9;
    List < List < String > > pyramid = new ArrayList < > ();
    IntStream.iterate (max, i -> i - 1).limit (max).forEach (s -> {
        List < String > pyramidRow = new ArrayList < > ();
        IntStream.rangeClosed (min, max).forEach (j -> {
            if (j < s) pyramidRow.add (" ");
            else pyramidRow.add (String.valueOf (j));

        });
        IntStream.iterate (max - 1, i -> i - 1).limit (max - 1).forEach (j -> {
            if (j < s) pyramidRow.add (" ");
            else pyramidRow.add (String.valueOf (j));

        });
        pyramid.add (pyramidRow);
    });
    pyramid.stream ().forEach (pyra -> {
        pyra.forEach (System.out :: print);
        System.out.println ();
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12267311_12267450_12_22
12267311_12267575_6_25
Title: Java Swing BorderLayout resize difficulties 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            JFrame window = new Main ();
            window.setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (() -> {
        JFrame frame = new JFrame ();
        JButton eastButton = new JButton ("East");
        JButton westButton = new JButton ("West");
        JSplitPane splitPane = new JSplitPane (JSplitPane.HORIZONTAL_SPLIT, eastButton, westButton);
        JPanel content = new JPanel ();
        content.setLayout (new BorderLayout ());
        content.add (splitPane, BorderLayout.CENTER);
        frame.setContentPane (content);
        frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
        frame.setPreferredSize (new Dimension (500, 400));
        frame.pack ();
        frame.setVisible (true);
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12269504_12270407_13_89
12269504_12273296_7_42
Title: Fastest and optimized way to read the xml 
----------------------------------------

public static void main (String argv []) {
    String inputFile = "c:/source/book.xml";
    try {
        XMLInputFactory inputFactory = XMLInputFactory.newInstance ();
        InputStream in = new FileInputStream (inputFile);
        XMLEventReader eventReader = inputFactory.createXMLEventReader (in);
        while (eventReader.hasNext ()) {
            XMLEvent event = eventReader.nextEvent ();
            if (event.isStartElement ()) {
                StartElement startElement = event.asStartElement ();
                if (startElement.getName ().getLocalPart ().equals ("first")) {
                    event = eventReader.nextEvent ();
                    StringBuilder fName = new StringBuilder ();
                    while (! event.isEndElement ()) {
                        fName.append (event.asCharacters ().getData ());
                        event = eventReader.nextEvent ();
                    }
                    System.out.println ("First Name : " + fName);
                    event = eventReader.nextEvent ();
                    continue;
                }
                if (startElement.getName ().getLocalPart ().equals ("last")) {
                    event = eventReader.nextEvent ();
                    StringBuilder lName = new StringBuilder ();
                    while (! event.isEndElement ()) {
                        lName.append (event.asCharacters ().getData ());
                        event = eventReader.nextEvent ();
                    }
                    System.out.println ("Last Name : " + lName);
                    event = eventReader.nextEvent ();
                    continue;
                }
                if (startElement.getName ().getLocalPart ().equals ("age")) {
                    event = eventReader.nextEvent ();
                    StringBuilder age = new StringBuilder ();
                    while (! event.isEndElement ()) {
                        age.append (event.asCharacters ().getData ());
                        event = eventReader.nextEvent ();
                    }
                    System.out.println ("Age : " + age);
                    event = eventReader.nextEvent ();
                    continue;
                }
            }
        }
    } catch (FileNotFoundException e) {
        System.out.println ("File not Found: " + inputFile);
    } catch (XMLStreamException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String argv []) throws Exception {
    XMLInputFactory inputFactory = XMLInputFactory.newInstance ();
    InputStream in = new FileInputStream ("book.xml");
    XMLStreamReader streamReader = inputFactory.createXMLStreamReader (in);
    streamReader.nextTag ();
    streamReader.nextTag ();
    int persons = 0;
    while (streamReader.hasNext ()) {
        if (streamReader.isStartElement ()) {
            switch (streamReader.getLocalName ()) {
                case "first" :
                    {
                        System.out.print ("First Name : ");
                        System.out.println (streamReader.getElementText ());
                        break;
                    } case "last" :
                    {
                        System.out.print ("Last Name : ");
                        System.out.println (streamReader.getElementText ());
                        break;
                    } case "age" :
                    {
                        System.out.print ("Age : ");
                        System.out.println (streamReader.getElementText ());
                        break;
                    } case "person" :
                    {
                        persons ++;
                    }}
        }
        streamReader.next ();
    }
    System.out.print (persons);
    System.out.println (" persons");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12274821_12275013_84_100
12274821_12275126_1_15
Title: Using a static var in a thread as communication among different instances 
----------------------------------------

public void run () {
    AsyncCallbackInvoker < T > invoker;
    try {
        T data = runAsync ();
        invoker = new SuccessfulAsyncCallbackInvoker < T > (callback, data);
    } catch (Exception e) {
        invoker = new FailureAsyncCallbackInvoker < T > (callback, e);
    }
    invokeCallback (invoker);
}
----------------------------------------

@Override
public void run () {
    crntThrdCnt ++;
    this.runBatchInstance ();
    crntThrdCnt --;
    if (crntThrdCnt == 0) {
        ProcessManager prcsMgr = new ProcessManager ();
        Batch batch = prcsMgr.getBatch (this.batchID);
        batch.setEndTime (new Date ());
        prcsMgr.updateBatch (batch);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12304454_12304990_1_72
12304454_12305209_1_78
Title: How do I display a Java HttpPost object as a string? 
----------------------------------------

public static String postData (String url, JSONObject obj) {
    HttpClient httpclient = null;
    try {
        HttpParams myParams = new BasicHttpParams ();
        HttpConnectionParams.setConnectionTimeout (myParams, 30000);
        HttpConnectionParams.setSoTimeout (myParams, 30000);
        httpclient = new DefaultHttpClient (myParams);
    } catch (Exception e) {
        Log.e ("POST_DATA", "error in httpConnection");
        e.printStackTrace ();
    }
    InputStream is = null;
    try {
        HttpPost httppost = new HttpPost (url.toString ());
        StringEntity se = new StringEntity (obj.toString ());
        httppost.setEntity (se);
        HttpResponse response = httpclient.execute (httppost);
        HttpEntity entity = response.getEntity ();
        is = entity.getContent ();
    } catch (ClientProtocolException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    BufferedReader reader = null;
    String result = null;
    try {
        reader = new BufferedReader (new InputStreamReader (is, "UTF-8"), 8);
        StringBuilder sb = new StringBuilder ();
        String line = null;
        while ((line = reader.readLine ()) != null) {
            sb.append (line + "\n");
        }
        result = sb.toString ();
    } catch (Exception e) {
        Log.e ("log_tag", "Error converting result " + e.toString ());
    } finally {
        try {
            if (reader != null) reader.close ();

            if (is != null) is.close ();

        } catch (IOException e) {
            e.printStackTrace ();
        }
    }
    if (result != null) {
        try {
            @SuppressWarnings ("unused")
            JSONObject jObjec = new JSONObject (result);
        } catch (JSONException e) {
            Log.e ("log_tag", "Error parsing data " + e.toString ());
        }
    }
    return result;
}
----------------------------------------

public String postData (String url, String xmlQuery) {
    final String urlStr = url;
    final String xmlStr = xmlQuery;
    final StringBuilder sb = new StringBuilder ();
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            HttpClient httpclient = new DefaultHttpClient ();
            HttpPost httppost = new HttpPost (urlStr);
            try {
                List < NameValuePair > nameValuePairs = new ArrayList < NameValuePair > (1);
                nameValuePairs.add (new BasicNameValuePair ("xml", xmlStr));
                httppost.setEntity (new UrlEncodedFormEntity (nameValuePairs));
                HttpResponse response = httpclient.execute (httppost);
                Log.d ("Vivek", response.toString ());
                HttpEntity entity = response.getEntity ();
                InputStream i = entity.getContent ();
                Log.d ("Vivek", i.toString ());
                InputStreamReader isr = new InputStreamReader (i);
                BufferedReader br = new BufferedReader (isr);
                String s = null;
                while ((s = br.readLine ()) != null) {
                    Log.d ("YumZing", s);
                    sb.append (s);
                }
                Log.d ("Check Now", sb + "");
            } catch (ClientProtocolException e) {
                e.printStackTrace ();
            } catch (IOException e) {
                e.printStackTrace ();
            }
        }}

    );
    t1.start ();
    try {
        t1.join ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Getting from Post Data Method " + sb.toString ());
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1231913_1232239_19_34
1231913_37325017_2_15
Title: Lock Free Array Element Swapping 
----------------------------------------

void swap (int idx1, int idx2) {
    if (idx1 == idx2) return;

    lock (Math.min (idx1, idx2));
    lock (Math.max (idx1, idx2));
    char tmp = array [idx1];
    array [idx1] = array [idx2];
    unlock (idx1);
    array [idx2] = tmp;
    unlock (idx2);
}
----------------------------------------

static < T > void swap (AtomicReferenceArray < T > array, int i, int j) {
    while (true) {
        T ai = array.getAndSet (i, null);
        if (ai == null) continue;

        T aj = array.getAndSet (j, null);
        if (aj == null) {
            array.set (i, ai);
            continue;
        }
        array.set (i, aj);
        array.set (j, ai);
        break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12328396_12329432_41_80
12328396_12329432_90_102
Title: RSS / XML Parsing in BlackBerry 
----------------------------------------

public void run () {
    StreamConnection conn = null;
    InputStream is = null;
    try {
        conn = (StreamConnection) Connector.open (RSS_FEED_URL + CONNECTION_PARAMS);
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance ();
        docBuilderFactory.setIgnoringElementContentWhitespace (true);
        docBuilderFactory.setCoalescing (true);
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder ();
        is = conn.openInputStream ();
        Document doc = docBuilder.parse (is);
        doc.getDocumentElement ().normalize ();
        NodeList itemNodeList = doc.getElementsByTagName ("item");
        for (int index = 0;
        index < itemNodeList.getLength (); index ++) {
            Node nNode = itemNodeList.item (index);
            if (nNode.getNodeType () == Node.ELEMENT_NODE) {
                Element itemElement = (Element) nNode;
                System.out.println ("title : " + getTagValue ("title", itemElement));
                System.out.println ("description : " + getTagValue ("description", itemElement));
                System.out.println ("pubDate : " + getTagValue ("pubDate", itemElement));
                System.out.println ("guid : " + getTagValue ("guid", itemElement));
                System.out.println ("link : " + getTagValue ("link", itemElement));
                listElements.addElement (getTagValue ("title", itemElement));
                listElements.addElement (getTagValue ("link", itemElement));
            }
        }
    } catch (Exception e) {
    } finally {
        if (is != null) {
            try {
                is.close ();
            } catch (IOException ignored) {
            }
        }
        if (conn != null) {
            try {
                conn.close ();
            } catch (IOException ignored) {
            }
        }
    }
    showData ();
}
----------------------------------------

public void run () {
    for (int i = 0;
    listElements != null && i < listElements.size (); i += 2) {
        VerticalFieldManager vfm = new VerticalFieldManager ();
        vfm.setMargin (10, 10, 10, 10);
        vfm.add (new LabelField ("Item no. " + ((i / 2) + 1)));
        vfm.add (new LabelField ("Title: " + listElements.elementAt (i)));
        vfm.add (new LabelField ("Link: " + listElements.elementAt (i + 1)));
        vfm.add (new SeparatorField (SeparatorField.LINE_HORIZONTAL));
        screen.add (vfm);
    }
    screen.invalidate ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12339939_12339956_2_13
12339939_22033701_1_29
Title: Bubble Sort in JAVA 
----------------------------------------

public static void main (String [] args) {
    int unsortedArray [] = {10, 97, 6, 23, 0, - 45, 697, - 1000, 1, 0};
    int i;
    bubbleSort (unsortedArray, unsortedArray.length);
    System.out.println ("After sorting, the list elements are: ");
    for (i = 0; i < unsortedArray.length; i ++) {
        System.out.print (unsortedArray [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("no of element");
    int noEle = sc.nextInt ();
    int [] eleArr = new int [noEle];
    for (int i = 0;
    i < noEle; i ++) {
        eleArr [i] = sc.nextInt ();
    }
    for (int i = 0;
    i < eleArr.length; i ++) {
        for (int j = 0;
        j < eleArr.length - 1; j ++) {
            if (eleArr [j] > eleArr [j + 1]) {
                eleArr [j] = eleArr [j] + eleArr [j + 1];
                eleArr [j + 1] = eleArr [j] - eleArr [j + 1];
                eleArr [j] = eleArr [j] - eleArr [j + 1];
            }
        }
    }
    for (int i = 0;
    i < noEle; i ++) {
        System.out.print (eleArr [i] + " ");
    }
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12353408_12353540_1_14
12353408_12353768_1_18
Title: Get text between `<pre>` and `</pre>` into an ArrayList 
----------------------------------------

private List < String > getText (String text) {
    List < String > result = new ArrayList < String > ();
    int indexStart = text.indexOf ("<pre>");
    int indexEnd = text.indexOf ("</pre>");
    while (indexStart >= 0 && indexEnd > indexStart) {
        result.add (text.substring (indexStart + 5, indexEnd));
        text = text.substring (indexEnd + 6);
        indexStart = text.indexOf ("<pre>");
        indexEnd = text.indexOf ("</pre>");
    }
    return result;
}
----------------------------------------

private List < String > getText (String text) {
    List < String > result = new ArrayList < String > ();
    while (true) {
        int indexStart = text.indexOf ("<pre>");
        int indexEnd = text.indexOf ("</pre>");
        if (indexStart >= 0 && indexEnd >= 0 && indexEnd > indexStart) {
            result.add (text.substring (indexStart + 5, indexEnd));
            text = text.substring (indexEnd + 6);
        } else {
            break;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12363239_12363262_1_19
12363239_12363301_1_15
Title: Java error missing return statment 
----------------------------------------

public String promComm (boolean answer) {
    if (answer) {
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("Very Good!");
        }
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("No. Please try again.");
        }
        return "Some value";
    } else return "Some value";

}
----------------------------------------

public String promComm (boolean answer) {
    if (answer) {
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("Very Good!");
        }
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("No. Please try again.");
        }
    }
    return "";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12363239_12363262_1_19
12363239_12363499_1_22
Title: Java error missing return statment 
----------------------------------------

public String promComm (boolean answer) {
    if (answer) {
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("Very Good!");
        }
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("No. Please try again.");
        }
        return "Some value";
    } else return "Some value";

}
----------------------------------------

public String promComm (boolean answer) {
    String returnValue = "Answer is false";
    if (answer) {
        switch (randQuest.nextInt (1)) {
            case 0 :
                returnValue = "Very Good!";
        }
        switch (randQuest.nextInt (1)) {
            case 0 :
                returnValue = "No. Please try again.";
        }
    }
    return returnVal;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12363239_12363301_1_15
12363239_12363499_1_22
Title: Java error missing return statment 
----------------------------------------

public String promComm (boolean answer) {
    if (answer) {
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("Very Good!");
        }
        switch (randQuest.nextInt (1)) {
            case 0 :
                return ("No. Please try again.");
        }
    }
    return "";
}
----------------------------------------

public String promComm (boolean answer) {
    String returnValue = "Answer is false";
    if (answer) {
        switch (randQuest.nextInt (1)) {
            case 0 :
                returnValue = "Very Good!";
        }
        switch (randQuest.nextInt (1)) {
            case 0 :
                returnValue = "No. Please try again.";
        }
    }
    return returnVal;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12377803_12378210_11_62
12377803_12379066_7_37
Title: How to check for equal words in string array in JAVA 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Place:\tWord:\tCount: ");
    String inPut = JOptionPane.showInputDialog ("Write som text here");
    String [] wordList;
    try {
        wordList = inPut.split (" ");
    } catch (PatternSyntaxException e) {
        System.out.println ("Ooops.. " + e.getMessage ());
        return;
    } catch (NullPointerException n) {
        System.out.println ("cancelled! exitting..");
        return;
    }
    ArrayList < String > allWords = new ArrayList < String > ();
    for (String word : wordList) {
        allWords.add (word);
    }
    int uniqueWordCount = 0;
    while (allWords.size () > 0) {
        int count = 0;
        String activeWord = allWords.get (0);
        while (doesContainThisWord (allWords, activeWord)) {
            allWords.remove (activeWord);
            count ++;
        }
        uniqueWordCount ++;
        System.out.println (uniqueWordCount + "\t" + activeWord + "\t" + count);
    }
}
----------------------------------------

public static void main (String [] args) {
    String inPut = JOptionPane.showInputDialog ("Write som text here");
    Map < String, WordInfo > wordMap = new LinkedHashMap < String, WordInfo > ();
    String [] wordList = inPut.split (" ");
    for (int i = 0;
    i < wordList.length; i ++) {
        String word = wordList [i];
        WordInfo wi = wordMap.get (word);
        if (wi == null) {
            wi = new WordInfo ();
        }
        wi.addPlace (i + 1);
        wordMap.put (word, wi);
    }
    System.out.println ("Place:\tWord:\tCount: ");
    for (String word : wordMap.keySet ()) {
        WordInfo wi = wordMap.get (word);
        System.out.println (wi.places () + "\t" + word + "\t" + wi.count ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12377803_12378210_11_62
12377803_12539263_6_51
Title: How to check for equal words in string array in JAVA 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Place:\tWord:\tCount: ");
    String inPut = JOptionPane.showInputDialog ("Write som text here");
    String [] wordList;
    try {
        wordList = inPut.split (" ");
    } catch (PatternSyntaxException e) {
        System.out.println ("Ooops.. " + e.getMessage ());
        return;
    } catch (NullPointerException n) {
        System.out.println ("cancelled! exitting..");
        return;
    }
    ArrayList < String > allWords = new ArrayList < String > ();
    for (String word : wordList) {
        allWords.add (word);
    }
    int uniqueWordCount = 0;
    while (allWords.size () > 0) {
        int count = 0;
        String activeWord = allWords.get (0);
        while (doesContainThisWord (allWords, activeWord)) {
            allWords.remove (activeWord);
            count ++;
        }
        uniqueWordCount ++;
        System.out.println (uniqueWordCount + "\t" + activeWord + "\t" + count);
    }
}
----------------------------------------

public static void main (String [] args) {
    String inText = JOptionPane.showInputDialog ("Write some text here");
    String [] wordlist = inText.split (" ");
    System.out.println ("Place:\tWord:\tNo. of Words: ");
    ArrayList < String > wordEncounter = new ArrayList < String > ();
    ArrayList < Integer > numberEncounter = new ArrayList < Integer > ();
    for (int i = 0;
    i < wordlist.length; i ++) {
        String word = wordlist [i];
        word = word.toLowerCase ();
        if (wordEncounter.contains (word)) {
            int position = wordEncounter.indexOf (word);
            Integer number = numberEncounter.get (position);
            int number_int = number.intValue ();
            number_int ++;
            number = new Integer (number_int);
            numberEncounter.set (position, number);
        } else {
            wordEncounter.add (word);
            numberEncounter.add (new Integer (1));
        }
    }
    for (int i = 0;
    i < wordEncounter.size (); i ++) {
        System.out.println (i + "\t" + wordEncounter.get (i) + "\t" + numberEncounter.get (i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12377803_12379066_7_37
12377803_12539263_6_51
Title: How to check for equal words in string array in JAVA 
----------------------------------------

public static void main (String [] args) {
    String inPut = JOptionPane.showInputDialog ("Write som text here");
    Map < String, WordInfo > wordMap = new LinkedHashMap < String, WordInfo > ();
    String [] wordList = inPut.split (" ");
    for (int i = 0;
    i < wordList.length; i ++) {
        String word = wordList [i];
        WordInfo wi = wordMap.get (word);
        if (wi == null) {
            wi = new WordInfo ();
        }
        wi.addPlace (i + 1);
        wordMap.put (word, wi);
    }
    System.out.println ("Place:\tWord:\tCount: ");
    for (String word : wordMap.keySet ()) {
        WordInfo wi = wordMap.get (word);
        System.out.println (wi.places () + "\t" + word + "\t" + wi.count ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String inText = JOptionPane.showInputDialog ("Write some text here");
    String [] wordlist = inText.split (" ");
    System.out.println ("Place:\tWord:\tNo. of Words: ");
    ArrayList < String > wordEncounter = new ArrayList < String > ();
    ArrayList < Integer > numberEncounter = new ArrayList < Integer > ();
    for (int i = 0;
    i < wordlist.length; i ++) {
        String word = wordlist [i];
        word = word.toLowerCase ();
        if (wordEncounter.contains (word)) {
            int position = wordEncounter.indexOf (word);
            Integer number = numberEncounter.get (position);
            int number_int = number.intValue ();
            number_int ++;
            number = new Integer (number_int);
            numberEncounter.set (position, number);
        } else {
            wordEncounter.add (word);
            numberEncounter.add (new Integer (1));
        }
    }
    for (int i = 0;
    i < wordEncounter.size (); i ++) {
        System.out.println (i + "\t" + wordEncounter.get (i) + "\t" + numberEncounter.get (i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12379253_12379513_15_30
12379253_12465936_11_57
Title: Java - does not loop in multithreaded program 
----------------------------------------

public void run () {
    try {
        synchronized (lock) {
            for (int i = 0;
            i < 5; i ++) {
                while (id != token % N) lock.wait ();

                System.out.println (id + " " + i);
                token ++;
                lock.notifyAll ();
            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    count ++;
    if (Thread.currentThread ().getName ().compareTo ("one") == 0) {
        synchronized (a.class) {
            try {
                for (int i = 0;
                i < 5; i ++) {
                    while (time.equals ("Tock")) {
                        a.class.wait ();
                    }
                    System.out.println ("Now running thread " + Thread.currentThread ().getName () + " with count " + count);
                    time = "Tock";
                    System.out.println (time);
                    a.class.notify ();
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    } else if (Thread.currentThread ().getName ().compareTo ("two") == 0) {
        synchronized (a.class) {
            try {
                for (int j = 0;
                j < 5; j ++) {
                    while (time.equals ("Tick")) {
                        a.class.wait ();
                    }
                    System.out.println ("Now running thread " + Thread.currentThread ().getName () + " with count " + count);
                    time = "Tick";
                    System.out.println (time);
                    a.class.notify ();
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12381229_12383662_28_39
12381229_12417511_2_13
Title: how do i get rid of these warnigs about enums? 
----------------------------------------

public static void main (String [] args) {
    List < Class < ? extends Switch > > enums = new ArrayList < Class < ? extends Switch > > ();
    enums.add (A.class);
    enums.add (B.class);
    for (Class < ? extends Switch > clazz : enums) try {
        Switch s = clazz.getEnumConstants () [0];
        ((Switch) s).toggle ();
    } catch (IllegalArgumentException eee) {
    }

}
----------------------------------------

public static void main (final String [] args) {
    List < Class < ? extends Enum < ? > > > enums = new ArrayList < Class < ? extends Enum < ? > > > ();
    enums.add (A.class);
    enums.add (B.class);
    for (Class < ? extends Enum < ? > > clazz : enums) {
        try {
            Switch s = valueOf (clazz, args [0]);
            s.toggle ();
        } catch (IllegalArgumentException eee) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12382715_12382753_1_14
12382715_12382838_1_16
Title: Duplicate values in List after retrieving data through BufferedReader 
----------------------------------------

private List < User > getData () throws IOException {
    List < User > userList = new ArrayList < User > ();
    BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
    for (int i = 0;
    i < 2; i ++) {
        System.out.println ("Enter name,age:");
        String values = reader.readLine ();
        String [] value = values.split (",");
        User user = new User ();
        user.setName (value [0]);
        user.setAge (value [1]);
        userList.add (user);
    }
    return userList;
}
----------------------------------------

private List < User > getData () throws IOException {
    User user = null;
    List < User > userList = new ArrayList < User > ();
    BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
    for (int i = 0;
    i < 2; i ++) {
        user = new User ();
        System.out.println ("Enter name,age:");
        String values = reader.readLine ();
        String [] value = values.split (",");
        user.setName (value [0]);
        user.setAge (value [1]);
        userList.add (user);
    }
    return userList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12392516_12392573_23_33
12392516_12392700_3_13
Title: To calculate the total time elapsed using threads in java 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String text = (String) e.getActionCommand ();
    if (text.equals ("Start")) {
        timer.startTime ();
        button.setText ("Stop");
    } else {
        timer.stopTime ();
        button.setText ("Start");
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String text = (String) e.getActionCommand ();
    if (text.equals ("Start")) {
        button.setText ("Stop");
        timer.startTime ();
    } else {
        timer.stopTime ();
        System.out.println (timer.elapsed);
        button.setText ("Start");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12410728_12410838_1_20
12410728_12411031_1_20
Title: string match sequence array 
----------------------------------------

public static void main (String args []) {
    char [] c = {'a', 'x', 'c', 'e'};
    char [] t = {'x', 'b'};
    int count = 0, j;
    for (int i = 0;
    i < (c.length); i ++) {
        int p = i;
        for (j = 0; j < (t.length); j ++) {
            if (c [p] != t [j]) {
                break;
            }
            p ++;
        }
        if (j == t.length) {
            count ++;
        }
    }
    System.out.println ("Number of Occurences " + count);
}
----------------------------------------

public static void main (String args []) {
    char [] c = {'a', 'x', 'b', 'c', 'x', 'b', 'e'};
    char [] t = {'x', 'b'};
    int count = 0;
    int tInd = 0;
    for (int i = 0;
    i < (c.length); i ++) {
        if (tInd < t.length && t [tInd] == c [i]) {
            tInd ++;
        } else {
            tInd = 0;
        }
        if (tInd == t.length) {
            count ++;
            tInd = 0;
        }
    }
    System.out.println ("Number of Occurences " + count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12410728_12410838_1_20
12410728_12412988_1_18
Title: string match sequence array 
----------------------------------------

public static void main (String args []) {
    char [] c = {'a', 'x', 'c', 'e'};
    char [] t = {'x', 'b'};
    int count = 0, j;
    for (int i = 0;
    i < (c.length); i ++) {
        int p = i;
        for (j = 0; j < (t.length); j ++) {
            if (c [p] != t [j]) {
                break;
            }
            p ++;
        }
        if (j == t.length) {
            count ++;
        }
    }
    System.out.println ("Number of Occurences " + count);
}
----------------------------------------

public static void main (String [] args) {
    char [] c = {'c', 'a', 'x', 'b'};
    char [] t = {'x', 'b'};
    int count = 0, j;
    for (int i = 0;
    i <= (c.length - t.length); i ++) {
        for (j = 0; j < (t.length); j ++) {
            if (t [j] != c [i + j]) {
                break;
            }
        }
        if (j == t.length) count ++;

    }
    System.out.println ("Number of Occurences " + count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12410728_12411031_1_20
12410728_12412988_1_18
Title: string match sequence array 
----------------------------------------

public static void main (String args []) {
    char [] c = {'a', 'x', 'b', 'c', 'x', 'b', 'e'};
    char [] t = {'x', 'b'};
    int count = 0;
    int tInd = 0;
    for (int i = 0;
    i < (c.length); i ++) {
        if (tInd < t.length && t [tInd] == c [i]) {
            tInd ++;
        } else {
            tInd = 0;
        }
        if (tInd == t.length) {
            count ++;
            tInd = 0;
        }
    }
    System.out.println ("Number of Occurences " + count);
}
----------------------------------------

public static void main (String [] args) {
    char [] c = {'c', 'a', 'x', 'b'};
    char [] t = {'x', 'b'};
    int count = 0, j;
    for (int i = 0;
    i <= (c.length - t.length); i ++) {
        for (j = 0; j < (t.length); j ++) {
            if (t [j] != c [i + j]) {
                break;
            }
        }
        if (j == t.length) count ++;

    }
    System.out.println ("Number of Occurences " + count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1241253_1241731_16_29
1241253_1241748_29_39
Title: Inside clipping with Java Graphics 
----------------------------------------

public void paintComponent (Graphics g) {
    super.paintComponent (g);
    Polygon clip = new Polygon (new int [] {0, 100, 100, 0, 0, 20, 20, 80, 80, 0}, new int [] {0, 0, 60, 60, 20, 20, 40, 40, 20, 20}, 10);
    g.setClip (clip);
    g.setColor (Color.BLACK);
    g.fillRect (0, 0, 100, 60);
    g.setColor (Color.WHITE);
    g.drawLine (0, 0, 100, 60);
}
----------------------------------------

public void paintComponent (Graphics g) {
    Graphics2D g2 = (Graphics2D) g.create ();
    Rectangle2D rectangleNotToDrawIn = new Rectangle2D.Double (100, 100, 20, 30);
    Area outside = calculateRectOutside (rectangleNotToDrawIn);
    g2.setPaint (Color.white);
    g2.fillRect (0, 0, getWidth (), getHeight ());
    g2.setPaint (Color.black);
    g2.setClip (outside);
    g2.drawLine (0, 0, getWidth (), getHeight ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12413302_12433692_28_47
12413302_18495980_15_44
Title: InterviewStreet unfriendly numbers java 
----------------------------------------

public static void main (String [] args) throws Exception {
    Scanner in = new Scanner (System.in);
    int n = in.nextInt ();
    long k = in.nextLong (), g;
    long [] unf = new long [n];
    ArrayList < Long > factors = new ArrayList < Long > ();
    factors = get_factors (k);
    for (int i = 0;
    i < n; i ++) {
        unf [i] = in.nextLong ();
        g = gcd (k, unf [i]);
        for (int j = factors.size () - 1;
        j >= 0; j --) {
            if (g % factors.get (j) == 0) factors.remove (j);

        }
    }
    if (n == 0) System.out.println (2);
    else System.out.println (factors.size ());

}
----------------------------------------

public static void main (String [] args) {
    Solution solution = new Solution ();
    Scanner scanner = new Scanner (System.in);
    solution.n = scanner.nextLong ();
    solution.k = scanner.nextLong ();
    for (long l = 0;
    l < solution.n; l ++) {
        solution.unfriendlyNumbers.add (scanner.nextLong ());
    }
    Set < Long > factors = findFactorsOfNumber (solution.k);
    Set < Long > gcdSet = new HashSet < Long > ();
    for (long unfriendlyNumber : solution.unfriendlyNumbers) {
        gcdSet.add (gcd (solution.k, unfriendlyNumber));
    }
    result = factors.size ();
    for (Long factor : factors) {
        for (long gcd : gcdSet) {
            if ((gcd >= factor && gcd % factor == 0)) {
                result --;
                break;
            }
        }
    }
    System.out.println (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12419077_12420458_113_126
12419077_12420458_146_165
Title: SWTChart mouse event handling 
----------------------------------------

public void handleEvent (Event event) {
    IAxis xAxis = chart.getAxisSet ().getXAxis (0);
    IAxis yAxis = chart.getAxisSet ().getYAxis (0);
    double endX = xAxis.getDataCoordinate (event.x);
    double endY = yAxis.getDataCoordinate (event.y);
    System.out.println (startX + " " + endX);
    System.out.println (startY + " " + endY);
    drag = false;
    plotArea.redraw ();
}
----------------------------------------

public void handleEvent (Event event) {
    if (drag) {
        GC gc = event.gc;
        gc.setBackground (Display.getDefault ().getSystemColor (SWT.COLOR_RED));
        gc.setAlpha (128);
        int minX = Math.min (startXPos, currentX);
        int minY = Math.min (startYPos, currentY);
        int maxX = Math.max (startXPos, currentX);
        int maxY = Math.max (startYPos, currentY);
        int width = maxX - minX;
        int height = maxY - minY;
        gc.fillRectangle (minX, minY, width, height);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12419077_12420458_113_126
12419077_12420458_96_107
Title: SWTChart mouse event handling 
----------------------------------------

public void handleEvent (Event event) {
    IAxis xAxis = chart.getAxisSet ().getXAxis (0);
    IAxis yAxis = chart.getAxisSet ().getYAxis (0);
    double endX = xAxis.getDataCoordinate (event.x);
    double endY = yAxis.getDataCoordinate (event.y);
    System.out.println (startX + " " + endX);
    System.out.println (startY + " " + endY);
    drag = false;
    plotArea.redraw ();
}
----------------------------------------

public void handleEvent (Event event) {
    IAxis xAxis = chart.getAxisSet ().getXAxis (0);
    IAxis yAxis = chart.getAxisSet ().getYAxis (0);
    startX = xAxis.getDataCoordinate (event.x);
    startY = yAxis.getDataCoordinate (event.y);
    startXPos = event.x;
    startYPos = event.y;
    drag = true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12419077_12420458_146_165
12419077_12420458_96_107
Title: SWTChart mouse event handling 
----------------------------------------

public void handleEvent (Event event) {
    if (drag) {
        GC gc = event.gc;
        gc.setBackground (Display.getDefault ().getSystemColor (SWT.COLOR_RED));
        gc.setAlpha (128);
        int minX = Math.min (startXPos, currentX);
        int minY = Math.min (startYPos, currentY);
        int maxX = Math.max (startXPos, currentX);
        int maxY = Math.max (startYPos, currentY);
        int width = maxX - minX;
        int height = maxY - minY;
        gc.fillRectangle (minX, minY, width, height);
    }
}
----------------------------------------

public void handleEvent (Event event) {
    IAxis xAxis = chart.getAxisSet ().getXAxis (0);
    IAxis yAxis = chart.getAxisSet ().getYAxis (0);
    startX = xAxis.getDataCoordinate (event.x);
    startY = yAxis.getDataCoordinate (event.y);
    startXPos = event.x;
    startYPos = event.y;
    drag = true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12419105_12419794_112_160
12419105_12419794_55_103
Title: "Use 2 JComboBoxes to do different math equations java" 
----------------------------------------

public void actionPerformed (ActionEvent actionEvent) {
    double numl = Double.parseDouble (konvright.getText ());
    int combovalg1 = Valutavalg1.getSelectedIndex ();
    int combovalg2 = Valutavalg2.getSelectedIndex ();
    if (combovalg2 == 0) {
        if (combovalg1 == 0) {
            double totaltVerdi = numl * 10;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg1 == 1) {
            double totaltVerdi = numl * 100;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg1 == 2) {
            double totaltVerdi = numl * 1000;
            setTotal (totaltVerdi, utbytte);
        }
    }
    if (combovalg2 == 1) {
        if (combovalg1 == 0) {
            double totaltVerdi = numl * 1000;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg1 == 1) {
            double totaltVerdi = numl * 100000;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg1 == 2) {
            double totaltVerdi = numl * 1000000;
            setTotal (totaltVerdi, utbytte);
        }
    }
    if (combovalg2 == 2) {
        if (combovalg1 == 0) {
            double totaltVerdi = numl * 1000000;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg1 == 1) {
            double totaltVerdi = numl * 1000000;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg1 == 2) {
            double totaltVerdi = numl * 10000000;
            setTotal (totaltVerdi, utbytte);
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent actionEvent) {
    double numl = Double.parseDouble (konvleft.getText ());
    int combovalg1 = Valutavalg1.getSelectedIndex ();
    int combovalg2 = Valutavalg2.getSelectedIndex ();
    if (combovalg1 == 0) {
        if (combovalg2 == 0) {
            double totaltVerdi = numl * 10;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg2 == 1) {
            double totaltVerdi = numl * 100;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg2 == 2) {
            double totaltVerdi = numl * 1000;
            setTotal (totaltVerdi, utbytte);
        }
    }
    if (combovalg1 == 1) {
        if (combovalg2 == 0) {
            double totaltVerdi = numl * 1000;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg2 == 1) {
            double totaltVerdi = numl * 100000;
            setTotal (totaltVerdi, utbytte);
        }
        if (combovalg2 == 2) {
            double totaltVerdi = numl * 1000000;
            setTotal (totaltVerdi, utbytte);
        }
    }
    if (combovalg1 == 2) {
        if (combovalg2 == 0) {
            double totaltVerdi = numl * 1000000;
            setTotal (totaltVerdi, utbytte);
        } else if (combovalg2 == 1) {
            double totaltVerdi = numl * 1000000;
            setTotal (totaltVerdi, utbytte);
        } else if (combovalg2 == 2) {
            double totaltVerdi = numl * 10000000;
            setTotal (totaltVerdi, utbytte);
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12419808_12419852_1_12
12419808_12419904_1_11
Title: Finding the smallest integer that is a factor of C? 
----------------------------------------

public static long smallestFactor (int C) {
    for (int i = 2;
    i * i <= C; i ++) {
        if (C % i == 0) {
            return i;
        }
    }
    return C;
}
----------------------------------------

public static long smallestFactor (int x) {
    if (x < 1) return - 1;

    if (x == 1) return 1;

    for (int i = 2;
    i <= x; i ++) if (x % i == 0) return i;

    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12448955_12458626_46_62
12448955_12458626_64_76
Title: Java snail line layout manager 
----------------------------------------

private Dimension getSize (Container parent, Size size) {
    doLayoutContainer (parent, Short.MAX_VALUE, Short.MAX_VALUE, size);
    Point min = new Point (Integer.MAX_VALUE, Integer.MAX_VALUE);
    Point max = new Point (0, 0);
    for (Component component : parent.getComponents ()) {
        Dimension preferredSize = getSize (component, size);
        min.x = Math.min (min.x, component.getX ());
        min.y = Math.min (min.y, component.getY ());
        max.x = Math.max (max.x, component.getX () + preferredSize.width);
        max.y = Math.max (max.y, component.getY () + preferredSize.height);
    }
    int center = Short.MAX_VALUE / 2;
    return new Dimension (Math.max (Math.abs (center - min.x), Math.abs (center - max.x) * 2), Math.max (Math.abs (center - min.y), Math.abs (center - max.y) * 2));
}
----------------------------------------

private Dimension getSize (Component component, Size size) {
    switch (size) {
        case MAX :
            return component.getMaximumSize ();
        case MIN :
            return component.getMinimumSize ();
        case PREF :
            return component.getPreferredSize ();
        default :
            assert false : "Unknown size: " + size;
            return new Dimension ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12451236_12452265_109_122
12451236_12452265_225_236
Title: JPanel only showing components sometimes 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to expert");
    difficulty = "expert";
    newPlayer.setHp (newPlayer, 100);
    enemyExpert.setHp (enemyExpert, 100);
    enemyExpert.moves.add ("super punch");
    enemyExpert.moves.add ("smash");
    enemyExpert.moves.add ("jump kick");
    enemyExpert.damages.add (20);
    enemyExpert.damages.add (25);
    enemyExpert.damages.add (30);
    enemy = enemyExpert;
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    final String mName = moveName.getText ();
    final int mDam = moveDamage.getValue ();
    newPlayer.moves.add (mName);
    newPlayer.damages.add (mDam);
    newPanel.removeAll ();
    newPanel.updateUI ();
    battleGUISelection (x);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12451236_12452265_109_122
12451236_12452265_79_89
Title: JPanel only showing components sometimes 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to expert");
    difficulty = "expert";
    newPlayer.setHp (newPlayer, 100);
    enemyExpert.setHp (enemyExpert, 100);
    enemyExpert.moves.add ("super punch");
    enemyExpert.moves.add ("smash");
    enemyExpert.moves.add ("jump kick");
    enemyExpert.damages.add (20);
    enemyExpert.damages.add (25);
    enemyExpert.damages.add (30);
    enemy = enemyExpert;
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to beginner");
    difficulty = "beginner";
    newPlayer.setHp (newPlayer, 50);
    enemyBeginner.setHp (enemyBeginner, 50);
    enemyBeginner.moves.add ("punch");
    enemyBeginner.moves.add ("kick");
    enemyBeginner.damages.add (10);
    enemyBeginner.damages.add (10);
    enemy = enemyBeginner;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12451236_12452265_109_122
12451236_12452265_93_105
Title: JPanel only showing components sometimes 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to expert");
    difficulty = "expert";
    newPlayer.setHp (newPlayer, 100);
    enemyExpert.setHp (enemyExpert, 100);
    enemyExpert.moves.add ("super punch");
    enemyExpert.moves.add ("smash");
    enemyExpert.moves.add ("jump kick");
    enemyExpert.damages.add (20);
    enemyExpert.damages.add (25);
    enemyExpert.damages.add (30);
    enemy = enemyExpert;
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to intermediate");
    difficulty = "intermediate";
    newPlayer.setHp (newPlayer, 75);
    enemyIntermediate.setHp (enemyIntermediate, 75);
    enemyIntermediate.moves.add ("punch");
    enemyIntermediate.moves.add ("kick");
    enemyIntermediate.moves.add ("slam");
    enemyIntermediate.damages.add (20);
    enemyIntermediate.damages.add (15);
    enemyIntermediate.damages.add (25);
    enemy = enemyIntermediate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12451236_12452265_225_236
12451236_12452265_79_89
Title: JPanel only showing components sometimes 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    final String mName = moveName.getText ();
    final int mDam = moveDamage.getValue ();
    newPlayer.moves.add (mName);
    newPlayer.damages.add (mDam);
    newPanel.removeAll ();
    newPanel.updateUI ();
    battleGUISelection (x);
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to beginner");
    difficulty = "beginner";
    newPlayer.setHp (newPlayer, 50);
    enemyBeginner.setHp (enemyBeginner, 50);
    enemyBeginner.moves.add ("punch");
    enemyBeginner.moves.add ("kick");
    enemyBeginner.damages.add (10);
    enemyBeginner.damages.add (10);
    enemy = enemyBeginner;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12451236_12452265_225_236
12451236_12452265_93_105
Title: JPanel only showing components sometimes 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    final String mName = moveName.getText ();
    final int mDam = moveDamage.getValue ();
    newPlayer.moves.add (mName);
    newPlayer.damages.add (mDam);
    newPanel.removeAll ();
    newPanel.updateUI ();
    battleGUISelection (x);
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to intermediate");
    difficulty = "intermediate";
    newPlayer.setHp (newPlayer, 75);
    enemyIntermediate.setHp (enemyIntermediate, 75);
    enemyIntermediate.moves.add ("punch");
    enemyIntermediate.moves.add ("kick");
    enemyIntermediate.moves.add ("slam");
    enemyIntermediate.damages.add (20);
    enemyIntermediate.damages.add (15);
    enemyIntermediate.damages.add (25);
    enemy = enemyIntermediate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12451236_12452265_79_89
12451236_12452265_93_105
Title: JPanel only showing components sometimes 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to beginner");
    difficulty = "beginner";
    newPlayer.setHp (newPlayer, 50);
    enemyBeginner.setHp (enemyBeginner, 50);
    enemyBeginner.moves.add ("punch");
    enemyBeginner.moves.add ("kick");
    enemyBeginner.damages.add (10);
    enemyBeginner.damages.add (10);
    enemy = enemyBeginner;
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    label.setText ("Difficulty set to intermediate");
    difficulty = "intermediate";
    newPlayer.setHp (newPlayer, 75);
    enemyIntermediate.setHp (enemyIntermediate, 75);
    enemyIntermediate.moves.add ("punch");
    enemyIntermediate.moves.add ("kick");
    enemyIntermediate.moves.add ("slam");
    enemyIntermediate.damages.add (20);
    enemyIntermediate.damages.add (15);
    enemyIntermediate.damages.add (25);
    enemy = enemyIntermediate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12452024_28728339_5_15
12452024_30604845_6_17
Title: problems importing scanner class 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String userName;
    System.out.println ("Enter a number");
    username = sc.nextLine ();
    System.out.println ("your number is" + username + "enter your next number");
    username2 = sc.nextline ();
    System.out.println ("your total is" + username2);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String userName;
    System.out.println ("Enter a number");
    int username = sc.nextInt ();
    System.out.println ("your number is " + username);
    System.out.println ("enter your next number");
    int username2 = sc.nextInt ();
    System.out.println ("your total is " + (username2 + username));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12452024_28728339_5_15
12452024_39340094_5_16
Title: problems importing scanner class 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String userName;
    System.out.println ("Enter a number");
    username = sc.nextLine ();
    System.out.println ("your number is" + username + "enter your next number");
    username2 = sc.nextline ();
    System.out.println ("your total is" + username2);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String userName;
    System.out.println ("Enter a number");
    int userName = sc.nextInt ();
    System.out.println ("your number is " + userName);
    System.out.println ("enter your next number");
    int userName2 = sc.nextInt ();
    System.out.println ("your total is " + (userName2 + userName));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12459914_43747692_108_128
12459914_43747692_130_140
Title: Easy way to dynamically invoke web services (without JDK or proxy classes) 
----------------------------------------

public void write (Object obj, MessagePartInfo part, XMLStreamWriter writer) {
    try {
        if (! doWrite (obj, writer)) {
            if (part.isElement ()) {
                QName element = part.getElementQName ();
                writer.writeStartElement (element.getNamespaceURI (), element.getLocalPart ());
                if (obj != null) {
                    writer.writeCharacters (obj.toString ());
                }
                writer.writeEndElement ();
            }
        }
    } catch (XMLStreamException e) {
        throw new Fault ("COULD_NOT_READ_XML_STREAM", LOG, e);
    }
}
----------------------------------------

public void write (Object obj, XMLStreamWriter writer) {
    try {
        if (! doWrite (obj, writer)) {
            throw new UnsupportedOperationException ("Data types of " + obj.getClass () + " are not supported.");
        }
    } catch (XMLStreamException e) {
        throw new Fault ("COULD_NOT_READ_XML_STREAM", LOG, e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12463007_12464954_26_43
12463007_12464954_28_41
Title: How to center a LabelField with large font 
----------------------------------------

public void run () {
    UiApplication.getUiApplication ().invokeLater (new Runnable () {
        public void run () {
            if (fontSize == 50) {
                fontSize = 5;
            }
            lblOne.setFont (Font.getDefault ().derive (Font.PLAIN, fontSize));
            lblTwo.setFont (Font.getDefault ().derive (Font.PLAIN, fontSize + 2));
            lblThree.setFont (Font.getDefault ().derive (Font.PLAIN, fontSize + 4));
            fontSize += 6;
            updateLayout ();
            invalidate ();
        }}

    );
}
----------------------------------------

public void run () {
    if (fontSize == 50) {
        fontSize = 5;
    }
    lblOne.setFont (Font.getDefault ().derive (Font.PLAIN, fontSize));
    lblTwo.setFont (Font.getDefault ().derive (Font.PLAIN, fontSize + 2));
    lblThree.setFont (Font.getDefault ().derive (Font.PLAIN, fontSize + 4));
    fontSize += 6;
    updateLayout ();
    invalidate ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
12480402_12486929_61_80
12480402_23241525_1_21
Title: Adding a remove button to a column in a table 
----------------------------------------

public void update (ViewerCell cell) {
    TableItem item = (TableItem) cell.getItem ();
    Button button;
    if (buttons.containsKey (cell.getElement ())) {
        button = buttons.get (cell.getElement ());
    } else {
        button = new Button ((Composite) cell.getViewerRow ().getControl (), SWT.NONE);
        button.setText ("Remove");
        buttons.put (cell.getElement (), button);
    }
    TableEditor editor = new TableEditor (item.getParent ());
    editor.grabHorizontal = true;
    editor.grabVertical = true;
    editor.setEditor (button, item, cell.getColumnIndex ());
    editor.layout ();
}
----------------------------------------

@Override
public void update (ViewerCell cell) {
    TableItem item = (TableItem) cell.getItem ();
    Button button;
    if (buttons.containsKey (cell.getElement ())) {
        button = buttons.get (cell.getElement ());
    } else {
        button = new Button ((Composite) cell.getViewerRow ().getControl (), SWT.NONE);
        button.setText ("Remove");
        buttons.put (cell.getElement (), button);
        TableEditor editor = new TableEditor (item.getParent ());
        editor.grabHorizontal = true;
        editor.grabVertical = true;
        editor.setEditor (button, item, cell.getColumnIndex ());
        editor.layout ();
    }
}
----------------------------------------

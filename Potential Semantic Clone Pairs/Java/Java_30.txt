$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_25526428_2_18
19459197_31628373_4_15
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_25526428_2_18
19459197_38969470_4_20
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_25526428_2_18
19459197_39779422_55_75
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_25526428_2_18
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_28495603_1_18
19459197_30351219_1_23
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_28495603_1_18
19459197_31628373_4_15
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_28495603_1_18
19459197_38969470_4_20
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_28495603_1_18
19459197_39779422_55_75
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_28495603_1_18
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_30351219_1_23
19459197_31628373_4_15
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_30351219_1_23
19459197_38969470_4_20
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_30351219_1_23
19459197_39779422_55_75
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_30351219_1_23
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_31628373_4_15
19459197_38969470_4_20
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_31628373_4_15
19459197_39779422_55_75
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_31628373_4_15
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_38969470_4_20
19459197_39779422_55_75
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_38969470_4_20
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_39779422_55_75
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19460781_19460917_1_18
19460781_39501432_1_23
Title: Finding valid neighbors in 2D array 
----------------------------------------

public List < Element > getNeighbors (int x, int y) {
    List < Element > neighbors = new ArrayList < > ();
    for (int i = - 1;
    i <= 1; ++ i) {
        for (int j = - 1;
        j <= 1; ++ j) {
            if (i == 0 && j == 0) {
                continue;
            }
            if (i + x >= 0 && i + x < array.length && j + y >= 0 && j + y < array [0].length) {
                neighbors.add (array [i] [j]);
            }
        }
    }
    return neighbors;
}
----------------------------------------

public static ArrayList < Integer > getNeighbors (int i, int j, int x, int y, int [] [] cellValues) {
    ArrayList < Integer > neighbors = new ArrayList < > ();
    if (isCabin (i, j, x, y)) {
        if (isCabin (i + 1, j, x, y)) neighbors.add (cellValues [i + 1] [j]);

        if (isCabin (i - 1, j, x, y)) neighbors.add (cellValues [i - 1] [j]);

        if (isCabin (i, j + 1, x, y)) neighbors.add (cellValues [i] [j + 1]);

        if (isCabin (i, j - 1, x, y)) neighbors.add (cellValues [i] [j - 1]);

        if (isCabin (i - 1, j + 1, x, y)) neighbors.add (cellValues [i - 1] [j + 1]);

        if (isCabin (i + 1, j - 1, x, y)) neighbors.add (cellValues [i + 1] [j - 1]);

        if (isCabin (i + 1, j + 1, x, y)) neighbors.add (cellValues [i + 1] [j + 1]);

        if (isCabin (i - 1, j - 1, x, y)) neighbors.add (cellValues [i - 1] [j - 1]);

    }
    return neighbors;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19460781_19460948_1_15
19460781_38196801_3_24
Title: Finding valid neighbors in 2D array 
----------------------------------------

public static void main (String args []) {
    int shouldTestRight = 1;
    int shouldTestLeft = - 1;
    int shouldTestUp = 1;
    int shouldTestDown = - 1;
    example (shouldTestRight, true, false);
    example (shouldTestLeft, true, false);
    example (shouldTestUp, false, true);
    example (shouldTestDown, false, true);
}
----------------------------------------

public static void main (String [] args) {
    int array [] [] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};
    for (int i = 0;
    i < array.length; i ++) {
        for (int j = 0;
        j < array [0].length; j ++) {
            System.out.println ("neightbours of " + array [i] [j]);
            int neb [] = findneighbours (i, j, array);
            for (int k = 0;
            k < neb.length; k ++) {
                if (neb [k] != - 1) {
                    System.out.print (" " + neb [k] + ",");
                }
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_25259341_3_16
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_25476158_46_63
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_30055111_1_21
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_31488484_4_26
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_31753837_2_22
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_31859619_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_33207338_5_40
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_19462914_2_14
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ();
    String [] words = input.split (" ");
    String reverse = "";
    for (int i = 0;
    i < words.length; i ++) {
        for (int j = words [i].length () - 1;
        j >= 0; j --) {
            reverse += words [i].charAt (j);
        }
        System.out.print (reverse + " ");
        reverse = "";
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_25476158_46_63
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_30055111_1_21
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_31488484_4_26
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_31753837_2_22
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_31859619_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_33207338_5_40
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25259341_3_16
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String str [] = "He is the one".split (" ");
    String finalStr = "";
    for (int i = str.length - 1;
    i >= 0; i --) {
        finalStr += str [i] + " ";
        finalStr.toString ();
        sb = new StringBuilder (finalStr);
        sb.reverse ();
    }
    System.out.print (sb);
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_30055111_1_21
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_31488484_4_26
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_31753837_2_22
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_31859619_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_33207338_5_40
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_25476158_46_63
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_30055111_1_21
19462439_31488484_4_26
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_30055111_1_21
19462439_31753837_2_22
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_30055111_1_21
19462439_31859619_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_30055111_1_21
19462439_33207338_5_40
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_30055111_1_21
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_30055111_1_21
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_30055111_1_21
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String args []) {
    String eString = " \"This is the one\"";
    String double_quoteString [] = eString.split ("\"");
    eString = double_quoteString [1];
    String [] splitStrings = eString.split ("\\s+");
    String reverse = "";
    for (int i = 0;
    i < splitStrings.length; i ++) {
        if (i != 0) reverse += " ";

        for (int j = splitStrings [i].length () - 1;
        j >= 0; j --) {
            reverse += splitStrings [i].charAt (j);
        }
    }
    reverse = "\"" + reverse + "\"";
    System.out.println ("reverse is " + reverse);
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31488484_4_26
19462439_31753837_2_22
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31488484_4_26
19462439_31859619_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31488484_4_26
19462439_33207338_5_40
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31488484_4_26
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31488484_4_26
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31488484_4_26
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] aaa) {
    String s;
    String rev = "";
    String temp = " ";
    Scanner ob = new Scanner (System.in);
    System.out.println (" enter String");
    s = ob.nextLine ();
    for (int i = s.length () - 1;
    i >= 0; i --) rev = rev + s.charAt (i);

    System.out.println (rev);
    String [] a = rev.split (" ");
    int j = a.length - 1;
    while (j >= 0) {
        temp = temp + a [j];
        temp = temp + " ";
        j --;
    }
    System.out.println (temp);
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31753837_2_22
19462439_31859619_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31753837_2_22
19462439_33207338_5_40
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31753837_2_22
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31753837_2_22
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31753837_2_22
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the string to be reversed");
    String str = br.readLine ();
    char rev;
    int k = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == 32 || i == str.length () - 1) {
            for (int j = i;
            j >= k; j --) {
                rev = str.charAt (j);
                System.out.print (rev);
            }
            k = i;
            continue;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31859619_3_19
19462439_33207338_5_40
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31859619_3_19
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31859619_3_19
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_31859619_3_19
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter string");
    String s = sc.nextLine ();
    String [] words = s.split (" ");
    for (int i = words.length - 1;
    i >= 0; i --) {
        System.out.print (words [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_33207338_5_40
19462439_34663388_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_33207338_5_40
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_33207338_5_40
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    String m = "java is           great";
    String temp = "";
    System.out.println (m);
    String store = "";
    int cnt = 0;
    char [] p = m.toCharArray ();
    for (int i = p.length - 1;
    i >= 0; i --) {
        if (p [i] == ' ' || i == 0) {
            if (cnt >= 1 || i == 0) {
                if (i == 0) temp = temp + p [i];

                store = store + new StringBuilder (temp).reverse ().toString ();
                temp = "";
                cnt = 0;
            }
            if (p [i] == ' ') {
                store = store + p [i];
            }
        } else {
            temp = temp + p [i];
            System.out.println (p [i]);
            cnt ++;
        }
    }
    System.out.println (store);
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_34663388_1_15
19462439_44733618_3_19
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_34663388_1_15
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    String s;
    s = "hi Mister geek is here";
    int j = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if ((int) s.charAt (i) == 32 || i == s.length () - 1) {
            for (int u = i;
            u >= j; u --) System.out.print (s.charAt (u));

            j = i;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19462439_44733618_3_19
19462439_48082578_1_15
Title: Reverse each word of user given string without altering their position 
----------------------------------------

public static void main (String [] args) {
    String s = "My name is Sarthak ";
    StringBuffer sb = new StringBuffer ();
    int n = s.length ();
    int j = n;
    int i;
    for (i = n - 1; i >= 0; i --) {
        if (s.charAt (i) == ' ') {
            sb.append (s.substring (i + 1, j));
            sb.append (" ");
            j = i;
        }
    }
    sb.append (s.substring (0, j));
    System.out.println (sb);
}
----------------------------------------

public static void main (String [] args) {
    String s = "hello dear";
    String su = "";
    String words [] = s.split (" ");
    for (String w : words) {
        StringBuilder sb = new StringBuilder (w);
        sb.reverse ();
        su += sb.toString () + " ";
    }
    System.out.println (su.trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_19466296_2_32
19465965_23515329_4_23
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    final int condition = N + 1;
    int currentMax = 0;
    int lastUpdate = 0;
    int countersArray [] = new int [N];
    for (int iii = 0;
    iii < A.length; iii ++) {
        int currentValue = A [iii];
        if (currentValue == condition) {
            lastUpdate = currentMax
        } else {
            int position = currentValue - 1;
            if (countersArray [position] < lastUpdate) countersArray [position] = lastUpdate + 1;
            else countersArray [position] ++;

            if (countersArray [position] > currentMax) {
                currentMax = countersArray [position];
            }
        }
    }
    for (int iii = 0;
    iii < N; iii ++) if (countersArray [iii] < lastUpdate) countersArray [iii] = lastUpdate;

    return countersArray;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int counter [] = new int [N];
    int n = A.length;
    int max = - 1, current_min = 0;
    for (int i = 0;
    i < n; i ++) {
        if (A [i] >= 1 && A [i] <= N) {
            if (counter [A [i] - 1] < current_min) counter [A [i] - 1] = current_min;

            counter [A [i] - 1] = counter [A [i] - 1] + 1;
            if (counter [A [i] - 1] > max) max = counter [A [i] - 1];

        } else if (A [i] == N + 1) {
            current_min = max;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counter [i] < current_min) counter [i] = current_min;

    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_19466296_2_32
19465965_27589440_1_24
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    final int condition = N + 1;
    int currentMax = 0;
    int lastUpdate = 0;
    int countersArray [] = new int [N];
    for (int iii = 0;
    iii < A.length; iii ++) {
        int currentValue = A [iii];
        if (currentValue == condition) {
            lastUpdate = currentMax
        } else {
            int position = currentValue - 1;
            if (countersArray [position] < lastUpdate) countersArray [position] = lastUpdate + 1;
            else countersArray [position] ++;

            if (countersArray [position] > currentMax) {
                currentMax = countersArray [position];
            }
        }
    }
    for (int iii = 0;
    iii < N; iii ++) if (countersArray [iii] < lastUpdate) countersArray [iii] = lastUpdate;

    return countersArray;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] count = new int [N];
    int max = 0;
    int lastUpdate = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (count [A [i] - 1] < lastUpdate) {
                count [A [i] - 1] = lastUpdate + 1;
            } else {
                count [A [i] - 1] ++;
            }
            max = Math.max (max, count [A [i] - 1]);
        } else {
            lastUpdate = max;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (count [i] < lastUpdate) count [i] = lastUpdate;

    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_19466296_2_32
19465965_31633086_12_37
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    final int condition = N + 1;
    int currentMax = 0;
    int lastUpdate = 0;
    int countersArray [] = new int [N];
    for (int iii = 0;
    iii < A.length; iii ++) {
        int currentValue = A [iii];
        if (currentValue == condition) {
            lastUpdate = currentMax
        } else {
            int position = currentValue - 1;
            if (countersArray [position] < lastUpdate) countersArray [position] = lastUpdate + 1;
            else countersArray [position] ++;

            if (countersArray [position] > currentMax) {
                currentMax = countersArray [position];
            }
        }
    }
    for (int iii = 0;
    iii < N; iii ++) if (countersArray [iii] < lastUpdate) countersArray [iii] = lastUpdate;

    return countersArray;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int length = A.length, maxOfCounter = 0, lastUpdate = 0;
    int applyMax = N + 1;
    int result [] = new int [N];
    for (int i = 0;
    i < length; ++ i) {
        if (A [i] == applyMax) {
            lastUpdate = maxOfCounter;
        } else if (A [i] <= N) {
            int position = A [i] - 1;
            result [position] = result [position] > lastUpdate ? result [position] + 1 : lastUpdate + 1;
            if (maxOfCounter <= result [position]) {
                maxOfCounter = result [position];
            }
        }

    }
    for (int i = 0;
    i < N; ++ i) {
        if (result [i] < lastUpdate) {
            result [i] = lastUpdate;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_19466296_2_32
19465965_42920463_1_30
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    final int condition = N + 1;
    int currentMax = 0;
    int lastUpdate = 0;
    int countersArray [] = new int [N];
    for (int iii = 0;
    iii < A.length; iii ++) {
        int currentValue = A [iii];
        if (currentValue == condition) {
            lastUpdate = currentMax
        } else {
            int position = currentValue - 1;
            if (countersArray [position] < lastUpdate) countersArray [position] = lastUpdate + 1;
            else countersArray [position] ++;

            if (countersArray [position] > currentMax) {
                currentMax = countersArray [position];
            }
        }
    }
    for (int iii = 0;
    iii < N; iii ++) if (countersArray [iii] < lastUpdate) countersArray [iii] = lastUpdate;

    return countersArray;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int maxAIs = 0;
    int minAShouldBe = 0;
    for (int x : A) {
        if (x >= 1 && x <= N) {
            if (counters [x - 1] < minAShouldBe) {
                counters [x - 1] = minAShouldBe;
            }
            counters [x - 1] ++;
            if (counters [x - 1] > maxAIs) {
                maxAIs = counters [x - 1];
            }
        } else if (x == N + 1) {
            minAShouldBe = maxAIs;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counters [i] < minAShouldBe) {
            counters [i] = minAShouldBe;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_19466296_2_32
19465965_48645313_5_32
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    final int condition = N + 1;
    int currentMax = 0;
    int lastUpdate = 0;
    int countersArray [] = new int [N];
    for (int iii = 0;
    iii < A.length; iii ++) {
        int currentValue = A [iii];
        if (currentValue == condition) {
            lastUpdate = currentMax
        } else {
            int position = currentValue - 1;
            if (countersArray [position] < lastUpdate) countersArray [position] = lastUpdate + 1;
            else countersArray [position] ++;

            if (countersArray [position] > currentMax) {
                currentMax = countersArray [position];
            }
        }
    }
    for (int iii = 0;
    iii < N; iii ++) if (countersArray [iii] < lastUpdate) countersArray [iii] = lastUpdate;

    return countersArray;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] res = new int [N];
    int max = 0;
    int minValue = 0;
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        int pos = value - 1;
        if (isToSum (value, N)) {
            if (res [pos] < minValue) {
                res [pos] = minValue;
            }
            res [pos] += 1;
            if (max < res [pos]) {
                max = res [pos];
            }
        } else {
            minValue = max;
        }
    }
    for (int i = 0;
    i < res.length; i ++) {
        if (res [i] < minValue) {
            res [i] = minValue;
        }
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_19466296_2_32
19465965_49631227_3_35
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    final int condition = N + 1;
    int currentMax = 0;
    int lastUpdate = 0;
    int countersArray [] = new int [N];
    for (int iii = 0;
    iii < A.length; iii ++) {
        int currentValue = A [iii];
        if (currentValue == condition) {
            lastUpdate = currentMax
        } else {
            int position = currentValue - 1;
            if (countersArray [position] < lastUpdate) countersArray [position] = lastUpdate + 1;
            else countersArray [position] ++;

            if (countersArray [position] > currentMax) {
                currentMax = countersArray [position];
            }
        }
    }
    for (int iii = 0;
    iii < N; iii ++) if (countersArray [iii] < lastUpdate) countersArray [iii] = lastUpdate;

    return countersArray;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int [] countersLastMaxIndexes = new int [N];
    int maxValue = 0;
    int fixedMaxValue = 0;
    int maxIndex = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (countersLastMaxIndexes [A [i] - 1] != maxIndex) {
                counters [A [i] - 1] = fixedMaxValue;
                countersLastMaxIndexes [A [i] - 1] = maxIndex;
            }
            counters [A [i] - 1] ++;
            if (counters [A [i] - 1] > maxValue) {
                maxValue = counters [A [i] - 1];
            }
        } else {
            maxIndex = i;
            fixedMaxValue = maxValue;
        }
    }
    for (int i = 0;
    i < countersLastMaxIndexes.length; i ++) {
        if (countersLastMaxIndexes [i] != maxIndex) {
            counters [i] = fixedMaxValue;
            countersLastMaxIndexes [i] = maxIndex;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_19466296_2_32
19465965_50180750_1_23
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    final int condition = N + 1;
    int currentMax = 0;
    int lastUpdate = 0;
    int countersArray [] = new int [N];
    for (int iii = 0;
    iii < A.length; iii ++) {
        int currentValue = A [iii];
        if (currentValue == condition) {
            lastUpdate = currentMax
        } else {
            int position = currentValue - 1;
            if (countersArray [position] < lastUpdate) countersArray [position] = lastUpdate + 1;
            else countersArray [position] ++;

            if (countersArray [position] > currentMax) {
                currentMax = countersArray [position];
            }
        }
    }
    for (int iii = 0;
    iii < N; iii ++) if (countersArray [iii] < lastUpdate) countersArray [iii] = lastUpdate;

    return countersArray;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] solution = new int [N];
    int maxCounter = 0;
    int maxCountersSum = 0;
    for (int a : A) {
        if (a >= 1 && a <= N) {
            if (solution [a - 1] < maxCountersSum) solution [a - 1] = maxCountersSum;

            solution [a - 1] ++;
            if (solution [a - 1] > maxCounter) maxCounter = solution [a - 1];

        }
        if (a == N + 1) {
            maxCountersSum = maxCounter;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (solution [i] < maxCountersSum) solution [i] = maxCountersSum;

    }
    return solution;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_23515329_4_23
19465965_27589440_1_24
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int counter [] = new int [N];
    int n = A.length;
    int max = - 1, current_min = 0;
    for (int i = 0;
    i < n; i ++) {
        if (A [i] >= 1 && A [i] <= N) {
            if (counter [A [i] - 1] < current_min) counter [A [i] - 1] = current_min;

            counter [A [i] - 1] = counter [A [i] - 1] + 1;
            if (counter [A [i] - 1] > max) max = counter [A [i] - 1];

        } else if (A [i] == N + 1) {
            current_min = max;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counter [i] < current_min) counter [i] = current_min;

    }
    return counter;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] count = new int [N];
    int max = 0;
    int lastUpdate = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (count [A [i] - 1] < lastUpdate) {
                count [A [i] - 1] = lastUpdate + 1;
            } else {
                count [A [i] - 1] ++;
            }
            max = Math.max (max, count [A [i] - 1]);
        } else {
            lastUpdate = max;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (count [i] < lastUpdate) count [i] = lastUpdate;

    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_23515329_4_23
19465965_31633086_12_37
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int counter [] = new int [N];
    int n = A.length;
    int max = - 1, current_min = 0;
    for (int i = 0;
    i < n; i ++) {
        if (A [i] >= 1 && A [i] <= N) {
            if (counter [A [i] - 1] < current_min) counter [A [i] - 1] = current_min;

            counter [A [i] - 1] = counter [A [i] - 1] + 1;
            if (counter [A [i] - 1] > max) max = counter [A [i] - 1];

        } else if (A [i] == N + 1) {
            current_min = max;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counter [i] < current_min) counter [i] = current_min;

    }
    return counter;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int length = A.length, maxOfCounter = 0, lastUpdate = 0;
    int applyMax = N + 1;
    int result [] = new int [N];
    for (int i = 0;
    i < length; ++ i) {
        if (A [i] == applyMax) {
            lastUpdate = maxOfCounter;
        } else if (A [i] <= N) {
            int position = A [i] - 1;
            result [position] = result [position] > lastUpdate ? result [position] + 1 : lastUpdate + 1;
            if (maxOfCounter <= result [position]) {
                maxOfCounter = result [position];
            }
        }

    }
    for (int i = 0;
    i < N; ++ i) {
        if (result [i] < lastUpdate) {
            result [i] = lastUpdate;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_23515329_4_23
19465965_42920463_1_30
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int counter [] = new int [N];
    int n = A.length;
    int max = - 1, current_min = 0;
    for (int i = 0;
    i < n; i ++) {
        if (A [i] >= 1 && A [i] <= N) {
            if (counter [A [i] - 1] < current_min) counter [A [i] - 1] = current_min;

            counter [A [i] - 1] = counter [A [i] - 1] + 1;
            if (counter [A [i] - 1] > max) max = counter [A [i] - 1];

        } else if (A [i] == N + 1) {
            current_min = max;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counter [i] < current_min) counter [i] = current_min;

    }
    return counter;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int maxAIs = 0;
    int minAShouldBe = 0;
    for (int x : A) {
        if (x >= 1 && x <= N) {
            if (counters [x - 1] < minAShouldBe) {
                counters [x - 1] = minAShouldBe;
            }
            counters [x - 1] ++;
            if (counters [x - 1] > maxAIs) {
                maxAIs = counters [x - 1];
            }
        } else if (x == N + 1) {
            minAShouldBe = maxAIs;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counters [i] < minAShouldBe) {
            counters [i] = minAShouldBe;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_23515329_4_23
19465965_48645313_5_32
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int counter [] = new int [N];
    int n = A.length;
    int max = - 1, current_min = 0;
    for (int i = 0;
    i < n; i ++) {
        if (A [i] >= 1 && A [i] <= N) {
            if (counter [A [i] - 1] < current_min) counter [A [i] - 1] = current_min;

            counter [A [i] - 1] = counter [A [i] - 1] + 1;
            if (counter [A [i] - 1] > max) max = counter [A [i] - 1];

        } else if (A [i] == N + 1) {
            current_min = max;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counter [i] < current_min) counter [i] = current_min;

    }
    return counter;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] res = new int [N];
    int max = 0;
    int minValue = 0;
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        int pos = value - 1;
        if (isToSum (value, N)) {
            if (res [pos] < minValue) {
                res [pos] = minValue;
            }
            res [pos] += 1;
            if (max < res [pos]) {
                max = res [pos];
            }
        } else {
            minValue = max;
        }
    }
    for (int i = 0;
    i < res.length; i ++) {
        if (res [i] < minValue) {
            res [i] = minValue;
        }
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_23515329_4_23
19465965_49631227_3_35
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int counter [] = new int [N];
    int n = A.length;
    int max = - 1, current_min = 0;
    for (int i = 0;
    i < n; i ++) {
        if (A [i] >= 1 && A [i] <= N) {
            if (counter [A [i] - 1] < current_min) counter [A [i] - 1] = current_min;

            counter [A [i] - 1] = counter [A [i] - 1] + 1;
            if (counter [A [i] - 1] > max) max = counter [A [i] - 1];

        } else if (A [i] == N + 1) {
            current_min = max;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counter [i] < current_min) counter [i] = current_min;

    }
    return counter;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int [] countersLastMaxIndexes = new int [N];
    int maxValue = 0;
    int fixedMaxValue = 0;
    int maxIndex = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (countersLastMaxIndexes [A [i] - 1] != maxIndex) {
                counters [A [i] - 1] = fixedMaxValue;
                countersLastMaxIndexes [A [i] - 1] = maxIndex;
            }
            counters [A [i] - 1] ++;
            if (counters [A [i] - 1] > maxValue) {
                maxValue = counters [A [i] - 1];
            }
        } else {
            maxIndex = i;
            fixedMaxValue = maxValue;
        }
    }
    for (int i = 0;
    i < countersLastMaxIndexes.length; i ++) {
        if (countersLastMaxIndexes [i] != maxIndex) {
            counters [i] = fixedMaxValue;
            countersLastMaxIndexes [i] = maxIndex;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_23515329_4_23
19465965_50180750_1_23
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int counter [] = new int [N];
    int n = A.length;
    int max = - 1, current_min = 0;
    for (int i = 0;
    i < n; i ++) {
        if (A [i] >= 1 && A [i] <= N) {
            if (counter [A [i] - 1] < current_min) counter [A [i] - 1] = current_min;

            counter [A [i] - 1] = counter [A [i] - 1] + 1;
            if (counter [A [i] - 1] > max) max = counter [A [i] - 1];

        } else if (A [i] == N + 1) {
            current_min = max;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counter [i] < current_min) counter [i] = current_min;

    }
    return counter;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] solution = new int [N];
    int maxCounter = 0;
    int maxCountersSum = 0;
    for (int a : A) {
        if (a >= 1 && a <= N) {
            if (solution [a - 1] < maxCountersSum) solution [a - 1] = maxCountersSum;

            solution [a - 1] ++;
            if (solution [a - 1] > maxCounter) maxCounter = solution [a - 1];

        }
        if (a == N + 1) {
            maxCountersSum = maxCounter;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (solution [i] < maxCountersSum) solution [i] = maxCountersSum;

    }
    return solution;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_27589440_1_24
19465965_31633086_12_37
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] count = new int [N];
    int max = 0;
    int lastUpdate = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (count [A [i] - 1] < lastUpdate) {
                count [A [i] - 1] = lastUpdate + 1;
            } else {
                count [A [i] - 1] ++;
            }
            max = Math.max (max, count [A [i] - 1]);
        } else {
            lastUpdate = max;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (count [i] < lastUpdate) count [i] = lastUpdate;

    }
    return count;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int length = A.length, maxOfCounter = 0, lastUpdate = 0;
    int applyMax = N + 1;
    int result [] = new int [N];
    for (int i = 0;
    i < length; ++ i) {
        if (A [i] == applyMax) {
            lastUpdate = maxOfCounter;
        } else if (A [i] <= N) {
            int position = A [i] - 1;
            result [position] = result [position] > lastUpdate ? result [position] + 1 : lastUpdate + 1;
            if (maxOfCounter <= result [position]) {
                maxOfCounter = result [position];
            }
        }

    }
    for (int i = 0;
    i < N; ++ i) {
        if (result [i] < lastUpdate) {
            result [i] = lastUpdate;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_27589440_1_24
19465965_42920463_1_30
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] count = new int [N];
    int max = 0;
    int lastUpdate = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (count [A [i] - 1] < lastUpdate) {
                count [A [i] - 1] = lastUpdate + 1;
            } else {
                count [A [i] - 1] ++;
            }
            max = Math.max (max, count [A [i] - 1]);
        } else {
            lastUpdate = max;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (count [i] < lastUpdate) count [i] = lastUpdate;

    }
    return count;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int maxAIs = 0;
    int minAShouldBe = 0;
    for (int x : A) {
        if (x >= 1 && x <= N) {
            if (counters [x - 1] < minAShouldBe) {
                counters [x - 1] = minAShouldBe;
            }
            counters [x - 1] ++;
            if (counters [x - 1] > maxAIs) {
                maxAIs = counters [x - 1];
            }
        } else if (x == N + 1) {
            minAShouldBe = maxAIs;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counters [i] < minAShouldBe) {
            counters [i] = minAShouldBe;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_27589440_1_24
19465965_48645313_5_32
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] count = new int [N];
    int max = 0;
    int lastUpdate = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (count [A [i] - 1] < lastUpdate) {
                count [A [i] - 1] = lastUpdate + 1;
            } else {
                count [A [i] - 1] ++;
            }
            max = Math.max (max, count [A [i] - 1]);
        } else {
            lastUpdate = max;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (count [i] < lastUpdate) count [i] = lastUpdate;

    }
    return count;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] res = new int [N];
    int max = 0;
    int minValue = 0;
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        int pos = value - 1;
        if (isToSum (value, N)) {
            if (res [pos] < minValue) {
                res [pos] = minValue;
            }
            res [pos] += 1;
            if (max < res [pos]) {
                max = res [pos];
            }
        } else {
            minValue = max;
        }
    }
    for (int i = 0;
    i < res.length; i ++) {
        if (res [i] < minValue) {
            res [i] = minValue;
        }
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_27589440_1_24
19465965_49631227_3_35
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] count = new int [N];
    int max = 0;
    int lastUpdate = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (count [A [i] - 1] < lastUpdate) {
                count [A [i] - 1] = lastUpdate + 1;
            } else {
                count [A [i] - 1] ++;
            }
            max = Math.max (max, count [A [i] - 1]);
        } else {
            lastUpdate = max;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (count [i] < lastUpdate) count [i] = lastUpdate;

    }
    return count;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int [] countersLastMaxIndexes = new int [N];
    int maxValue = 0;
    int fixedMaxValue = 0;
    int maxIndex = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (countersLastMaxIndexes [A [i] - 1] != maxIndex) {
                counters [A [i] - 1] = fixedMaxValue;
                countersLastMaxIndexes [A [i] - 1] = maxIndex;
            }
            counters [A [i] - 1] ++;
            if (counters [A [i] - 1] > maxValue) {
                maxValue = counters [A [i] - 1];
            }
        } else {
            maxIndex = i;
            fixedMaxValue = maxValue;
        }
    }
    for (int i = 0;
    i < countersLastMaxIndexes.length; i ++) {
        if (countersLastMaxIndexes [i] != maxIndex) {
            counters [i] = fixedMaxValue;
            countersLastMaxIndexes [i] = maxIndex;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_27589440_1_24
19465965_50180750_1_23
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] count = new int [N];
    int max = 0;
    int lastUpdate = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (count [A [i] - 1] < lastUpdate) {
                count [A [i] - 1] = lastUpdate + 1;
            } else {
                count [A [i] - 1] ++;
            }
            max = Math.max (max, count [A [i] - 1]);
        } else {
            lastUpdate = max;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (count [i] < lastUpdate) count [i] = lastUpdate;

    }
    return count;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] solution = new int [N];
    int maxCounter = 0;
    int maxCountersSum = 0;
    for (int a : A) {
        if (a >= 1 && a <= N) {
            if (solution [a - 1] < maxCountersSum) solution [a - 1] = maxCountersSum;

            solution [a - 1] ++;
            if (solution [a - 1] > maxCounter) maxCounter = solution [a - 1];

        }
        if (a == N + 1) {
            maxCountersSum = maxCounter;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (solution [i] < maxCountersSum) solution [i] = maxCountersSum;

    }
    return solution;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_31633086_12_37
19465965_42920463_1_30
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int length = A.length, maxOfCounter = 0, lastUpdate = 0;
    int applyMax = N + 1;
    int result [] = new int [N];
    for (int i = 0;
    i < length; ++ i) {
        if (A [i] == applyMax) {
            lastUpdate = maxOfCounter;
        } else if (A [i] <= N) {
            int position = A [i] - 1;
            result [position] = result [position] > lastUpdate ? result [position] + 1 : lastUpdate + 1;
            if (maxOfCounter <= result [position]) {
                maxOfCounter = result [position];
            }
        }

    }
    for (int i = 0;
    i < N; ++ i) {
        if (result [i] < lastUpdate) {
            result [i] = lastUpdate;
        }
    }
    return result;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int maxAIs = 0;
    int minAShouldBe = 0;
    for (int x : A) {
        if (x >= 1 && x <= N) {
            if (counters [x - 1] < minAShouldBe) {
                counters [x - 1] = minAShouldBe;
            }
            counters [x - 1] ++;
            if (counters [x - 1] > maxAIs) {
                maxAIs = counters [x - 1];
            }
        } else if (x == N + 1) {
            minAShouldBe = maxAIs;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counters [i] < minAShouldBe) {
            counters [i] = minAShouldBe;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_31633086_12_37
19465965_48645313_5_32
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int length = A.length, maxOfCounter = 0, lastUpdate = 0;
    int applyMax = N + 1;
    int result [] = new int [N];
    for (int i = 0;
    i < length; ++ i) {
        if (A [i] == applyMax) {
            lastUpdate = maxOfCounter;
        } else if (A [i] <= N) {
            int position = A [i] - 1;
            result [position] = result [position] > lastUpdate ? result [position] + 1 : lastUpdate + 1;
            if (maxOfCounter <= result [position]) {
                maxOfCounter = result [position];
            }
        }

    }
    for (int i = 0;
    i < N; ++ i) {
        if (result [i] < lastUpdate) {
            result [i] = lastUpdate;
        }
    }
    return result;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] res = new int [N];
    int max = 0;
    int minValue = 0;
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        int pos = value - 1;
        if (isToSum (value, N)) {
            if (res [pos] < minValue) {
                res [pos] = minValue;
            }
            res [pos] += 1;
            if (max < res [pos]) {
                max = res [pos];
            }
        } else {
            minValue = max;
        }
    }
    for (int i = 0;
    i < res.length; i ++) {
        if (res [i] < minValue) {
            res [i] = minValue;
        }
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_31633086_12_37
19465965_49631227_3_35
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int length = A.length, maxOfCounter = 0, lastUpdate = 0;
    int applyMax = N + 1;
    int result [] = new int [N];
    for (int i = 0;
    i < length; ++ i) {
        if (A [i] == applyMax) {
            lastUpdate = maxOfCounter;
        } else if (A [i] <= N) {
            int position = A [i] - 1;
            result [position] = result [position] > lastUpdate ? result [position] + 1 : lastUpdate + 1;
            if (maxOfCounter <= result [position]) {
                maxOfCounter = result [position];
            }
        }

    }
    for (int i = 0;
    i < N; ++ i) {
        if (result [i] < lastUpdate) {
            result [i] = lastUpdate;
        }
    }
    return result;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int [] countersLastMaxIndexes = new int [N];
    int maxValue = 0;
    int fixedMaxValue = 0;
    int maxIndex = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= N) {
            if (countersLastMaxIndexes [A [i] - 1] != maxIndex) {
                counters [A [i] - 1] = fixedMaxValue;
                countersLastMaxIndexes [A [i] - 1] = maxIndex;
            }
            counters [A [i] - 1] ++;
            if (counters [A [i] - 1] > maxValue) {
                maxValue = counters [A [i] - 1];
            }
        } else {
            maxIndex = i;
            fixedMaxValue = maxValue;
        }
    }
    for (int i = 0;
    i < countersLastMaxIndexes.length; i ++) {
        if (countersLastMaxIndexes [i] != maxIndex) {
            counters [i] = fixedMaxValue;
            countersLastMaxIndexes [i] = maxIndex;
        }
    }
    return counters;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_31633086_12_37
19465965_50180750_1_23
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int length = A.length, maxOfCounter = 0, lastUpdate = 0;
    int applyMax = N + 1;
    int result [] = new int [N];
    for (int i = 0;
    i < length; ++ i) {
        if (A [i] == applyMax) {
            lastUpdate = maxOfCounter;
        } else if (A [i] <= N) {
            int position = A [i] - 1;
            result [position] = result [position] > lastUpdate ? result [position] + 1 : lastUpdate + 1;
            if (maxOfCounter <= result [position]) {
                maxOfCounter = result [position];
            }
        }

    }
    for (int i = 0;
    i < N; ++ i) {
        if (result [i] < lastUpdate) {
            result [i] = lastUpdate;
        }
    }
    return result;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] solution = new int [N];
    int maxCounter = 0;
    int maxCountersSum = 0;
    for (int a : A) {
        if (a >= 1 && a <= N) {
            if (solution [a - 1] < maxCountersSum) solution [a - 1] = maxCountersSum;

            solution [a - 1] ++;
            if (solution [a - 1] > maxCounter) maxCounter = solution [a - 1];

        }
        if (a == N + 1) {
            maxCountersSum = maxCounter;
        }
    }
    for (int i = 0;
    i < N; i ++) {
        if (solution [i] < maxCountersSum) solution [i] = maxCountersSum;

    }
    return solution;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19465965_42920463_1_30
19465965_48645313_5_32
Title: java codility Max-Counters 
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] counters = new int [N];
    int maxAIs = 0;
    int minAShouldBe = 0;
    for (int x : A) {
        if (x >= 1 && x <= N) {
            if (counters [x - 1] < minAShouldBe) {
                counters [x - 1] = minAShouldBe;
            }
            counters [x - 1] ++;
            if (counters [x - 1] > maxAIs) {
                maxAIs = counters [x - 1];
            }
        } else if (x == N + 1) {
            minAShouldBe = maxAIs;
        }

    }
    for (int i = 0;
    i < N; i ++) {
        if (counters [i] < minAShouldBe) {
            counters [i] = minAShouldBe;
        }
    }
    return counters;
}
----------------------------------------

public int [] solution (int N, int [] A) {
    int [] res = new int [N];
    int max = 0;
    int minValue = 0;
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        int pos = value - 1;
        if (isToSum (value, N)) {
            if (res [pos] < minValue) {
                res [pos] = minValue;
            }
            res [pos] += 1;
            if (max < res [pos]) {
                max = res [pos];
            }
        } else {
            minValue = max;
        }
    }
    for (int i = 0;
    i < res.length; i ++) {
        if (res [i] < minValue) {
            res [i] = minValue;
        }
    }
    return res;
}
----------------------------------------

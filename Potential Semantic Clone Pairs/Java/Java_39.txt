$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21637986_21638323_5_47
21637986_21638657_5_43
Title: Java custom checkerboard with nested loop 
----------------------------------------

public static void main (String [] args) {
    int col, row, size;
    char filler;
    System.out.println ("Please enter 3 numbers and a character.");
    Scanner scan = new Scanner (System.in);
    row = scan.nextInt ();
    col = scan.nextInt ();
    size = scan.nextInt ();
    filler = scan.next ().charAt (0);
    int r, c, i = 0, j = 0, k = 0;
    for (r = 1; r <= row; r ++) {
        do {
            for (c = 1; c <= col; c ++) {
                if ((r % 2 != 0 && c % 2 != 0) || (r % 2 == 0 && c % 2 == 0)) {
                    do {
                        System.out.print (filler);
                        i ++;
                    } while (i < size);
                    i = 0;
                } else {
                    do {
                        System.out.print (" ");
                        j ++;
                    } while (j < size);
                    j = 0;
                }
            }
            k ++;
            System.out.println ();
        } while (k < size);
        k = 0;
    }
    System.out.println ("\nHave a nice day. Goodbye.");
}
----------------------------------------

public static void main (String [] args) {
    int col, row, size;
    char filler;
    System.out.println ("Please enter 3 numbers and a character.");
    Scanner scan = new Scanner (System.in);
    row = scan.nextInt ();
    col = scan.nextInt ();
    size = scan.nextInt ();
    filler = scan.next ().charAt (0);
    int r, c, i = 0, j = 0, k = 0;
    for (r = 1; r <= row; r ++) {
        for (int boxSize = 0;
        boxSize < size; boxSize ++) {
            for (c = 1; c <= col; c ++) {
                if ((r % 2 != 0 && c % 2 != 0) || (r % 2 == 0 && c % 2 == 0)) {
                    do {
                        System.out.print (filler);
                        i ++;
                    } while (i < size);
                    i = 0;
                } else {
                    do {
                        System.out.print (" ");
                        j ++;
                    } while (j < size);
                    j = 0;
                }
            }
            System.out.println ();
        }
        System.out.println ("\n");
    }
    System.out.println ("\nHave a nice day. Goodbye.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21640027_21640151_4_20
21640027_21640180_1_39
Title: Bubble pop using boolean in java. 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < array.length - 1; i ++) {
        for (int j = i + 1;
        j < array.length; j ++) {
            if (array [i] > array [j]) {
                int temp = array [i];
                array [i] = array [j];
                array [j] = temp;
            }
        }
    }
    for (int i = 0;
    i < array.length; i ++) {
        System.out.println (array [i]);
    }
}
----------------------------------------

public static void main (String [] args) {
    int Bub [] = new int [6];
    Random randy = new Random ();
    boolean Done = false;
    for (int x = 0;
    x < 6; x ++) {
        Bub [x] = randy.nextInt (100);
        System.out.println (Bub [x]);
    }
    System.out.println ("This is the original array");
    while (! Done) {
        for (int x = 0;
        x < Bub.length - 1; x ++) {
            if (Bub [x + 1] > Bub [x]) {
                int temp = Bub [x];
                Bub [x] = Bub [x + 1];
                Bub [x + 1] = temp;
                Done = false;
            } else {
                Done = false;
            }
        }
        for (int x = 0;
        x < 6; x ++) {
            System.out.print (Bub [x] + " ");
        }
        Done = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21646960_21647108_1_18
21646960_21647157_1_23
Title: ordering indexes by array values 
----------------------------------------

public static void main (String [] args) {
    int array [] = {90, 100, 90, 110};
    Map < Integer, Integer > valueIndexMap = new HashMap < Integer, Integer > ();
    int index = 0;
    for (int entry : array) valueIndexMap.put (entry, index ++);

    Integer [] newArray = new Integer [array.length];
    for (int i = 0;
    i < array.length; i ++) {
        newArray [i] = valueIndexMap.get (array [i]);
    }
    System.out.println (Arrays.asList (newArray));
}
----------------------------------------

public static void main (String [] args) {
    Integer totalvalue [] = {100, 120, 90, 110};
    List < Integer > original = Arrays.asList (totalvalue);
    List < Integer > copy = new ArrayList < Integer > (original);
    Collections.sort (copy, new Comparator < Integer > () {
        @Override
        public int compare (Integer intger1, Integer intger2) {
            return intger2.compareTo (intger1);
        }}

    );
    int [] finalArray = new int [totalvalue.length];
    for (int i = 0;
    i < totalvalue.length; i ++) {
        finalArray [i] = original.indexOf (copy.get (i));
    }
    System.out.println (Arrays.toString (finalArray));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2165006_26661526_16_49
2165006_28154404_5_40
Title: Simple Java Client/Server Program 
----------------------------------------

public static void main (String [] args) throws UnknownHostException, IOException {
    final String FILE_NAME = "C:/Users/Username/Desktop/Input_file.txt";
    ServerSocket s = new ServerSocket (0);
    int port = s.getLocalPort ();
    Socket socket = new Socket (InetAddress.getLocalHost (), 15123);
    System.out.println ("Accepted connection : " + socket);
    File transferFile = new File (FILE_NAME);
    byte [] bytearray = new byte [(int) transferFile.length ()];
    FileInputStream fin = new FileInputStream (transferFile);
    BufferedInputStream bin = new BufferedInputStream (fin);
    bin.read (bytearray, 0, bytearray.length);
    OutputStream os = socket.getOutputStream ();
    System.out.println ("Sending Files...");
    os.write (bytearray, 0, bytearray.length);
    BufferedReader r = new BufferedReader (new FileReader (FILE_NAME));
    String as = "", line = null;
    while ((line = r.readLine ()) != null) {
        as += line + "\n";
    }
    System.out.print ("Input File contains following data: " + as);
    os.flush ();
    fin.close ();
    bin.close ();
    os.close ();
    socket.close ();
    System.out.println ("File transfer complete");
}
----------------------------------------

public static void main (String args []) throws Exception {
    try {
        ServerSocket ss = new ServerSocket (1024);
        System.out.print ("\nWaiting for client.....");
        Socket s = ss.accept ();
        System.out.print ("\nConnected");
        DataInputStream d = new DataInputStream (s.getInputStream ());
        int ch = Integer.parseInt (d.readLine ());
        int num = Integer.parseInt (d.readLine ());
        int result = 0;
        PrintStream ps = new PrintStream (s.getOutputStream ());
        switch (ch) {
            case 1 :
                result = fact (num);
                ps.println (result);
                break;
            case 2 :
                result = sum (num);
                ps.println (result);
                break;
        }
        ss.close ();
        s.close ();
    } catch (Exception ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2165167_2165294_35_46
2165167_2225893_52_64
Title: Is there an easy way to turn Future<Future<T>> into Future<T>? 
----------------------------------------

public boolean isCancelled () {
    if (! delegate.isDone ()) {
        return delegate.isCancelled ();
    }
    try {
        return delegate.get ().isCancelled ();
    } catch (InterruptedException e) {
        throw new RuntimeException ("Error fetching a finished future", e);
    } catch (ExecutionException e) {
        throw new RuntimeException ("Error fetching a finished future", e);
    }
}
----------------------------------------

public boolean isCancelled () {
    while (true) {
        try {
            return future.isCancelled () || future.get ().isCancelled ();
        } catch (CancellationException ce) {
            return true;
        } catch (ExecutionException ee) {
            return false;
        } catch (InterruptedException ie) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2165167_2165294_9_20
2165167_2225893_15_31
Title: Is there an easy way to turn Future<Future<T>> into Future<T>? 
----------------------------------------

public boolean cancel (boolean mayInterruptIfRunning) {
    if (delegate.isDone ()) {
        return delegate.cancel (mayInterruptIfRunning);
    }
    try {
        return delegate.get ().cancel (mayInterruptIfRunning);
    } catch (InterruptedException e) {
        throw new RuntimeException ("Error fetching a finished future", e);
    } catch (ExecutionException e) {
        throw new RuntimeException ("Error fetching a finished future", e);
    }
}
----------------------------------------

public boolean cancel (boolean mayInterruptIfRunning) {
    if (! future.isDone ()) {
        return future.cancel (mayInterruptIfRunning);
    } else {
        while (true) {
            try {
                return future.get ().cancel (mayInterruptIfRunning);
            } catch (CancellationException ce) {
                return true;
            } catch (ExecutionException ee) {
                return false;
            } catch (InterruptedException ie) {
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2165168_2165277_9_19
2165168_2867752_6_18
Title: Digester: Extracting node name 
----------------------------------------

public static void main (String [] args) throws IOException, SAXException {
    InputStream instr = App.class.getResourceAsStream ("/sample.xml");
    Digester dig = new Digester ();
    dig.setRules (new RulesBase () {
        public List < Rule > match (String namespaceURI, String pattern) {
            return Arrays.asList (printRule);
        }}

    );
    dig.parse (instr);
}
----------------------------------------

public static void main (String [] args) throws Exception {
    File file = new File ("furniture.xml");
    Digester digester = new Digester ();
    digester.setRules (new ExtendedBaseRules ());
    final List < String > furnitures = new ArrayList < String > ();
    digester.addRule ("furniture/?", new Rule () {
        @Override
        public void end (String nspace, String name) {
            furnitures.add (name);
        }}

    );
    digester.parse (file);
    System.out.println (furnitures);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21655543_21655854_1_17
21655543_21655905_9_26
Title: What will this constructor look like? 
----------------------------------------

public AdditionOnlyInt (String input) {
    int relevStart = 0;
    while (input.charAt (relevStart) == '0') {
        relevStart ++;
    }
    String relevantTerms = input.substring (relevStart);
    int length = relevantTerms.length ();
    data = new byte [length];
    for (int iter = 0;
    iter < length; iter ++) {
        data [iter] = (byte) (relevantTerms.charAt (length - iter - 1) - '0');
    }
}
----------------------------------------

public AdditionOnlyInt (String args) {
    try {
        Integer value = Integer.valueOf (args);
        byte array [] = value.toString ().getBytes ();
        for (int i = 0, j = array.length - 1;
        i < array.length / 2; i ++, j --) {
            byte temp = array [i];
            array [i] = array [j];
            array [j] = temp;
        }
        for (int i = 0;
        i < array.length; i ++) {
            System.out.print ((char) array [i]);
        }
    } catch (Exception e) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21655896_21656040_1_20
21655896_21684783_1_11
Title: How do you scan two arrays of differing lengths without loop nesting? 
----------------------------------------

public static boolean linearIn (int [] outer, int [] inner) {
    HashMap < Integer, Boolean > map = new HashMap < Integer, Boolean > ();
    for (int o : outer) {
        map.put (o, true);
    }
    for (int i : inner) {
        Boolean result = map.get (i);
        if ((result == null) || (result.booleanValue () == false)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public boolean linearIn (int [] outer, int [] inner) {
    int i = 0;
    if (inner.length == 0) return true;

    for (int o = 0;
    o < outer.length; o ++) {
        if (inner [i] == outer [o]) i ++;

        if (i == inner.length) return true;

    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21657220_21657600_53_62
21657220_21657600_64_73
Title: How to display multiple panels from an array in a frame using a loop 
----------------------------------------

public contact (String name, int address, String city, String state, int zipCode, String picture, String comment) {
    this.name = name;
    this.address = address;
    this.city = city;
    this.state = state;
    this.zipCode = zipCode;
    this.picture = picture;
    this.comment = comment;
}
----------------------------------------

public contact () {
    this.name = "problem name";
    this.address = 1134;
    this.city = "problem city";
    this.state = "problem state";
    this.zipCode = 1134;
    this.picture = "problem picture";
    this.comment = "problem comment";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21663248_21663449_65_72
21663248_21663687_69_76
Title: How would I get the right output for my methods? 
----------------------------------------

public static int normalize (int [] scoreArray, int maxGrade) {
    int total = 0;
    for (int i = 0;
    i < scoreArray.length; i ++) {
        total += scoreArray [i];
    }
    int percent = Math.round (total * 100 / maxGrade);
    return percent;
}
----------------------------------------

public static int normalize (int [] scoreArray, int maxGrade) {
    int total = 0;
    for (int i = 0;
    i < scoreArray.length; i ++) {
        total += scoreArray [i];
    }
    int percent = Math.round (total * 100 / maxGrade);
    return percent;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21663248_21663449_74_84
21663248_21663687_78_88
Title: How would I get the right output for my methods? 
----------------------------------------

public static double average (int [] scoreArray, int numScores, int maxGrade, String name) {
    double sum = 0;
    for (int i = 0;
    i < scoreArray.length; i ++) {
        sum += scoreArray [i];
    }
    double average = Math.round ((sum / numScores) * 100 / maxGrade);
    System.out.println (name + ":" + average);
    return average;
}
----------------------------------------

public static double average (int [] scoreArray, int numScores, int maxGrade, String name) {
    double sum = 0;
    for (int i = 0;
    i < scoreArray.length; i ++) {
        sum += scoreArray [i];
    }
    double average = Math.round ((sum / numScores) * 100 / maxGrade);
    System.out.println (name + ":" + average + " %");
    return average;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21663248_21663449_7_55
21663248_21663687_7_59
Title: How would I get the right output for my methods? 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = null;
    int [] quizArray = null;
    int [] labArray = null;
    int [] attendance = null;
    int [] midterms = null;
    int quizgrade = 0;
    int labgrade = 0;
    int attendance_1 = 0;
    int midterms_1 = 0;
    String name;
    try {
        scan = new Scanner (new File ("c:\\temp\\input.txt"));
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
        return;
    }
    for (int i = 0;
    i < NUM_SCORE_TYPES; i ++) {
        name = scan.next ();
        int numScores = scan.nextInt ();
        int maxGrade = scan.nextInt ();
        if (name.equals ("Quizzes")) {
            quizArray = new int [numScores];
            readScores (quizArray, numScores, scan, maxGrade, "Quizzes");
        } else if (name.equals ("Labs")) {
            labArray = new int [numScores];
            readScores (labArray, numScores, scan, maxGrade, "Labs");
        } else if (name.equals ("Lab_attendance")) {
            attendance = new int [numScores];
            readScores (attendance, numScores, scan, maxGrade, "Lab_attendance");
        } else if (name.equals ("Midterms")) {
            midterms = new int [numScores];
            readScores (midterms, numScores, scan, maxGrade, "Midterms");
        }

    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan = null;
    String quizzes = "Quizzes";
    String labs = "Labs";
    String lab_attendance = "Lab_attendance";
    String midterm = "Midterms";
    int [] quizArray = null;
    int [] labArray = null;
    int [] attendance = null;
    int [] midterms = null;
    int quizgrade = 0;
    int labgrade = 0;
    int attendance_1 = 0;
    int midterms_1 = 0;
    String name;
    try {
        scan = new Scanner (new File ("C://Users//Desktop//input.txt"));
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
        return;
    }
    for (int i = 0;
    i < NUM_SCORE_TYPES; i ++) {
        name = scan.next ();
        int numScores = scan.nextInt ();
        int maxGrade = scan.nextInt ();
        if (name.equals ("Quizzes")) {
            quizArray = new int [numScores];
            readScores (quizArray, numScores, scan, maxGrade, quizzes);
        } else if (name.equals ("Labs")) {
            labArray = new int [numScores];
            readScores (labArray, numScores, scan, maxGrade, labs);
        } else if (name.equals ("Lab_attendance")) {
            attendance = new int [numScores];
            readScores (attendance, numScores, scan, maxGrade, lab_attendance);
        } else if (name.equals ("Midterms")) {
            midterms = new int [numScores];
            readScores (midterms, numScores, scan, maxGrade, midterm);
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664503_1_13
21664478_21664511_1_10
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    Objects.requireNotNull (books, "Books must not be null");
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (null != book [i]) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) return 0;

    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        total += books [i].getPrice ();
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664503_1_13
21664478_21664527_1_17
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    Objects.requireNotNull (books, "Books must not be null");
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (null != book [i]) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        throw new IllegalArgumentException ("Books cannot be null");
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664503_1_13
21664478_21664529_1_17
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    Objects.requireNotNull (books, "Books must not be null");
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (null != book [i]) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        return 0;
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664503_1_13
21664478_49950209_1_14
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    Objects.requireNotNull (books, "Books must not be null");
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (null != book [i]) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (List < Book > books) {
    if (books == null || books.isEmpty ()) {
        return 0;
    }
    double total = 0;
    for (Book book : books) {
        if (book != null) {
            total += book.getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664511_1_10
21664478_21664527_1_17
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) return 0;

    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        total += books [i].getPrice ();
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        throw new IllegalArgumentException ("Books cannot be null");
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664511_1_10
21664478_21664529_1_17
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) return 0;

    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        total += books [i].getPrice ();
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        return 0;
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664511_1_10
21664478_49950209_1_14
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) return 0;

    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        total += books [i].getPrice ();
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (List < Book > books) {
    if (books == null || books.isEmpty ()) {
        return 0;
    }
    double total = 0;
    for (Book book : books) {
        if (book != null) {
            total += book.getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664527_1_17
21664478_21664529_1_17
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        throw new IllegalArgumentException ("Books cannot be null");
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        return 0;
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664527_1_17
21664478_49950209_1_14
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        throw new IllegalArgumentException ("Books cannot be null");
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (List < Book > books) {
    if (books == null || books.isEmpty ()) {
        return 0;
    }
    double total = 0;
    for (Book book : books) {
        if (book != null) {
            total += book.getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21664478_21664529_1_17
21664478_49950209_1_14
Title: Java Object Null Check for method 
----------------------------------------

public static double calculateInventoryTotal (Book [] books) {
    if (books == null) {
        return 0;
    }
    double total = 0;
    for (int i = 0;
    i < books.length; i ++) {
        if (books [i] != null) {
            total += books [i].getPrice ();
        }
    }
    return total;
}
----------------------------------------

public static double calculateInventoryTotal (List < Book > books) {
    if (books == null || books.isEmpty ()) {
        return 0;
    }
    double total = 0;
    for (Book book : books) {
        if (book != null) {
            total += book.getPrice ();
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21676460_21676824_1_41
21676460_21676889_16_58
Title: Activity has leaked window com.android.internal.policy.impl.PhoneWindows$DecorView{42d9a800 
----------------------------------------

protected String doInBackground (String...args) {
    List < NameValuePair > params = new ArrayList < NameValuePair > ();
    JSONObject json = jParser.makeHttpRequest (url_all_venues, "GET", params);
    if (json != null) {
        Log.d ("All Venues: ", json.toString ());
        try {
            int success = json.getInt (TAG_SUCCESS);
            if (success == 1) {
                venues = json.getJSONArray (TAG_VENUES);
                if (venues != null) {
                    for (int i = 0;
                    i < venues.length (); i ++) {
                        JSONObject c = venues.getJSONObject (i);
                        if (c != null) {
                            String id = c.getString (TAG_VENUE_ID);
                            String name = c.getString (TAG_VENUE_NAME);
                        }
                        HashMap < String, String > map = new HashMap < String, String > ();
                        map.put (TAG_VENUE_ID, id);
                        map.put (TAG_VENUE_NAME, name);
                        venuesList.add (map);
                    }
                }
            }
        } catch (JSONException e) {
            e.printStackTrace ();
        }
    }
    return null;
}
----------------------------------------

protected String doInBackground (String...args) {
    List < NameValuePair > params = new ArrayList < NameValuePair > ();
    JSONObject json = jParser.makeHttpRequest (url_all_venues, "GET", params);
    Log.d ("All Venues: ", json.toString ());
    try {
        int success = json.getInt (TAG_SUCCESS);
        if (success == 1) {
            venues = json.getJSONArray (TAG_VENUES);
            for (int i = 0;
            i < venues.length (); i ++) {
                JSONObject c = venues.getJSONObject (i);
                String id = c.getString (TAG_VENUE_ID);
                String name = c.getString (TAG_VENUE_NAME);
                HashMap < String, String > map = new HashMap < String, String > ();
                map.put (TAG_VENUE_ID, id);
                map.put (TAG_VENUE_NAME, name);
                venuesList.add (map);
            }
        }
    } catch (JSONException e) {
        e.printStackTrace ();
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21676460_21676889_63_82
21676460_21677063_1_25
Title: Activity has leaked window com.android.internal.policy.impl.PhoneWindows$DecorView{42d9a800 
----------------------------------------

protected void onPostExecute (String file_url) {
    Utils.dismissProgressDialog ();
    runOnUiThread (new Runnable () {
        public void run () {
            ListAdapter adapter = new SimpleAdapter (AllVenuesActivity.this, venuesList, R.layout.list_item, new String [] {TAG_VENUE_ID, TAG_VENUE_NAME}, new int [] {R.id.Venue_ID, R.id.Venue_Name});
            setListAdapter (adapter);
        }}

    );
}
----------------------------------------

protected void onPostExecute (String file_url) {
    Utils.dismissProgressDialog ();
    if (pDialog != null) {
        pDialog.dismiss ();
        pDialog = null;
    }
    runOnUiThread (new Runnable () {
        public void run () {
            ListAdapter adapter = new SimpleAdapter (AllVenuesActivity.this, venuesList, R.layout.list_item, new String [] {TAG_VENUE_ID, TAG_VENUE_NAME}, new int [] {R.id.Venue_ID, R.id.Venue_Name});
            setListAdapter (adapter);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21682549_21683109_22_53
21682549_21688508_22_53
Title: How would i add very large Numbers represented as Strings i.e 50 digit numbers 
----------------------------------------

public BigStringNumber add (BigStringNumber d) {
    StringBuilder sb = new StringBuilder ();
    int i1 = this.digit.length - 1;
    int i2 = d.digit.length - 1;
    int dgt = 0;
    int carry = 0;
    while (i1 >= 0 && i2 >= 0) {
        dgt = this.digit [i1] + d.digit [i2] + carry;
        carry = dgt / 10;
        dgt = dgt % 10;
        i1 --;
        i2 --;
        sb.append ((char) ('0' + dgt));
    }
    while (i1 >= 0) {
        dgt = this.digit [i1] + carry;
        carry = dgt / 10;
        dgt = dgt % 10;
        i1 --;
        sb.append ((char) ('0' + dgt));
    }
    while (i2 >= 0) {
        dgt = d.digit [i2] + carry;
        carry = dgt / 10;
        dgt = dgt % 10;
        i2 --;
        sb.append ((char) ('0' + dgt));
    }
    sb = sb.reverse ();
    return new BigStringNumber (sb.toString ());
}
----------------------------------------

public BigStringNumber add (BigStringNumber d) {
    StringBuilder sb = new StringBuilder ();
    int i1 = this.digit.length - 1;
    int i2 = d.digit.length - 1;
    int carry = 0;
    int dgt = 0;
    while (i1 >= 0 && i2 >= 0) {
        carry = this.digit [i1] + d.digit [i2] + dgt;
        dgt = carry / 10;
        carry = carry % 10;
        i1 --;
        i2 --;
        sb.append ((char) ('0' + carry));
    }
    while (i1 >= 0) {
        carry = this.digit [i1] + dgt;
        dgt = carry / 10;
        carry = carry % 10;
        i1 --;
        sb.append ((char) ('0' + carry));
    }
    while (i2 >= 0) {
        carry = d.digit [i2] + dgt;
        dgt = carry / 10;
        carry = carry % 10;
        i2 --;
        sb.append ((char) ('0' + carry));
    }
    sb = sb.reverse ();
    return new BigStringNumber (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21682549_21683109_22_53
21682549_37074188_14_53
Title: How would i add very large Numbers represented as Strings i.e 50 digit numbers 
----------------------------------------

public BigStringNumber add (BigStringNumber d) {
    StringBuilder sb = new StringBuilder ();
    int i1 = this.digit.length - 1;
    int i2 = d.digit.length - 1;
    int dgt = 0;
    int carry = 0;
    while (i1 >= 0 && i2 >= 0) {
        dgt = this.digit [i1] + d.digit [i2] + carry;
        carry = dgt / 10;
        dgt = dgt % 10;
        i1 --;
        i2 --;
        sb.append ((char) ('0' + dgt));
    }
    while (i1 >= 0) {
        dgt = this.digit [i1] + carry;
        carry = dgt / 10;
        dgt = dgt % 10;
        i1 --;
        sb.append ((char) ('0' + dgt));
    }
    while (i2 >= 0) {
        dgt = d.digit [i2] + carry;
        carry = dgt / 10;
        dgt = dgt % 10;
        i2 --;
        sb.append ((char) ('0' + dgt));
    }
    sb = sb.reverse ();
    return new BigStringNumber (sb.toString ());
}
----------------------------------------

public String add () {
    int [] d = new int [s1.length () + 1];
    if (s1.length () > s2.length ()) {
        for (int i = 0;
        i < s1.length (); i ++) {
            d [i] = s1.charAt (i) - '0';
        }
        for (int j = 0;
        j < s2.length (); j ++) {
            d [j] = d [j] + s2.charAt (j) - '0';
        }
    } else {
        for (int i = 0;
        i < s2.length (); i ++) {
            d [i] = s1.charAt (i) - '0';
        }
        for (int j = 0;
        j < s1.length (); j ++) {
            d [j] = d [j] + s1.charAt (j) - '0';
        }
    }
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < d.length; i ++) {
        int mod = d [i] % 10;
        int carry = d [i] / 10;
        if (i + 1 < d.length) d [i + 1] += carry;

        sb.insert (0, mod);
    }
    while (sb.charAt (0) == '0' && sb.length () > 1) {
        sb.deleteCharAt (0);
    }
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21682549_21688508_22_53
21682549_37074188_14_53
Title: How would i add very large Numbers represented as Strings i.e 50 digit numbers 
----------------------------------------

public BigStringNumber add (BigStringNumber d) {
    StringBuilder sb = new StringBuilder ();
    int i1 = this.digit.length - 1;
    int i2 = d.digit.length - 1;
    int carry = 0;
    int dgt = 0;
    while (i1 >= 0 && i2 >= 0) {
        carry = this.digit [i1] + d.digit [i2] + dgt;
        dgt = carry / 10;
        carry = carry % 10;
        i1 --;
        i2 --;
        sb.append ((char) ('0' + carry));
    }
    while (i1 >= 0) {
        carry = this.digit [i1] + dgt;
        dgt = carry / 10;
        carry = carry % 10;
        i1 --;
        sb.append ((char) ('0' + carry));
    }
    while (i2 >= 0) {
        carry = d.digit [i2] + dgt;
        dgt = carry / 10;
        carry = carry % 10;
        i2 --;
        sb.append ((char) ('0' + carry));
    }
    sb = sb.reverse ();
    return new BigStringNumber (sb.toString ());
}
----------------------------------------

public String add () {
    int [] d = new int [s1.length () + 1];
    if (s1.length () > s2.length ()) {
        for (int i = 0;
        i < s1.length (); i ++) {
            d [i] = s1.charAt (i) - '0';
        }
        for (int j = 0;
        j < s2.length (); j ++) {
            d [j] = d [j] + s2.charAt (j) - '0';
        }
    } else {
        for (int i = 0;
        i < s2.length (); i ++) {
            d [i] = s1.charAt (i) - '0';
        }
        for (int j = 0;
        j < s1.length (); j ++) {
            d [j] = d [j] + s1.charAt (j) - '0';
        }
    }
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < d.length; i ++) {
        int mod = d [i] % 10;
        int carry = d [i] / 10;
        if (i + 1 < d.length) d [i + 1] += carry;

        sb.insert (0, mod);
    }
    while (sb.charAt (0) == '0' && sb.length () > 1) {
        sb.deleteCharAt (0);
    }
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21682761_21683411_45_56
21682761_21683411_75_89
Title: reading a log file and displaying it in jTextArea 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String line;
    try {
        if ((line = reader.readLine ()) != null) {
            textArea.append (line + "\n");
        } else {
            ((Timer) e.getSource ()).stop ();
        }
    } catch (IOException ex) {
        Logger.getLogger (ReadFile.class.getName ()).log (Level.SEVERE, null, ex);
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    JFileChooser chooser = new JFileChooser ();
    int result = chooser.showOpenDialog (frame);
    if (result == JFileChooser.APPROVE_OPTION) {
        file = chooser.getSelectedFile ();
        fileName = file.getName ();
        jtfFile.setText (fileName);
        try {
            reader = new BufferedReader (new FileReader (file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger (ReadFile.class.getName ()).log (Level.SEVERE, null, ex);
        }
        timer.start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21683747_21684025_8_28
21683747_21684057_3_26
Title: How to find the number of different duplicate values in an array with Java 
----------------------------------------

public static void main (String [] args) {
    String userInput1 = "Owen Bishop Java ";
    String [] inputArray = userInput1.split (" ");
    HashMap < Integer, Integer > map = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < inputArray.length; i ++) {
        int length = inputArray [i].length ();
        if (map.get (length) == null) {
            map.put (length, 1);
        } else map.put (length, map.get (length) + 1);

    }
    Iterator it = map.entrySet ().iterator ();
    while (it.hasNext ()) {
        Map.Entry pairs = (Map.Entry) it.next ();
        System.out.println ("words of length " + pairs.getKey () + " are " + pairs.getValue ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String userInput1 = "Owen Bishop Java ";
    String [] inputArray = userInput1.split (" ");
    Map < Integer, Integer > counter = new HashMap < > ();
    for (int i = 0;
    i < inputArray.length; i ++) {
        int length = inputArray [i].length ();
        Integer num = counter.get (length);
        if (num == null) {
            num = 1;
        } else {
            num ++;
        }
        counter.put (length, num);
    }
    for (Entry < Integer, Integer > entry : map.entrySet ()) {
        System.out.println ("There are " + entry.getValue () + " words with length " + entry.getKey () + ".");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21690313_21690455_4_19
21690313_21690644_4_57
Title: The triangle made of asterisks 
----------------------------------------

public static void main (final String args []) {
    Scanner input = new Scanner (System.in);
    int how_many;
    int i;
    int j;
    System.out.println ("Choissiez un nombre entier postif");
    how_many = input.nextInt ();
    for (i = 1; i <= how_many; i ++) {
        for (j = 1; j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Choissiez un nombre entier postif");
    int how_many = input.nextInt ();
    for (int i = 1;
    i <= how_many; i ++) {
        for (int j = 1;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21710465_21710742_1_22
21710465_21710773_1_38
Title: Why is Collection's .addAll slower than manually adding? 
----------------------------------------

public static void main (String [] args) {
    String [] rawArgs = new String [] {"one", "two", "three", "four", "five"};
    long start = System.nanoTime ();
    for (int i = 0;
    i < 10000000; i ++) {
        List < String > list = new ArrayList < > ();
        for (String s : rawArgs) {
            list.add (s);
        }
    }
    long end = System.nanoTime ();
    System.out.println ("add():    " + (end - start));
    start = System.nanoTime ();
    for (int i = 0;
    i < 10000000; i ++) {
        List < String > list = new ArrayList < > ();
        list.addAll (Arrays.asList (rawArgs));
    }
    end = System.nanoTime ();
    System.out.println ("addAll(): " + (end - start));
}
----------------------------------------

public static void main (String [] args) {
    String [] rawArgs = new String [] {"one", "two", "three", "four", "five", "one", "two", "three", "four", "five", "one", "two", "three", "four", "five", "one", "two", "three", "four", "five", "one", "two", "three", "four", "five", "one", "two", "three", "four", "five", "one", "two", "three", "four", "five", "one", "two", "three", "four", "five"};
    for (int i = 0;
    i < 1000; ++ i) {
        arrayToListLoop (rawArgs);
    }
    for (int i = 0;
    i < 1000; ++ i) {
        arrayToListAddAll (rawArgs);
    }
    long start = System.nanoTime ();
    for (int i = 0;
    i < 1000; ++ i) {
        arrayToListLoop (rawArgs);
    }
    long end = System.nanoTime ();
    System.out.println ((end - start) / 1000);
    start = System.nanoTime ();
    for (int i = 0;
    i < 1000; ++ i) {
        arrayToListAddAll (rawArgs);
    }
    end = System.nanoTime ();
    System.out.println ((end - start) / 1000);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21713631_21713909_6_19
21713631_50996088_26_40
Title: Distribute 'items' in buckets equally (best effort) 
----------------------------------------

public static void main (String [] args) {
    int numBuckets = 12;
    int numItems = 34;
    int itemsPerBucket = (numItems / numBuckets);
    int remainingItems = (numItems % numBuckets);
    for (int i = 1;
    i <= numBuckets; i ++) {
        int extra = (i <= remainingItems) ? 1 : 0;
        System.out.println ("bucket " + i + " contains " + (itemsPerBucket + extra) + " items.");
    }
}
----------------------------------------

public static void main (String [] args) {
    PizzaDistributor pizzaDistributor = new PizzaDistributor ();
    System.out.println ("0 slices, 1 eater:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (0, new int [1])));
    System.out.println ("0 slices, 2 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (0, new int [2])));
    System.out.println ("0 slices, 0 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (0, new int [0])));
    System.out.println ("10 slices, 0 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [0])));
    System.out.println ("10 slices, 1 eater:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [1])));
    System.out.println ("10 slices, 3 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [3])));
    System.out.println ("10 slices, 5 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [5])));
    System.out.println ("10 slices, 7 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [7])));
    System.out.println ("10 slices, 10 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [10])));
    System.out.println ("10 slices, 13 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [13])));
    System.out.println ("10 slices, 20 eaters:" + Arrays.toString (pizzaDistributor.distributePizzaToEatersEvenly (10, new int [20])));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21719351_21723329_118_150
21719351_21723329_154_170
Title: how to return a string value from an event handler to another file in same package java 
----------------------------------------

public void handleEvent (Event event) {
    final String lineDelim = "\n";
    if (mrButton.getSelection () == true) {
        System.out.println ("channel");
        int dotLoc = getFileName ().lastIndexOf ('.');
        String Name = getFileName ().substring (0, dotLoc);
        buf.append ("channel " + Name);
        buf.append ("()");
        buf.append (lineDelim);
        buf.append ("{");
        buf.append (lineDelim);
        buf.append ("}");
        buf.toString ();
        setContent (buf.toString ());
    }
    IDialogSettings dialogSettings = getDialogSettings ();
    if (dialogSettings != null) {
        IDialogSettings section = dialogSettings.getSection (getFileName ());
        if (section == null) {
            section = dialogSettings.addNewSection (getFileName ());
        }
    }
}
----------------------------------------

public void handleEvent (Event event) {
    final String lineDelim = "\n";
    if (mrsButton.getSelection () == true) {
        System.out.println ("type");
        int dotLoc = getFileName ().lastIndexOf ('.');
        String Name = getFileName ().substring (0, dotLoc);
        buf.append ("Type " + Name);
        buf.append ("()");
        buf.append (lineDelim);
        buf.append ("{");
        buf.append (lineDelim);
        buf.append ("}");
        buf.toString ();
        setContent (buf.toString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21722458_21722533_1_16
21722458_21724813_1_40
Title: How to handle exception when web service is not available in java 
----------------------------------------

public void isAvailable () {
    URL url = new URL ("URL HERE");
    HttpURLConnection connection = (HttpURLConnection) url.openConnection ();
    connection.setRequestProperty ("Connection", "close");
    connection.setConnectTimeout (10000);
    connection.connect ();
    if (connection.getResponseCode () == 200) {
        return true;
    } else return false;

}
----------------------------------------

public static boolean isAvailable (String link) {
    boolean available = false;
    URL url = null;
    try {
        url = new URL (link);
    } catch (MalformedURLException e) {
        e.printStackTrace ();
    }
    HttpURLConnection connection = null;
    try {
        connection = (HttpURLConnection) url.openConnection ();
    } catch (IOException e1) {
    }
    connection.setRequestProperty ("Connection", "close");
    connection.setConnectTimeout (100000);
    try {
        connection.connect ();
    } catch (IOException e) {
    }
    try {
        if (connection.getResponseCode () == 200) {
            available = true;
        } else available = false;

    } catch (IOException e) {
        e.printStackTrace ();
    }
    return available;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21724419_21725230_1_30
21724419_21725903_7_28
Title: String Version Comparison 
----------------------------------------

public static void main (String [] args) {
    String version [] = {"3.1.2", "2.1.7", "3.1222.1", "3.10.1", "3.10", "3.7.3", "2.6.4", "1.3.4.7"};
    Arrays.sort (version, new Comparator < String > () {
        @Override
        public int compare (String o1, String o2) {
            String [] tokens1 = o1.split ("\\.");
            String [] tokens2 = o2.split ("\\.");
            for (int i = 0;
            i < tokens1.length && i < tokens2.length; i ++) {
                int comparison = Integer.valueOf (tokens1 [i]).compareTo (Integer.valueOf (tokens2 [i]));
                if (comparison != 0) {
                    return comparison;
                }
            }
            return tokens1.length - tokens2.length;
        }}

    );
    for (String v : version) {
        System.out.println (v);
    }
}
----------------------------------------

public static void main (String [] args) throws Exception {
    String strArray [] = {"3.1.2", "2.1.7", "3.1.1", "3.7.3", "2.6.4", "1.3.4.7"};
    displayArray (strArray);
    Arrays.sort (strArray);
    displayArray (strArray);
    Arrays.sort (strArray, String.CASE_INSENSITIVE_ORDER);
    displayArray (strArray);
    System.out.println ("---------------");
    List < String > strList = Arrays.asList (strArray);
    displayList (strList);
    Collections.sort (strList);
    displayList (strList);
    Collections.sort (strList, String.CASE_INSENSITIVE_ORDER);
    displayList (strList);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21729315_21729638_1_11
21729315_21730157_1_14
Title: Detecting if a word is valid when it contains a blank 
----------------------------------------

public boolean isValidWord (String word) {
    word = word.replaceAll (" ", "[a-z]");
    Pattern pattern = Pattern.compile (word);
    for (String wordFromHashSet : hashSet) {
        Matcher matcher = pattern.matcher (wordFromHashSet);
        if (matcher.matches ()) return true;

    }
    return false;
}
----------------------------------------

public boolean isValidWord (String word) {
    ArrayList < Integer > pos = new ArrayList < Integer > ();
    for (int i = 0;
    i != word.length (); i ++) {
        if (word.charAt (i) == ' ') pos.add (i);

    }
    for (String hashSetWord : hashSet) {
        for (Integer i : pos) {
            hashSetWord = hashSetWord.substring (0, i) + " " + hashSetWord.substring (i + 1);
        }
        if (hashSetWord.equals (word)) return true;

    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21729315_21729638_1_11
21729315_21730478_1_11
Title: Detecting if a word is valid when it contains a blank 
----------------------------------------

public boolean isValidWord (String word) {
    word = word.replaceAll (" ", "[a-z]");
    Pattern pattern = Pattern.compile (word);
    for (String wordFromHashSet : hashSet) {
        Matcher matcher = pattern.matcher (wordFromHashSet);
        if (matcher.matches ()) return true;

    }
    return false;
}
----------------------------------------

public boolean isValidWord (String word) {
    if (wordHashSet.contains (word)) {
        return true;
    }
    for (String fromHashSet : wordHashSet) {
        if (compareIgnoreBlanks (fromHashSet, word)) {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21729315_21730157_1_14
21729315_21730478_1_11
Title: Detecting if a word is valid when it contains a blank 
----------------------------------------

public boolean isValidWord (String word) {
    ArrayList < Integer > pos = new ArrayList < Integer > ();
    for (int i = 0;
    i != word.length (); i ++) {
        if (word.charAt (i) == ' ') pos.add (i);

    }
    for (String hashSetWord : hashSet) {
        for (Integer i : pos) {
            hashSetWord = hashSetWord.substring (0, i) + " " + hashSetWord.substring (i + 1);
        }
        if (hashSetWord.equals (word)) return true;

    }
    return false;
}
----------------------------------------

public boolean isValidWord (String word) {
    if (wordHashSet.contains (word)) {
        return true;
    }
    for (String fromHashSet : wordHashSet) {
        if (compareIgnoreBlanks (fromHashSet, word)) {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21737981_21827383_126_141
21737981_21827383_89_104
Title: Vaadin calendar? 
----------------------------------------

public void buttonClick (Button.ClickEvent event) {
    if (_maxDate == null || _maxDate.isAfter (_startDate.plusDays (21))) {
        LocalDate newEndDate = _startDate.plusDays (7);
        if (_maxDate != null && newEndDate.isAfter (_maxDate)) {
            newEndDate = _maxDate;
        }
        loadCalendarForDate (newEndDate);
    } else {
        Notification.show ("Am spätesten möglichen Termin", Notification.Type.WARNING_MESSAGE);
    }
}
----------------------------------------

public void buttonClick (Button.ClickEvent event) {
    if (_minDate == null || _minDate.isBefore (_startDate)) {
        LocalDate newStartDate = _startDate.minusDays (7);
        if (_minDate != null && _minDate.isAfter (newStartDate)) {
            newStartDate = _minDate;
        }
        loadCalendarForDate (newStartDate);
    } else {
        Notification.show ("Am frühesten möglichen Termin", Notification.Type.WARNING_MESSAGE);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21741619_21741752_3_11
21741619_29269730_5_15
Title: Nested for loop sum of integers 
----------------------------------------

public static void main (String [] args) {
    int to = Integer.parseInt (args [0]);
    int sum = 0;
    for (int i = 1;
    sum < to; i ++) {
        sum = sum + i;
        System.out.println (sum);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int sum = 0;
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println ("Enter integer input " + i + ":");
        int a = input.nextInt ();
        sum = sum + a;
    }
    System.out.println ("Total is:" + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21743240_22338886_108_158
21743240_22338886_21_44
Title: App Engine with GCM to Android Client 
----------------------------------------

protected Void doInBackground (Context...params) {
    Context context = params [0];
    GoogleAccountCredential credential = getCredential (context);
    if (credential == null) {
        return null;
    }
    Zeppanotificationendpoint.Builder endpointBuilder = new Zeppanotificationendpoint.Builder (AndroidHttp.newCompatibleTransport (), new JacksonFactory (), credential);
    endpointBuilder = CloudEndpointUtils.updateBuilder (endpointBuilder);
    Zeppanotificationendpoint notificationEndpoint = endpointBuilder.build ();
    try {
        SharedPreferences prefs = context.getSharedPreferences (Constants.SHARED_PREFS, Context.MODE_PRIVATE);
        Long userId = prefs.getLong (Constants.USER_ID, - 1);
        if (userId > 0) {
            GetUnseenNotifications getUnseenNotifications = notificationEndpoint.getUnseenNotifications (userId);
            CollectionResponseZeppaNotification collectionResponse = getUnseenNotifications.execute ();
            if (collectionResponse == null || collectionResponse.getItems () == null) {
            } else {
                List < ZeppaNotification > notifications = collectionResponse.getItems ();
                sendNotificationsForResult (notifications, context);
                try {
                    NotificationSingleton.getInstance ().addAllNotifcations (notifications);
                } catch (NullPointerException ex) {
                    ex.printStackTrace ();
                }
            }
        } else {
            Log.d (TAG, "No Set userId");
        }
    } catch (IOException ioEx) {
        ioEx.printStackTrace ();
    }
    return null;
}
----------------------------------------

protected Void doInBackground (Void...params) {
    Zeppauserendpoint.Builder endpointBuilder = new Zeppauserendpoint.Builder (AndroidHttp.newCompatibleTransport (), new JacksonFactory (), application.getGoogleAccountCredential ());
    endpointBuilder = CloudEndpointUtils.updateBuilder (endpointBuilder);
    Zeppauserendpoint userEndpoint = endpointBuilder.build ();
    try {
        RegisterUserDevice registerTask = userEndpoint.registerUserDevice (ZeppaUserSingleton.getInstance ().getUserId (), registrationId);
        registerTask.execute ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21747310_21747517_3_22
21747310_21747695_6_20
Title: How to print the string without duplicate? 
----------------------------------------

public static void main (String [] args) {
    String [] ip = {"mani", " manivannan", "raghv ", "mani"};
    for (int i = 0;
    i < ip.length; i ++) {
        boolean duplicated = false;
        for (int j = i - 1;
        j >= 0; j --) {
            if (ip [i].equals (ip [j])) {
                duplicated = true;
                break;
            }
        }
        if (! duplicated) {
            System.out.println (ip [i]);
        }
    }
}
----------------------------------------

public static void main (String a []) {
    String [] strArr = {"one", "two", "three", "four", "four", "five"};
    List < String > tmpList = Arrays.asList (strArr);
    TreeSet < String > unique = new TreeSet < String > (tmpList);
    System.out.println (unique);
    System.out.println ();
    Iterator < Integer > iterator = unique.iterator ();
    while (iterator.hasNext ()) {
        System.out.print (iterator.next () + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21747310_21747517_3_22
21747310_21752782_3_12
Title: How to print the string without duplicate? 
----------------------------------------

public static void main (String [] args) {
    String [] ip = {"mani", " manivannan", "raghv ", "mani"};
    for (int i = 0;
    i < ip.length; i ++) {
        boolean duplicated = false;
        for (int j = i - 1;
        j >= 0; j --) {
            if (ip [i].equals (ip [j])) {
                duplicated = true;
                break;
            }
        }
        if (! duplicated) {
            System.out.println (ip [i]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] names = {"john", "adam", "will", "lee", "john", "seon", "lee"};
    String s;
    for (int i = 0;
    names.length > i; i ++) {
        s = names [i];
        if (! isDuplicate (s, i, names)) {
            System.out.println (s);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21747310_21747695_6_20
21747310_21752782_3_12
Title: How to print the string without duplicate? 
----------------------------------------

public static void main (String a []) {
    String [] strArr = {"one", "two", "three", "four", "four", "five"};
    List < String > tmpList = Arrays.asList (strArr);
    TreeSet < String > unique = new TreeSet < String > (tmpList);
    System.out.println (unique);
    System.out.println ();
    Iterator < Integer > iterator = unique.iterator ();
    while (iterator.hasNext ()) {
        System.out.print (iterator.next () + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] names = {"john", "adam", "will", "lee", "john", "seon", "lee"};
    String s;
    for (int i = 0;
    names.length > i; i ++) {
        s = names [i];
        if (! isDuplicate (s, i, names)) {
            System.out.println (s);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21748970_21749318_1_19
21748970_21749327_1_16
Title: How to return longest sequence of chars in a string in java? 
----------------------------------------

public String longestSequenceOfChar (String str) {
    String interimresult = "";
    String result = "";
    for (int i = 0;
    i < str.length (); i ++) {
        char ch = str.charAt (i);
        interimresult += ch;
        for (int j = i + 1;
        j < str.length (); j ++) {
            char ch1 = str.charAt (j);
            if (ch != ch1) {
                break;
            }
            interimresult += ch;
        }
        if (interimresult.length () > result.length ()) result = interimresult;

        interimresult = "";
    }
    return result;
}
----------------------------------------

public String longestSequenceOfChar (String str) {
    String result = "";
    for (int i = 0;
    i < str.length (); i ++) {
        int j = i;
        while (j < str.length () && str.charAt (j) == str.charAt (i)) {
            j ++;
        }
        if (j - i > result.length ()) {
            result = str.substring (i, j);
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21764299_30055093_1_27
21764299_45757756_1_14
Title: Comparing two files in java 
----------------------------------------

public boolean compareTwoFiles (String file1Path, String file2Path) throws IOException {
    File file1 = new File (file1Path);
    File file2 = new File (file2Path);
    BufferedReader br1 = new BufferedReader (new FileReader (file1));
    BufferedReader br2 = new BufferedReader (new FileReader (file2));
    String thisLine = null;
    String thatLine = null;
    List < String > list1 = new ArrayList < String > ();
    List < String > list2 = new ArrayList < String > ();
    while ((thisLine = br1.readLine ()) != null) {
        list1.add (thisLine);
    }
    while ((thatLine = br2.readLine ()) != null) {
        list2.add (thatLine);
    }
    br1.close ();
    br2.close ();
    return list1.equals (list2);
}
----------------------------------------

public boolean compareTwoFiles (String file1Path, String file2Path) {
    Path p1 = Paths.get (file1Path);
    Path p1 = Paths.get (file1Path);
    try {
        List < String > listF1 = Files.readAllLines (p1);
        List < String > listF2 = Files.readAllLines (p2);
        return listF1.containsAll (listF2);
    } catch (IOException ie) {
        ie.getMessage ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21764870_21764989_1_11
21764870_35851989_4_19
Title: Java - adding value in a while loop 
----------------------------------------

public static void main (String [] args) throws Exception {
    Scanner keyboard = new Scanner (System.in);
    int input = 0;
    int total = 0;
    System.out.println ("Start entering the number");
    while ((input = keyboard.nextInt ()) != 0) {
        total = input + total;
    }
    System.out.println ("The program exist because 0 is entered and sum is " + total);
}
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    int number, total = 0;
    System.out.print ("Enter a number\n> ");
    number = keyboard.nextInt ();
    total += number;
    while (number != 0) {
        System.out.print ("Enter another number\n> ");
        number = keyboard.nextInt ();
        total += number;
    }
    System.out.println ("The total is " + total + ".");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21768291_21768348_1_21
21768291_21768387_1_15
Title: How do I search for equal elements that appear next to each other in an array 
----------------------------------------

public static int consecutiveEqualElements (int [] elements) {
    int max = 0;
    int consecutive = 1;
    for (int i = 1;
    i < elements.length; i ++) {
        if (elements [i] == elements [i - 1]) {
            consecutive ++;
        } else {
            if (consecutive > max) {
                max = consecutive;
            }
            consecutive = 1;
        }
    }
    if (consecutive > max) {
        return consecutive;
    } else {
        return max;
    }
}
----------------------------------------

public static void consecutiveEqualElements (int [] elements) {
    int count = 1;
    int maxCount = 1;
    for (int index = 1;
    index < elements.length; index ++) {
        if (elements [index] == elements [index - 1]) {
            count ++;
            maxCount = Math.max (maxCount, count);
        } else {
            count = 1;
        }
    }
    System.out.println (maxCount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21768291_21768348_1_21
21768291_21768451_1_15
Title: How do I search for equal elements that appear next to each other in an array 
----------------------------------------

public static int consecutiveEqualElements (int [] elements) {
    int max = 0;
    int consecutive = 1;
    for (int i = 1;
    i < elements.length; i ++) {
        if (elements [i] == elements [i - 1]) {
            consecutive ++;
        } else {
            if (consecutive > max) {
                max = consecutive;
            }
            consecutive = 1;
        }
    }
    if (consecutive > max) {
        return consecutive;
    } else {
        return max;
    }
}
----------------------------------------

public static int consecutiveEqualElements (int [] elements) {
    int currentNum = elements [0];
    int currentConsecutive = 1;
    int maxConsecutive = 1;
    for (int i = 1;
    i < elements.length; i ++) {
        if (elements [i] == currentNum) {
            currentConsecutive ++;
            maxConsecutive = Math.max (maxConsecutive, currentConsecutive);
        } else {
            currentNum = elements [i];
            currentConsecutive = 1;
        }
    }
    return maxConsecutive;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21768291_21768348_1_21
21768291_21768458_3_33
Title: How do I search for equal elements that appear next to each other in an array 
----------------------------------------

public static int consecutiveEqualElements (int [] elements) {
    int max = 0;
    int consecutive = 1;
    for (int i = 1;
    i < elements.length; i ++) {
        if (elements [i] == elements [i - 1]) {
            consecutive ++;
        } else {
            if (consecutive > max) {
                max = consecutive;
            }
            consecutive = 1;
        }
    }
    if (consecutive > max) {
        return consecutive;
    } else {
        return max;
    }
}
----------------------------------------

public static void consecutiveEqualElements (int [] elements) {
    int occurances = 0;
    int count = 1;
    for (int index = 1;
    index < elements.length; index ++) {
        if (elements [index] == elements [index - 1]) {
            count ++;
            occurances = Math.max (occurances, count);
        } else {
            count = 1;
        }
    }
    System.out.println (occurances);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21768291_21768387_1_15
21768291_21768451_1_15
Title: How do I search for equal elements that appear next to each other in an array 
----------------------------------------

public static void consecutiveEqualElements (int [] elements) {
    int count = 1;
    int maxCount = 1;
    for (int index = 1;
    index < elements.length; index ++) {
        if (elements [index] == elements [index - 1]) {
            count ++;
            maxCount = Math.max (maxCount, count);
        } else {
            count = 1;
        }
    }
    System.out.println (maxCount);
}
----------------------------------------

public static int consecutiveEqualElements (int [] elements) {
    int currentNum = elements [0];
    int currentConsecutive = 1;
    int maxConsecutive = 1;
    for (int i = 1;
    i < elements.length; i ++) {
        if (elements [i] == currentNum) {
            currentConsecutive ++;
            maxConsecutive = Math.max (maxConsecutive, currentConsecutive);
        } else {
            currentNum = elements [i];
            currentConsecutive = 1;
        }
    }
    return maxConsecutive;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21768291_21768451_1_15
21768291_21768458_3_33
Title: How do I search for equal elements that appear next to each other in an array 
----------------------------------------

public static int consecutiveEqualElements (int [] elements) {
    int currentNum = elements [0];
    int currentConsecutive = 1;
    int maxConsecutive = 1;
    for (int i = 1;
    i < elements.length; i ++) {
        if (elements [i] == currentNum) {
            currentConsecutive ++;
            maxConsecutive = Math.max (maxConsecutive, currentConsecutive);
        } else {
            currentNum = elements [i];
            currentConsecutive = 1;
        }
    }
    return maxConsecutive;
}
----------------------------------------

public static void consecutiveEqualElements (int [] elements) {
    int occurances = 0;
    int count = 1;
    for (int index = 1;
    index < elements.length; index ++) {
        if (elements [index] == elements [index - 1]) {
            count ++;
            occurances = Math.max (occurances, count);
        } else {
            count = 1;
        }
    }
    System.out.println (occurances);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21769026_21769229_21_33
21769026_21769229_48_68
Title: run threads simultaneously 
----------------------------------------

public void run () {
    try {
        Latch.awaitZero ();
        for (int i = 1;
        i < 6; i ++) {
            System.out.println ("Thread " + this.getName () + " : " + i);
            Thread.sleep (500);
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("Thread " + this.getName () + " closed.");
}
----------------------------------------

public void run () {
    NewSimpleThread n1 = new NewSimpleThread ("1");
    NewSimpleThread n2 = new NewSimpleThread ("2");
    NewSimpleThread n3 = new NewSimpleThread ("3");
    n1.start ();
    n2.start ();
    n3.start ();
    try {
        Thread.sleep (3000);
        Latch.doNotifyAll ();
        n1.join ();
        n2.join ();
        n3.join ();
    } catch (InterruptedException e) {
        System.out.println ("Thread " + "broke.");
    }
    System.out.println ("Smart thread " + this.getName () + " closed.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771233_21771367_17_26
21771233_21771429_19_28
Title: Common Template for JPanel 
----------------------------------------

protected void addComponentsToScreen () {
    add (new JLabel ("Employee"));
    add (jTextEmp);
    add (new JLabel ("Name"));
    add (jTextName);
    if (getShowDept ()) {
        add (new JLabel ("Dept"));
        add (jTextDept);
    }
}
----------------------------------------

protected void addComponentsToScreen () {
    centerPanel.add (new JLabel ("Name"));
    centerPanel.add (jTextEmp);
    centerPanel.add (new JLabel ("Employee"));
    centerPanel.add (jTextName);
    centerPanel.add (new JLabel ("dept"));
    centerPanel.add (jTextDept);
    addAppCenter (centerPanel);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_21772074_4_29
21771566_35753293_3_24
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String text = "the quick brown fox jumps fox fox over the lazy dog brown";
    String [] keys = text.split (" ");
    String [] uniqueKeys;
    int count = 0;
    System.out.println (text);
    uniqueKeys = getUniqueKeys (keys);
    for (String key : uniqueKeys) {
        if (null == key) {
            break;
        }
        for (String s : keys) {
            if (key.equals (s)) {
                count ++;
            }
        }
        System.out.println ("Count of [" + key + "] is : " + count);
        count = 0;
    }
}
----------------------------------------

public static void main (String args []) {
    String s = "the quick brown fox jumps fox fox over the lazy dog brown";
    String alreadyProcessedWords = "";
    boolean isCount = false;
    String [] splitWord = s.split ("\\s|\\.");
    for (int i = 0;
    i < splitWord.length; i ++) {
        String word = splitWord [i];
        int count = 0;
        isCount = false;
        if (! alreadyProcessedWords.contains (word)) {
            for (int j = 0;
            j < splitWord.length; j ++) {
                if (word.equals (splitWord [j])) {
                    count ++;
                    isCount = true;
                    alreadyProcessedWords = alreadyProcessedWords + word + " ";
                }
            }
        }
        if (isCount) System.out.println (word + "Present " + count);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_21772074_4_29
21771566_36897805_3_29
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String text = "the quick brown fox jumps fox fox over the lazy dog brown";
    String [] keys = text.split (" ");
    String [] uniqueKeys;
    int count = 0;
    System.out.println (text);
    uniqueKeys = getUniqueKeys (keys);
    for (String key : uniqueKeys) {
        if (null == key) {
            break;
        }
        for (String s : keys) {
            if (key.equals (s)) {
                count ++;
            }
        }
        System.out.println ("Count of [" + key + "] is : " + count);
        count = 0;
    }
}
----------------------------------------

public static void main (String nm, String w) {
    int l, i;
    int c = 0;
    l = nm.length ();
    String b = "";
    for (i = 0; i < l; i ++) {
        char d = nm.charAt (i);
        if (d != ' ') {
            b = b + d;
        }
        if (d == ' ') {
            if (b.compareTo (w) == 0) {
                c ++;
            }
            b = "";
        }
    }
    System.out.println (c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_21772074_4_29
21771566_39384980_3_13
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String text = "the quick brown fox jumps fox fox over the lazy dog brown";
    String [] keys = text.split (" ");
    String [] uniqueKeys;
    int count = 0;
    System.out.println (text);
    uniqueKeys = getUniqueKeys (keys);
    for (String key : uniqueKeys) {
        if (null == key) {
            break;
        }
        for (String s : keys) {
            if (key.equals (s)) {
                count ++;
            }
        }
        System.out.println ("Count of [" + key + "] is : " + count);
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "Find the repeated word which is repeated in this string";
    List < String > output = (List) Arrays.asList (input.split (" "));
    for (String str : output) {
        int occurrences = Collections.frequency (output, str);
        System.out.println ("Occurence of " + str + " is " + occurrences);
    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_21772074_4_29
21771566_42756728_12_78
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String text = "the quick brown fox jumps fox fox over the lazy dog brown";
    String [] keys = text.split (" ");
    String [] uniqueKeys;
    int count = 0;
    System.out.println (text);
    uniqueKeys = getUniqueKeys (keys);
    for (String key : uniqueKeys) {
        if (null == key) {
            break;
        }
        for (String s : keys) {
            if (key.equals (s)) {
                count ++;
            }
        }
        System.out.println ("Count of [" + key + "] is : " + count);
        count = 0;
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st.trim ();
    st = st + " ";
    int count = lengthx (st);
    System.out.println (count);
    String arr [] = new String [count];
    int p = 0;
    int c = 0;
    for (int i = 0;
    i < st.length (); i ++) {
        if (st.charAt (i) == ' ') {
            arr [p] = st.substring (c, i);
            System.out.println (arr [p]);
            c = i + 1;
            p ++;
        }
    }
    Map < String, Integer > map = new HashMap < > ();
    for (String w : arr) {
        Integer n = map.get (w);
        n = (n == null) ? 1 : ++ n;
        map.put (w, n);
    }
    for (String key : map.keySet ()) {
        System.out.println (key + " = " + map.get (key));
    }
    Set < Map.Entry < String, Integer > > entries = map.entrySet ();
    Comparator < Map.Entry < String, Integer > > valueComparator = new Comparator < Map.Entry < String, Integer > > () {
        @Override
        public int compare (Map.Entry < String, Integer > e1, Map.Entry < String, Integer > e2) {
            Integer v1 = e1.getValue ();
            Integer v2 = e2.getValue ();
            return v1.compareTo (v2);
        }}

    ;
    List < Map.Entry < String, Integer > > listOfEntries = new ArrayList < Map.Entry < String, Integer > > (entries);
    Collections.sort (listOfEntries, valueComparator);
    LinkedHashMap < String, Integer > sortedByValue = new LinkedHashMap < String, Integer > (listOfEntries.size ());
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    System.out.println ("HashMap after sorting entries by values ");
    Set < Map.Entry < String, Integer > > entrySetSortedByValue = sortedByValue.entrySet ();
    for (Map.Entry < String, Integer > mapping : entrySetSortedByValue) {
        System.out.println (mapping.getKey () + " ==> " + mapping.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_21772074_4_29
21771566_44045533_5_18
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String text = "the quick brown fox jumps fox fox over the lazy dog brown";
    String [] keys = text.split (" ");
    String [] uniqueKeys;
    int count = 0;
    System.out.println (text);
    uniqueKeys = getUniqueKeys (keys);
    for (String key : uniqueKeys) {
        if (null == key) {
            break;
        }
        for (String s : keys) {
            if (key.equals (s)) {
                count ++;
            }
        }
        System.out.println ("Count of [" + key + "] is : " + count);
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "this is a this is this a this yes this is a this what it may be i do not care about this";
    String a [] = s.split (" ");
    Map < String, Integer > words = new HashMap < > ();
    for (String str : a) {
        if (words.containsKey (str)) {
            words.put (str, 1 + words.get (str));
        } else {
            words.put (str, 1);
        }
    }
    System.out.println (words);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_21772074_4_29
21771566_46999670_5_23
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String text = "the quick brown fox jumps fox fox over the lazy dog brown";
    String [] keys = text.split (" ");
    String [] uniqueKeys;
    int count = 0;
    System.out.println (text);
    uniqueKeys = getUniqueKeys (keys);
    for (String key : uniqueKeys) {
        if (null == key) {
            break;
        }
        for (String s : keys) {
            if (key.equals (s)) {
                count ++;
            }
        }
        System.out.println ("Count of [" + key + "] is : " + count);
        count = 0;
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st + " ";
    int a = lengthx (st);
    String arr [] = new String [a];
    int p = 0;
    int c = 0;
    for (int j = 0;
    j < st.length (); j ++) {
        if (st.charAt (j) == ' ') {
            arr [p ++] = st.substring (c, j);
            c = j + 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_35753293_3_24
21771566_36897805_3_29
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String args []) {
    String s = "the quick brown fox jumps fox fox over the lazy dog brown";
    String alreadyProcessedWords = "";
    boolean isCount = false;
    String [] splitWord = s.split ("\\s|\\.");
    for (int i = 0;
    i < splitWord.length; i ++) {
        String word = splitWord [i];
        int count = 0;
        isCount = false;
        if (! alreadyProcessedWords.contains (word)) {
            for (int j = 0;
            j < splitWord.length; j ++) {
                if (word.equals (splitWord [j])) {
                    count ++;
                    isCount = true;
                    alreadyProcessedWords = alreadyProcessedWords + word + " ";
                }
            }
        }
        if (isCount) System.out.println (word + "Present " + count);

    }
}
----------------------------------------

public static void main (String nm, String w) {
    int l, i;
    int c = 0;
    l = nm.length ();
    String b = "";
    for (i = 0; i < l; i ++) {
        char d = nm.charAt (i);
        if (d != ' ') {
            b = b + d;
        }
        if (d == ' ') {
            if (b.compareTo (w) == 0) {
                c ++;
            }
            b = "";
        }
    }
    System.out.println (c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_35753293_3_24
21771566_39384980_3_13
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String args []) {
    String s = "the quick brown fox jumps fox fox over the lazy dog brown";
    String alreadyProcessedWords = "";
    boolean isCount = false;
    String [] splitWord = s.split ("\\s|\\.");
    for (int i = 0;
    i < splitWord.length; i ++) {
        String word = splitWord [i];
        int count = 0;
        isCount = false;
        if (! alreadyProcessedWords.contains (word)) {
            for (int j = 0;
            j < splitWord.length; j ++) {
                if (word.equals (splitWord [j])) {
                    count ++;
                    isCount = true;
                    alreadyProcessedWords = alreadyProcessedWords + word + " ";
                }
            }
        }
        if (isCount) System.out.println (word + "Present " + count);

    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "Find the repeated word which is repeated in this string";
    List < String > output = (List) Arrays.asList (input.split (" "));
    for (String str : output) {
        int occurrences = Collections.frequency (output, str);
        System.out.println ("Occurence of " + str + " is " + occurrences);
    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_35753293_3_24
21771566_42756728_12_78
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String args []) {
    String s = "the quick brown fox jumps fox fox over the lazy dog brown";
    String alreadyProcessedWords = "";
    boolean isCount = false;
    String [] splitWord = s.split ("\\s|\\.");
    for (int i = 0;
    i < splitWord.length; i ++) {
        String word = splitWord [i];
        int count = 0;
        isCount = false;
        if (! alreadyProcessedWords.contains (word)) {
            for (int j = 0;
            j < splitWord.length; j ++) {
                if (word.equals (splitWord [j])) {
                    count ++;
                    isCount = true;
                    alreadyProcessedWords = alreadyProcessedWords + word + " ";
                }
            }
        }
        if (isCount) System.out.println (word + "Present " + count);

    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st.trim ();
    st = st + " ";
    int count = lengthx (st);
    System.out.println (count);
    String arr [] = new String [count];
    int p = 0;
    int c = 0;
    for (int i = 0;
    i < st.length (); i ++) {
        if (st.charAt (i) == ' ') {
            arr [p] = st.substring (c, i);
            System.out.println (arr [p]);
            c = i + 1;
            p ++;
        }
    }
    Map < String, Integer > map = new HashMap < > ();
    for (String w : arr) {
        Integer n = map.get (w);
        n = (n == null) ? 1 : ++ n;
        map.put (w, n);
    }
    for (String key : map.keySet ()) {
        System.out.println (key + " = " + map.get (key));
    }
    Set < Map.Entry < String, Integer > > entries = map.entrySet ();
    Comparator < Map.Entry < String, Integer > > valueComparator = new Comparator < Map.Entry < String, Integer > > () {
        @Override
        public int compare (Map.Entry < String, Integer > e1, Map.Entry < String, Integer > e2) {
            Integer v1 = e1.getValue ();
            Integer v2 = e2.getValue ();
            return v1.compareTo (v2);
        }}

    ;
    List < Map.Entry < String, Integer > > listOfEntries = new ArrayList < Map.Entry < String, Integer > > (entries);
    Collections.sort (listOfEntries, valueComparator);
    LinkedHashMap < String, Integer > sortedByValue = new LinkedHashMap < String, Integer > (listOfEntries.size ());
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    System.out.println ("HashMap after sorting entries by values ");
    Set < Map.Entry < String, Integer > > entrySetSortedByValue = sortedByValue.entrySet ();
    for (Map.Entry < String, Integer > mapping : entrySetSortedByValue) {
        System.out.println (mapping.getKey () + " ==> " + mapping.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_35753293_3_24
21771566_44045533_5_18
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String args []) {
    String s = "the quick brown fox jumps fox fox over the lazy dog brown";
    String alreadyProcessedWords = "";
    boolean isCount = false;
    String [] splitWord = s.split ("\\s|\\.");
    for (int i = 0;
    i < splitWord.length; i ++) {
        String word = splitWord [i];
        int count = 0;
        isCount = false;
        if (! alreadyProcessedWords.contains (word)) {
            for (int j = 0;
            j < splitWord.length; j ++) {
                if (word.equals (splitWord [j])) {
                    count ++;
                    isCount = true;
                    alreadyProcessedWords = alreadyProcessedWords + word + " ";
                }
            }
        }
        if (isCount) System.out.println (word + "Present " + count);

    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "this is a this is this a this yes this is a this what it may be i do not care about this";
    String a [] = s.split (" ");
    Map < String, Integer > words = new HashMap < > ();
    for (String str : a) {
        if (words.containsKey (str)) {
            words.put (str, 1 + words.get (str));
        } else {
            words.put (str, 1);
        }
    }
    System.out.println (words);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_35753293_3_24
21771566_46999670_5_23
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String args []) {
    String s = "the quick brown fox jumps fox fox over the lazy dog brown";
    String alreadyProcessedWords = "";
    boolean isCount = false;
    String [] splitWord = s.split ("\\s|\\.");
    for (int i = 0;
    i < splitWord.length; i ++) {
        String word = splitWord [i];
        int count = 0;
        isCount = false;
        if (! alreadyProcessedWords.contains (word)) {
            for (int j = 0;
            j < splitWord.length; j ++) {
                if (word.equals (splitWord [j])) {
                    count ++;
                    isCount = true;
                    alreadyProcessedWords = alreadyProcessedWords + word + " ";
                }
            }
        }
        if (isCount) System.out.println (word + "Present " + count);

    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st + " ";
    int a = lengthx (st);
    String arr [] = new String [a];
    int p = 0;
    int c = 0;
    for (int j = 0;
    j < st.length (); j ++) {
        if (st.charAt (j) == ' ') {
            arr [p ++] = st.substring (c, j);
            c = j + 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_36897805_3_29
21771566_39384980_3_13
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String nm, String w) {
    int l, i;
    int c = 0;
    l = nm.length ();
    String b = "";
    for (i = 0; i < l; i ++) {
        char d = nm.charAt (i);
        if (d != ' ') {
            b = b + d;
        }
        if (d == ' ') {
            if (b.compareTo (w) == 0) {
                c ++;
            }
            b = "";
        }
    }
    System.out.println (c);
}
----------------------------------------

public static void main (String [] args) {
    String input = "Find the repeated word which is repeated in this string";
    List < String > output = (List) Arrays.asList (input.split (" "));
    for (String str : output) {
        int occurrences = Collections.frequency (output, str);
        System.out.println ("Occurence of " + str + " is " + occurrences);
    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_36897805_3_29
21771566_42756728_12_78
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String nm, String w) {
    int l, i;
    int c = 0;
    l = nm.length ();
    String b = "";
    for (i = 0; i < l; i ++) {
        char d = nm.charAt (i);
        if (d != ' ') {
            b = b + d;
        }
        if (d == ' ') {
            if (b.compareTo (w) == 0) {
                c ++;
            }
            b = "";
        }
    }
    System.out.println (c);
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st.trim ();
    st = st + " ";
    int count = lengthx (st);
    System.out.println (count);
    String arr [] = new String [count];
    int p = 0;
    int c = 0;
    for (int i = 0;
    i < st.length (); i ++) {
        if (st.charAt (i) == ' ') {
            arr [p] = st.substring (c, i);
            System.out.println (arr [p]);
            c = i + 1;
            p ++;
        }
    }
    Map < String, Integer > map = new HashMap < > ();
    for (String w : arr) {
        Integer n = map.get (w);
        n = (n == null) ? 1 : ++ n;
        map.put (w, n);
    }
    for (String key : map.keySet ()) {
        System.out.println (key + " = " + map.get (key));
    }
    Set < Map.Entry < String, Integer > > entries = map.entrySet ();
    Comparator < Map.Entry < String, Integer > > valueComparator = new Comparator < Map.Entry < String, Integer > > () {
        @Override
        public int compare (Map.Entry < String, Integer > e1, Map.Entry < String, Integer > e2) {
            Integer v1 = e1.getValue ();
            Integer v2 = e2.getValue ();
            return v1.compareTo (v2);
        }}

    ;
    List < Map.Entry < String, Integer > > listOfEntries = new ArrayList < Map.Entry < String, Integer > > (entries);
    Collections.sort (listOfEntries, valueComparator);
    LinkedHashMap < String, Integer > sortedByValue = new LinkedHashMap < String, Integer > (listOfEntries.size ());
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    System.out.println ("HashMap after sorting entries by values ");
    Set < Map.Entry < String, Integer > > entrySetSortedByValue = sortedByValue.entrySet ();
    for (Map.Entry < String, Integer > mapping : entrySetSortedByValue) {
        System.out.println (mapping.getKey () + " ==> " + mapping.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_36897805_3_29
21771566_44045533_5_18
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String nm, String w) {
    int l, i;
    int c = 0;
    l = nm.length ();
    String b = "";
    for (i = 0; i < l; i ++) {
        char d = nm.charAt (i);
        if (d != ' ') {
            b = b + d;
        }
        if (d == ' ') {
            if (b.compareTo (w) == 0) {
                c ++;
            }
            b = "";
        }
    }
    System.out.println (c);
}
----------------------------------------

public static void main (String [] args) {
    String s = "this is a this is this a this yes this is a this what it may be i do not care about this";
    String a [] = s.split (" ");
    Map < String, Integer > words = new HashMap < > ();
    for (String str : a) {
        if (words.containsKey (str)) {
            words.put (str, 1 + words.get (str));
        } else {
            words.put (str, 1);
        }
    }
    System.out.println (words);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_36897805_3_29
21771566_46999670_5_23
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String nm, String w) {
    int l, i;
    int c = 0;
    l = nm.length ();
    String b = "";
    for (i = 0; i < l; i ++) {
        char d = nm.charAt (i);
        if (d != ' ') {
            b = b + d;
        }
        if (d == ' ') {
            if (b.compareTo (w) == 0) {
                c ++;
            }
            b = "";
        }
    }
    System.out.println (c);
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st + " ";
    int a = lengthx (st);
    String arr [] = new String [a];
    int p = 0;
    int c = 0;
    for (int j = 0;
    j < st.length (); j ++) {
        if (st.charAt (j) == ' ') {
            arr [p ++] = st.substring (c, j);
            c = j + 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_39384980_3_13
21771566_42756728_12_78
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String input = "Find the repeated word which is repeated in this string";
    List < String > output = (List) Arrays.asList (input.split (" "));
    for (String str : output) {
        int occurrences = Collections.frequency (output, str);
        System.out.println ("Occurence of " + str + " is " + occurrences);
    }
    System.out.println (output);
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st.trim ();
    st = st + " ";
    int count = lengthx (st);
    System.out.println (count);
    String arr [] = new String [count];
    int p = 0;
    int c = 0;
    for (int i = 0;
    i < st.length (); i ++) {
        if (st.charAt (i) == ' ') {
            arr [p] = st.substring (c, i);
            System.out.println (arr [p]);
            c = i + 1;
            p ++;
        }
    }
    Map < String, Integer > map = new HashMap < > ();
    for (String w : arr) {
        Integer n = map.get (w);
        n = (n == null) ? 1 : ++ n;
        map.put (w, n);
    }
    for (String key : map.keySet ()) {
        System.out.println (key + " = " + map.get (key));
    }
    Set < Map.Entry < String, Integer > > entries = map.entrySet ();
    Comparator < Map.Entry < String, Integer > > valueComparator = new Comparator < Map.Entry < String, Integer > > () {
        @Override
        public int compare (Map.Entry < String, Integer > e1, Map.Entry < String, Integer > e2) {
            Integer v1 = e1.getValue ();
            Integer v2 = e2.getValue ();
            return v1.compareTo (v2);
        }}

    ;
    List < Map.Entry < String, Integer > > listOfEntries = new ArrayList < Map.Entry < String, Integer > > (entries);
    Collections.sort (listOfEntries, valueComparator);
    LinkedHashMap < String, Integer > sortedByValue = new LinkedHashMap < String, Integer > (listOfEntries.size ());
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    System.out.println ("HashMap after sorting entries by values ");
    Set < Map.Entry < String, Integer > > entrySetSortedByValue = sortedByValue.entrySet ();
    for (Map.Entry < String, Integer > mapping : entrySetSortedByValue) {
        System.out.println (mapping.getKey () + " ==> " + mapping.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_39384980_3_13
21771566_44045533_5_18
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String input = "Find the repeated word which is repeated in this string";
    List < String > output = (List) Arrays.asList (input.split (" "));
    for (String str : output) {
        int occurrences = Collections.frequency (output, str);
        System.out.println ("Occurence of " + str + " is " + occurrences);
    }
    System.out.println (output);
}
----------------------------------------

public static void main (String [] args) {
    String s = "this is a this is this a this yes this is a this what it may be i do not care about this";
    String a [] = s.split (" ");
    Map < String, Integer > words = new HashMap < > ();
    for (String str : a) {
        if (words.containsKey (str)) {
            words.put (str, 1 + words.get (str));
        } else {
            words.put (str, 1);
        }
    }
    System.out.println (words);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_39384980_3_13
21771566_46999670_5_23
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String input = "Find the repeated word which is repeated in this string";
    List < String > output = (List) Arrays.asList (input.split (" "));
    for (String str : output) {
        int occurrences = Collections.frequency (output, str);
        System.out.println ("Occurence of " + str + " is " + occurrences);
    }
    System.out.println (output);
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st + " ";
    int a = lengthx (st);
    String arr [] = new String [a];
    int p = 0;
    int c = 0;
    for (int j = 0;
    j < st.length (); j ++) {
        if (st.charAt (j) == ' ') {
            arr [p ++] = st.substring (c, j);
            c = j + 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_42756728_12_78
21771566_44045533_5_18
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st.trim ();
    st = st + " ";
    int count = lengthx (st);
    System.out.println (count);
    String arr [] = new String [count];
    int p = 0;
    int c = 0;
    for (int i = 0;
    i < st.length (); i ++) {
        if (st.charAt (i) == ' ') {
            arr [p] = st.substring (c, i);
            System.out.println (arr [p]);
            c = i + 1;
            p ++;
        }
    }
    Map < String, Integer > map = new HashMap < > ();
    for (String w : arr) {
        Integer n = map.get (w);
        n = (n == null) ? 1 : ++ n;
        map.put (w, n);
    }
    for (String key : map.keySet ()) {
        System.out.println (key + " = " + map.get (key));
    }
    Set < Map.Entry < String, Integer > > entries = map.entrySet ();
    Comparator < Map.Entry < String, Integer > > valueComparator = new Comparator < Map.Entry < String, Integer > > () {
        @Override
        public int compare (Map.Entry < String, Integer > e1, Map.Entry < String, Integer > e2) {
            Integer v1 = e1.getValue ();
            Integer v2 = e2.getValue ();
            return v1.compareTo (v2);
        }}

    ;
    List < Map.Entry < String, Integer > > listOfEntries = new ArrayList < Map.Entry < String, Integer > > (entries);
    Collections.sort (listOfEntries, valueComparator);
    LinkedHashMap < String, Integer > sortedByValue = new LinkedHashMap < String, Integer > (listOfEntries.size ());
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    System.out.println ("HashMap after sorting entries by values ");
    Set < Map.Entry < String, Integer > > entrySetSortedByValue = sortedByValue.entrySet ();
    for (Map.Entry < String, Integer > mapping : entrySetSortedByValue) {
        System.out.println (mapping.getKey () + " ==> " + mapping.getValue ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "this is a this is this a this yes this is a this what it may be i do not care about this";
    String a [] = s.split (" ");
    Map < String, Integer > words = new HashMap < > ();
    for (String str : a) {
        if (words.containsKey (str)) {
            words.put (str, 1 + words.get (str));
        } else {
            words.put (str, 1);
        }
    }
    System.out.println (words);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_42756728_12_78
21771566_46999670_5_23
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st.trim ();
    st = st + " ";
    int count = lengthx (st);
    System.out.println (count);
    String arr [] = new String [count];
    int p = 0;
    int c = 0;
    for (int i = 0;
    i < st.length (); i ++) {
        if (st.charAt (i) == ' ') {
            arr [p] = st.substring (c, i);
            System.out.println (arr [p]);
            c = i + 1;
            p ++;
        }
    }
    Map < String, Integer > map = new HashMap < > ();
    for (String w : arr) {
        Integer n = map.get (w);
        n = (n == null) ? 1 : ++ n;
        map.put (w, n);
    }
    for (String key : map.keySet ()) {
        System.out.println (key + " = " + map.get (key));
    }
    Set < Map.Entry < String, Integer > > entries = map.entrySet ();
    Comparator < Map.Entry < String, Integer > > valueComparator = new Comparator < Map.Entry < String, Integer > > () {
        @Override
        public int compare (Map.Entry < String, Integer > e1, Map.Entry < String, Integer > e2) {
            Integer v1 = e1.getValue ();
            Integer v2 = e2.getValue ();
            return v1.compareTo (v2);
        }}

    ;
    List < Map.Entry < String, Integer > > listOfEntries = new ArrayList < Map.Entry < String, Integer > > (entries);
    Collections.sort (listOfEntries, valueComparator);
    LinkedHashMap < String, Integer > sortedByValue = new LinkedHashMap < String, Integer > (listOfEntries.size ());
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    for (Map.Entry < String, Integer > entry : listOfEntries) {
        sortedByValue.put (entry.getKey (), entry.getValue ());
    }
    System.out.println ("HashMap after sorting entries by values ");
    Set < Map.Entry < String, Integer > > entrySetSortedByValue = sortedByValue.entrySet ();
    for (Map.Entry < String, Integer > mapping : entrySetSortedByValue) {
        System.out.println (mapping.getKey () + " ==> " + mapping.getValue ());
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st + " ";
    int a = lengthx (st);
    String arr [] = new String [a];
    int p = 0;
    int c = 0;
    for (int j = 0;
    j < st.length (); j ++) {
        if (st.charAt (j) == ' ') {
            arr [p ++] = st.substring (c, j);
            c = j + 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771566_44045533_5_18
21771566_46999670_5_23
Title: Calculating frequency of each word in a sentence in java 
----------------------------------------

public static void main (String [] args) {
    String s = "this is a this is this a this yes this is a this what it may be i do not care about this";
    String a [] = s.split (" ");
    Map < String, Integer > words = new HashMap < > ();
    for (String str : a) {
        if (words.containsKey (str)) {
            words.put (str, 1 + words.get (str));
        } else {
            words.put (str, 1);
        }
    }
    System.out.println (words);
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("Enter the sentence");
    String st = br.readLine ();
    st = st + " ";
    int a = lengthx (st);
    String arr [] = new String [a];
    int p = 0;
    int c = 0;
    for (int j = 0;
    j < st.length (); j ++) {
        if (st.charAt (j) == ' ') {
            arr [p ++] = st.substring (c, j);
            c = j + 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21771911_21771994_2_15
21771911_21772037_4_20
Title: how can I make this coin flip simulation work based on user input? java eclipse 
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter a value : ");
    int numberOfTimes = scanner.nextInt ();
    for (int i = 0;
    i <= numberOfTimes; i ++) {
        int benito1 = (int) (Math.random () * 2);
        int benito2 = (int) (Math.random () * 2);
        System.out.println (benito1 + " " + benito2);
    }
    System.out.println ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    while (true) {
        System.out.println ("Enter a value : ");
        int n = scanner.nextInt ();
        if (n == 0) {
            break;
        }
        for (int i = 0;
        i < n; i ++) {
            int benito1 = (int) (Math.random () * 2);
            int benito2 = (int) (Math.random () * 2);
            System.out.println (benito1 + " " + benito2);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21779912_21780935_100_111
21779912_21780935_85_96
Title: Message to JList 
----------------------------------------

public void actionPerformed (ActionEvent a) {
    Object source = a.getSource ();
    if (source == b3) {
        t1.setText ("");
        t2.setText ("");
        t3.setText ("");
        t4.setText ("");
    }
}
----------------------------------------

public void actionPerformed (ActionEvent a) {
    Object source = a.getSource ();
    if (source == b2) {
        vector.add (t1.getText () + "-" + t2.getText () + "-" + t3.getText () + "-" + t4.getText ());
        list.setListData (vector);
        list.revalidate ();
        list.repaint ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21788661_21788713_1_10
21788661_21788766_1_19
Title: Coding Bat Exercise BMIResult 
----------------------------------------

public String BMIResult (double weight, double height) {
    double bmi = ((weight * 703) / (height * height));
    if (BMI < 18.5) {
        return "You are underweight.";
    } else if (BMI < 26) {
        return "Your weight is healthy.";
    } else {
        return "You are overweight.";
    }

}
----------------------------------------

public String BMIResult (double weight, double height) {
    double bmi = ((weight * 703) / (height * height));
    if (BMI < 18.5) return "You are underweight.";

    if (BMI > 18.5 && BMI < 26) return "Your weight is healthy.";

    if (BMI >= 26) return "You are overweight.";

    return "";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21789787_21829925_5_36
21789787_32023859_10_35
Title: Checking brackets nesting in a string 
----------------------------------------

public int solution (String S) {
    LinkedList < Character > stack = new LinkedList < > ();
    for (int i = 0;
    i < S.length (); i ++) {
        char c = S.charAt (i);
        if (c == '{' || c == '[' || c == '(') {
            stack.push (c);
        } else {
            if (stack.isEmpty ()) {
                return 0;
            }
            char preceding = stack.pop ();
            if (c == ')' && preceding != '(') {
                return 0;
            }
            if (c == ']' && preceding != '[') {
                return 0;
            }
            if (c == '}' && preceding != '{') {
                return 0;
            }
        }
    }
    return stack.isEmpty () ? 1 : 0;
}
----------------------------------------

public int solution (String S) {
    if (S.isEmpty ()) return BALANCED;

    Stack < Character > stack = new Stack < > (S.length ());
    NestedValidatorUtil util = new NestedValidatorUtil ();
    for (char c : S.toCharArray ()) {
        if (stack.isEmpty ()) {
            if (util.isOpener (c)) {
                stack.push (c);
            } else {
                return UNBALANCED;
            }
        } else {
            if (util.isOpener (c)) {
                stack.push (c);
            } else if (util.getOpenerForGivenCloser (c) == stack.peek ()) {
                stack.pop ();
            } else {
                return UNBALANCED;
            }

        }
    }
    return stack.isEmpty () ? BALANCED : UNBALANCED;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21797437_21797603_6_24
21797437_27335435_5_40
Title: Binary to Decimal Java converter 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    while (true) {
        System.out.println ("Enter integer in decimal form (or # to quit):");
        String s1 = in.nextLine ();
        if ("#".equalsIgnoreCase (s1.trim ())) {
            break;
        }
        System.out.println (decimalToBinary (s1));
        System.out.println ("Enter integer in binary form  (or # to quit):");
        String s2 = in.nextLine ();
        if ("#".equalsIgnoreCase (s2.trim ())) {
            break;
        }
        System.out.println (binaryToDecimal (s2));
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a binary number: ");
    String binary = input.nextLine ();
    int [] powers = new int [16];
    int powersIndex = 0;
    int decimal = 0;
    boolean isCorrect = true;
    for (int i = 0;
    i < powers.length; i ++) powers [i] = (int) Math.pow (2, i);

    for (int i = binary.length () - 1;
    i >= 0; i --) {
        if (binary.charAt (i) == '1') decimal = decimal + powers [powersIndex];
        else if (binary.charAt (i) != '0' & binary.charAt (i) != '1') {
            isCorrect = false;
            break;
        }

        powersIndex ++;
    }
    if (isCorrect) System.out.println (binary + " converted to base 10 is: " + decimal);
    else System.out.println ("Wrong input! It is binary... 0 and 1's like.....!");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21797437_21797603_6_24
21797437_35297270_1_21
Title: Binary to Decimal Java converter 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    while (true) {
        System.out.println ("Enter integer in decimal form (or # to quit):");
        String s1 = in.nextLine ();
        if ("#".equalsIgnoreCase (s1.trim ())) {
            break;
        }
        System.out.println (decimalToBinary (s1));
        System.out.println ("Enter integer in binary form  (or # to quit):");
        String s2 = in.nextLine ();
        if ("#".equalsIgnoreCase (s2.trim ())) {
            break;
        }
        System.out.println (binaryToDecimal (s2));
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter a binary number: ");
    Scanner input = new Scanner (System.in);
    long num = input.nextLong ();
    long reverseNum = 0;
    int decimal = 0;
    int i = 0;
    while (num != 0) {
        reverseNum = reverseNum * 10;
        reverseNum = num % 10;
        decimal = (int) (reverseNum * Math.pow (2, i)) + decimal;
        num = num / 10;
        i ++;
    }
    System.out.println (decimal);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21797437_27335435_5_40
21797437_35297270_1_21
Title: Binary to Decimal Java converter 
----------------------------------------

public static void main (String args []) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a binary number: ");
    String binary = input.nextLine ();
    int [] powers = new int [16];
    int powersIndex = 0;
    int decimal = 0;
    boolean isCorrect = true;
    for (int i = 0;
    i < powers.length; i ++) powers [i] = (int) Math.pow (2, i);

    for (int i = binary.length () - 1;
    i >= 0; i --) {
        if (binary.charAt (i) == '1') decimal = decimal + powers [powersIndex];
        else if (binary.charAt (i) != '0' & binary.charAt (i) != '1') {
            isCorrect = false;
            break;
        }

        powersIndex ++;
    }
    if (isCorrect) System.out.println (binary + " converted to base 10 is: " + decimal);
    else System.out.println ("Wrong input! It is binary... 0 and 1's like.....!");

}
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter a binary number: ");
    Scanner input = new Scanner (System.in);
    long num = input.nextLong ();
    long reverseNum = 0;
    int decimal = 0;
    int i = 0;
    while (num != 0) {
        reverseNum = reverseNum * 10;
        reverseNum = num % 10;
        decimal = (int) (reverseNum * Math.pow (2, i)) + decimal;
        num = num / 10;
        i ++;
    }
    System.out.println (decimal);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21809517_21809662_1_21
21809517_21810260_1_20
Title: How to find the biggest and smallest number of a file.txt? 
----------------------------------------

public void count () throws IOException {
    int countnum = 0;
    Set set = new TreeSet ();
    StreamTokenizer st = new StreamTokenizer (new FileReader ("file.txt"));
    while (st.nextToken () != StreamTokenizer.TT_EOF) {
        if (st.ttype == StreamTokenizer.TT_NUMBER) {
            set.add (st.nval);
            countnum ++;
        }
    }
    System.out.println ("total numbs are: " + countnum);
    System.out.println ("highest is : " + ((SortedSet) set).last () + " Smallest is : " + ((SortedSet) set).first ());
}
----------------------------------------

public void count () throws IOException {
    int countnum = 0;
    int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
    StreamTokenizer st = new StreamTokenizer (new FileReader ("file.txt"));
    while (st.nextToken () != StreamTokenizer.TT_EOF) {
        if (st.ttype == StreamTokenizer.TT_NUMBER) {
            countnum ++;
            int value = (int) st.nval;
            if (value < min) min = value;

            if (value > max) max = value;

        }
    }
    System.out.println ("total numbs are: " + countnum);
    System.out.println ("highest is : " + max + ", smallest is : " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21824003_21824127_5_54
21824003_21824847_1_21
Title: Creating an alternating tile floor with a nested loop 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter x:");
    int x;
    x = input.nextInt ();
    int count = 0;
    if (x < 10) {
        int c = 0;
        int r = 0;
        while (r < x) {
            if (r % 2 == 0) {
                count = 0;
            } else {
                count = 1;
            }
            while (c < x) {
                if (count % 2 == 0) {
                    System.out.print ("|R");
                } else {
                    System.out.print ("|B");
                }
                count ++;
                c ++;
            }
            System.out.println ("|");
            c = 0;
            r ++;
        }
    }
    input.close ();
}
----------------------------------------

public static void main (String [] args) {
    try (Scanner input = new Scanner (System.in)) {
        System.out.print ("Enter x: ");
        int x = input.nextInt ();
        if (x < 10) {
            int r = x;
            int c;
            while (r -- > 0) {
                c = x;
                while (c -- > 0) {
                    System.out.print ("|" + ((c + r & 1) == 0 ? "R" : "B"));
                }
                System.out.println ("|");
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_28_38
21829071_21829165_9_20
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

public void run () {
    while (run_th) {
        for (int i = 1;
        i <= 18; i ++) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_28_38
21829071_21829333_22_34
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
        if (i == 9) {
            isYCompleted = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_28_38
21829071_21829333_7_18
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 18; i ++) {
        if (! isYCompleted) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        } else {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_28_38
21829071_22862422_26_40
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
    System.out.println ("y is finished.  Interrupting th.");
    th.interrupt ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_28_38
21829071_22862422_6_23
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 18; i ++) {
        System.out.println ("run:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            System.out.println ("Thread th was interrupted.");
            System.out.println ("y must have finished");
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_3_56
21829071_21829207_3_50
Title: How to stop one thread after completion of other? 
----------------------------------------

public static void main (String [] args) {
    boolean run_th = true;
    Thread th = new Thread () {
        public void run () {
            while (run_th) {
                for (int i = 1;
                i <= 18; i ++) {
                    System.out.println ("run:" + i);
                    try {
                        Thread.sleep (1000);
                    } catch (InterruptedException e) {
                    }
                }
            }
        } public void kill () {
            run_th = false;
        }}

    ;
    Thread y = new Thread () {
        public void run () {
            for (int i = 1;
            i < 10; i ++) {
                System.out.println ("stop:" + i);
                try {
                    Thread.sleep (1000);
                } catch (InterruptedException e) {
                }
            }
        }}

    ;
    th.start ();
    y.start ();
    for (int i = 0;
    i < 5; i ++) {
        System.out.println ("main:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
    y.join ();
    th.kill ();
    System.out.println ("main completed");
}
----------------------------------------

public static void main (String [] args) {
    final Thread th = new Thread () {
        public void run () {
            for (int i = 1;
            i <= 10; i ++) {
                System.out.println ("run:" + i);
                try {
                    Thread.sleep (500);
                } catch (InterruptedException e) {
                }
            }
        }}

    ;
    Thread y = new Thread () {
        public void run () {
            for (int i = 1;
            i < 5; i ++) {
                System.out.println ("stop:" + i);
                try {
                    Thread.sleep (500);
                } catch (InterruptedException e) {
                }
            }
            th.stop ();
        }}

    ;
    th.start ();
    y.start ();
    for (int i = 0;
    i < 2; i ++) {
        System.out.println ("main:" + i);
        try {
            Thread.sleep (500);
        } catch (InterruptedException e) {
        }
    }
    System.out.println ("main completed");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_9_20
21829071_21829207_23_33
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    while (run_th) {
        for (int i = 1;
        i <= 18; i ++) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i < 5; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (500);
        } catch (InterruptedException e) {
        }
    }
    th.stop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_9_20
21829071_21829207_9_20
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    while (run_th) {
        for (int i = 1;
        i <= 18; i ++) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println ("run:" + i);
        try {
            Thread.sleep (500);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_9_20
21829071_21829333_22_34
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    while (run_th) {
        for (int i = 1;
        i <= 18; i ++) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
        if (i == 9) {
            isYCompleted = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_9_20
21829071_21829333_7_18
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    while (run_th) {
        for (int i = 1;
        i <= 18; i ++) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 18; i ++) {
        if (! isYCompleted) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        } else {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_9_20
21829071_22862422_26_40
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    while (run_th) {
        for (int i = 1;
        i <= 18; i ++) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
    }
    System.out.println ("y is finished.  Interrupting th.");
    th.interrupt ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829165_9_20
21829071_22862422_6_23
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    while (run_th) {
        for (int i = 1;
        i <= 18; i ++) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 18; i ++) {
        System.out.println ("run:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            System.out.println ("Thread th was interrupted.");
            System.out.println ("y must have finished");
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829207_23_33
21829071_21829333_22_34
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 5; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (500);
        } catch (InterruptedException e) {
        }
    }
    th.stop ();
}
----------------------------------------

public void run () {
    for (int i = 1;
    i < 10; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
        }
        if (i == 9) {
            isYCompleted = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21829071_21829207_23_33
21829071_21829333_7_18
Title: How to stop one thread after completion of other? 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 5; i ++) {
        System.out.println ("stop:" + i);
        try {
            Thread.sleep (500);
        } catch (InterruptedException e) {
        }
    }
    th.stop ();
}
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 18; i ++) {
        if (! isYCompleted) {
            System.out.println ("run:" + i);
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
            }
        } else {
            break;
        }
    }
}
----------------------------------------

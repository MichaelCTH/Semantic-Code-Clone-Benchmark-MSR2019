$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37240479_37242106_1_18
37240479_37242399_1_26
Title: Print HashMap Objects on a 2-dimensional grid 
----------------------------------------

String printGrid (HashSet < Coord > data, int width, int height) {
    StringBuilder grid = new StringBuilder (height * (width + 1));
    Coord coord;
    for (int row = 0;
    row < height; row ++) {
        for (int column = 0;
        column < width; column ++) {
            coord = getCoord (data, row, column);
            if (coord != null) {
                grid.append (coord.getNeighbours ());
            } else {
                grid.append ('#');
            }
        }
        grid.append ('\n');
    }
    return grid.toString ();
}
----------------------------------------

public static String printGrid (HashMap < Coord, Integer > map) {
    int width = 10;
    int height = 10;
    int lenght = height * width;
    StringBuilder grid = new StringBuilder (lenght);
    int i = 0;
    while (i < lenght) {
        if (i >= width && i % (width) == 0) {
            grid.append ('\n');
        }
        grid.append ('#');
        i ++;
    }
    for (Coord c : map.keySet ()) {
        int index = c.x * (width + 1) + c.y;
        grid.setCharAt (index, map.get (c).toString ().charAt (0));
    }
    return grid.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37249808_35_47
37249463_37250088_16_29
Title: Threading in Sequence 
----------------------------------------

public void run () {
    while (true) {
        try {
            int take = bq1.take ();
            System.out.println (take);
            bq2.offer (take + 1);
            if (take > 20) System.exit (0);

        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 2;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37249808_35_47
37249463_37250088_39_52
Title: Threading in Sequence 
----------------------------------------

public void run () {
    while (true) {
        try {
            int take = bq1.take ();
            System.out.println (take);
            bq2.offer (take + 1);
            if (take > 20) System.exit (0);

        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37249808_35_47
37249463_37251640_15_36
Title: Threading in Sequence 
----------------------------------------

public void run () {
    while (true) {
        try {
            int take = bq1.take ();
            System.out.println (take);
            bq2.offer (take + 1);
            if (take > 20) System.exit (0);

        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (myNumber) {
            while (myNumber.i != id) {
                try {
                    myNumber.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (id);
            if (myNumber.i == 1) {
                myNumber.i = 2;
            } else if (myNumber.i == 2) {
                myNumber.i = 3;
            } else {
                myNumber.i = 1;
            }

            myNumber.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37249808_35_47
37249463_37270072_56_72
Title: Threading in Sequence 
----------------------------------------

public void run () {
    while (true) {
        try {
            int take = bq1.take ();
            System.out.println (take);
            bq2.offer (take + 1);
            if (take > 20) System.exit (0);

        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("even ph");
    int cnt = 0;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            even.await ();
            System.out.println (cnt);
            cnt += 2;
            odd.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37249808_35_47
37249463_37270072_89_105
Title: Threading in Sequence 
----------------------------------------

public void run () {
    while (true) {
        try {
            int take = bq1.take ();
            System.out.println (take);
            bq2.offer (take + 1);
            if (take > 20) System.exit (0);

        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("odd ph");
    int cnt = 1;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            odd.await ();
            System.out.println (cnt);
            cnt += 2;
            even.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37249808_9_22
37249463_37270072_10_40
Title: Threading in Sequence 
----------------------------------------

public static void main (String [] args) {
    BlockingQueue < Integer > bq1 = new ArrayBlockingQueue < Integer > (100);
    BlockingQueue < Integer > bq2 = new ArrayBlockingQueue < Integer > (100);
    ExecutorService executorService = Executors.newFixedThreadPool (2);
    try {
        bq1.put (1);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    executorService.submit (new OddEven (bq1, bq2));
    executorService.submit (new OddEven (bq2, bq1));
    executorService.shutdown ();
}
----------------------------------------

public static void main (String [] args) {
    Lock lk = new ReentrantLock ();
    Phaser ph = new Phaser (3);
    Condition even = lk.newCondition ();
    Condition odd = lk.newCondition ();
    OnesTwosTrial2 onestwostrial2 = new OnesTwosTrial2 ();
    Thread ev = onestwostrial2.new Evens (lk, even, odd, ph);
    Thread od = onestwostrial2.new Odds (lk, even, odd, ph);
    ev.start ();
    od.start ();
    System.out.println ("in main before arrive");
    ph.arriveAndAwaitAdvance ();
    System.out.println ("in main after arrive");
    while (! Thread.State.WAITING.equals (ev.getState ())) {
        System.out.println ("waiting");
    }
    lk.lock ();
    even.signal ();
    lk.unlock ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37250088_16_29
37249463_37251640_15_36
Title: Threading in Sequence 
----------------------------------------

public void run () {
    for (int i = 2;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (myNumber) {
            while (myNumber.i != id) {
                try {
                    myNumber.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (id);
            if (myNumber.i == 1) {
                myNumber.i = 2;
            } else if (myNumber.i == 2) {
                myNumber.i = 3;
            } else {
                myNumber.i = 1;
            }

            myNumber.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37250088_16_29
37249463_37270072_56_72
Title: Threading in Sequence 
----------------------------------------

public void run () {
    for (int i = 2;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("even ph");
    int cnt = 0;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            even.await ();
            System.out.println (cnt);
            cnt += 2;
            odd.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37250088_16_29
37249463_37270072_89_105
Title: Threading in Sequence 
----------------------------------------

public void run () {
    for (int i = 2;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("odd ph");
    int cnt = 1;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            odd.await ();
            System.out.println (cnt);
            cnt += 2;
            even.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37250088_39_52
37249463_37251640_15_36
Title: Threading in Sequence 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (myNumber) {
            while (myNumber.i != id) {
                try {
                    myNumber.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (id);
            if (myNumber.i == 1) {
                myNumber.i = 2;
            } else if (myNumber.i == 2) {
                myNumber.i = 3;
            } else {
                myNumber.i = 1;
            }

            myNumber.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37250088_39_52
37249463_37270072_56_72
Title: Threading in Sequence 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("even ph");
    int cnt = 0;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            even.await ();
            System.out.println (cnt);
            cnt += 2;
            odd.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37250088_39_52
37249463_37270072_89_105
Title: Threading in Sequence 
----------------------------------------

public void run () {
    for (int i = 1;
    i < 20; i = i + 2) {
        synchronized (flag) {
            try {
                System.out.println (Thread.currentThread ().getName () + ":" + i);
                Thread.sleep (1000);
                flag.notify ();
                flag.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("odd ph");
    int cnt = 1;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            odd.await ();
            System.out.println (cnt);
            cnt += 2;
            even.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37251640_15_36
37249463_37270072_56_72
Title: Threading in Sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (myNumber) {
            while (myNumber.i != id) {
                try {
                    myNumber.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (id);
            if (myNumber.i == 1) {
                myNumber.i = 2;
            } else if (myNumber.i == 2) {
                myNumber.i = 3;
            } else {
                myNumber.i = 1;
            }

            myNumber.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("even ph");
    int cnt = 0;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            even.await ();
            System.out.println (cnt);
            cnt += 2;
            odd.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37249463_37251640_15_36
37249463_37270072_89_105
Title: Threading in Sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (myNumber) {
            while (myNumber.i != id) {
                try {
                    myNumber.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (id);
            if (myNumber.i == 1) {
                myNumber.i = 2;
            } else if (myNumber.i == 2) {
                myNumber.i = 3;
            } else {
                myNumber.i = 1;
            }

            myNumber.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("odd ph");
    int cnt = 1;
    while (cnt < 20) {
        try {
            lk.lock ();
            ph.arrive ();
            odd.await ();
            System.out.println (cnt);
            cnt += 2;
            even.signal ();
            lk.unlock ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37263771_37264286_1_10
37263771_37264543_1_10
Title: copy specific row from one 2D array to another without system.arraycopy 
----------------------------------------

public static int [] [] getRows (int i, int j, int [] [] array) {
    int [] [] ret = new int [j - i] [];
    for (int k = i;
    k < j; k ++) {
        ret [k - i] = new int [array [k].length];
        for (int m = 0;
        m < ret [k - i].length; m ++) {
            ret [k - i] [m] = array [k] [m];
        }
    }
    return ret;
}
----------------------------------------

public static int [] [] getRows (int i, int j, int [] [] array) {
    int [] [] another = new int [j - i + 1] [];
    while (i <= j) {
        for (int k = 0;
        k < another.length; k ++) {
            another [k] = array [i];
            i ++;
        }
    }
    return another;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37270723_37271049_5_20
37270723_37271423_1_21
Title: Length of string not considering zeros in the start 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String no = sc.nextLine ();
    if (no.matches ("^[0-9]+$")) {
        if (no.length () != 3) System.out.println ("Not a Valid Input");
        else if (no.length () == 3 && (Character.getNumericValue (no.charAt (0)) + Character.getNumericValue (no.charAt (2))) == Character.getNumericValue (no.charAt (1))) System.out.println ("Lucky Number");
        else System.out.println ("Not A Lucky Number");

    } else System.out.println ("Not a number");

}
----------------------------------------

public static void main (String [] args) throws IOException {
    try (Scanner scan = new Scanner (System.in)) {
        try {
            String number = scan.next (Pattern.compile ("\\d{3}"));
            int i = Integer.parseInt ("" + number.charAt (0));
            int j = Integer.parseInt ("" + number.charAt (1));
            int k = Integer.parseInt ("" + number.charAt (2));
            if ((i + k) == j) {
                System.out.println ("Lucky Number");
            } else {
                System.out.println ("Not A Lucky Number");
            }
        } catch (InputMismatchException e) {
            System.out.println ("Invalid Input");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37275571_37276418_3_17
37275571_37276462_8_30
Title: Integer Factorization - Code does not work 
----------------------------------------

public static void main (String [] args) throws IOException {
    ArrayList < Integer > faktoren = new ArrayList < Integer > ();
    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));
    int zahl = Integer.parseInt (in.readLine ());
    for (int i = 2;
    i <= zahl; i ++) {
        while (zahl % i == 0) {
            faktoren.add (i);
            zahl /= i;
        }
    }
    System.out.println (faktoren.toString ());
}
----------------------------------------

public static void main (String [] args) throws NumberFormatException, IOException {
    ArrayList < Integer > faktoren = new ArrayList < Integer > ();
    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));
    int zahl = Integer.parseInt (in.readLine ());
    while (zahl != 1) {
        for (int i = 2;
        i <= zahl; i ++) {
            if (zahl % i == 0) {
                zahl = zahl / i;
                faktoren.add (i);
                break;
            }
        }
    }
    boolean prim = faktoren.size () == 1;
    System.out.println (faktoren.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3728563_16811343_7_17
3728563_26173996_5_15
Title: Best way to convert an array of integers to a string in Java 
----------------------------------------

public static String convertIntToString (int intArray []) {
    List < Integer > listInteger = new ArrayList < Integer > ();
    for (int i = 0;
    i < intArray.length; i ++) {
        listInteger.add (intArray [i]);
    }
    Object o = listInteger;
    return String.valueOf (o).replace ("[", "").trim ().replaceAll (", ", "").trim ().replaceAll ("\\]", "").trim ();
}
----------------------------------------

public static String convertIntToString (int intArray []) {
    List < Integer > listInteger = new ArrayList < Integer > ();
    for (int i = 0;
    i < intArray.length; i ++) {
        listInteger.add (intArray [i]);
    }
    Object o = listInteger;
    return String.valueOf (o).replace ("[", "").trim ().replaceAll (", ", "").trim ().replaceAll ("\\]", "").trim ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37296286_37296596_12_56
37296286_37296596_3_61
Title: why else if not working here? 
----------------------------------------

public void run () {
    Intent intent = getIntent ();
    String restaurant_name = intent.getStringExtra ("restaurant_name");
    if (restaurant_name != null) {
        if (restaurant_name.equals ("Fun N Food")) {
            mMap.animateCamera (CameraUpdateFactory.newLatLngZoom (new LatLng (26.89209, 75.82759), 15.0f));
            mMap.addMarker (new MarkerOptions ().position (new LatLng (26.89209, 75.82759)).title ("FUN N FOOD")).showInfoWindow ();
        } else if (restaurant_name.equals ("Hoagies")) {
            mMap.animateCamera (CameraUpdateFactory.newLatLngZoom (new LatLng (26.89515, 75.83052), 15.0f));
            mMap.addMarker (new MarkerOptions ().position (new LatLng (26.89515, 75.83052)).title ("HOAGIES")).showInfoWindow ();
        } else if (restaurant_name.equals ("Ping Pang")) {
            mMap.animateCamera (CameraUpdateFactory.newLatLngZoom (new LatLng (26.89568, 75.83060), 15.0f));
            mMap.addMarker (new MarkerOptions ().position (new LatLng (26.89568, 75.83060)).title ("PING PANG")).showInfoWindow ();
        }

    } else {
        MainActivity.this.runOnUiThread (new Runnable () {
            @Override
            public void run () {
            }}

        );
    }
}
----------------------------------------

public void run () {
    try {
        sleep (1000);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } finally {
        MainActivity.this.runOnUiThread (new Runnable () {
            @Override
            public void run () {
                Intent intent = getIntent ();
                String restaurant_name = intent.getStringExtra ("restaurant_name");
                if (restaurant_name != null) {
                    if (restaurant_name.equals ("Fun N Food")) {
                        mMap.animateCamera (CameraUpdateFactory.newLatLngZoom (new LatLng (26.89209, 75.82759), 15.0f));
                        mMap.addMarker (new MarkerOptions ().position (new LatLng (26.89209, 75.82759)).title ("FUN N FOOD")).showInfoWindow ();
                    } else if (restaurant_name.equals ("Hoagies")) {
                        mMap.animateCamera (CameraUpdateFactory.newLatLngZoom (new LatLng (26.89515, 75.83052), 15.0f));
                        mMap.addMarker (new MarkerOptions ().position (new LatLng (26.89515, 75.83052)).title ("HOAGIES")).showInfoWindow ();
                    } else if (restaurant_name.equals ("Ping Pang")) {
                        mMap.animateCamera (CameraUpdateFactory.newLatLngZoom (new LatLng (26.89568, 75.83060), 15.0f));
                        mMap.addMarker (new MarkerOptions ().position (new LatLng (26.89568, 75.83060)).title ("PING PANG")).showInfoWindow ();
                    }

                } else {
                    MainActivity.this.runOnUiThread (new Runnable () {
                        @Override
                        public void run () {
                        }}

                    );
                }
            }}

        );
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37315235_37315473_1_11
37315235_37315826_3_20
Title: Very basic java program doesnt run 
----------------------------------------

public static void main (String [] args) throws IOException {
    int lines = 3;
    for (int i = 0;
    i < lines; i ++) {
        for (int j = 0;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int Lines = 1;
    int stars = 0;
    int X = 0;
    while (Lines <= Integer.parseInt (args [0])) {
        Lines = + 1;
        stars = + 1;
        for (X = 0; X >= stars; X = + 1) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37325349_37325463_28_51
37325349_42174292_40_63
Title: Custom info window with address 
----------------------------------------

public View getInfoContents (Marker arg0) {
    View v = getLayoutInflater ().inflate (R.layout.windowlayout, null);
    LatLng latLng = arg0.getPosition ();
    TextView tvLat = (TextView) v.findViewById (R.id.tv_lat);
    TextView tvLng = (TextView) v.findViewById (R.id.tv_lng);
    tvLat.setText ("Latitude:" + latLng.latitude);
    tvLng.setText ("Longitude:" + latLng.longitude);
    return v;
}
----------------------------------------

public View getInfoContents (Marker arg0) {
    View v = getLayoutInflater ().inflate (R.layout.info_window_layout, null);
    LatLng latLng = arg0.getPosition ();
    TextView tvLat = (TextView) v.findViewById (R.id.tv_lat);
    TextView tvLng = (TextView) v.findViewById (R.id.tv_lng);
    tvLat.setText ("Latitude:" + latLng.latitude);
    tvLng.setText ("Longitude:" + latLng.longitude);
    return v;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37334219_37334890_1_21
37334219_37335851_1_20
Title: Remember to call close() on all Realm instances even though I call close() 
----------------------------------------

@Override
public void call (Subscriber < ? super JsonElement > subscriber) {
    Realm realm = Realm.getInstance (mRealmConfig);
    SomeJson someJson = realm.where (SomeJson.class).equalTo ("type", type).equalTo ("id", id).findFirst ();
    if (someJson == null || ! someJson.isDataValid ()) {
        Logger.d (TAG, "Did not find value for id: " + id + " for type: " + type);
        subscriber.onNext (null);
        subscriber.onCompleted ();
        realm.close ();
        return;
    }
    JsonElement val = (new JsonParser ()).parse (someJson.jsonString);
    subscriber.onNext (val);
    subscriber.onCompleted ();
    realm.close ();
}
----------------------------------------

@Override
public void call (Subscriber < ? super JsonElement > subscriber) {
    try (Realm realm = Realm.getInstance (mRealmConfig)) {
        SomeJson someJson = realm.where (SomeJson.class).equalTo ("type", type).equalTo ("id", id).findFirst ();
        if (someJson == null || ! someJson.isDataValid ()) {
            Logger.d (TAG, "Did not find value for id: " + id + " for type: " + type);
            subscriber.onNext (null);
            subscriber.onCompleted ();
            return;
        }
        JsonElement val = (new JsonParser ()).parse (someJson.jsonString);
        subscriber.onNext (val);
        subscriber.onCompleted ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37338321_37338830_1_12
37338321_37338913_50_69
Title: Java: Why doesn't my KeyEvent work? 
----------------------------------------

public void keyPressed (KeyEvent e) {
    int keyCode = e.getKeyCode ();
    if (keyCode == KeyEvent.VK_UP) up ();

    if (keyCode == KeyEvent.VK_DOWN) down ();

    if (keyCode == KeyEvent.VK_LEFT) left ();

    if (keyCode == KeyEvent.VK_RIGHT) right ();

}
----------------------------------------

public void keyPressed (KeyEvent e) {
    int keyCode = e.getKeyCode ();
    if (keyCode == KeyEvent.VK_UP) {
        up ();
    }
    if (keyCode == KeyEvent.VK_DOWN) {
        down ();
    }
    if (keyCode == KeyEvent.VK_LEFT) {
        left ();
    }
    if (keyCode == KeyEvent.VK_RIGHT) {
        right ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37339926_37340090_1_21
37339926_37383988_88_129
Title: How to do iterative sorting in string arraylist? 
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > list = new ArrayList < > ();
    list.add ("STM-1000-H");
    list.add ("STM-2000-E");
    list.add ("SAFPX-1000-H-L2");
    list.add ("SAFPX-1000-H-L1");
    list.add ("STM-1000-H-L1");
    list.add ("SFP-1000-B");
    list.add ("SFP-1000-A");
    HashMap hm = new HashMap ();
    hm.put ("STM", 1);
    hm.put ("SFP", 2);
    hm.put ("SAFPX", 3);
    list = sort (list, hm);
    for (String s : list) {
        System.out.println (s);
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] firmare = {"STM-1000-H", "STM-2000-E", "STM-4000-H", "STM-200-H", "SFP-1000-A", "SFP-300-H", "SAFPX-1000-H", "SAFPX-2000-A", "STM-1000-H-L1", "STM-1000-H-L1+VA+GH", "STM-1000-H-L2"};
    Map < String, List < DevRev > > revs = new TreeMap < > ();
    for (String f : firmare) {
        DevRev dr = new DevRev (f);
        List < DevRev > sdevs = revs.get (dr.getSeries ());
        if (sdevs == null) {
            sdevs = new ArrayList < > ();
            revs.put (dr.getSeries (), sdevs);
        }
        sdevs.add (dr);
    }
    for (Map.Entry < String, List < DevRev > > entry : revs.entrySet ()) {
        String series = entry.getKey ();
        List < DevRev > devices = entry.getValue ();
        System.out.println (series);
        devices.sort (new Comparator < DevRev > () {
            @Override
            public int compare (DevRev o1, DevRev o2) {
                return new Integer (o1.getModel ()).compareTo (o2.getModel ());
            }}

        );
        for (DevRev dr : devices) {
            System.out.println ("-> " + dr);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3734511_20947658_1_23
3734511_21900048_9_18
Title: Check if string has all the letters of the alphabet 
----------------------------------------

public static void main (String [] args) {
    String A = "asdfsdafasdf";
    String B = "abcdefghijklmnopqrstuvwxyz";
    String C = "ASDFGFHWER";
    String result = "NO";
    String letters [] = {A, B, C};
    int length = letters.length;
    for (int j = 0;
    j < length; j ++) {
        String letter = letters [j].toLowerCase ();
        int letterLength = letter.length ();
        for (char i = 'a';
        i < 'z' + 1; i ++) {
            if (letter.contains ("" + i)) {
                result = "YES";
            } else {
                result = "NO";
            }
        }
        System.out.println (result);
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println (isPangram ("the quick brown fox jumps over the lazy dog"));
    System.out.println (isPangram ("the quick brown fox jumped over the lazy dog"));
    System.out.println (isPangram ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    System.out.println (isPangram ("ABCDEFGHIJKLMNOPQSTUVWXYZ"));
    System.out.println (isPangram ("ABCDEFGHIJKL.NOPQRSTUVWXYZ"));
    System.out.println (isPangram ("ABC.D.E.FGHI*J/KL-M+NO*PQ R\nSTUVWXYZ"));
    System.out.println (isPangram (""));
    System.out.println (isPangram ("Pack my box with five dozen liquor jugs."));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3734511_20947658_1_23
3734511_3734594_1_13
Title: Check if string has all the letters of the alphabet 
----------------------------------------

public static void main (String [] args) {
    String A = "asdfsdafasdf";
    String B = "abcdefghijklmnopqrstuvwxyz";
    String C = "ASDFGFHWER";
    String result = "NO";
    String letters [] = {A, B, C};
    int length = letters.length;
    for (int j = 0;
    j < length; j ++) {
        String letter = letters [j].toLowerCase ();
        int letterLength = letter.length ();
        for (char i = 'a';
        i < 'z' + 1; i ++) {
            if (letter.contains ("" + i)) {
                result = "YES";
            } else {
                result = "NO";
            }
        }
        System.out.println (result);
    }
}
----------------------------------------

public static void main (String...a) {
    String s = "Pack my box with five dozen liquor jugs.";
    int i = 0;
    for (char c : s.toCharArray ()) {
        int x = Character.toUpperCase (c);
        if (x >= 'A' && x <= 'Z') {
            i |= 1 << (x - 'A');
        }
    }
    if (i == (i | ((1 << (1 + 'Z' - 'A')) - 1))) {
        System.out.println ("ok");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3734511_20947658_1_23
3734511_37895625_4_17
Title: Check if string has all the letters of the alphabet 
----------------------------------------

public static void main (String [] args) {
    String A = "asdfsdafasdf";
    String B = "abcdefghijklmnopqrstuvwxyz";
    String C = "ASDFGFHWER";
    String result = "NO";
    String letters [] = {A, B, C};
    int length = letters.length;
    for (int j = 0;
    j < length; j ++) {
        String letter = letters [j].toLowerCase ();
        int letterLength = letter.length ();
        for (char i = 'a';
        i < 'z' + 1; i ++) {
            if (letter.contains ("" + i)) {
                result = "YES";
            } else {
                result = "NO";
            }
        }
        System.out.println (result);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String Str = sc.nextLine ();
    Set < Character > set = new HashSet < Character > ();
    for (char c : Str.toUpperCase ().toCharArray ()) {
        if (Character.isLetter (c)) set.add (c);

    }
    if (set.size () == 26) System.out.println ("pnagram");
    else System.out.println ("not pnagram");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3734511_21900048_9_18
3734511_3734594_1_13
Title: Check if string has all the letters of the alphabet 
----------------------------------------

public static void main (String [] args) {
    System.out.println (isPangram ("the quick brown fox jumps over the lazy dog"));
    System.out.println (isPangram ("the quick brown fox jumped over the lazy dog"));
    System.out.println (isPangram ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    System.out.println (isPangram ("ABCDEFGHIJKLMNOPQSTUVWXYZ"));
    System.out.println (isPangram ("ABCDEFGHIJKL.NOPQRSTUVWXYZ"));
    System.out.println (isPangram ("ABC.D.E.FGHI*J/KL-M+NO*PQ R\nSTUVWXYZ"));
    System.out.println (isPangram (""));
    System.out.println (isPangram ("Pack my box with five dozen liquor jugs."));
}
----------------------------------------

public static void main (String...a) {
    String s = "Pack my box with five dozen liquor jugs.";
    int i = 0;
    for (char c : s.toCharArray ()) {
        int x = Character.toUpperCase (c);
        if (x >= 'A' && x <= 'Z') {
            i |= 1 << (x - 'A');
        }
    }
    if (i == (i | ((1 << (1 + 'Z' - 'A')) - 1))) {
        System.out.println ("ok");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3734511_21900048_9_18
3734511_37895625_4_17
Title: Check if string has all the letters of the alphabet 
----------------------------------------

public static void main (String [] args) {
    System.out.println (isPangram ("the quick brown fox jumps over the lazy dog"));
    System.out.println (isPangram ("the quick brown fox jumped over the lazy dog"));
    System.out.println (isPangram ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    System.out.println (isPangram ("ABCDEFGHIJKLMNOPQSTUVWXYZ"));
    System.out.println (isPangram ("ABCDEFGHIJKL.NOPQRSTUVWXYZ"));
    System.out.println (isPangram ("ABC.D.E.FGHI*J/KL-M+NO*PQ R\nSTUVWXYZ"));
    System.out.println (isPangram (""));
    System.out.println (isPangram ("Pack my box with five dozen liquor jugs."));
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String Str = sc.nextLine ();
    Set < Character > set = new HashSet < Character > ();
    for (char c : Str.toUpperCase ().toCharArray ()) {
        if (Character.isLetter (c)) set.add (c);

    }
    if (set.size () == 26) System.out.println ("pnagram");
    else System.out.println ("not pnagram");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3734511_3734594_1_13
3734511_37895625_4_17
Title: Check if string has all the letters of the alphabet 
----------------------------------------

public static void main (String...a) {
    String s = "Pack my box with five dozen liquor jugs.";
    int i = 0;
    for (char c : s.toCharArray ()) {
        int x = Character.toUpperCase (c);
        if (x >= 'A' && x <= 'Z') {
            i |= 1 << (x - 'A');
        }
    }
    if (i == (i | ((1 << (1 + 'Z' - 'A')) - 1))) {
        System.out.println ("ok");
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String Str = sc.nextLine ();
    Set < Character > set = new HashSet < Character > ();
    for (char c : Str.toUpperCase ().toCharArray ()) {
        if (Character.isLetter (c)) set.add (c);

    }
    if (set.size () == 26) System.out.println ("pnagram");
    else System.out.println ("not pnagram");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37354739_37355015_5_18
37354739_37403259_1_28
Title: Find a sequence of character in a String 
----------------------------------------

public static void main (String [] args) {
    String text = "aaddbsanklfafjdkgffgkakfjkldsjlkfjdffgkaskdlfkdkffgasjdaeflkaffgaff";
    String wordToFind = "ffg";
    Pattern word = Pattern.compile (wordToFind);
    Matcher match = word.matcher (text);
    while (match.find ()) {
        System.out.print (text.charAt (match.start () - 1));
        System.out.print (" " + wordToFind + " ");
        System.out.println (text.charAt (match.end ()));
    }
}
----------------------------------------

public static void main (String [] args) {
    String text = "aaddbsanklfafjdkgffgkakfjkldsjlkfjdffgkaskdlfkdkffgasjdaeflkaffgaff";
    String wordToFind = "ffg";
    Pattern word = Pattern.compile (wordToFind);
    Matcher match = word.matcher (text);
    while (match.find ()) {
        int startIndx = match.start () - 1;
        System.out.print (text.charAt (startIndx));
        System.out.print (" ");
        System.out.print (wordToFind);
        System.out.print (" ");
        int endIndx = match.end ();
        System.out.println (text.charAt (endIndx));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37358239_37359894_15_43
37358239_37360708_17_49
Title: IndexOutOfBoundsException implementing Merge sort on a String ArrayList in Java 
----------------------------------------

public List < String > merge (List < String > left, List < String > right) {
    ArrayList < String > temp = new ArrayList < > (left.size () + right.size ());
    int indexLeft = 0;
    int indexRight = 0;
    while (indexLeft < left.size () && indexRight < right.size ()) {
        if ((left.get (indexLeft).compareTo (right.get (indexRight))) < 0) {
            temp.add (left.get (indexLeft ++));
        } else {
            temp.add (right.get (indexRight ++));
        }
    }
    while (indexLeft < left.size ()) {
        temp.add (left.get (indexLeft ++));
    }
    while (indexRight < right.size ()) {
        temp.add (right.get (indexRight ++));
    }
    return temp;
}
----------------------------------------

public void merge (int firstLeft, int lastLeft, int lastRight) {
    ArrayList < String > temp = new ArrayList (input);
    int firstRight = lastLeft + 1;
    int indexLeft = firstLeft;
    int indexRight = firstRight;
    int indexTemp = indexLeft;
    while (indexLeft <= lastLeft && indexRight <= lastRight) {
        if ((input.get (indexLeft).compareTo (input.get (indexRight))) < 0) {
            temp.set (indexTemp ++, (input.get (indexLeft ++)));
        } else {
            temp.set (indexTemp ++, (input.get (indexRight ++)));
        }
    }
    while (indexLeft <= lastLeft) {
        temp.set (indexTemp ++, (input.get (indexLeft ++)));
    }
    while (indexRight <= lastRight) {
        temp.set (indexTemp ++, (input.get (indexRight ++)));
    }
    input = temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37358239_37359894_1_13
37358239_37360708_6_16
Title: IndexOutOfBoundsException implementing Merge sort on a String ArrayList in Java 
----------------------------------------

public List < String > mergeSort (List < String > a) {
    if (a.size () <= 1) {
        return a;
    }
    int mid = a.size () / 2;
    List < String > left = a.subList (0, mid);
    List < String > right = a.subList (mid, a.size ());
    return merge (mergeSort (left), mergeSort (right));
}
----------------------------------------

public void mergeSort (int first, int last) {
    if (first == last) {
        return;
    }
    int mid = (first + last) / 2;
    mergeSort (first, mid);
    mergeSort (mid + 1, last);
    merge (first, mid, last);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37361406_37361433_1_12
37361406_37361438_1_10
Title: Try catch going wrong 
----------------------------------------

public Track trackLoader (String fileName) {
    Track tLoad = null;
    try {
        tLoad = TrackReader.read (fileName);
    } catch (IOException | FormatException ex) {
        Logger.getLogger (RailwayModel.class.getName ()).log (Level.SEVERE, null, ex);
    }
    return tLoad;
}
----------------------------------------

public Track trackLoader (String fileName) {
    Track tLoad = null;
    try {
        tLoad = TrackReader.read (fileName);
    } catch (IOException | FormatException ex) {
        Logger.getLogger (RailwayModel.class.getName ()).log (Level.SEVERE, null, ex);
    }
    return tLoad;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_40071481_6_29
37363674_41076984_1_20
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int low = - 9, high = 5;
    int lh = low * high;
    int sum = 0, i, j;
    int max = 0;
    int a [] [] = new int [6] [6];
    for (i = 0; i < 6; i ++) {
        for (j = 0; j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (i = 0; i < 4; i ++) {
        for (j = 0; j < 4; j ++) {
            sum = (a [i] [j] + a [i] [j + 1] + a [i] [j + 2]);
            sum = sum + a [i + 1] [j + 1];
            sum = sum + (a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2]);
            if (sum > lh) lh = sum;

        }
    }
    System.out.print (lh);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    int max = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            int sum = a [i] [j] + a [i] [j + 1] + a [i] [j + 2] + a [i + 1] [j + 1] + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > max || (i == 0 && j == 0)) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_40071481_6_29
37363674_41453359_1_30
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int low = - 9, high = 5;
    int lh = low * high;
    int sum = 0, i, j;
    int max = 0;
    int a [] [] = new int [6] [6];
    for (i = 0; i < 6; i ++) {
        for (j = 0; j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (i = 0; i < 4; i ++) {
        for (j = 0; j < 4; j ++) {
            sum = (a [i] [j] + a [i] [j + 1] + a [i] [j + 2]);
            sum = sum + a [i + 1] [j + 1];
            sum = sum + (a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2]);
            if (sum > lh) lh = sum;

        }
    }
    System.out.print (lh);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    int max = Integer.MIN_VALUE;
    int tempMax = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            if (i + 2 < 6 && j + 2 < 6) {
                tempMax += arr [i] [j] + arr [i] [j + 1] + arr [i] [j + 2];
                tempMax += arr [i + 1] [j + 1];
                tempMax += arr [i + 2] [j] + arr [i + 2] [j + 1] + arr [i + 2] [j + 2];
                if (max < tempMax) {
                    max = tempMax;
                }
                tempMax = 0;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_40071481_6_29
37363674_42531698_2_33
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int low = - 9, high = 5;
    int lh = low * high;
    int sum = 0, i, j;
    int max = 0;
    int a [] [] = new int [6] [6];
    for (i = 0; i < 6; i ++) {
        for (j = 0; j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (i = 0; i < 4; i ++) {
        for (j = 0; j < 4; j ++) {
            sum = (a [i] [j] + a [i] [j + 1] + a [i] [j + 2]);
            sum = sum + a [i + 1] [j + 1];
            sum = sum + (a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2]);
            if (sum > lh) lh = sum;

        }
    }
    System.out.print (lh);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int arr_i = 0;
    arr_i < 6; arr_i ++) {
        for (int arr_j = 0;
        arr_j < 6; arr_j ++) {
            arr [arr_i] [arr_j] = in.nextInt ();
        }
    }
    int sum = 0;
    int sum2 = 0;
    int sum3 = 0;
    int x = 0;
    int max = Integer.MIN_VALUE;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            for (int k = 0;
            k < 3; k ++) {
                sum += arr [i] [j + k];
                sum2 += arr [i + 2] [j + k];
                sum3 = arr [i + 1] [j + 1];
                x = sum + sum2 + sum3;
            }
            if (max < x) {
                max = x;
            }
            sum = 0;
            sum2 = 0;
            sum3 = 0;
            x = 0;
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_40071481_6_29
37363674_43465271_9_30
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int low = - 9, high = 5;
    int lh = low * high;
    int sum = 0, i, j;
    int max = 0;
    int a [] [] = new int [6] [6];
    for (i = 0; i < 6; i ++) {
        for (j = 0; j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (i = 0; i < 4; i ++) {
        for (j = 0; j < 4; j ++) {
            sum = (a [i] [j] + a [i] [j + 1] + a [i] [j + 2]);
            sum = sum + a [i + 1] [j + 1];
            sum = sum + (a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2]);
            if (sum > lh) lh = sum;

        }
    }
    System.out.print (lh);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    int hg = Integer.MIN_VALUE, sum;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            sum = 0;
            sum = sum + a [i] [j] + a [i] [j + 1] + a [i] [j + 2];
            sum = sum + a [i + 1] [j + 1];
            sum = sum + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > hg) hg = sum;

        }
    }
    System.out.println (hg);
    in.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_40071481_6_29
37363674_47130984_3_34
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int low = - 9, high = 5;
    int lh = low * high;
    int sum = 0, i, j;
    int max = 0;
    int a [] [] = new int [6] [6];
    for (i = 0; i < 6; i ++) {
        for (j = 0; j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (i = 0; i < 4; i ++) {
        for (j = 0; j < 4; j ++) {
            sum = (a [i] [j] + a [i] [j + 1] + a [i] [j + 2]);
            sum = sum + a [i + 1] [j + 1];
            sum = sum + (a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2]);
            if (sum > lh) lh = sum;

        }
    }
    System.out.print (lh);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    int sum = 0;
    int output = 0;
    Set < Integer > set = new TreeSet < Integer > ();
    for (int k = 0;
    k < 4; k ++) {
        for (int y = 0;
        y < 4; y ++) {
            sum = arr [k] [y] + arr [k] [y + 1] + arr [k] [y + 2] + arr [k + 1] [y + 1] + arr [k + 2] [y] + arr [k + 2] [y + 1] + arr [k + 2] [y + 2];
            set.add (sum);
        }
    }
    int p = 0;
    for (int u : set) {
        p ++;
        if (p == set.size ()) output = u;

    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_40071481_6_29
37363674_48448790_6_27
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int low = - 9, high = 5;
    int lh = low * high;
    int sum = 0, i, j;
    int max = 0;
    int a [] [] = new int [6] [6];
    for (i = 0; i < 6; i ++) {
        for (j = 0; j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (i = 0; i < 4; i ++) {
        for (j = 0; j < 4; j ++) {
            sum = (a [i] [j] + a [i] [j + 1] + a [i] [j + 2]);
            sum = sum + a [i + 1] [j + 1];
            sum = sum + (a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2]);
            if (sum > lh) lh = sum;

        }
    }
    System.out.print (lh);
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    int rowSize = 6;
    int colSize = 6;
    int [] [] array = new int [rowSize] [colSize];
    for (int row = 0;
    row < rowSize; row ++) {
        for (int col = 0;
        col < colSize; col ++) {
            array [row] [col] = read.nextInt ();
        }
    }
    read.close ();
    int max = Integer.MIN_VALUE;
    for (int row = 0;
    row < 4; row ++) {
        for (int col = 0;
        col < 4; col ++) {
            int sum = calculateHourglassSum (array, row, col);
            if (sum > max) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41076984_1_20
37363674_41453359_1_30
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    int max = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            int sum = a [i] [j] + a [i] [j + 1] + a [i] [j + 2] + a [i + 1] [j + 1] + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > max || (i == 0 && j == 0)) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    int max = Integer.MIN_VALUE;
    int tempMax = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            if (i + 2 < 6 && j + 2 < 6) {
                tempMax += arr [i] [j] + arr [i] [j + 1] + arr [i] [j + 2];
                tempMax += arr [i + 1] [j + 1];
                tempMax += arr [i + 2] [j] + arr [i + 2] [j + 1] + arr [i + 2] [j + 2];
                if (max < tempMax) {
                    max = tempMax;
                }
                tempMax = 0;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41076984_1_20
37363674_42531698_2_33
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    int max = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            int sum = a [i] [j] + a [i] [j + 1] + a [i] [j + 2] + a [i + 1] [j + 1] + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > max || (i == 0 && j == 0)) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int arr_i = 0;
    arr_i < 6; arr_i ++) {
        for (int arr_j = 0;
        arr_j < 6; arr_j ++) {
            arr [arr_i] [arr_j] = in.nextInt ();
        }
    }
    int sum = 0;
    int sum2 = 0;
    int sum3 = 0;
    int x = 0;
    int max = Integer.MIN_VALUE;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            for (int k = 0;
            k < 3; k ++) {
                sum += arr [i] [j + k];
                sum2 += arr [i + 2] [j + k];
                sum3 = arr [i + 1] [j + 1];
                x = sum + sum2 + sum3;
            }
            if (max < x) {
                max = x;
            }
            sum = 0;
            sum2 = 0;
            sum3 = 0;
            x = 0;
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41076984_1_20
37363674_43465271_9_30
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    int max = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            int sum = a [i] [j] + a [i] [j + 1] + a [i] [j + 2] + a [i + 1] [j + 1] + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > max || (i == 0 && j == 0)) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    int hg = Integer.MIN_VALUE, sum;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            sum = 0;
            sum = sum + a [i] [j] + a [i] [j + 1] + a [i] [j + 2];
            sum = sum + a [i + 1] [j + 1];
            sum = sum + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > hg) hg = sum;

        }
    }
    System.out.println (hg);
    in.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41076984_1_20
37363674_47130984_3_34
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    int max = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            int sum = a [i] [j] + a [i] [j + 1] + a [i] [j + 2] + a [i + 1] [j + 1] + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > max || (i == 0 && j == 0)) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    int sum = 0;
    int output = 0;
    Set < Integer > set = new TreeSet < Integer > ();
    for (int k = 0;
    k < 4; k ++) {
        for (int y = 0;
        y < 4; y ++) {
            sum = arr [k] [y] + arr [k] [y + 1] + arr [k] [y + 2] + arr [k + 1] [y + 1] + arr [k + 2] [y] + arr [k + 2] [y + 1] + arr [k + 2] [y + 2];
            set.add (sum);
        }
    }
    int p = 0;
    for (int u : set) {
        p ++;
        if (p == set.size ()) output = u;

    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41076984_1_20
37363674_48448790_6_27
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    int max = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            int sum = a [i] [j] + a [i] [j + 1] + a [i] [j + 2] + a [i + 1] [j + 1] + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > max || (i == 0 && j == 0)) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    int rowSize = 6;
    int colSize = 6;
    int [] [] array = new int [rowSize] [colSize];
    for (int row = 0;
    row < rowSize; row ++) {
        for (int col = 0;
        col < colSize; col ++) {
            array [row] [col] = read.nextInt ();
        }
    }
    read.close ();
    int max = Integer.MIN_VALUE;
    for (int row = 0;
    row < 4; row ++) {
        for (int col = 0;
        col < 4; col ++) {
            int sum = calculateHourglassSum (array, row, col);
            if (sum > max) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41453359_1_30
37363674_42531698_2_33
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    int max = Integer.MIN_VALUE;
    int tempMax = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            if (i + 2 < 6 && j + 2 < 6) {
                tempMax += arr [i] [j] + arr [i] [j + 1] + arr [i] [j + 2];
                tempMax += arr [i + 1] [j + 1];
                tempMax += arr [i + 2] [j] + arr [i + 2] [j + 1] + arr [i + 2] [j + 2];
                if (max < tempMax) {
                    max = tempMax;
                }
                tempMax = 0;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int arr_i = 0;
    arr_i < 6; arr_i ++) {
        for (int arr_j = 0;
        arr_j < 6; arr_j ++) {
            arr [arr_i] [arr_j] = in.nextInt ();
        }
    }
    int sum = 0;
    int sum2 = 0;
    int sum3 = 0;
    int x = 0;
    int max = Integer.MIN_VALUE;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            for (int k = 0;
            k < 3; k ++) {
                sum += arr [i] [j + k];
                sum2 += arr [i + 2] [j + k];
                sum3 = arr [i + 1] [j + 1];
                x = sum + sum2 + sum3;
            }
            if (max < x) {
                max = x;
            }
            sum = 0;
            sum2 = 0;
            sum3 = 0;
            x = 0;
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41453359_1_30
37363674_43465271_9_30
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    int max = Integer.MIN_VALUE;
    int tempMax = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            if (i + 2 < 6 && j + 2 < 6) {
                tempMax += arr [i] [j] + arr [i] [j + 1] + arr [i] [j + 2];
                tempMax += arr [i + 1] [j + 1];
                tempMax += arr [i + 2] [j] + arr [i + 2] [j + 1] + arr [i + 2] [j + 2];
                if (max < tempMax) {
                    max = tempMax;
                }
                tempMax = 0;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    int hg = Integer.MIN_VALUE, sum;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            sum = 0;
            sum = sum + a [i] [j] + a [i] [j + 1] + a [i] [j + 2];
            sum = sum + a [i + 1] [j + 1];
            sum = sum + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > hg) hg = sum;

        }
    }
    System.out.println (hg);
    in.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41453359_1_30
37363674_47130984_3_34
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    int max = Integer.MIN_VALUE;
    int tempMax = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            if (i + 2 < 6 && j + 2 < 6) {
                tempMax += arr [i] [j] + arr [i] [j + 1] + arr [i] [j + 2];
                tempMax += arr [i + 1] [j + 1];
                tempMax += arr [i + 2] [j] + arr [i + 2] [j + 1] + arr [i + 2] [j + 2];
                if (max < tempMax) {
                    max = tempMax;
                }
                tempMax = 0;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    int sum = 0;
    int output = 0;
    Set < Integer > set = new TreeSet < Integer > ();
    for (int k = 0;
    k < 4; k ++) {
        for (int y = 0;
        y < 4; y ++) {
            sum = arr [k] [y] + arr [k] [y + 1] + arr [k] [y + 2] + arr [k + 1] [y + 1] + arr [k + 2] [y] + arr [k + 2] [y + 1] + arr [k + 2] [y + 2];
            set.add (sum);
        }
    }
    int p = 0;
    for (int u : set) {
        p ++;
        if (p == set.size ()) output = u;

    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_41453359_1_30
37363674_48448790_6_27
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    int max = Integer.MIN_VALUE;
    int tempMax = 0;
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            if (i + 2 < 6 && j + 2 < 6) {
                tempMax += arr [i] [j] + arr [i] [j + 1] + arr [i] [j + 2];
                tempMax += arr [i + 1] [j + 1];
                tempMax += arr [i + 2] [j] + arr [i + 2] [j + 1] + arr [i + 2] [j + 2];
                if (max < tempMax) {
                    max = tempMax;
                }
                tempMax = 0;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    int rowSize = 6;
    int colSize = 6;
    int [] [] array = new int [rowSize] [colSize];
    for (int row = 0;
    row < rowSize; row ++) {
        for (int col = 0;
        col < colSize; col ++) {
            array [row] [col] = read.nextInt ();
        }
    }
    read.close ();
    int max = Integer.MIN_VALUE;
    for (int row = 0;
    row < 4; row ++) {
        for (int col = 0;
        col < 4; col ++) {
            int sum = calculateHourglassSum (array, row, col);
            if (sum > max) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_42531698_2_33
37363674_43465271_9_30
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int arr_i = 0;
    arr_i < 6; arr_i ++) {
        for (int arr_j = 0;
        arr_j < 6; arr_j ++) {
            arr [arr_i] [arr_j] = in.nextInt ();
        }
    }
    int sum = 0;
    int sum2 = 0;
    int sum3 = 0;
    int x = 0;
    int max = Integer.MIN_VALUE;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            for (int k = 0;
            k < 3; k ++) {
                sum += arr [i] [j + k];
                sum2 += arr [i + 2] [j + k];
                sum3 = arr [i + 1] [j + 1];
                x = sum + sum2 + sum3;
            }
            if (max < x) {
                max = x;
            }
            sum = 0;
            sum2 = 0;
            sum3 = 0;
            x = 0;
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    int hg = Integer.MIN_VALUE, sum;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            sum = 0;
            sum = sum + a [i] [j] + a [i] [j + 1] + a [i] [j + 2];
            sum = sum + a [i + 1] [j + 1];
            sum = sum + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > hg) hg = sum;

        }
    }
    System.out.println (hg);
    in.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_42531698_2_33
37363674_47130984_3_34
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int arr_i = 0;
    arr_i < 6; arr_i ++) {
        for (int arr_j = 0;
        arr_j < 6; arr_j ++) {
            arr [arr_i] [arr_j] = in.nextInt ();
        }
    }
    int sum = 0;
    int sum2 = 0;
    int sum3 = 0;
    int x = 0;
    int max = Integer.MIN_VALUE;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            for (int k = 0;
            k < 3; k ++) {
                sum += arr [i] [j + k];
                sum2 += arr [i + 2] [j + k];
                sum3 = arr [i + 1] [j + 1];
                x = sum + sum2 + sum3;
            }
            if (max < x) {
                max = x;
            }
            sum = 0;
            sum2 = 0;
            sum3 = 0;
            x = 0;
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    int sum = 0;
    int output = 0;
    Set < Integer > set = new TreeSet < Integer > ();
    for (int k = 0;
    k < 4; k ++) {
        for (int y = 0;
        y < 4; y ++) {
            sum = arr [k] [y] + arr [k] [y + 1] + arr [k] [y + 2] + arr [k + 1] [y + 1] + arr [k + 2] [y] + arr [k + 2] [y + 1] + arr [k + 2] [y + 2];
            set.add (sum);
        }
    }
    int p = 0;
    for (int u : set) {
        p ++;
        if (p == set.size ()) output = u;

    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_42531698_2_33
37363674_48448790_6_27
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int arr_i = 0;
    arr_i < 6; arr_i ++) {
        for (int arr_j = 0;
        arr_j < 6; arr_j ++) {
            arr [arr_i] [arr_j] = in.nextInt ();
        }
    }
    int sum = 0;
    int sum2 = 0;
    int sum3 = 0;
    int x = 0;
    int max = Integer.MIN_VALUE;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            for (int k = 0;
            k < 3; k ++) {
                sum += arr [i] [j + k];
                sum2 += arr [i + 2] [j + k];
                sum3 = arr [i + 1] [j + 1];
                x = sum + sum2 + sum3;
            }
            if (max < x) {
                max = x;
            }
            sum = 0;
            sum2 = 0;
            sum3 = 0;
            x = 0;
        }
    }
    System.out.println (max);
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    int rowSize = 6;
    int colSize = 6;
    int [] [] array = new int [rowSize] [colSize];
    for (int row = 0;
    row < rowSize; row ++) {
        for (int col = 0;
        col < colSize; col ++) {
            array [row] [col] = read.nextInt ();
        }
    }
    read.close ();
    int max = Integer.MIN_VALUE;
    for (int row = 0;
    row < 4; row ++) {
        for (int col = 0;
        col < 4; col ++) {
            int sum = calculateHourglassSum (array, row, col);
            if (sum > max) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_43465271_9_30
37363674_47130984_3_34
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    int hg = Integer.MIN_VALUE, sum;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            sum = 0;
            sum = sum + a [i] [j] + a [i] [j + 1] + a [i] [j + 2];
            sum = sum + a [i + 1] [j + 1];
            sum = sum + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > hg) hg = sum;

        }
    }
    System.out.println (hg);
    in.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    int sum = 0;
    int output = 0;
    Set < Integer > set = new TreeSet < Integer > ();
    for (int k = 0;
    k < 4; k ++) {
        for (int y = 0;
        y < 4; y ++) {
            sum = arr [k] [y] + arr [k] [y + 1] + arr [k] [y + 2] + arr [k + 1] [y + 1] + arr [k + 2] [y] + arr [k + 2] [y + 1] + arr [k + 2] [y + 2];
            set.add (sum);
        }
    }
    int p = 0;
    for (int u : set) {
        p ++;
        if (p == set.size ()) output = u;

    }
    System.out.println (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_43465271_9_30
37363674_48448790_6_27
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int a [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            a [i] [j] = in.nextInt ();
        }
    }
    int hg = Integer.MIN_VALUE, sum;
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            sum = 0;
            sum = sum + a [i] [j] + a [i] [j + 1] + a [i] [j + 2];
            sum = sum + a [i + 1] [j + 1];
            sum = sum + a [i + 2] [j] + a [i + 2] [j + 1] + a [i + 2] [j + 2];
            if (sum > hg) hg = sum;

        }
    }
    System.out.println (hg);
    in.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    int rowSize = 6;
    int colSize = 6;
    int [] [] array = new int [rowSize] [colSize];
    for (int row = 0;
    row < rowSize; row ++) {
        for (int col = 0;
        col < colSize; col ++) {
            array [row] [col] = read.nextInt ();
        }
    }
    read.close ();
    int max = Integer.MIN_VALUE;
    for (int row = 0;
    row < 4; row ++) {
        for (int col = 0;
        col < 4; col ++) {
            int sum = calculateHourglassSum (array, row, col);
            if (sum > max) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37363674_47130984_3_34
37363674_48448790_6_27
Title: Java - How to Solve this 2D Array Hour Glass? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int arr [] [] = new int [6] [6];
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 6; j ++) {
            arr [i] [j] = in.nextInt ();
        }
    }
    int sum = 0;
    int output = 0;
    Set < Integer > set = new TreeSet < Integer > ();
    for (int k = 0;
    k < 4; k ++) {
        for (int y = 0;
        y < 4; y ++) {
            sum = arr [k] [y] + arr [k] [y + 1] + arr [k] [y + 2] + arr [k + 1] [y + 1] + arr [k + 2] [y] + arr [k + 2] [y + 1] + arr [k + 2] [y + 2];
            set.add (sum);
        }
    }
    int p = 0;
    for (int u : set) {
        p ++;
        if (p == set.size ()) output = u;

    }
    System.out.println (output);
}
----------------------------------------

public static void main (String [] args) {
    Scanner read = new Scanner (System.in);
    int rowSize = 6;
    int colSize = 6;
    int [] [] array = new int [rowSize] [colSize];
    for (int row = 0;
    row < rowSize; row ++) {
        for (int col = 0;
        col < colSize; col ++) {
            array [row] [col] = read.nextInt ();
        }
    }
    read.close ();
    int max = Integer.MIN_VALUE;
    for (int row = 0;
    row < 4; row ++) {
        for (int col = 0;
        col < 4; col ++) {
            int sum = calculateHourglassSum (array, row, col);
            if (sum > max) {
                max = sum;
            }
        }
    }
    System.out.println (max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37365284_37365438_1_21
37365284_37365822_1_27
Title: Insert ArrayList into MySQL 
----------------------------------------

public void insert (String Name, String NC, String acNum, String title, String day, String time, double totalPrice, ArrayList < Integer > list) throws Exception {
    System.out.println (list);
    DatabaseConnection db = new DatabaseConnection ();
    try (Connection connect = db.getConnection ()) {
        String sql = "insert into user_payment (user_name, ic_number, acc_number, movie_title, movie_day, movie_time, total_price, selected_seats) VALUES (?,?,?,?,?,?,?,?)";
        try (PreparedStatement ps = connect.prepareStatement (sql)) {
            ps.setString (1, Name);
            ps.setString (2, NC);
            ps.setString (3, acNum);
            ps.setString (4, title);
            ps.setString (5, day);
            ps.setString (6, time);
            ps.setDouble (7, totalPrice);
            for (Integer seat : list) {
                ps.setInt (8, seat);
                ps.addBatch ();
            }
            ps.executeBatch ();
        }
    }
}
----------------------------------------

public void insert (String Name, String NC, String acNum, String title, String day, String time, double totalPrice, ArrayList < Integer > list) throws Exception {
    System.out.println (list);
    DatabaseConnection db = new DatabaseConnection ();
    Connection connect = db.getConnection ();
    String sql = "Insert into user_payment(user_name,ic_number,acc_number, movie_title,movie_day,movie_time, total_price, selected_seats)VALUES (?,?,?,?,?,?,?,?)";
    PreparedStatement ps = connect.prepareStatement (sql);
    ps.setString (1, Name);
    ps.setString (2, NC);
    ps.setString (3, acNum);
    ps.setString (4, title);
    ps.setString (5, day);
    ps.setString (6, time);
    ps.setDouble (7, totalPrice);
    String seatList = "";
    for (Integer seat : list) {
        if (seatList.equal ("")) {
            seatList = seat;
        } else {
            seatList += "," + seat;
        }
    }
    ps.setString (8, seatList);
    ps.executeBatch ();
    ps.executeUpdate ();
    connect.close ();
    ps.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37369473_37369536_1_37
37369473_37369595_1_17
Title: Java Simple program using Loop structure 
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    Scanner console = new Scanner (System.in);
    System.out.print ("Please enter a Number: ");
    String num = console.nextLine ();
    try {
        num = num.trim ();
        int index = 0;
        int n = Integer.parseInt (num);
        System.out.print ("Digits: ");
        while (n > 0) {
            int digit = n % 10;
            sum += n % 10;
            n = n / 10;
            char d = num.charAt (index ++);
            System.out.print (d + ", ");
        }
        System.out.print ("Sum: " + sum);
    } catch (NumberFormatException e) {
        System.out.print ("Invalid Number entered");
    }
    console.close ();
}
----------------------------------------

public static void main (String args []) {
    int sum = 0;
    Scanner sc = new Scanner (System.in);
    System.out.println ("Number: ");
    int num = sc.nextInt ();
    String str = Integer.toString (num);
    for (int i = 0;
    i < str.length (); i ++) {
        sum += Character.getNumericValue (str.charAt (i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37369473_37369536_1_37
37369473_37369804_2_23
Title: Java Simple program using Loop structure 
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    Scanner console = new Scanner (System.in);
    System.out.print ("Please enter a Number: ");
    String num = console.nextLine ();
    try {
        num = num.trim ();
        int index = 0;
        int n = Integer.parseInt (num);
        System.out.print ("Digits: ");
        while (n > 0) {
            int digit = n % 10;
            sum += n % 10;
            n = n / 10;
            char d = num.charAt (index ++);
            System.out.print (d + ", ");
        }
        System.out.print ("Sum: " + sum);
    } catch (NumberFormatException e) {
        System.out.print ("Invalid Number entered");
    }
    console.close ();
}
----------------------------------------

public static void main (String args []) {
    int insert;
    int sum;
    int [] numArray = new int [4];
    Scanner console = new Scanner (System.in);
    for (int i = 0;
    int < 4; i ++) {
        if (i == 1) {
            System.out.println ("Please enter First Number: ");
        } else {
            System.out.println ("Please enter the next Number: ");
        }
        numArray [i] = console.nextInt ();
        sum += numArray [i];
    }
    System.out.println ("Digits: " + numArray [0] + "," + numArray [1] + "," + numArray [2] + "," + numArray [3]);
    System.out.println ("Sum: " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37369473_37369595_1_17
37369473_37369804_2_23
Title: Java Simple program using Loop structure 
----------------------------------------

public static void main (String args []) {
    int sum = 0;
    Scanner sc = new Scanner (System.in);
    System.out.println ("Number: ");
    int num = sc.nextInt ();
    String str = Integer.toString (num);
    for (int i = 0;
    i < str.length (); i ++) {
        sum += Character.getNumericValue (str.charAt (i));
    }
}
----------------------------------------

public static void main (String args []) {
    int insert;
    int sum;
    int [] numArray = new int [4];
    Scanner console = new Scanner (System.in);
    for (int i = 0;
    int < 4; i ++) {
        if (i == 1) {
            System.out.println ("Please enter First Number: ");
        } else {
            System.out.println ("Please enter the next Number: ");
        }
        numArray [i] = console.nextInt ();
        sum += numArray [i];
    }
    System.out.println ("Digits: " + numArray [0] + "," + numArray [1] + "," + numArray [2] + "," + numArray [3]);
    System.out.println ("Sum: " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37389177_37389498_1_17
37389177_37389839_47_67
Title: How to exit return loop in java? 
----------------------------------------

public static float adition (float n1, float n2) {
    input = new Scanner (System.in);
    float result;
    System.out.println ("Enter first number:");
    n1 = input.nextFloat ();
    System.out.println ("Enter second number:");
    n2 = input.nextFloat ();
    result = n1 + n2;
    System.out.println ("Result is: " + result);
    return result;
}
----------------------------------------

public static float adition (float n1, float n2) {
    input = new Scanner (System.in);
    float result;
    System.out.println ("Enter first number:");
    n1 = input.nextFloat ();
    if (n1 == - 999) {
        flag = 0;
    }
    System.out.println ("Enter second number:");
    n2 = input.nextFloat ();
    result = n1 + n2;
    System.out.println ("Result is: " + result);
    if (flag == 0) return result;

    return adition (result, result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37402787_37402898_6_31
37402787_37402905_1_41
Title: Handling an Array in Java (two columns) 
----------------------------------------

public static void main (String [] args) {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String maxKey = null;
    int maxVal = 0;
    Map < String, Integer > sums = new HashMap < > ();
    for (String a : S.split ("\\n")) {
        String [] split = a.split (",");
        int value = Integer.parseInt (split [0]);
        String key = split [1];
        if (sums.containsKey (key)) {
            sums.put (key, sums.get (key) + value);
        } else {
            sums.put (key, value);
        }
        if (sums.get (key) > maxVal) {
            maxVal = sums.get (key);
            maxKey = key;
        }
    }
    System.out.println ("Max key: " + maxKey + ", Sum: " + maxVal);
}
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String [] lines = S.split ("\\n");
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (String t : lines) {
        String [] e = t.split (",");
        Integer digit = Integer.parseInt (e [0]);
        String c = e [1];
        if (map.get (c) != null) {
            Integer val = map.get (c);
            val += digit;
            map.put (c, val);
        } else {
            map.put (c, digit);
        }
    }
    int max = 0;
    String maxKey = null;
    for (String k : map.keySet ()) {
        if (map.get (k) > max) {
            max = map.get (k);
            maxKey = k;
        }
    }
    System.out.println ("The maximum key is : " + maxKey);
    System.out.println ("The maximum value is : " + max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37402787_37402898_6_31
37402787_37403090_1_20
Title: Handling an Array in Java (two columns) 
----------------------------------------

public static void main (String [] args) {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String maxKey = null;
    int maxVal = 0;
    Map < String, Integer > sums = new HashMap < > ();
    for (String a : S.split ("\\n")) {
        String [] split = a.split (",");
        int value = Integer.parseInt (split [0]);
        String key = split [1];
        if (sums.containsKey (key)) {
            sums.put (key, sums.get (key) + value);
        } else {
            sums.put (key, value);
        }
        if (sums.get (key) > maxVal) {
            maxVal = sums.get (key);
            maxKey = key;
        }
    }
    System.out.println ("Max key: " + maxKey + ", Sum: " + maxVal);
}
----------------------------------------

public static void main (String [] args) {
    String S = "5,a\n6,b\n9,a";
    Map < String, Integer > map = new HashMap < String, Integer > ();
    String highestAmountChar = "";
    int highestAmount = 0;
    for (String str : S.split ("\\n")) {
        String [] amountChar = str.split (",");
        if (map.get (amountChar [1]) == null) {
            map.put (amountChar [1], Integer.parseInt (amountChar [0]));
        } else {
            map.put (amountChar [1], map.get (amountChar [1]) + Integer.parseInt (amountChar [0]));
        }
        if (highestAmount < map.get (amountChar [1])) {
            highestAmount = map.get (amountChar [1]);
            highestAmountChar = amountChar [1];
        }
    }
    System.out.println ("The character " + highestAmountChar + " has highest amount " + highestAmount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37402787_37402898_6_31
37402787_37403122_3_47
Title: Handling an Array in Java (two columns) 
----------------------------------------

public static void main (String [] args) {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String maxKey = null;
    int maxVal = 0;
    Map < String, Integer > sums = new HashMap < > ();
    for (String a : S.split ("\\n")) {
        String [] split = a.split (",");
        int value = Integer.parseInt (split [0]);
        String key = split [1];
        if (sums.containsKey (key)) {
            sums.put (key, sums.get (key) + value);
        } else {
            sums.put (key, value);
        }
        if (sums.get (key) > maxVal) {
            maxVal = sums.get (key);
            maxKey = key;
        }
    }
    System.out.println ("Max key: " + maxKey + ", Sum: " + maxVal);
}
----------------------------------------

public static void main (String args []) {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String [] separated = S.split ("\\n");
    char [] letters = new char [separated.length];
    for (int i = 0;
    i < letters.length; i ++) {
        letters [i] = separated [i].charAt (2);
    }
    Arrays.sort (letters);
    char previous = letters [0];
    char mostRepeated = letters [0];
    int count = 1;
    int maxCount = 1;
    for (int i = 1;
    i < letters.length; i ++) {
        if (letters [i] == previous) count ++;
        else {
            if (count > maxCount) {
                mostRepeated = letters [i - 1];
                maxCount = count;
            }
            previous = letters [i];
            count = 1;
        }
    }
    char answer = count > maxCount ? letters [letters.length - 1] : mostRepeated;
    int sum = 0;
    for (String s : separated) {
        if (s.charAt (2) == answer) {
            sum += Character.getNumericValue (s.charAt (0));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37402787_37402905_1_41
37402787_37403090_1_20
Title: Handling an Array in Java (two columns) 
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String [] lines = S.split ("\\n");
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (String t : lines) {
        String [] e = t.split (",");
        Integer digit = Integer.parseInt (e [0]);
        String c = e [1];
        if (map.get (c) != null) {
            Integer val = map.get (c);
            val += digit;
            map.put (c, val);
        } else {
            map.put (c, digit);
        }
    }
    int max = 0;
    String maxKey = null;
    for (String k : map.keySet ()) {
        if (map.get (k) > max) {
            max = map.get (k);
            maxKey = k;
        }
    }
    System.out.println ("The maximum key is : " + maxKey);
    System.out.println ("The maximum value is : " + max);
}
----------------------------------------

public static void main (String [] args) {
    String S = "5,a\n6,b\n9,a";
    Map < String, Integer > map = new HashMap < String, Integer > ();
    String highestAmountChar = "";
    int highestAmount = 0;
    for (String str : S.split ("\\n")) {
        String [] amountChar = str.split (",");
        if (map.get (amountChar [1]) == null) {
            map.put (amountChar [1], Integer.parseInt (amountChar [0]));
        } else {
            map.put (amountChar [1], map.get (amountChar [1]) + Integer.parseInt (amountChar [0]));
        }
        if (highestAmount < map.get (amountChar [1])) {
            highestAmount = map.get (amountChar [1]);
            highestAmountChar = amountChar [1];
        }
    }
    System.out.println ("The character " + highestAmountChar + " has highest amount " + highestAmount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37402787_37402905_1_41
37402787_37403122_3_47
Title: Handling an Array in Java (two columns) 
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String [] lines = S.split ("\\n");
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (String t : lines) {
        String [] e = t.split (",");
        Integer digit = Integer.parseInt (e [0]);
        String c = e [1];
        if (map.get (c) != null) {
            Integer val = map.get (c);
            val += digit;
            map.put (c, val);
        } else {
            map.put (c, digit);
        }
    }
    int max = 0;
    String maxKey = null;
    for (String k : map.keySet ()) {
        if (map.get (k) > max) {
            max = map.get (k);
            maxKey = k;
        }
    }
    System.out.println ("The maximum key is : " + maxKey);
    System.out.println ("The maximum value is : " + max);
}
----------------------------------------

public static void main (String args []) {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String [] separated = S.split ("\\n");
    char [] letters = new char [separated.length];
    for (int i = 0;
    i < letters.length; i ++) {
        letters [i] = separated [i].charAt (2);
    }
    Arrays.sort (letters);
    char previous = letters [0];
    char mostRepeated = letters [0];
    int count = 1;
    int maxCount = 1;
    for (int i = 1;
    i < letters.length; i ++) {
        if (letters [i] == previous) count ++;
        else {
            if (count > maxCount) {
                mostRepeated = letters [i - 1];
                maxCount = count;
            }
            previous = letters [i];
            count = 1;
        }
    }
    char answer = count > maxCount ? letters [letters.length - 1] : mostRepeated;
    int sum = 0;
    for (String s : separated) {
        if (s.charAt (2) == answer) {
            sum += Character.getNumericValue (s.charAt (0));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37402787_37403090_1_20
37402787_37403122_3_47
Title: Handling an Array in Java (two columns) 
----------------------------------------

public static void main (String [] args) {
    String S = "5,a\n6,b\n9,a";
    Map < String, Integer > map = new HashMap < String, Integer > ();
    String highestAmountChar = "";
    int highestAmount = 0;
    for (String str : S.split ("\\n")) {
        String [] amountChar = str.split (",");
        if (map.get (amountChar [1]) == null) {
            map.put (amountChar [1], Integer.parseInt (amountChar [0]));
        } else {
            map.put (amountChar [1], map.get (amountChar [1]) + Integer.parseInt (amountChar [0]));
        }
        if (highestAmount < map.get (amountChar [1])) {
            highestAmount = map.get (amountChar [1]);
            highestAmountChar = amountChar [1];
        }
    }
    System.out.println ("The character " + highestAmountChar + " has highest amount " + highestAmount);
}
----------------------------------------

public static void main (String args []) {
    String S = "5,a\n" + "6,b\n" + "9,a";
    String [] separated = S.split ("\\n");
    char [] letters = new char [separated.length];
    for (int i = 0;
    i < letters.length; i ++) {
        letters [i] = separated [i].charAt (2);
    }
    Arrays.sort (letters);
    char previous = letters [0];
    char mostRepeated = letters [0];
    int count = 1;
    int maxCount = 1;
    for (int i = 1;
    i < letters.length; i ++) {
        if (letters [i] == previous) count ++;
        else {
            if (count > maxCount) {
                mostRepeated = letters [i - 1];
                maxCount = count;
            }
            previous = letters [i];
            count = 1;
        }
    }
    char answer = count > maxCount ? letters [letters.length - 1] : mostRepeated;
    int sum = 0;
    for (String s : separated) {
        if (s.charAt (2) == answer) {
            sum += Character.getNumericValue (s.charAt (0));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37408022_37408426_1_19
37408022_37410149_1_10
Title: Adding buffer when writing byte[] to OutputStream 
----------------------------------------

public void readFileToOutputStream (Path path, OutputStream os) {
    try (FileInputStream fis = new FileInputStream (path.toFile ())) {
        try (BufferedInputStream bis = new BufferedInputStream (fis)) {
            try (DataInputStream dis = new DataInputStream (bis)) {
                try (BufferedOutputStream bos = new BufferedOutputStream (os)) {
                    try (DataOutputStream dos = new DataOutputStream (bos)) {
                        try {
                            while (true) {
                                dos.writeByte (dis.readByte ());
                            }
                        } catch (EOFException e) {
                        }
                    }
                }
            }
        }
    }
}
----------------------------------------

public void readFileToOutputStream (Path path, OutputStream os) throws IOException {
    try (InputStream fis = new FileInputStream (path.toFile ()); InputStream bis = new BufferedInputStream (fis)) {
        byte [] buffer = new byte [4096];
        int n;
        while ((n = bis.read (buffer)) >= 0) {
            os.write (buffer, 0, n);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37412088_37412192_1_13
37412088_37412342_1_16
Title: What is wrong with the method below? 
----------------------------------------

public static int f (int a, int b, int c) {
    if ((a < b) && (b < c)) return a;
    else if ((a >= b) && (b >= c)) return b;
    else if ((a == b) || (b == c) || (a == c)) return c;
    else {
        System.out.println ("No clause matched");
        return 0;
    }

}
----------------------------------------

public static int f (int a, int b, int c) throws Exception {
    if ((a < b) && (b < c)) {
        return a;
    } else if ((a >= b) && (b >= c)) {
        return b;
    } else if ((a == b) || (b == c) || (a == c)) {
        return c;
    }

    throw new Exception ("Input not valid");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741765_13787010_1_13
3741765_3741889_16_30
Title: Ordering threads to run in the order they were created/started 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyRunnable r = new MyRunnable ();
    Thread t1 = new Thread (r, "A");
    Thread t2 = new Thread (r, "B");
    Thread t3 = new Thread (r, "C");
    t1.start ();
    Thread.sleep (1000);
    t2.start ();
    Thread.sleep (1000);
    t3.start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyWorker [] workers = new MyWorker [10];
    for (int i = 1;
    i <= 10; i ++) {
        workers [i] = new MyWorker (i);
        workers [i].start ();
    }
    for (MyWorker worker : workers) {
        worker.join ();
        System.out.println (worker.getResult ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741765_13787010_1_13
3741765_3742031_13_46
Title: Ordering threads to run in the order they were created/started 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyRunnable r = new MyRunnable ();
    Thread t1 = new Thread (r, "A");
    Thread t2 = new Thread (r, "B");
    Thread t3 = new Thread (r, "C");
    t1.start ();
    Thread.sleep (1000);
    t2.start ();
    Thread.sleep (1000);
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    ExecutorService exec = Executors.newFixedThreadPool (NUM_THREADS);
    class MyCallable implements Callable < Integer > {
        private final int threadnumber;
        MyCallable (int threadnumber) {
            this.threadnumber = threadnumber;
        } public Integer call () {
            System.out.println ("Running thread #" + threadnumber);
            return threadnumber;
        }}

    List < Callable < Integer > > callables = new ArrayList < Callable < Integer > > ();
    for (int i = 1;
    i <= NUM_THREADS; i ++) {
        callables.add (new MyCallable (i));
    }
    try {
        List < Future < Integer > > results = exec.invokeAll (callables);
        for (Future < Integer > result : results) {
            System.out.println ("Got result of thread #" + result.get ());
        }
    } catch (InterruptedException ex) {
        ex.printStackTrace ();
    } catch (ExecutionException ex) {
        ex.printStackTrace ();
    } finally {
        exec.shutdownNow ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741765_13787010_1_13
3741765_3742051_4_13
Title: Ordering threads to run in the order they were created/started 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyRunnable r = new MyRunnable ();
    Thread t1 = new Thread (r, "A");
    Thread t2 = new Thread (r, "B");
    Thread t3 = new Thread (r, "C");
    t1.start ();
    Thread.sleep (1000);
    t2.start ();
    Thread.sleep (1000);
    t3.start ();
}
----------------------------------------

public static void main (String...args) {
    Results results = new Results ();
    new Thread (new Task (0, "red", results)).start ();
    new Thread (new Task (1, "orange", results)).start ();
    new Thread (new Task (2, "yellow", results)).start ();
    new Thread (new Task (3, "green", results)).start ();
    new Thread (new Task (4, "blue", results)).start ();
    new Thread (new Task (5, "indigo", results)).start ();
    new Thread (new Task (6, "violet", results)).start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741765_3741889_16_30
3741765_3742031_13_46
Title: Ordering threads to run in the order they were created/started 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyWorker [] workers = new MyWorker [10];
    for (int i = 1;
    i <= 10; i ++) {
        workers [i] = new MyWorker (i);
        workers [i].start ();
    }
    for (MyWorker worker : workers) {
        worker.join ();
        System.out.println (worker.getResult ());
    }
}
----------------------------------------

public static void main (String [] args) {
    ExecutorService exec = Executors.newFixedThreadPool (NUM_THREADS);
    class MyCallable implements Callable < Integer > {
        private final int threadnumber;
        MyCallable (int threadnumber) {
            this.threadnumber = threadnumber;
        } public Integer call () {
            System.out.println ("Running thread #" + threadnumber);
            return threadnumber;
        }}

    List < Callable < Integer > > callables = new ArrayList < Callable < Integer > > ();
    for (int i = 1;
    i <= NUM_THREADS; i ++) {
        callables.add (new MyCallable (i));
    }
    try {
        List < Future < Integer > > results = exec.invokeAll (callables);
        for (Future < Integer > result : results) {
            System.out.println ("Got result of thread #" + result.get ());
        }
    } catch (InterruptedException ex) {
        ex.printStackTrace ();
    } catch (ExecutionException ex) {
        ex.printStackTrace ();
    } finally {
        exec.shutdownNow ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741765_3741889_16_30
3741765_3742051_4_13
Title: Ordering threads to run in the order they were created/started 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyWorker [] workers = new MyWorker [10];
    for (int i = 1;
    i <= 10; i ++) {
        workers [i] = new MyWorker (i);
        workers [i].start ();
    }
    for (MyWorker worker : workers) {
        worker.join ();
        System.out.println (worker.getResult ());
    }
}
----------------------------------------

public static void main (String...args) {
    Results results = new Results ();
    new Thread (new Task (0, "red", results)).start ();
    new Thread (new Task (1, "orange", results)).start ();
    new Thread (new Task (2, "yellow", results)).start ();
    new Thread (new Task (3, "green", results)).start ();
    new Thread (new Task (4, "blue", results)).start ();
    new Thread (new Task (5, "indigo", results)).start ();
    new Thread (new Task (6, "violet", results)).start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3741765_3742031_13_46
3741765_3742051_4_13
Title: Ordering threads to run in the order they were created/started 
----------------------------------------

public static void main (String [] args) {
    ExecutorService exec = Executors.newFixedThreadPool (NUM_THREADS);
    class MyCallable implements Callable < Integer > {
        private final int threadnumber;
        MyCallable (int threadnumber) {
            this.threadnumber = threadnumber;
        } public Integer call () {
            System.out.println ("Running thread #" + threadnumber);
            return threadnumber;
        }}

    List < Callable < Integer > > callables = new ArrayList < Callable < Integer > > ();
    for (int i = 1;
    i <= NUM_THREADS; i ++) {
        callables.add (new MyCallable (i));
    }
    try {
        List < Future < Integer > > results = exec.invokeAll (callables);
        for (Future < Integer > result : results) {
            System.out.println ("Got result of thread #" + result.get ());
        }
    } catch (InterruptedException ex) {
        ex.printStackTrace ();
    } catch (ExecutionException ex) {
        ex.printStackTrace ();
    } finally {
        exec.shutdownNow ();
    }
}
----------------------------------------

public static void main (String...args) {
    Results results = new Results ();
    new Thread (new Task (0, "red", results)).start ();
    new Thread (new Task (1, "orange", results)).start ();
    new Thread (new Task (2, "yellow", results)).start ();
    new Thread (new Task (3, "green", results)).start ();
    new Thread (new Task (4, "blue", results)).start ();
    new Thread (new Task (5, "indigo", results)).start ();
    new Thread (new Task (6, "violet", results)).start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37426593_37427957_1_33
37426593_37428040_1_15
Title: I am trying to look through an array and pick out certain strings 
----------------------------------------

public int numVworthy (String wordsList []) {
    int count = 0;
    String w = "w";
    String v = "v";
    for (int i = 0;
    i < wordsList.length; i ++) {
        if (wordsList [i].contains (v)) {
            if (wordsList.length == 1) {
                count ++;
            } else if (i > 0 && ! wordsList [i - 1].contains (w)) {
                if ((i + 1) < wordsList.length && ! wordsList [i + 1].contains (w)) {
                    count ++;
                } else if (i == (wordsList.length - 1)) {
                    count ++;
                }

            } else if (i == 0 && (i + 1) < wordsList.length && ! wordsList [i + 1].contains (w)) {
                count ++;
            }

        }
    }
    return count;
}
----------------------------------------

public int numVworthy (String wordsList []) {
    int counter = 0;
    for (int i = 0;
    i < wordsList.length; i ++) {
        if (wordsList [i].contains ("v")) {
            if (! (i > 0 && wordsList [i - 1].contains ("w")) && ! (wordsList.length - 1 > i && wordsList [i + 1].contains ("w"))) {
                counter ++;
            }
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37427262_37427567_2_12
37427262_37427764_4_17
Title: "How to take multiple integers as single input separated by space in java then break them into integers?" 
----------------------------------------

public static void main (String args []) {
    int i, j = 0, sum = 0;
    int arr [] = new int [10];
    Scanner scan = new Scanner (System.in);
    String s = scan.nextLine ();
    String [] str = s.split (" ");
    for (i = 0; i <= str.length; i ++) {
        int temp = Integer.parseInt (str [i]);
        sum += Math.pow (3, temp);
    }
}
----------------------------------------

public static void main (String args []) {
    int i, sum = 0;
    int arr [] = new int [10];
    Scanner scan = new Scanner (System.in);
    String s = scan.nextLine ();
    String [] str = s.split (" ");
    int len = str.length;
    System.out.print (len);
    for (i = 0; i < len; i ++) {
        int i1 = Integer.parseInt (str [i]);
        sum += Math.pow (3, i1);
    }
    System.out.println (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37427262_37427567_2_12
37427262_37427845_2_28
Title: "How to take multiple integers as single input separated by space in java then break them into integers?" 
----------------------------------------

public static void main (String args []) {
    int i, j = 0, sum = 0;
    int arr [] = new int [10];
    Scanner scan = new Scanner (System.in);
    String s = scan.nextLine ();
    String [] str = s.split (" ");
    for (i = 0; i <= str.length; i ++) {
        int temp = Integer.parseInt (str [i]);
        sum += Math.pow (3, temp);
    }
}
----------------------------------------

public static void main (String args []) {
    int sum = 0;
    System.out.println ("Eneter whole numbers seperated by space: ");
    Scanner scan = new Scanner (System.in);
    String s = scan.nextLine ();
    String [] str = s.split (" ");
    int len = str.length;
    int ints [] = new int [len];
    for (int i = 0;
    i < len; i ++) {
        ints [i] = Integer.valueOf (str [i]);
        sum += Math.pow (3, Integer.valueOf (str [i]));
    }
    System.out.println ("Input converted to int: " + Arrays.toString (ints));
    System.out.println ("Sum of 3 in the power of values entered : " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37427262_37427764_4_17
37427262_37427845_2_28
Title: "How to take multiple integers as single input separated by space in java then break them into integers?" 
----------------------------------------

public static void main (String args []) {
    int i, sum = 0;
    int arr [] = new int [10];
    Scanner scan = new Scanner (System.in);
    String s = scan.nextLine ();
    String [] str = s.split (" ");
    int len = str.length;
    System.out.print (len);
    for (i = 0; i < len; i ++) {
        int i1 = Integer.parseInt (str [i]);
        sum += Math.pow (3, i1);
    }
    System.out.println (sum);
}
----------------------------------------

public static void main (String args []) {
    int sum = 0;
    System.out.println ("Eneter whole numbers seperated by space: ");
    Scanner scan = new Scanner (System.in);
    String s = scan.nextLine ();
    String [] str = s.split (" ");
    int len = str.length;
    int ints [] = new int [len];
    for (int i = 0;
    i < len; i ++) {
        ints [i] = Integer.valueOf (str [i]);
        sum += Math.pow (3, Integer.valueOf (str [i]));
    }
    System.out.println ("Input converted to int: " + Arrays.toString (ints));
    System.out.println ("Sum of 3 in the power of values entered : " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37453870_37454233_2_13
37453870_37454421_3_16
Title: How to write the loop in java for the output shown below? 
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= 5; i ++) {
        for (int j = 1;
        j <= 5; j ++) {
            if (i == j) {
                System.out.print ("-");
            } else {
                System.out.print ("*");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < 6; i ++) {
        for (int j = 0;
        j < 13; j ++) {
            if (2 * i + 1 == j) System.out.print (" - ");
            else System.out.print ("*");

        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37456091_37456338_15_28
37456091_37456644_11_20
Title: Logic? Debugged multiple times and cant find the error 
----------------------------------------

public static int getLowTemp (int [] [] arr) {
    int low = arr [0] [0];
    for (int i = 0;
    i < 11; i ++) {
        int nextValue = arr [i + 1] [0];
        if (low > nextValue) low = nextValue;

    }
    int lowestValue = low;
    return lowestValue;
}
----------------------------------------

public static int getLowTemp (int [] [] arr) {
    int low = 665456456;
    for (int i = 0;
    i < 12; i ++) {
        if (low > arr [i] [1]) low = arr [i] [1];

    }
    return low;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37456091_37456338_1_12
37456091_37456644_1_9
Title: Logic? Debugged multiple times and cant find the error 
----------------------------------------

public static int getHighTemp (int [] [] arr) {
    int high = arr [0] [0];
    for (int i = 0;
    i < 11; i ++) {
        int nextValue = arr [i + 1] [0];
        if (high < nextValue) high = nextValue;

    }
    return high;
}
----------------------------------------

public static int getHighTemp (int [] [] arr) {
    int high = - 1;
    for (int i = 0;
    i < 12; i ++) {
        if (high < arr [i] [0]) high = arr [i] [0];

    }
    return high;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37461067_37461356_1_25
37461067_37461528_19_35
Title: range and input type validation 
----------------------------------------

public static void main (String [] args) throws Exception {
    Scanner in = new Scanner (System.in);
    int num;
    do {
        System.out.print ("Enter a 2-digit number. The digits should be different. Zero to stop: ");
        String input = in.next ();
        try {
            num = Integer.valueOf (input);
            if (num == 0) {
                break;
            }
            if (num < 10 || num > 99) {
                System.out.println ("NOT good for your game!");
            } else {
                if (input.charAt (0) == input.charAt (1)) {
                    System.out.println ("NOT good for you game!");
                } else {
                    System.out.println ("Good for your game! Play!");
                }
            }
        } catch (NumberFormatException ignored) {
            System.out.print ("Not an integer, try again: ");
        }
    } while (true);
}
----------------------------------------

public static void main (String [] args) {
    Scanner reader = new Scanner (System.in);
    String input;
    do {
        System.out.println ("Enter a 2-digit number. The digits should be different. Zero to stop: ");
        input = reader.next ();
        if (! validate (input)) {
            System.out.println ("NOT good for your game!");
        } else {
            break;
        }
    } while (true);
    System.out.println ("Good for your game! Play!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37465090_37465467_1_18
37465090_39133623_10_30
Title: Center JLabel On JFrame 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            JFrame jf = new JFrame ();
            jf.addWindowListener (new WindowAdapter () {
                @Override
                public void windowClosing (WindowEvent arg0) {
                    System.exit (0);
                }}

            );
            JLabel t = new JLabel ("Centered", SwingConstants.CENTER);
            jf.add (t, BorderLayout.CENTER);
            jf.setSize (300, 300);
            jf.setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (final String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            final JFrame frame = new JFrame ("Test frame");
            frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            final JLabel label = new JLabel ("Test label");
            label.setBorder (new LineBorder (Color.BLUE, 2));
            final JPanel containerPanel = new JPanel (new GridBagLayout ());
            containerPanel.add (label);
            frame.getContentPane ().add (containerPanel);
            frame.pack ();
            frame.setLocationRelativeTo (null);
            frame.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37465090_37465467_4_16
37465090_39133623_13_28
Title: Center JLabel On JFrame 
----------------------------------------

public void run () {
    JFrame jf = new JFrame ();
    jf.addWindowListener (new WindowAdapter () {
        @Override
        public void windowClosing (WindowEvent arg0) {
            System.exit (0);
        }}

    );
    JLabel t = new JLabel ("Centered", SwingConstants.CENTER);
    jf.add (t, BorderLayout.CENTER);
    jf.setSize (300, 300);
    jf.setVisible (true);
}
----------------------------------------

public void run () {
    final JFrame frame = new JFrame ("Test frame");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    final JLabel label = new JLabel ("Test label");
    label.setBorder (new LineBorder (Color.BLUE, 2));
    final JPanel containerPanel = new JPanel (new GridBagLayout ());
    containerPanel.add (label);
    frame.getContentPane ().add (containerPanel);
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37472448_37479522_3_64
37472448_37509912_4_26
Title: JavaFX - Bind stage size to the root node's preferred size 
----------------------------------------

public void start (final Stage primaryStage) {
    try {
        ScrollPane sp = new ScrollPane ();
        sp.setHbarPolicy (ScrollBarPolicy.NEVER);
        sp.setVbarPolicy (ScrollBarPolicy.NEVER);
        TitledPane tp = new TitledPane ();
        sp.setContent (tp);
        tp.setMinHeight (400);
        tp.setMinWidth (400);
        tp.setMaxHeight (900);
        tp.setMaxWidth (900);
        final VBox vboxTPContentVertical = new VBox ();
        final VBox vboxTexts = new VBox ();
        final HBox hboxTexts = new HBox ();
        HBox hboxButtons = new HBox ();
        vboxTPContentVertical.getChildren ().addAll (hboxButtons, hboxTexts, vboxTexts);
        Button b1 = new Button ("Add row");
        b1.setOnAction ((event) -> vboxTexts.getChildren ().addAll (new Text ("Row1"), new Text ("Row2")));
        Button b2 = new Button ("Add column");
        b2.setOnAction ((event) -> hboxTexts.getChildren ().addAll (new Text ("Col1"), new Text ("Col2")));
        Button b3 = new Button ("Remove row");
        b3.setOnAction ((event) -> {
            vboxTexts.getChildren ().remove (0);
            vboxTexts.getChildren ().remove (0);
        });
        Button b4 = new Button ("Remove column");
        b4.setOnAction ((event) -> {
            hboxTexts.getChildren ().remove (0);
            hboxTexts.getChildren ().remove (0);
        });
        hboxButtons.getChildren ().addAll (b1, b2, b3, b4);
        tp.setContent (vboxTPContentVertical);
        Scene scene = new Scene (sp, 400, 400);
        tp.heightProperty ().addListener ((obs, oldVal, newVal) -> primaryStage.setHeight (to.doubleValue ()));
        tp.widthProperty ().addListener ((obs, oldVal, newVal) -> primaryStage.setWidth (to.doubleValue ()));
        primaryStage.setScene (scene);
        primaryStage.show ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void start (Stage primaryStage) throws Exception {
    final Label lbl1 = new Label ("content");
    final TitledPane tp1 = new TitledPane ("First TP", lbl1);
    final Label lbl2 = new Label ("more content");
    final TitledPane tp2 = new TitledPane ("Second TP", lbl2);
    final VBox rootPane = new VBox (tp1, tp2);
    tp1.heightProperty ().addListener ((InvalidationListener) observable -> {
        updateWindowHeight (rootPane);
    });
    tp2.heightProperty ().addListener ((InvalidationListener) observable -> {
        updateWindowHeight (rootPane);
    });
    final Scene scene = new Scene (rootPane);
    primaryStage.setScene (scene);
    primaryStage.sizeToScene ();
    primaryStage.setResizable (false);
    primaryStage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37472700_37472783_4_13
37472700_37472836_4_12
Title: "How to understand this excerpt from the book ""Think Java""?" 
----------------------------------------

public Time3 (String a, String b, String c, String d, String e, String f, String g) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.e = e;
    this.f = f;
    this.g = g;
}
----------------------------------------

public Time3 (String a, String b, String c, String d, String e, String f, String g) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.e = e;
    this.f = f;
    this.g = g;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37476222_37476282_1_21
37476222_37476342_27_43
Title: App crashes due to java.lang.SecurityException 
----------------------------------------

@Override
public void onRequestPermissionsResult (int requestCode, String permissions [], int [] grantResults) {
    switch (requestCode) {
        case REQUEST_WRITE_STORAGE :
            {
                if (grantResults.length == 0 || grantResults [0] != PackageManager.PERMISSION_GRANTED) {
                    Log.i (TAG, "Permission has been denied by user");
                } else {
                    Log.i (TAG, "Permission has been granted by user");
                }
                return;
            }}
}
----------------------------------------

@Override
public void onRequestPermissionsResult (int requestCode, String permissions [], int [] grantResults) {
    switch (requestCode) {
        case PERMISSION_REQUEST_CODE :
            if (grantResults.length > 0 && grantResults [0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText (MainActivity.this, "Permission granted", Toast.LENGTH_SHORT).show ();
            } else {
                Toast.makeText (MainActivity.this, "Permission denied", Toast.LENGTH_SHORT).show ();
            }
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3748763_8224052_3_11
3748763_9906524_2_9
Title: Simple Java Loop Question 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < 4; i ++) {
        for (int j = 0;
        j <= i; j ++) System.out.print ("*");

        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 9; i ++) {
        for (int j = 1;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37493552_37493888_1_20
37493552_47537893_1_27
Title: Enumeration Null pointer Exception? 
----------------------------------------

private void findNext () {
    next = null;
    for (; pos < size; pos ++) {
        next = headers.getName (pos).toString ();
        for (int j = 0;
        j < pos; j ++) {
            if (headers.getName (j).equalsIgnoreCase (next)) {
                next = null;
                break;
            }
        }
        if (next != null) {
            break;
        }
    }
    pos ++;
}
----------------------------------------

private void findNext () {
    next = null;
    for (; pos < size; pos ++) {
        MessageBytes mb = headers.getName (pos);
        if (mb != null) {
            next = mb.toString ();
        }
        for (int j = 0;
        j < pos; j ++) {
            mb = headers.getName (j);
            if (mb != null && next != null && mb.equalsIgnoreCase (next)) {
                next = null;
                break;
            }
        }
        if (next != null) {
            break;
        }
    }
    pos ++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37494958_37495034_5_31
37494958_37495084_2_34
Title: can i store an array in to another array? 
----------------------------------------

public static void main (String [] args) {
    String [] boys = {"shivam", "shubham", "sagar", "Tushar", "tarun"};
    String [] girls = {"payal", "preeti", "neetika", "sakshi_jain", "sakshi_singh", "wafa", "Reshu", "Pragya"};
    String [] feelings = {"Love", "Hate", "Adore", "want_to_kill"};
    int x = boys.length;
    int y = girls.length;
    int z = feelings.length;
    for (int i = 0;
    i < 10; i ++) {
        int rand1 = (int) (Math.random () * x);
        int rand2 = (int) (Math.random () * y);
        int rand3 = (int) (Math.random () * z);
        String phase1 = girls [rand2] + " " + feelings [rand3] + " " + boys [rand1];
        String phase2 = boys [rand1] + " " + feelings [rand3] + " " + girls [rand2];
        ArrayList < Phase > phase = new ArrayList < > ();
        phase.add (new Phase (phase1, phase2));
        int p = phase.size ();
        int q = (int) (Math.random () * p);
        System.out.println (phase.get (q));
        System.out.println ("**************");
    }
}
----------------------------------------

public static void main (String args []) {
    String [] boys = {"shivam", "shubham", "sagar", "Tushar", "tarun"};
    String [] girls = {"payal", "preeti", "neetika", "sakshi_jain", "sakshi_singh", "wafa", "Reshu", "Pragya"};
    String [] feelings = {"Love", "Hate", "Adore", "want_to_kill"};
    String [] [] emotions = new String [2] [];
    emotions [0] = new String [boys.length];
    emotions [1] = new String [girls.length];
    for (int i = 0;
    i < boys.length; i ++) {
        String subject = boys [i];
        String verb = getRandomItem (feelings);
        String object = getRandomItem (girls);
        emotions [0] [i] = subject + " " + verb + " " + object;
    }
    for (int i = 0;
    i < girls.length; i ++) {
        String subject = girls [i];
        String verb = getRandomItem (feelings);
        String object = getRandomItem (boys);
        emotions [1] [i] = subject + " " + verb + " " + object;
    }
    for (int i = 0;
    i < emotions.length; i ++) {
        for (int j = 0;
        j < emotions [i].length; j ++) {
            System.out.println (emotions [i] [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37509088_37509184_5_70
37509088_37509335_1_36
Title: Java not printing doubles with a fractional part 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Java Calculator by Ulisse");
    Scanner in = new Scanner (System.in);
    while (true) {
        System.out.print ("><![CDATA[ ");
        String term = in.next ();
        String [] splitted = new String [] {"", ""};
        char op = ' ';
        for (int i = 0;
        i < term.length (); i ++) {
            char c = term.charAt (i);
            switch (c) {
                case '+' :
                case '*' :
                case '-' :
                case '/' :
                case '^' :
                    op = c;
                    break;
                default :
                    if (op == ' ') {
                        splitted [0] += c;
                    } else {
                        splitted [1] += c;
                    }
                    break;
            }
        }
        double a = Double.parseDouble (splitted [0]);
        double b = Double.parseDouble (splitted [1]);
        System.out.print ("" + a + op + b + "=");
        double result = 0;
        switch (op) {
            case '+' :
                result = a + b;
                break;
            case '-' :
                result = a - b;
                break;
            case '*' :
                result = a * b;
                break;
            case '/' :
                result = a / b;
                break;
            case '^' :
                result = Math.pow (a, b);
                break;
        }
        System.out.println (result);
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Java Calculator by Ulisse");
    double a;
    double b;
    String op;
    while (true) {
        Scanner in = new Scanner (System.in);
        System.out.print ("><![CDATA[ ");
        a = Double.parseDouble (in.next ().replace (",", "."));
        op = in.next ();
        b = Double.parseDouble (in.next ().replace (",", "."));
        System.out.println (a + " " + b + " " + op);
        if (op.contains ("+")) {
            System.out.println (a + "" + op + "" + b + "=" + (a + b));
        }
        if (op.contains ("-")) {
            System.out.println (a + "" + op + "" + b + "=" + (a - b));
        }
        if (op.contains ("*")) {
            System.out.println (a + "" + op + "" + b + "=" + (a * b));
        }
        if (op.contains ("/")) {
            System.out.println (a + "" + op + "" + b + "=" + (a / b));
        }
        if (op.contains ("^")) {
            System.out.println (a + "" + op + "" + b + "=" + (Math.pow (a, b)));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37526942_44126645_224_234
37526942_44126645_79_87
Title: Quickblox One-to-one Video Call 
----------------------------------------

public void onClick (View v) {
    qbrtcSession.acceptCall (userInfo);
    receive.setVisibility (View.GONE);
    SetCallButtonsDialing (qbrtcSession, userInfo);
    StartTimer ();
    if (mp != null && mp.isPlaying ()) {
        mp.stop ();
    }
}
----------------------------------------

public void onClick (View v) {
    if (micE) {
        micE = false;
        AudioManage ();
    } else {
        micE = true;
        AudioManage ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37526942_44126645_224_234
37526942_44126645_92_100
Title: Quickblox One-to-one Video Call 
----------------------------------------

public void onClick (View v) {
    qbrtcSession.acceptCall (userInfo);
    receive.setVisibility (View.GONE);
    SetCallButtonsDialing (qbrtcSession, userInfo);
    StartTimer ();
    if (mp != null && mp.isPlaying ()) {
        mp.stop ();
    }
}
----------------------------------------

public void onClick (View v) {
    if (vidE) {
        vidE = false;
        VideoManage ();
    } else {
        vidE = true;
        VideoManage ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37526942_44126645_79_87
37526942_44126645_92_100
Title: Quickblox One-to-one Video Call 
----------------------------------------

public void onClick (View v) {
    if (micE) {
        micE = false;
        AudioManage ();
    } else {
        micE = true;
        AudioManage ();
    }
}
----------------------------------------

public void onClick (View v) {
    if (vidE) {
        vidE = false;
        VideoManage ();
    } else {
        vidE = true;
        VideoManage ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37527154_37527514_1_10
37527154_37543775_1_26
Title: How to check if a field has an annotation when using reflection 
----------------------------------------

public static List < Field > seekFieldsWithAnnotations (Object o) {
    List < Field > fieldsWithAnnotations = new ArrayList < > ();
    for (final Field field : o.getClass ().getDeclaredFields ()) {
        Annotation [] declaredAnnotations = field.getDeclaredAnnotations ();
        if (declaredAnnotations.length > 0) {
            fieldsWithAnnotations.add (field);
        }
    }
    return fieldsWithAnnotations;
}
----------------------------------------

public static StringBuilder seekFieldsWithAnnotations (Object object) {
    Class < ? > c = object.getClass ();
    StringBuilder sb = new StringBuilder ();
    Field [] fieldsArr = c.getDeclaredFields ();
    List < Field > allFields = new ArrayList < > (Arrays.asList (fieldsArr));
    for (Field field : allFields) {
        if (field.getDeclaredAnnotations ().length > 0) {
            Annotation [] fieldAnnots = field.getDeclaredAnnotations ();
            sb.append ("Field Name: " + field.getName () + "\nAnnotations: ");
            for (int i = 0;
            i < fieldAnnots.length; i ++) {
                if (fieldAnnots.length == 1 || fieldAnnots.length - i == 1) {
                    sb.append (fieldAnnots [i].toString () + "\n\n");
                } else {
                    sb.append (fieldAnnots [i].toString () + ", ");
                }
            }
        } else {
            System.out.println ("\"" + field.getName () + "\" has no annotations.\n");
        }
    }
    return sb;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37536372_37536406_45_53
37536372_37536406_55_63
Title: connect intellij idea to sql server database 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (Statement statement) {
    try {
        if (statement != null) {
            statement.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37536372_37536406_45_53
37536372_37536406_65_73
Title: connect intellij idea to sql server database 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet resultSet) {
    try {
        if (resultSet != null) {
            resultSet.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
37536372_37536406_55_63
37536372_37536406_65_73
Title: connect intellij idea to sql server database 
----------------------------------------

public static void close (Statement statement) {
    try {
        if (statement != null) {
            statement.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet resultSet) {
    try {
        if (resultSet != null) {
            resultSet.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

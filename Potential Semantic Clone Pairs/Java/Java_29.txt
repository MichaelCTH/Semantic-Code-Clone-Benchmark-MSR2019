$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19299193_19299535_8_17
19299193_19299574_1_14
Title: How to loop user input in Java 
----------------------------------------

public static void main (String [] args) {
    String [] kittenNames = new int [NUMBER_OF_KITTENS];
    Scanner scan = new Scanner (System.in);
    for (int i = 0;
    i < NUMBER_OF_KITTENS; ++ i) {
        System.out.println ("What is the name of kitten number " + (i + 1) + "?");
        kittenNames [i] = scan.nextLine ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    ArrayList < String > kittenNames = new ArrayList < > ();
    int number = 3;
    for (int i = 1;
    i < number; i ++) {
        System.out.printf ("What is the %s kitten's name?\n", ordinal (i));
        kittenNames.add (scan.nextLine ());
    }
    System.out.println ("===============================================");
    for (String name : kittenNames) {
        System.out.println (name);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19306336_29566046_16_29
19306336_35950997_1_15
Title: Recursive method to print array 
----------------------------------------

public static void print (int array [], int i) {
    System.out.println (array [i]);
    if (i == Printarray.max) {
        Printarray.max --;
        return;
    } else {
        print (array, i + 1);
    }
}
----------------------------------------

private static void print (int [] [] mat, int i, int j) {
    if (mat == null) {
        return;
    }
    if (i == mat.length || j == mat [0].length) {
        return;
    }
    System.out.print (mat [i] [j] + " ");
    if (j == mat [0].length - 1) {
        System.out.println ();
        print (mat, i + 1, 0);
    }
    print (mat, i, j + 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19306629_19307047_1_34
19306629_19307227_1_22
Title: How do we draw with java? 
----------------------------------------

public static void DrawMeACircle (int posX, int posY, int radius) {
    String [] result = new String [posY + radius * 2 + 1];
    for (int j = 0;
    j < posY + radius * 2 + 1; j ++) {
        result [j] = "";
        for (int i = 0;
        i < posX + radius * 2 + 1; i ++) {
            float pointDistance = dist (i, j, posX, posY);
            if (pointDistance < radius * 2) result [j] += "#";
            else result [j] += " ";

        }
    }
    boolean wholeLine = true;
    for (int j = 0;
    j < result.length; j ++) {
        boolean started = false;
        if (! wholeLine && j < result.length - 1 && ! result [j + 1].contains ("#")) wholeLine = true;

        if (! wholeLine) for (int i = 0;
        i < result [j].length () - 1; i ++) {
            if (result [j].charAt (i) != '#') continue;

            if (! started) started = true;
            else if (started && result [j].charAt (i + 1) != '#') {
            } else result [j] = result [j].substring (0, i) + " " + result [j].substring (i + 1);

        }

        if (wholeLine && result [j].contains ("#")) wholeLine = false;

        System.out.println (result [j]);
    }
}
----------------------------------------

public static void DrawMeACircle (int posX, int posY, int radius) {
    int h = 10;
    int k = 5;
    int x = posX - h;
    int y = posY - k;
    for (int i = 0;
    i <= 2 * posX; i ++) {
        for (int j = 0;
        j <= 2 * posY; j ++) {
            double dx = (x - i);
            double dy = (y - j);
            if (Math.abs (dx * dx + dy * dy - radius * radius) < 5) {
                System.out.print ("*");
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_19898261_50_59
19309203_19898261_60_69
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void printBottomTriangle (int rows, int startSpaces) {
    int x = 1 + (2 * (rows - 1));
    for (int j = startSpaces;
    j <= (rows) && x > 0; j ++, x -= 2) {
        printSpaces (j);
        printStars (x);
        System.out.print ("\n");
    }
}
----------------------------------------

public static void printBottomTriangle (int rows) {
    int x = 1 + (2 * (rows - 1));
    for (int j = 0;
    j <= (rows - 1) && x > 0; j ++, x -= 2) {
        printSpaces (j);
        printStars (x);
        System.out.print ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_19898261_5_19
19309203_22729836_9_46
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int reader;
    Scanner kBoard = new Scanner (System.in);
    do {
        System.out.println ("Insert a number of rows: ");
        reader = kBoard.nextInt ();
        printDiamond (reader);
    } while (reader != 0);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int input = in.nextInt ();
    int min = 1;
    for (int i = 0;
    i < input; i ++) {
        for (int j = input - 1;
        j > i; j --) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < min; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        min += 2;
        System.out.println ();
    }
    int z = input + input - 3;
    for (int i = 1;
    i < input; i ++) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < z; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        z -= 2;
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_19898261_5_19
19309203_29688539_3_35
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int reader;
    Scanner kBoard = new Scanner (System.in);
    do {
        System.out.println ("Insert a number of rows: ");
        reader = kBoard.nextInt ();
        printDiamond (reader);
    } while (reader != 0);
}
----------------------------------------

public static void main (String [] args) {
    int numRows = 151;
    int midrow = (numRows + 1) / 2;
    int diff = 0;
    for (int i = 1;
    i < numRows + 1; i ++) {
        for (int j = 1;
        j < numRows + 1; j ++) {
            if (((midrow - diff) <= j && (j <= midrow + diff))) {
                System.out.print ("*");
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
        if (i < midrow) {
            diff ++;
        } else {
            diff --;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_19898261_5_19
19309203_30785653_8_36
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int reader;
    Scanner kBoard = new Scanner (System.in);
    do {
        System.out.println ("Insert a number of rows: ");
        reader = kBoard.nextInt ();
        printDiamond (reader);
    } while (reader != 0);
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        if (i <= 5) {
            for (int k = 1;
            k <= 5 - i; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= i; j ++) {
                System.out.print (" *");
            }
        }
        if (i > 5) {
            for (int k = 0;
            k <= i - 6; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= 10 - i; j ++) {
                System.out.print (" *");
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_19898261_5_19
19309203_33406795_2_23
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int reader;
    Scanner kBoard = new Scanner (System.in);
    do {
        System.out.println ("Insert a number of rows: ");
        reader = kBoard.nextInt ();
        printDiamond (reader);
    } while (reader != 0);
}
----------------------------------------

public static void main (String [] args) {
    int size = 9, odd = 1, nos = size / 2;
    for (int i = 1;
    i <= size; i ++) {
        for (int k = nos;
        k >= 1; k --) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= odd; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
        if (i < size / 2 + 1) {
            odd += 2;
            nos -= 1;
        } else {
            odd -= 2;
            nos += 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_19898261_5_19
19309203_38259575_4_49
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int reader;
    Scanner kBoard = new Scanner (System.in);
    do {
        System.out.println ("Insert a number of rows: ");
        reader = kBoard.nextInt ();
        printDiamond (reader);
    } while (reader != 0);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    while (true) {
        System.out.println ("Let's Creat Diamonds");
        System.out.println ("If number increases Diamonds gets bigger. Please input number lager than 1 : ");
        int user_input = sc.nextInt ();
        System.out.println ("");
        int x = user_input;
        int front_space = - 5;
        for (int i = 0;
        i < 2 * user_input + 1; i ++) {
            for (int a = front_space;
            a < Math.abs (i - user_input); a ++) {
                System.out.print ("    ");
            }
            if (i < user_input + 1) {
                for (int b = 0;
                b < 2 * i + 1; b ++) {
                    System.out.print ("*  ");
                }
            } else if (i > user_input) {
                for (int c = 0;
                c < 2 * x - 1; c ++) {
                    System.out.print ("*  ");
                }
                x --;
            }

            System.out.print ('\n');
        }
        System.out.println ("\nRun Again? 1 = Run,  2 = Exit : ");
        int restart = sc.nextInt ();
        System.out.println ("");
        if (restart == 2) {
            System.out.println ("Exit the Program.");
            System.exit (0);
            sc.close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_19898261_5_19
19309203_38610357_3_34
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int reader;
    Scanner kBoard = new Scanner (System.in);
    do {
        System.out.println ("Insert a number of rows: ");
        reader = kBoard.nextInt ();
        printDiamond (reader);
    } while (reader != 0);
}
----------------------------------------

public static void main (String [] args) {
    int le = 11;
    int c = 0;
    int j1 = (le / 2) + 1;
    int j2 = le - j1;
    for (int i = 1;
    i <= le; i ++) {
        if (c < j1) {
            for (int k = (j1 - i);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = 1;
            j <= i; j ++) {
                System.out.print ("*" + " ");
            }
            c ++;
            System.out.println ();
        } else {
            for (int k = (i - j1);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = (le - i + 1);
            j > 0; j --) {
                System.out.print ("*" + " ");
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_22729836_9_46
19309203_29688539_3_35
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int input = in.nextInt ();
    int min = 1;
    for (int i = 0;
    i < input; i ++) {
        for (int j = input - 1;
        j > i; j --) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < min; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        min += 2;
        System.out.println ();
    }
    int z = input + input - 3;
    for (int i = 1;
    i < input; i ++) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < z; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        z -= 2;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int numRows = 151;
    int midrow = (numRows + 1) / 2;
    int diff = 0;
    for (int i = 1;
    i < numRows + 1; i ++) {
        for (int j = 1;
        j < numRows + 1; j ++) {
            if (((midrow - diff) <= j && (j <= midrow + diff))) {
                System.out.print ("*");
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
        if (i < midrow) {
            diff ++;
        } else {
            diff --;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_22729836_9_46
19309203_30785653_8_36
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int input = in.nextInt ();
    int min = 1;
    for (int i = 0;
    i < input; i ++) {
        for (int j = input - 1;
        j > i; j --) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < min; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        min += 2;
        System.out.println ();
    }
    int z = input + input - 3;
    for (int i = 1;
    i < input; i ++) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < z; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        z -= 2;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        if (i <= 5) {
            for (int k = 1;
            k <= 5 - i; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= i; j ++) {
                System.out.print (" *");
            }
        }
        if (i > 5) {
            for (int k = 0;
            k <= i - 6; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= 10 - i; j ++) {
                System.out.print (" *");
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_22729836_9_46
19309203_33406795_2_23
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int input = in.nextInt ();
    int min = 1;
    for (int i = 0;
    i < input; i ++) {
        for (int j = input - 1;
        j > i; j --) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < min; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        min += 2;
        System.out.println ();
    }
    int z = input + input - 3;
    for (int i = 1;
    i < input; i ++) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < z; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        z -= 2;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int size = 9, odd = 1, nos = size / 2;
    for (int i = 1;
    i <= size; i ++) {
        for (int k = nos;
        k >= 1; k --) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= odd; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
        if (i < size / 2 + 1) {
            odd += 2;
            nos -= 1;
        } else {
            odd -= 2;
            nos += 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_22729836_9_46
19309203_38259575_4_49
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int input = in.nextInt ();
    int min = 1;
    for (int i = 0;
    i < input; i ++) {
        for (int j = input - 1;
        j > i; j --) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < min; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        min += 2;
        System.out.println ();
    }
    int z = input + input - 3;
    for (int i = 1;
    i < input; i ++) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < z; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        z -= 2;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    while (true) {
        System.out.println ("Let's Creat Diamonds");
        System.out.println ("If number increases Diamonds gets bigger. Please input number lager than 1 : ");
        int user_input = sc.nextInt ();
        System.out.println ("");
        int x = user_input;
        int front_space = - 5;
        for (int i = 0;
        i < 2 * user_input + 1; i ++) {
            for (int a = front_space;
            a < Math.abs (i - user_input); a ++) {
                System.out.print ("    ");
            }
            if (i < user_input + 1) {
                for (int b = 0;
                b < 2 * i + 1; b ++) {
                    System.out.print ("*  ");
                }
            } else if (i > user_input) {
                for (int c = 0;
                c < 2 * x - 1; c ++) {
                    System.out.print ("*  ");
                }
                x --;
            }

            System.out.print ('\n');
        }
        System.out.println ("\nRun Again? 1 = Run,  2 = Exit : ");
        int restart = sc.nextInt ();
        System.out.println ("");
        if (restart == 2) {
            System.out.println ("Exit the Program.");
            System.exit (0);
            sc.close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_22729836_9_46
19309203_38610357_3_34
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int input = in.nextInt ();
    int min = 1;
    for (int i = 0;
    i < input; i ++) {
        for (int j = input - 1;
        j > i; j --) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < min; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        min += 2;
        System.out.println ();
    }
    int z = input + input - 3;
    for (int i = 1;
    i < input; i ++) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < z; k ++) {
            if (k % 2 == 0) {
                System.out.print ("*");
            } else {
                System.out.print (".");
            }
        }
        z -= 2;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int le = 11;
    int c = 0;
    int j1 = (le / 2) + 1;
    int j2 = le - j1;
    for (int i = 1;
    i <= le; i ++) {
        if (c < j1) {
            for (int k = (j1 - i);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = 1;
            j <= i; j ++) {
                System.out.print ("*" + " ");
            }
            c ++;
            System.out.println ();
        } else {
            for (int k = (i - j1);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = (le - i + 1);
            j > 0; j --) {
                System.out.print ("*" + " ");
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_29688539_3_35
19309203_30785653_8_36
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int numRows = 151;
    int midrow = (numRows + 1) / 2;
    int diff = 0;
    for (int i = 1;
    i < numRows + 1; i ++) {
        for (int j = 1;
        j < numRows + 1; j ++) {
            if (((midrow - diff) <= j && (j <= midrow + diff))) {
                System.out.print ("*");
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
        if (i < midrow) {
            diff ++;
        } else {
            diff --;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        if (i <= 5) {
            for (int k = 1;
            k <= 5 - i; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= i; j ++) {
                System.out.print (" *");
            }
        }
        if (i > 5) {
            for (int k = 0;
            k <= i - 6; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= 10 - i; j ++) {
                System.out.print (" *");
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_29688539_3_35
19309203_33406795_2_23
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int numRows = 151;
    int midrow = (numRows + 1) / 2;
    int diff = 0;
    for (int i = 1;
    i < numRows + 1; i ++) {
        for (int j = 1;
        j < numRows + 1; j ++) {
            if (((midrow - diff) <= j && (j <= midrow + diff))) {
                System.out.print ("*");
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
        if (i < midrow) {
            diff ++;
        } else {
            diff --;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int size = 9, odd = 1, nos = size / 2;
    for (int i = 1;
    i <= size; i ++) {
        for (int k = nos;
        k >= 1; k --) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= odd; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
        if (i < size / 2 + 1) {
            odd += 2;
            nos -= 1;
        } else {
            odd -= 2;
            nos += 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_29688539_3_35
19309203_38259575_4_49
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int numRows = 151;
    int midrow = (numRows + 1) / 2;
    int diff = 0;
    for (int i = 1;
    i < numRows + 1; i ++) {
        for (int j = 1;
        j < numRows + 1; j ++) {
            if (((midrow - diff) <= j && (j <= midrow + diff))) {
                System.out.print ("*");
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
        if (i < midrow) {
            diff ++;
        } else {
            diff --;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    while (true) {
        System.out.println ("Let's Creat Diamonds");
        System.out.println ("If number increases Diamonds gets bigger. Please input number lager than 1 : ");
        int user_input = sc.nextInt ();
        System.out.println ("");
        int x = user_input;
        int front_space = - 5;
        for (int i = 0;
        i < 2 * user_input + 1; i ++) {
            for (int a = front_space;
            a < Math.abs (i - user_input); a ++) {
                System.out.print ("    ");
            }
            if (i < user_input + 1) {
                for (int b = 0;
                b < 2 * i + 1; b ++) {
                    System.out.print ("*  ");
                }
            } else if (i > user_input) {
                for (int c = 0;
                c < 2 * x - 1; c ++) {
                    System.out.print ("*  ");
                }
                x --;
            }

            System.out.print ('\n');
        }
        System.out.println ("\nRun Again? 1 = Run,  2 = Exit : ");
        int restart = sc.nextInt ();
        System.out.println ("");
        if (restart == 2) {
            System.out.println ("Exit the Program.");
            System.exit (0);
            sc.close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_29688539_3_35
19309203_38610357_3_34
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int numRows = 151;
    int midrow = (numRows + 1) / 2;
    int diff = 0;
    for (int i = 1;
    i < numRows + 1; i ++) {
        for (int j = 1;
        j < numRows + 1; j ++) {
            if (((midrow - diff) <= j && (j <= midrow + diff))) {
                System.out.print ("*");
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
        if (i < midrow) {
            diff ++;
        } else {
            diff --;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int le = 11;
    int c = 0;
    int j1 = (le / 2) + 1;
    int j2 = le - j1;
    for (int i = 1;
    i <= le; i ++) {
        if (c < j1) {
            for (int k = (j1 - i);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = 1;
            j <= i; j ++) {
                System.out.print ("*" + " ");
            }
            c ++;
            System.out.println ();
        } else {
            for (int k = (i - j1);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = (le - i + 1);
            j > 0; j --) {
                System.out.print ("*" + " ");
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_30785653_8_36
19309203_33406795_2_23
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        if (i <= 5) {
            for (int k = 1;
            k <= 5 - i; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= i; j ++) {
                System.out.print (" *");
            }
        }
        if (i > 5) {
            for (int k = 0;
            k <= i - 6; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= 10 - i; j ++) {
                System.out.print (" *");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int size = 9, odd = 1, nos = size / 2;
    for (int i = 1;
    i <= size; i ++) {
        for (int k = nos;
        k >= 1; k --) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= odd; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
        if (i < size / 2 + 1) {
            odd += 2;
            nos -= 1;
        } else {
            odd -= 2;
            nos += 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_30785653_8_36
19309203_38259575_4_49
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        if (i <= 5) {
            for (int k = 1;
            k <= 5 - i; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= i; j ++) {
                System.out.print (" *");
            }
        }
        if (i > 5) {
            for (int k = 0;
            k <= i - 6; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= 10 - i; j ++) {
                System.out.print (" *");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    while (true) {
        System.out.println ("Let's Creat Diamonds");
        System.out.println ("If number increases Diamonds gets bigger. Please input number lager than 1 : ");
        int user_input = sc.nextInt ();
        System.out.println ("");
        int x = user_input;
        int front_space = - 5;
        for (int i = 0;
        i < 2 * user_input + 1; i ++) {
            for (int a = front_space;
            a < Math.abs (i - user_input); a ++) {
                System.out.print ("    ");
            }
            if (i < user_input + 1) {
                for (int b = 0;
                b < 2 * i + 1; b ++) {
                    System.out.print ("*  ");
                }
            } else if (i > user_input) {
                for (int c = 0;
                c < 2 * x - 1; c ++) {
                    System.out.print ("*  ");
                }
                x --;
            }

            System.out.print ('\n');
        }
        System.out.println ("\nRun Again? 1 = Run,  2 = Exit : ");
        int restart = sc.nextInt ();
        System.out.println ("");
        if (restart == 2) {
            System.out.println ("Exit the Program.");
            System.exit (0);
            sc.close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_30785653_8_36
19309203_38610357_3_34
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        if (i <= 5) {
            for (int k = 1;
            k <= 5 - i; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= i; j ++) {
                System.out.print (" *");
            }
        }
        if (i > 5) {
            for (int k = 0;
            k <= i - 6; k ++) {
                System.out.print (" ");
            }
            for (int j = 0;
            j <= 10 - i; j ++) {
                System.out.print (" *");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int le = 11;
    int c = 0;
    int j1 = (le / 2) + 1;
    int j2 = le - j1;
    for (int i = 1;
    i <= le; i ++) {
        if (c < j1) {
            for (int k = (j1 - i);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = 1;
            j <= i; j ++) {
                System.out.print ("*" + " ");
            }
            c ++;
            System.out.println ();
        } else {
            for (int k = (i - j1);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = (le - i + 1);
            j > 0; j --) {
                System.out.print ("*" + " ");
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_33406795_2_23
19309203_38259575_4_49
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int size = 9, odd = 1, nos = size / 2;
    for (int i = 1;
    i <= size; i ++) {
        for (int k = nos;
        k >= 1; k --) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= odd; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
        if (i < size / 2 + 1) {
            odd += 2;
            nos -= 1;
        } else {
            odd -= 2;
            nos += 1;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    while (true) {
        System.out.println ("Let's Creat Diamonds");
        System.out.println ("If number increases Diamonds gets bigger. Please input number lager than 1 : ");
        int user_input = sc.nextInt ();
        System.out.println ("");
        int x = user_input;
        int front_space = - 5;
        for (int i = 0;
        i < 2 * user_input + 1; i ++) {
            for (int a = front_space;
            a < Math.abs (i - user_input); a ++) {
                System.out.print ("    ");
            }
            if (i < user_input + 1) {
                for (int b = 0;
                b < 2 * i + 1; b ++) {
                    System.out.print ("*  ");
                }
            } else if (i > user_input) {
                for (int c = 0;
                c < 2 * x - 1; c ++) {
                    System.out.print ("*  ");
                }
                x --;
            }

            System.out.print ('\n');
        }
        System.out.println ("\nRun Again? 1 = Run,  2 = Exit : ");
        int restart = sc.nextInt ();
        System.out.println ("");
        if (restart == 2) {
            System.out.println ("Exit the Program.");
            System.exit (0);
            sc.close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_33406795_2_23
19309203_38610357_3_34
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    int size = 9, odd = 1, nos = size / 2;
    for (int i = 1;
    i <= size; i ++) {
        for (int k = nos;
        k >= 1; k --) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= odd; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
        if (i < size / 2 + 1) {
            odd += 2;
            nos -= 1;
        } else {
            odd -= 2;
            nos += 1;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int le = 11;
    int c = 0;
    int j1 = (le / 2) + 1;
    int j2 = le - j1;
    for (int i = 1;
    i <= le; i ++) {
        if (c < j1) {
            for (int k = (j1 - i);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = 1;
            j <= i; j ++) {
                System.out.print ("*" + " ");
            }
            c ++;
            System.out.println ();
        } else {
            for (int k = (i - j1);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = (le - i + 1);
            j > 0; j --) {
                System.out.print ("*" + " ");
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309203_38259575_4_49
19309203_38610357_3_34
Title: How to make a diamond using Nested For Loops 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    while (true) {
        System.out.println ("Let's Creat Diamonds");
        System.out.println ("If number increases Diamonds gets bigger. Please input number lager than 1 : ");
        int user_input = sc.nextInt ();
        System.out.println ("");
        int x = user_input;
        int front_space = - 5;
        for (int i = 0;
        i < 2 * user_input + 1; i ++) {
            for (int a = front_space;
            a < Math.abs (i - user_input); a ++) {
                System.out.print ("    ");
            }
            if (i < user_input + 1) {
                for (int b = 0;
                b < 2 * i + 1; b ++) {
                    System.out.print ("*  ");
                }
            } else if (i > user_input) {
                for (int c = 0;
                c < 2 * x - 1; c ++) {
                    System.out.print ("*  ");
                }
                x --;
            }

            System.out.print ('\n');
        }
        System.out.println ("\nRun Again? 1 = Run,  2 = Exit : ");
        int restart = sc.nextInt ();
        System.out.println ("");
        if (restart == 2) {
            System.out.println ("Exit the Program.");
            System.exit (0);
            sc.close ();
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int le = 11;
    int c = 0;
    int j1 = (le / 2) + 1;
    int j2 = le - j1;
    for (int i = 1;
    i <= le; i ++) {
        if (c < j1) {
            for (int k = (j1 - i);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = 1;
            j <= i; j ++) {
                System.out.print ("*" + " ");
            }
            c ++;
            System.out.println ();
        } else {
            for (int k = (i - j1);
            k > 0; k --) {
                System.out.print (" ");
            }
            for (int j = (le - i + 1);
            j > 0; j --) {
                System.out.print ("*" + " ");
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19309952_19310027_20_30
19309952_19310338_27_39
Title: Storing an object into a list doesn't work in Java? 
----------------------------------------

public static void main (String [] args) {
    anotherclass obj = new anotherclass ();
    obj.filldata ();
    for (int i = 0;
    i <= obj.alldata.size () - 1; i ++) {
        System.out.println (obj.alldata.get (i).a);
        System.out.println (obj.alldata.get (i).b);
    }
}
----------------------------------------

public static void main (String [] args) {
    StackClass stack = new StackClass ();
    AnotherClass obj = stack.new AnotherClass ();
    obj.fillData ();
    for (int i = 0;
    i <= obj.allData.size () - 1; i ++) {
        System.out.println ("Objec[" + i + "].a-" + obj.allData.get (i).a);
        System.out.println ("Objec[" + i + "].b-" + obj.allData.get (i).b);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1932201_1941999_27_58
1932201_1949889_102_113
Title: parallel computation for an Iterator of elements in Java 
----------------------------------------

public void run () {
    ArrayList < Throwable > errorLocal = new ArrayList < Throwable > ();
    HashMap < Integer, Double > resultsLocal = new HashMap < Integer, Double > ();
    while (true) {
        BigThing thing = null;
        try {
            synchronized (it) {
                if (it.hasNext ()) {
                    thing = it.next ();
                }
            }
        } catch (Exception e) {
            thing = null;
        }
        if (thing == null) {
            synchronized (errors) {
                errors.addAll (errorLocal);
            }
            synchronized (results) {
                results.putAll (resultsLocal);
            }
            latch.countDown ();
            break;
        }
        try {
            resultsLocal.put (thing.getId (), calc.calc (thing));
        } catch (Exception e) {
            errorLocal.add (e);
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        T o = it.nextOrNull ();
        if (o == null) {
            return;
        }
        elementProcessor.processElement (o);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1932201_1941999_27_58
1932201_1950952_9_20
Title: parallel computation for an Iterator of elements in Java 
----------------------------------------

public void run () {
    ArrayList < Throwable > errorLocal = new ArrayList < Throwable > ();
    HashMap < Integer, Double > resultsLocal = new HashMap < Integer, Double > ();
    while (true) {
        BigThing thing = null;
        try {
            synchronized (it) {
                if (it.hasNext ()) {
                    thing = it.next ();
                }
            }
        } catch (Exception e) {
            thing = null;
        }
        if (thing == null) {
            synchronized (errors) {
                errors.addAll (errorLocal);
            }
            synchronized (results) {
                results.putAll (resultsLocal);
            }
            latch.countDown ();
            break;
        }
        try {
            resultsLocal.put (thing.getId (), calc.calc (thing));
        } catch (Exception e) {
            errorLocal.add (e);
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        BigThing thing = null;
        synchronized (it) {
            thing = (it.hasNext ()) ? it.next () : null;
        }
        if (thing == null) {
            break;
        }
        results.put (thing.getId (), calc.calc (thing));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1932201_1949889_102_113
1932201_1950952_9_20
Title: parallel computation for an Iterator of elements in Java 
----------------------------------------

public void run () {
    while (true) {
        T o = it.nextOrNull ();
        if (o == null) {
            return;
        }
        elementProcessor.processElement (o);
    }
}
----------------------------------------

public void run () {
    while (true) {
        BigThing thing = null;
        synchronized (it) {
            thing = (it.hasNext ()) ? it.next () : null;
        }
        if (thing == null) {
            break;
        }
        results.put (thing.getId (), calc.calc (thing));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19324688_19324759_1_27
19324688_19324761_1_19
Title: Avoiding out of bounds with alternating Lists 
----------------------------------------

public List < Integer > alternate (List < Integer > list1, List < Integer > list2) {
    List < Integer > list3 = new ArrayList < Integer > ();
    List < Integer > shortest, longest;
    if (list1.size () < list2.size ()) {
        shortest = list1;
        longest = list2;
    } else {
        shortest = list2;
        longest = list1;
    }
    int i, last;
    for (i = 0, last = shortest.size (); i < last; i ++) {
        list3.add (list1.get (i));
        list3.add (list2.get (i));
    }
    last = longest.size ();
    for (; i < last; i ++) {
        list3.add (longest.get (i));
    }
    return list3;
}
----------------------------------------

public static List < Integer > alternate (List < Integer > list1, List < Integer > list2) {
    Iterator < Integer > iter1 = list1.iterator ();
    Iterator < Integer > iter2 = list2.iterator ();
    List < Integer > merged = new ArrayList < > ();
    while (iter1.hasNext () || iter2.hasNext ()) {
        if (iter1.hasNext ()) {
            merged.add (iter1.next ());
        }
        if (iter2.hasNext ()) {
            merged.add (iter2.next ());
        }
    }
    return merged;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19324688_19324759_1_27
19324688_19324828_1_22
Title: Avoiding out of bounds with alternating Lists 
----------------------------------------

public List < Integer > alternate (List < Integer > list1, List < Integer > list2) {
    List < Integer > list3 = new ArrayList < Integer > ();
    List < Integer > shortest, longest;
    if (list1.size () < list2.size ()) {
        shortest = list1;
        longest = list2;
    } else {
        shortest = list2;
        longest = list1;
    }
    int i, last;
    for (i = 0, last = shortest.size (); i < last; i ++) {
        list3.add (list1.get (i));
        list3.add (list2.get (i));
    }
    last = longest.size ();
    for (; i < last; i ++) {
        list3.add (longest.get (i));
    }
    return list3;
}
----------------------------------------

public static List < Integer > alternate (List < Integer > list1, List < Integer > list2) {
    List < Integer > template = new LinkedList < > ();
    Iterator < Integer > it1 = list1.iterator ();
    Iterator < Integer > it2 = list2.iterator ();
    while (it1.hasNext () && it2.hasNext ()) {
        template.add (it1.next ());
        template.add (it2.next ());
    }
    while (it1.hasNext ()) {
        template.add (it1.next ());
    }
    while (it2.hasNext ()) {
        template.add (it2.next ());
    }
    return template;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19324688_19324761_1_19
19324688_19324828_1_22
Title: Avoiding out of bounds with alternating Lists 
----------------------------------------

public static List < Integer > alternate (List < Integer > list1, List < Integer > list2) {
    Iterator < Integer > iter1 = list1.iterator ();
    Iterator < Integer > iter2 = list2.iterator ();
    List < Integer > merged = new ArrayList < > ();
    while (iter1.hasNext () || iter2.hasNext ()) {
        if (iter1.hasNext ()) {
            merged.add (iter1.next ());
        }
        if (iter2.hasNext ()) {
            merged.add (iter2.next ());
        }
    }
    return merged;
}
----------------------------------------

public static List < Integer > alternate (List < Integer > list1, List < Integer > list2) {
    List < Integer > template = new LinkedList < > ();
    Iterator < Integer > it1 = list1.iterator ();
    Iterator < Integer > it2 = list2.iterator ();
    while (it1.hasNext () && it2.hasNext ()) {
        template.add (it1.next ());
        template.add (it2.next ());
    }
    while (it1.hasNext ()) {
        template.add (it1.next ());
    }
    while (it2.hasNext ()) {
        template.add (it2.next ());
    }
    return template;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1932490_1932651_1_38
1932490_47916383_7_27
Title: Java generating sound 
----------------------------------------

public static void main (String [] args) throws Exception {
    SawtoothOscillatorBL osc;
    LineOut lineOut;
    Synth.startEngine (0);
    osc = new SawtoothOscillatorBL ();
    lineOut = new LineOut ();
    osc.output.connect (0, lineOut.input, 0);
    osc.output.connect (0, lineOut.input, 1);
    osc.start ();
    lineOut.start ();
    osc.frequency.set (200.0);
    osc.amplitude.set (0.8);
    Synth.sleepForTicks (400);
    osc.frequency.set (300.0);
    Synth.sleepForTicks (400);
    osc.stop ();
    lineOut.stop ();
    osc.delete ();
    lineOut.delete ();
    Synth.stopEngine ();
}
----------------------------------------

public static void main (String [] args) throws LineUnavailableException {
    System.out.println ("Make sound");
    byte [] buf = new byte [2];
    int frequency = 44100;
    AudioFormat af = new AudioFormat ((float) frequency, 16, 1, true, false);
    SourceDataLine sdl = AudioSystem.getSourceDataLine (af);
    sdl.open ();
    sdl.start ();
    int durationMs = 5000;
    int numberOfTimesFullSinFuncPerSec = 441;
    for (int i = 0;
    i < durationMs * (float) 44100 / 1000; i ++) {
        float numberOfSamplesToRepresentFullSin = (float) frequency / numberOfTimesFullSinFuncPerSec;
        double angle = i / (numberOfSamplesToRepresentFullSin / 2.0) * Math.PI;
        short a = (short) (Math.sin (angle) * 32767);
        buf [0] = (byte) (a & 0xFF);
        buf [1] = (byte) (a>> 8);
        sdl.write (buf, 0, 2);
    }
    sdl.drain ();
    sdl.stop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19327651_23470662_36_64
19327651_34365904_7_41
Title: Java Implementation of Shamir's Secret Sharing 
----------------------------------------

public SecretShare [] split (final BigInteger secret) {
    final int modLength = secret.bitLength () + 1;
    prime = new BigInteger (modLength, CERTAINTY, random);
    final BigInteger [] coeff = new BigInteger [k - 1];
    System.out.println ("Prime Number: " + prime);
    for (int i = 0;
    i < k - 1; i ++) {
        coeff [i] = randomZp (prime);
        System.out.println ("a" + (i + 1) + ": " + coeff [i]);
    }
    final SecretShare [] shares = new SecretShare [n];
    for (int i = 1;
    i <= n; i ++) {
        BigInteger accum = secret;
        for (int j = 1;
        j < k; j ++) {
            final BigInteger t1 = BigInteger.valueOf (i).modPow (BigInteger.valueOf (j), prime);
            final BigInteger t2 = coeff [j - 1].multiply (t1).mod (prime);
            accum = accum.add (t2).mod (prime);
        }
        shares [i - 1] = new SecretShare (i - 1, accum);
        System.out.println ("Share " + shares [i - 1]);
    }
    return shares;
}
----------------------------------------

public static SecretShare [] split (final BigInteger secret, int needed, int available, BigInteger prime, Random random) {
    System.out.println ("Prime Number: " + prime);
    final BigInteger [] coeff = new BigInteger [needed];
    coeff [0] = secret;
    for (int i = 1;
    i < needed; i ++) {
        BigInteger r;
        while (true) {
            r = new BigInteger (prime.bitLength (), random);
            if (r.compareTo (BigInteger.ZERO) > 0 && r.compareTo (prime) < 0) {
                break;
            }
        }
        coeff [i] = r;
    }
    final SecretShare [] shares = new SecretShare [available];
    for (int x = 1;
    x <= available; x ++) {
        BigInteger accum = secret;
        for (int exp = 1;
        exp < needed; exp ++) {
            accum = accum.add (coeff [exp].multiply (BigInteger.valueOf (x).pow (exp).mod (prime))).mod (prime);
        }
        shares [x - 1] = new SecretShare (x, accum);
        System.out.println ("Share " + shares [x - 1]);
    }
    return shares;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19327651_23470662_70_95
19327651_34365904_43_71
Title: Java Implementation of Shamir's Secret Sharing 
----------------------------------------

public BigInteger combine (final SecretShare [] shares, final BigInteger primeNum) {
    BigInteger accum = BigInteger.ZERO;
    for (int i = 0;
    i < k; i ++) {
        BigInteger num = BigInteger.ONE;
        BigInteger den = BigInteger.ONE;
        for (int j = 0;
        j < k; j ++) {
            if (i != j) {
                num = num.multiply (BigInteger.valueOf (- j - 1)).mod (primeNum);
                den = den.multiply (BigInteger.valueOf (i - j)).mod (primeNum);
            }
        }
        System.out.println ("den: " + den + ", num: " + den + ", inv: " + den.modInverse (primeNum));
        final BigInteger value = shares [i].getShare ();
        final BigInteger tmp = value.multiply (num).multiply (den.modInverse (primeNum)).mod (primeNum);
        accum = accum.add (primeNum).add (tmp).mod (primeNum);
        System.out.println ("value: " + value + ", tmp: " + tmp + ", accum: " + accum);
    }
    System.out.println ("The secret is: " + accum);
    return accum;
}
----------------------------------------

public static BigInteger combine (final SecretShare [] shares, final BigInteger prime) {
    BigInteger accum = BigInteger.ZERO;
    for (int formula = 0;
    formula < shares.length; formula ++) {
        BigInteger numerator = BigInteger.ONE;
        BigInteger denominator = BigInteger.ONE;
        for (int count = 0;
        count < shares.length; count ++) {
            if (formula == count) continue;

            int startposition = shares [formula].getNumber ();
            int nextposition = shares [count].getNumber ();
            numerator = numerator.multiply (BigInteger.valueOf (nextposition).negate ()).mod (prime);
            denominator = denominator.multiply (BigInteger.valueOf (startposition - nextposition)).mod (prime);
        }
        BigInteger value = shares [formula].getShare ();
        BigInteger tmp = value.multiply (numerator).multiply (modInverse (denominator, prime));
        accum = prime.add (accum).add (tmp).mod (prime);
    }
    System.out.println ("The secret is: " + accum + "\n");
    return accum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19328818_19328862_1_15
19328818_19328912_1_14
Title: Turn text file into array 
----------------------------------------

public static void loadList () {
    ArrayList < DataClass > pairList = new ArrayList < DataClass > ();
    BufferedReader br = new BufferedReader (new FileReader ("./data.txt"));
    String line;
    while ((line = br.readLine ()) != null) {
        String args [] = line.split (":");
        int first = Integer.valueOf (args [0]);
        int second = Integer.valueOf (args [1]);
        DataClass valPair = new DataClass (first, second);
        pairList.add (valPair);
        System.out.println (valPair.first + " : " + valPair.second);
    }
    br.close ();
}
----------------------------------------

public static void loadList () throws NumberFormatException, IOException {
    BufferedReader br = new BufferedReader (new FileReader ("./data.txt"));
    String line;
    while ((line = br.readLine ()) != null) {
        if (line.trim ().length () == 0) continue;

        String args [];
        args = line.split (":");
        int first = Integer.parseInt (args [0]);
        int second = Integer.parseInt (args [1]);
        System.out.println (first + " : " + second);
    }
    br.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19337418_19337445_3_16
19337418_19337525_3_14
Title: Java: Dividing integers to double doesn't work 
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    int num;
    int max = 100;
    for (num = 0; num <= max; num ++) {
        sum += num;
    }
    double average = ((double) sum) / max;
    System.out.println ("The sum is " + sum);
    System.out.println ("The average is " + average);
}
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    int num;
    for (num = 0; num < 100;) {
        sum += ++ num;
    }
    double average = ((double) sum) / num;
    System.out.println ("The sum is " + sum);
    System.out.println ("The average is " + average);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19349111_19349137_3_14
19349111_19349199_3_13
Title: Counting strings via Scanner 
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scanner = new Scanner (new File ("/Users/myName/Desktop/test.txt"));
    String string = scanner.next ();
    int count = 0;
    while (scanner.hasNextLine ()) {
        string = scanner.nextLine ();
        count += string.split (" ").length;
        System.out.println (count);
    }
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scanner = new Scanner (new File ("/Users/myName/Desktop/test.txt"));
    int count = 0;
    while (scanner.hasNextLine ()) {
        scanner.nextLine ();
        count ++;
        System.out.println (count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19349111_19349137_3_14
19349111_19349308_3_15
Title: Counting strings via Scanner 
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scanner = new Scanner (new File ("/Users/myName/Desktop/test.txt"));
    String string = scanner.next ();
    int count = 0;
    while (scanner.hasNextLine ()) {
        string = scanner.nextLine ();
        count += string.split (" ").length;
        System.out.println (count);
    }
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scanner = new Scanner (new File ("/Users/myName/Desktop/test.txt"));
    int count = 0;
    String string;
    while (scanner.hasNextLine ()) {
        string = scanner.nextLine ();
        count ++;
    }
    System.out.println (string);
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19349111_19349199_3_13
19349111_19349308_3_15
Title: Counting strings via Scanner 
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scanner = new Scanner (new File ("/Users/myName/Desktop/test.txt"));
    int count = 0;
    while (scanner.hasNextLine ()) {
        scanner.nextLine ();
        count ++;
        System.out.println (count);
    }
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scanner = new Scanner (new File ("/Users/myName/Desktop/test.txt"));
    int count = 0;
    String string;
    while (scanner.hasNextLine ()) {
        string = scanner.nextLine ();
        count ++;
    }
    System.out.println (string);
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19352569_31773089_3_24
19352569_33462125_4_23
Title: How to find the Odd and Even numbers in an Array? 
----------------------------------------

public static void main (String [] args) {
    Scanner s = new Scanner (System.in);
    System.out.println ("enter number Elements in Array");
    int n = s.nextInt ();
    int arr [] = new int [n];
    System.out.println ("enter Elements ");
    for (int i = 0;
    i < n; i ++) {
        arr [i] = s.nextInt ();
    }
    int [] odd = filterOdd (arr);
    try {
        for (int i = 0;
        i < n; i ++) {
            System.out.println ("Odd" + odd [i]);
        }
    } catch (ArrayIndexOutOfBoundsException e) {
    }
    int [] even = filterEven (arr);
    try {
        for (int i = 0;
        i < n; i ++) {
            System.out.println ("Even" + even [i]);
        }
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
----------------------------------------

public static void main (String [] args) {
    int number [] = new int [] {1, 2, 3, 4, 5, 6, 7, 8, 9};
    for (int p = 0;
    p < number.length; p ++) {
        if (number [p] % 2 == 0) System.out.println (number [p] + " is Even number");
        else System.out.println (number [p] + " is odd umber");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19352569_31773089_3_24
19352569_43970691_3_31
Title: How to find the Odd and Even numbers in an Array? 
----------------------------------------

public static void main (String [] args) {
    Scanner s = new Scanner (System.in);
    System.out.println ("enter number Elements in Array");
    int n = s.nextInt ();
    int arr [] = new int [n];
    System.out.println ("enter Elements ");
    for (int i = 0;
    i < n; i ++) {
        arr [i] = s.nextInt ();
    }
    int [] odd = filterOdd (arr);
    try {
        for (int i = 0;
        i < n; i ++) {
            System.out.println ("Odd" + odd [i]);
        }
    } catch (ArrayIndexOutOfBoundsException e) {
    }
    int [] even = filterEven (arr);
    try {
        for (int i = 0;
        i < n; i ++) {
            System.out.println ("Even" + even [i]);
        }
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
----------------------------------------

public static void main (String [] args) {
    int arr [] = {1, 2, 3, 4, 5, 6, 7, 8};
    int ss [] = new int [10];
    int odd [] = new int [10];
    int i;
    int k;
    for (i = 0; i < arr.length; i ++) {
        if (arr [i] % 2 == 0) {
            ss [i] = arr [i];
            System.out.print ("" + ss [i]);
            System.out.print (" ");
        }
        if ((arr [i] % 2) != 0) {
            odd [i] = arr [i];
            System.out.print ("" + odd [i]);
            System.out.print (" ");
        } else {
            System.out.println (" ");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19352569_33462125_4_23
19352569_43970691_3_31
Title: How to find the Odd and Even numbers in an Array? 
----------------------------------------

public static void main (String [] args) {
    int number [] = new int [] {1, 2, 3, 4, 5, 6, 7, 8, 9};
    for (int p = 0;
    p < number.length; p ++) {
        if (number [p] % 2 == 0) System.out.println (number [p] + " is Even number");
        else System.out.println (number [p] + " is odd umber");

    }
}
----------------------------------------

public static void main (String [] args) {
    int arr [] = {1, 2, 3, 4, 5, 6, 7, 8};
    int ss [] = new int [10];
    int odd [] = new int [10];
    int i;
    int k;
    for (i = 0; i < arr.length; i ++) {
        if (arr [i] % 2 == 0) {
            ss [i] = arr [i];
            System.out.print ("" + ss [i]);
            System.out.print (" ");
        }
        if ((arr [i] % 2) != 0) {
            odd [i] = arr [i];
            System.out.print ("" + odd [i]);
            System.out.print (" ");
        } else {
            System.out.println (" ");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19352774_19352975_6_61
19352774_19353374_6_67
Title: "I have unused variables and my code always throws an exception upon validation regardless if valid or not" 
----------------------------------------

public static void main (String [] args) {
    String strChoice, strTryString, strTryInt, strTryDouble;
    int choice, tryInt;
    double tryDouble;
    boolean done = false;
    boolean ok;
    while (! done) {
        try {
            strChoice = JOptionPane.showInputDialog (null, "What's my type\n\n\n1) String\n2) integer\n3) double\n4) Quit the program");
            choice = Integer.parseInt (strChoice);
            switch (choice) {
                case 1 :
                    JOptionPane.showMessageDialog (null, "Correct, any input can be saved as a String.");
                    break;
                case 2 :
                    strTryInt = JOptionPane.showInputDialog (null, "Enter an integer");
                    ok = true;
                    try {
                        tryInt = Integer.parseInt (strTryInt);
                    } catch (NumberFormatException e) {
                        ok = false;
                    }
                    JOptionPane.showMessageDialog (null, ok ? "Correct." : "Not an integer");
                    break;
                case 3 :
                    strTryDouble = JOptionPane.showInputDialog (null, "Enter a double");
                    tryDouble = Double.parseDouble (strTryDouble);
                    JOptionPane.showMessageDialog (null, "Correct.");
                    break;
                case 4 :
                    done = true;
                    JOptionPane.showMessageDialog (null, "The program will now close.");
                    break;
                default :
                    throw new NumberFormatException ();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog (null, "Please enter a 1, 2, 3, or 4.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String strChoice = "";
    Integer choice, tryInt;
    double tryDouble;
    boolean done = false;
    while (! done) {
        try {
            strChoice = JOptionPane.showInputDialog (null, "What's my type\n\n\n1) String\n2) integer\n3) double\n4) Quit the program");
            if (strChoice.equals ("")) {
                JOptionPane.showMessageDialog (null, "Please enter a 1, 2, 3, or 4.", "Error", JOptionPane.INFORMATION_MESSAGE);
                continue;
            }
            choice = Integer.parseInt (strChoice);
            if (choice != 4) strChoice = JOptionPane.showInputDialog (null, strChoice);

            switch (choice) {
                case 1 :
                    JOptionPane.showMessageDialog (null, "Correct, any input can be saved as a String.");
                    break;
                case 2 :
                    tryInt = Integer.parseInt (strChoice);
                    JOptionPane.showMessageDialog (null, "Correct.");
                    break;
                case 3 :
                    tryDouble = Double.parseDouble (strChoice);
                    JOptionPane.showMessageDialog (null, "Correct.");
                    break;
                case 4 :
                    done = true;
                    JOptionPane.showMessageDialog (null, "The program will now close.");
                    break;
                default :
                    {
                        if ((choice > 4) || (choice == null)) JOptionPane.showMessageDialog (null, "Please enter a 1, 2, 3, or 4.", "Error", JOptionPane.INFORMATION_MESSAGE);

                    }}
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog (null, "Your input can't be stored into that type.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19356712_19356802_1_14
19356712_19356879_1_11
Title: Execute System Commands in Java on Mac 
----------------------------------------

public void checkDisks () throws IOException, InterruptedException {
    Process p = Runtime.getRuntime ().exec ("df -h");
    int exitValue = p.waitFor ();
    System.out.println ("Process exitValue:" + exitValue);
    BufferedReader reader = new BufferedReader (new InputStreamReader (p.getInputStream ()));
    String line = reader.readLine ();
    while (line != null) {
        line = reader.readLine ();
        System.out.println (line);
    }
}
----------------------------------------

public void checkDisks () throws IOException, InterruptedException {
    Process p = Runtime.getRuntime ().exec (new String [] {"df", "-h"});
    int exitValue = p.waitFor ();
    BufferedReader reader = new BufferedReader (new InputStreamReader (p.getInputStream ()));
    String line;
    while ((line = reader.readLine ()) != null) {
        System.out.println (line);
    }
    System.out.println ("Process exitValue:" + exitValue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19366804_19367060_2_21
19366804_19376386_2_17
Title: Using variables from two different while loops 
----------------------------------------

public static void main (String [] args) {
    int counterA = 0;
    int counterB = 0;
    int one = 0;
    int two = 0;
    while (counterA < 51) {
        counterA ++;
        if (counterA % 5 == 0) {
            one = (counterA * counterA);
        }
    }
    while (counterB < 101) {
        counterB ++;
        if (counterB % 2 == 0) {
            two = (counterB * counterB);
        }
    }
    System.out.println (one + two);
}
----------------------------------------

public static void main (String [] args) {
    int counterA = 0;
    int counterB = 0;
    while (counterA < 101) {
        counterA ++;
        int one, two;
        if (counterA % 5 == 0) {
            one = (counterA * counterA);
        }
        if (counterA % 2 == 0) {
            two = counterA * counterA;
        }
        System.out.println (ont + two);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19371942_19372880_1_24
19371942_19372880_8_21
Title: Android nothing being drawn when onDraw is called? 
----------------------------------------

@Override
public void run () {
    final int fps = 30;
    Timer fpsTimer = new Timer ();
    fpsTimer.scheduleAtFixedRate (new TimerTask () {
        @Override
        public void run () {
            Canvas canvas;
            canvas = null;
            try {
                canvas = surfaceHolder.lockCanvas (null);
                synchronized (surfaceHolder) {
                    onDraw (canvas);
                }
            } finally {
                if (canvas != null) {
                    surfaceHolder.unlockCanvasAndPost (canvas);
                }
            }
        }}

    , 0, 1000 / fps);
}
----------------------------------------

public void run () {
    Canvas canvas;
    canvas = null;
    try {
        canvas = surfaceHolder.lockCanvas (null);
        synchronized (surfaceHolder) {
            onDraw (canvas);
        }
    } finally {
        if (canvas != null) {
            surfaceHolder.unlockCanvasAndPost (canvas);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19373186_19373209_1_15
19373186_19373222_1_11
Title: Copying a 2D String ArrayList 
----------------------------------------

public static ArrayList < ArrayList < String > > copy (ArrayList < ArrayList < String > > input) {
    ArrayList < ArrayList < String > > copy = new ArrayList < ArrayList < String > > ();
    for (int i = 0;
    i < input.size (); i ++) {
        ArrayList < String > line = new ArrayList < String > ();
        for (int j = 0;
        j < input.get (i).size (); j ++) {
            line.add (input.get (i).get (j));
        }
        copy.add (line);
    }
    return copy;
}
----------------------------------------

public static ArrayList < ArrayList < String > > copy (ArrayList < ArrayList < String > > input) {
    ArrayList < ArrayList < String > > copy = new ArrayList < ArrayList < String > > (input.size ());
    for (int i = 0;
    i < input.size (); i ++) {
        ArrayList < String > line = input.get (i);
        copy.set (i, new ArrayList < String > (line.size ()));
        for (int j = 0;
        j < line.size (); j ++) {
            copy.get (i).set (j, line.get (j));
        }
    }
    return copy;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19380672_19380899_1_13
19380672_19383093_1_18
Title: "The operator < is undefined for the argument type(s) Employee int" 
----------------------------------------

double calculatePersonalAllowance (Employee employee) {
    double personalAllowance = 0;
    if (employee.age < 65) {
        personalAllowance = 94440;
    } else if (employee.age >= 65 && employee.age < 75) {
        personalAllowance = 10500;
    } else if (employee.age > 75) {
        personalAllowance = 10660;
    }

    return personalAllowance;
}
----------------------------------------

static double calculatePersonalAllowance (Employee employee) {
    double personalAllowance = 0.0;
    int age = employee.age;
    if (age < 65) {
        personalAllowance = 94440;
    } else if (age >= 65 && age < 75) {
        personalAllowance = 10500;
    } else if (age > 75) {
        personalAllowance = 10660;
    }

    return personalAllowance;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19383248_19389322_1_15
19383248_24599182_1_24
Title: Find if a number is a power of two without math function or log function 
----------------------------------------

bool isPowerOfTwo (int n) {
    if (n < 1) return false;

    while (n > 1) {
        if (n & 0x1) return false;

        n>>= 1;
    }
    return true;
}
----------------------------------------

public boolean isPowerOfTwo (int n) {
    boolean isPower = false;
    int temp = n;
    while (temp >= 2) {
        if (temp % 2 == 0) {
            isPower = true;
        } else {
            isPower = false;
            break;
        }
        temp = temp / 2;
    }
    if (isPower) {
        System.out.println ("power of 2");
    } else {
        System.out.println ("not power of 2");
    }
    return isPower;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19398594_19398709_1_13
19398594_19399005_1_15
Title: Java JDBC get tables 
----------------------------------------

private void getTables () throws SQLException {
    String [] types = {"TABLE"};
    dburl = "jdbc:oracle:thin:@localhost:1521:ORCL";
    connection = DriverManager.getConnection (dburl, "c##lambros", "16111111");
    dbmd = connection.getMetaData ();
    rset = dbmd.getTables (null, null, "%", types);
    while (rset.next ()) {
        System.out.println (rset.getString ("TABLE_NAME"));
    }
}
----------------------------------------

private void getTables () throws SQLException {
    dburl = "jdbc:oracle:thin:@localhost:1521:ORCL";
    connection = DriverManager.getConnection (dburl, "c##lambros", "16111111");
    dbmd = connection.getMetaData ();
    query = " Select table_name FROM user_tables ";
    stmt = connection.createStatement ();
    rset = stmt.executeQuery (query);
    while (rset.next ()) {
        System.out.println (rset.getString (1));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19400958_19401029_4_24
19400958_19401339_1_19
Title: Java Array Storing Values 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader inpt = new BufferedReader (new InputStreamReader (System.in));
    int [] arrayCrit = new int [5];
    String [] crits = new String [5];
    for (int i = 0;
    i < crits.length; i ++) {
        System.out.print ("Criteria: ");
        crits [i] = inpt.readLine ();
        for (int j = 0;
        j < arrayCrit.length; j ++) {
            System.out.print ("Percentage: ");
            arrayCrit [j] = Integer.parseInt (inpt.readLine ());
        }
    }
    for (int i = 0;
    i < crits.length; i ++) {
        for (int j = 0;
        j < arrayCrit.length; j ++) {
            System.out.println (crits [i] + arrayCrit [j])
        }
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader inpt = new BufferedReader (new InputStreamReader (System.in));
    int [] arrayCrit = new int [5];
    String [] crits = new String [5];
    for (int i = 0;
    i < crits.length; i ++) {
        System.out.print ("Enter Criteria: ");
        crits [i] = inpt.readLine ();
        System.out.print ("Enter Percentage: ");
        arrayCrit [i] = Integer.parseInt (inpt.readLine ());
    }
    for (int i = 0;
    i < crits.length; i ++) {
        System.out.println ("Criteria :" + crits [i] + " Percentage: " + arrayCrit [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19400958_19401029_4_24
19400958_19401613_7_32
Title: Java Array Storing Values 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader inpt = new BufferedReader (new InputStreamReader (System.in));
    int [] arrayCrit = new int [5];
    String [] crits = new String [5];
    for (int i = 0;
    i < crits.length; i ++) {
        System.out.print ("Criteria: ");
        crits [i] = inpt.readLine ();
        for (int j = 0;
        j < arrayCrit.length; j ++) {
            System.out.print ("Percentage: ");
            arrayCrit [j] = Integer.parseInt (inpt.readLine ());
        }
    }
    for (int i = 0;
    i < crits.length; i ++) {
        for (int j = 0;
        j < arrayCrit.length; j ++) {
            System.out.println (crits [i] + arrayCrit [j])
        }
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader inpt = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("How many records?");
    int n = Integer.parseInt (inpt.readLine ());
    int [] arrayCrit = new int [n];
    String [] crits = new String [n];
    for (int i = 0;
    i < n; i ++) {
        System.out.print ("Criteria: ");
        crits [i] = inpt.readLine ();
        System.out.print ("Percentage: ");
        arrayCrit [i] = Integer.parseInt (inpt.readLine ());
    }
    System.out.println ("Criteria  \t  Percentage");
    for (int i = 0;
    i < n; i ++) {
        System.out.println (crits [i] + "\t" + arrayCrit [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19400958_19401339_1_19
19400958_19401613_7_32
Title: Java Array Storing Values 
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader inpt = new BufferedReader (new InputStreamReader (System.in));
    int [] arrayCrit = new int [5];
    String [] crits = new String [5];
    for (int i = 0;
    i < crits.length; i ++) {
        System.out.print ("Enter Criteria: ");
        crits [i] = inpt.readLine ();
        System.out.print ("Enter Percentage: ");
        arrayCrit [i] = Integer.parseInt (inpt.readLine ());
    }
    for (int i = 0;
    i < crits.length; i ++) {
        System.out.println ("Criteria :" + crits [i] + " Percentage: " + arrayCrit [i]);
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    BufferedReader inpt = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("How many records?");
    int n = Integer.parseInt (inpt.readLine ());
    int [] arrayCrit = new int [n];
    String [] crits = new String [n];
    for (int i = 0;
    i < n; i ++) {
        System.out.print ("Criteria: ");
        crits [i] = inpt.readLine ();
        System.out.print ("Percentage: ");
        arrayCrit [i] = Integer.parseInt (inpt.readLine ());
    }
    System.out.println ("Criteria  \t  Percentage");
    for (int i = 0;
    i < n; i ++) {
        System.out.println (crits [i] + "\t" + arrayCrit [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19405643_19405974_1_17
19405643_19406157_11_27
Title: Remove List<String> duplicates using equals 
----------------------------------------

static void removeDuplicates (List < String > array) {
    if (array.size () <= 1) {
        return;
    }
    Collections.sort (array);
    final Iterator < String > it = array.iterator ();
    String a = it.next (), n;
    while (it.hasNext ()) {
        n = it.next ();
        if (((a == null) && (n != null)) || ((a != null) && (a.equals (n) == false))) {
            a = n;
        } else {
            it.remove ();
        }
    }
}
----------------------------------------

static void removeDuplicates (List < String > array) {
    for (int i = 0;
    i < array.size (); i ++) {
        String next = array.get (i);
        for (int j = 0;
        j < i; j ++) {
            if (next.equals (array.get (j))) {
                array.remove (i);
                i --;
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19418539_19418708_1_15
19418539_19419033_1_19
Title: remove the smallest element from a linkedlist 
----------------------------------------

public void removeSmallest () {
    Node smallest = head;
    Node temp = head;
    Node prev = null;
    while (temp != null) {
        if (temp.next != null && temp.next.data < smallest.data) {
            smallest = temp.next;
            prev = temp;
        }
        temp = temp.next;
    }
    prev.next = smallest.next;
}
----------------------------------------

public void removeSmallest () {
    Node smallest = head;
    Node temp = head;
    Node prev = null;
    while (temp != null) {
        if (temp.next != null && temp.next.data < smallest.data) {
            smallest = temp.next;
            prev = temp;
        }
        temp = temp.next;
    }
    if (smallest != head) {
        prev.next = smallest.next;
    } else {
        head = head.next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1942644_15702911_13_29
1942644_1942680_13_23
Title: Get generic type of java.util.List 
----------------------------------------

public static void main (String [] args) throws Exception {
    for (Method method : Test.class.getMethods ()) {
        Class returnClass = method.getReturnType ();
        if (Collection.class.isAssignableFrom (returnClass)) {
            Type returnType = method.getGenericReturnType ();
            if (returnType instanceof ParameterizedType) {
                ParameterizedType paramType = (ParameterizedType) returnType;
                Type [] argTypes = paramType.getActualTypeArguments ();
                if (argTypes.length > 0) {
                    System.out.println ("Generic type is " + argTypes [0]);
                }
            }
        }
    }
}
----------------------------------------

public static void main (String...args) throws Exception {
    Field stringListField = Test.class.getDeclaredField ("stringList");
    ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType ();
    Class < ? > stringListClass = (Class < ? >) stringListType.getActualTypeArguments () [0];
    System.out.println (stringListClass);
    Field integerListField = Test.class.getDeclaredField ("integerList");
    ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType ();
    Class < ? > integerListClass = (Class < ? >) integerListType.getActualTypeArguments () [0];
    System.out.println (integerListClass);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19429733_19431029_1_63
19429733_19432413_14_99
Title: Reading a block of bytes from one file and writing to other until all blocks are read? 
----------------------------------------

private File readFromFile1 (File file1) {
    int offset = 0;
    long message = 0;
    File file2 = null;
    try {
        FileInputStream fis = new FileInputStream (file1);
        byte [] data = new byte [8];
        byte [] tmpbuf = new byte [8];
        file2 = new File ("file2.txt");
        FileOutputStream fos = new FileOutputStream (file2.getAbsolutePath (), true);
        DataOutputStream dos = new DataOutputStream (fos);
        int readcnt;
        int chunk;
        while ((readcnt = fis.read (data, 0, 8)) != - 1) {
            if (readcnt == 8 && offset == 0) {
                message = someOperation (tmpbuf);
                dos.writeLong (message);
                continue;
            }
            chunk = Math.min (tmpbuf.length - offset, readcnt);
            System.arraycopy (data, 0, tmpbuf, offset, chunk);
            offset = offset + chunk;
            if (offset == 8) {
                message = someOperation (tmpbuf);
                dos.writeLong (message);
                if (chunk < readcnt) {
                    System.arraycopy (data, chunk, tmpbuf, 0, readcnt - chunk);
                    offset = readcnt - chunk;
                } else {
                    offset = 0;
                }
            }
        }
        fos.close ();
        dos.close ();
        fis.close ();
    } catch (IOException e) {
        System.out.println ("Some error occurred while reading from File:" + e);
    }
    return file2;
}
----------------------------------------

private File readFromFile1 (File inFile) {
    final File outFile = new File ("file2.txt");
    final ByteBuffer inBuffer = ByteBuffer.allocate (IN_BUFFER_SIZE);
    final ByteBuffer outBuffer = ByteBuffer.allocate (OUT_BUFFER_SIZE);
    FileChannel readChannel = null;
    FileChannel writeChannel = null;
    try {
        readChannel = FileChannel.open (inFile.toPath (), StandardOpenOption.READ);
        writeChannel = FileChannel.open (outFile.toPath (), StandardOpenOption.CREATE, StandardOpenOption.WRITE);
        long totalReadByteCount = 0L;
        long totalWriteByteCount = 0L;
        boolean readMore = true;
        while (readMore) {
            int readOp = 0;
            while ((readOp = readChannel.read (inBuffer)) != - 1) {
                totalReadByteCount += readOp;
            }
            inBuffer.flip ();
            if (readOp == - 1) {
                readMore = false;
            }
            while (inBuffer.remaining () >= MIN_READ_BYTES) {
                outBuffer.putLong (someOperation (inBuffer));
            }
            if (readMore) inBuffer.compact ();

            outBuffer.flip ();
            while (outBuffer.hasRemaining ()) totalWriteByteCount += writeChannel.write (outBuffer);

            outBuffer.flip ();
        }
        if (inBuffer.hasRemaining ()) {
            System.err.println ("Truncated data! Not a long value! bytes remaining: " + inBuffer.remaining ());
        }
        System.out.println ("read total: " + totalReadByteCount + " bytes.");
        System.out.println ("write total: " + totalWriteByteCount + " bytes.");
    } catch (IOException e) {
        System.out.println ("Some error occurred while reading from File: " + e);
    } finally {
        if (readChannel != null) {
            try {
                readChannel.close ();
            } catch (IOException e) {
                System.out.println ("Could not close read channel: " + e);
            }
        }
        if (writeChannel != null) {
            try {
                writeChannel.close ();
            } catch (IOException e) {
                System.out.println ("Could not close write channel: " + e);
            }
        }
    }
    return outFile;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19430247_19430337_1_14
19430247_19430338_1_11
Title: returning an object by using a string in Java 
----------------------------------------

private Unit getUnitObject (String unit1Code) {
    Unit selectedUnit = null;
    for (int i = 0;
    i < units.size (); i ++) {
        Unit currUnit = units.get (i);
        String unitCode = currUnit.getUnitCode ();
        if (unit1Code == unitCode) {
            selectedUnit = currUnit;
        }
    }
    return selectedUnit;
}
----------------------------------------

private Unit getUnitObject (String unit1Code) {
    for (int i = 0;
    i < units.size (); i ++) {
        Unit currUnit = units.get (i);
        String unitCode = currUnit.getUnitCode ();
        if (unit1Code.equals (unitCode)) {
            return currUnit;
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19430247_19430338_1_11
19430247_19430407_1_13
Title: returning an object by using a string in Java 
----------------------------------------

private Unit getUnitObject (String unit1Code) {
    for (int i = 0;
    i < units.size (); i ++) {
        Unit currUnit = units.get (i);
        String unitCode = currUnit.getUnitCode ();
        if (unit1Code.equals (unitCode)) {
            return currUnit;
        }
    }
    return null;
}
----------------------------------------

private Unit getUnitObject (String unit1Code) {
    Unit selectedUnit = null;
    for (int i = 0;
    i < units.size (); i ++) {
        Unit currUnit = units.get (i);
        String unitCode = currUnit.getUnitCode ();
        if (unit1Code.equals (unitCode)) {
            selectedUnit = currUnit;
        }
    }
    return selectedUnit;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19435242_19435317_4_23
19435242_19435509_2_25
Title: Getting the lowest and highest value from integers without using arrays? 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int number;
    int max = 0;
    int min = 0;
    for (int x = 0;
    x < 5; x ++) {
        System.out.print ("Give me an integer: ");
        number = input.nextInt ();
        if (x == 0 || number > max) {
            max = number;
        }
        if (x == 0 || number < min) {
            min = number;
        }
    }
    System.out.println ("Highest value: " + max);
    System.out.println ("Lowest value: " + min);
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.print ("Give me an integer: ");
    number = input.nextInt ();
    int max = number;
    int min = number;
    for (int x = 0;
    x < 4; x ++) {
        System.out.print ("Give me an integer: ");
        number = input.nextInt ();
        if (number > max) {
            max = number;
        }
        if (number < min) {
            min = number;
        }
    }
    System.out.println ("Highest value: " + max);
    System.out.println ("Lowest value: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
194382_217105_104_111
194382_217105_132_140
Title: what is the difference between using the visitor design pattern or using an interface? 
----------------------------------------

public void visitFile (File f) {
    for (int i = 0;
    i < _indent; i ++) System.out.print (" ");

    System.out.print ("~");
    System.out.print (f.getName ());
    System.out.print (":");
    System.out.println (f.getSize ());
}
----------------------------------------

public void visitFile (File f) {
    for (int i = 0;
    i < _indent; i ++) System.out.print (" ");

    System.out.print ("<file name=\"");
    System.out.print (f.getName ());
    System.out.print ("\" size=\"");
    System.out.print (f.getSize ());
    System.out.println ("\" />");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
194382_217105_114_124
194382_217105_143_159
Title: what is the difference between using the visitor design pattern or using an interface? 
----------------------------------------

public void visitDirectory (Directory d) {
    for (int i = 0;
    i < _indent; i ++) System.out.print (" ");

    System.out.print ("\\");
    System.out.print (d.getName ());
    System.out.println ("\\");
    _indent += 3;
    vistChildren (d);
    _indent -= 3;
}
----------------------------------------

public void visitDirectory (Directory d) {
    for (int i = 0;
    i < _indent; i ++) System.out.print (" ");

    System.out.print ("<directory name=\"");
    System.out.print (d.getName ());
    System.out.print ("\" size=\"");
    System.out.print (d.getSize ());
    System.out.println ("\"><![CDATA[");
    _indent += 4;
    vistChildren (d);
    _indent -= 4;
    for (int i = 0;
    i < _indent; i ++) System.out.print (" ");

    System.out.println ("</directory>");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19441276_19441552_1_32
19441276_19442771_1_21
Title: Duplicates in a sorted java array 
----------------------------------------

public static int [] noDups (int [] myArray) {
    int dups = 0;
    for (int i = 1;
    i < myArray.length; i ++) {
        if (myArray [i] == myArray [i - 1]) dups ++;

    }
    int [] returnArray = new int [myArray.length - dups];
    returnArray [0] = myArray [0];
    int count = 1;
    for (int i = 1;
    i < myArray.length; i ++) {
        if (myArray [i] != myArray [i - 1]) {
            returnArray [count] = myArray [i];
            count ++;
        }
    }
    return returnArray;
}
----------------------------------------

public int [] noDups (int [] arr) {
    int j = 0;
    int [] res = new int [arr.length];
    for (int i = 0;
    i < arr.length - 2; i ++) {
        if (arr [i] != arr [i + 1]) {
            res [j] = arr [i];
            j ++;
        }
    }
    res [j] = arr [arr.length - 1];
    j ++;
    int [] ans = new int [j];
    for (int i = 0;
    i < j; i ++) {
        ans [i] = res [i];
    }
    return ans;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19445528_19591736_15_50
19445528_23531449_55_147
Title: Parsing of Stackoverflow`s posts.xml on hadoop 
----------------------------------------

public void map (LongWritable key, Text value, Context context) throws InterruptedException {
    StringTokenizer tok = new StringTokenizer (value.toString ());
    String pa = null, ow = null, pi = null, v;
    while (tok.hasMoreTokens ()) {
        String [] arr;
        String val = (String) tok.nextToken ();
        if (val.contains ("PostTypeId")) {
            arr = val.split ("[\"]");
            pi = arr [arr.length - 1];
            if (pi.equals ("2")) {
                continue;
            } else break;

        }
        if (val.contains ("ParentId")) {
            arr = val.split ("[\"]");
            pa = arr [arr.length - 1];
        } else if (val.contains ("OwnerUserId")) {
            arr = val.split ("[\"]");
            ow = arr [arr.length - 1];
            try {
                if (pa != null && ow != null) {
                    v = String.format ("{0},{1}", ow, pa);
                    context.write (obj, new Text (v));
                }
            } catch (IOException e) {
                e.printStackTrace ();
            }
        }

    }
}
----------------------------------------

protected void map (LongWritable inputKey, Text inputValue, Mapper < LongWritable, Text, Text, Text >.Context context) throws IOException, InterruptedException {
    try {
        String entry = inputValue.toString ();
        if (entry.contains ("<row ")) {
            Document doc = builder.parse (new InputSource (new StringReader (entry)));
            Element rootElem = doc.getDocumentElement ();
            String id = rootElem.getAttribute ("Id");
            String postedBy = rootElem.getAttribute ("OwnerUserId").trim ();
            String viewCount = rootElem.getAttribute ("ViewCount");
            String postTypeId = rootElem.getAttribute ("PostTypeId");
            String score = rootElem.getAttribute ("Score");
            String title = rootElem.getAttribute ("Title");
            String tags = rootElem.getAttribute ("Tags");
            String answerCount = rootElem.getAttribute ("AnswerCount");
            String commentCount = rootElem.getAttribute ("CommentCount");
            String favoriteCount = rootElem.getAttribute ("FavoriteCount");
            String creationDate = rootElem.getAttribute ("CreationDate");
            Date parsedDate = null;
            if (creationDate != null && creationDate.trim ().length () > 0) {
                try {
                    parsedDate = DATE_PARSER.parse (creationDate);
                } catch (ParseException e) {
                    context.getCounter ("Bad Record Counters", "Posts missing CreationDate").increment (1);
                }
            }
            if (postedBy.length () == 0 || postedBy.trim ().equals ("-1")) {
                context.getCounter ("Bad Record Counters", "Posts with either empty UserId or UserId contains '-1'").increment (1);
                try {
                    parsedDate = DATE_BUILDER.parse ("2100-00-01");
                } catch (ParseException e) {
                }
            }
            tags = tags.trim ();
            String tagTokens [] = null;
            if (tags.length () > 1) {
                tagTokens = tags.substring (1, tags.length () - 1).split ("><![CDATA[<");
            } else {
                context.getCounter ("Bad Record Counters", "Untagged Posts").increment (1);
            }
            outputKey.clear ();
            outputKey.set (id);
            StringBuilder sb = new StringBuilder (postedBy).append ("\t").append (parsedDate.getTime ()).append ("\t").append (postTypeId).append ("\t").append (title).append ("\t").append (viewCount).append ("\t").append (score).append ("\t");
            if (tagTokens != null) {
                sb.append (TAG_JOINER.join (tagTokens)).append ("\t");
            } else {
                sb.append ("").append ("\t");
            }
            sb.append (answerCount).append ("\t").append (commentCount).append ("\t").append (favoriteCount).toString ();
            outputValue.set (sb.toString ());
            context.write (outputKey, outputValue);
        }
    } catch (SAXException e) {
        context.getCounter ("Bad Record Counters", "Unparsable records").increment (1);
    } finally {
        builder.reset ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19449235_19450597_26_38
19449235_19450597_50_68
Title: Why is the value is not updated between multiple threads? 
----------------------------------------

public void run () {
    try {
        for (;;) {
            Thread.sleep (1000);
            System.out.println ("Notify C that I have finished work");
            synchronized (lock) {
                lock.notify ();
            }
        }
    } catch (Exception e) {
        System.out.println (e.getMessage () + "W");
    }
}
----------------------------------------

public void run () {
    try {
        for (;;) {
            System.out.println ("Waiting for W to finish ");
            synchronized (lock) {
                lock.wait ();
            }
            System.out.println ("W has notified " + times);
            times ++;
            if (times == 3) {
                System.out.println ("Every thing is done, lets die to gether");
                System.exit (0);
            }
        }
    } catch (Exception e) {
        System.out.println (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19455058_24026877_1_24
19455058_24967253_1_31
Title: Tape-Equilibrium Codility Training 
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    int sum1 = A [0];
    int sum2 = 0;
    int P = 1;
    for (int i = P;
    i < N; i ++) {
        sum2 += A [i];
    }
    int diff = Math.abs (sum1 - sum2);
    for (; P < N - 1; P ++) {
        sum1 += A [P];
        sum2 -= A [P];
        int newDiff = Math.abs (sum1 - sum2);
        if (newDiff < diff) {
            diff = newDiff;
        }
    }
    return diff;
}
----------------------------------------

int solution (int A [], int N) {
    long p;
    long index;
    long leftSum;
    long rightSum;
    long totalSum = 0;
    long last_minimum = 100000;
    long current_min;
    if (N == 2) return abs (A [0] - A [1]);

    if (N == 1) return abs (A [0]);

    for (index = 0; index < N; index ++) totalSum = totalSum + A [index];

    leftSum = 0;
    rightSum = 0;
    for (p = 1; p <= N - 1; p ++) {
        leftSum += A [p - 1];
        rightSum = totalSum - leftSum;
        current_min = abs ((long) (leftSum - rightSum));
        last_minimum = current_min < last_minimum ? current_min : last_minimum;
        if (last_minimum == 0) break;

    }
    return last_minimum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19455058_24026877_1_24
19455058_25190025_1_39
Title: Tape-Equilibrium Codility Training 
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    int sum1 = A [0];
    int sum2 = 0;
    int P = 1;
    for (int i = P;
    i < N; i ++) {
        sum2 += A [i];
    }
    int diff = Math.abs (sum1 - sum2);
    for (; P < N - 1; P ++) {
        sum1 += A [P];
        sum2 -= A [P];
        int newDiff = Math.abs (sum1 - sum2);
        if (newDiff < diff) {
            diff = newDiff;
        }
    }
    return diff;
}
----------------------------------------

int solution (int A [], int N) {
    int i, leftSum, rightSum, last_minimum, current_min;
    leftSum = A [0];
    rightSum = 0;
    i = 1;
    while (i < N) {
        rightSum += A [i];
        i ++;
    }
    last_minimum = abs (leftSum - rightSum);
    if (last_minimum == 0) return last_minimum;

    i = 2;
    while (i < N) {
        leftSum += A [i - 1];
        rightSum -= A [i - 1];
        current_min = abs (leftSum - rightSum);
        if (current_min == 0) return current_min;

        if (last_minimum > current_min) last_minimum = current_min;

        i ++;
    }
    return last_minimum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19455058_24026877_1_24
19455058_25826906_1_24
Title: Tape-Equilibrium Codility Training 
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    int sum1 = A [0];
    int sum2 = 0;
    int P = 1;
    for (int i = P;
    i < N; i ++) {
        sum2 += A [i];
    }
    int diff = Math.abs (sum1 - sum2);
    for (; P < N - 1; P ++) {
        sum1 += A [P];
        sum2 -= A [P];
        int newDiff = Math.abs (sum1 - sum2);
        if (newDiff < diff) {
            diff = newDiff;
        }
    }
    return diff;
}
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);

    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;

    }
    return finalSum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19455058_24967253_1_31
19455058_25190025_1_39
Title: Tape-Equilibrium Codility Training 
----------------------------------------

int solution (int A [], int N) {
    long p;
    long index;
    long leftSum;
    long rightSum;
    long totalSum = 0;
    long last_minimum = 100000;
    long current_min;
    if (N == 2) return abs (A [0] - A [1]);

    if (N == 1) return abs (A [0]);

    for (index = 0; index < N; index ++) totalSum = totalSum + A [index];

    leftSum = 0;
    rightSum = 0;
    for (p = 1; p <= N - 1; p ++) {
        leftSum += A [p - 1];
        rightSum = totalSum - leftSum;
        current_min = abs ((long) (leftSum - rightSum));
        last_minimum = current_min < last_minimum ? current_min : last_minimum;
        if (last_minimum == 0) break;

    }
    return last_minimum;
}
----------------------------------------

int solution (int A [], int N) {
    int i, leftSum, rightSum, last_minimum, current_min;
    leftSum = A [0];
    rightSum = 0;
    i = 1;
    while (i < N) {
        rightSum += A [i];
        i ++;
    }
    last_minimum = abs (leftSum - rightSum);
    if (last_minimum == 0) return last_minimum;

    i = 2;
    while (i < N) {
        leftSum += A [i - 1];
        rightSum -= A [i - 1];
        current_min = abs (leftSum - rightSum);
        if (current_min == 0) return current_min;

        if (last_minimum > current_min) last_minimum = current_min;

        i ++;
    }
    return last_minimum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19455058_24967253_1_31
19455058_25826906_1_24
Title: Tape-Equilibrium Codility Training 
----------------------------------------

int solution (int A [], int N) {
    long p;
    long index;
    long leftSum;
    long rightSum;
    long totalSum = 0;
    long last_minimum = 100000;
    long current_min;
    if (N == 2) return abs (A [0] - A [1]);

    if (N == 1) return abs (A [0]);

    for (index = 0; index < N; index ++) totalSum = totalSum + A [index];

    leftSum = 0;
    rightSum = 0;
    for (p = 1; p <= N - 1; p ++) {
        leftSum += A [p - 1];
        rightSum = totalSum - leftSum;
        current_min = abs ((long) (leftSum - rightSum));
        last_minimum = current_min < last_minimum ? current_min : last_minimum;
        if (last_minimum == 0) break;

    }
    return last_minimum;
}
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);

    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;

    }
    return finalSum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19455058_25190025_1_39
19455058_25826906_1_24
Title: Tape-Equilibrium Codility Training 
----------------------------------------

int solution (int A [], int N) {
    int i, leftSum, rightSum, last_minimum, current_min;
    leftSum = A [0];
    rightSum = 0;
    i = 1;
    while (i < N) {
        rightSum += A [i];
        i ++;
    }
    last_minimum = abs (leftSum - rightSum);
    if (last_minimum == 0) return last_minimum;

    i = 2;
    while (i < N) {
        leftSum += A [i - 1];
        rightSum -= A [i - 1];
        current_min = abs (leftSum - rightSum);
        if (current_min == 0) return current_min;

        if (last_minimum > current_min) last_minimum = current_min;

        i ++;
    }
    return last_minimum;
}
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);

    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;

    }
    return finalSum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19456509_19456675_2_17
19456509_19456689_4_20
Title: "How to create populate and print a string array in Java" 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number between 1 and 5");
    int number = input.nextInt ();
    System.out.println ("Now enter " + number + " names");
    String [] nameList = new String [number];
    for (int i = 0;
    i < number; i ++) {
        nameList [i] = input.next ();
        System.out.println (nameList [i]);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number between 1 and 5");
    int number = input.nextInt ();
    System.out.println ("Now enter " + number + " names");
    String [] nameList = new String [number];
    for (int i = 0;
    i < number; i ++) {
        nameList [i] = input.next ();
        System.out.println (nameList [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19456509_19456675_2_17
19456509_19456740_4_26
Title: "How to create populate and print a string array in Java" 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number between 1 and 5");
    int number = input.nextInt ();
    System.out.println ("Now enter " + number + " names");
    String [] nameList = new String [number];
    for (int i = 0;
    i < number; i ++) {
        nameList [i] = input.next ();
        System.out.println (nameList [i]);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number between 1 and 5");
    int number = input.nextInt ();
    System.out.println ("Now enter " + number + " names");
    String [] nameList = new String [number];
    for (int i = 0;
    i < number; i ++) {
        nameList [i] = input.next ();
    }
    System.out.println ("Here are the names you entered:  ");
    for (int i = 0;
    i < number; i ++) {
        System.out.println (nameList [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19456509_19456689_4_20
19456509_19456740_4_26
Title: "How to create populate and print a string array in Java" 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number between 1 and 5");
    int number = input.nextInt ();
    System.out.println ("Now enter " + number + " names");
    String [] nameList = new String [number];
    for (int i = 0;
    i < number; i ++) {
        nameList [i] = input.next ();
        System.out.println (nameList [i]);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter a number between 1 and 5");
    int number = input.nextInt ();
    System.out.println ("Now enter " + number + " names");
    String [] nameList = new String [number];
    for (int i = 0;
    i < number; i ++) {
        nameList [i] = input.next ();
    }
    System.out.println ("Here are the names you entered:  ");
    for (int i = 0;
    i < number; i ++) {
        System.out.println (nameList [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19456829_19456904_1_16
19456829_19456926_1_18
Title: Checking if Linked List joins back to start 
----------------------------------------

public boolean isLinkedToStart (Node head) {
    if (head == null) {
        return false;
    }
    Node fast = head.next;
    Node slow = head;
    while (fast != null && fast.next != null) {
        fast = fast.next.next;
        slow = slow.next;
        if (slow.next == head) return true;

        if (fast == slow) return false;

    }
    return false;
}
----------------------------------------

public boolean isLinkedToStart (Node head) {
    if (head == null) {
        return false;
    }
    Node probe = head.next;
    while (probe != null) {
        if (probe == head) {
            return true;
        }
        if (probe.seen) {
            return false;
        }
        probe.seen = true;
        probe = probe.next;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19457242_19458047_1_28
19457242_19458127_3_30
Title: Changing spacing between top sides of nested composites in SWT 
----------------------------------------

public static void main (String [] args) {
    final Display display = Display.getDefault ();
    final Shell shell = new Shell (display);
    shell.setLayout (new GridLayout (1, false));
    final Composite outer = new Composite (shell, SWT.NONE);
    outer.setBackground (display.getSystemColor (SWT.COLOR_BLUE));
    GridLayout layout = new GridLayout (1, false);
    layout.marginHeight = 0;
    outer.setLayout (layout);
    outer.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
    final Composite inner = new Composite (outer, SWT.NONE);
    inner.setBackground (display.getSystemColor (SWT.COLOR_RED));
    inner.setLayout (new GridLayout (1, false));
    inner.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
    shell.pack ();
    shell.open ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) display.sleep ();

    }
    display.dispose ();
}
----------------------------------------

public static void main (String [] args) {
    Display display = new Display ();
    Shell shell = new Shell (display);
    shell.setLayout (new GridLayout ());
    Composite c1 = new Composite (shell, SWT.NONE);
    GridData c1GridData = new GridData (100, 50);
    c1.setLayoutData (c1GridData);
    GridLayout c1Layout = new GridLayout ();
    c1Layout.marginHeight = 0;
    c1.setLayout (c1Layout);
    c1.setBackground (display.getSystemColor (SWT.COLOR_BLUE));
    Composite c2 = new Composite (c1, SWT.NONE);
    GridData c2GridData = new GridData (50, 50);
    c2.setLayoutData (c2GridData);
    c2.setBackground (display.getSystemColor (SWT.COLOR_RED));
    shell.open ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) display.sleep ();

    }
    display.dispose ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19457991_19458067_1_21
19457991_19458377_1_18
Title: Compiling Error: Missing return statement 
----------------------------------------

public static boolean playOneGame () {
    int newDice = rollDice ();
    int roll = rollDice ();
    int playerPoint = 0;
    if (roll == 7 || roll == 11) return true;
    else if (roll == 2 || roll == 3 || roll == 12) return false;
    else playerPoint = roll;

    do {
        if (rollDice () == 7) return false;
        else if (rollDice () == playerPoint) return true;
        else newDice = rollDice ();

    } while (rollDice () != playerPoint || rollDice () != 7);
    return false;
}
----------------------------------------

public static boolean playOneGame () {
    if (condition1 == true) {
        return true;
    } else if (condition2 == true) {
        return false;
    } else {
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19457991_19458087_1_22
19457991_19458377_1_18
Title: Compiling Error: Missing return statement 
----------------------------------------

public static boolean playOneGame () {
    int newDice = rollDice ();
    int roll = rollDice ();
    int playerPoint = 0;
    if (roll == 7 || roll == 11) return true;
    else if (roll == 2 || roll == 3 || roll == 12) return false;
    else playerPoint = roll;

    do {
        if (rollDice () == 7) return false;
        else if (rollDice () == playerPoint) return true;
        else newDice = rollDice ();

    } while (rollDice () != playerPoint || rollDice () != 7);
    return false;
}
----------------------------------------

public static boolean playOneGame () {
    if (condition1 == true) {
        return true;
    } else if (condition2 == true) {
        return false;
    } else {
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19458278_19458302_1_20
19458278_28662892_1_18
Title: "Check if an array is sorted return true or false" 
----------------------------------------

public static boolean isSorted (int [] a) {
    for (int i = 0;
    i < a.length - 1; i ++) {
        if (a [i] > a [i + 1]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public static boolean isSorted (int [] a) {
    if (a == null) {
        return false;
    } else if (a.length == 0) {
        return true;
    }

    for (int i = 0;
    i < a.length - 1; i ++) {
        if (a [i] > a [i + 1]) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19458278_19458302_1_20
19458278_40925893_1_20
Title: "Check if an array is sorted return true or false" 
----------------------------------------

public static boolean isSorted (int [] a) {
    for (int i = 0;
    i < a.length - 1; i ++) {
        if (a [i] > a [i + 1]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public static boolean isSorted (int [] a) {
    boolean isSorted = true;
    boolean isAscending = a [1] > a [0];
    if (isAscending) {
        for (int i = 0;
        i < a.length - 1; i ++) {
            if (a [i] > a [i + 1]) {
                isSorted = false;
                break;
            }
        }
    } else {
        for (int i = 0;
        i < a.length - 1; i ++) {
            if (a [i] < a [i + 1]) {
                isSorted = false;
                break;
            }
        }
    }
    return isSorted;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19458278_28662892_1_18
19458278_40925893_1_20
Title: "Check if an array is sorted return true or false" 
----------------------------------------

public static boolean isSorted (int [] a) {
    if (a == null) {
        return false;
    } else if (a.length == 0) {
        return true;
    }

    for (int i = 0;
    i < a.length - 1; i ++) {
        if (a [i] > a [i + 1]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public static boolean isSorted (int [] a) {
    boolean isSorted = true;
    boolean isAscending = a [1] > a [0];
    if (isAscending) {
        for (int i = 0;
        i < a.length - 1; i ++) {
            if (a [i] > a [i + 1]) {
                isSorted = false;
                break;
            }
        }
    } else {
        for (int i = 0;
        i < a.length - 1; i ++) {
            if (a [i] < a [i + 1]) {
                isSorted = false;
                break;
            }
        }
    }
    return isSorted;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_20782126_2_25
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_25526428_2_18
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_28495603_1_18
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_30351219_1_23
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_31628373_4_15
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_38969470_4_20
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_39779422_55_75
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20604329_1_19
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public static int solution (int X, int [] A) {
    int [] count = new int [X];
    for (int i = 0;
    i < A.length; i ++) {
        try {
            count [A [i] - 1] ++;
        } catch (ArrayIndexOutOfBoundsException e) {
        }
        if (i >= X - 1) {
            for (int j = 0;
            j < count.length; j ++) {
                if (count [j] == 0) {
                    break;
                }
                if (j == count.length - 1) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20782126_2_25
19459197_25526428_2_18
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20782126_2_25
19459197_28495603_1_18
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20782126_2_25
19459197_30351219_1_23
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20782126_2_25
19459197_31628373_4_15
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------

public int solution (int X, int [] A) {
    HashSet < Integer > hset = new HashSet < Integer > ();
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= X) hset.add (A [i]);

        if (hset.size () == X) return i;

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20782126_2_25
19459197_38969470_4_20
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------

public int solution (int X, int [] A) {
    int list [] = A;
    int sum = 0;
    int searchedValue = X;
    int sumV = searchedValue * (searchedValue + 1) / 2;
    List < Integer > arrayList = new ArrayList < Integer > ();
    for (int iii = 0;
    iii < list.length; iii ++) {
        if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
            sum += list [iii];
            if (sum == sumV) {
                return iii;
            }
            arrayList.add (list [iii]);
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20782126_2_25
19459197_39779422_55_75
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------

public static final int solution (final int X, final int [] A) {
    if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
        throw new RuntimeException ("Array size out of bounds");
    }
    Set set = new Set (X);
    int ai;
    int counter = X;
    final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
    for (int i = 0;
    i < A.length; i ++) {
        if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
            throw new RuntimeException ("Number out of bounds");
        } else if (ai <= X && ! set.contains (ai)) {
            counter --;
            if (counter == 0) {
                return i;
            }
            set.put (ai);
        }

    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_20782126_2_25
19459197_45503552_1_17
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    int size = A.length;
    int [] check = new int [X];
    int cmp = 0;
    int time = - 1;
    for (int x = 0;
    x < size; x ++) {
        int temp = A [x];
        if (temp <= X) {
            if (check [temp - 1] > 0) {
                continue;
            }
            check [temp - 1] ++;
            cmp ++;
        }
        if (cmp == X) {
            time = x;
            break;
        }
    }
    return time;
}
----------------------------------------

public int solution (final int X, final int [] A) {
    Set < Integer > emptyPosition = new HashSet < Integer > ();
    for (int i = 1;
    i <= X; i ++) {
        emptyPosition.add (i);
    }
    for (int i = 0;
    i < A.length; i ++) {
        emptyPosition.remove (A [i]);
        if (emptyPosition.size () == 0) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_25526428_2_18
19459197_28495603_1_18
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------

public static int solution (int X, int [] A) {
    int [] counter = new int [X + 1];
    int ans = - 1;
    int x = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (counter [A [i]] == 0) {
            counter [A [i]] = A [i];
            x += 1;
            if (x == X) {
                return i;
            }
        }
    }
    return ans;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
19459197_25526428_2_18
19459197_30351219_1_23
Title: java codility Frog-River-One 
----------------------------------------

public int solution (int X, int [] A) {
    Set < Integer > set = new HashSet < Integer > ();
    int sum1 = 0, sum2 = 0;
    for (int i = 0;
    i <= X; i ++) {
        sum1 += i;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (set.contains (A [i])) continue;

        set.add (A [i]);
        sum2 += A [i];
        if (sum1 == sum2) return i;

    }
    return - 1;
}
----------------------------------------

public int solution (int X, int [] A) {
    int len = A.length;
    if (X > len) {
        return - 1;
    }
    int [] isFilled = new int [X];
    int jumped = 0;
    Arrays.fill (isFilled, 0);
    for (int i = 0;
    i < len; i ++) {
        int x = A [i];
        if (x <= X) {
            if (isFilled [x - 1] == 0) {
                isFilled [x - 1] = 1;
                jumped += 1;
                if (jumped == X) {
                    return i;
                }
            }
        }
    }
    return - 1;
}
----------------------------------------

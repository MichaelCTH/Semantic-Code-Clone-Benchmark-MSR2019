$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9759115_9760965_121_139
9759115_9760965_151_168
Title: Enable to stop timer 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    if (startAction != null && startAction.getValue (NAME).equals (StartAction.STOP)) {
        startAction.actionPerformed (new ActionEvent (evt.getSource (), ActionEvent.ACTION_PERFORMED, StartAction.STOP));
    } else if (timer != null && timer.isRunning ()) {
        timer.stop ();
    }

    displayField.setForeground (null);
    deltaTime = (Integer) hourSpinner.getValue ();
    deltaTime = MIN_PER_HR * deltaTime + (Integer) minuteSpinner.getValue ();
    deltaTime = SEC_PER_MIN * deltaTime + (Integer) secondSpinner.getValue ();
    deltaTime = MS_PER_SEC * deltaTime;
    showTimeLeft ();
    negative = false;
    timer = new Timer (TIMER_DELAY, new TimerListener ());
}
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    if (timer == null) {
        return;
    }
    if (getValue (NAME).equals (START)) {
        putValue (NAME, STOP);
        startTime = System.currentTimeMillis ();
        currentTime = startTime;
        setTimeToComplete = deltaTime;
        timer.start ();
    } else {
        if (timer != null && timer.isRunning ()) {
            putValue (NAME, START);
            timer.stop ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9759115_9760965_121_139
9759115_9760965_187_199
Title: Enable to stop timer 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    if (startAction != null && startAction.getValue (NAME).equals (StartAction.STOP)) {
        startAction.actionPerformed (new ActionEvent (evt.getSource (), ActionEvent.ACTION_PERFORMED, StartAction.STOP));
    } else if (timer != null && timer.isRunning ()) {
        timer.stop ();
    }

    displayField.setForeground (null);
    deltaTime = (Integer) hourSpinner.getValue ();
    deltaTime = MIN_PER_HR * deltaTime + (Integer) minuteSpinner.getValue ();
    deltaTime = SEC_PER_MIN * deltaTime + (Integer) secondSpinner.getValue ();
    deltaTime = MS_PER_SEC * deltaTime;
    showTimeLeft ();
    negative = false;
    timer = new Timer (TIMER_DELAY, new TimerListener ());
}
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    currentTime = System.currentTimeMillis ();
    deltaTime = setTimeToComplete - currentTime + startTime;
    if (deltaTime < 0) {
        deltaTime = - deltaTime;
        if (! negative) {
            negative = true;
            displayField.setForeground (NEGATIVE_COLOR);
        }
    }
    showTimeLeft ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9759115_9760965_151_168
9759115_9760965_187_199
Title: Enable to stop timer 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    if (timer == null) {
        return;
    }
    if (getValue (NAME).equals (START)) {
        putValue (NAME, STOP);
        startTime = System.currentTimeMillis ();
        currentTime = startTime;
        setTimeToComplete = deltaTime;
        timer.start ();
    } else {
        if (timer != null && timer.isRunning ()) {
            putValue (NAME, START);
            timer.stop ();
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    currentTime = System.currentTimeMillis ();
    deltaTime = setTimeToComplete - currentTime + startTime;
    if (deltaTime < 0) {
        deltaTime = - deltaTime;
        if (! negative) {
            negative = true;
            displayField.setForeground (NEGATIVE_COLOR);
        }
    }
    showTimeLeft ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9760944_9761505_15_31
9760944_9762132_1_35
Title: JAVA moving a ball 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            AnimationJPanel panel = new AnimationJPanel ();
            panel.setPreferredSize (new Dimension (400, 300));
            panel.animate ();
            JFrame frame = new JFrame ("Test");
            frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
            frame.getContentPane ().add (panel);
            frame.pack ();
            frame.setLocationRelativeTo (null);
            frame.setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String args []) throws Exception {
    new JFrame ("AnimationStudy") {
        int x = 0;
        JPanel j = new JPanel () {
            protected void paintComponent (Graphics g) {
                super.paintComponent (g);
                g.setColor (Color.RED);
                g.fillOval (x, 10, 20, 20);
                g.setColor (Color.BLACK);
                g.drawChars (("" + x).toCharArray (), 0, ("" + x).length (), x, 10);
            }}

        ;

        {
            setSize (300, 100);
            setLocation (300, 300);
            setVisible (true);
            setLayout (new BorderLayout ());
            add (j);
            new Thread (new Runnable () {
                public void run () {
                    int t = 250;
                    for (x = 10; x < t; x += 1) {
                        j.repaint ();
                        try {
                            Thread.sleep ((t - x) / 4);
                        } catch (Exception e) {
                            e.printStackTrace ();
                        }
                    }
                    System.exit (0);
                }}

            ).start ();
        }

    }

    ;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9760944_9761505_19_29
9760944_9762132_20_31
Title: JAVA moving a ball 
----------------------------------------

public void run () {
    AnimationJPanel panel = new AnimationJPanel ();
    panel.setPreferredSize (new Dimension (400, 300));
    panel.animate ();
    JFrame frame = new JFrame ("Test");
    frame.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
    frame.getContentPane ().add (panel);
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------

public void run () {
    int t = 250;
    for (x = 10; x < t; x += 1) {
        j.repaint ();
        try {
            Thread.sleep ((t - x) / 4);
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
    System.exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9769670_9769865_5_25
9769670_9771609_15_43
Title: Parsing Json as an Array of values ont objects or arrays 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.main);
    String json = "[\"Offrenoncumulableaveclespromotionsinternesdeplayland\",\"Lecentrefermelelundi\",\"Réservationàl'avanceau0661977474\",\"Lesmineursdoiventremplirl'autorisationparentalesurlesitewww.playland.ma\",\"Valablesurprésentationd'unecarted'identitéaveclebon\",\"Leforfaitinclutleséquipements,lesprotections,leremplissagegazetl'assurance\",\"Offrevalable1moisdu1Marsau31mars2012\"]";
    try {
        JSONArray array = new JSONArray (json);
        for (int i = 0, len = array.length ();
        i < len; i ++) {
            Log.i ("info", array.getString (i));
        }
    } catch (JSONException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.main);
    StringBuffer sb = new StringBuffer ();
    String json = "[\"Offrenoncumulableaveclespromotionsinternesdeplayland\",\"Lecentrefermelelundi\",\"Réservationàl'avanceau0661977474\",\"Lesmineursdoiventremplirl'autorisationparentalesurlesitewww.playland.ma\",\"Valablesurprésentationd'unecarted'identitéaveclebon\",\"Leforfaitinclutleséquipements,lesprotections,leremplissagegazetl'assurance\",\"Offrevalable1moisdu1Marsau31mars2012\"]";
    try {
        JSONArray array = new JSONArray (json);
        for (int i = 0, len = array.length ();
        i < len; i ++) {
            Log.i ("info", array.getString (i));
            sb.append (array.getString (i));
        }
        TextView sname = (TextView) findViewById (R.id.id_activity_lat);
        sname.setText (sb.toString ());
    } catch (JSONException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9778513_45121374_1_10
9778513_9778812_16_26
Title: Linear Search Generics 
----------------------------------------

public static < E extends Comparable < > > int linear (E [] contents, E query) {
    for (int index = 0;
    index < contents.length; ++ index) {
        if (query.equals (contents [index])) {
            return index;
        }
    }
    return - 1;
}
----------------------------------------

public int linear (List < E > contents, E query) {
    for (int index = 0;
    index < contents.size (); ++ index) {
        if (query.equals (contents.get (index))) {
            return index;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9778513_45121374_1_10
9778513_9778812_4_14
Title: Linear Search Generics 
----------------------------------------

public static < E extends Comparable < > > int linear (E [] contents, E query) {
    for (int index = 0;
    index < contents.length; ++ index) {
        if (query.equals (contents [index])) {
            return index;
        }
    }
    return - 1;
}
----------------------------------------

public int linear (E [] contents, E query) {
    for (int index = 0;
    index < contents.length; ++ index) {
        if (query.equals (contents [index])) {
            return index;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9778513_9778812_16_26
9778513_9778812_4_14
Title: Linear Search Generics 
----------------------------------------

public int linear (List < E > contents, E query) {
    for (int index = 0;
    index < contents.size (); ++ index) {
        if (query.equals (contents.get (index))) {
            return index;
        }
    }
    return - 1;
}
----------------------------------------

public int linear (E [] contents, E query) {
    for (int index = 0;
    index < contents.length; ++ index) {
        if (query.equals (contents [index])) {
            return index;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9788666_38697694_7_41
9788666_9789367_5_14
Title: How do I implement search for int values in hibernate search? 
----------------------------------------

public String objectToString (Object object) {
    try {
        if (object != null) {
            String rawInteger = ((String) object).toString ();
            String decimalPoint = "";
            if (rawInteger.matches ("\\d*\\.\\d+")) {
                decimalPoint = rawInteger.substring (rawInteger.indexOf ("."));
                rawInteger = rawInteger.substring (0, rawInteger.indexOf ("."));
                System.out.println (decimalPoint);
                System.out.println (rawInteger);
            }
            if (rawInteger.length () > padding) throw new IllegalArgumentException ("Try to pad on a number too big");

            StringBuilder paddedInteger = new StringBuilder ();
            for (int padIndex = rawInteger.length ();
            padIndex < padding; padIndex ++) {
                paddedInteger.append ('0');
            }
            return paddedInteger.append (rawInteger).append (decimalPoint).toString ();
        } else {
            return "";
        }
    } catch (Exception e) {
        logger.error ("NumberFormateException:::::::::::" + e);
        return null;
    }
}
----------------------------------------

public String objectToString (Object object) {
    String rawInteger = ((Integer) object).toString ();
    if (rawInteger.length () > PADDING) throw new IllegalArgumentException ("Try to pad on a number too big");

    StringBuilder paddedInteger = new StringBuilder ();
    for (int padIndex = rawInteger.length ();
    padIndex < PADDING; padIndex ++) {
        paddedInteger.append ('0');
    }
    return paddedInteger.append (rawInteger).toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9793194_9793750_14_26
9793194_9793775_58_71
Title: border&grid layouts 
----------------------------------------

public static void main (String [] args) {
    JFrame application = new JFrame ();
    PanelFurniture panel = new PanelFurniture ();
    application.add (panel);
    application.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    application.pack ();
    application.setLocationByPlatform (true);
    application.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        public void run () {
            JFrame application = new JFrame ();
            PanelFurniture panel = new PanelFurniture ();
            application.add (panel);
            application.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            application.pack ();
            application.setLocationByPlatform (true);
            application.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9793194_9793750_47_79
9793194_9793775_32_56
Title: border&grid layouts 
----------------------------------------

PanelFurniture () {
    this.setLayout (new BorderLayout ());
    westPanel = new JPanel ();
    westPanel.setLayout (new GridLayout (0, 1));
    westPanel.setBorder (BorderFactory.createEmptyBorder (5, 5, 5, 5));
    for (int i = 0;
    i < commandButtons.length; i ++) {
        westPanel.add (commandButtons [i]);
        commandButtons [i].addActionListener (this);
    }
    this.add (westPanel, BorderLayout.LINE_START);
    centerPanel = new JPanel (new GridLayout (1, 2));
    center = new JButton ("center");
    centerPanel.add (center);
    east = new JButton ("east");
    centerPanel.add (east);
    this.add (centerPanel, BorderLayout.CENTER);
}
----------------------------------------

PanelFurniture () {
    super (new BorderLayout (2, 2));
    this.setBorder (new EmptyBorder (4, 4, 4, 4));
    westPanel = new JPanel (new GridLayout (0, 1, 4, 4));
    for (int i = 0;
    i < commandButtons.length; i ++) {
        westPanel.add (commandButtons [i]);
    }
    westPanelConstrain = new JPanel (new BorderLayout ());
    westPanelConstrain.add (westPanel, BorderLayout.NORTH);
    this.add (westPanelConstrain, BorderLayout.WEST);
    centerPanel = new JPanel (new GridLayout (1, 2));
    center = new JButton ("center");
    centerPanel.add (center);
    east = new JButton ("east");
    centerPanel.add (east);
    this.add (centerPanel, BorderLayout.CENTER);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9800805_33594183_20_59
9800805_33601586_13_34
Title: Receiving attachment from gmail using imap 
----------------------------------------

public static void main (String [] args) throws MessagingException {
    ExecutorServiceExample eService = new ExecutorServiceExample ();
    Folder inbox = eService.getInboxFolder ();
    int count = eService.getMailCount ();
    Message messages = inbox.getMessage (count);
    System.out.println ("Total Mail count = " + count);
    ExecutorService executor = Executors.newFixedThreadPool (5);
    int waitTime = 1000000;
    DateFormat formatter = new SimpleDateFormat ("yyyy-MM-dd");
    Date startDate;
    Date endDate;
    try {
        startDate = formatter.parse ("2015-10-01");
        endDate = formatter.parse ("2015-10-31");
        while (startDate.before (endDate)) {
            for (int j = 0;
            j < 5; j ++) {
                Runnable runner = new TaskPrint (startDate, messages);
                executor.execute (runner);
            }
        }
    } catch (ParseException e1) {
        e1.printStackTrace ();
    }
    try {
        Thread.sleep (waitTime);
        executor.shutdown ();
        executor.awaitTermination (waitTime, TimeUnit.MILLISECONDS);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.exit (0);
}
----------------------------------------

public static void main (String [] args) throws MessagingException {
    ExecutorServiceExample eService = new ExecutorServiceExample ();
    Folder inbox = eService.getInboxFolder ();
    Message [] messages = inbox.getMessages ();
    System.out.println ("Total Mail count = " + messages.length);
    ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool (10);
    for (Message message : messages) {
        Runnable runner = new TaskPrint (message);
        executor.execute (runner);
    }
    System.out.println ("Maximum threads inside pool " + executor.getMaximumPoolSize ());
    executor.shutdown ();
    try {
        Thread.sleep (1000);
        executor.shutdown ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9800805_33594183_61_71
9800805_33601586_36_45
Title: Receiving attachment from gmail using imap 
----------------------------------------

private Folder getInboxFolder () throws MessagingException {
    Properties props = System.getProperties ();
    props.setProperty ("mail.store.protocol", "imap");
    Session session = Session.getInstance (props);
    Store store = session.getStore ("imap");
    store.connect ("", "", "");
    store.getFolder ("INBOX").open (Folder.READ_ONLY);
    Folder inbox = store.getFolder ("INBOX");
    inbox.open (Folder.READ_ONLY);
    return inbox;
}
----------------------------------------

private Folder getInboxFolder () throws MessagingException {
    Properties props = System.getProperties ();
    props.setProperty ("mail.store.protocol", "imaps");
    Session session = Session.getInstance (props, null);
    Store store = session.getStore ();
    store.connect ("imap.gmail.com", "aaa@gmail.com", "aaaaa");
    Folder inbox = store.getFolder ("INBOX");
    inbox.open (Folder.READ_ONLY);
    return inbox;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9800968_9801199_224_238
9800968_9801199_90_219
Title: Ball Animation in Swing 
----------------------------------------

public void actionPerformed (ActionEvent ae) {
    if (! flag) {
        timer.start ();
        button.setText ("STOP ANIMATION");
        flag = true;
    } else if (flag) {
        timer.stop ();
        button.setText ("START ANIMATION");
        flag = false;
    }

}
----------------------------------------

public void actionPerformed (ActionEvent ae) {
    if (fromTop && ! fromBottom && x < drawPanel.getWidth () && y < drawPanel.getHeight () && toRight && ! toLeft) {
        x += speedValue;
        y += speedValue;
    } else if (fromTop && ! fromBottom && x < drawPanel.getWidth () && y >= drawPanel.getHeight () && toRight && ! toLeft) {
        y -= speedValue;
        x += speedValue;
        fromTop = false;
        fromBottom = true;
    } else if (! fromTop && fromBottom && x < drawPanel.getWidth () && y <= 0 && toRight && ! toLeft) {
        fromTop = true;
        fromBottom = false;
        x += speedValue;
        y += speedValue;
    } else if (! fromTop && fromBottom && x < drawPanel.getWidth () && y < drawPanel.getHeight () && toRight && ! toLeft) {
        x += speedValue;
        y -= speedValue;
    } else if (! fromTop && fromBottom && x >= drawPanel.getWidth () && y < drawPanel.getHeight () && toRight && ! toLeft) {
        toRight = false;
        toLeft = true;
        x -= speedValue;
        y -= speedValue;
    } else if (! fromTop && fromBottom && x < drawPanel.getWidth () && y <= 0 && ! toRight && toLeft) {
        fromTop = true;
        fromBottom = false;
        x -= speedValue;
        y += speedValue;
    } else if (fromTop && ! fromBottom && x <= 0 && y < drawPanel.getHeight () && ! toRight && toLeft) {
        toRight = true;
        toLeft = false;
        x += speedValue;
        y += speedValue;
    } else if (fromTop && ! fromBottom && x >= drawPanel.getWidth () && y < drawPanel.getHeight () && toRight && ! toLeft) {
        toRight = false;
        toLeft = true;
        x -= speedValue;
        y += speedValue;
    } else if (fromTop && ! fromBottom && x < drawPanel.getWidth () && y < drawPanel.getHeight () && ! toRight && toLeft) {
        x -= speedValue;
        y += speedValue;
    } else if (! fromTop && fromBottom && x <= 0 && y < drawPanel.getHeight () && ! toRight && toLeft) {
        toRight = true;
        toLeft = false;
        x += speedValue;
        y -= speedValue;
    } else if (! fromTop && fromBottom && x < drawPanel.getWidth () && y < drawPanel.getHeight () && ! toRight && toLeft) {
        x -= speedValue;
        y -= speedValue;
    } else if (fromTop && ! fromBottom && x < drawPanel.getWidth () && y >= drawPanel.getHeight () && ! toRight && toLeft) {
        fromTop = false;
        fromBottom = true;
        x -= speedValue;
        y -= speedValue;
    }

    System.out.println ("X : " + x);
    System.out.println ("Y : " + y);
    System.out.println ("Direction is LEFT : " + toLeft);
    System.out.println ("Direction is RIGHT : " + toRight);
    System.out.println ("Coming from TOP : " + fromTop);
    System.out.println ("Coming from BOTTOM : " + fromBottom);
    drawPanel.setXYValues (x, y);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9804314_9804882_49_70
9804314_9804882_75_96
Title: Encode Imagefile to 64BaseBinary Format in android 
----------------------------------------

public static byte [] decode (char [] data, int off, int len) throws Exception {
    char [] ibuf = new char [4];
    int ibufcount = 0;
    byte [] obuf = new byte [len / 4 * 3 + 3];
    int obufcount = 0;
    for (int i = off;
    i < off + len; i ++) {
        char ch = data [i];
        if (ch == S_BASE64PAD || ch < S_DECODETABLE.length && S_DECODETABLE [ch] != Byte.MAX_VALUE) {
            ibuf [ibufcount ++] = ch;
            if (ibufcount == ibuf.length) {
                ibufcount = 0;
                obufcount += decode0 (ibuf, obuf, obufcount);
            }
        }
    }
    if (obufcount == obuf.length) return obuf;

    byte [] ret = new byte [obufcount];
    System.arraycopy (obuf, 0, ret, 0, obufcount);
    return ret;
}
----------------------------------------

public static byte [] decode (String data) throws Exception {
    char [] ibuf = new char [4];
    int ibufcount = 0;
    byte [] obuf = new byte [data.length () / 4 * 3 + 3];
    int obufcount = 0;
    for (int i = 0;
    i < data.length (); i ++) {
        char ch = data.charAt (i);
        if (ch == S_BASE64PAD || ch < S_DECODETABLE.length && S_DECODETABLE [ch] != Byte.MAX_VALUE) {
            ibuf [ibufcount ++] = ch;
            if (ibufcount == ibuf.length) {
                ibufcount = 0;
                obufcount += decode0 (ibuf, obuf, obufcount);
            }
        }
    }
    if (obufcount == obuf.length) return obuf;

    byte [] ret = new byte [obufcount];
    System.arraycopy (obuf, 0, ret, 0, obufcount);
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9806329_46279015_1_17
9806329_9837033_1_12
Title: Converting a ldap date 
----------------------------------------

static String parseLdapDate (String ldapDate) {
    long nanoseconds = Long.parseLong (ldapDate);
    long mills = (nanoseconds / 10000000);
    long unix = (((1970 - 1601) * 365) - 3 + Math.round ((1970 - 1601) / 4)) * 86400L;
    long timeStamp = mills - unix;
    Date date = new Date (timeStamp * 1000L);
    SimpleDateFormat sdf = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss z");
    String formattedDate = sdf.format (date);
    return formattedDate;
}
----------------------------------------

public Date parseLdapDate (String ldapDate) {
    SimpleDateFormat sdf = new SimpleDateFormat ("yyyyMMddHHmmss");
    sdf.setTimeZone (TimeZone.getTimeZone ("GMT"));
    try {
        return sdf.parse (ldapDate);
    } catch (ParseException e) {
        e.printStackTrace ();
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9807718_9807813_1_20
9807718_9808938_1_14
Title: Trigger event only after repaint in Java Swing? 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    Thread thread = new Thread () {
        public void run () {
            if (roll_dice.getDelay () > 500) {
                SwingUtilities.invokeAndWait (new Runnable () {
                    public void run () {
                        roll_dice.setDelay (50);
                        roll_dice.stop ();
                    }}

                );
                movePiece ();
            } else {
                roll_dice.setDelay (roll_dice.getDelay () + 50);
                dice_panel.repaint (0);
            }
        }}

    ;
    thread.start ();
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (roll_dice.getDelay () > 500) {
        roll_dice.setDelay (50);
        roll_dice.stop ();
        movePiece ();
    } else {
        roll_dice.setDelay (roll_dice.getDelay () + 50);
        for (JLabel dieLabel : diceLabels) {
            int randomIndex = random.nextInt (diceIcons.length);
            dieLabel.setIcon (diceIcons [randomIndex]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9811770_12659671_1_12
9811770_12659671_33_45
Title: Webmethods :can we remove an element from the documentList while looping through it 
----------------------------------------

public static final void drop (IData pipeline) throws ServiceException {
    IDataCursor cursor = pipeline.getCursor ();
    try {
        Object [] list = IDataUtil.getObjectArray (cursor, "$list");
        String index = IDataUtil.getString (cursor, "$index");
        if (index != null) IDataUtil.put (cursor, "$list", drop (list, index));

    } finally {
        cursor.destroy ();
    }
}
----------------------------------------

public static < T > T [] drop (T [] array, int index) {
    if (array != null) {
        if (index < 0) index += array.length;

        if (index < 0 || array.length <= index) throw new ArrayIndexOutOfBoundsException (index);

        T [] head = slice (array, 0, index);
        T [] tail = slice (array, index + 1, array.length - index);
        array = concatenate (head, tail);
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9827517_9827690_110_119
9827517_9828240_15_30
Title: Delete a specific button 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if ("Delete".equals (e.getActionCommand ())) {
        deleteNext = true;
    } else if (deleteNext) {
        gui.deleteButton (e.getActionCommand ());
        deleteNext = false;
    } else if (delegate != null) {
        delegate.actionPerformed (e);
    }

}
----------------------------------------

public void actionPerformed (ActionEvent ae) {
    JButton button = (JButton) ae.getSource ();
    if (deleteNow) {
        leftPanel.remove (button);
        leftPanel.revalidate ();
        leftPanel.repaint ();
        deleteNow = false;
    } else {
        System.out.println ("My COMMAND IS : " + button.getActionCommand ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9829319_9829647_9_29
9829319_9830913_21_29
Title: Centering a JLabel in a JPanel 
----------------------------------------

public static void main (String [] args) {
    JFrame frame = new JFrame ();
    JPanel panel = new JPanel ();
    panel.setLayout (new MigLayout ());
    frame.add (panel);
    JLabel label = new JLabel ("Text");
    panel.add (label, "push, align center");
    frame.setSize (400, 400);
    frame.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            CenteredJLabel centeredJLabel = new CenteredJLabel ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
983964_984151_2_29
983964_985353_6_25
Title: Why does JPasswordField.getPassword() create a String with the password in it? 
----------------------------------------

public static void main (String [] args) {
    java.awt.EventQueue.invokeLater (new Runnable () {
        public void run () {
            new javax.swing.JFrame ("Pwd") {

                {
                    add (new javax.swing.JPasswordField () {
                        @Override
                        public String getText () {
                            System.err.println ("Awoooga!!");
                            return super.getText ();
                        }
                        {
                            addActionListener (new java.awt.event.ActionListener () {
                                public void actionPerformed (java.awt.event.ActionEvent event) {
                                }}

                            );
                        }

                    }

                    );
                    setDefaultCloseOperation (DISPOSE_ON_CLOSE);
                    pack ();
                    setVisible (true);
                }

            }

            ;
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    JFrame frame = new JFrame ();
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    final JPasswordField passField = new JPasswordField () {
        @Override
        public String getText () {
            System.err.println ("Awhooa: " + super.getText ());
            return null;
        }}

    ;
    passField.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent evt) {
            char [] p = passField.getPassword ();
            System.out.println (p);
        }}

    );
    frame.add (passField);
    frame.setVisible (true);
    frame.pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
983964_984151_2_29
983964_9990086_106_143
Title: Why does JPasswordField.getPassword() create a String with the password in it? 
----------------------------------------

public static void main (String [] args) {
    java.awt.EventQueue.invokeLater (new Runnable () {
        public void run () {
            new javax.swing.JFrame ("Pwd") {

                {
                    add (new javax.swing.JPasswordField () {
                        @Override
                        public String getText () {
                            System.err.println ("Awoooga!!");
                            return super.getText ();
                        }
                        {
                            addActionListener (new java.awt.event.ActionListener () {
                                public void actionPerformed (java.awt.event.ActionEvent event) {
                                }}

                            );
                        }

                    }

                    );
                    setDefaultCloseOperation (DISPOSE_ON_CLOSE);
                    pack ();
                    setVisible (true);
                }

            }

            ;
        }}

    );
}
----------------------------------------

public static void main (String args []) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels ()) {
            if ("Nimbus".equals (info.getName ())) {
                javax.swing.UIManager.setLookAndFeel (info.getClassName ());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    }
    java.awt.EventQueue.invokeLater (new Runnable () {
        public void run () {
            new login ().setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
983964_985353_6_25
983964_9990086_106_143
Title: Why does JPasswordField.getPassword() create a String with the password in it? 
----------------------------------------

public static void main (String [] args) {
    JFrame frame = new JFrame ();
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    final JPasswordField passField = new JPasswordField () {
        @Override
        public String getText () {
            System.err.println ("Awhooa: " + super.getText ());
            return null;
        }}

    ;
    passField.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent evt) {
            char [] p = passField.getPassword ();
            System.out.println (p);
        }}

    );
    frame.add (passField);
    frame.setVisible (true);
    frame.pack ();
}
----------------------------------------

public static void main (String args []) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels ()) {
            if ("Nimbus".equals (info.getName ())) {
                javax.swing.UIManager.setLookAndFeel (info.getClassName ());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger (login.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    }
    java.awt.EventQueue.invokeLater (new Runnable () {
        public void run () {
            new login ().setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9840450_9840572_28_37
9840450_9840572_77_94
Title: Java network game: How to list available servers? 
----------------------------------------

public void run () {
    while (true) {
        beat ();
        try {
            Thread.sleep (5000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (run) {
        DatagramPacket datagramPacket = new DatagramPacket (new byte [1500], 1500);
        try {
            multicastSocket.receive (datagramPacket);
            if (! isLocalhost (datagramPacket.getAddress ().getHostAddress ())) {
                Beat beat = getBeat (datagramPacket);
                if (beat != null) {
                    network.setPeer (new Peer (datagramPacket.getAddress (), beat.getConnectionListenerPort ()));
                    message (new Message (TYPE.NETWORK, KEY.NETWORK, network));
                }
            }
        } catch (IOException e) {
            error (e);
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9853310_9853451_1_10
9853310_9861346_1_10
Title: Hibernate create alias on many to many list 
----------------------------------------

@Override
@Transactional
public List < UserGroup > findUserGroupOf (long userGroupId) {
    Criteria criteria = getSession ().createCriteria (UserGroup.class);
    criteria.add (Restrictions.eq ("id", userGroupId));
    criteria.createAlias ("userAccountsRole", "uar");
    criteria.setFetchMode ("uar.userAccountList", FetchMode.JOIN);
    return criteria.list ();
}
----------------------------------------

@Override
@Transactional
public List < UserGroup > findUserGroupOf (UserAccount userAccount) {
    Criteria criteria = getSession ().createCriteria (UserGroup.class);
    criteria.createAlias ("userAccountsRole", "userAccountsRole");
    criteria.createAlias ("userAccountsRole.userAccountList", "userAccountList");
    criteria.add (Restrictions.eq ("userAccountList.id", userAccount.getId ()));
    return criteria.list ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9853378_9853521_21_56
9853378_9853546_13_24
Title: strange bug - how to pause a java program? 
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    button.setText ("Clicked");
    SwingWorker < String, Object > worker = new SwingWorker < String, Object > () {
        @Override
        public String doInBackground () {
            try {
                Thread.sleep (2000);
            } catch (InterruptedException e) {
            }
            return "Done";
        }@Override
        protected void done () {
            try {
                button.setText (get ());
            } catch (Exception e) {
            }
        }}

    ;
    worker.execute ();
}
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    Timer timer = new Timer (1000, new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent arg0) {
            if (i <= 1) messageLabel.setText (messages [i ++]);

        }}

    );
    timer.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9895041_11459962_1_23
9895041_32447591_1_35
Title: Merging Two JSON Documents Using Jackson 
----------------------------------------

public static JsonNode merge (JsonNode mainNode, JsonNode updateNode) {
    Iterator < String > fieldNames = updateNode.fieldNames ();
    while (fieldNames.hasNext ()) {
        String fieldName = fieldNames.next ();
        JsonNode jsonNode = mainNode.get (fieldName);
        if (jsonNode != null && jsonNode.isObject ()) {
            merge (jsonNode, updateNode.get (fieldName));
        } else {
            if (mainNode instanceof ObjectNode) {
                JsonNode value = updateNode.get (fieldName);
                ((ObjectNode) mainNode).put (fieldName, value);
            }
        }
    }
    return mainNode;
}
----------------------------------------

public static JsonNode merge (JsonNode mainNode, JsonNode updateNode) {
    Iterator < String > fieldNames = updateNode.fieldNames ();
    while (fieldNames.hasNext ()) {
        String updatedFieldName = fieldNames.next ();
        JsonNode valueToBeUpdated = mainNode.get (updatedFieldName);
        JsonNode updatedValue = updateNode.get (updatedFieldName);
        if (valueToBeUpdated != null && valueToBeUpdated.isArray () && updatedValue.isArray ()) {
            for (int i = 0;
            i < updatedValue.size (); i ++) {
                JsonNode updatedChildNode = updatedValue.get (i);
                if (valueToBeUpdated.size () <= i) {
                    ((ArrayNode) valueToBeUpdated).add (updatedChildNode);
                }
                JsonNode childNodeToBeUpdated = valueToBeUpdated.get (i);
                merge (childNodeToBeUpdated, updatedChildNode);
            }
        } else if (valueToBeUpdated != null && valueToBeUpdated.isObject ()) {
            merge (valueToBeUpdated, updatedValue);
        } else {
            if (mainNode instanceof ObjectNode) {
                ((ObjectNode) mainNode).replace (updatedFieldName, updatedValue);
            }
        }

    }
    return mainNode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9895041_11459962_1_23
9895041_41135481_7_59
Title: Merging Two JSON Documents Using Jackson 
----------------------------------------

public static JsonNode merge (JsonNode mainNode, JsonNode updateNode) {
    Iterator < String > fieldNames = updateNode.fieldNames ();
    while (fieldNames.hasNext ()) {
        String fieldName = fieldNames.next ();
        JsonNode jsonNode = mainNode.get (fieldName);
        if (jsonNode != null && jsonNode.isObject ()) {
            merge (jsonNode, updateNode.get (fieldName));
        } else {
            if (mainNode instanceof ObjectNode) {
                JsonNode value = updateNode.get (fieldName);
                ((ObjectNode) mainNode).put (fieldName, value);
            }
        }
    }
    return mainNode;
}
----------------------------------------

public static void merge (JsonNode toBeMerged, JsonNode mergedInTo) {
    Iterator < Map.Entry < String, JsonNode > > incomingFieldsIterator = toBeMerged.fields ();
    Iterator < Map.Entry < String, JsonNode > > mergedIterator = mergedInTo.fields ();
    while (incomingFieldsIterator.hasNext ()) {
        Map.Entry < String, JsonNode > incomingEntry = incomingFieldsIterator.next ();
        JsonNode subNode = incomingEntry.getValue ();
        if (subNode.getNodeType ().equals (JsonNodeType.OBJECT)) {
            boolean isNewBlock = true;
            mergedIterator = mergedInTo.fields ();
            while (mergedIterator.hasNext ()) {
                Map.Entry < String, JsonNode > entry = mergedIterator.next ();
                if (entry.getKey ().equals (incomingEntry.getKey ())) {
                    merge (incomingEntry.getValue (), entry.getValue ());
                    isNewBlock = false;
                }
            }
            if (isNewBlock) {
                ((ObjectNode) mergedInTo).replace (incomingEntry.getKey (), incomingEntry.getValue ());
            }
        } else if (subNode.getNodeType ().equals (JsonNodeType.ARRAY)) {
            boolean newEntry = true;
            mergedIterator = mergedInTo.fields ();
            while (mergedIterator.hasNext ()) {
                Map.Entry < String, JsonNode > entry = mergedIterator.next ();
                if (entry.getKey ().equals (incomingEntry.getKey ())) {
                    updateArray (incomingEntry.getValue (), entry);
                    newEntry = false;
                }
            }
            if (newEntry) {
                ((ObjectNode) mergedInTo).replace (incomingEntry.getKey (), incomingEntry.getValue ());
            }
        }

        ValueNode valueNode = null;
        JsonNode incomingValueNode = incomingEntry.getValue ();
        switch (subNode.getNodeType ()) {
            case STRING :
                valueNode = new TextNode (incomingValueNode.textValue ());
                break;
            case NUMBER :
                valueNode = new IntNode (incomingValueNode.intValue ());
                break;
            case BOOLEAN :
                valueNode = BooleanNode.valueOf (incomingValueNode.booleanValue ());
        }
        if (valueNode != null) {
            updateObject (mergedInTo, valueNode, incomingEntry);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9895041_32447591_1_35
9895041_41135481_7_59
Title: Merging Two JSON Documents Using Jackson 
----------------------------------------

public static JsonNode merge (JsonNode mainNode, JsonNode updateNode) {
    Iterator < String > fieldNames = updateNode.fieldNames ();
    while (fieldNames.hasNext ()) {
        String updatedFieldName = fieldNames.next ();
        JsonNode valueToBeUpdated = mainNode.get (updatedFieldName);
        JsonNode updatedValue = updateNode.get (updatedFieldName);
        if (valueToBeUpdated != null && valueToBeUpdated.isArray () && updatedValue.isArray ()) {
            for (int i = 0;
            i < updatedValue.size (); i ++) {
                JsonNode updatedChildNode = updatedValue.get (i);
                if (valueToBeUpdated.size () <= i) {
                    ((ArrayNode) valueToBeUpdated).add (updatedChildNode);
                }
                JsonNode childNodeToBeUpdated = valueToBeUpdated.get (i);
                merge (childNodeToBeUpdated, updatedChildNode);
            }
        } else if (valueToBeUpdated != null && valueToBeUpdated.isObject ()) {
            merge (valueToBeUpdated, updatedValue);
        } else {
            if (mainNode instanceof ObjectNode) {
                ((ObjectNode) mainNode).replace (updatedFieldName, updatedValue);
            }
        }

    }
    return mainNode;
}
----------------------------------------

public static void merge (JsonNode toBeMerged, JsonNode mergedInTo) {
    Iterator < Map.Entry < String, JsonNode > > incomingFieldsIterator = toBeMerged.fields ();
    Iterator < Map.Entry < String, JsonNode > > mergedIterator = mergedInTo.fields ();
    while (incomingFieldsIterator.hasNext ()) {
        Map.Entry < String, JsonNode > incomingEntry = incomingFieldsIterator.next ();
        JsonNode subNode = incomingEntry.getValue ();
        if (subNode.getNodeType ().equals (JsonNodeType.OBJECT)) {
            boolean isNewBlock = true;
            mergedIterator = mergedInTo.fields ();
            while (mergedIterator.hasNext ()) {
                Map.Entry < String, JsonNode > entry = mergedIterator.next ();
                if (entry.getKey ().equals (incomingEntry.getKey ())) {
                    merge (incomingEntry.getValue (), entry.getValue ());
                    isNewBlock = false;
                }
            }
            if (isNewBlock) {
                ((ObjectNode) mergedInTo).replace (incomingEntry.getKey (), incomingEntry.getValue ());
            }
        } else if (subNode.getNodeType ().equals (JsonNodeType.ARRAY)) {
            boolean newEntry = true;
            mergedIterator = mergedInTo.fields ();
            while (mergedIterator.hasNext ()) {
                Map.Entry < String, JsonNode > entry = mergedIterator.next ();
                if (entry.getKey ().equals (incomingEntry.getKey ())) {
                    updateArray (incomingEntry.getValue (), entry);
                    newEntry = false;
                }
            }
            if (newEntry) {
                ((ObjectNode) mergedInTo).replace (incomingEntry.getKey (), incomingEntry.getValue ());
            }
        }

        ValueNode valueNode = null;
        JsonNode incomingValueNode = incomingEntry.getValue ();
        switch (subNode.getNodeType ()) {
            case STRING :
                valueNode = new TextNode (incomingValueNode.textValue ());
                break;
            case NUMBER :
                valueNode = new IntNode (incomingValueNode.intValue ());
                break;
            case BOOLEAN :
                valueNode = BooleanNode.valueOf (incomingValueNode.booleanValue ());
        }
        if (valueNode != null) {
            updateObject (mergedInTo, valueNode, incomingEntry);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9909465_21525106_13_28
9909465_9910012_13_25
Title: How to disable DTD fetching using JAXB2.0 
----------------------------------------

public static void main (String [] args) throws Exception {
    JAXBContext jc = JAXBContext.newInstance (MyBean.class);
    SAXParserFactory spf = SAXParserFactory.newInstance ();
    spf.setFeature ("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
    spf.setFeature ("http://xml.org/sax/features/validation", false);
    XMLReader xmlReader = spf.newSAXParser ().getXMLReader ();
    InputSource inputSource = new InputSource (new FileReader ("myfile.xml"));
    SAXSource source = new SAXSource (xmlReader, inputSource);
    Unmarshaller unmarshaller = jc.createUnmarshaller ();
    MyBean foo = (MyBean) unmarshaller.unmarshal (source);
}
----------------------------------------

public static void main (String [] args) throws Exception {
    JAXBContext jc = JAXBContext.newInstance (Foo.class);
    SAXParserFactory spf = SAXParserFactory.newInstance ();
    spf.setFeature (XMLConstants.FEATURE_SECURE_PROCESSING, true);
    XMLReader xmlReader = spf.newSAXParser ().getXMLReader ();
    InputSource inputSource = new InputSource (new FileReader ("input.xml"));
    SAXSource source = new SAXSource (xmlReader, inputSource);
    Unmarshaller unmarshaller = jc.createUnmarshaller ();
    Foo foo = (Foo) unmarshaller.unmarshal (source);
    System.out.println (foo.getValue ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9910252_50954035_7_31
9910252_53400600_11_31
Title: How to reload authorities on user update with Spring Security 
----------------------------------------

public boolean preHandle (HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
    Authentication auth = SecurityContextHolder.getContext ().getAuthentication ();
    Set < GrantedAuthority > authorities = new HashSet < > ();
    if (auth.isAuthenticated ()) {
        authorities.add (new SimpleGrantedAuthority ("ROLE_USER"));
    }
    User userFromDatabase = getUserFromDatabase (auth.getName ());
    if (userFromDatabase != null) {
        authorities.add (new SimpleGrantedAuthority ("..."));
    }
    Authentication newAuth = null;
    if (auth.getClass () == OAuth2AuthenticationToken.class) {
        OAuth2User principal = ((OAuth2AuthenticationToken) auth).getPrincipal ();
        if (principal != null) {
            newAuth = new OAuth2AuthenticationToken (principal, authorities, (((OAuth2AuthenticationToken) auth).getAuthorizedClientRegistrationId ()));
        }
    }
    SecurityContextHolder.getContext ().setAuthentication (newAuth);
    return true;
}
----------------------------------------

public boolean preHandle (HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
    Authentication auth = SecurityContextHolder.getContext ().getAuthentication ();
    try {
        CurrentUser current = (CurrentUser) auth.getPrincipal ();
        String username = current.getUser ().getUsername ();
        if (users_to_update_roles.contains (username)) {
            updateRoles (auth, current);
            users_to_update_roles.remove (username);
        }
    } catch (Exception e) {
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_14173052_4_19
9912967_25334250_3_21
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    String tenStars = "**********";
    String oneStar = "*";
    int count = 0;
    System.out.println (tenStars);
    count ++;
    while (count <= 8) {
        System.out.println (oneStar + "     " + oneStar);
        count ++;
    }
    System.out.print (tenStars);
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= 5; i ++) {
        for (int j = 1;
        j <= 5; j ++) {
            if (i == 2 || i == 3 || i == 4) {
                System.out.print ("*    *");
                break;
            } else {
                System.out.print ("*");
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_14173052_4_19
9912967_26322104_4_37
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    String tenStars = "**********";
    String oneStar = "*";
    int count = 0;
    System.out.println (tenStars);
    count ++;
    while (count <= 8) {
        System.out.println (oneStar + "     " + oneStar);
        count ++;
    }
    System.out.print (tenStars);
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int ans;
    System.out.print ("Enter the size of the side of the square: ");
    ans = input.nextInt ();
    String ast = "*";
    if (ans > 0 && ans < 21) {
        for (int i = 0;
        i <= ans - 1; i ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
        for (int i = 1;
        i <= ans - 2; i ++) {
            System.out.print ("*");
            for (int b = 0;
            b < ans * 2 - 3; b ++) {
                System.out.print (" ");
            }
            System.out.println ("*");
        }
        for (int i = 1;
        i <= ans; i ++) {
            System.out.print ("* ");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_14173052_4_19
9912967_30555710_3_24
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    String tenStars = "**********";
    String oneStar = "*";
    int count = 0;
    System.out.println (tenStars);
    count ++;
    while (count <= 8) {
        System.out.println (oneStar + "     " + oneStar);
        count ++;
    }
    System.out.print (tenStars);
}
----------------------------------------

public static void main (String [] args) {
    String star = "*";
    String space = " ";
    int MAX = 5;
    for (int row = 0;
    row < MAX; row ++) {
        for (int col = 0;
        col < MAX; col ++) {
            if (row == 0 || row == MAX - 1) {
                System.out.print (star);
            } else if (col == 0 || col == MAX - 1) {
                System.out.print (star);
            } else {
                System.out.print (space);
            }

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_14173052_4_19
9912967_34948919_5_23
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    String tenStars = "**********";
    String oneStar = "*";
    int count = 0;
    System.out.println (tenStars);
    count ++;
    while (count <= 8) {
        System.out.println (oneStar + "     " + oneStar);
        count ++;
    }
    System.out.print (tenStars);
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        for (int j = 0;
        j <= 10; j ++) {
            if (i == 0 || i == 10) {
                System.out.print ("x");
            } else if (j == 0 || j == 10) {
                System.out.print ("x");
            } else {
                System.out.print (" ");
            }

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_14173052_4_19
9912967_45356973_4_35
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    String tenStars = "**********";
    String oneStar = "*";
    int count = 0;
    System.out.println (tenStars);
    count ++;
    while (count <= 8) {
        System.out.println (oneStar + "     " + oneStar);
        count ++;
    }
    System.out.print (tenStars);
}
----------------------------------------

public static void main (String...args) {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Enter the row : ");
    int row = sc.nextInt ();
    System.out.print ("Enter the column : ");
    int column = sc.nextInt ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
    for (int i = row - 2;
    i >= 1; i --) {
        System.out.println ();
        System.out.print ("*");
        for (int k = 1;
        k <= column - 2; k ++) {
            if (i < 1) {
                break;
            }
            System.out.print (" ");
        }
        System.out.print ("*");
    }
    System.out.println ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_16682985_1_25
9912967_16686426_1_15
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void hallowSquare (int side) {
    int rowPos, size = side;
    while (side > 0) {
        rowPos = size;
        while (rowPos > 0) {
            if (size == side || side == 1 || rowPos == 1 || rowPos == size) System.out.print ("*");
            else System.out.print (" ");

            rowPos --;
        }
        System.out.println ();
        side --;
    }
}
----------------------------------------

private static void hallowSquare (int h, int w) {
    for (int i = 1;
    i <= h; i ++) {
        for (int j = 1;
        j <= w; j ++) {
            if (j == 1 || j == w || i == 1 || i == h) System.out.print ("X");
            else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_25334250_3_21
9912967_26322104_4_37
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= 5; i ++) {
        for (int j = 1;
        j <= 5; j ++) {
            if (i == 2 || i == 3 || i == 4) {
                System.out.print ("*    *");
                break;
            } else {
                System.out.print ("*");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int ans;
    System.out.print ("Enter the size of the side of the square: ");
    ans = input.nextInt ();
    String ast = "*";
    if (ans > 0 && ans < 21) {
        for (int i = 0;
        i <= ans - 1; i ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
        for (int i = 1;
        i <= ans - 2; i ++) {
            System.out.print ("*");
            for (int b = 0;
            b < ans * 2 - 3; b ++) {
                System.out.print (" ");
            }
            System.out.println ("*");
        }
        for (int i = 1;
        i <= ans; i ++) {
            System.out.print ("* ");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_25334250_3_21
9912967_30555710_3_24
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= 5; i ++) {
        for (int j = 1;
        j <= 5; j ++) {
            if (i == 2 || i == 3 || i == 4) {
                System.out.print ("*    *");
                break;
            } else {
                System.out.print ("*");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    String star = "*";
    String space = " ";
    int MAX = 5;
    for (int row = 0;
    row < MAX; row ++) {
        for (int col = 0;
        col < MAX; col ++) {
            if (row == 0 || row == MAX - 1) {
                System.out.print (star);
            } else if (col == 0 || col == MAX - 1) {
                System.out.print (star);
            } else {
                System.out.print (space);
            }

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_25334250_3_21
9912967_34948919_5_23
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= 5; i ++) {
        for (int j = 1;
        j <= 5; j ++) {
            if (i == 2 || i == 3 || i == 4) {
                System.out.print ("*    *");
                break;
            } else {
                System.out.print ("*");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        for (int j = 0;
        j <= 10; j ++) {
            if (i == 0 || i == 10) {
                System.out.print ("x");
            } else if (j == 0 || j == 10) {
                System.out.print ("x");
            } else {
                System.out.print (" ");
            }

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_25334250_3_21
9912967_45356973_4_35
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= 5; i ++) {
        for (int j = 1;
        j <= 5; j ++) {
            if (i == 2 || i == 3 || i == 4) {
                System.out.print ("*    *");
                break;
            } else {
                System.out.print ("*");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String...args) {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Enter the row : ");
    int row = sc.nextInt ();
    System.out.print ("Enter the column : ");
    int column = sc.nextInt ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
    for (int i = row - 2;
    i >= 1; i --) {
        System.out.println ();
        System.out.print ("*");
        for (int k = 1;
        k <= column - 2; k ++) {
            if (i < 1) {
                break;
            }
            System.out.print (" ");
        }
        System.out.print ("*");
    }
    System.out.println ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_26322104_4_37
9912967_30555710_3_24
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int ans;
    System.out.print ("Enter the size of the side of the square: ");
    ans = input.nextInt ();
    String ast = "*";
    if (ans > 0 && ans < 21) {
        for (int i = 0;
        i <= ans - 1; i ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
        for (int i = 1;
        i <= ans - 2; i ++) {
            System.out.print ("*");
            for (int b = 0;
            b < ans * 2 - 3; b ++) {
                System.out.print (" ");
            }
            System.out.println ("*");
        }
        for (int i = 1;
        i <= ans; i ++) {
            System.out.print ("* ");
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String star = "*";
    String space = " ";
    int MAX = 5;
    for (int row = 0;
    row < MAX; row ++) {
        for (int col = 0;
        col < MAX; col ++) {
            if (row == 0 || row == MAX - 1) {
                System.out.print (star);
            } else if (col == 0 || col == MAX - 1) {
                System.out.print (star);
            } else {
                System.out.print (space);
            }

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_26322104_4_37
9912967_34948919_5_23
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int ans;
    System.out.print ("Enter the size of the side of the square: ");
    ans = input.nextInt ();
    String ast = "*";
    if (ans > 0 && ans < 21) {
        for (int i = 0;
        i <= ans - 1; i ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
        for (int i = 1;
        i <= ans - 2; i ++) {
            System.out.print ("*");
            for (int b = 0;
            b < ans * 2 - 3; b ++) {
                System.out.print (" ");
            }
            System.out.println ("*");
        }
        for (int i = 1;
        i <= ans; i ++) {
            System.out.print ("* ");
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        for (int j = 0;
        j <= 10; j ++) {
            if (i == 0 || i == 10) {
                System.out.print ("x");
            } else if (j == 0 || j == 10) {
                System.out.print ("x");
            } else {
                System.out.print (" ");
            }

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_26322104_4_37
9912967_45356973_4_35
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int ans;
    System.out.print ("Enter the size of the side of the square: ");
    ans = input.nextInt ();
    String ast = "*";
    if (ans > 0 && ans < 21) {
        for (int i = 0;
        i <= ans - 1; i ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
        for (int i = 1;
        i <= ans - 2; i ++) {
            System.out.print ("*");
            for (int b = 0;
            b < ans * 2 - 3; b ++) {
                System.out.print (" ");
            }
            System.out.println ("*");
        }
        for (int i = 1;
        i <= ans; i ++) {
            System.out.print ("* ");
        }
    }
}
----------------------------------------

public static void main (String...args) {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Enter the row : ");
    int row = sc.nextInt ();
    System.out.print ("Enter the column : ");
    int column = sc.nextInt ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
    for (int i = row - 2;
    i >= 1; i --) {
        System.out.println ();
        System.out.print ("*");
        for (int k = 1;
        k <= column - 2; k ++) {
            if (i < 1) {
                break;
            }
            System.out.print (" ");
        }
        System.out.print ("*");
    }
    System.out.println ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_30555710_3_24
9912967_34948919_5_23
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    String star = "*";
    String space = " ";
    int MAX = 5;
    for (int row = 0;
    row < MAX; row ++) {
        for (int col = 0;
        col < MAX; col ++) {
            if (row == 0 || row == MAX - 1) {
                System.out.print (star);
            } else if (col == 0 || col == MAX - 1) {
                System.out.print (star);
            } else {
                System.out.print (space);
            }

        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        for (int j = 0;
        j <= 10; j ++) {
            if (i == 0 || i == 10) {
                System.out.print ("x");
            } else if (j == 0 || j == 10) {
                System.out.print ("x");
            } else {
                System.out.print (" ");
            }

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_30555710_3_24
9912967_45356973_4_35
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    String star = "*";
    String space = " ";
    int MAX = 5;
    for (int row = 0;
    row < MAX; row ++) {
        for (int col = 0;
        col < MAX; col ++) {
            if (row == 0 || row == MAX - 1) {
                System.out.print (star);
            } else if (col == 0 || col == MAX - 1) {
                System.out.print (star);
            } else {
                System.out.print (space);
            }

        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String...args) {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Enter the row : ");
    int row = sc.nextInt ();
    System.out.print ("Enter the column : ");
    int column = sc.nextInt ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
    for (int i = row - 2;
    i >= 1; i --) {
        System.out.println ();
        System.out.print ("*");
        for (int k = 1;
        k <= column - 2; k ++) {
            if (i < 1) {
                break;
            }
            System.out.print (" ");
        }
        System.out.print ("*");
    }
    System.out.println ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9912967_34948919_5_23
9912967_45356973_4_35
Title: Java - Printing an empty square using nested loops 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i <= 10; i ++) {
        for (int j = 0;
        j <= 10; j ++) {
            if (i == 0 || i == 10) {
                System.out.print ("x");
            } else if (j == 0 || j == 10) {
                System.out.print ("x");
            } else {
                System.out.print (" ");
            }

        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String...args) {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Enter the row : ");
    int row = sc.nextInt ();
    System.out.print ("Enter the column : ");
    int column = sc.nextInt ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
    for (int i = row - 2;
    i >= 1; i --) {
        System.out.println ();
        System.out.print ("*");
        for (int k = 1;
        k <= column - 2; k ++) {
            if (i < 1) {
                break;
            }
            System.out.print (" ");
        }
        System.out.print ("*");
    }
    System.out.println ();
    for (int i = 1;
    i <= column; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9913732_28111679_19_31
9913732_9961748_11_22
Title: Configuring Spring MVC controller to send file to client 
----------------------------------------

protected void writeInternal (TsvResponse tsvResponse, HttpOutputMessage output) throws IOException, HttpMessageNotWritableException {
    output.getHeaders ().setContentType (MEDIA_TYPE);
    output.getHeaders ().set ("Content-Disposition", "attachment; filename=\"" + tsvResponse.getFilename () + "\"");
    final OutputStream out = output.getBody ();
    writeColumnTitles (tsvResponse, out);
    if (tsvResponse.getRecords () != null && tsvResponse.getRecords ().size () != 0) {
        writeRecords (tsvResponse, out);
    }
    out.close ();
}
----------------------------------------

protected void writeInternal (CsvResponse response, HttpOutputMessage output) throws IOException, HttpMessageNotWritableException {
    output.getHeaders ().setContentType (MEDIA_TYPE);
    output.getHeaders ().set ("Content-Disposition", "attachment; filename=\"" + response.getFilename () + "\"");
    OutputStream out = output.getBody ();
    CsvWriter writer = new CsvWriter (new OutputStreamWriter (out), '\u0009');
    List < CompositeRequirement > allRecords = response.getRecords ();
    for (int i = 1;
    i < allRecords.size (); i ++) {
        CompositeRequirement aReq = allRecords.get (i);
        writer.write (aReq.toString ());
    }
    writer.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9922658_10048230_35_55
9922658_10048230_67_87
Title: How to notify PipedInputStream thread that PipedOutputStream thread has written last byte? 
----------------------------------------

public void run () {
    try {
        String msg = "Ceci n'est pas une pipe";
        byte [] msgBytes = msg.getBytes (LATIN1);
        System.out.println ("WriterThread sending message: " + msg);
        for (int i = 0;
        i < msgBytes.length; i ++) {
            _os.write (msgBytes, i, 1);
            System.out.println ("WriterThread wrote a byte!");
            _os.flush ();
        }
        _os.close ();
        System.out.println ("[COMPLETED] WriterThread");
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        ByteArrayOutputStream baos = new ByteArrayOutputStream ();
        byte [] buffer = new byte [1];
        int read;
        while ((read = _is.read (buffer, 0, 1)) != - 1) {
            System.out.println ("ReaderThread read a byte!");
            baos.write (buffer, 0, read);
        }
        System.out.println ("[COMPLETED] ReaderThread; received: " + new String (baos.toByteArray (), LATIN1));
        _is.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9925269_9925331_12_23
9925269_9925675_11_24
Title: NullPointerException with creating a thread 
----------------------------------------

public void run () {
    for (int i = 0;
    i < idMine.length; i ++) {
        System.out.print (idMine [i] + " ");
        try {
            Thread.sleep (1000);
        } catch (InterruptedException in) {
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < idMine.length; i ++) {
        System.out.print (idMine [i] + " ");
        try {
            Thread.sleep (1000);
        } catch (InterruptedException in) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9928501_9928544_1_10
9928501_9928585_1_11
Title: Can't Return ArrayList 
----------------------------------------

public ArrayList < MovieEntry > searchYear (int yr) {
    ArrayList < String > yearMatches = new ArrayList < String > ();
    for (MovieEntry m : Database) m.getYear (yr);

    if (yearMatches.contains (yr) == false) {
        String sYr = Integer.toString (yr);
        yearMatches.add (sYr);
    }
    return yearMatches;
}
----------------------------------------

public ArrayList < MovieEntry > searchYear (int yr) {
    ArrayList < String > yearMatches = new ArrayList < String > ();
    for (MovieEntry m : Database) {
        m.getYear (yr);
    }
    if (yearMatches.contains (yr) == false) {
        String sYr = Integer.toString (yr);
        yearMatches.add (sYr);
    }
    return yearMatches;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9958216_23144125_1_17
9958216_9958321_1_21
Title: Simple HashTable implementation using an array in Java? 
----------------------------------------

public String toString () {
    String s = "<HashTable[";
    for (int i = 0;
    i < this.capacity; i ++) {
        if (data [i].Element != null) {
            s += data [i].toString ();
            if (i < this.size - 1) {
                s += ",";
            }
        }
    }
    s += "]>";
    return s;
}
----------------------------------------

public String toString () {
    String s = "<HashTable[";
    int i = 0;
    int count = 0;
    while (count < this.size ()) {
        if (data [i] == AVAILABLE) {
            i ++;
            continue;
        }
        s += data [i].toString ();
        if (count < this.size () - 1) {
            s += ",";
        }
        count ++;
    }
    s += "]>";
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9983746_10007909_29_47
9983746_10007909_7_17
Title: "Java: Producer = Consumer how to know when to stop?" 
----------------------------------------

public void run () {
    try {
        do {
            String item = this.processQueue.poll (100, TimeUnit.MILLISECONDS);
            if (item == null) break;

            count ++;
            List < String > resultItems = this.processItem (item);
            for (String resultItem : resultItems) {
                this.processQueue.put (resultItem);
            }
        } while (true);
    } catch (InterruptedException e) {
        System.out.println ("Interrupted");
        Thread.currentThread ().interrupt ();
    }
    if (count != 0) System.out.println (Thread.currentThread () + ": processed " + count + " entries");

}
----------------------------------------

private void run () throws Exception {
    BlockingQueue < String > processQueue = new ArrayBlockingQueue < > (10000);
    processQueue.put ("lalalalalalalalalalalalala");
    ExecutorService service = Executors.newFixedThreadPool (100);
    for (int i = 0;
    i < 100; ++ i) {
        service.execute (new Worker (processQueue));
    }
    service.shutdown ();
    service.awaitTermination (1, TimeUnit.SECONDS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9986285_9986363_10_25
9986285_9986720_1_30
Title: Animating a Rectangle in Java 
----------------------------------------

public static void main (String [] args) {
    Test t = new Test ();
    t.setSize (800, 600);
    t.setVisible (true);
    t.getContentPane ().add (t.g);
    while (true) {
        t.g.x = t.g.x + 1;
        t.g.y = t.g.y + 1;
        t.repaint ();
        try {
            Thread.sleep (100);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

public static void main (String args []) throws Exception {
    new JFrame ("Draw a red box") {
        Point pointStart = new Point (50, 50);
        Point pointEnd = new Point (200, 200);
        public void paint (Graphics g) {
            super.paint (g);
            if (pointStart != null) {
                g.setColor (Color.RED);
                g.drawRect (pointStart.x, pointStart.y, pointEnd.x, pointEnd.y);
            }
        }
        {
            setDefaultCloseOperation (DISPOSE_ON_CLOSE);
            setSize (300, 300);
            setLocation (300, 300);
            setVisible (true);
            Thread t = new Thread (new Runnable () {
                public void run () {
                    while (pointEnd.x > 0 && pointEnd.y > 0) {
                        pointEnd = new Point (-- pointEnd.x, -- pointEnd.y);
                        repaint ();
                        try {
                            Thread.sleep (22);
                        } catch (InterruptedException e) {
                            e.printStackTrace ();
                        }
                    }
                    pointStart = null;
                    pointEnd = null;
                }}

            );
            t.setDaemon (true);
            t.start ();
        }

    }

    ;
}
----------------------------------------

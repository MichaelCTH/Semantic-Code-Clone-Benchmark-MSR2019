$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18765197_18765466_11_29
18765197_18765584_56_66
Title: How to manage state change in Java 
----------------------------------------

public void manage () {
    double speed = getSpeedfromVehicle ();
    if ((speed >= 0 && speed <= 10) && state != SpeedState.LOW) {
        state = SpeedState.LOW;
        System.out.println ("Low Speed mode");
    } else if ((speed > 10 && speed < 60) && state != SpeedState.MEDIUM) {
        state = SpeedState.MEDIUM;
        System.out.println ("Medium Speed Mode");
    } else if ((speed >= 60) && state != SpeedState.HIGH) {
        state = SpeedState.HIGH;
        System.out.println ("High Speed Mode");
    }

}
----------------------------------------

public Speedo manage (int speed) {
    if (speed < getLowRange ()) {
        onLowTransition ();
        return getLowState ();
    } else if (speed > getHighRange ()) {
        onHighTransition ();
        return getHighState ();
    } else {
        return this;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18765197_18765466_11_29
18765197_18766067_8_25
Title: How to manage state change in Java 
----------------------------------------

public void manage () {
    double speed = getSpeedfromVehicle ();
    if ((speed >= 0 && speed <= 10) && state != SpeedState.LOW) {
        state = SpeedState.LOW;
        System.out.println ("Low Speed mode");
    } else if ((speed > 10 && speed < 60) && state != SpeedState.MEDIUM) {
        state = SpeedState.MEDIUM;
        System.out.println ("Medium Speed Mode");
    } else if ((speed >= 60) && state != SpeedState.HIGH) {
        state = SpeedState.HIGH;
        System.out.println ("High Speed Mode");
    }

}
----------------------------------------

public void manage () {
    double speed = getSpeedfromVehicle ();
    SpeedState newState = null;
    if (speed >= 0 && speed <= 10) newState = SpeedState.LOW;
    else if (speed > 10 && speed < 60) newState = SpeedState.MEDIUM;
    else if (speed >= 60) newState = SpeedState.HIGH;

    if (newState != state) {
        state = newState;
        System.out.println ("State changed to" + state);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18765197_18765584_56_66
18765197_18766067_8_25
Title: How to manage state change in Java 
----------------------------------------

public Speedo manage (int speed) {
    if (speed < getLowRange ()) {
        onLowTransition ();
        return getLowState ();
    } else if (speed > getHighRange ()) {
        onHighTransition ();
        return getHighState ();
    } else {
        return this;
    }

}
----------------------------------------

public void manage () {
    double speed = getSpeedfromVehicle ();
    SpeedState newState = null;
    if (speed >= 0 && speed <= 10) newState = SpeedState.LOW;
    else if (speed > 10 && speed < 60) newState = SpeedState.MEDIUM;
    else if (speed >= 60) newState = SpeedState.HIGH;

    if (newState != state) {
        state = newState;
        System.out.println ("State changed to" + state);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18766857_18767859_3_25
18766857_18783756_9_42
Title: Counting the occurrence of alphanumeric characters and printing them graphically 
----------------------------------------

public static void main (String [] args) throws IOException {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Please insert string: ");
    String s = sc.nextLine ();
    sc.close ();
    System.out.println (s);
    StringReader r = new StringReader (s);
    Map < Character, Integer > histogram = new TreeMap < Character, Integer > ();
    int c;
    while ((c = r.read ()) != - 1) {
        Integer count = histogram.get ((char) c);
        if (count == null) count = 0;

        histogram.put ((char) c, count + 1);
    }
    r.close ();
    for (Entry < Character, Integer > entry : histogram.entrySet ()) System.out.println (entry.getKey () + " (" + entry.getValue () + ") " + createAsterisk (entry.getValue ()));

}
----------------------------------------

public static void main (String [] args) throws IOException, InterruptedException {
    ExecutorService se = Executors.newSingleThreadExecutor ();
    se.submit (new Server (PORT, 16));
    System.out.print ("Please insert string: ");
    Scanner s = new Scanner (System.in);
    String input = s.nextLine ();
    s.close ();
    System.out.println (input);
    ExecutorService ce = Executors.newFixedThreadPool (16);
    List < Future < Void > > futures = new ArrayList < Future < Void > > ();
    for (char c : input.toCharArray ()) futures.add (ce.submit (new Client (new Character [] {c}, DATA, LOOPBACK, PORT)));

    for (Future < Void > f : futures) {
        try {
            @SuppressWarnings ("unused")
            Void v = f.get ();
        } catch (ExecutionException e) {
        }
    }
    ce.submit (new StopClient (LOOPBACK, PORT));
    ce.shutdown ();
    se.shutdown ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18766857_18767859_3_25
18766857_33784395_4_79
Title: Counting the occurrence of alphanumeric characters and printing them graphically 
----------------------------------------

public static void main (String [] args) throws IOException {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Please insert string: ");
    String s = sc.nextLine ();
    sc.close ();
    System.out.println (s);
    StringReader r = new StringReader (s);
    Map < Character, Integer > histogram = new TreeMap < Character, Integer > ();
    int c;
    while ((c = r.read ()) != - 1) {
        Integer count = histogram.get ((char) c);
        if (count == null) count = 0;

        histogram.put ((char) c, count + 1);
    }
    r.close ();
    for (Entry < Character, Integer > entry : histogram.entrySet ()) System.out.println (entry.getKey () + " (" + entry.getValue () + ") " + createAsterisk (entry.getValue ()));

}
----------------------------------------

public static void main (String [] args) {
    int occurrences = 0;
    int count = 0;
    int firstLoc = 0;
    int lastLoc = 0;
    boolean countedMulti = false;
    StringBuffer sb = new StringBuffer ();
    String a = new String ("ABC ABC ABC 123");
    String lastStrChar = null;
    char tempChar = 'z';
    while (count <= a.length () - 1) {
        for (int scanner = 48;
        scanner <= 90; scanner ++) {
            if (a.charAt (count) == scanner) {
                tempChar = (char) scanner;
                for (int i = 0;
                i <= a.length () - 1; i ++) {
                    if (tempChar == a.charAt (i)) {
                        if (count == 0) {
                            occurrences += 1;
                            sb.append (tempChar);
                        }
                        if (count > 0) {
                            if (a.charAt (count) != a.charAt (count - 1)) {
                                occurrences += 1;
                            }
                        }
                    }
                    if (count == i + 1) {
                        sb.append (tempChar);
                        occurrences = 0;
                    }
                    if ((sb.length () - 1) >= 0) {
                        lastStrChar = sb.substring (sb.length () - 1);
                        firstLoc = sb.indexOf (sb.substring (sb.length () - 1));
                        lastLoc = sb.length () - 1;
                        if (count > 0 && sb.lastIndexOf (lastStrChar, firstLoc) != sb.lastIndexOf (lastStrChar, lastLoc)) {
                            countedMulti = true;
                        } else {
                            countedMulti = false;
                        }
                    }
                }
                if (! countedMulti) {
                    System.out.print (lastStrChar + " appeared " + occurrences + " times\n");
                }
            }
        }
        count ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18766857_18783756_119_135
18766857_18783756_202_229
Title: Counting the occurrence of alphanumeric characters and printing them graphically 
----------------------------------------

public Void call () throws Exception {
    ss = new ServerSocket (port);
    while (! quit.get () && ! ss.isClosed ()) {
        try {
            e.submit (new ClientHandler (client.getAndIncrement (), ss.accept (), this));
        } catch (SocketException se) {
            continue;
        }
    }
    e.shutdown ();
    System.out.println (ch.toString ());
    while (! e.isTerminated ()) {
    }
    return null;
}
----------------------------------------

public Void call () throws Exception {
    DataInputStream in = new DataInputStream (s.getInputStream ());
    int c;
    int i = 0;
    byte [] bytes = new byte [2];
    while ((c = in.read ()) != - 1) {
        if (i < 2) {
            bytes [i ++] = ((byte) c);
        } else if (Arrays.equals (bytes, DistributedHistogram.DATA)) {
            i = 0;
            char ch = (char) (((c & 0x00FF) << 8) + (in.read () & 0x00FF));
            server.getHistogram ().addChar (ch);
        } else if (Arrays.equals (bytes, DistributedHistogram.STOP)) {
            i = 0;
            server.stop ();
        } else {
            i = 0;
        }

    }
    in.close ();
    s.close ();
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18766857_18783756_119_135
18766857_18783756_61_73
Title: Counting the occurrence of alphanumeric characters and printing them graphically 
----------------------------------------

public Void call () throws Exception {
    ss = new ServerSocket (port);
    while (! quit.get () && ! ss.isClosed ()) {
        try {
            e.submit (new ClientHandler (client.getAndIncrement (), ss.accept (), this));
        } catch (SocketException se) {
            continue;
        }
    }
    e.shutdown ();
    System.out.println (ch.toString ());
    while (! e.isTerminated ()) {
    }
    return null;
}
----------------------------------------

public Void call () throws Exception {
    Socket s = new Socket (ip, port);
    DataOutputStream out = new DataOutputStream (s.getOutputStream ());
    for (Character c : chars) {
        out.write (type);
        out.writeChar (c);
    }
    out.flush ();
    out.close ();
    s.close ();
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18766857_18783756_202_229
18766857_18783756_61_73
Title: Counting the occurrence of alphanumeric characters and printing them graphically 
----------------------------------------

public Void call () throws Exception {
    DataInputStream in = new DataInputStream (s.getInputStream ());
    int c;
    int i = 0;
    byte [] bytes = new byte [2];
    while ((c = in.read ()) != - 1) {
        if (i < 2) {
            bytes [i ++] = ((byte) c);
        } else if (Arrays.equals (bytes, DistributedHistogram.DATA)) {
            i = 0;
            char ch = (char) (((c & 0x00FF) << 8) + (in.read () & 0x00FF));
            server.getHistogram ().addChar (ch);
        } else if (Arrays.equals (bytes, DistributedHistogram.STOP)) {
            i = 0;
            server.stop ();
        } else {
            i = 0;
        }

    }
    in.close ();
    s.close ();
    return null;
}
----------------------------------------

public Void call () throws Exception {
    Socket s = new Socket (ip, port);
    DataOutputStream out = new DataOutputStream (s.getOutputStream ());
    for (Character c : chars) {
        out.write (type);
        out.writeChar (c);
    }
    out.flush ();
    out.close ();
    s.close ();
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18766857_18783756_9_42
18766857_33784395_4_79
Title: Counting the occurrence of alphanumeric characters and printing them graphically 
----------------------------------------

public static void main (String [] args) throws IOException, InterruptedException {
    ExecutorService se = Executors.newSingleThreadExecutor ();
    se.submit (new Server (PORT, 16));
    System.out.print ("Please insert string: ");
    Scanner s = new Scanner (System.in);
    String input = s.nextLine ();
    s.close ();
    System.out.println (input);
    ExecutorService ce = Executors.newFixedThreadPool (16);
    List < Future < Void > > futures = new ArrayList < Future < Void > > ();
    for (char c : input.toCharArray ()) futures.add (ce.submit (new Client (new Character [] {c}, DATA, LOOPBACK, PORT)));

    for (Future < Void > f : futures) {
        try {
            @SuppressWarnings ("unused")
            Void v = f.get ();
        } catch (ExecutionException e) {
        }
    }
    ce.submit (new StopClient (LOOPBACK, PORT));
    ce.shutdown ();
    se.shutdown ();
}
----------------------------------------

public static void main (String [] args) {
    int occurrences = 0;
    int count = 0;
    int firstLoc = 0;
    int lastLoc = 0;
    boolean countedMulti = false;
    StringBuffer sb = new StringBuffer ();
    String a = new String ("ABC ABC ABC 123");
    String lastStrChar = null;
    char tempChar = 'z';
    while (count <= a.length () - 1) {
        for (int scanner = 48;
        scanner <= 90; scanner ++) {
            if (a.charAt (count) == scanner) {
                tempChar = (char) scanner;
                for (int i = 0;
                i <= a.length () - 1; i ++) {
                    if (tempChar == a.charAt (i)) {
                        if (count == 0) {
                            occurrences += 1;
                            sb.append (tempChar);
                        }
                        if (count > 0) {
                            if (a.charAt (count) != a.charAt (count - 1)) {
                                occurrences += 1;
                            }
                        }
                    }
                    if (count == i + 1) {
                        sb.append (tempChar);
                        occurrences = 0;
                    }
                    if ((sb.length () - 1) >= 0) {
                        lastStrChar = sb.substring (sb.length () - 1);
                        firstLoc = sb.indexOf (sb.substring (sb.length () - 1));
                        lastLoc = sb.length () - 1;
                        if (count > 0 && sb.lastIndexOf (lastStrChar, firstLoc) != sb.lastIndexOf (lastStrChar, lastLoc)) {
                            countedMulti = true;
                        } else {
                            countedMulti = false;
                        }
                    }
                }
                if (! countedMulti) {
                    System.out.print (lastStrChar + " appeared " + occurrences + " times\n");
                }
            }
        }
        count ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18774052_18774152_1_15
18774052_18774164_1_11
Title: Adding a start and end character to a int array and a space between each integer 
----------------------------------------

public static String toString (int [] a, char start, char end, String space) {
    int len = a.length;
    StringBuilder builder = new StringBuilder (len + (len - 1) * space.length () + 2);
    builder.append (start);
    for (int i = 0;
    i < len; i ++) {
        if (i != 0) builder.append (space);

        builder.append (a [i]);
    }
    builder.append (end);
    return builder.toString ();
}
----------------------------------------

public static String toString (int [] a, char start, char end, String space) {
    String str = "";
    str = str + start;
    for (int i = 0;
    i < a.length; i ++) {
        str = str + a [i] + space;
    }
    str = str + end;
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18776642_18777143_7_19
18776642_18778735_4_25
Title: How to make a Java File Reader 
----------------------------------------

public static void main (String [] args) {
    final File file = new File ("data.txt");
    try (final Scanner scanner = new Scanner (file)) {
        while (scanner.hasNextLine ()) {
            String line = scanner.nextLine ();
            System.out.println (line);
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    String filePath = "data.txt";
    File file = new File (filePath);
    Scanner scanner = null;
    List < String > words = new ArrayList < String > ();
    try {
        scanner = new Scanner (file);
        while (scanner.hasNextLine ()) {
            String line = scanner.nextLine ();
            words.addAll (getWords (line));
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } finally {
        scanner.close ();
    }
    for (String word : words) {
        System.out.println (word);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18776707_18776968_9_36
18776707_18777078_1_32
Title: Java while loop not working 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader myInput = new BufferedReader (new InputStreamReader (System.in));
    final List < String > letterList = Arrays.asList ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z");
    System.out.println ("Enter a phrase: ");
    String phrase = myInput.readLine ();
    final String [] letters = phrase.split ("");
    final StringBuffer buffer = new StringBuffer ();
    for (int i = 0;
    i < letters.length; i ++) {
        final int letterIndex = letterList.indexOf (letters [i]);
        if (letterIndex < 0) continue;

        final int nextLetterIndex = 13 + letterIndex;
        if (nextLetterIndex > letterList.size ()) {
            buffer.append (nextLetterIndex % letterList.size ());
        } else {
            buffer.append (letterList.get (nextLetterIndex));
        }
    }
    System.out.println (buffer.toString ());
}
----------------------------------------

public static void main (String [] args) {
    BufferedReader myInput = new BufferedReader (new InputStreamReader (System.in));
    String key [] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
    String keyA [] = {"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M"};
    System.out.println ("Enter a phrase: ");
    String phrase = "";
    try {
        phrase = myInput.readLine ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    int length = phrase.length ();
    int y = 0, i = 0, num = 0;
    while (y < length) {
        i = 0;
        String letter = Character.toString (phrase.charAt (y));
        while (! (letter.equalsIgnoreCase (key [i]))) {
            i ++;
        }
        num = i;
        System.out.print (keyA [num]);
        y ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18777222_18777337_4_17
18777222_18777339_5_19
Title: Hello! Started learning Java recently and having trouble repeating program instructions 
----------------------------------------

public static void main (String args []) {
    while (true) {
        System.out.println ("Welcome to robo lame tester 1.1, is your name Connor? Yes or no?");
        Scanner input = new Scanner (System.in);
        String sweg = input.nextLine ();
        if (sweg.equals ("stop")) return;

        if (sweg.equals ("Yes")) System.out.println ("You are lame");
        else System.out.println ("You passed, you aren't lame");

    }
}
----------------------------------------

public static void main (String args []) {
    String sweg = "";
    do {
        System.out.println ("Welcome to robo lame tester 1.1, is your name Connor? Yes or no?");
        Scanner input = new Scanner (System.in);
        sweg = input.nextLine ();
        if (sweg.equalsIgnoreCase ("Yes")) {
            System.out.println ("You are lame");
        } else if (sweg.equalsIgnoreCase ("no")) {
            System.out.println ("You passed, you aren't lame");
        }

    } while (! sweg.equalsIgnoreCase ("stop"));
    System.out.println ("Bye!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18778518_18778613_20_59
18778518_18778613_38_57
Title: Multiple JInternalFrame view 
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    final JDesktopPane desktop = new JDesktopPane ();
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (desktop);
    frame.setSize (420, 420);
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            int rowCount = 2;
            int colCount = 4;
            int width = desktop.getWidth () / colCount;
            int height = desktop.getHeight () / rowCount;
            System.out.println (width + "x" + height);
            for (int row = 0;
            row < rowCount; row ++) {
                int y = row * height;
                for (int col = 0;
                col < colCount; col ++) {
                    int x = col * width;
                    JInternalFrame frame = new JInternalFrame (row + "x" + col, true, true, true, true);
                    frame.setBounds (x, y, width, height);
                    frame.setVisible (true);
                    desktop.add (frame);
                }
            }
        }}

    );
}
----------------------------------------

public void run () {
    int rowCount = 2;
    int colCount = 4;
    int width = desktop.getWidth () / colCount;
    int height = desktop.getHeight () / rowCount;
    System.out.println (width + "x" + height);
    for (int row = 0;
    row < rowCount; row ++) {
        int y = row * height;
        for (int col = 0;
        col < colCount; col ++) {
            int x = col * width;
            JInternalFrame frame = new JInternalFrame (row + "x" + col, true, true, true, true);
            frame.setBounds (x, y, width, height);
            frame.setVisible (true);
            desktop.add (frame);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18785559_18785764_2_18
18785559_18785820_4_14
Title: Using OpenCSV to write in a column instead of row 
----------------------------------------

public static void main (String [] args) throws UnsupportedEncodingException, IOException {
    CSVWriter writer2 = new CSVWriter (new FileWriter ("testing.csv"), '\t');
    String [] strings = new String [10];
    for (int i = 0;
    i < 10; i ++) {
        strings [i] = "Testing";
    }
    String [] wrap = new String [1];
    for (String s : strings) {
        wrap [0] = s;
        writer2.writeNext (wrap);
    }
    writer2.close ();
}
----------------------------------------

public static void main (String [] args) {
    CSVWriter writer2 = new CSVWriter (new FileWriter ("testing.csv"), '\t');
    String [] string = new String [10];
    for (int i = 0;
    i < 10; i ++) {
        string [i] = "Testing";
    }
    writer2.writeLines (string);
    writer2.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18789263_18789396_12_33
18789263_18797369_35_63
Title: "JAVA ANDROID:Reading Php Json values Eclipse dont see the error but it doesnt work" 
----------------------------------------

protected JSONObject doInBackground (String...urls) {
    JSONObject obj = null;
    try {
        HttpClient httpclient = new DefaultHttpClient ();
        HttpPost httppost = new HttpPost (url [0]);
        HttpResponse response = httpclient.execute (httppost);
        String jsonResult = inputStreamToString (response.getEntity ().getContent ()).toString ();
        obj = new JSONObject (jsonResult);
    } catch (JSONException e) {
        e.printStackTrace ();
    } catch (ClientProtocolException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    return obj;
}
----------------------------------------

protected JSONObject doInBackground (String...urls) {
    JSONObject obj = null;
    try {
        HttpClient httpclient = new DefaultHttpClient ();
        HttpPost httppost = new HttpPost (urls [0]);
        HttpResponse response = httpclient.execute (httppost);
        String jsonResult = inputStreamToString (response.getEntity ().getContent ()).toString ();
        obj = new JSONObject (jsonResult);
    } catch (JSONException e) {
        e.printStackTrace ();
    } catch (ClientProtocolException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    return obj;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18790309_18790409_1_20
18790309_39300746_3_28
Title: How do I print just the even or odd chars in an array? 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String even_odd = sc.next ();
    System.out.println ("Odd Characters");
    for (int i = 0;
    i < even_odd.length (); i ++) {
        if (i % 2 == 0) {
            System.out.println (even_odd.charAt (i));
        }
    }
    System.out.println ("Even Characters");
    for (int i = 0;
    i < even_odd.length (); i ++) {
        if (i % 2 == 1) {
            System.out.println (even_odd.charAt (i));
        }
    }
}
----------------------------------------

public static void main (String arg []) {
    Scanner sc = new Scanner (System.in);
    String s;
    s = sc.next ();
    char char_array [];
    char_array = s.toCharArray ();
    int a [] = new int [char_array.length];
    for (int i = 0;
    i < char_array.length; i ++) {
        a [i] = s.charAt (i);
        if (a [i] % 2 == 0) {
            System.out.println ((char) a [i] + " EVEN CHAR " + a [i]);
        } else {
            System.out.println ((char) a [i] + " ODD CHAR " + a [i]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18790309_18790409_1_20
18790309_49472734_5_36
Title: How do I print just the even or odd chars in an array? 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    String even_odd = sc.next ();
    System.out.println ("Odd Characters");
    for (int i = 0;
    i < even_odd.length (); i ++) {
        if (i % 2 == 0) {
            System.out.println (even_odd.charAt (i));
        }
    }
    System.out.println ("Even Characters");
    for (int i = 0;
    i < even_odd.length (); i ++) {
        if (i % 2 == 1) {
            System.out.println (even_odd.charAt (i));
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    int totalStrings = scanner.nextInt ();
    String nextString = null;
    while (scanner.hasNext ()) {
        nextString = scanner.next ();
        int stringsCount = totalStrings;
        Solution stringInterleaving = new Solution ();
        int startIndexEven = 0, incrementEven = 2;
        int startIndexOdd = 1, incrementOdd = 2;
        int printedCharCountEven = 0;
        int printedCharCountOdd = 0;
        if (nextString != null && nextString.length () > 0) {
            printedCharCountEven = stringInterleaving.printChars (nextString, startIndexEven, incrementEven);
            if (printedCharCountEven > 0) {
                System.out.print (" ");
            }
            printedCharCountOdd = stringInterleaving.printChars (nextString, startIndexOdd, incrementOdd);
        }
        if (printedCharCountEven > 0 || printedCharCountOdd > 0) {
            System.out.println ();
        }
    }
    if (scanner != null) {
        scanner.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18790309_39300746_3_28
18790309_49472734_5_36
Title: How do I print just the even or odd chars in an array? 
----------------------------------------

public static void main (String arg []) {
    Scanner sc = new Scanner (System.in);
    String s;
    s = sc.next ();
    char char_array [];
    char_array = s.toCharArray ();
    int a [] = new int [char_array.length];
    for (int i = 0;
    i < char_array.length; i ++) {
        a [i] = s.charAt (i);
        if (a [i] % 2 == 0) {
            System.out.println ((char) a [i] + " EVEN CHAR " + a [i]);
        } else {
            System.out.println ((char) a [i] + " ODD CHAR " + a [i]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    int totalStrings = scanner.nextInt ();
    String nextString = null;
    while (scanner.hasNext ()) {
        nextString = scanner.next ();
        int stringsCount = totalStrings;
        Solution stringInterleaving = new Solution ();
        int startIndexEven = 0, incrementEven = 2;
        int startIndexOdd = 1, incrementOdd = 2;
        int printedCharCountEven = 0;
        int printedCharCountOdd = 0;
        if (nextString != null && nextString.length () > 0) {
            printedCharCountEven = stringInterleaving.printChars (nextString, startIndexEven, incrementEven);
            if (printedCharCountEven > 0) {
                System.out.print (" ");
            }
            printedCharCountOdd = stringInterleaving.printChars (nextString, startIndexOdd, incrementOdd);
        }
        if (printedCharCountEven > 0 || printedCharCountOdd > 0) {
            System.out.println ();
        }
    }
    if (scanner != null) {
        scanner.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18795000_18880827_49_60
18795000_18928320_5_11
Title: Program throws NullPointerException when i try to search in drives? 
----------------------------------------

public static void main (String arr []) throws Exception {
    fd = arr [0];
    String path = arr [1];
    final Path searchFile = Paths.get (fd);
    Path filePath = Paths.get (path);
    FileSearchVisitor visitor = new FileSearchVisitor (searchFile);
    Files.walkFileTree (filePath, visitor);
    if (! visitor.isFound ()) {
        System.out.print ("File not found.");
    }
}
----------------------------------------

public static void main (String arr []) {
    fd = arr [0];
    String path = arr [1];
    String dir [] = new File (path).list ();
    new FileSearch ().finder (dir, path);
    if (flg) {
        System.out.print ("File not found.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1879700_1879710_26_34
1879700_1879868_12_20
Title: How to remove Duplicate value from arraylist in Android 
----------------------------------------

public boolean addAll (Collection c) {
    boolean result = true;
    for (T t : c) {
        if (! add (t)) {
            result = false;
        }
    }
    return result;
}
----------------------------------------

public boolean addAll (Collection c) {
    boolean result = false;
    for (T t : c) {
        if (add (t)) {
            result = true;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18797547_18797604_1_10
18797547_18797614_1_22
Title: Get height of tree with multiple children 
----------------------------------------

private int getHeight (Node < T > root) {
    int max = 0;
    for (Node < T > childNode : root.getChildren ()) {
        int height = getHeight (childNode);
        if (height > max) max = height;

    }
    return max + 1;
}
----------------------------------------

private int getHeight (Node < T > root) {
    if (root.getChildren ().size () == 0) {
        return 1;
    }
    int height;
    for (Node < T > childNode : root.getChildren ()) {
        int childHeight = getHeight (childNode);
        if (childHeight > height) {
            height = childHeight;
        }
    }
    return height + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_20_38
18799591_18801676_18_37
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job starting");
        int i = 1;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("OddThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) != 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_20_38
18799591_18801676_43_62
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job starting");
        int i = 1;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("OddThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) == 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_20_38
18799591_18807856_6_15
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job starting");
        int i = 1;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("OddThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    while (! Thread.currentThread ().isInterrupted ()) {
        if (isRun) {
            System.out.println (k);
            k += 2;
            isRun = false;
            MyRunnable2.isRun = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_20_38
18799591_19442581_21_39
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job starting");
        int i = 1;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("OddThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 1;
        i <= 10; i = i + 2) {
            System.out.println (i);
            if (condition.getStart () == false) {
                condition.setStart (true);
            }
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_20_38
18799591_19442581_44_66
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job starting");
        int i = 1;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("OddThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 2;
        i <= 10; i = i + 2) {
            while (condition.getStart () == false) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (i);
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_2_17
18799591_19442581_14_73
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public static void main (String [] args) {
    Thread odd = new Thread (new OddThread (), "oddThread");
    Thread even = new Thread (new EvenThread (), "Even Thread");
    odd.start ();
    even.start ();
    try {
        odd.join ();
        even.join ();
        System.out.println ("Main thread exited");
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    final Object lock = new Object ();
    final Condition condition = new Condition ();
    Thread oddThread = new Thread (new Runnable () {
        public void run () {
            synchronized (lock) {
                for (int i = 1;
                i <= 10; i = i + 2) {
                    System.out.println (i);
                    if (condition.getStart () == false) {
                        condition.setStart (true);
                    }
                    lock.notify ();
                    try {
                        if (i + 2 <= 10) {
                            lock.wait ();
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }}

    );
    Thread evenThread = new Thread (new Runnable () {
        public void run () {
            synchronized (lock) {
                for (int i = 2;
                i <= 10; i = i + 2) {
                    while (condition.getStart () == false) {
                        try {
                            lock.wait ();
                        } catch (InterruptedException e) {
                            e.printStackTrace ();
                        }
                    }
                    System.out.println (i);
                    lock.notify ();
                    try {
                        if (i + 2 <= 10) {
                            lock.wait ();
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }}

    );
    oddThread.start ();
    evenThread.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_2_17
18799591_46519992_66_88
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public static void main (String [] args) {
    Thread odd = new Thread (new OddThread (), "oddThread");
    Thread even = new Thread (new EvenThread (), "Even Thread");
    odd.start ();
    even.start ();
    try {
        odd.join ();
        even.join ();
        System.out.println ("Main thread exited");
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final Test test = new Test ();
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            test.oddPrinter ();
        }}

    , "Thread 1");
    Thread t2 = new Thread (new Runnable () {
        public void run () {
            test.evenPrinter ();
        }}

    , "Thread 2");
    t1.start ();
    t2.start ();
    t1.join ();
    t2.join ();
    System.out.println ("Main thread finished");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_2_17
18799591_50952898_5_42
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public static void main (String [] args) {
    Thread odd = new Thread (new OddThread (), "oddThread");
    Thread even = new Thread (new EvenThread (), "Even Thread");
    odd.start ();
    even.start ();
    try {
        odd.join ();
        even.join ();
        System.out.println ("Main thread exited");
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Obj obj = new Obj ();
    Runnable evenThread = () -> {
        synchronized (obj) {
            for (int i = 2;
            i <= 50; i += 2) {
                while (! obj.printEven) {
                    try {
                        obj.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println (i);
                obj.printEven = false;
                obj.notify ();
            }
        }
    };
    Runnable oddThread = () -> {
        synchronized (obj) {
            for (int i = 1;
            i <= 49; i += 2) {
                while (obj.printEven) {
                    try {
                        obj.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println (i);
                obj.printEven = true;
                obj.notify ();
            }
        }
    };
    new Thread (evenThread).start ();
    new Thread (oddThread).start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_43_60
18799591_18801676_18_37
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job started");
        int i = 2;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("EvenThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) != 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_43_60
18799591_18801676_43_62
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job started");
        int i = 2;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("EvenThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) == 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_43_60
18799591_18807856_6_15
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job started");
        int i = 2;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("EvenThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    while (! Thread.currentThread ().isInterrupted ()) {
        if (isRun) {
            System.out.println (k);
            k += 2;
            isRun = false;
            MyRunnable2.isRun = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_43_60
18799591_19442581_21_39
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job started");
        int i = 2;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("EvenThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 1;
        i <= 10; i = i + 2) {
            System.out.println (i);
            if (condition.getStart () == false) {
                condition.setStart (true);
            }
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18799956_43_60
18799591_19442581_44_66
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (CommonUtil.mLock) {
        System.out.println (Thread.currentThread ().getName () + "---> job started");
        int i = 2;
        while (i < 50) {
            System.out.print (i + "\t");
            i = i + 2;
            CommonUtil.mLock.notify ();
            try {
                CommonUtil.mLock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("EvenThread---> job completed");
        CommonUtil.mLock.notify ();
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 2;
        i <= 10; i = i + 2) {
            while (condition.getStart () == false) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (i);
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18801676_18_37
18799591_18807856_6_15
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) != 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    while (! Thread.currentThread ().isInterrupted ()) {
        if (isRun) {
            System.out.println (k);
            k += 2;
            isRun = false;
            MyRunnable2.isRun = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18801676_18_37
18799591_19442581_21_39
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) != 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 1;
        i <= 10; i = i + 2) {
            System.out.println (i);
            if (condition.getStart () == false) {
                condition.setStart (true);
            }
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18801676_18_37
18799591_19442581_44_66
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) != 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 2;
        i <= 10; i = i + 2) {
            while (condition.getStart () == false) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (i);
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18801676_43_62
18799591_18807856_6_15
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) == 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    while (! Thread.currentThread ().isInterrupted ()) {
        if (isRun) {
            System.out.println (k);
            k += 2;
            isRun = false;
            MyRunnable2.isRun = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18801676_43_62
18799591_19442581_21_39
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) == 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 1;
        i <= 10; i = i + 2) {
            System.out.println (i);
            if (condition.getStart () == false) {
                condition.setStart (true);
            }
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18801676_43_62
18799591_19442581_44_66
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (present.get () <= range) {
        if ((present.get () % 2) == 0) {
            System.out.println (present.get ());
            present.incrementAndGet ();
            synchronized (lock) {
                lock.notifyAll ();
            }
        } else {
            synchronized (lock) {
                try {
                    lock.wait (1000);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    break;
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 2;
        i <= 10; i = i + 2) {
            while (condition.getStart () == false) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (i);
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18807856_6_15
18799591_19442581_21_39
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (! Thread.currentThread ().isInterrupted ()) {
        if (isRun) {
            System.out.println (k);
            k += 2;
            isRun = false;
            MyRunnable2.isRun = true;
        }
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 1;
        i <= 10; i = i + 2) {
            System.out.println (i);
            if (condition.getStart () == false) {
                condition.setStart (true);
            }
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_18807856_6_15
18799591_19442581_44_66
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    while (! Thread.currentThread ().isInterrupted ()) {
        if (isRun) {
            System.out.println (k);
            k += 2;
            isRun = false;
            MyRunnable2.isRun = true;
        }
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 2;
        i <= 10; i = i + 2) {
            while (condition.getStart () == false) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (i);
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_19442581_14_73
18799591_46519992_66_88
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public static void main (String [] args) {
    final Object lock = new Object ();
    final Condition condition = new Condition ();
    Thread oddThread = new Thread (new Runnable () {
        public void run () {
            synchronized (lock) {
                for (int i = 1;
                i <= 10; i = i + 2) {
                    System.out.println (i);
                    if (condition.getStart () == false) {
                        condition.setStart (true);
                    }
                    lock.notify ();
                    try {
                        if (i + 2 <= 10) {
                            lock.wait ();
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }}

    );
    Thread evenThread = new Thread (new Runnable () {
        public void run () {
            synchronized (lock) {
                for (int i = 2;
                i <= 10; i = i + 2) {
                    while (condition.getStart () == false) {
                        try {
                            lock.wait ();
                        } catch (InterruptedException e) {
                            e.printStackTrace ();
                        }
                    }
                    System.out.println (i);
                    lock.notify ();
                    try {
                        if (i + 2 <= 10) {
                            lock.wait ();
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }}

    );
    oddThread.start ();
    evenThread.start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final Test test = new Test ();
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            test.oddPrinter ();
        }}

    , "Thread 1");
    Thread t2 = new Thread (new Runnable () {
        public void run () {
            test.evenPrinter ();
        }}

    , "Thread 2");
    t1.start ();
    t2.start ();
    t1.join ();
    t2.join ();
    System.out.println ("Main thread finished");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_19442581_14_73
18799591_50952898_5_42
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public static void main (String [] args) {
    final Object lock = new Object ();
    final Condition condition = new Condition ();
    Thread oddThread = new Thread (new Runnable () {
        public void run () {
            synchronized (lock) {
                for (int i = 1;
                i <= 10; i = i + 2) {
                    System.out.println (i);
                    if (condition.getStart () == false) {
                        condition.setStart (true);
                    }
                    lock.notify ();
                    try {
                        if (i + 2 <= 10) {
                            lock.wait ();
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }}

    );
    Thread evenThread = new Thread (new Runnable () {
        public void run () {
            synchronized (lock) {
                for (int i = 2;
                i <= 10; i = i + 2) {
                    while (condition.getStart () == false) {
                        try {
                            lock.wait ();
                        } catch (InterruptedException e) {
                            e.printStackTrace ();
                        }
                    }
                    System.out.println (i);
                    lock.notify ();
                    try {
                        if (i + 2 <= 10) {
                            lock.wait ();
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }}

    );
    oddThread.start ();
    evenThread.start ();
}
----------------------------------------

public static void main (String [] args) {
    Obj obj = new Obj ();
    Runnable evenThread = () -> {
        synchronized (obj) {
            for (int i = 2;
            i <= 50; i += 2) {
                while (! obj.printEven) {
                    try {
                        obj.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println (i);
                obj.printEven = false;
                obj.notify ();
            }
        }
    };
    Runnable oddThread = () -> {
        synchronized (obj) {
            for (int i = 1;
            i <= 49; i += 2) {
                while (obj.printEven) {
                    try {
                        obj.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println (i);
                obj.printEven = true;
                obj.notify ();
            }
        }
    };
    new Thread (evenThread).start ();
    new Thread (oddThread).start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_19442581_21_39
18799591_19442581_44_66
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 1;
        i <= 10; i = i + 2) {
            System.out.println (i);
            if (condition.getStart () == false) {
                condition.setStart (true);
            }
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (lock) {
        for (int i = 2;
        i <= 10; i = i + 2) {
            while (condition.getStart () == false) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println (i);
            lock.notify ();
            try {
                if (i + 2 <= 10) {
                    lock.wait ();
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18799591_46519992_66_88
18799591_50952898_5_42
Title: Print Natural Sequence with help of 2 threads(1 is printing even and 2'nd is printing odd) 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final Test test = new Test ();
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            test.oddPrinter ();
        }}

    , "Thread 1");
    Thread t2 = new Thread (new Runnable () {
        public void run () {
            test.evenPrinter ();
        }}

    , "Thread 2");
    t1.start ();
    t2.start ();
    t1.join ();
    t2.join ();
    System.out.println ("Main thread finished");
}
----------------------------------------

public static void main (String [] args) {
    Obj obj = new Obj ();
    Runnable evenThread = () -> {
        synchronized (obj) {
            for (int i = 2;
            i <= 50; i += 2) {
                while (! obj.printEven) {
                    try {
                        obj.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println (i);
                obj.printEven = false;
                obj.notify ();
            }
        }
    };
    Runnable oddThread = () -> {
        synchronized (obj) {
            for (int i = 1;
            i <= 49; i += 2) {
                while (obj.printEven) {
                    try {
                        obj.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println (i);
                obj.printEven = true;
                obj.notify ();
            }
        }
    };
    new Thread (evenThread).start ();
    new Thread (oddThread).start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18801901_18801995_22_33
18801901_18801995_43_57
Title: "How to copy an InputStream to Apache TeeOutputStream which expects an OutputStream?" 
----------------------------------------

public void run () {
    int ch;
    try {
        while ((ch = System.in.read ()) != - 1) {
            outputStream.write (ch);
            outputStream.flush ();
        }
    } catch (IOException ioe) {
        log.warning (ioe.toString ());
    }
}
----------------------------------------

public void run () {
    char c = 0;
    int r = 0;
    try {
        while ((r = inputStream.read ()) != - 1) {
            c = (char) r;
            printToConsole (c);
            logToFile (c);
        }
    } catch (IOException ex) {
        Logger.getLogger (IOUtil.class.getName ()).log (Level.SEVERE, null, ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18805178_47892110_8_22
18805178_51782935_1_15
Title: How to detect outliers in an ArrayList 
----------------------------------------

public static void main (String [] args) {
    List < Double > data = new ArrayList < Double > ();
    data.add ((double) 20);
    data.add ((double) 65);
    data.add ((double) 72);
    data.add ((double) 75);
    data.add ((double) 77);
    data.add ((double) 78);
    data.add ((double) 80);
    data.add ((double) 81);
    data.add ((double) 82);
    data.add ((double) 83);
    Collections.sort (data);
    System.out.println (getOutliers (data));
}
----------------------------------------

public static void main (String [] args) {
    List < Integer > values = new ArrayList < > ();
    values.add (100);
    values.add (105);
    values.add (102);
    values.add (13);
    values.add (104);
    values.add (22);
    values.add (101);
    System.out.println ("Before: " + values);
    System.out.println ("After: " + eliminateOutliers (values, 1.5f));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18805201_18805261_3_22
18805201_18805325_4_19
Title: Error With Insertion Sort 
----------------------------------------

public static void main (String [] args) {
    int data [] = {5, 2, 6, 1, 3};
    for (int j = 1;
    j < data.length; j ++) {
        int key = data [j];
        int i = j - 1;
        while (i >= 0 && data [i] > key) {
            data [i + 1] = data [i];
            i = i - 1;
        }
        data [i + 1] = key;
        System.out.print (data [j] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    int data [] = {5, 2, 6, 1, 3};
    for (int j = 1;
    j < data.length; j ++) {
        int key = data [j];
        int i = j - 1;
        while (i >= 0 && data [i] > key) {
            data [i + 1] = data [i];
            i = i - 1;
        }
        data [i + 1] = key;
    }
    System.out.println (Arrays.toString (data));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18811608_18811678_1_15
18811608_18811972_1_11
Title: How to Read fixed number of bytes from a file in a loop in JAVA? 
----------------------------------------

public static byte [] toByteArray (File file, long start, long count) {
    long length = file.length ();
    if (start >= length) return new byte [0];

    count = Math.min (count, length - start);
    byte [] array = new byte [count];
    InputStream in = new FileInputStream (file);
    in.skip (start);
    long offset = 0;
    while (offset < count) {
        int tmp = in.read (array, offset, (length - offset));
        offset += tmp;
    }
    in.close ();
    return array;
}
----------------------------------------

public byte [] [] toByteArray (File file, int byteBlockSize) throws IOException {
    InputStream in = new FileInputStream (file);
    long noOfBlocks = (long) Math.ceil ((double) file.length () / (double) byteBlockSize);
    byte [] [] result = new byte [(int) noOfBlocks] [byteBlockSize];
    int offset = 0;
    for (int i = 0;
    i < result.length; i ++) {
        result [i] = readByteBlock (in, offset, byteBlockSize);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18814025_18814081_1_42
18814025_18815469_118_144
Title: Is there a better way - Java Conditional Statements 
----------------------------------------

public static void drawRectangle (Graphics g, int size, String cord_x, String cord_y) {
    int longside = size / 4;
    int shortside = size / 8;
    int x = 0;
    int y = 0;
    if (cord_x.equals ("top")) {
        if (cord_y.equals ("right")) {
            x = size - (size / 3);
            y = size / 8;
        } else {
            if (cord_y.equals ("left")) {
                x = size / 12;
                y = size / 8;
            }
        }
    } else {
        if (cord_x.equals ("bottom")) {
            if (cord_y.equals ("right")) {
                x = size - (size / 3);
                y = size - (size / 4);
            } else {
                if (cord_y.equals ("left")) {
                    x = size / 12;
                    y = size - (size / 4);
                }
            }
        }
    }
    g.drawRect (x, y, longside, shortside);
}
----------------------------------------

public static void drawRectangle (Graphics g, int size, String cord_y, String cord_x) {
    int longside = size / 4;
    int shortside = size / 8;
    int x = 0;
    int y = 0;
    if (cord_x.equals ("top") && cord_y.equals ("right")) {
        x = size - (size / 3);
        y = size / 8;
    }
    if (cord_x.equals ("top") && cord_y.equals ("left")) {
        x = size / 12;
        y = size / 8;
    }
    if (cord_x.equals ("bottom") && cord_y.equals ("right")) {
        x = size - (size / 3);
        y = size - (size / 4);
    }
    if (cord_x.equals ("bottom") && cord_y.equals ("left")) {
        x = size / 12;
        y = size - (size / 4);
    }
    System.out.printf ("ow.drawRectangle(%d, %d, %d, %d);\n", x, y, longside, shortside);
    g.drawRect (x, y, longside, shortside);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18814025_18815469_43_51
18814025_18815469_62_70
Title: Is there a better way - Java Conditional Statements 
----------------------------------------

public void paintComponent (Graphics g) {
    super.paintComponent (g);
    g.setColor (Color.BLUE);
    drawRectangle (g, size, "left", "top");
    g.setColor (Color.ORANGE);
    drawOval (g, size, "left", "bottom");
    g.setColor (Color.GREEN);
    drawLine (g, size, "right", "bottom");
}
----------------------------------------

protected void paintComponent (Graphics g) {
    super.paintComponent (g);
    g.setColor (Color.BLUE);
    OldWays.drawRectangle (g, size, "left", "top");
    g.setColor (Color.ORANGE);
    OldWays.drawOval (g, size, "left", "bottom");
    g.setColor (Color.GREEN);
    OldWays.drawLine (g, size, "right", "bottom");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18815038_18815098_4_32
18815038_18815131_1_28
Title: Java System.out.println Prints 20 times 
----------------------------------------

public static void main (String [] args) throws Exception {
    keyboard = new Scanner (System.in);
    boolean done = false;
    while (! done) {
        try {
            System.out.println ("Please enter the size of the array:");
            String input = keyboard.next ();
            int size = new Integer (input).intValue ();
            int numbers [] = new int [size];
            if (size < 20) {
                throw new Exception ("Number less than 20");
            }
            for (int i = 0;
            i < 20; i ++) {
                numbers [i] = i;
                done = true;
                System.out.println ("Good.");
            }
        } catch (NumberFormatException ex) {
            System.out.println ("NumberFormatException Error. Please enter a integer.");
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println ("ArrayIndexOutOfBoundsException Error. Please enter 20 or higher.");
        } catch (NegativeArraySizeException ex) {
            System.out.println ("NegativeArraySizeException Error. Please do not enter a negative.");
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    boolean done = false;
    while (! done) {
        try {
            System.out.println ("Please enter the size of the array:");
            String input = keyboard.next ();
            int size = new Integer (input).intValue ();
            int numbers [] = new int [size];
            if (numbers.length >= 20) {
                for (int i : numbers) {
                    numbers [i] = i;
                    done = true;
                    System.out.println ("Good.");
                }
            } else {
                throw new ArrayIndexOutOfBoundsException ("ArrayIndexOutOfBoundsException Error. Please enter 20 or higher.");
            }
        } catch (NumberFormatException ex) {
            System.out.println ("NumberFormatException Error. Please enter a integer.");
        } catch (NegativeArraySizeException ex) {
            System.out.println ("NegativeArraySizeException Error. Please do not enter a negative.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18815681_18815713_12_25
18815681_18815758_12_26
Title: "need some tips on my code my code doesn't change text on Android" 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_simple);
    final TextView txt = (TextView) findViewById (R.id.hello_text);
    Button startButton = (Button) findViewById (R.id.trigger);
    startButton.setOnClickListener (new View.OnClickListener () {
        public void onClick (View view) {
            txt.setText ("your text");
        }}

    );
}
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_simple);
    txt = (TextView) findViewById (R.id.hello_text);
    startButton = (Button) findViewById (R.id.trigger);
    startButton.setOnClickListener (new View.OnClickListener () {
        public void onClick (View view) {
            txt.setText (R.string.pressthisbutton);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18818471_18818498_1_10
18818471_18818539_1_11
Title: Comparing index 0 in array with all other indexes 
----------------------------------------

public boolean sameAsFirstElem (int [] array) {
    boolean isEqual = false;
    int firstElem = array [0];
    for (int i = 1;
    i < array.length; i ++) {
        if (array [i] == firstElem) {
            return true;
        }
    }
    return isEqual;
}
----------------------------------------

boolean sameAsFirstElem (Object [] array) {
    boolean isEqual = false;
    int firstElement = IntValue (array [0]);
    for (int i = 1;
    i < array.length; i ++) {
        if (IntValue (array [i]) == firstElement) {
            isEqual = true;
        }
    }
    return isEqual;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18819399_18819450_28_35
18819399_18819455_19_31
Title: Calling the method - new to this 
----------------------------------------

public String collate (String a, String b) {
    String result = "";
    for (int i = 0;
    i < Math.max (a.length (), b.length ()); i ++) {
        result += a.charAt (i);
        result += b.charAt (i);
    }
    return (result);
}
----------------------------------------

public String collate (String a, String b) {
    String accumulator;
    this.a = a;
    this.b = b;
    for (int i = 0;
    i < a.length (); i ++) {
        result += a.charAt (i);
        result += b.charAt (i);
    }
    return (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18819399_18819450_28_35
18819399_18819641_11_18
Title: Calling the method - new to this 
----------------------------------------

public String collate (String a, String b) {
    String result = "";
    for (int i = 0;
    i < Math.max (a.length (), b.length ()); i ++) {
        result += a.charAt (i);
        result += b.charAt (i);
    }
    return (result);
}
----------------------------------------

public static String collate (String a, String b) {
    String result = "";
    for (int i = 0;
    i < a.length (); i ++) {
        result += a.charAt (i);
        result += b.charAt (i);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18819399_18819450_7_26
18819399_18819455_6_17
Title: Calling the method - new to this 
----------------------------------------

public static void main (String [] args) {
    Scanner in1 = null;
    Scanner in2 = null;
    try {
        System.out.printf ("Enter 1st word: ");
        in1 = new Scanner (System.in);
        String a = in1.next ();
        System.out.printf ("Enter second word: ");
        in2 = new Scanner (System.in);
        String b = in2.next ();
        System.out.println (new Collate ().collate (a, b));
    } finally {
        in1.close ();
        in2.close ();
    }
}
----------------------------------------

public void main (String [] args) {
    System.out.printf ("Enter 1st word: ");
    Scanner in1 = new Scanner (System.in);
    a = in1.next ();
    System.out.printf ("Enter second word: ");
    Scanner in2 = new Scanner (System.in);
    b = in2.next ();
    Collate collate = new Collate ();
    String collation = collate.collate (a, b);
    System.out.println (collation);
    new Collate ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18819399_18819455_19_31
18819399_18819641_11_18
Title: Calling the method - new to this 
----------------------------------------

public String collate (String a, String b) {
    String accumulator;
    this.a = a;
    this.b = b;
    for (int i = 0;
    i < a.length (); i ++) {
        result += a.charAt (i);
        result += b.charAt (i);
    }
    return (result);
}
----------------------------------------

public static String collate (String a, String b) {
    String result = "";
    for (int i = 0;
    i < a.length (); i ++) {
        result += a.charAt (i);
        result += b.charAt (i);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18819400_18819432_1_16
18819400_18819461_17_32
Title: Java error - Cannot find symbol 
----------------------------------------

public String assignLetter () {
    String grade;
    if (testScore >= 88) {
        grade = "A";
    } else if (testScore >= 80) {
        grade = "B";
    } else if (testScore >= 67) {
        grade = "C";
    } else if (testScore >= 60) {
        grade = "D";
    } else if (testScore >= 0) {
        grade = "F";
    }

    return grade;
}
----------------------------------------

public String assignLetter () {
    if (testScore >= 88) {
        grade = "A";
    } else if (testScore >= 80) {
        grade = "B";
    } else if (testScore >= 67) {
        grade = "C";
    } else if (testScore >= 60) {
        grade = "D";
    } else if (testScore >= 0) {
        grade = "F";
    }

    return grade;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18832658_44801770_1_13
18832658_44854177_1_10
Title: spring mvc @ExceptionHandler method get same view 
----------------------------------------

@ExceptionHandler (Exception.class)
protected ModelAndView unhandledExceptionHandler (Exception ex, HandlerMethod hm) {
    String targetView;
    if (hm != null && hm.hasMethodAnnotation (ExceptionView.class)) {
        targetView = hm.getMethodAnnotation (ExceptionView.class).getValue ();
    } else {
        targetView = "someRedirectView";
    }
    ModelAndView mv = new ModelAndView ();
    mv.setViewName (targetView);
    mv.addObject ("UNHANDLED_ERROR", "UNHANDLED ERROR. PLEASE CONTACT SUPPORT. " + ex.getMessage ());
    return mv;
}
----------------------------------------

@ExceptionHandler (Exception.class)
public ModelAndView handleError (HttpServletRequest req, Exception ex) {
    logger.error ("Request: " + req.getRequestURL () + " raised " + ex);
    ModelAndView mav = new ModelAndView ();
    mav.addObject ("exception", ex);
    mav.addObject ("url", req.getRequestURL ());
    mav.setViewName ("error");
    return mav;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18838565_18859535_74_87
18838565_18859535_94_112
Title: Capturing counter around switch inside anonymous classes inside some cases? 
----------------------------------------

public Iterator < Integer > iterator () {
    return new Iterator < Integer > () {
        private int i = 0;
        public void remove () {
            throw new UnsupportedOperationException ();
        } public Integer next () {
            return i ++;
        } public boolean hasNext () {
            return true;
        }}

    ;
}
----------------------------------------

public Iterator < Pair < X, Y > > iterator () {
    return new Iterator < Pair < X, Y > > () {
        private final Iterator < X > ix = i1.iterator ();
        private final Iterator < Y > iy = i2.iterator ();
        public void remove () {
            ix.remove ();
            iy.remove ();
        } public Pair < X, Y > next () {
            Pair < X, Y > p = new Pair < X, Y > ();
            p.x = ix.next ();
            p.y = iy.next ();
            return p;
        } public boolean hasNext () {
            return ix.hasNext () && iy.hasNext ();
        }}

    ;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18846587_18847099_16_28
18846587_18848389_17_28
Title: Error in android thread program 
----------------------------------------

public void run () {
    try {
        sleep (5000);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } finally {
        Intent openMainActivity = new Intent ("com.askselva.simple.MENU");
        startActivity (openMainActivity);
    }
}
----------------------------------------

public void run () {
    try {
        sleep (5000);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } finally {
        Intent openMainActivity = new Intent ("com.askselva.simple.MENU");
        startActivity (openMainActivity);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18857201_18857698_5_20
18857201_18857714_5_26
Title: Arrays and nested Loops 
----------------------------------------

public static void main (String [] args) {
    Random random = new Random ();
    int [] a = new int [10];
    for (int i = 0;
    i < 10; i ++) {
        int rnd = 1 + random.nextInt (100);
        a [i] = rnd;
        System.out.print (a [i] + " ");
        for (int j = 0;
        j < i; ++ j) {
            if (a [j] == rnd) -- i;

        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Random random = new Random ();
    int [] array = new int [10];
    int index = 0;
    while (index < array.length) {
        int number = 1 + random.nextInt (100);
        boolean found = false;
        for (int i = 0;
        i < index; i ++) {
            int elm = array [i];
            if (elm == number) {
                found = true;
                break;
            }
        }
        if (! found) {
            array [index ++] = number;
        }
    }
    System.out.print (Arrays.toString (array));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18860111_18860217_1_13
18860111_18861157_1_13
Title: Java Mixing variable String[] with String in one only array of strings 
----------------------------------------

public static String [] get_AllStrings (Object...argString) {
    ArrayList < String > strings = new ArrayList < String > ();
    for (int i = 0;
    i < argString.length; i ++) {
        if (argString [i] != null && argString [i].getClass ().isArray ()) {
            String [] OneArray = (String []) argString [i];
            for (String str : OneArray) strings.add (str);

        } else {
            strings.add ((String) argString [i]);
        }
    }
    return (String []) strings.toArray ();
}
----------------------------------------

public static String [] get_AllStrings (Object...args) {
    ArrayList < String > result = new ArrayList < String > ();
    for (Object o : args) {
        if (o instanceof String) {
            result.add ((String) o);
        } else if (o instanceof String []) {
            result.addAll (Arrays.asList ((String []) o));
        } else {
            throw new IllegalArgumentException ();
        }

    }
    return (String []) result.toArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18866025_18866094_1_19
18866025_18866194_1_25
Title: Button in Java eclipse 
----------------------------------------

@Override
public void onClick (View agr0) {
    String [] values = (inputValues.getText ().toString ().split (","));
    if (values != NULL) {
        txtTotalNum.setText (Integer.toString (values.length));
        double [] convertedValues = new double [values.length];
        double product1 = 1.0;
        double product = 1.0;
        for (int a = 0;
        a < convertedValues.length; a ++) {
            convertedValues [a] = Integer.parseInt (values [a]);
        }
        double geoMean = Math.pow (product, product1 / convertedValues.length);
        GeoMean.setText (Double.toString (geoMean));
    }
}
----------------------------------------

@Override
public void onClick (View agr0) {
    String fetchedValues = (inputValues.getText ().toString ());
    if (fetchedValues.length > 0) {
        String [] values = fetchedValues.split (",");
        txtTotalNum.setText (Integer.toString (values.length));
        double [] convertedValues = new double [values.length];
        double product1 = 1.0;
        double product = 1.0;
        for (int a = 0;
        a < convertedValues.length; a ++) {
            convertedValues [a] = Integer.parseInt (values [a]);
        }
        double geoMean = Math.pow (product, product1 / convertedValues.length);
        GeoMean.setText (Double.toString (geoMean));
    } else {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18868970_18869439_1_17
18868970_18869464_13_23
Title: How Do I Determine If The 5 Numbers I Typed Into An Array Are Sequential using Java? 
----------------------------------------

public static boolean isFullHouse (final int [] input) {
    if (input.length != 5) {
        throw new IllegalArgumentException ("need 5 integers");
    }
    Map < Integer, Integer > cardinalityMap = new HashMap < > ();
    for (int i : input) {
        if (cardinalityMap.containsKey (i)) {
            cardinalityMap.put (i, cardinalityMap.get (i) + 1);
        } else {
            cardinalityMap.put (i, 1);
        }
    }
    if (cardinalityMap.size () != 2) {
        return false;
    }
    Collection < Integer > occurences = cardinalityMap.values ();
    int first = occurences.iterator ().next ();
    return first == 2 || first == 3;
}
----------------------------------------

private static boolean isFullHouse (Integer [] cards) {
    Map < Integer, Integer > cardinalityMap = CollectionUtils.getCardinalityMap (Arrays.asList (cards));
    if (cardinalityMap.size () == 2) {
        if (cardinalityMap.values ().containsAll (Arrays.asList (2, 3))) {
            return true;
        }
        return false;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18872931_18883779_3_26
18872931_18917918_2_32
Title: Custom ObjectMapper with Jersey 2.2 and Jackson 2.1 
----------------------------------------

public static void main (String [] args) {
    try {
        ResourceConfig rc = new ResourceConfig ();
        rc.register (ExampleResource.class);
        rc.register (ObjectMapperResolver.class);
        rc.register (JacksonFeature.class);
        HttpHandler handler = ContainerFactory.createContainer (GrizzlyHttpContainer.class, rc);
        URI uri = new URI ("http://0.0.0.0:8080/");
        HttpServer server = GrizzlyHttpServerFactory.createHttpServer (uri);
        ServerConfiguration config = server.getServerConfiguration ();
        config.addHttpHandler (handler, "/");
        server.start ();
        System.in.read ();
    } catch (ProcessingException | URISyntaxException | IOException e) {
        throw new Error ("Unable to create HTTP server.", e);
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        ObjectMapper mapper = new ObjectMapper ();
        mapper.enable (SerializationFeature.INDENT_OUTPUT);
        JacksonJaxbJsonProvider provider = new JacksonJaxbJsonProvider ();
        provider.setMapper (mapper);
        ResourceConfig rc = new ResourceConfig ();
        rc.register (ExampleResource.class);
        rc.register (provider);
        HttpHandler handler = ContainerFactory.createContainer (GrizzlyHttpContainer.class, rc);
        URI uri = new URI ("http://0.0.0.0:8080/");
        HttpServer server = GrizzlyHttpServerFactory.createHttpServer (uri);
        ServerConfiguration config = server.getServerConfiguration ();
        config.addHttpHandler (handler, "/");
        server.start ();
        System.in.read ();
    } catch (ProcessingException | URISyntaxException | IOException e) {
        throw new Error ("Unable to create HTTP server.", e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18879836_18879912_1_15
18879836_43910331_6_19
Title: How do I Store 6 integers from Scanner Console into a Set 
----------------------------------------

public static void main (final String...args) {
    final int inputs = 6;
    final Set < Integer > s = new HashSet < Integer > (6);
    final Scanner input = new Scanner (System.in);
    for (int i = 0;
    i < inputs; i ++) {
        System.out.print ("Please enter number #" + (i + 1) + ":");
        s.add (input.nextInt ());
    }
    System.out.println ("Well done!");
    System.out.println (s);
}
----------------------------------------

public static void main (String args []) {
    HashSet h = new HashSet (6);
    int [] no = new int [6];
    Scanner s = new Scanner (System.in);
    for (int i = 0;
    i < no.length; i ++) {
        System.out.println ("please enter number");
        h.add (s.nextInt ());
    }
    System.out.println (h);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18886734_18886804_5_15
18886734_18886837_6_24
Title: "Difficulties using arrays beginner" 
----------------------------------------

public static void main (String [] args) {
    Random random = new Random ();
    int i = 0;
    int [] array = new int [10];
    while (i < array.length) {
        array [i] = 1 + random.nextInt (100);
        System.out.println (array [i]);
        i ++;
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        int [] array = new int [10];
        int i = 0;
        Random random = new Random ();
        while (i < array.length) {
            array [i] = 1 + random.nextInt (100);
            i ++;
        }
        System.out.print (Arrays.toString (array));
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18888476_18888671_3_34
18888476_31925088_4_18
Title: How to store input values in an array by using Scanner in Java 
----------------------------------------

public static void main (String [] args) {
    int [] array = new int [3];
    int [] array2 = new int [3];
    Scanner scan = new Scanner (System.in);
    int i = 0;
    while (scan.hasNextInt ()) {
        array [i] = scan.nextInt ();
        i ++;
        if (i == 3) {
            break;
        }
    }
    i = 0;
    while (scan.hasNextInt ()) {
        array2 [i] = scan.nextInt ();
        i ++;
        if (i == 3) {
            break;
        }
    }
    for (int j = 0;
    j < array.length; j ++) {
        System.out.print ("" + array [j] + (j < (array.length - 1) ? " " : "\n"));
    }
    for (int j = 0;
    j < array2.length; j ++) {
        System.out.print ("" + array2 [j] + (j < (array2.length - 1) ? " " : "\n"));
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner s = new Scanner (System.in);
    String str = s.nextLine ();
    String [] arr = str.split (" ");
    Integer [] a = new Integer [arr.length];
    for (int i = 0;
    i < arr.length; i ++) {
        a [i] = Integer.parseInt (arr [i]);
    }
    for (int i = 0;
    i < a.length; i ++) {
        System.out.println (a [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18890025_18890320_8_36
18890025_18891730_3_21
Title: Fetch a column into the result set which is not in the table 
----------------------------------------

public static void main (String [] args) {
    try {
        Class.forName ("oracle.jdbc.OracleDriver");
        java.sql.Connection conn = null;
        java.sql.PreparedStatement ps = null;
        String strQry = "select 1 message  from dual where 1 = ?";
        conn = java.sql.DriverManager.getConnection ("jdbc:oracle:thin:@localhost:wzdev", "user", "pwd");
        ps = conn.prepareStatement (strQry);
        ps.setInt (1, 1);
        java.sql.ResultSet rs = ps.executeQuery ();
        while (rs.next ()) {
            java.util.ArrayList < java.sql.ResultSet > ars = new ArrayList < java.sql.ResultSet > ();
            ars.add (rs);
            System.out.println (ars.get (0).getInt ("message"));
        }
    } catch (ClassNotFoundException e) {
        e.printStackTrace ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        Class.forName ("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        Connection conn = DriverManager.getConnection ("", "", "");
        Statement s = conn.createStatement ();
        ResultSet rs = s.executeQuery ("select sRowId,  0 messa  from tblAccount");
        while (rs.next ()) {
            list.add (rs.getInt ("messa"));
        }
        System.out.println (list.size ());
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18892173_18892444_4_24
18892173_18892498_6_24
Title: Java: changing variable of calling thread 
----------------------------------------

public void runCmd (final String cmd) throws Exception {
    Thread t = new Thread (new Runnable () {
        @Override
        public void run () {
            try {
                Process process = Runtime.getRuntime ().exec (cmd);
                process.waitFor ();
                Shell.this.status = "check out done";
            } catch (IOException e) {
            } catch (InterruptedException e) {
            }
        }}

    );
    t.start ();
    t.join ();
    System.out.println (status);
}
----------------------------------------

public void runCmd (final String cmd, String status) throws Exception {
    Shell.this.status.hold (status);
    Thread t = new Thread (new Runnable () {
        @Override
        public void run () {
            try {
                process = rtime.exec (cmd);
                process.waitFor ();
                Shell.this.status.hold ("check out done");
            } catch (IOException | InterruptedException e) {
            }
        }}

    );
    t.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18894860_22444115_1_19
18894860_30208862_1_26
Title: "for rest easy https calls how to accept all certs" 
----------------------------------------

private DefaultHttpClient createAllTrustingClient () throws GeneralSecurityException {
    SchemeRegistry registry = new SchemeRegistry ();
    registry.register (new Scheme ("http", 80, PlainSocketFactory.getSocketFactory ()));
    TrustStrategy trustStrategy = new TrustStrategy () {
        public boolean isTrusted (X509Certificate [] chain, String authType) throws CertificateException {
            return true;
        }}

    ;
    SSLSocketFactory factory = new SSLSocketFactory (trustStrategy, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
    registry.register (new Scheme ("https", 443, factory));
    ThreadSafeClientConnManager mgr = new ThreadSafeClientConnManager (registry);
    mgr.setMaxTotal (1000);
    mgr.setDefaultMaxPerRoute (1000);
    DefaultHttpClient client = new DefaultHttpClient (mgr, new DefaultHttpClient ().getParams ());
    return client;
}
----------------------------------------

private static DefaultHttpClient createAllTrustingClient () throws GeneralSecurityException {
    SchemeRegistry registry = new SchemeRegistry ();
    registry.register (new Scheme ("http", 80, PlainSocketFactory.getSocketFactory ()));
    TrustStrategy trustStrategy = new TrustStrategy () {
        @Override
        public boolean isTrusted (java.security.cert.X509Certificate [] arg0, String arg1) throws java.security.cert.CertificateException {
            return true;
        }}

    ;
    SSLSocketFactory factory = new SSLSocketFactory (trustStrategy, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
    registry.register (new Scheme ("https", 443, factory));
    BasicClientConnectionManager mgr = new BasicClientConnectionManager (registry);
    DefaultHttpClient client = new DefaultHttpClient (mgr, new DefaultHttpClient ().getParams ());
    return client;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18907386_18907390_1_20
18907386_18907468_1_19
Title: Beginner Java trouble with Parameters 
----------------------------------------

String getMaturityLevel (int age) {
    if (age < 2) maturity = ("a baby");

    if (age < 4) return ("a toddler");

    if (age < 13) return ("a child");

    if (age < 20) return ("a teenager");

    if (age < 35) return ("a young adult");

    if (age < 65) return ("middle aged");

    if (age < 100) return ("geriatric");

    if (age >= 100) return ("antique");

    return "no maturity level found";
}
----------------------------------------

String getMaturityLevel (int age) {
    String maturity = "antique";
    if (age < 2) maturity = ("a baby");
    else if (age < 4) maturity = ("a toddler");
    else if (age < 13) maturity = ("a child");
    else if (age < 20) maturity = ("a teenager");
    else if (age < 35) maturity = ("a young adult");
    else if (age < 65) maturity = ("middle aged");
    else if (age < 100) maturity = ("geriatric");

    return maturity;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18918616_18919039_1_31
18918616_18919051_1_12
Title: Java Multithread 
----------------------------------------

public void move (Container container) {
    if (leftRight) {
        x += deltaX;
        if (x >= canvasWidth) {
            leftRight = false;
            updateDelta ();
        }
    } else {
        x += - deltaX;
        if (x <= 0) {
            leftRight = true;
            updateDelta ();
        }
    }
    if (upDown) {
        y += deltaY;
        upDown = ! (y >= (canvasHeight));
        if (y >= (canvasHeight)) {
            upDown = false;
            updateDelta ();
        }
    } else {
        y += - deltaY;
        if (y <= 0) {
            upDown = true;
            updateDelta ();
        }
    }
}
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18918616_18919051_1_12
18918616_18919365_1_31
Title: Java Multithread 
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

public void move (Container container) {
    if (leftRight) {
        x += deltaX;
        if (x >= (Ball.this.getWidth () - canvasWidth / 2)) {
            leftRight = false;
            updateDelta ();
        }
    } else {
        x += - deltaX;
        if (x <= 0) {
            leftRight = true;
            updateDelta ();
        }
    }
    if (upDown) {
        y += deltaY;
        upDown = ! (y >= (Ball.this.getHeight () - canvasHeight / 2));
        if (y >= (Ball.this.getHeight () - canvasHeight / 2)) {
            upDown = false;
            updateDelta ();
        }
    } else {
        y += - deltaY;
        if (y <= 0) {
            upDown = true;
            updateDelta ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18923413_18924835_7_65
18923413_18925353_52_77
Title: Display a ProgressIndicator during an async loading of ListView items 
----------------------------------------

public void start (Stage primaryStage) {
    final ListView < String > listView = new ListView < String > ();
    final ObservableList < String > listItems = FXCollections.observableArrayList ();
    final ProgressIndicator loadingIndicator = new ProgressIndicator ();
    final Button button = new Button ("Click me to start loading");
    primaryStage.setTitle ("Async Loading Example");
    listView.setPrefSize (200, 250);
    listView.setItems (listItems);
    loadingIndicator.setVisible (false);
    button.setOnAction (new EventHandler < ActionEvent > () {
        @Override
        public void handle (ActionEvent event) {
            final List < String > loadedItems = new LinkedList < String > ();
            listItems.clear ();
            loadingIndicator.setVisible (true);
            new Thread (new Runnable () {
                @Override
                public void run () {
                    try {
                        Thread.sleep (2000l);
                        while (loadedItems.size () < 10) loadedItems.add ("Item " + loadedItems.size ());

                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    } finally {
                        Platform.runLater (new Runnable () {
                            @Override
                            public void run () {
                                listItems.addAll (loadedItems);
                                loadingIndicator.setVisible (false);
                            }}

                        );
                    }
                }}

            ).start ();
        }}

    );
    VBox root = VBoxBuilder.create ().children (StackPaneBuilder.create ().children (listView, loadingIndicator).build (), button).build ();
    primaryStage.setScene (new Scene (root, 200, 250));
    primaryStage.show ();
}
----------------------------------------

public void start (Stage primaryStage) {
    final ListView < String > listView = new ListView < > ();
    final ObservableList < String > listItems = FXCollections.observableArrayList ();
    final ProgressIndicator loadingIndicator = new ProgressIndicator ();
    final Button button = new Button ("Click me to start loading");
    primaryStage.setTitle ("Async Loading Example");
    listView.setPrefSize (200, 250);
    listView.setItems (listItems);
    loadingIndicator.setVisible (false);
    button.setOnAction (event -> loadItems (listItems, loadingIndicator));
    VBox root = new VBox (new StackPane (listView, loadingIndicator), button);
    primaryStage.setScene (new Scene (root, 200, 250));
    primaryStage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18927767_18928191_2_18
18927767_26832022_1_13
Title: Project Euler 2 in Eclipse using Java 
----------------------------------------

public static void main (String [] args) {
    int num1 = 0;
    int num2 = 1;
    int temp = 0;
    int sum = 0;
    do {
        if (num2 % 2 == 0) {
            sum = sum + num2;
        }
        temp = num1 + num2;
        num1 = num2;
        num2 = temp;
    } while (num2 < 4000000);
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    int x1 = 1;
    int x2 = 2;
    while (x1 < 4000000) {
        if ((x1 & 1) == 0) {
            sum += x1;
        }
        x2 = x1 + x2;
        x1 = x2 - x1;
    }
    System.out.println (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18927767_18928191_2_18
18927767_42465910_1_19
Title: Project Euler 2 in Eclipse using Java 
----------------------------------------

public static void main (String [] args) {
    int num1 = 0;
    int num2 = 1;
    int temp = 0;
    int sum = 0;
    do {
        if (num2 % 2 == 0) {
            sum = sum + num2;
        }
        temp = num1 + num2;
        num1 = num2;
        num2 = temp;
    } while (num2 < 4000000);
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    int n1 = 0;
    int n2 = 1;
    int n3 = 0;
    int count = 10000;
    int limit = 4000000;
    int sum = 0;
    for (int i = 1;
    (i <= count && n3 <= limit); i ++) {
        n3 = n1 + n2;
        if (n3 % 2 == 0) {
            sum = sum + n3;
            System.out.println (sum);
        }
        n1 = n2;
        n2 = n3;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18927767_26832022_1_13
18927767_42465910_1_19
Title: Project Euler 2 in Eclipse using Java 
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    int x1 = 1;
    int x2 = 2;
    while (x1 < 4000000) {
        if ((x1 & 1) == 0) {
            sum += x1;
        }
        x2 = x1 + x2;
        x1 = x2 - x1;
    }
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    int n1 = 0;
    int n2 = 1;
    int n3 = 0;
    int count = 10000;
    int limit = 4000000;
    int sum = 0;
    for (int i = 1;
    (i <= count && n3 <= limit); i ++) {
        n3 = n1 + n2;
        if (n3 % 2 == 0) {
            sum = sum + n3;
            System.out.println (sum);
        }
        n1 = n2;
        n2 = n3;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18939857_18944616_38_66
18939857_18944616_42_62
Title: How to get a class name of a method by using Eclipse JDT ASTParser? 
----------------------------------------

public boolean visit (MethodDeclaration node) {
    if (node.getName ().getIdentifier ().equals ("testSearch")) {
        Block block = node.getBody ();
        block.accept (new ASTVisitor () {
            public boolean visit (MethodInvocation node) {
                System.out.println ("Name: " + node.getName ());
                Expression expression = node.getExpression ();
                if (expression != null) {
                    System.out.println ("Expr: " + expression.toString ());
                    ITypeBinding typeBinding = expression.resolveTypeBinding ();
                    if (typeBinding != null) {
                        System.out.println ("Type: " + typeBinding.getName ());
                    }
                }
                IMethodBinding binding = node.resolveMethodBinding ();
                if (binding != null) {
                    ITypeBinding type = binding.getDeclaringClass ();
                    if (type != null) {
                        System.out.println ("Decl: " + type.getName ());
                    }
                }
                return true;
            }}

        );
    }
    return true;
}
----------------------------------------

public boolean visit (MethodInvocation node) {
    System.out.println ("Name: " + node.getName ());
    Expression expression = node.getExpression ();
    if (expression != null) {
        System.out.println ("Expr: " + expression.toString ());
        ITypeBinding typeBinding = expression.resolveTypeBinding ();
        if (typeBinding != null) {
            System.out.println ("Type: " + typeBinding.getName ());
        }
    }
    IMethodBinding binding = node.resolveMethodBinding ();
    if (binding != null) {
        ITypeBinding type = binding.getDeclaringClass ();
        if (type != null) {
            System.out.println ("Decl: " + type.getName ());
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18940466_18940480_1_11
18940466_18940489_1_13
Title: Is there a letter? Return wrong value 
----------------------------------------

public boolean isThereLetter (String name) {
    char [] chars = name.toCharArray ();
    for (char c : chars) {
        if (Character.isLetter (c)) {
            return true;
        }
    }
    return false;
}
----------------------------------------

public boolean isThereLetter (String name) {
    char [] chars = name.toCharArray ();
    for (char c : chars) {
        if (Character.isLetter (c)) {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18941184_18941255_1_14
18941184_18941288_2_14
Title: error: cannot find symbol method 
----------------------------------------

public static ArrayList < String > fileReader () {
    ArrayList < String > list = new ArrayList < String > ();
    try (Scanner s = new Scanner (new File ("test.txt"))) {
        while (s.hasNext ()) list.add (s.next ());

        s.close ();
    } catch (FileNotFoundException e) {
        System.out.println ("File Not Found.");
    }
    return (list);
}
----------------------------------------

public static ArrayList < String > fileReader () {
    ArrayList < String > list = new ArrayList < String > ();
    try {
        Scanner s = new Scanner (new File ("test.txt"));
        while (s.hasNext ()) list.add (s.next ());

        s.close ();
    } catch (FileNotFoundException e) {
        System.out.println ("File Not Found.");
    }
    return (list);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18947752_18947925_17_28
18947752_18948142_4_15
Title: Android - Toast button not appearing 
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button btnToast = (Button) findViewById (R.id.button1);
    btnToast.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View v) {
            toastMe (v);
        }}

    );
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button btnToast = (Button) findViewById (R.id.button1);
    btnToast.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View v) {
            toastMe (v);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18947752_18947925_17_28
18947752_18950903_16_27
Title: Android - Toast button not appearing 
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button btnToast = (Button) findViewById (R.id.button1);
    btnToast.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View v) {
            toastMe (v);
        }}

    );
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button btnToast = (Button) findViewById (R.id.button1);
    btnToast.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View v) {
            toastMe (this);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18947752_18948142_4_15
18947752_18950903_16_27
Title: Android - Toast button not appearing 
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button btnToast = (Button) findViewById (R.id.button1);
    btnToast.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View v) {
            toastMe (v);
        }}

    );
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button btnToast = (Button) findViewById (R.id.button1);
    btnToast.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View v) {
            toastMe (this);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18949461_18949485_1_16
18949461_18949565_1_19
Title: Output 22 lines previously read - Java 
----------------------------------------

public static void test (BufferedReader r, PrintWriter w) throws IOException {
    String [] prev22 = new String [22];
    String line;
    int n = 0;
    while ((line = r.readLine ()) != null) {
        prev22 [n % 22] = line;
        if (line.trim () == null) {
            w.println (prev22 [n - 22 % 22]);
        } else {
            w.println (line);
        }
        n ++;
    }
}
----------------------------------------

public static void test (BufferedReader r, PrintWriter w) throws IOException {
    String [] s = new String [22];
    String line;
    int n = 0;
    while ((line = r.readLine ()) != null) {
        s [n] = line;
        n = (n + 1) % 22;
    }
    int last = n;
    do {
        w.println (s [n]);
        n = (n + 1) % 22;
    } while (n != last);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18956882_18957192_6_34
18956882_26559812_7_36
Title: Java - while loop not working as expected 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    Random random = new Random ();
    String [] answer = new String [6];
    answer [0] = "blabla1";
    answer [1] = "blabla2";
    answer [2] = "blabla3";
    answer [3] = "blabla4";
    answer [4] = "blabla5";
    answer [5] = "blabla6";
    boolean continue1 = true;
    System.out.println ("Hello, how can I help you?");
    while (continue1) {
        String input = in.next ();
        int output = random.nextInt (6);
        if (input.equals ("Bye!")) {
            continue1 = false;
            System.out.println ("Bye!");
        } else {
            System.out.println (answer [output]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    Random random = new Random ();
    String [] answer = new String [6];
    answer [0] = "blabla1";
    answer [1] = "blabla2";
    answer [2] = "blabla3";
    answer [3] = "blabla4";
    answer [4] = "blabla5";
    answer [5] = "blabla6";
    boolean keepGoing = true;
    System.out.println ("Hello, how can I help you?");
    while (keepGoing) {
        String input = in.next ();
        int output = random.nextInt (6);
        System.out.println (answer [output]);
        if (input.equals ("Bye!")) {
            keepGoing = false;
            System.out.println ("Bye!");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18959368_18989889_12_25
18959368_19047992_9_26
Title: Android API Level 8 Pick up the last taken Photo form specific folder 
----------------------------------------

@Override
protected void onActivityResult (int requestCode, int resultCode, Intent data) {
    if (requestCode == PICK_IMAGE && data != null && data.getData () != null) {
        Uri _uri = data.getData ();
        Cursor cursor = getContentResolver ().query (_uri, new String [] {android.provider.MediaStore.Images.ImageColumns.DATA}, null, null, null);
        cursor.moveToFirst ();
        final String imageFilePath = cursor.getString (0);
        cursor.close ();
    }
}
----------------------------------------

@Override
protected void onActivityResult (int requestCode, int resultCode, Intent data) {
    super.onActivityResult (requestCode, resultCode, data);
    Intent intent = new Intent ();
    intent.putExtra ("uri", sdDir.getPath ());
    bmp = BitmapFactory.decodeFile (outputFileUri.getPath ());
    Matrix matrix = new Matrix ();
    matrix.postRotate (90);
    Bitmap bMapRotate = Bitmap.createBitmap (bmp, 0, 0, bmp.getWidth (), bmp.getHeight (), matrix, true);
    iv.setImageBitmap (bMapRotate);
    setResult (0, intent);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18969592_18969962_109_118
18969592_18969962_77_85
Title: "Java last added button allows agent.move rest dont" 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    JButton thisBtn = (JButton) e.getSource ();
    for (JButton btn : buttons) {
        if (btn == thisBtn) {
            btn.setEnabled (false);
        } else {
            btn.setEnabled (true);
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    for (Direction direction : Direction.values ()) {
        if (directionMap.get (direction)) {
            myX += STEP * direction.getRight ();
            myY += STEP * direction.getDown ();
        }
    }
    repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18972661_18972711_3_26
18972661_18972778_2_21
Title: "Why is my code only outputting ""O""?" 
----------------------------------------

public static void main (String [] args) {
    int m = 6;
    int n = 2;
    char o = 'O';
    char x = 'X';
    for (int r = 1;
    r <= m; r ++) {
        for (int c = 1;
        c <= n; c ++) {
            if ((c + r) % 2 == 0) System.out.print (x);
            else System.out.print (o);

            if (c == n) System.out.print ("\n");

        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int m = 6;
    int n = 2;
    char o = 'O';
    char x = 'X';
    for (int r = 1;
    r <= m; r ++) {
        for (int c = 1;
        c <= n; c ++) {
            if ((c + r) % 2 == 0) {
                System.out.print (x);
            } else {
                System.out.print (o);
            }
        }
        System.out.print ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18975050_18975511_1_20
18975050_18976019_2_21
Title: "Selection Sort in Java ways I can improve the code?" 
----------------------------------------

public static void main (String [] args) {
    int arr [] = {234, 151, 123, 4, 5342, 76, 48};
    int arrLength = arr.length;
    for (int i = 0;
    i < arrLength - 1; i ++) {
        int min = i;
        for (int k = i + 1;
        k < arrLength; k ++) {
            if (arr [k] < arr [min]) {
                min = k;
            }
        }
        if (i != min) {
            int temp = arr [i];
            arr [i] = arr [min];
            arr [min] = temp;
        }
    }
    for (int j = 0;
    j < arrLength; j ++) {
        System.out.println (arr [j] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    int arr [] = {234, 151, 123, 4, 5342, 76, 48};
    int lowest, i, j;
    for (i = 0; i < arr.length - 1; i ++) {
        lowest = i;
        for (j = i + 1; j < arr.length; j ++) {
            if (arr [j] < arr [lowest]) {
                lowest = j;
            }
        }
        if (lowest != i) {
            int temp = arr [i];
            arr [i] = arr [lowest];
            arr [lowest] = temp;
        }
    }
    for (int k = 0;
    k <= arr.length - 1; k ++) {
        System.out.println (arr [k] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18992276_18992416_1_16
18992276_18992480_1_15
Title: Java Range find difference between largest and smallest int 
----------------------------------------

public static int range (final ArrayList < Integer > list) {
    if (list.isEmpty ()) {
        return 0;
    } else {
        int max = list.get (0);
        int min = list.get (0);
        for (final int i : list) {
            if (i > max) {
                max = i;
            } else if (i < min) {
                min = i;
            }

        }
        return (max - min) + 1;
    }
}
----------------------------------------

public static int range (List < Integer > input) {
    if (input == null || input.size () == 0) throw new IllegalArgumentException ("");

    if (input.size () == 1) return 0;

    List < Integer > copy = new ArrayList (input);
    Collections.sort (copy);
    int min = copy.get (0);
    int max = copy.get (copy.lenght - 1);
    return max - min;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18992276_18992416_1_16
18992276_18992698_1_11
Title: Java Range find difference between largest and smallest int 
----------------------------------------

public static int range (final ArrayList < Integer > list) {
    if (list.isEmpty ()) {
        return 0;
    } else {
        int max = list.get (0);
        int min = list.get (0);
        for (final int i : list) {
            if (i > max) {
                max = i;
            } else if (i < min) {
                min = i;
            }

        }
        return (max - min) + 1;
    }
}
----------------------------------------

public static int range (ArrayList < Integer > list) {
    int min = list.get (0);
    int max = list.get (0);
    for (int i = 0;
    i < list.size (); i ++) {
        if (list.get (i) > max) max = list.get (i);

        if ((list.get (i) < min)) min = list.get (i);

    }
    return max - min + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18992276_18992480_1_15
18992276_18992698_1_11
Title: Java Range find difference between largest and smallest int 
----------------------------------------

public static int range (List < Integer > input) {
    if (input == null || input.size () == 0) throw new IllegalArgumentException ("");

    if (input.size () == 1) return 0;

    List < Integer > copy = new ArrayList (input);
    Collections.sort (copy);
    int min = copy.get (0);
    int max = copy.get (copy.lenght - 1);
    return max - min;
}
----------------------------------------

public static int range (ArrayList < Integer > list) {
    int min = list.get (0);
    int max = list.get (0);
    for (int i = 0;
    i < list.size (); i ++) {
        if (list.get (i) > max) max = list.get (i);

        if ((list.get (i) < min)) min = list.get (i);

    }
    return max - min + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18994686_18995072_8_23
18994686_18995088_1_20
Title: Find the largest sequence of numbers in an integer arraylist 
----------------------------------------

public static int getMaxSequence (int head, List < Integer > tail, int soFar) {
    if (tail == null) return 0;

    if (tail.size () == 0) return soFar;

    if (head <= tail.get (0)) {
        soFar ++;
    } else {
        soFar = 1;
    }
    final int nextSeq = getMaxSequence (tail.get (0), tail.subList (1, tail.size ()), soFar);
    return Math.max (soFar, nextSeq);
}
----------------------------------------

public static int getMaxSequence (ArrayList < Integer > list) {
    int indx = 0;
    int currmax = 0;
    currmax = list.get (indx).toString ().length ();
    while (indx < list.size ()) {
        if (currmax <= list.get (indx).toString ().length ()) {
            currmax = list.get (indx).toString ().length ();
        } else return currmax;

        indx ++;
    }
    return currmax;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18995685_18995788_1_21
18995685_18995982_1_30
Title: Improving the performance of merging two ArrayLists 
----------------------------------------

public ArrayList < Integer > mergeList (ArrayList < Integer > first, ArrayList < Integer > second, int maxLength) {
    if (first == null && second == null) return null;
    else if (first == null && second != null) {
        return second;
    } else if (first != null && second == null) {
        return first;
    } else if (first != null && second != null) {
        first.addAll (second);
        Collections.sort (first);
        Collections.reverse (first);
    }

    return (ArrayList) first.size () > maxLength ? first.subList (0, n) : first;
}
----------------------------------------

private List < Integer > mergeList (List < Integer > list1, List < Integer > list2, final int newSize) {
    if (list1 == null) {
        list1 = Collections.emptyList ();
    }
    if (list2 == null) {
        list2 = Collections.emptyList ();
    }
    List < Integer > result = new ArrayList < Integer > (list1);
    result.addAll (list2);
    Comparator < Integer > reverseSortComparator = new Comparator < Integer > () {
        @Override
        public int compare (final Integer o1, final Integer o2) {
            return o2.compareTo (o1);
        }}

    ;
    Collections.sort (result, reverseSortComparator);
    if (result.size () > newSize) {
        return result.subList (0, newSize);
    } else {
        return result;
    }
}
----------------------------------------

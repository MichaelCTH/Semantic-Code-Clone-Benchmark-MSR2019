$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13025921_13026331_26_68
13025921_13026373_7_16
Title: Reading a text file in Java and printing backwards with recursion 
----------------------------------------

public static void main (String [] args) {
    try {
        FileInputStream fin = new FileInputStream ("d:\\file.txt");
        BufferedReader br = new BufferedReader (new InputStreamReader (fin));
        String n;
        while ((n = br.readLine ()) != null) {
            System.out.println (n + " length:" + n.length ());
        }
        fin.close ();
        br.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    try {
        FileInputStream f = new FileInputStream ("d:\\file.txt");
        BufferedReader br = new BufferedReader (new InputStreamReader (f));
        try {
            Test.printname (br.readLine (), br);
        } catch (IOException e) {
            e.printStackTrace ();
        }
        f.close ();
        br.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scan = new Scanner (new File ("listOfNames.txt"));
    String [] names = new String [MAXLINES];
    readNames (names, scan, 0);
    printNames (names, 0);
    System.out.println ();
    printNamesReverse (names, 0);
    System.out.println (totalNumberOfCharsInNames (names, 0, 0));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13025921_13026331_26_68
13025921_13026954_13_24
Title: Reading a text file in Java and printing backwards with recursion 
----------------------------------------

public static void main (String [] args) {
    try {
        FileInputStream fin = new FileInputStream ("d:\\file.txt");
        BufferedReader br = new BufferedReader (new InputStreamReader (fin));
        String n;
        while ((n = br.readLine ()) != null) {
            System.out.println (n + " length:" + n.length ());
        }
        fin.close ();
        br.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    try {
        FileInputStream f = new FileInputStream ("d:\\file.txt");
        BufferedReader br = new BufferedReader (new InputStreamReader (f));
        try {
            Test.printname (br.readLine (), br);
        } catch (IOException e) {
            e.printStackTrace ();
        }
        f.close ();
        br.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        Scanner scanner = new Scanner (new File ("name.txt"));
        scanner.useDelimiter (System.getProperty ("line.separator"));
        recursiveRead (scanner);
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13025921_13026373_7_16
13025921_13026954_13_24
Title: Reading a text file in Java and printing backwards with recursion 
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner scan = new Scanner (new File ("listOfNames.txt"));
    String [] names = new String [MAXLINES];
    readNames (names, scan, 0);
    printNames (names, 0);
    System.out.println ();
    printNamesReverse (names, 0);
    System.out.println (totalNumberOfCharsInNames (names, 0, 0));
}
----------------------------------------

public static void main (String [] args) {
    try {
        Scanner scanner = new Scanner (new File ("name.txt"));
        scanner.useDelimiter (System.getProperty ("line.separator"));
        recursiveRead (scanner);
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13030157_13030493_6_20
13030157_13074375_1_23
Title: Using Java to parse text based on keywords 
----------------------------------------

public static void main (String [] args) {
    Pattern p = Pattern.compile ("name (.+) address (.+) birthday (.+)");
    String text = "name Marioka address 97 Garderners Road birthday 12-11-1982";
    Matcher m = p.matcher (text);
    if (m.matches ()) {
        System.out.println (m.group (1) + "\n" + m.group (2) + "\n" + m.group (3));
    } else {
        System.out.println ("String does not match");
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        String inputs = "name Marioka address 97 Garderners Road birthday 12-11-1982\n name Ada Lovelace gender" + " woman address London\n name James address 65 Watcher Avenue";
        Scanner scanner = new Scanner (inputs);
        List < Person > personList = new ArrayList < Person > ();
        while (scanner.hasNextLine ()) {
            String line = scanner.nextLine ();
            List < String > filtereList = splitLines (line, "name|address|gender");
            Iterator < String > lineIterator = filtereList.iterator ();
            Person p = new Person ();
            while (lineIterator.hasNext ()) {
                PersonEnum pEnum = PersonEnum.valueOf (lineIterator.next ());
                pEnum.set (p, lineIterator.next ());
            }
            personList.add (p);
            System.out.println (p);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13031070_16019905_31_50
13031070_26531758_13_25
Title: Spring Security i18n: wrong error message resolved 
----------------------------------------

public void doFilter (ServletRequest pRequest, ServletResponse pResponse, FilterChain pFilterChain) throws IOException, ServletException {
    if (! (pRequest instanceof HttpServletRequest)) {
        pFilterChain.doFilter (pRequest, pResponse);
        return;
    }
    HttpServletRequest request = (HttpServletRequest) pRequest;
    Cookie cookie = WebUtils.getCookie (request, CookieLocaleResolver.LOCALE_REQUEST_ATTRIBUTE_NAME);
    if (cookie != null) {
        Locale locale = org.springframework.util.StringUtils.parseLocaleString (cookie.getValue ());
        if (locale != null) {
            LOG.info ("Locale cookie: [" + cookie.getValue () + "] == '" + locale + "'");
            request.setAttribute (CookieLocaleResolver.LOCALE_REQUEST_ATTRIBUTE_NAME, locale);
            LocaleContextHolder.setLocale (locale, true);
        }
    }
    pFilterChain.doFilter (pRequest, pResponse);
}
----------------------------------------

public void doFilter (ServletRequest pRequest, ServletResponse pResponse, FilterChain pFilterChain) throws IOException, ServletException {
    if (! (pRequest instanceof HttpServletRequest)) {
        pFilterChain.doFilter (pRequest, pResponse);
        return;
    }
    LocaleResolver bean = springContext.getBean (LocaleResolver.class);
    Locale locale = bean.resolveLocale ((HttpServletRequest) pRequest);
    LOG.info ("Locale -> " + locale);
    LocaleContextHolder.setLocale (locale, true);
    pFilterChain.doFilter (pRequest, pResponse);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13031153_13031217_15_29
13031153_13031441_8_26
Title: How to override the ArrayList's ToString method so that the comma delimiter be replaced by other symbols? 
----------------------------------------

public static String toString (Collection < Person > persons) {
    Iterator < Person > it = persons.iterator ();
    if (! it.hasNext ()) return "[]";

    StringBuilder sb = new StringBuilder ();
    sb.append ('[');
    for (;;) {
        Person e = it.next ();
        sb.append (e);
        if (! it.hasNext ()) return sb.append (']').toString ();

        sb.append ('&').append (' ');
    }
}
----------------------------------------

public String toString () {
    int size = size ();
    StringBuilder output = new StringBuilder ();
    String delimiter = "&";
    for (int i = 0;
    i < size; i ++) {
        output.append (get (i));
        if (i < size - 1) {
            output.append (delimiter);
        }
    }
    return output.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13031637_13032231_1_33
13031637_13033566_1_41
Title: Adding JPanel to JScrollPane 
----------------------------------------

public static void main (String args []) {
    JFrame frame = new JFrame ("SpringLayout");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    Container contentPane = frame.getContentPane ();
    JButton next = new JButton ("Next");
    JPanel buttonPanel = new JPanel ();
    buttonPanel.add (next);
    GridBagLayout layout = new GridBagLayout ();
    JPanel mainPanel = new JPanel ();
    mainPanel.setLayout (layout);
    contentPane.setLayout (new BorderLayout ());
    GridBagConstraints gbc = new GridBagConstraints ();
    int j = 25;
    for (int i = 0;
    i < 50; i ++) {
        JLabel label = new JLabel ("Enter Name (" + i + ")");
        JTextField text = new JTextField (15);
        gbc.gridx = 0;
        gbc.gridy = i;
        mainPanel.add (label, gbc);
        gbc.gridx = 1;
        mainPanel.add (text, gbc);
    }
    contentPane.add (new JScrollPane (mainPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED), BorderLayout.CENTER);
    contentPane.add (buttonPanel, BorderLayout.SOUTH);
    frame.setSize (500, 800);
    frame.setVisible (true);
}
----------------------------------------

public static void main (String args []) {
    JFrame frame = new JFrame ("SpringLayout");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    JScrollPane scroll = new JScrollPane ();
    Container contentPane = frame.getContentPane ();
    JButton next = new JButton ("Next");
    JPanel buttonPanel = new JPanel ();
    buttonPanel.add (next);
    SpringLayout layout = new SpringLayout ();
    JPanel mainPanel = new JPanel ();
    mainPanel.setLayout (layout);
    contentPane.setLayout (new BorderLayout ());
    int j = 25;
    for (int i = 0;
    i < 18; i ++) {
        JLabel label = new JLabel ("Enter Name " + i);
        JTextField text = new JTextField (15);
        mainPanel.add (label);
        mainPanel.add (text);
        layout.putConstraint (SpringLayout.WEST, label, 10, SpringLayout.WEST, contentPane);
        layout.putConstraint (SpringLayout.NORTH, label, j, SpringLayout.NORTH, contentPane);
        layout.putConstraint (SpringLayout.NORTH, text, j, SpringLayout.NORTH, contentPane);
        layout.putConstraint (SpringLayout.WEST, text, 20, SpringLayout.EAST, label);
        j += 30;
    }
    mainPanel.setPreferredSize (new Dimension (mainPanel.getWidth (), 1500));
    scroll.setPreferredSize (new Dimension (500, 500));
    scroll.setViewportView (mainPanel);
    contentPane.add (scroll);
    contentPane.add (buttonPanel, BorderLayout.SOUTH);
    frame.setSize (500, 600);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13035334_13035478_6_19
13035334_13035742_1_11
Title: Missing Return Statement Compilation Error 
----------------------------------------

public boolean isPalindrome () {
    boolean value = false;
    int length = text.length ();
    for (int n = 0;
    n <= length / 2; n ++) {
        char letterFromFront = text.charAt (n);
        char letterFromBack = text.charAt (length);
        if (letterFromFront == letterFromBack) {
            value = true;
        } else {
            value = false;
        }
    }
    return value;
}
----------------------------------------

public boolean isPalindrome () {
    int length = text.length ();
    for (int n = 0;
    n <= length / 2; n ++) {
        char letterFromFront = text.charAt (n);
        char letterFromBack = text.charAt (length);
        if (letterFromFront == letterFromBack) {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13041708_13041828_8_24
13041708_13045805_94_110
Title: scheduling a periodic task after other threads finish 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    ScheduledFuture future = Executors.newScheduledThreadPool (1).scheduleAtFixedRate (new MyScheduledTask (), 0, 10, TimeUnit.SECONDS);
    ExecutorService executor = Executors.newFixedThreadPool (3);
    for (int i = 0;
    i < 3; i ++) {
        executor.execute (new AnyTask ());
    }
    executor.shutdown ();
    executor.awaitTermination (Long.MAX_VALUE, TimeUnit.TimeUnit.NANOSECONDS);
    future.cancel (false);
    new Thread (new ScheduledTask ()).start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Example example = new Example ();
    ExecutorService executor = Executors.newCachedThreadPool ();
    Runnable [] tasks = {new Task1 (), new Task2 (), new Task1 ()};
    ScheduledRepeatingTask scheduledRepeatingTask = example.new ScheduledRepeatingTask (tasks);
    executor.execute (scheduledRepeatingTask);
    Thread.sleep (20000);
    scheduledRepeatingTask.shutdownScheduler ();
    executor.shutdown ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13042351_13042432_1_20
13042351_13042486_1_21
Title: Java match counter and Pseudo match counter 
----------------------------------------

public int psuedoMatch (int [] guess) {
    int psuedoCount = 0;
    if (lotteryNumbers.length != guess.length) {
        return psuedoCount;
    }
    for (int i = 0;
    i < lotteryNumbers.length || psuedoCount < 3; i ++) {
        if (lotteryNumbers [psuedoCount] == guess [psuedoCount]) {
            psuedoCount ++;
        }
    }
    return psuedoCount;
}
----------------------------------------

public int psuedoMatch (int [] guess) {
    int psuedoCount = 0;
    if (lotteryNumbers.length != guess.length) return 0;

    int size = lotteryNumbers.length;
    for (int i = 0;
    i < size; i ++) {
        for (int j = 0;
        j < size; j ++) {
            if (lotteryNumbers [i] == guess [j] && i != j) psuedoCount ++;

        }
    }
    return psuedoCount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13042798_45539249_6_37
13042798_45672847_1_14
Title: twoSum Algorithm : How to improve this? 
----------------------------------------

public int [] twoSum (int [] nums, int target) {
    int length = nums.length;
    index [0] = - 1;
    index [1] = - 1;
    if (length < 1) return index;

    HashMap < Integer, Integer > numHash = new HashMap < > (length);
    for (int i = 0;
    i < length; i ++) {
        numHash.put (nums [i], i);
    }
    for (int i = 0;
    i < length; i ++) {
        int val1 = nums [i];
        int val2 = target - val1;
        if (numHash.containsKey (val2) && numHash.get (val2) != i) {
            index [0] = i;
            index [1] = numHash.get (target - nums [i]);
            break;
        }
    }
    return index;
}
----------------------------------------

public static int [] twoSum (int [] nums, int target) {
    int [] resultarray = new int [2];
    for (int i = 0;
    i < nums.length - 1; i ++) {
        for (int k = 1;
        k < nums.length; k ++) {
            if (target == nums [i] + nums [k]) {
                resultarray [0] = nums [i];
                resultarray [1] = nums [k];
            }
        }
    }
    return resultarray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13055107_13055405_91_139
13055107_17352183_106_155
Title: JOptionPane - check user input and prevent from closing until conditions are met 
----------------------------------------

public void propertyChange (PropertyChangeEvent e) {
    String prop = e.getPropertyName ();
    if (isVisible () && (e.getSource () == optionPane) && (JOptionPane.VALUE_PROPERTY.equals (prop) || JOptionPane.INPUT_VALUE_PROPERTY.equals (prop))) {
        Object value = optionPane.getValue ();
        if (value == JOptionPane.UNINITIALIZED_VALUE) {
            return;
        }
        optionPane.setValue (JOptionPane.UNINITIALIZED_VALUE);
        if (btnString1.equals (value)) {
            typedText = textField.getText ();
            String ucText = typedText.toUpperCase ();
            if (magicWord.equals (ucText)) {
                JOptionPane.showMessageDialog (this, "Correct answer given");
                exit ();
            } else {
                textField.selectAll ();
                JOptionPane.showMessageDialog (this, "Sorry, \"" + typedText + "\" " + "isn't a valid response.\n" + "Please enter " + magicWord + ".", "Try again", JOptionPane.ERROR_MESSAGE);
                typedText = null;
                textField.requestFocusInWindow ();
            }
        } else {
            JOptionPane.showMessageDialog (this, "It's OK.  " + "We won't force you to type " + magicWord + ".");
            typedText = null;
            exit ();
        }
    }
}
----------------------------------------

public void propertyChange (PropertyChangeEvent e) {
    String prop = e.getPropertyName ();
    if (isVisible () && (e.getSource () == optionPane)) {
        if (JOptionPane.VALUE_PROPERTY.equals (prop)) {
            if (button1Str.equals (e.getNewValue ())) {
                optionPane.setInputValue (textField.getText ());
            } else if (button2Str.equals (e.getNewValue ())) {
                optionPane.setInputValue (null);
                exit ();
            }

        } else if (JOptionPane.INPUT_VALUE_PROPERTY.equals (prop)) {
            Object value = optionPane.getInputValue ();
            if (null != value && ((String) value).length () > 0) {
                if (Files.exists (rootPath.resolve (textField.getText ()))) {
                    JOptionPane.showMessageDialog (this, "Sorry, " + rootPath.resolve (textField.getText ()).toString () + " already exists.\n\n Please enter another name.", "OK", JOptionPane.ERROR_MESSAGE);
                    optionPane.setInputValue (null);
                } else {
                    exit ();
                }
            }
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13060062_13060190_1_23
13060062_13060246_1_28
Title: How can I discover if an object contains numeric fields that are set to 0? 
----------------------------------------

public boolean checkZero (Class clazz) {
    boolean zeroNumericFields = true;
    Field [] fields = clazz.getDeclaredFields ();
    boolean zeroNumericFields = true;
    List < Class > numberClasses = new ArrayList < Class > ();
    numberClasses.add (Number.class);
    numberClasses.add (Integer.class);
    numberClasses.add (Long.class);
    numberClasses.add (Double.class);
    numberClasses.add (Float.class);
    if (fields.length > 0) {
        for (Field field : fields) {
            if (numberClasses.contains (field.getType ())) {
                zeroNumericFields = false;
                break;
            }
        }
    }
    return zeroNumericFields;
}
----------------------------------------

public static boolean checkZero (Object toCheck) {
    final Class < ? > numerics = new Class < ? > [] {int.class, double.class, float.class, long.class, short.class, byte.class, Integer.class, Double.class, Float.class, Long.class, Short.class, Byte.class};
    try {
        Class < ? > clazz = toCheck.getClass ();
        Field [] fields = clazz.getDeclaredFields ();
        for (Field field : fields) {
            Class < ? > type = field.getType ();
            boolean isNumeric = false;
            for (Class < ? > numeric : numerics) {
                if (type.equals (numeric)) {
                    isNumeric = true;
                    break;
                }
            }
            if (isNumeric) {
                Object value = field.get (toCheck);
                if (value == 0) {
                    return true;
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13060796_13060938_1_19
13060796_13061166_1_15
Title: "Java : singly linked list dummy node insert" 
----------------------------------------

public void add (int index, E element) {
    if ((index < 0) || (index > length)) {
        throw new IndexOutOfBoundsException ();
    }
    SLNode < E > current = Head;
    for (int i = 0;
    i < index; i ++) {
        current = current.getSuccessor ();
    }
    SLNode < E > newnode = new SLNode < E > (element, null);
    newnode.setSuccessor (current.getSuccessor ());
    current.setSuccessor (newnode);
    length ++;
}
----------------------------------------

public void add (int index, E element) {
    if ((index < 0) || (index > length)) throw new IndexOutOfBoundsException ();

    SLNode < E > previousNode = head;
    for (int i = 0;
    i < index; i ++) {
        previousNode = previousNode.getSuccessor ();
    }
    SLNode < E > newNode = new SLNode < E > (element, previousNode.getSuccessor ());
    previousNode.setSuccessor (newNode);
    length ++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13065865_13066609_2_28
13065865_22155817_32_47
Title: Appending multiple files into one 
----------------------------------------

public static void main (String args []) throws Exception {
    String [] filename = {"C:\\WORK_Saurabh\\1.txt", "C:\\WORK_Saurabh\\2.txt"};
    File file = new File ("C:\\WORK_Saurabh\\new.txt");
    FileWriter output = new FileWriter (file);
    try {
        for (int i = 0;
        i < filename.length; i ++) {
            BufferedReader objBufferedReader = new BufferedReader (new FileReader (getDictionaryFilePath (filename [i])));
            String line;
            while ((line = objBufferedReader.readLine ()) != null) {
                line = line.replace (" ", "");
                output.write (line);
            }
            objBufferedReader.close ();
        }
        output.close ();
    } catch (Exception e) {
        throw new Exception (e);
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        File file1 = new File ("C:\\New folder\\file1.txt");
        File file2 = new File ("C:\\New folder\\file2.txt");
        File file3 = read (file1, file2);
        Scanner sc = new Scanner (file3);
        while (sc.hasNext ()) System.out.print (sc.next ());

    } catch (Exception e) {
        System.out.printf ("Error  :%s", e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13065865_13066609_2_28
13065865_51687714_1_12
Title: Appending multiple files into one 
----------------------------------------

public static void main (String args []) throws Exception {
    String [] filename = {"C:\\WORK_Saurabh\\1.txt", "C:\\WORK_Saurabh\\2.txt"};
    File file = new File ("C:\\WORK_Saurabh\\new.txt");
    FileWriter output = new FileWriter (file);
    try {
        for (int i = 0;
        i < filename.length; i ++) {
            BufferedReader objBufferedReader = new BufferedReader (new FileReader (getDictionaryFilePath (filename [i])));
            String line;
            while ((line = objBufferedReader.readLine ()) != null) {
                line = line.replace (" ", "");
                output.write (line);
            }
            objBufferedReader.close ();
        }
        output.close ();
    } catch (Exception e) {
        throw new Exception (e);
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    List < String > files = new ArrayList < String > ();
    for (int i = 10;
    i < 14; i ++) files.add ("C://opt/Test/test" + i + ".csv");

    String destFile = "C://opt/Test/test.csv";
    System.out.println ("TO " + destFile);
    long st = System.currentTimeMillis ();
    mergefiles (files, destFile);
    System.out.println ("DONE." + (st - System.currentTimeMillis ()));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13065865_22155817_32_47
13065865_51687714_1_12
Title: Appending multiple files into one 
----------------------------------------

public static void main (String [] args) {
    try {
        File file1 = new File ("C:\\New folder\\file1.txt");
        File file2 = new File ("C:\\New folder\\file2.txt");
        File file3 = read (file1, file2);
        Scanner sc = new Scanner (file3);
        while (sc.hasNext ()) System.out.print (sc.next ());

    } catch (Exception e) {
        System.out.printf ("Error  :%s", e);
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    List < String > files = new ArrayList < String > ();
    for (int i = 10;
    i < 14; i ++) files.add ("C://opt/Test/test" + i + ".csv");

    String destFile = "C://opt/Test/test.csv";
    System.out.println ("TO " + destFile);
    long st = System.currentTimeMillis ();
    mergefiles (files, destFile);
    System.out.println ("DONE." + (st - System.currentTimeMillis ()));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13070245_13070413_4_39
13070245_13070434_27_40
Title: method to read array list to find certain string and value 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader reader = new BufferedReader (new FileReader ("fruit.txt"));
    System.out.println ("enter the fruit you want to search");
    Scanner input = new Scanner (System.in);
    String fruit = input.nextLine ();
    String line;
    boolean found = false;
    int count = 0;
    List < String > list = new ArrayList < String > ();
    while ((line = reader.readLine ()) != null) {
        String [] items = line.split (" ");
        if (fruit.equals (items [0])) {
            found = true;
            count = Integer.parseInt (items [1]);
            break;
        }
        list.add (line);
    }
    reader.close ();
    if (found) {
        System.out.println ("You have " + fruit + " " + count + " of them and status is good");
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader reader = new BufferedReader (new FileReader ("fruit.txt"));
    System.out.println ("enter the fruit you want to search");
    Scanner input = new Scanner (System.in);
    String fruit = input.nextLine ();
    String line = "";
    HashMap < String, Fruit > map = new HashMap < String, Fruit > ();
    while ((line = reader.readLine ()) != null) {
        String [] strings = line.split (" ");
        map.put (strings [0], new Fruit (strings [0], strings [1], strings [2]));
    }
    reader.close ();
    System.out.print ("You have " + fruit + " " + map.get (fruit).getCount () + " of them and status is: " + map.get (fruit).getStatus ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13074428_13076649_19_30
13074428_13077749_44_52
Title: How can I set each character to a different color/background color in a JTextPane? 
----------------------------------------

public static void main (String [] args) {
    javax.swing.SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            Test test = new Test ();
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    javax.swing.SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new TestDifferentStyles ().initUI ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13077611_13078524_28_43
13077611_37170145_1_16
Title: How to retrieve the native font name in Java? 
----------------------------------------

private static void describeFont2D (Font2D font) {
    if (font instanceof CompositeFont) {
        System.out.println ("Font '" + font.getFontName (Locale.getDefault ()) + "' is composed of:");
        CompositeFont cf = (CompositeFont) font;
        for (int i = 0;
        i < cf.getNumSlots (); i ++) {
            PhysicalFont pf = cf.getSlotFont (i);
            describeFont2D (pf);
        }
    } else System.out.println ("-> " + font);

}
----------------------------------------

private static void describeFont2D (Font2D font) throws Exception {
    if (font instanceof CompositeFont) {
        System.out.println ("Font '" + font.getFontName (Locale.getDefault ()) + "' is composed of:");
        CompositeFont cf = (CompositeFont) font;
        for (int i = 0;
        i < cf.getNumSlots (); i ++) {
            PhysicalFont pf = cf.getSlotFont (i);
            describeFont2D (pf);
        }
    } else if (font instanceof CFont) {
        Field field = CFont.class.getDeclaredField ("nativeFontName");
        field.setAccessible (true);
        String nativeFontName = (String) field.get (font);
        System.out.println ("-> " + nativeFontName);
    } else System.out.println ("-> " + font);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13097149_13097177_1_22
13097149_13097360_1_24
Title: constructing a 2D array and assigning 
----------------------------------------

public DoubleMatrix (double [] [] tempArray) {
    if (tempArray != null) {
        for (int i = 0;
        i < tempArray.length; i ++) {
            for (int j = 0;
            j < tempArray [i].length; j ++) {
                doubleMatrx [i] [j] = tempArray [i] [j];
            }
        }
    } else {
        makeDoubMatrix (1, 1);
    }
}
----------------------------------------

public DoubleMatrix (double [] [] tempArray) {
    if (tempArray != null) {
        boolean flag = true;
        for (int i = 0;
        i < tempArray.length - 1; i ++) {
            if (tempArray [i].length != tempArray [i + 1].length) {
                flag = false;
                break;
            }
        }
        if (flag) {
            doubleMatrix = tempArray;
        } else {
            makeDoubleMatrix (1, 1);
        }
    } else {
        makeDoubleMatrix (1, 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13100912_13106464_18_27
13100912_13106464_31_39
Title: How can I get size in bytes of an object sent using RMI? 
----------------------------------------

public void write (int b) throws IOException {
    if (! limitExceeded) {
        if (count ++ > limit) {
            limitExceeded = true;
        } else {
            super.write (b);
        }
    }
}
----------------------------------------

public void write (byte [] bytes, int from, int size) throws IOException {
    if (! limitExceeded) {
        if ((count += size) > limit) {
            limitExceeded = true;
        } else {
            super.write (bytes, from, size);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13102626_13102652_1_10
13102626_13102813_1_27
Title: Searching an array list for a specific record in java 
----------------------------------------

public String find (String searchName) {
    Iterator < TelEntry > iterator = Directory.entries.iterator ();
    while (iterator.hasNext ()) {
        TelEntry entry = iterator.next ();
        if (entry.name.equalsIgnoreCase (searchName)) {
            return entry.name + entry.telNo;
        }
    }
    return "sorry, there is noone by that name in the Directory. Check your spelling and try again";
}
----------------------------------------

public String find (String searchName) {
    Iterator < TelEntry > iterator = Directory.entries.iterator ();
    boolean hasFound = false;
    while (iterator.hasNext ()) {
        TelEntry entry = iterator.next ();
        if (entry.name.equalsIgnoreCase (searchName)) {
            return entry.name + entry.telNo;
            hasFound = true;
        }
    }
    if (hasFound == false) {
        System.out.println ("sorry, there is noone by that name in the Directory. Check your spelling and try again");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13113922_13374507_179_200
13113922_13374507_229_269
Title: Key Listener not working when being pressed 
----------------------------------------

void updateForNewFrame () {
    if (isFalling) {
        if (centerY > height) {
            isFalling = false;
        } else if (Math.abs (centerX - sub.centerX) <= 36 && Math.abs (centerY - sub.centerY) <= 21) {
            sub.isExploding = true;
            sub.explosionFrameNumber = 1;
            isFalling = false;
        } else {
            centerY += 10;
        }

    }
}
----------------------------------------

void updateForNewFrame () {
    if (isExploding) {
        explosionFrameNumber ++;
        if (explosionFrameNumber == 15) {
            centerX = (int) (width * Math.random ());
            centerY = height - 40;
            isExploding = false;
            isMovingLeft = (Math.random () < 0.5);
        }
    } else {
        if (Math.random () < 0.04) {
            isMovingLeft = ! isMovingLeft;
        }
        if (isMovingLeft) {
            centerX -= 5;
            if (centerX <= 0) {
                centerX = 0;
                isMovingLeft = false;
            }
        } else {
            centerX += 5;
            if (centerX > width) {
                centerX = width;
                isMovingLeft = true;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13115266_16372476_4_23
13115266_49928186_4_17
Title: How to insist that a users input is an int? 
----------------------------------------

public static void main (String [] args) {
    int a;
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter your number's choice:");
    int sem1 = in.nextInt ();
    if (sem1 == 1) System.out.println ("Hello World1");

    int b;
    System.out.println ("Enter your number's choice:");
    int sem2 = in.nextInt ();
    if (sem2 == 2) System.out.println ("Hello World2");

    int c;
    System.out.println ("Enter your number's choice:");
    int sem3 = in.nextInt ();
    if (sem3 == 3) System.out.println ("Hello World3");

}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    boolean inputAccepted = false;
    while (! inputAccepted) {
        try {
            System.out.print ("Please enter a number: ");
            Integer.valueOf (input.nextLine ());
            inputAccepted = true;
        } catch (NumberFormatException e) {
            System.out.println ("Not a valid number.");
        }
    }
    System.out.println ("Thank you!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_32569043_7_30
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_35816108_1_25
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_37202790_27_51
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_37895620_8_37
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_40416021_2_17
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_41818899_1_15
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_42205630_1_18
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_42611760_3_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    String input = "Hi how are you";
    char charCount = 'h';
    int count = 0;
    input = input.toLowerCase ();
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == charCount) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_43020511_3_26
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    String s = "hezzz";
    char [] st = s.toCharArray ();
    int count = 0;
    Set < Character > ch = new HashSet < > ();
    for (Character cg : st) {
        if (ch.add (cg) == false) {
            int occurrences = Collections.frequency (ch, cg);
            count += occurrences;
            if (count > 1) {
                System.out.println (cg + ": This character exist more than one time");
            } else {
                System.out.println (cg);
            }
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_44093828_1_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_45513947_3_29
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_46005190_9_42
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    String reverse1;
    String reverse2;
    int count = 0;
    while (n > 0) {
        String A = sc.next ();
        String B = sc.next ();
        reverse1 = new StringBuffer (A).reverse ().toString ();
        reverse2 = new StringBuffer (B).reverse ().toString ();
        if (! A.equals (reverse1)) {
            for (int i = 0;
            i < A.length (); i ++) {
                for (int j = 0;
                j < A.length (); j ++) {
                    if (A.charAt (j) == A.charAt (i)) {
                        count ++;
                    }
                }
                if (count % 2 != 0) {
                    A.replace (A.charAt (i), "");
                    count = 0;
                }
            }
            System.out.println (A);
        }
        n --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_48723167_5_19
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    String string = "check duplicate charcters in string";
    string = string.toLowerCase ();
    char [] charAr = string.toCharArray ();
    Arrays.sort (charAr);
    for (int i = 1;
    i < charAr.length;) {
        int count = recursiveMethod (charAr, i, 1);
        if (count > 1) {
            System.out.println ("'" + charAr [i] + "' comes " + count + " times");
            i = i + count;
        } else i ++;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_13119986_5_31
13119926_48888657_2_23
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    String ch;
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.print ("Enter the Statement:");
    ch = br.readLine ();
    int count = 0, len = 0;
    do {
        try {
            char name [] = ch.toCharArray ();
            len = name.length;
            count = 0;
            for (int j = 0;
            j < len; j ++) {
                if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;

            }
            if (count != 0) System.out.println (name [0] + " " + count + " Times");

            ch = ch.replace ("" + name [0], "");
        } catch (Exception ex) {
        }
    } while (len != 1);
}
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_35816108_1_25
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_37202790_27_51
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_37895620_8_37
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_40416021_2_17
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_41818899_1_15
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_42205630_1_18
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_42611760_3_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    String input = "Hi how are you";
    char charCount = 'h';
    int count = 0;
    input = input.toLowerCase ();
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == charCount) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_43020511_3_26
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    String s = "hezzz";
    char [] st = s.toCharArray ();
    int count = 0;
    Set < Character > ch = new HashSet < > ();
    for (Character cg : st) {
        if (ch.add (cg) == false) {
            int occurrences = Collections.frequency (ch, cg);
            count += occurrences;
            if (count > 1) {
                System.out.println (cg + ": This character exist more than one time");
            } else {
                System.out.println (cg);
            }
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_44093828_1_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_45513947_3_29
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_46005190_9_42
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    String reverse1;
    String reverse2;
    int count = 0;
    while (n > 0) {
        String A = sc.next ();
        String B = sc.next ();
        reverse1 = new StringBuffer (A).reverse ().toString ();
        reverse2 = new StringBuffer (B).reverse ().toString ();
        if (! A.equals (reverse1)) {
            for (int i = 0;
            i < A.length (); i ++) {
                for (int j = 0;
                j < A.length (); j ++) {
                    if (A.charAt (j) == A.charAt (i)) {
                        count ++;
                    }
                }
                if (count % 2 != 0) {
                    A.replace (A.charAt (i), "");
                    count = 0;
                }
            }
            System.out.println (A);
        }
        n --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_48723167_5_19
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    String string = "check duplicate charcters in string";
    string = string.toLowerCase ();
    char [] charAr = string.toCharArray ();
    Arrays.sort (charAr);
    for (int i = 1;
    i < charAr.length;) {
        int count = recursiveMethod (charAr, i, 1);
        if (count > 1) {
            System.out.println ("'" + charAr [i] + "' comes " + count + " times");
            i = i + count;
        } else i ++;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_32569043_7_30
13119926_48888657_2_23
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
    System.out.println ("Enter an String:");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    for (int i = 0;
    i < s1.length (); i ++) {
        if (! hm.containsKey (s1.charAt (i))) {
            hm.put (s1.charAt (i), (Integer) 1);
        } else {
            hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
        }
    }
    System.out.println ("The Charecters are:" + hm);
}
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_37202790_27_51
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_37895620_8_37
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_40416021_2_17
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_41818899_1_15
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_42205630_1_18
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_42611760_3_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "Hi how are you";
    char charCount = 'h';
    int count = 0;
    input = input.toLowerCase ();
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == charCount) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_43020511_3_26
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hezzz";
    char [] st = s.toCharArray ();
    int count = 0;
    Set < Character > ch = new HashSet < > ();
    for (Character cg : st) {
        if (ch.add (cg) == false) {
            int occurrences = Collections.frequency (ch, cg);
            count += occurrences;
            if (count > 1) {
                System.out.println (cg + ": This character exist more than one time");
            } else {
                System.out.println (cg);
            }
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_44093828_1_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_45513947_3_29
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_46005190_9_42
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    String reverse1;
    String reverse2;
    int count = 0;
    while (n > 0) {
        String A = sc.next ();
        String B = sc.next ();
        reverse1 = new StringBuffer (A).reverse ().toString ();
        reverse2 = new StringBuffer (B).reverse ().toString ();
        if (! A.equals (reverse1)) {
            for (int i = 0;
            i < A.length (); i ++) {
                for (int j = 0;
                j < A.length (); j ++) {
                    if (A.charAt (j) == A.charAt (i)) {
                        count ++;
                    }
                }
                if (count % 2 != 0) {
                    A.replace (A.charAt (i), "");
                    count = 0;
                }
            }
            System.out.println (A);
        }
        n --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_48723167_5_19
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    String string = "check duplicate charcters in string";
    string = string.toLowerCase ();
    char [] charAr = string.toCharArray ();
    Arrays.sort (charAr);
    for (int i = 1;
    i < charAr.length;) {
        int count = recursiveMethod (charAr, i, 1);
        if (count > 1) {
            System.out.println ("'" + charAr [i] + "' comes " + count + " times");
            i = i + count;
        } else i ++;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_35816108_1_25
13119926_48888657_2_23
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    char [] array = "aabsbdcbdgratsbdbcfdgs".toCharArray ();
    char [] [] countArr = new char [array.length] [2];
    int lastIndex = 0;
    for (char c : array) {
        int foundIndex = - 1;
        for (int i = 0;
        i < lastIndex; i ++) {
            if (countArr [i] [0] == c) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex >= 0) {
            int a = countArr [foundIndex] [1];
            countArr [foundIndex] [1] = (char) ++ a;
        } else {
            countArr [lastIndex] [0] = c;
            countArr [lastIndex] [1] = '1';
            lastIndex ++;
        }
    }
    for (int i = 0;
    i < lastIndex; i ++) {
        System.out.println (countArr [i] [0] + " " + countArr [i] [1]);
    }
}
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_37895620_8_37
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_40416021_2_17
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_41818899_1_15
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_42205630_1_18
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_42611760_3_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "Hi how are you";
    char charCount = 'h';
    int count = 0;
    input = input.toLowerCase ();
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == charCount) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_43020511_3_26
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hezzz";
    char [] st = s.toCharArray ();
    int count = 0;
    Set < Character > ch = new HashSet < > ();
    for (Character cg : st) {
        if (ch.add (cg) == false) {
            int occurrences = Collections.frequency (ch, cg);
            count += occurrences;
            if (count > 1) {
                System.out.println (cg + ": This character exist more than one time");
            } else {
                System.out.println (cg);
            }
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_44093828_1_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_45513947_3_29
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_46005190_9_42
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    String reverse1;
    String reverse2;
    int count = 0;
    while (n > 0) {
        String A = sc.next ();
        String B = sc.next ();
        reverse1 = new StringBuffer (A).reverse ().toString ();
        reverse2 = new StringBuffer (B).reverse ().toString ();
        if (! A.equals (reverse1)) {
            for (int i = 0;
            i < A.length (); i ++) {
                for (int j = 0;
                j < A.length (); j ++) {
                    if (A.charAt (j) == A.charAt (i)) {
                        count ++;
                    }
                }
                if (count % 2 != 0) {
                    A.replace (A.charAt (i), "");
                    count = 0;
                }
            }
            System.out.println (A);
        }
        n --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_48723167_5_19
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String string = "check duplicate charcters in string";
    string = string.toLowerCase ();
    char [] charAr = string.toCharArray ();
    Arrays.sort (charAr);
    for (int i = 1;
    i < charAr.length;) {
        int count = recursiveMethod (charAr, i, 1);
        if (count > 1) {
            System.out.println ("'" + charAr [i] + "' comes " + count + " times");
            i = i + count;
        } else i ++;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37202790_27_51
13119926_48888657_2_23
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    int count, line;
    Scanner sn = new Scanner (System.in);
    count = sn.nextInt ();
    sn.nextLine ();
    for (int i = 0;
    i < count; i ++) {
        line = sn.nextInt ();
        sn.nextLine ();
        ArrayList < String > Arr = new ArrayList < String > ();
        String first = sn.nextLine ();
        Arr.add (first);
        String f;
        for (int j = 1;
        j < line; j ++) {
            f = sn.nextLine ();
            for (int k = 0;
            k < Arr.size (); k ++) {
                if (f.equalsIgnoreCase (Arr.get (k))) break;
                else if (k == (Arr.size () - 1)) {
                    Arr.add (f);
                }

            }
        }
        System.out.println (Arr.size ());
    }
}
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_40416021_2_17
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_41818899_1_15
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_42205630_1_18
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_42611760_3_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "Hi how are you";
    char charCount = 'h';
    int count = 0;
    input = input.toLowerCase ();
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == charCount) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_43020511_3_26
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hezzz";
    char [] st = s.toCharArray ();
    int count = 0;
    Set < Character > ch = new HashSet < > ();
    for (Character cg : st) {
        if (ch.add (cg) == false) {
            int occurrences = Collections.frequency (ch, cg);
            count += occurrences;
            if (count > 1) {
                System.out.println (cg + ": This character exist more than one time");
            } else {
                System.out.println (cg);
            }
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_44093828_1_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_45513947_3_29
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_46005190_9_42
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    String reverse1;
    String reverse2;
    int count = 0;
    while (n > 0) {
        String A = sc.next ();
        String B = sc.next ();
        reverse1 = new StringBuffer (A).reverse ().toString ();
        reverse2 = new StringBuffer (B).reverse ().toString ();
        if (! A.equals (reverse1)) {
            for (int i = 0;
            i < A.length (); i ++) {
                for (int j = 0;
                j < A.length (); j ++) {
                    if (A.charAt (j) == A.charAt (i)) {
                        count ++;
                    }
                }
                if (count % 2 != 0) {
                    A.replace (A.charAt (i), "");
                    count = 0;
                }
            }
            System.out.println (A);
        }
        n --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_48723167_5_19
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String string = "check duplicate charcters in string";
    string = string.toLowerCase ();
    char [] charAr = string.toCharArray ();
    Arrays.sort (charAr);
    for (int i = 1;
    i < charAr.length;) {
        int count = recursiveMethod (charAr, i, 1);
        if (count > 1) {
            System.out.println ("'" + charAr [i] + "' comes " + count + " times");
            i = i + count;
        } else i ++;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_37895620_8_37
13119926_48888657_2_23
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    String input = sc.next ();
    char process [] = input.toCharArray ();
    boolean status = false;
    int index = 0;
    for (int i = 0;
    i < process.length; i ++) {
        for (int j = 0;
        j < process.length; j ++) {
            if (i == j) {
                continue;
            } else {
                if (process [i] == process [j]) {
                    status = true;
                    index = i;
                    break;
                } else {
                    status = false;
                }
            }
        }
        if (status) {
            System.out.print ("" + process [index]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_41818899_1_15
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_42205630_1_18
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_42611760_3_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "Hi how are you";
    char charCount = 'h';
    int count = 0;
    input = input.toLowerCase ();
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == charCount) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_43020511_3_26
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hezzz";
    char [] st = s.toCharArray ();
    int count = 0;
    Set < Character > ch = new HashSet < > ();
    for (Character cg : st) {
        if (ch.add (cg) == false) {
            int occurrences = Collections.frequency (ch, cg);
            count += occurrences;
            if (count > 1) {
                System.out.println (cg + ": This character exist more than one time");
            } else {
                System.out.println (cg);
            }
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_44093828_1_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_45513947_3_29
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_46005190_9_42
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    String reverse1;
    String reverse2;
    int count = 0;
    while (n > 0) {
        String A = sc.next ();
        String B = sc.next ();
        reverse1 = new StringBuffer (A).reverse ().toString ();
        reverse2 = new StringBuffer (B).reverse ().toString ();
        if (! A.equals (reverse1)) {
            for (int i = 0;
            i < A.length (); i ++) {
                for (int j = 0;
                j < A.length (); j ++) {
                    if (A.charAt (j) == A.charAt (i)) {
                        count ++;
                    }
                }
                if (count % 2 != 0) {
                    A.replace (A.charAt (i), "");
                    count = 0;
                }
            }
            System.out.println (A);
        }
        n --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_48723167_5_19
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String string = "check duplicate charcters in string";
    string = string.toLowerCase ();
    char [] charAr = string.toCharArray ();
    Arrays.sort (charAr);
    for (int i = 1;
    i < charAr.length;) {
        int count = recursiveMethod (charAr, i, 1);
        if (count > 1) {
            System.out.println ("'" + charAr [i] + "' comes " + count + " times");
            i = i + count;
        } else i ++;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_40416021_2_17
13119926_48888657_2_23
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Plz Enter Your String: ");
    Scanner sc = new Scanner (System.in);
    String s1 = sc.nextLine ();
    int count = 0;
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s1.length (); j ++) {
            if (s1.charAt (i) == s1.charAt (j)) {
                count ++;
            }
        }
        System.out.println (s1.charAt (i) + " --> " + count);
        String d = String.valueOf (s1.charAt (i)).trim ();
        s1 = s1.replaceAll (d, "");
        count = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_41818899_1_15
13119926_42205630_1_18
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_41818899_1_15
13119926_42611760_3_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------

public static void main (String [] args) {
    String input = "Hi how are you";
    char charCount = 'h';
    int count = 0;
    input = input.toLowerCase ();
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == charCount) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_41818899_1_15
13119926_43020511_3_26
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "hezzz";
    char [] st = s.toCharArray ();
    int count = 0;
    Set < Character > ch = new HashSet < > ();
    for (Character cg : st) {
        if (ch.add (cg) == false) {
            int occurrences = Collections.frequency (ch, cg);
            count += occurrences;
            if (count > 1) {
                System.out.println (cg + ": This character exist more than one time");
            } else {
                System.out.println (cg);
            }
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_41818899_1_15
13119926_44093828_1_20
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13119926_41818899_1_15
13119926_45513947_3_29
Title: Find duplicate characters in a String and count the number of occurances using Java 
----------------------------------------

public static void main (String args []) {
    char Char;
    int count;
    String a = "Hi my name is Rahul";
    a = a.toLowerCase ();
    for (Char = 'a'; Char <= 'z'; Char ++) {
        count = 0;
        for (int i = 0;
        i < a.length (); i ++) {
            if (a.charAt (i) == Char) {
                count ++;
            }
        }
        System.out.println ("Number of occurences of " + Char + " is " + count);
    }
}
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49656102_49656497_2_14
49656102_49656548_1_14
Title: Change 343 into 42 in a short chunk of Java code 
----------------------------------------

public static void main (String [] args) {
    int iters = 0;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 7; j ++) {
            if (j < 6) for (int k = 0;
            k < 7; k ++) {
                if (k == 0) iters ++;

            }

        }
    }
    System.out.println (iters);
}
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    int iters = 0;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 7; j ++) {
            if (j == 6) break;

            for (int k = 0;
            k < 7; k ++) {
                iters ++;
            }
        }
        break;
    }
    System.out.println (iters);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49656102_49656497_2_14
49656102_49656919_5_28
Title: Change 343 into 42 in a short chunk of Java code 
----------------------------------------

public static void main (String [] args) {
    int iters = 0;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 7; j ++) {
            if (j < 6) for (int k = 0;
            k < 7; k ++) {
                if (k == 0) iters ++;

            }

        }
    }
    System.out.println (iters);
}
----------------------------------------

public static void main (String [] args) {
    System.setOut (new PrintStream (System.out) {
        @Override
        public void println (int x) {
            System.err.println (42);
        }}

    );
    int iters = 0;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 7; j ++) {
            for (int k = 0;
            k < 7; k ++) {
                iters ++;
            }
        }
    }
    System.out.println (iters);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49656102_49656548_1_14
49656102_49656919_5_28
Title: Change 343 into 42 in a short chunk of Java code 
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    int iters = 0;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 7; j ++) {
            if (j == 6) break;

            for (int k = 0;
            k < 7; k ++) {
                iters ++;
            }
        }
        break;
    }
    System.out.println (iters);
}
----------------------------------------

public static void main (String [] args) {
    System.setOut (new PrintStream (System.out) {
        @Override
        public void println (int x) {
            System.err.println (42);
        }}

    );
    int iters = 0;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 7; j ++) {
            for (int k = 0;
            k < 7; k ++) {
                iters ++;
            }
        }
    }
    System.out.println (iters);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4967575_4967961_22_40
4967575_4967961_3_17
Title: How to get parameter types using reflection? 
----------------------------------------

private static boolean isCompatible (final Object object, final Class < ? > paramType) throws Exception {
    if (object == null) {
        return ! paramType.isPrimitive ();
    }
    if (paramType.isInstance (object)) {
        return true;
    }
    if (paramType.isPrimitive ()) {
        return isWrapperTypeOf (object.getClass (), paramType);
    }
    return false;
}
----------------------------------------

public static boolean isCompatible (final Method method, final Object [] params) throws Exception {
    final Class < ? > [] parameterTypes = method.getParameterTypes ();
    if (params.length != parameterTypes.length) {
        return false;
    }
    for (int i = 0;
    i < params.length; i ++) {
        final Object object = params [i];
        final Class < ? > paramType = parameterTypes [i];
        if (! isCompatible (object, paramType)) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4967852_4967942_1_10
4967852_4968143_1_16
Title: "How to insert values into database using queries using entity manager persistence using a java class?" 
----------------------------------------

public User registerUser (String usr, String pwd) {
    u = em.find (User.class, usr);
    if (u != null) {
        return u;
    }
    u = new User (usr, pwd);
    em.persist (u);
    return u;
}
----------------------------------------

public User registerUser (String usr, String pwd) {
    u = em.find (User.class, usr);
    if (u != null) {
        return null;
    }
    em.getTransaction ().begin ();
    em.persist (u);
    em.getTransaction ().commit ();
    em.close ();
    return u;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49686306_49686490_1_7
49686306_49686844_6_13
Title: Generalising methods of same logic in Java 
----------------------------------------

public List < String > getRapperName () {
    return makeList (rapperList, new Function < Rapper, String > () {
        @Override
        public String apply (Rapper r) {
            return r.getRapperName ();
        }}

    );
}
----------------------------------------

public List < String > getRapperName () {
    return asStringList (rapperList, new StringGetter < Rapper > () {
        @Override
        public String get (Rapper it) {
            return it.getRapperName ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49686306_49686490_9_15
49686306_49686844_15_22
Title: Generalising methods of same logic in Java 
----------------------------------------

public List < String > getMusicianName () {
    return makeList (musicianList, new Function < Musician, String > () {
        @Override
        public String apply (Musician m) {
            return m.getMusicianName ();
        }}

    );
}
----------------------------------------

public List < String > getMusicianName () {
    return asStringList (musicianList, new StringGetter < Musician > () {
        @Override
        public String get (Musician it) {
            return it.getMusicianName ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49688386_49688419_1_48
49688386_49688843_1_48
Title: RecyclerCardview did not show anything 
----------------------------------------

private void load_weather_info (final double latitude, final double longitude) {
    AsyncTask < Integer, Void, Void > task = new AsyncTask < Integer, Void, Void > () {
        @Override
        protected Void doInBackground (Integer...integers) {
            String apiKey = "--------------------------------";
            String forecastUrl = "https://api.darksky.net/forecast/" + apiKey + "/" + latitude + "," + longitude;
            OkHttpClient client = new OkHttpClient ();
            Request request = new Request.Builder ().url (forecastUrl).build ();
            try {
                Response response = client.newCall (request).execute ();
                JSONArray array = new JSONArray (response.body ().string ());
                for (int i = 0;
                i < array.length (); i ++) {
                    JSONObject jsonObject = array.getJSONObject (i);
                    JSONObject daily = jsonObject.getJSONObject ("daily");
                    JSONObject mDaily = daily.getJSONObject ("data");
                    Daily daily1 = new Daily (mDaily.getString ("summary"), mDaily.getString ("icon"), mDaily.getDouble ("precipProbability"), mDaily.getLong ("time"));
                    data_list.add (daily1);
                }
                adapter.notifyDataSetChanged ();
            } catch (IOException e) {
                e.printStackTrace ();
            } catch (JSONException e) {
                e.printStackTrace ();
            }
            return null;
        }@Override
        protected void onPostExecute (Void aVoid) {
            super.onPostExecute (aVoid);
        }}

    ;
    task.execute ((int) latitude, (int) longitude);
}
----------------------------------------

private void load_weather_info (final double latitude, final double longitude) {
    AsyncTask < Integer, Void, Void > task = new AsyncTask < Integer, Void, Void > () {
        @Override
        protected Void doInBackground (Integer...integers) {
            String apiKey = "--------------------------------";
            String forecastUrl = "https://api.darksky.net/forecast/" + apiKey + "/" + latitude + "," + longitude;
            OkHttpClient client = new OkHttpClient ();
            Request request = new Request.Builder ().url (forecastUrl).build ();
            try {
                Response response = client.newCall (request).execute ();
                JSONArray array = new JSONArray (response.body ().string ());
                for (int i = 0;
                i < array.length (); i ++) {
                    JSONObject jsonObject = array.getJSONObject (i);
                    JSONObject daily = jsonObject.getJSONObject ("daily");
                    JSONObject mDaily = daily.getJSONObject ("data");
                    Daily daily1 = new Daily (mDaily.getString ("summary"), mDaily.getString ("icon"), mDaily.getDouble ("precipProbability"), mDaily.getLong ("time"));
                    data_list.add (daily1);
                }
                recyclerView.post (new Runnable () {
                    @Override
                    public void run () {
                        adapter.notifyDataSetChanged ();
                    }}

                );
            } catch (IOException e) {
                e.printStackTrace ();
            } catch (JSONException e) {
                e.printStackTrace ();
            }
            return null;
        }@Override
        protected void onPostExecute (Void aVoid) {
            super.onPostExecute (aVoid);
        }}

    ;
    task.execute ((int) latitude, (int) longitude);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49688386_49688419_7_38
49688386_49688843_4_39
Title: RecyclerCardview did not show anything 
----------------------------------------

protected Void doInBackground (Integer...integers) {
    String apiKey = "--------------------------------";
    String forecastUrl = "https://api.darksky.net/forecast/" + apiKey + "/" + latitude + "," + longitude;
    OkHttpClient client = new OkHttpClient ();
    Request request = new Request.Builder ().url (forecastUrl).build ();
    try {
        Response response = client.newCall (request).execute ();
        JSONArray array = new JSONArray (response.body ().string ());
        for (int i = 0;
        i < array.length (); i ++) {
            JSONObject jsonObject = array.getJSONObject (i);
            JSONObject daily = jsonObject.getJSONObject ("daily");
            JSONObject mDaily = daily.getJSONObject ("data");
            Daily daily1 = new Daily (mDaily.getString ("summary"), mDaily.getString ("icon"), mDaily.getDouble ("precipProbability"), mDaily.getLong ("time"));
            data_list.add (daily1);
        }
        adapter.notifyDataSetChanged ();
    } catch (IOException e) {
        e.printStackTrace ();
    } catch (JSONException e) {
        e.printStackTrace ();
    }
    return null;
}
----------------------------------------

protected Void doInBackground (Integer...integers) {
    String apiKey = "--------------------------------";
    String forecastUrl = "https://api.darksky.net/forecast/" + apiKey + "/" + latitude + "," + longitude;
    OkHttpClient client = new OkHttpClient ();
    Request request = new Request.Builder ().url (forecastUrl).build ();
    try {
        Response response = client.newCall (request).execute ();
        JSONArray array = new JSONArray (response.body ().string ());
        for (int i = 0;
        i < array.length (); i ++) {
            JSONObject jsonObject = array.getJSONObject (i);
            JSONObject daily = jsonObject.getJSONObject ("daily");
            JSONObject mDaily = daily.getJSONObject ("data");
            Daily daily1 = new Daily (mDaily.getString ("summary"), mDaily.getString ("icon"), mDaily.getDouble ("precipProbability"), mDaily.getLong ("time"));
            data_list.add (daily1);
        }
        recyclerView.post (new Runnable () {
            @Override
            public void run () {
                adapter.notifyDataSetChanged ();
            }}

        );
    } catch (IOException e) {
        e.printStackTrace ();
    } catch (JSONException e) {
        e.printStackTrace ();
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4971136_4971324_4_16
4971136_4973354_5_14
Title: Why is java.lang.Void not Serializable? 
----------------------------------------

public static void main (String [] args) throws Exception {
    final VoidSerializerDemo instance = new VoidSerializerDemo ();
    final ByteArrayOutputStream baos = new ByteArrayOutputStream ();
    final ObjectOutputStream oos = new ObjectOutputStream (baos);
    oos.writeObject (instance);
    System.out.println ("OK: null works");
    final Constructor < Void > constructor = Void.class.getDeclaredConstructor ();
    constructor.setAccessible (true);
    instance.v = constructor.newInstance ();
    oos.reset ();
    System.out.println ("Going to throw");
    oos.writeObject (instance);
}
----------------------------------------

public static void main (String [] args) throws Throwable {
    VoidOut v = new VoidOut ();
    System.out.println (v);
    ByteArrayOutputStream b = new ByteArrayOutputStream (256);
    ObjectOutputStream o = new ObjectOutputStream (b);
    o.writeObject (v);
    o.close ();
    ObjectInputStream in = new ObjectInputStream (new ByteArrayInputStream (b.toByteArray ()));
    System.out.println (in.readObject ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
497176_2607864_1_11
497176_497208_1_12
Title: Can classes in java that implement runnable have methods other than run()? 
----------------------------------------

public static void main (String args []) {
    try {
        myMethod (new MyInterface () {
            public void doThis () {
            }}

        );
    } catch (Throwable t) {
    }
}
----------------------------------------

public static void main (String args []) {
    try {
        myClass foo = new myClass (stuff);
        myClass test = new Thread (foo);
        test.start ();
        test.join ();
        foo.print ();
    } catch (Throwable t) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49724948_49725189_46_76
49724948_49725189_93_117
Title: AtomicBoolean not getting updated 
----------------------------------------

public void run () {
    try {
        Thread.sleep (50);
        Integer value;
        while (! isProducerClosed) {
            try {
                synchronized (queue) {
                    if (! isProducerClosed) {
                        value = queue.take ();
                        if ((value.intValue () == - 1)) {
                            isProducerClosed = true;
                            System.out.println (Thread.currentThread ().getName () + " Encountered -1. Signal to shutdown consumers.");
                            break;
                        }
                    } else {
                        System.out.println (Thread.currentThread ().getName () + " Last item was taken by some other consumer. Exiting!");
                        break;
                    }
                }
                consumeValue (value);
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    Random random = new Random ();
    while (true) {
        if (maxNumberOfItemsToProduce == 0) {
            try {
                queue.put (- 1);
                System.out.println ("Terminating Producer after producing max number of products.");
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            break;
        }
        try {
            queue.put (random.nextInt (300));
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
        maxNumberOfItemsToProduce --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49731681_49732052_1_12
49731681_49736445_6_36
Title: task is to find the first element of an array that is not consecutive 
----------------------------------------

public Integer find (final int [] array) {
    Integer val = null;
    for (int i = 0;
    i < array.length - 1; i ++) {
        int current = array [i];
        int next = array [i + 1];
        if (current + 1 != next) {
            val = next;
            break;
        }
    }
    return val;
}
----------------------------------------

static Integer find (final int [] array) {
    List < Integer > list = new ArrayList < Integer > ();
    Integer [] arrtwovalues = new Integer [array.length];
    Integer solve = null;
    int [] newtemp = new int [array.length];
    for (int i = 0;
    i < array.length - 1; i ++) {
        newtemp [i] = array [i + 1];
    }
    for (int i = 0;
    i < array.length; i ++) {
        if (newtemp [i] - array [i] == 2) {
            arrtwovalues [i] = newtemp [i];
        }
    }
    for (int i = 0;
    i < arrtwovalues.length; i ++) {
        if (arrtwovalues [i] != null) {
            list.add (arrtwovalues [i]);
        }
    }
    for (int i = 0;
    i < list.size (); i ++) {
        if (list.size () > 0) {
            solve = list.get (0);
        } else solve = null;

    }
    return solve;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49737469_49737789_1_36
49737469_49738058_1_18
Title: How can I compare one string elements to array of strings elements? 
----------------------------------------

public void StringCheck (String one, String [] two) {
    String result = "";
    String [] subStrings1 = one.split (", ");
    Set < String > set1 = new HashSet < > ();
    for (String s : subStrings1) {
        set1.add (s);
    }
    for (int i = 0;
    i < two.length; ++ i) {
        int total = 0;
        String [] subStrings2 = two [i].split (", ");
        for (String s2 : subStrings2) {
            if (set1.contains (s2)) {
                ++ total;
            }
        }
        result += "Result " + (i + 1) + ":" + total + " ";
    }
    textView3.setText (result);
}
----------------------------------------

public static void StringCheck (String one, String [] two) {
    String [] numbersOne = one.split (", ");
    String result = "";
    for (int i = 0;
    i < two.length; i ++) {
        int counter = 0;
        String [] numbersTwo = two [i].split (", ");
        for (int j = 0;
        j < numbersTwo.length; j ++) {
            for (int k = 0;
            k < numbersOne.length; k ++) {
                if (numbersTwo [j].equals (numbersOne [k])) {
                    counter ++;
                    break;
                }
            }
        }
        result += "Result " + (i + 1) + ":" + counter + " ";
    }
    textView3.setText (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49743409_49743494_18_33
49743409_49743494_1_38
Title: "Java awt swing start/stop button with timer" 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    long minuteTime = (System.nanoTime () - nanoTime) / (60_000_000_000L);
    view.setTimerLabel (minuteTime + " minutes");
    if (minuteTime > 50) if (darkBg) {
        view.setBackground (Color.PINK);
        darkBg = false;
    } else {
        view.setBackground (Color.PINK.darker ());
        darkBg = true;
    }

}
----------------------------------------

@Override
public void actionPerformed (ActionEvent e) {
    if (timing) {
        timing = false;
        timer.stop ();
        view.setStartButtonText ("start stting");
        view.setTimerLabel ("stopped");
        view.setBackground (Color.CYAN.darker ());
    } else {
        nanoTime = System.nanoTime ();
        view.setStartButtonText ("stop stting");
        timing = true;
        timer = new javax.swing.Timer (1000, new ActionListener () {
            @Override
            public void actionPerformed (ActionEvent e) {
                long minuteTime = (System.nanoTime () - nanoTime) / (60_000_000_000L);
                view.setTimerLabel (minuteTime + " minutes");
                if (minuteTime > 50) if (darkBg) {
                    view.setBackground (Color.PINK);
                    darkBg = false;
                } else {
                    view.setBackground (Color.PINK.darker ());
                    darkBg = true;
                }

            }}

        );
        timer.setRepeats (true);
        timer.start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49745827_49745923_5_19
49745827_49746030_5_19
Title: java arrayoutofbound exception after compiling 
----------------------------------------

public static void main (String args []) {
    Scanner scan = new Scanner (System.in);
    String g = scan.next ();
    String s [] = g.split ("");
    int i, x = 0;
    for (i = s.length - 1; i >= 0; i --) {
        x += Integer.parseInt (s [i]) * Math.pow (2, i);
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner scan = new Scanner (System.in);
    String g = scan.next ();
    String s [] = g.split ("");
    int i, x = 0;
    for (i = s.length - 1; i >= 0; i --) {
        x += Integer.parseInt (s [i]) * Math.pow (2, i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49752350_49753396_1_24
49752350_49762756_1_22
Title: SonarQube Refactor this method to reduce its Cognitive Complexity 
----------------------------------------

public static boolean isWrapperValid (WrapperClass wrapper, boolean isTechnicalToken) {
    if (wrapper != null && wrapper.length () > 7 && wrapper.substring (0, 6).equalsIgnoreCase ("XYZ")) {
        wrapper = wrapper.substring (7, wrapper.lastIndexOf ('.') + 1);
    }
    boolean isValidWrapper = wrapper != null && wrapper.equalsIgnoreCase ("TFR");
    try {
        String key = wrapper.getKey ();
        if (key != null && key.getExpiresAt () == null && DESIRED_ALGO.equals (key.getAlgorithm ()) && DESIRED_TYPE.equals (key.getType ()) && key.getValue1 () != null && ! key.getValue2 ().isEmpty () && key.getValue3 () != null && key.getValue4 () != null && key.getValue5 () != null) {
            isValidWrapper = true;
        }
    } catch (Exception exception) {
    }
    return isValidWrapper;
}
----------------------------------------

public static boolean isWrapperValid (WrapperClass wrapper, boolean isTechnicalToken) {
    final WrapperClass unpackedWrapper = unpackWrapper (wrapper);
    boolean wrapperValid = isUnpackedWrapperValid (unpackedWrapper);
    Key key = null;
    try {
        key = unpackedWrapper.getKey ();
    } catch (final Exception exception) {
        return wrapperValid;
    }
    if (key != null) {
        if (doesKeyMeetsBasicConditions (key)) {
            return wrapperValid;
        }
        if (doesKeyMeetsValueConditions (key)) {
            return true;
        }
    }
    return wrapperValid;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49761432_49761644_16_36
49761432_49761708_16_36
Title: How to Write Image To Disk From Clipboard in Java? 
----------------------------------------

static int copyTo (String filename) throws Exception {
    Transferable content = Toolkit.getDefaultToolkit ().getSystemClipboard ().getContents (null);
    if (content == null) {
        System.err.println ("error: nothing found in clipboard");
        return 1;
    }
    if (! content.isDataFlavorSupported (DataFlavor.imageFlavor)) {
        System.err.println ("error: no image found in clipbaord");
        return 2;
    }
    BufferedImage img = (BufferedImage) content.getTransferData (DataFlavor.imageFlavor);
    String ext = ext (filename);
    if (ext == null) {
        ext = "png";
        filename += "." + ext;
    }
    File outfile = new File (filename);
    ImageIO.write (img, ext, outfile);
    System.err.println ("image copied to: " + outfile.getAbsolutePath ());
    return 0;
}
----------------------------------------

static int copyTo (String filename) throws Exception {
    Transferable content = Toolkit.getDefaultToolkit ().getSystemClipboard ().getContents (null);
    if (content == null) {
        System.err.println ("error: nothing found in clipboard");
        return 1;
    }
    if (! content.isDataFlavorSupported (DataFlavor.imageFlavor)) {
        System.err.println ("error: no image found in clipbaord");
        return 2;
    }
    BufferedImage img = (BufferedImage) content.getTransferData (DataFlavor.imageFlavor);
    String ext = ext (filename);
    if (ext == null) {
        ext = "png";
        filename += "." + ext;
    }
    File outfile = new File (filename);
    ImageIO.write (img, ext, outfile);
    System.err.println ("image copied to: " + outfile.getAbsolutePath ());
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49769890_49770014_1_10
49769890_49770098_5_15
Title: Read a string value from user and display its individuals charecters 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter your name:");
    String name = sc.nextLine ();
    System.out.println ("Before Splited: " + name);
    for (int i = 0;
    i < name.length (); i ++) {
        System.out.print (name.charAt (i) + ",");
    }
    sc.close ();
}
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter your name:");
    String name = sc.nextLine ();
    System.out.println ("Before Splited: " + name);
    String [] sname = str.split ("");
    String joined1 = String.join (",", sname);
    joined1 = joined1.replace (" ,", " ").replace (", ", " ");
    System.out.println (joined1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49781421_49781479_1_13
49781421_49781608_1_14
Title: Can anyone think of a way to print this pattern without storing data outside of the method? 
----------------------------------------

public static void printPattern (int a) {
    if (a != 0) {
        for (int i = 0;
        i < a; i ++) {
            System.out.print ("*");
        }
        System.out.println ();
        printPattern (a - 1);
        for (int i = 0;
        i < a; i ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void printPattern (int a) {
    if (a > 0) {
        for (int i = 0;
        i < a; i ++) {
            System.out.print ("*");
        }
        System.out.println ();
        printPattern (a - 1);
        for (int i = 0;
        i < a; i ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4978187_14137933_30_72
4978187_14137933_32_43
Title: Apply timeout control around Java operation 
----------------------------------------

public Object run () throws TimeoutException, Exception {
    Thread operationThread = new Thread (getName ()) {
        public void run () {
            try {
                result = doOperation ();
            } catch (Exception ex) {
                throwable = ex;
            } catch (Throwable uncaught) {
                throwable = uncaught;
            }
            synchronized (TimeoutOperation.this) {
                TimeoutOperation.this.notifyAll ();
            }
        } public synchronized void start () {
            super.start ();
        }}

    ;
    operationThread.start ();
    startTime = System.currentTimeMillis ();
    synchronized (this) {
        while (operationThread.isAlive () && (getTimeOut () == - 1 || System.currentTimeMillis () < startTime + getTimeOut ())) {
            try {
                wait (1000L);
            } catch (InterruptedException ex) {
            }
        }
    }
    if (throwable != null) {
        if (throwable instanceof Exception) {
            throw (Exception) throwable;
        } else if (throwable instanceof Error) {
            throw (Error) throwable;
        }

    }
    if (result != null) {
        return result;
    }
    if (System.currentTimeMillis () > startTime + getTimeOut ()) {
        throw new TimeoutException ("Operation '" + getName () + "' timed out after " + getTimeOut () + " ms");
    } else {
        throw new Exception ("No result, no exception, and no timeout!");
    }
}
----------------------------------------

public void run () {
    try {
        result = doOperation ();
    } catch (Exception ex) {
        throwable = ex;
    } catch (Throwable uncaught) {
        throwable = uncaught;
    }
    synchronized (TimeoutOperation.this) {
        TimeoutOperation.this.notifyAll ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49787568_49787702_1_12
49787568_49787773_1_14
Title: How to find the second highest number in an array 
----------------------------------------

public static int secondHighest (int [] array1) {
    int highest = highestNumber (array1);
    int max = - 9999999;
    for (int i = 0;
    i < array1.Length; i ++) {
        if (array [i] > max && array [i] < highest) max = array [i];

    }
    return max;
}
----------------------------------------

public static int secondHighest (int [] array1) {
    int highest = highestNumber (array1);
    int max = array [0];
    for (int i = 1;
    i < array1.Length; i ++) {
        if (array [i] > max && array [i] < highest) {
            max = array [i];
        }
    }
    return max;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49803077_49803752_23_99
49803077_49804245_1_38
Title: How do I pass the values of checkboxes to another method using JavaFX? 
----------------------------------------

public void start (Stage stage) {
    stage.setTitle ("Ice Cream - Swejkoski");
    Scene scene = new Scene (new Group (), 750, 125);
    scene.setFill (Color.GHOSTWHITE);
    ToggleGroup group = new ToggleGroup ();
    final RadioButton rbChocolate = new RadioButton ("Chocolate");
    rbChocolate.setToggleGroup (group);
    rbChocolate.setSelected (true);
    final RadioButton rbVanilla = new RadioButton ("Vanilla");
    rbVanilla.setToggleGroup (group);
    final RadioButton rbStrawberry = new RadioButton ("Strawberry");
    rbStrawberry.setToggleGroup (group);
    TitledPane gridTitlePaneFlavors = new TitledPane ();
    GridPane gridFlavors = new GridPane ();
    gridFlavors.setVgap (10);
    gridFlavors.setHgap (4);
    gridFlavors.setPadding (new Insets (1, 1, 1, 1));
    gridFlavors.add (rbChocolate, 0, 0);
    gridFlavors.add (rbVanilla, 1, 0);
    gridFlavors.add (rbStrawberry, 2, 0);
    gridTitlePaneFlavors.setText ("Flavors");
    gridTitlePaneFlavors.setContent (gridFlavors);
    final CheckBox checkboxNuts = new CheckBox ("Nuts");
    checkboxNuts.selectedProperty ().addListener ((obs, oldValue, newValue) -> {
        nuts = newValue;
    });
    final CheckBox checkboxCherries = new CheckBox ("Cherries");
    checkboxCherries.selectedProperty ().addListener ((obs, oldValue, newValue) -> {
        cherries = newValue;
    });
    TitledPane gridTitlePaneToppings = new TitledPane ();
    GridPane gridToppings = new GridPane ();
    gridToppings.setVgap (10);
    gridToppings.setHgap (4);
    gridToppings.setPadding (new Insets (1, 1, 1, 1));
    gridToppings.add (checkboxNuts, 0, 0);
    gridToppings.add (checkboxCherries, 1, 0);
    gridTitlePaneToppings.setText ("Toppings");
    gridTitlePaneToppings.setContent (gridToppings);
    final Button buttonCalculate = new Button ("Calculate Cost");
    buttonCalculate.setOnAction ((event) -> {
        showCalculations ();
        System.out.println ("Button Action");
    });
    final Button buttonSave = new Button ("Save");
    final Button buttonRestore = new Button ("Restore");
    TitledPane gridTitlePaneOrder = new TitledPane ();
    GridPane gridOrder = new GridPane ();
    gridOrder.setVgap (10);
    gridOrder.setHgap (4);
    gridOrder.setPadding (new Insets (1, 1, 1, 1));
    gridOrder.add (buttonCalculate, 0, 0);
    gridOrder.add (buttonSave, 1, 0);
    gridOrder.add (buttonRestore, 2, 0);
    gridTitlePaneOrder.setText ("Order");
    gridTitlePaneOrder.setContent (gridOrder);
    HBox hbox = new HBox (10);
    hbox.setPadding (new Insets (20, 0, 0, 20));
    hbox.getChildren ().add (gridTitlePaneFlavors);
    hbox.getChildren ().add (gridTitlePaneToppings);
    hbox.getChildren ().add (gridTitlePaneOrder);
    Group root = (Group) scene.getRoot ();
    root.getChildren ().add (hbox);
    stage.setScene (scene);
    stage.show ();
}
----------------------------------------

@Override
public void start (Stage primaryStage) {
    Topping [] toppings = new Topping [] {new Topping ("Nuts", 0.5), new Topping ("Cherries", 0.5), new Topping ("Jelly", 0.75)};
    Map < Topping, CheckBox > toppingsBoxes = new HashMap < > ();
    VBox toppingsPane = new VBox ();
    for (Topping topping : toppings) {
        CheckBox cb = new CheckBox (topping.getName ());
        toppingsBoxes.put (topping, cb);
        toppingsPane.getChildren ().add (cb);
    }
    Button btn = new Button ("Calculate Price");
    btn.setOnAction ((ActionEvent event) -> {
        double price = 0;
        for (Map.Entry < Topping, CheckBox > entry : toppingsBoxes.entrySet ()) {
            if (entry.getValue ().isSelected ()) {
                price += entry.getKey ().getPrice ();
            }
        }
        Alert alert = new Alert (Alert.AlertType.INFORMATION);
        alert.setContentText (String.format ("Price: %.2f", price));
        alert.initOwner (primaryStage);
        alert.showAndWait ();
    });
    Scene scene = new Scene (new HBox (toppingsPane, btn));
    primaryStage.setScene (scene);
    primaryStage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49809820_49809951_3_20
49809820_49810063_2_12
Title: how to check if the 2nd character of input is a number or not in java? 
----------------------------------------

public static void main (String [] args) {
    boolean isNumber;
    String a = "h9jsjsis";
    String c = a.charAt (1) + "";
    try {
        Integer.parseInt (c);
        isNumber = true;
    } catch (NumberFormatException e) {
        isNumber = false;
    }
    System.out.println (isNumber);
}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter the input:");
    String input = sc.nextLine ();
    char ch = input.charAt (1);
    if (Character.isDigit (ch)) {
    } else {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49823340_49823493_1_20
49823340_49823505_15_24
Title: Comparing two instances of class having big number of attributes 
----------------------------------------

@Override
public boolean equals (Object o) {
    Field [] fields = Address.class.getDeclaredFields ();
    for (Field field : fields) {
        try {
            field.setAccessible (true);
            if (! field.get (this).equals (field.get ((Address) o))) {
                return false;
            }
        } catch (IllegalAccessException e) {
        }
    }
    return true;
}
----------------------------------------

public boolean equals (Object o) {
    if (o == this) return true;

    if (! (o instanceof EqualsAndHashCodeExample)) return false;

    EqualsAndHashCodeExample other = (EqualsAndHashCodeExample) o;
    if (! other.canEqual ((Object) this)) return false;

    if (this.getName () == null ? other.getName () != null : ! this.getName ().equals (other.getName ())) return false;

    if (Double.compare (this.score, other.score) != 0) return false;

    if (! Arrays.deepEquals (this.tags, other.tags)) return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49823340_49823493_1_20
49823340_49823505_48_57
Title: Comparing two instances of class having big number of attributes 
----------------------------------------

@Override
public boolean equals (Object o) {
    Field [] fields = Address.class.getDeclaredFields ();
    for (Field field : fields) {
        try {
            field.setAccessible (true);
            if (! field.get (this).equals (field.get ((Address) o))) {
                return false;
            }
        } catch (IllegalAccessException e) {
        }
    }
    return true;
}
----------------------------------------

public boolean equals (Object o) {
    if (o == this) return true;

    if (! (o instanceof Square)) return false;

    Square other = (Square) o;
    if (! other.canEqual ((Object) this)) return false;

    if (! super.equals (o)) return false;

    if (this.width != other.width) return false;

    if (this.height != other.height) return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49838318_49838457_1_10
49838318_49838618_1_16
Title: Stack (array index out of bounds) 
----------------------------------------

public int pop () {
    if (top == 0) {
        System.out.println ("Stack is empty");
        return - 1;
    }
    int temp = stack [top];
    top --;
    return temp;
}
----------------------------------------

public int pop () {
    if (top == - 1) {
        System.out.println ("Stack is empty");
        return - 1;
    }
    top = top - 1;
    if (top < 0) {
        return top;
    }
    return stack [top];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49848556_49848716_1_12
49848556_49848786_1_31
Title: How do I replace certain characters in a String without using .replace()? 
----------------------------------------

public String replace (String original, String toBeReplacedStr, String withStr) {
    int i = original.indexOf (toBeReplacedStr);
    if (i < 0) {
        return original;
    }
    StringBuilder sb = new StringBuilder ();
    String before = original.substring (0, i);
    String rawAfter = original.substring (i + toBeReplacedStr.length ());
    String replacedAfter = replace (rawAfter, toBeReplacedStr, withStr);
    return sb.append (before).append (withStr).append (replacedAfter).toString ();
}
----------------------------------------

public String replace (char oldChar, char newChar) {
    if (oldChar != newChar) {
        int len = value.length;
        int i = - 1;
        char [] val = value;
        while (++ i < len) {
            if (val [i] == oldChar) {
                break;
            }
        }
        if (i < len) {
            char buf [] = new char [len];
            for (int j = 0;
            j < i; j ++) {
                buf [j] = val [j];
            }
            while (i < len) {
                char c = val [i];
                buf [i] = (c == oldChar) ? newChar : c;
                i ++;
            }
            return new String (buf, true);
        }
    }
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49856108_49857412_30_57
49856108_49857455_1_18
Title: Remove sublists from list while iterating 
----------------------------------------

public static List < Integer > controlOccurrences (List < Integer > sortedArr, int m) {
    int count = 1;
    for (int i = 0;
    i < sortedArr.size (); i ++) {
        for (int j = 0;
        j < sortedArr.size (); j ++) {
            if (sortedArr.get (i).equals (sortedArr.get (j)) && i != j) {
                count += 1;
            }
        }
        if (count == m) {
            sortedArr.remove (i);
            count = 1;
        } else {
            count = 1;
        }
    }
    return sortedArr;
}
----------------------------------------

static List < Integer > controlOccurrences (List < Integer > sortedArr, int m) {
    Map < Integer, Long > result = sortedArr.stream ().collect (Collectors.groupingBy (Function.identity (), Collectors.counting ()));
    for (Map.Entry < Integer, Long > entry : result.entrySet ()) {
        if (entry.getValue () == m) {
            for (int i = 0;
            i < m - 2; i ++) {
                sortedArr.remove (entry.getKey ());
            }
        }
    }
    return sortedArr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4988143_28783247_5_62
4988143_4989088_2_21
Title: Simple Java Hangman Assignment 
----------------------------------------

public static void main (String args []) {
    char game [];
    Scanner input = new Scanner (System.in);
    Random r = new Random ();
    String [] arr = {"pakistan", "india", "jarmany", "america", "rashia", "iran", "iraq", "japan", "sudan", "canada"};
    String word = arr [r.nextInt (arr.length)];
    int count = word.length ();
    char [] CharArr = word.toCharArray ();
    char [] star = word.toCharArray ();
    for (int i = 0;
    i < star.length; i ++) {
        star [i] = '*';
        System.out.print (star [i]);
    }
    for (int i = 1;
    i <= 3; i ++) {
        System.out.printf ("\nGuess a Letter:");
        char letter = input.next ().charAt (0);
        for (int j = 0;
        j < CharArr.length; j ++) {
            if (letter == star [j]) {
                System.out.println ("this word already exist");
            } else {
                if (letter == CharArr [j]) {
                    star [j] = letter;
                    i --;
                    System.out.printf ("CORRECT GUESS!\n");
                }
            }
        }
        System.out.print (star);
        switch (i + 0) {
            case 1 :
                System.err.printf ("Strike 1\n");
                break;
            case 2 :
                System.err.printf ("Strike 2\n");
                break;
            case 3 :
                System.err.printf ("Strike 3\n");
                System.err.printf ("You're out!!! The word is Not_Matched\n");
                break;
        }
        System.out.printf ("\n");
        if ((new String (word)).equals (new String (star))) {
            System.err.printf ("Winner Winner, Chicken Dinner!\n");
            break;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Enter Secrect Word");
    Scanner scn = new Scanner (System.in);
    String secrectStr = scn.next ();
    StringBuilder b = new StringBuilder (secrectStr.length ());
    for (int i = 0;
    i < secrectStr.length (); i ++) b.append ("*");

    char [] secrectStrCharArr = secrectStr.toCharArray ();
    int charCnt = secrectStr.length ();
    while (charCnt >= 0) {
        System.out.println ("Secrect Word :" + b.toString ());
        System.out.println ("Guess a letter :");
        char guessChar = scn.next ().toCharArray () [0];
        for (int i = 0;
        i < secrectStrCharArr.length; i ++) {
            if (guessChar == secrectStrCharArr [i]) b.setCharAt (i, guessChar);

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49895275_49897958_34_43
49895275_50085461_22_56
Title: Java Swing: manage multiple SpringLayout 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (() -> {
        JFrame f = new JFrame ();
        f.setDefaultCloseOperation (WindowConstants.EXIT_ON_CLOSE);
        f.add (new SpringLayoutCobinationTest ().makeUI ());
        f.setSize (420, 420);
        f.setLocationRelativeTo (null);
        f.setVisible (true);
    });
}
----------------------------------------

public static void main (String [] args) {
    frame = new JFrame ();
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setSize (830, 420);
    panel = new JPanel ();
    Button = new JButton ("ok");
    panel.add (Button);
    panel.setSize (new Dimension (100, 100));
    frame.add (panel);
    LayOut_Frame = new SpringLayout ();
    frame.setLayout (LayOut_Frame);
    contentPane = frame.getContentPane ();
    LayOut_panel = new SpringLayout ();
    panel.setLayout (LayOut_panel);
    LayOut_panel.putConstraint (SpringLayout.NORTH, contentPane, 30, SpringLayout.NORTH, Button);
    LayOut_panel.putConstraint (SpringLayout.WEST, contentPane, 30, SpringLayout.WEST, Button);
    SpringLayout.Constraints c = LayOut_Frame.getConstraints (panel);
    c.setWidth (Spring.constant (200));
    c.setHeight (Spring.constant (100));
    LayOut_Frame.putConstraint (SpringLayout.NORTH, panel, 30, SpringLayout.NORTH, contentPane);
    LayOut_Frame.putConstraint (SpringLayout.WEST, panel, 30, SpringLayout.WEST, contentPane);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49895713_49937941_19_28
49895713_49937941_1_17
Title: How to find the matching curve name from an ECPublicKey 
----------------------------------------

public static final String deriveCurveName (PublicKey publicKey) throws GeneralSecurityException {
    if (publicKey instanceof java.security.interfaces.ECPublicKey) {
        final java.security.interfaces.ECPublicKey pk = (java.security.interfaces.ECPublicKey) publicKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (publicKey instanceof org.bouncycastle.jce.interfaces.ECPublicKey) {
        final org.bouncycastle.jce.interfaces.ECPublicKey pk = (org.bouncycastle.jce.interfaces.ECPublicKey) publicKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPublicKey (either jce or bc implementation)");

}
----------------------------------------

public static final String deriveCurveName (org.bouncycastle.jce.spec.ECParameterSpec ecParameterSpec) throws GeneralSecurityException {
    for (@SuppressWarnings ("rawtypes")
    Enumeration names = ECNamedCurveTable.getNames ();
    names.hasMoreElements ();) {
        final String name = (String) names.nextElement ();
        final X9ECParameters params = ECNamedCurveTable.getByName (name);
        if (params.getN ().equals (ecParameterSpec.getN ()) && params.getH ().equals (ecParameterSpec.getH ()) && params.getCurve ().equals (ecParameterSpec.getCurve ()) && params.getG ().equals (ecParameterSpec.getG ())) {
            return name;
        }
    }
    throw new GeneralSecurityException ("Could not find name for curve");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49895713_49937941_1_17
49895713_49937941_30_39
Title: How to find the matching curve name from an ECPublicKey 
----------------------------------------

public static final String deriveCurveName (org.bouncycastle.jce.spec.ECParameterSpec ecParameterSpec) throws GeneralSecurityException {
    for (@SuppressWarnings ("rawtypes")
    Enumeration names = ECNamedCurveTable.getNames ();
    names.hasMoreElements ();) {
        final String name = (String) names.nextElement ();
        final X9ECParameters params = ECNamedCurveTable.getByName (name);
        if (params.getN ().equals (ecParameterSpec.getN ()) && params.getH ().equals (ecParameterSpec.getH ()) && params.getCurve ().equals (ecParameterSpec.getCurve ()) && params.getG ().equals (ecParameterSpec.getG ())) {
            return name;
        }
    }
    throw new GeneralSecurityException ("Could not find name for curve");
}
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49900588_49901073_9_24
49900588_49901101_1_14
Title: Edit Distance Java 
----------------------------------------

private static int distance (String s1, String s2, int i, int j) {
    if (i == s1.length () && j == s2.length ()) return 0;
    else if (i == s1.length ()) return s2.length () - j;
    else if (j == s2.length ()) return s1.length () - i;

    if (s1.charAt (i) == s2.charAt (j)) return distance (s1, s2, i + 1, j + 1);

    int rep = distance (s1, s2, i + 1, j + 1) + 1;
    int del = distance (s1, s2, i, j + 1) + 1;
    int ins = distance (s1, s2, i + 1, j) + 1;
    return Math.min (del, Math.min (ins, rep));
}
----------------------------------------

private static int distance (String s1, String s2, int i, int j) {
    if (j == s2.length ()) {
        return s1.length () - i;
    }
    if (i == s1.length ()) {
        return s2.length () - j;
    }
    if (s1.charAt (i) == s2.charAt (j)) return distance (s1, s2, i + 1, j + 1);

    int rep = distance (s1, s2, i + 1, j + 1) + 2;
    int del = distance (s1, s2, i, j + 1) + 1;
    int ins = distance (s1, s2, i + 1, j) + 1;
    return Math.min (del, Math.min (ins, rep));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49900588_49901073_9_24
49900588_50089304_1_19
Title: Edit Distance Java 
----------------------------------------

private static int distance (String s1, String s2, int i, int j) {
    if (i == s1.length () && j == s2.length ()) return 0;
    else if (i == s1.length ()) return s2.length () - j;
    else if (j == s2.length ()) return s1.length () - i;

    if (s1.charAt (i) == s2.charAt (j)) return distance (s1, s2, i + 1, j + 1);

    int rep = distance (s1, s2, i + 1, j + 1) + 1;
    int del = distance (s1, s2, i, j + 1) + 1;
    int ins = distance (s1, s2, i + 1, j) + 1;
    return Math.min (del, Math.min (ins, rep));
}
----------------------------------------

private static int distance (String s1, String s2, int i, int j) {
    if (i == s1.length () && j == s2.length ()) {
        return 0;
    } else if (i == s1.length ()) {
        return s2.length () - j;
    } else if (j == s2.length ()) {
        return s1.length () - i;
    }

    if (s1.charAt (i) == s2.charAt (j)) {
        return distance (s1, s2, i + 1, j + 1);
    }
    int del = distance (s1, s2, i, j + 1) + 1;
    int ins = distance (s1, s2, i + 1, j) + 1;
    return Math.min (del, ins);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49900588_49901101_1_14
49900588_50089304_1_19
Title: Edit Distance Java 
----------------------------------------

private static int distance (String s1, String s2, int i, int j) {
    if (j == s2.length ()) {
        return s1.length () - i;
    }
    if (i == s1.length ()) {
        return s2.length () - j;
    }
    if (s1.charAt (i) == s2.charAt (j)) return distance (s1, s2, i + 1, j + 1);

    int rep = distance (s1, s2, i + 1, j + 1) + 2;
    int del = distance (s1, s2, i, j + 1) + 1;
    int ins = distance (s1, s2, i + 1, j) + 1;
    return Math.min (del, Math.min (ins, rep));
}
----------------------------------------

private static int distance (String s1, String s2, int i, int j) {
    if (i == s1.length () && j == s2.length ()) {
        return 0;
    } else if (i == s1.length ()) {
        return s2.length () - j;
    } else if (j == s2.length ()) {
        return s1.length () - i;
    }

    if (s1.charAt (i) == s2.charAt (j)) {
        return distance (s1, s2, i + 1, j + 1);
    }
    int del = distance (s1, s2, i, j + 1) + 1;
    int ins = distance (s1, s2, i + 1, j) + 1;
    return Math.min (del, ins);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49911999_49912337_2_11
49911999_49912576_2_15
Title: Combination of subarrays 
----------------------------------------

public static void main (String args []) {
    int [] [] x = {{1, 2}, {3, 4, 5}, {6, 7}};
    for (int i = 0;
    i < x [0].length; i ++) {
        for (int j = 0;
        j < x [1].length; j ++) {
            for (int k = 0;
            k < x [2].length; k ++) {
                System.out.println (x [0] [i] + " " + x [1] [j] + " " + x [2] [k]);
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Object [] [] myArray = {{1, 2, 3}, {4, 5, null}, {7, 8, null}};
    for (int x = 0;
    x < myArray.length; x ++) {
        for (int y = 0;
        y < 3; y ++) {
            if (myArray [x] [y] != null) {
                System.out.print ((int) myArray [x] [y]);
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49911999_49912337_2_11
49911999_49920024_14_45
Title: Combination of subarrays 
----------------------------------------

public static void main (String args []) {
    int [] [] x = {{1, 2}, {3, 4, 5}, {6, 7}};
    for (int i = 0;
    i < x [0].length; i ++) {
        for (int j = 0;
        j < x [1].length; j ++) {
            for (int k = 0;
            k < x [2].length; k ++) {
                System.out.println (x [0] [i] + " " + x [1] [j] + " " + x [2] [k]);
            }
        }
    }
}
----------------------------------------

public static void main (String args []) {
    int [] [] x = {{1, 2}, {3, 4, 5}, {6, 7}};
    Stream < List < Integer > > inputs = null;
    for (int [] set : x) {
        List < Integer > list = new ArrayList < Integer > ();
        Collections.addAll (list, Arrays.stream (set).boxed ().toArray (Integer [] :: new));
        if (inputs == null) {
            inputs = Stream.of (list);
        } else {
            inputs = Stream.concat (inputs, Stream.of (list));
        }
    }
    Stream < List < List < Integer > > > listified = inputs.filter (Objects :: nonNull).filter (input -> ! input.isEmpty ()).map (l -> l.stream ().map (o -> new ArrayList < > (Arrays.asList (o))).collect (Collectors.toList ()));
    List < List < Integer > > combinations = listified.reduce ((input1, input2) -> {
        List < List < Integer > > merged = new ArrayList < > ();
        input1.forEach (permutation1 -> input2.forEach (permutation2 -> {
            List < Integer > combination = new ArrayList < > ();
            combination.addAll (permutation1);
            combination.addAll (permutation2);
            merged.add (combination);
        }));
        return merged;
    }).orElse (null);
    combinations.forEach (System.out :: println);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49911999_49912400_1_13
49911999_49912576_2_15
Title: Combination of subarrays 
----------------------------------------

public static void main (String args []) {
    int [] [] x = {{1, 2, 3}, {3, 4, 5}, {6, 7}};
    for (int j = 0;
    j < x [0].length; j ++) {
        for (int k = 0;
        k < x [1].length; k ++) {
            for (int l = 0;
            l < x [2].length; l ++) {
                System.out.println (x [0] [j] + " " + x [1] [k] + " " + x [2] [l]);
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Object [] [] myArray = {{1, 2, 3}, {4, 5, null}, {7, 8, null}};
    for (int x = 0;
    x < myArray.length; x ++) {
        for (int y = 0;
        y < 3; y ++) {
            if (myArray [x] [y] != null) {
                System.out.print ((int) myArray [x] [y]);
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49911999_49912400_1_13
49911999_49920024_14_45
Title: Combination of subarrays 
----------------------------------------

public static void main (String args []) {
    int [] [] x = {{1, 2, 3}, {3, 4, 5}, {6, 7}};
    for (int j = 0;
    j < x [0].length; j ++) {
        for (int k = 0;
        k < x [1].length; k ++) {
            for (int l = 0;
            l < x [2].length; l ++) {
                System.out.println (x [0] [j] + " " + x [1] [k] + " " + x [2] [l]);
            }
        }
    }
}
----------------------------------------

public static void main (String args []) {
    int [] [] x = {{1, 2}, {3, 4, 5}, {6, 7}};
    Stream < List < Integer > > inputs = null;
    for (int [] set : x) {
        List < Integer > list = new ArrayList < Integer > ();
        Collections.addAll (list, Arrays.stream (set).boxed ().toArray (Integer [] :: new));
        if (inputs == null) {
            inputs = Stream.of (list);
        } else {
            inputs = Stream.concat (inputs, Stream.of (list));
        }
    }
    Stream < List < List < Integer > > > listified = inputs.filter (Objects :: nonNull).filter (input -> ! input.isEmpty ()).map (l -> l.stream ().map (o -> new ArrayList < > (Arrays.asList (o))).collect (Collectors.toList ()));
    List < List < Integer > > combinations = listified.reduce ((input1, input2) -> {
        List < List < Integer > > merged = new ArrayList < > ();
        input1.forEach (permutation1 -> input2.forEach (permutation2 -> {
            List < Integer > combination = new ArrayList < > ();
            combination.addAll (permutation1);
            combination.addAll (permutation2);
            merged.add (combination);
        }));
        return merged;
    }).orElse (null);
    combinations.forEach (System.out :: println);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49911999_49912576_2_15
49911999_49920024_14_45
Title: Combination of subarrays 
----------------------------------------

public static void main (String [] args) {
    Object [] [] myArray = {{1, 2, 3}, {4, 5, null}, {7, 8, null}};
    for (int x = 0;
    x < myArray.length; x ++) {
        for (int y = 0;
        y < 3; y ++) {
            if (myArray [x] [y] != null) {
                System.out.print ((int) myArray [x] [y]);
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String args []) {
    int [] [] x = {{1, 2}, {3, 4, 5}, {6, 7}};
    Stream < List < Integer > > inputs = null;
    for (int [] set : x) {
        List < Integer > list = new ArrayList < Integer > ();
        Collections.addAll (list, Arrays.stream (set).boxed ().toArray (Integer [] :: new));
        if (inputs == null) {
            inputs = Stream.of (list);
        } else {
            inputs = Stream.concat (inputs, Stream.of (list));
        }
    }
    Stream < List < List < Integer > > > listified = inputs.filter (Objects :: nonNull).filter (input -> ! input.isEmpty ()).map (l -> l.stream ().map (o -> new ArrayList < > (Arrays.asList (o))).collect (Collectors.toList ()));
    List < List < Integer > > combinations = listified.reduce ((input1, input2) -> {
        List < List < Integer > > merged = new ArrayList < > ();
        input1.forEach (permutation1 -> input2.forEach (permutation2 -> {
            List < Integer > combination = new ArrayList < > ();
            combination.addAll (permutation1);
            combination.addAll (permutation2);
            merged.add (combination);
        }));
        return merged;
    }).orElse (null);
    combinations.forEach (System.out :: println);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49917831_49918092_5_41
49917831_49918365_6_41
Title: Can I do a for loop after two consecutive if statements? 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int numberOfMarks, average, sum, total, mark;
    numberOfMarks = 0;
    int [] marks = new int [numberOfMarks];
    int smallest, largest;
    numberOfMarks = input.nextInt ();
    for (int i = 0;
    i < marks.length; i ++) {
        sum += marks [i];
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    int numberOfSubjects, sum;
    numberOfSubjects = 0;
    System.out.print ("Enter the total number of subjects: ");
    numberOfSubjects = in.nextInt ();
    if (numberOfSubjects < 0) {
        System.out.println ("Number of marks must be greater than 0!!");
    } else {
        int [] marks = new int [numberOfSubjects];
        sum = 0;
        System.out.print ("Enter the marks: ");
        for (int i = 0;
        i < marks.length; i ++) {
            marks [i] = in.nextInt ();
        }
        for (int i = 0;
        i < marks.length; i ++) {
            sum += marks [i];
        }
        Arrays.sort (marks);
        System.out.println ("Total: " + sum);
        System.out.println ("Average: " + sum / numberOfSubjects);
        System.out.println ("Minimum: " + marks [0]);
        System.out.println ("Maximum: " + marks [marks.length - 1]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49919861_49920353_1_21
49919861_49920409_7_43
Title: BufferedReader ( scanner ) 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    try {
        InputStream baidid = new FileInputStream ("c:\\test.txt");
        InputStreamReader tekst = new InputStreamReader (baidid, "UTF-8");
        BufferedReader puhverdab = new BufferedReader (tekst);
        String rida = puhverdab.readLine ();
        String word = "test";
        int count = 0;
        while (rida != null) {
            System.out.println ("Reading: " + rida);
            count += getCountOFWordsInLine (rida, word);
            rida = puhverdab.readLine ();
        }
        System.out.println ("count:" + count);
        puhverdab.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) throws Exception {
    InputStream baidid = new FileInputStream ("test.txt");
    InputStreamReader tekst = new InputStreamReader (baidid, "UTF-8");
    BufferedReader puhverdab = new BufferedReader (tekst);
    String rida;
    String word = argv [0];
    int count1 = 0, count2 = 0, count3 = 0, count4 = 0;
    Pattern P1 = Pattern.compile ("\\b" + word + "\\b");
    Pattern P2 = Pattern.compile ("\\b" + word + "\\b", Pattern.CASE_INSENSITIVE);
    while ((rida = puhverdab.readLine ()) != null) {
        System.out.println ("Reading: " + rida);
        if (rida.contains (word)) count1 ++;

        into pos = 0;
        while ((pos = rida.indexOf (word, pos)) != - 1) {
            count2 ++;
            pos ++;
        }
        Matcher m = P1.matcher (rida);
        while (m.find ()) count3 ++;

        Matcher m = P2.matcher (rida);
        while (m.find ()) count4 ++;

    }
    System.out.println ("Found exactly " + count1 + " line(s) containing word: \"" + word + "\"");
    System.out.println ("Found word \"" + word + "\" exactly " + count2 + " time(s)");
    System.out.println ("Found word \"" + word + "\" surrounded by whitespace " + count3 + " time(s).");
    System.out.println ("Found, case insensitive search, word \"" + word + "\" surrounded by whitespace " + count4 + " time(s).");
    puhverdab.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49933024_49933455_111_137
49933024_49933455_75_107
Title: User enters nothing in JFrame and gets error message 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    double math = 0;
    int Stringtoint = 0;
    final double liters = 0.946353;
    String userQuarts = txtQuartstoLiters.getText ();
    try {
        Stringtoint = Integer.parseInt (userQuarts);
    } catch (NumberFormatException exe) {
        if (userQuarts.equals ("")) JOptionPane.showMessageDialog (null, "Empty string not allowed", "Number Error", JOptionPane.ERROR_MESSAGE);
        else JOptionPane.showMessageDialog (null, "Only number is allowed", "Number Error", JOptionPane.ERROR_MESSAGE);

        return;
    }
    math = Stringtoint * liters;
    Answer.setText (Double.toString (math));
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    double math = 0;
    int Stringtoint = 0;
    final double liters = 0.946353;
    String userQuarts = txtQuartstoLiters.getText ();
    if (! userQuarts.equals ("")) {
        Stringtoint = Integer.parseInt (userQuarts);
    } else {
        JOptionPane.showMessageDialog (null, "No input data was entered", "Error", JOptionPane.ERROR_MESSAGE);
    }
    math = Stringtoint * liters;
    Answer.setText (Double.toString (math));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49934485_49934972_1_10
49934485_49935504_110_119
Title: Get number of elements in nested ArrayList of Java 
----------------------------------------

public void main () {
    final ScanInfo scanInfo = processRawResult ();
    listOfScanInfoObjects.add (scanInfo);
    for (int q = 0;
    q < listOfScanInfoObjects.size (); q ++) {
        System.out.println ("SIZE:" + listOfScanInfoObjects.get (q).getScanObjects ().size ());
    }
    scanObjectList.clear ();
    index ++;
}
----------------------------------------

public void main () {
    processRawResult ();
    listOfScanInfoObjects.add (index ++, scanInfo);
    for (int q = 0;
    q < listOfScanInfoObjects.size (); q ++) {
        System.out.println ("SIZE:" + listOfScanInfoObjects.get (q).getScanObjects ().size ());
    }
    scanObjectList.clear ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49934485_49934972_1_10
49934485_49935504_8_49
Title: Get number of elements in nested ArrayList of Java 
----------------------------------------

public void main () {
    final ScanInfo scanInfo = processRawResult ();
    listOfScanInfoObjects.add (scanInfo);
    for (int q = 0;
    q < listOfScanInfoObjects.size (); q ++) {
        System.out.println ("SIZE:" + listOfScanInfoObjects.get (q).getScanObjects ().size ());
    }
    scanObjectList.clear ();
    index ++;
}
----------------------------------------

public static void main (String [] args) {
    ScanResultStore clsStores [] = new ScanResultStore [2];
    List < ScanResult > results = new ArrayList < ScanResult > ();
    ScanResult result1 = new ScanResult ();
    result1.BSSID = "AF-DF-CF-ED-EF";
    result1.RSSI = 2;
    result1.level = 4;
    results.add (result1);
    ScanResult result2 = new ScanResult ();
    result2.BSSID = "AD-DF-CF-ED-EF";
    result2.RSSI = 1;
    result2.level = 3;
    results.add (result2);
    ScanResult result3 = new ScanResult ();
    result3.BSSID = "AD-DG-CF-ED-EF";
    result3.RSSI = 2;
    result3.level = 5;
    results.add (result3);
    clsStores [0] = new ScanResultStore ();
    clsStores [0].setScanResult (results);
    clsStores [0].main ();
    clsStores [1] = new ScanResultStore ();
    clsStores [1] = new ScanResultStore ();
    results = new ArrayList < ScanResult > ();
    ScanResult result4 = new ScanResult ();
    result3.BSSID = "AD-DG-CF-ED-TF";
    result3.RSSI = 1;
    result3.level = 5;
    results.add (result4);
    clsStores [1].setScanResult (results);
    clsStores [1].main ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49934485_49934977_13_23
49934485_49935504_122_134
Title: Get number of elements in nested ArrayList of Java 
----------------------------------------

public ScanInfo processRawResult () {
    long systemTime = System.currentTimeMillis ();
    final ScanObject scanObjectList = new ArrayList < ScanObject > ();
    for (int i = 0;
    i < results.size (); i ++) {
        String mac = results.get (i).BSSID;
        int rssi = results.get (i).level;
        scanObject = new ScanObject (mac, rssi);
        scanObjectList.add (i, scanObject);
    }
    return new ScanInfo (systemTime, scanObjectList);
}
----------------------------------------

public void processRawResult () {
    long systemTime = System.currentTimeMillis ();
    scanObjectList = new ArrayList < ScanObject > ();
    for (int i = 0;
    i < results.size (); i ++) {
        String mac = results.get (i).BSSID;
        int rssi = results.get (i).level;
        ScanObject scanObject = new ScanObject (mac, rssi);
        scanObjectList.add (i, scanObject);
    }
    scanInfo = new ScanInfo (systemTime, scanObjectList);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49934485_49934977_1_10
49934485_49935504_110_119
Title: Get number of elements in nested ArrayList of Java 
----------------------------------------

public void main () {
    final ScanInfo scanInfo = processRawResult ();
    listOfScanInfoObjects.add (scanInfo);
    for (int q = 0;
    q < listOfScanInfoObjects.size (); q ++) {
        System.out.println ("SIZE:" + listOfScanInfoObjects.get (q).getScanObjects ().size ());
    }
    scanObjectList.clear ();
    index ++;
}
----------------------------------------

public void main () {
    processRawResult ();
    listOfScanInfoObjects.add (index ++, scanInfo);
    for (int q = 0;
    q < listOfScanInfoObjects.size (); q ++) {
        System.out.println ("SIZE:" + listOfScanInfoObjects.get (q).getScanObjects ().size ());
    }
    scanObjectList.clear ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49934485_49934977_1_10
49934485_49935504_8_49
Title: Get number of elements in nested ArrayList of Java 
----------------------------------------

public void main () {
    final ScanInfo scanInfo = processRawResult ();
    listOfScanInfoObjects.add (scanInfo);
    for (int q = 0;
    q < listOfScanInfoObjects.size (); q ++) {
        System.out.println ("SIZE:" + listOfScanInfoObjects.get (q).getScanObjects ().size ());
    }
    scanObjectList.clear ();
    index ++;
}
----------------------------------------

public static void main (String [] args) {
    ScanResultStore clsStores [] = new ScanResultStore [2];
    List < ScanResult > results = new ArrayList < ScanResult > ();
    ScanResult result1 = new ScanResult ();
    result1.BSSID = "AF-DF-CF-ED-EF";
    result1.RSSI = 2;
    result1.level = 4;
    results.add (result1);
    ScanResult result2 = new ScanResult ();
    result2.BSSID = "AD-DF-CF-ED-EF";
    result2.RSSI = 1;
    result2.level = 3;
    results.add (result2);
    ScanResult result3 = new ScanResult ();
    result3.BSSID = "AD-DG-CF-ED-EF";
    result3.RSSI = 2;
    result3.level = 5;
    results.add (result3);
    clsStores [0] = new ScanResultStore ();
    clsStores [0].setScanResult (results);
    clsStores [0].main ();
    clsStores [1] = new ScanResultStore ();
    clsStores [1] = new ScanResultStore ();
    results = new ArrayList < ScanResult > ();
    ScanResult result4 = new ScanResult ();
    result3.BSSID = "AD-DG-CF-ED-TF";
    result3.RSSI = 1;
    result3.level = 5;
    results.add (result4);
    clsStores [1].setScanResult (results);
    clsStores [1].main ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49934485_49935504_110_119
49934485_49935504_8_49
Title: Get number of elements in nested ArrayList of Java 
----------------------------------------

public void main () {
    processRawResult ();
    listOfScanInfoObjects.add (index ++, scanInfo);
    for (int q = 0;
    q < listOfScanInfoObjects.size (); q ++) {
        System.out.println ("SIZE:" + listOfScanInfoObjects.get (q).getScanObjects ().size ());
    }
    scanObjectList.clear ();
}
----------------------------------------

public static void main (String [] args) {
    ScanResultStore clsStores [] = new ScanResultStore [2];
    List < ScanResult > results = new ArrayList < ScanResult > ();
    ScanResult result1 = new ScanResult ();
    result1.BSSID = "AF-DF-CF-ED-EF";
    result1.RSSI = 2;
    result1.level = 4;
    results.add (result1);
    ScanResult result2 = new ScanResult ();
    result2.BSSID = "AD-DF-CF-ED-EF";
    result2.RSSI = 1;
    result2.level = 3;
    results.add (result2);
    ScanResult result3 = new ScanResult ();
    result3.BSSID = "AD-DG-CF-ED-EF";
    result3.RSSI = 2;
    result3.level = 5;
    results.add (result3);
    clsStores [0] = new ScanResultStore ();
    clsStores [0].setScanResult (results);
    clsStores [0].main ();
    clsStores [1] = new ScanResultStore ();
    clsStores [1] = new ScanResultStore ();
    results = new ArrayList < ScanResult > ();
    ScanResult result4 = new ScanResult ();
    result3.BSSID = "AD-DG-CF-ED-TF";
    result3.RSSI = 1;
    result3.level = 5;
    results.add (result4);
    clsStores [1].setScanResult (results);
    clsStores [1].main ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49943931_49944382_1_23
49943931_49944423_1_18
Title: Trying to figure out how to to bring the total score back up to main to print out. It is being displayed but not stored in the variable 
----------------------------------------

public static int player () {
    int total = 0;
    Scanner inputScanner = new Scanner (System.in);
    String userInput = inputScanner.nextLine ();
    if (userInput.equals ("yes")) {
        total += spinWheel ();
        if (total < 100) {
            System.out.println ("Would you like to spin again?");
            userInput = inputScanner.nextLine ();
            if (userInput.equals ("yes")) {
                total += spinWheelTwice ();
                if (total < 100) {
                    System.out.println ("You are out of the game");
                } else {
                    System.out.println ("Final Score is: " + total);
                }
            } else {
                System.out.println ("You are out of the game");
            }
        }
    }
    return total;
}
----------------------------------------

public static int player () {
    System.out.println ("Are you ready? (yes/no)");
    Scanner inputScanner = new Scanner (System.in);
    String userInput = inputScanner.nextLine ();
    int total = 0;
    if (userInput.equals ("yes")) {
        total = spinWheel ();
        System.out.println ("You spun " + total);
        if (total < 100) {
            System.out.println ("Would you like to spin again?");
            userInput = inputScanner.nextLine ();
            if (userInput.equals ("yes")) {
                total += spinWheelTwice ();
            }
        }
    }
    return total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49949972_49950593_28_45
49949972_49950593_49_59
Title: JavaFX TreeView with Drag&Drop functionality produces an exception 
----------------------------------------

public void handle (DragEvent dragEvent) {
    if (! (dragEvent.getGestureSource () instanceof TreeCell) || ((TreeCell) dragEvent.getGestureSource ()).getTreeView () != getTreeView ()) {
        return;
    }
    TreeItem < String > sourceItem = ((TreeCell < String >) dragEvent.getGestureSource ()).getTreeItem ();
    TreeItem < String > item = getTreeItem ();
    while (item != null && item != sourceItem) {
        item = item.getParent ();
    }
    if (item == null) {
        dragEvent.acceptTransferModes (TransferMode.MOVE);
    }
    dragEvent.consume ();
}
----------------------------------------

public void handle (DragEvent dragEvent) {
    TreeItem < String > itemToMove = ((TreeCell < String >) dragEvent.getGestureSource ()).getTreeItem ();
    TreeItem < String > newParent = getTreeItem ();
    itemToMove.getParent ().getChildren ().remove (itemToMove);
    newParent.getChildren ().add (itemToMove);
    newParent.setExpanded (true);
    dragEvent.setDropCompleted (true);
    dragEvent.consume ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49949972_49950593_28_45
49949972_49950593_8_18
Title: JavaFX TreeView with Drag&Drop functionality produces an exception 
----------------------------------------

public void handle (DragEvent dragEvent) {
    if (! (dragEvent.getGestureSource () instanceof TreeCell) || ((TreeCell) dragEvent.getGestureSource ()).getTreeView () != getTreeView ()) {
        return;
    }
    TreeItem < String > sourceItem = ((TreeCell < String >) dragEvent.getGestureSource ()).getTreeItem ();
    TreeItem < String > item = getTreeItem ();
    while (item != null && item != sourceItem) {
        item = item.getParent ();
    }
    if (item == null) {
        dragEvent.acceptTransferModes (TransferMode.MOVE);
    }
    dragEvent.consume ();
}
----------------------------------------

public void handle (MouseEvent event) {
    TreeItem < String > item = getTreeItem ();
    if (isEmpty () || item == null || item.getParent () == null) {
        return;
    }
    Dragboard dragBoard = startDragAndDrop (TransferMode.MOVE);
    ClipboardContent content = new ClipboardContent ();
    content.put (DataFormat.PLAIN_TEXT, item.getValue ());
    dragBoard.setContent (content);
    event.consume ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49949972_49950593_49_59
49949972_49950593_8_18
Title: JavaFX TreeView with Drag&Drop functionality produces an exception 
----------------------------------------

public void handle (DragEvent dragEvent) {
    TreeItem < String > itemToMove = ((TreeCell < String >) dragEvent.getGestureSource ()).getTreeItem ();
    TreeItem < String > newParent = getTreeItem ();
    itemToMove.getParent ().getChildren ().remove (itemToMove);
    newParent.getChildren ().add (itemToMove);
    newParent.setExpanded (true);
    dragEvent.setDropCompleted (true);
    dragEvent.consume ();
}
----------------------------------------

public void handle (MouseEvent event) {
    TreeItem < String > item = getTreeItem ();
    if (isEmpty () || item == null || item.getParent () == null) {
        return;
    }
    Dragboard dragBoard = startDragAndDrop (TransferMode.MOVE);
    ClipboardContent content = new ClipboardContent ();
    content.put (DataFormat.PLAIN_TEXT, item.getValue ());
    dragBoard.setContent (content);
    event.consume ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49951604_49951736_1_12
49951604_49951938_1_16
Title: Print out the highest score 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Welcome to Price is Right!");
    int playerCount = 3;
    List < Integer > scores = new LinkedList < > ();
    for (int i = 0;
    i < playerCount; i ++) {
        System.out.println ("Player " + (i + 1) + " are you ready to spin?");
        scores.add (player ());
        System.out.println ("Player " + (i + 1) + " Your final score is: " + scores.get (scores.size () - 1));
    }
    System.out.println ("The maximum score is " + Collections.max (scores));
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Welcome to Price is Right!");
    int [] scores = new int [3];
    int maxScore = - 1;
    int maxUser = 0;
    for (int i = 0;
    i < scores.length; i ++) {
        System.out.println ("Player " + (i + 1) + " are you ready to spin?");
        scores [i] = player ();
        if (scores [i] > maxScore) {
            maxUser = i;
            maxScore = scores [i];
        }
        System.out.println ("Player " + (i + 1) + " Your final score is: " + scores [i]);
    }
    System.out.println ("Player " + (maxUser + 1) + " won with a final score of " + maxScore);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49953298_50010015_161_174
49953298_50010015_87_100
Title: Refresh JFrame contents DefaultTableModel 
----------------------------------------

public Class getColumnClass (int column) {
    for (int row = 0;
    row < getRowCount (); row ++) {
        Object o = getValueAt (row, column);
        if (o != null) {
            return o.getClass ();
        }
    }
    return Object.class;
}
----------------------------------------

public Class getColumnClass (int column) {
    for (int row = 0;
    row < getRowCount (); row ++) {
        Object o = getValueAt (row, column);
        if (o != null) {
            return o.getClass ();
        }
    }
    return Object.class;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49962613_49968176_1_21
49962613_50706406_1_16
Title: Find Maximum Positive Index 
----------------------------------------

public static int findMaximumPositiveIndex (int [] arr) {
    int min = arr [0], max = arr [0], minIndex = 0, maxIndex = 0;
    int maximumIndex = 0;
    for (int i = 0;
    i < arr.length; i ++) {
        min = arr [i];
        minIndex = i;
        boolean isMaxPresent = false;
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] > min) {
                max = arr [j];
                maxIndex = j;
                isMaxPresent = true;
            }
        }
        if (maximumIndex < ((maxIndex - minIndex) + 1)) maximumIndex = (maxIndex - minIndex) + 1;

    }
    return maximumIndex;
}
----------------------------------------

static int findMaximumPositiveIndex (int [] arr) {
    if (arr.length <= 1) return 0;

    int left = 0;
    int right = arr.length - 1;
    while (left < right) {
        if (arr [left] < arr [right]) break;

        if (arr [left] > arr [left + 1]) {
            left ++;
        } else if (arr [right] < arr [right - 1]) {
            right --;
        }

    }
    return right - left + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49962700_49962871_1_14
49962700_49975043_5_30
Title: How to check character values on a String array? 
----------------------------------------

public static void main (String [] args) throws Exception {
    Scanner userInput = new Scanner (System.in);
    int maxArrayLength [] = {1, 2, 3, 4, 5};
    String words [] = new String [maxArrayLength.length];
    for (int i = 0;
    i < words.length; i ++) {
        System.out.println ("Please enter element " + maxArrayLength [i] + ":");
        words [i] = userInput.nextLine ();
    }
    for (int lengthCheckCounter = 0;
    lengthCheckCounter < words.length; lengthCheckCounter ++) if (words [lengthCheckCounter].length () > 4) System.out.println (words [lengthCheckCounter] + "-" + words [lengthCheckCounter].length ());

    userInput.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner scn = new Scanner (System.in);
    String [] names = new String [5];
    for (int i = 0;
    i < 5; i ++) {
        System.out.println ("Enter a string:");
        names [i] = scn.nextLine ();
    }
    System.out.println ("The strings with more than 4 characters are: ");
    for (int i = 0;
    i < 5; i ++) {
        if (names [i].length () > 4) System.out.println (names [i]);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49965405_49966318_17_36
49965405_49966975_1_15
Title: Array Recursion Excercise 
----------------------------------------

private static double ArrayDifferenceloop (double [] arg) {
    do {
        for (int i = 0;
        i < len; i += 2) {
            arg [i / 2] = arg [i] - arg [i + 1];
        }
        len = len / 2;
        System.out.print ("new Array : ");
        for (int i = 0;
        i < len; i ++) {
            System.out.print (arg [i] + " , ");
        }
    } while (len > 1);
    return arg [0];
}
----------------------------------------

private static double ArrayDifferenceloop (double [] array) {
    int activeLength = array.length;
    do {
        int index = 0;
        for (int i = 0;
        i < activeLength; i += 2) {
            array [index ++] = array [i] - array [i + 1];
        }
        System.out.println ("Modified array (only " + index + " elements are significant) " + Arrays.toString (array));
        activeLength /= 2;
    } while (activeLength > 1);
    return array [0];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49972664_49972794_3_19
49972664_49974011_3_19
Title: Display both comments on dialogbox(Java) 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    StringBuilder string = new StringBuilder ();
    if (e.getSource () == textFieldArray [0]) {
        string.append (String.format ("1. %s", e.getActionCommand ()));
    }
    if (e.getSource () == textFieldArray [1]) {
        if (string != null && string.toString ().length () > 0) {
            string.append (System.lineSeparator ());
        }
        string.append (String.format ("2. %s", e.getActionCommand ()));
    }
    String [] fields = {"Summary of my changes", string.toString ()};
    JOptionPane.showMessageDialog (null, fields, "My sugestion to the course", JOptionPane.WARNING_MESSAGE);
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    StringBuilder string = new StringBuilder ();
    if (e.getSource () == textFieldArray [0] || e.getSource () == textFieldArray [1]) {
        string.append (String.format ("1. %s", textFieldArray [0].getText ()));
        string.append (String.format ("2. %s", textFieldArray [1].getText ()));
    }
    String [] fields = {"Summary of my changes", string.toString ()};
    JOptionPane.showMessageDialog (null, fields, "My suggestion to the course", JOptionPane.WARNING_MESSAGE);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49991144_49991303_17_39
49991144_49991303_1_15
Title: Unusual Java implementation of red/black tree node insertion 
----------------------------------------

public boolean insertNode (Node node, Node current_node) {
    int value = current_node.getValue ();
    if (node.getValue () < value) {
        if (current_node.getLeft () != null) {
            return insertNode (node, current_node.getLeft ());
        } else {
            return true;
        }
    } else if (node.getValue () > value) {
        if (current_node.getRight () != null) {
            return insertNode (node, current_node.getRight ());
        } else {
            return true;
        }
    } else {
        return false;
    }

}
----------------------------------------

public boolean insertNode (Node node) {
    if (root == null) {
        root = node;
        root.setColor (Node.BLACK);
        return true;
    } else {
        boolean result = insertNode (node, root);
        if (result) {
        }
        return result;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49991144_49991303_17_39
49991144_50009135_14_39
Title: Unusual Java implementation of red/black tree node insertion 
----------------------------------------

public boolean insertNode (Node node, Node current_node) {
    int value = current_node.getValue ();
    if (node.getValue () < value) {
        if (current_node.getLeft () != null) {
            return insertNode (node, current_node.getLeft ());
        } else {
            return true;
        }
    } else if (node.getValue () > value) {
        if (current_node.getRight () != null) {
            return insertNode (node, current_node.getRight ());
        } else {
            return true;
        }
    } else {
        return false;
    }

}
----------------------------------------

public boolean insertNode (Node node, Node cur) {
    if (node.getValue () < cur.getValue ()) {
        if (cur.getLeft () != null) return insertNode (node, cur.getLeft ());
        else {
            cur.setLeft (node);
            node.setParent (cur);
            handleInsertion (node);
            return true;
        }
    } else if (node.getValue () > cur.getValue ()) {
        if (cur.getRight () != null) return insertNode (node, cur.getRight ());
        else {
            cur.setRight (node);
            node.setParent (cur);
            handleInsertion (node);
            return true;
        }
    } else return false;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49991144_49991303_17_39
49991144_50009135_1_12
Title: Unusual Java implementation of red/black tree node insertion 
----------------------------------------

public boolean insertNode (Node node, Node current_node) {
    int value = current_node.getValue ();
    if (node.getValue () < value) {
        if (current_node.getLeft () != null) {
            return insertNode (node, current_node.getLeft ());
        } else {
            return true;
        }
    } else if (node.getValue () > value) {
        if (current_node.getRight () != null) {
            return insertNode (node, current_node.getRight ());
        } else {
            return true;
        }
    } else {
        return false;
    }

}
----------------------------------------

public boolean insertNode (Node node) {
    if (root == null) {
        root = node;
        root.setColor (Node.BLACK);
        return true;
    } else node.setColor (Node.RED);

    return insertNode (node, root);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49991144_49991303_1_15
49991144_50009135_14_39
Title: Unusual Java implementation of red/black tree node insertion 
----------------------------------------

public boolean insertNode (Node node) {
    if (root == null) {
        root = node;
        root.setColor (Node.BLACK);
        return true;
    } else {
        boolean result = insertNode (node, root);
        if (result) {
        }
        return result;
    }
}
----------------------------------------

public boolean insertNode (Node node, Node cur) {
    if (node.getValue () < cur.getValue ()) {
        if (cur.getLeft () != null) return insertNode (node, cur.getLeft ());
        else {
            cur.setLeft (node);
            node.setParent (cur);
            handleInsertion (node);
            return true;
        }
    } else if (node.getValue () > cur.getValue ()) {
        if (cur.getRight () != null) return insertNode (node, cur.getRight ());
        else {
            cur.setRight (node);
            node.setParent (cur);
            handleInsertion (node);
            return true;
        }
    } else return false;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49991144_49991303_1_15
49991144_50009135_1_12
Title: Unusual Java implementation of red/black tree node insertion 
----------------------------------------

public boolean insertNode (Node node) {
    if (root == null) {
        root = node;
        root.setColor (Node.BLACK);
        return true;
    } else {
        boolean result = insertNode (node, root);
        if (result) {
        }
        return result;
    }
}
----------------------------------------

public boolean insertNode (Node node) {
    if (root == null) {
        root = node;
        root.setColor (Node.BLACK);
        return true;
    } else node.setColor (Node.RED);

    return insertNode (node, root);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49991144_50009135_14_39
49991144_50009135_1_12
Title: Unusual Java implementation of red/black tree node insertion 
----------------------------------------

public boolean insertNode (Node node, Node cur) {
    if (node.getValue () < cur.getValue ()) {
        if (cur.getLeft () != null) return insertNode (node, cur.getLeft ());
        else {
            cur.setLeft (node);
            node.setParent (cur);
            handleInsertion (node);
            return true;
        }
    } else if (node.getValue () > cur.getValue ()) {
        if (cur.getRight () != null) return insertNode (node, cur.getRight ());
        else {
            cur.setRight (node);
            node.setParent (cur);
            handleInsertion (node);
            return true;
        }
    } else return false;

}
----------------------------------------

public boolean insertNode (Node node) {
    if (root == null) {
        root = node;
        root.setColor (Node.BLACK);
        return true;
    } else node.setColor (Node.RED);

    return insertNode (node, root);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49993401_49993714_25_43
49993401_49994281_28_46
Title: "Class Average Methods and array" 
----------------------------------------

private static char average (int [] array) {
    final int sum = Arrays.stream (array).sum ();
    final int b = sum / array.length;
    if (b >= 90) {
        return 'A';
    } else if (b <= 90 && b >= 80) {
        return 'B';
    } else if (b <= 80 && b >= 70) {
        return 'C';
    } else if (b <= 70 && b >= 60) {
        return 'D';
    } else if (b <= 60) {
        return 'F';
    } else {
        return '?';
    }

}
----------------------------------------

public static char average (int [] grades) {
    int sum = 0;
    for (int grade : grades) {
        sum += grade;
    }
    int b = sum / grades.length;
    if (b >= 90) {
        return 'A';
    } else if (b >= 80) {
        return 'B';
    } else if (b >= 70) {
        return 'C';
    } else if (b >= 60) {
        return 'D';
    } else {
        return 'F';
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49993401_49993714_4_23
49993401_49994045_5_41
Title: "Class Average Methods and array" 
----------------------------------------

public static void main (String [] args) {
    char avg;
    int i;
    Scanner scan = new Scanner (System.in);
    System.out.print ("How many grades do you want to enter: ");
    int grades = scan.nextInt ();
    int array [] = new int [grades];
    for (i = 0; i < grades; i ++) {
        System.out.print ("Enter grade " + (i + 1) + ": ");
        array [i] = scan.nextInt ();
    }
    avg = average (array);
    System.out.println ("The class average for the test is: " + avg);
}
----------------------------------------

public static void main (String [] args) {
    char average;
    int i;
    int sum = 0;
    int b;
    Scanner scan = new Scanner (System.in);
    System.out.print ("How many grades do you want to enter: ");
    int grades = scan.nextInt ();
    int array [] = new int [grades];
    for (i = 0; i < grades; i ++) {
        System.out.print ("Enter grade " + (i + 1) + ": ");
        array [i] = scan.nextInt ();
        sum = sum + array [i];
    }
    b = sum / array.length;
    if (b <= 100 && b >= 0) {
        if (b <= 100 && b >= 90) average = 'A';
        else if (b >= 80) average = 'B';
        else if (b >= 70) average = 'C';
        else if (b >= 60) average = 'D';
        else average = 'F';

        System.out.println ("The class average for the test is: " + average);
    } else {
        System.out.println ("Not in range");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49993401_49994045_5_41
49993401_49994281_8_26
Title: "Class Average Methods and array" 
----------------------------------------

public static void main (String [] args) {
    char average;
    int i;
    int sum = 0;
    int b;
    Scanner scan = new Scanner (System.in);
    System.out.print ("How many grades do you want to enter: ");
    int grades = scan.nextInt ();
    int array [] = new int [grades];
    for (i = 0; i < grades; i ++) {
        System.out.print ("Enter grade " + (i + 1) + ": ");
        array [i] = scan.nextInt ();
        sum = sum + array [i];
    }
    b = sum / array.length;
    if (b <= 100 && b >= 0) {
        if (b <= 100 && b >= 90) average = 'A';
        else if (b >= 80) average = 'B';
        else if (b >= 70) average = 'C';
        else if (b >= 60) average = 'D';
        else average = 'F';

        System.out.println ("The class average for the test is: " + average);
    } else {
        System.out.println ("Not in range");
    }
}
----------------------------------------

public static void main (String [] args) {
    char average;
    int i;
    int b;
    Scanner scan = new Scanner (System.in);
    System.out.print ("How many grades do you want to enter: ");
    int grades = scan.nextInt ();
    int array [] = new int [grades];
    for (i = 0; i < grades; i ++) {
        System.out.print ("Enter grade " + (i + 1) + ": ");
        array [i] = scan.nextInt ();
    }
    average = average (array);
    System.out.println ("The class average for the test is: " + average);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49994262_49994506_15_23
49994262_49994506_25_33
Title: """can only iterate over an array""" 
----------------------------------------

Student () {
    ID = 0;
    a1 = 0.0f;
    a2 = 0.0f;
    a3 = 0.0f;
    a4 = 0.0f;
    midterm = 0.0f;
    finalExam = 0.0f;
}
----------------------------------------

Student (int id, float a1, float a2, float a3, float a4, float midterm, float finalExam) {
    ID = id;
    this.a1 = a1;
    this.a2 = a2;
    this.a3 = a3;
    this.a4 = a4;
    this.midterm = midterm;
    this.finalExam = finalExam;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49996353_49996761_1_30
49996353_50013281_2_19
Title: "For loop running a 1000 times the program average number of rolls required to get snake eyes in JAVA" 
----------------------------------------

public static void main (String [] args) {
    int dice1;
    int dice2;
    final int SIZE = 10000000;
    int [] result = new int [SIZE];
    for (int i = 0;
    i < SIZE; i ++) {
        int rolls = 0;
        do {
            rolls ++;
            dice1 = (int) (Math.random () * 6) + 1;
            dice2 = (int) (Math.random () * 6) + 1;
        } while (dice1 != 1 || dice2 != 1);
        result [i] = rolls;
    }
    double avg = Arrays.stream (result).sum () / (double) SIZE;
    System.out.println (avg);
}
----------------------------------------

public static void main (String [] args) {
    int die1, die2, game, rolls;
    rolls = 0;
    for (game = 0; game < 1000; game ++) {
        die1 = 0;
        die2 = 0;
        while (die1 != 1 || die2 != 1) {
            die1 = (int) (Math.random () * 6) + 1;
            die2 = (int) (Math.random () * 6) + 1;
            rolls += 1;
        }
    }
    double average = rolls / (double) game;
    TextIO.putln ("The average number of rools required to get Snake Eyes is " + average + ", after running the program 1000 times.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50000636_50001815_105_119
50000636_50001815_81_122
Title: Problems calling notifyDataSetChange in RecyclerViewHolder 
----------------------------------------

public void onClick (View view) {
    List < String > list = new ArrayList < > ();
    list.add (mTitleText.getText ().toString ());
    list.add (mDescText.getText ().toString ());
    list.add (mPointsText.getText ().toString ());
    list.add (date = new SimpleDateFormat ("dd-MM-yyyy", Locale.getDefault ()).format (new Date ()));
    TempDataReader reader = new TempDataReader (itemView.getContext ());
    new TempDataReader (itemView.getContext ()).saveFile (list);
    callback.run ();
    popupWindow.dismiss ();
}
----------------------------------------

public void onClick (View view) {
    LayoutInflater pInflater = (LayoutInflater) itemView.getContext ().getSystemService (LAYOUT_INFLATER_SERVICE);
    ViewGroup container1 = (ViewGroup) pInflater.inflate (R.layout.confirmation_popup, null);
    final PopupWindow popupWindow = new PopupWindow (container1, 700, 600, true);
    popupTitle = container1.findViewById (R.id.popuptext);
    popAcceptBtn = container1.findViewById (R.id.accept_button);
    popCancelBtn = container1.findViewById (R.id.cancel_button);
    popupTitle.setText (mTitleText.getText ().toString ());
    popCancelBtn.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View view) {
            popupWindow.dismiss ();
        }}

    );
    popAcceptBtn.setOnClickListener (new View.OnClickListener () {
        String date;
        @Override
        public void onClick (View view) {
            List < String > list = new ArrayList < > ();
            list.add (mTitleText.getText ().toString ());
            list.add (mDescText.getText ().toString ());
            list.add (mPointsText.getText ().toString ());
            list.add (date = new SimpleDateFormat ("dd-MM-yyyy", Locale.getDefault ()).format (new Date ()));
            TempDataReader reader = new TempDataReader (itemView.getContext ());
            new TempDataReader (itemView.getContext ()).saveFile (list);
            callback.run ();
            popupWindow.dismiss ();
        }}

    );
    popupWindow.showAtLocation (itemView, Gravity.CENTER, 25, 100);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50002720_50003165_22_31
50002720_50003165_43_57
Title: Queue that is consuming objects of the same interface and executing work in lock 
----------------------------------------

public void run () {
    Command command;
    try {
        while ((command = commands.take ()) != null) {
            command.execute ();
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            commands.put (new Command () {
                @Override
                public void execute () {
                    System.out.println ("Command");
                }}

            );
            Thread.sleep (1000);
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50005046_50005140_1_31
50005046_50005149_22_52
Title: I need to display a student's numerical mark in a class as well as their letter grade. My code does not output the letter. How can I fix this? 
----------------------------------------

public double marks () {
    mark = ((exam * 0.25) + (midterm * 0.25) + (quizTotal * 0.50));
    if (mark >= 90) {
        grade = 'A';
    } else if (mark >= 80 && mark < 90) {
        grade = 'B';
    } else if (mark >= 70 && mark < 80) {
        grade = 'C';
    } else if (mark >= 60 && mark < 70) {
        grade = 'D';
    } else if (mark < 60) {
        grade = 'F';
    } else {
        grade = 'F';
    }

    System.out.println ((name) + ", your mark is " + (mark) + " and you get a(n) " + (grade));
}
----------------------------------------

public void marks () {
    mark = ((exam * 0.25) + (midterm * 0.25) + (quizTotal * 0.50));
    if (mark >= 90) {
        grade = 'A';
    } else if (mark >= 80) {
        grade = 'B';
    } else if (mark >= 70) {
        grade = 'C';
    } else if (mark >= 60) {
        grade = 'D';
    } else {
        grade = 'F';
    }

    System.out.println ((name) + ", your mark is " + (mark) + " and you get a(n) " + (grade));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5003565_45960565_103_116
5003565_45960565_84_94
Title: Java Policy file - Deny permissions to a codebase 
----------------------------------------

public static DeniedPermission newDeniedPermission (Permission target) {
    if (target == null) {
        throw new IllegalArgumentException ("[target] must not be null.");
    }
    if (target instanceof DeniedPermission || target instanceof UnresolvedPermission) {
        throw new IllegalArgumentException ("[target] must not be a DeniedPermission or an UnresolvedPermission.");
    }
    StringBuilder sb = new StringBuilder (target.getClass ().getName ()).append (":").append (target.getName ());
    String targetActions = target.getActions ();
    if (targetActions != null) {
        sb.append (":").append (targetActions);
    }
    return new DeniedPermission (sb.toString (), target);
}
----------------------------------------

public static DeniedPermission newDeniedPermission (String targetClassName, String targetName, String targetActions) {
    if (targetClassName == null || targetClassName.trim ().isEmpty () || targetName == null) {
        throw new IllegalArgumentException ("[targetClassName] and [targetName] must not be null or empty.");
    }
    StringBuilder sb = new StringBuilder (targetClassName).append (":").append (targetName);
    if (targetName != null) {
        sb.append (":").append (targetName);
    }
    return new DeniedPermission (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50038221_50038326_1_16
50038221_50038430_1_12
Title: logic error trying to find average of 2d array 
----------------------------------------

public static double Ave (Array_two a) {
    int count = a.rows * a.cols;
    if (count == 0) {
        return 0;
    }
    double total = 0;
    for (int i = 0;
    i < a.rows; i ++) {
        for (int j = 0;
        j < a.cols; j ++) {
            total += a.values [i] [j];
        }
    }
    return total / count;
}
----------------------------------------

public static double Ave (Array_two a) {
    double average = 0;
    int sum = 0;
    int total = a.rows * a.cols;
    for (int i = 0;
    i < a.rows; i ++) {
        for (int j = 0;
        j < a.cols; j ++) {
            sum += a.values [i] [j];
        }
    }
    average = sum / total;
    return average;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50038221_50038430_1_12
50038221_50038490_1_11
Title: logic error trying to find average of 2d array 
----------------------------------------

public static double Ave (Array_two a) {
    double average = 0;
    int sum = 0;
    int total = a.rows * a.cols;
    for (int i = 0;
    i < a.rows; i ++) {
        for (int j = 0;
        j < a.cols; j ++) {
            sum += a.values [i] [j];
        }
    }
    average = sum / total;
    return average;
}
----------------------------------------

public static double Ave (Array_two a) {
    int total = a.rows * a.cols;
    double sum = 0;
    for (int i = 0;
    i < a.rows; i ++) {
        for (int j = 0;
        j < cols; j ++) {
            sum += a.values [i] [j];
        }
    }
    return sum / total;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50045055_50046142_1_15
50045055_50047715_1_17
Title: passing a variable to classes 
----------------------------------------

@Override
protected void onActivityResult (int requestCode, int resultCode, Intent data) {
    if (requestCode == REQUEST_CODE) {
        if (resultCode == Activity.RESULT_OK) {
            ArrayList < String > WhitelistNames = data.getStringArrayListExtra ("WhitelistNames");
            Log.d ("ContactsContracts", "\nPREVIOUS LIST  : " + ContactsNumbers);
        }
    }
}
----------------------------------------

@Override
protected void onActivityResult (int requestCode, int resultCode, Intent data) {
    if (requestCode == 0) {
        if (requestCode == CommonStatusCodes.SUCCESS) {
            if (data != null) {
                Barcode barcode = data.getParcelableExtra ("barcode");
                barcodeResult.setText ("Barcode value : " + barcode.displayValue);
                resultsBreakdown (barcode.displayValue.toString ());
            } else {
                barcodeResult.setText ("No Barcode Found");
            }
            super.onActivityResult (requestCode, resultCode, data);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50054709_50054753_1_15
50054709_50055980_1_17
Title: Format Words Into A Sentence 
----------------------------------------

public static String formatWords (String [] words) {
    if (words == null || words.length == 0) {
        return "";
    }
    StringBuilder ans = new StringBuilder ();
    for (int i = 0;
    i < words.length; i ++) {
        String sep = ", ";
        if (i == 0) sep = "";
        else if (i == words.length - 1) sep = " and ";

        ans.append (sep).append (words [i]);
    }
    return ans.toString ();
}
----------------------------------------

public static String formatWords (String [] words) {
    String res = Arrays.asList (words).stream ().filter (word -> ! (word == null)).filter (word -> ! word.equals ("")).collect (Collectors.joining (","));
    if (! res.contains (",")) return res;

    int indexOfLastComma = res.lastIndexOf (",");
    String resultuntilLastWord = res.substring (0, indexOfLastComma);
    String lastWord = res.substring (indexOfLastComma + 1);
    res = resultuntilLastWord + " and " + lastWord;
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50054709_50054753_1_15
50054709_50056238_1_26
Title: Format Words Into A Sentence 
----------------------------------------

public static String formatWords (String [] words) {
    if (words == null || words.length == 0) {
        return "";
    }
    StringBuilder ans = new StringBuilder ();
    for (int i = 0;
    i < words.length; i ++) {
        String sep = ", ";
        if (i == 0) sep = "";
        else if (i == words.length - 1) sep = " and ";

        ans.append (sep).append (words [i]);
    }
    return ans.toString ();
}
----------------------------------------

public static String formatWords (String [] words) {
    Vector < String > v = new Vector < String > ();
    if (words == null || words.length == 0) return "";

    for (int i = 0;
    i < words.length; i ++) if (! words [i].equals ("")) v.add (words [i]);

    String str = "";
    for (int i = v.size () - 1;
    i >= 0; i --) {
        if (str.equals ("")) {
            if (i > 0) str = " and " + v.get (i);
            else str = v.get (i);

        } else {
            if (i == 0) str = v.get (i) + str;
            else str = "," + v.get (i) + str;

        }
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50054709_50055980_1_17
50054709_50056238_1_26
Title: Format Words Into A Sentence 
----------------------------------------

public static String formatWords (String [] words) {
    String res = Arrays.asList (words).stream ().filter (word -> ! (word == null)).filter (word -> ! word.equals ("")).collect (Collectors.joining (","));
    if (! res.contains (",")) return res;

    int indexOfLastComma = res.lastIndexOf (",");
    String resultuntilLastWord = res.substring (0, indexOfLastComma);
    String lastWord = res.substring (indexOfLastComma + 1);
    res = resultuntilLastWord + " and " + lastWord;
    return res;
}
----------------------------------------

public static String formatWords (String [] words) {
    Vector < String > v = new Vector < String > ();
    if (words == null || words.length == 0) return "";

    for (int i = 0;
    i < words.length; i ++) if (! words [i].equals ("")) v.add (words [i]);

    String str = "";
    for (int i = v.size () - 1;
    i >= 0; i --) {
        if (str.equals ("")) {
            if (i > 0) str = " and " + v.get (i);
            else str = v.get (i);

        } else {
            if (i == 0) str = v.get (i) + str;
            else str = "," + v.get (i) + str;

        }
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50057081_50057579_1_10
50057081_50058150_1_10
Title: How to check if a word is nice (Java) 
----------------------------------------

public static String findNice (String word) {
    int length = word.length ();
    int haftLength = length / 2;
    for (int i = 0;
    i <= haftLength; i ++) {
        if (getFirstWordByIndex (word, i).equalsIgnoreCase (getLastWordByIndex (word, i, length))) {
            return "NICE";
        }
    }
    return "NOT";
}
----------------------------------------

public static String findNice (String word) {
    String result = "NOT";
    for (int i = 0;
    i < word.length () / 2; i ++) {
        String prefix = word.substring (0, i + 1);
        if (word.endsWith (prefix)) {
            result = "NICE! Prefix = " + prefix;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50060312_50062786_26_49
50060312_50062786_54_71
Title: Iterating and modifying java queue at the same time 
----------------------------------------

public void run () {
    Iterator < Integer > iter = numbers.iterator ();
    while (iter.hasNext ()) {
        int first = numbers.peek ();
        int size = numbers.size ();
        int last = first + size - 1;
        int current = iter.next ();
        System.out.println ("list from " + first + " to " + last + " @ " + current);
        output.set (current);
        try {
            Thread.sleep (100);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        for (int j = 0;
        j < 5; j ++) {
            numbers.add (insert.getAndIncrement ());
        }
        try {
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50060312_50062786_26_49
50060312_50062786_76_94
Title: Iterating and modifying java queue at the same time 
----------------------------------------

public void run () {
    Iterator < Integer > iter = numbers.iterator ();
    while (iter.hasNext ()) {
        int first = numbers.peek ();
        int size = numbers.size ();
        int last = first + size - 1;
        int current = iter.next ();
        System.out.println ("list from " + first + " to " + last + " @ " + current);
        output.set (current);
        try {
            Thread.sleep (100);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
        int current = output.intValue ();
        while (numbers.peek () < current) numbers.poll ();

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50060312_50062786_54_71
50060312_50062786_76_94
Title: Iterating and modifying java queue at the same time 
----------------------------------------

public void run () {
    while (true) {
        for (int j = 0;
        j < 5; j ++) {
            numbers.add (insert.getAndIncrement ());
        }
        try {
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
        int current = output.intValue ();
        while (numbers.peek () < current) numbers.poll ();

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50067169_50067539_1_16
50067169_50171292_23_36
Title: Sort even and odd part of array 
----------------------------------------

private static void sort (int [] arr) {
    int index = 0;
    int n = arr.length;
    while (index < n) {
        if (index == 0) index ++;

        if (compare (arr [index], arr [index - 1])) index ++;
        else {
            int temp = arr [index];
            arr [index] = arr [index - 1];
            arr [index - 1] = temp;
            index --;
        }
    }
}
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50070267_50075009_23_35
50070267_50075009_38_63
Title: mapstruct update mapping one-to-many relationship by merging child dto with existing child entities 
----------------------------------------

public ParentEntity toEntity (ParentDto s) {
    if (s == null) {
        return null;
    }
    ParentEntity parentEntity = new ParentEntity ();
    parentEntity.setId (s.getId ());
    parentEntity.setName (s.getName ());
    parentEntity.setChildren (childDtoListToChildEntityList (s.getChildren ()));
    return parentEntity;
}
----------------------------------------

public ParentEntity toEntity (ParentDto s, ParentEntity entity) {
    if (s == null) {
        return null;
    }
    entity.setId (s.getId ());
    entity.setName (s.getName ());
    if (entity.getChildren () != null) {
        List < ChildEntity > list = childDtoListToChildEntityList (s.getChildren ());
        if (list != null) {
            entity.getChildren ().clear ();
            entity.getChildren ().addAll (list);
        } else {
            entity.setChildren (null);
        }
    } else {
        List < ChildEntity > list = childDtoListToChildEntityList (s.getChildren ());
        if (list != null) {
            entity.setChildren (list);
        }
    }
    return entity;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50082464_50089464_3_20
50082464_50142724_1_13
Title: How do I get the selected item from a JMenu to change the text color of a text area? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == black) textArea.setForeground (Color.BLACK);
    else if (e.getSource () == red) textArea.setForeground (Color.RED);
    else if (e.getSource () == green) textArea.setForeground (Color.GREEN);
    else if (e.getSource () == blue) textArea.setForeground (Color.BLUE);
    else if (e.getSource () == orange) textArea.setForeground (Color.ORANGE);
    else if (e.getSource () == pink) textArea.setForeground (Color.PINK);
    else if (e.getSource () == yellow) textArea.setForeground (Color.YELLOW);

}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    switch (e.getActionCommand ()) {
        case "Black" :
            textArea.setForeground (Color.BLACK);
            break;
        case "Red" :
            textArea.setForeground (Color.RED);
            break;
        case "Green" :
            textArea.setForeground (Color.GREEN);
            break;
        case "Blue" :
            textArea.setForeground (Color.BLUE);
            break;
        case "Orange" :
            textArea.setForeground (Color.ORANGE);
            break;
        case "Pink" :
            textArea.setForeground (Color.PINK);
            break;
        case "Yellow" :
            textArea.setForeground (Color.YELLOW);
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50082620_50083014_1_10
50082620_50083831_1_19
Title: Android Buttons Can't be Clicked 
----------------------------------------

@Override
public void onClick (View view) {
    Log.i (LOG_KEY, "A button was clicked.");
    if (getActivity () instanceof IToolbarCallback) {
        Log.i (LOG_KEY, "IToolbarCallback is implemented.");
    } else {
        Log.e (LOG_KEY, "No IToolbarCallback implemented!!!");
    }
}
----------------------------------------

@Override
public void onClick (View v) {
    switch (v.getId ()) {
        case feed.getId () :
            itc.feed ();
            break;
        case profile.getId () :
            itc.profile ();
            break;
        case friends.getId () :
            itc.friends ();
            break;
        case logout.getId () :
            itc.logout ();
            break;
        default :
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50083076_50083112_1_38
50083076_50083150_1_30
Title: Java printing database records on separate lines 
----------------------------------------

private void execute () throws SQLException {
    String query = "SELECT * FROM customers";
    ResultSet rs = stmt.executeQuery (query);
    String result = "";
    String singleResult = "";
    while (rs.next ()) {
        if (cb1.isSelected ()) {
            int custid = rs.getInt ("custid");
            singleResult += custid + " ";
        }
        if (cb2.isSelected ()) {
            String name = rs.getString ("name");
            singleResult += name + " ";
        }
        if (cb3.isSelected ()) {
            String address = rs.getString ("address");
            singleResult += address + " ";
        }
        if (cb4.isSelected ()) {
            String city = rs.getString ("city");
            singleResult += city + " ";
        }
        if (cb5.isSelected ()) {
            String state = rs.getString ("state");
            singleResult += state + " ";
        }
        if (cb6.isSelected ()) {
            int zip = rs.getInt ("zip");
            singleResult += zip + " ";
        }
        System.out.println (singleResult);
        result += singleResult;
    }
    results.setText (result);
    stmt.close ();
}
----------------------------------------

private void execute () throws SQLException {
    String query = "SELECT * FROM customers";
    ResultSet rs = stmt.executeQuery (query);
    StringJoiner result = new StringJoiner (System.lineSeparator ());
    while (rs.next ()) {
        StringJoiner lineJoiner = new StringJoiner (", ");
        if (cb1.isSelected ()) {
            lineJoiner.add (String.valueOf (rs.getInt ("custid")));
        }
        if (cb2.isSelected ()) {
            lineJoiner.add (rs.getString ("name"));
        }
        if (cb3.isSelected ()) {
            lineJoiner.add (rs.getString ("address"));
        }
        if (cb4.isSelected ()) {
            lineJoiner.add (rs.getString ("city"));
        }
        if (cb5.isSelected ()) {
            lineJoiner.add (rs.getString ("state"));
        }
        if (cb6.isSelected ()) {
            lineJoiner.add (String.valueOf (rs.getInt ("zip")));
        }
        System.out.println (lineJoiner);
        result.add (lineJoiner.toString ());
    }
    results.setText (result.toString ());
    stmt.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50085582_50086203_29_43
50085582_50086461_36_50
Title: Display java console in a external jframe 
----------------------------------------

public Console () throws Exception {
    textArea = new JTextArea (24, 80);
    textArea.setBackground (Color.BLACK);
    textArea.setForeground (Color.LIGHT_GRAY);
    textArea.setFont (new Font (Font.MONOSPACED, Font.PLAIN, 12));
    frame.add (textArea);
    frame.pack ();
    frame.setVisible (true);
    redirectOut ();
    System.out.println ("Hello world!");
    System.out.println ("test");
}
----------------------------------------

public Console () {
    textArea.setBackground (Color.BLACK);
    textArea.setForeground (Color.LIGHT_GRAY);
    textArea.setFont (new Font (Font.MONOSPACED, Font.PLAIN, 12));
    System.setOut (new PrintStream (new OutputStream () {
        @Override
        public void write (int b) throws IOException {
            textArea.append (String.valueOf ((char) b));
        }}

    ));
    frame.add (textArea);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50092400_50094125_53_82
50092400_50103780_82_92
Title: Values of counter changes after scrolling ExpendableListView 
----------------------------------------

public View getGroupView (int groupPosition, boolean b, View view, ViewGroup viewGroup) {
    String itemGroup = getGroup (groupPosition);
    GroupViewHolder groupViewHolder;
    if (view == null) {
        LayoutInflater inflater = (LayoutInflater) context.getSystemService (Context.LAYOUT_INFLATER_SERVICE);
        view = inflater.inflate (R.layout.expanded_list_group, null);
        groupViewHolder = new GroupViewHolder ();
        groupViewHolder.tvGroup = view.findViewById (R.id.tv_group);
        groupViewHolder.cbGroup = view.findViewById (R.id.cb_group);
        groupViewHolder.cbGroup.setOnClickListener (new View.OnClickListener () {
            @Override
            public void onClick (View view) {
                int pos = (int) view.getTag ();
                checkedGroup [pos] = ! checkedGroup [pos];
                for (ChildItemSample item : listChild.get (listGroup.get (pos))) {
                    item.setChecked (checkedGroup [pos]);
                }
                notifyDataSetChanged ();
            }}

        );
        view.setTag (groupViewHolder);
    } else {
        groupViewHolder = (GroupViewHolder) view.getTag ();
    }
    groupViewHolder.tvGroup.setText (String.format ("%s (%d)", itemGroup, getChildrenCount (groupPosition)));
    if (checkedGroup [groupPosition]) groupViewHolder.cbGroup.setChecked (true);
    else groupViewHolder.cbGroup.setChecked (false);

    groupViewHolder.cbGroup.setTag (groupPosition);
    return view;
}
----------------------------------------

public View getGroupView (int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
    String headerTitle = getGroup (groupPosition);
    if (convertView == null) {
        LayoutInflater inflater = (LayoutInflater) this.context.getSystemService (Context.LAYOUT_INFLATER_SERVICE);
        convertView = inflater.inflate (R.layout.list_group, null);
    }
    TextView listHeader = (TextView) convertView.findViewById (R.id.list_header);
    listHeader.setTypeface (null, Typeface.BOLD);
    listHeader.setText (headerTitle);
    return convertView;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50092400_50094125_85_151
50092400_50103780_95_127
Title: Values of counter changes after scrolling ExpendableListView 
----------------------------------------

public View getChildView (int groupPosition, int childPosition, boolean b, View view, ViewGroup viewGroup) {
    ChildItemSample expandedListText = getChild (groupPosition, childPosition);
    ChildViewHolder childViewHolder;
    if (view == null) {
        LayoutInflater inflater = (LayoutInflater) context.getSystemService (Context.LAYOUT_INFLATER_SERVICE);
        view = inflater.inflate (R.layout.expanded_list_item, null);
        childViewHolder = new ChildViewHolder ();
        childViewHolder.tvChild = view.findViewById (R.id.tv_child);
        childViewHolder.cbChild = view.findViewById (R.id.cb_child);
        childViewHolder.tvQty = view.findViewById (R.id.tv_qty);
        childViewHolder.btInc = view.findViewById (R.id.bt_inc);
        childViewHolder.btDec = view.findViewById (R.id.bt_dec);
        childViewHolder.cbChild.setOnClickListener (new View.OnClickListener () {
            @Override
            public void onClick (View view) {
                CheckBox cb = (CheckBox) view;
                Pos pos = (Pos) cb.getTag ();
                ChildItemSample selectedItem = getChild (pos.group, pos.child);
                selectedItem.setChecked (cb.isChecked ());
                if (cb.isChecked ()) {
                    checkedBoxesCount ++;
                    Toast.makeText (context, "Checked value is: " + getChild (pos.group, pos.child).getName (), Toast.LENGTH_SHORT).show ();
                } else {
                    checkedBoxesCount --;
                    if (checkedBoxesCount == 0) {
                        Toast.makeText (context, "nothing checked", Toast.LENGTH_SHORT).show ();
                    } else {
                        Toast.makeText (context, "unchecked", Toast.LENGTH_SHORT).show ();
                    }
                }
                notifyDataSetChanged ();
            }}

        );
        childViewHolder.btInc.setOnClickListener (new View.OnClickListener () {
            @Override
            public void onClick (View view) {
                Button bt = (Button) view;
                Pos pos = (Pos) bt.getTag ();
                ChildItemSample selectedItem = getChild (pos.group, pos.child);
                selectedItem.setQty (selectedItem.getQty () + 1);
                notifyDataSetChanged ();
            }}

        );
        childViewHolder.btDec.setOnClickListener (new View.OnClickListener () {
            @Override
            public void onClick (View view) {
                Button bt = (Button) view;
                Pos pos = (Pos) bt.getTag ();
                ChildItemSample selectedItem = getChild (pos.group, pos.child);
                if (selectedItem.getQty () > 0) selectedItem.setQty (selectedItem.getQty () - 1);

                notifyDataSetChanged ();
            }}

        );
    } else {
        childViewHolder = (ChildViewHolder) view.getTag ();
    }
    childViewHolder.cbChild.setChecked (expandedListText.isChecked ());
    childViewHolder.tvChild.setText (expandedListText.getName () + " :");
    childViewHolder.tvQty.setText ("" + expandedListText.getQty ());
    childViewHolder.cbChild.setTag (new Pos (groupPosition, childPosition));
    childViewHolder.btInc.setTag (new Pos (groupPosition, childPosition));
    childViewHolder.btDec.setTag (new Pos (groupPosition, childPosition));
    view.setTag (childViewHolder);
    return view;
}
----------------------------------------

public View getChildView (int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
    ViewHolder viewHolder;
    if (convertView == null) {
        LayoutInflater inflater = (LayoutInflater) this.context.getSystemService (Context.LAYOUT_INFLATER_SERVICE);
        convertView = inflater.inflate (R.layout.list_item, null);
        TextView textListChild = (TextView) convertView.findViewById (R.id.list_item_header);
        TextView itemsCounter = (TextView) convertView.findViewById (R.id.items_counter);
        Button addItemButton = (Button) convertView.findViewById (R.id.plus_btn);
        viewHolder = new ViewHolder ();
        viewHolder.childText = textListChild;
        viewHolder.counterText = itemsCounter;
        viewHolder.addItemButton = addItemButton;
    } else {
        viewHolder = (ViewHolder) convertView.getTag ();
    }
    ChildItem child = getChild (groupPosition, childPosition);
    viewHolder.childText.setText (child.name);
    viewHolder.counterText.setText ("" + child.quantity);
    viewHolder.addItemButton.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View v) {
            Pos pos = (Pos) v.getTag ();
            ChildItem selectedItem = getChild (pos.group, pos.child);
            selectedItem.quantity = selectedItem.quantity + 1;
            notifyDataSetChanged ();
            PutOrderDrinks.addOrder (selectedItem.name);
        }}

    );
    viewHolder.addItemButton.setTag (new Pos (groupPosition, childPosition));
    convertView.setTag (viewHolder);
    return convertView;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50106794_50107238_23_53
50106794_50121902_12_39
Title: JavaFX Dynamic Code 
----------------------------------------

public void start (Stage primaryStage) {
    AtomicLong i = new AtomicLong ();
    Label label = new Label ();
    Button btn = new Button ();
    Timeline timeline = new Timeline (new KeyFrame (Duration.seconds (.5), (ActionEvent event) -> {
        label.setText (label.getText () + Long.toString (i.getAndIncrement ()));
    }));
    timeline.setCycleCount (10000000);
    timeline.setOnFinished (event -> {
        btn.setDisable (false);
    });
    btn.setText ("Start");
    btn.setOnAction ((ActionEvent event) -> {
        btn.setDisable (true);
        timeline.play ();
    });
    StackPane stackPane = new StackPane (label);
    VBox root = new VBox (stackPane, new StackPane (btn));
    VBox.setVgrow (stackPane, Priority.ALWAYS);
    Scene scene = new Scene (root, 300, 250);
    primaryStage.setTitle ("Hello World!");
    primaryStage.setScene (scene);
    primaryStage.show ();
}
----------------------------------------

public void start (Stage primaryStage) {
    StackPane pane = new StackPane ();
    Label lblText = new Label ("");
    pane.getChildren ().add (lblText);
    new Thread (new Runnable () {
        @Override
        public void run () {
            try {
                for (i = 0; i < 10000; i ++) {
                    Platform.runLater (new Runnable () {
                        @Override
                        public void run () {
                            lblText.setText (lblText.getText () + i);
                        }}

                    );
                    Thread.sleep (200);
                }
            } catch (InterruptedException ex) {
            }
        }}

    ).start ();
    Scene scene = new Scene (pane, 200, 50);
    primaryStage.setTitle ("FlashText");
    primaryStage.setScene (scene);
    primaryStage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50117886_50117954_2_13
50117886_50118810_1_12
Title: reversing a string using character array 
----------------------------------------

public static String reverse (String s) {
    if (s == null) return null;

    char [] ca = s.toCharArray ();
    for (int i = 0;
    i < ca.length / 2; i ++) {
        int j = ca.length - i - 1;
        char c = ca [i];
        ca [i] = ca [j];
        ca [j] = c;
    }
    return String.valueOf (ca);
}
----------------------------------------

private static String reverse (String s) {
    char [] chars = s.toCharArray ();
    int length = s.length ();
    for (int j = (length - 1) / 2;
    j >= 0; j --) {
        int k = length - j - 1;
        char cj = chars [j];
        char ck = chars [k];
        chars [j] = ck;
        chars [k] = cj;
    }
    return new String (chars);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50126259_50126277_1_15
50126259_50128481_1_22
Title: "Creating an alternating array method in java can you tell me where I'm going wrong?" 
----------------------------------------

public static int [] alternate (int [] a, int [] b) {
    int [] c = new int [a.length + b.length];
    int counter = 0;
    for (int i = 0;
    i < a.length; i ++) {
        c [counter ++] = a [i];
        c [counter ++] = b [i];
    }
    return c;
}
----------------------------------------

public static int [] alternate (int [] a, int [] b) {
    int min, max;
    int count = 0;
    min = Math.min (a.length, b.length);
    max = Math.max (a.length, b.length);
    int c [] = new int [min + max];
    for (int i = 0;
    i < max; i ++) {
        if (i < min) {
            c [count ++] = a [i];
            c [count ++] = b [i];
        } else {
            if (a.length == min) {
                c [count ++] = b [i];
            } else {
                c [count ++] = a [i];
            }
        }
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50134298_50134617_2_32
50134298_50135875_1_20
Title: Find number of elements in range from map object 
----------------------------------------

public static void main (String [] args) {
    Map < String, BigDecimal > aMap = new HashMap < > ();
    aMap.put ("A", new BigDecimal (12));
    aMap.put ("B", new BigDecimal (23));
    aMap.put ("C", new BigDecimal (67));
    aMap.put ("D", new BigDecimal (99));
    Map < String, Long > o = aMap.entrySet ().stream ().collect (Collectors.groupingBy (a -> {
        if (a.getValue ().compareTo (new BigDecimal (0)) > 0 && a.getValue ().compareTo (new BigDecimal (25)) < 0) return "0-25";

        if (a.getValue ().compareTo (new BigDecimal (26)) > 0 && a.getValue ().compareTo (new BigDecimal (50)) < 0) return "26-50";

        if (a.getValue ().compareTo (new BigDecimal (51)) > 0 && a.getValue ().compareTo (new BigDecimal (75)) < 0) return "51-75";

        if (a.getValue ().compareTo (new BigDecimal (76)) > 0 && a.getValue ().compareTo (new BigDecimal (100)) < 0) return "76-100";

        return "not-found";
    }, Collectors.counting ()));
    System.out.print ("Result=" + o);
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > resMap = new HashMap < > ();
    int range = 25;
    Map < String, BigDecimal > aMap = new HashMap < > ();
    aMap.put ("A", new BigDecimal (12));
    aMap.put ("B", new BigDecimal (23));
    aMap.put ("C", new BigDecimal (67));
    aMap.put ("D", new BigDecimal (99));
    aMap.values ().forEach (v -> {
        int lower = v.divide (new BigDecimal (range)).intValue ();
        String key = lower * range + "-" + (lower * range + range - 1);
        resMap.put (key, resMap.getOrDefault (key, 0) + 1);
    });
    resMap.entrySet ().forEach (e -> System.out.println (e.getKey () + " = " + e.getValue ()));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5013917_37279892_113_124
5013917_5016720_90_101
Title: "Can I serve JSPs from inside a JAR in lib or is there a workaround?" 
----------------------------------------

private static void copyAndClose (InputStream in, OutputStream out) throws IOException {
    try {
        byte [] b = new byte [IO_BUFFER_SIZE];
        int read;
        while ((read = in.read (b)) != - 1) {
            out.write (b, 0, read);
        }
    } finally {
        in.close ();
        out.close ();
    }
}
----------------------------------------

private static void copyAndClose (InputStream in, OutputStream out) throws IOException {
    try {
        byte [] b = new byte [IO_BUFFER_SIZE];
        int read;
        while ((read = in.read (b)) != - 1) {
            out.write (b, 0, read);
        }
    } finally {
        in.close ();
        out.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5013917_37279892_78_104
5013917_5016720_56_81
Title: "Can I serve JSPs from inside a JAR in lib or is there a workaround?" 
----------------------------------------

public void extractFiles () throws IOException {
    try {
        String path = servletContext.getRealPath ("/WEB-INF/lib/" + jarFile);
        JarFile jarFile = new JarFile (path);
        Enumeration < JarEntry > entries = jarFile.entries ();
        while (entries.hasMoreElements ()) {
            JarEntry entry = entries.nextElement ();
            if (pathMatcher.match (resourcePathPattern, entry.getName ())) {
                String fileName = entry.getName ().replaceFirst (".*\\/", "");
                File destinationFolder = new File (servletContext.getRealPath (destination));
                InputStream inputStream = jarFile.getInputStream (entry);
                File materializedJsp = new File (destinationFolder, fileName);
                listOfCopiedFiles.add (materializedJsp);
                FileOutputStream outputStream = new FileOutputStream (materializedJsp);
                copyAndClose (inputStream, outputStream);
            }
        }
    } catch (MalformedURLException e) {
        throw new FileNotFoundException ("Cannot find jar file in libs: " + jarFile);
    } catch (IOException e) {
        throw new IOException ("IOException while moving resources.", e);
    }
}
----------------------------------------

public void extractFiles () throws IOException {
    try {
        String path = servletContext.getRealPath ("/WEB-INF/lib/" + jarFile);
        JarFile jarFile = new JarFile (path);
        Enumeration < JarEntry > entries = jarFile.entries ();
        while (entries.hasMoreElements ()) {
            JarEntry entry = entries.nextElement ();
            if (pathMatcher.match (resourcePathPattern, entry.getName ())) {
                String fileName = entry.getName ().replaceFirst (".*\\/", "");
                File destinationFolder = new File (servletContext.getRealPath (destination));
                InputStream inputStream = jarFile.getInputStream (entry);
                File materializedJsp = new File (destinationFolder, fileName);
                FileOutputStream outputStream = new FileOutputStream (materializedJsp);
                copyAndClose (inputStream, outputStream);
            }
        }
    } catch (MalformedURLException e) {
        throw new FileNotFoundException ("Cannot find jar file in libs: " + jarFile);
    } catch (IOException e) {
        throw new IOException ("IOException while moving resources.", e);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_1837766_1_15
1837698_39078161_1_24
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int zerosPos = 0;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            num [i] = num [zerosPos];
            num [zerosPos] = 0;
            ++ zerosPos;
        }
    }
    return num;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    for (int j = 0;
    j < nums.length; j ++) {
        for (int i = 0;
        i < nums.length; i ++) {
            if (i > 0 && nums [i] == 0) {
                if (nums [i - 1] != 0) {
                    int temp = nums [i];
                    nums [i] = nums [i - 1];
                    nums [i - 1] = temp;
                }
            }
            continue;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_1837766_1_15
1837698_41390353_1_23
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int zerosPos = 0;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            num [i] = num [zerosPos];
            num [zerosPos] = 0;
            ++ zerosPos;
        }
    }
    return num;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    ArrayList < Integer > zeroPlaces = new ArrayList < Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 0) {
            zeroPlaces.add (i);
        }
    }
    int [] ret = nums;
    for (int i = 0;
    i < zeroPlaces.size (); i ++) {
        int temp = ret [i];
        ret [i] = ret [zeroPlaces.get (i)];
        ret [zeroPlaces.get (i)] = temp;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_1837766_1_15
1837698_49193124_1_12
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int zerosPos = 0;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            num [i] = num [zerosPos];
            num [zerosPos] = 0;
            ++ zerosPos;
        }
    }
    return num;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    Arrays.sort (nums);
    Integer [] t = Arrays.stream (nums).boxed ().toArray (Integer [] :: new);
    for (int i = nums.length - 1;
    i >= 0; -- i) {
        if (nums [i] < 0) {
            Arrays.sort (t, Collections.reverseOrder ());
            int [] newNums = Arrays.stream (t).mapToInt (Integer :: intValue).toArray ();
            return newNums;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_24720884_1_15
1837698_24720914_1_20
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    int t = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i + 1;
        j < nums.length; j ++) if (nums [j] == 0 && nums [i] != 0) {
            t = nums [i];
            nums [i] = nums [j];
            nums [j] = t;
        }

    }
    return nums;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    int k = 0;
    int narr [] = new int [nums.length];
    for (int i = 0;
    i < nums.length; i ++) if (nums [i] == 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    for (int i = 0;
    i < nums.length; i ++) if (nums [i] != 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    return narr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_24720884_1_15
1837698_39078161_1_24
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    int t = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i + 1;
        j < nums.length; j ++) if (nums [j] == 0 && nums [i] != 0) {
            t = nums [i];
            nums [i] = nums [j];
            nums [j] = t;
        }

    }
    return nums;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    for (int j = 0;
    j < nums.length; j ++) {
        for (int i = 0;
        i < nums.length; i ++) {
            if (i > 0 && nums [i] == 0) {
                if (nums [i - 1] != 0) {
                    int temp = nums [i];
                    nums [i] = nums [i - 1];
                    nums [i - 1] = temp;
                }
            }
            continue;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_24720884_1_15
1837698_41390353_1_23
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    int t = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i + 1;
        j < nums.length; j ++) if (nums [j] == 0 && nums [i] != 0) {
            t = nums [i];
            nums [i] = nums [j];
            nums [j] = t;
        }

    }
    return nums;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    ArrayList < Integer > zeroPlaces = new ArrayList < Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 0) {
            zeroPlaces.add (i);
        }
    }
    int [] ret = nums;
    for (int i = 0;
    i < zeroPlaces.size (); i ++) {
        int temp = ret [i];
        ret [i] = ret [zeroPlaces.get (i)];
        ret [zeroPlaces.get (i)] = temp;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_24720884_1_15
1837698_49193124_1_12
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    int t = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i + 1;
        j < nums.length; j ++) if (nums [j] == 0 && nums [i] != 0) {
            t = nums [i];
            nums [i] = nums [j];
            nums [j] = t;
        }

    }
    return nums;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    Arrays.sort (nums);
    Integer [] t = Arrays.stream (nums).boxed ().toArray (Integer [] :: new);
    for (int i = nums.length - 1;
    i >= 0; -- i) {
        if (nums [i] < 0) {
            Arrays.sort (t, Collections.reverseOrder ());
            int [] newNums = Arrays.stream (t).mapToInt (Integer :: intValue).toArray ();
            return newNums;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_24720914_1_20
1837698_39078161_1_24
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    int k = 0;
    int narr [] = new int [nums.length];
    for (int i = 0;
    i < nums.length; i ++) if (nums [i] == 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    for (int i = 0;
    i < nums.length; i ++) if (nums [i] != 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    return narr;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    for (int j = 0;
    j < nums.length; j ++) {
        for (int i = 0;
        i < nums.length; i ++) {
            if (i > 0 && nums [i] == 0) {
                if (nums [i - 1] != 0) {
                    int temp = nums [i];
                    nums [i] = nums [i - 1];
                    nums [i - 1] = temp;
                }
            }
            continue;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_24720914_1_20
1837698_41390353_1_23
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    int k = 0;
    int narr [] = new int [nums.length];
    for (int i = 0;
    i < nums.length; i ++) if (nums [i] == 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    for (int i = 0;
    i < nums.length; i ++) if (nums [i] != 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    return narr;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    ArrayList < Integer > zeroPlaces = new ArrayList < Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 0) {
            zeroPlaces.add (i);
        }
    }
    int [] ret = nums;
    for (int i = 0;
    i < zeroPlaces.size (); i ++) {
        int temp = ret [i];
        ret [i] = ret [zeroPlaces.get (i)];
        ret [zeroPlaces.get (i)] = temp;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_24720914_1_20
1837698_49193124_1_12
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    int k = 0;
    int narr [] = new int [nums.length];
    for (int i = 0;
    i < nums.length; i ++) if (nums [i] == 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    for (int i = 0;
    i < nums.length; i ++) if (nums [i] != 0) {
        narr [k] = nums [i];
        k = k + 1;
    }

    return narr;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    Arrays.sort (nums);
    Integer [] t = Arrays.stream (nums).boxed ().toArray (Integer [] :: new);
    for (int i = nums.length - 1;
    i >= 0; -- i) {
        if (nums [i] < 0) {
            Arrays.sort (t, Collections.reverseOrder ());
            int [] newNums = Arrays.stream (t).mapToInt (Integer :: intValue).toArray ();
            return newNums;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_39078161_1_24
1837698_41390353_1_23
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    for (int j = 0;
    j < nums.length; j ++) {
        for (int i = 0;
        i < nums.length; i ++) {
            if (i > 0 && nums [i] == 0) {
                if (nums [i - 1] != 0) {
                    int temp = nums [i];
                    nums [i] = nums [i - 1];
                    nums [i - 1] = temp;
                }
            }
            continue;
        }
    }
    return nums;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    ArrayList < Integer > zeroPlaces = new ArrayList < Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 0) {
            zeroPlaces.add (i);
        }
    }
    int [] ret = nums;
    for (int i = 0;
    i < zeroPlaces.size (); i ++) {
        int temp = ret [i];
        ret [i] = ret [zeroPlaces.get (i)];
        ret [zeroPlaces.get (i)] = temp;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_39078161_1_24
1837698_49193124_1_12
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    for (int j = 0;
    j < nums.length; j ++) {
        for (int i = 0;
        i < nums.length; i ++) {
            if (i > 0 && nums [i] == 0) {
                if (nums [i - 1] != 0) {
                    int temp = nums [i];
                    nums [i] = nums [i - 1];
                    nums [i - 1] = temp;
                }
            }
            continue;
        }
    }
    return nums;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    Arrays.sort (nums);
    Integer [] t = Arrays.stream (nums).boxed ().toArray (Integer [] :: new);
    for (int i = nums.length - 1;
    i >= 0; -- i) {
        if (nums [i] < 0) {
            Arrays.sort (t, Collections.reverseOrder ());
            int [] newNums = Arrays.stream (t).mapToInt (Integer :: intValue).toArray ();
            return newNums;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1837698_41390353_1_23
1837698_49193124_1_12
Title: javabat question 
----------------------------------------

public int [] zeroFront (int [] nums) {
    ArrayList < Integer > zeroPlaces = new ArrayList < Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 0) {
            zeroPlaces.add (i);
        }
    }
    int [] ret = nums;
    for (int i = 0;
    i < zeroPlaces.size (); i ++) {
        int temp = ret [i];
        ret [i] = ret [zeroPlaces.get (i)];
        ret [zeroPlaces.get (i)] = temp;
    }
    return ret;
}
----------------------------------------

public int [] zeroFront (int [] nums) {
    Arrays.sort (nums);
    Integer [] t = Arrays.stream (nums).boxed ().toArray (Integer [] :: new);
    for (int i = nums.length - 1;
    i >= 0; -- i) {
        if (nums [i] < 0) {
            Arrays.sort (t, Collections.reverseOrder ());
            int [] newNums = Arrays.stream (t).mapToInt (Integer :: intValue).toArray ();
            return newNums;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18386112_18386221_5_20
18386112_18386295_1_32
Title: exception in Buffered Reader 
----------------------------------------

public static void main (String args []) throws IOException {
    System.out.println ("Enter a port number : ");
    BufferedReader bufferRead = new BufferedReader (new InputStreamReader (System.in));
    String input = bufferRead.readLine ();
    if (isNumber (input)) {
        int port = Integer.parseInt (input);
        System.out.println ("entered port :: " + port);
    } else {
        System.out.println ("entered port is not a number :: " + input);
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Enter a port number: ");
    BufferedReader bufferRead = new BufferedReader (new InputStreamReader (System.in));
    String s = null;
    Integer i = null;
    try {
        s = bufferRead.readLine ();
        System.out.println ("INPUT: " + s);
    } catch (IOException e) {
        System.out.println (e);
    }
    if (s == null) return;

    try {
        i = Integer.parseInt (s);
    } catch (NumberFormatException e) {
        System.out.println (e);
        return;
    }
    System.out.println ("PORT: " + i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18387598_18387896_1_20
18387598_25124875_3_12
Title: Selenium webdriver click google search 
----------------------------------------

public static void main (String [] args) {
    WebDriver driver = new FirefoxDriver ();
    driver.get ("http://www.google.com");
    WebElement element = driver.findElement (By.name ("q"));
    element.sendKeys ("Cheese!\n");
    element.submit ();
    WebElement myDynamicElement = (new WebDriverWait (driver, 10)).until (ExpectedConditions.presenceOfElementLocated (By.id ("resultStats")));
    List < WebElement > findElements = driver.findElements (By.xpath ("//*[@id='rso']//h3/a"));
    for (WebElement webElement : findElements) {
        System.out.println (webElement.getAttribute ("href"));
    }
}
----------------------------------------

public static void main (String [] args) {
    WebDriver driver = new FirefoxDriver ();
    driver.get ("http://www.google.com");
    driver.findElement (By.xpath ("//input[@type='text']")).sendKeys ("Cheese");
    driver.findElement (By.xpath ("//button[@name='btnG']")).click ();
    driver.manage ().timeouts ().implicitlyWait (30, TimeUnit.SECONDS);
    driver.findElement (By.xpath ("(//h3[@class='r']/a)[3]")).click ();
    driver.manage ().timeouts ().implicitlyWait (30, TimeUnit.SECONDS);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18391374_18391442_17_28
18391374_18391608_1_31
Title: how to implement a comparator for StringBuffer class in Java for use in TreeSet? 
----------------------------------------

public static void main (String [] args) {
    StringBuffer one = new StringBuffer ("one");
    StringBuffer two = new StringBuffer ("two");
    StringBuffer three = new StringBuffer ("three");
    Set < StringBuffer > sb = new TreeSet < StringBuffer > (new SbufferComparator ());
    sb.add (one);
    sb.add (two);
    sb.add (three);
    System.out.println ("set before change: " + sb);
    one.append ("onemore");
    System.out.println ("set After change: " + sb);
}
----------------------------------------

public static void main (String [] args) {
    TreeSet < StringBuilder > tree = new TreeSet < > (new Comparator < StringBuilder > () {
        @Override
        public int compare (StringBuilder one, StringBuilder two) {
            return one.toString ().compareTo (two.toString ());
        }}

    );
    char from = 'a', to = 'm';
    char holdChar = 'd';
    StringBuilder hold = null;
    for (char c = from;
    c <= to; c ++) {
        StringBuilder sb = new StringBuilder ().append (c).append (c).append (c);
        tree.add (sb);
        if (c == holdChar) {
            hold = sb;
        }
    }
    System.out.println (tree);
    hold.insert (0, to);
    for (char c = from;
    c <= to; c ++) {
        StringBuilder sb = new StringBuilder ().append (c).append (c).append (c);
        if (c == holdChar) {
            sb.insert (0, to);
        }
        System.out.println ("Tree contains " + sb + (tree.contains (sb) ? "" : " NOPE!!"));
    }
    System.out.println (tree);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18396403_18399009_8_26
18396403_18487733_7_38
Title: find element that is not duplicated in Array List using only 1 temp variable 
----------------------------------------

public static void main (String [] args) {
    list.add ("Test");
    list.add ("xyz");
    list.add ("xyz");
    list.add ("pqrs");
    list.add ("pqrs");
    list.add ("abcd");
    skipElements = new String [list.size ()];
    for (int i = 0;
    i < list.size (); i ++) {
        if (isDuplicate (list.get (i), i)) {
            skipElements [i] = list.get (i);
        }
    }
    removeAllDuplicate ();
    System.out.println ("Non Duplicates are-->" + list);
}
----------------------------------------

public static void main (String [] args) {
    List < String > myList = new ArrayList < String > ();
    myList.add ("abc");
    myList.add ("xyz");
    myList.add ("xyz");
    myList.add ("pqrs");
    myList.add ("pqrs");
    String index = null;
    int temp = 0;
    for (int i = 0;
    i < myList.size (); i ++) {
        index = myList.get (i);
        for (int j = 0;
        j < myList.size (); j ++) {
            if (i != j) {
                if (index.equals (myList.get (j))) {
                    index = null;
                    break;
                }
            }
        }
        if (index != null) {
            System.out.println ("non duplicate " + index);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18398556_18399105_18_30
18398556_18399476_7_21
Title: Java: Permutation of array 
----------------------------------------

public static ArrayList < ArrayList < Integer > > permute (int [] array, int k) {
    ArrayList < ArrayList < Integer > > res = new ArrayList < ArrayList < Integer > > ();
    ArrayList < Integer > cur = new ArrayList < Integer > ();
    boolean [] status = new boolean [k];
    for (int i = 0;
    i < k; i ++) {
        status [i] = false;
    }
    _permute (res, cur, k, status, array);
    return res;
}
----------------------------------------

public static void permute (int [] array, List < int [] > cache, int k) {
    if (k == array.length - 1) {
        cache.add (array.clone ());
        return;
    }
    for (int i = k;
    i < array.length; i ++) {
        swap (array, i, k);
        permute (array, cache, k + 1);
        swap (array, i, k);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18406386_18406448_100_122
18406386_18406448_174_202
Title: Wizard not redrawing/revalidating jframe 
----------------------------------------

private void init () {
    final JButton clickButton = new JButton ("CLICK ME");
    final JButton dontClickButton = new JButton ("DON\'T CLICK ME");
    action = new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent ae) {
            if (ae.getSource () == clickButton) {
                JOptionPane.showMessageDialog (null, "Hello there dude!", "Right Button", JOptionPane.INFORMATION_MESSAGE);
            } else if (ae.getSource () == dontClickButton) {
                JOptionPane.showMessageDialog (null, "I told you not to click me!", "Wrong Button", JOptionPane.PLAIN_MESSAGE);
            }

        }}

    ;
    clickButton.addActionListener (action);
    dontClickButton.addActionListener (action);
    add (clickButton);
    add (dontClickButton);
}
----------------------------------------

public void init () {
    setLayout (new GridLayout (2, 2));
    JLabel maleLabel = new JLabel ("MALE", JLabel.CENTER);
    final JCheckBox maleBox = new JCheckBox ();
    JLabel femaleLabel = new JLabel ("FEMALE", JLabel.CENTER);
    final JCheckBox femaleBox = new JCheckBox ();
    state = new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent ae) {
            if (maleBox == (JCheckBox) ae.getSource ()) {
                femaleBox.setSelected (false);
                JOptionPane.showMessageDialog (null, "Congrats you are a Male", "Gender : ", JOptionPane.INFORMATION_MESSAGE);
            } else if (femaleBox == (JCheckBox) ae.getSource ()) {
                maleBox.setSelected (false);
                JOptionPane.showMessageDialog (null, "Congrats you are a Female", "Gender : ", JOptionPane.INFORMATION_MESSAGE);
            }

        }}

    ;
    maleBox.addActionListener (state);
    femaleBox.addActionListener (state);
    add (maleLabel);
    add (maleBox);
    add (femaleLabel);
    add (femaleBox);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18423626_18423720_5_31
18423626_18423747_9_33
Title: Change Machine Math & Logic Errors 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    double price = 5.65d;
    int newPrice = (int) (price * 100);
    System.out.println ("newPrice: " + newPrice);
    int paid = (int) (newPrice + 1);
    System.out.println ("paid: " + paid);
    int change = (int) (paid - newPrice);
    System.out.println ("change: " + change);
    int quarters = (int) (change / 25);
    int dimes = (int) ((change % 25) / 10);
    int nickels = (int) ((change % 25 % 10) / 5);
    int pennies = (int) (change % 25 % 10 % 5);
    System.out.println ("Dispensing: " + quarters + " Quarters," + dimes + "Dimes," + nickels + "Nickels," + pennies + "Pennies.");
    System.out.println ("Program written by Ashley ");
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter Purchase Price: ");
    double price = scan.nextDouble ();
    int newPrice = (int) (price);
    int paid = (int) (newPrice + 1);
    int change = (int) ((paid - price) * 100);
    int quarters = (int) (change / 25);
    int dimes = (int) ((change % 25) / 10);
    int nickels = (int) ((change % 25 % 10) / 5);
    int pennies = (int) (change % 25 % 10 % 5);
    System.out.println ("Dispensing: " + quarters + " Quarters," + dimes + "Dimes," + nickels + "Nickels," + pennies + "Pennies.");
    System.out.println ("Program written by Ashley ");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18427537_18427582_3_25
18427537_18428035_3_13
Title: Java loops confusion 
----------------------------------------

public static void main (String [] args) {
    int x = 11;
    int y = x / 2;
    int z = 1;
    for (int i = 0;
    i < 3; i ++) {
        for (int j = 0;
        j < y; j ++) {
            System.out.print (" ");
        }
        for (int k = 0;
        k < z; k ++) {
            System.out.print ("*");
        }
        y = y - 1;
        z = z + 2;
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int j = 1;
    j <= 5; j += 2) {
        for (int i = 1;
        i <= j; i ++) {
            System.out.print ("* ");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1842849_1842949_1_10
1842849_1843074_1_10
Title: Help to create a generic class to avoid code duplication 
----------------------------------------

public void deleteRecord (Identifier s) {
    PersistenceManager pm = PMF.get ().getPersistenceManager ();
    try {
        Identifier p = pm.getObjectById (s.getClass (), s.getId ());
        pm.deletePersistent (p);
    } finally {
        pm.close ();
    }
}
----------------------------------------

public void deleteRecord (Class classOfProduct, Object id) {
    PersistenceManager pm = PMF.get ().getPersistenceManager ();
    try {
        Object p = pm.getObjectById (classOfProduct, id);
        pm.deletePersistent (p);
    } finally {
        pm.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18436297_18436425_1_13
18436297_18436457_2_18
Title: Storing details from an input and displaying all the details with each new input. (Java) 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    List < String > personInformation = new ArrayList < String > ();
    String line = null;
    while (! "exit".equals (line = scan.nextLine ())) {
        personInformation.add (line);
        printPersonInformation (personInformation);
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner input = new Scanner (System.in);
    List < Person > peopleList = new ArrayList < Person > ();
    for (int i = 0;
    i < 10; i ++) {
        System.out.println ("enter info: ");
        String name = input.next ();
        String age = input.next ();
        String phone = input.next ();
        String location = input.next ();
        peopleList.add (new Person (name, Integer.parseInt (age), Integer.parseInt (phone), location));
        for (Person p : peopleList) System.out.println (p.toString ());

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18438587_18438680_1_23
18438587_44340071_1_18
Title: String to java.sql.Date 
----------------------------------------

private static java.sql.Date getDay () {
    Scanner in = new Scanner (System.in);
    String input;
    Date apptDay = null;
    DateFormat df = new SimpleDateFormat ("yyyy/MM/dd");
    java.sql.Date sqlDate;
    System.out.println ("\nPlease enter the date of the appointment, format: yyyy/mm/dd");
    while (apptDay == null) {
        try {
            input = in.next ();
            apptDay = (Date) df.parse (input);
        } catch (ParseException e) {
            System.out.println ("Please enter a valid date! Format is yyyy/mm/dd");
        }
    }
    sqlDate = new java.sql.Date (apptDay.getTime ());
    return sqlDate;
}
----------------------------------------

private static java.sql.Date getDay () throws SQLException {
    Scanner in = new Scanner (System.in);
    String input;
    java.util.Date utilDay = null;
    DateFormat df = new SimpleDateFormat ("yyyy-mm-dd");
    System.out.println ("\nPlease enter the date of the appointment, format: yyyy-mm-dd");
    while (utilDay == null) {
        try {
            input = in.next ();
            utilDay = (java.util.Date) df.parse (input);
        } catch (ParseException e) {
            System.out.println ("Please enter a valid date! Format is yyyy/mm/dd");
        }
    }
    java.sql.Date sqlDate = new java.sql.Date (utilDay.getTime ());
    return sqlDate;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18454695_18454702_48_77
18454695_18454765_1_29
Title: error class interface or enum expected 
----------------------------------------

public static void main (String args []) {
    Scores s1 = new Scores ();
    GameEntry e1 = new GameEntry ("Paul", 750);
    s1.add (e1);
    GameEntry e2 = new GameEntry ("John", 770);
    s1.add (e2);
    system.out.println (s1.toString ());
    GameEntry e1 = new GameEntry ("Sam", 600);
    s1.add (e1);
    GameEntry e2 = new GameEntry ("Raj", 800);
    s1.add (e2);
    system.out.println (s1.toString ());
    GameEntry e1 = new GameEntry ("Gobi", 550);
    s1.add (e1);
    GameEntry e2 = new GameEntry ("Raj", 580);
    s1.add (e2);
    system.out.println (s1.toString ());
}
----------------------------------------

public static void main (String args []) {
    Scores s1 = new Scores ();
    GameEntry e1 = new GameEntry ("Paul", 750);
    s1.add (e1);
    GameEntry e2 = new GameEntry ("John", 770);
    s1.add (e2);
    system.out.println (s1.toString ());
    e1 = new GameEntry ("Sam", 600);
    s1.add (e1);
    e2 = new GameEntry ("Raj", 800);
    s1.add (e2);
    system.out.println (s1.toString ());
    e1 = new GameEntry ("Gobi", 550);
    s1.add (e1);
    e2 = new GameEntry ("Raj", 580);
    s1.add (e2);
    system.out.println (s1.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18475942_18476428_28_43
18475942_18476428_88_96
Title: Java Terminal Only Printing Output From First Command 
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException ex) {
    } catch (InstantiationException ex) {
    } catch (IllegalAccessException ex) {
    } catch (UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.add (new TestPane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------

public void run () {
    int exit = - 1;
    try {
        exit = process.waitFor ();
    } catch (InterruptedException ex) {
    }
    System.out.println ("Exited with " + exit);
    input.setEnabled (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18476512_18476611_18_45
18476512_18490215_1_10
Title: Find common elements in two unsorted array 
----------------------------------------

public static Integer [] findCommon (Integer [] arrayOne, Integer [] arrayTwo) {
    Integer [] arrayToHash;
    Integer [] arrayToSearch;
    if (arrayOne.length < arrayTwo.length) {
        arrayToHash = arrayOne;
        arrayToSearch = arrayTwo;
    } else {
        arrayToHash = arrayTwo;
        arrayToSearch = arrayOne;
    }
    HashSet < Integer > intersection = new HashSet < Integer > ();
    HashSet < Integer > hashedArray = new HashSet < Integer > ();
    for (Integer entry : arrayToHash) {
        hashedArray.add (entry);
    }
    for (Integer entry : arrayToSearch) {
        if (hashedArray.contains (entry)) {
            intersection.add (entry);
        }
    }
    return intersection.toArray (new Integer [0]);
}
----------------------------------------

public static < T extends Comparable < T > > T findCommon (T [] A, T [] B, Class < T > clazz) {
    T [] array = concatArrays (A, B, clazz);
    Arrays.sort (array);
    for (int i = 1;
    i < array.length; i ++) {
        if (array [i - 1].equals (array [i])) {
            return array [i];
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18476512_18476611_6_16
18476512_18476842_1_10
Title: Find common elements in two unsorted array 
----------------------------------------

public static void main (String [] args) {
    Integer [] arrayOne = {1, 4, 5, 2, 7, 3, 9};
    Integer [] arrayTwo = {5, 2, 4, 9, 5};
    Integer [] common = iCrunchIntersection.findCommon (arrayOne, arrayTwo);
    System.out.print ("Common Elements Between Two Arrays: ");
    for (Integer entry : common) {
        System.out.print (entry + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] a = {"a", "b"};
    String [] b = {"c", "b"};
    String [] intersection = intersection (a, b, a [0].getClass ());
    System.out.println (Arrays.toString (intersection));
    Integer [] aa = {1, 3, 4, 2};
    Integer [] bb = {1, 19, 4, 5};
    Integer [] intersectionaabb = intersection (aa, bb, aa [0].getClass ());
    System.out.println (Arrays.toString (intersectionaabb));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18479771_38738188_14_24
18479771_44558739_8_17
Title: Java Multithreading concept and join() method 
----------------------------------------

public void run () {
    try {
        for (int i = 5;
        i > 0; i --) {
            System.out.println (name + ": " + i);
            Thread.sleep (1000);
        }
    } catch (InterruptedException e) {
        System.out.println (name + " interrupted.");
    }
    System.out.println (name + " exiting.");
}
----------------------------------------

public void run () {
    try {
        for (int i = 4;
        i >= 1; i --) {
            System.out.println (Thread.currentThread ().getName () + ", " + i);
            Thread.sleep (500);
        }
    } catch (InterruptedException e) {
        System.out.println (threadName + " interrupted");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18483471_18483508_1_13
18483471_18483615_1_10
Title: Need to write a certain method 
----------------------------------------

public boolean oddsMatchEvens (int [] w, int [] q) {
    int count = 0;
    for (int i = 0;
    i < w.length; i ++) {
        if (w [i] == q [i + 1]) {
            count ++;
            if (count == w.length) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

public boolean oddsMatchEvens (int [] w, int [] q) {
    int count = 0;
    for (int i = 0;
    w.length >= i; i ++) {
        count += 1;
        if (w [i] == q [i + 1] && count == w.length) {
            return true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18489976_18490406_1_11
18489976_18490569_1_11
Title: Java loop runs infinite 
----------------------------------------

public static void main (String [] args) {
    double sum = 0, a = 1;
    int n = Integer.parseInt (args [0]);
    for (int i = 1;
    i <= n; i ++) {
        a *= i;
        sum = sum + (1.0 / a);
    }
    System.out.print (sum);
}
----------------------------------------

public static void main (String [] args) {
    double sum = 0;
    int n = Integer.parseInt (args [0]);
    for (double a = 1;
    a <= n; a ++) {
        sum = sum + 1.0 / a;
    }
    System.out.print (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18490121_18490210_1_13
18490121_18491301_120_130
Title: Can't change background color of java application 
----------------------------------------

public void addComponents () {
    pauseAction = new PauseAction ();
    quitAction = new QuitAction ();
    scrollPane.getInputMap ().put (KeyStroke.getKeyStroke ("P"), "doPauseAction");
    scrollPane.getActionMap ().put ("doPauseAction", pauseAction);
    scrollPane.getInputMap ().put (KeyStroke.getKeyStroke ("SPACE"), "doQuitAction");
    scrollPane.getActionMap ().put ("doQuitAction", quitAction);
    scrollPane.setBackground (Color.BLACK);
    viewer.getContentPane ().add (scrollPane);
    viewer.repaint ();
}
----------------------------------------

public void addComponents () {
    pauseAction = new PauseAction ();
    quitAction = new QuitAction ();
    scrollPane.getInputMap ().put (KeyStroke.getKeyStroke ("P"), "doPauseAction");
    scrollPane.getActionMap ().put ("doPauseAction", pauseAction);
    scrollPane.getInputMap ().put (KeyStroke.getKeyStroke ("SPACE"), "doQuitAction");
    scrollPane.getActionMap ().put ("doQuitAction", quitAction);
    scrollPane.getViewport ().setBackground (Color.BLACK);
    viewer.add (scrollPane);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18490121_18491280_21_33
18490121_18491301_110_118
Title: Can't change background color of java application 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            JFrame frm = new ColoredFrame ();
            frm.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
            frm.setSize (500, 500);
            frm.setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) throws IOException {
    Runnable runnable = new Runnable () {
        @Override
        public void run () {
            new PictureViewer ().displayGUI ();
        }}

    ;
    EventQueue.invokeLater (runnable);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18493624_18493648_1_12
18493624_18493651_1_12
Title: equals method not returning expected o/p 
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (getClass () != obj.getClass ()) return false;

    Test1 other = (Test1) obj;
    if (a != other.a) return false;

    return true;
}
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (getClass () != obj.getClass ()) return false;

    Test1 other = (Test1) obj;
    if (a != other.a) return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18497458_18497546_1_16
18497458_34373069_32_46
Title: Calculating perimeter and area of a rectangle 
----------------------------------------

public static void main (String [] args) {
    Scanner scanL = new Scanner (System.in);
    System.out.print ("Please enter the length of the rectangle: ");
    double L = scanL.nextDouble ();
    System.out.print ("Please enter the length of the rectangle: ");
    double W = scanL.nextDouble ();
    Rectangle rectangle = new Rectangle (l, w);
    double rectangleArea = rectangle.FindArea ();
    System.out.println ("The area of a unit rectangle is " + rectangleArea);
    double rectanglePermiter = rectangle.FindPerim ();
    System.out.println ("The permimiter of the unit rectangle is " + rectanglePermiter);
}
----------------------------------------

public static void main (String args []) {
    if (args.length != 2) {
        System.out.println ("please enter two values");
    } else {
        int x = Integer.parseInt (args [0]);
        int y = Integer.parseInt (args [1]);
        AreaAndPerOfRect ap = new AreaAndPerOfRect ();
        ap.set (x, y);
        ap.disp ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18501924_18501975_1_8
18501924_18501984_1_11
Title: simple multiplication arrays in java 
----------------------------------------

private static void print (final int [] [] table) {
    for (int r = 0;
    r < table.length; r ++) {
        for (int c = 0;
        c < table [r].length; c ++) {
            System.out.printf ("%d\t", table [r] [c]);
        }
        System.out.println ();
    }
}
----------------------------------------

public static void print (int x, int y) {
    for (int i = 1;
    i <= x; i ++) {
        for (int j = 1;
        j <= y; j ++) {
            System.out.print (" " + i * j);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18525474_28312886_4_15
18525474_34649561_4_28
Title: Java Minimum and Maximum values in Array 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Main Method Started");
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter the size of the arr");
    int size = in.nextInt ();
    System.out.println ("Enter the maximum value of the arr");
    int max = in.nextInt ();
    int [] arr = initializeArr (max, size);
    print (arr);
    findMinMax (arr);
    System.out.println ("Main Method Ended");
}
----------------------------------------

public static void main (String args []) {
    int [] arr = new int [10];
    Scanner in = new Scanner (System.in);
    int i, min = 0, max = 0;
    for (i = 0; i <= arr.length; i ++) {
        System.out.print ("Enter any number: ");
        arr [i] = in.nextInt ();
    }
    min = arr [0];
    for (i = 0; i <= 9; i ++) {
        if (arr [i] > max) {
            max = arr [i];
        }
        if (arr [i] < min) {
            min = arr [i];
        }
    }
    System.out.println ("Maximum is: " + max);
    System.out.println ("Minimum is: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18525474_28312886_4_15
18525474_41659499_4_28
Title: Java Minimum and Maximum values in Array 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Main Method Started");
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter the size of the arr");
    int size = in.nextInt ();
    System.out.println ("Enter the maximum value of the arr");
    int max = in.nextInt ();
    int [] arr = initializeArr (max, size);
    print (arr);
    findMinMax (arr);
    System.out.println ("Main Method Ended");
}
----------------------------------------

public static void main (String args []) {
    int n, max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
    System.out.println ("Enter the number of elements: ");
    Scanner sc = new Scanner (System.in);
    int [] arr = new int [sc.nextInt ()];
    System.out.println ("Enter the elements: ");
    for (int i = 0;
    i < arr.length; i ++) {
        int next = sc.nextInt ();
        arr [i] = next;
    }
    for (int j = 0;
    j < arr.length; j ++) {
        if (arr [j] > max) max = arr [j];
        else if (arr [j] < min) min = arr [j];

    }
    System.out.println ("Highest Value in array: " + max);
    System.out.println ("Smallest Value in array: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18525474_28312886_4_15
18525474_45075953_3_26
Title: Java Minimum and Maximum values in Array 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Main Method Started");
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter the size of the arr");
    int size = in.nextInt ();
    System.out.println ("Enter the maximum value of the arr");
    int max = in.nextInt ();
    int [] arr = initializeArr (max, size);
    print (arr);
    findMinMax (arr);
    System.out.println ("Main Method Ended");
}
----------------------------------------

public static void main (String args []) {
    Scanner input = new Scanner (System.in);
    int array [] = new int [10];
    System.out.println ("Enter the numbers now.");
    for (int i = 0;
    i < array.length; i ++) {
        int next = input.nextInt ();
        if (next == 999) {
            break;
        }
        array [i] = next;
    }
    System.out.println ("These are the numbers you have entered.");
    printArray (array);
    System.out.println ("Maximum: " + getMaxValue (array));
    System.out.println ("Minimum: " + getMinValue (array));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18525474_34649561_4_28
18525474_41659499_4_28
Title: Java Minimum and Maximum values in Array 
----------------------------------------

public static void main (String args []) {
    int [] arr = new int [10];
    Scanner in = new Scanner (System.in);
    int i, min = 0, max = 0;
    for (i = 0; i <= arr.length; i ++) {
        System.out.print ("Enter any number: ");
        arr [i] = in.nextInt ();
    }
    min = arr [0];
    for (i = 0; i <= 9; i ++) {
        if (arr [i] > max) {
            max = arr [i];
        }
        if (arr [i] < min) {
            min = arr [i];
        }
    }
    System.out.println ("Maximum is: " + max);
    System.out.println ("Minimum is: " + min);
}
----------------------------------------

public static void main (String args []) {
    int n, max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
    System.out.println ("Enter the number of elements: ");
    Scanner sc = new Scanner (System.in);
    int [] arr = new int [sc.nextInt ()];
    System.out.println ("Enter the elements: ");
    for (int i = 0;
    i < arr.length; i ++) {
        int next = sc.nextInt ();
        arr [i] = next;
    }
    for (int j = 0;
    j < arr.length; j ++) {
        if (arr [j] > max) max = arr [j];
        else if (arr [j] < min) min = arr [j];

    }
    System.out.println ("Highest Value in array: " + max);
    System.out.println ("Smallest Value in array: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18525474_34649561_4_28
18525474_45075953_3_26
Title: Java Minimum and Maximum values in Array 
----------------------------------------

public static void main (String args []) {
    int [] arr = new int [10];
    Scanner in = new Scanner (System.in);
    int i, min = 0, max = 0;
    for (i = 0; i <= arr.length; i ++) {
        System.out.print ("Enter any number: ");
        arr [i] = in.nextInt ();
    }
    min = arr [0];
    for (i = 0; i <= 9; i ++) {
        if (arr [i] > max) {
            max = arr [i];
        }
        if (arr [i] < min) {
            min = arr [i];
        }
    }
    System.out.println ("Maximum is: " + max);
    System.out.println ("Minimum is: " + min);
}
----------------------------------------

public static void main (String args []) {
    Scanner input = new Scanner (System.in);
    int array [] = new int [10];
    System.out.println ("Enter the numbers now.");
    for (int i = 0;
    i < array.length; i ++) {
        int next = input.nextInt ();
        if (next == 999) {
            break;
        }
        array [i] = next;
    }
    System.out.println ("These are the numbers you have entered.");
    printArray (array);
    System.out.println ("Maximum: " + getMaxValue (array));
    System.out.println ("Minimum: " + getMinValue (array));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18525474_41659499_4_28
18525474_45075953_3_26
Title: Java Minimum and Maximum values in Array 
----------------------------------------

public static void main (String args []) {
    int n, max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
    System.out.println ("Enter the number of elements: ");
    Scanner sc = new Scanner (System.in);
    int [] arr = new int [sc.nextInt ()];
    System.out.println ("Enter the elements: ");
    for (int i = 0;
    i < arr.length; i ++) {
        int next = sc.nextInt ();
        arr [i] = next;
    }
    for (int j = 0;
    j < arr.length; j ++) {
        if (arr [j] > max) max = arr [j];
        else if (arr [j] < min) min = arr [j];

    }
    System.out.println ("Highest Value in array: " + max);
    System.out.println ("Smallest Value in array: " + min);
}
----------------------------------------

public static void main (String args []) {
    Scanner input = new Scanner (System.in);
    int array [] = new int [10];
    System.out.println ("Enter the numbers now.");
    for (int i = 0;
    i < array.length; i ++) {
        int next = input.nextInt ();
        if (next == 999) {
            break;
        }
        array [i] = next;
    }
    System.out.println ("These are the numbers you have entered.");
    printArray (array);
    System.out.println ("Maximum: " + getMaxValue (array));
    System.out.println ("Minimum: " + getMinValue (array));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18529240_18529950_100_107
18529240_18530099_203_212
Title: RowSorter not set in renderer 
----------------------------------------

public static void main (String args []) {
    java.awt.EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            new RowSorterDefaults ();
        }}

    );
}
----------------------------------------

public static void main (String args []) {
    UIManager.getLookAndFeelDefaults ().put ("Table.ascendingSortIcon", new BevelArrowIcon (BevelArrowIcon.UP, false, false));
    UIManager.getLookAndFeelDefaults ().put ("Table.descendingSortIcon", new BevelArrowIcon (BevelArrowIcon.DOWN, false, false));
    java.awt.EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            new RowSorterCustom ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18529240_18529950_43_57
18529240_18530099_43_57
Title: RowSorter not set in renderer 
----------------------------------------

public void toggleSortOrder (int column) {
    if (column >= 0 && column < getModelWrapper ().getColumnCount () && isSortable (column)) {
        List < SortKey > keys = new ArrayList < SortKey > (getSortKeys ());
        if (! keys.isEmpty ()) {
            SortKey sortKey = keys.get (0);
            if (sortKey.getColumn () == column && sortKey.getSortOrder () == SortOrder.DESCENDING) {
                setSortKeys (null);
                return;
            }
        }
    }
    super.toggleSortOrder (column);
}
----------------------------------------

public void toggleSortOrder (int column) {
    if (column >= 0 && column < getModelWrapper ().getColumnCount () && isSortable (column)) {
        List < SortKey > keys = new ArrayList < SortKey > (getSortKeys ());
        if (! keys.isEmpty ()) {
            SortKey sortKey = keys.get (0);
            if (sortKey.getColumn () == column && sortKey.getSortOrder () == SortOrder.DESCENDING) {
                setSortKeys (null);
                return;
            }
        }
    }
    super.toggleSortOrder (column);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18550596_18555653_25_40
18550596_18555653_53_63
Title: Trying to repaint the Gui from run 
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException ex) {
    } catch (InstantiationException ex) {
    } catch (IllegalAccessException ex) {
    } catch (UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.add (new TestPane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------

public void run () {
    while (true) {
        paintRequests ++;
        try {
            Thread.sleep (delay);
        } catch (InterruptedException exp) {
        }
        System.out.println ("tick");
        repaint ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18551251_18551656_9_33
18551251_41921115_4_40
Title: How to open a text file? 
----------------------------------------

public static void main (String [] args) {
    BufferedReader br = null;
    try {
        String sCurrentLine;
        br = new BufferedReader (new FileReader ("C:\\testing.txt"));
        while ((sCurrentLine = br.readLine ()) != null) {
            System.out.println (sCurrentLine);
        }
    } catch (IOException e) {
        e.printStackTrace ();
    } finally {
        try {
            if (br != null) br.close ();

        } catch (IOException ex) {
            ex.printStackTrace ();
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String fileName = "temp.txt";
    String line = null;
    try {
        FileReader fileReader = new FileReader (fileName);
        BufferedReader bufferedReader = new BufferedReader (fileReader);
        while ((line = bufferedReader.readLine ()) != null) {
            System.out.println (line);
        }
        bufferedReader.close ();
    } catch (FileNotFoundException ex) {
        System.out.println ("Unable to open file '" + fileName + "'");
    } catch (IOException ex) {
        System.out.println ("Error reading file '" + fileName + "'");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18554007_18554029_37_46
18554007_18554141_1_14
Title: Graphics.drawRect being filled 
----------------------------------------

protected void paintComponent (Graphics g) {
    super.paintComponent (g);
    if (rect != null) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setColor (RECT_FILL_COLOR);
        g2.fill (rect);
        g2.setColor (RECT_COLOR);
        g2.draw (rect);
    }
}
----------------------------------------

public void paintComponent (Graphics g) {
    super.paintComponent (g);
    if (showRect) {
        g.setColor (new Color (0, 250, 0, 50));
        g.fillRect (x1, y1, x2 - x1, y2 - y1);
        g.setColor (new Color (0, 255, 0));
        g.drawLine (x1, y1, x2, y1);
        g.drawLine (x1, y2, x2, y2);
        g.drawLine (x1, y1, x1, y2);
        g.drawLine (x2, y1, x2, y2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18554836_18555055_1_18
18554836_18555172_6_37
Title: Not all Array Elements Display When Using A Sort Method Logic 
----------------------------------------

public void sort (int [] arrays) {
    for (int i = 0;
    i < arrays.length - 1; i ++) {
        int store = 0;
        if (arrays [i + 1] < arrays [i]) {
            store = arrays [i];
            arrays [i] = arrays [i + 1];
            arrays [i + 1] = store;
        }
        System.out.print (arrays [i]);
        if (i + 1 == arrays.length - 1) {
            System.out.print (arrays [i + 1]);
        }
    }
    System.out.println ();
}
----------------------------------------

public void sort (int [] arrays) {
    for (int i = 0;
    i < arrays.length - 1; i ++) {
        int store = 0;
        if (arrays [i] > arrays [i + 1]) {
            store = arrays [i];
            arrays [i] = arrays [i + 1];
            arrays [i + 1] = store;
            for (int j = i;
            j > 1; j --) {
                if (arrays [j] < arrays [j - 1]) {
                    store = arrays [j];
                    arrays [j] = arrays [j - 1];
                    arrays [j - 1] = store;
                }
            }
        }
    }
    for (int i = 0;
    i < array.length; i ++) {
        System.out.print (arrays [i] + " ");
    }
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18554836_18555055_1_18
18554836_18555288_1_16
Title: Not all Array Elements Display When Using A Sort Method Logic 
----------------------------------------

public void sort (int [] arrays) {
    for (int i = 0;
    i < arrays.length - 1; i ++) {
        int store = 0;
        if (arrays [i + 1] < arrays [i]) {
            store = arrays [i];
            arrays [i] = arrays [i + 1];
            arrays [i + 1] = store;
        }
        System.out.print (arrays [i]);
        if (i + 1 == arrays.length - 1) {
            System.out.print (arrays [i + 1]);
        }
    }
    System.out.println ();
}
----------------------------------------

public void sort (int [] a) {
    int temp = 0;
    for (int i = 0;
    i < a.length; i ++) {
        for (int j = 0;
        j < a.length - 1; j ++) {
            if (a [j] > a [j + 1]) {
                temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    printArray (a);
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18554836_18555172_6_37
18554836_18555288_1_16
Title: Not all Array Elements Display When Using A Sort Method Logic 
----------------------------------------

public void sort (int [] arrays) {
    for (int i = 0;
    i < arrays.length - 1; i ++) {
        int store = 0;
        if (arrays [i] > arrays [i + 1]) {
            store = arrays [i];
            arrays [i] = arrays [i + 1];
            arrays [i + 1] = store;
            for (int j = i;
            j > 1; j --) {
                if (arrays [j] < arrays [j - 1]) {
                    store = arrays [j];
                    arrays [j] = arrays [j - 1];
                    arrays [j - 1] = store;
                }
            }
        }
    }
    for (int i = 0;
    i < array.length; i ++) {
        System.out.print (arrays [i] + " ");
    }
    System.out.println ();
}
----------------------------------------

public void sort (int [] a) {
    int temp = 0;
    for (int i = 0;
    i < a.length; i ++) {
        for (int j = 0;
        j < a.length - 1; j ++) {
            if (a [j] > a [j + 1]) {
                temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    printArray (a);
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1855753_1855774_1_16
1855753_1855797_13_35
Title: Reading double values from a file 
----------------------------------------

public static void main (String [] args) {
    Scanner scan;
    File file = new File ("resources\\scannertester\\data.txt");
    try {
        scan = new Scanner (file);
        while (scan.hasNextDouble ()) {
            System.out.println (scan.nextDouble ());
        }
    } catch (FileNotFoundException e1) {
        e1.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan;
    try {
        scan = new Scanner (file);
        Object [] [] tmp2 = new Object [tmp.size () / 2] [2];
        int tmp3 = 0;
        while (scan.hasNextDouble ()) {
            tmp.add (scan.nextDouble ());
            System.out.println (Arrays.deepToString (tmp.toArray ()));
            for (int i = 0;
            i < tmp.size () / 2; i ++) {
                for (int j = 0;
                j < 2; j ++) {
                    tmp2 [i] [j] = tmp.get (tmp3);
                    tmp3 ++;
                }
            }
        }
    } catch (FileNotFoundException fnfe) {
        fnfe.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18563321_38391299_5_19
18563321_42934804_3_14
Title: printing the results of a fibonacci series 
----------------------------------------

public static void main (String [] args) {
    int a, b, c;
    a = 0;
    b = 1;
    c = 2;
    for (int i = 1;
    i <= 10; i ++) {
        c = a + b;
        System.out.println (a);
        a = b;
        b = c;
    }
}
----------------------------------------

public static void main (String [] args) {
    int first = 0, second = 1;
    next;
    System.out.prinf ("%d %d ", first, second);
    for (int i = 0;
    i <= 10; i ++) {
        next = first + second;
        first = second;
        second = next;
        System.out.printf ("%d ", second);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18565637_18565826_29_62
18565637_18566266_50_63
Title: How to get an Integer as User Input using Android buttons? 
----------------------------------------

public void onClick (View v) {
    AlertDialog.Builder alert = new AlertDialog.Builder (v.getContext ());
    alert.setTitle ("Title");
    alert.setMessage ("Message");
    final EditText input = new EditText (MainActivity.this);
    alert.setView (input);
    alert.setPositiveButton ("Ok", new DialogInterface.OnClickListener () {
        public void onClick (DialogInterface dialog, int whichButton) {
            value = input.getText ().toString ();
            bias = Integer.parseInt (value);
        }}

    );
    alert.setNegativeButton ("Cancel", new DialogInterface.OnClickListener () {
        public void onClick (DialogInterface dialog, int whichButton) {
        }}

    );
    alert.show ();
}
----------------------------------------

public void onClick (View v) {
    if (etInput.getText ().toString ().equals ("")) {
        tvError.setText ("Please enter a valid value");
        tvError.setVisibility (View.VISIBLE);
        etInput.setText ("");
    } else {
        doneInput (etInput.getText ().toString ());
        popupWindow.dismiss ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18569206_18569540_2_14
18569206_18569590_3_19
Title: Iterate each digit in an integer and do mod 11 
----------------------------------------

public static void main (String [] args) {
    String s = "112211";
    String s2 = "010101";
    char [] sDummy = s.toCharArray ();
    char [] s2Dummy = s2.toCharArray ();
    int sum = 0;
    for (int i = 0;
    i < sDummy.length; i ++) {
        System.out.println ("multiplying..." + sDummy [i] + "with " + s2Dummy [i] + "and adding prev sum " + sum + " to it");
        sum = sum + (Integer.parseInt (sDummy [i] + "") * Integer.parseInt (s2Dummy [i] + ""));
    }
    sum = sum % 11;
    System.out.println ("sum with mod is = " + sum);
}
----------------------------------------

public static void main (String [] args) {
    String first = "00669253";
    String second = "87654321";
    long sum = 0L;
    if (first.length () == second.length ()) {
        for (int i = 0;
        i < first.length (); i ++) {
            int firstInt = Character.getNumericValue (first.charAt (i));
            int secondInt = Character.getNumericValue (second.charAt (i));
            sum += firstInt * secondInt;
        }
        System.out.println ("result: " + sum % 11);
    } else {
        System.err.println ("lengths are not equal.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18581197_29579141_3_28
18581197_30950077_7_27
Title: "Loops beginner" 
----------------------------------------

public static void main (String args []) {
    String s = "1234";
    int len = s.length ();
    int num = Integer.parseInt (s);
    int mod;
    int od = 0, even = 0;
    for (int i = 0;
    i < len; i ++) {
        mod = num % 10;
        num = num / 10;
        if (mod % 2 == 0) {
            even = even + mod;
        } else {
            od = od + mod;
        }
    }
    System.out.println ("Sum of even numbers is " + even);
    System.out.println ("Sum of odd numbers is " + od);
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    String number = "";
    int a = 0, total = 0;
    boolean even = false;
    System.out.println ("Enter a number");
    number = input.nextLine ();
    for (int counter = 0;
    counter < number.length (); counter ++) {
        a = Integer.parseInt (number.substring (counter, counter + 1));
        if (a % 2 != 0 || a == 1) {
            even = false;
            total += a;
        }
    }
    System.out.println ("The sum is " + total);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18585105_18585164_3_18
18585105_18585218_1_12
Title: "Loops tables structures" 
----------------------------------------

public static void main (String [] args) {
    int i = 0;
    System.out.println ("Celsius | Fahrenheit");
    System.out.println ("--------+-----------");
    for (i = 0; i <= 100; i += 10) {
        System.out.print ("    " + i + "  |");
        double sum = (i * (9.0 / 5.0)) + 32;
        System.out.printf ("%5d", (int) sum);
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Celsius | Fahrenheit");
    System.out.println ("--------+-----------");
    for (int i = 0;
    i <= 100; i += 10) {
        System.out.printf ("%5d   |", i);
        double sum = (i * (9.0 / 5.0)) + 32;
        System.out.printf ("%5d", (int) sum);
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18585186_18960662_14_24
18585186_18960662_57_88
Title: How to detect keys 
----------------------------------------

public void handle (KeyEvent event) {
    if (event.getTarget () instanceof TextField) {
        return;
    }
    if (isKeyEventsAreEqual (event, shortcutKeyEvent)) {
        selectedEventHandler.handle (null);
        event.consume ();
    }
}
----------------------------------------

public void handle (KeyEvent event) {
    if (event.getCode () == KeyCode.TAB) {
    } else {
        textField.setText ("");
        if (event.getCode ().isLetterKey () || event.getCode ().isDigitKey () || event.getCode ().isFunctionKey ()) {
            String shortcut = event.getCode ().getName ();
            if (event.isAltDown ()) {
                shortcut = "Alt + " + shortcut;
            }
            if (event.isControlDown ()) {
                shortcut = "Ctrl + " + shortcut;
            }
            if (event.isShiftDown ()) {
                shortcut = "Shift + " + shortcut;
            }
            textField.setText (shortcut);
            shortcutKeyEvent = event;
        } else {
            shortcutKeyEvent = null;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18585186_18960662_14_24
18585186_18970582_48_58
Title: How to detect keys 
----------------------------------------

public void handle (KeyEvent event) {
    if (event.getTarget () instanceof TextField) {
        return;
    }
    if (isKeyEventsAreEqual (event, shortcutKeyEvent)) {
        selectedEventHandler.handle (null);
        event.consume ();
    }
}
----------------------------------------

public void handle (KeyEvent keyEvent) {
    if (keyEvent.getCode () == KeyCode.CONTROL) {
        keys.add (KeyCombination.CONTROL_DOWN);
    } else if (keyEvent.getCode () == KeyCode.ALT) {
        keys.add (KeyCombination.ALT_DOWN);
    } else if (keyEvent.getCode ().isLetterKey ()) {
        items.set (cell.getIndex (), new KeyCharacterCombination (keyEvent.getCode ().getName (), keys.toArray (new KeyCombination.Modifier [keys.size ()])));
        keys.clear ();
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18585186_18960662_57_88
18585186_18970582_48_58
Title: How to detect keys 
----------------------------------------

public void handle (KeyEvent event) {
    if (event.getCode () == KeyCode.TAB) {
    } else {
        textField.setText ("");
        if (event.getCode ().isLetterKey () || event.getCode ().isDigitKey () || event.getCode ().isFunctionKey ()) {
            String shortcut = event.getCode ().getName ();
            if (event.isAltDown ()) {
                shortcut = "Alt + " + shortcut;
            }
            if (event.isControlDown ()) {
                shortcut = "Ctrl + " + shortcut;
            }
            if (event.isShiftDown ()) {
                shortcut = "Shift + " + shortcut;
            }
            textField.setText (shortcut);
            shortcutKeyEvent = event;
        } else {
            shortcutKeyEvent = null;
        }
    }
}
----------------------------------------

public void handle (KeyEvent keyEvent) {
    if (keyEvent.getCode () == KeyCode.CONTROL) {
        keys.add (KeyCombination.CONTROL_DOWN);
    } else if (keyEvent.getCode () == KeyCode.ALT) {
        keys.add (KeyCombination.ALT_DOWN);
    } else if (keyEvent.getCode ().isLetterKey ()) {
        items.set (cell.getIndex (), new KeyCharacterCombination (keyEvent.getCode ().getName (), keys.toArray (new KeyCombination.Modifier [keys.size ()])));
        keys.clear ();
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18585186_18960662_9_106
18585186_18970582_8_66
Title: How to detect keys 
----------------------------------------

public void start (Stage primaryStage) {
    root = new HBox (10);
    root.addEventFilter (KeyEvent.KEY_PRESSED, new EventHandler < KeyEvent > () {
        @Override
        public void handle (KeyEvent event) {
            if (event.getTarget () instanceof TextField) {
                return;
            }
            if (isKeyEventsAreEqual (event, shortcutKeyEvent)) {
                selectedEventHandler.handle (null);
                event.consume ();
            }
        }}

    );
    eventHandlers = new ArrayList < EventHandler > ();
    eventHandlers.add (new EventHandler () {
        @Override
        public void handle (Event event) {
            root.setStyle ("-fx-background-color: lightgray");
        }}

    );
    eventHandlers.add (new EventHandler () {
        @Override
        public void handle (Event event) {
            root.setSpacing (50);
        }}

    );
    ChoiceBox cb = new ChoiceBox ();
    cb.getItems ().addAll ("HBox background = gray", "HBox spacing = 50");
    cb.getSelectionModel ().selectedIndexProperty ().addListener (new ChangeListener < Number > () {
        @Override
        public void changed (ObservableValue < ? extends Number > observable, Number oldValue, Number newValue) {
            selectedEventHandler = eventHandlers.get (newValue.intValue ());
        }}

    );
    cb.getSelectionModel ().selectFirst ();
    final TextField textField = new TextField ();
    textField.setEditable (false);
    textField.setOnKeyPressed (new EventHandler < KeyEvent > () {
        @Override
        public void handle (KeyEvent event) {
            if (event.getCode () == KeyCode.TAB) {
            } else {
                textField.setText ("");
                if (event.getCode ().isLetterKey () || event.getCode ().isDigitKey () || event.getCode ().isFunctionKey ()) {
                    String shortcut = event.getCode ().getName ();
                    if (event.isAltDown ()) {
                        shortcut = "Alt + " + shortcut;
                    }
                    if (event.isControlDown ()) {
                        shortcut = "Ctrl + " + shortcut;
                    }
                    if (event.isShiftDown ()) {
                        shortcut = "Shift + " + shortcut;
                    }
                    textField.setText (shortcut);
                    shortcutKeyEvent = event;
                } else {
                    shortcutKeyEvent = null;
                }
            }
        }}

    );
    Button button = new Button ("Reset");
    button.setOnAction (new EventHandler < ActionEvent > () {
        @Override
        public void handle (ActionEvent event) {
            textField.setText ("");
            root.setSpacing (10);
            root.setStyle ("-fx-background-color: white");
            shortcutKeyEvent = null;
        }}

    );
    root.getChildren ().addAll (new Label ("Define a shortcut for "), cb, textField, button);
    Scene scene = new Scene (root, 900, 150);
    primaryStage.setScene (scene);
    primaryStage.show ();
}
----------------------------------------

public void start (Stage stage) throws Exception {
    final ObservableList < KeyCharacterCombination > items = FXCollections.observableArrayList ();
    for (int i = 0;
    i < 110; i ++) {
        items.add (null);
    }
    TableView < KeyCharacterCombination > table = new TableView < > (items);
    table.setEditable (true);
    final TableColumn < KeyCharacterCombination, KeyCharacterCombination > column = new TableColumn < > ();
    column.setCellValueFactory (new Callback < TableColumn.CellDataFeatures < KeyCharacterCombination, KeyCharacterCombination >, ObservableValue < KeyCharacterCombination > > () {
        @Override
        public ObservableValue < KeyCharacterCombination > call (TableColumn.CellDataFeatures < KeyCharacterCombination, KeyCharacterCombination > cellDataFeatures) {
            return new ReadOnlyObjectWrapper < > (cellDataFeatures.getValue ());
        }}

    );
    column.setCellFactory (new Callback < TableColumn < KeyCharacterCombination, KeyCharacterCombination >, TableCell < KeyCharacterCombination, KeyCharacterCombination > > () {
        @Override
        public TableCell < KeyCharacterCombination, KeyCharacterCombination > call (TableColumn < KeyCharacterCombination, KeyCharacterCombination > tableColumn) {
            final TableCell < KeyCharacterCombination, KeyCharacterCombination > cell = new TextFieldTableCell < KeyCharacterCombination, KeyCharacterCombination > () {
                @Override
                public void updateItem (KeyCharacterCombination keyCharacterCombination, boolean b) {
                    super.updateItem (keyCharacterCombination, b);
                    if (this.getItem () == null || b) {
                        setText (null);
                    } else {
                        StringBuilder sb = new StringBuilder ();
                        if (keyCharacterCombination.getControl () == KeyCombination.ModifierValue.DOWN) {
                            sb.append ("Ctrl + ");
                        }
                        if (keyCharacterCombination.getAlt () == KeyCombination.ModifierValue.DOWN) {
                            sb.append ("Alt + ");
                        }
                        sb.append (keyCharacterCombination.getCharacter ());
                        setText (sb.toString ());
                    }
                }}

            ;
            cell.setOnKeyPressed (new EventHandler < KeyEvent > () {
                Set < KeyCombination.Modifier > keys = new HashSet < > ();
                @Override
                public void handle (KeyEvent keyEvent) {
                    if (keyEvent.getCode () == KeyCode.CONTROL) {
                        keys.add (KeyCombination.CONTROL_DOWN);
                    } else if (keyEvent.getCode () == KeyCode.ALT) {
                        keys.add (KeyCombination.ALT_DOWN);
                    } else if (keyEvent.getCode ().isLetterKey ()) {
                        items.set (cell.getIndex (), new KeyCharacterCombination (keyEvent.getCode ().getName (), keys.toArray (new KeyCombination.Modifier [keys.size ()])));
                        keys.clear ();
                    }

                }}

            );
            return cell;
        }}

    );
    table.getColumns ().add (column);
    stage.setScene (new Scene (table));
    stage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18591463_18593376_14_38
18591463_18907515_35_43
Title: Print RED BLUE GREEN in order using System.out.print 
----------------------------------------

public void run () {
    while (true) {
        try {
            boolean result = false;
            do {
                result = cb.tryAcquireNanos (Integer.parseInt (Thread.currentThread ().getName ()), TimeUnit.MILLISECONDS.toNanos (1000));
            } while (! result);
            for (int i = 0;
            i < color.length (); i ++) {
                try {
                    Thread.sleep (300);
                } catch (InterruptedException e) {
                    System.exit (- 1);
                }
                System.out.print ("" + color.charAt (i) + " ");
            }
        } catch (NumberFormatException e1) {
            e1.printStackTrace ();
        } catch (InterruptedException e1) {
            e1.printStackTrace ();
        } finally {
            cb.release (Integer.parseInt (Thread.currentThread ().getName ()));
        }
    }
}
----------------------------------------

public void run () {
    while (phaser.arriveAndAwaitAdvance () != order) {
    }
    for (int i = 0;
    i < color.length (); i ++) {
        sleep ();
        System.out.print ("" + color.charAt (i) + " ");
    }
    phaser.arriveAndDeregister ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18591463_18593376_14_38
18591463_19040127_9_25
Title: Print RED BLUE GREEN in order using System.out.print 
----------------------------------------

public void run () {
    while (true) {
        try {
            boolean result = false;
            do {
                result = cb.tryAcquireNanos (Integer.parseInt (Thread.currentThread ().getName ()), TimeUnit.MILLISECONDS.toNanos (1000));
            } while (! result);
            for (int i = 0;
            i < color.length (); i ++) {
                try {
                    Thread.sleep (300);
                } catch (InterruptedException e) {
                    System.exit (- 1);
                }
                System.out.print ("" + color.charAt (i) + " ");
            }
        } catch (NumberFormatException e1) {
            e1.printStackTrace ();
        } catch (InterruptedException e1) {
            e1.printStackTrace ();
        } finally {
            cb.release (Integer.parseInt (Thread.currentThread ().getName ()));
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            cb [(j == 0 ? cb.length : j) - 1].await ();
            String name = getName ();
            for (int i = 0;
            i < name.length (); i ++) {
                CyclicBari.sleep ();
                System.out.print (" " + name.charAt (i) + " ");
            }
            cb [j].await ();
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18591463_18593376_4_47
18591463_19040127_1_37
Title: Print RED BLUE GREEN in order using System.out.print 
----------------------------------------

public static void main (String [] args) {
    final class ColouredRunnable implements Runnable {
        private String color;
        public ColouredRunnable (String color) {
            this.color = color;
        }@Override
        public void run () {
            while (true) {
                try {
                    boolean result = false;
                    do {
                        result = cb.tryAcquireNanos (Integer.parseInt (Thread.currentThread ().getName ()), TimeUnit.MILLISECONDS.toNanos (1000));
                    } while (! result);
                    for (int i = 0;
                    i < color.length (); i ++) {
                        try {
                            Thread.sleep (300);
                        } catch (InterruptedException e) {
                            System.exit (- 1);
                        }
                        System.out.print ("" + color.charAt (i) + " ");
                    }
                } catch (NumberFormatException e1) {
                    e1.printStackTrace ();
                } catch (InterruptedException e1) {
                    e1.printStackTrace ();
                } finally {
                    cb.release (Integer.parseInt (Thread.currentThread ().getName ()));
                }
            }
        }}

    new Thread (new ColouredRunnable ("RED"), "0").start ();
    new Thread (new ColouredRunnable ("BLUE"), "1").start ();
    new Thread (new ColouredRunnable ("GREEN"), "2").start ();
    new Thread (new ColouredRunnable ("BLACK"), "3").start ();
    new Thread (new ColouredRunnable ("MAGENTA"), "4").start ();
    new Thread (new ColouredRunnable ("WHITE"), "5").start ();
}
----------------------------------------

public static void main (String [] args) {
    String colors [] = {"RED", "BLUE", "GREEN"};
    final CyclicBarrier [] cb = createCB (colors);
    for (int i = 0;
    i < colors.length; i ++) {
        final int j = i;
        new Thread (colors [i]) {
            public void run () {
                while (true) {
                    try {
                        cb [(j == 0 ? cb.length : j) - 1].await ();
                        String name = getName ();
                        for (int i = 0;
                        i < name.length (); i ++) {
                            CyclicBari.sleep ();
                            System.out.print (" " + name.charAt (i) + " ");
                        }
                        cb [j].await ();
                    } catch (InterruptedException | BrokenBarrierException e) {
                        e.printStackTrace ();
                    }
                }
            }}

        .start ();
    }
    System.out.println ("start");
    try {
        cb [cb.length - 1].await ();
    } catch (InterruptedException | BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18591463_18907515_35_43
18591463_19040127_9_25
Title: Print RED BLUE GREEN in order using System.out.print 
----------------------------------------

public void run () {
    while (phaser.arriveAndAwaitAdvance () != order) {
    }
    for (int i = 0;
    i < color.length (); i ++) {
        sleep ();
        System.out.print ("" + color.charAt (i) + " ");
    }
    phaser.arriveAndDeregister ();
}
----------------------------------------

public void run () {
    while (true) {
        try {
            cb [(j == 0 ? cb.length : j) - 1].await ();
            String name = getName ();
            for (int i = 0;
            i < name.length (); i ++) {
                CyclicBari.sleep ();
                System.out.print (" " + name.charAt (i) + " ");
            }
            cb [j].await ();
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18616229_18616853_1_25
18616229_18617064_50_72
Title: Using the arrays index values from one for-loop in another 
----------------------------------------

public void count (int [] a) {
    System.out.println ("N " + "Count");
    for (int i = 0;
    i < a.length - 1; i ++) {
        if (a [i] != 0) {
            if (a [i] == a [i + 1]) {
                count ++;
            } else {
                System.out.println (a [i] + " " + count);
                count = 1;
            }
        }
    }
    if (a [a.length - 1] != 0) System.out.println (a [a.length - 1] + " " + count);

}
----------------------------------------

public void count (Integer [] a) {
    System.out.println ("N " + "Count");
    for (int i = 0;
    i < a.length - 1; i ++) {
        if (i == 0 && a [i] != null) {
            System.out.println (a [i] + " " + count);
        }
        if (i > 0 && (a [i] != null && a [i - 1] != null)) {
            if (a [i] == a [i - 1]) {
                count ++;
            }
            if (a [i] != a [i - 1]) {
                count = 1;
            }
            if (a [i] != 0) {
                System.out.println (a [i] + " " + count);
            }
        } else {
            count = 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18623496_18623549_1_13
18623496_18623745_1_13
Title: How do I add a keypress action in my program? 
----------------------------------------

private void determineAction (char choice) {
    System.out.println (actionText.get (choice));
    switch (choice1) {
        case "x" :
            doExit ();
            break;
        case "i" :
            printInventory ();
            break;
    }
}
----------------------------------------

private void determineAction (char choice) {
    switch (choice1) {
        case "x" :
            System.out.println ("\nYou quit the game!");
            System.exit (0);
            break;
        case "i" :
            System.out.println ("\nInventory Items:");
            System.out.println ("\n  Things are here");
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18634215_18635259_3_23
18634215_18717390_2_19
Title: JSOUP find all images in HTML file with ALT attribute? 
----------------------------------------

public static void main (String [] args) throws IOException {
    Document doc = Jsoup.connect ("http://www.google.co.uk").get ();
    Elements img = doc.getElementsByTag ("img");
    int counter = 0;
    for (Element el : img) {
        if (el.attr ("alt") == null || el.attr ("alt").equals ("")) {
            counter ++;
        }
        System.out.println ("image tag: " + el.attr ("src") + " Alt: " + el.attr ("alt"));
    }
    System.out.println ("Number of unset alt: " + counter);
}
----------------------------------------

public static void main (String [] args) {
    Document doc;
    try {
        doc = Jsoup.connect ("...HTML").get ();
        Elements img = doc.getElementsByTag ("img");
        for (Element el : img) {
            if (el.hasAttr ("alt")) {
                System.out.println ("is the alt text relevant to the image? ");
            } else {
                System.out.println ("no alt text found on image");
            }
        }
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18637322_18638882_70_81
18637322_18638882_97_108
Title: How to handle a Client/Server application for sending message and/or files 
----------------------------------------

public Void call () throws Exception {
    ServerSocket ss = new ServerSocket (port);
    int client = 0;
    while (client < clients) {
        e.submit (new ClientHandler (client ++, ss.accept ()));
    }
    ss.close ();
    e.shutdown ();
    while (! e.isTerminated ()) {
    }
    return null;
}
----------------------------------------

public Void call () throws Exception {
    BufferedReader in = new BufferedReader (new InputStreamReader (s.getInputStream ()));
    String fromClient;
    while ((fromClient = in.readLine ()) != null) {
        System.out.println ("FROM CLIENT#" + client + ": " + fromClient);
    }
    in.close ();
    s.close ();
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18644550_18644731_4_22
18644550_18644863_3_24
Title: use parameterized class to return read data from specified file using Java 
----------------------------------------

public static String read (String file_name) {
    String fileName = System.getProperty ("user.dir") + "/src/resources/data_files/" + file_name + ".txt";
    String client_number = null;
    try {
        FileReader inputFile = new FileReader (fileName);
        BufferedReader bufferReader = new BufferedReader (inputFile);
        client_number = bufferReader.readLine ();
        System.out.print ("client number " + client_number);
        bufferReader.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    return client_number;
}
----------------------------------------

public static String read (String file_name) {
    String client_number = "";
    String fileName = System.getProperty ("user.dir") + "/src/resources" + "/data_files" + file_name + ".txt";
    try {
        FileReader inputFile = new FileReader (fileName);
        BufferedReader bufferReader = new BufferedReader (inputFile);
        String client_number = bufferReader.readLine ();
        System.out.print ("client number " + client_number);
        bufferReader.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    return client_number;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18644994_18645530_12_29
18644994_18645530_31_48
Title: How to discover what numbers are missing in the resultset? 
----------------------------------------

public Integer [] getMissingNumbers (final ResultSet results) throws SQLException {
    while (results.next ()) {
        this.results [results.getInt (1) - this.min] = true;
    }
    final List < Integer > missingNums = new ArrayList < > ();
    for (int i = 0;
    i < this.results.length; i ++) {
        if (! this.results [i]) {
            missingNums.add (i + this.min);
        }
    }
    return missingNums.toArray (new Integer [missingNums.size ()]);
}
----------------------------------------

public Integer [] getMissingNumbers (final int [] results) {
    for (int i = 0;
    i < results.length; i ++) {
        this.results [results [i] - this.min] = true;
    }
    final List < Integer > missingNums = new ArrayList < > ();
    for (int i = 0;
    i < this.results.length; i ++) {
        if (! this.results [i]) {
            missingNums.add (i + this.min);
        }
    }
    return missingNums.toArray (new Integer [missingNums.size ()]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18645948_18646082_26_47
18645948_18646292_30_40
Title: Java: Console output in JTable 
----------------------------------------

public Object getValueAt (int rowIndex, int columnIndex) {
    File root = roots [rowIndex];
    Object result = null;
    switch (columnIndex) {
        case 0 :
            result = rowIndex;
            break;
        case 1 :
            result = root.getName ();
            break;
        case 3 :
            result = root.getTotalSpace ();
            break;
        case 4 :
            result = root.getTotalSpace () - root.getFreeSpace ();
            break;
        case 5 :
            result = "All Good";
            break;
    }
    return result;
}
----------------------------------------

public Object getValueAt (int row, int col) {
    Volume volume = volumes.get (row);
    switch (col) {
        case 0 :
            return volume.number;
        case 1 :
            return volume.name;
        case 2 :
            return volume.totalSize;
        case 3 :
            return volume.usedSize;
        case 4 :
            return volume.status;
        default :
            return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18650768_18651054_5_14
18650768_41234516_1_32
Title: Count y and z at end of a word 
----------------------------------------

public static int countYZ (String str) {
    int countYandZ = 0;
    String [] arr = str.split (" ");
    for (String i : arr) {
        if (("Y".equalsIgnoreCase (String.valueOf (i.charAt (i.length () - 1)))) || ("Z".equalsIgnoreCase (String.valueOf (i.charAt (i.length () - 1))))) {
            countYandZ ++;
        }
    }
    return countYandZ;
}
----------------------------------------

public int countYZ (String str) {
    int ret = 0;
    if (str.length () >= 2) {
        if (! Character.isLetter (str.charAt (1)) && (str.charAt (0) == 'y' || str.charAt (0) == 'Y' || str.charAt (0) == 'z' || str.charAt (0) == 'Z')) {
            ret ++;
        }
        if (Character.isLetter (str.charAt (str.length () - 2)) && (str.charAt (str.length () - 1) == 'y' || str.charAt (str.length () - 1) == 'Y' || str.charAt (str.length () - 1) == 'z' || str.charAt (str.length () - 1) == 'Z')) {
            ret ++;
        }
    }
    if (str.length () >= 3) {
        for (int i = 2;
        i < str.length (); i ++) {
            char testOne = str.charAt (i - 2);
            char testTwo = str.charAt (i - 1);
            char testThree = str.charAt (i);
            if (Character.isLetter (testOne) && (testTwo == 'y' || testTwo == 'Y' || testTwo == 'z' || testTwo == 'Z') && (! Character.isLetter (testThree))) {
                ret ++;
            }
        }
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18650768_18651054_5_14
18650768_49466116_1_10
Title: Count y and z at end of a word 
----------------------------------------

public static int countYZ (String str) {
    int countYandZ = 0;
    String [] arr = str.split (" ");
    for (String i : arr) {
        if (("Y".equalsIgnoreCase (String.valueOf (i.charAt (i.length () - 1)))) || ("Z".equalsIgnoreCase (String.valueOf (i.charAt (i.length () - 1))))) {
            countYandZ ++;
        }
    }
    return countYandZ;
}
----------------------------------------

public int countYZ (String str) {
    int Counter = 0;
    String [] words = str.split ("[\\W\\d+]");
    for (String w : words) {
        if (w.toUpperCase ().endsWith ("Y") || w.toUpperCase ().endsWith ("Z")) {
            ++ Counter;
        }
    }
    return Counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18650768_41234516_1_32
18650768_49466116_1_10
Title: Count y and z at end of a word 
----------------------------------------

public int countYZ (String str) {
    int ret = 0;
    if (str.length () >= 2) {
        if (! Character.isLetter (str.charAt (1)) && (str.charAt (0) == 'y' || str.charAt (0) == 'Y' || str.charAt (0) == 'z' || str.charAt (0) == 'Z')) {
            ret ++;
        }
        if (Character.isLetter (str.charAt (str.length () - 2)) && (str.charAt (str.length () - 1) == 'y' || str.charAt (str.length () - 1) == 'Y' || str.charAt (str.length () - 1) == 'z' || str.charAt (str.length () - 1) == 'Z')) {
            ret ++;
        }
    }
    if (str.length () >= 3) {
        for (int i = 2;
        i < str.length (); i ++) {
            char testOne = str.charAt (i - 2);
            char testTwo = str.charAt (i - 1);
            char testThree = str.charAt (i);
            if (Character.isLetter (testOne) && (testTwo == 'y' || testTwo == 'Y' || testTwo == 'z' || testTwo == 'Z') && (! Character.isLetter (testThree))) {
                ret ++;
            }
        }
    }
    return ret;
}
----------------------------------------

public int countYZ (String str) {
    int Counter = 0;
    String [] words = str.split ("[\\W\\d+]");
    for (String w : words) {
        if (w.toUpperCase ().endsWith ("Y") || w.toUpperCase ().endsWith ("Z")) {
            ++ Counter;
        }
    }
    return Counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18655853_18655954_1_10
18655853_18655957_1_21
Title: "How to retainAll but regarding doubles in Java?" 
----------------------------------------

public List < Object > retainAllButRegardingDoubles (List < Object > list1, List < Object > list2) {
    List < Object > result = new ArrayList < Object > ();
    for (Object o : list1) {
        if (list2.contains (o)) {
            result.add (o);
            list2.remove (o);
        }
    }
    return result;
}
----------------------------------------

private static ArrayList retainAllButRegardingDoubles (ArrayList list1, ArrayList list2) {
    Set < ? > set1 = new HashSet (list1);
    Set < ? > set2 = new HashSet (list2);
    ArrayList < Object > result = new ArrayList ();
    for (Object o : set1) {
        if (Collections.frequency (list1, o) > 1) {
            result.add (o);
        }
    }
    for (Object o : set2) {
        if (Collections.frequency (list2, o) > 1) {
            result.add (o);
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18664211_18664230_1_24
18664211_18664384_1_26
Title: Why isn't this public String function working? 
----------------------------------------

public String getDayOfWeek () {
    if (numericDayOfWeek == 0) {
        return "Saturday";
    }
    if (numericDayOfWeek == 1) {
        return "Sunday";
    }
    if (numericDayOfWeek == 2) {
        return "Monday";
    }
    if (numericDayOfWeek == 3) {
        return "Tuesday";
    }
    if (numericDayOfWeek == 4) {
        return "Wednesday";
    }
    if (numericDayOfWeek == 5) {
        return "Thursday";
    }
    if (numericDayOfWeek == 6) {
        return "Friday";
    }
    return "Error";
}
----------------------------------------

public String getDayOfWeek () {
    if (numericDayOfWeek == 0) {
        return "Saturday";
    } else if (numericDayOfWeek == 1) {
        return "Sunday";
    } else if (numericDayOfWeek == 2) {
        return "Monday";
    } else if (numericDayOfWeek == 3) {
        return "Tuesday";
    } else if (numericDayOfWeek == 4) {
        return "Wednesday";
    } else if (numericDayOfWeek == 5) {
        return "Thursday";
    } else if (numericDayOfWeek == 6) {
        return "Friday";
    } else {
        return "Error";
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18664211_18664230_1_24
18664211_18667885_1_15
Title: Why isn't this public String function working? 
----------------------------------------

public String getDayOfWeek () {
    if (numericDayOfWeek == 0) {
        return "Saturday";
    }
    if (numericDayOfWeek == 1) {
        return "Sunday";
    }
    if (numericDayOfWeek == 2) {
        return "Monday";
    }
    if (numericDayOfWeek == 3) {
        return "Tuesday";
    }
    if (numericDayOfWeek == 4) {
        return "Wednesday";
    }
    if (numericDayOfWeek == 5) {
        return "Thursday";
    }
    if (numericDayOfWeek == 6) {
        return "Friday";
    }
    return "Error";
}
----------------------------------------

public String getDayOfWeek () {
    switch (numericDayOfWeek) {
        case 0 :
            return "Saturday";
        case 1 :
            return "Sunday";
        case 2 :
            return "Monday";
        case 3 :
            return "Tuesday";
        case 4 :
            return "Wednesday";
        case 5 :
            return "Thursday";
        case 6 :
            return "Friday";
    }
    throw new IllegalArgumentException ("numericDayOfWeek is out of range: " + numericDayOfWeek);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18664211_18664384_1_26
18664211_18667885_1_15
Title: Why isn't this public String function working? 
----------------------------------------

public String getDayOfWeek () {
    if (numericDayOfWeek == 0) {
        return "Saturday";
    } else if (numericDayOfWeek == 1) {
        return "Sunday";
    } else if (numericDayOfWeek == 2) {
        return "Monday";
    } else if (numericDayOfWeek == 3) {
        return "Tuesday";
    } else if (numericDayOfWeek == 4) {
        return "Wednesday";
    } else if (numericDayOfWeek == 5) {
        return "Thursday";
    } else if (numericDayOfWeek == 6) {
        return "Friday";
    } else {
        return "Error";
    }

}
----------------------------------------

public String getDayOfWeek () {
    switch (numericDayOfWeek) {
        case 0 :
            return "Saturday";
        case 1 :
            return "Sunday";
        case 2 :
            return "Monday";
        case 3 :
            return "Tuesday";
        case 4 :
            return "Wednesday";
        case 5 :
            return "Thursday";
        case 6 :
            return "Friday";
    }
    throw new IllegalArgumentException ("numericDayOfWeek is out of range: " + numericDayOfWeek);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18685561_18685673_1_10
18685561_18686149_19_55
Title: Android Webview Goback 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.main);
    mWebView = (WebView) findViewById (R.id.webView);
    mWebView.getSettings ().setJavaScriptEnabled (true);
    mWebView.setWebChromeClient (new WebChromeClient ());
    mWebView.loadUrl ("https://www.google.com");
    Airpush airpush = new Airpush (getApplicationContext (), null);
    airpush.startPushNotification (false);
}
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    this.getWindow ().requestFeature (Window.FEATURE_PROGRESS);
    setContentView (R.layout.main);
    webView = (WebView) findViewById (R.id.webview);
    webView.getSettings ().setJavaScriptEnabled (true);
    webView.setWebChromeClient (new WebChromeClient () {
        public void onProgressChanged (WebView view, int progress) {
            activity.setTitle ("Loading...");
            activity.setProgress (progress * 100);
            if (progress == 100) activity.setTitle (R.string.app_name);

        }}

    );
    webView.setWebViewClient (new WebViewClient () {
        @Override
        public void onReceivedError (WebView view, int errorCode, String description, String failingUrl) {
        }@Override
        public boolean shouldOverrideUrlLoading (WebView view, String url) {
            view.loadUrl (url);
            return true;
        }}

    );
    webView.loadUrl ("http://developer.android.com/index.html");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18694732_18694890_17_28
18694732_18694890_39_48
Title: Run Handler messages in a background thread 
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 1000; i ++) {
            queue.add (i);
            Thread.sleep (1);
        }
        queue.add (End);
    } catch (InterruptedException ex) {
    }
}
----------------------------------------

public void run () {
    boolean ended = false;
    while (! ended) {
        Integer i = queue.poll ();
        if (i != null) {
            ended = i == End;
            System.out.println (i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18694732_18694890_17_28
18694732_27599932_3_17
Title: Run Handler messages in a background thread 
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 1000; i ++) {
            queue.add (i);
            Thread.sleep (1);
        }
        queue.add (End);
    } catch (InterruptedException ex) {
    }
}
----------------------------------------

public void run () {
    Looper.prepare ();
    final Handler handler = new Handler ();
    handler.postDelayed (new Runnable () {
        @Override
        public void run () {
            handler.removeCallbacks (this);
            Looper.myLooper ().quit ();
        }}

    , 2000);
    Looper.loop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18694732_18694890_39_48
18694732_27599932_3_17
Title: Run Handler messages in a background thread 
----------------------------------------

public void run () {
    boolean ended = false;
    while (! ended) {
        Integer i = queue.poll ();
        if (i != null) {
            ended = i == End;
            System.out.println (i);
        }
    }
}
----------------------------------------

public void run () {
    Looper.prepare ();
    final Handler handler = new Handler ();
    handler.postDelayed (new Runnable () {
        @Override
        public void run () {
            handler.removeCallbacks (this);
            Looper.myLooper ().quit ();
        }}

    , 2000);
    Looper.loop ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18694815_18694910_5_30
18694815_18694955_16_23
Title: Perfect numbers 
----------------------------------------

public static void main (String [] args) {
    long num = 1000;
    int sum = 0;
    ArrayList < Integer > perfectList = new ArrayList < > ();
    ArrayList < Integer > factorList = new ArrayList < > ();
    for (int i = 6;
    i < num; i ++) {
        factorList.clear ();
        for (int j = 1;
        j <= i / 2; j ++) {
            if (i % j == 0) {
                factorList.add (j);
            }
        }
        sum = 0;
        for (int h = 0;
        h < factorList.size (); h ++) {
            sum = sum + factorList.get (h);
        }
        if (sum == i) {
            perfectList.add (i);
        }
    }
    System.out.println ("The Perfect numbers upto 1000 are : ");
    for (Integer item : perfectList) {
        System.out.print (item + "/t");
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("The Perfect numbers upto 1000 are :");
    for (int i = 0;
    i <= 1000; i ++) {
        if (PerfectNumbers.isPerfectNumber (i)) {
            System.out.println (i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18697802_18698054_15_37
18697802_18698423_1_12
Title: Printing elements of an array without repeating an element 
----------------------------------------

public static void main (String [] args) {
    String d [] = getArray ();
    int noOftimesRepeated;
    ArrayList < String > list = new ArrayList < String > ();
    for (int i = 0;
    i < getArray ().length; i ++) {
        if (list.contains (d [i])) continue;

        noOftimesRepeated = 1;
        for (int j = 0;
        j < getArray ().length; j ++) {
            if (i != j && d [i].equalsIgnoreCase (d [j])) {
                noOftimesRepeated = noOftimesRepeated + 1;
                list.add (d [i]);
            }
        }
        System.out.println (d [i] + "\t" + "\t" + noOftimesRepeated);
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] myArray = {"Khaled", "Valderama", "Daoud", "Khaled", "Rasheed", "Daoud", "Valderama", "Khaled"};
    sort (myArray);
    String last = null;
    for (int i = 0;
    i < myArray.length; i ++) {
        if (last == null || ! myArray [i].equals (last)) {
            last = myArray [i];
            System.out.print (last + ", ");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18697802_18698054_15_37
18697802_18742351_9_62
Title: Printing elements of an array without repeating an element 
----------------------------------------

public static void main (String [] args) {
    String d [] = getArray ();
    int noOftimesRepeated;
    ArrayList < String > list = new ArrayList < String > ();
    for (int i = 0;
    i < getArray ().length; i ++) {
        if (list.contains (d [i])) continue;

        noOftimesRepeated = 1;
        for (int j = 0;
        j < getArray ().length; j ++) {
            if (i != j && d [i].equalsIgnoreCase (d [j])) {
                noOftimesRepeated = noOftimesRepeated + 1;
                list.add (d [i]);
            }
        }
        System.out.println (d [i] + "\t" + "\t" + noOftimesRepeated);
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] noOftimesRepeated;
    sort (myArray);
    int no_of_repeat = 1;
    String temp = null;
    int i;
    int count = 0;
    String previous = null;
    for (String s : myArray) {
        if (s.equals (previous)) {
            count ++;
        } else {
            if (previous != null) System.out.println (previous + " :" + count);

            previous = s;
            count = 1;
        }
    }
    if (myArray.length > 0) {
        System.out.println (previous + " :" + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18697802_18698423_18_30
18697802_18742351_64_90
Title: Printing elements of an array without repeating an element 
----------------------------------------

public static void sort (String [] array) {
    String temp = null;
    for (int j = 0;
    j < array.length; j ++) {
        for (int i = 0;
        i < array.length - 1; i ++) {
            if (array [i].compareTo (array [i + 1]) < 0) {
                temp = array [i];
                array [i] = array [i + 1];
                array [i + 1] = temp;
            }
        }
    }
}
----------------------------------------

public static void sort (String [] array) {
    String temp = null;
    for (int j = 0;
    j < array.length; j ++) {
        for (int i = 0;
        i < array.length - 1; i ++) {
            if (array [i].compareTo (array [i + 1]) < 0) {
                temp = array [i];
                array [i] = array [i + 1];
                array [i + 1] = temp;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18697802_18698423_1_12
18697802_18742351_9_62
Title: Printing elements of an array without repeating an element 
----------------------------------------

public static void main (String [] args) {
    String [] myArray = {"Khaled", "Valderama", "Daoud", "Khaled", "Rasheed", "Daoud", "Valderama", "Khaled"};
    sort (myArray);
    String last = null;
    for (int i = 0;
    i < myArray.length; i ++) {
        if (last == null || ! myArray [i].equals (last)) {
            last = myArray [i];
            System.out.print (last + ", ");
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] noOftimesRepeated;
    sort (myArray);
    int no_of_repeat = 1;
    String temp = null;
    int i;
    int count = 0;
    String previous = null;
    for (String s : myArray) {
        if (s.equals (previous)) {
            count ++;
        } else {
            if (previous != null) System.out.println (previous + " :" + count);

            previous = s;
            count = 1;
        }
    }
    if (myArray.length > 0) {
        System.out.println (previous + " :" + count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18709483_18709600_5_27
18709483_18712132_1_14
Title: Simple Java Fibonacci code issue 
----------------------------------------

public static void main (String [] args) {
    int count;
    Scanner in = new Scanner (System.in);
    System.out.println ("Please enter number");
    count = in.nextInt ();
    int [] fib = new int [count + 1];
    fib [0] = 1;
    fib [1] = 1;
    for (int i = 2;
    i <= count; i ++) {
        fib [i] = fib [i - 1] + fib [i - 2];
    }
    for (int i = 0;
    i <= count; i ++) {
        System.out.print (fib [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter a number");
    Scanner in = new Scanner (System.in);
    int count = in.nextInt ();
    long a = 1, b = 1;
    for (int i = 0;
    i < count; i ++) {
        System.out.print (a + " ");
        long c = a + b;
        a = b;
        b = c;
    }
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18714358_18714998_10_31
18714358_18723253_1_17
Title: Sorting objects in a recursive generic data structure 
----------------------------------------

public void sort () {
    Collections.sort (this.children, new Comparator < Tree < T > > () {
        @Override
        public int compare (Tree < T > objectA, Tree < T > objectB) {
            if (type == DataItem.class) {
                DataItem diA = (DataItem) (objectA.data);
                DataItem diB = (DataItem) (objectB.data);
                return diA.name.compareTo (diB.name);
            } else throw new IllegalArgumentException ();

        }}

    );
    for (Tree < T > child : this.children) {
        child.sort ();
    }
}
----------------------------------------

public void sort (final Comparator < ? super T > dataComparator) {
    Collections.sort (this.children, new Comparator < Tree < T > > () {
        @Override
        public int compare (Tree < T > treeA, Tree < T > treeB) {
            return dataComparator.compare (treeA.getData (), treeB.getData ());
        }}

    );
    for (Tree < T > child : this.children) {
        child.sort (dataComparator);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18714797_18714976_1_13
18714797_18715009_18_37
Title: Replacing a number in an array if duplicates are found 
----------------------------------------

public static void check (int [] y) {
    int len = y.length;
    int i = 0;
    int j = i + 1;
    for (i = 0; i < len - 1; i ++) {
        if (y [i] == y [j]) {
            System.out.println ("Duplicate found");
        }
    }
}
----------------------------------------

public static int [] check (int [] y) {
    int len = y.length;
    int i = 0;
    for (i = 0; i < len; i ++) {
        for (int j = 0;
        j < i; j ++) {
            if (y [i] == y [j]) {
                y [i] = - 1;
            }
        }
    }
    for (int k = 0;
    k < len; k ++) {
    }
    return y;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18714797_18715009_3_16
18714797_18715396_1_19
Title: Replacing a number in an array if duplicates are found 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter 5 integers:  ");
    int [] x = new int [5];
    for (int i = 0;
    i < 5; i ++) {
        x [i] = in.nextInt ();
    }
    int z [] = check (x);
    for (int o = 0;
    o < z.length; o ++) {
        System.out.println (z [o]);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter 5 integers:  ");
    Map < Integer, Integer > map = new HashMap < > ();
    int [] x = new int [5];
    for (int i = 0;
    i < 5; i ++) {
        int val = in.nextInt ();
        x [i] = val;
        Integer iniVal = map.get (val);
        if (iniVal == null) {
            iniVal = 0;
        }
        map.put (val, iniVal + 1);
    }
    int [] y = getNewArr (x, map);
    for (int i = 0;
    i < y.length; i ++) {
        System.out.println (y [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18720584_18720680_3_11
18720584_18720943_8_22
Title: return values between 2 given integers (Specified in main) which can be divided by 3 in a function and return answer back to main method 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter range of values");
    int x = in.nextInt ();
    int y = in.nextInt ();
    int [] result = search (x, y);
    for (int i = 0;
    i < result.length; i ++) System.out.println (result [i]);

}
----------------------------------------

public static void main (String [] args) {
    int [] result;
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter range of values: ");
    int x = in.nextInt ();
    int y = in.nextInt ();
    result = findNumbersBetween (x, y);
    for (int i = 0;
    i < result.length; i ++) {
        System.out.println (result [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18722112_18723550_43_62
18722112_18723988_274_294
Title: How to select all items in java swing JComboBox or any other similar jComponent 
----------------------------------------

public Component getListCellRendererComponent (JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
    if (selected.contains (value)) {
        setBackground (list.getSelectionBackground ());
        setForeground (list.getSelectionForeground ());
    } else {
        setBackground (list.getBackground ());
        setForeground (list.getForeground ());
    }
    setText ((value == null) ? "" : value.toString ());
    return this;
}
----------------------------------------

public Component getListCellRendererComponent (JList comp, Object value, int index, boolean isSelected, boolean hasFocus) {
    setEnabled (comp.isEnabled ());
    setSelected (((CheckListItem) value).isSelected ());
    setFont (comp.getFont ());
    setText (value.toString ());
    if (isSelected) {
        setBackground (comp.getSelectionBackground ());
        setForeground (comp.getSelectionForeground ());
    } else {
        setBackground (comp.getBackground ());
        setForeground (comp.getForeground ());
    }
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18727201_18727265_7_19
18727201_18727303_1_16
Title: Having trouble using while loop in java 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    String line;
    while (! (line = input.nextLine ()).equals ("done")) {
        if (line.equals ("hi")) {
            System.out.println ("Hello");
        } else {
            System.out.println ("Type hi or done");
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    do {
        String inputLine = input.nextLine ();
        if (inputLine.equals ("hi")) {
            System.out.println ("Hello");
        } else if (! inputLine.equals ("done")) {
            System.out.println ("Type hi or done");
        }

    } while (! inputLine.equals ("done"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18727246_18727706_1_9
18727246_18727929_3_14
Title: 2d Array that swaps all the integers or characters in opposing rows/columns 
----------------------------------------

public static void switchRows (int [] [] anArray) {
    for (int i = 0;
    i < anArray.length / 2; i ++) {
        for (int j = 0;
        j < anArray [i].length; j ++) {
            int tmp = anArray [i] [j];
            anArray [i] [j] = anArray [anArray.length - i - 1] [j];
            anArray [anArray.length - i - 1] [j] = tmp;
        }
    }
}
----------------------------------------

public static int [] [] switchRows (int [] [] anArray) {
    int rows = anArray.length;
    int columns = anArray [0].length;
    int [] [] result = new int [rows] [columns];
    for (int i = 0;
    rows > i; i ++) {
        for (int j = 0;
        j < anArray [i].length; j ++) {
            result [rows - i - 1] [j] = anArray [i] [j];
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18727982_18728186_4_15
18727982_18728285_1_12
Title: I cannot figure out why I have this error: ConcurrentModificationException 
----------------------------------------

public void shortenTheList (String guess, int black1, int white1) {
    Iterator < String > it = possibleSolutions.iterator ();
    while (it.hasNext ()) {
        String str = it.next ();
        if (compare (guess, str, black1, white1)) {
            it.remove ();
        }
    }
}
----------------------------------------

public void shortenTheList (String guess, int black1, int white1) {
    Iterator i = possibleSolutions.Iterator ();
    while (i.hasNext ()) {
        String str = (String) i.next ();
        if (compare (guess, str, black1, white1)) {
            i.remove ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18735762_18736227_78_85
18735762_18743400_27_35
Title: Using BoxLayout as vertical FlowLayout to hold JPanel 
----------------------------------------

public static void main (String [] args) {
    javax.swing.SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            BoxStructAndJComponents listDialogRunner = new BoxStructAndJComponents ();
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            TestGridBagLayout test = new TestGridBagLayout ();
            test.initUI1 ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18740213_18741038_1_27
18740213_18763665_1_19
Title: "Using play button in BindviewThat play function is not working" 
----------------------------------------

public void song () {
    if (mp != null) {
        Log.d ("Testing", "checking mp status.");
        if (mp.isPlaying ()) {
            Log.d ("Testing", "pausing song.");
            mp.pause ();
            play.setImageResource (R.drawable.ep1);
        } else {
            Log.d ("Testing", "playing song.");
            mp.start ();
            play.setImageResource (R.drawable.epause);
            Cursor filename = mDbHelper.fetchProject3FileName (mRowId);
            startManagingCursor (filename);
            expfilename = filename.getString (filename.getColumnIndexOrThrow (GinfyDbAdapter.CATEGORY_COLUMN_EXPFILENAME));
            playSong (expfilename);
        }
    }
}
----------------------------------------

public void song (int pos) {
    try {
        if (mp == null) {
            mp = new MediaPlayer ();
        }
        mp.reset ();
        Cursor filename = mDbHelper.fetchProject3FileName (pos);
        expfilename = filename.getString (filename.getColumnIndexOrThrow (GinfyDbAdapter.CATEGORY_COLUMN_EXPFILENAME));
        mp.setDataSource (ExperiencesActivity.this, Uri.parse (expfilename));
        Toast.makeText (getApplicationContext (), expfilename, 1000).show ();
        mp.prepare ();
        mp.start ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18740949_18741088_2_14
18740949_18741462_2_13
Title: Calculating MIN and Max Value and Round off to NearValue 
----------------------------------------

public static void main (String [] args) {
    int initalValue = 200;
    int finalValue = 1000;
    int range = finalValue - initalValue;
    int designCalRange = range / 4;
    System.out.println ("Dividing in to 5 equal intervals");
    System.out.println (initalValue);
    for (double i = 1;
    i <= 3; i ++) {
        System.out.println ((int) (initalValue + designCalRange));
        initalValue = initalValue + designCalRange;
    }
    System.out.println (finalValue);
}
----------------------------------------

public static void main (String [] args) {
    int minvalue = 300;
    int maxvalue = 900;
    int increment = (maxvalue - minvalue) / 5;
    int n = minvalue;
    for (int i = 1;
    i <= 5; i ++) {
        n = n + increment;
        System.out.println (n);
    }
}
----------------------------------------

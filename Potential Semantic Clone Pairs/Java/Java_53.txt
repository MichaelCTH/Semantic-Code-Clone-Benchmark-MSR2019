$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25640126_25640242_1_22
25640126_25640386_1_15
Title: JAVA: how to input data into a Hashtable using a scanner? 
----------------------------------------

public static void main (String [] args) {
    Hashtable < String, Integer > names = new Hashtable < String, Integer > ();
    String name = "";
    int age = 0;
    Scanner in = new Scanner (System.in);
    while (true) {
        System.out.println ("Enter name:");
        name = in.next ();
        if (name.equals ("end")) {
            break;
        }
        System.out.println ("Enter age:");
        age = Integer.valueOf (in.next ());
        names.put (name, age);
    }
    System.out.println ("\nHashtable:\n");
    for (String n : names.keySet ()) {
        System.out.println ("Name:\t" + n + "\nAge:\t" + names.get (n) + "\n");
    }
}
----------------------------------------

public static void main (String [] args) {
    Hashtable < String, Integer > students = new Hashtable < String, Integer > ();
    Scanner in = new Scanner (System.in);
    String line = in.nextLine ();
    String [] entries = line.split ("\\s+");
    for (String e : entries) {
        if (e.contains (":")) {
            String [] elements = e.split (":");
            students.put (elements [0], Integer.parseInt (elements [1]));
        }
    }
    System.out.println (students);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25644464_25644751_9_17
25644464_25644855_9_31
Title: How to implement toString() for collections? 
----------------------------------------

public String toString () {
    final StringBuilder builder = new StringBuilder ();
    final Iterator < Map.Entry < K, V > > entryIterator = entrySet ().iterator ();
    while (entryIterator.hasNext ()) {
        final Map.Entry < K, V > entry = entryIterator.next ();
        builder.append (entry.getKey ()).append (" = ").append (entry.getValue ()).append (",");
    }
    return removeComma (builder).toString ();
}
----------------------------------------

public String toString () {
    final Iterator < Map.Entry < K, V > > entryIterator = entrySet ().iterator ();
    if (! entryIterator.hasNext ()) {
        return "";
    }
    final StringBuilder builder = new StringBuilder ();
    for (;;) {
        final Map.Entry < K, V > entry = entryIterator.next ();
        builder.append (entry.getKey ());
        builder.append (" = ");
        builder.append (entry.getValue ());
        if (! entryIterator.hasNext ()) {
            return builder.toString ();
        }
        builder.append (", ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25644651_25644796_13_26
25644651_25644796_1_11
Title: Best way to write Custom Exception 
----------------------------------------

public CrifServiceFaultException (String processCode, String processDescription, String transformCode, String transformDescription) {
    super (processDescription + " " + transformDescription);
    this.processCode = processCode;
    this.processDescription = processDescription;
    this.transformCode = transformCode;
    this.transformDescription = transformDescription;
    errorCode = "";
    errorDescription = "";
}
----------------------------------------

public CrifServiceFaultException (String message) {
    super (message);
    processCode = "";
    processDescription = "";
    transformCode = "";
    transformDescription = "";
    errorCode = "";
    errorDescription = "";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25644651_25644796_13_26
25644651_25644796_28_38
Title: Best way to write Custom Exception 
----------------------------------------

public CrifServiceFaultException (String processCode, String processDescription, String transformCode, String transformDescription) {
    super (processDescription + " " + transformDescription);
    this.processCode = processCode;
    this.processDescription = processDescription;
    this.transformCode = transformCode;
    this.transformDescription = transformDescription;
    errorCode = "";
    errorDescription = "";
}
----------------------------------------

public CrifServiceFaultException (String errorCode, String errorDescription) {
    super (errorDescription);
    setErrorCode (errorCode);
    setErrorDescription (errorDescription);
    processCode = "";
    processDescription = "";
    transformCode = "";
    transformDescription = "";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25644651_25644796_1_11
25644651_25644796_28_38
Title: Best way to write Custom Exception 
----------------------------------------

public CrifServiceFaultException (String message) {
    super (message);
    processCode = "";
    processDescription = "";
    transformCode = "";
    transformDescription = "";
    errorCode = "";
    errorDescription = "";
}
----------------------------------------

public CrifServiceFaultException (String errorCode, String errorDescription) {
    super (errorDescription);
    setErrorCode (errorCode);
    setErrorDescription (errorDescription);
    processCode = "";
    processDescription = "";
    transformCode = "";
    transformDescription = "";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25646437_25646536_138_149
25646437_25646572_1_21
Title: How to Convert 1 - 1000 into words? 
----------------------------------------

public static void main (String [] args) {
    try {
        Scanner scanner = new Scanner (System.in);
        System.out.println ("Enter the number");
        int i = scanner.nextInt ();
        System.out.println ("*** " + EnglishNumberToWords.convert (i));
    } catch (Exception e) {
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    public static final String [] numberArray = new String [] {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));
    String number = in.readLine ();
    int num = 0;
    while (num != 1000) {
        if (num == Integer.parseInt (number)) {
            System.out.println (numberArray [num]);
        }
        num ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25651227_25651396_1_16
25651227_25651536_15_25
Title: ArrayList Lottery Game 
----------------------------------------

public void Generate (int numberOfGames) {
    for (int i = 0;
    i < numberOfGames; i ++) {
        Numbers ();
        for (int x = 0;
        x < 6; x ++) {
            Lottery.add (Numbers.get (x));
        }
        Numbers.clear ();
        Collections.sort (Lottery);
        Games.add (Lottery);
        Lottery.clear ();
    }
}
----------------------------------------

public void Generate (int numberOfGames) {
    for (int i = 0;
    i < numberOfGames; i ++) {
        Collections.shuffle (Numbers);
        Lottery = new ArrayList < Integer > ();
        for (int x = 0;
        x < 6; x ++) {
            Lottery.add (Numbers.get (x));
        }
        Collections.sort (Lottery);
        Games.add (Lottery);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25651867_25651995_1_20
25651867_25652034_1_14
Title: Populate GridView from Array 
----------------------------------------

@Override
public View getView (int position, View convertView, ViewGroup parent) {
    View row = convertView;
    if (row == null) {
        LayoutInflater inflater = ((Activity) context).getLayoutInflater ();
        row = inflater.inflate (R.layout.grid_row, parent, false);
    }
    ImageView gridImageView = (ImageView) row.findViewById (R.id.gridImageView);
    Picasso.with (context).load (thumbnailURLs.get (position)).placeholder (R.drawable.placeholder).error (R.drawable.placeholder).into (gridImageView);
    return row;
}
----------------------------------------

@Override
public View getView (int position, View convertView, ViewGroup parent) {
    View row = convertView;
    if (row == null) {
        LayoutInflater inflater = ((Activity) context).getLayoutInflater ();
        row = inflater.inflate (R.layout.grid_row, parent, false);
    }
    ImageView gridImageView = (ImageView) row.findViewById (R.id.gridImageView);
    Picasso.with (context).load (thumbnailURLS.get (position)).placeholder (R.drawable.placeholder).error (R.drawable.placeholder).into (gridImageView);
    return row;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2565230_2565300_6_29
2565230_2565738_5_21
Title: How should I parse this simple text file in Java? 
----------------------------------------

public static void main (String [] args) throws Exception {
    Map < String, String > m = new LinkedHashMap < String, String > ();
    FileInputStream fin = null;
    InputStreamReader isr = null;
    BufferedReader br = null;
    try {
        fin = new FileInputStream (args [0]);
        isr = new InputStreamReader (fin, "UTF-8");
        br = new BufferedReader (isr);
        String line = br.readLine ();
        while (line != null) {
            String [] toks = line.split ("\\s+");
            m.put (toks [0], toks [1]);
            line = br.readLine ();
        }
    } finally {
        if (br != null) {
            br.close ();
        }
        if (isr != null) {
            isr.close ();
        }
        if (fin != null) {
            fin.close ();
        }
    }
    System.out.println (m);
}
----------------------------------------

public static void main (String...args) throws IOException {
    Map < String, String > m = new LinkedHashMap < String, String > ();
    BufferedReader br = null;
    try {
        br = new BufferedReader (new FileReader (args [0]));
        String line;
        while ((line = br.readLine ()) != null) {
            String [] toks = line.split ("\\s+");
            m.put (toks [0], toks [1]);
        }
    } finally {
        if (br != null) br.close ();

    }
    System.out.println (m);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2565230_2565300_6_29
2565230_2568578_25_36
Title: How should I parse this simple text file in Java? 
----------------------------------------

public static void main (String [] args) throws Exception {
    Map < String, String > m = new LinkedHashMap < String, String > ();
    FileInputStream fin = null;
    InputStreamReader isr = null;
    BufferedReader br = null;
    try {
        fin = new FileInputStream (args [0]);
        isr = new InputStreamReader (fin, "UTF-8");
        br = new BufferedReader (isr);
        String line = br.readLine ();
        while (line != null) {
            String [] toks = line.split ("\\s+");
            m.put (toks [0], toks [1]);
            line = br.readLine ();
        }
    } finally {
        if (br != null) {
            br.close ();
        }
        if (isr != null) {
            isr.close ();
        }
        if (fin != null) {
            fin.close ();
        }
    }
    System.out.println (m);
}
----------------------------------------

public static void main (final String [] args) throws IOException {
    String encoding = "UTF-8";
    Map < String, String > valuesMap = new LinkedHashMap < String, String > ();
    InputStream is = getTestData (encoding);
    new So2565230 ().fill (valuesMap, is, encoding);
    for (Map.Entry < String, String > entry : valuesMap.entrySet ()) {
        System.out.format ("K=[%s] V=[%s]%n", entry.getKey (), entry.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2565230_2565738_5_21
2565230_2568578_25_36
Title: How should I parse this simple text file in Java? 
----------------------------------------

public static void main (String...args) throws IOException {
    Map < String, String > m = new LinkedHashMap < String, String > ();
    BufferedReader br = null;
    try {
        br = new BufferedReader (new FileReader (args [0]));
        String line;
        while ((line = br.readLine ()) != null) {
            String [] toks = line.split ("\\s+");
            m.put (toks [0], toks [1]);
        }
    } finally {
        if (br != null) br.close ();

    }
    System.out.println (m);
}
----------------------------------------

public static void main (final String [] args) throws IOException {
    String encoding = "UTF-8";
    Map < String, String > valuesMap = new LinkedHashMap < String, String > ();
    InputStream is = getTestData (encoding);
    new So2565230 ().fill (valuesMap, is, encoding);
    for (Map.Entry < String, String > entry : valuesMap.entrySet ()) {
        System.out.format ("K=[%s] V=[%s]%n", entry.getKey (), entry.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25661519_25664832_1_15
25661519_25665714_1_14
Title: Find the number of divisors for a number in range 
----------------------------------------

public static int solution (int A, int B, int K) {
    int count = 0;
    if (K == 0) {
        return (- 1);
    }
    if (K > B) {
        return 0;
    }
    for (int i = A;
    i <= B; ++ i) {
        if ((i % K) == 0) {
            ++ count;
        }
    }
    return count;
}
----------------------------------------

public int solution (int A, int B, int K) {
    int noOfDivisors = 0;
    if (B < A || K == 0 || K > B) return 0;

    for (int i = A;
    i <= B; i ++) {
        if ((i % K) == 0) {
            noOfDivisors ++;
        }
    }
    return noOfDivisors;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25661519_25664832_1_15
25661519_47309291_1_18
Title: Find the number of divisors for a number in range 
----------------------------------------

public static int solution (int A, int B, int K) {
    int count = 0;
    if (K == 0) {
        return (- 1);
    }
    if (K > B) {
        return 0;
    }
    for (int i = A;
    i <= B; ++ i) {
        if ((i % K) == 0) {
            ++ count;
        }
    }
    return count;
}
----------------------------------------

int solution (int A, int B, int K) {
    int counter = 0;
    if (A == B) A % K == 0 ? counter ++ : 0;
    else {
        counter = (B - A) / K;
        if (A % K == 0) counter ++;
        else if (B % K == 0) counter ++;
        else if ((counter * K + K) > A && (counter * K + K) < B) counter ++;

    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25661519_25665714_1_14
25661519_47309291_1_18
Title: Find the number of divisors for a number in range 
----------------------------------------

public int solution (int A, int B, int K) {
    int noOfDivisors = 0;
    if (B < A || K == 0 || K > B) return 0;

    for (int i = A;
    i <= B; i ++) {
        if ((i % K) == 0) {
            noOfDivisors ++;
        }
    }
    return noOfDivisors;
}
----------------------------------------

int solution (int A, int B, int K) {
    int counter = 0;
    if (A == B) A % K == 0 ? counter ++ : 0;
    else {
        counter = (B - A) / K;
        if (A % K == 0) counter ++;
        else if (B % K == 0) counter ++;
        else if ((counter * K + K) > A && (counter * K + K) < B) counter ++;

    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25675635_25675768_5_15
25675635_25675785_1_14
Title: if a word has 5 letters print the word with one letter per line if not then just print the word? 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter a word:");
    String w = scan.nextLine ();
    if (w.length () >= 5) {
        for (int i = 0;
        i < w.length (); i ++) System.out.println (w.charAt (i));

    } else {
        System.out.println (w);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter a word:");
    String w = scan.nextLine ();
    if (w.length () > 5) {
        for (int i = 0;
        i < w.length (); i ++) {
            System.out.println (w.charAt (i));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25680617_25680818_1_12
25680617_25681601_1_25
Title: How to efficiently check if two Strings are the same and that non of them is empty 
----------------------------------------

private void checkPasswordSame () {
    String first = password1.getText ();
    String second = password2.getText ();
    if (first.equals ("") || second.equals ("")) {
        System.out.println ("Both password can't be empty");
    } else if (! first.equals (second)) {
        System.out.println ("Passwords not the same");
    } else {
        System.out.println ("Passwords same");
    }

}
----------------------------------------

private void checkPasswordSame () {
    final String first = password1.getText ();
    final String second = password2.getText ();
    final boolean firstIsEmpty = first.isEmpty ();
    final boolean secondIsEmpty = second.isEmpty ();
    if (firstIsEmpty) {
        System.out.println ("Password can't be empty");
    }
    if (secondIsEmpty) {
        System.out.println ("Second password is empty");
    }
    if (! firstIsEmpty && ! secondIsEmpty) {
        if (first.equals (second)) {
            System.out.println ("Passwords same");
        } else {
            System.out.println ("Passwords not the same");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25684503_25687668_50_60
25684503_25687668_95_122
Title: Java fx frop drag and drop issue 
----------------------------------------

public void handle (MouseEvent event) {
    if (! cell.isEmpty ()) {
        dragFromIndex.set (cell.getIndex ());
        Dragboard db = cell.startDragAndDrop (TransferMode.MOVE);
        ClipboardContent cc = new ClipboardContent ();
        cc.putString (cell.getItem ());
        db.setContent (cc);
    }
}
----------------------------------------

public void handle (DragEvent event) {
    int dragItemsStartIndex;
    int dragItemsEndIndex;
    int direction;
    if (cell.isEmpty ()) {
        dragItemsStartIndex = dragFromIndex.get ();
        dragItemsEndIndex = listView.getItems ().size ();
        direction = - 1;
    } else {
        if (cell.getIndex () < dragFromIndex.get ()) {
            dragItemsStartIndex = cell.getIndex ();
            dragItemsEndIndex = dragFromIndex.get () + 1;
            direction = 1;
        } else {
            dragItemsStartIndex = dragFromIndex.get ();
            dragItemsEndIndex = cell.getIndex () + 1;
            direction = - 1;
        }
    }
    List < String > rotatingItems = listView.getItems ().subList (dragItemsStartIndex, dragItemsEndIndex);
    List < String > rotatingItemsCopy = new ArrayList < > (rotatingItems);
    Collections.rotate (rotatingItemsCopy, direction);
    rotatingItems.clear ();
    rotatingItems.addAll (rotatingItemsCopy);
    dragFromIndex.set (- 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2568621_2568680_1_14
2568621_50471710_6_36
Title: Java: one-liner to list Dirs in a directory? 
----------------------------------------

public static void main (String [] args) throws Exception {
    File dir = new File ("yourDir");
    FileFilter fileFilter = new FileFilter () {
        public boolean accept (File file) {
            return file.isDirectory ();
        }}

    ;
    File [] files = dir.listFiles (fileFilter);
    for (File f : files) System.out.println (f.getName ());

}
----------------------------------------

public static void main (String [] args) {
    File fl = new File ("yourDir");
    FilenameFilter fnf = new FilenameFilter () {
        @Override
        public boolean accept (File dir, String name) {
            if (name.endsWith (".txt")) {
                return true;
            } else {
                return false;
            }
        }}

    ;
    File [] files = fl.listFiles (fnf);
    for (File file : files) {
        System.out.println (file.getName ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25696829_25696906_5_29
25696829_25696987_5_18
Title: Continuing an if/else statement with a string(yes or no) 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Hi there! What's your name?");
    String name = sc.next ();
    String yesno;
    do {
        System.out.println ("Alright , " + name + ", enter the radius of the circle:");
        float radius = sc.nextFloat ();
        float area = (float) (Math.pow (radius, 2) * Math.PI);
        System.out.print ("The area is ");
        System.out.printf ("%.2f", area);
        System.out.println (". Would you like the area of any other circles?");
        yesno = sc.next ();
        while ((! (yesno.equalsIgnoreCase ("yes") || yesno.equalsIgnoreCase ("no")))) {
            System.out.println ("Sorry, could you say yes or no?");
            yesno = sc.next ();
        }
    } while (yesno.equalsIgnoreCase ("yes"));
    System.out.print ("Have a great day " + name + "!");
    sc.close ();
}
----------------------------------------

public static void main (String [] args) {
    String name = getName ();
    while (true) {
        float radius = getRadius (name);
        printArea (radius);
        System.out.println ("Would you like the area of any other circles? ");
        if (! needToDoAgain ()) {
            System.out.print ("Have a great day " + name + "!");
            break;
        }
    }
    sc.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25699727_28411901_1_15
25699727_44146744_1_22
Title: Multipart File upload Spring Boot 
----------------------------------------

@RequestMapping (value = "/uploadFile", method = RequestMethod.POST)
@ResponseBody
public ResponseEntity < ? > uploadFile (@RequestParam ("file")
MultipartFile file) {
    try {
    } catch (Exception e) {
        return new ResponseEntity < > (HttpStatus.BAD_REQUEST);
    }
    return new ResponseEntity < > (HttpStatus.OK);
}
----------------------------------------

@RequestMapping (value = "/add/image", method = RequestMethod.POST)
public ResponseEntity upload (@RequestParam ("id")
Long id, HttpServletResponse response, HttpServletRequest request) {
    try {
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        Iterator < String > it = multipartRequest.getFileNames ();
        MultipartFile multipart = multipartRequest.getFile (it.next ());
        String fileName = id + ".png";
        String imageName = fileName;
        byte [] bytes = multipart.getBytes ();
        BufferedOutputStream stream = new BufferedOutputStream (new FileOutputStream ("src/main/resources/static/image/book/" + fileName));
        stream.write (bytes);
        stream.close ();
        return new ResponseEntity ("upload success", HttpStatus.OK);
    } catch (Exception e) {
        e.printStackTrace ();
        return new ResponseEntity ("Upload fialed", HttpStatus.BAD_REQUEST);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25704061_25704102_1_15
25704061_25704127_3_38
Title: Loop the program until 0(exit)(java) 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (in);
    while (true) {
        System.out.print ("Please enter a number (0-40): ");
        int height = scan.nextInt ();
        if (height == 0) {
            return;
        } else if (height >= 1 && height <= 40) {
            printChristmasTree (height);
        } else {
            System.out.println ("Invalid input.");
        }

    }
}
----------------------------------------

public static void main (String [] args) {
    int temp;
    do {
        Scanner scan = new Scanner (in);
        out.print ("please enter a number: ");
        temp = scan.nextInt ();
        if (temp >= 1 && temp <= 40) {
            int x = (temp - 1) * 2 + 1;
            int y = x / 2;
            int z = 1;
            for (int i = 0;
            i < temp - 1; i ++) {
                for (int j = 0;
                j <= y; j ++) {
                    out.print (" ");
                }
                for (int k = 0;
                k < z; k ++) {
                    out.print ("*");
                }
                out.println ();
                y --;
                z += 2;
            }
            for (int i = 0;
            i <= x / 2; i ++) {
                out.print (" ");
            }
            out.println ("*");
        } else if (temp != 0) {
            out.print ("Please enter a number between 1 and 40!");
        }

    } while (temp != 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25708613_25708690_7_28
25708613_25708806_1_14
Title: how can i use if else if condtion with a loop in searching sorting in JAVA 
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    boolean flag = false;
    Scanner a = new Scanner (System.in);
    System.out.println ("enter the number");
    int b = a.nextInt ();
    for (int i : index) {
        if (flag = b == i) {
            break;
        } else {
            System.out.println (i);
        }
    }
    if (flag) {
        System.out.println ("Number Found");
    } else {
        System.out.println ("Number not Found!!!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    Scanner inputReader = new Scanner (System.in);
    System.out.println ("Enter the a integer:");
    int value = inputReader.nextInt ();
    int position = indexOf (value, index);
    if (position > 0) {
        System.out.println ("found");
    } else {
        System.out.println ("not found");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25708613_25708690_7_28
25708613_25709015_7_20
Title: how can i use if else if condtion with a loop in searching sorting in JAVA 
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    boolean flag = false;
    Scanner a = new Scanner (System.in);
    System.out.println ("enter the number");
    int b = a.nextInt ();
    for (int i : index) {
        if (flag = b == i) {
            break;
        } else {
            System.out.println (i);
        }
    }
    if (flag) {
        System.out.println ("Number Found");
    } else {
        System.out.println ("Number not Found!!!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    Scanner a = new Scanner (System.in);
    System.out.println ("enter the number");
    int b = a.nextInt ();
    if (find (index, 0, b)) {
        System.out.println ("Number Found");
    } else {
        System.out.println ("Number not Found!!!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25708613_25708690_7_28
25708613_25709699_4_25
Title: how can i use if else if condtion with a loop in searching sorting in JAVA 
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    boolean flag = false;
    Scanner a = new Scanner (System.in);
    System.out.println ("enter the number");
    int b = a.nextInt ();
    for (int i : index) {
        if (flag = b == i) {
            break;
        } else {
            System.out.println (i);
        }
    }
    if (flag) {
        System.out.println ("Number Found");
    } else {
        System.out.println ("Number not Found!!!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] a = {12, 13, 14, 15, 16};
    int b;
    for (int i = 1;
    i <= a.length; i ++) {
        Scanner input = new Scanner (System.in);
        System.out.println ("Input Number");
        b = input.nextInt ();
        if (b <= a.length) {
            System.out.println ("Number Found");
            break;
        } else {
            System.out.println ("Number Not Found");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25708613_25708806_1_14
25708613_25709015_7_20
Title: how can i use if else if condtion with a loop in searching sorting in JAVA 
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    Scanner inputReader = new Scanner (System.in);
    System.out.println ("Enter the a integer:");
    int value = inputReader.nextInt ();
    int position = indexOf (value, index);
    if (position > 0) {
        System.out.println ("found");
    } else {
        System.out.println ("not found");
    }
}
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    Scanner a = new Scanner (System.in);
    System.out.println ("enter the number");
    int b = a.nextInt ();
    if (find (index, 0, b)) {
        System.out.println ("Number Found");
    } else {
        System.out.println ("Number not Found!!!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25708613_25708806_1_14
25708613_25709699_4_25
Title: how can i use if else if condtion with a loop in searching sorting in JAVA 
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    Scanner inputReader = new Scanner (System.in);
    System.out.println ("Enter the a integer:");
    int value = inputReader.nextInt ();
    int position = indexOf (value, index);
    if (position > 0) {
        System.out.println ("found");
    } else {
        System.out.println ("not found");
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] a = {12, 13, 14, 15, 16};
    int b;
    for (int i = 1;
    i <= a.length; i ++) {
        Scanner input = new Scanner (System.in);
        System.out.println ("Input Number");
        b = input.nextInt ();
        if (b <= a.length) {
            System.out.println ("Number Found");
            break;
        } else {
            System.out.println ("Number Not Found");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25708613_25709015_7_20
25708613_25709699_4_25
Title: how can i use if else if condtion with a loop in searching sorting in JAVA 
----------------------------------------

public static void main (String [] args) {
    int index [] = {12, 13, 14, 15, 16};
    Scanner a = new Scanner (System.in);
    System.out.println ("enter the number");
    int b = a.nextInt ();
    if (find (index, 0, b)) {
        System.out.println ("Number Found");
    } else {
        System.out.println ("Number not Found!!!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] a = {12, 13, 14, 15, 16};
    int b;
    for (int i = 1;
    i <= a.length; i ++) {
        Scanner input = new Scanner (System.in);
        System.out.println ("Input Number");
        b = input.nextInt ();
        if (b <= a.length) {
            System.out.println ("Number Found");
            break;
        } else {
            System.out.println ("Number Not Found");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25716718_25717155_32_45
25716718_25720101_2_76
Title: Reading text file from a GUI 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String info = ReadFile ();
    System.out.println (info);
    String [] split = info.split ("@");
    String uname = split [0];
    String pass = split [1];
    if (usertext.getText ().equals (uname) && passtext.getText ().equals (pass)) {
        instruct.setText ("access granted");
    } else {
        instruct.setText ("access denided");
    }
}
----------------------------------------

public void actionPerformed (ActionEvent event) {
    new SwingWorker < Boolean, Void > () {
        @Override
        protected Boolean doInBackground () throws Exception {
            String inputFileName = ("users.txt");
            File userFile = new File (inputFileName);
            BufferedReader reader = new BufferedReader (new FileReader (userFile));
            String user;
            String pass;
            try {
                user = reader.readLine ();
                pass = reader.readLine ();
            } catch (IOException e) {
                user = null;
                pass = null;
                e.printStackTrace ();
            } finally {
                try {
                    reader.close ();
                } catch (IOException e) {
                }
            }
            if (usertext.getText ().equals (user) && passtext.getText ().equals (pass)) {
                return true;
            } else {
                return false;
            }
        }@Override
        protected void done () {
            boolean match;
            try {
                match = get ();
            } catch (InterruptedException | ExecutionException e) {
                match = false;
                e.printStackTrace ();
            }
            if (match) {
            }
        }}

    .execute ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25735407_25735454_3_15
25735407_25735601_9_25
Title: Validate Item Fall Within Start Date And End Date 
----------------------------------------

public static void main (String [] args) {
    Date date = new Date (11, 5, 21);
    Date date2 = new Date (15, 1, 21);
    boolean before = date2.before (date);
    if (before) {
        System.out.println ("Date 2 is before date: " + before);
        throw new RuntimeException ("Error with dates");
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        List < Event > events = new ArrayList < Event > (3);
        events.add (new Event (toDate ("01/08/2014"), toDate ("01/09/2014")));
        events.add (new Event (toDate ("02/09/2014"), toDate ("30/09/2014")));
        Date start = toDate ("18/08/2014");
        Date end = toDate ("30/08/2014");
        for (Event evt : events) {
            System.out.println (evt.conflicts (start, end));
        }
    } catch (ParseException exp) {
        exp.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25735407_25735454_3_15
25735407_25735833_3_32
Title: Validate Item Fall Within Start Date And End Date 
----------------------------------------

public static void main (String [] args) {
    Date date = new Date (11, 5, 21);
    Date date2 = new Date (15, 1, 21);
    boolean before = date2.before (date);
    if (before) {
        System.out.println ("Date 2 is before date: " + before);
        throw new RuntimeException ("Error with dates");
    }
}
----------------------------------------

public static void main (String args []) throws ParseException {
    List < Item > itemArr = Lists.newArrayList ();
    itemArr.add (new Item ("11A", "01/08/2014", "01/09/2014"));
    itemArr.add (new Item ("11B", "02/09/2014", "30/09/2014"));
    itemArr.add (new Item ("11C", "18/08/2014", "30/08/2014"));
    Range < Date > currentPeriod = null;
    for (Item item : itemArr) {
        if (currentPeriod == null) {
            currentPeriod = Range.closed (item.startDate, item.endDate);
            continue;
        }
        Range < Date > itemRange = Range.closed (item.startDate, item.endDate);
        boolean isEnclosed = currentPeriod.encloses (itemRange);
        if (isEnclosed) {
            System.out.println ("Prompt Error Message:" + item);
        } else {
            currentPeriod = currentPeriod.span (itemRange);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25735407_25735601_9_25
25735407_25735833_3_32
Title: Validate Item Fall Within Start Date And End Date 
----------------------------------------

public static void main (String [] args) {
    try {
        List < Event > events = new ArrayList < Event > (3);
        events.add (new Event (toDate ("01/08/2014"), toDate ("01/09/2014")));
        events.add (new Event (toDate ("02/09/2014"), toDate ("30/09/2014")));
        Date start = toDate ("18/08/2014");
        Date end = toDate ("30/08/2014");
        for (Event evt : events) {
            System.out.println (evt.conflicts (start, end));
        }
    } catch (ParseException exp) {
        exp.printStackTrace ();
    }
}
----------------------------------------

public static void main (String args []) throws ParseException {
    List < Item > itemArr = Lists.newArrayList ();
    itemArr.add (new Item ("11A", "01/08/2014", "01/09/2014"));
    itemArr.add (new Item ("11B", "02/09/2014", "30/09/2014"));
    itemArr.add (new Item ("11C", "18/08/2014", "30/08/2014"));
    Range < Date > currentPeriod = null;
    for (Item item : itemArr) {
        if (currentPeriod == null) {
            currentPeriod = Range.closed (item.startDate, item.endDate);
            continue;
        }
        Range < Date > itemRange = Range.closed (item.startDate, item.endDate);
        boolean isEnclosed = currentPeriod.encloses (itemRange);
        if (isEnclosed) {
            System.out.println ("Prompt Error Message:" + item);
        } else {
            currentPeriod = currentPeriod.span (itemRange);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25751909_25751995_1_14
25751909_25752014_1_14
Title: Java How do I merge all char from an array of String into a new String? 
----------------------------------------

public static String merge (String...stringArray) {
    StringBuilder sb = new StringBuilder ();
    int pos = 0;
    int len = getLongestString (stringArray).length ();
    while (pos < len) {
        for (String str : stringArray) {
            if (str.length () > pos) {
                sb.append (str.charAt (pos));
            }
        }
        pos ++;
    }
    return sb.toString ();
}
----------------------------------------

static String merge (String...strings) {
    int longest = getLongest (strings);
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < longest; i ++) {
        for (String str : strings) {
            if (i < str.length ()) {
                sb.append (str.charAt (i));
            }
        }
    }
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25755821_25755911_8_21
25755821_25755954_7_28
Title: Non repeating random integers in Java 
----------------------------------------

public static final void main (String [] args) {
    final Random r = new Random ();
    final Set < Integer > s = new HashSet < > ();
    for (int i = 0;
    i < 6; i ++) {
        while (true) {
            int num = r.nextInt (6) + 1;
            if (s.contains (num) == false) {
                s.add (num);
                System.out.println (num);
                break;
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    final List < Integer > integers = new ArrayList < > ();
    final Random rand = new Random ();
    for (int i = 1;
    i <= 6; i ++) {
        integers.add (i);
    }
    while (! integers.isEmpty ()) {
        final int index;
        if (integers.size () > 1) {
            index = rand.nextInt (integers.size () - 1);
        } else {
            index = 0;
        }
        final int result = integers.remove (index);
        System.out.println ("Result: " + result);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25755821_25755911_8_21
25755821_25756039_3_17
Title: Non repeating random integers in Java 
----------------------------------------

public static final void main (String [] args) {
    final Random r = new Random ();
    final Set < Integer > s = new HashSet < > ();
    for (int i = 0;
    i < 6; i ++) {
        while (true) {
            int num = r.nextInt (6) + 1;
            if (s.contains (num) == false) {
                s.add (num);
                System.out.println (num);
                break;
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    ArrayList myList = new ArrayList ();
    Random rd = new Random ();
    int num;
    while (true) {
        num = rd.nextInt (6) + 1;
        if (myList.size () == 6) break;

        if (! myList.contains (num)) {
            myList.add (num);
            System.out.println (myList);
        } else continue;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25755821_25755954_7_28
25755821_25756039_3_17
Title: Non repeating random integers in Java 
----------------------------------------

public static void main (String [] args) {
    final List < Integer > integers = new ArrayList < > ();
    final Random rand = new Random ();
    for (int i = 1;
    i <= 6; i ++) {
        integers.add (i);
    }
    while (! integers.isEmpty ()) {
        final int index;
        if (integers.size () > 1) {
            index = rand.nextInt (integers.size () - 1);
        } else {
            index = 0;
        }
        final int result = integers.remove (index);
        System.out.println ("Result: " + result);
    }
}
----------------------------------------

public static void main (String [] args) {
    ArrayList myList = new ArrayList ();
    Random rd = new Random ();
    int num;
    while (true) {
        num = rd.nextInt (6) + 1;
        if (myList.size () == 6) break;

        if (! myList.contains (num)) {
            myList.add (num);
            System.out.println (myList);
        } else continue;

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25762222_25762379_5_37
25762222_25764501_6_42
Title: Re-requesting input from user when an exception occurs 
----------------------------------------

public static void main (String args []) throws Exception {
    boolean loop = true;
    Scanner s = new Scanner (System.in);
    while (loop) {
        try {
            String yn;
            do {
                loop = true;
                System.out.println ("Enter how many numbers to add: ");
                int num = Integer.parseInt (s.next ());
                int a, sum = 0;
                for (int i = 1;
                i <= num;) {
                    try {
                        System.out.println ("Enter number[" + i + "]: ");
                        a = Integer.parseInt (s.next ());
                        sum = sum + a;
                        i ++;
                    } catch (Exception e) {
                        System.out.println ("Invalid input. Try Again.\n");
                    }
                }
                System.out.println ("The Sum is:" + sum);
                System.out.println ("Do you want to continue?(Y/N):");
                yn = s.next ();
                loop = yn.equals ("y") || yn.equals ("Y");
            } while (loop);
        } catch (Exception e) {
            System.out.println ("Number of elements invalid. Try Again.\n");
        }
    }
}
----------------------------------------

public static void main (String args []) throws Exception {
    boolean loop = true;
    int pos = 0;
    int num = 0, sum = 0;
    while (loop) try {
        String yn;
        do {
            sum = 0;
            num = 0;
            Scanner s = new Scanner (System.in);
            System.out.println ("Enter how many numbers to add: ");
            num = Integer.parseInt (s.next ());
            int a;
            for (int i = 1;
            i <= num; i ++) {
                System.out.println ("Enter number[" + i + "]: ");
                a = Integer.parseInt (s.next ());
                sum = sum + a;
                pos = i;
            }
            System.out.println ("The Sum is:" + sum);
            System.out.println ("Do you want to continue?(Y/N):");
            yn = s.next ();
        } while (yn.equals ("y") || yn.equals ("Y"));
    } catch (Exception e) {
        Scanner s = new Scanner (System.in);
        int a = 0;
        for (int i = pos + 1;
        i <= num; i ++) {
            System.out.println ("Enter number[" + i + "]: ");
            a = Integer.parseInt (s.next ());
            sum = sum + a;
        }
        System.out.println ("The Sum is:" + sum);
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25764851_25765289_1_12
25764851_25766015_1_10
Title: Join enums in java 
----------------------------------------

static String join (Object...words) {
    StringBuilder sb = new StringBuilder ();
    if (words.length > 0) {
        sb.append (words [0]);
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (", ").append (words [i].toString ());
        }
    }
    return sb.toString ();
}
----------------------------------------

static String join (MyEnum...words) {
    if (words == null || words.length == 0) {
        return "";
    }
    StringBuilder joined = new StringBuilder (words [0].getName ());
    for (int i = 1;
    i < words.length; i ++) {
        joined.append (", ").append (words [i].getName ());
    }
    return joined.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25776131_25776241_1_57
25776131_25776360_5_25
Title: Preventing input errors 
----------------------------------------

public static void main (String [] args) {
    int temp = 0;
    boolean error = false;
    do {
        error = false;
        try {
            Scanner scan = new Scanner (System.in);
            System.out.print ("enter number ");
            temp = scan.nextInt ();
            if (temp == 0) break;

            if (temp >= 5 && temp <= 40) {
                int x = (temp - 1) * 2 + 1;
                int y = x / 2;
                int z = 1;
                for (int i = 0;
                i < temp - 1; i ++) {
                    for (int j = 0;
                    j <= y; j ++) {
                        System.out.print (" ");
                    }
                    for (int k = 0;
                    k < z; k ++) {
                        System.out.print ("|");
                    }
                    System.out.println ();
                    y --;
                    z += 2;
                }
                for (int c = 0;
                c < 1 + temp / 10; c ++) {
                    for (int i = 0;
                    i <= x / 2; i ++) {
                        System.out.print (" ");
                    }
                    System.out.println ("|");
                }
            } else {
                System.out.println ("enter a number between 5 and 40");
            }
        } catch (Exception e) {
            System.out.println ("Enter a valid number..try again");
            error = true;
        }
    } while (temp != 0 || error);
}
----------------------------------------

public static void main (String [] args) {
    boolean isInt = false;
    int temp;
    System.out.print ("enter a number ");
    do {
        Scanner scan = new Scanner (System.in);
        try {
            temp = scan.nextInt ();
            isInt = true;
        } catch (Exception e) {
            System.out.println ("Couldn't read number. Reason - " + e.getMessage ());
            System.out.println ("Enter a valid number ");
        }
    } while (! isInt);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25776131_25776241_1_57
25776131_25776383_7_16
Title: Preventing input errors 
----------------------------------------

public static void main (String [] args) {
    int temp = 0;
    boolean error = false;
    do {
        error = false;
        try {
            Scanner scan = new Scanner (System.in);
            System.out.print ("enter number ");
            temp = scan.nextInt ();
            if (temp == 0) break;

            if (temp >= 5 && temp <= 40) {
                int x = (temp - 1) * 2 + 1;
                int y = x / 2;
                int z = 1;
                for (int i = 0;
                i < temp - 1; i ++) {
                    for (int j = 0;
                    j <= y; j ++) {
                        System.out.print (" ");
                    }
                    for (int k = 0;
                    k < z; k ++) {
                        System.out.print ("|");
                    }
                    System.out.println ();
                    y --;
                    z += 2;
                }
                for (int c = 0;
                c < 1 + temp / 10; c ++) {
                    for (int i = 0;
                    i <= x / 2; i ++) {
                        System.out.print (" ");
                    }
                    System.out.println ("|");
                }
            } else {
                System.out.println ("enter a number between 5 and 40");
            }
        } catch (Exception e) {
            System.out.println ("Enter a valid number..try again");
            error = true;
        }
    } while (temp != 0 || error);
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter an integer:");
    while (! scanner.hasNextInt ()) {
        System.err.println ("Wrong! Enter an integer");
        scanner.next ();
    }
    System.out.println ("Your integer was: " + scanner.nextInt ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25776131_25776360_5_25
25776131_25776383_7_16
Title: Preventing input errors 
----------------------------------------

public static void main (String [] args) {
    boolean isInt = false;
    int temp;
    System.out.print ("enter a number ");
    do {
        Scanner scan = new Scanner (System.in);
        try {
            temp = scan.nextInt ();
            isInt = true;
        } catch (Exception e) {
            System.out.println ("Couldn't read number. Reason - " + e.getMessage ());
            System.out.println ("Enter a valid number ");
        }
    } while (! isInt);
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter an integer:");
    while (! scanner.hasNextInt ()) {
        System.err.println ("Wrong! Enter an integer");
        scanner.next ();
    }
    System.out.println ("Your integer was: " + scanner.nextInt ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2578233_2578337_1_13
2578233_2578583_1_15
Title: How do I get the set of all letters in Java/Clojure? 
----------------------------------------

private static String allLetters (String charsetName) {
    CharsetEncoder ce = Charset.forName (charsetName).newEncoder ();
    StringBuilder result = new StringBuilder ();
    for (char c = 0;
    c < Character.MAX_VALUE; c ++) {
        if (ce.canEncode (c) && Character.isLetter (c)) {
            result.append (c);
        }
    }
    return result.toString ();
}
----------------------------------------

public static String allLetters (final Charset charset) {
    final CharsetEncoder encoder = charset.newEncoder ();
    final StringBuilder lowerCases = new StringBuilder ();
    final StringBuilder upperCases = new StringBuilder ();
    for (char c = 0;
    c < Character.MAX_VALUE; c ++) {
        if (encoder.canEncode (c)) {
            if (Character.isUpperCase (c)) {
                upperCases.append (c);
            } else if (Character.isLowerCase (c)) {
                lowerCases.append (c);
            }

        }
    }
    return lowerCases.append (upperCases).toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2578254_11807827_82_90
2578254_11807827_96_104
Title: Connect two client sockets 
----------------------------------------

public Boolean call () throws Exception {
    try {
        processConnection (input1);
        displayMessage ("input1 finished");
    } catch (IOException e) {
        displayMessage ("blah");
    }
    return true;
}
----------------------------------------

public Boolean call () throws Exception {
    try {
        processConnection (input2);
        displayMessage ("input2 finished");
    } catch (IOException e) {
        displayMessage ("foo");
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25782976_25783495_5_20
25782976_25784105_1_23
Title: JOptionPane Array Elements 
----------------------------------------

public static void main (String [] args) {
    String [] possibilities = {"Adult Ticket", "Childs Ticket", "Over Fifty Ticket"};
    String s = (String) JOptionPane.showInputDialog (null, "What ticket would you like to buy?", "Ticket Dialog", JOptionPane.PLAIN_MESSAGE, null, possibilities, possibilities [0]);
    switch (s) {
        case "Adult Ticket" :
            System.out.println ("Buy Adult");
            break;
        case "Childs Ticket" :
            System.out.println ("Child Adult");
            break;
        case "Over Fifty Ticket" :
            System.out.println ("Over Fifty Adult");
            break;
    }
}
----------------------------------------

public static void main (String [] args) {
    AdultTicket adultTicket = new AdultTicket ();
    ChildTicket childTicket = new ChildTicket ();
    OverFiftyTicket overFiftyTicket = new OverFiftyTicket ();
    JFrame frame = new JFrame ();
    String [] options = {"Adult Ticket", "Childs Ticket", "Over Fifty Ticket"};
    int option = JOptionPane.showOptionDialog (frame, "What ticket would you like to buy? " + " ", " ", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options [2]);
    switch (option) {
        case 0 :
            JOptionPane.showMessageDialog (frame, "Your ticket price is £" + adultTicket.getAdultTicket ());
            break;
        case 1 :
            JOptionPane.showMessageDialog (frame, "Your ticket price is £" + childTicket.getChildTicket ());
            break;
        case 2 :
            JOptionPane.showMessageDialog (frame, "Your ticket price is £" + overFiftyTicket.getOverFiftyTicket ());
            break;
        default :
            JOptionPane.showMessageDialog (frame, "No ticket selected");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25784533_25785009_1_17
25784533_33986878_5_112
Title: Restart simple java game 
----------------------------------------

public static void main (String [] args) {
    while (true) {
        System.out.println ("Do you want to play again? Answer with Y/N)");
        try {
            char reply;
            reply = (char) System.in.read ();
            if (Character.toLowerCase (reply) != 'y') break;

        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    boolean play = true;
    boolean notCorrect = true;
    while (play) {
        while (notCorrect) {
            System.out.print ("Welcome to number guessing game !\n");
            System.out.println ("Guess a number range from 1 to 100, You have 5 guess to win this game");
            int answer = (int) (random () * 100);
            Scanner guess1 = new Scanner (System.in);
            System.out.println ("To begin please input your number");
            int num1 = guess1.nextInt ();
            if (num1 < answer) {
                System.out.print (num1);
                System.out.print (" Your answer is too small\n");
                System.out.println ("Try again! Please input your second guess");
            } else if (num1 > answer) {
                System.out.println (num1);
                System.out.print ("Your answer is too big\n");
                System.out.println ("Try again! Please input your second guess");
            } else {
                System.out.println ("Congratulation! Your answer is correct! You win !");
                break;
            }

            int num2 = guess1.nextInt ();
            if (num2 < answer) {
                System.out.print (num2);
                System.out.print (" Your answer is too small\n");
                System.out.println ("Try again! Please input your third guess");
            } else if (num2 > answer) {
                System.out.println (num2);
                System.out.print ("Your answer is too big\n");
                System.out.println ("Try again! Please input your third guess");
            } else {
                System.out.println ("Congratulation! Your answer is correct! You win !");
                break;
            }

            int num3 = guess1.nextInt ();
            if (num3 < answer) {
                System.out.print (num3);
                System.out.print (" Your answer is too small\n");
                System.out.println ("Try again! Please input your fourth guess");
            } else if (num3 > answer) {
                System.out.println (num3);
                System.out.print ("Your answer is too big\n");
                System.out.println ("Try again! Please input your fourth guess");
            } else {
                System.out.println ("Congratulation! Your answer is correct! You win !");
                break;
            }

            int num4 = guess1.nextInt ();
            if (num4 < answer) {
                System.out.print (num4);
                System.out.print (" Your answer is too small\n");
                System.out.println ("Try again! Please input your final guess");
            } else if (num4 > answer) {
                System.out.println (num4);
                System.out.print ("Your answer is too big\n");
                System.out.println ("Try again! Please input your final guess");
            } else {
                System.out.println ("Congratulation! Your answer is correct! You win !");
                break;
            }

            int num5 = guess1.nextInt ();
            if (num5 < answer) {
                System.out.print (num5);
                System.out.print (" Your answer is too small\n");
                System.out.println ("Game Over");
            } else if (num5 > answer) {
                System.out.println (num5);
                System.out.print ("Your answer is too big\n");
                System.out.println ("Game Over");
            } else {
                System.out.println ("Congratulation! Your answer is correct! You win !");
                break;
            }

            System.out.println ("Correct Answer is " + answer);
            break;
        }
        Scanner userReply = new Scanner (System.in);
        String reply;
        System.out.println ("Do you want to play again? Answer with (Y/N)");
        reply = userReply.next ().toLowerCase ();
        if (reply.equals ("y")) {
            play = true;
        } else if (reply.equals ("n")) {
            play = false;
        } else {
            System.out.println ("Invalid choice.");
            break;
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25785300_25785618_18_29
25785300_25785618_41_50
Title: Threads wating and waking up 
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 1000; i ++) {
            queue.add (i);
            Thread.sleep (1);
        }
        queue.add (End);
    } catch (InterruptedException ex) {
    }
}
----------------------------------------

public void run () {
    boolean ended = false;
    while (! ended) {
        Integer i = queue.poll ();
        if (i != null) {
            ended = i == End;
            System.out.println (i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25794680_25799080_35_46
25794680_25799080_7_18
Title: multiple authentication mechanisms in a single app using java config 
----------------------------------------

public Authentication authenticate (Authentication authentication) throws AuthenticationException {
    OTPAuthorizationToken auth = (OTPAuthorizationToken) authentication;
    String error = sampleService.loginWithOTP (auth.getPrincipal (), auth.getCredentials (), auth.getOTP ());
    if (error != null) {
        throw new LoginException (error);
    }
    auth.setAuthenticated (true);
    return auth;
}
----------------------------------------

public Authentication authenticate (Authentication authentication) throws AuthenticationException {
    LDAPAuthorizationToken auth = (LDAPAuthorizationToken) authentication;
    String username = sampleService.verifyToken (auth.getCredentials ());
    if (username == null) {
        throw new LoginException ("Invalid Token");
    }
    auth.setAuthenticated (true);
    return auth;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25796079_25796211_5_63
25796079_25797040_9_21
Title: Java class to break down change into coins? 
----------------------------------------

public static void main (String [] args) {
    DecimalFormat decimalFormat = new DecimalFormat ("0.00");
    Scanner kb = new Scanner (System.in);
    System.out.print ("How much does this item cose? -> ");
    double cost = kb.nextDouble ();
    System.out.print ("How many will be purcased? -> ");
    double quanity = kb.nextDouble ();
    double subtotal = (cost * quanity);
    double tax = (subtotal * .06);
    double total = (subtotal + tax);
    System.out.print ("How much money has been tendered? -> ");
    double tendered = kb.nextDouble ();
    double change = (tendered - total);
    int dollars = (int) change;
    int twenties = dollars / 20;
    int dollars1 = dollars % 20;
    int tens = dollars1 / 10;
    int dollars2 = dollars % 10;
    int fives = dollars2 / 5;
    int dollars3 = dollars % 5;
    int ones = dollars3;
    String moneyString = decimalFormat.format (change);
    String changeString = Double.toString (change);
    String [] parts = moneyString.split ("\\.");
    String part2 = parts [1];
    double cents5 = Double.parseDouble (part2);
    int cents = (int) cents5;
    int quarters = cents / 25;
    int cents1 = cents % 25;
    int dimes = cents1 / 10;
    int cents2 = cents % 10;
    int nickels = cents2 / 5;
    int cents3 = cents % 5;
    int pennies = cents3;
    System.out.println ("Cost: " + "$" + decimalFormat.format (cost));
    System.out.println ("Quanity: " + quanity);
    System.out.println ("Subtotal: " + "$" + decimalFormat.format (subtotal));
    System.out.println ("Tax: " + "$" + decimalFormat.format (tax));
    System.out.println ("Total: " + "$" + decimalFormat.format (total));
    System.out.println ("Tendered: " + "$" + decimalFormat.format (tendered));
    System.out.println ("Change: " + "$" + moneyString);
    System.out.println (twenties + " Twenties");
    System.out.println (tens + " Tens");
    System.out.println (fives + " Fives");
    System.out.println (ones + " Ones");
    System.out.println (quarters + " Quarters");
    System.out.println (dimes + " Dimes");
    System.out.println (nickels + " Nickels");
    System.out.println (pennies + " Pennies");
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the purchase price: ");
    BigDecimal price = scan.nextBigDecimal ();
    System.out.println ("Enter the amount paid: ");
    BigDecimal amountPayed = scan.nextBigDecimal ();
    Map < Denomination, Integer > changeDue = getDenomination (amountPayed, price);
    for (Denomination denomination : changeDue.keySet ()) {
        System.out.println ("Return " + denomination + " bill(s) : " + changeDue.get (denomination));
    }
    scan.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25803521_25804761_15_24
25803521_25804761_26_41
Title: java returning the k smallest elements 
----------------------------------------

public int findKthMinimum (final int [] list, final int k) {
    if (k > list.length || k < 1) {
        throw new IllegalArgumentException ("Bad arguments.");
    }
    final int left = 0;
    final int right = list.length - 1;
    final int pivot = (int) Math.floor ((double) left + (Math.random () * (double) (right - left)));
    final int result = findKthMinimum (list, left, right, k, pivot);
    return result;
}
----------------------------------------

private int findKthMinimum (final int [] list, int left, int right, final int k, int pivot) {
    int partitionElement = partition (list, left, right, pivot);
    while (left != right) {
        if (partitionElement == k) break;
        else if (partitionElement > k) {
            right = partitionElement - 1;
            pivot = (int) Math.floor ((double) left + (Math.random () * (double) (right - left)));
        } else if (partitionElement < k) {
            left = partitionElement + 1;
            pivot = (int) Math.floor ((double) left + (Math.random () * (double) (right - left)));
        }

        partitionElement = partition (list, left, right, pivot);
    }
    return list [partitionElement];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25805385_25805562_1_29
25805385_25805567_1_10
Title: java letters in string a contains in string b 
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;

    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25806174_25806206_1_10
25806174_25806533_1_11
Title: How to throw error in user input? 
----------------------------------------

public static int pmove () throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String br_rl = br.readLine ();
    int br_int = Integer.parseInt (br_rl);
    if (br_int > 0 && br_int < 10) {
        return br_int;
    } else {
        throw new IOException ("Input Out of Range");
    }
}
----------------------------------------

public static int pmove () throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String br_rl = br.readLine ();
    int br_int = Integer.parseInt (br_rl);
    while (br_int <= 0 || br_int >= 10) {
        System.out.println ("Wrong input");
        br_rl = br.readLine ();
        br_int = Integer.parseInt (br_rl);
    }
    return br_int;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25816333_25816588_1_29
25816333_25818212_47_58
Title: how to find maximum number M less than N in which some specific digit is not allowed to exist in Java 
----------------------------------------

public static void main (String [] args) {
    int N = 100211020;
    int digit = 0;
    int m;
    for (m = 9; m > 0 && m == digit; m --);

    String sres;
    String s = N + "";
    int length = s.length ();
    int i = s.indexOf (digit + "");
    if (i < 0) sres = s;
    else {
        StringBuilder sb = new StringBuilder ();
        if (digit != 0) {
            for (int j = 0;
            j < i; j ++) sb.append (s.charAt (j));

            sb.append (digit - 1);
            for (int j = i + 1;
            j < length; j ++) sb.append (m);

        } else {
            if (s.charAt (0) != '1') sb.append (mod10 (s.charAt (0) - '0' - 1));

            for (int j = 1;
            j < length; j ++) sb.append (9);

        }
        sres = sb.toString ();
    }
    System.out.println (sres);
}
----------------------------------------

public static void main (String [] args) {
    System.out.println (removeDigits (new BigInteger ("20"), 0));
    System.out.println (removeDigits (new BigInteger ("210"), 0));
    System.out.println (removeDigits (new BigInteger ("123"), 0));
    System.out.println (removeDigits (new BigInteger ("123"), 2));
    System.out.println (removeDigits (new BigInteger ("1000"), 0));
    System.out.println (removeDigits (new BigInteger ("1000"), 1));
    System.out.println (removeDigits (new BigInteger ("1111020"), 0));
    System.out.println (removeDigits (new BigInteger ("2011020"), 0));
    System.out.println (removeDigits (new BigInteger ("80000009"), 9));
    System.out.println (removeDigits (new BigInteger ("80937921"), 9));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25818128_25845617_15_29
25818128_25853015_1_37
Title: Creating an N-Dimensional array of type T and populating it 
----------------------------------------

public static < T, S > S [] readArray (final Class < T > cls, final int length) {
    if (cls.isArray ()) {
        final Class < S > subCls = (Class < S >) cls.getComponentType ();
        final S [] array = (S []) Array.newInstance (subCls, length);
        for (int i = 0;
        i < length; i ++) {
            if (subCls.isArray ()) {
                array [i] = (S) readArray ((Class < ? >) subCls, length);
            } else {
                array [i] = (S) next ();
            }
        }
        return array;
    }
    throw new IllegalArgumentException ("Type of cls must be an array.");
}
----------------------------------------

public synchronized < T, S > T readArray (final Class < T > cls) {
    if (next () != IDENTIFIER_ARRAY) {
        throw new InvalidProtocolException (lastReadIndex);
    }
    final int nextID = next ();
    final int length = readRawInt ();
    final Class < S > component = (Class < S >) cls.getComponentType ();
    if (component.isPrimitive ()) {
        switch (component.getCanonicalName ()) {
            case "boolean" :
                return (T) readRawBooleanArray (length);
            case "byte" :
                return (T) readRawByteArray (length);
            case "short" :
                return (T) readRawShortArray (length);
            case "char" :
                return (T) readRawCharArray (length);
            case "int" :
                return (T) readRawIntArray (length);
            case "float" :
                return (T) readRawFloatArray (length);
            case "long" :
                return (T) readRawLongArray (length);
            case "double" :
                return (T) readRawDoubleArray (length);
        }
    }
    final S [] array = (S []) Array.newInstance (component, length);
    for (int i = 0;
    i < length; i ++) {
        if (component.isArray ()) {
            array [i] = (S) readArray ((Class < ? >) component);
        } else {
            array [i] = (S) readMethodFor (nextID);
        }
    }
    return (T) array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25818720_25818871_1_17
25818720_25818994_1_10
Title: List of enums: I have 2 enums and I have to make a list/array 
----------------------------------------

public void reorder (Animal [] animals) {
    int sheepCount = 0;
    int goatCount = 0;
    for (Animal oneAnimal : animals) {
        if (oneAnimal == Animal.sheep) {
            sheepCount ++;
        } else {
            goatCount ++;
        }
    }
    for (int i = 0;
    i < sheepCount; i ++) {
        animals [i] = Animal.sheep;
    }
    for (int i = 0;
    i < goatCount; i ++) {
        animals [i + sheepCount] = Animal.goat;
    }
}
----------------------------------------

public static void reorder (Animal [] animals) {
    if (animals == null) {
        return;
    }
    int goats = countGoats (animals);
    for (int i = 0;
    i < animals.length; i ++) {
        animals [i] = (i < goats) ? Animal.goat : Animal.sheep;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25821845_25821965_1_24
25821845_25822096_1_26
Title: "Using four methods to count and display the lines words and characters in a file in java" 
----------------------------------------

public static void characters (String filename) throws FileNotFoundException {
    Scanner inputFile = new Scanner (file);
    int characters = 0;
    while (inputFile.hasNextLine ()) {
        String line = inputFile.nextLine ();
        for (int i = 0;
        i < line.length (); i ++) {
            characters = line.charAt (i);
            if (character != 32) {
                characters ++;
            }
        }
    }
    return characters;
    inputFile.close ();
    System.out.println ("The number of lines is: " + lines);
    System.out.println ("The number of words is: " + words);
    System.out.println ("The number of characters is: " + characters);
    System.out.println ();
}
----------------------------------------

public static void characters (File file) throws FileNotFoundException {
    Scanner inputFile = new Scanner (file);
    int characters = 0;
    int count = 0;
    while (inputFile.hasNextLine ()) {
        String line = inputFile.nextLine ();
        for (int i = 0;
        i < line.length (); i ++) {
            characters = line.charAt (i);
            if (characters != 32) {
                count ++;
            }
        }
    }
    inputFile.close ();
    System.out.println ("The number of characters is: " + count);
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25823279_25823671_129_152
25823279_25823671_52_62
Title: How to set View for listadapter 
----------------------------------------

public void onClick (View v) {
    if (ab == 1) {
        ab = 0;
        refresh.setText ("کوچک کردن");
        spinner.setVisibility (View.GONE);
        android.app.ActionBar bar = getActivity ().getActionBar ();
        bar.hide ();
    } else {
        ab = 1;
        refresh.setText ("تمام صفحه");
        spinner.setVisibility (View.VISIBLE);
        android.app.ActionBar bar = getActivity ().getActionBar ();
        bar.show ();
    }
}
----------------------------------------

public void onClick (View v) {
    Intent i = new Intent (Intent.ACTION_SEND);
    i.setType ("text/plain");
    i.putExtra (Intent.EXTRA_TEXT, votes.get (position).getComment ());
    try {
        context.startActivity (Intent.createChooser (i, "Share"));
    } catch (android.content.ActivityNotFoundException ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25823293_25823352_1_14
25823293_25825153_6_27
Title: Is there a way to access an anonymous class inside another anonymous class? 
----------------------------------------

public static void main (String args []) {
    A a = new A () {
        public void show () {
            System.out.println ("In anonymous Class");
            A b = new A () {
                public void show () {
                    System.out.println ("In nested Anonymous Class");
                }}

            ;
            b.show ();
        }}

    ;
    a.show ();
}
----------------------------------------

public static void main (String args []) throws IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException {
    A a = new A () {
        public void show () {
            System.out.println ("In anonymous Class");
        };
        public A b = new A () {
            public void show () {
                System.out.println ("In nested Anonymous Class");
            }}

        ;
    }

    ;
    Class < ? extends A > anonymousClass = a.getClass ();
    Field fieldB = anonymousClass.getField ("b");
    A b = (A) fieldB.get (a);
    b.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25828903_25829146_5_39
25828903_25829282_6_28
Title: Checking for equivalent rows in a 2D array? 
----------------------------------------

public static boolean checkEqual (Integer [] [] array) {
    Set < Integer > firstSet = new HashSet < Integer > ();
    Set < Integer > secondSet = new HashSet < Integer > ();
    if (array.length > 0) {
        final Integer [] firstArray = array [0];
        for (int i = 0;
        i < firstArray.length; ++ i) {
            firstSet.add (firstArray [i]);
        }
        for (int i = 1;
        i < array.length; ++ i) {
            final Integer [] intArray = array [i];
            for (int j = 0;
            j < intArray.length; ++ j) {
                if (! firstSet.contains (intArray [j])) {
                    return false;
                }
            }
        }
        if (array.length > 1) {
            final Integer [] secondArray = array [1];
            for (int i = 0;
            i < secondArray.length; ++ i) {
                secondSet.add (secondArray [i]);
            }
            if (firstSet.size () != secondSet.size ()) {
                return false;
            }
        }
        return true;
    }
    return false;
}
----------------------------------------

public static boolean checkEqual (Integer [] [] array) {
    if (array.length > 0) {
        Set < Integer > firstSet = new HashSet < Integer > (array [0].length);
        for (Integer i : array [0]) {
            firstSet.add (i);
        }
        for (Integer [] intArray : array) {
            Set < Integer > secondSet = new HashSet < Integer > (firstSet.size ());
            for (Integer i : intArray) {
                if (! firstSet.contains (i)) {
                    return false;
                }
                secondSet.add (i);
            }
            if (firstSet.size () != secondSet.size ()) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2584264_4847374_306_368
2584264_4847374_370_423
Title: Framework to draw Edges and Nodes using GWT 
----------------------------------------

public void createImage (String startNode, String outputfile) {
    BufferedImage image = new BufferedImage (xaxis, yaxis, BufferedImage.TYPE_INT_RGB);
    g = (Graphics2D) image.createGraphics ();
    g.setColor (Color.white);
    g.fillRoundRect (0, 0, xaxis, yaxis, 0, 0);
    g.setColor (Color.white);
    Font f = new Font ("SansSerif", Font.BOLD, 20);
    g.setFont (f);
    Hashtable allh = new Hashtable ();
    int noofrows = rowsLinkedList.size ();
    int mxy = start_yaxis;
    for (int i = 0;
    i < noofrows; i ++) {
        String [] tmpnodes = removeDuplicates (((String) rowsLinkedList.get (i)).split (","));
        int parts = calculateXY (tmpnodes.length);
        start_yaxis = mxy + 60;
        end_xaxis = 0;
        int tmpy = start_yaxis;
        int tmpx = 0;
        int stringwidth = 0;
        for (int j = 0;
        j < tmpnodes.length; j ++) {
            try {
                if (j + 1 == 1) {
                    start_xaxis = parts * (j + 1) - 20;
                } else {
                    start_xaxis = tmpx + parts;
                }
                tmpx = start_xaxis;
                start_yaxis = tmpy;
                if (null == allh.get (tmpnodes [j])) drawNode (tmpnodes [j]);

                allh.put (tmpnodes [j], tmpnodes [j]);
                if (start_yaxis >= mxy) mxy = start_yaxis;

                FontMetrics ff = g.getFontMetrics ();
                stringwidth += (start_xaxis + ff.stringWidth (tmpnodes [j]));
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
        if (stringwidth >= bigx) bigx = stringwidth;

        System.out.println ("Row " + i + " " + stringwidth);
    }
    xaxis = bigx;
    yaxis = mxy + 40;
    System.out.println (xaxis);
    start_xaxis = 0;
    start_yaxis = 40;
    end_xaxis = 0;
    maxy = 0;
    rectx = 0;
    recty = 0;
    rows = 0;
    reinitialize (myquery, myoutput, bigx, mxy + 40);
}
----------------------------------------

public void createImage (int _xaxis, int _yaxis, String startNode, String outputfile) {
    BufferedImage image = new BufferedImage (_xaxis, _yaxis, BufferedImage.TYPE_INT_RGB);
    g = (Graphics2D) image.createGraphics ();
    g.setColor (Color.white);
    g.fillRoundRect (0, 0, xaxis, yaxis, 0, 0);
    g.setColor (Color.white);
    Font f = new Font ("SansSerif", Font.BOLD, 20);
    g.setFont (f);
    Hashtable allh = new Hashtable ();
    int noofrows = rowsLinkedList.size ();
    int mxy = start_yaxis;
    for (int i = 0;
    i < noofrows; i ++) {
        String [] tmpnodes = removeDuplicates (((String) rowsLinkedList.get (i)).split (","));
        int parts = calculateXY (tmpnodes.length);
        start_yaxis = mxy + 60;
        end_xaxis = 0;
        int tmpy = start_yaxis;
        int tmpx = 0;
        for (int j = 0;
        j < tmpnodes.length; j ++) {
            try {
                if (j + 1 == 1) {
                    start_xaxis = parts * (j + 1) - 20;
                } else {
                    start_xaxis = tmpx + parts;
                }
                tmpx = start_xaxis;
                start_yaxis = tmpy;
                if (null == allh.get (tmpnodes [j])) drawNode (tmpnodes [j]);

                allh.put (tmpnodes [j], tmpnodes [j]);
                if (start_yaxis >= mxy) mxy = start_yaxis;

            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
    try {
        FileOutputStream jpegout = new FileOutputStream (new File (outputfile));
        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder (jpegout);
        encoder.encode (image);
    } catch (Exception ee) {
        ee.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25844721_25844851_21_39
25844721_25844851_2_17
Title: "Java chat server sends client receives ok but not other way around. Video on youtube to watch issue" 
----------------------------------------

public void writeLine (String linea) {
    try {
        if (this.oos != null) {
            oos.writeObject (linea);
            clienttalkstogui.getTextField ().setText ("");
            clienttalkstogui.getAreachat ().append (linea);
        }
    } catch (IOException e) {
        e.getLocalizedMessage ();
    }
}
----------------------------------------

public void writeLine (String linea) {
    try {
        if (this.oos != null) {
            oos.writeObject (linea);
            servertalkstogui.getTextField ().setText ("");
            servertalkstogui.getAreachat ().append ("\n I say: " + linea);
        }
    } catch (IOException e) {
        e.getLocalizedMessage ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25850486_25861559_6_21
25850486_25887381_5_21
Title: Global Exception Handling in Jersey & Spring? 
----------------------------------------

public Response toResponse (ConstraintViolationException e) {
    ResponseEntity re = new ResponseEntity (Code.ERROR_CONSTRAINT_VIOLATION);
    List < Map < String, ? > > data = new ArrayList < > ();
    Map < String, String > errorMap;
    for (final ConstraintViolation < ? > error : e.getConstraintViolations ()) {
        errorMap = new HashMap < > ();
        errorMap.put ("attribute", error.getPropertyPath ().toString ());
        errorMap.put ("message", error.getMessage ());
        data.add (errorMap);
    }
    re.setData (data);
    return this.errorResponse (HttpStatus.INTERNAL_SERVER_ERROR_500, re, e);
}
----------------------------------------

public Response toResponse (Exception ex) {
    if (ex instanceof CmisContentAlreadyExistsException) {
        log.error (ex);
    }
    if (ex instanceof IOException) {
        log.error (ex);
    }
    return Response;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25862411_25862682_46_57
25862411_25865103_17_28
Title: Why CyclicBarrier reset() method is throwing BrokenBarrierException 
----------------------------------------

public void run () {
    doSomeWork ();
    try {
        if (cb.await () == 0) {
            CyclicBarrierEx1.barrierComplete (cb);
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    if (count == 3) {
        System.out.println ("Exit from system");
        return;
    }
    System.out.println ("Collating task");
    count ++;
    for (int i = 0;
    i < 3; i ++) {
        new Thread (new Worker (cb)).start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25862411_25865103_17_28
25862411_25865103_45_56
Title: Why CyclicBarrier reset() method is throwing BrokenBarrierException 
----------------------------------------

public void run () {
    if (count == 3) {
        System.out.println ("Exit from system");
        return;
    }
    System.out.println ("Collating task");
    count ++;
    for (int i = 0;
    i < 3; i ++) {
        new Thread (new Worker (cb)).start ();
    }
}
----------------------------------------

public void run () {
    doSomeWork ();
    try {
        cb.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25869837_25870389_1_17
25869837_25870393_1_20
Title: how to change value on method in java? 
----------------------------------------

static void degitir (String s) {
    try {
        java.lang.reflect.Field field = String.class.getDeclaredField ("value");
        field.setAccessible (true);
        char [] value = (char []) field.get (s);
        value [0] = 'J';
        value [1] = 'a';
        value [2] = 'v';
        value [3] = 'a';
        value [4] = '!';
    } catch (Exception e) {
    }
}
----------------------------------------

static void degitir (String s) {
    try {
        final char [] newValue = "Hello world".toCharArray ();
        Field f = String.class.getDeclaredField ("count");
        f.setAccessible (true);
        f.set (s, newValue.length);
        f = String.class.getDeclaredField ("value");
        f.setAccessible (true);
        f.set (s, newValue);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25874891_26828779_1_58
25874891_34381648_1_10
Title: Android error the method getOrCreateThreadId is undefined for the type Telephony.Threads 
----------------------------------------

public long getOrCreateThreadId (Context context, ArrayList < String > recipientsAddress) {
    Set < String > recipients = new HashSet < String > (recipientsAddress);
    Class [] paramTypes = new Class [2];
    paramTypes [0] = Context.class;
    paramTypes [1] = Set.class;
    Method getOrCreateThreadId = null;
    Class classToInvestigate = null;
    Object cC = null;
    try {
        String className = "android.provider.Telephony";
        classToInvestigate = Class.forName (className);
        Class [] classes = classToInvestigate.getClasses ();
        Toast.makeText (context, "*****Classes:  " + classes.length, Toast.LENGTH_LONG).show ();
        Class threadsClass = null;
        for (Class c : classes) {
            if (c.equals ((Class) Telephony.Threads.class)) threadsClass = c;

        }
        getOrCreateThreadId = threadsClass.getMethod ("getOrCreateThreadId", paramTypes);
        getOrCreateThreadId.setAccessible (true);
        Log.e ("Methode", "" + getOrCreateThreadId.toString ());
        Object arglist [] = new Object [2];
        arglist [0] = context;
        arglist [1] = recipients;
        Long threadId = (Long) getOrCreateThreadId.invoke (null, arglist);
        Toast.makeText (context, "*****ThreadId" + threadId.longValue (), Toast.LENGTH_LONG).show ();
        return threadId;
    } catch (NoSuchMethodException e) {
        Toast.makeText (context, "NoSuchMethodException " + e.getMessage (), Toast.LENGTH_LONG).show ();
        e.printStackTrace ();
    } catch (ClassNotFoundException e1) {
        Toast.makeText (context, "ClassNotFoundException " + e1.getMessage (), Toast.LENGTH_LONG).show ();
        e1.printStackTrace ();
    } catch (IllegalAccessException e3) {
        Toast.makeText (context, "IllegalAccessException " + e3.getMessage (), Toast.LENGTH_LONG).show ();
        e3.printStackTrace ();
    } catch (InvocationTargetException e4) {
        Toast.makeText (context, "InvocationTargetException " + e4.getMessage (), Toast.LENGTH_LONG).show ();
        e4.printStackTrace ();
    }
    return - 1;
}
----------------------------------------

private static long getOrCreateThreadId (Context context, Set < String > recipientsAddress) {
    try {
        Class < ? > clazz = Class.forName ("android.provider.Telephony$Threads");
        Method method = clazz.getMethod ("getOrCreateThreadId", Context.class, Set.class);
        method.setAccessible (true);
        return (Long) method.invoke (null, context, recipientsAddress);
    } catch (Exception e) {
        throw new IllegalArgumentException ("Unable to find or allocate a thread ID.", e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25881722_25881847_8_58
25881722_25882162_5_43
Title: Class interface or enum expected error in temperature lab. Please check and see what I did wrong and explain 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter temperature:");
    int temperature = input.nextInt ();
    if (temperature >= 75) {
        System.out.println ("You can go swimming");
    } else {
        System.out.println ("Try again");
    }
    if (temperature > 60 || temperature <= 85) {
        System.out.println ("You can play tennis");
    } else {
        System.out.println ("Try again");
    }
    if (temperature < 10 || temperature <= 32) {
        System.out.println ("You can go skiing");
    } else {
        System.out.println ("Try again");
    }
    if (temperature <= 10) {
        System.out.println ("You can play checkers");
    } else {
        System.out.println ("Try again");
    }
    if (temperature < 32 || temperature <= 70) {
        System.out.println ("You can play soccer");
    } else {
        System.out.println ("Try again");
    }
    String answer;
    boolean yn;
    System.out.println ("y/n");
    while (true) {
        answer = input.nextLine ().trim ().toLowerCase ();
        if (answer.equals ("y")) {
            yn = true;
            break;
        } else if (answer.equals ("n")) {
            yn = false;
            break;
        } else {
            System.out.println ("Sorry, I didn't catch that. Please answer y/n");
        }

    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter temperature:");
    int temperature = input.nextInt ();
    if (temperature >= 95) {
        System.out.println ("You can go swimming");
    } else if (temperature >= 90) {
        System.out.println ("You can go hiking");
    } else if (temperature >= 85) {
        System.out.println ("You can go skiing");
    } else if (temperature >= 50) {
        System.out.println ("You can play checkers");
    } else if (temperature >= 40) {
        System.out.println ("You can play soccer");
    } else {
        System.out.println ("Im sorry try to find something else to do");
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25882480_39212120_1_13
25882480_44088726_1_15
Title: Rotating a NxN matrix in Java 
----------------------------------------

public void rotateMatrix (Pixel [] [] matrix) {
    for (int i = 0;
    i < matrix.length / 2; i ++) {
        for (int j = 0;
        j < matrix.length - 1 - 2 * i; j ++) {
            Pixel tmp = matrix [j + i] [matrix.length - 1 - i];
            matrix [j + i] [matrix.length - 1 - i] = matrix [i] [j + i];
            matrix [i] [j + i] = matrix [matrix.length - 1 - j - i] [i];
            matrix [matrix.length - 1 - j - i] [i] = matrix [matrix.length - 1 - i] [matrix.length - 1 - j - i];
            matrix [matrix.length - 1 - i] [matrix.length - 1 - j - i] = tmp;
        }
    }
}
----------------------------------------

private int [] [] rotateMatrix (int [] [] matrix) {
    for (int i = 0;
    i < matrix.length - 1; i ++) {
        for (int j = i;
        j < matrix [0].length; j ++) {
            if (i != j) {
                int temp = matrix [i] [j];
                matrix [i] [j] = matrix [j] [i];
                matrix [j] [i] = temp;
            }
        }
    }
    return matrix;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25897677_25898578_1_38
25897677_25899027_1_41
Title: Java Exception Seemingly Rethrown After Being Caught 
----------------------------------------

Map < Object, String > saveMyStuff (List < Object > mystuff) {
    Session sess = getSession ();
    Transaction tx = sess.beginTransaction ();
    boolean successful = true;
    Map < Object, String > problems = new HashMap < Object, String > ();
    for (Object o : mystuff) {
        try {
        } catch (Exception e) {
            log.warn ("Caught an exeption!", e);
            successful = false;
            problems.put (o, "Couldn't Store object");
        }
    }
    try {
        if (successful) tx.commit;
        else tx.rollback ();

    } catch (Exception e) {
        log.warn ("Caught an exeption!", e);
        problems.put (o, "Couldn't Store object");
    }
    return problems;
}
----------------------------------------

Map < Object, String > saveMyStuff (List < Object > mystuff) {
    Session sess = getSessionFactory.openSession ();
    Transaction tx = sess.beginTransaction ();
    boolean successful = true;
    Map < Object, String > problems = new HashMap < Object, String > ();
    for (Object o : mystuff) {
        try {
        } catch (Exception e) {
            log.warn ("Caught an exeption!", e);
            successful = false;
            problems.put (o, "Couldn't Store object");
        }
    }
    try {
        if (successful) tx.commit;
        else tx.rollback ();

        sess.flush ();
    } catch (Exception e) {
        log.warn ("Another Exception caught!", e);
    } finally {
        sess.close ();
    }
    return problems;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25897954_26050200_25_36
25897954_26110650_140_158
Title: Container-level Versioned Libraries Shared by WARs 
----------------------------------------

public boolean equals (Object o) {
    if (this == o) return true;

    if (o == null || getClass () != o.getClass ()) return false;

    ConfigKey configKey = (ConfigKey) o;
    if (pathConfig != null ? ! pathConfig.equals (configKey.pathConfig) : configKey.pathConfig != null) return false;

    if (pathID != null ? ! pathID.equals (configKey.pathID) : configKey.pathID != null) return false;

    return true;
}
----------------------------------------

public boolean equals (Object o) {
    if (this == o) {
        return true;
    }
    if ((o == null) || (getClass () != o.getClass ())) {
        return false;
    }
    LibraryAndVersion that = (LibraryAndVersion) o;
    if ((name != null) ? (! name.equals (that.name)) : (that.name != null)) {
        return false;
    }
    if ((version != null) ? (! version.equals (that.version)) : (that.version != null)) {
        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25898865_25898947_16_43
25898865_25898947_1_14
Title: JDBC-ResultSet is closed in while-Loop 
----------------------------------------

public LinkedList < Leistung > alleAbrufen (int athlet_id) throws SQLException {
    LinkedList < Leistung > alleLeistungen = new LinkedList < Leistung > ();
    String selectLeistungen = "SELECT * FROM Leistung WHERE athlet_id=?";
    PreparedStatement pstmt = con.prepareStatement (selectLeistungen);
    pstmt.setInt (1, athlet_id);
    ResultSet rs = pstmt.executeQuery ();
    while (rs.next ()) {
        long id = rs.getInt (1);
        String bezeichnung = rs.getString (2);
        String datum = rs.getString (3);
        double geschwindigkeit = rs.getDouble (4);
        boolean selectedForSlopeFaktor = rs.getBoolean (5);
        int strecke_id = rs.getInt (7);
        long longAthlet_id = (long) athlet_id;
        Leistung leistung = new Leistung (strecke_id, longAthlet_id, bezeichnung, datum, geschwindigkeit);
        leistung.setLeistungID (id);
        leistung.setIsUsedForSlopeFaktor (selectedForSlopeFaktor);
        alleLeistungen.add (leistung);
    }
    return alleLeistungen;
}
----------------------------------------

public LinkedList < Athlet > alleAbrufen () throws SQLException {
    LinkedList < Athlet > alleAthleten = new LinkedList < Athlet > ();
    String abrufenAthleten = "SELECT * FROM Athlet ORDER BY athlet_id";
    Statement stmtAlleAbrufen = con.createStatement ();
    ResultSet athleten_rs = stmtAlleAbrufen.executeQuery (abrufenAthleten);
    while (athleten_rs.next ()) {
        long id = athleten_rs.getInt (1);
        String name = athleten_rs.getString (2);
        LinkedList < Leistung > alleLeistungen = alleAbrufen ((int) (id));
        alleAthleten.add (new Athlet (id, name, alleLeistungen));
    }
    return alleAthleten;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25901014_25902895_124_163
25901014_25902895_28_41
Title: Problems adding JButton to Window 
----------------------------------------

public void run () {
    while (running) {
        while (paused) {
            lckPause.lock ();
            try {
                conPause.await ();
            } catch (InterruptedException ex) {
            } finally {
                lckPause.unlock ();
            }
        }
        p.x += xDelta;
        p.y += yDelta;
        if (p.x < 0) {
            p.x = 0;
            xDelta *= - 1;
        } else if (p.x > getWidth ()) {
            p.x = getWidth ();
            xDelta *= - 1;
        }

        if (p.y < 0) {
            p.y = 0;
            yDelta *= - 1;
        } else if (p.y > getHeight ()) {
            p.y = getHeight ();
            yDelta *= - 1;
        }

        repaint ();
        if (running && ! paused) {
            try {
                Thread.sleep (40);
            } catch (InterruptedException ex) {
            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
        ex.printStackTrace ();
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.add (new MainView ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25903354_25922883_1_43
25903354_34922379_5_20
Title: "Java: convert seconds to minutes hours and days" 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    final int MIN = 60, HRS = 3600, DYS = 84600;
    int input, days, seconds, minutes, hours, rDays, rHours;
    System.out.println ("Enter amount of seconds!");
    input = scan.nextInt ();
    days = input / DYS;
    rDays = input % DYS;
    hours = rDays / HRS;
    rHours = rDays % HRS;
    minutes = rHours / MIN;
    seconds = rHours % MIN;
    if (input >= DYS) {
        System.out.println (input + " seconds equals to " + days + " days " + hours + " hours " + minutes + " minutes " + seconds + " seconds");
    } else if (input >= HRS && input < DYS) {
        System.out.println (input + " seconds equals to " + hours + " hours " + minutes + " minutes " + seconds + " seconds");
    } else if (input >= MIN && input < HRS) {
        System.out.println (input + " seconds equals to " + minutes + " minutes " + seconds + " seconds");
    } else if (input < MIN) {
        System.out.println (input + " seconds equals to seconds");
    }

    scan.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int seconds;
    int minutes;
    int hours;
    System.out.print ("Enter the number of seconds : ");
    seconds = input.nextInt ();
    hours = seconds / 3600;
    minutes = (seconds % 3600) / 60;
    int seconds_output = (seconds % 3600) % 60;
    System.out.println ("The time entered in hours,minutes and seconds is:");
    System.out.println (hours + " hours :" + minutes + " minutes:" + seconds_output + " seconds");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25907380_25915028_1_28
25907380_25932760_1_47
Title: file.delete() only works the first time 
----------------------------------------

public static String SHA256 (String path) throws FileNotFoundException, NoSuchAlgorithmException, IOException {
    MessageDigest md = MessageDigest.getInstance ("SHA-256");
    FileInputStream fis = new FileInputStream (path);
    byte [] dataBytes = new byte [1024];
    int nread = 0;
    while ((nread = fis.read (dataBytes)) != - 1) {
        md.update (dataBytes, 0, nread);
    }
    byte [] mdbytes = md.digest ();
    StringBuilder sb = new StringBuilder ("");
    for (int i = 0;
    i < mdbytes.length; i ++) {
        sb.append (Integer.toString ((mdbytes [i] & 0xff) + 0x100, 16).substring (1));
    }
    String sha256 = sb.toString ();
    fis.close ();
    return sha256;
}
----------------------------------------

public static String SHA256 (String path) throws NoSuchAlgorithmException, IOException {
    MessageDigest md = MessageDigest.getInstance ("SHA-256");
    FileInputStream fis = null;
    try {
        fis = new FileInputStream (path);
        byte [] dataBytes = new byte [1024];
        int nread = 0;
        while ((nread = fis.read (dataBytes)) != - 1) {
            md.update (dataBytes, 0, nread);
        }
    } catch (IOException e) {
        throw e;
    } finally {
        if (fis != null) {
            try {
                fis.close ();
            } catch (IOException e) {
            }
        }
    }
    byte [] mdbytes = md.digest ();
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < mdbytes.length; i ++) {
        sb.append (Integer.toString ((mdbytes [i] & 0xff) + 0x100, 16).substring (1));
    }
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25914142_25914959_5_31
25914142_26029180_6_71
Title: Store/ Display Data Inputs from Arrays 
----------------------------------------

public static void main (String args []) throws Exception {
    if (code == 1) {
        System.out.print ("");
        System.out.print ("Product number: ");
        System.out.print ("Product name: ");
        String prodname = a.readLine ();
        System.out.print ("Price: ");
        int price = Integer.parseInt (a.readLine ());
        System.out.println ("");
        productname.add (prod);
    } else if (code == 2) {
        System.out.println ("Display List of Products-Prices");
        System.out.print ("Enter product number:");
        int prodnum = Integer.parseInt (a.readLine ());
        System.out.println ("");
    }

    if (code == 3) {
        System.out.println ("Invalid");
        System.out.println ("Restart");
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String args []) throws Exception {
    ArrayList < Integer > prodNum = new ArrayList < Integer > (100);
    ArrayList < String > prodName = new ArrayList < String > (100);
    ArrayList < Integer > prodPrice = new ArrayList < Integer > (100);
    ArrayList < Integer > prodPay = new ArrayList < Integer > (100);
    for (int x = 1;
    x <= 100; x ++) {
        System.out.println ("1 - Maintenance");
        System.out.println ("2 - Transaction");
        System.out.println ("");
        System.out.print ("Enter code: ");
        int code = Integer.parseInt (a.readLine ());
        System.out.println ("");
        int y = 1;
        if (code == 1) {
            System.out.print ("");
            System.out.println ("Product number: " + x);
            prodNum.add (x);
            prodNum.add (x);
            System.out.print ("Product name: ");
            String prodname = a.readLine ();
            prodName.add (prodname);
            prodName.add (prodname);
            System.out.print ("Price: ");
            int prodprice = Integer.parseInt (a.readLine ());
            prodPrice.add (prodprice);
            prodPrice.add (prodprice);
            System.out.print ("Payment: ");
            int prodpay = Integer.parseInt (a.readLine ());
            prodPay.add (prodpay);
            prodPay.add (prodpay);
            System.out.println ("");
            System.out.println ("Start New Transaction:");
            System.out.println ("");
        } else if (code == 2) {
            System.out.println ("Display List of Products-Prices");
            System.out.print ("Enter product number: ");
            int i = Integer.parseInt (a.readLine ());
            i = prodNum.get (i);
            prodNum.set (1, i);
            System.out.println ("");
            System.out.println ("Product name: " + prodName.get (i));
            System.out.println ("Product price: " + prodPrice.get (i));
            System.out.println ("Product payment: " + prodPay.get (i));
            System.out.println ("");
            System.out.println ("Start New Transaction:");
        } else if (code >= 3) {
            System.out.println ("Invalid");
            System.out.println ("Restart");
            System.out.println ("");
        } else if (code == 0) {
            System.out.println ("Program will end");
            break;
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922612_11_27
25922372_25922614_45_63
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public void run () {
    while (true) {
        String output = task ();
        if (output != null) {
            int count = counter.getAndIncrement ();
            System.out.println (output);
            if (count >= 100) {
                break;
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            Object expensiveObject = expensiveObjects.take ();
            String output = task ();
            expensiveObjects.put (expensiveObject);
            if (output != null) {
                int counter = outputCount.getAndIncrement ();
                System.out.println (counter);
                if (counter >= 100) {
                    break;
                }
            }
        } catch (InterruptedException e) {
            System.out.println ("Error!");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922612_33_49
25922372_25922614_13_28
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    AtomicInteger counter = new AtomicInteger ();
    ExecutorService pool = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; ++ i) {
        pool.execute (new MyTask (counter));
    }
    pool.shutdown ();
    pool.awaitTermination (1, TimeUnit.HOURS);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    BlockingQueue < Object > expensiveObjects = new LinkedBlockingQueue < > ();
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    ExecutorService executorService = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; i ++) {
        executorService.execute (new MyRunnable (expensiveObjects));
    }
    executorService.shutdown ();
    executorService.awaitTermination (5, TimeUnit.SECONDS);
    System.out.println ("Final: " + outputCount.get ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922612_33_49
25922372_25922816_29_43
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    AtomicInteger counter = new AtomicInteger ();
    ExecutorService pool = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; ++ i) {
        pool.execute (new MyTask (counter));
    }
    pool.shutdown ();
    pool.awaitTermination (1, TimeUnit.HOURS);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Runnable runnable = new Runnable () {
        @Override
        public void run () {
            doManyTasks ();
        }}

    ;
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    while (! threadPool.isShutdown ()) {
        Thread.sleep (100);
    }
    System.out.println (outputCount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922612_33_49
25922372_25925208_8_33
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    AtomicInteger counter = new AtomicInteger ();
    ExecutorService pool = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; ++ i) {
        pool.execute (new MyTask (counter));
    }
    pool.shutdown ();
    pool.awaitTermination (1, TimeUnit.HOURS);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final AtomicInteger outputCount = new AtomicInteger (0);
    ExecutorService threadPool = Executors.newFixedThreadPool (THREADS);
    Collection < Callable < Object > > tasks = new ArrayList < > (THREADS);
    for (int i = 0;
    i < THREADS; i ++) {
        tasks.add (new Callable < Object > () {
            private SecureRandom rand = new SecureRandom ();
            private String task () {
                return rand.nextDouble () > 0.5 ? Thread.currentThread ().getName () : null;
            }@Override
            public Object call () {
                for (int i;
                (i = outputCount.get ()) < TASKS;) {
                    String output = task ();
                    if (output != null) {
                        if ((i = outputCount.incrementAndGet ()) < TASKS) {
                            System.out.println (output + ": " + i);
                        }
                    }
                }
                return null;
            }}

        );
    }
    threadPool.invokeAll (tasks);
    threadPool.shutdownNow ();
    System.out.println ("done");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922612_33_49
25922372_25928966_37_48
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    AtomicInteger counter = new AtomicInteger ();
    ExecutorService pool = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; ++ i) {
        pool.execute (new MyTask (counter));
    }
    pool.shutdown ();
    pool.awaitTermination (1, TimeUnit.HOURS);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    CountDownLatch theLatch = new CountDownLatch (100);
    List < String > output = Collections.synchronizedList (new ArrayList < String > ());
    SecureRandom random = new SecureRandom ();
    ExecutorService service = Executors.newCachedThreadPool ();
    for (int i = 0;
    i < 4; i ++) {
        service.execute (new CountDownTask (theLatch, output, random));
    }
    theLatch.await (1, TimeUnit.MINUTES);
    service.shutdown ();
    System.out.println (output.size ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922614_13_28
25922372_25922816_29_43
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    BlockingQueue < Object > expensiveObjects = new LinkedBlockingQueue < > ();
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    ExecutorService executorService = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; i ++) {
        executorService.execute (new MyRunnable (expensiveObjects));
    }
    executorService.shutdown ();
    executorService.awaitTermination (5, TimeUnit.SECONDS);
    System.out.println ("Final: " + outputCount.get ());
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Runnable runnable = new Runnable () {
        @Override
        public void run () {
            doManyTasks ();
        }}

    ;
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    while (! threadPool.isShutdown ()) {
        Thread.sleep (100);
    }
    System.out.println (outputCount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922614_13_28
25922372_25925208_8_33
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    BlockingQueue < Object > expensiveObjects = new LinkedBlockingQueue < > ();
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    ExecutorService executorService = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; i ++) {
        executorService.execute (new MyRunnable (expensiveObjects));
    }
    executorService.shutdown ();
    executorService.awaitTermination (5, TimeUnit.SECONDS);
    System.out.println ("Final: " + outputCount.get ());
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final AtomicInteger outputCount = new AtomicInteger (0);
    ExecutorService threadPool = Executors.newFixedThreadPool (THREADS);
    Collection < Callable < Object > > tasks = new ArrayList < > (THREADS);
    for (int i = 0;
    i < THREADS; i ++) {
        tasks.add (new Callable < Object > () {
            private SecureRandom rand = new SecureRandom ();
            private String task () {
                return rand.nextDouble () > 0.5 ? Thread.currentThread ().getName () : null;
            }@Override
            public Object call () {
                for (int i;
                (i = outputCount.get ()) < TASKS;) {
                    String output = task ();
                    if (output != null) {
                        if ((i = outputCount.incrementAndGet ()) < TASKS) {
                            System.out.println (output + ": " + i);
                        }
                    }
                }
                return null;
            }}

        );
    }
    threadPool.invokeAll (tasks);
    threadPool.shutdownNow ();
    System.out.println ("done");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922614_13_28
25922372_25928966_37_48
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    BlockingQueue < Object > expensiveObjects = new LinkedBlockingQueue < > ();
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    ExecutorService executorService = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; i ++) {
        executorService.execute (new MyRunnable (expensiveObjects));
    }
    executorService.shutdown ();
    executorService.awaitTermination (5, TimeUnit.SECONDS);
    System.out.println ("Final: " + outputCount.get ());
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    CountDownLatch theLatch = new CountDownLatch (100);
    List < String > output = Collections.synchronizedList (new ArrayList < String > ());
    SecureRandom random = new SecureRandom ();
    ExecutorService service = Executors.newCachedThreadPool ();
    for (int i = 0;
    i < 4; i ++) {
        service.execute (new CountDownTask (theLatch, output, random));
    }
    theLatch.await (1, TimeUnit.MINUTES);
    service.shutdown ();
    System.out.println (output.size ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922816_29_43
25922372_25925208_8_33
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Runnable runnable = new Runnable () {
        @Override
        public void run () {
            doManyTasks ();
        }}

    ;
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    while (! threadPool.isShutdown ()) {
        Thread.sleep (100);
    }
    System.out.println (outputCount);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final AtomicInteger outputCount = new AtomicInteger (0);
    ExecutorService threadPool = Executors.newFixedThreadPool (THREADS);
    Collection < Callable < Object > > tasks = new ArrayList < > (THREADS);
    for (int i = 0;
    i < THREADS; i ++) {
        tasks.add (new Callable < Object > () {
            private SecureRandom rand = new SecureRandom ();
            private String task () {
                return rand.nextDouble () > 0.5 ? Thread.currentThread ().getName () : null;
            }@Override
            public Object call () {
                for (int i;
                (i = outputCount.get ()) < TASKS;) {
                    String output = task ();
                    if (output != null) {
                        if ((i = outputCount.incrementAndGet ()) < TASKS) {
                            System.out.println (output + ": " + i);
                        }
                    }
                }
                return null;
            }}

        );
    }
    threadPool.invokeAll (tasks);
    threadPool.shutdownNow ();
    System.out.println ("done");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25922816_29_43
25922372_25928966_37_48
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Runnable runnable = new Runnable () {
        @Override
        public void run () {
            doManyTasks ();
        }}

    ;
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    threadPool.submit (runnable);
    while (! threadPool.isShutdown ()) {
        Thread.sleep (100);
    }
    System.out.println (outputCount);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    CountDownLatch theLatch = new CountDownLatch (100);
    List < String > output = Collections.synchronizedList (new ArrayList < String > ());
    SecureRandom random = new SecureRandom ();
    ExecutorService service = Executors.newCachedThreadPool ();
    for (int i = 0;
    i < 4; i ++) {
        service.execute (new CountDownTask (theLatch, output, random));
    }
    theLatch.await (1, TimeUnit.MINUTES);
    service.shutdown ();
    System.out.println (output.size ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25922372_25925208_8_33
25922372_25928966_37_48
Title: Use Java concurrency to run a multi-threaded task until there is enough output 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final AtomicInteger outputCount = new AtomicInteger (0);
    ExecutorService threadPool = Executors.newFixedThreadPool (THREADS);
    Collection < Callable < Object > > tasks = new ArrayList < > (THREADS);
    for (int i = 0;
    i < THREADS; i ++) {
        tasks.add (new Callable < Object > () {
            private SecureRandom rand = new SecureRandom ();
            private String task () {
                return rand.nextDouble () > 0.5 ? Thread.currentThread ().getName () : null;
            }@Override
            public Object call () {
                for (int i;
                (i = outputCount.get ()) < TASKS;) {
                    String output = task ();
                    if (output != null) {
                        if ((i = outputCount.incrementAndGet ()) < TASKS) {
                            System.out.println (output + ": " + i);
                        }
                    }
                }
                return null;
            }}

        );
    }
    threadPool.invokeAll (tasks);
    threadPool.shutdownNow ();
    System.out.println ("done");
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    CountDownLatch theLatch = new CountDownLatch (100);
    List < String > output = Collections.synchronizedList (new ArrayList < String > ());
    SecureRandom random = new SecureRandom ();
    ExecutorService service = Executors.newCachedThreadPool ();
    for (int i = 0;
    i < 4; i ++) {
        service.execute (new CountDownTask (theLatch, output, random));
    }
    theLatch.await (1, TimeUnit.MINUTES);
    service.shutdown ();
    System.out.println (output.size ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25926465_25926514_1_20
25926465_25932524_1_58
Title: Find next largest number to given input with specific pattern 
----------------------------------------

private static String toOutput (int a) {
    String s = Integer.toString (a);
    StringBuilder sb = new StringBuilder ();
    if (Integer.valueOf (s.charAt (0)) > 7) {
        for (int i = 0;
        i <= s.length (); i ++) {
            sb.append ("4");
        }
        return sb.toString ();
    }
    for (int i = s.length () - 1;
    i >= 0; i --) {
        Integer x = Integer.valueOf (i);
        if (x <= 4) {
            sb.append (4);
        } else {
            sb.append (7);
        }
    }
    return sb.reverse ().toString ();
}
----------------------------------------

private static String toOutput (int n) {
    String input = String.valueOf (n + 1);
    char [] inputChars = input.toCharArray ();
    char [] outputChars = new char [inputChars.length + 1];
    boolean extra = false;
    for (int i = inputChars.length - 1;
    i >= 0; i --) {
        if ((i + 1) < inputChars.length) {
            if (inputChars [i] != '4' && inputChars [i] != '7') {
                for (int j = i + 1;
                j < inputChars.length; j ++) {
                    outputChars [j + 1] = '4';
                }
            }
        }
        if (extra == true) {
            inputChars [i] = (char) ((int) inputChars [i] + 1);
        }
        if (inputChars [i] <= '4') {
            outputChars [i + 1] = '4';
            extra = false;
        } else if (inputChars [i] <= '7') {
            outputChars [i + 1] = '7';
            extra = false;
        } else {
            outputChars [i + 1] = '4';
            extra = true;
        }

    }
    if (extra == true) {
        outputChars [0] = '4';
    } else {
        outputChars [0] = ' ';
    }
    return new String (outputChars).trim ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25926465_25926514_1_20
25926465_44299416_1_14
Title: Find next largest number to given input with specific pattern 
----------------------------------------

private static String toOutput (int a) {
    String s = Integer.toString (a);
    StringBuilder sb = new StringBuilder ();
    if (Integer.valueOf (s.charAt (0)) > 7) {
        for (int i = 0;
        i <= s.length (); i ++) {
            sb.append ("4");
        }
        return sb.toString ();
    }
    for (int i = s.length () - 1;
    i >= 0; i --) {
        Integer x = Integer.valueOf (i);
        if (x <= 4) {
            sb.append (4);
        } else {
            sb.append (7);
        }
    }
    return sb.reverse ().toString ();
}
----------------------------------------

static String toOutput (long a) {
    LinkedList < Long > q = new LinkedList < Long > ();
    q.add (4L);
    q.add (7L);
    while (! q.isEmpty ()) {
        Long curr = q.pop ();
        if (curr > a) return String.valueOf (curr);

        q.add (curr * 10 + 4);
        q.add (curr * 10 + 7);
    }
    return "";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25926465_25932524_1_58
25926465_44299416_1_14
Title: Find next largest number to given input with specific pattern 
----------------------------------------

private static String toOutput (int n) {
    String input = String.valueOf (n + 1);
    char [] inputChars = input.toCharArray ();
    char [] outputChars = new char [inputChars.length + 1];
    boolean extra = false;
    for (int i = inputChars.length - 1;
    i >= 0; i --) {
        if ((i + 1) < inputChars.length) {
            if (inputChars [i] != '4' && inputChars [i] != '7') {
                for (int j = i + 1;
                j < inputChars.length; j ++) {
                    outputChars [j + 1] = '4';
                }
            }
        }
        if (extra == true) {
            inputChars [i] = (char) ((int) inputChars [i] + 1);
        }
        if (inputChars [i] <= '4') {
            outputChars [i + 1] = '4';
            extra = false;
        } else if (inputChars [i] <= '7') {
            outputChars [i + 1] = '7';
            extra = false;
        } else {
            outputChars [i + 1] = '4';
            extra = true;
        }

    }
    if (extra == true) {
        outputChars [0] = '4';
    } else {
        outputChars [0] = ' ';
    }
    return new String (outputChars).trim ();
}
----------------------------------------

static String toOutput (long a) {
    LinkedList < Long > q = new LinkedList < Long > ();
    q.add (4L);
    q.add (7L);
    while (! q.isEmpty ()) {
        Long curr = q.pop ();
        if (curr > a) return String.valueOf (curr);

        q.add (curr * 10 + 4);
        q.add (curr * 10 + 7);
    }
    return "";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25944119_25944205_9_17
25944119_25944229_6_21
Title: "calling a function from within a class ""collate""" 
----------------------------------------

public static String collate (String a, String b) {
    String collate = new String ();
    for (int i = 0;
    i < a.length (); i ++) {
        collate += a.charAt (i);
        collate += b.charAt (i);
    }
    return collate;
}
----------------------------------------

public static String collate (String a, String b) {
    if (a.length () != b.length ()) throw new IllegalArgumentException ("Cannot collate strings of unequal size");

    if (a.isEmpty ()) return "";
    else {
        String collate = "";
        StringBuilder result = new StringBuilder ();
        char firstCharacterOfA = a.charAt (0);
        char firstCharacterOfB = b.charAt (0);
        result.append (firstCharacterOfA);
        result.append (firstCharacterOfB);
        result.append (collate (a.substring (1), b.substring (1)));
        return result.toString ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25944183_25944253_4_23
25944183_41124534_5_21
Title: "Programmr ""String Split"" Java" 
----------------------------------------

public static void main (String args []) {
    String fullName = "";
    String [] str;
    String firstName = "";
    String lastName = "";
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter the full name:");
    fullName = scanner.nextLine ();
    System.out.println ("The names after split is:");
    int i;
    for (i = 0; i < fullName.length (); i ++) {
        if (fullName.charAt (i) == ' ') {
            break;
        }
    }
    firstName = fullName.substring (0, i + 1);
    lastName = fullName.substring (i + 1);
    System.out.println (firstName + "' " + lastName);
}
----------------------------------------

public static void main (String args []) {
    String fullName = "";
    String [] str;
    String firstName = "";
    String lastName = "";
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter the full name:");
    fullName = scanner.nextLine ();
    System.out.println ("The names after split is:");
    int spacePos = fullName.indexOf (" ");
    firstName = fullName.substring (0, spacePos);
    lastName = fullName.substring (spacePos, fullName.length ());
    System.out.println (firstName + "' " + lastName);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25949393_25949529_9_24
25949393_25949564_6_19
Title: String as parameter in java 
----------------------------------------

public String readMessage (String pMessage) {
    this.message = pMessage;
    this.c = new char [message.length ()];
    for (int i = 0;
    i < message.length (); i ++) {
        c [i] = message.charAt (i);
        c [i] += (char) 27;
    }
    message = String.copyValueOf (c);
    return message;
}
----------------------------------------

public String readMessage (String pMessage) {
    this.Message = pMessage;
    c = new char [Message.length ()];
    for (int i = 0;
    i < Message.length (); i ++) {
        c [i] = Message.charAt (i);
        c [i] += (char) 27;
    }
    Message = String.copyValueOf (c);
    return Message;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25954495_25954556_2_18
25954495_25954600_1_14
Title: Alternating characters of two different inputs 
----------------------------------------

public static String alternate (String a, String b) {
    String s = "";
    int i = 0;
    while (i < a.length () && i < b.length ()) {
        s += a.charAt (i) + "" + b.charAt (i);
        i ++;
    }
    while (i < a.length ()) {
        s += a.charAt (i);
        i ++;
    }
    while (i < b.length ()) {
        s += b.charAt (i);
        i ++;
    }
    return s;
}
----------------------------------------

String alternate (String a, String b) {
    StringBuilder builder = new StringBuilder ();
    final int greaterLength = a.length () > b.length () ? a.length () : b.length ();
    for (int i = 0;
    i < greaterLength; i ++) {
        if (i < a.length ()) {
            builder.append (a.charAt (i));
        }
        if (i < b.length ()) {
            builder.append (b.charAt (i));
        }
    }
    return builder.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25954495_25954556_2_18
25954495_25954629_2_12
Title: Alternating characters of two different inputs 
----------------------------------------

public static String alternate (String a, String b) {
    String s = "";
    int i = 0;
    while (i < a.length () && i < b.length ()) {
        s += a.charAt (i) + "" + b.charAt (i);
        i ++;
    }
    while (i < a.length ()) {
        s += a.charAt (i);
        i ++;
    }
    while (i < b.length ()) {
        s += b.charAt (i);
        i ++;
    }
    return s;
}
----------------------------------------

String alternate (String a, String b) {
    String s = "";
    for (int i = 0;
    i < 2 * a.length (); i ++) {
        if (i % 2 == 0) s += a.charAt (i / 2);
        else s += b.charAt (i / 2);

    }
    System.out.println (s);
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25954495_25954556_2_18
25954495_45196448_1_12
Title: Alternating characters of two different inputs 
----------------------------------------

public static String alternate (String a, String b) {
    String s = "";
    int i = 0;
    while (i < a.length () && i < b.length ()) {
        s += a.charAt (i) + "" + b.charAt (i);
        i ++;
    }
    while (i < a.length ()) {
        s += a.charAt (i);
        i ++;
    }
    while (i < b.length ()) {
        s += b.charAt (i);
        i ++;
    }
    return s;
}
----------------------------------------

String alternate (String first, String second) {
    char [] firstChars = first.toCharArray ();
    char [] secondChars = second.toCharArray ();
    int smallerCharsCount = Math.min (firstChars.length, secondChars.length);
    StringBuilder builder = new StringBuilder (smallerCharsCount * 2);
    for (int i = 0;
    i < smallerCharsCount; i ++) {
        builder.append (firstChars [i]);
        builder.append (secondChars [i]);
    }
    return builder.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25954495_25954600_1_14
25954495_25954629_2_12
Title: Alternating characters of two different inputs 
----------------------------------------

String alternate (String a, String b) {
    StringBuilder builder = new StringBuilder ();
    final int greaterLength = a.length () > b.length () ? a.length () : b.length ();
    for (int i = 0;
    i < greaterLength; i ++) {
        if (i < a.length ()) {
            builder.append (a.charAt (i));
        }
        if (i < b.length ()) {
            builder.append (b.charAt (i));
        }
    }
    return builder.toString ();
}
----------------------------------------

String alternate (String a, String b) {
    String s = "";
    for (int i = 0;
    i < 2 * a.length (); i ++) {
        if (i % 2 == 0) s += a.charAt (i / 2);
        else s += b.charAt (i / 2);

    }
    System.out.println (s);
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25954495_25954600_1_14
25954495_45196448_1_12
Title: Alternating characters of two different inputs 
----------------------------------------

String alternate (String a, String b) {
    StringBuilder builder = new StringBuilder ();
    final int greaterLength = a.length () > b.length () ? a.length () : b.length ();
    for (int i = 0;
    i < greaterLength; i ++) {
        if (i < a.length ()) {
            builder.append (a.charAt (i));
        }
        if (i < b.length ()) {
            builder.append (b.charAt (i));
        }
    }
    return builder.toString ();
}
----------------------------------------

String alternate (String first, String second) {
    char [] firstChars = first.toCharArray ();
    char [] secondChars = second.toCharArray ();
    int smallerCharsCount = Math.min (firstChars.length, secondChars.length);
    StringBuilder builder = new StringBuilder (smallerCharsCount * 2);
    for (int i = 0;
    i < smallerCharsCount; i ++) {
        builder.append (firstChars [i]);
        builder.append (secondChars [i]);
    }
    return builder.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25954495_25954629_2_12
25954495_45196448_1_12
Title: Alternating characters of two different inputs 
----------------------------------------

String alternate (String a, String b) {
    String s = "";
    for (int i = 0;
    i < 2 * a.length (); i ++) {
        if (i % 2 == 0) s += a.charAt (i / 2);
        else s += b.charAt (i / 2);

    }
    System.out.println (s);
    return s;
}
----------------------------------------

String alternate (String first, String second) {
    char [] firstChars = first.toCharArray ();
    char [] secondChars = second.toCharArray ();
    int smallerCharsCount = Math.min (firstChars.length, secondChars.length);
    StringBuilder builder = new StringBuilder (smallerCharsCount * 2);
    for (int i = 0;
    i < smallerCharsCount; i ++) {
        builder.append (firstChars [i]);
        builder.append (secondChars [i]);
    }
    return builder.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25963720_25963807_8_36
25963720_32269006_1_27
Title: How to compare two string dates in Java? 
----------------------------------------

public static void main (String [] args) {
    String startDate = "2014/09/12 00:00";
    String endDate = "2014/09/13 00:00";
    try {
        Date start = new SimpleDateFormat ("yyyy/MM/dd HH:mm", Locale.ENGLISH).parse (startDate);
        Date end = new SimpleDateFormat ("yyyy/MM/dd HH:mm", Locale.ENGLISH).parse (endDate);
        System.out.println (start);
        System.out.println (end);
        if (start.compareTo (end) > 0) {
            System.out.println ("start is after end");
        } else if (start.compareTo (end) < 0) {
            System.out.println ("start is before end");
        } else if (start.compareTo (end) == 0) {
            System.out.println ("start is equal to end");
        } else {
            System.out.println ("Something weird happened...");
        }

    } catch (ParseException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String args []) throws AssertionError, ParseException {
    DateFormat df = new SimpleDateFormat ("dd-MM-yyyy");
    System.out.println ("Comparing two Date in Java using CompareTo method");
    compareDatesByCompareTo (df, df.parse ("01-01-2012"), df.parse ("01-01-2012"));
    compareDatesByCompareTo (df, df.parse ("02-03-2012"), df.parse ("04-05-2012"));
    compareDatesByCompareTo (df, df.parse ("02-03-2012"), df.parse ("01-02-2012"));
    System.out.println ("Comparing two Date in Java using Date's before, after and equals method");
    compareDatesByDateMethods (df, df.parse ("01-01-2012"), df.parse ("01-01-2012"));
    compareDatesByDateMethods (df, df.parse ("02-03-2012"), df.parse ("04-05-2012"));
    compareDatesByDateMethods (df, df.parse ("02-03-2012"), df.parse ("01-02-2012"));
    System.out.println ("Comparing two Date in Java using Calendar's before, after and equals method");
    compareDatesByCalendarMethods (df, df.parse ("01-01-2012"), df.parse ("01-01-2012"));
    compareDatesByCalendarMethods (df, df.parse ("02-03-2012"), df.parse ("04-05-2012"));
    compareDatesByCalendarMethods (df, df.parse ("02-03-2012"), df.parse ("01-02-2012"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25965281_25965366_1_17
25965281_25965375_10_21
Title: CheckConsecutiveElements in a list 
----------------------------------------

private static int nGroup (final int numOfOccs, final int elem, final int [] whereToFind) {
    if (numOfOccs == 0 || whereToFind == null) {
        return 0;
    }
    int res = 0;
    int streakLength = 0;
    for (final int i : whereToFind) {
        if (elem != i) {
            streakLength = 0;
        } else if (++ streakLength >= numOfOccs) {
            res ++;
        }

    }
    return res;
}
----------------------------------------

public static int nGroup (int nOccs, int val, int [] arr) {
    int count = 0;
    if (nOccs == 0 || arr == null) return count;

    for (int i = 0;
    i < arr.length; i ++) {
        int occs;
        for (occs = 0; i < arr.length && arr [i] == val; i ++, occs ++);

        if (occs >= nOccs) count += occs - nOccs + 1;

    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
25967177_25970585_1_12
25967177_41405614_15_36
Title: "Determine whether or not can an array of numbers can be divided into two arrays with each array holding the same sum of numbers" 
----------------------------------------

public boolean canBalance (int [] nums) {
    int sumL = 0, sumR = 0;
    int l = - 1, r = nums.length;
    while (r - l > 1) {
        if (sumL < sumR) {
            sumL += nums [++ l];
        } else {
            sumR += nums [-- r];
        }
    }
    return sumL == sumR;
}
----------------------------------------

public boolean canBalance (int [] nums) {
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            if (sumArray (nums, 0, i) == sumArray (nums, i, nums.length)) {
                return true;
            }
        }
        return false;
    } else {
        return false;
    }
}
----------------------------------------

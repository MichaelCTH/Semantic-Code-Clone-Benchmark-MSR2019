$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_43177331_94_116
43176198_51239028_41_58
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (p3) {
            while (true) {
                while (p3.status != 3) {
                    try {
                        p3.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.print ("C ");
                Thread.sleep (1000);
                p3.status = 1;
                p3.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 2) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("B ");
                Thread.sleep (400);
                writeAbcExample.status = 3;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_43177331_94_116
43176198_51239028_71_88
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (p3) {
            while (true) {
                while (p3.status != 3) {
                    try {
                        p3.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.print ("C ");
                Thread.sleep (1000);
                p3.status = 1;
                p3.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 3) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("C ");
                Thread.sleep (400);
                writeAbcExample.status = 1;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_43177331_94_116
43176198_51240847_23_45
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (p3) {
            while (true) {
                while (p3.status != 3) {
                    try {
                        p3.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.print ("C ");
                Thread.sleep (1000);
                p3.status = 1;
                p3.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (ai) {
            int val = ai.intValue ();
            if (val >= 10) {
                ai.notifyAll ();
                break;
            } else {
                if (val % 3 == b) {
                    System.out.println (" Thread " + b + " printing value " + c);
                    ai.getAndIncrement ();
                    ai.notifyAll ();
                } else {
                    try {
                        ai.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_51239028_11_28
43176198_51239028_41_58
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 1) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("A ");
                Thread.sleep (400);
                writeAbcExample.status = 2;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 2) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("B ");
                Thread.sleep (400);
                writeAbcExample.status = 3;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_51239028_11_28
43176198_51239028_71_88
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 1) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("A ");
                Thread.sleep (400);
                writeAbcExample.status = 2;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 3) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("C ");
                Thread.sleep (400);
                writeAbcExample.status = 1;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_51239028_11_28
43176198_51240847_23_45
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 1) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("A ");
                Thread.sleep (400);
                writeAbcExample.status = 2;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (ai) {
            int val = ai.intValue ();
            if (val >= 10) {
                ai.notifyAll ();
                break;
            } else {
                if (val % 3 == b) {
                    System.out.println (" Thread " + b + " printing value " + c);
                    ai.getAndIncrement ();
                    ai.notifyAll ();
                } else {
                    try {
                        ai.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_51239028_41_58
43176198_51239028_71_88
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 2) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("B ");
                Thread.sleep (400);
                writeAbcExample.status = 3;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 3) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("C ");
                Thread.sleep (400);
                writeAbcExample.status = 1;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_51239028_41_58
43176198_51240847_23_45
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 2) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("B ");
                Thread.sleep (400);
                writeAbcExample.status = 3;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (ai) {
            int val = ai.intValue ();
            if (val >= 10) {
                ai.notifyAll ();
                break;
            } else {
                if (val % 3 == b) {
                    System.out.println (" Thread " + b + " printing value " + c);
                    ai.getAndIncrement ();
                    ai.notifyAll ();
                } else {
                    try {
                        ai.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43176198_51239028_71_88
43176198_51240847_23_45
Title: multithreading in java to print abc using 3 threads 
----------------------------------------

public void run () {
    try {
        synchronized (writeAbcExample) {
            while (true) {
                while (writeAbcExample.status != 3) {
                    try {
                        writeAbcExample.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
                System.out.println ("C ");
                Thread.sleep (400);
                writeAbcExample.status = 1;
                writeAbcExample.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (ai) {
            int val = ai.intValue ();
            if (val >= 10) {
                ai.notifyAll ();
                break;
            } else {
                if (val % 3 == b) {
                    System.out.println (" Thread " + b + " printing value " + c);
                    ai.getAndIncrement ();
                    ai.notifyAll ();
                } else {
                    try {
                        ai.wait ();
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43179552_43180155_1_26
43179552_43180644_1_24
Title: RecyclerView not refreshing after inserting item using Alertdialog 
----------------------------------------

@Override
protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_list_category);
    myDb = new MyDatabase (this);
    recyclerCategory = (RecyclerView) findViewById (R.id.recyclerCategory);
    CategoryType = CaseActivity.CategoryType;
    Log.d (GlobalConstant.KEY_CATEGORY_TYPE, "" + CategoryType);
    allCategory = new ArrayList < > ();
    adapter = new CategoryAdapter (allCategory);
    layoutManager = new LinearLayoutManager (this);
    recyclerCategory.setLayoutManager (layoutManager);
    recyclerCategory.setItemAnimator (new DefaultItemAnimator ());
    recyclerCategory.setHasFixedSize (true);
    recyclerCategory.setAdapter (adapter);
    allCategory = myDb.getCategoryByType (CategoryType);
    adapter.notifyDataSetChange ();
    if (allCategory.size () == 0) {
        Toast.makeText (this, "No Category", Toast.LENGTH_SHORT).show ();
    }
}
----------------------------------------

@Override
protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_list_category);
    myDb = new MyDatabase (this);
    recyclerCategory = (RecyclerView) findViewById (R.id.recyclerCategory);
    CategoryType = CaseActivity.CategoryType;
    Log.d (GlobalConstant.KEY_CATEGORY_TYPE, "" + CategoryType);
    allCategory = myDb.getCategoryByType (CategoryType);
    if (allCategory.size () == 0) {
        Toast.makeText (this, "No Category", Toast.LENGTH_SHORT).show ();
    }
    adapter = new CategoryAdapter (allCategory);
    recyclerCategory.setAdapter (adapter);
    layoutManager = new LinearLayoutManager (this);
    recyclerCategory.setLayoutManager (layoutManager);
    recyclerCategory.setItemAnimator (new DefaultItemAnimator ());
    recyclerCategory.setHasFixedSize (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187483_1_22
43187360_43187522_2_21
Title: How to print * in triangle? 
----------------------------------------

public static void main (String [] args) {
    int stars = 4;
    boolean lower = true;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < stars; j ++) {
            System.out.print ("*");
        }
        if (lower) {
            stars --;
            if (stars == 0) {
                stars = 2;
                lower = false;
            }
        } else {
            stars ++;
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String arg []) {
    int ck = 0, c = 2;
    while (c > 0) {
        if (ck == 0) {
            for (int i = 1, r = 5;
            i <= 5; i ++, r --) {
                for (int j = 1;
                j <= r; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
            ck ++;
        } else {
            for (int i = 2;
            i <= 5; i ++) {
                for (int j = 1;
                j <= i; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
        }
        c --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187483_1_22
43187360_43187625_1_26
Title: How to print * in triangle? 
----------------------------------------

public static void main (String [] args) {
    int stars = 4;
    boolean lower = true;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < stars; j ++) {
            System.out.print ("*");
        }
        if (lower) {
            stars --;
            if (stars == 0) {
                stars = 2;
                lower = false;
            }
        } else {
            stars ++;
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187483_1_22
43187360_43187706_1_14
Title: How to print * in triangle? 
----------------------------------------

public static void main (String [] args) {
    int stars = 4;
    boolean lower = true;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < stars; j ++) {
            System.out.print ("*");
        }
        if (lower) {
            stars --;
            if (stars == 0) {
                stars = 2;
                lower = false;
            }
        } else {
            stars ++;
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            if (i + j <= n - 4 || j == 0 || i == n - 1) System.out.print ("*");
            else if (i - j >= n - 4) System.out.print ("*");
            else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187483_1_22
43187360_43188007_1_14
Title: How to print * in triangle? 
----------------------------------------

public static void main (String [] args) {
    int stars = 4;
    boolean lower = true;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < stars; j ++) {
            System.out.print ("*");
        }
        if (lower) {
            stars --;
            if (stars == 0) {
                stars = 2;
                lower = false;
            }
        } else {
            stars ++;
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    int mid = n / 2;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 0;
        j < Math.abs (mid - i) + 1; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187522_2_21
43187360_43187625_1_26
Title: How to print * in triangle? 
----------------------------------------

public static void main (String arg []) {
    int ck = 0, c = 2;
    while (c > 0) {
        if (ck == 0) {
            for (int i = 1, r = 5;
            i <= 5; i ++, r --) {
                for (int j = 1;
                j <= r; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
            ck ++;
        } else {
            for (int i = 2;
            i <= 5; i ++) {
                for (int j = 1;
                j <= i; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
        }
        c --;
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187522_2_21
43187360_43187706_1_14
Title: How to print * in triangle? 
----------------------------------------

public static void main (String arg []) {
    int ck = 0, c = 2;
    while (c > 0) {
        if (ck == 0) {
            for (int i = 1, r = 5;
            i <= 5; i ++, r --) {
                for (int j = 1;
                j <= r; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
            ck ++;
        } else {
            for (int i = 2;
            i <= 5; i ++) {
                for (int j = 1;
                j <= i; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
        }
        c --;
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            if (i + j <= n - 4 || j == 0 || i == n - 1) System.out.print ("*");
            else if (i - j >= n - 4) System.out.print ("*");
            else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187522_2_21
43187360_43188007_1_14
Title: How to print * in triangle? 
----------------------------------------

public static void main (String arg []) {
    int ck = 0, c = 2;
    while (c > 0) {
        if (ck == 0) {
            for (int i = 1, r = 5;
            i <= 5; i ++, r --) {
                for (int j = 1;
                j <= r; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
            ck ++;
        } else {
            for (int i = 2;
            i <= 5; i ++) {
                for (int j = 1;
                j <= i; j ++) {
                    System.out.print (j);
                }
                System.out.println ();
            }
        }
        c --;
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    int mid = n / 2;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 0;
        j < Math.abs (mid - i) + 1; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187625_1_26
43187360_43187706_1_14
Title: How to print * in triangle? 
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            if (i + j <= n - 4 || j == 0 || i == n - 1) System.out.print ("*");
            else if (i - j >= n - 4) System.out.print ("*");
            else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187625_1_26
43187360_43188007_1_14
Title: How to print * in triangle? 
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    int mid = n / 2;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 0;
        j < Math.abs (mid - i) + 1; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43187360_43187706_1_14
43187360_43188007_1_14
Title: How to print * in triangle? 
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    for (int i = 0;
    i < 7; i ++) {
        for (int j = 0;
        j < 4; j ++) {
            if (i + j <= n - 4 || j == 0 || i == n - 1) System.out.print ("*");
            else if (i - j >= n - 4) System.out.print ("*");
            else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 7;
    int mid = n / 2;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 0;
        j < Math.abs (mid - i) + 1; j ++) {
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43190425_43190793_2_39
43190425_43191554_3_31
Title: Write a program to find length of longest consecutive sequence in array of integers? 
----------------------------------------

public static void main (String args []) {
    int a [] = {10, 15, 1, 2, 3, 4, 5, 11, 12};
    int ms = 0;
    int me = 0;
    int cs = 0, ce = 0;
    int max = 0, c = 0;
    for (int i = 0;
    i < a.length - 1; i ++) {
        if (a [i] - a [i + 1] == - 1) {
            if (c == 0) {
                cs = i;
                ce = i + 1;
                c = 2;
            } else {
                ce = i + 1;
                c ++;
            }
            if (c > max) {
                max = c;
                ms = cs;
                me = ce;
            }
        } else {
            cs = 0;
            ce = 0;
            c = 0;
        }
    }
    for (i = ms; i <= me; i ++) System.out.println (a [i]);

}
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    int a [] = {10, 15, 1, 2, 3, 4, 5, 11, 12};
    Arrays.sort (a);
    ArrayList < Integer > output = new ArrayList < Integer > ();
    ArrayList < Integer > temp = new ArrayList < Integer > ();
    for (int i = 1;
    i < a.length; i ++) {
        if (a [i - 1] + 1 == a [i]) {
            temp.add (a [i - 1]);
        } else {
            temp.add (a [i - 1]);
            if (temp.size () > output.size ()) {
                output = (ArrayList < Integer >) temp.clone ();
                temp.clear ();
            }
        }
    }
    if (temp.size () > output.size ()) {
        output = (ArrayList < Integer >) temp.clone ();
        System.out.println ("after clone outside for " + output.toString ());
    }
    System.out.println (output.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43190770_43190849_1_20
43190770_43190870_1_19
Title: Try-with-resources should be used 
----------------------------------------

public void archivingTheFile (String zipFile) {
    byte [] buffer = new byte [1024];
    try (FileOutputStream fos = new FileOutputStream (zipFile); ZipOutputStream zos = new ZipOutputStream (fos)) {
        for (String file : this.fileList) {
            ZipEntry ze = new ZipEntry (file);
            zos.putNextEntry (ze);
            try (FileInputStream in = new FileInputStream (SOURCE_FOLDER + File.separator + file)) {
                int len;
                while ((len = in.read (buffer)) > 0) {
                    zos.write (buffer, 0, len);
                }
            }
        }
        zos.closeEntry ();
    } catch (IOException ex) {
        LOGGER.error ("Exception occurred while zipping file", ex);
    }
}
----------------------------------------

public void archivingTheFile (String zipFile) {
    byte [] buffer = new byte [4096];
    try (FileOutputStream fos = new FileOutputStream (zipFile); ZipOutputStream zos = new ZipOutputStream (fos)) {
        for (String file : this.fileList) {
            ZipEntry ze = new ZipEntry (file);
            zos.putNextEntry (ze);
            try (FileInputStream in = new FileInputStream (SOURCE_FOLDER + File.separator + file)) {
                int len;
                while ((len = in.read (buffer)) > 0) {
                    zos.write (buffer, 0, len);
                }
            }
        }
        zos.closeEntry ();
    } catch (IOException ex) {
        LOGGER.error ("Exception occurred while zipping file", ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43190770_43190870_1_19
43190770_43190898_1_26
Title: Try-with-resources should be used 
----------------------------------------

public void archivingTheFile (String zipFile) {
    byte [] buffer = new byte [4096];
    try (FileOutputStream fos = new FileOutputStream (zipFile); ZipOutputStream zos = new ZipOutputStream (fos)) {
        for (String file : this.fileList) {
            ZipEntry ze = new ZipEntry (file);
            zos.putNextEntry (ze);
            try (FileInputStream in = new FileInputStream (SOURCE_FOLDER + File.separator + file)) {
                int len;
                while ((len = in.read (buffer)) > 0) {
                    zos.write (buffer, 0, len);
                }
            }
        }
        zos.closeEntry ();
    } catch (IOException ex) {
        LOGGER.error ("Exception occurred while zipping file", ex);
    }
}
----------------------------------------

public void archivingTheFile (String zipFile) {
    byte [] buffer = new byte [1024];
    try (FileOutputStream fos = new FileOutputStream (zipFile); ZipOutputStream zos = new ZipOutputStream (fos)) {
        for (String file : this.fileList) {
            ZipEntry ze = new ZipEntry (file);
            zos.putNextEntry (ze);
            try (FileInputStream in = new FileInputStream (SOURCE_FOLDER + File.separator + file)) {
                int len;
                while ((len = in.read (buffer)) > 0) {
                    zos.write (buffer, 0, len);
                }
            } catch (IOException ex) {
                LOGGER.error ("Exception occurred while zipping file", ex);
            }
        }
    } catch (IOException ex) {
        LOGGER.error ("Exception occurred while zipping file", ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43190770_43190870_1_19
43190770_43190978_1_19
Title: Try-with-resources should be used 
----------------------------------------

public void archivingTheFile (String zipFile) {
    byte [] buffer = new byte [4096];
    try (FileOutputStream fos = new FileOutputStream (zipFile); ZipOutputStream zos = new ZipOutputStream (fos)) {
        for (String file : this.fileList) {
            ZipEntry ze = new ZipEntry (file);
            zos.putNextEntry (ze);
            try (FileInputStream in = new FileInputStream (SOURCE_FOLDER + File.separator + file)) {
                int len;
                while ((len = in.read (buffer)) > 0) {
                    zos.write (buffer, 0, len);
                }
            }
        }
        zos.closeEntry ();
    } catch (IOException ex) {
        LOGGER.error ("Exception occurred while zipping file", ex);
    }
}
----------------------------------------

public void archivingTheFile (String zipFile) {
    byte [] buffer = new byte [1024];
    try (FileOutputStream fos = new FileOutputStream (zipFile); ZipOutputStream zos = new ZipOutputStream (fos)) {
        for (String file : this.fileList) {
            ZipEntry ze = new ZipEntry (file);
            zos.putNextEntry (ze);
            try (FileInputStream in = new FileInputStream (SOURCE_FOLDER + File.separator + file)) {
                int len;
                while ((len = in.read (buffer)) > 0) {
                    zos.write (buffer, 0, len);
                }
            }
        }
        zos.closeEntry ();
    } catch (IOException ex) {
        LOGGER.error ("Exception occurred while zipping file", ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43195858_43196161_1_30
43195858_43196213_1_19
Title: Print a trapezoid in Java 
----------------------------------------

public void printTrapezoid (Scanner sc) {
    int width;
    int rows;
    System.out.print ("Enter height: ");
    rows = sc.nextInt ();
    System.out.print ("Enter width: ");
    width = sc.nextInt ();
    System.out.println ();
    for (int i = rows - 1;
    i >= 0; -- i) {
        int blocks = width - i * 2;
        for (int j = 0;
        j < i; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < blocks; ++ j) {
            System.out.print ("@");
        }
        System.out.println ();
    }
    System.out.println ("");
}
----------------------------------------

public void printTrapezoid (Scanner sc) {
    int width;
    int rows;
    System.out.print ("Enter height: ");
    rows = sc.nextInt ();
    System.out.print ("Enter width: ");
    width = sc.nextInt ();
    System.out.println ("");
    for (int i = 1;
    i <= rows; i ++) {
        System.out.print (String.join ("", Collections.nCopies (rows - i, " ")));
        System.out.println (String.join ("", Collections.nCopies (width - 2 * (rows - i), "@")));
    }
    System.out.println ("");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43196847_43196993_7_45
43196847_43197059_9_38
Title: Finding unique numbers 
----------------------------------------

public int go () {
    HashSet < Integer > distinctNumbers = new HashSet < > ();
    int n = 0;
    counter = 10;
    int total = 0;
    while (counter != 0) {
        System.out.println ("Enter Integer: ");
        int newInteger = scan.nextInt ();
        if (newInteger < 0) {
            n += newInteger;
            counter = counter - 1;
            distinctNumbers.add (newInteger);
        } else {
            System.out.println ("Must be negative integer, please try again");
        }
    }
    int size = distinctNumbers.size ();
    System.out.println ("The sum of all ten integers is: " + n);
    System.out.println ("You inputed " + size + " numbers.");
    System.out.println ("Your numbers are:");
    for (Integer i : distinctNumbers) {
        System.out.println (i);
    }
    return n;
}
----------------------------------------

public int go () {
    int a = 0;
    int n = 0;
    counter = 10;
    Set < Integer > unValues = new HashSet < Integer > ();
    while (counter != 0) {
        System.out.println ("Enter Integer: ");
        int newInteger = scan.nextInt ();
        if (newInteger < 0) {
            unValues.add (new Integer (newInteger));
            n += newInteger;
            counter = counter - 1;
            a = a + newInteger;
        } else {
            System.out.println ("Must be negative integer, please try again");
        }
    }
    int unSum = 0;
    for (Integer value : unValues) {
        unSum += value;
    }
    System.out.println ("The sum of all ten integers is: " + a);
    System.out.println ("The sum of unique integers is: " + unSum);
    return n;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43198713_43198769_3_15
43198713_43198777_3_16
Title: Java compare array element to variable 
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    for (int B = 17;
    B < arrayA.length - 1; B ++) {
        for (int i = 0;
        i < arrayA.length; i ++) if (arrayA [i] == B) System.out.println (B);

    }
}
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    int B = 17;
    for (int i = 0;
    i < arrayA.length; i ++) {
        if (arrayA [i] != B) System.out.println (arrayA [i]);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43198713_43198769_3_15
43198713_43198790_3_19
Title: Java compare array element to variable 
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    for (int B = 17;
    B < arrayA.length - 1; B ++) {
        for (int i = 0;
        i < arrayA.length; i ++) if (arrayA [i] == B) System.out.println (B);

    }
}
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    int num = 17;
    for (int B = 0;
    B < arrayA.length; B ++) {
        if (arrayA [B] == num) {
            continue;
        }
        System.out.println (arrayA [B]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43198713_43198769_3_15
43198713_43199382_2_10
Title: Java compare array element to variable 
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    for (int B = 17;
    B < arrayA.length - 1; B ++) {
        for (int i = 0;
        i < arrayA.length; i ++) if (arrayA [i] == B) System.out.println (B);

    }
}
----------------------------------------

public static void main (String [] args) {
    int B = 17;
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    for (int i = 0;
    i < arrayA.length; i ++) if (arrayA [i] != B) {
        System.out.print (arrayA [i]);
        System.out.print (i < arrayA.length - 1 ? " " : "");
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43198713_43198777_3_16
43198713_43198790_3_19
Title: Java compare array element to variable 
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    int B = 17;
    for (int i = 0;
    i < arrayA.length; i ++) {
        if (arrayA [i] != B) System.out.println (arrayA [i]);

    }
}
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    int num = 17;
    for (int B = 0;
    B < arrayA.length; B ++) {
        if (arrayA [B] == num) {
            continue;
        }
        System.out.println (arrayA [B]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43198713_43198777_3_16
43198713_43199382_2_10
Title: Java compare array element to variable 
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    int B = 17;
    for (int i = 0;
    i < arrayA.length; i ++) {
        if (arrayA [i] != B) System.out.println (arrayA [i]);

    }
}
----------------------------------------

public static void main (String [] args) {
    int B = 17;
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    for (int i = 0;
    i < arrayA.length; i ++) if (arrayA [i] != B) {
        System.out.print (arrayA [i]);
        System.out.print (i < arrayA.length - 1 ? " " : "");
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43198713_43198790_3_19
43198713_43199382_2_10
Title: Java compare array element to variable 
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    int num = 17;
    for (int B = 0;
    B < arrayA.length; B ++) {
        if (arrayA [B] == num) {
            continue;
        }
        System.out.println (arrayA [B]);
    }
}
----------------------------------------

public static void main (String [] args) {
    int B = 17;
    int [] arrayA = {2, 4, 8, 19, 32, 17, 17, 18, 25, 17};
    for (int i = 0;
    i < arrayA.length; i ++) if (arrayA [i] != B) {
        System.out.print (arrayA [i]);
        System.out.print (i < arrayA.length - 1 ? " " : "");
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43201795_43202113_1_27
43201795_43202364_1_17
Title: Writing a program in Java to read in multiple strings from user and compare to text file 
----------------------------------------

public static void main (String [] args) throws IOException {
    String message = "";
    String name = "";
    Scanner input = new Scanner (System.in);
    Scanner scan = new Scanner (System.in);
    System.out.println ("Please enter in a message: ");
    message = scan.nextLine ();
    Scanner file = new Scanner (new File ("example.txt"));
    while (file.hasNextLine ()) {
        String line = file.nextLine ();
        for (String word : message.split (" ")) {
            if (line.contains (word)) {
                System.out.println (word + " is an English word ");
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) throws Exception {
    String message = "";
    Scanner input = new Scanner (System.in);
    System.out.println ("Please enter in a message: ");
    message = input.nextLine ();
    List < String > messageParts = Arrays.stream (message.split (" ")).collect (Collectors.toList ());
    BufferedReader reader = new BufferedReader (new FileReader ("example.txt"));
    reader.lines ().filter (line -> ! messageParts.contains (line)).forEach (System.out :: println);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43201795_43202113_1_27
43201795_43202813_1_32
Title: Writing a program in Java to read in multiple strings from user and compare to text file 
----------------------------------------

public static void main (String [] args) throws IOException {
    String message = "";
    String name = "";
    Scanner input = new Scanner (System.in);
    Scanner scan = new Scanner (System.in);
    System.out.println ("Please enter in a message: ");
    message = scan.nextLine ();
    Scanner file = new Scanner (new File ("example.txt"));
    while (file.hasNextLine ()) {
        String line = file.nextLine ();
        for (String word : message.split (" ")) {
            if (line.contains (word)) {
                System.out.println (word + " is an English word ");
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    String message = "";
    String name = "";
    Scanner input = new Scanner (System.in);
    Scanner scan = new Scanner (System.in);
    System.out.println ("Please enter in a message: ");
    message = scan.next ();
    Scanner file = new Scanner (new File ("example.txt"));
    String pattern = "";
    for (String word : input.split (" ")) {
        pattern += "(\\b" + word + "\\b)";
    }
    Pattern r = Pattern.compile (pattern);
    while (file.hasNextLine ()) {
        String line = file.nextLine ();
        Matcher m = r.matcher (line);
        if (m.matches ()) {
            System.out.println ("Word found in: " + line);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43201795_43202364_1_17
43201795_43202813_1_32
Title: Writing a program in Java to read in multiple strings from user and compare to text file 
----------------------------------------

public static void main (String [] args) throws Exception {
    String message = "";
    Scanner input = new Scanner (System.in);
    System.out.println ("Please enter in a message: ");
    message = input.nextLine ();
    List < String > messageParts = Arrays.stream (message.split (" ")).collect (Collectors.toList ());
    BufferedReader reader = new BufferedReader (new FileReader ("example.txt"));
    reader.lines ().filter (line -> ! messageParts.contains (line)).forEach (System.out :: println);
}
----------------------------------------

public static void main (String [] args) throws IOException {
    String message = "";
    String name = "";
    Scanner input = new Scanner (System.in);
    Scanner scan = new Scanner (System.in);
    System.out.println ("Please enter in a message: ");
    message = scan.next ();
    Scanner file = new Scanner (new File ("example.txt"));
    String pattern = "";
    for (String word : input.split (" ")) {
        pattern += "(\\b" + word + "\\b)";
    }
    Pattern r = Pattern.compile (pattern);
    while (file.hasNextLine ()) {
        String line = file.nextLine ();
        Matcher m = r.matcher (line);
        if (m.matches ()) {
            System.out.println ("Word found in: " + line);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43226111_43263337_11_26
43226111_43276146_7_15
Title: How to chain checks in java 
----------------------------------------

public static void validate (Object object) {
    ValidatorFactory factory = Validation.buildDefaultValidatorFactory ();
    Validator validator = factory.getValidator ();
    Set < ConstraintViolation < Object > > constraintViolations = validator.validate (object);
    if (! constraintViolations.isEmpty ()) {
        ConstraintViolation < Object > firstViolation = constraintViolations.iterator ().next ();
        throw new InvalidParameterException ("not valid " + object.getClass () + " failed property ' " + firstViolation.getPropertyPath () + " ' " + " failure message ' " + firstViolation.getMessage () + " ' ");
    }
}
----------------------------------------

public Object validate (Object target) {
    CompositeResult result = new CompositeResult (size ());
    for (Validator rule : this) {
        Result tempResult = rule.validate (value);
        if (! tempResult.isOk ()) result.put (rule, tempResult);

    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43237084_43237332_5_34
43237084_43237872_6_54
Title: how to filter an user input string and store the new filtered array 
----------------------------------------

public Song (String music) {
    notes = music;
    char [] store = new char [notes.length ()];
    for (int i = 0;
    i < notes.length (); i ++) {
        store [i] = notes.charAt (i);
    }
    char [] [] valid = {{'D', 'R', 'M', 'F', 'S', 'L', 'T'}, {'d', 'r', 'm', 'f', 's', 'l', 't'}};
    char [] clean = new char [store.length];
    int a = 0;
    for (int i = 0;
    i < store.length; i ++) {
        for (int j = 0;
        j < valid.length; j ++) {
            for (int k = 0;
            k < valid [0].length; k ++) {
                if (store [i] == valid [j] [k]) {
                    clean [a] = valid [0] [k];
                    a ++;
                }
            }
        }
    }
    notes = String.valueOf (clean);
    System.out.print (String.valueOf (clean));
}
----------------------------------------

public Song (String music) {
    notes = music;
    char [] store = new char [notes.length ()];
    int actualLetter = 0;
    for (int i = 0;
    i < notes.length (); ++ i) {
        if (Character.isLetter (notes.charAt (i))) {
            store [i] = Character.toUpperCase (notes.charAt (i));
        }
    }
    char [] valid = {'D', 'R', 'M', 'F', 'S', 'L', 'T'};
    for (int i = 0;
    i < store.length; ++ i) {
        for (int j = 0;
        j < valid.length; ++ j) if (store [i] == valid [j]) {
            actualLetter ++;
        }

    }
    char [] clean = new char [actualLetter];
    int a = 0;
    for (int i = 0;
    i < store.length; ++ i) {
        for (int j = 0;
        j < valid.length; ++ j) if (store [i] == valid [j]) {
            clean [a] = store [i];
            a ++;
        }

    }
    for (char clense : clean) {
        System.out.println (clense);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4323769_4324225_19_43
4323769_4324269_5_19
Title: How do I deal with a character array in my homework? 
----------------------------------------

public static void main (String [] args) {
    char a [] = {'G', 'O'};
    char b [] = {'G', 'O', 'O', 'G', 'L', 'E'};
    int index = 0;
    int count = 0;
    while (index < b.length) {
        while (ReplaceCharacterArray.containsCharacter (b [index], a)) {
            System.arraycopy (b, index + 1, b, 0, b.length - index - 1);
            count ++;
        }
        index ++;
    }
    for (int i = (b.length - count);
    i < b.length; i ++) {
        b [i] = '\0';
    }
    for (int i = 0;
    i < b.length; i ++) {
        System.out.println (b [i]);
    }
}
----------------------------------------

public static void main (String [] args) {
    char a [] = "GOOGLE".toCharArray ();
    char b [] = "GO".toCharArray ();
    BitSet charToRemove = new BitSet ();
    for (char c : b) charToRemove.set (c);

    StringBuilder str = new StringBuilder ();
    for (char c : a) if (! charToRemove.get (c)) str.append (c);

    b = str.toString ().toCharArray ();
    System.out.println (Arrays.toString (b));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43243776_43243953_1_12
43243776_43244262_1_10
Title: Beginner Java Code Issues 
----------------------------------------

public static void printStars (int amount) {
    int i = 1;
    while (i <= amount) {
        System.out.print ("*");
        if (i == amount) {
            System.out.println ("");
        }
        i ++;
    }
}
----------------------------------------

public static void printStars (int amount) {
    for (int i = 1;
    i <= amount; i ++) {
        for (int j = 1;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43245978_43246066_1_11
43245978_43246075_1_16
Title: How to access another class function from another class (java) 
----------------------------------------

public void showMessage (String message, Context context) {
    AlertDialog.Builder builder = new AlertDialog.Builder (context);
    builder.setMessage (message).setPositiveButton ("Ok", new DialogInterface.OnClickListener () {
        @Override
        public void onClick (DialogInterface dialogInterface, int i) {
        }}

    ).setCancelable (false).show ();
}
----------------------------------------

public void showMessage (final String message, final Context mContext) {
    runOnUiThread (new Runnable () {
        @Override
        public void run () {
            AlertDialog.Builder builder = new AlertDialog.Builder (mContext);
            builder.setMessage (message).setPositiveButton ("Ok", new DialogInterface.OnClickListener () {
                @Override
                public void onClick (DialogInterface dialogInterface, int i) {
                }}

            ).setCancelable (false).show ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43260662_43263636_1_18
43260662_43276094_14_52
Title: Java Reading big file java heap space 
----------------------------------------

public static void main (final String [] a) {
    final Set < Integer > number = new HashSet < > ();
    int v = 0;
    boolean use = false;
    int c;
    try (InputStream s = new FileInputStream ("C:\\Users\\User\\Desktop\\big50m.txt")) {
        do {
            if ((c = s.read ()) == - 1) break;

            if (c >= '0' && c <= '9') {
                v = v * 10 + c - '0';
                use = true;
                continue;
            }
            if (use) number.add (v);

            use = false;
            v = 0;
        } while (true);
        if (use) number.add (v);

    } catch (final Exception e) {
        System.out.println ("Can't read the file...");
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    heapStatistics ("program start");
    final int USED_INT_VALUES = 5000000;
    File tempFile = File.createTempFile ("testdata_big_50m", ".txt");
    System.out.println ("using file " + tempFile.getAbsolutePath ());
    tempFile.deleteOnExit ();
    Random rand = new Random ();
    FileWriter writer = new FileWriter (tempFile);
    rand.ints (USED_INT_VALUES).forEach (i -> {
        try {
            writer.write (i + " ");
        } catch (IOException ex) {
            Logger.getLogger (TestBigFiles.class.getName ()).log (Level.SEVERE, null, ex);
        }
    });
    writer.close ();
    heapStatistics ("large file generated - size=" + tempFile.length () + "Bytes");
    List < Integer > numbers = new ArrayList < > (USED_INT_VALUES);
    heapStatistics ("large array allocated (to avoid array copy)");
    int c = 0;
    try (FileReader fileReader = new FileReader (tempFile)) {
        StreamTokenizer tokenizer = new StreamTokenizer (fileReader);
        while (tokenizer.nextToken () != StreamTokenizer.TT_EOF) {
            if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {
                numbers.add ((int) tokenizer.nval);
                c ++;
            }
            if (c % 100000 == 0) {
                heapStatistics ("within loop count " + c);
            }
        }
    }
    heapStatistics ("large file parsed nummer list size is " + numbers.size ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43271001_43271548_6_31
43271001_43271882_2_26
Title: how to Add ArrayList in ArrayList 
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > mentah = new ArrayList < String > ();
    mentah.add ("Reza");
    mentah.add ("Fata");
    mentah.add ("Faldy");
    mentah.add ("Helsan");
    mentah.add ("Dimas");
    mentah.add ("Mamun");
    mentah.add ("Erik");
    mentah.add ("Babeh");
    mentah.add ("Tio");
    mentah.add ("Mamang");
    List < List < String > > result = new ArrayList < List < String > > ();
    for (int j = 0;
    j < mentah.size (); j += 3) {
        int end = mentah.size () <= j + 2 ? mentah.size () : j + 3;
        result.add (mentah.subList (j, end));
    }
    for (List < String > item : result) {
        System.out.println (" - -" + item);
    }
}
----------------------------------------

public static void main (String [] args) {
    List < String > mentah = new ArrayList < > ();
    mentah.add ("Reza");
    mentah.add ("Fata");
    mentah.add ("Faldy");
    mentah.add ("Helsan");
    mentah.add ("Dimas");
    mentah.add ("Mamun");
    mentah.add ("Erik");
    mentah.add ("Babeh");
    mentah.add ("Tio");
    mentah.add ("Mamang");
    List < List < String > > parts = new ArrayList < > ();
    int sizeOfOriginalList = mentah.size ();
    int sizeOfSubLists = 3;
    for (int i = 0;
    i < sizeOfOriginalList; i += sizeOfSubLists) {
        parts.add (new ArrayList < > (mentah.subList (i, Math.min (sizeOfOriginalList, i + sizeOfSubLists))));
    }
    if (parts.get (parts.size () - 1).size () < sizeOfSubLists) {
        parts.get (parts.size () - 2).addAll (parts.get (parts.size () - 1));
        parts.remove (parts.get (parts.size () - 1));
    }
    System.out.println (parts);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43292477_43292826_22_32
43292477_43396775_11_21
Title: Is there a solution to make a method call functions a dynamic amount of parameters by method references? 
----------------------------------------

private void log (Object pageObjectModel, Method method, String...arguments) {
    try {
        if ((Boolean) method.invoke (pageObjectModel, (Object []) arguments)) {
            System.out.println ("Success!");
        } else {
            System.out.println ("Fail!");
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void log (BooleanSupplier method) {
    try {
        if (method.getAsBoolean ()) {
            System.out.println ("Success!");
        } else {
            System.out.println ("Failed to execute!");
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43295174_43295336_1_16
43295174_43299049_1_12
Title: String from object does not equal string from the same object in an ArrayList 
----------------------------------------

public double getPriceForProduct (String ID) {
    double price = - 1.0;
    boolean flag = true;
    for (Boot b : catalogue) {
        if (b.getID ().equals (ID)) {
            price = b.getPrice ();
            flag = false;
            break;
        }
    }
    if (flag == true) {
        System.out.println ("We don't have a boot with that ID in stock.");
        System.out.println (ID + "\n\n");
    }
    return price;
}
----------------------------------------

public double getPriceForProduct (String ID) {
    for (Boot b : catalogue) {
        if (b.getID ().equals (ID)) {
            return b.getPrice ();
        }
    }
    System.out.println ("We don't have a boot with that ID in stock:\n");
    System.out.println (ID + "\n\n");
    return - 1.0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43307953_43308714_12_41
43307953_43308807_1_26
Title: Java - Defining a method that takes in a String and returns an array of integers with the number of each vowel 
----------------------------------------

private static int [] vowelCount (String input) {
    int [] vowelNum = {0, 0, 0, 0, 0};
    for (int i = 0;
    i < input.length (); i ++) {
        if (input.charAt (i) == 'A' || input.charAt (i) == 'a') {
            vowelNum [0] ++;
        }
        if (input.charAt (i) == 'E' || input.charAt (i) == 'e') {
            vowelNum [1] ++;
        }
        if (input.charAt (i) == 'I' || input.charAt (i) == 'i') {
            vowelNum [2] ++;
        }
        if (input.charAt (i) == 'O' || input.charAt (i) == 'o') {
            vowelNum [3] ++;
        }
        if (input.charAt (i) == 'U' || input.charAt (i) == 'u') {
            vowelNum [4] ++;
        }
    }
    System.out.println (Arrays.toString (vowelNum));
    return vowelNum;
}
----------------------------------------

private static VowelCounter vowelCount (String inString) {
    String stringToSearch = inString.toLowerCase ();
    VowelCounter vowelCounter = new VowelCounter ();
    for (char curCharacter : stringToSearch.toCharArray ()) {
        switch (curCharacter) {
            case 'a' :
                vowelCounter.A_Count ++;
                break;
            case 'e' :
                vowelCounter.E_Count ++;
                break;
            case 'i' :
                vowelCounter.I_Count ++;
                break;
            case 'o' :
                vowelCounter.O_Count ++;
                break;
            case 'u' :
                vowelCounter.U_Count ++;
                break;
            default :
                break;
        }
    }
    return vowelCounter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43310477_43310542_1_12
43310477_43310568_1_12
Title: Java: Defining a generic method inside an anonymous class 
----------------------------------------

public static void main (String [] arg) {
    JPanel p = (new JPanel ());
    p.add (new Object () {
        < T extends JComponent > T f (T x) {
            x.setEnabled (false);
            return x;
        }}

    .f (new JButton ("B")));
    JFrame w = new JFrame ("W");
    w.add (p);
    w.pack ();
    w.setVisible (true);
}
----------------------------------------

public static void main (String [] arg) {
    JPanel p = (new JPanel ());
    p.add (new Object () {
        < T extends AbstractButton > T f (T x) {
            x.setEnabled (false);
            return x;
        }}

    .f (new JButton ("B")));
    JFrame w = new JFrame ("W");
    w.add (p);
    w.pack ();
    w.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43311681_43311893_1_22
43311681_43311910_1_14
Title: "Char to int only using capital letters?" 
----------------------------------------

private static char [] advanceArray (char [] array, int n) {
    int length = array.length;
    for (int i = 0;
    i < length; i ++) {
        if (array [i] != ' ') {
            int ch = (int) array [i];
            if (ch > 96 && ch < 123) {
                ch = ch - 97;
                ch = ((ch + n) % 26) + 97;
            } else if (ch > 64 && ch < 91) {
                ch = ch - 65;
                ch = ((ch + n) % 26) + 65;
            }

            array [i] = (char) ch;
        }
    }
    return array;
}
----------------------------------------

private static char [] advanceArray (char [] array, int n) {
    int length = array.length;
    int aChar = 65;
    int zChar = 90;
    for (int i = 0;
    i < length; i ++) {
        if (Character.isUpperCase (array [i])) {
            char ch = array [i];
            int increment = ch + n;
            ch = (char) (increment > zChar ? aChar + (increment - zChar - 1) : increment);
            array [i] = ch;
        }
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_1_38
43323164_43347756_19_94
Title: "Java threads deadlocked?" 
----------------------------------------

public static void main (String [] args) {
    final StringBuilder sb1 = new StringBuilder ();
    final StringBuilder sb2 = new StringBuilder ();
    new Thread () {
        public void run () {
            synchronized (sb1) {
                sb1.append ("A");
                System.out.println ("Thread 1 has sync sb1");
                try {
                    Thread.sleep (700);
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                    return;
                }
                System.out.println ("Waiting for thread 1 to sync sb2");
                synchronized (sb2) {
                    sb2.append ("B");
                    System.out.println (sb1.toString ());
                    System.out.println (sb2.toString ());
                }
            }
        }}

    .start ();
    new Thread () {
        public void run () {
            try {
                Thread.sleep (500);
            } catch (InterruptedException e) {
                e.printStackTrace ();
                return;
            }
            synchronized (sb2) {
                System.out.println ("Thread 2 has sync sb2");
                sb2.append ("A");
                System.out.println ("Waiting for thread 2 to sync sb1");
                synchronized (sb1) {
                    sb1.append ("B");
                    System.out.println ("second thread: " + sb1.toString ());
                    System.out.println ("second thread: " + sb2.toString ());
                }
            }
        }}

    .start ();
}
----------------------------------------

public static void main (String [] args) {
    final StringBuilder sb1 = new StringBuilder ();
    final StringBuilder sb2 = new StringBuilder ();
    long monitorDelay = 1000L;
    long threadOneDelay = 100L;
    long threadTwoDelay = 100L;
    new Thread () {
        public void run () {
            try {
                while (true) {
                    synchronized (sb1) {
                        sb1.append ("A");
                        System.out.println ("Thread 1 has sync sb1");
                        System.out.println ("Waiting for thread 1 to sync sb2");
                        synchronized (sb2) {
                            sb2.append ("B");
                            System.out.println (sb1.toString ());
                            System.out.println (sb2.toString ());
                        }
                    }
                    Thread.sleep (threadOneDelay);
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    .start ();
    new Thread () {
        public void run () {
            try {
                while (true) {
                    synchronized (sb2) {
                        System.out.println ("Thread 2 has sync sb2");
                        sb2.append ("A");
                        System.out.println ("Waiting for thread 2 to sync sb1");
                        synchronized (sb1) {
                            sb1.append ("B");
                            System.out.println ("second thread: " + sb1.toString ());
                            System.out.println ("second thread: " + sb2.toString ());
                        }
                    }
                    Thread.sleep (threadTwoDelay);
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    .start ();
    new Thread () {
        public void run () {
            try {
                while (true) {
                    List < ThreadInfo > deadlocks = findDeadlocks ();
                    if (! deadlocks.isEmpty ()) {
                        for (ThreadInfo i : deadlocks) {
                            System.out.println ("Deadlock detected on thread " + i.getThreadId () + "\n" + i);
                        }
                        System.exit (1);
                    } else {
                        System.out.println ("No deadlock so far.");
                    }
                    Thread.sleep (monitorDelay);
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    .start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_23_36
43323164_43323322_6_19
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    try {
        Thread.sleep (500);
    } catch (InterruptedException e) {
        e.printStackTrace ();
        return;
    }
    synchronized (sb2) {
        System.out.println ("Thread 2 has sync sb2");
        sb2.append ("A");
        System.out.println ("Waiting for thread 2 to sync sb1");
        synchronized (sb1) {
            sb1.append ("B");
            System.out.println ("second thread: " + sb1.toString ());
            System.out.println ("second thread: " + sb2.toString ());
        }
    }
}
----------------------------------------

public void run () {
    synchronized (sb1) {
        sb1.append ("A");
        System.out.println ("Thread 1 has sync sb1");
        try {
            Thread.sleep (700);
        } catch (InterruptedException e) {
            e.printStackTrace ();
            return;
        }
        System.out.println ("Waiting for thread 1 to sync sb2");
        synchronized (sb2) {
            sb2.append ("B");
            System.out.println (sb1.toString ());
            System.out.println (sb2.toString ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_23_36
43323164_43347756_30_48
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    try {
        Thread.sleep (500);
    } catch (InterruptedException e) {
        e.printStackTrace ();
        return;
    }
    synchronized (sb2) {
        System.out.println ("Thread 2 has sync sb2");
        sb2.append ("A");
        System.out.println ("Waiting for thread 2 to sync sb1");
        synchronized (sb1) {
            sb1.append ("B");
            System.out.println ("second thread: " + sb1.toString ());
            System.out.println ("second thread: " + sb2.toString ());
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb1) {
                sb1.append ("A");
                System.out.println ("Thread 1 has sync sb1");
                System.out.println ("Waiting for thread 1 to sync sb2");
                synchronized (sb2) {
                    sb2.append ("B");
                    System.out.println (sb1.toString ());
                    System.out.println (sb2.toString ());
                }
            }
            Thread.sleep (threadOneDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_23_36
43323164_43347756_52_70
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    try {
        Thread.sleep (500);
    } catch (InterruptedException e) {
        e.printStackTrace ();
        return;
    }
    synchronized (sb2) {
        System.out.println ("Thread 2 has sync sb2");
        sb2.append ("A");
        System.out.println ("Waiting for thread 2 to sync sb1");
        synchronized (sb1) {
            sb1.append ("B");
            System.out.println ("second thread: " + sb1.toString ());
            System.out.println ("second thread: " + sb2.toString ());
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb2) {
                System.out.println ("Thread 2 has sync sb2");
                sb2.append ("A");
                System.out.println ("Waiting for thread 2 to sync sb1");
                synchronized (sb1) {
                    sb1.append ("B");
                    System.out.println ("second thread: " + sb1.toString ());
                    System.out.println ("second thread: " + sb2.toString ());
                }
            }
            Thread.sleep (threadTwoDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_23_36
43323164_43347756_74_92
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    try {
        Thread.sleep (500);
    } catch (InterruptedException e) {
        e.printStackTrace ();
        return;
    }
    synchronized (sb2) {
        System.out.println ("Thread 2 has sync sb2");
        sb2.append ("A");
        System.out.println ("Waiting for thread 2 to sync sb1");
        synchronized (sb1) {
            sb1.append ("B");
            System.out.println ("second thread: " + sb1.toString ());
            System.out.println ("second thread: " + sb2.toString ());
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            List < ThreadInfo > deadlocks = findDeadlocks ();
            if (! deadlocks.isEmpty ()) {
                for (ThreadInfo i : deadlocks) {
                    System.out.println ("Deadlock detected on thread " + i.getThreadId () + "\n" + i);
                }
                System.exit (1);
            } else {
                System.out.println ("No deadlock so far.");
            }
            Thread.sleep (monitorDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_6_19
43323164_43347756_30_48
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    synchronized (sb1) {
        sb1.append ("A");
        System.out.println ("Thread 1 has sync sb1");
        try {
            Thread.sleep (700);
        } catch (InterruptedException e) {
            e.printStackTrace ();
            return;
        }
        System.out.println ("Waiting for thread 1 to sync sb2");
        synchronized (sb2) {
            sb2.append ("B");
            System.out.println (sb1.toString ());
            System.out.println (sb2.toString ());
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb1) {
                sb1.append ("A");
                System.out.println ("Thread 1 has sync sb1");
                System.out.println ("Waiting for thread 1 to sync sb2");
                synchronized (sb2) {
                    sb2.append ("B");
                    System.out.println (sb1.toString ());
                    System.out.println (sb2.toString ());
                }
            }
            Thread.sleep (threadOneDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_6_19
43323164_43347756_52_70
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    synchronized (sb1) {
        sb1.append ("A");
        System.out.println ("Thread 1 has sync sb1");
        try {
            Thread.sleep (700);
        } catch (InterruptedException e) {
            e.printStackTrace ();
            return;
        }
        System.out.println ("Waiting for thread 1 to sync sb2");
        synchronized (sb2) {
            sb2.append ("B");
            System.out.println (sb1.toString ());
            System.out.println (sb2.toString ());
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb2) {
                System.out.println ("Thread 2 has sync sb2");
                sb2.append ("A");
                System.out.println ("Waiting for thread 2 to sync sb1");
                synchronized (sb1) {
                    sb1.append ("B");
                    System.out.println ("second thread: " + sb1.toString ());
                    System.out.println ("second thread: " + sb2.toString ());
                }
            }
            Thread.sleep (threadTwoDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43323322_6_19
43323164_43347756_74_92
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    synchronized (sb1) {
        sb1.append ("A");
        System.out.println ("Thread 1 has sync sb1");
        try {
            Thread.sleep (700);
        } catch (InterruptedException e) {
            e.printStackTrace ();
            return;
        }
        System.out.println ("Waiting for thread 1 to sync sb2");
        synchronized (sb2) {
            sb2.append ("B");
            System.out.println (sb1.toString ());
            System.out.println (sb2.toString ());
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            List < ThreadInfo > deadlocks = findDeadlocks ();
            if (! deadlocks.isEmpty ()) {
                for (ThreadInfo i : deadlocks) {
                    System.out.println ("Deadlock detected on thread " + i.getThreadId () + "\n" + i);
                }
                System.exit (1);
            } else {
                System.out.println ("No deadlock so far.");
            }
            Thread.sleep (monitorDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43347756_30_48
43323164_43347756_52_70
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb1) {
                sb1.append ("A");
                System.out.println ("Thread 1 has sync sb1");
                System.out.println ("Waiting for thread 1 to sync sb2");
                synchronized (sb2) {
                    sb2.append ("B");
                    System.out.println (sb1.toString ());
                    System.out.println (sb2.toString ());
                }
            }
            Thread.sleep (threadOneDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb2) {
                System.out.println ("Thread 2 has sync sb2");
                sb2.append ("A");
                System.out.println ("Waiting for thread 2 to sync sb1");
                synchronized (sb1) {
                    sb1.append ("B");
                    System.out.println ("second thread: " + sb1.toString ());
                    System.out.println ("second thread: " + sb2.toString ());
                }
            }
            Thread.sleep (threadTwoDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43347756_30_48
43323164_43347756_74_92
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb1) {
                sb1.append ("A");
                System.out.println ("Thread 1 has sync sb1");
                System.out.println ("Waiting for thread 1 to sync sb2");
                synchronized (sb2) {
                    sb2.append ("B");
                    System.out.println (sb1.toString ());
                    System.out.println (sb2.toString ());
                }
            }
            Thread.sleep (threadOneDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            List < ThreadInfo > deadlocks = findDeadlocks ();
            if (! deadlocks.isEmpty ()) {
                for (ThreadInfo i : deadlocks) {
                    System.out.println ("Deadlock detected on thread " + i.getThreadId () + "\n" + i);
                }
                System.exit (1);
            } else {
                System.out.println ("No deadlock so far.");
            }
            Thread.sleep (monitorDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43323164_43347756_52_70
43323164_43347756_74_92
Title: "Java threads deadlocked?" 
----------------------------------------

public void run () {
    try {
        while (true) {
            synchronized (sb2) {
                System.out.println ("Thread 2 has sync sb2");
                sb2.append ("A");
                System.out.println ("Waiting for thread 2 to sync sb1");
                synchronized (sb1) {
                    sb1.append ("B");
                    System.out.println ("second thread: " + sb1.toString ());
                    System.out.println ("second thread: " + sb2.toString ());
                }
            }
            Thread.sleep (threadTwoDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            List < ThreadInfo > deadlocks = findDeadlocks ();
            if (! deadlocks.isEmpty ()) {
                for (ThreadInfo i : deadlocks) {
                    System.out.println ("Deadlock detected on thread " + i.getThreadId () + "\n" + i);
                }
                System.exit (1);
            } else {
                System.out.println ("No deadlock so far.");
            }
            Thread.sleep (monitorDelay);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43325846_43348481_1_12
43325846_43372210_1_20
Title: Spigot PlayerInteractEntityEvent 
----------------------------------------

@EventHandler
public void onPlayerInteractEntity (PlayerInteractEntityEvent event) {
    Entity entity = event.getRightClicked ();
    if (entity instanceof AbstractHorse) {
        event.setCancelled (true);
        AbstractHorse horse = (AbstractHorse) entity;
        Player player = event.getPlayer ();
        player.sendMessage (horse.getName ());
    }
}
----------------------------------------

@EventHandler
public void onPlayerInteractEntity (PlayerInteractEntityEvent event) {
    Entity entity = event.getRightClicked ();
    Player player = event.getPlayer ();
    float pitch = player.getLocation ().getPitch ();
    float yaw = player.getLocation ().getYaw ();
    if (entity instanceof AbstractHorse) {
        event.setCancelled (true);
        Location loc = player.getLocation ();
        loc.setPitch (pitch);
        loc.setYaw (yaw);
        player.teleport (loc);
        AbstractHorse horse = (AbstractHorse) event.getRightClicked ();
        player.sendMessage (horse.getName ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43329436_43332047_11_45
43329436_43332047_54_73
Title: Asynchronous client/server using java jeromq 
----------------------------------------

public void run () {
    ZContext ctx = new ZContext ();
    ZMQ.Socket client = ctx.createSocket (ZMQ.DEALER);
    String identity = String.format ("%04X-%04X", rand.nextInt (), rand.nextInt ());
    client.setIdentity (identity.getBytes ());
    client.connect ("tcp://localhost:5570");
    ZPoller zPoller = new ZPoller (ctx);
    zPoller.register (client, ZMQ.Poller.POLLIN);
    int requestNbr = 0;
    while (! Thread.currentThread ().isInterrupted ()) {
        for (int centitick = 0;
        centitick < 100; centitick ++) {
            zPoller.poll (10);
            if (zPoller.isReadable (client)) {
                ZMsg msg = ZMsg.recvMsg (client);
                msg.getLast ().print (identity);
                msg.destroy ();
            }
        }
        client.send (String.format ("request #%d", ++ requestNbr), 0);
    }
    ctx.destroy ();
}
----------------------------------------

public void run () {
    ZContext ctx = new ZContext ();
    ZMQ.Socket frontend = ctx.createSocket (ZMQ.ROUTER);
    frontend.bind ("tcp://*:5570");
    ZMQ.Socket backend = ctx.createSocket (ZMQ.DEALER);
    backend.bind ("inproc://backend");
    for (int threadNbr = 0;
    threadNbr < 5; threadNbr ++) new Thread (new server_worker (ctx)).start ();

    ZMQ.proxy (frontend, backend, null);
    ctx.destroy ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43329436_43332047_11_45
43329436_43332047_86_113
Title: Asynchronous client/server using java jeromq 
----------------------------------------

public void run () {
    ZContext ctx = new ZContext ();
    ZMQ.Socket client = ctx.createSocket (ZMQ.DEALER);
    String identity = String.format ("%04X-%04X", rand.nextInt (), rand.nextInt ());
    client.setIdentity (identity.getBytes ());
    client.connect ("tcp://localhost:5570");
    ZPoller zPoller = new ZPoller (ctx);
    zPoller.register (client, ZMQ.Poller.POLLIN);
    int requestNbr = 0;
    while (! Thread.currentThread ().isInterrupted ()) {
        for (int centitick = 0;
        centitick < 100; centitick ++) {
            zPoller.poll (10);
            if (zPoller.isReadable (client)) {
                ZMsg msg = ZMsg.recvMsg (client);
                msg.getLast ().print (identity);
                msg.destroy ();
            }
        }
        client.send (String.format ("request #%d", ++ requestNbr), 0);
    }
    ctx.destroy ();
}
----------------------------------------

public void run () {
    ZMQ.Socket worker = ctx.createSocket (ZMQ.DEALER);
    worker.connect ("inproc://backend");
    while (! Thread.currentThread ().isInterrupted ()) {
        ZMsg msg = ZMsg.recvMsg (worker);
        ZFrame address = msg.pop ();
        ZFrame content = msg.pop ();
        assert (content != null);
        msg.destroy ();
        int replies = rand.nextInt (5);
        for (int reply = 0;
        reply < replies; reply ++) {
            try {
                Thread.sleep (rand.nextInt (1000) + 1);
            } catch (InterruptedException e) {
            }
            address.send (worker, ZFrame.REUSE + ZFrame.MORE);
            content.send (worker, ZFrame.REUSE);
        }
        address.destroy ();
        content.destroy ();
    }
    ctx.destroy ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43329436_43332047_54_73
43329436_43332047_86_113
Title: Asynchronous client/server using java jeromq 
----------------------------------------

public void run () {
    ZContext ctx = new ZContext ();
    ZMQ.Socket frontend = ctx.createSocket (ZMQ.ROUTER);
    frontend.bind ("tcp://*:5570");
    ZMQ.Socket backend = ctx.createSocket (ZMQ.DEALER);
    backend.bind ("inproc://backend");
    for (int threadNbr = 0;
    threadNbr < 5; threadNbr ++) new Thread (new server_worker (ctx)).start ();

    ZMQ.proxy (frontend, backend, null);
    ctx.destroy ();
}
----------------------------------------

public void run () {
    ZMQ.Socket worker = ctx.createSocket (ZMQ.DEALER);
    worker.connect ("inproc://backend");
    while (! Thread.currentThread ().isInterrupted ()) {
        ZMsg msg = ZMsg.recvMsg (worker);
        ZFrame address = msg.pop ();
        ZFrame content = msg.pop ();
        assert (content != null);
        msg.destroy ();
        int replies = rand.nextInt (5);
        for (int reply = 0;
        reply < replies; reply ++) {
            try {
                Thread.sleep (rand.nextInt (1000) + 1);
            } catch (InterruptedException e) {
            }
            address.send (worker, ZFrame.REUSE + ZFrame.MORE);
            content.send (worker, ZFrame.REUSE);
        }
        address.destroy ();
        content.destroy ();
    }
    ctx.destroy ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43337778_43337797_1_18
43337778_43338422_8_33
Title: Use switch case as conditional statement in Java 
----------------------------------------

public String grade (int mark) {
    String grade = null;
    if (mark >= 100 && mark <= 85) {
        grade = "HD";
    } else if (mark >= 75 && mark <= 84) {
        grade = "D";
    } else if (mark >= 65 && mark <= 74) {
        grade = "C";
    } else if (mark >= 50 && mark <= 64) {
        grade = "P";
    } else if (mark <= 49 && mark >= 0) {
        grade = "F";
    } else {
        grade = "Not found";
    }

    return grade;
}
----------------------------------------

public String grade (int mark) {
    String grade = null;
    if (mark >= 85 && mark <= 100) {
        grade = "HD";
    } else if (mark >= 75 && mark <= 84) {
        grade = "D";
    } else if (mark >= 65 && mark <= 74) {
        grade = "C";
    } else if (mark >= 50 && mark <= 64) {
        grade = "P";
    } else if (mark >= 0 && mark <= 49) {
        grade = "F";
    }

    return grade;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43351434_43355251_17_63
43351434_43369867_17_86
Title: Is it possible to write into excel file line by line using java and Apache POI libraries 
----------------------------------------

public static void main (String [] args) throws IOException {
    Properties properties = new Properties ();
    InputStream inputStream = new FileInputStream (System.getProperty ("user.dir") + "/PACon_InputPath.properties");
    properties.load (inputStream);
    try {
        ACF = new FileInputStream (properties.getProperty ("inputFilePath"));
        XSSFWorkbook workBk = new XSSFWorkbook (ACF);
        XSSFSheet Workable_Dump_Data = workBk.getSheet ("Workable Dump Data");
        int i = 1;
        for (i = 1; i <= 5; i ++) {
            System.out.println ("\n````````````````````````````````````````````````````````````Row - " + i);
            XSSFRow Rw = Workable_Dump_Data.getRow (i);
            XSSFCell Account_Name = Rw.getCell (3);
            String accountName = Account_Name.getStringCellValue ();
            System.out.println ("Account Name : " + accountName);
            XSSFCell Physical_address = Rw.getCell (3);
            String physicalAddress = Physical_address.getStringCellValue ();
            System.out.println ("Physical Address : " + physicalAddress);
            XSSFCell str13 = Rw.getCell (15);
            boolean flag1 = false;
            if (accountName.equals ("") || physicalAddress.equals ("")) {
                str13.setCellValue ("Empty Fields");
            } else {
                str13.setCellValue ("Fields Are Available");
            }
        }
        FileOutputStream fos = new FileOutputStream (properties.getProperty ("inputFilePath"));
        workBk.write (fos);
        fos.close ();
        ACF.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    } finally {
        System.out.println ("Successfully writen in the excel sheet");
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    Properties properties = new Properties ();
    InputStream inputStream = new FileInputStream (System.getProperty ("user.dir") + "/PACon_InputPath.properties");
    properties.load (inputStream);
    try {
        ACF = new FileInputStream (properties.getProperty ("inputFilePath"));
        XSSFWorkbook workBk = new XSSFWorkbook (ACF);
        XSSFSheet Workable_Dump_Data = workBk.getSheet ("Workable Dump Data");
        int i = 1;
        for (i = 1; i <= 10; i ++) {
            System.out.println ("\n````````````````````````````````````````````````````````````Row - " + i);
            XSSFRow Rw = Workable_Dump_Data.getRow (i);
            XSSFCell Account_Name = Rw.getCell (3);
            String accountName = Account_Name.getStringCellValue ();
            System.out.println ("Account Name : " + accountName);
            XSSFCell Physical_address = Rw.getCell (3);
            String physicalAddress = Physical_address.getStringCellValue ();
            System.out.println ("Physical Address : " + physicalAddress);
            boolean flag1 = false;
            if (accountName.equals ("") || physicalAddress.equals ("")) {
                XSSFCell str13 = Rw.getCell (15);
                str13.setCellValue ("Empty Fields");
                fos = new FileOutputStream (properties.getProperty ("inputFilePath"));
                workBk.write (fos);
                fos.close ();
                workBk = new XSSFWorkbook (new FileInputStream (properties.getProperty ("inputFilePath")));
                Workable_Dump_Data = workBk.getSheet ("Workable Dump Data");
                continue;
            } else {
                XSSFCell str13 = Rw.getCell (15);
                str13.setCellValue ("Fields Are Available" + i);
                fos = new FileOutputStream (properties.getProperty ("inputFilePath"));
                workBk.write (fos);
                fos.close ();
                workBk = new XSSFWorkbook (new FileInputStream (properties.getProperty ("inputFilePath")));
                Workable_Dump_Data = workBk.getSheet ("Workable Dump Data");
                continue;
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    } finally {
        fos.close ();
        System.out.println ("Successfully writen in the excel sheet");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43373099_43373378_1_13
43373099_43373482_1_13
Title: Using recursion to multiplying a sequence of numbers without local variables 
----------------------------------------

public static int rangeProduct (int valueOne, int valueTwo) {
    if (valueOne > valueTwo) {
        throw new IllegalArgumentException ();
    }
    if (valueOne == valueTwo) {
        return valueOne;
    }
    return valueOne * rangeProduct (valueOne + 1, valueTwo);
}
----------------------------------------

public static int rangeProduct (int valueOne, int valueTwo) {
    if (valueOne == 0 || valueTwo == 0) return 0;

    if (valueOne > valueTwo) return rangeProduct (valueTwo, valueOne);

    if (valueOne < 0 && valueTwo > 0) return 0;

    if (valueOne == valueTwo) return valueTwo;

    return valueTwo * rangeProd (valueOne, valueTwo - 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43376802_43388157_102_121
43376802_43388157_14_42
Title: javax.json serializer/deserializer for Gson 
----------------------------------------

public void write (final JsonWriter out, final JsonValue jsonBoolean) throws IllegalArgumentException, IOException {
    final ValueType valueType = jsonBoolean.getValueType ();
    switch (valueType) {
        case TRUE :
            out.value (true);
            break;
        case FALSE :
            out.value (false);
            break;
        case ARRAY :
        case OBJECT :
        case STRING :
        case NUMBER :
        case NULL :
            throw new IllegalArgumentException ("Not a boolean: " + valueType);
        default :
            throw new AssertionError (jsonBoolean.getValueType ());
    }
}
----------------------------------------

public void write (final JsonWriter out, final JsonValue jsonValue) throws IOException {
    final ValueType valueType = jsonValue.getValueType ();
    switch (valueType) {
        case ARRAY :
            JsonArrayTypeAdapter.instance.write (out, (JsonArray) jsonValue);
            break;
        case OBJECT :
            JsonObjectTypeAdapter.instance.write (out, (JsonObject) jsonValue);
            break;
        case STRING :
            JsonStringTypeAdapter.instance.write (out, (JsonString) jsonValue);
            break;
        case NUMBER :
            JsonNumberTypeAdapter.instance.write (out, (JsonNumber) jsonValue);
            break;
        case TRUE :
            JsonBooleanTypeAdapter.instance.write (out, jsonValue);
            break;
        case FALSE :
            JsonBooleanTypeAdapter.instance.write (out, jsonValue);
            break;
        case NULL :
            JsonNullTypeAdapter.instance.write (out, jsonValue);
            break;
        default :
            throw new AssertionError (valueType);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43376802_43388157_201_243
43376802_43388157_45_72
Title: javax.json serializer/deserializer for Gson 
----------------------------------------

public JsonObject read (final JsonReader in) throws IOException {
    final JsonObjectBuilder jsonObjectBuilder = Json.createObjectBuilder ();
    in.beginObject ();
    while (in.hasNext ()) {
        final String key = in.nextName ();
        final JsonToken token = in.peek ();
        switch (token) {
            case BEGIN_ARRAY :
                jsonObjectBuilder.add (key, jsonValueTypeAdapter.read (in));
                break;
            case END_ARRAY :
                throw new AssertionError ("Must never happen due to delegation to the array type adapter");
            case BEGIN_OBJECT :
                jsonObjectBuilder.add (key, jsonValueTypeAdapter.read (in));
                break;
            case END_OBJECT :
                throw new AssertionError ("Must never happen due to delegation to the object type adapter");
            case NAME :
                throw new AssertionError ("Must never happen");
            case STRING :
                jsonObjectBuilder.add (key, in.nextString ());
                break;
            case NUMBER :
                jsonObjectBuilder.add (key, in.nextDouble ());
                break;
            case BOOLEAN :
                jsonObjectBuilder.add (key, in.nextBoolean ());
                break;
            case NULL :
                in.nextNull ();
                jsonObjectBuilder.addNull (key);
                break;
            case END_DOCUMENT :
                break;
            default :
                throw new AssertionError (token);
        }
    }
    in.endObject ();
    return jsonObjectBuilder.build ();
}
----------------------------------------

public JsonValue read (final JsonReader in) throws IOException {
    final JsonToken jsonToken = in.peek ();
    switch (jsonToken) {
        case BEGIN_ARRAY :
            return JsonArrayTypeAdapter.instance.read (in);
        case END_ARRAY :
            throw new AssertionError ("Must never happen due to delegation to the array type adapter");
        case BEGIN_OBJECT :
            return JsonObjectTypeAdapter.instance.read (in);
        case END_OBJECT :
            throw new AssertionError ("Must never happen due to delegation to the object type adapter");
        case NAME :
            throw new AssertionError ("Must never happen");
        case STRING :
            return JsonStringTypeAdapter.instance.read (in);
        case NUMBER :
            return JsonNumberTypeAdapter.instance.read (in);
        case BOOLEAN :
            return JsonBooleanTypeAdapter.instance.read (in);
        case NULL :
            return JsonNullTypeAdapter.instance.read (in);
        case END_DOCUMENT :
            throw new AssertionError ("Must never happen");
        default :
            throw new AssertionError (jsonToken);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43376802_43388157_264_305
43376802_43388157_45_72
Title: javax.json serializer/deserializer for Gson 
----------------------------------------

public JsonArray read (final JsonReader in) throws IOException {
    final JsonArrayBuilder jsonArrayBuilder = Json.createArrayBuilder ();
    in.beginArray ();
    while (in.hasNext ()) {
        final JsonToken token = in.peek ();
        switch (token) {
            case BEGIN_ARRAY :
                jsonArrayBuilder.add (jsonValueTypeAdapter.read (in));
                break;
            case END_ARRAY :
                throw new AssertionError ("Must never happen due to delegation to the array type adapter");
            case BEGIN_OBJECT :
                jsonArrayBuilder.add (jsonValueTypeAdapter.read (in));
                break;
            case END_OBJECT :
                throw new AssertionError ("Must never happen due to delegation to the object type adapter");
            case NAME :
                throw new AssertionError ("Must never happen");
            case STRING :
                jsonArrayBuilder.add (in.nextString ());
                break;
            case NUMBER :
                jsonArrayBuilder.add (in.nextDouble ());
                break;
            case BOOLEAN :
                jsonArrayBuilder.add (in.nextBoolean ());
                break;
            case NULL :
                in.nextNull ();
                jsonArrayBuilder.addNull ();
                break;
            case END_DOCUMENT :
                break;
            default :
                throw new AssertionError (token);
        }
    }
    in.endArray ();
    return jsonArrayBuilder.build ();
}
----------------------------------------

public JsonValue read (final JsonReader in) throws IOException {
    final JsonToken jsonToken = in.peek ();
    switch (jsonToken) {
        case BEGIN_ARRAY :
            return JsonArrayTypeAdapter.instance.read (in);
        case END_ARRAY :
            throw new AssertionError ("Must never happen due to delegation to the array type adapter");
        case BEGIN_OBJECT :
            return JsonObjectTypeAdapter.instance.read (in);
        case END_OBJECT :
            throw new AssertionError ("Must never happen due to delegation to the object type adapter");
        case NAME :
            throw new AssertionError ("Must never happen");
        case STRING :
            return JsonStringTypeAdapter.instance.read (in);
        case NUMBER :
            return JsonNumberTypeAdapter.instance.read (in);
        case BOOLEAN :
            return JsonBooleanTypeAdapter.instance.read (in);
        case NULL :
            return JsonNullTypeAdapter.instance.read (in);
        case END_DOCUMENT :
            throw new AssertionError ("Must never happen");
        default :
            throw new AssertionError (jsonToken);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43399207_43400131_132_148
43399207_43413515_137_153
Title: JavaFX Switching BorderPane's Center: Buttons only work once 
----------------------------------------

private Node findNodeByID (String id, ObservableList < Node > observableList) {
    for (Node node : observableList) {
        if (node.getId ().equals (id)) {
            System.out.println ("node found!");
            return node;
        } else {
            System.out.println ("node not found yet!");
        }
    }
    return null;
}
----------------------------------------

private Node findNodeByID (String id, ObservableList < Node > observableList) {
    for (Node node : observableList) {
        if (node.getId ().equals (id)) {
            System.out.println ("node found!");
            return node;
        } else {
            System.out.println ("node not found yet!");
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43401347_45533047_12_33
43401347_52006268_3_15
Title: how to make StdIn.isEmpty() return true? 
----------------------------------------

public static void main (String [] args) {
    StdOut.println ("Enter the total number of objects: ");
    int N = StdIn.readInt ();
    StdOut.println ("Enter the unions between any of those objects...");
    Week1.uf = new UF (N);
    while (true) {
        int p = StdIn.readInt ();
        int q = StdIn.readInt ();
        if (! uf.connected (p, q)) {
            Week1.uf.union (p, q);
            StdOut.println (p + " " + q);
        }
        if (p == 0 && q == 0) break;

    }
    checkIfConnected ();
}
----------------------------------------

public static void main (String [] args) {
    double sum = 0.0;
    int n = 0;
    while (! StdIn.isEmpty ()) {
        double value = StdIn.readDouble ();
        sum += value;
        n ++;
    }
    double average = sum / n;
    StdOut.println ("Average is " + average);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43405279_45759994_1_26
43405279_49354541_1_21
Title: Q: Solve almostIncreasingSequence in Java (Codefights) 
----------------------------------------

boolean almostIncreasingSequence (int [] sequence) {
    int removed = 0;
    for (int i = 0;
    i < sequence.length - 2 && removed <= 2; i ++) {
        int a = sequence [i];
        int b = sequence [i + 1];
        int c = sequence [i + 2];
        if (a >= b) {
            removed ++;
            sequence [i] = b - 1;
        }
        if (b >= c) {
            removed ++;
            if (a == c) {
                sequence [i + 2] = b + 1;
            } else {
                sequence [i + 1] = a;
            }
        }
    }
    return removed <= 1;
}
----------------------------------------

boolean almostIncreasingSequence (int [] sequence) {
    int flag = 0;
    int i = 0;
    while (i < sequence.length - 1) {
        if (sequence [i] < sequence [i + 1]) {
            i = i + 1;
            continue;
        } else {
            flag = flag + 1;
            if (i > 0 && i + 2 < sequence.length && sequence [i + 1] <= sequence [i - 1] && sequence [i + 2] <= sequence [i]) {
                flag = flag + 1;
            } else {
                i = i + 1;
            }
            if (flag > 1) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43405279_45759994_1_26
43405279_52019376_1_23
Title: Q: Solve almostIncreasingSequence in Java (Codefights) 
----------------------------------------

boolean almostIncreasingSequence (int [] sequence) {
    int removed = 0;
    for (int i = 0;
    i < sequence.length - 2 && removed <= 2; i ++) {
        int a = sequence [i];
        int b = sequence [i + 1];
        int c = sequence [i + 2];
        if (a >= b) {
            removed ++;
            sequence [i] = b - 1;
        }
        if (b >= c) {
            removed ++;
            if (a == c) {
                sequence [i + 2] = b + 1;
            } else {
                sequence [i + 1] = a;
            }
        }
    }
    return removed <= 1;
}
----------------------------------------

boolean almostIncreasingSequence (int [] sequence) {
    int failed = 0;
    boolean one_chance;
    for (int i = 0;
    i < sequence.length - 1; i ++) {
        int curr = i, next = i + 1;
        if (sequence [curr] >= sequence [next]) {
            failed ++;
            if (curr > 0 && next < sequence.length - 1) {
                one_chance = false;
                if (sequence [curr - 1] < sequence [next]) one_chance = true;

                if (sequence [curr] < sequence [next + 1]) one_chance = true;

                if (one_chance == false) return false;

            }
        }
        if (failed > 1) return false;

    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43405279_49354541_1_21
43405279_52019376_1_23
Title: Q: Solve almostIncreasingSequence in Java (Codefights) 
----------------------------------------

boolean almostIncreasingSequence (int [] sequence) {
    int flag = 0;
    int i = 0;
    while (i < sequence.length - 1) {
        if (sequence [i] < sequence [i + 1]) {
            i = i + 1;
            continue;
        } else {
            flag = flag + 1;
            if (i > 0 && i + 2 < sequence.length && sequence [i + 1] <= sequence [i - 1] && sequence [i + 2] <= sequence [i]) {
                flag = flag + 1;
            } else {
                i = i + 1;
            }
            if (flag > 1) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

boolean almostIncreasingSequence (int [] sequence) {
    int failed = 0;
    boolean one_chance;
    for (int i = 0;
    i < sequence.length - 1; i ++) {
        int curr = i, next = i + 1;
        if (sequence [curr] >= sequence [next]) {
            failed ++;
            if (curr > 0 && next < sequence.length - 1) {
                one_chance = false;
                if (sequence [curr - 1] < sequence [next]) one_chance = true;

                if (sequence [curr] < sequence [next + 1]) one_chance = true;

                if (one_chance == false) return false;

            }
        }
        if (failed > 1) return false;

    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43409886_43410264_1_20
43409886_43410302_15_37
Title: How to check if date is between interval in java? 
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

private static boolean isBetween (int currentMonth, int currentDay, int monthFrom, int dayFrom, int monthUntil, int dayUntil) {
    int currentYear = 2000;
    LocalDate dateFrom = LocalDate.of (currentYear, monthFrom, dayFrom);
    LocalDate dateUntil = LocalDate.of (currentYear, monthUntil, dayUntil);
    if (dateFrom.isAfter (dateUntil)) {
        dateUntil = dateUntil.plusYears (1);
    }
    LocalDate currentDateThisYear = LocalDate.of (currentYear, currentMonth, currentDay);
    LocalDate currentDateNextYear = currentDateThisYear.plusYears (1);
    if (! (currentDateThisYear.isBefore (dateFrom) || currentDateThisYear.isAfter (dateUntil))) {
        return true;
    } else if (! (currentDateNextYear.isBefore (dateFrom) || currentDateNextYear.isAfter (dateUntil))) {
        return true;
    }

    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43409886_43410264_1_20
43409886_43425569_1_14
Title: How to check if date is between interval in java? 
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int monthFrom, int dayFrom, int monthUntil, int dayUntil) {
    final int daysInMonth = 32;
    int current = currentMonth * daysInMonth + currentDay;
    int from = monthFrom * daysInMonth + dayFrom;
    int until = monthUntil * daysInMonth + dayUntil;
    if (until < from) {
        return current >= from || current <= until;
    } else {
        return current >= from && current <= until;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43409886_43410302_15_37
43409886_43425569_1_14
Title: How to check if date is between interval in java? 
----------------------------------------

private static boolean isBetween (int currentMonth, int currentDay, int monthFrom, int dayFrom, int monthUntil, int dayUntil) {
    int currentYear = 2000;
    LocalDate dateFrom = LocalDate.of (currentYear, monthFrom, dayFrom);
    LocalDate dateUntil = LocalDate.of (currentYear, monthUntil, dayUntil);
    if (dateFrom.isAfter (dateUntil)) {
        dateUntil = dateUntil.plusYears (1);
    }
    LocalDate currentDateThisYear = LocalDate.of (currentYear, currentMonth, currentDay);
    LocalDate currentDateNextYear = currentDateThisYear.plusYears (1);
    if (! (currentDateThisYear.isBefore (dateFrom) || currentDateThisYear.isAfter (dateUntil))) {
        return true;
    } else if (! (currentDateNextYear.isBefore (dateFrom) || currentDateNextYear.isAfter (dateUntil))) {
        return true;
    }

    return false;
}
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int monthFrom, int dayFrom, int monthUntil, int dayUntil) {
    final int daysInMonth = 32;
    int current = currentMonth * daysInMonth + currentDay;
    int from = monthFrom * daysInMonth + dayFrom;
    int until = monthUntil * daysInMonth + dayUntil;
    if (until < from) {
        return current >= from || current <= until;
    } else {
        return current >= from && current <= until;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43419315_43419438_1_16
43419315_43419595_4_18
Title: How to count numbers in an array? 
----------------------------------------

public static void main (String [] args) {
    java.util.Scanner input = new java.util.Scanner (System.in);
    System.out.print ("Enter the integers between 1 and 100: ");
    int [] counts = new int [101];
    Arrays.fill (counts, 0);
    int i = 0;
    int inputValue;
    while (i < counts.length) {
        inputValue = input.nextInt ();
        counts [inputValue] ++;
        i ++;
    }
    displayCounts (counts);
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in).useDelimiter ("\\D+");
    System.out.print ("Enter the integers between 1 and 100: ");
    int [] counts = new int [101];
    for (int i = 0;
    i < counts.length; i ++) {
        int number = input.nextInt ();
        if (number == 0) break;

        if (number >= 1 && number <= 100) counts [number] ++;
        else System.out.println ("Your number is outside the boundaries");

    }
    displayCounts (counts);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43419574_43420644_28_55
43419574_43442504_1_60
Title: Implementing a custom quick sort algorithm in Java 
----------------------------------------

static SmartQuickSortPivot split4SmartQuickSort (int first, int last, int splitVal, SmartQuickSortPivot leftRightAverages) {
    int i = first, j = last;
    int sumLeft = 0;
    int sumRight = 0;
    while (i < j) {
        while (values [i] < splitVal) {
            sumLeft += values [i];
            i ++;
        }
        while (values [j] > splitVal) {
            sumRight += values [j];
            j --;
        }
        if (i < j) {
            swap (i, j);
        }
    }
    leftRightAverages.left = (i - first == 0) ? values [first] : sumLeft / (i - first);
    leftRightAverages.right = (last - j == 0) ? values [last] : sumRight / (last - j);
    SmartQuickSortPivot smartQuickSortPivot = new SmartQuickSortPivot ();
    smartQuickSortPivot.left = i;
    smartQuickSortPivot.right = j;
    return smartQuickSortPivot;
}
----------------------------------------

static SmartQuickSortPivot split4SmartQuickSort (int first, int last, int splitVal, SmartQuickSortPivot leftRightAverages) {
    int f = first;
    int l = last;
    int sumLeft = 0;
    int sumRight = 0;
    while (f < l) {
        while (values [f] < splitVal) {
            sumLeft += values [f];
            f ++;
        }
        while (values [l] > splitVal) {
            sumRight += values [l];
            l --;
        }
        if (f <= l) {
            swap (f, l);
            if (values [f] == values [l]) {
                f ++;
            }
        }
    }
    if (f - first == 0) {
        leftRightAverages.left = values [first];
    } else {
        leftRightAverages.left = sumLeft / (f - first);
    }
    if (last - l == 0) {
        leftRightAverages.right = values [last];
    } else {
        leftRightAverages.right = sumRight / (last - l);
    }
    SmartQuickSortPivot sqsp = new SmartQuickSortPivot ();
    sqsp.left = f;
    sqsp.right = l;
    return sqsp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43421544_43421688_2_27
43421544_43421877_1_13
Title: Time Complexity of nested while loops? 
----------------------------------------

public static void main (String [] args) {
    String x = "12:32 34:01 15:23 9:27 55:22 25:56";
    String [] time = x.split (" ");
    int hourTotal = 0;
    int minuteTotal = 0;
    int secondTotal = 0;
    String [] timeBreakdown;
    for (int i = 0;
    i < time.length; i ++) {
        timeBreakdown = time [i].split (":");
        minuteTotal = minuteTotal + Integer.parseInt (timeBreakdown [0]);
        secondTotal = secondTotal + Integer.parseInt (timeBreakdown [1]);
        if (secondTotal >= 60) {
            minuteTotal ++;
            secondTotal = secondTotal - 60;
        }
        if (minuteTotal >= 60) {
            hourTotal ++;
            minuteTotal = minuteTotal - 60;
        }
    }
    System.out.println (hourTotal + ":" + minuteTotal + ":" + secondTotal);
}
----------------------------------------

public static void main (String [] args) {
    String x = "12:32 34:01 15:23 9:27 55:22 25:56";
    String [] minuteSecondPairs = x.split (" ");
    int totalMinute = Arrays.stream (minuteSecondPairs).mapToInt (pair -> Integer.parseInt (pair.split (":") [0])).sum ();
    int totalSecond = Arrays.stream (minuteSecondPairs).mapToInt (pair -> Integer.parseInt (pair.split (":") [1])).sum ();
    int remainingSecond = totalSecond % 60;
    totalMinute += (totalSecond - remainingSecond) / 60;
    System.out.println ("Total hours: " + Math.floor (totalMinute / 60) + " | Total minute: " + (totalMinute % 60) + " | Total second: " + remainingSecond);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43421558_43421587_1_10
43421558_43421612_1_13
Title: Having trouble getting the rest of the numbers in an Array. Java 
----------------------------------------

public static boolean sumThree (int [] myArray) {
    if (myArray.length < 4) {
        return false;
    }
    var first = myArray [0] + myArray [1] + myArray [2];
    var rest = 0;
    for (int i = 3;
    i < myArray.length; i ++) {
        rest += myArray [i];
    }
    return first < rest;
}
----------------------------------------

public static boolean sumThree (int [] myArray) {
    int sum = 0;
    for (int i = 3;
    i < myArray.length; i ++) {
        sum += myArray [i];
    }
    int sumof3E = myArray [0] + myArray [1] + myArray [2];
    if (sum > sumof3E) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43421686_43421747_6_23
43421686_43421759_4_28
Title: Explain this loop please -Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("------ [BEFORE MANIPULATION] ------");
    System.out.println ("product: " + product);
    System.out.println ("num: " + num);
    System.out.println ("-----------------------------------");
    int remainder = num % 10;
    product *= remainder;
    num /= 10;
    System.out.println ("------ [AFTER MANIPULATION] ------");
    System.out.println ("remainder: " + remainder);
    System.out.println ("product: " + product);
    System.out.println ("num: " + num);
    System.out.println ("-----------------------------------");
}
----------------------------------------

public static void main (String [] args) {
    int num, product;
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter an Integer to be multiplied: ");
    num = scan.nextInt ();
    product = 1;
    while (num > 0) {
        product *= (num % 10);
        num /= 10;
    }
    System.out.println ("The Product of the Digits is: " + product);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424430_1_21
43424324_43424445_1_16
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length - 1;
    int oldCol = array [0].length;
    int [] [] newArray = new int [row] [col];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0, k = 0;
        j < oldCol && k < col; j ++) {
            if (j != colRemove) {
                newArray [i] [k ++] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < col; j ++) {
            if (j != colRemove) {
                newArray [i] [j > colRemove ? j - 1 : j] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424430_1_21
43424324_43424447_1_21
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length - 1;
    int oldCol = array [0].length;
    int [] [] newArray = new int [row] [col];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0, k = 0;
        j < oldCol && k < col; j ++) {
            if (j != colRemove) {
                newArray [i] [k ++] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0, currColumn = 0;
        j < col; j ++) {
            if (j != colRemove) {
                newArray [i] [currColumn ++] = array [i] [j];
            }
        }
    }
    return newEx;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424430_1_21
43424324_43424454_1_22
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length - 1;
    int oldCol = array [0].length;
    int [] [] newArray = new int [row] [col];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0, k = 0;
        j < oldCol && k < col; j ++) {
            if (j != colRemove) {
                newArray [i] [k ++] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length - 1;
    int [] [] newArray = new int [row] [col];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < col; j ++) {
            if (j >= colRemove) {
                newArray [i] [j] = array [i] [j + 1];
            } else {
                newArray [i] [j] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424430_1_21
43424324_43424486_11_33
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length - 1;
    int oldCol = array [0].length;
    int [] [] newArray = new int [row] [col];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0, k = 0;
        j < oldCol && k < col; j ++) {
            if (j != colRemove) {
                newArray [i] [k ++] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < colRemove; j ++) {
            newArray [i] [j] = array [i] [j];
        }
        for (int j = colRemove;
        j < col - 1; j ++) {
            newArray [i] [j] = array [i] [j + 1];
        }
    }
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424445_1_16
43424324_43424447_1_21
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < col; j ++) {
            if (j != colRemove) {
                newArray [i] [j > colRemove ? j - 1 : j] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0, currColumn = 0;
        j < col; j ++) {
            if (j != colRemove) {
                newArray [i] [currColumn ++] = array [i] [j];
            }
        }
    }
    return newEx;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424445_1_16
43424324_43424454_1_22
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < col; j ++) {
            if (j != colRemove) {
                newArray [i] [j > colRemove ? j - 1 : j] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length - 1;
    int [] [] newArray = new int [row] [col];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < col; j ++) {
            if (j >= colRemove) {
                newArray [i] [j] = array [i] [j + 1];
            } else {
                newArray [i] [j] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424445_1_16
43424324_43424486_11_33
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < col; j ++) {
            if (j != colRemove) {
                newArray [i] [j > colRemove ? j - 1 : j] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < colRemove; j ++) {
            newArray [i] [j] = array [i] [j];
        }
        for (int j = colRemove;
        j < col - 1; j ++) {
            newArray [i] [j] = array [i] [j + 1];
        }
    }
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43424324_43424447_1_21
43424324_43424454_1_22
Title: Removing a column in java from a 2d array 
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length;
    int [] [] newArray = new int [row] [col - 1];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0, currColumn = 0;
        j < col; j ++) {
            if (j != colRemove) {
                newArray [i] [currColumn ++] = array [i] [j];
            }
        }
    }
    return newEx;
}
----------------------------------------

private static int [] [] removeCol (int [] [] array, int colRemove) {
    int row = array.length;
    int col = array [0].length - 1;
    int [] [] newArray = new int [row] [col];
    for (int i = 0;
    i < row; i ++) {
        for (int j = 0;
        j < col; j ++) {
            if (j >= colRemove) {
                newArray [i] [j] = array [i] [j + 1];
            } else {
                newArray [i] [j] = array [i] [j];
            }
        }
    }
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43425537_43425833_7_22
43425537_43426969_1_28
Title: Got stuck on an implementation of the HashMap Collection 
----------------------------------------

public static void main (String [] args) {
    String inputString = "blabla!!123";
    Map < Character, Integer > map = new HashMap < > ();
    for (char c : inputString.toCharArray ()) {
        if (! isLetterOrDigit (c)) {
            c = '*';
        }
        map.put (c, map.getOrDefault (c, 0) + 1);
    }
    for (Character ch : map.keySet ()) {
        System.out.println (ch + "(" + map.get (ch) + ")");
    }
}
----------------------------------------

public static void main (String [] args) {
    int MYSTERY = 28;
    String inputString = "\ud83d\ude00\ud83d\ude0e\ud83d\ude0f\ud83d\ude4c\ud83d\ude40";
    Map < Integer, Integer > map = new HashMap < > ();
    for (int i = 0;
    i < inputString.length ();) {
        int cp = inputString.codePointAt (i);
        int type = Character.getType (cp);
        int c;
        if (type != Character.UPPERCASE_LETTER && type != Character.LOWERCASE_LETTER && type != Character.DECIMAL_DIGIT_NUMBER && type != MYSTERY) {
            System.out.println (type);
            c = '*';
        } else {
            c = cp;
        }
        map.put (c, map.getOrDefault (c, 0) + 1);
        i += Character.charCount (cp);
    }
    for (HashMap.Entry < Integer, Integer > curr : map.entrySet ()) {
        System.out.print (Character.toChars (curr.getKey ()));
        System.out.print ("(" + curr.getValue () + ")");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43426999_43427210_16_55
43426999_43427210_61_72
Title: sending SMS in an Android app 
----------------------------------------

public void onReceive (Context arg0, Intent arg1) {
    switch (getResultCode ()) {
        case Activity.RESULT_OK :
            ContentValues values = new ContentValues ();
            for (int i = 0;
            i < MobNumber.size () - 1; i ++) {
                values.put ("address", MobNumber.get (i).toString ());
                values.put ("body", message.toString ());
            }
            getContentResolver ().insert (Uri.parse ("content://sms/sent"), values);
            Toast.makeText (getBaseContext (), "SMS sent", Toast.LENGTH_SHORT).show ();
            doCall ();
            break;
        case SmsManager.RESULT_ERROR_GENERIC_FAILURE :
            Toast.makeText (getBaseContext (), "Generic failure", Toast.LENGTH_SHORT).show ();
            break;
        case SmsManager.RESULT_ERROR_NO_SERVICE :
            Toast.makeText (getBaseContext (), "No service", Toast.LENGTH_SHORT).show ();
            break;
        case SmsManager.RESULT_ERROR_NULL_PDU :
            Toast.makeText (getBaseContext (), "Null PDU", Toast.LENGTH_SHORT).show ();
            break;
        case SmsManager.RESULT_ERROR_RADIO_OFF :
            Toast.makeText (getBaseContext (), "Radio off", Toast.LENGTH_SHORT).show ();
            break;
    }
}
----------------------------------------

public void onReceive (Context arg0, Intent arg1) {
    switch (getResultCode ()) {
        case Activity.RESULT_OK :
            Toast.makeText (getBaseContext (), "SMS delivered", Toast.LENGTH_SHORT).show ();
            break;
        case Activity.RESULT_CANCELED :
            Toast.makeText (getBaseContext (), "SMS not delivered", Toast.LENGTH_SHORT).show ();
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43435057_43435114_15_25
43435057_43435164_1_18
Title: Java - Getting compile error incompatible types int can't be converted to [][] 
----------------------------------------

public static int [] [] makeAndFillMatrix (int n) {
    Random generator = new Random (5);
    int [] [] r = new int [n] [n];
    int rand = generator.nextInt (10);
    for (int i = 0;
    i < r.length; i ++) {
        for (int j = 0;
        j < i; j ++) {
            r [i] [j] = rand;
        }
    }
    return r;
}
----------------------------------------

public static int [] [] makeAndFillMatrix (int r) {
    int [] [] matrix = new int [r] [r];
    Random generator = new Random (5);
    int rand = generator.nextInt (10);
    for (int i = 0;
    i < r; i ++) {
        for (int j = 0;
        j < r; j ++) {
            r [i] [j] = rand;
        }
    }
    return matrix;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43435057_43435114_15_25
43435057_43435208_1_14
Title: Java - Getting compile error incompatible types int can't be converted to [][] 
----------------------------------------

public static int [] [] makeAndFillMatrix (int n) {
    Random generator = new Random (5);
    int [] [] r = new int [n] [n];
    int rand = generator.nextInt (10);
    for (int i = 0;
    i < r.length; i ++) {
        for (int j = 0;
        j < i; j ++) {
            r [i] [j] = rand;
        }
    }
    return r;
}
----------------------------------------

public static void makeAndFillMatrix (int matrixSize) {
    int [] [] r = new int [matrixSize] [matrixSize];
    Random generator = new Random (5);
    int rand = generator.nextInt (10);
    for (int i = 0;
    i < r.length; i ++) {
        for (int j = 0;
        j < r [i].length; j ++) {
            r [i] [j] = rand;
        }
    }
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43435057_43435164_1_18
43435057_43435208_1_14
Title: Java - Getting compile error incompatible types int can't be converted to [][] 
----------------------------------------

public static int [] [] makeAndFillMatrix (int r) {
    int [] [] matrix = new int [r] [r];
    Random generator = new Random (5);
    int rand = generator.nextInt (10);
    for (int i = 0;
    i < r; i ++) {
        for (int j = 0;
        j < r; j ++) {
            r [i] [j] = rand;
        }
    }
    return matrix;
}
----------------------------------------

public static void makeAndFillMatrix (int matrixSize) {
    int [] [] r = new int [matrixSize] [matrixSize];
    Random generator = new Random (5);
    int rand = generator.nextInt (10);
    for (int i = 0;
    i < r.length; i ++) {
        for (int j = 0;
        j < r [i].length; j ++) {
            r [i] [j] = rand;
        }
    }
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43436070_43436133_12_40
43436070_43436133_18_33
Title: System.currentTimeMillis() returns same timestamp 
----------------------------------------

public void run () {
    while (i ++ < 61) {
        if (! running) return;

        try {
            runOnUiThread (new Runnable () {
                @Override
                public void run () {
                    if (! fin) {
                        int len = System.currentTimeMillis () - start_sec;
                        Log.d ("current time: ", String.valueOf (System.currentTimeMillis ()));
                        Log.d ("difference is: ", String.valueOf (len));
                        if (len < 0 && len > 58) {
                            fin = true;
                        }
                        timerec.getLayoutParams ().width = metrics.widthPixels * (60 - len) / 60;
                        timerec.requestLayout ();
                    } else {
                        end_game ();
                        running = true;
                    }
                }}

            );
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    if (! fin) {
        int len = System.currentTimeMillis () - start_sec;
        Log.d ("current time: ", String.valueOf (System.currentTimeMillis ()));
        Log.d ("difference is: ", String.valueOf (len));
        if (len < 0 && len > 58) {
            fin = true;
        }
        timerec.getLayoutParams ().width = metrics.widthPixels * (60 - len) / 60;
        timerec.requestLayout ();
    } else {
        end_game ();
        running = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43440102_43440220_1_13
43440102_43440970_1_11
Title: 2D array - specify amount to new 2d array 
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    if (x > a.length) return a;

    for (double [] arr : a) if (arr.length < x) return a;

    double [] [] newArray = new double [x] [x];
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) newArray [i] [j] = a [i] [j];

    return newArray;
}
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    a = Arrays.copyOf (a, x);
    for (int i = 0;
    i < a.length; i ++) {
        if (a [i] != null) {
            a [i] = Arrays.copyOf (a [i], x);
        } else {
            a [i] = new double [x];
        }
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43445807_43446525_20_46
43445807_43447501_1_23
Title: How to double the size of a queue in java 
----------------------------------------

public void enqueue (Object newItem) {
    if (! isFull ()) {
        back = (back + 1) % QUEUE_SIZE;
        items [back] = newItem;
        count ++;
    } else {
        System.out.println ("Queue is full. Doubling the size.");
        back = QUEUE_SIZE - 1;
        QUEUE_SIZE = (QUEUE_SIZE * 2);
        Object [] temp = new Object [QUEUE_SIZE];
        int j = 0;
        for (int i = front;
        i < items.length; i ++) {
            temp [j] = items [i];
            j ++;
        }
        for (int i = 0;
        i < front; i ++) {
            temp [j] = items [i];
            j ++;
        }
        items = temp;
        front = 0;
        back = (back + 1) % QUEUE_SIZE;
        items [back] = newItem;
        count ++;
    }
}
----------------------------------------

public void enqueue (Object newItem) {
    if (! isFull ()) {
        back = (back + 1) % QUEUE_SIZE;
        items [back] = newItem;
        count ++;
        return;
    } else {
        System.out.println ("Queue is full. Doubling the size.");
        QUEUE_SIZE = (QUEUE_SIZE * 2);
        System.out.println ("New max size is: " + QUEUE_SIZE);
        Object [] temp = new Object [QUEUE_SIZE];
        System.arraycopy (items, front, temp, front, items.length - front);
        if (front != 0) {
            System.arraycopy (items, 0, temp, items.length, front);
        }
        items = temp;
        back = front + count;
        items [back] = newItem;
        count ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43458314_43458663_29_43
43458314_43458864_3_14
Title: How to get a variable of an object used as a wildcard 
----------------------------------------

public static void main (String args []) {
    Tape MyTape = new Tape ();
    MyTape.name = "hello world";
    Paper MyPaper = new Paper ();
    MyPaper.name = "hello world";
    Files < Tape > MyFiles1 = new Files < Tape > (MyTape);
    Files < Paper > MyFiles2 = new Files < Paper > (MyPaper);
    MyFiles1.compareName (MyFiles2);
}
----------------------------------------

public static void main (String [] args) {
    Paper paper = new Paper ();
    paper.setName ("name");
    Tape tape = new Tape ();
    tape.setName ("name");
    Generic < Paper > gen1 = new Generic (paper);
    Generic < Tape > gen2 = new Generic (tape);
    System.out.println (gen1.compare (gen2));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
43458314_43458663_29_43
43458314_43458868_37_51
Title: How to get a variable of an object used as a wildcard 
----------------------------------------

public static void main (String args []) {
    Tape MyTape = new Tape ();
    MyTape.name = "hello world";
    Paper MyPaper = new Paper ();
    MyPaper.name = "hello world";
    Files < Tape > MyFiles1 = new Files < Tape > (MyTape);
    Files < Paper > MyFiles2 = new Files < Paper > (MyPaper);
    MyFiles1.compareName (MyFiles2);
}
----------------------------------------

public static void main (String args []) {
    Tape MyTape = new Tape ();
    MyTape.name = "hello world";
    Paper MyPaper = new Paper ();
    MyPaper.name = "hello world";
    Files < Tape > MyFiles1 = new Files < Tape > (MyTape);
    Files < Paper > MyFiles2 = new Files < Paper > (MyPaper);
    System.out.println (MyFiles1.compareName (MyFiles2));
}
----------------------------------------

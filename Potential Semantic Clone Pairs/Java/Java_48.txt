$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23909433_23910646_23_34
23909433_23928856_17_28
Title: How to change list items of a combobox onclick of two different radio button 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        public void run () {
            try {
                Test frame = new Test ();
                frame.setVisible (true);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        public void run () {
            try {
                scrollPane frame = new scrollPane ();
                frame.setVisible (true);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23910102_23910570_1_19
23910102_23911425_23_44
Title: """Decorating"" a String in Java with position-based characters" 
----------------------------------------

public static void main (String [] args) {
    String t1 = "I saw Bob, and also Mary, John's sister.";
    int [] [] pos1 = {{6, 9}, {20, 39}, {26, 30}};
    Map < Integer, String > map = new TreeMap < > ();
    for (int i = 0;
    i < pos1.length; i ++) {
        map.put (pos1 [i] [0], "[");
        map.put (pos1 [i] [1], "]");
    }
    StringBuilder result = new StringBuilder ();
    int firstIndex = 0;
    for (int i : map.keySet ()) {
        result.append (t1.substring (firstIndex, i)).append (map.get (i));
        firstIndex = i;
    }
    result.append (t1.substring (firstIndex));
    System.out.println (result);
}
----------------------------------------

public static void main (String [] args) {
    String t1 = "I saw Bob, and also Mary, John's sister.";
    int [] [] pos1 = {{6, 9}, {20, 39}, {26, 30}, {26, 30}};
    List < Record > records = new ArrayList < > ();
    for (int i = 0;
    i < pos1.length; i ++) {
        records.add (new Record (pos1 [i] [0], "["));
        records.add (new Record (pos1 [i] [1], "]"));
    }
    Collections.sort (records);
    StringBuilder result = new StringBuilder ();
    int firstIndex = 0;
    for (Record r : records) {
        result.append (t1.substring (firstIndex, r.getIndex ())).append (r.getValue ());
        firstIndex = r.getIndex ();
    }
    result.append (t1.substring (firstIndex));
    System.out.println (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23912560_23912688_1_12
23912560_23912689_1_15
Title: Delete values of an ArrayList<String> if it contains words other than numbers 
----------------------------------------

private ArrayList < String > filters (ArrayList < String > parameter) {
    String regex = "\\d+";
    ArrayList < String > result = new ArrayList < > ();
    for (String x : parameter) {
        if (x.matches (regex)) {
            result.add (x);
        }
    }
    return result;
}
----------------------------------------

private ArrayList < String > filters (ArrayList < String > resulting) {
    String regex = "[0-9]+";
    String regex = "\\d+";
    ArrayList < String > abc = new ArrayList < String > ();
    for (int i = 0;
    i < resulting.size (); i ++) {
        if (resulting.get (i).matches (regex)) {
            abc.add (resulting.get (i));
        }
    }
    return abc;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23921731_33765078_109_120
23921731_33765078_75_97
Title: SWT NullPointerException 
----------------------------------------

public void run () {
    Display display = Display.getDefault ();
    createContents ();
    shell.open ();
    shell.layout ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        socket = new Socket ("", 9898);
        ObjectOutputStream objOut = new ObjectOutputStream (socket.getOutputStream ());
        ObjectInputStream objIn = new ObjectInputStream (socket.getInputStream ());
        objOut.writeObject ("8080");
        ArrayList < String > questions = (ArrayList < String >) objIn.readObject ();
        writeQuestions (questions);
        while (! isAnswered) Thread.sleep (2000);

        socket.close ();
    } catch (UnknownHostException e) {
        System.err.println ("There is not like this company!");
    } catch (IOException e) {
        System.err.println ("Company does not answer!");
    } catch (ClassNotFoundException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23921731_33765078_53_69
23921731_33765078_75_97
Title: SWT NullPointerException 
----------------------------------------

public void run () {
    Display display = Display.getDefault ();
    createContents ();
    if (creationCompleteAction != null) {
        creationCompleteAction.run ();
    }
    shell.open ();
    shell.layout ();
    while (! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) {
            display.sleep ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        socket = new Socket ("", 9898);
        ObjectOutputStream objOut = new ObjectOutputStream (socket.getOutputStream ());
        ObjectInputStream objIn = new ObjectInputStream (socket.getInputStream ());
        objOut.writeObject ("8080");
        ArrayList < String > questions = (ArrayList < String >) objIn.readObject ();
        writeQuestions (questions);
        while (! isAnswered) Thread.sleep (2000);

        socket.close ();
    } catch (UnknownHostException e) {
        System.err.println ("There is not like this company!");
    } catch (IOException e) {
        System.err.println ("Company does not answer!");
    } catch (ClassNotFoundException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23934428_23934489_5_24
23934428_36082889_3_14
Title: Get integer difference between string just like strcmp 
----------------------------------------

public static void main (String [] args) {
    String str1 = "tutorials", str2 = "point";
    int retval = str1.compareTo (str2);
    if (retval < 0) {
        System.out.println ("str1 is less than str2");
    } else if (retval == 0) {
        System.out.println ("str1 is equal to str2");
    } else {
        System.out.println ("str1 is greater than str2");
    }

}
----------------------------------------

public static void main (String [] args) {
    String str1 = "aa";
    String str2 = "ad";
    System.out.println ("Comparison of '" + str1 + "' and '" + str2 + "'");
    System.out.println ("Custom Method    : " + str1.compareTo (str2));
    System.out.println ("Built-in Method  : " + stringCompare (str2, str1));
    System.out.println ("\nComparison of '" + str2 + "' and '" + str1 + "'");
    System.out.println ("Custom Method    : " + str2.compareTo (str1));
    System.out.println ("Built-in Method  : " + stringCompare (str1, str2));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23937331_1_23
23936945_23938574_1_19
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public static int maxBlock (String str) {
    int maxCounter = 1;
    int counter = 1;
    if (str.length () == 0) {
        return 0;
    }
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i - 1) == str.charAt (i)) {
            counter ++;
        } else {
            if (counter > maxCounter) {
                maxCounter = counter;
            }
            counter = 1;
        }
    }
    return Math.max (maxCounter, counter);
}
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    int count = 1;
    char o = ' ';
    for (int i = 0;
    i < str.length (); i ++) {
        char c = str.charAt (i);
        if (c == o) {
            count ++;
            if (count > max) {
                max = count;
            }
        } else {
            count = 1;
            if (count > max) {
                max = count;
            }
        }
        o = c;
    }
    return max;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23937331_1_23
23936945_28104422_1_17
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public static int maxBlock (String str) {
    int maxCounter = 1;
    int counter = 1;
    if (str.length () == 0) {
        return 0;
    }
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i - 1) == str.charAt (i)) {
            counter ++;
        } else {
            if (counter > maxCounter) {
                maxCounter = counter;
            }
            counter = 1;
        }
    }
    return Math.max (maxCounter, counter);
}
----------------------------------------

public int maxBlock (String str) {
    int len = str.length ();
    int temp = (len > 0) ? 1 : 0;
    int r = 0;
    for (int i = 1;
    i < len; i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            r = (temp > r) ? temp : r;
            temp = 1;
        }
    }
    r = (temp > r) ? temp : r;
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23937331_1_23
23936945_30419437_1_20
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public static int maxBlock (String str) {
    int maxCounter = 1;
    int counter = 1;
    if (str.length () == 0) {
        return 0;
    }
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i - 1) == str.charAt (i)) {
            counter ++;
        } else {
            if (counter > maxCounter) {
                maxCounter = counter;
            }
            counter = 1;
        }
    }
    return Math.max (maxCounter, counter);
}
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        char compareChar = str.charAt (i);
        int count = 0;
        while (i + 1 < str.length () && compareChar == str.charAt (i + 1)) {
            i ++;
            count ++;
        }
        if (max < count + 1) {
            max = count + 1;
        }
    }
    return max;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23937331_1_23
23936945_41294135_1_30
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public static int maxBlock (String str) {
    int maxCounter = 1;
    int counter = 1;
    if (str.length () == 0) {
        return 0;
    }
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i - 1) == str.charAt (i)) {
            counter ++;
        } else {
            if (counter > maxCounter) {
                maxCounter = counter;
            }
            counter = 1;
        }
    }
    return Math.max (maxCounter, counter);
}
----------------------------------------

public int maxBlock (String str) {
    int counter = 0;
    int temp = 1;
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            temp = 1;
        }
        if (temp > counter) {
            counter = temp;
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23937331_1_23
23936945_42638984_1_21
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public static int maxBlock (String str) {
    int maxCounter = 1;
    int counter = 1;
    if (str.length () == 0) {
        return 0;
    }
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i - 1) == str.charAt (i)) {
            counter ++;
        } else {
            if (counter > maxCounter) {
                maxCounter = counter;
            }
            counter = 1;
        }
    }
    return Math.max (maxCounter, counter);
}
----------------------------------------

public int maxBlock (String str) {
    int maxLength = 0;
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (int i = 0;
    i < str.length (); i ++) {
        String key = str.substring (i, i + 1);
        if (i != 0 && str.charAt (i) == str.charAt (i - 1) && map.containsKey (key)) {
            map.put (key, map.get (key) + 1);
        } else {
            map.put (key, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : map.entrySet ()) {
        if (maxLength < entry.getValue ()) {
            maxLength = entry.getValue ();
        }
    }
    return maxLength;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23937331_1_23
23936945_42969112_1_23
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public static int maxBlock (String str) {
    int maxCounter = 1;
    int counter = 1;
    if (str.length () == 0) {
        return 0;
    }
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i - 1) == str.charAt (i)) {
            counter ++;
        } else {
            if (counter > maxCounter) {
                maxCounter = counter;
            }
            counter = 1;
        }
    }
    return Math.max (maxCounter, counter);
}
----------------------------------------

public int maxBlock (String str) {
    int count = 0;
    int i = 0;
    int maxcount = 0;
    if (str.length () == 0) return 0;

    while (i < str.length () - 1) {
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
            if (count > maxcount) {
                maxcount = count;
            }
        } else count = 0;

        i ++;
    }
    return maxcount + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23938574_1_19
23936945_28104422_1_17
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    int count = 1;
    char o = ' ';
    for (int i = 0;
    i < str.length (); i ++) {
        char c = str.charAt (i);
        if (c == o) {
            count ++;
            if (count > max) {
                max = count;
            }
        } else {
            count = 1;
            if (count > max) {
                max = count;
            }
        }
        o = c;
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int len = str.length ();
    int temp = (len > 0) ? 1 : 0;
    int r = 0;
    for (int i = 1;
    i < len; i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            r = (temp > r) ? temp : r;
            temp = 1;
        }
    }
    r = (temp > r) ? temp : r;
    return r;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23938574_1_19
23936945_30419437_1_20
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    int count = 1;
    char o = ' ';
    for (int i = 0;
    i < str.length (); i ++) {
        char c = str.charAt (i);
        if (c == o) {
            count ++;
            if (count > max) {
                max = count;
            }
        } else {
            count = 1;
            if (count > max) {
                max = count;
            }
        }
        o = c;
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        char compareChar = str.charAt (i);
        int count = 0;
        while (i + 1 < str.length () && compareChar == str.charAt (i + 1)) {
            i ++;
            count ++;
        }
        if (max < count + 1) {
            max = count + 1;
        }
    }
    return max;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23938574_1_19
23936945_41294135_1_30
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    int count = 1;
    char o = ' ';
    for (int i = 0;
    i < str.length (); i ++) {
        char c = str.charAt (i);
        if (c == o) {
            count ++;
            if (count > max) {
                max = count;
            }
        } else {
            count = 1;
            if (count > max) {
                max = count;
            }
        }
        o = c;
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int counter = 0;
    int temp = 1;
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            temp = 1;
        }
        if (temp > counter) {
            counter = temp;
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23938574_1_19
23936945_42638984_1_21
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    int count = 1;
    char o = ' ';
    for (int i = 0;
    i < str.length (); i ++) {
        char c = str.charAt (i);
        if (c == o) {
            count ++;
            if (count > max) {
                max = count;
            }
        } else {
            count = 1;
            if (count > max) {
                max = count;
            }
        }
        o = c;
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int maxLength = 0;
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (int i = 0;
    i < str.length (); i ++) {
        String key = str.substring (i, i + 1);
        if (i != 0 && str.charAt (i) == str.charAt (i - 1) && map.containsKey (key)) {
            map.put (key, map.get (key) + 1);
        } else {
            map.put (key, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : map.entrySet ()) {
        if (maxLength < entry.getValue ()) {
            maxLength = entry.getValue ();
        }
    }
    return maxLength;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_23938574_1_19
23936945_42969112_1_23
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    int count = 1;
    char o = ' ';
    for (int i = 0;
    i < str.length (); i ++) {
        char c = str.charAt (i);
        if (c == o) {
            count ++;
            if (count > max) {
                max = count;
            }
        } else {
            count = 1;
            if (count > max) {
                max = count;
            }
        }
        o = c;
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int count = 0;
    int i = 0;
    int maxcount = 0;
    if (str.length () == 0) return 0;

    while (i < str.length () - 1) {
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
            if (count > maxcount) {
                maxcount = count;
            }
        } else count = 0;

        i ++;
    }
    return maxcount + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_28104422_1_17
23936945_30419437_1_20
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int len = str.length ();
    int temp = (len > 0) ? 1 : 0;
    int r = 0;
    for (int i = 1;
    i < len; i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            r = (temp > r) ? temp : r;
            temp = 1;
        }
    }
    r = (temp > r) ? temp : r;
    return r;
}
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        char compareChar = str.charAt (i);
        int count = 0;
        while (i + 1 < str.length () && compareChar == str.charAt (i + 1)) {
            i ++;
            count ++;
        }
        if (max < count + 1) {
            max = count + 1;
        }
    }
    return max;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_28104422_1_17
23936945_41294135_1_30
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int len = str.length ();
    int temp = (len > 0) ? 1 : 0;
    int r = 0;
    for (int i = 1;
    i < len; i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            r = (temp > r) ? temp : r;
            temp = 1;
        }
    }
    r = (temp > r) ? temp : r;
    return r;
}
----------------------------------------

public int maxBlock (String str) {
    int counter = 0;
    int temp = 1;
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            temp = 1;
        }
        if (temp > counter) {
            counter = temp;
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_28104422_1_17
23936945_42638984_1_21
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int len = str.length ();
    int temp = (len > 0) ? 1 : 0;
    int r = 0;
    for (int i = 1;
    i < len; i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            r = (temp > r) ? temp : r;
            temp = 1;
        }
    }
    r = (temp > r) ? temp : r;
    return r;
}
----------------------------------------

public int maxBlock (String str) {
    int maxLength = 0;
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (int i = 0;
    i < str.length (); i ++) {
        String key = str.substring (i, i + 1);
        if (i != 0 && str.charAt (i) == str.charAt (i - 1) && map.containsKey (key)) {
            map.put (key, map.get (key) + 1);
        } else {
            map.put (key, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : map.entrySet ()) {
        if (maxLength < entry.getValue ()) {
            maxLength = entry.getValue ();
        }
    }
    return maxLength;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_28104422_1_17
23936945_42969112_1_23
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int len = str.length ();
    int temp = (len > 0) ? 1 : 0;
    int r = 0;
    for (int i = 1;
    i < len; i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            r = (temp > r) ? temp : r;
            temp = 1;
        }
    }
    r = (temp > r) ? temp : r;
    return r;
}
----------------------------------------

public int maxBlock (String str) {
    int count = 0;
    int i = 0;
    int maxcount = 0;
    if (str.length () == 0) return 0;

    while (i < str.length () - 1) {
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
            if (count > maxcount) {
                maxcount = count;
            }
        } else count = 0;

        i ++;
    }
    return maxcount + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_30419437_1_20
23936945_41294135_1_30
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        char compareChar = str.charAt (i);
        int count = 0;
        while (i + 1 < str.length () && compareChar == str.charAt (i + 1)) {
            i ++;
            count ++;
        }
        if (max < count + 1) {
            max = count + 1;
        }
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int counter = 0;
    int temp = 1;
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            temp = 1;
        }
        if (temp > counter) {
            counter = temp;
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_30419437_1_20
23936945_42638984_1_21
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        char compareChar = str.charAt (i);
        int count = 0;
        while (i + 1 < str.length () && compareChar == str.charAt (i + 1)) {
            i ++;
            count ++;
        }
        if (max < count + 1) {
            max = count + 1;
        }
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int maxLength = 0;
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (int i = 0;
    i < str.length (); i ++) {
        String key = str.substring (i, i + 1);
        if (i != 0 && str.charAt (i) == str.charAt (i - 1) && map.containsKey (key)) {
            map.put (key, map.get (key) + 1);
        } else {
            map.put (key, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : map.entrySet ()) {
        if (maxLength < entry.getValue ()) {
            maxLength = entry.getValue ();
        }
    }
    return maxLength;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_30419437_1_20
23936945_42969112_1_23
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int max = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        char compareChar = str.charAt (i);
        int count = 0;
        while (i + 1 < str.length () && compareChar == str.charAt (i + 1)) {
            i ++;
            count ++;
        }
        if (max < count + 1) {
            max = count + 1;
        }
    }
    return max;
}
----------------------------------------

public int maxBlock (String str) {
    int count = 0;
    int i = 0;
    int maxcount = 0;
    if (str.length () == 0) return 0;

    while (i < str.length () - 1) {
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
            if (count > maxcount) {
                maxcount = count;
            }
        } else count = 0;

        i ++;
    }
    return maxcount + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_41294135_1_30
23936945_42638984_1_21
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int counter = 0;
    int temp = 1;
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            temp = 1;
        }
        if (temp > counter) {
            counter = temp;
        }
    }
    return counter;
}
----------------------------------------

public int maxBlock (String str) {
    int maxLength = 0;
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (int i = 0;
    i < str.length (); i ++) {
        String key = str.substring (i, i + 1);
        if (i != 0 && str.charAt (i) == str.charAt (i - 1) && map.containsKey (key)) {
            map.put (key, map.get (key) + 1);
        } else {
            map.put (key, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : map.entrySet ()) {
        if (maxLength < entry.getValue ()) {
            maxLength = entry.getValue ();
        }
    }
    return maxLength;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_41294135_1_30
23936945_42969112_1_23
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int counter = 0;
    int temp = 1;
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            temp ++;
        } else {
            temp = 1;
        }
        if (temp > counter) {
            counter = temp;
        }
    }
    return counter;
}
----------------------------------------

public int maxBlock (String str) {
    int count = 0;
    int i = 0;
    int maxcount = 0;
    if (str.length () == 0) return 0;

    while (i < str.length () - 1) {
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
            if (count > maxcount) {
                maxcount = count;
            }
        } else count = 0;

        i ++;
    }
    return maxcount + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23936945_42638984_1_21
23936945_42969112_1_23
Title: Alternate Solution for maxBlock from CodingBat 
----------------------------------------

public int maxBlock (String str) {
    int maxLength = 0;
    Map < String, Integer > map = new HashMap < String, Integer > ();
    for (int i = 0;
    i < str.length (); i ++) {
        String key = str.substring (i, i + 1);
        if (i != 0 && str.charAt (i) == str.charAt (i - 1) && map.containsKey (key)) {
            map.put (key, map.get (key) + 1);
        } else {
            map.put (key, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : map.entrySet ()) {
        if (maxLength < entry.getValue ()) {
            maxLength = entry.getValue ();
        }
    }
    return maxLength;
}
----------------------------------------

public int maxBlock (String str) {
    int count = 0;
    int i = 0;
    int maxcount = 0;
    if (str.length () == 0) return 0;

    while (i < str.length () - 1) {
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
            if (count > maxcount) {
                maxcount = count;
            }
        } else count = 0;

        i ++;
    }
    return maxcount + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23940672_23940889_1_15
23940672_23941286_1_14
Title: Taking vowels from string. Java 
----------------------------------------

public static void getVowels (char aChar, String aString) {
    System.out.print ("Your string has the following vowels: ");
    String vowels = "";
    for (int i = 0;
    i < aString.length (); i ++) {
        if ((aString.charAt (i) == 'a') || (aString.charAt (i) == 'e') || (aString.charAt (i) == 'i') || (aString.charAt (i) == 'o') || (aString.charAt (i) == 'u')) {
            if (! vowels.contains (String.valueOf (aString.charAt (i)))) vowels += aString.charAt (i);

        }
    }
    for (int i = 0;
    i < vowels.length (); i ++) System.out.print (vowels.charAt (i) + " ");

}
----------------------------------------

public static void getVowels (String aString) {
    int [] arr = new int [128];
    char c;
    System.out.print ("Your string has the following vowels: ");
    for (int i = 0;
    i < aString.length (); i ++) {
        c = aString.charAt (i);
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
            if (arr [c] == 0) {
                System.out.print (aString.charAt (i) + " ");
                arr [c] ++;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23942043_24702067_11_19
23942043_35296604_49_57
Title: how to use the linear regression of MLlib of apache spark? 
----------------------------------------

public LabeledPoint call (String line) throws Exception {
    String [] parts = line.split (",");
    String [] pointsStr = parts [1].split (" ");
    double [] points = new double [pointsStr.length];
    for (int i = 0;
    i < pointsStr.length; i ++) points [i] = Double.valueOf (pointsStr [i]);

    return new LabeledPoint (Double.valueOf (parts [0]), Vectors.dense (points));
}
----------------------------------------

public DataPoint call (String line) {
    String [] tok = SPACE.split (line);
    double y = Double.parseDouble (tok [0]);
    double [] x = new double [D];
    for (int i = 0;
    i < D; i ++) {
        x [i] = Double.parseDouble (tok [i + 1]);
    }
    return new DataPoint (x, y);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23942043_24702067_11_19
23942043_35296604_79_86
Title: how to use the linear regression of MLlib of apache spark? 
----------------------------------------

public LabeledPoint call (String line) throws Exception {
    String [] parts = line.split (",");
    String [] pointsStr = parts [1].split (" ");
    double [] points = new double [pointsStr.length];
    for (int i = 0;
    i < pointsStr.length; i ++) points [i] = Double.valueOf (pointsStr [i]);

    return new LabeledPoint (Double.valueOf (parts [0]), Vectors.dense (points));
}
----------------------------------------

public double [] call (DataPoint p) {
    double [] gradient = new double [D];
    for (int i = 0;
    i < D; i ++) {
        double dot = dot (weights, p.x);
        gradient [i] = (1 / (1 + Math.exp (- p.y * dot)) - 1) * p.y * p.x [i];
    }
    return gradient;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23942043_35296604_49_57
23942043_35296604_79_86
Title: how to use the linear regression of MLlib of apache spark? 
----------------------------------------

public DataPoint call (String line) {
    String [] tok = SPACE.split (line);
    double y = Double.parseDouble (tok [0]);
    double [] x = new double [D];
    for (int i = 0;
    i < D; i ++) {
        x [i] = Double.parseDouble (tok [i + 1]);
    }
    return new DataPoint (x, y);
}
----------------------------------------

public double [] call (DataPoint p) {
    double [] gradient = new double [D];
    for (int i = 0;
    i < D; i ++) {
        double dot = dot (weights, p.x);
        gradient [i] = (1 / (1 + Math.exp (- p.y * dot)) - 1) * p.y * p.x [i];
    }
    return gradient;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23946397_23946631_1_18
23946397_33153723_1_22
Title: Finding the Mode of Integers in an Array 
----------------------------------------

public static int mode (int [] input) {
    int [] count = new int [101];
    for (int i = 0;
    i < input.length; i ++) {
        count [input [i]] ++;
    }
    int index = count.length - 1;
    for (int i = count.length - 2;
    i >= 0; i --) {
        if (count [i] >= count [index]) index = i;

    }
    return index;
}
----------------------------------------

public static int mode (int [] input) {
    int returnVal = input [0];
    int repeatCount = 0;
    int prevRepCnt = 0;
    for (int i = 0;
    i < input.length; i ++) {
        for (int j = i;
        j < input.length; j ++) {
            if (i != j && input [i] == input [j]) {
                repeatCount ++;
                if (repeatCount >= prevRepCnt) {
                    returnVal = input [i];
                }
                prevRepCnt = repeatCount;
            }
            repeatCount = 0;
        }
    }
    return returnVal;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23950244_23952001_1_14
23950244_23952015_1_18
Title: How to get annotated method parameter and his annotation 
----------------------------------------

@Before ("execution(* com.foo.bar.*.doStuff(..)) && args(arg1, arg2)")
public void logSomething (JoinPoint jp, CustomObject arg1, Object arg2) throws Throwable {
    MethodSignature methodSignature = (MethodSignature) jp.getSignature ();
    Class < ? > clazz = methodSignature.getDeclaringType ();
    Method method = clazz.getDeclaredMethod (methodSignature.getName (), methodSignature.getParameterTypes ());
    SomeAnnotation argumentAnnotation;
    for (Annotation ann : method.getParameterAnnotations () [0]) {
        if (SomeAnnotation.class.isInstance (ann)) {
            argumentAnnotation = (SomeAnnotation) ann;
            System.out.println (argumentAnnotation.value ());
        }
    }
}
----------------------------------------

@Before ("execution(public * *(..))")
public void preprocessAnnotations (JoinPoint joinPoint) throws Throwable {
    MethodSignature methodSig = (MethodSignature) joinPoint.getSignature ();
    Annotation [] [] annotations = methodSig.getMethod ().getParameterAnnotations ();
    if (annotations != null) {
        for (Annotation [] annotArr : annotations) {
            for (Annotation annot : annotArr) {
                if (annot instanceof Resource) {
                    String nameOfResource = ((Resource) annot).name ();
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23959948_23961515_47_61
23959948_23961515_67_78
Title: looking for java concurrency model suggestion 
----------------------------------------

public void run () {
    int submitCount = 0;
    while (submitCount < 10) {
        if (! updating) {
            futureList.add (pool.submit (callable));
            submitCount ++;
        }
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    int updateCount = 0;
    while (updateCount < 5) {
        doUpdate ();
        updateCount ++;
        try {
            Thread.sleep (2000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23965651_23965712_34_53
23965651_23965712_9_28
Title: Multithreading - how to get all threads ticking at the same time 
----------------------------------------

public void run () {
    try {
        while (Example.this.counter1 > 0) {
            synchronized (Example.this) {
                Example.this.counter2 --;
                Example.this.notifyAll ();
                Example.this.wait ();
            }
        }
    } catch (final InterruptedException e) {
    }
}
----------------------------------------

public void run () {
    try {
        while (Example.this.counter2 > 0) {
            synchronized (Example.this) {
                Example.this.counter1 --;
                Example.this.notifyAll ();
                Example.this.wait ();
            }
        }
    } catch (final InterruptedException e) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23966290_23966309_87_99
23966290_23966572_1_17
Title: Java paint not drawing in Swing 
----------------------------------------

protected void paintComponent (Graphics g) {
    super.paintComponent (g);
    Graphics2D g2d = (Graphics2D) g.create ();
    g2d.setColor (Color.BLACK);
    for (Point [] p : lines) {
        g2d.drawLine (p [0].x, p [0].y, p [1].x, p [1].y);
    }
    if (startPoint != null && endPoint != null) {
        g2d.setColor (Color.RED);
        g2d.drawLine (startPoint.x, startPoint.y, endPoint.x, endPoint.y);
    }
    g2d.dispose ();
}
----------------------------------------

public void paintComponent (Graphics g) {
    super.paintComponent (g);
    Graphics2D g2 = (Graphics2D) g;
    g2.setColor (c);
    g2.setStroke (new BasicStroke (5));
    g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    for (int i = 0;
    i < points.size (); i += 2) {
        g2.drawLine (points.get (i).x, points.get (i).y, points.get (i + 1).x, points.get (i + 1).y);
    }
    if (start != null && end != null) {
        g2.drawLine (start.x, start.y, end.x, end.y);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23973921_23973976_4_13
23973921_23973983_2_12
Title: Trying to make a simple loop work 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int num;
    System.out.println (" Enter 2 digit number");
    num = input.nextInt ();
    while (num < 10 || num > 99) {
        System.out.println ("Enter 2 digit number");
        num = input.nextInt ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int num;
    System.out.println (" Enter 2 digit number");
    num = input.nextInt ();
    while (num < 10 || num > 99) {
        System.out.println ("Enter 2 digit number");
        num = input.nextInt ();
    }
    input.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_23976890_1_14
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_26624593_9_31
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_27487123_1_13
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_30424267_1_17
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_39058328_1_23
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_40799504_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_41336100_1_32
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976888_1_24
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length == 1 && nums [0] == 2) return false;

    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (i == 0) {
                if (nums [i + 1] != 2) return false;

            } else if (i == (nums.length - 1)) {
                if (nums [i - 1] != 2) return false;

            } else {
                if (nums [i + 1] != 2 && nums [i - 1] != 2) return false;

            }

        }
    }
    return true;
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_26624593_9_31
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_27487123_1_13
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_30424267_1_17
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_39058328_1_23
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_40799504_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_41336100_1_32
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_23976890_1_14
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 2) continue;

        if (i >= 1 && nums [i - 1] == 2) continue;

        if (i < (nums.length - 1) && nums [i + 1] == 2) continue;

        return false;
    }
    return true;
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_26624593_9_31
23976804_27487123_1_13
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_26624593_9_31
23976804_30424267_1_17
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_26624593_9_31
23976804_39058328_1_23
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_26624593_9_31
23976804_40799504_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_26624593_9_31
23976804_41336100_1_32
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_26624593_9_31
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_26624593_9_31
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean twoTwo = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (2 == nums [i]) {
            if (i > 0 && 2 == nums [i - 1] || nums.length > i + 1 && 2 == nums [i + 1]) {
                twoTwo = true;
                i ++;
            } else {
                twoTwo = false;
                break;
            }
        }
    }
    return twoTwo;
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_27487123_1_13
23976804_30424267_1_17
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_27487123_1_13
23976804_39058328_1_23
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_27487123_1_13
23976804_40799504_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_27487123_1_13
23976804_41336100_1_32
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_27487123_1_13
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_27487123_1_13
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    int position = - 2;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            result = position == i - 1;
            position = i;
        }
    }
    return result;
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_30424267_1_17
23976804_39058328_1_23
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_30424267_1_17
23976804_40799504_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_30424267_1_17
23976804_41336100_1_32
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_30424267_1_17
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_30424267_1_17
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    for (int i = 0;
    i < nums.length; i ++) {
        int count = 0;
        if (nums [i] == 2) {
            while (i + 1 < nums.length && nums [i + 1] == 2) {
                count ++;
                i ++;
            }
            if (count == 0) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_39058328_1_23
23976804_40799504_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_39058328_1_23
23976804_41336100_1_32
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_39058328_1_23
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_39058328_1_23
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    float two = 0;
    double count = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (i < nums.length - 2 && nums [i] == 2 && nums [i + 1] == 2 && nums [i + 2] == 2) {
            return true;
        }
        if (i < nums.length - 1 && nums [i] == 2 && nums [i + 1] == 2) {
            count ++;
        }
        if (nums [i] == 2) {
            two ++;
        }
    }
    return ((count * 2) == two);
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_40799504_1_19
23976804_41336100_1_32
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_40799504_1_19
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_40799504_1_19
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    boolean two = false;
    boolean result = true;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 2) {
            if (two) {
                result = true;
            } else {
                result = false;
            }
            two = true;
        } else {
            two = false;
        }
    }
    return result;
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_41336100_1_32
23976804_41973347_1_16
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_41336100_1_32
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    if (nums.length >= 2) {
        if (nums [nums.length - 1] == 2 && nums [nums.length - 2] != 2) {
            return false;
        }
        if (nums.length >= 3) {
            for (int i = 1;
            i < nums.length - 1; i ++) {
                if ((nums [i] == 2) && (nums [i - 1] != 2 && nums [i + 1] != 2)) {
                    return false;
                }
            }
        }
        return true;
    } else {
        return ((nums.length == 0) || ! (nums [0] == 2));
    }
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976804_41973347_1_16
23976804_43307923_1_19
Title: Solution of twoTwo riddle on codingBat in Java 
----------------------------------------

public boolean twoTwo (int [] nums) {
    int len = nums.length;
    Boolean check = false;
    int count = 0;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] == 2) {
            count ++;
            if ((i < len - 1 && nums [i + 1] == 2) || (i > 0 && nums [i - 1] == 2)) check = true;
            else check = false;

        }
    }
    if (count == 0) check = true;

    return check;
}
----------------------------------------

static boolean twoTwo (int [] nums) {
    int len = nums.length;
    boolean result = true;
    boolean found = false;
    for (int i = 0;
    i < len; i ++) {
        if (nums [i] != 2) {
            found = false;
            continue;
        }
        if (nums [i] == 2 && found) result = true;

        if (nums [i] == 2 && ! found) {
            found = true;
            result = false;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23976995_23977037_1_13
23976995_23977125_1_17
Title: How to print out an X using nested loops 
----------------------------------------

public static void printCross (int size, char display) {
    for (int row = 0;
    row < size; row ++) {
        for (int col = 0;
        col < size; col ++) {
            if (row == col || row + col == size - 1) {
                System.out.print (display);
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void printCross (int size, char display) {
    if (size <= 0) {
        return;
    }
    for (int row = 0;
    row < size; row ++) {
        for (int col = 0;
        col < size; col ++) {
            if (col == row || col == size - row - 1) {
                System.out.print (display);
            } else {
                System.out.print (" ");
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_23979436_1_16
23979274_23979438_1_11
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int [] result = new int [0];
    int j = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            result = new int [nums.length - i - 1];
            j = 0;
        } else if (result.length > 0) result [j ++] = nums [i];

    }
    return result;
}
----------------------------------------

public int [] post4 (int [] nums) {
    int lastFourIndex = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            lastFourIndex = i;
        }
    }
    return Arrays.copyOfRange (nums, lastFourIndex + 1, nums.length);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_23979436_1_16
23979274_30733724_1_19
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int [] result = new int [0];
    int j = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            result = new int [nums.length - i - 1];
            j = 0;
        } else if (result.length > 0) result [j ++] = nums [i];

    }
    return result;
}
----------------------------------------

public int [] post4 (int [] nums) {
    int count = 0;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] == 4) {
            count = i;
            break;
        }
    }
    int [] result = new int [nums.length - (count + 1)];
    for (int i = count + 1, j = 0;
    i < nums.length; i ++, j ++) {
        result [j] = nums [i];
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_23979436_1_16
23979274_39068320_1_22
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int [] result = new int [0];
    int j = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            result = new int [nums.length - i - 1];
            j = 0;
        } else if (result.length > 0) result [j ++] = nums [i];

    }
    return result;
}
----------------------------------------

public int [] post4 (int [] nums) {
    int i = 0;
    int a = 0;
    for (i = 0; i < nums.length; i ++) {
        if (nums [i] == 4) {
            a = i;
        }
    }
    int ab [] = new int [nums.length - a - 1];
    for (int k = 0;
    k < nums.length - a - 1; k ++) {
        ab [k] = nums [a + k + 1];
    }
    return ab;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_23979436_1_16
23979274_46037549_1_17
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int [] result = new int [0];
    int j = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            result = new int [nums.length - i - 1];
            j = 0;
        } else if (result.length > 0) result [j ++] = nums [i];

    }
    return result;
}
----------------------------------------

public int [] post4 (int [] nums) {
    int count = nums.length;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] != 4) count --;

        if (nums [i] == 4) {
            int [] res = Arrays.copyOfRange (nums, count, nums.length);
            return res;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_23979438_1_11
23979274_30733724_1_19
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int lastFourIndex = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            lastFourIndex = i;
        }
    }
    return Arrays.copyOfRange (nums, lastFourIndex + 1, nums.length);
}
----------------------------------------

public int [] post4 (int [] nums) {
    int count = 0;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] == 4) {
            count = i;
            break;
        }
    }
    int [] result = new int [nums.length - (count + 1)];
    for (int i = count + 1, j = 0;
    i < nums.length; i ++, j ++) {
        result [j] = nums [i];
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_23979438_1_11
23979274_39068320_1_22
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int lastFourIndex = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            lastFourIndex = i;
        }
    }
    return Arrays.copyOfRange (nums, lastFourIndex + 1, nums.length);
}
----------------------------------------

public int [] post4 (int [] nums) {
    int i = 0;
    int a = 0;
    for (i = 0; i < nums.length; i ++) {
        if (nums [i] == 4) {
            a = i;
        }
    }
    int ab [] = new int [nums.length - a - 1];
    for (int k = 0;
    k < nums.length - a - 1; k ++) {
        ab [k] = nums [a + k + 1];
    }
    return ab;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_23979438_1_11
23979274_46037549_1_17
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int lastFourIndex = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 4) {
            lastFourIndex = i;
        }
    }
    return Arrays.copyOfRange (nums, lastFourIndex + 1, nums.length);
}
----------------------------------------

public int [] post4 (int [] nums) {
    int count = nums.length;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] != 4) count --;

        if (nums [i] == 4) {
            int [] res = Arrays.copyOfRange (nums, count, nums.length);
            return res;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_30733724_1_19
23979274_39068320_1_22
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int count = 0;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] == 4) {
            count = i;
            break;
        }
    }
    int [] result = new int [nums.length - (count + 1)];
    for (int i = count + 1, j = 0;
    i < nums.length; i ++, j ++) {
        result [j] = nums [i];
    }
    return result;
}
----------------------------------------

public int [] post4 (int [] nums) {
    int i = 0;
    int a = 0;
    for (i = 0; i < nums.length; i ++) {
        if (nums [i] == 4) {
            a = i;
        }
    }
    int ab [] = new int [nums.length - a - 1];
    for (int k = 0;
    k < nums.length - a - 1; k ++) {
        ab [k] = nums [a + k + 1];
    }
    return ab;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_30733724_1_19
23979274_46037549_1_17
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int count = 0;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] == 4) {
            count = i;
            break;
        }
    }
    int [] result = new int [nums.length - (count + 1)];
    for (int i = count + 1, j = 0;
    i < nums.length; i ++, j ++) {
        result [j] = nums [i];
    }
    return result;
}
----------------------------------------

public int [] post4 (int [] nums) {
    int count = nums.length;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] != 4) count --;

        if (nums [i] == 4) {
            int [] res = Arrays.copyOfRange (nums, count, nums.length);
            return res;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23979274_39068320_1_22
23979274_46037549_1_17
Title: Solving codingBat Post4 with one loop in Java 
----------------------------------------

public int [] post4 (int [] nums) {
    int i = 0;
    int a = 0;
    for (i = 0; i < nums.length; i ++) {
        if (nums [i] == 4) {
            a = i;
        }
    }
    int ab [] = new int [nums.length - a - 1];
    for (int k = 0;
    k < nums.length - a - 1; k ++) {
        ab [k] = nums [a + k + 1];
    }
    return ab;
}
----------------------------------------

public int [] post4 (int [] nums) {
    int count = nums.length;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        if (nums [i] != 4) count --;

        if (nums [i] == 4) {
            int [] res = Arrays.copyOfRange (nums, count, nums.length);
            return res;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23984590_23984666_1_14
23984590_32292648_10_22
Title: Minimum gap between adjacent elements in an array 
----------------------------------------

public static void minGap (int [] list) {
    int gap = Math.abs (list [1] - list [0]);
    for (int i = 2;
    i < list.length; i ++) {
        int absDiff = Math.abs (list [i] - list [i - 1]);
        if (gap > absDiff) {
            gap = absDiff;
        }
    }
    System.out.println ("The minimum gap between 2 adjacent values is " + gap + " ");
}
----------------------------------------

public static int minGap (int [] list) {
    if (list.length < 2) {
        return 0;
    }
    int min = list [1] - list [0];
    for (int i = 0;
    i < list.length - 1; i ++) {
        if (min > list [i + 1] - list [i]) {
            min = list [i + 1] - list [i];
        }
    }
    return min;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2401605_2401639_1_13
2401605_2407003_1_19
Title: Returning values from Swing using invokeAndWait 
----------------------------------------

public JPanel threadSafeAddPanel () {
    final JPanel jPanel = new JPanel ();
    try {
        EventQueue.invokeAndWait (new Runnable () {
            public void run () {
                add (jPanel);
            }}

        );
    } catch (InterruptedException ex) {
    } catch (InvocationTargetException ex) {
    }
    return jPanel;
}
----------------------------------------

public JPanel threadSafeAddPanel () throws InterruptedException, InvocationTargetException {
    if (EventQueue.isDispatchThread ()) {
        JPanel panel = new JPanel ();
        add (panel);
        return panel;
    } else {
        final JPanel [] jPanel = new JPanel [1];
        EventQueue.invokeAndWait (new Runnable () {
            public void run () {
                jPanel [0] = new JPanel ();
                add (jPanel [0]);
            }}

        );
        return jPanel [0];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
24017126_24017325_1_21
24017126_24017508_1_36
Title: New Java developer - Simple Q 
----------------------------------------

public static void main (String [] args) {
    Scanner key;
    String moves;
    int count = 0;
    String pass = "hey";
    while (true) {
        System.out.println ("Enter password: ");
        key = new Scanner (System.in);
        moves = key.nextLine ();
        if (moves.compareTo (pass) == 0) {
            count ++;
            System.out.println ("You're one step closer to a free coffe! You have so far bought " + count + " coffe(s)");
        }
        if (count % 10 == 0 && count != 0) {
            System.out.println ("You've got a free coffe!");
        }
        if (moves.compareTo (pass) != 0) {
            System.out.println ("Wrong password! Try again.\n");
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int count = 0;
    String pass = "hey";
    System.out.println ("Enter password: ");
    Scanner key = new Scanner (System.in);
    String moves = key.nextLine ();
    boolean flag = true;
    while (flag) {
        if (moves.compareTo (pass) == 0) {
            count ++;
            System.out.println ("You're one step closer to a free coffe! You have so far bought " + count + " coffe(s)");
        }
        if (count == 10 && count != 0) {
            System.out.println ("You've got a free coffe!");
            count = 0;
        }
        if (moves.compareTo (pass) != 0) {
            System.out.println ("Wrong password! Try again.\n");
        }
        System.out.println ("Do you want to continue ..(y/n)");
        String choice = key.nextLine ();
        if (choice.equals ("n")) {
            flag = false;
        } else {
            flag = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
24020851_24020896_1_30
24020851_24021635_1_21
Title: Why isn't my array filled correctly? 
----------------------------------------

public static void main (String [] args) throws IOException {
    char background [] [] = new char [14] [20];
    try {
        FileInputStream fileinput = new FileInputStream ("background.txt");
        int r;
        for (int i = 0;
        i <= 13; i ++) {
            for (int j = 0;
            j <= 19; j ++) {
                while ((r = fileinput.read ()) != - 1) {
                    char c = (char) r;
                    background [i] [j] = c;
                    break;
                }
            }
        }
        fileinput.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    }
    for (int i = 0;
    i <= 13; i ++) {
        for (int j = 0;
        j <= 19; j ++) {
            System.out.print (background [i] [j]);
        }
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    char background [] [] = new char [14] [20];
    try {
        FileReader fileReader = new FileReader ("background.txt");
        BufferedReader bufferedReader = new BufferedReader (fileReader);
        int i = 0;
        while ((bufferedReader.read (background [i]) != - 1) && (++ i < 14)) {
        }
        bufferedReader.close ();
        fileReader.close ();
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    }
    for (int i = 0;
    i <= 13; i ++) {
        for (int j = 0;
        j <= 19; j ++) {
            System.out.print (background [i] [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2403132_36350622_1_14
2403132_44126984_9_47
Title: Merge (Concat) Multiple JSONObjects 
----------------------------------------

private static JSONObject merge (JSONObject...jsonObjects) throws JSONException {
    JSONObject jsonObject = new JSONObject ();
    for (JSONObject temp : jsonObjects) {
        Iterator < String > keys = temp.keys ();
        while (keys.hasNext ()) {
            String key = keys.next ();
            jsonObject.put (key, temp.get (key));
        }
    }
    return jsonObject;
}
----------------------------------------

public static JSONObject merge (JSONObject [] jsons) {
    JSONObject merged = new JSONObject ();
    Object parameter;
    for (JSONObject added : jsons) {
        for (String key : toStringArrayList (added.names ())) {
            try {
                parameter = added.get (key);
                if (merged.has (key)) {
                    if (added.get (key) instanceof JSONObject) {
                        parameter = merge (new JSONObject [] {(JSONObject) merged.get (key), (JSONObject) added.get (key)});
                    }
                }
                merged.put (key, parameter);
            } catch (JSONException e) {
                e.printStackTrace ();
            }
        }
    }
    return merged;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
24048693_24048720_1_11
24048693_24048761_1_12
Title: String out of bounds exception 
----------------------------------------

public boolean startHi (String str) {
    if (str.length () < 2) return false;

    String firstTwo = str.substring (0, 2);
    if (firstTwo.equals ("hi")) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

public boolean startHi (String str) {
    if (str.length () < 2) return false;
    else {
        String firstTwo = str.substring (0, 2);
        if (firstTwo.equals ("hi")) {
            return true;
        } else {
            return false;
        }
    }
}
----------------------------------------

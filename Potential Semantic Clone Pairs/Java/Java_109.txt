$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45203867_46185186_3_18
45203867_51331894_12_29
Title: OpenCSV: How to create CSV file from POJO with custom column headers and custom column positions? 
----------------------------------------

public String [] generateHeader () {
    final int numColumns = findMaxFieldIndex ();
    if (! isAnnotationDriven () || numColumns == - 1) {
        return super.generateHeader ();
    }
    header = new String [numColumns + 1];
    BeanField beanField;
    for (int i = 0;
    i <= numColumns; i ++) {
        beanField = findField (i);
        String columnHeaderName = extractHeaderName (beanField);
        header [i] = columnHeaderName;
    }
    return header;
}
----------------------------------------

public String [] generateHeader (T bean) throws CsvRequiredFieldEmptyException {
    super.setColumnMapping (new String [FieldUtils.getAllFields (bean.getClass ()).length]);
    final int numColumns = findMaxFieldIndex ();
    if (! isAnnotationDriven () || numColumns == - 1) {
        return super.generateHeader (bean);
    }
    String [] header = new String [numColumns + 1];
    BeanField < T > beanField;
    for (int i = 0;
    i <= numColumns; i ++) {
        beanField = findField (i);
        String columnHeaderName = extractHeaderName (beanField);
        header [i] = columnHeaderName;
    }
    return header;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45212341_45212909_3_47
45212341_45213210_1_36
Title: Convert the input Strings into a Series 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Hello World");
    String input = "test2, abc0001, abc0002, abc002, efg00113, efg00114, efg00115, rtasdf1, test123";
    String [] result = input.split (", ");
    List < String > output = new ArrayList < String > ();
    int toMerge = 0;
    for (int i = 0;
    i < result.length; ++ i) {
        if (i == result.length - 1) {
            if (toMerge != 0) {
                result [i] = result [i - toMerge] + "-" + result [i];
                output.add (result [i]);
                toMerge = 0;
            } else {
                output.add (result [i]);
            }
            break;
        }
        String [] first = result [i].split ("(?<=\\D)(?=\\d)");
        int digits1 = Integer.parseInt (first [1]);
        String [] second = result [i + 1].split ("(?<=\\D)(?=\\d)");
        int digits2 = Integer.parseInt (second [1]);
        if (second [0].equals (first [0]) && (second [1].length () == first [1].length ()) && ((digits2 - digits1) == 1)) {
            toMerge ++;
        } else {
            if (toMerge != 0) {
                result [i] = result [i - toMerge] + "-" + result [i];
                output.add (result [i]);
                toMerge = 0;
            } else {
                output.add (result [i]);
            }
        }
    }
    String [] out = output.toArray (new String [output.size ()]);
    for (String a : out) System.out.println (a);

}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Hello World");
    String input = "abc0001, abc0002, abc002, efg00113, efg00114, efg00115, rtasdf1";
    String [] result = input.split (", ");
    List < String > output = new ArrayList < String > ();
    for (int i = 0;
    i < result.length - 1; ++ i) {
        String [] first = result [i].split ("(?<=\\D)(?=\\d)");
        int digits1 = Integer.parseInt (first [1]);
        String [] second = result [i + 1].split ("(?<=\\D)(?=\\d)");
        int digits2 = Integer.parseInt (second [1]);
        if (second [0].equals (first [0]) && (second [1].length () == first [1].length ()) && ((digits2 - digits1) == 1)) {
            if (! output.isEmpty () && output.get (output.size () - 1).indexOf (result [i]) >= 0) {
                String startSequence = output.get (output.size () - 1);
                if (startSequence.indexOf ("-") >= 0) {
                    startSequence = startSequence.substring (0, startSequence.indexOf ("-"));
                }
                output.remove (output.size () - 1);
                result [i] = startSequence + "-" + result [i + 1];
            } else {
                result [i] = result [i] + "-" + result [i + 1];
            }
            output.add (result [i]);
        } else if (i > 0) {
            output.add (result [i + 1]);
        } else {
            output.add (result [i]);
        }

    }
    String [] out = output.toArray (new String [output.size ()]);
    for (String a : out) System.out.println (a);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4522090_10371007_1_14
4522090_27625327_3_17
Title: how can I detect arrow keys in java? 
----------------------------------------

public void keyPressed (KeyEvent e) {
    int c = e.getKeyCode ();
    if (c == KeyEvent.VK_UP) {
        b.y --;
    } else if (c == KeyEvent.VK_DOWN) {
        b.y ++;
    } else if (c == KeyEvent.VK_LEFT) {
        b.x --;
    } else if (c == KeyEvent.VK_RIGHT) {
        b.x ++;
    }

    System.out.println (b.x);
    b.repaint ();
}
----------------------------------------

public void keyPressed (KeyEvent e) {
    if (e.getKeyCode () == KeyEvent.VK_UP) {
        y -= 50;
    } else if (e.getKeyCode () == KeyEvent.VK_DOWN) {
        y += 50;
    } else if (e.getKeyCode () == KeyEvent.VK_RIGHT) {
        x += 50;
    } else if (e.getKeyCode () == KeyEvent.VK_LEFT) {
        x -= 50;
    }

    repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45238486_45337641_112_128
45238486_45337641_49_78
Title: Java DecriptionInfo on Word DocX 
----------------------------------------

public static Object create (File file, String password, boolean readOnly) throws IOException, EncryptedDocumentException {
    if (! file.exists ()) {
        throw new FileNotFoundException (file.toString ());
    }
    NPOIFSFileSystem fs = null;
    try {
        fs = new NPOIFSFileSystem (file, readOnly);
        return create (fs, password);
    } catch (OfficeXmlFileException e) {
        IOUtils.closeQuietly (fs);
        return createXWPFDocument (file, readOnly);
    } catch (RuntimeException e) {
        IOUtils.closeQuietly (fs);
        throw e;
    }
}
----------------------------------------

public static Object create (final NPOIFSFileSystem fs, String password) throws IOException {
    DirectoryNode root = fs.getRoot ();
    if (root.hasEntry (Decryptor.DEFAULT_POIFS_ENTRY)) {
        InputStream stream = null;
        try {
            stream = DocumentFactoryHelper.getDecryptedStream (fs, password);
            return createXWPFDocument (stream);
        } finally {
            IOUtils.closeQuietly (stream);
        }
    }
    boolean passwordSet = false;
    if (password != null) {
        Biff8EncryptionKey.setCurrentUserPassword (password);
        passwordSet = true;
    }
    try {
        return createHWPFDocument (fs);
    } finally {
        if (passwordSet) {
            Biff8EncryptionKey.setCurrentUserPassword (null);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45238486_45337641_112_128
45238486_45337641_84_102
Title: Java DecriptionInfo on Word DocX 
----------------------------------------

public static Object create (File file, String password, boolean readOnly) throws IOException, EncryptedDocumentException {
    if (! file.exists ()) {
        throw new FileNotFoundException (file.toString ());
    }
    NPOIFSFileSystem fs = null;
    try {
        fs = new NPOIFSFileSystem (file, readOnly);
        return create (fs, password);
    } catch (OfficeXmlFileException e) {
        IOUtils.closeQuietly (fs);
        return createXWPFDocument (file, readOnly);
    } catch (RuntimeException e) {
        IOUtils.closeQuietly (fs);
        throw e;
    }
}
----------------------------------------

public static Object create (InputStream inp, String password) throws IOException, EncryptedDocumentException {
    if (! inp.markSupported ()) {
        inp = new PushbackInputStream (inp, 8);
    }
    byte [] header8 = IOUtils.peekFirst8Bytes (inp);
    if (NPOIFSFileSystem.hasPOIFSHeader (header8)) {
        NPOIFSFileSystem fs = new NPOIFSFileSystem (inp);
        return create (fs, password);
    }
    if (DocumentFactoryHelper.hasOOXMLHeader (inp)) {
        return createXWPFDocument (inp);
    }
    throw new IllegalArgumentException ("Your InputStream was neither an OLE2 stream, nor an OOXML stream");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45238486_45337641_49_78
45238486_45337641_84_102
Title: Java DecriptionInfo on Word DocX 
----------------------------------------

public static Object create (final NPOIFSFileSystem fs, String password) throws IOException {
    DirectoryNode root = fs.getRoot ();
    if (root.hasEntry (Decryptor.DEFAULT_POIFS_ENTRY)) {
        InputStream stream = null;
        try {
            stream = DocumentFactoryHelper.getDecryptedStream (fs, password);
            return createXWPFDocument (stream);
        } finally {
            IOUtils.closeQuietly (stream);
        }
    }
    boolean passwordSet = false;
    if (password != null) {
        Biff8EncryptionKey.setCurrentUserPassword (password);
        passwordSet = true;
    }
    try {
        return createHWPFDocument (fs);
    } finally {
        if (passwordSet) {
            Biff8EncryptionKey.setCurrentUserPassword (null);
        }
    }
}
----------------------------------------

public static Object create (InputStream inp, String password) throws IOException, EncryptedDocumentException {
    if (! inp.markSupported ()) {
        inp = new PushbackInputStream (inp, 8);
    }
    byte [] header8 = IOUtils.peekFirst8Bytes (inp);
    if (NPOIFSFileSystem.hasPOIFSHeader (header8)) {
        NPOIFSFileSystem fs = new NPOIFSFileSystem (inp);
        return create (fs, password);
    }
    if (DocumentFactoryHelper.hasOOXMLHeader (inp)) {
        return createXWPFDocument (inp);
    }
    throw new IllegalArgumentException ("Your InputStream was neither an OLE2 stream, nor an OOXML stream");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45257037_45257344_2_19
45257037_45257479_2_25
Title: java nested loop patterns 
----------------------------------------

public static void main (String [] args) {
    int noOfRows = 10;
    System.out.println ("How Many Rows You Want In Your Pyramid?");
    System.out.println ("Here Is Your Pyramid");
    for (int i = 1;
    i <= noOfRows; i ++) {
        StringBuilder string = new StringBuilder ();
        string.append ("o");
        for (int k = i;
        k <= noOfRows; k ++) {
            string.append (" ");
        }
        for (int j = 1;
        j <= i; j ++) {
            string.append ("//");
        }
        System.out.println (string);
    }
}
----------------------------------------

public static void main (String args []) {
    int noOfRows = 4;
    for (int i = 0;
    i < noOfRows; i ++) {
        System.out.print ("o");
        for (int j = 0;
        j < noOfRows; j ++) {
            if (i + j == noOfRows - 1) System.out.print ("//");
            else System.out.print (" ");

        }
        for (int j = noOfRows - 1;
        j >= 0; j --) {
            if (i + j == noOfRows - 1) {
                System.out.print ("\\\\.");
                break;
            } else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45257037_45257344_2_19
45257037_45257607_23_36
Title: java nested loop patterns 
----------------------------------------

public static void main (String [] args) {
    int noOfRows = 10;
    System.out.println ("How Many Rows You Want In Your Pyramid?");
    System.out.println ("Here Is Your Pyramid");
    for (int i = 1;
    i <= noOfRows; i ++) {
        StringBuilder string = new StringBuilder ();
        string.append ("o");
        for (int k = i;
        k <= noOfRows; k ++) {
            string.append (" ");
        }
        for (int j = 1;
        j <= i; j ++) {
            string.append ("//");
        }
        System.out.println (string);
    }
}
----------------------------------------

public static void main (String [] args) {
    int input = 10;
    int tempStartCount = 0;
    int tempReverseCount = input;
    for (int i = 0;
    i < input; i ++) {
        if (i != 0) {
            tempStartCount += 2;
        }
        System.out.println (String.format ("%s%s", getSpace (tempReverseCount), getPyramidDesign (tempStartCount)));
        tempReverseCount --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45257037_45257479_2_25
45257037_45257607_23_36
Title: java nested loop patterns 
----------------------------------------

public static void main (String args []) {
    int noOfRows = 4;
    for (int i = 0;
    i < noOfRows; i ++) {
        System.out.print ("o");
        for (int j = 0;
        j < noOfRows; j ++) {
            if (i + j == noOfRows - 1) System.out.print ("//");
            else System.out.print (" ");

        }
        for (int j = noOfRows - 1;
        j >= 0; j --) {
            if (i + j == noOfRows - 1) {
                System.out.print ("\\\\.");
                break;
            } else System.out.print (" ");

        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int input = 10;
    int tempStartCount = 0;
    int tempReverseCount = input;
    for (int i = 0;
    i < input; i ++) {
        if (i != 0) {
            tempStartCount += 2;
        }
        System.out.println (String.format ("%s%s", getSpace (tempReverseCount), getPyramidDesign (tempStartCount)));
        tempReverseCount --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45261225_45261334_1_13
45261225_45262547_1_9
Title: How can i create a recursive method that does the exp of n but returns a String n number of times in Java 
----------------------------------------

public static String starPower (int n) {
    if (n < 0) {
        throw new IllegalArgumentException ("n has an invalid value");
    }
    if (n == 0) {
        return "*";
    }
    String halfResult = starPower (n - 1);
    return halfResult + halfResult;
}
----------------------------------------

public static String starPower (int n) {
    if (n < 0) {
        throw new IllegalArgumentException ("n has an invalid value");
    }
    if (n == 0) {
        return "*";
    }
    return starPower (n - 1) + starPower (n - 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4526320_4526626_15_52
4526320_4527137_4_30
Title: Java - 'continue' loop iteration after certain timeout period 
----------------------------------------

public static void main (String [] args) {
    Timer calculationTimer = new Timer (true);
    calculationTimer.schedule (new TimerTask () {
        @Override
        public void run () {
            Thread calculationThread = new Thread () {
                public void run () {
                    Object result = performCalculation ();
                    results.push (result);
                    synchronized (resultTrigger) {
                        resultTrigger.notifyAll ();
                    }
                }}

            ;
            calculationThread.start ();
        }}

    , CALCULATION_THRESHOLD, CALCULATION_THRESHOLD);
    synchronized (resultTrigger) {
        if (results.isEmpty ()) {
            try {
                resultTrigger.wait ();
            } catch (InterruptedException ex) {
            }
        }
    }
    Object result = results.pop ();
    System.out.println ("Latest result is : " + result);
    results.clear ();
}
----------------------------------------

public static void main (String [] args) {
    ExecutorService es = Executors.newSingleThreadExecutor ();
    for (int i = 0;
    i < iterations; i ++) {
        Future < Result > futureResult = es.submit (new Callable < Result > () {
            public Result call () {
                return gatherData ();
            }}

        );
        try {
            Result result = futureResult.get (1, TimeUnit.SECONDS);
            break;
        } catch (TimeoutException timeout) {
            futureResult.cancel (true);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45267142_45270724_145_159
45267142_45270724_51_65
Title: how to log my program every 10 seconds 
----------------------------------------

public void run () {
    int timeToSave = 10000;
    System.out.printf ("Running Program Logger, log files every %d miliseconds. %s%n", timeToSave, new Date ().toString ());
    while (! Thread.currentThread ().isInterrupted ()) {
        try {
            Thread.sleep (timeToSave);
            this.writeToFile ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        System.out.println ("Sarting Client Sender on Thread " + Thread.currentThread ().toString ());
        socket = new Socket (serverAddress, serverPort);
        out = out == null ? new PrintWriter (socket.getOutputStream (), true) : out;
        while (! Thread.currentThread ().isInterrupted ()) {
            out.println (Thread.currentThread ().toString () + " - " + randomValue.nextInt (8000));
            Thread.sleep (randomValue.nextInt (800));
        }
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45267142_45270724_145_159
45267142_45270724_78_103
Title: how to log my program every 10 seconds 
----------------------------------------

public void run () {
    int timeToSave = 10000;
    System.out.printf ("Running Program Logger, log files every %d miliseconds. %s%n", timeToSave, new Date ().toString ());
    while (! Thread.currentThread ().isInterrupted ()) {
        try {
            Thread.sleep (timeToSave);
            this.writeToFile ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    System.out.println ("Sarting Server Receptor on Thread " + Thread.currentThread ().toString ());
    InputStream inputStream = null;
    BufferedReader bufferedReader = null;
    DataOutputStream dataOutputStream = null;
    try {
        inputStream = socket.getInputStream ();
        bufferedReader = new BufferedReader (new InputStreamReader (inputStream));
    } catch (IOException e) {
        return;
    }
    String line;
    while (true) {
        try {
            line = bufferedReader.readLine ();
            if (line != null) {
                bufferLogger.log (line);
            }
        } catch (IOException e) {
            e.printStackTrace ();
            return;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45267142_45270724_51_65
45267142_45270724_78_103
Title: how to log my program every 10 seconds 
----------------------------------------

public void run () {
    try {
        System.out.println ("Sarting Client Sender on Thread " + Thread.currentThread ().toString ());
        socket = new Socket (serverAddress, serverPort);
        out = out == null ? new PrintWriter (socket.getOutputStream (), true) : out;
        while (! Thread.currentThread ().isInterrupted ()) {
            out.println (Thread.currentThread ().toString () + " - " + randomValue.nextInt (8000));
            Thread.sleep (randomValue.nextInt (800));
        }
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    System.out.println ("Sarting Server Receptor on Thread " + Thread.currentThread ().toString ());
    InputStream inputStream = null;
    BufferedReader bufferedReader = null;
    DataOutputStream dataOutputStream = null;
    try {
        inputStream = socket.getInputStream ();
        bufferedReader = new BufferedReader (new InputStreamReader (inputStream));
    } catch (IOException e) {
        return;
    }
    String line;
    while (true) {
        try {
            line = bufferedReader.readLine ();
            if (line != null) {
                bufferLogger.log (line);
            }
        } catch (IOException e) {
            e.printStackTrace ();
            return;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45267526_45268544_1_21
45267526_45268597_1_40
Title: Java: Properties return always null 
----------------------------------------

public static boolean checkProperties () {
    Properties prop = new Properties ();
    InputStream input = null;
    boolean flag = false;
    try {
        String filename = "server.properties";
        input = Test.class.getClassLoader ().getResourceAsStream (filename);
        prop.load (input);
        System.out.println (prop.getProperty ("server-port"));
        if (prop.getProperty ("server-port") == null) {
            flag = false;
        } else {
            flag = true;
        }
    } catch (IOException ex) {
        ex.printStackTrace ();
    }
    return flag;
}
----------------------------------------

public static boolean checkProperties () {
    Properties prop = new Properties ();
    try {
        FileOutputStream out = null;
        Reader reader = new FileReader (propertyFile);
        prop.load (reader);
        printToConsole (prop.getProperty ("server-port"), LEVEL_NORMAL, true);
        if (prop.getProperty ("server-port") == null || prop.getProperty ("server-port").equals ("")) {
            prop.setProperty ("server-port", "2424");
            printToConsole ("No port was specified in the properties file! Set port to 2424.", LEVEL_NORMAL, true);
        }
        if (prop.getProperty ("info-text") == null || prop.getProperty ("info-text").equals ("")) {
            prop.setProperty ("info-text", "Welcome to my Game Server!");
            printToConsole ("No info text was specified in the properties file! Set to 'Welcome to my Game Server!'", LEVEL_NORMAL, true);
        }
        out = new FileOutputStream (propertyFile);
        prop.store (out, "Game Server Config");
        out.close ();
        reader.close ();
    } catch (IOException e) {
        printToConsole ("Something went wrong while checking properties file!", LEVEL_ERROR, true);
        printToConsole (e.getMessage (), LEVEL_ERROR, true);
        return false;
    }
    try {
        port = Integer.parseInt (prop.getProperty ("server-port"));
    } catch (Exception e) {
        printToConsole ("Error: Can not use the port in the properties file ('" + prop.getProperty ("server-port") + "')!", LEVEL_ERROR, true);
        printToConsole (e.getMessage (), LEVEL_ERROR, true);
        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45274407_45274546_1_18
45274407_45274740_19_27
Title: Get the value from a java public class with key reference 
----------------------------------------

public static String getVal (int type, String key) {
    if (type == 1) {
        if (key.equalsIgnoreCase ("test")) {
            return ob1.test;
        } else {
            return ob1.test2;
        }
    }
    if (type == 2) {
        if (key.equalsIgnoreCase ("test")) {
            return ob2.test;
        } else {
            return ob2.test2;
        }
    } else {
        return null;
    }
}
----------------------------------------

private static String getVal (Class < ? > type, String key) throws Exception {
    if (key != null) {
        Field field = type.getDeclaredField (key);
        if (Modifier.isStatic (field.getModifiers ()) && field.getType () == String.class) {
            return (String) field.get (null);
        }
    }
    throw new IllegalArgumentException ("Wrong argument: " + key);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
45274704_45274865_8_28
45274704_45275089_10_44
Title: How do I ask if the user would like to continue the game after each dice roll in java using netbeans 
----------------------------------------

public static void main (String [] args) {
    while (choice == PLAY) {
        int dice1 = (int) (Math.random () * 6 + 1);
        int dice2 = (int) (Math.random () * 6 + 1);
        int sum = dice1 + dice2;
        System.out.println ("Roll: total = " + sum);
        if (sum == 2 || sum == 3 || sum == 12) {
            System.out.println ("Sorry with a " + sum + " you loose :(");
            choice = playAgainMessage ();
        } else if (sum == 7 || sum == 11) {
            System.out.println ("With a " + sum + " you win :)");
            choice = playAgainMessage ();
        }

    }
    if (choice == DO_NOT_PLAY) {
        System.out.println ("Good bye...");
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    int dice1 = (int) (Math.random () * 6 + 1);
    int dice2 = (int) (Math.random () * 6 + 1);
    int sum = dice1 + dice2;
    while (true) {
        System.out.println ();
        System.out.println ("Rolling dice for " + attempt + " time!");
        dice1 = (int) (Math.random () * 6 + 1);
        dice2 = (int) (Math.random () * 6 + 1);
        sum = dice1 + dice2;
        System.out.println ("Roll: total = " + sum);
        if (sum == 2 || sum == 3 || sum == 12) {
            System.out.println ("Sorry with a " + sum + " you loose :(!");
            System.out.println ();
            break;
        } else if (sum == 7 || sum == 11) {
            System.out.println ("With a " + sum + " you win :)!");
            System.out.println ();
            break;
        }

        System.out.println ();
        System.out.println ("Do you wish to continue? Press 'y' for YES or ANY key for EXIT");
        if (! scanner.next ().equalsIgnoreCase ("y")) {
            break;
        }
        attempt ++;
    }
    System.out.println ("Thanks for playing dice game, you rolled the dice " + attempt + " times!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_16964711_1_27
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_20852881_1_14
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_22582734_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_25985177_1_24
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_26825174_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_29390535_1_15
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_38481781_1_11
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_12122383_1_20
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    String numbers = "";
    if (nums.length == 0) return 0;

    for (int ndx = 0;
    ndx < nums.length; ndx ++) {
        numbers += nums [ndx];
    }
    int first = numbers.indexOf (numbers.charAt (0));
    int last = numbers.lastIndexOf (numbers.charAt (0));
    int max = last - first + 1;
    int efirst = numbers.indexOf (numbers.charAt (numbers.length () - 1));
    int elast = numbers.lastIndexOf (numbers.charAt (numbers.length () - 1));
    int emax = elast - efirst + 1;
    return (max > emax) ? max : emax;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_20852881_1_14
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_22582734_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_25985177_1_24
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_26825174_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_29390535_1_15
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_38481781_1_11
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_16964711_1_27
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int current = 0;
    int currentcompare = 0;
    int counter = 0;
    int internalcounter = 0;
    if (nums.length == 0) return 0;

    for (int i = 0;
    i < nums.length; i ++) {
        internalcounter = 0;
        current = nums [i];
        for (int x = i;
        x < nums.length; x ++) {
            currentcompare = nums [x];
            if (current == currentcompare) {
                internalcounter = x - i;
            }
            if (internalcounter > counter) {
                counter = internalcounter;
            }
        }
    }
    return counter + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_22582734_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_25985177_1_24
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_26825174_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_29390535_1_15
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_38481781_1_11
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_20852881_1_14
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length < 1) {
        return 0;
    }
    int compare = 1;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int l = 1;
        l < nums.length; l ++) {
            if ((nums [l] == nums [i]) && (Math.abs (l) - Math.abs (i)) >= compare) {
                compare = Math.abs (l) - Math.abs (i) + 1;
            }
        }
    }
    return compare;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_25985177_1_24
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_26825174_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_29390535_1_15
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_38481781_1_11
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_22582734_1_21
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int maxSpan = 0;
    int tempSpan = 0;
    if (nums.length == 0) {
        return 0;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i; j --) {
            if (nums [i] == nums [j]) {
                tempSpan = j - i;
                break;
            }
        }
        if (tempSpan > maxSpan) {
            maxSpan = tempSpan;
        }
    }
    return maxSpan + 1;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_26825174_1_21
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_29390535_1_15
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_38481781_1_11
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_25985177_1_24
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int length = nums.length;
    if (length <= 0) return 0;

    int left = nums [0];
    int rigth = nums [length - 1];
    int value = 1;
    if (left == rigth) return length;

    for (int x = 1;
    x < length - 1; x ++) {
        if (nums [x] == left || nums [x] == rigth) value = x + 1;

    }
    return value;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_29390535_1_15
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_38481781_1_11
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_26825174_1_21
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int count, largest = 0;
    for (int x = 0;
    x < nums.length; x ++) {
        for (int y = 0;
        y < nums.length; y ++) {
            if (nums [x] == nums [y]) {
                count = y - x + 1;
                if (count > largest) {
                    largest = count;
                }
            }
        }
    }
    return largest;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_27884744_3_21
4528016_4528173_7_35
Title: Find the largest span between the same number in an array 
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    int A [], span = 0, pos = 0;
    DataInputStream in = new DataInputStream (System.in);
    System.out.println ("enter the number of elements");
    A = new int [Integer.parseInt (in.readLine ())];
    int i, j;
    for (i = 0; i < A.length; i ++) {
        A [i] = Integer.parseInt (in.readLine ());
    }
    for (i = 0; i < A.length; i ++) {
        for (j = A.length - 1; j >= 0; j --) if (A [i] == A [j] && (j - i) > span) {
            span = j - i;
            pos = i;
        }

    }
    System.out.println ("maximum span => " + (span + 1) + " that is of " + A [pos]);
}
----------------------------------------

public static void main (String [] args) {
    List < Integer > listNumbers = new ArrayList < Integer > ();
    listNumbers.add (3);
    listNumbers.add (3);
    listNumbers.add (3);
    listNumbers.add (2);
    listNumbers.add (1);
    listNumbers.add (4);
    listNumbers.add (3);
    listNumbers.add (5);
    listNumbers.add (1);
    listNumbers.add (1);
    listNumbers.add (1);
    listNumbers.add (1);
    listNumbers.add (1);
    listNumbers.add (3);
    int result = 0;
    Integer key = null;
    for (Integer i : listNumbers) {
        int resultDistance = returnDistance (listNumbers, i);
        if (resultDistance > result) {
            result = resultDistance;
            key = i;
        }
    }
    System.out.println ("MaxSpan of key " + key + " is: " + result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_29390535_1_15
4528016_38481781_1_11
Title: Find the largest span between the same number in an array 
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_29390535_1_15
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_29390535_1_15
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_29390535_1_15
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_29390535_1_15
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_29390535_1_15
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_29390535_1_15
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public static int maxSpan (int [] nums) {
    int left = 0;
    int right = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [0] == nums [nums.length - 1 - i]) {
            left = nums.length - i;
            break;
        } else if (nums [nums.length - 1] == nums [i]) {
            right = nums.length - i;
            break;
        }

    }
    return Math.max (left, right);
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_38481781_1_11
4528016_39106524_1_22
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_38481781_1_11
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_38481781_1_11
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_38481781_1_11
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_38481781_1_11
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_38481781_1_11
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    if (nums.length > 0) {
        if (nums [0] == nums [nums.length - 1]) {
            return nums.length;
        } else {
            return nums.length - 1;
        }
    }
    return nums.length;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_39106524_1_22
4528016_39565149_1_30
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------

public int maxSpan (int [] nums) {
    Stack stack = new Stack ();
    int count = 1;
    int value = 0;
    int temp = 0;
    if (nums.length < 1) {
        return value;
    }
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j >= i; j --) {
            if (nums [i] == nums [j]) {
                count = (j - i) + 1;
                stack.push (count);
                count = 1;
                break;
            }
        }
    }
    if (stack.peek () != null) {
        while (stack.size () != 0) {
            temp = (Integer) stack.pop ();
            if (value <= temp) {
                value = temp;
            } else {
                value = value;
            }
        }
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_39106524_1_22
4528016_41174036_1_18
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int totalspan = 0;
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = nums.length - 1;
        j > i - 1; j --) {
            if (nums [i] == nums [j]) {
                span = j - i + 1;
                if (span > totalspan) totalspan = span;

                break;
            }
        }
    }
    return totalspan;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_39106524_1_22
4528016_42051932_1_10
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    Map < Integer, Integer > first = new HashMap < Integer, Integer > ();
    for (int i = 0;
    i < nums.length; i ++) {
        if (! first.containsKey (nums [i])) first.put (nums [i], i);

        span = Math.max (span, (i - first.get (nums [i])) + 1);
    }
    return span;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_39106524_1_22
4528016_47889950_1_17
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int result = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        int item = nums [i];
        int span = 0;
        for (int j = 0;
        j <= i; j ++) {
            if (nums [j] == item) {
                span = i - j + 1;
                break;
            }
        }
        if (span > result) {
            result = span;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4528016_39106524_1_22
4528016_48847206_1_13
Title: Find the largest span between the same number in an array 
----------------------------------------

public int maxSpan (int [] nums) {
    int b = 0;
    if (nums.length > 0) {
        for (int i = 0;
        i < nums.length; i ++) {
            int a = nums [0];
            if (nums [i] != a) {
                b = nums.length - 1;
            } else {
                b = nums.length;
            }
        }
    } else {
        b = 0;
    }
    return b;
}
----------------------------------------

public int maxSpan (int [] nums) {
    int span = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        for (int j = i;
        j < nums.length; j ++) {
            if (nums [i] == nums [j]) {
                if (span < (j - i + 1)) {
                    span = j - i + 1;
                }
            }
        }
    }
    return span;
}
----------------------------------------

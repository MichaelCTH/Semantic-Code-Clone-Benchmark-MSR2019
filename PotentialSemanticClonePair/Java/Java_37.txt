$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20941509_20941632_1_18
20941509_20941716_63_109
Title: What alternatives are there to these switch statements? 
----------------------------------------

public static double getGrade (String grade) {
    double retVal = 0.0;
    char letter = grade.getCharAt (0);
    retVal = Math.max ((int) 'A' - (int) letter + 4, 0.0);
    if (grade.length () == 1) return retVal;

    char pm = grade.getCharAt (1);
    if (pm == '+') retVal += 0.33;
    else retVal -= 0.33;

    return retVal;
}
----------------------------------------

public static double getGrade (String stringGrade) {
    double grade = 0.0;
    switch (stringGrade) {
        case "A+" :
            grade = 4.33;
            break;
        case "A" :
            grade = 4.00;
            break;
        case "A-" :
            grade = 3.67;
            break;
        case "B+" :
            grade = 3.33;
            break;
        case "B" :
            grade = 3.00;
            break;
        case "B-" :
            grade = 2.67;
            break;
        case "C+" :
            grade = 2.33;
            break;
        case "C" :
            grade = 2.00;
            break;
        case "C-" :
            grade = 1.67;
            break;
        case "D+" :
            grade = 1.33;
            break;
        case "D" :
            grade = 1.00;
            break;
        case "D-" :
            grade = .67;
            break;
        case "F" :
            grade = 0.0;
            break;
    }
    System.out.println ("stringGrade: " + stringGrade + "=" + grade);
    return grade;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20943166_20943192_1_23
20943166_20943212_6_21
Title: Reverse word by word in a String 
----------------------------------------

public static String reverseWord (String str) {
    int len = str.length ();
    String reverse = "", temp = " ";
    for (int i = 0;
    i < len; i ++) {
        if (str.charAt (i) != ' ') {
            temp += str.charAt (i);
        } else if (str.charAt (i) == ' ' || i == len) {
            if (i + 1 < len) {
                for (int j = temp.length () - 1;
                j >= 0; j --) {
                    reverse += temp.charAt (j);
                }
                temp = " ";
            } else {
                temp = "";
            }
        }

    }
    for (int j = temp.length () - 1;
    j >= 0; j --) {
        reverse += temp.charAt (j);
    }
    return reverse;
}
----------------------------------------

public static String reverseWord (String str) {
    int len = str.length ();
    String reverse = "", temp = "";
    for (int i = 0;
    i < len; i ++) {
        if (str.charAt (i) != ' ') {
            temp = str.charAt (i) + temp;
        } else if (str.charAt (i) == ' ') {
            reverse += temp + " ";
            temp = "";
        }

    }
    reverse += temp;
    return reverse;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20950066_20950403_1_21
20950066_45731102_1_10
Title: How implement comparator in to sort objects in android or java 
----------------------------------------

public void loadList (ArrayList < Calls > list) {
    List < Calls > calls = new ArrayList < Calls > ();
    calls.addAll (list);
    Collections.sort (calls, new Comparator < Calls > () {
        @Override
        public int compare (Calls o1, Calls o2) {
            return (int) (o1.ms - o2.ms);
        }}

    );
    Collections.sort (calls, new Comparator < Calls > () {
        @Override
        public int compare (Calls o1, Calls o2) {
            return (int) (o2.ms - o1.ms);
        }}

    );
}
----------------------------------------

public void loadList (ArrayList < Calls > list) {
    List < Calls > calls = new ArrayList < Calls > ();
    calls.addAll (list);
    Collections.sort (calls, new Comparator < Calls > () {
        @Override
        public int compare (Calls o, Calls t1) {
            return (int) (o.getMS () - t1.getMS ());
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20967472_20967828_1_16
20967472_20967831_1_15
Title: Delete or edit element from arraylist 
----------------------------------------

@Override
public boolean onContextItemSelected (MenuItem item) {
    AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo ();
    TravelInfo itemSelected = adapter.getItem (info.position);
    switch (item.getItemId ()) {
        case R.id.edit_travel :
            return true;
        case R.id.delete_travel :
            return true;
        default :
            return super.onContextItemSelected (item);
    }
}
----------------------------------------

@Override
public boolean onContextItemSelected (MenuItem item) {
    AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo ();
    switch (item.getItemId ()) {
        case R.id.edit_travel :
            Toast.makeText (getBaseContext (), "edit: " + info.position, Toast.LENGTH_SHORT).show ();
            return true;
        case R.id.delete_travel :
            Toast.makeText (getBaseContext (), "delete: " + info.position, Toast.LENGTH_SHORT).show ();
            return true;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
20988010_20988104_1_19
20988010_20988885_5_20
Title: Coding to Interface not to Implementation 
----------------------------------------

public static void main (String [] args) {
    Map < Integer, String > test = new HashMap < Integer, String > ();
    test.put (1, "Sridhar");
    test.put (2, "Lord Balaji");
    test.put (3, "Ragavendra");
    test.put (4, "Jai Krishna");
    Set < Integer > testObject = test.keySet ();
    LinkedList < Integer > normal = new LinkedList < Integer > ();
    List < Integer > interfaceImpl = new ArrayList < Integer > ();
    interfaceImpl.addAll (testObject);
    System.out.println (interfaceImpl);
    System.out.println ("The keys are:" + interfaceImpl.iterator ().next ());
    normal.addAll (testObject);
    System.out.println (normal);
    System.out.println ("The keys are:" + normal.getFirst ());
}
----------------------------------------

public static void main (String [] args) {
    Map < Integer, String > test = new HashMap < Integer, String > ();
    test.put (1, "Sridhar");
    test.put (2, "Lord Balaji");
    test.put (3, "Ragavendra");
    test.put (4, "Jai Krishna");
    Set testObject = test.keySet ();
    LinkedList < Integer > normal = new LinkedList < Integer > ();
    Deque < Integer > interfaceImpl = new LinkedList < Integer > ();
    interfaceImpl.addAll (testObject);
    System.out.println (interfaceImpl);
    System.out.println ("The keys are:" + interfaceImpl.getFirst ());
    normal.addAll (testObject);
    System.out.println (normal);
    System.out.println ("The keys are:" + normal.getFirst ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21001356_21001524_1_11
21001356_21001547_1_10
Title: calling a synchronized method from run method 
----------------------------------------

public void withdraw (double amount) {
    double bal;
    synchronized (account) {
        bal = account.getBalance ();
        if (amount > account.getBalance ()) throw new IllegalArgumentException ("wrong amount");

        bal -= amount;
        account.setBalance (bal);
    }
    System.out.println (amount + " withdraw in thread number" + Thread.currentThread ().getId () + " balance is " + bal);
}
----------------------------------------

public void withdraw (double amount) {
    synchronized (account) {
        double bal = account.getBalance ();
        if (amount > account.getBalance ()) throw new IllegalArgumentException ("wrong amount");

        bal -= amount;
        account.setBalance (bal);
        System.out.println (amount + " withdraw in thread number" + Thread.currentThread ().getId () + " balance is " + bal);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21013688_21013724_1_11
21013688_21013819_1_10
Title: Returning information if vehicle is available 
----------------------------------------

public String getStatus () {
    if (destination == null) {
        System.out.println ("This Vehicle is free");
    } else if (location == destination) {
        System.out.println ("This Vehicle is free");
    }

    return (id + " at " + location + " headed for " + destination);
}
----------------------------------------

public String getStatus () {
    if (destination == null) {
        System.out.println ("This Vehicle is free");
    } else if (location == destination) {
        System.out.println ("This Vehicle is free");
    }

    return id + " at " + location + " headed for " + destination;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21023506_21023980_1_15
21023506_21025127_4_11
Title: How to reverse the String? 
----------------------------------------

public static void main (String [] args) {
    String str = "qmsfdj";
    String result = "";
    try {
        int i = 0;
        while (true) {
            result = str.substring (i, i + 1) + result;
            ++ i;
        }
    } catch (Exception e) {
    }
    System.out.println (result);
}
----------------------------------------

public static void main (String [] args) {
    String str = "hello world!";
    CharBuffer cb = CharBuffer.wrap (str);
    int len = cb.limit ();
    String rev = "";
    while (len -- > 0) rev += cb.get (len);

    System.out.printf ("[%s]\n", rev);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21024455_21024841_201_213
21024455_21024841_98_171
Title: Using keybinding to make sprite continue to move and Snake body 
----------------------------------------

public void actionPerformed (ActionEvent event) {
    Object source = event.getSource ();
    if (source == pressme) System.exit (0);

    if (source == replay) {
        dispose ();
        EventQueue.invokeLater (new Runnable () {
            public void run () {
                new Snake2 ();
            }}

        );
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if ("right".equals (direction)) {
        x += 10;
        if (x >= mx && x <= mx + 9 && y >= my && y <= my + 9) {
            addx = (rand.nextInt (10)) * 10;
            addy = (rand.nextInt (10)) * 10;
            mx = ((rand.nextInt (5) + 1) * 100) + addx;
            my = ((rand.nextInt (6) + 1) * 100) + addy;
            point += 100;
            length ++;
            bodyX.add (0, x);
        }
        if (x > 699) {
            new GameOver ();
            dispose ();
        }
    } else if ("left".equals (direction)) {
        x -= 10;
        if (x >= mx && x <= mx + 9 && y >= my && y <= my + 9) {
            addx = (rand.nextInt (10)) * 10;
            addy = (rand.nextInt (10)) * 10;
            mx = ((rand.nextInt (5) + 1) * 100) + addx;
            my = ((rand.nextInt (6) + 1) * 100) + addy;
            point += 100;
            length ++;
            bodyX.add (0, x);
        }
        if (x < 99) {
            new GameOver ();
            dispose ();
        }
    } else if ("up".equals (direction)) {
        y -= 10;
        if (y >= my && y <= my + 9 && x >= mx && x <= mx + 9) {
            addx = (rand.nextInt (10)) * 10;
            addy = (rand.nextInt (10)) * 10;
            mx = ((rand.nextInt (5) + 1) * 100) + addx;
            my = ((rand.nextInt (6) + 1) * 100) + addy;
            point += 100;
            length ++;
            bodyY.add (0, y);
        }
        if (y < 99) {
            new GameOver ();
            dispose ();
        }
    } else if ("down".equals (direction)) {
        y += 10;
        if (y >= my && y <= my + 9 && x >= mx && x <= mx + 9) {
            addx = (rand.nextInt (10)) * 10;
            addy = (rand.nextInt (10)) * 10;
            mx = ((rand.nextInt (5) + 1) * 100) + addx;
            my = ((rand.nextInt (6) + 1) * 100) + addy;
            point += 100;
            length ++;
            bodyY.add (0, y);
        }
        if (y > 799) {
            new GameOver ();
            dispose ();
        }
    }

    drawPanel.repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21035079_21035165_1_16
21035079_21035246_1_19
Title: Basic Arrays in a Java Program 
----------------------------------------

public static void main (String [] args) {
    String [] names = new String [5];
    double [] sales = new double [5];
    Scanner scan = new Scanner (System.in);
    for (int i = 0;
    i < 5; i ++) {
        System.out.println ("What is the name of the person?");
        name [i] = scan.next ();
        System.out.println ("How much did they sell?");
        sales [i] = scan.nextDouble ();
    }
    for (int i = 0;
    i < 5; i ++) {
        System.out.println (name [i] + " sold " + sales [i]);
    }
}
----------------------------------------

public static void main (String [] args) {
    List < Salesman > salesmanList = new ArrayList < Salesman > (5);
    Scanner scanner = new Scanner (System.in);
    for (int i = 0;
    i < 5; i ++) {
        Salesman salesman = new Salesman ();
        System.out.print ("Please input name of sale " + (i + 1) + ": ");
        salesman.setName (scanner.nextLine ());
        System.out.print ("Please input sales of sale " + (i + 1) + ": ");
        salesman.setSales (scanner.nextDouble ());
        salesmanList.add (salesman);
    }
    for (Salesman salesman : salesmanList) {
        System.out.println (salesman.getName () + " " + salesman.getSales ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21035120_21035338_29_48
21035120_21035338_60_80
Title: Java JDialogs How To Pass Information Between? 
----------------------------------------

private void init () {
    this.setDefaultCloseOperation (EXIT_ON_CLOSE);
    this.setBounds (100, 100, 200, 200);
    final JButton button = new JButton ("Show modal dialog");
    button.addActionListener (new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent arg0) {
            Dialog d = new Dialog ();
            d.setVisible (true);
            button.setText (d.getDialogResult ().value);
            revalidate ();
            repaint ();
        }}

    );
    this.add (button);
}
----------------------------------------

private void init () {
    this.setModal (true);
    this.setSize (new Dimension (100, 100));
    JButton ok = new JButton ("ok");
    ok.addActionListener (new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent arg0) {
            result = new DialogResult ();
            result.value = tf.getText ();
            setVisible (false);
        }}

    );
    JPanel p = new JPanel ();
    p.setLayout (new BoxLayout (p, BoxLayout.Y_AXIS));
    p.add (tf);
    p.add (ok);
    this.add (p);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21048126_21048388_1_13
21048126_21048862_1_11
Title: The program RedCross.java is supposed to display a red cross on a white background. It's only making the top left of the cross 
----------------------------------------

public void paintComponent (Graphics g) {
    super.paintComponent (g);
    int strokeSize = getWidth () / 10;
    if (getHeight () / 10 < strokeSize) {
        strokeSize = getHeight () / 10;
    }
    int xCenter = (getWidth () - strokeSize) / 2;
    int yCenter = (getHeight () - strokeSize) / 2;
    g.setColor (Color.RED);
    g.fillRect (0, yCenter, getWidth (), strokeSize);
    g.fillRect (xCenter, 0, strokeSize, getHeight ());
}
----------------------------------------

@Override
protected void paintComponent (Graphics g) {
    super.paintComponent (g);
    int xCenter = getWidth () / 2;
    int yCenter = getHeight () / 2;
    int rectThickness = 10;
    int rectLength = 100;
    g.setColor (Color.RED);
    g.fillRect (xCenter - rectLength / 2, yCenter - rectThickness / 2, rectLength, rectThickness);
    g.fillRect (xCenter - rectThickness / 2, yCenter - rectLength / 2, rectThickness, rectLength);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21048870_21048964_5_28
21048870_21049014_1_21
Title: Guess a number program with Java 
----------------------------------------

public static void main (String args []) {
    Scanner keyboard = new Scanner (System.in);
    int a = 1 + (int) (Math.random () * 99), guess, count = 0;
    System.out.println ("I am thinking of a number from 1 to 100 ... guess what it is ?");
    while ((guess = keyboard.nextInt ()) != a) {
        if (guess > a) {
            System.out.println ("lower!");
        } else {
            System.out.println ("higher!");
        }
        count ++;
    }
    System.out.println ("Congratulations.   You guessed the number with " + count + " tries!");
}
----------------------------------------

public static void main (String args []) {
    Scanner keyboard = new Scanner (System.in);
    int count = 0;
    int a = 1 + (int) (Math.random () * 99);
    int guess = 0;
    System.out.println ("I am thinking of a number from 1 to 100" + " ... guess what it is ?");
    while (guess != a) {
        guess = keyboard.nextInt ();
        count ++;
        if (guess > a) {
            System.out.println ("lower!");
        } else if (guess < a) {
            System.out.println ("higher!");
        }

    }
    System.out.println ("Congratulations. You guessed the number with " + count + " tries!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21048936_21049310_1_15
21048936_21049433_1_18
Title: Limiting number of character on println() statement in Java 
----------------------------------------

public static void wrapText (String text, int width) {
    int count = 0;
    for (String word : text.split ("\\s+")) {
        if (count + word.length () >= width) {
            System.out.println ();
            count = 0;
        }
        System.out.print (word);
        System.out.print (' ');
        count += word.length () + 1;
    }
}
----------------------------------------

public static void wrapText (String text, int width) throws Exception {
    String [] words = text.split (" ");
    int acsize = 0;
    for (String word : words) {
        if (word.length () > width) {
            throw new Exception ("Word longer than with!");
        }
        if (acsize + word.length () <= width) {
            System.out.print (word + " ");
            acsize += word.length () + 1;
        } else {
            System.out.println ();
            System.out.print (word + " ");
            acsize = word.length () + 1;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21052691_21052756_1_31
21052691_21052758_15_28
Title: Adding counter to a loop inside a recursive method - Java 
----------------------------------------

public int lookup () {
    File folder = new File (c);
    int count = 0;
    if (folder.listFiles () == null) {
        return count;
    }
    for (File file : folder.listFiles ()) {
        String path = file.getPath ();
        if (path.contains (".mp3") || path.contains (".wav") || path.contains (".flac") || path.contains (".m4a") || path.contains (".ogg") || path.contains (".wma")) {
            System.out.println (path);
            count ++;
        }
        if (file.isDirectory ()) {
            count += new MusicGetter (path).lookup ();
        }
    }
    return count;
    System.out.println ("count is" + count);
}
----------------------------------------

private void lookup (File folder) {
    if (folder == null) return;

    for (File file : folder.listFiles ()) {
        if (file.isDirectory ()) {
            lookup (file);
        } else if (file.getName ().matches (".*\\.(mp3|wav|flac|m4a|ogg|wma)$")) {
            System.out.println (file);
            count ++;
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21057972_21058016_38_50
21057972_21058016_54_64
Title: "Java timer that starts when you click space ends after clicking space again" 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (reverse && count > 0) {
        count -= 0.01;
        timerLabel.setText (String.format ("%.2f", count));
        if (count <= 0) {
            reverse = false;
        }
    }
    if (! reverse) {
        count += 0.01;
        timerLabel.setText (String.format ("%.2f", count));
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (! started) {
        timer.start ();
        started = true;
    } else {
        timer.stop ();
        count = 15.00;
        started = false;
        reverse = true;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21064339_21064381_1_11
21064339_21064434_1_13
Title: StackOverflowError - Java Recursion 
----------------------------------------

private static void generateSequence (int num) {
    System.out.println (num);
    if (num == 1) return;

    if (num % 2 == 0) {
        generateSequence (num / 2);
    } else {
        generateSequence (num * 3 + 1);
    }
}
----------------------------------------

private static void generateSequence (int num) {
    System.out.println (num);
    if (num == 1) {
        return;
    }
    if (num % 2 == 0) {
        generateSequence (num / 2);
    } else {
        generateSequence (num * 3 + 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21064586_40049449_106_118
21064586_40049449_154_163
Title: "BigQuery job status is always ""PENDING""" 
----------------------------------------

public boolean equals (final Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass () != obj.getClass ()) {
        return false;
    }
    if (! super.equals (obj)) {
        return false;
    }
    final DelayedJobCheck other = (DelayedJobCheck) obj;
    return Objects.equals (jobId, other.jobId);
}
----------------------------------------

public boolean equals (final Object obj) {
    if (this == obj) {
        return true;
    }
    if (! (obj instanceof DelayedImpl)) {
        return false;
    }
    final DelayedImpl delayed = (DelayedImpl) obj;
    return expiry == delayed.expiry;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21065566_21065860_1_17
21065566_21066199_1_20
Title: How to reverse a HashMap? 
----------------------------------------

public void reverseMap () {
    NavigableMap < Integer, String > map = new TreeMap < Integer, String > ();
    LinkedHashMap < Integer, String > reverseMap = new LinkedHashMap < Integer, String > ();
    map.put (1, "Apple");
    map.put (2, "Ball");
    map.put (3, "Cat");
    NavigableSet < Integer > keySet = map.navigableKeySet ();
    Iterator < Integer > iterator = keySet.descendingIterator ();
    Integer i;
    while (iterator.hasNext ()) {
        i = iterator.next ();
        reverseMap.put (i, map.get (i));
    }
    System.out.println (reverseMap);
}
----------------------------------------

public void reverseMap () {
    NavigableMap < Integer, String > map = new TreeMap < Integer, String > ();
    LinkedHashMap < Integer, String > reverseMap = new LinkedHashMap < Integer, String > ();
    map.put (1, "Apple");
    map.put (2, "Ball");
    map.put (3, "Cat");
    NavigableSet < Integer > keySet = map.navigableKeySet ();
    Iterator < Integer > forwardIterator = keySet.iterator ();
    Iterator < Integer > reverseIterator = keySet.descendingIterator ();
    Integer i;
    Integer j;
    while (forwardIterator.hasNext ()) {
        i = forwardIterator.next ();
        j = reverseIterator.next ();
        reverseMap.put (i, map.get (j));
    }
    System.out.println (reverseMap);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21076274_21076390_1_15
21076274_21076653_16_29
Title: a method always returns false even if i enter valid values 
----------------------------------------

public static boolean isValidMove (int nRow, int nCol) {
    boolean blValid = false;
    if ((nRow >= 0 && nRow < 3) && (nCol >= 0 && nCol < 3)) {
        if (arTakenSquare [nRow] [nCol] == false) {
            blValid = true;
        }
    }
    return blValid;
}
----------------------------------------

public static boolean isValidMove (int row, int col) {
    boolean valid = false;
    if (row >= 0 && row < 3 && col >= 0 && col < 3) {
        if (takenSquare [row] [col] == false) {
            valid = true;
        } else {
            System.out.println ("isValidMove square already taken for row=" + row + ", col=" + col);
        }
    } else {
        System.out.println ("isValidMove out of range argument row=" + row + " col=" + col);
    }
    System.out.println ("Returning " + valid + " from isValidMove(" + row + "," + col + ")");
    return valid;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21083810_21084772_16_25
21083810_21084772_27_42
Title: find path with largest sum in grid moving downwards from top row towards bottom 
----------------------------------------

public static Pair maxSum (int grid [] []) {
    int r = grid.length - 1;
    int c = grid [0].length - 1;
    Pair max = null;
    for (int i = 0;
    i <= c; i ++) {
        Pair val = maxSum (grid, r, i);
        if (max == null || val.b > max.b) max = val;

    }
    return max;
}
----------------------------------------

public static Pair maxSum (int grid [] [], int row, int col) {
    if (col < 0 || row < 0 || row > grid [0].length || col > grid.length) {
        return new Pair (new ArrayList (), 0);
    } else {
        Pair p = maxPair (maxSum (grid, row - 1, col - 1), maxSum (grid, row - 1, col), maxSum (grid, row - 1, col + 1));
        p.a.add (grid [row] [col]);
        p.b += grid [row] [col];
        return p;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21093987_21094167_1_12
21093987_21094307_17_29
Title: Why is my HashMap not getting populated 
----------------------------------------

public static BigInteger factorial (BigInteger input) {
    if (list.containsKey (input.intValue ())) return list.get (input.intValue ());

    if (input.equals (BigInteger.ONE)) {
        list.put (input.intValue (), BigInteger.ONE);
        return BigInteger.ONE;
    }
    BigInteger output = input.multiply (factorial (input.subtract (BigInteger.ONE)));
    list.put (input.intValue (), output);
    return output;
}
----------------------------------------

public static BigInteger factorial (BigInteger input) {
    if (map.containsKey (input.intValue ())) {
        System.out.println ("from map");
        return map.get (input.intValue ());
    }
    if (input.equals (new BigInteger ("1"))) return new BigInteger ("1");

    BigInteger output;
    output = input.multiply (factorial (input.subtract (new BigInteger ("1"))));
    map.put (input.intValue (), output);
    System.out.println ("from new calculating");
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21096570_36856661_106_124
21096570_36856661_77_89
Title: Fast database managment between server database and android device database 
----------------------------------------

public ArrayList < Categories > getCategories (String sql) {
    Cursor c = myDataBase.rawQuery (sql, null);
    ArrayList < Categories > categoriesList = new ArrayList < Categories > ();
    if (c != null && c.getCount () > 0) {
        c.moveToFirst ();
        do {
            Categories model = new Categories ();
            model.setCat_id (c.getString (c.getColumnIndex (DatabaseStaticField.KEY_CATEGORY_ID)));
            model.setCat_name (c.getString (c.getColumnIndex (DatabaseStaticField.KEY_CATEGORY_NAME)));
            model.setParent_id (c.getString (c.getColumnIndex (DatabaseStaticField.KEY_CATEGORY_PARENTID)));
            categoriesList.add (model);
        } while (c.moveToNext ());
    }
    c.close ();
    return categoriesList;
}
----------------------------------------

public List < String > getCategories (String sql, String columName) {
    Cursor c = myDataBase.rawQuery (sql, null);
    List < String > mVillageList = new ArrayList < String > ();
    if (c != null && c.getCount () > 0) {
        c.moveToFirst ();
        do {
            mVillageList.add (c.getString (c.getColumnIndex (columName)));
        } while (c.moveToNext ());
    }
    c.close ();
    return mVillageList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21121002_21121307_7_23
21121002_21121348_1_21
Title: JButton doesnt show text; fills JFrame 
----------------------------------------

public static void main (String [] args) {
    JFrame mainWindow = new JFrame ("8 Game");
    mainWindow.setLayout (new FlowLayout (FlowLayout.CENTER));
    mainWindow.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    mainWindow.setSize (200, 200);
    JButton eightButton = new JButton ("8");
    eightButton.setText ("8");
    eightButton.setSize (30, 30);
    eightButton.setBounds (5, 5, 25, 25);
    mainWindow.add (eightButton);
    mainWindow.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            JFrame mainWindow = new JFrame ("8 Game");
            mainWindow.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            mainWindow.setLayout (new FlowLayout ());
            mainWindow.setLocationRelativeTo (null);
            JButton eightButton = new JButton ("8");
            eightButton.setText ("8");
            eightButton.setContentAreaFilled (false);
            eightButton.setAction (new buttonAction ());
            mainWindow.add (eightButton);
            mainWindow.pack ();
            mainWindow.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2112539_13050922_12_21
2112539_13629643_3_13
Title: Duplicate values in the Set collection? 
----------------------------------------

public static void main (String [] args) {
    Set < Test > s = new HashSet < Test > ();
    Test t1 = new Test ();
    Test t2 = t1;
    s.add (t1);
    s.add (t2);
    System.out.println (s);
    System.out.println ("--Done--");
}
----------------------------------------

public static void main (String [] args) {
    Set set = new HashSet ();
    set.add (new AB (10, "pawan@email"));
    set.add (new AB (10, "pawan@email"));
    set.add (new AB (10, "pawan@email"));
    Iterator it = set.iterator ();
    while (it.hasNext ()) {
        Object o = it.next ();
        System.out.println (o);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21128287_21128317_103_122
21128287_21128317_81_102
Title: How do I write basic Doubly Linked List functions in Java? 
----------------------------------------

public boolean remove (String element) {
    if (isEmpty ()) return false;

    Node target = first;
    while (target != null && ! element.equals (target.value)) target = target.next;

    if (target == null) return false;

    Node pred = target.prev;
    Node succ = target.next;
    if (pred == null) first = succ;
    else pred.next = succ;

    if (succ == null) last = pred;
    else succ.prev = pred;

    return true;
}
----------------------------------------

public String remove (int index) {
    if (index < 0 || index >= size ()) {
        String message = String.valueOf (index);
        throw new IndexOutOfBoundsException (message);
    }
    Node target = first;
    for (int k = 1;
    k <= index; k ++) {
        target = target.next;
    }
    String element = target.value;
    Node pred = target.prev;
    Node succ = target.next;
    if (pred == null) first = succ;
    else pred.next = succ;

    if (succ == null) last = pred;
    else succ.prev = pred;

    return element;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21128287_21128317_26_34
21128287_21131529_31_42
Title: How do I write basic Doubly Linked List functions in Java? 
----------------------------------------

public int size () {
    int count = 0;
    Node p = first;
    while (p != null) {
        count ++;
        p = p.next;
    }
    return count;
}
----------------------------------------

public int size () {
    node current = header.next;
    int quantity = 0;
    if (current.data == null) {
        return 0;
    }
    while (current.data != null) {
        current = current.next;
        quantity ++;
    }
    return quantity;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21128287_21128317_35_45
21128287_21128317_46_71
Title: How do I write basic Doubly Linked List functions in Java? 
----------------------------------------

public void add (String e) {
    if (isEmpty ()) {
        last = new Node (e);
        first = last;
    } else {
        last.next = new Node (e, null, last);
        last = last.next;
    }
}
----------------------------------------

public void add (int index, String e) {
    if (index < 0 || index > size ()) {
        String message = String.valueOf (index);
        throw new IndexOutOfBoundsException (message);
    }
    if (index == 0) {
        Node p = first;
        first = new Node (e, p, null);
        if (p != null) p.prev = first;

        if (last == null) last = first;

        return;
    }
    Node pred = first;
    for (int k = 1;
    k <= index - 1; k ++) {
        pred = pred.next;
    }
    Node succ = pred.next;
    Node middle = new Node (e, succ, pred);
    pred.next = middle;
    if (succ == null) last = middle;
    else succ.prev = middle;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21135671_21965018_12_22
21135671_44577266_1_13
Title: How to secure multiple endpoint with SecureAnnotationsInterceptor (Apache CXF)? 
----------------------------------------

public void setSecuredObject (Object object, Map < String, String > rolesMap) {
    Class < ? > cls = ClassHelper.getRealClass (object);
    findRoles (cls, rolesMap);
    if (rolesMap.isEmpty ()) {
        LOG.warning ("The roles map is empty, the service object is not protected");
    } else if (LOG.isLoggable (Level.FINE)) {
        for (Map.Entry < String, String > entry : rolesMap.entrySet ()) {
            LOG.fine ("Method: " + entry.getKey () + ", roles: " + entry.getValue ());
        }
    }

}
----------------------------------------

public void setSecuredObject (Object object, Map < String, String > rolesMap) {
    Class < ? > cls = ClassHelper.getRealClass (object);
    Map < String, String > instanceRoleMap = new HashMap < > ();
    findRoles (cls, instanceRoleMap);
    if (instanceRoleMap.isEmpty ()) {
        LOG.warning ("The roles map is empty, the service object is not protected");
    } else if (LOG.isLoggable (Level.FINE)) {
        for (Map.Entry < String, String > entry : instanceRoleMap.entrySet ()) {
            LOG.fine ("Method: " + entry.getKey () + ", roles: " + entry.getValue ());
        }
    }

    rolesMap.putAll (instanceRoleMap);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21138019_21138144_6_64
21138019_38098748_4_59
Title: print an empty diamond with stars(*) 
----------------------------------------

void main () throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("ENTER THE HEIGHT ");
    int ht = Integer.parseInt (br.readLine ());
    int space = ht - 1;
    int midspace = - 1;
    int k;
    for (int c = 1;
    c <= Math.ceil (ht / 2);) {
        for (int i = space;
        i >= 1; i -= 2) {
            int i2 = i;
            while (i2 != 0) {
                System.out.print (" ");
                i2 --;
            }
            System.out.print ("*");
            for (int j = 1;
            j <= midspace; j ++) System.out.print (" ");

            if (c != 1) System.out.print ("*");

            midspace += 4;
            System.out.println ();
            c ++;
        }
    }
    for (int c = 1;
    c <= Math.floor (ht / 2);) {
        for (int i = 0;
        i <= space; i += 2) {
            int i2 = i;
            while (i2 != 0) {
                System.out.print (" ");
                i2 --;
            }
            midspace -= 4;
            System.out.print ("*");
            for (k = midspace + 4; k >= 1; k --) System.out.print (" ");

            if ((c != (ht / 2 + 1))) System.out.print ("*");

            System.out.println ();
            c ++;
        }
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    int a, b;
    System.out.println ("Please enter the number of rows : ");
    a = sc.nextInt ();
    for (int i = 1;
    i <= a; i ++) {
        int l = a;
        while (l > i) {
            System.out.print (" ");
            l --;
        }
        int k = 0;
        if (i <= 2) {
            while (k != i) {
                System.out.print (" *");
                k ++;
            }
        } else {
            System.out.print (" *");
            int m = 1;
            while (m < i) {
                System.out.print ("  ");
                m ++;
            }
            System.out.print ("*");
        }
        System.out.println ();
    }
    for (int i = a - 1;
    i >= 1; i --) {
        int l = a - i;
        while (l != 0) {
            System.out.print (" ");
            l --;
        }
        int k = 0;
        if (! (i > 2)) {
            if (i == 2) {
                System.out.print (" *  *");
            }
            if (i == 1) {
                System.out.print (" *");
            }
        } else {
            int g = 0;
            System.out.print ("*");
            while (g < i) {
                System.out.print ("  ");
                g ++;
            }
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21138019_21138144_6_64
21138019_40193644_3_56
Title: print an empty diamond with stars(*) 
----------------------------------------

void main () throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("ENTER THE HEIGHT ");
    int ht = Integer.parseInt (br.readLine ());
    int space = ht - 1;
    int midspace = - 1;
    int k;
    for (int c = 1;
    c <= Math.ceil (ht / 2);) {
        for (int i = space;
        i >= 1; i -= 2) {
            int i2 = i;
            while (i2 != 0) {
                System.out.print (" ");
                i2 --;
            }
            System.out.print ("*");
            for (int j = 1;
            j <= midspace; j ++) System.out.print (" ");

            if (c != 1) System.out.print ("*");

            midspace += 4;
            System.out.println ();
            c ++;
        }
    }
    for (int c = 1;
    c <= Math.floor (ht / 2);) {
        for (int i = 0;
        i <= space; i += 2) {
            int i2 = i;
            while (i2 != 0) {
                System.out.print (" ");
                i2 --;
            }
            midspace -= 4;
            System.out.print ("*");
            for (k = midspace + 4; k >= 1; k --) System.out.print (" ");

            if ((c != (ht / 2 + 1))) System.out.print ("*");

            System.out.println ();
            c ++;
        }
    }
}
----------------------------------------

public static void main (String [] args) throws NumberFormatException, IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("ENTER THE HEIGHT ");
    int ht = Integer.parseInt (br.readLine ());
    int space = ht - 1;
    int midspace = - 1;
    for (int i = 0;
    i < space; i += 2) {
        for (int j = i;
        j < space; j ++) {
            System.out.print (" ");
        }
        System.out.print ("*");
        for (int j = 1;
        j <= midspace; j ++) System.out.print (" ");

        midspace += 4;
        if (i != 0) System.out.print ("*");

        System.out.println ();
    }
    for (int i = 0;
    i <= space; i += 2) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        System.out.print ("*");
        for (int k = 0;
        k < midspace; k ++) System.out.print (" ");

        midspace -= 4;
        if (i != space) System.out.print ("*");

        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21138019_38098748_4_59
21138019_40193644_3_56
Title: print an empty diamond with stars(*) 
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    int a, b;
    System.out.println ("Please enter the number of rows : ");
    a = sc.nextInt ();
    for (int i = 1;
    i <= a; i ++) {
        int l = a;
        while (l > i) {
            System.out.print (" ");
            l --;
        }
        int k = 0;
        if (i <= 2) {
            while (k != i) {
                System.out.print (" *");
                k ++;
            }
        } else {
            System.out.print (" *");
            int m = 1;
            while (m < i) {
                System.out.print ("  ");
                m ++;
            }
            System.out.print ("*");
        }
        System.out.println ();
    }
    for (int i = a - 1;
    i >= 1; i --) {
        int l = a - i;
        while (l != 0) {
            System.out.print (" ");
            l --;
        }
        int k = 0;
        if (! (i > 2)) {
            if (i == 2) {
                System.out.print (" *  *");
            }
            if (i == 1) {
                System.out.print (" *");
            }
        } else {
            int g = 0;
            System.out.print ("*");
            while (g < i) {
                System.out.print ("  ");
                g ++;
            }
            System.out.print ("*");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) throws NumberFormatException, IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("ENTER THE HEIGHT ");
    int ht = Integer.parseInt (br.readLine ());
    int space = ht - 1;
    int midspace = - 1;
    for (int i = 0;
    i < space; i += 2) {
        for (int j = i;
        j < space; j ++) {
            System.out.print (" ");
        }
        System.out.print ("*");
        for (int j = 1;
        j <= midspace; j ++) System.out.print (" ");

        midspace += 4;
        if (i != 0) System.out.print ("*");

        System.out.println ();
    }
    for (int i = 0;
    i <= space; i += 2) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" ");
        }
        System.out.print ("*");
        for (int k = 0;
        k < midspace; k ++) System.out.print (" ");

        midspace -= 4;
        if (i != space) System.out.print ("*");

        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21147347_21147407_1_10
21147347_21147424_1_12
Title: Check if data is added to array java 
----------------------------------------

public boolean addModule (String naamModule, int modulenr, int aantalUren, int weekBegin, int weekEind, String opleiding, int opleidingJaar) {
    boolean added = true;
    try {
        modules.add (new ModuleData (naamModule, modulenr, aantalUren, weekBegin, weekEind, opleiding, opleidingJaar));
    } catch (Exception e) {
        added = false;
    }
    return added;
}
----------------------------------------

public void addModule (String naamModule, int modulenr, int aantalUren, int weekBegin, int weekEind, String opleiding, int opleidingJaar) {
    boolean dataAdded = false;
    try {
        dataAdded = modules.add (new ModuleData (naamModule, modulenr, aantalUren, weekBegin, weekEind, opleiding, opleidingJaar));
    } catch (Exception e) {
    }
    if (dataAdded) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21159296_21159757_1_22
21159296_21159788_1_14
Title: Sort multiple fields in lists with null value use Collections.sort() in java? 
----------------------------------------

@Override
public int compareTo (Student o) {
    if (name == null || o.getName () == null) {
        return 1;
    }
    if (! name.equalsIgnoreCase (o.getName ())) {
        return name.compareToIgnoreCase (o.getName ());
    }
    if (age == null || o.getAge () == null) {
        return 1;
    }
    if (! age.equalsIgnoreCase (o.getAge ())) {
        return age.compareToIgnoreCase (o.getAge ());
    }
    if (classStudy == null || o.getClassStudy () == null) {
        return 1;
    }
    if (! classStudy.equalsIgnoreCase (o.getClassStudy ())) {
        return classStudy.compareToIgnoreCase (o.getClassStudy ());
    }
    return 0;
}
----------------------------------------

@Override
public int compareTo (Student s) {
    int c1 = this.compare (this.name, s.name);
    if (c1 != 0) {
        return c1;
    } else {
        int c2 = this.compare (this.age, s.age);
        if (c2 != 0) {
            return c2;
        } else {
            return this.compare (this.classStudy, s.classStudy);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21171274_21171519_1_24
21171274_21171893_2_14
Title: unwind to the first frame of a recursive call in Java? 
----------------------------------------

public static void myMeth (int n, boolean firstCall) {
    try {
        if (n < 0) return;
        else if (n == SOME_CONST) throw new UnsupportedOperationException ();
        else myMeth (n - 1, false);

    } catch (UnsupportedOperationException e) {
        if (firstCall) {
        } else {
            throw e;
        }
    }
}
----------------------------------------

public static boolean myMeth (int n, int depth) {
    if (n < 0) return true;
    else if (n == SOME_CONST) return false;

    boolean success = myMeth (n - 1, depth + 1);
    if (depth == 0 && ! success) {
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21176667_21218764_23_37
21176667_21218764_55_66
Title: Get response from MySQL multithreading Java 
----------------------------------------

public void run () {
    try {
        while (! stop) {
            if (q.peek () == null) {
                new Thread (new GetUpdates (this)).start ();
            }
            long l = q.take ();
            System.out.println ("Main sleep: " + l);
            sleep (l);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    List < Long > vlist = new ArrayList < Long > ();
    sleep (10);
    Random r = new Random ();
    for (int i = 0;
    i < 3; i ++) {
        vlist.add (new Long (r.nextInt (10)));
    }
    System.out.println ("Adding " + vlist.size () + " more sleeps.");
    processor.add (vlist);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21195088_21195146_1_15
21195088_21195165_2_11
Title: how can I return as a string with everything in the array per row? 
----------------------------------------

public static String returnWhatIsInTheArrayAsAString (char [] [] a) {
    StringBuilder whatIs = new StringBuilder ();
    for (int i = 0;
    i < a.length; i ++) {
        whatIs.append ('{ ');
        for (int j = 0;
        j < a [i].length; j ++) {
            whatIs.append (a [i] [j]);
            if (j < a [i].length - 1) {
                whatIs.append (', ');
            }
        }
        whatIs.append (' }\n');
    }
    return whatIs.toString ();
}
----------------------------------------

public static String returnWhatIsInTheArrayAsAString (char [] [] a) {
    String whatIs = " ";
    for (int i = 0;
    i < a.length; i ++) {
        for (int j = 0;
        j < a [i].length; j ++) {
            whatIs += a [i] [j];
        }
        whatIs += "\n";
    }
    return whatIs + "\n";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21205161_21205183_44_52
21205161_21205183_55_63
Title: How to fix a DB probblem in Java (with DERBY DB)? 
----------------------------------------

public static void close (Statement st) {
    try {
        if (st != null) {
            st.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21213162_21267879_12_21
21213162_49556693_1_19
Title: PHP base_convert in Java 
----------------------------------------

public static String base_convert (final String inputValue, final int fromBase, final int toBase) {
    if (fromBase < 2 || fromBase > 36 || toBase < 2 || toBase > 36) {
        return null;
    }
    String ret = null;
    try {
        ret = Integer.toString (Integer.parseInt (inputValue, fromBase), toBase);
    } catch (Exception ex) {
    }
    return ret;
}
----------------------------------------

public static String base_convert (final String inputValue, final int fromBase, final int toBase) {
    if (StringUtils.isEmpty (inputValue)) return inputValue;

    if (fromBase < 2 || fromBase > 36 || toBase < 2 || toBase > 36) {
        return null;
    }
    String ret = null;
    final String numberInputValue = inputValue.replaceAll ("\\D", "");
    try {
        Integer in = Integer.parseInt (numberInputValue, fromBase);
        ret = Integer.toString (in, toBase);
    } catch (Exception ignored) {
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21213854_21213884_16_38
21213854_21214076_23_65
Title: Button ActionListener error 
----------------------------------------

public SevenContinents () {
    setSize (1500, 1000);
    button1.addActionListener (this);
    button2.addActionListener (this);
    button3.addActionListener (this);
    button4.addActionListener (this);
    button5.addActionListener (this);
    button6.addActionListener (this);
    button7.addActionListener (this);
    setLayout (new FlowLayout ());
    add (button1);
    add (button2);
    add (button3);
    add (button4);
    add (button5);
    add (button6);
    add (button7);
}
----------------------------------------

public SevenContinents () {
    setSize (500, 500);
    setDefaultCloseOperation (SevenContinents.EXIT_ON_CLOSE);
    button1 = new JButton ("1");
    button2 = new JButton ("2");
    button3 = new JButton ("3");
    button4 = new JButton ("4");
    button5 = new JButton ("5");
    button6 = new JButton ("6");
    button7 = new JButton ("7");
    JPanel pane = new JPanel ();
    pane.add (button1);
    pane.add (button2);
    pane.add (button3);
    pane.add (button4);
    pane.add (button5);
    pane.add (button6);
    pane.add (button7);
    Container cp = getContentPane ();
    cp.add (pane);
    button1.addActionListener (new addButtonWatcher ());
    button2.addActionListener (new addButtonWatcher ());
    button3.addActionListener (new addButtonWatcher ());
    button4.addActionListener (new addButtonWatcher ());
    button5.addActionListener (new addButtonWatcher ());
    button6.addActionListener (new addButtonWatcher ());
    button7.addActionListener (new addButtonWatcher ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21213854_21213884_40_64
21213854_21214076_70_102
Title: Button ActionListener error 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == button1) {
        System.out.println ("You chose...");
    }
    if (e.getSource () == button2) {
        System.out.println ("You chose...");
    }
    if (e.getSource () == button3) {
        System.out.println ("You chose...");
    }
    if (e.getSource () == button4) {
        System.out.println ("You chose...");
    }
    if (e.getSource () == button5) {
        System.out.println ("You chose...");
    }
    if (e.getSource () == button6) {
        System.out.println ("You chose...");
    }
    if (e.getSource () == button7) {
        System.out.println ("You chose...");
    }
}
----------------------------------------

public void actionPerformed (ActionEvent a) {
    Object buttonPressed = a.getSource ();
    if (buttonPressed.equals (button1)) {
    }
    if (buttonPressed.equals (button2)) {
        System.out.println ("You chose...");
    }
    if (buttonPressed.equals (button3)) {
        System.out.println ("You chose...");
    }
    if (buttonPressed == button4) {
        System.out.println ("You chose...");
    }
    if (buttonPressed == button5) {
        System.out.println ("You chose...");
    }
    if (buttonPressed == button6) {
        System.out.println ("You chose...");
    }
    if (buttonPressed == button7) {
        System.out.println ("You chose...");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21236793_21280326_100_113
21236793_21280326_129_143
Title: how to minus off the previous keyed value(store in database) 
----------------------------------------

public void afterTextChanged (Editable editable) {
    if (! priceEdit.getText ().toString ().trim ().equalsIgnoreCase ("") && ! priceEdit.getText ().toString ().trim ().equalsIgnoreCase (null)) priceEditStr = priceEdit.getText ().toString ().trim ();

    if (! pumpEdit.getText ().toString ().trim ().equalsIgnoreCase ("") && ! pumpEdit.getText ().toString ().trim ().equalsIgnoreCase (null)) pumpEditStr = pumpEdit.getText ().toString ().trim ();

    if (! priceEdit.getText ().toString ().trim ().equalsIgnoreCase ("") && ! pumpEdit.getText ().toString ().trim ().equalsIgnoreCase ("")) {
        result = Double.parseDouble (priceEditStr) * Double.parseDouble (pumpEditStr);
        costView.setText (" " + result);
    }
}
----------------------------------------

public void afterTextChanged (Editable editable) {
    if (! priceEdit.getText ().toString ().trim ().equalsIgnoreCase ("")) priceEditStr = priceEdit.getText ().toString ().trim ();

    if (! pumpEdit.getText ().toString ().trim ().equalsIgnoreCase ("")) pumpEditStr = pumpEdit.getText ().toString ().trim ();

    if (! priceEdit.getText ().toString ().trim ().equalsIgnoreCase ("") && ! pumpEdit.getText ().toString ().trim ().equalsIgnoreCase ("")) {
        result = Double.parseDouble (priceEditStr) * Double.parseDouble (pumpEditStr);
        costView.setText (" " + result);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21238083_21238292_20_76
21238083_21238945_13_57
Title: How to align buttons and checkboxes in different lines in java 
----------------------------------------

public caseconversion () {
    super ("Case Converter");
    HandlerClass handler = new HandlerClass ();
    getContentPane ().setLayout (new BoxLayout (getContentPane (), BoxLayout.X_AXIS));
    verticalBox = Box.createVerticalBox ();
    getContentPane ().add (verticalBox);
    horizontalBox = Box.createHorizontalBox ();
    verticalBox.add (horizontalBox);
    horizontalStrut_1 = Box.createHorizontalStrut (20);
    horizontalBox.add (horizontalStrut_1);
    tf = new JTextField ("Hello whats up Buddy !!", 25);
    tf.setMaximumSize (new Dimension (2147483647, 60));
    horizontalBox.add (tf);
    tf.setFont (new Font ("Segoe Print", Font.PLAIN, 15));
    horizontalStrut = Box.createHorizontalStrut (20);
    horizontalBox.add (horizontalStrut);
    horizontalBox_1 = Box.createHorizontalBox ();
    verticalBox.add (horizontalBox_1);
    boldbox = new JCheckBox ("Bold");
    horizontalBox_1.add (boldbox);
    italicbox = new JCheckBox ("Italic");
    horizontalBox_1.add (italicbox);
    italicbox.addItemListener (handler);
    boldbox.addItemListener (handler);
    horizontalBox_2 = Box.createHorizontalBox ();
    verticalBox.add (horizontalBox_2);
    up = new JButton ("Upper Case");
    horizontalBox_2.add (up);
    low = new JButton ("Lowercase");
    horizontalBox_2.add (low);
    verticalStrut = Box.createVerticalStrut (20);
    verticalBox.add (verticalStrut);
    low.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent event) {
            tf.setText (tf.getText ().toLowerCase ());
        }}

    );
    up.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent event) {
            tf.setText (tf.getText ().toUpperCase ());
        }}

    );
}
----------------------------------------

public caseconversion () {
    super ("Case Converter");
    setLayout (new GridLayout (0, 1));
    JPanel p = null;
    p = new JPanel ();
    tf = new JTextField ("Hello whats up Buddy !!", 25);
    tf.setFont (new Font ("Segoe Print", Font.PLAIN, 15));
    p.add (tf);
    add (p);
    p = new JPanel ();
    boldbox = new JCheckBox ("Bold");
    italicbox = new JCheckBox ("Italic");
    p.add (boldbox);
    p.add (italicbox);
    add (p);
    p = new JPanel ();
    up = new JButton ("Upper Case");
    low = new JButton ("Lowercase");
    p.add (up);
    p.add (low);
    add (p);
    HandlerClass handler = new HandlerClass ();
    boldbox.addItemListener (handler);
    italicbox.addItemListener (handler);
    up.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent event) {
            tf.setText (tf.getText ().toUpperCase ());
        }}

    );
    low.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent event) {
            tf.setText (tf.getText ().toLowerCase ());
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21238083_21238292_80_94
21238083_21238945_61_75
Title: How to align buttons and checkboxes in different lines in java 
----------------------------------------

public void itemStateChanged (ItemEvent event) {
    Font font = null;
    if (boldbox.isSelected () && italicbox.isSelected ()) font = new Font ("Segoe Print", Font.BOLD + Font.ITALIC, 15);
    else if (boldbox.isSelected ()) font = new Font ("Segoe Print", Font.BOLD, 15);
    else if (italicbox.isSelected ()) font = new Font ("Segoe Print", Font.ITALIC, 15);
    else font = new Font ("Segoe Print", Font.PLAIN, 15);

    tf.setFont (font);
}
----------------------------------------

public void itemStateChanged (ItemEvent event) {
    Font font = null;
    if (boldbox.isSelected () && italicbox.isSelected ()) font = new Font ("Segoe Print", Font.BOLD + Font.ITALIC, 15);
    else if (boldbox.isSelected ()) font = new Font ("Segoe Print", Font.BOLD, 15);
    else if (italicbox.isSelected ()) font = new Font ("Segoe Print", Font.ITALIC, 15);
    else font = new Font ("Segoe Print", Font.PLAIN, 15);

    tf.setFont (font);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21240030_21240911_1_22
21240030_33802408_1_20
Title: Append nodes into existing XML File with java 
----------------------------------------

public static void main (String [] args) {
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance ();
    DocumentBuilder db = null;
    try {
        db = dbf.newDocumentBuilder ();
        Document doc = db.parse ("input.xml");
        NodeList people = doc.getElementsByTagName ("people");
        people.item (0).appendChild (createPersonElement (doc, "Tom", "Hanks", true, "tt001.jpg"));
        System.out.println (nodeToString (doc));
    } catch (SAXException e) {
    } catch (IOException e) {
    } catch (TransformerException e) {
    } catch (ParserConfigurationException e1) {
    }
}
----------------------------------------

public static void main (String [] args) throws ParserConfigurationException, IOException {
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance ();
    DocumentBuilder db;
    db = null;
    try {
        db = dbf.newDocumentBuilder ();
        Document doc = db.parse ("input.xml");
        NodeList people = doc.getElementsByTagName ("people");
        people.item (0).appendChild (createPersonElement (doc, "Tom", "Hanks", true, "tt001.jpg"));
        Transformer transformer = TransformerFactory.newInstance ().newTransformer ();
        transformer.setOutputProperty (OutputKeys.INDENT, "yes");
        DOMSource source = new DOMSource (doc);
        StreamResult console = new StreamResult (System.out);
        transformer.transform (source, console);
        StreamResult file = new StreamResult (new File ("input.xml"));
        transformer.transform (source, file);
    } catch (SAXException | IOException | TransformerException | ParserConfigurationException e) {
        System.out.println (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21243729_21335365_12_25
21243729_21352320_21_28
Title: CountNonDivisible - Codility training task 
----------------------------------------

public static void main (String [] args) {
    int A [] = new int [5];
    A [0] = 3;
    A [1] = 1;
    A [2] = 2;
    A [3] = 3;
    A [4] = 6;
    Solution s = new Solution ();
    int B [] = s.solution (A);
    System.out.println ("Input  : " + Arrays.toString (A));
    System.out.println ("Result : " + Arrays.toString (B));
}
----------------------------------------

public static void main (String args []) {
    int [] A = new int [] {3, 1, 2, 3, 6};
    Solution s = new Solution ();
    int [] B = s.solution (A);
    for (int i = 0;
    i < B.length; i ++) {
        System.out.println (B [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21243729_21335365_27_48
21243729_21352320_7_19
Title: CountNonDivisible - Codility training task 
----------------------------------------

public int [] solution (int [] A) {
    Set < Integer > setA = asSet (A);
    List < Set < Integer > > divisors = computeDivisors (A.length * 2);
    int occurrences [] = computeOccurrences (A);
    int nonDivisors [] = new int [A.length];
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        Set < Integer > d = divisors.get (value);
        int totalOccurances = 0;
        for (Integer divisor : d) {
            if (setA.contains (divisor)) {
                totalOccurances += occurrences [divisor];
            }
        }
        nonDivisors [i] = A.length - totalOccurances;
    }
    return nonDivisors;
}
----------------------------------------

public int [] solution (int [] A) {
    int [] div = new int [A.length];
    for (int e = 0;
    e < div.length; e ++) {
        div [e] = 0;
        for (int i = 0;
        i < A.length; i ++) {
            int dividend = A [e];
            if (dividend % A [i] != 0) {
                div [e] += 1;
            }
        }
    }
    return div;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21243729_21335365_27_48
21243729_21390607_1_26
Title: CountNonDivisible - Codility training task 
----------------------------------------

public int [] solution (int [] A) {
    Set < Integer > setA = asSet (A);
    List < Set < Integer > > divisors = computeDivisors (A.length * 2);
    int occurrences [] = computeOccurrences (A);
    int nonDivisors [] = new int [A.length];
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        Set < Integer > d = divisors.get (value);
        int totalOccurances = 0;
        for (Integer divisor : d) {
            if (setA.contains (divisor)) {
                totalOccurances += occurrences [divisor];
            }
        }
        nonDivisors [i] = A.length - totalOccurances;
    }
    return nonDivisors;
}
----------------------------------------

public int [] solution (int [] A) {
    int [] [] D = new int [A.length * 2 + 1] [2];
    for (int i = 0;
    i < A.length; i ++) {
        D [A [i]] [0] ++;
        D [A [i]] [1] = - 1;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (D [A [i]] [1] == - 1) {
            D [A [i]] [1] = 0;
            for (int j = 1;
            j <= Math.sqrt (A [i]); j ++) {
                if (A [i] % j == 0 && A [i] / j != j) {
                    D [A [i]] [1] += D [j] [0];
                    D [A [i]] [1] += D [A [i] / j] [0];
                } else if (A [i] % j == 0 && A [i] / j == j) {
                    D [A [i]] [1] += D [j] [0];
                }

            }
        }
    }
    for (int i = 0;
    i < A.length; i ++) {
        A [i] = A.length - D [A [i]] [1];
    }
    return A;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21243729_21335365_27_48
21243729_41923781_5_47
Title: CountNonDivisible - Codility training task 
----------------------------------------

public int [] solution (int [] A) {
    Set < Integer > setA = asSet (A);
    List < Set < Integer > > divisors = computeDivisors (A.length * 2);
    int occurrences [] = computeOccurrences (A);
    int nonDivisors [] = new int [A.length];
    for (int i = 0;
    i < A.length; i ++) {
        int value = A [i];
        Set < Integer > d = divisors.get (value);
        int totalOccurances = 0;
        for (Integer divisor : d) {
            if (setA.contains (divisor)) {
                totalOccurances += occurrences [divisor];
            }
        }
        nonDivisors [i] = A.length - totalOccurances;
    }
    return nonDivisors;
}
----------------------------------------

public int [] solution (int [] A) {
    int N = A.length;
    HashMap < Integer, Integer > count = new HashMap < > ();
    for (int i : A) {
        Integer key = count.get (i);
        if (key != null) {
            count.put (i, key + 1);
        } else {
            count.put (i, 1);
        }
    }
    HashMap < Integer, Integer > divs = new HashMap < > ();
    for (Integer n : count.keySet ()) {
        int sum = 0;
        int j = 1;
        while (j * j <= n) {
            if (n % j == 0) {
                if (count.containsKey (j)) {
                    sum += count.get (j);
                }
                int k = n / j;
                if (k != j) {
                    if (count.containsKey (k)) {
                        sum += count.get (k);
                    }
                }
            }
            j ++;
        }
        divs.put (n, N - sum);
    }
    for (int i = 0;
    i < A.length; i ++) {
        A [i] = divs.get (A [i]);
    }
    return A;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21243729_21352320_7_19
21243729_21390607_1_26
Title: CountNonDivisible - Codility training task 
----------------------------------------

public int [] solution (int [] A) {
    int [] div = new int [A.length];
    for (int e = 0;
    e < div.length; e ++) {
        div [e] = 0;
        for (int i = 0;
        i < A.length; i ++) {
            int dividend = A [e];
            if (dividend % A [i] != 0) {
                div [e] += 1;
            }
        }
    }
    return div;
}
----------------------------------------

public int [] solution (int [] A) {
    int [] [] D = new int [A.length * 2 + 1] [2];
    for (int i = 0;
    i < A.length; i ++) {
        D [A [i]] [0] ++;
        D [A [i]] [1] = - 1;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (D [A [i]] [1] == - 1) {
            D [A [i]] [1] = 0;
            for (int j = 1;
            j <= Math.sqrt (A [i]); j ++) {
                if (A [i] % j == 0 && A [i] / j != j) {
                    D [A [i]] [1] += D [j] [0];
                    D [A [i]] [1] += D [A [i] / j] [0];
                } else if (A [i] % j == 0 && A [i] / j == j) {
                    D [A [i]] [1] += D [j] [0];
                }

            }
        }
    }
    for (int i = 0;
    i < A.length; i ++) {
        A [i] = A.length - D [A [i]] [1];
    }
    return A;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21243729_21352320_7_19
21243729_41923781_5_47
Title: CountNonDivisible - Codility training task 
----------------------------------------

public int [] solution (int [] A) {
    int [] div = new int [A.length];
    for (int e = 0;
    e < div.length; e ++) {
        div [e] = 0;
        for (int i = 0;
        i < A.length; i ++) {
            int dividend = A [e];
            if (dividend % A [i] != 0) {
                div [e] += 1;
            }
        }
    }
    return div;
}
----------------------------------------

public int [] solution (int [] A) {
    int N = A.length;
    HashMap < Integer, Integer > count = new HashMap < > ();
    for (int i : A) {
        Integer key = count.get (i);
        if (key != null) {
            count.put (i, key + 1);
        } else {
            count.put (i, 1);
        }
    }
    HashMap < Integer, Integer > divs = new HashMap < > ();
    for (Integer n : count.keySet ()) {
        int sum = 0;
        int j = 1;
        while (j * j <= n) {
            if (n % j == 0) {
                if (count.containsKey (j)) {
                    sum += count.get (j);
                }
                int k = n / j;
                if (k != j) {
                    if (count.containsKey (k)) {
                        sum += count.get (k);
                    }
                }
            }
            j ++;
        }
        divs.put (n, N - sum);
    }
    for (int i = 0;
    i < A.length; i ++) {
        A [i] = divs.get (A [i]);
    }
    return A;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21243729_21390607_1_26
21243729_41923781_5_47
Title: CountNonDivisible - Codility training task 
----------------------------------------

public int [] solution (int [] A) {
    int [] [] D = new int [A.length * 2 + 1] [2];
    for (int i = 0;
    i < A.length; i ++) {
        D [A [i]] [0] ++;
        D [A [i]] [1] = - 1;
    }
    for (int i = 0;
    i < A.length; i ++) {
        if (D [A [i]] [1] == - 1) {
            D [A [i]] [1] = 0;
            for (int j = 1;
            j <= Math.sqrt (A [i]); j ++) {
                if (A [i] % j == 0 && A [i] / j != j) {
                    D [A [i]] [1] += D [j] [0];
                    D [A [i]] [1] += D [A [i] / j] [0];
                } else if (A [i] % j == 0 && A [i] / j == j) {
                    D [A [i]] [1] += D [j] [0];
                }

            }
        }
    }
    for (int i = 0;
    i < A.length; i ++) {
        A [i] = A.length - D [A [i]] [1];
    }
    return A;
}
----------------------------------------

public int [] solution (int [] A) {
    int N = A.length;
    HashMap < Integer, Integer > count = new HashMap < > ();
    for (int i : A) {
        Integer key = count.get (i);
        if (key != null) {
            count.put (i, key + 1);
        } else {
            count.put (i, 1);
        }
    }
    HashMap < Integer, Integer > divs = new HashMap < > ();
    for (Integer n : count.keySet ()) {
        int sum = 0;
        int j = 1;
        while (j * j <= n) {
            if (n % j == 0) {
                if (count.containsKey (j)) {
                    sum += count.get (j);
                }
                int k = n / j;
                if (k != j) {
                    if (count.containsKey (k)) {
                        sum += count.get (k);
                    }
                }
            }
            j ++;
        }
        divs.put (n, N - sum);
    }
    for (int i = 0;
    i < A.length; i ++) {
        A [i] = divs.get (A [i]);
    }
    return A;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21249104_21249146_1_14
21249104_21249234_1_20
Title: Java Character in String to integer 
----------------------------------------

public static void main (String [] args) throws IOException {
    String alpha = "ABCDEFG1234567890";
    for (int i = 0;
    i < alpha.length (); i ++) {
        char c = alpha.charAt (i);
        if (Character.isDigit ((c))) {
            System.out.println (c);
        } else {
            System.out.println ((int) c - 55);
        }
    }
}
----------------------------------------

public static void main (String args []) throws FileNotFoundException {
    String alpha = "ABCDEFG1234567890";
    for (int i = 0;
    i < alpha.length (); i ++) {
        char c = alpha.charAt (i);
        if (c >= '1' && c <= '9') {
            System.out.print (c);
        } else {
            int w = (int) c;
            System.out.print (w - 55);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21249104_21249146_1_14
21249104_21249321_1_15
Title: Java Character in String to integer 
----------------------------------------

public static void main (String [] args) throws IOException {
    String alpha = "ABCDEFG1234567890";
    for (int i = 0;
    i < alpha.length (); i ++) {
        char c = alpha.charAt (i);
        if (Character.isDigit ((c))) {
            System.out.println (c);
        } else {
            System.out.println ((int) c - 55);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String alpha = "ABCDEFG1234567890";
    for (int i = 0;
    i < alpha.length (); i ++) {
        char c = alpha.charAt (i);
        int w;
        if (Character.isDigit (c)) {
            w = Character.digit (c, 10);
        } else {
            w = (int) c;
            w = w - 55;
        }
        System.out.println (w);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21249104_21249234_1_20
21249104_21249321_1_15
Title: Java Character in String to integer 
----------------------------------------

public static void main (String args []) throws FileNotFoundException {
    String alpha = "ABCDEFG1234567890";
    for (int i = 0;
    i < alpha.length (); i ++) {
        char c = alpha.charAt (i);
        if (c >= '1' && c <= '9') {
            System.out.print (c);
        } else {
            int w = (int) c;
            System.out.print (w - 55);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String alpha = "ABCDEFG1234567890";
    for (int i = 0;
    i < alpha.length (); i ++) {
        char c = alpha.charAt (i);
        int w;
        if (Character.isDigit (c)) {
            w = Character.digit (c, 10);
        } else {
            w = (int) c;
            w = w - 55;
        }
        System.out.println (w);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21260589_21260863_2_11
21260589_21261113_1_13
Title: Sorting a String using java collections 
----------------------------------------

public static void main (String args []) {
    String a = "this is a kiran";
    StringTokenizer st = new StringTokenizer (a);
    ArrayList < String > f = new ArrayList < String > ();
    while (st.hasMoreElements ()) {
        f.add ((String) st.nextElement ());
    }
    Collections.sort (f);
    System.out.println ("after sorting " + f);
}
----------------------------------------

public static void main (String [] arguments) {
    String input = "this is hootberry sause";
    String [] inputArray;
    List < String > inputList = new ArrayList < String > ();
    inputArray = input.split (" ");
    Collections.addAll (inputList, inputArray);
    Collections.sort (inputList);
    System.out.println ("Before sort: " + input);
    System.out.println ("After sort: " + inputList);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21264456_21265083_26_40
21264456_24979102_40_59
Title: Optimizing String manupulation code 
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    String host = "a.b.c.d.e.f";
    String [] tokens = host.split ("\\.");
    String [] result = new String [tokens.length];
    createHostArray (tokens, result, 0);
    for (String s : result) {
        System.out.println (s);
    }
}
----------------------------------------

public static void main (String a []) {
    long startTime = System.nanoTime ();
    String [] array = createHostArray ("a.b.c.d.e.f");
    long endTime = System.nanoTime ();
    long timeByFirstApproach = endTime - startTime;
    for (String s : array) {
        System.out.println (s);
    }
    System.out.println ("=====");
    startTime = System.nanoTime ();
    array = betterCreateHostArray ("a.b.c.d.e.f");
    endTime = System.nanoTime ();
    long timeBySecondApproach = endTime - startTime;
    for (String s : array) {
        System.out.println (s);
    }
    System.out.println (String.format ("Time taken by first approach=[%d] nano seconds and\n" + "Time taken by second approach=[%d] nano seconds", timeByFirstApproach, timeBySecondApproach));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21264456_21265083_7_24
21264456_24979102_7_23
Title: Optimizing String manupulation code 
----------------------------------------

public static void createHostArray (String [] root, String [] result, int index) {
    String host = "";
    int i = index;
    if (index == root.length) {
        return;
    }
    for (; i < root.length - 1; i ++) {
        host += root [i] + ".";
    }
    if (i < root.length) {
        host += root [i];
    }
    result [index] = host;
    createHostArray (root, result, ++ index);
}
----------------------------------------

public static String [] createHostArray (String host) {
    String [] stringArr = host.split ("\\.");
    String [] hostArray = new String [stringArr.length];
    int hostIndex = 0;
    for (int index = stringArr.length - 1;
    index >= 0; index --) {
        if (hostIndex == 0) {
            hostArray [hostIndex] = stringArr [index];
        } else {
            hostArray [hostIndex] = stringArr [index] + "." + hostArray [hostIndex - 1];
        }
        hostIndex ++;
    }
    Collections.reverse (Arrays.asList (hostArray));
    return hostArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21268973_21269676_8_19
21268973_51592188_56_67
Title: Live update Pie Chart 
----------------------------------------

public void addData (String name, double value) {
    for (Data d : pieChartData) {
        if (d.getName ().equals (name)) {
            d.setPieValue (value);
            return;
        }
    }
    naiveAddData (name, value);
}
----------------------------------------

public void addData (String name, double value) {
    for (javafx.scene.chart.PieChart.Data d : pieChartData) {
        if (d.getName ().equals (name)) {
            d.setPieValue (value);
            return;
        }
    }
    naiveAddData (name, value);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21270760_21275318_3_18
21270760_21277600_11_60
Title: Jackson databind read json tri-dimensional array 
----------------------------------------

public static void main (String [] args) throws JsonProcessingException {
    int [] [] [] a = new int [2] [3] [2];
    a [0] [2] [0] = 3;
    ObjectMapper om = new ObjectMapper ();
    String json = om.writeValueAsString (a);
    System.out.println (json);
    a = om.readValue (json, int [] [] [].class);
    System.out.println (a [0] [2] [0]);
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Object > map1 = new HashMap < String, Object > ();
    Map < String, Object > map2 = new HashMap < String, Object > ();
    Map < String, Map > map3 = new HashMap < String, Map > ();
    map1.put ("0", "22,32,21");
    map1.put ("1", "2762,352,231");
    map2.put ("0", "222,232,621");
    map2.put ("1", "272,37762,261");
    map3.put ("0", map1);
    map3.put ("1", map2);
    JSONObject jsonobj = JSONObject.fromObject (map3);
    Iterator it = jsonobj.keys ();
    int maxZ = 0;
    while (it.hasNext ()) {
        JSONObject jobj = (JSONObject) jsonobj.get (it.next ());
        Iterator it2 = jobj.keys ();
        while (it2.hasNext ()) {
            if (((String) jobj.get (it2.next ())).split (",").length > maxZ) {
                maxZ = ((String) jobj.get (it2.next ())).split (",").length;
            }
        }
    }
    int [] [] [] result = new int [jsonobj.size ()] [2] [maxZ];
    int x = 0, y = 0, z = 0;
    it = jsonobj.keys ();
    while (it.hasNext ()) {
        JSONObject jobj = (JSONObject) jsonobj.get (it.next ());
        Iterator it2 = jobj.keys ();
        y = 0;
        while (it2.hasNext ()) {
            String [] s = ((String) jobj.get (it2.next ())).split (",");
            z = 0;
            for (String str : s) {
                result [x] [y] [z] = Integer.parseInt (str);
                z ++;
            }
            y ++;
        }
        x ++;
    }
    for (int i = 0;
    i < x; i ++) {
        for (int j = 0;
        j < y; j ++) {
            for (int k = 0;
            k < z; k ++) {
                System.out.print (result [i] [j] [k]);
                System.out.print (" ");
            }
            System.out.println ("\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21272833_21272994_230_250
21272833_21272994_261_281
Title: Multiple Swing Timers Cause Multiple Actions to Happen 
----------------------------------------

public CountDownTimer (int hours, int minutes, int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
    this.hours = hours;
    this.minutes = minutes;
    this.seconds = seconds;
}
----------------------------------------

public CountDownTimer (int minutes, int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
    this.hours = 0;
    this.minutes = minutes;
    this.seconds = seconds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21272833_21272994_230_250
21272833_21272994_291_306
Title: Multiple Swing Timers Cause Multiple Actions to Happen 
----------------------------------------

public CountDownTimer (int hours, int minutes, int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
    this.hours = hours;
    this.minutes = minutes;
    this.seconds = seconds;
}
----------------------------------------

public CountDownTimer (int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    this.hours = 0;
    this.minutes = 0;
    this.seconds = seconds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21272833_21272994_230_250
21272833_21272994_329_361
Title: Multiple Swing Timers Cause Multiple Actions to Happen 
----------------------------------------

public CountDownTimer (int hours, int minutes, int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
    this.hours = hours;
    this.minutes = minutes;
    this.seconds = seconds;
}
----------------------------------------

public CountDownTimer (String startTime) {
    String [] parts = startTime.split (":");
    if (parts.length == 1) {
        seconds = Integer.parseInt (parts [0]);
    }
    if (parts.length == 2) {
        minutes = Integer.parseInt (parts [0]);
        seconds = Integer.parseInt (parts [1]);
    }
    if (parts.length == 3) {
        hours = Integer.parseInt (parts [0]);
        minutes = Integer.parseInt (parts [1]);
        seconds = Integer.parseInt (parts [2]);
    }
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21272833_21272994_261_281
21272833_21272994_291_306
Title: Multiple Swing Timers Cause Multiple Actions to Happen 
----------------------------------------

public CountDownTimer (int minutes, int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
    this.hours = 0;
    this.minutes = minutes;
    this.seconds = seconds;
}
----------------------------------------

public CountDownTimer (int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    this.hours = 0;
    this.minutes = 0;
    this.seconds = seconds;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21272833_21272994_261_281
21272833_21272994_329_361
Title: Multiple Swing Timers Cause Multiple Actions to Happen 
----------------------------------------

public CountDownTimer (int minutes, int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
    this.hours = 0;
    this.minutes = minutes;
    this.seconds = seconds;
}
----------------------------------------

public CountDownTimer (String startTime) {
    String [] parts = startTime.split (":");
    if (parts.length == 1) {
        seconds = Integer.parseInt (parts [0]);
    }
    if (parts.length == 2) {
        minutes = Integer.parseInt (parts [0]);
        seconds = Integer.parseInt (parts [1]);
    }
    if (parts.length == 3) {
        hours = Integer.parseInt (parts [0]);
        minutes = Integer.parseInt (parts [1]);
        seconds = Integer.parseInt (parts [2]);
    }
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21272833_21272994_291_306
21272833_21272994_329_361
Title: Multiple Swing Timers Cause Multiple Actions to Happen 
----------------------------------------

public CountDownTimer (int seconds) {
    super ();
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    this.hours = 0;
    this.minutes = 0;
    this.seconds = seconds;
}
----------------------------------------

public CountDownTimer (String startTime) {
    String [] parts = startTime.split (":");
    if (parts.length == 1) {
        seconds = Integer.parseInt (parts [0]);
    }
    if (parts.length == 2) {
        minutes = Integer.parseInt (parts [0]);
        seconds = Integer.parseInt (parts [1]);
    }
    if (parts.length == 3) {
        hours = Integer.parseInt (parts [0]);
        minutes = Integer.parseInt (parts [1]);
        seconds = Integer.parseInt (parts [2]);
    }
    if (seconds < 0 || minutes < 0 || hours < 0) {
        throw new IllegalArgumentException ("Time cannot be negative");
    }
    if (seconds >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 seconds");
    }
    if (minutes >= 60) {
        throw new IllegalArgumentException ("Cannot have more than 60 minutes");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21272833_21272994_406_413
21272833_21272994_426_433
Title: Multiple Swing Timers Cause Multiple Actions to Happen 
----------------------------------------

public int compareTo (CountDownTimer other) {
    if (this.convertToSeconds () > other.convertToSeconds ()) {
        return 1;
    } else if (this.convertToSeconds () < other.convertToSeconds ()) {
        return - 1;
    }

    return 0;
}
----------------------------------------

public static int compareTo (CountDownTimer t1, CountDownTimer t2) {
    if (t1.convertToSeconds () > t2.convertToSeconds ()) {
        return 1;
    } else if (t1.convertToSeconds () < t2.convertToSeconds ()) {
        return - 1;
    }

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2127377_41803888_106_148
2127377_41803995_60_95
Title: How can I implement extendible hashing in java? 
----------------------------------------

public void remove (Object key) {
    int bucket = hash (key);
    if (table [bucket] == null) {
        return;
    }
    if (table [bucket].key.equals (key)) {
        table [bucket] = table [bucket].next;
        count --;
        return;
    }
    ListNode prev = table [bucket];
    ListNode curr = prev.next;
    while (curr != null && ! curr.key.equals (key)) {
        curr = curr.next;
        prev = curr;
    }
    if (curr != null) {
        prev.next = curr.next;
        count --;
    }
}
----------------------------------------

public V remove (K key) {
    int bucketIndex = getBucketIndex (key);
    HashNode < K, V > head = bucketArray.get (bucketIndex);
    HashNode < K, V > prev = null;
    while (head != null) {
        if (head.key.equals (key)) break;

        prev = head;
        head = head.next;
    }
    if (head == null) return null;

    size --;
    if (prev != null) prev.next = head.next;
    else bucketArray.set (bucketIndex, head.next);

    return head.value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2127377_41803888_87_104
2127377_41803995_98_114
Title: How can I implement extendible hashing in java? 
----------------------------------------

public Object get (Object key) {
    int bucket = hash (key);
    ListNode list = table [bucket];
    while (list != null) {
        if (list.key.equals (key)) return list.value;

        list = list.next;
    }
    return null;
}
----------------------------------------

public V get (K key) {
    int bucketIndex = getBucketIndex (key);
    HashNode < K, V > head = bucketArray.get (bucketIndex);
    while (head != null) {
        if (head.key.equals (key)) return head.value;

        head = head.next;
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2127377_41803995_164_176
2127377_41804133_9_56
Title: How can I implement extendible hashing in java? 
----------------------------------------

public static void main (String [] args) {
    Map < String, Integer > map = new Map < > ();
    map.add ("this", 1);
    map.add ("coder", 2);
    map.add ("this", 4);
    map.add ("hi", 5);
    System.out.println (map.size ());
    System.out.println (map.remove ("this"));
    System.out.println (map.remove ("this"));
    System.out.println (map.size ());
    System.out.println (map.isEmpty ());
}
----------------------------------------

public static void main (String [] args) {
    HashTable table = new HashTable (2);
    String key, value;
    while (true) {
        System.out.println ("\nMenu:");
        System.out.println ("   1. test put(key,value)");
        System.out.println ("   2. test get(key)");
        System.out.println ("   3. test containsKey(key)");
        System.out.println ("   4. test remove(key)");
        System.out.println ("   5. show complete contents of hash table.");
        System.out.println ("   6. EXIT");
        System.out.print ("Enter your command:  ");
        switch (TextIO.getlnInt ()) {
            case 1 :
                System.out.print ("\n   Key = ");
                key = TextIO.getln ();
                System.out.print ("   Value = ");
                value = TextIO.getln ();
                table.put (key, value);
                break;
            case 2 :
                System.out.print ("\n   Key = ");
                key = TextIO.getln ();
                System.out.println ("   Value is " + table.get (key));
                break;
            case 3 :
                System.out.print ("\n   Key = ");
                key = TextIO.getln ();
                System.out.println ("   containsKey(" + key + ") is " + table.containsKey (key));
                break;
            case 4 :
                System.out.print ("\n   Key = ");
                key = TextIO.getln ();
                table.remove (key);
                break;
            case 5 :
                table.dump ();
                break;
            case 6 :
                return;
            default :
                System.out.println ("   Illegal command.");
                break;
        }
        System.out.println ("\nHash table size is " + table.size ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21282432_31380092_10_26
21282432_38491239_12_29
Title: HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set 
----------------------------------------

private static SessionFactory buildSessionFactory () {
    try {
        Configuration configuration = new Configuration ();
        configuration.configure ("hibernate.cfg.xml");
        ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder ().applySettings (configuration.getProperties ()).build ();
        return configuration.buildSessionFactory (serviceRegistry);
    } catch (Throwable ex) {
        System.err.println ("Initial SessionFactory creation failed." + ex);
        throw new ExceptionInInitializerError (ex);
    }
}
----------------------------------------

private static SessionFactory buildSessionFactory () {
    try {
        Configuration configuration = new Configuration ();
        configuration.configure ();
        System.out.println ("Properties: " + configuration.getProperties ());
        StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder ().applySettings (configuration.getProperties ()).build ();
        return configuration.buildSessionFactory (serviceRegistry);
    } catch (Throwable ex) {
        System.err.println ("Initial SessionFactory creation failed." + ex);
        throw new ExceptionInInitializerError (ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21293528_21296240_1_11
21293528_21297194_1_24
Title: How to display a text in textArea? 
----------------------------------------

public void readCertificate (File f) throws Exception {
    CertificateFactory cf = CertificateFactory.getInstance ("X.509");
    BufferedInputStream in = new BufferedInputStream (new FileInputStream (f));
    while (in.available () > 0) {
        Certificate cert = cf.generateCertificate (in);
        String c = String.valueOf (cert.getPublicKey ());
        JTextArea textArea = new JTextArea ();
        textArea.setText (c);
    }
    in.close ();
}
----------------------------------------

public void readCertificate (final File f) {
    SwingWorker < Void, String > worker = new SwingWorker < Void, String > () {
        @Override
        protected Void doInBackground () throws Exception {
            CertificateFactory cf = CertificateFactory.getInstance ("X.509");
            BufferedInputStream in = new BufferedInputStream (new FileInputStream (f));
            while (in.available () > 0) {
                Certificate cert = cf.generateCertificate (in);
                String c = String.valueOf (cert.getPublicKey ());
                publish (c);
            }
            in.close ();
            return null;
        }@Override
        protected void process (List < String > chunks) {
            for (String key : chunks) {
                textArea.append (key + System.lineSeparator ());
            }
        }}

    ;
    worker.execute ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21294112_21294290_24_37
21294112_21294331_5_16
Title: Looking to create a generic variable (i hope that is the right term) 
----------------------------------------

public void onTick (long millisUntilFinished) {
    DecimalFormat dfmin = new DecimalFormat ("0");
    DecimalFormat dfsec = new DecimalFormat ("00");
    double seconds = TimeUnit.MILLISECONDS.toSeconds (millisUntilFinished) % 60;
    double min = TimeUnit.MILLISECONDS.toMinutes (millisUntilFinished);
    if (lastPressedButton == red) {
        redTimer.setText (String.valueOf (dfmin.format (min)) + ":" + String.valueOf (dfsec.format (seconds)));
    } else if (lastPressedButton == blue) {
        blueTimer.setText (String.valueOf (dfmin.format (min)) + ":" + String.valueOf (dfsec.format (seconds)));
    }

}
----------------------------------------

public void onTick (long millisUntilFinished) {
    DecimalFormat dfmin = new DecimalFormat ("0");
    DecimalFormat dfsec = new DecimalFormat ("00");
    double seconds = TimeUnit.MILLISECONDS.toSeconds (millisUntilFinished) % 60;
    double min = TimeUnit.MILLISECONDS.toMinutes (millisUntilFinished);
    if (viewToUpdate != null) {
        viewToUpdate.setText (String.valueOf (dfmin.format (min)) + ":" + String.valueOf (dfsec.format (seconds)));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21294112_21294290_51_61
21294112_21294290_67_76
Title: Looking to create a generic variable (i hope that is the right term) 
----------------------------------------

public void onClick (View v) {
    lastPressedButton = blue;
    if (blueTimer.getText ().toString ().contains ("5:00")) {
        cd.start ();
    } else {
        cd.cancel ();
        cd.onFinish ();
    }
}
----------------------------------------

public void onClick (View v) {
    lastPressedButton = red;
    if (redTimer.getText ().toString ().contains ("5:00")) {
        cd.start ();
    } else {
        cd.cancel ();
        cd.onFinish ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21297067_23692538_1_15
21297067_32309781_2_10
Title: Single Number II from leetcode 
----------------------------------------

int singleNumber (int A [], int n) {
    int one = 0, two = 0, three = ~ 0;
    for (int i = 0;
    i < n; ++ i) {
        int cur = A [i];
        int one_next = (one & (~ cur)) | (cur & three);
        int two_next = (two & (~ cur)) | (cur & one);
        int three_next = (three & (~ cur)) | (cur & two);
        one = one_next;
        two = two_next;
        three = three_next;
    }
    return one;
}
----------------------------------------

public int singleNumber (int [] nums) {
    int p = 0;
    int q = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        p = q & (p ^ nums [i]);
        q = p | (q ^ nums [i]);
    }
    return q;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21298547_21298737_15_27
21298547_21298761_9_18
Title: JFrame and Rectangle 
----------------------------------------

public GUI2 () {
    button = new JButton ("YO");
    frame = new JFrame ();
    this.add (button);
    frame.add (this);
    frame.setSize (500, 500);
    frame.setLocation (500, 200);
    frame.setVisible (true);
}
----------------------------------------

public GUI2 () {
    button.addActionListener (new Action ());
    JFrame frame = new JFrame ("Game");
    frame.add (new DrawPanel (), BorderLayout.CENTER);
    frame.add (button, BorderLayout.SOUTH);
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21299107_21299334_1_32
21299107_21299467_8_19
Title: Find duplicates in an ArrayList and set the duplicates to new ArrayList dynamically using Java 
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Map < String, List < String > > map = getMap (list);
    printMapAsLists (map);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21303696_21304566_1_17
21303696_24398104_1_14
Title: add the sum of all numbers from a given number to a given number? 
----------------------------------------

public static double sumOfAll (int one, int two) {
    double bigNumber;
    double smallNumber;
    if (one < two) {
        bigNumber = two;
        smallNumber = one;
    } else {
        bigNumber = one;
        smallNumber = two;
    }
    return ((smallNumber + bigNumber) / 2) * (bigNumber - smallNumber + 1);
}
----------------------------------------

public static int sumOfAll (int one, int two) {
    int bigNumber;
    int smallNumber;
    if (one < two) {
        bigNumber = two;
        smallNumber = one;
    } else {
        bigNumber = one;
        smallNumber = two;
    }
    return (int) (((smallNumber + bigNumber) / 2.0) * (bigNumber - smallNumber + 1.0));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21304738_21304901_1_21
21304738_21304907_1_27
Title: Searching for element(s) in an array and then return a new array with index(s) 
----------------------------------------

public int [] searchArray (int [] myArr, int num) {
    int n = 0;
    for (int i = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            n ++;
        }
    }
    int [] indices = new int [n];
    n = 0;
    for (int i = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            indices [n ++] = i;
        }
    }
    return indices;
}
----------------------------------------

public void searchArray (int [] myArr, int num) {
    int counter = 0;
    for (int i = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            counter ++;
        }
    }
    int [] newArr = new int [counter];
    for (int i = 0, j = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            newArr [j ++] = i;
        }
    }
    for (int value : newArr) {
        System.out.printf (" %d ", value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21304738_21304901_1_21
21304738_21304961_1_18
Title: Searching for element(s) in an array and then return a new array with index(s) 
----------------------------------------

public int [] searchArray (int [] myArr, int num) {
    int n = 0;
    for (int i = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            n ++;
        }
    }
    int [] indices = new int [n];
    n = 0;
    for (int i = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            indices [n ++] = i;
        }
    }
    return indices;
}
----------------------------------------

public int [] searchArray (int [] myArr, int num) {
    int counter = 0;
    for (int i = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            counter ++;
        }
    }
    int [] newArr = new int [counter];
    for (int i = 0, j = 0;
    i < myArr.length; i ++) {
        if (myArr [i] == num) {
            newArr [j ++] = i;
        }
    }
    return newArr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21320108_21320196_2_9
21320108_21320216_10_29
Title: Number Generator with User Input 
----------------------------------------

public static void main (String [] args) {
    int min = 50;
    int max = 100;
    for (int i = 0;
    i < 10; i ++) {
        int rnd = (int) ((Math.random () * (max + 1 - min))) + min;
        System.out.println (rnd);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input;
    int max, min, range;
    Random gen;
    input = new Scanner (System.in);
    System.out.println ("Please enter a max value: ");
    max = input.nextInt ();
    System.out.println (" Please enter a minimum value: ");
    min = input.nextInt ();
    range = Math.abs (r.nextInt ()) % (max - min + 1) + min;
    System.out.println (" Your generated number is: " + range);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21323037_21323352_1_14
21323037_21323389_1_10
Title: Read text file for integers and storing to array using scanner and exceptions 
----------------------------------------

public static void printArrayAndIntegerCount (Integer [] array, String filename) {
    StringBuilder sb = new StringBuilder ();
    int count = 0;
    for (Integer i : array) {
        if (i != null) {
            count ++;
            sb.append ("index = ").append (i).append (", element = ").append (array [i]).append ("\n");
        } else {
            break;
        }
    }
    System.out.println ("number of integers in file \"" + filename + "\" = " + count);
    System.out.println (sb);
}
----------------------------------------

public static void printArrayAndIntegerCount (Integer [] array, String filename) {
    String message = "";
    int i = 0;
    while (i < array.length && array [i] != null) {
        message = message + "index = " + i + ", element = " + array [i] + "\n";
        i += 1;
    }
    System.out.println ("number of integers in file \"" + filename + "\" = " + i);
    System.out.println (message);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21339342_21340930_12_33
21339342_21341606_14_23
Title: Connect to remote port(Server) from thread in polling 
----------------------------------------

public void SendMessage (String message) {
    boolean isRunning = false;
    try {
        createSocketConnection ();
        isRunning = true;
        while (isRunning) {
            out.write (message.getBytes ());
            out.flush ();
        }
    } catch (java.net.ConnectException conExcp) {
        System.out.println (ex.getMessage ());
        try {
            Thread.sleep (2000);
        } catch (Exception ee) {
        }
    } catch (IOException ex) {
        System.out.println (ex.getMessage ());
    }
}
----------------------------------------

public Boolean SendMessage (String message) {
    Boolean messageSentSuccessfully = false;
    for (String addy : serverAddresses) {
        messageSentSuccessfully = SendMessageToServer (addy, message);
        if (messageSentSuccessfully) {
            break;
        }
    }
    return messageSentSuccessfully;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341027_21341168_1_13
21341027_21341389_10_29
Title: Find indexOf a byte array within another byte array 
----------------------------------------

public int indexOf (byte [] outerArray, byte [] smallerArray) {
    for (int i = 0;
    i < outerArray.length - smallerArray.length + 1; ++ i) {
        boolean found = true;
        for (int j = 0;
        j < smallerArray.length; ++ j) {
            if (outerArray [i + j] != smallerArray [j]) {
                found = false;
                break;
            }
        }
        if (found) return i;

    }
    return - 1;
}
----------------------------------------

public static int indexOf (byte [] data, int start, int stop, byte [] pattern) {
    if (data == null || pattern == null) return - 1;

    int [] failure = computeFailure (pattern);
    int j = 0;
    for (int i = start;
    i < stop; i ++) {
        while (j > 0 && (pattern [j] != '*' && pattern [j] != data [i])) {
            j = failure [j - 1];
        }
        if (pattern [j] == '*' || pattern [j] == data [i]) {
            j ++;
        }
        if (j == pattern.length) {
            return i - pattern.length + 1;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341027_21341168_1_13
21341027_25659067_6_23
Title: Find indexOf a byte array within another byte array 
----------------------------------------

public int indexOf (byte [] outerArray, byte [] smallerArray) {
    for (int i = 0;
    i < outerArray.length - smallerArray.length + 1; ++ i) {
        boolean found = true;
        for (int j = 0;
        j < smallerArray.length; ++ j) {
            if (outerArray [i + j] != smallerArray [j]) {
                found = false;
                break;
            }
        }
        if (found) return i;

    }
    return - 1;
}
----------------------------------------

public static int indexOf (byte [] data, byte [] pattern) {
    int [] failure = computeFailure (pattern);
    int j = 0;
    for (int i = 0;
    i < data.length; i ++) {
        while (j > 0 && pattern [j] != data [i]) {
            j = failure [j - 1];
        }
        if (pattern [j] == data [i]) {
            j ++;
        }
        if (j == pattern.length) {
            return i - pattern.length + 1;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341027_21341168_1_13
21341027_38790765_1_36
Title: Find indexOf a byte array within another byte array 
----------------------------------------

public int indexOf (byte [] outerArray, byte [] smallerArray) {
    for (int i = 0;
    i < outerArray.length - smallerArray.length + 1; ++ i) {
        boolean found = true;
        for (int j = 0;
        j < smallerArray.length; ++ j) {
            if (outerArray [i + j] != smallerArray [j]) {
                found = false;
                break;
            }
        }
        if (found) return i;

    }
    return - 1;
}
----------------------------------------

static int indexOf (byte [] source, int sourceOffset, int sourceCount, byte [] target, int targetOffset, int targetCount, int fromIndex) {
    if (fromIndex >= sourceCount) {
        return (targetCount == 0 ? sourceCount : - 1);
    }
    if (fromIndex < 0) {
        fromIndex = 0;
    }
    if (targetCount == 0) {
        return fromIndex;
    }
    byte first = target [targetOffset];
    int max = sourceOffset + (sourceCount - targetCount);
    for (int i = sourceOffset + fromIndex;
    i <= max; i ++) {
        if (source [i] != first) {
            while (++ i <= max && source [i] != first);

        }
        if (i <= max) {
            int j = i + 1;
            int end = j + targetCount - 1;
            for (int k = targetOffset + 1;
            j < end && source [j] == target [k]; j ++, k ++);

            if (j == end) {
                return i - sourceOffset;
            }
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341027_21341389_10_29
21341027_25659067_6_23
Title: Find indexOf a byte array within another byte array 
----------------------------------------

public static int indexOf (byte [] data, int start, int stop, byte [] pattern) {
    if (data == null || pattern == null) return - 1;

    int [] failure = computeFailure (pattern);
    int j = 0;
    for (int i = start;
    i < stop; i ++) {
        while (j > 0 && (pattern [j] != '*' && pattern [j] != data [i])) {
            j = failure [j - 1];
        }
        if (pattern [j] == '*' || pattern [j] == data [i]) {
            j ++;
        }
        if (j == pattern.length) {
            return i - pattern.length + 1;
        }
    }
    return - 1;
}
----------------------------------------

public static int indexOf (byte [] data, byte [] pattern) {
    int [] failure = computeFailure (pattern);
    int j = 0;
    for (int i = 0;
    i < data.length; i ++) {
        while (j > 0 && pattern [j] != data [i]) {
            j = failure [j - 1];
        }
        if (pattern [j] == data [i]) {
            j ++;
        }
        if (j == pattern.length) {
            return i - pattern.length + 1;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341027_21341389_10_29
21341027_38790765_1_36
Title: Find indexOf a byte array within another byte array 
----------------------------------------

public static int indexOf (byte [] data, int start, int stop, byte [] pattern) {
    if (data == null || pattern == null) return - 1;

    int [] failure = computeFailure (pattern);
    int j = 0;
    for (int i = start;
    i < stop; i ++) {
        while (j > 0 && (pattern [j] != '*' && pattern [j] != data [i])) {
            j = failure [j - 1];
        }
        if (pattern [j] == '*' || pattern [j] == data [i]) {
            j ++;
        }
        if (j == pattern.length) {
            return i - pattern.length + 1;
        }
    }
    return - 1;
}
----------------------------------------

static int indexOf (byte [] source, int sourceOffset, int sourceCount, byte [] target, int targetOffset, int targetCount, int fromIndex) {
    if (fromIndex >= sourceCount) {
        return (targetCount == 0 ? sourceCount : - 1);
    }
    if (fromIndex < 0) {
        fromIndex = 0;
    }
    if (targetCount == 0) {
        return fromIndex;
    }
    byte first = target [targetOffset];
    int max = sourceOffset + (sourceCount - targetCount);
    for (int i = sourceOffset + fromIndex;
    i <= max; i ++) {
        if (source [i] != first) {
            while (++ i <= max && source [i] != first);

        }
        if (i <= max) {
            int j = i + 1;
            int end = j + targetCount - 1;
            for (int k = targetOffset + 1;
            j < end && source [j] == target [k]; j ++, k ++);

            if (j == end) {
                return i - sourceOffset;
            }
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341027_25659067_6_23
21341027_38790765_1_36
Title: Find indexOf a byte array within another byte array 
----------------------------------------

public static int indexOf (byte [] data, byte [] pattern) {
    int [] failure = computeFailure (pattern);
    int j = 0;
    for (int i = 0;
    i < data.length; i ++) {
        while (j > 0 && pattern [j] != data [i]) {
            j = failure [j - 1];
        }
        if (pattern [j] == data [i]) {
            j ++;
        }
        if (j == pattern.length) {
            return i - pattern.length + 1;
        }
    }
    return - 1;
}
----------------------------------------

static int indexOf (byte [] source, int sourceOffset, int sourceCount, byte [] target, int targetOffset, int targetCount, int fromIndex) {
    if (fromIndex >= sourceCount) {
        return (targetCount == 0 ? sourceCount : - 1);
    }
    if (fromIndex < 0) {
        fromIndex = 0;
    }
    if (targetCount == 0) {
        return fromIndex;
    }
    byte first = target [targetOffset];
    int max = sourceOffset + (sourceCount - targetCount);
    for (int i = sourceOffset + fromIndex;
    i <= max; i ++) {
        if (source [i] != first) {
            while (++ i <= max && source [i] != first);

        }
        if (i <= max) {
            int j = i + 1;
            int end = j + targetCount - 1;
            for (int k = targetOffset + 1;
            j < end && source [j] == target [k]; j ++, k ++);

            if (j == end) {
                return i - sourceOffset;
            }
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341466_21341512_1_23
21341466_21341544_1_23
Title: Predicament with arrays and expansion 
----------------------------------------

public int [] above100Degrees () {
    int count = 0;
    for (int temp : temps) {
        if (temp > 100) {
            count ++;
        }
    }
    int [] ret = new int [count];
    int index = 0;
    for (int temp : temps) {
        if (temp > 100) {
            ret [index ++] = temp;
        }
    }
    return ret;
}
----------------------------------------

public int [] above100Degrees () {
    int newArrayLength = 0;
    for (int i = 0;
    i < temps.length; i ++) {
        if (temps [i] > 100) {
            newArrayLength ++;
        }
    }
    int [] blazing = new int [newArrayLength];
    int positionInNewArray = 0;
    for (int i = 0;
    i < temps.length; i ++) {
        if (temps [i] > 100) {
            blazing [positionInNewArray] = temps [i];
            positionInNewArray ++;
        }
    }
    return blazing;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341466_21341512_1_23
21341466_21341761_1_22
Title: Predicament with arrays and expansion 
----------------------------------------

public int [] above100Degrees () {
    int count = 0;
    for (int temp : temps) {
        if (temp > 100) {
            count ++;
        }
    }
    int [] ret = new int [count];
    int index = 0;
    for (int temp : temps) {
        if (temp > 100) {
            ret [index ++] = temp;
        }
    }
    return ret;
}
----------------------------------------

public int [] above100Degrees () {
    int [] blazing = new int [temps.length];
    int count = 0;
    for (int i = 0;
    i < temps.length; i ++) {
        if (temps [i] > 100) {
            blazing [count ++] = temps [i];
        }
    }
    int [] result = new int [count];
    for (int i = 0;
    i < count; i ++) result [i] = blazing [i];

    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21341466_21341544_1_23
21341466_21341761_1_22
Title: Predicament with arrays and expansion 
----------------------------------------

public int [] above100Degrees () {
    int newArrayLength = 0;
    for (int i = 0;
    i < temps.length; i ++) {
        if (temps [i] > 100) {
            newArrayLength ++;
        }
    }
    int [] blazing = new int [newArrayLength];
    int positionInNewArray = 0;
    for (int i = 0;
    i < temps.length; i ++) {
        if (temps [i] > 100) {
            blazing [positionInNewArray] = temps [i];
            positionInNewArray ++;
        }
    }
    return blazing;
}
----------------------------------------

public int [] above100Degrees () {
    int [] blazing = new int [temps.length];
    int count = 0;
    for (int i = 0;
    i < temps.length; i ++) {
        if (temps [i] > 100) {
            blazing [count ++] = temps [i];
        }
    }
    int [] result = new int [count];
    for (int i = 0;
    i < count; i ++) result [i] = blazing [i];

    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21343504_21344112_8_18
21343504_21347688_8_18
Title: Reduce harmonics generating a pure tone in Java 
----------------------------------------

public static double [] generateTone (int bufferSize, int fs, int f0) {
    double [] tone = new double [bufferSize];
    double angle;
    for (int i = 0;
    i < tone.length; i ++) {
        angle = 2 * Math.PI * f0 * i / fs;
        tone [i] = Math.sin (angle);
    }
    return tone;
}
----------------------------------------

public static double [] generateTone (int bufferSize, int fs, double f0) {
    double [] tone = new double [bufferSize];
    double angle;
    for (int i = 0;
    i < tone.length; i ++) {
        angle = 2 * Math.PI * f0 * i / fs;
        tone [i] = Math.sin (angle);
    }
    return tone;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21344558_21355847_1_13
21344558_24097597_3_17
Title: getting force close error on back key 
----------------------------------------

@Override
public boolean onKeyDown (int keyCode, KeyEvent event) {
    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack ()) {
        myWebView.goBack ();
        MainActivity.this.finish ();
        return true;
    }
    return super.onKeyDown (keyCode, event);
}
----------------------------------------

@Override
public boolean onKeyDown (int keyCode, KeyEvent event) {
    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack ()) {
        myWebView.goBack ();
        return true;
    }
    if (keyCode != KeyEvent.KEYCODE_BACK) {
        return MainActivity.onKeyDown (keyCode, event);
    } else {
        myWebView.destroy ();
        MainActivity.finish ();
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21344558_21355847_1_13
21344558_24097773_1_17
Title: getting force close error on back key 
----------------------------------------

@Override
public boolean onKeyDown (int keyCode, KeyEvent event) {
    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack ()) {
        myWebView.goBack ();
        MainActivity.this.finish ();
        return true;
    }
    return super.onKeyDown (keyCode, event);
}
----------------------------------------

@Override
public boolean onKeyDown (int keyCode, KeyEvent event) {
    if (myWebView != null) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack ()) {
            myWebView.goBack ();
            finish ();
            return true;
        }
    } else {
        android.util.Log.w ("MyActivity", "myWebView is null!!");
    }
    return super.onKeyDown (keyCode, event);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21344558_24097597_3_17
21344558_24097773_1_17
Title: getting force close error on back key 
----------------------------------------

@Override
public boolean onKeyDown (int keyCode, KeyEvent event) {
    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack ()) {
        myWebView.goBack ();
        return true;
    }
    if (keyCode != KeyEvent.KEYCODE_BACK) {
        return MainActivity.onKeyDown (keyCode, event);
    } else {
        myWebView.destroy ();
        MainActivity.finish ();
        return false;
    }
}
----------------------------------------

@Override
public boolean onKeyDown (int keyCode, KeyEvent event) {
    if (myWebView != null) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack ()) {
            myWebView.goBack ();
            finish ();
            return true;
        }
    } else {
        android.util.Log.w ("MyActivity", "myWebView is null!!");
    }
    return super.onKeyDown (keyCode, event);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21345246_21345270_1_10
21345246_21345272_1_10
Title: Program only works whe negative numbers entered in array last 
----------------------------------------

public static double computePositiveSum (double [] num, int count) {
    double pos = 0;
    for (int i = 0;
    i < count; i ++) {
        if (num [i] > 0) {
            pos = pos + num [i];
        }
    }
    return pos;
}
----------------------------------------

public static double computePositiveSum (double [] num) {
    double sum = 0.0;
    for (double d : num) {
        if (d > 0) {
            sum += d;
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21352455_21353120_16_26
21352455_21353205_70_78
Title: Scaling image through thread - JAVA 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new SplashScreen ();
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new SplashScreen ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21352455_21353120_30_48
21352455_21353205_11_27
Title: Scaling image through thread - JAVA 
----------------------------------------

public SplashScreen () {
    setTitle ("BlueJay");
    setDefaultCloseOperation (EXIT_ON_CLOSE);
    getContentPane ().setBackground (Color.BLACK);
    getContentPane ().setLayout (new BorderLayout ());
    paintPanel = new PaintPanel ();
    getContentPane ().add (paintPanel, BorderLayout.CENTER);
    setSize (900, 600);
    setLocationRelativeTo (null);
    setFocusable (true);
    requestFocus ();
    setVisible (true);
    startAnimation ();
}
----------------------------------------

public SplashScreen () {
    setLayout (new BorderLayout ());
    add (new MyPanel ());
    setTitle ("BlueJay");
    setSize (900, 600);
    getContentPane ().setBackground (Color.black);
    setDefaultCloseOperation (EXIT_ON_CLOSE);
    setLocationRelativeTo (null);
    setVisible (true);
    requestFocus ();
    setFocusable (true);
}
----------------------------------------

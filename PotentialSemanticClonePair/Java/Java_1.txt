$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10529618_10542569_26_54
10529618_10542569_34_46
Title: "Java LostFocus and InputVerifier moving in reverse-tab-order" 
----------------------------------------

public void run () {
    while (true) {
        EventQueue.invokeLater (new Runnable () {
            KeyboardFocusManager kfm = new DefaultKeyboardFocusManager ();
            @Override
            public void run () {
                Component c = kfm.getFocusOwner ();
                String focusInfo = "elsewhere";
                if (c == null) {
                    focusInfo = "null";
                } else if (c == txtOne) {
                    focusInfo = "txtOne";
                } else if (c == txtTwo) {
                    focusInfo = "txtTwo";
                }

                lblFocus.setText (System.currentTimeMillis () + " - Focus owner " + focusInfo);
            }}

        );
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace (System.err);
        }
    }
}
----------------------------------------

public void run () {
    Component c = kfm.getFocusOwner ();
    String focusInfo = "elsewhere";
    if (c == null) {
        focusInfo = "null";
    } else if (c == txtOne) {
        focusInfo = "txtOne";
    } else if (c == txtTwo) {
        focusInfo = "txtTwo";
    }

    lblFocus.setText (System.currentTimeMillis () + " - Focus owner " + focusInfo);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10529618_10542569_26_54
10529618_10542569_63_76
Title: "Java LostFocus and InputVerifier moving in reverse-tab-order" 
----------------------------------------

public void run () {
    while (true) {
        EventQueue.invokeLater (new Runnable () {
            KeyboardFocusManager kfm = new DefaultKeyboardFocusManager ();
            @Override
            public void run () {
                Component c = kfm.getFocusOwner ();
                String focusInfo = "elsewhere";
                if (c == null) {
                    focusInfo = "null";
                } else if (c == txtOne) {
                    focusInfo = "txtOne";
                } else if (c == txtTwo) {
                    focusInfo = "txtTwo";
                }

                lblFocus.setText (System.currentTimeMillis () + " - Focus owner " + focusInfo);
            }}

        );
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace (System.err);
        }
    }
}
----------------------------------------

public void run () {
    JFrame f = new JFrame ("Focus bug demo");
    f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    f.setPreferredSize (new Dimension (300, 100));
    f.setLayout (new GridLayout (3, 1));
    NotEmpty validator = new NotEmpty ();
    txtOne.setInputVerifier (validator);
    txtTwo.setInputVerifier (validator);
    f.add (txtOne);
    f.add (txtTwo);
    f.add (lblFocus);
    f.pack ();
    f.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10529618_10542569_34_46
10529618_10542569_63_76
Title: "Java LostFocus and InputVerifier moving in reverse-tab-order" 
----------------------------------------

public void run () {
    Component c = kfm.getFocusOwner ();
    String focusInfo = "elsewhere";
    if (c == null) {
        focusInfo = "null";
    } else if (c == txtOne) {
        focusInfo = "txtOne";
    } else if (c == txtTwo) {
        focusInfo = "txtTwo";
    }

    lblFocus.setText (System.currentTimeMillis () + " - Focus owner " + focusInfo);
}
----------------------------------------

public void run () {
    JFrame f = new JFrame ("Focus bug demo");
    f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    f.setPreferredSize (new Dimension (300, 100));
    f.setLayout (new GridLayout (3, 1));
    NotEmpty validator = new NotEmpty ();
    txtOne.setInputVerifier (validator);
    txtTwo.setInputVerifier (validator);
    f.add (txtOne);
    f.add (txtTwo);
    f.add (lblFocus);
    f.pack ();
    f.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1053971_1053980_1_11
1053971_38285414_1_25
Title: A java practice problem 
----------------------------------------

public boolean makeBricks (int small, int big, int goal) {
    if (goal < 0 || big < 0 || small < 0) {
        throw new IllegalArgumentException ();
    } else if (goal > big * 5 + small) {
        return false;
    } else if (goal % 5 <= small) {
        return true;
    } else {
        return false;
    }

}
----------------------------------------

public static boolean makeBricks (int small, int big, int goal) {
    int totalInches = small + big * 5;
    if (totalInches < goal) {
        return false;
    }
    int bigInches = big * 5;
    int smallRequired = goal % 5;
    if (smallRequired > small && bigInches != goal) {
        return false;
    } else if (smallRequired <= small) {
        if (bigInches >= goal || smallRequired + bigInches == goal || small + bigInches == goal || small + bigInches == goal) {
            return true;
        }
        if (bigInches + small > goal) {
            if (small > goal - bigInches) {
                return true;
            }
        }
    }

    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1053971_1053980_1_11
1053971_41924790_1_16
Title: A java practice problem 
----------------------------------------

public boolean makeBricks (int small, int big, int goal) {
    if (goal < 0 || big < 0 || small < 0) {
        throw new IllegalArgumentException ();
    } else if (goal > big * 5 + small) {
        return false;
    } else if (goal % 5 <= small) {
        return true;
    } else {
        return false;
    }

}
----------------------------------------

public boolean makeBricks (int small, int big, int goal) {
    int obviousDemandSmall = goal % 5;
    if (obviousDemandSmall > small) return false;

    boolean needSmallToMakeUpForBig = (goal / 5 > big) ? true : false;
    if (! needSmallToMakeUpForBig) return true;

    int superfluousSmallFromFirstGlance = small - obviousDemandSmall;
    int extraSmallCanMakeThisManyBig = superfluousSmallFromFirstGlance / 5;
    int missingBig = goal / 5 - big;
    if (extraSmallCanMakeThisManyBig >= missingBig) return true;

    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1053971_38285414_1_25
1053971_41924790_1_16
Title: A java practice problem 
----------------------------------------

public static boolean makeBricks (int small, int big, int goal) {
    int totalInches = small + big * 5;
    if (totalInches < goal) {
        return false;
    }
    int bigInches = big * 5;
    int smallRequired = goal % 5;
    if (smallRequired > small && bigInches != goal) {
        return false;
    } else if (smallRequired <= small) {
        if (bigInches >= goal || smallRequired + bigInches == goal || small + bigInches == goal || small + bigInches == goal) {
            return true;
        }
        if (bigInches + small > goal) {
            if (small > goal - bigInches) {
                return true;
            }
        }
    }

    return false;
}
----------------------------------------

public boolean makeBricks (int small, int big, int goal) {
    int obviousDemandSmall = goal % 5;
    if (obviousDemandSmall > small) return false;

    boolean needSmallToMakeUpForBig = (goal / 5 > big) ? true : false;
    if (! needSmallToMakeUpForBig) return true;

    int superfluousSmallFromFirstGlance = small - obviousDemandSmall;
    int extraSmallCanMakeThisManyBig = superfluousSmallFromFirstGlance / 5;
    int missingBig = goal / 5 - big;
    if (extraSmallCanMakeThisManyBig >= missingBig) return true;

    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10544956_10544972_49_80
10544956_10544972_60_69
Title: Java Swing: Do something while the key is being pressed 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    if (! onKeyRelease) {
        if (upTimer != null && upTimer.isRunning ()) {
            return;
        }
        System.out.println ("key pressed");
        label.setText (UP_KEY_PRESSED);
        upTimer = new Timer (UP_TIMER_DELAY, new ActionListener () {
            @Override
            public void actionPerformed (ActionEvent e) {
                Color c = label.getBackground ();
                if (FLASH_COLOR.equals (c)) {
                    label.setBackground (null);
                    label.setForeground (Color.black);
                } else {
                    label.setBackground (FLASH_COLOR);
                    label.setForeground (Color.white);
                }
            }}

        );
        upTimer.start ();
    } else {
        System.out.println ("Key released");
        if (upTimer != null && upTimer.isRunning ()) {
            upTimer.stop ();
            upTimer = null;
        }
        label.setText ("");
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Color c = label.getBackground ();
    if (FLASH_COLOR.equals (c)) {
        label.setBackground (null);
        label.setForeground (Color.black);
    } else {
        label.setBackground (FLASH_COLOR);
        label.setForeground (Color.white);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1055318_1055386_2_11
1055318_27492055_4_15
Title: Using command-line argument for passing files to a program 
----------------------------------------

public static void main (String [] args) {
    if (args.length == 0) {
        System.out.println ("no arguments were given.");
    } else {
        for (String a : args) {
            System.out.println (a);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String current = "";
    File lastFile = null;
    for (String str : args) {
        File newFile = new File ((current + " " + str).trim ());
        if (newFile.exists ()) {
            lastFile = newFile;
        }
        current += " " + str;
    }
    File yourFile = lastFile;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10559115_10559134_1_12
10559115_10559165_1_12
Title: Turning a 1-D Array into a 2-D Array 
----------------------------------------

private static void processArray (int [] inArray) {
    int [] [] array = new int [20] [20];
    for (int x = 0;
    x < 20; x ++) {
        for (int y = 0;
        y < 20; y ++) {
            array [x] [y] = inArray [x * 20 + y];
        }
    }
}
----------------------------------------

private static void processArray (int [] inArray) {
    int [] [] array = new int [20] [20];
    for (int x = 0;
    x < 20; x ++) {
        for (int y = 0;
        y < 20; y ++) {
            array [x] [y] = inArray [x * 20 + y];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10559115_10559135_1_12
10559115_10559165_1_12
Title: Turning a 1-D Array into a 2-D Array 
----------------------------------------

private static void processArray (int [] inArray) {
    int [] [] array = new int [20] [20];
    for (int x = 0, z = 0;
    x < 20; x ++) {
        for (int y = 0;
        y < 20; y ++) {
            array [x] [y] = inArray [z ++];
        }
    }
}
----------------------------------------

private static void processArray (int [] inArray) {
    int [] [] array = new int [20] [20];
    for (int x = 0;
    x < 20; x ++) {
        for (int y = 0;
        y < 20; y ++) {
            array [x] [y] = inArray [x * 20 + y];
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10560792_20_38
10560167_10560792_57_68
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    long cT = System.currentTimeMillis ();
    while (System.currentTimeMillis () - cT < 10000) {
        for (int i = 0;
        i < threads.size (); i ++) {
            try {
                synchronized (threads.get (i)) {
                    threads.get (i).notify ();
                    Thread.sleep (1000);
                    threads.get (i).wait ();
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            System.out.print (nr + "" + character + ", ");
            nr ++;
            int r = (int) ((Math.random () * 500) + 500);
            Thread.sleep (r);
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10560792_20_38
10560167_10561020_44_71
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    long cT = System.currentTimeMillis ();
    while (System.currentTimeMillis () - cT < 10000) {
        for (int i = 0;
        i < threads.size (); i ++) {
            try {
                synchronized (threads.get (i)) {
                    threads.get (i).notify ();
                    Thread.sleep (1000);
                    threads.get (i).wait ();
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (monitor) {
        while (true) {
            monitor.wait ();
            try {
                System.out.print (nr + "" + character + ", ");
                nr ++;
                int r = (int) ((Math.random () * 500) + 500);
                Thread.sleep (r);
            } catch (Exception e) {
                e.printStackTrace ();
            }
            monitor.notify ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10560792_20_38
10560167_10561020_4_27
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    long cT = System.currentTimeMillis ();
    while (System.currentTimeMillis () - cT < 10000) {
        for (int i = 0;
        i < threads.size (); i ++) {
            try {
                synchronized (threads.get (i)) {
                    threads.get (i).notify ();
                    Thread.sleep (1000);
                    threads.get (i).wait ();
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i < 3; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            monitor.notify ();
            monitor.wait ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10560792_20_38
10560167_10563324_9_37
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    long cT = System.currentTimeMillis ();
    while (System.currentTimeMillis () - cT < 10000) {
        for (int i = 0;
        i < threads.size (); i ++) {
            try {
                synchronized (threads.get (i)) {
                    threads.get (i).notify ();
                    Thread.sleep (1000);
                    threads.get (i).wait ();
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i <= 5; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            try {
                monitor.notify ();
                Thread.sleep (50);
                monitor.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
        for (int i = 0;
        i < threads.size (); i ++) {
            System.out.println ("I suspend " + threads.get (i).getId ());
            threads.get (i).stop ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10560792_57_68
10560167_10561020_44_71
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    while (true) {
        try {
            System.out.print (nr + "" + character + ", ");
            nr ++;
            int r = (int) ((Math.random () * 500) + 500);
            Thread.sleep (r);
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    synchronized (monitor) {
        while (true) {
            monitor.wait ();
            try {
                System.out.print (nr + "" + character + ", ");
                nr ++;
                int r = (int) ((Math.random () * 500) + 500);
                Thread.sleep (r);
            } catch (Exception e) {
                e.printStackTrace ();
            }
            monitor.notify ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10560792_57_68
10560167_10561020_4_27
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    while (true) {
        try {
            System.out.print (nr + "" + character + ", ");
            nr ++;
            int r = (int) ((Math.random () * 500) + 500);
            Thread.sleep (r);
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i < 3; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            monitor.notify ();
            monitor.wait ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10560792_57_68
10560167_10563324_9_37
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    while (true) {
        try {
            System.out.print (nr + "" + character + ", ");
            nr ++;
            int r = (int) ((Math.random () * 500) + 500);
            Thread.sleep (r);
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i <= 5; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            try {
                monitor.notify ();
                Thread.sleep (50);
                monitor.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
        for (int i = 0;
        i < threads.size (); i ++) {
            System.out.println ("I suspend " + threads.get (i).getId ());
            threads.get (i).stop ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10561020_44_71
10560167_10561020_4_27
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    synchronized (monitor) {
        while (true) {
            monitor.wait ();
            try {
                System.out.print (nr + "" + character + ", ");
                nr ++;
                int r = (int) ((Math.random () * 500) + 500);
                Thread.sleep (r);
            } catch (Exception e) {
                e.printStackTrace ();
            }
            monitor.notify ();
        }
    }
}
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i < 3; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            monitor.notify ();
            monitor.wait ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10561020_44_71
10560167_10563324_9_37
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    synchronized (monitor) {
        while (true) {
            monitor.wait ();
            try {
                System.out.print (nr + "" + character + ", ");
                nr ++;
                int r = (int) ((Math.random () * 500) + 500);
                Thread.sleep (r);
            } catch (Exception e) {
                e.printStackTrace ();
            }
            monitor.notify ();
        }
    }
}
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i <= 5; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            try {
                monitor.notify ();
                Thread.sleep (50);
                monitor.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
        for (int i = 0;
        i < threads.size (); i ++) {
            System.out.println ("I suspend " + threads.get (i).getId ());
            threads.get (i).stop ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10560167_10561020_4_27
10560167_10563324_9_37
Title: Putting runnable to sleep 
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i < 3; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            monitor.notify ();
            monitor.wait ();
        }
    }
}
----------------------------------------

public void run () {
    Object monitor = new Object ();
    for (int i = 0;
    i <= 5; i ++) {
        threads.add (new Thread (new Task (i + 65, monitor)));
    }
    long cT = System.currentTimeMillis ();
    for (int i = 0;
    i < threads.size (); i ++) {
        threads.get (i).start ();
    }
    synchronized (monitor) {
        while (System.currentTimeMillis () - cT < 10000) {
            try {
                monitor.notify ();
                Thread.sleep (50);
                monitor.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
        for (int i = 0;
        i < threads.size (); i ++) {
            System.out.println ("I suspend " + threads.get (i).getId ());
            threads.get (i).stop ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10564616_10565237_35_42
10564616_10565242_37_46
Title: JCombobox.setVisible(false); 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            createFrame ().setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new FrameTest ().setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10568932_10573166_22_30
10568932_10573166_53_67
Title: synchronizing file output in a static class 
----------------------------------------

public void run () {
    for (int i = 0;
    i < 5000; i ++) {
        try {
            log.log ("This is entry " + i + " from thread " + Thread.currentThread ().getId ());
        } catch (InterruptedException ex) {
        }
    }
    System.out.println (Thread.currentThread ().getId () + " is done");
}
----------------------------------------

public void run () {
    try {
        for (;;) {
            ThreadedLog.this.writer.write (queue.take () + "\r\n");
            ThreadedLog.this.writer.flush ();
        }
    } catch (InterruptedException | IOException e) {
        e.printStackTrace ();
        try {
            ThreadedLog.this.writer.close ();
        } catch (Exception ex) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1057072_1057091_1_14
1057072_11019593_1_14
Title: "Calculating Digital Root is there a better way?" 
----------------------------------------

public void run () {
    println ("This program calculates the digital root of an interger.");
    String num = readLine ("Enter the number: ");
    int sum = 10;
    while (num > 9) {
        for (int x = 0;
        x < num.length (); x ++) {
            sum = Integer.parseInt (num.charAt (x));
        }
        num = Integer.toString (sum);
    }
    println ("Digital Root is: " + sum);
}
----------------------------------------

public void run () {
    println ("This program finds the digital root of an integer.");
    int n = readInt ("Enter a positive integer: ");
    int dsum = 0;
    while (n > 0) {
        dsum += n % 10;
        n /= 10;
        if ((n == 0) && (dsum > 9)) {
            n = dsum;
            dsum = 0;
        }
    }
    println ("The digital root of the integer is " + dsum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10579225_10579349_2_18
10579225_43580808_2_14
Title: Determining the highest and lowest number (Java) 
----------------------------------------

public static void main (String args []) {
    int highest = 0, lowest = 0, num = 0;
    Scanner scan = new Scanner (System.in);
    highest = lowest = scan.nextInt ();
    for (int i = 1;
    i < 10; i ++) {
        System.out.print ("Enter a number:");
        num = scan.nextInt ();
        if (num > highest) {
            highest = num;
        }
        if (num < lowest) {
            lowest = num;
        }
        System.out.println ("Highest number is: " + highest);
        System.out.println ("Lowest number is: " + lowest);
    }
}
----------------------------------------

public static void main (String args []) {
    int highest = Math.min (20, 30);
    int num = 0;
    Scanner scan = new Scanner (System.in);
    for (int i = 0;
    i < 5; i ++) {
        System.out.print ("Enter a number:");
        num = scan.nextInt ();
        if (num > highest) {
            highest = num;
        }
    }
    System.out.println ("Highest number is: " + highest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10604504_10604603_2_8
10604504_10604616_3_9
Title: Using generics to refactor 
----------------------------------------

public void send (List < E > entityList, String service) {
    WebResource ws = super.getWebResource (service);
    try {
        String response = ws.accept (MediaType.TEXT_HTML).type (MediaType.APPLICATION_XML).put (String.class, new GenericEntity < E > (entityList) {
        }

        );
    }
}
----------------------------------------

public void send (List < T > list, String service) {
    WebResource ws = super.getWebResource (service);
    try {
        String response = ws.accept (MediaType.TEXT_HTML).type (MediaType.APPLICATION_XML).put (String.class, new GenericEntity < T > (list) {
        }

        );
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10606063_10606781_30_39
10606063_10606781_51_60
Title: "In java can the use of synchronized methods be unreliable?" 
----------------------------------------

public void run () {
    while (Value.Get () < 100) {
        synchronized (Value.class) {
            int prev = Value.Get ();
            Value.Add ();
            System.out.println ("[" + name + "] - changed value from " + prev + " to " + Value.Get ());
        }
    }
}
----------------------------------------

public void run () {
    while (Value.Get () > (- 100)) {
        synchronized (Value.class) {
            int prev = Value.Get ();
            Value.Sub ();
            System.out.println ("[" + name + "] - changed value from " + prev + " to " + Value.Get ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10606229_10606477_1_12
10606229_16390624_1_11
Title: "Jdbctemplate query for string: EmptyResultDataAccessException: Incorrect result size: expected 1 actual 0" 
----------------------------------------

public String test () {
    String cert = null;
    String sql = "select ID_NMB_SRZ from codb_owner.TR_LTM_SLS_RTN 
                     where id_str_rt = '999' and ID_NMB_SRZ = '60230009999999'";
    try {
        Object o = (String) jdbc.queryForObject (sql, String.class);
        cert = (String) o;
    } catch (EmptyResultDataAccessException e) {
        e.printStackTrace ();
    }
    return cert;
}
----------------------------------------

public String test () {
    String sql = "select ID_NMB_SRZ from codb_owner.TR_LTM_SLS_RTN " + " where id_str_rt = '999' and ID_NMB_SRZ = '60230009999999'";
    return jdbc.query (sql, new ResultSetExtractor < String > () {
        @Override
        public String extractData (ResultSet rs) throws SQLException, DataAccessException {
            return rs.next () ? rs.getString ("ID_NMB_SRZ") : null;
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10607507_10610198_35_45
10607507_10610198_77_88
Title: JavaFX 2 blank label refresh issue 
----------------------------------------

public void run () {
    try {
        lock.acquire ();
        listView.getItems ().addAll (pendingItems);
        pendingItems = null;
    } catch (InterruptedException ex) {
        ex.printStackTrace ();
    } finally {
        lock.release ();
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2000000; i ++) {
            addItem ("Item " + i);
            if (i % 200 == 0) {
                Thread.sleep (20);
            }
        }
    } catch (InterruptedException ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10611057_10612601_40_56
10611057_10669932_216_231
Title: Are there any 'tricks' to speed up sampling of a very large knapsack combination type prob? 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0;
    i < data.length; i ++) {
        int value = data [i];
        for (int count = 1, sum = value;
        count <= 100 && sum <= target; count ++, sum += value) {
            for (int newsum = sum + 1;
            newsum <= target; newsum ++) {
                if (sums [newsum - sum] != null) {
                    sums [newsum] = new Node (i, count, sums [newsum], newsum - sum);
                }
            }
        }
        for (int count = 1, sum = value;
        count <= 100 && sum <= target; count ++, sum += value) {
            sums [sum] = new Node (i, count, sums [sum], 0);
        }
    }
    printString (null, sums [target]);
}
----------------------------------------

public static void main (String [] ARGV) {
    int targetSum = 5000;
    int targetPairs = 32;
    int targetResults = 15000;
    buildCounts (data);
    StringBuffer sb = new StringBuffer ();
    long timer = System.nanoTime ();
    for (int i = 0;
    i < targetResults; i ++) {
        sb.append (oneRandomSet (targetSum, targetPairs));
    }
    double seconds = (System.nanoTime () - timer) / 1000000000d;
    double millisPerSol = 1000 * seconds / targetResults;
    System.out.println (sb.toString ());
    System.out.println (String.format ("%d solutions in %1.3f seconds @ %1.3f millis per sol", targetResults, seconds, millisPerSol));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10615867_12671856_10_27
10615867_12671856_38_49
Title: File writing and reading objects using Threads 
----------------------------------------

public void run () {
    synchronized (fo) {
        if (! fo.isWriteComplete) {
            try {
                fo.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("--------ORDER DETAILS------");
        try {
            System.out.println (fo.readFromFile ());
        } catch (IOException e) {
            e.printStackTrace ();
        }
        fo.notify ();
    }
}
----------------------------------------

public void run () {
    synchronized (fo) {
        System.out.println ("Going to write...");
        try {
            fo.writeInFile ("OrderNo:1 | advancePaid: 2000 | custName: Mr.XXX | mobileModel: Nokia");
        } catch (IOException e) {
            e.printStackTrace ();
        }
        fo.isWriteComplete = true;
        fo.notify ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10615867_12671856_10_27
10615867_16606760_131_153
Title: File writing and reading objects using Threads 
----------------------------------------

public void run () {
    synchronized (fo) {
        if (! fo.isWriteComplete) {
            try {
                fo.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("--------ORDER DETAILS------");
        try {
            System.out.println (fo.readFromFile ());
        } catch (IOException e) {
            e.printStackTrace ();
        }
        fo.notify ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            if (this.buffer.getBytes () != null) {
                MyBuffer.isWriting = true;
                if (this.file != null) {
                    this.file.write (this.buffer.getBytes ());
                } else if (this.fos != null) {
                    this.fos.write (this.buffer.getBytes ());
                }

                this.buffer.clearBytes ();
            } else {
                if (MyBuffer.readComplete) break;

                MyBuffer.isWriting = false;
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10615867_12671856_10_27
10615867_16606760_78_107
Title: File writing and reading objects using Threads 
----------------------------------------

public void run () {
    synchronized (fo) {
        if (! fo.isWriteComplete) {
            try {
                fo.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
        System.out.println ("--------ORDER DETAILS------");
        try {
            System.out.println (fo.readFromFile ());
        } catch (IOException e) {
            e.printStackTrace ();
        }
        fo.notify ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            if (! MyBuffer.isWriting) {
                byte [] b = new byte [10];
                if (file != null) {
                    if (this.file.length () <= this.buffer.bytesTransmitted) {
                        this.buffer.setBytes (null);
                        this.buffer.readComplete = true;
                        break;
                    }
                    this.file.read (b);
                    this.buffer.setBytes (b);
                } else if (fis != null) {
                    if (this.fis.available () <= this.buffer.bytesTransmitted) {
                        this.buffer.setBytes (null);
                        break;
                    }
                    this.fis.read (b);
                    this.buffer.setBytes (b);
                }

            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10615867_12671856_38_49
10615867_16606760_131_153
Title: File writing and reading objects using Threads 
----------------------------------------

public void run () {
    synchronized (fo) {
        System.out.println ("Going to write...");
        try {
            fo.writeInFile ("OrderNo:1 | advancePaid: 2000 | custName: Mr.XXX | mobileModel: Nokia");
        } catch (IOException e) {
            e.printStackTrace ();
        }
        fo.isWriteComplete = true;
        fo.notify ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            if (this.buffer.getBytes () != null) {
                MyBuffer.isWriting = true;
                if (this.file != null) {
                    this.file.write (this.buffer.getBytes ());
                } else if (this.fos != null) {
                    this.fos.write (this.buffer.getBytes ());
                }

                this.buffer.clearBytes ();
            } else {
                if (MyBuffer.readComplete) break;

                MyBuffer.isWriting = false;
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10615867_12671856_38_49
10615867_16606760_78_107
Title: File writing and reading objects using Threads 
----------------------------------------

public void run () {
    synchronized (fo) {
        System.out.println ("Going to write...");
        try {
            fo.writeInFile ("OrderNo:1 | advancePaid: 2000 | custName: Mr.XXX | mobileModel: Nokia");
        } catch (IOException e) {
            e.printStackTrace ();
        }
        fo.isWriteComplete = true;
        fo.notify ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            if (! MyBuffer.isWriting) {
                byte [] b = new byte [10];
                if (file != null) {
                    if (this.file.length () <= this.buffer.bytesTransmitted) {
                        this.buffer.setBytes (null);
                        this.buffer.readComplete = true;
                        break;
                    }
                    this.file.read (b);
                    this.buffer.setBytes (b);
                } else if (fis != null) {
                    if (this.fis.available () <= this.buffer.bytesTransmitted) {
                        this.buffer.setBytes (null);
                        break;
                    }
                    this.fis.read (b);
                    this.buffer.setBytes (b);
                }

            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10615867_16606760_131_153
10615867_16606760_78_107
Title: File writing and reading objects using Threads 
----------------------------------------

public void run () {
    try {
        while (true) {
            if (this.buffer.getBytes () != null) {
                MyBuffer.isWriting = true;
                if (this.file != null) {
                    this.file.write (this.buffer.getBytes ());
                } else if (this.fos != null) {
                    this.fos.write (this.buffer.getBytes ());
                }

                this.buffer.clearBytes ();
            } else {
                if (MyBuffer.readComplete) break;

                MyBuffer.isWriting = false;
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            if (! MyBuffer.isWriting) {
                byte [] b = new byte [10];
                if (file != null) {
                    if (this.file.length () <= this.buffer.bytesTransmitted) {
                        this.buffer.setBytes (null);
                        this.buffer.readComplete = true;
                        break;
                    }
                    this.file.read (b);
                    this.buffer.setBytes (b);
                } else if (fis != null) {
                    if (this.fis.available () <= this.buffer.bytesTransmitted) {
                        this.buffer.setBytes (null);
                        break;
                    }
                    this.fis.read (b);
                    this.buffer.setBytes (b);
                }

            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10616077_10616768_271_279
10616077_10616768_297_305
Title: JSpinner (Time) in JTable 
----------------------------------------

public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column) {
    theSpinner.setValue (value);
    if (isSelected) {
        theSpinner.setBackground (table.getSelectionBackground ());
    } else {
        theSpinner.setBackground (table.getBackground ());
    }
    return theSpinner;
}
----------------------------------------

public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column) {
    theStatusPanel.setStatus ((Status) value);
    if (isSelected) {
        theStatusPanel.setBackground (table.getSelectionBackground ());
    } else {
        theStatusPanel.setBackground (table.getBackground ());
    }
    return theStatusPanel;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10616445_10616497_14_33
10616445_10616543_1_22
Title: how can i make a thread sleep for a while and then start working again? 
----------------------------------------

public void run () {
    try {
        while (true) {
            TimeUnit.SECONDS.sleep (1);
            System.out.println ("Sleep");
        }
    } catch (Exception e) {
    }
}
----------------------------------------

public void run () {
    while (keepRunning) {
        try {
            logger.info ("Looking for new tasks to fetch...  ");
            for (Task t : tasks) {
                logger.info (" Task " + t.getId () + " is being fetched ");
                t.start ();
            }
            Thread.sleep (FREQUENCY);
        } catch (Exception e) {
            keepRunning = false;
            logger.info ("FetcherThread interrupted: " + e.getMessage ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10617128_10617251_76_84
10617128_10617251_87_95
Title: java sql connections via class  
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (Statement st) {
    try {
        if (st != null) {
            st.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10617128_10617251_76_84
10617128_10617251_97_105
Title: java sql connections via class  
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10617128_10617251_87_95
10617128_10617251_97_105
Title: java sql connections via class  
----------------------------------------

public static void close (Statement st) {
    try {
        if (st != null) {
            st.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10620174_25333274_4_22
10620174_35262595_6_23
Title: FizzBuzz without AND operator 
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= 100; i ++) {
        boolean printed = false;
        if (i % 3 == 0) {
            printed = true;
            System.out.print ("Fizz");
        }
        if (i % 5 == 0) {
            printed = true;
            System.out.print ("Buzz");
        }
        if (printed) {
            System.out.println ();
        } else {
            System.out.println (i);
        }
    }
}
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    String [] words = {"", "Fizz", "Buzz"};
    String [] nwords = {"", ""};
    for (int i = 1;
    i < 101; ++ i) {
        int fp = (i % 3 == 0) ? 1 : 0;
        int bp = ((i % 5 == 0) ? 1 : 0) * 2;
        int np = ((fp > 0 || bp > 0) ? 1 : 0);
        nwords [0] = Integer.toString (i);
        System.out.print (words [fp]);
        System.out.print (words [bp]);
        System.out.println (nwords [np]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1062113_1062454_18_36
1062113_39940497_46_64
Title: Fastest way to write huge data in text file Java 
----------------------------------------

public static void main (String [] args) throws Exception {
    List < String > records = new ArrayList < String > (RECORD_COUNT);
    int size = 0;
    for (int i = 0;
    i < RECORD_COUNT; i ++) {
        records.add (RECORD);
        size += RECSIZE;
    }
    System.out.println (records.size () + " 'records'");
    System.out.println (size / MEG + " MB");
    for (int i = 0;
    i < ITERATIONS; i ++) {
        System.out.println ("\nIteration " + i);
        writeRaw (records);
        writeBuffered (records, 8192);
        writeBuffered (records, (int) MEG);
        writeBuffered (records, 4 * (int) MEG);
    }
}
----------------------------------------

public static void main (String [] args) throws IOException, InterruptedException {
    long currentTimeMillis = System.currentTimeMillis ();
    try {
        fileToWrite = new RandomAccessFile (FILEPATH_WRITE, "rw");
        file = new RandomAccessFile (FILEPATH, "r");
        seriouslyReadProcessAndWriteAsynch ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    Thread currentThread = Thread.currentThread ();
    System.out.println (currentThread.getName ());
    long currentTimeMillis2 = System.currentTimeMillis ();
    double time_seconds = (currentTimeMillis2 - currentTimeMillis) / 1000.0;
    System.out.println ("Total time required for reading the text in seconds " + time_seconds);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10626606_10626824_1_13
10626606_10629103_1_15
Title: replace string with string in j2me 
----------------------------------------

private String replace (String needle, String replacement, String haystack) {
    String result = "";
    int index = haystack.indexOf (needle);
    if (index == 0) {
        result = replacement + haystack.substring (needle.length ());
        return replace (needle, replacement, result);
    } else if (index > 0) {
        result = haystack.substring (0, index) + replacement + haystack.substring (index + needle.length ());
        return replace (needle, replacement, result);
    } else {
        return haystack;
    }

}
----------------------------------------

private String replace (String str, String pattern, String replace) {
    int s = 0;
    int e = 0;
    StringBuffer result = new StringBuffer ();
    while ((e = str.indexOf (pattern, s)) >= 0) {
        result.append (str.substring (s, e));
        result.append (replace);
        s = e + pattern.length ();
    }
    result.append (str.substring (s));
    return result.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10638848_40987949_24_36
10638848_40987949_38_66
Title: Trouble sending HTTP response with Java Socket 
----------------------------------------

public void run () {
    try {
        InputStream is = s.getInputStream ();
        BufferedReader br = new BufferedReader (new InputStreamReader (is));
        while ((line = br.readLine ()) != null) {
            System.out.println (line);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        OutputStream os = s.getOutputStream ();
        Scanner sc = new Scanner (System.in);
        String inp = null;
        String t = "HTTP/1.1 200 OK\r\n";
        byte [] s = t.getBytes ("UTF-8");
        os.write (s);
        t = "Content-Length: 788\r\n";
        s = t.getBytes ("UTF-8");
        os.write (s);
        t = "Content-Type: text/html\r\n\r\n";
        s = t.getBytes ("UTF-8");
        os.write (s);
        t = "\r\n\r\n<html><body><h1>this is output</h1><table cellpading=5 border=5><tr><td>name</td><td>age></td><td>height</td></tr></table></body></html>\r\n\r\n";
        s = t.getBytes ("UTF-8");
        os.write (s);
        t = "Connection: Closed";
        s = t.getBytes ("UTF-8");
        os.write (s);
        os.flush ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10640812_10641003_1_13
10640812_10647961_39_49
Title: Reversing a linked list 
----------------------------------------

void reverse () {
    link previous = null, temp = null;
    while (! isEmpty (head)) {
        temp = head.nextlink;
        head.nextlink = previous;
        previous = head;
        if (temp == null) {
            break;
        }
        head = temp;
    }
}
----------------------------------------

void reverse () {
    Link previous = null, temp = null;
    while (! isEmpty (head)) {
        temp = head.nextLink;
        head.nextLink = previous;
        previous = head;
        head = temp;
    }
    head = previous;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10640812_10641003_1_13
10640812_35537137_47_57
Title: Reversing a linked list 
----------------------------------------

void reverse () {
    link previous = null, temp = null;
    while (! isEmpty (head)) {
        temp = head.nextlink;
        head.nextlink = previous;
        previous = head;
        if (temp == null) {
            break;
        }
        head = temp;
    }
}
----------------------------------------

public void reverse () {
    Node current = head;
    Node prev = null;
    while (current != null) {
        Node temp = current.next;
        current.next = prev;
        prev = current;
        current = temp;
    }
    head = prev;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10640812_10647961_39_49
10640812_35537137_47_57
Title: Reversing a linked list 
----------------------------------------

void reverse () {
    Link previous = null, temp = null;
    while (! isEmpty (head)) {
        temp = head.nextLink;
        head.nextLink = previous;
        previous = head;
        head = temp;
    }
    head = previous;
}
----------------------------------------

public void reverse () {
    Node current = head;
    Node prev = null;
    while (current != null) {
        Node temp = current.next;
        current.next = prev;
        prev = current;
        current = temp;
    }
    head = prev;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10640812_10647961_54_66
10640812_35537137_59_72
Title: Reversing a linked list 
----------------------------------------

public static void main (String [] args) {
    List list1 = new List ();
    list1.insert (10);
    list1.insert (20);
    list1.insert (30);
    list1.insert (40);
    list1.insert (50);
    list1.printlist ();
    list1.reverse ();
    list1.printlist ();
}
----------------------------------------

public static void main (String [] args) {
    Node n = new Node (null, 10);
    Node n1 = new Node (n, 20);
    Node n2 = new Node (n1, 30);
    Node n3 = new Node (n2, 40);
    Node n4 = new Node (n3, 50);
    Node n5 = new Node (n4, 60);
    Linkedlist linkedlist = new Linkedlist (n5);
    linkedlist.iterate ();
    linkedlist.reverse ();
    System.out.println ("------------------REVERSED---------------------");
    linkedlist.iterate ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10644420_10644474_1_17
10644420_31290096_1_56
Title: Converting Letters to Numbers 
----------------------------------------

public static void main (String args []) {
    String abc = "AbCd";
    String txt = "";
    abc = abc.toLowerCase ();
    for (int i = 0;
    i < abc.length (); i ++) {
        int letter = (int) abc.charAt (i);
        if (letter < 97 || letter > 122) {
            txt += ((int) abc.charAt (i) - 96);
        }
    }
    System.out.println (txt);
}
----------------------------------------

public static void main (String args []) {
    File file = new File ("lettered.in");
    try {
        Scanner input = new Scanner (file);
        int dataCollect = input.nextInt ();
        int sum = 0;
        String lineInput = "";
        for (int i = 0;
        i <= dataCollect; i ++) {
            while (input.hasNext ()) {
                lineInput = input.next ();
                char lineArray [] = lineInput.toCharArray ();
                for (int j = 0;
                j < lineArray.length; j ++) {
                    if (lineArray [j] == 'A') {
                        sum += 1;
                    } else if (lineArray [j] == 'B') {
                        sum += 10;
                    } else if (lineArray [j] == 'C') {
                        sum += 100;
                    } else if (lineArray [j] == 'D') {
                        sum += 1000;
                    } else if (lineArray [j] == 'E') {
                        sum += 10000;
                    } else if (lineArray [j] == 'F') {
                        sum += 100000;
                    } else if (lineArray [j] == 'G') {
                        sum += 1000000;
                    } else if (lineArray [j] == 'X') {
                        System.out.println (sum);
                        sum = 0;
                    }

                }
            }
        }
    } catch (FileNotFoundException e) {
        System.out.println ("ERROR");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_10647639_1_17
10647520_40054204_12_39
Title: Java compressing Strings 
----------------------------------------

public static String compress (String text) {
    String result = "";
    int index = 0;
    while (index < text.length ()) {
        char c = text.charAt (index);
        int count = count (text, index);
        if (count == 1) result += "" + c;
        else result += "" + count + c;

        index += count;
    }
    return result;
}
----------------------------------------

static String compress (String str) {
    StringBuilder stringBuilder = new StringBuilder ();
    char [] charArray = str.toCharArray ();
    int count = 1;
    char lastChar = 0;
    char nextChar = 0;
    lastChar = charArray [0];
    for (int i = 1;
    i < charArray.length; i ++) {
        nextChar = charArray [i];
        if (lastChar == nextChar) {
            count ++;
        } else {
            stringBuilder.append (count).append (lastChar);
            count = 1;
            lastChar = nextChar;
        }
    }
    stringBuilder.append (count).append (lastChar);
    String compressed = stringBuilder.toString ();
    return compressed;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_10647693_8_18
10647520_32004590_5_30
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();

    }
    System.out.println (output);
}
----------------------------------------

public static void main (String [] args) {
    Scanner inp = new Scanner (System.in);
    String str;
    char ch;
    int count = 0;
    System.out.println ("Enter the string:");
    str = inp.nextLine ();
    System.out.println ("Enter th Char to see the occurence\n");
    ch = inp.next ().charAt (0);
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == ch) {
            count ++;
        }
    }
    System.out.println ("The Character is Occuring");
    System.out.println (count + "Times");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_10647693_8_18
10647520_35861549_6_17
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();

    }
    System.out.println (output);
}
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_10647693_8_18
10647520_39195881_1_25
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();

    }
    System.out.println (output);
}
----------------------------------------

public static void main (String [] args) {
    String s = "aaaabbccccdddeee";
    String s1 = "";
    String s2 = "";
    int count = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if (s1.indexOf (s.charAt (i)) < 0) {
            s1 = s1 + s.charAt (i);
        }
    }
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s.length (); j ++) {
            if (s1.charAt (i) == s.charAt (j)) {
                count ++;
            }
        }
        s2 = s2 + s1.charAt (i) + count;
        count = 0;
    }
    System.out.println (s2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_10647693_8_18
10647520_44578831_1_31
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();

    }
    System.out.println (output);
}
----------------------------------------

public static void main (String [] args) {
    String str = "AAABBBBCC";
    int length = str.length ();
    StringBuilder sb = new StringBuilder ();
    int count = 1;
    for (int i = 0;
    i < length; i ++) {
        if (i == length - 1) {
            sb.append (str.charAt (i) + "" + count);
            break;
        }
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
        } else {
            sb.append (str.charAt (i) + "" + count);
            count = 1;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_10647693_8_18
10647520_45202269_1_18
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();

    }
    System.out.println (output);
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_32004590_5_30
10647520_35861549_6_17
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    Scanner inp = new Scanner (System.in);
    String str;
    char ch;
    int count = 0;
    System.out.println ("Enter the string:");
    str = inp.nextLine ();
    System.out.println ("Enter th Char to see the occurence\n");
    ch = inp.next ().charAt (0);
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == ch) {
            count ++;
        }
    }
    System.out.println ("The Character is Occuring");
    System.out.println (count + "Times");
}
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_32004590_5_30
10647520_39195881_1_25
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    Scanner inp = new Scanner (System.in);
    String str;
    char ch;
    int count = 0;
    System.out.println ("Enter the string:");
    str = inp.nextLine ();
    System.out.println ("Enter th Char to see the occurence\n");
    ch = inp.next ().charAt (0);
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == ch) {
            count ++;
        }
    }
    System.out.println ("The Character is Occuring");
    System.out.println (count + "Times");
}
----------------------------------------

public static void main (String [] args) {
    String s = "aaaabbccccdddeee";
    String s1 = "";
    String s2 = "";
    int count = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if (s1.indexOf (s.charAt (i)) < 0) {
            s1 = s1 + s.charAt (i);
        }
    }
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s.length (); j ++) {
            if (s1.charAt (i) == s.charAt (j)) {
                count ++;
            }
        }
        s2 = s2 + s1.charAt (i) + count;
        count = 0;
    }
    System.out.println (s2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_32004590_5_30
10647520_44578831_1_31
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    Scanner inp = new Scanner (System.in);
    String str;
    char ch;
    int count = 0;
    System.out.println ("Enter the string:");
    str = inp.nextLine ();
    System.out.println ("Enter th Char to see the occurence\n");
    ch = inp.next ().charAt (0);
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == ch) {
            count ++;
        }
    }
    System.out.println ("The Character is Occuring");
    System.out.println (count + "Times");
}
----------------------------------------

public static void main (String [] args) {
    String str = "AAABBBBCC";
    int length = str.length ();
    StringBuilder sb = new StringBuilder ();
    int count = 1;
    for (int i = 0;
    i < length; i ++) {
        if (i == length - 1) {
            sb.append (str.charAt (i) + "" + count);
            break;
        }
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
        } else {
            sb.append (str.charAt (i) + "" + count);
            count = 1;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_32004590_5_30
10647520_45202269_1_18
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    Scanner inp = new Scanner (System.in);
    String str;
    char ch;
    int count = 0;
    System.out.println ("Enter the string:");
    str = inp.nextLine ();
    System.out.println ("Enter th Char to see the occurence\n");
    ch = inp.next ().charAt (0);
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == ch) {
            count ++;
        }
    }
    System.out.println ("The Character is Occuring");
    System.out.println (count + "Times");
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_35822659_10_59
10647520_52110364_1_24
Title: Java compressing Strings 
----------------------------------------

public static String compressString (String input) {
    if (input == null || input.length () == 0) return input;

    String finalCompressedString = "";
    String lastElement = "";
    char [] charArray = input.toCharArray ();
    Stack stack = new Stack ();
    int elementCount = 0;
    for (int i = 0;
    i < charArray.length; i ++) {
        char currentElement = charArray [i];
        if (i == 0) {
            stack.push ((currentElement + ""));
            continue;
        } else {
            if ((currentElement + "").equalsIgnoreCase ((String) stack.peek ())) {
                stack.push (currentElement + "");
                if (i == charArray.length - 1) {
                    while (! stack.isEmpty ()) {
                        lastElement = (String) stack.pop ();
                        elementCount ++;
                    }
                    finalCompressedString += lastElement + "" + elementCount;
                } else continue;

            } else {
                while (! stack.isEmpty ()) {
                    lastElement = (String) stack.pop ();
                    elementCount ++;
                }
                finalCompressedString += lastElement + "" + elementCount;
                elementCount = 0;
                stack.push (currentElement + "");
            }
        }
    }
    if (finalCompressedString.length () >= input.length ()) return input;
    else return finalCompressedString;

}
----------------------------------------

private String compressString (String input) {
    String output = "";
    char [] arr = input.toCharArray ();
    Map < Character, Integer > myMap = new LinkedHashMap < > ();
    for (int i = 0;
    i < arr.length; i ++) {
        if (i > 0 && arr [i] != arr [i - 1]) {
            output = output + arr [i - 1] + myMap.get (arr [i - 1]);
            myMap.put (arr [i - 1], 0);
        }
        if (myMap.containsKey (arr [i])) {
            myMap.put (arr [i], myMap.get (arr [i]) + 1);
        } else {
            myMap.put (arr [i], 1);
        }
    }
    for (Character c : myMap.keySet ()) {
        if (myMap.get (c) != 0) {
            output = output + c + myMap.get (c);
        }
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_35861549_6_17
10647520_39195881_1_25
Title: Java compressing Strings 
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

public static void main (String [] args) {
    String s = "aaaabbccccdddeee";
    String s1 = "";
    String s2 = "";
    int count = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if (s1.indexOf (s.charAt (i)) < 0) {
            s1 = s1 + s.charAt (i);
        }
    }
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s.length (); j ++) {
            if (s1.charAt (i) == s.charAt (j)) {
                count ++;
            }
        }
        s2 = s2 + s1.charAt (i) + count;
        count = 0;
    }
    System.out.println (s2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_35861549_6_17
10647520_44578831_1_31
Title: Java compressing Strings 
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

public static void main (String [] args) {
    String str = "AAABBBBCC";
    int length = str.length ();
    StringBuilder sb = new StringBuilder ();
    int count = 1;
    for (int i = 0;
    i < length; i ++) {
        if (i == length - 1) {
            sb.append (str.charAt (i) + "" + count);
            break;
        }
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
        } else {
            sb.append (str.charAt (i) + "" + count);
            count = 1;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_35861549_6_17
10647520_45202269_1_18
Title: Java compressing Strings 
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_39195881_1_25
10647520_44578831_1_31
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String s = "aaaabbccccdddeee";
    String s1 = "";
    String s2 = "";
    int count = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if (s1.indexOf (s.charAt (i)) < 0) {
            s1 = s1 + s.charAt (i);
        }
    }
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s.length (); j ++) {
            if (s1.charAt (i) == s.charAt (j)) {
                count ++;
            }
        }
        s2 = s2 + s1.charAt (i) + count;
        count = 0;
    }
    System.out.println (s2);
}
----------------------------------------

public static void main (String [] args) {
    String str = "AAABBBBCC";
    int length = str.length ();
    StringBuilder sb = new StringBuilder ();
    int count = 1;
    for (int i = 0;
    i < length; i ++) {
        if (i == length - 1) {
            sb.append (str.charAt (i) + "" + count);
            break;
        }
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
        } else {
            sb.append (str.charAt (i) + "" + count);
            count = 1;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_39195881_1_25
10647520_45202269_1_18
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String s = "aaaabbccccdddeee";
    String s1 = "";
    String s2 = "";
    int count = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        if (s1.indexOf (s.charAt (i)) < 0) {
            s1 = s1 + s.charAt (i);
        }
    }
    for (int i = 0;
    i < s1.length (); i ++) {
        for (int j = 0;
        j < s.length (); j ++) {
            if (s1.charAt (i) == s.charAt (j)) {
                count ++;
            }
        }
        s2 = s2 + s1.charAt (i) + count;
        count = 0;
    }
    System.out.println (s2);
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10647520_44578831_1_31
10647520_45202269_1_18
Title: Java compressing Strings 
----------------------------------------

public static void main (String [] args) {
    String str = "AAABBBBCC";
    int length = str.length ();
    StringBuilder sb = new StringBuilder ();
    int count = 1;
    for (int i = 0;
    i < length; i ++) {
        if (i == length - 1) {
            sb.append (str.charAt (i) + "" + count);
            break;
        }
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
        } else {
            sb.append (str.charAt (i) + "" + count);
            count = 1;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10650249_10650434_83_93
10650249_10650434_98_105
Title: stopwatch not work in java 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String cmd = e.getActionCommand ();
    if (Pause.equals (cmd)) {
        pause ();
        buttonPlay.setText (Play);
    } else {
        buttonPlay.setText (Pause);
        start ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            text2.setText (getCurrentTime (System.currentTimeMillis () - initTime));
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10663220_10669872_7_36
10663220_10672170_4_53
Title: Identifying positive and negative words in text 
----------------------------------------

public static void main (String [] args) {
    String [] lines = new String [0];
    String path = "ConversationTest.txt";
    BufferedReader br = null;
    try {
        File file = new File (path);
        br = new BufferedReader (new InputStreamReader (new FileInputStream (file)));
        String line;
        while ((line = br.readLine ()) != null) {
            lines = add (line, lines);
        }
        br.close ();
    } catch (IOException e) {
        System.out.println ("read error: " + e.getMessage ());
    }
    print (lines);
}
----------------------------------------

public static void main (String [] args) {
    String [] goodWordsHolder = new String [2];
    goodWordsHolder [0] = "firstGoodWord";
    goodWordsHolder [1] = "secondGoodWord";
    String [] badWordsHolder = new String [2];
    badWordsHolder [0] = "firstBadWord";
    badWordsHolder [1] = "secondBadWord";
    int amountOfGoodWords = 0;
    int amountOfBadWords = 0;
    int currentWordInText = 0;
    boolean ConversationEnded = false;
    while (! ConversationEnded) {
        for (int iteration = 0;
        iteration < goodWordsHolder.length; iteration ++) {
            if (goodWordsHolder [iteration] == getWordInText (currentWordInText)) {
                amountOfGoodWords ++;
            }
        }
        for (int iteration = 0;
        iteration < badWordsHolder.length; iteration ++) {
            if (badWordsHolder [iteration] == getWordInText (currentWordInText)) {
                amountOfBadWords ++;
            }
        }
        currentWordInText ++;
        if (endOfTheConversationHasBeenReached ()) {
            ConversationEnded = true;
        }
    }
    System.out.println ("Amount of good Words: " + amountOfGoodWords);
    System.out.println ("Amount of bad Words: " + amountOfBadWords);
    if (amountOfGoodWords > amountOfBadWords) {
        System.out.println ("There are more good words than bad words.");
    } else {
        System.out.println ("There are more bad words than good words.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10671540_10671596_64_71
10671540_10671596_76_86
Title: How do I populate tables in netbeans 
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    if (model.getRowCount () > 0) {
        for (int i = model.getRowCount () - 1;
        i > - 1; i --) {
            model.removeRow (i);
        }
    }
    System.out.println ("model.getRowCount() --->" + model.getRowCount ());
}
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    Object [] data0 = {"Buy", "IBM", new Integer (1000), new Double (80.50)};
    model.addRow (data0);
    Object [] data1 = {"Sell", "MicroSoft", new Integer (2000), new Double (6.25)};
    model.addRow (data1);
    Object [] data2 = {"Sell", "Apple", new Integer (3000), new Double (7.35)};
    model.addRow (data2);
    Object [] data3 = {"Buy", "Nortel", new Integer (4000), new Double (20.00)};
    model.addRow (data3);
    System.out.println ("model.getRowCount() --->" + model.getRowCount ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1067655_1068132_16_42
1067655_28181163_47_84
Title: How to upload a file using Java HttpClient library working with PHP 
----------------------------------------

public static void main (String [] args) throws Exception {
    HttpClient httpclient = new DefaultHttpClient ();
    httpclient.getParams ().setParameter (CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
    HttpPost httppost = new HttpPost ("http://localhost:9001/upload.php");
    File file = new File ("c:/TRASH/zaba_1.jpg");
    MultipartEntity mpEntity = new MultipartEntity ();
    ContentBody cbFile = new FileBody (file, "image/jpeg");
    mpEntity.addPart ("userfile", cbFile);
    httppost.setEntity (mpEntity);
    System.out.println ("executing request " + httppost.getRequestLine ());
    HttpResponse response = httpclient.execute (httppost);
    HttpEntity resEntity = response.getEntity ();
    System.out.println (response.getStatusLine ());
    if (resEntity != null) {
        System.out.println (EntityUtils.toString (resEntity));
    }
    if (resEntity != null) {
        resEntity.consumeContent ();
    }
    httpclient.getConnectionManager ().shutdown ();
}
----------------------------------------

public static void main (String [] args) throws Exception {
    if (args.length != 1) {
        System.out.println ("File path not given");
        System.exit (1);
    }
    CloseableHttpClient httpclient = HttpClients.createDefault ();
    try {
        HttpPost httppost = new HttpPost ("http://localhost:8080" + "/servlets-examples/servlet/RequestInfoExample");
        FileBody bin = new FileBody (new File (args [0]));
        StringBody comment = new StringBody ("A binary file of some kind", ContentType.TEXT_PLAIN);
        HttpEntity reqEntity = MultipartEntityBuilder.create ().addPart ("bin", bin).addPart ("comment", comment).build ();
        httppost.setEntity (reqEntity);
        System.out.println ("executing request " + httppost.getRequestLine ());
        CloseableHttpResponse response = httpclient.execute (httppost);
        try {
            System.out.println ("----------------------------------------");
            System.out.println (response.getStatusLine ());
            HttpEntity resEntity = response.getEntity ();
            if (resEntity != null) {
                System.out.println ("Response content length: " + resEntity.getContentLength ());
            }
            EntityUtils.consume (resEntity);
        } finally {
            response.close ();
        }
    } finally {
        httpclient.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10676564_10678178_21_42
10676564_11114969_22_58
Title: Java Shaped window with Outline 
----------------------------------------

public LongTab () {
    setSize (500, 720);
    setLocation (10, 10);
    setUndecorated (true);
    polygon = new Polygon ();
    polygon = new Polygon ();
    polygon.addPoint (40, 720);
    polygon.addPoint (40, 700);
    polygon.addPoint (20, 690);
    polygon.addPoint (20, 400);
    polygon.addPoint (40, 390);
    polygon.addPoint (40, 20);
    polygon.addPoint (500, 20);
    polygon.addPoint (500, 720);
    GeneralPath path = new GeneralPath ();
    path.append (polygon, true);
    setShape (path);
}
----------------------------------------

public LongTab () {
    addMouseListener (this);
    setSize (500, 1080);
    addComponentListener (new ComponentAdapter () {
        @Override
        public void componentResized (ComponentEvent e) {
            Polygon polygon = new Polygon ();
            polygon = new Polygon ();
            polygon.addPoint (40, 1080);
            polygon.addPoint (40, 700);
            polygon.addPoint (20, 690);
            polygon.addPoint (20, 400);
            polygon.addPoint (40, 390);
            polygon.addPoint (40, 0);
            polygon.addPoint (500, 0);
            polygon.addPoint (500, 1080);
            path = new GeneralPath ();
            path.append (polygon, true);
            com.sun.awt.AWTUtilities.setWindowShape (t, path);
        }}

    );
    setSize (40, 1080);
    setLocation (1880, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10676564_10726530_22_43
10676564_11114969_22_58
Title: Java Shaped window with Outline 
----------------------------------------

public LongTab () {
    setSize (500, 720);
    setLocation (10, 10);
    setUndecorated (true);
    polygon = new Polygon ();
    polygon = new Polygon ();
    polygon.addPoint (40, 720);
    polygon.addPoint (40, 700);
    polygon.addPoint (20, 690);
    polygon.addPoint (20, 400);
    polygon.addPoint (40, 390);
    polygon.addPoint (40, 20);
    polygon.addPoint (500, 20);
    polygon.addPoint (500, 720);
    GeneralPath path = new GeneralPath ();
    path.append (polygon, true);
    com.sun.awt.AWTUtilities.setWindowShape (this, path);
}
----------------------------------------

public LongTab () {
    addMouseListener (this);
    setSize (500, 1080);
    addComponentListener (new ComponentAdapter () {
        @Override
        public void componentResized (ComponentEvent e) {
            Polygon polygon = new Polygon ();
            polygon = new Polygon ();
            polygon.addPoint (40, 1080);
            polygon.addPoint (40, 700);
            polygon.addPoint (20, 690);
            polygon.addPoint (20, 400);
            polygon.addPoint (40, 390);
            polygon.addPoint (40, 0);
            polygon.addPoint (500, 0);
            polygon.addPoint (500, 1080);
            path = new GeneralPath ();
            path.append (polygon, true);
            com.sun.awt.AWTUtilities.setWindowShape (t, path);
        }}

    );
    setSize (40, 1080);
    setLocation (1880, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10685395_10689190_13_41
10685395_31550643_20_33
Title: Webview with contenteditable cannot be focused programmatically 
----------------------------------------

public void start (Stage stage) {
    final WebView editor = new WebView ();
    editor.getEngine ().loadContent (content);
    Button webviewFocusButton = new Button ("Focus on WebView");
    webviewFocusButton.setOnAction (new EventHandler < ActionEvent > () {
        @Override
        public void handle (ActionEvent event) {
            editor.getEngine ().executeScript ("document.body.focus()");
            editor.requestFocus ();
        }}

    );
    Button selfFocusButton = new Button ("Focus on this Button");
    Label focusLabel = new Label ();
    focusLabel.textProperty ().bind (Bindings.when (editor.focusedProperty ()).then ("WebView has the focus.").otherwise ("WebView does not have the focus."));
    focusLabel.setMaxWidth (Double.MAX_VALUE);
    focusLabel.setStyle ("-fx-background-color: coral; -fx-padding: 5;");
    BorderPane layout = new BorderPane ();
    layout.setTop (HBoxBuilder.create ().spacing (10).children (webviewFocusButton, selfFocusButton).style ("-fx-padding: 10; -fx-background-color: palegreen").build ());
    layout.setCenter (editor);
    layout.setBottom (focusLabel);
    stage.setScene (new Scene (layout));
    stage.show ();
}
----------------------------------------

public void start (Stage primaryStage) throws Exception {
    final HTMLEditor editor = new HTMLEditor ();
    final WebView view = (WebView) ((GridPane) ((HTMLEditorSkin) editor.getSkin ()).getChildren ().get (0)).getChildren ().get (2);
    primaryStage.setScene (new Scene (editor));
    primaryStage.sizeToScene ();
    primaryStage.show ();
    Platform.runLater (() -> {
        view.fireEvent (new MouseEvent (MouseEvent.MOUSE_PRESSED, 100, 100, 200, 200, MouseButton.PRIMARY, 1, false, false, false, false, false, false, false, false, false, false, null));
        editor.requestFocus ();
        view.fireEvent (new MouseEvent (MouseEvent.MOUSE_RELEASED, 100, 100, 200, 200, MouseButton.PRIMARY, 1, false, false, false, false, false, false, false, false, false, false, null));
    });
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10688342_10717712_4_18
10688342_10717712_6_16
Title: How can I use a method inside an activity from external class in java 
----------------------------------------

public void run () {
    handler.post (new Runnable () {
        public void run () {
            MyActivity.builder.setMessage (mensajeAMostrar).setCancelable (false).setPositiveButton ("Of Course", new DialogInterface.OnClickListener () {
                public void onClick (DialogInterface dialog, int id) {
                    dialog.cancel ();
                }}

            );
            AlertDialog alert = MyActivity.builder.create ();
            alert.show ();
        }}

    );
}
----------------------------------------

public void run () {
    MyActivity.builder.setMessage (mensajeAMostrar).setCancelable (false).setPositiveButton ("Of Course", new DialogInterface.OnClickListener () {
        public void onClick (DialogInterface dialog, int id) {
            dialog.cancel ();
        }}

    );
    AlertDialog alert = MyActivity.builder.create ();
    alert.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10692978_10693004_7_24
10692978_10693092_5_19
Title: Generate unique random number between 0 and 1000 
----------------------------------------

public static void main (String args []) throws IOException {
    randomNumber = new HashSet < Integer > ();
    for (int i = 1;
    i <= endRange; i ++) {
        do {
            rand = r.nextInt (endRange);
        } while (randomNumber.contains (rand));
        randomNumber.add (rand);
        randomNumberMethod (rand);
    }
}
----------------------------------------

public static void main (String args []) throws IOException {
    randomNumber = new ArrayList < Integer > (endRange);
    for (int i = 0;
    i <= endRange; i ++) {
        randomNumber.add (i);
    }
    Collections.shuffle (randomNumber);
    for (int i = 0;
    i <= endRange; i ++) {
        randomNumberMethod (randomNumber.get (i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10705361_10755889_106_114
10705361_10817406_157_168
Title: How to paint the Dropline of a RowHeader-JTable on the Main-JTable during a DragAndDrop? 
----------------------------------------

protected void paintComponent (Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
    if (isDragged && ! isOutsideTable) {
        g2.setPaint (Color.GREEN);
        g2.drawLine (x + 2, y + 1, x + mainTable.getWidth () - 4, y + 1);
        g2.drawLine (x, y, x + mainTable.getWidth (), y);
        g2.drawLine (x + 2, y - 1, x + mainTable.getWidth () - 4, y - 1);
    }
}
----------------------------------------

public void paintComponent (Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
    g2.setComposite (AlphaComposite.getInstance (AlphaComposite.SRC_OVER, 0.3f));
    Rectangle rect = table.getDropLineRect ();
    if (rect != null) {
        Rectangle r = SwingUtilities.convertRectangle (table, rect, this);
        g2.setColor (new Color (40, 80, 0));
        g2.fill (r);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10705361_10755889_124_135
10705361_10817406_35_48
Title: How to paint the Dropline of a RowHeader-JTable on the Main-JTable during a DragAndDrop? 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            JFrame f = new DNDLinePainterExampleMain ();
            f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            f.pack ();
            f.setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            JFrame f = new MainFrame ();
            f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            f.pack ();
            f.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10705361_10755889_149_169
10705361_10817406_186_207
Title: How to paint the Dropline of a RowHeader-JTable on the Main-JTable during a DragAndDrop? 
----------------------------------------

public RowHeaderTable (JTable table) {
    this.table = table;
    table.addPropertyChangeListener (this);
    setFocusable (false);
    setAutoCreateColumnsFromModel (false);
    updateRowHeight ();
    updateModel ();
    updateSelectionModel ();
    TableColumn column = new TableColumn ();
    column.setHeaderValue ("");
    addColumn (column);
    column.setCellRenderer (new RowNumberRenderer ());
    getColumnModel ().getColumn (0).setPreferredWidth (50);
    setPreferredScrollableViewportSize (getPreferredSize ());
    getTableHeader ().setReorderingAllowed (false);
}
----------------------------------------

public RowHeaderTable (JTable mainTable) {
    this.mainTable = mainTable;
    mainTable.addPropertyChangeListener (this);
    setFocusable (false);
    setAutoCreateColumnsFromModel (false);
    updateRowHeight ();
    updateModel ();
    updateSelectionModel ();
    TableColumn column = new TableColumn ();
    column.setHeaderValue ("");
    addColumn (column);
    column.setCellRenderer (new RowNumberRenderer ());
    getColumnModel ().getColumn (0).setPreferredWidth (50);
    setPreferredScrollableViewportSize (getPreferredSize ());
    getTableHeader ().setReorderingAllowed (false);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10705361_10755889_223_236
10705361_10817406_114_132
Title: How to paint the Dropline of a RowHeader-JTable on the Main-JTable during a DragAndDrop? 
----------------------------------------

public void propertyChange (PropertyChangeEvent e) {
    if ("rowHeight".equals (e.getPropertyName ())) {
        updateRowHeight ();
    }
    if ("selectionModel".equals (e.getPropertyName ())) {
        updateSelectionModel ();
    }
    if ("model".equals (e.getPropertyName ())) {
        updateModel ();
    }
}
----------------------------------------

public void propertyChange (PropertyChangeEvent pce) {
    String propertyName = pce.getPropertyName ();
    if ("dropLocation".equals (propertyName) && pce.getNewValue () != null) {
        if (glassPane == null) {
            rootPaneContainer.getRootPane ().setGlassPane (glassPane = new RowHeaderDropLineGlassPane ((RowHeaderTable) pce.getSource ()));
        }
        rootPaneContainer.getRootPane ().getGlassPane ().setVisible (true);
        repaintDropLocation (((JTable) pce.getSource ()).getDropLocation ());
    } else if ("dropLocation".equals (propertyName)) rootPaneContainer.getRootPane ().getGlassPane ().setVisible (false);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10705361_10755889_260_278
10705361_10817406_335_357
Title: How to paint the Dropline of a RowHeader-JTable on the Main-JTable during a DragAndDrop? 
----------------------------------------

public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    if (table != null) {
        JTableHeader header = table.getTableHeader ();
        if (header != null) {
            setForeground (header.getForeground ());
            setBackground (header.getBackground ());
            setFont (header.getFont ());
        }
    }
    if (isSelected) {
        setFont (getFont ().deriveFont (Font.BOLD));
    }
    setText ((value == null) ? "" : value.toString ());
    setBorder (UIManager.getBorder ("TableHeader.cellBorder"));
    return this;
}
----------------------------------------

public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    if (table != null) {
        JTableHeader header = table.getTableHeader ();
        if (header != null) {
            setForeground (header.getForeground ());
            setBackground (header.getBackground ());
            setFont (header.getFont ());
        }
    }
    if (isSelected) setFont (getFont ().deriveFont (Font.BOLD));

    setText ((value == null) ? "" : value.toString ());
    setBorder (UIManager.getBorder ("TableHeader.cellBorder"));
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10705468_10705677_30_43
10705468_10705787_26_38
Title: Canceling selection change on a JComboBox if condition is satisfied (e.g validation on the incoming selection) 
----------------------------------------

public void itemStateChanged (ItemEvent event) {
    if (event.getStateChange () == ItemEvent.SELECTED) {
        if (flag) comboImage.setSelectedItem (previousValue);
        else {
            counter ++;
            if (counter == 3) flag = true;

            previousValue = (String) comboImage.getSelectedItem ();
            System.out.println ((String) comboImage.getSelectedItem ());
        }
    }
}
----------------------------------------

public void itemStateChanged (ItemEvent event) {
    if (event.getStateChange () == ItemEvent.SELECTED) {
        if (! "Okay".equalsIgnoreCase (jTextField.getText ())) {
            if (oldSelectionIndex < 0) {
                jComboBox.setSelectedIndex (0);
            } else {
                jComboBox.setSelectedIndex (oldSelectionIndex);
            }
        } else {
            oldSelectionIndex = jComboBox.getSelectedIndex ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10711399_10711486_76_84
10711399_10711486_87_95
Title: java - insert row with auto increment field 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (Statement st) {
    try {
        if (st != null) {
            st.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10711399_10711486_76_84
10711399_10711486_97_105
Title: java - insert row with auto increment field 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10711399_10711486_87_95
10711399_10711486_97_105
Title: java - insert row with auto increment field 
----------------------------------------

public static void close (Statement st) {
    try {
        if (st != null) {
            st.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10713611_10713764_1_13
10713611_10713770_1_13
Title: org.json.JSON.typeMismatch when converting a String 
----------------------------------------

public JSONObject toJson (String jString) {
    System.out.println ("I've got" + jString + "*");
    try {
        return new JSONObject (jString);
    } catch (JSONException e) {
        e.printStackTrace ();
        System.out.println ("Error while converting to JSONObject");
    }
    return null;
}
----------------------------------------

public JSONArray toJson (String jString) {
    System.out.println ("I've got" + jString + "*");
    try {
        return new JSONArray (jString);
    } catch (JSONException e) {
        e.printStackTrace ();
        System.out.println ("Error while converting to JSONArray");
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10716828_10716887_1_14
10716828_42913002_1_24
Title: JoptionPane ShowConfirmDialog 
----------------------------------------

public static void main (String args []) {
    ButtonTest app = new ButtonTest ();
    app.addWindowListener (new WindowAdapter () {
        public void windowClosing (WindowEvent e) {
            int reply = JOptionPane.showConfirmDialog (null, "Really Quit ?", "Quit", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) System.exit (0);

        }}

    );
    app.setDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);
    app.setSize (640, 480);
    app.setVisible (true);
}
----------------------------------------

public static void main (String args []) {
    ButtonTest app = new ButtonTest ();
    app.addWindowListener (new WindowAdapter () {
        public void windowClosing (WindowEvent e) {
            String message = " Really Quit ? ";
            String title = "Quit";
            int reply = JOptionPane.showConfirmDialog (null, message, title, JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                System.exit (0);
            } else {
            }
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10725862_10726023_1_24
10725862_10726173_1_24
Title: Merging 2 HashMaps in Java 
----------------------------------------

public void addDictionary (HashMap < String, Integer > incomingDictionary) {
    if (incomingDictionary == null) {
        return;
    }
    if (totalDictionary == null) {
        return;
    }
    if (totalDictionary.isEmpty ()) {
        totalDictionary.putAll (incomingDictionary);
    } else {
        for (Entry < String, Integer > incomingIter : incomingDictionary.entrySet ()) {
            String incomingKey = incomingIter.getKey ();
            Integer incomingValue = incomingIter.getValue ();
            Integer totalValue = totalDictionary.get (incomingKey);
            Integer sum = (totalValue == null ? incomingValue : incomingValue == null ? totalValue : totalValue + incomingValue);
            totalDictionary.put (incomingKey, sum);
        }
    }
}
----------------------------------------

public void addDictionary (HashMap < String, Integer > incomingDictionary) {
    if (incomingDictionary == null) {
        throw new IllegalArgumentException ("incomingDictionary cannot be null.");
    }
    if (totalDictionary == null) {
        throw new IllegalArgumentException ("totalDictionary cannot be null.");
    }
    for (Map.Entry < String, Integer > entry : incomingDictionary.entrySet ()) {
        Integer oldValue = totalDictionary.get (entry.getKey ());
        if (oldValue != null) {
            Integer newValue = entry.getValue () + oldValue;
            totalDictionary.put (entry.getKey (), newValue);
        } else {
            totalDictionary.put (entry.getKey (), entry.getValue ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10726107_10726303_1_22
10726107_10726539_1_16
Title: Faster algorithm for counting active calls 
----------------------------------------

public static int GetMaxDensity (int N, int [] X, int [] Y) {
    int rangeStart = Integer.MAX_VALUE;
    int rangeEnd = Integer.MIN_VALUE;
    for (int i = 0;
    i < N; i ++) {
        if (X [i] < rangeStart) rangeStart = X [i];

        if (Y [i] > rangeEnd) rangeEnd = Y [i];

    }
    int rangeSize = rangeEnd - rangeStart + 1;
    int [] histogram = new int [rangeSize];
    for (int t = 0;
    t < rangeSize; t ++) histogram [t] = 0;

    for (int i = 0;
    i < N; i ++) {
        histogram [X [i] - rangeStart] ++;
        histogram [Y [i] - rangeStart] --;
    }
    int maxCount = 0;
    int count = 0;
    for (int t = 0;
    t < rangeSize; t ++) {
        count += histogram [t];
        if (count > maxCount) maxCount = count;

    }
    return maxCount;
}
----------------------------------------

public static int GetMaxDensity (int N, int [] X, int [] Y) {
    int [] h = new int [1440];
    for (int i = 0;
    i < N; i ++) {
        addIt (X [i], Y [i], h);
    }
    int m = 0;
    for (int i = 0;
    i < 1440; i ++) {
        if (h [i] > m) m = h [i];

    }
    return m;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10739314_29123170_38_61
10739314_29123170_71_86
Title: Returning entities in Rest API with Spring 
----------------------------------------

public void fillIgnoredFields (Object resultObject) {
    Class c = resultObject.getClass ();
    if (! objectIsPersistedEntity (c)) {
        return;
    }
    List ignoredFields = findIgnoredFields (c);
    if (ignoredFields.isEmpty ()) {
        return;
    }
    Field idField = findIdField (c);
    if (idField == null || getValue (resultObject, idField) == null) {
        return;
    }
    CrudRepository repository = findRepositoryForClass (c);
    if (repository == null) {
        return;
    }
    fillIgnoredFields (resultObject, ignoredFields, idField, repository);
}
----------------------------------------

private void fillIgnoredFields (Object object, List ignoredFields, Field idField, CrudRepository repository) {
    logger.debug ("Object {} contains fields with @JsonIgnore annotations, retrieving their value from database", object.getClass ().getName ());
    try {
        Object storedObject = getStoredObject (getValue (object, idField), repository);
        if (storedObject == null) {
            return;
        }
        for (Field field : ignoredFields) {
            field.set (object, getValue (storedObject, field));
        }
    } catch (IllegalAccessException e) {
        logger.error ("Unable to fill ignored fields", e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10749176_21047201_4_23
10749176_25500298_2_20
Title: Counting the number of occurences of characters in a string 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String input = br.readLine ().toLowerCase ();
    StringBuilder result = new StringBuilder ();
    char currentCharacter;
    int count;
    for (int i = 0;
    i < input.length (); i ++) {
        currentCharacter = input.charAt (i);
        count = 1;
        while (i < input.length () - 1 && input.charAt (i + 1) == currentCharacter) {
            count ++;
            i ++;
        }
        result.append (currentCharacter);
        result.append (count);
    }
    System.out.println ("" + result);
}
----------------------------------------

public static void main (String [] args) {
    String s = "aaabbbbccccccdd";
    String result = "";
    StringBuilder sb = new StringBuilder (s);
    while (sb.length () != 0) {
        int count = 0;
        char test = sb.charAt (0);
        while (sb.indexOf (test + "") != - 1) {
            sb.deleteCharAt (sb.indexOf (test + ""));
            count ++;
        }
        result = result + test + count;
    }
    System.out.println (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10758952_10759009_1_12
10758952_40287640_3_10
Title: "How to execute the ""if"" and ""else"" at the same time?" 
----------------------------------------

public static void main (String args []) {
    if (! new Object () {
        public boolean foo () {
            System.out.print ("Hello ");
            return true;
        }}

    .foo ()) {
        System.out.println ("Hello");
    } else {
        System.out.println ("World");
    }
}
----------------------------------------

public static void main (String args []) {
    if (args == null || new Test () {

        {
            Test.main (null);
        }

    }

    .equals (null)) {
        System.out.print ("Hello ");
    } else {
        System.out.print ("World！");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10766492_34220087_1_10
10766492_41508217_1_10
Title: What is the Simplest Way to Reverse an ArrayList? 
----------------------------------------

public static < T > ArrayList < T > reverse (ArrayList < T > list) {
    int length = list.size ();
    ArrayList < T > result = new ArrayList < T > (length);
    for (int i = length - 1;
    i >= 0; i --) {
        result.add (list.get (i));
    }
    return result;
}
----------------------------------------

public ArrayList < Object > reverse (ArrayList < Object > list) {
    for (int i = 0;
    i < list.size () / 2; i ++) {
        Object temp = list.get (i);
        list.set (i, list.get (list.size () - i - 1));
        list.set (list.size () - i - 1, temp);
    }
    return list;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10766492_34220087_1_10
10766492_46305833_1_16
Title: What is the Simplest Way to Reverse an ArrayList? 
----------------------------------------

public static < T > ArrayList < T > reverse (ArrayList < T > list) {
    int length = list.size ();
    ArrayList < T > result = new ArrayList < T > (length);
    for (int i = length - 1;
    i >= 0; i --) {
        result.add (list.get (i));
    }
    return result;
}
----------------------------------------

static < T > List < T > reverse (final List < T > list) {
    final int size = list.size ();
    final int last = size - 1;
    final List < T > result = new ArrayList < > (size);
    for (int i = last;
    i >= 0; -- i) {
        final T element = list.get (i);
        result.add (element);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10766492_34220087_1_10
10766492_49207716_17_28
Title: What is the Simplest Way to Reverse an ArrayList? 
----------------------------------------

public static < T > ArrayList < T > reverse (ArrayList < T > list) {
    int length = list.size ();
    ArrayList < T > result = new ArrayList < T > (length);
    for (int i = length - 1;
    i >= 0; i --) {
        result.add (list.get (i));
    }
    return result;
}
----------------------------------------

public static < T > List < T > reverse (List < T > arrayList, int startIndex, int lastIndex) {
    if (startIndex < lastIndex) {
        T t = arrayList.get (lastIndex);
        arrayList.set (lastIndex, arrayList.get (startIndex));
        arrayList.set (startIndex, t);
        startIndex ++;
        lastIndex --;
        reverse (arrayList, startIndex, lastIndex);
    }
    return arrayList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10766492_41508217_1_10
10766492_46305833_1_16
Title: What is the Simplest Way to Reverse an ArrayList? 
----------------------------------------

public ArrayList < Object > reverse (ArrayList < Object > list) {
    for (int i = 0;
    i < list.size () / 2; i ++) {
        Object temp = list.get (i);
        list.set (i, list.get (list.size () - i - 1));
        list.set (list.size () - i - 1, temp);
    }
    return list;
}
----------------------------------------

static < T > List < T > reverse (final List < T > list) {
    final int size = list.size ();
    final int last = size - 1;
    final List < T > result = new ArrayList < > (size);
    for (int i = last;
    i >= 0; -- i) {
        final T element = list.get (i);
        result.add (element);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10766492_41508217_1_10
10766492_49207716_17_28
Title: What is the Simplest Way to Reverse an ArrayList? 
----------------------------------------

public ArrayList < Object > reverse (ArrayList < Object > list) {
    for (int i = 0;
    i < list.size () / 2; i ++) {
        Object temp = list.get (i);
        list.set (i, list.get (list.size () - i - 1));
        list.set (list.size () - i - 1, temp);
    }
    return list;
}
----------------------------------------

public static < T > List < T > reverse (List < T > arrayList, int startIndex, int lastIndex) {
    if (startIndex < lastIndex) {
        T t = arrayList.get (lastIndex);
        arrayList.set (lastIndex, arrayList.get (startIndex));
        arrayList.set (startIndex, t);
        startIndex ++;
        lastIndex --;
        reverse (arrayList, startIndex, lastIndex);
    }
    return arrayList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10766492_46305833_1_16
10766492_49207716_17_28
Title: What is the Simplest Way to Reverse an ArrayList? 
----------------------------------------

static < T > List < T > reverse (final List < T > list) {
    final int size = list.size ();
    final int last = size - 1;
    final List < T > result = new ArrayList < > (size);
    for (int i = last;
    i >= 0; -- i) {
        final T element = list.get (i);
        result.add (element);
    }
    return result;
}
----------------------------------------

public static < T > List < T > reverse (List < T > arrayList, int startIndex, int lastIndex) {
    if (startIndex < lastIndex) {
        T t = arrayList.get (lastIndex);
        arrayList.set (lastIndex, arrayList.get (startIndex));
        arrayList.set (startIndex, t);
        startIndex ++;
        lastIndex --;
        reverse (arrayList, startIndex, lastIndex);
    }
    return arrayList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10769357_10769438_1_28
10769357_37314529_1_39
Title: How can I convert a 2D String ArrayList to simple 2D String Array? 
----------------------------------------

public static void main (String [] args) {
    ArrayList < ArrayList < String > > val = new ArrayList < ArrayList < String > > ();
    int arraySize = 0;
    int upperSize = 0;
    if (val != null) {
        ArrayList < String > arrayList = val.get (0);
        upperSize = val.size ();
        if (arrayList != null) {
            arraySize = arrayList.size ();
        }
    }
    int i = 0, j = 0;
    String [] [] values = new String [upperSize] [arraySize];
    if (val != null) {
        for (ArrayList < String > curr : val) {
            if (curr != null) {
                for (String currValue : curr) {
                    values [i] [j ++] = currValue;
                }
                i ++;
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    ArrayList < ArrayList < String > > parentList = new ArrayList < ArrayList < String > > ();
    ArrayList < String > list = new ArrayList < String > ();
    list.add ("Joshan Stethem");
    list.add ("Bruce Wills");
    list.add ("Tom Cruse");
    list.add ("Optimus Prime");
    System.out.println ("Array List Hollywood : " + list);
    ArrayList < String > list1 = new ArrayList < String > ();
    list1.add ("Salman Khan");
    list1.add ("Shahrukh Khan");
    list1.add ("AMir Khan");
    list1.add ("Fawad Khan");
    System.out.println ("Array List Bollywood : " + list1);
    ArrayList < String > list2 = new ArrayList < String > ();
    list2.add ("Rahat Fateh");
    list2.add ("Arijit Singh");
    list2.add ("KK");
    list2.add ("Ankit Tiwari");
    System.out.println ("Array List Singers : " + list2);
    parentList.add (list);
    parentList.add (list1);
    parentList.add (list2);
    String [] [] twodimArray = new String [parentList.size ()] [];
    int i = 0, j = 0;
    for (ArrayList < String > row : parentList) {
        twodimArray [i] = new String [row.size ()];
        j = 0;
        for (String str : row) {
            twodimArray [i] [j] = str;
            j ++;
        }
        i ++;
    }
    System.out.println ("List of Artist : " + Arrays.deepToString (twodimArray));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
10775222_10775295_1_32
10775222_10775329_22_63
Title: Android Beginner: Empty Edit Text 
----------------------------------------

public void onClick (View paramView) {
    String str1 = kills.getText ().toString ();
    String str2 = deaths.getText ().toString ();
    if (str1.equals ("") || str2.equals ("")) {
        new AlertDialog.Builder (this).setTitle ("No Number").setMessage ("Please enter a number for both kills and deaths!").setNeutralButton ("Ok", null).show ();
        return;
    }
    double d1 = Double.parseDouble (str2);
    double d2 = Double.parseDouble (str1);
    if ((d1 == 0.0D) || (d2 == 0.0D)) {
        new AlertDialog.Builder (this).setTitle ("Invalid Number").setMessage ("Please enter a number different than 0 for both kills and deaths!").setNeutralButton ("Ok", null).show ();
        return;
    }
    double d3 = d2 / d1;
    DecimalFormat localDecimalFormat = new DecimalFormat ("#.###");
    String str3 = "Your K/D Ratio is : " + localDecimalFormat.format (d3);
    new AlertDialog.Builder (this).setTitle ("K/D Ratio").setMessage (str3).setNeutralButton ("Ok", null).show ();
}
----------------------------------------

public void onClick (View paramView) {
    boolean invalid = false;
    String str1 = kills.getText ().toString ();
    String str2 = deaths.getText ().toString ();
    if (str1.equals ("") || str2.equals ("")) {
        new AlertDialog.Builder (this).setTitle ("No Number").setMessage ("Please enter a number for both kills and deaths!").setNeutralButton ("Ok", null).show ();
        invalid = true;
    }
    d1 = Double.parseDouble (str2);
    d2 = Double.parseDouble (str1);
    if ((d1 == 0.0D) || (d2 == 0.0D)) {
        new AlertDialog.Builder (this).setTitle ("Invalid Number").setMessage ("Please enter a number different than 0 for both kills and eaths!").setNeutralButton ("Ok", null).show ();
        invalid = true;
    }
    double d3 = d2 / d1;
    DecimalFormat localDecimalFormat = new DecimalFormat ("#.###");
    String str3 = "Your K/D Ratio is : " + localDecimalFormat.format (d3);
    if (! invalid) {
        new AlertDialog.Builder (this).setTitle ("K/D Ratio").setMessage (str3).setNeutralButton ("Ok", null).show ();
    }
    invalid = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
154577_39532917_112_131
154577_50202481_127_187
Title: Polymorphism vs Overriding vs Overloading 
----------------------------------------

public static void main (String args []) {
    try {
        Game game = new Chess ();
        Thread t1 = new Thread (game);
        t1.start ();
        Thread.sleep (1000);
        game.setRunGame (false);
        Thread.sleep (1000);
        game = new TicTacToe ();
        Thread t2 = new Thread (game);
        t2.start ();
        Thread.sleep (1000);
        game.setRunGame (false);
    } catch (Exception err) {
        err.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    VolumeControllerV4 volumeControllerV4 = new VolumeControllerV4 ();
    BrightnessControllerV4 brightnessControllerV4 = new BrightnessControllerV4 ();
    ColourControllerV4 colourControllerV4 = new ColourControllerV4 ();
    List < ControllerV4 > controllerV4s = new ArrayList < > ();
    controllerV4s.add (brightnessControllerV4);
    controllerV4s.add (volumeControllerV4);
    controllerV4s.add (colourControllerV4);
    List < OnStart > controllersToInitialize = new ArrayList < > ();
    controllersToInitialize.addAll (controllerV4s);
    InitializeDeviceV4 initializeDeviceV4 = new InitializeDeviceV4 (controllersToInitialize);
    initializeDeviceV4.initialize ();
    List < OnReset > controllersToReset = new ArrayList < > ();
    controllersToReset.addAll (controllerV4s);
    ResetFunctionV4 resetFunctionV4 = new ResetFunctionV4 (controllersToReset);
    OUTER : while (true) {
        Scanner sc = new Scanner (System.in);
        System.out.println (" Enter your option \n Press 1 to increase volume \n Press 2 to decrease volume");
        System.out.println (" Press 3 to increase brightness \n Press 4 to decrease brightness");
        System.out.println (" Press 5 to increase color \n Press 6 to decrease color");
        System.out.println (" Press 7 to reset TV \n Press any other Button to shutdown");
        int button = sc.nextInt ();
        switch (button) {
            case 1 :
                {
                    volumeControllerV4.adjust (5);
                    break;
                } case 2 :
                {
                    volumeControllerV4.adjust (- 5);
                    break;
                } case 3 :
                {
                    brightnessControllerV4.adjust (5);
                    break;
                } case 4 :
                {
                    brightnessControllerV4.adjust (- 5);
                    break;
                } case 5 :
                {
                    colourControllerV4.adjust (5);
                    break;
                } case 6 :
                {
                    colourControllerV4.adjust (- 5);
                    break;
                } case 7 :
                {
                    resetFunctionV4.onReset ();
                    break;
                } default :
                System.out.println ("Shutting down...........");
                break OUTER;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461795_1_17
15461626_15461802_1_21
Title: plusOut code java 
----------------------------------------

public String plusOut (String str, String word) {
    String newString = "";
    for (int i = 0;
    i < str.length (); i ++) {
        String sub = str.substring (i, Math.min (i + word.length (), str.length ()));
        if (sub.equals (word)) {
            newString = newString + sub;
            i += sub.length () - 1;
        } else {
            newString = newString + "+";
        }
    }
    return newString;
}
----------------------------------------

public String plusOut (String str, String word) {
    if (! str.contains (word)) {
        System.out.println ("Word not found in string!");
        return "Ut-oh!";
    }
    int indexOfStart = str.indexOf (word);
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < indexOfStart; i ++) {
        sb.append ('+');
    }
    sb.append (word);
    for (int i = indexOfStart + word.length ();
    i < str.length (); i ++) {
        sb.append ('+');
    }
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461795_1_17
15461626_15461807_1_14
Title: plusOut code java 
----------------------------------------

public String plusOut (String str, String word) {
    String newString = "";
    for (int i = 0;
    i < str.length (); i ++) {
        String sub = str.substring (i, Math.min (i + word.length (), str.length ()));
        if (sub.equals (word)) {
            newString = newString + sub;
            i += sub.length () - 1;
        } else {
            newString = newString + "+";
        }
    }
    return newString;
}
----------------------------------------

public static String plusOut (String str, String word) {
    StringBuilder newString = new StringBuilder (str.length ());
    String [] split = str.split (word);
    for (int i = 0;
    i < split.length; i ++) {
        for (int j = 0;
        j < split [i].length (); j ++) newString.append ('+');

        if (i != split.length - 1) newString.append (word);

    }
    return newString.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461795_1_17
15461626_15461850_1_14
Title: plusOut code java 
----------------------------------------

public String plusOut (String str, String word) {
    String newString = "";
    for (int i = 0;
    i < str.length (); i ++) {
        String sub = str.substring (i, Math.min (i + word.length (), str.length ()));
        if (sub.equals (word)) {
            newString = newString + sub;
            i += sub.length () - 1;
        } else {
            newString = newString + "+";
        }
    }
    return newString;
}
----------------------------------------

public static String plusOut (String word, String find) {
    StringBuilder newStr = new StringBuilder ();
    int start = word.indexOf (find);
    if (start > - 1) {
        for (int i = 0;
        i < start; i ++) {
            newStr.append ("+");
        }
        newStr.append (find);
        for (int i = 0;
        i < word.length () - (start + find.length ()); i ++) {
            newStr.append ("+");
        }
    }
    return newStr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461795_1_17
15461626_15461918_1_14
Title: plusOut code java 
----------------------------------------

public String plusOut (String str, String word) {
    String newString = "";
    for (int i = 0;
    i < str.length (); i ++) {
        String sub = str.substring (i, Math.min (i + word.length (), str.length ()));
        if (sub.equals (word)) {
            newString = newString + sub;
            i += sub.length () - 1;
        } else {
            newString = newString + "+";
        }
    }
    return newString;
}
----------------------------------------

public static String plusOut (String str, String word) {
    String output = "";
    int index = str.indexOf (word);
    for (int i = 0;
    i < str.length (); i ++) {
        if (i == index) {
            output += word;
            i += word.length () - 1;
            continue;
        }
        output += "+";
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461802_1_21
15461626_15461807_1_14
Title: plusOut code java 
----------------------------------------

public String plusOut (String str, String word) {
    if (! str.contains (word)) {
        System.out.println ("Word not found in string!");
        return "Ut-oh!";
    }
    int indexOfStart = str.indexOf (word);
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < indexOfStart; i ++) {
        sb.append ('+');
    }
    sb.append (word);
    for (int i = indexOfStart + word.length ();
    i < str.length (); i ++) {
        sb.append ('+');
    }
    return sb.toString ();
}
----------------------------------------

public static String plusOut (String str, String word) {
    StringBuilder newString = new StringBuilder (str.length ());
    String [] split = str.split (word);
    for (int i = 0;
    i < split.length; i ++) {
        for (int j = 0;
        j < split [i].length (); j ++) newString.append ('+');

        if (i != split.length - 1) newString.append (word);

    }
    return newString.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461802_1_21
15461626_15461850_1_14
Title: plusOut code java 
----------------------------------------

public String plusOut (String str, String word) {
    if (! str.contains (word)) {
        System.out.println ("Word not found in string!");
        return "Ut-oh!";
    }
    int indexOfStart = str.indexOf (word);
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < indexOfStart; i ++) {
        sb.append ('+');
    }
    sb.append (word);
    for (int i = indexOfStart + word.length ();
    i < str.length (); i ++) {
        sb.append ('+');
    }
    return sb.toString ();
}
----------------------------------------

public static String plusOut (String word, String find) {
    StringBuilder newStr = new StringBuilder ();
    int start = word.indexOf (find);
    if (start > - 1) {
        for (int i = 0;
        i < start; i ++) {
            newStr.append ("+");
        }
        newStr.append (find);
        for (int i = 0;
        i < word.length () - (start + find.length ()); i ++) {
            newStr.append ("+");
        }
    }
    return newStr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461802_1_21
15461626_15461918_1_14
Title: plusOut code java 
----------------------------------------

public String plusOut (String str, String word) {
    if (! str.contains (word)) {
        System.out.println ("Word not found in string!");
        return "Ut-oh!";
    }
    int indexOfStart = str.indexOf (word);
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i < indexOfStart; i ++) {
        sb.append ('+');
    }
    sb.append (word);
    for (int i = indexOfStart + word.length ();
    i < str.length (); i ++) {
        sb.append ('+');
    }
    return sb.toString ();
}
----------------------------------------

public static String plusOut (String str, String word) {
    String output = "";
    int index = str.indexOf (word);
    for (int i = 0;
    i < str.length (); i ++) {
        if (i == index) {
            output += word;
            i += word.length () - 1;
            continue;
        }
        output += "+";
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461807_1_14
15461626_15461850_1_14
Title: plusOut code java 
----------------------------------------

public static String plusOut (String str, String word) {
    StringBuilder newString = new StringBuilder (str.length ());
    String [] split = str.split (word);
    for (int i = 0;
    i < split.length; i ++) {
        for (int j = 0;
        j < split [i].length (); j ++) newString.append ('+');

        if (i != split.length - 1) newString.append (word);

    }
    return newString.toString ();
}
----------------------------------------

public static String plusOut (String word, String find) {
    StringBuilder newStr = new StringBuilder ();
    int start = word.indexOf (find);
    if (start > - 1) {
        for (int i = 0;
        i < start; i ++) {
            newStr.append ("+");
        }
        newStr.append (find);
        for (int i = 0;
        i < word.length () - (start + find.length ()); i ++) {
            newStr.append ("+");
        }
    }
    return newStr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461807_1_14
15461626_15461918_1_14
Title: plusOut code java 
----------------------------------------

public static String plusOut (String str, String word) {
    StringBuilder newString = new StringBuilder (str.length ());
    String [] split = str.split (word);
    for (int i = 0;
    i < split.length; i ++) {
        for (int j = 0;
        j < split [i].length (); j ++) newString.append ('+');

        if (i != split.length - 1) newString.append (word);

    }
    return newString.toString ();
}
----------------------------------------

public static String plusOut (String str, String word) {
    String output = "";
    int index = str.indexOf (word);
    for (int i = 0;
    i < str.length (); i ++) {
        if (i == index) {
            output += word;
            i += word.length () - 1;
            continue;
        }
        output += "+";
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461626_15461850_1_14
15461626_15461918_1_14
Title: plusOut code java 
----------------------------------------

public static String plusOut (String word, String find) {
    StringBuilder newStr = new StringBuilder ();
    int start = word.indexOf (find);
    if (start > - 1) {
        for (int i = 0;
        i < start; i ++) {
            newStr.append ("+");
        }
        newStr.append (find);
        for (int i = 0;
        i < word.length () - (start + find.length ()); i ++) {
            newStr.append ("+");
        }
    }
    return newStr;
}
----------------------------------------

public static String plusOut (String str, String word) {
    String output = "";
    int index = str.indexOf (word);
    for (int i = 0;
    i < str.length (); i ++) {
        if (i == index) {
            output += word;
            i += word.length () - 1;
            continue;
        }
        output += "+";
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15461997_15462040_6_18
15461997_15462137_3_14
Title: Time Schedule Error 
----------------------------------------

public Test () {
    Timer timer = new Timer ();
    timer.schedule (new TimerTask () {
        public void run () {
            System.out.println ("Updated");
        }}

    , 0, 1000);
}
----------------------------------------

public Test () {
    Timer timer = new Timer ();
    timer.schedule (new TimerTask () {
        public void run () {
            System.out.println ("Updated");
        }}

    , new Date (System.currentTimeMillis ()), 1000);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15462259_15463314_1_15
15462259_15548627_13_23
Title: Get GoogleMap from ViewPager's fragment 
----------------------------------------

public Fragment getItem (int position) {
    Fragment fragment;
    switch (position) {
        case 0 :
            fragment = new MyFragment ();
            break;
        case 1 :
            fragment = new MySupportMapFragment ();
            break;
    }
    Bundle args = new Bundle ();
    args.putInt (MyFragment.ARG_SECTION_NUMBER, position);
    fragment.setArguments (args);
    return fragment;
}
----------------------------------------

public Fragment getItem (int position) {
    switch (position) {
        case 0 :
            return new MyFragment ();
        case 1 :
            return MyMapFragment.newInstance (YEREVAN);
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15472260_15473230_58_65
15472260_15482680_31_38
Title: JTextField in JToolbar - cannot display properly in both Linux and Windows 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            GlueTest window = new GlueTest ();
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            Test window = new Test ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15476063_15488807_44_52
15476063_15488807_56_67
Title: Clip an HBox inside a GridPane 
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            grid.setClip (gridClip);
        } else {
            grid.setClip (null);
        }
    }
}
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            grid.setMaxSize (100, 25);
        } else {
            grid.setMaxSize (Double.MAX_VALUE, Double.MAX_VALUE);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15476063_15488807_44_52
15476063_15488807_71_84
Title: Clip an HBox inside a GridPane 
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            grid.setClip (gridClip);
        } else {
            grid.setClip (null);
        }
    }
}
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            for (Node gridCell : grid.getChildren ()) {
                Rectangle cellClip = new Rectangle (100, 12);
                gridCell.setClip (cellClip);
            }
        } else {
            for (Node gridCell : grid.getChildren ()) {
                gridCell.setClip (null);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15476063_15488807_44_52
15476063_15488807_89_97
Title: Clip an HBox inside a GridPane 
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            grid.setClip (gridClip);
        } else {
            grid.setClip (null);
        }
    }
}
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            layout.getChildren ().set (0, gridWithClippedBoxes);
        } else {
            layout.getChildren ().set (0, grid);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15476063_15488807_56_67
15476063_15488807_71_84
Title: Clip an HBox inside a GridPane 
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            grid.setMaxSize (100, 25);
        } else {
            grid.setMaxSize (Double.MAX_VALUE, Double.MAX_VALUE);
        }
    }
}
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            for (Node gridCell : grid.getChildren ()) {
                Rectangle cellClip = new Rectangle (100, 12);
                gridCell.setClip (cellClip);
            }
        } else {
            for (Node gridCell : grid.getChildren ()) {
                gridCell.setClip (null);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15476063_15488807_56_67
15476063_15488807_89_97
Title: Clip an HBox inside a GridPane 
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            grid.setMaxSize (100, 25);
        } else {
            grid.setMaxSize (Double.MAX_VALUE, Double.MAX_VALUE);
        }
    }
}
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            layout.getChildren ().set (0, gridWithClippedBoxes);
        } else {
            layout.getChildren ().set (0, grid);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15476063_15488807_71_84
15476063_15488807_89_97
Title: Clip an HBox inside a GridPane 
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            for (Node gridCell : grid.getChildren ()) {
                Rectangle cellClip = new Rectangle (100, 12);
                gridCell.setClip (cellClip);
            }
        } else {
            for (Node gridCell : grid.getChildren ()) {
                gridCell.setClip (null);
            }
        }
    }
}
----------------------------------------

public void changed (ObservableValue < ? extends Boolean > ov, Boolean wasClipped, Boolean clipped) {
    if (clipped != null) {
        if (clipped) {
            layout.getChildren ().set (0, gridWithClippedBoxes);
        } else {
            layout.getChildren ().set (0, grid);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15480894_15482391_25_65
15480894_15482391_77_110
Title: Java server-client readLine() method 
----------------------------------------

public void run () {
    ServerSocket serverSocket = null;
    try {
        serverSocket = new ServerSocket (1234);
        Socket clientSocket = null;
        clientSocket = serverSocket.accept ();
        debug ("Connected");
        PrintWriter out = new PrintWriter (clientSocket.getOutputStream (), true);
        BufferedReader in = new BufferedReader (new InputStreamReader (clientSocket.getInputStream ()));
        String textFromClient = null;
        String textToClient = null;
        textFromClient = in.readLine ();
        debug ("Read '" + textFromClient + "'");
        if ("A".equals (textFromClient)) {
            textToClient = "1111";
        } else if ("B".equals (textFromClient)) {
            textToClient = "2222\r\n3333";
        }

        debug ("Writing '" + textToClient + "'");
        out.print (textToClient + "\r\n");
        out.flush ();
        out.close ();
        in.close ();
        clientSocket.close ();
        serverSocket.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    Socket socket = null;
    PrintWriter out = null;
    BufferedReader in = null;
    BufferedReader read = new BufferedReader (new InputStreamReader (System.in));
    try {
        socket = new Socket ("localhost", 1234);
        out = new PrintWriter (socket.getOutputStream (), true);
        in = new BufferedReader (new InputStreamReader (socket.getInputStream ()));
        debug ("Connected");
        String textToServer;
        textToServer = read.readLine ();
        debug ("Sending '" + textToServer + "'");
        out.print (textToServer + "\r\n");
        out.flush ();
        String serverResponse = null;
        while ((serverResponse = in.readLine ()) != null) debug (serverResponse);

        out.close ();
        in.close ();
        read.close ();
        socket.close ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15486884_15486966_10_17
15486884_15487439_34_47
Title: Java Map : alias on key 
----------------------------------------

public V get (final Object key) {
    if (keySet ().contains (key)) {
        return super.get (key);
    } else if (aliases.keySet ().contains (key)) {
        return super.get (aliases.get (key));
    }

    return null;
}
----------------------------------------

public V get (Object o) {
    V v = backingMap.get (o);
    if (v == null) {
        K realKey = aliasToRealKey.get (o);
        if (realKey == null) {
            return null;
        }
        return backingMap.get (realKey);
    }
    return v;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15487463_15513346_1_15
15487463_15532848_1_28
Title: "Lucene prohibited clause ""fuzzyfied"" where it shouldn't" 
----------------------------------------

private CharArraySet getNoStemmingSet (String query) {
    if (query != null && ! query.contains (" -")) {
        return new CharArraySet (Version.LUCENE_41, Collections.emptyList (), true);
    }
    List < String > proihibitedClauses = new ArrayList < String > ();
    for (String clause : query.split ("\\s")) {
        if (clause.startsWith ("-")) {
            proihibitedClauses.add (clause.replace ("-", ""));
        }
    }
    return new CharArraySet (Version.LUCENE_41, proihibitedClauses, true);
}
----------------------------------------

private CharArraySet getNoStemmingSet (String query) {
    if (query != null && ! query.contains (" -")) {
        return new CharArraySet (Version.LUCENE_41, Collections.emptyList (), true);
    }
    List < String > proihibitedClauses = new ArrayList < String > ();
    String [] quotedWords = null;
    for (int i = 0;
    i < query.length (); i ++) {
        if (query.charAt (i) == '-' && query.charAt (i + 1) == '\"') {
            quotedWords = query.substring (i + 2, query.indexOf ('\"', i + 2)).split ("\\s");
            for (String quotedWord : quotedWords) {
                proihibitedClauses.add (quotedWord);
            }
        } else if (query.charAt (i) == '-') {
            if (query.indexOf (' ', i + 1) > 0) {
                proihibitedClauses.add (query.substring (i + 1, query.indexOf (' ', i + 1)));
            } else {
                proihibitedClauses.add (query.substring (i + 1, query.length ()));
            }
        } else {
            continue;
        }

    }
    return new CharArraySet (Version.LUCENE_41, proihibitedClauses, true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15489818_15490116_114_125
15489818_15490116_86_100
Title: Highlighting a column header of a JTable 
----------------------------------------

public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, column);
    JTableHeader tableHeader = table.getTableHeader ();
    if (tableHeader != null) {
        setForeground (tableHeader.getForeground ());
    }
    setIcon (getIcon (table, column));
    setBorder (UIManager.getBorder ("TableHeader.cellBorder"));
    return this;
}
----------------------------------------

public Component getTableCellRendererComponent (JTable table, Object value, boolean selected, boolean focused, int row, int column) {
    super.getTableCellRendererComponent (table, value, selected, focused, row, column);
    int selectedColumn = table.getSelectedColumn ();
    System.out.println ("Selected " + selectedColumn + "-" + column);
    if (selectedColumn == column) {
        Color bg = table.getSelectionBackground ();
        setBackground (bg);
        setOpaque (true);
    } else {
        setOpaque (false);
    }
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15490377_15490925_1_13
15490377_15490995_1_13
Title: Quicksort Algorithm with one function 
----------------------------------------

public static void sort (int [] a, int left, int right) {
    if (left < right) {
        int pivot = a [right];
        int pos = left - 1;
        for (int i = left;
        i < right; i ++) if (a [i] <= pivot) Swap (a, ++ pos, i);

        Swap (a, pos + 1, right);
        sort (a, left, pos);
        sort (a, pos + 1, right);
    }
}
----------------------------------------

public static void sort (int [] intArray) {
    int n = intArray.length;
    int temp = 0;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 1;
        j < (n - i); j ++) {
            if (intArray [j - 1] > intArray [j]) {
                temp = intArray [j - 1];
                intArray [j - 1] = intArray [j];
                intArray [j] = temp;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15495960_15496168_1_12
15495960_15496292_1_11
Title: Using Java Reflection to load Interfaces 
----------------------------------------

public static IBorrowable getBorrowable1 () {
    IBorrowable a;
    try {
        a = (IBorrowable) Class.forName ("entityclasses.Books");
    } catch (Exception e) {
        System.out.println ("error");
    }
    return a;
}
----------------------------------------

public static IBorrowable getBorrowable1 () {
    try {
        ClassLoader myClassLoader = ClassLoader.getSystemClassLoader ();
        Class < IBorrowable > clazz = (IBorrowable) myClassLoader.loadClass ("entityclasses.Books");
        return clazz.newInstance ();
    } catch (Exception e) {
        System.out.println ("error");
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15506248_15506336_2_13
15506248_15506727_4_12
Title: "Code compiles but not returning anything" 
----------------------------------------

public static void main (String [] args) {
    LetterProfile letterProfile = new LetterProfile ();
    Scanner s = new Scanner (System.in);
    String tScan = " ";
    while (tScan.length () > 0) {
        tScan = s.nextLine ();
        letterProfile.countChars (tScan);
    }
    letterProfile.printResults ()
}
----------------------------------------

public static void main (String [] args) {
    Scanner s = new Scanner (System.in);
    LetterProfile lp = new LetterProfile ();
    String tScan = " ";
    while (tScan.length () > 0) {
        tScan = s.nextLine ();
    }
    lp._any_of_letter_profile_class_method ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15515490_15515615_4_22
15515490_15519652_29_38
Title: equals() method in rectangle and box classes 
----------------------------------------

boolean equals (Object o) {
    if (this == o) return true;

    if (o == null) return false;

    if (o instanceof Box2) {
        (Box2) that = (Box2) o;
        if (this.getWidth () != that.getWidth ()) return false;

        if (this.getLength () != that.getLength ()) return false;

        if (this.getHeight () != that.getHeight ()) return false;

        return true;
    }
    return false;
}
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) {
        return true;
    }
    if (! (obj instanceof Rectangle)) {
        return false;
    }
    Rectangle that = (Rectangle) obj;
    return this.hashCode () == that.hashCode ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15519626_15519745_11_23
15519626_15519745_25_41
Title: How to get all classes names in a package? 
----------------------------------------

public static List < Class < ? > > find (String scannedPackage) {
    String scannedPath = scannedPackage.replace (PKG_SEPARATOR, DIR_SEPARATOR);
    URL scannedUrl = Thread.currentThread ().getContextClassLoader ().getResource (scannedPath);
    if (scannedUrl == null) {
        throw new IllegalArgumentException (String.format (BAD_PACKAGE_ERROR, scannedPath, scannedPackage));
    }
    File scannedDir = new File (scannedUrl.getFile ());
    List < Class < ? > > classes = new ArrayList < Class < ? > > ();
    for (File file : scannedDir.listFiles ()) {
        classes.addAll (find (file, scannedPackage));
    }
    return classes;
}
----------------------------------------

private static List < Class < ? > > find (File file, String scannedPackage) {
    List < Class < ? > > classes = new ArrayList < Class < ? > > ();
    String resource = scannedPackage + PKG_SEPARATOR + file.getName ();
    if (file.isDirectory ()) {
        for (File child : file.listFiles ()) {
            classes.addAll (find (child, resource));
        }
    } else if (resource.endsWith (CLASS_FILE_SUFFIX)) {
        int endIndex = resource.length () - CLASS_FILE_SUFFIX.length ();
        String className = resource.substring (0, endIndex);
        try {
            classes.add (Class.forName (className));
        } catch (ClassNotFoundException ignore) {
        }
    }

    return classes;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15524322_15524377_6_15
15524322_15524855_8_17
Title: charAt(i) is not giving expecting Behaviour with arrays 
----------------------------------------

public static void fromPuzzleString (String puzzle) {
    int puz [] = new int [puzzle.length ()];
    for (int i = 0;
    i < puzzle.length (); i ++) {
        puz [i] = Integer.parseInt (puzzle.charAt (i));
    }
    for (int c : puz) {
        System.out.println (c);
    }
}
----------------------------------------

public static void fromPuzzleString (String puzzle) {
    char [] puz = new char [puzzle.length ()];
    for (int i = 0;
    i < puzzle.length (); i ++) {
        puz [i] = puzzle.charAt (i);
    }
    for (char c : puz) {
        System.out.println (c);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15530484_15531270_10_20
15530484_23631248_2_9
Title: How to switch between two thread back and forth 
----------------------------------------

public void methodAandB () {
    for (int i = 0;
    i < 10; i ++) {
        try {
            MUTEX.waitForMyTurn (MY_ID);
            System.out.println ("This is A and B ");
            MUTEX.switchTurns ();
        } catch (InterruptedException ex) {
        }
    }
}
----------------------------------------

public void methodAandB () {
    for (int i = 0;
    i < 10; i ++) {
        while (GlobalClass.isClassXdone) {
        }
        System.out.println ("This is A and B ");
        GlobalClass.isClassXdone = true;
        GlobalClass.isClassYdone = false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15537477_15537499_1_13
15537477_15537570_1_13
Title: "Missing return Statement Recursive method" 
----------------------------------------

public static boolean isPalindrome (String line) {
    if (line.length () > 1) {
        if (line.charAt (0) == line.charAt (line.length () - 1)) {
            isPalindrome (line.substring (1, line.length () - 1));
        } else return false;

    } else return true;

}
----------------------------------------

public static boolean isPalindrome (String line) {
    if (line.length () > 1) {
        if (line.charAt (0) == line.charAt (line.length () - 1)) {
            return isPalindrome (line.substring (1, line.length () - 1));
        } else return false;

    } else return true;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15542404_15542462_1_19
15542404_15542469_1_18
Title: error in parsing json inside an AsynTask in Android 
----------------------------------------

public static String parse_if_update (String jsonResponse) {
    String update = "no";
    if (jsonResponse != null) {
        try {
            JSONObject json = new JSONObject (jsonResponse);
            if (json != null) {
                update = json.getString ("update");
            }
        } catch (JSONException e) {
            e.printStackTrace ();
        }
        if (update == null) {
            update = "no";
        }
    }
    return update;
}
----------------------------------------

public static String parse_if_update (String jsonResponse) {
    String update = "no";
    try {
        JSONObject json = new JSONObject (jsonResponse);
        if (json != null) update = json.getString ("update");
        else update = "no";

    } catch (JSONException e) {
        e.printStackTrace ();
    }
    if (update == null) {
        update = "no";
    }
    return update;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15544359_15544468_7_24
15544359_15544551_11_26
Title: Add Problems In java 
----------------------------------------

public void add () {
    Scanner keyboard = new Scanner (System.in);
    int a;
    int b;
    System.out.print ("\nEnter a : ");
    a = keyboard.nextInt ();
    System.out.print ("Enter b : ");
    b = keyboard.nextInt ();
    int c = a + b;
    GrandSum += c;
    System.out.println ("\nans is  :" + c);
}
----------------------------------------

public void add () {
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("\nEnter a : ");
    a = keyboard.nextInt ();
    System.out.print ("Enter b : ");
    b = keyboard.nextInt ();
    sum = sum + (a + b);
    System.out.println ("\nans is  :" + (a + b));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15544359_15544551_11_26
15544359_15544596_1_19
Title: Add Problems In java 
----------------------------------------

public void add () {
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("\nEnter a : ");
    a = keyboard.nextInt ();
    System.out.print ("Enter b : ");
    b = keyboard.nextInt ();
    sum = sum + (a + b);
    System.out.println ("\nans is  :" + (a + b));
}
----------------------------------------

public void add () {
    Scanner keyboard = new Scanner (System.in);
    int a;
    int b;
    int total = 0;
    for (int i = 0;
    i < 2; i ++) {
        System.out.print ("\nEnter a : ");
        a = keyboard.nextInt ();
        System.out.print ("Enter b : ");
        b = keyboard.nextInt ();
        int c = a + b;
        total += c;
    }
    System.out.println ("\nans is  :" + total);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15544359_15544622_3_26
15544359_15545167_7_32
Title: Add Problems In java 
----------------------------------------

public static void main (String args []) {
    int total = 0;
    Scanner keyboard = new Scanner (System.in);
    while (true) {
        System.out.print ("\nEnter a (-999 to quit): ");
        int a = keyboard.nextInt ();
        if (a == - 999) break;

        System.out.print ("Enter b: ");
        int b = keyboard.nextInt ();
        int c = a + b;
        total += c;
        System.out.println ("\nans is: " + c);
    }
    System.out.println ("total is: " + total);
}
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    ArrayList < Integer > list1 = new ArrayList < Integer > ();
    ArrayList < Integer > list2 = new ArrayList < Integer > ();
    ArrayList < Integer > sum = new ArrayList < Integer > ();
    String choice = "";
    do {
        System.out.println ("enter the first number");
        int a = keyboard.nextInt ();
        System.out.println ("enter the second number");
        int b = keyboard.nextInt ();
        int tempSum = a + b;
        list1.add (a);
        list2.add (b);
        sum.add (tempSum);
        System.out.println ("Do you want to continue : type yes or no");
        choice = keyboard.next ();
    } while (choice.toLowerCase ().charAt (0) == 'y');
    System.out.println ("here are the inputs with theri sum");
    System.out.println ("num1\t num2\t sum");
    for (int i = 0;
    i < list1.size (); i ++) {
        System.out.println (list1.get (i) + "\t" + list2.get (i) + "\t" + sum.get (i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545221_1_14
15545195_15545248_1_14
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    StringBuilder tmpError = new StringBuilder ();
    if (paramA == null) tmpError.append ("paramA was not set");

    if (paramB == null) tmpError.append ("paramB was not set");

    if (paramC == null) tmpError.append ("paramC was not set");

    if (tmpError.length () > 0) {
        tmpError.insert (0, "error occured");
        throw new Exception (tmpError.getString ());
    }
}
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError += "paramA was not set";

    if (paramB == null) tmpError += "paramB was not set";

    if (paramC == null) tmpError += "paramC was not set";

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured" + tmpError;
        throw new Exception (tmpError);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545221_1_14
15545195_15545286_1_11
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    StringBuilder tmpError = new StringBuilder ();
    if (paramA == null) tmpError.append ("paramA was not set");

    if (paramB == null) tmpError.append ("paramB was not set");

    if (paramC == null) tmpError.append ("paramC was not set");

    if (tmpError.length () > 0) {
        tmpError.insert (0, "error occured");
        throw new Exception (tmpError.getString ());
    }
}
----------------------------------------

public void validate () throws Exception {
    StringBuilder sb = new StringBuilder ();
    if (paramA == null) sb.append ("paramA was not set");

    if (paramB == null) sb.append ("paramB was not set");

    if (paramC == null) sb.append ("paramC was not set");

    if (! (sb.toString ().trim ()).equalsIgnoreCase ("")) {
        sb.Insert (0, "error occured");
        throw new Exception (sp.toString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545221_1_14
15545195_15545331_1_17
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    StringBuilder tmpError = new StringBuilder ();
    if (paramA == null) tmpError.append ("paramA was not set");

    if (paramB == null) tmpError.append ("paramB was not set");

    if (paramC == null) tmpError.append ("paramC was not set");

    if (tmpError.length () > 0) {
        tmpError.insert (0, "error occured");
        throw new Exception (tmpError.getString ());
    }
}
----------------------------------------

public void validate () throws Exception {
    StringBuilder error = new StringBuilder ();
    if (paramA == null) error.append ("paramA was not set");

    if (paramB == null) error.append ("paramB was not set");

    if (paramC == null) error.append ("paramC was not set");

    if (error.length () > 0) {
        throw new Exception ("error occured " + error.toString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545221_1_14
15545195_15545404_1_11
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    StringBuilder tmpError = new StringBuilder ();
    if (paramA == null) tmpError.append ("paramA was not set");

    if (paramB == null) tmpError.append ("paramB was not set");

    if (paramC == null) tmpError.append ("paramC was not set");

    if (tmpError.length () > 0) {
        tmpError.insert (0, "error occured");
        throw new Exception (tmpError.getString ());
    }
}
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError = tmpError.concat ("paramA was not set");

    if (paramB == null) tmpError = tmpError.concat ("paramB was not set");

    if (paramC == null) tmpError = tmpError.concat ("paramC was not set");

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured".concat (tmpError);
        throw new Exception (tmpError);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545248_1_14
15545195_15545286_1_11
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError += "paramA was not set";

    if (paramB == null) tmpError += "paramB was not set";

    if (paramC == null) tmpError += "paramC was not set";

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured" + tmpError;
        throw new Exception (tmpError);
    }
}
----------------------------------------

public void validate () throws Exception {
    StringBuilder sb = new StringBuilder ();
    if (paramA == null) sb.append ("paramA was not set");

    if (paramB == null) sb.append ("paramB was not set");

    if (paramC == null) sb.append ("paramC was not set");

    if (! (sb.toString ().trim ()).equalsIgnoreCase ("")) {
        sb.Insert (0, "error occured");
        throw new Exception (sp.toString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545248_1_14
15545195_15545331_1_17
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError += "paramA was not set";

    if (paramB == null) tmpError += "paramB was not set";

    if (paramC == null) tmpError += "paramC was not set";

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured" + tmpError;
        throw new Exception (tmpError);
    }
}
----------------------------------------

public void validate () throws Exception {
    StringBuilder error = new StringBuilder ();
    if (paramA == null) error.append ("paramA was not set");

    if (paramB == null) error.append ("paramB was not set");

    if (paramC == null) error.append ("paramC was not set");

    if (error.length () > 0) {
        throw new Exception ("error occured " + error.toString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545248_1_14
15545195_15545404_1_11
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError += "paramA was not set";

    if (paramB == null) tmpError += "paramB was not set";

    if (paramC == null) tmpError += "paramC was not set";

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured" + tmpError;
        throw new Exception (tmpError);
    }
}
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError = tmpError.concat ("paramA was not set");

    if (paramB == null) tmpError = tmpError.concat ("paramB was not set");

    if (paramC == null) tmpError = tmpError.concat ("paramC was not set");

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured".concat (tmpError);
        throw new Exception (tmpError);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545286_1_11
15545195_15545331_1_17
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    StringBuilder sb = new StringBuilder ();
    if (paramA == null) sb.append ("paramA was not set");

    if (paramB == null) sb.append ("paramB was not set");

    if (paramC == null) sb.append ("paramC was not set");

    if (! (sb.toString ().trim ()).equalsIgnoreCase ("")) {
        sb.Insert (0, "error occured");
        throw new Exception (sp.toString ());
    }
}
----------------------------------------

public void validate () throws Exception {
    StringBuilder error = new StringBuilder ();
    if (paramA == null) error.append ("paramA was not set");

    if (paramB == null) error.append ("paramB was not set");

    if (paramC == null) error.append ("paramC was not set");

    if (error.length () > 0) {
        throw new Exception ("error occured " + error.toString ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545286_1_11
15545195_15545404_1_11
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    StringBuilder sb = new StringBuilder ();
    if (paramA == null) sb.append ("paramA was not set");

    if (paramB == null) sb.append ("paramB was not set");

    if (paramC == null) sb.append ("paramC was not set");

    if (! (sb.toString ().trim ()).equalsIgnoreCase ("")) {
        sb.Insert (0, "error occured");
        throw new Exception (sp.toString ());
    }
}
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError = tmpError.concat ("paramA was not set");

    if (paramB == null) tmpError = tmpError.concat ("paramB was not set");

    if (paramC == null) tmpError = tmpError.concat ("paramC was not set");

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured".concat (tmpError);
        throw new Exception (tmpError);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15545195_15545331_1_17
15545195_15545404_1_11
Title: Java string concatenation - is there a better way? 
----------------------------------------

public void validate () throws Exception {
    StringBuilder error = new StringBuilder ();
    if (paramA == null) error.append ("paramA was not set");

    if (paramB == null) error.append ("paramB was not set");

    if (paramC == null) error.append ("paramC was not set");

    if (error.length () > 0) {
        throw new Exception ("error occured " + error.toString ());
    }
}
----------------------------------------

public void validate () throws Exception {
    String tmpError = "";
    if (paramA == null) tmpError = tmpError.concat ("paramA was not set");

    if (paramB == null) tmpError = tmpError.concat ("paramB was not set");

    if (paramC == null) tmpError = tmpError.concat ("paramC was not set");

    if (! tmpError.equalsIgnoreCase ("")) {
        tmpError = "error occured".concat (tmpError);
        throw new Exception (tmpError);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15549755_15549991_1_38
15549755_15550537_32_40
Title: Sort algorithm problems on java comparable 
----------------------------------------

public int compare (String a, String b) {
    String [] partsA = a.split ("\\.");
    String [] partsB = b.split ("\\.");
    if (partsA [0].compareTo (partsB [0]) != 0) return partsA [0].compareTo (partsB [0]);
    else {
        if (partsA.length == partsB.length) {
            if (partsA.length == 2) {
                return partsA [1].compareTo (partsB [1]);
            } else {
                if (partsA [2].compareTo (partsB [2]) != 0) return partsA [2].compareTo (partsB [2]);

                return partsA [1].compareTo (partsB [1]);
            }
        } else {
            if (partsA.length == 1) return - 1;

            if (partsB.length == 1) return 1;

            if (partsA.length == 3) {
                if (partsA [2].compareTo (partsB [1]) != 0) return partsA [2].compareTo (partsB [1]);
                else return 1;

            } else {
                if (partsA [1].compareTo (partsB [2]) != 0) return partsA [1].compareTo (partsB [2]);
                else return - 1;

            }
        }
    }
}
----------------------------------------

public int compare (String s1, String s2) {
    String [] s1parts = padArray (s1.split (Pattern.quote (".")), padTo, padWith);
    String [] s2parts = padArray (s2.split (Pattern.quote (".")), padTo, padWith);
    int diff = 0;
    for (int i = 0;
    diff == 0 && i < order.length; i ++) {
        diff = s1parts [order [i]].compareTo (s2parts [order [i]]);
    }
    return diff;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15549755_15549991_1_38
15549755_15553329_28_38
Title: Sort algorithm problems on java comparable 
----------------------------------------

public int compare (String a, String b) {
    String [] partsA = a.split ("\\.");
    String [] partsB = b.split ("\\.");
    if (partsA [0].compareTo (partsB [0]) != 0) return partsA [0].compareTo (partsB [0]);
    else {
        if (partsA.length == partsB.length) {
            if (partsA.length == 2) {
                return partsA [1].compareTo (partsB [1]);
            } else {
                if (partsA [2].compareTo (partsB [2]) != 0) return partsA [2].compareTo (partsB [2]);

                return partsA [1].compareTo (partsB [1]);
            }
        } else {
            if (partsA.length == 1) return - 1;

            if (partsB.length == 1) return 1;

            if (partsA.length == 3) {
                if (partsA [2].compareTo (partsB [1]) != 0) return partsA [2].compareTo (partsB [1]);
                else return 1;

            } else {
                if (partsA [1].compareTo (partsB [2]) != 0) return partsA [1].compareTo (partsB [2]);
                else return - 1;

            }
        }
    }
}
----------------------------------------

public int compare (String a, String b) {
    List < String > partsA = Arrays.asList (a.split ("\\."));
    List < String > partsB = Arrays.asList (b.split ("\\."));
    List < int [] > orders = new ArrayList < int [] > ();
    orders.add (new int [] {0});
    orders.add (new int [] {0, 1});
    orders.add (new int [] {0, 2, 1});
    return compareComplexList (partsA, partsB, orders, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15549755_15550537_1_51
15549755_15553813_56_84
Title: Sort algorithm problems on java comparable 
----------------------------------------

public void test () {
    String [] test = new String [] {"alpha", "beta", "charlie", "zeta", "sitea.alpha", "sitea.charlie", "sitea.pagea.beta", "sitea.pageb.beta", "sitea.pagea.charlie", "siteb.alpha", "siteb.delta", "siteb.pagef.alpha", "siteb.pageb.echo", "siteb.pageb.golf", "siteb.pagea.hotel", "siteb.pageb.hotel", "siteb.pagec.hotel"};
    Arrays.sort (test);
    System.out.println ("Normal sort: " + Arrays.toString (test));
    Arrays.sort (test, new Comparator < String > () {
        final int padTo = 3;
        final String padWith = "";
        final int [] order = {0, 2, 1};
        @Override
        public int compare (String s1, String s2) {
            String [] s1parts = padArray (s1.split (Pattern.quote (".")), padTo, padWith);
            String [] s2parts = padArray (s2.split (Pattern.quote (".")), padTo, padWith);
            int diff = 0;
            for (int i = 0;
            diff == 0 && i < order.length; i ++) {
                diff = s1parts [order [i]].compareTo (s2parts [order [i]]);
            }
            return diff;
        } String [] padArray (String [] array, int padTo, String padWith) {
            String [] padded = new String [padTo];
            for (int i = 0;
            i < padded.length; i ++) {
                padded [padded.length - i - 1] = i < array.length ? array [i] : padWith;
            }
            return padded;
        }}

    );
    System.out.println ("Special sort: " + Arrays.toString (test));
}
----------------------------------------

public void test () {
    String [] test = new String [] {"alpha", "beta", "charlie", "zeta", "sitea.alpha", "sitea.charlie", "sitea.pagea.beta", "sitea.pageb.beta", "sitea.pagea.charlie", "siteb.alpha", "siteb.delta", "siteb.pagef.alpha", "siteb.pageb.echo", "siteb.pageb.golf", "siteb.pagea.hotel", "siteb.pageb.hotel", "siteb.pagec.hotel"};
    Arrays.sort (test);
    System.out.println ("Normal sort: " + Separator.separate ("\n", "\n", test));
    Entry [] entries = new Entry [test.length];
    for (int i = 0;
    i < test.length; i ++) {
        entries [i] = new Entry (test [i]);
    }
    Arrays.sort (entries);
    System.out.println ("Special sort: " + Separator.separate ("\n", "\n", entries));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15549755_15550537_32_40
15549755_15553329_28_38
Title: Sort algorithm problems on java comparable 
----------------------------------------

public int compare (String s1, String s2) {
    String [] s1parts = padArray (s1.split (Pattern.quote (".")), padTo, padWith);
    String [] s2parts = padArray (s2.split (Pattern.quote (".")), padTo, padWith);
    int diff = 0;
    for (int i = 0;
    diff == 0 && i < order.length; i ++) {
        diff = s1parts [order [i]].compareTo (s2parts [order [i]]);
    }
    return diff;
}
----------------------------------------

public int compare (String a, String b) {
    List < String > partsA = Arrays.asList (a.split ("\\."));
    List < String > partsB = Arrays.asList (b.split ("\\."));
    List < int [] > orders = new ArrayList < int [] > ();
    orders.add (new int [] {0});
    orders.add (new int [] {0, 1});
    orders.add (new int [] {0, 2, 1});
    return compareComplexList (partsA, partsB, orders, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15550152_15550622_41_83
15550152_15550622_47_81
Title: android database login form 
----------------------------------------

public void run () {
    response = httpclient.execute (httppost);
    runOnUiThread (new Runnable () {
        @Override
        public void run () {
            if (response.getStatusLine ().getStatusCode () == 200) {
                entity = response.getEntity ();
                if (entity != null) {
                    InputStream instream = entity.getContent ();
                    JSONObject jsonResponse = new JSONObject (convertStreamToString (instream));
                    String retUser = jsonResponse.getString ("username");
                    String retPass = jsonResponse.getString ("password");
                    if (username.equals (retUser) && password.equals (retPass)) {
                        SharedPreferences sp = getSharedPreferences ("logindetails", 0);
                        SharedPreferences.Editor spedit = sp.edit ();
                        spedit.putString ("username", username);
                        spedit.putString ("password", password);
                        spedit.commit ();
                        Toast.makeText (getBaseContext (), "Succes!", Toast.LENGTH_SHORT).show ();
                    } else {
                        Toast.makeText (getBaseContext (), "Invalid Login Details", Toast.LENGTH_SHORT).show ();
                    }
                }
            }
        }}

    );
}
----------------------------------------

public void run () {
    if (response.getStatusLine ().getStatusCode () == 200) {
        entity = response.getEntity ();
        if (entity != null) {
            InputStream instream = entity.getContent ();
            JSONObject jsonResponse = new JSONObject (convertStreamToString (instream));
            String retUser = jsonResponse.getString ("username");
            String retPass = jsonResponse.getString ("password");
            if (username.equals (retUser) && password.equals (retPass)) {
                SharedPreferences sp = getSharedPreferences ("logindetails", 0);
                SharedPreferences.Editor spedit = sp.edit ();
                spedit.putString ("username", username);
                spedit.putString ("password", password);
                spedit.commit ();
                Toast.makeText (getBaseContext (), "Succes!", Toast.LENGTH_SHORT).show ();
            } else {
                Toast.makeText (getBaseContext (), "Invalid Login Details", Toast.LENGTH_SHORT).show ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15555884_15557346_25_33
15555884_15557346_35_116
Title: Efficient Java List Merging Algorithm 
----------------------------------------

public void mergLists () {
    List < List < String > > listList = new ArrayList < > ();
    listList.add (Arrays.asList (list1));
    listList.add (Arrays.asList (list2));
    List < String > mergedList = mergLists (listList);
    for (String s : mergedList) {
        System.out.println (s);
    }
}
----------------------------------------

public List < String > mergLists (List < List < String > > listList) {
    List < String > mergedList = new ArrayList < > ();
    Map < String, List < String > > levelMap = new HashMap < String, List < String > > ();
    for (int j = 0;
    j < listList.size (); j ++) {
        List < String > list = listList.get (j);
        String actLevel = null;
        for (int i = 0;
        i < list.size (); i ++) {
            String line = list.get (i).trim ();
            if (isLevel (line)) {
                actLevel = line;
            } else {
                if (actLevel != null) {
                    List < String > levelList = levelMap.get (actLevel);
                    if (levelList == null) {
                        levelList = new ArrayList < > ();
                        levelMap.put (actLevel, levelList);
                    }
                    levelList.add (line);
                } else {
                    System.out.println ("line " + (i + 1) + " in list " + (j + 1) + " does not belong to a level.");
                }
            }
        }
    }
    List < String > sortedLevelList = new ArrayList < > (levelMap.keySet ());
    Collections.sort (sortedLevelList, new Comparator < String > () {
        @Override
        public int compare (String o1, String o2) {
            return (extractNumberFromLevel (o1) - extractNumberFromLevel (o2));
        } private int extractNumberFromLevel (String level) {
            int r = 0;
            int i = level.indexOf ("level");
            if (i != - 1) {
                int j = level.lastIndexOf ("==");
                if (j != - 1) {
                    String n = level.substring (i + "level".length (), j).trim ();
                    try {
                        r = Integer.parseInt (n);
                    } catch (NumberFormatException e) {
                    }
                }
            }
            return r;
        }}

    );
    for (String level : sortedLevelList) {
        List < String > lineList = levelMap.get (level);
        Collections.sort (lineList, new Comparator < String > () {
            @Override
            public int compare (String o1, String o2) {
                return o1.trim ().length () == 0 ? 1 : (extractNumberFromLine (o1) - extractNumberFromLine (o2));
            } private int extractNumberFromLine (String o) {
                int r = 0;
                int i = o.indexOf ('.');
                if (i != - 1) {
                    String n = o.substring (0, i).trim ();
                    try {
                        r = Integer.parseInt (n);
                    } catch (NumberFormatException e) {
                    }
                }
                return r;
            }}

        );
        mergedList.add (level);
        mergedList.addAll (lineList);
    }
    return mergedList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15561548_15561830_6_33
15561548_15571334_1_29
Title: making a line of text from a text file into a cipher text in java 
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter file: ");
    Scanner input = new Scanner (System.in);
    String fileName = input.nextLine ();
    Scanner inputStream = null;
    System.out.println ("" + fileName);
    try {
        inputStream = new Scanner (new File (fileName));
    } catch (FileNotFoundException e) {
        System.out.println ("Error opening the file: " + fileName);
        System.exit (0);
    }
    while (inputStream.hasNextLine ()) {
        String text = inputStream.nextLine ();
        System.out.println (text);
        String [] splits = text.split ("");
        CircularList clist = new CircularList (splits, 5);
        for (int i = 0;
        i < splits.length - 1; i += 1) {
            System.out.print ("" + clist.next ());
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int key;
    System.out.print ("Enter file: ");
    String fileName = input.nextLine ();
    System.out.print ("Please enter your Cipher Key: ");
    key = input.nextInt ();
    Scanner inputStream = null;
    System.out.println ("File name is: " + fileName);
    try {
        inputStream = new Scanner (new File (fileName));
    } catch (FileNotFoundException e) {
        System.out.println ("Error opening the file" + fileName);
        System.exit (0);
    }
    while (inputStream.hasNextLine ()) {
        String text = inputStream.nextLine ();
        System.out.println (text);
        for (int i = 0;
        i < text.length (); i ++) {
            System.out.print (text.charAt ((i * key) % text.length ()));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15562184_15562227_1_12
15562184_15564526_4_25
Title: How to design a data driven JUnit test class 
----------------------------------------

public static Collection data () throws IOException {
    ArrayList < String > array1 = new ArrayList ();
    ArrayList < String > array2 = new ArrayList ();
    ArrayList < String > array3 = new ArrayList ();
    ArrayList < ArrayList < String > > lines = new ArrayList ();
    lines.add (array1);
    lines.add (array2);
    lines.add (array3);
    return (Collection) lines;
}
----------------------------------------

public static Collection < Object [] > data () throws IOException {
    List < Object [] > lines = new ArrayList < > ();
    File testFile = new File ("/temp/TestFile.txt");
    FileReader fileReader = new FileReader (testFile);
    BufferedReader bufReader = new BufferedReader (fileReader);
    Assert.assertFalse ("Failed to load the test file.", testFile == null);
    boolean isEOF = false;
    while (! isEOF) {
        String aline = bufReader.readLine ();
        if (aline == null) {
            System.out.println ("Done processing.");
            isEOF = true;
        }
        lines.add (new Object [] {aline});
    }
    return lines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15564289_15564447_1_16
15564289_15564457_1_14
Title: method scanner input java? 
----------------------------------------

public static double getPrincipalAmount (double numb1) {
    numb1 = 0;
    Scanner input = new Scanner (System.in);
    do {
        System.out.print ("Enter Loan Amount: ");
        numb1 = input.nextDouble ();
        double getPrincipalAmount = 0;
        if (numb1 > 0) {
            getPrincipalAmount = numb1;
        } else {
            System.out.println ("Data Error: Loan amount must be greater than zero. You entered " + numb1);
        }
    } while (numb1 < 0);
    return getPrincipalAmount;
}
----------------------------------------

public static double getPrincipalAmount () {
    final Scanner input = new Scanner (System.in);
    double getPrincipalAmount = 0;
    double numb1;
    do {
        System.out.print ("Enter Loan Amount: ");
        if ((numb1 = input.nextDouble ()) > 0) {
            getPrincipalAmount = numb1;
        } else {
            System.out.println ("Data Error: Loan amount must be greater than zero. You entered " + numb1);
        }
    } while (numb1 < 0);
    return getPrincipalAmount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15564289_15564457_1_14
15564289_15564573_9_24
Title: method scanner input java? 
----------------------------------------

public static double getPrincipalAmount () {
    final Scanner input = new Scanner (System.in);
    double getPrincipalAmount = 0;
    double numb1;
    do {
        System.out.print ("Enter Loan Amount: ");
        if ((numb1 = input.nextDouble ()) > 0) {
            getPrincipalAmount = numb1;
        } else {
            System.out.println ("Data Error: Loan amount must be greater than zero. You entered " + numb1);
        }
    } while (numb1 < 0);
    return getPrincipalAmount;
}
----------------------------------------

public static double getPrincipalAmount () {
    Scanner input = new Scanner (System.in);
    double getPrincipalAmount = 0;
    double numb = 0;
    do {
        System.out.print ("Enter Loan Amount: ");
        numb = input.nextDouble ();
        if (numb > 0) {
            getPrincipalAmount = numb;
        } else {
            System.out.println ("Data Error: Loan amount must be greater than zero. You entered " + numb);
        }
    } while (numb < 0);
    input.close ();
    return getPrincipalAmount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15569701_15569931_12_25
15569701_15570098_1_41
Title: How to determine the type of primitive in a String representation? 
----------------------------------------

static public Object getPrimitive (String string) {
    try {
        return Byte.valueOf (string);
    } catch (Exception e) {
    }
    try {
        return Short.valueOf (string);
    } catch (Exception e) {
    }
    try {
        return Integer.valueOf (string);
    } catch (Exception e) {
    }
    try {
        return new BigInteger (string);
    } catch (Exception e) {
    }
    try {
        if (string.matches (".{1,8}")) return Float.valueOf (string);

    } catch (Exception e) {
    }
    try {
        if (string.matches (".{1,17}")) return Double.valueOf (string);

    } catch (Exception e) {
    }
    try {
        return new BigDecimal (string);
    } catch (Exception e) {
    }
    return null;
}
----------------------------------------

public Object getPrimitive (String primitiveAsString) {
    String value = primitiveAsString;
    try {
        return Byte.valueOf (value);
    } catch (NumberFormatException ex) {
    }
    try {
        return Short.valueOf (value);
    } catch (NumberFormatException ex) {
    }
    try {
        return Integer.valueOf (value);
    } catch (NumberFormatException ex) {
    }
    try {
        return Float.valueOf (value);
    } catch (NumberFormatException ex) {
    }
    try {
        return Double.valueOf (value);
    } catch (NumberFormatException ex) {
    }
    try {
        return Long.valueOf (value);
    } catch (NumberFormatException ex) {
    }
    try {
        return new BigInteger (value);
    } catch (NumberFormatException ex) {
    }
    try {
        return new BigDecimal (value);
    } catch (NumberFormatException ex) {
    }
    if (value.length () == 1) {
        return new Character (value.charAt (0));
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15579123_15579176_11_23
15579123_15579207_1_15
Title: Java - Returning Multiple Integers to an Array 
----------------------------------------

public static int [] findEvenNumbers (int min, int max) {
    int [] result = new int [max - min + 1];
    int n = 0;
    for (int i = min;
    i <= max; i ++) {
        if ((i % 2) == 0) {
            result [n ++] = i;
        }
    }
    if (n < result.length) {
        result = Arrays.copyOf (result, n);
    }
    return result;
}
----------------------------------------

public static Integer [] findEvenNumbers (int min, int max) {
    List < Integer > lists = new ArrayList < Integer > ();
    for (int i = min;
    i <= max; i ++) {
        if ((i % 2) == 0) {
            lists.add (i);
        }
    }
    return (Integer []) (lists.toArray ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15579480_15579938_7_24
15579480_51946453_1_14
Title: Digital Clock On Console Window 
----------------------------------------

public static void main (String [] args) {
    Thread th = new Thread (new Runnable () {
        public void run () {
            while (true) {
                Date date = Calendar.getInstance ().getTime ();
                DateFormat formatter = new SimpleDateFormat ("EEEE, dd MMMM yyyy, hh:mm:ss.SSS a");
                String today = formatter.format (date);
                System.out.print ("Today : " + today + "\r");
                try {
                    Thread.sleep (100);
                } catch (Exception ex) {
                }
            }
        }}

    );
    th.start ();
}
----------------------------------------

public static void main (String [] args) {
    while (true) {
        Date date = Calendar.getInstance ().getTime ();
        DateFormat formatter = new SimpleDateFormat ("EEEE, dd MMMM yyyy, hh:mm:ss.SSS a");
        String today = formatter.format (date);
        System.out.print ("\rToday : " + today);
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15585573_15585588_1_25
15585573_15585595_1_21
Title: how does default equals implementation in java works for String? 
----------------------------------------

@override
public boolean equals (Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String anotherString = (String) anObject;
        int n = count;
        if (n == anotherString.count) {
            char v1 [] = value;
            char v2 [] = anotherString.value;
            int i = offset;
            int j = anotherString.offset;
            while (n -- != 0) {
                if (v1 [i ++] != v2 [j ++]) return false;

            }
            return true;
        }
    }
    return false;
}
----------------------------------------

public boolean equals (Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String anotherString = (String) anObject;
        int n = count;
        if (n == anotherString.count) {
            char v1 [] = value;
            char v2 [] = anotherString.value;
            int i = offset;
            int j = anotherString.offset;
            while (n -- != 0) {
                if (v1 [i ++] != v2 [j ++]) return false;

            }
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15585573_15585588_1_25
15585573_15585678_1_21
Title: how does default equals implementation in java works for String? 
----------------------------------------

@override
public boolean equals (Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String anotherString = (String) anObject;
        int n = count;
        if (n == anotherString.count) {
            char v1 [] = value;
            char v2 [] = anotherString.value;
            int i = offset;
            int j = anotherString.offset;
            while (n -- != 0) {
                if (v1 [i ++] != v2 [j ++]) return false;

            }
            return true;
        }
    }
    return false;
}
----------------------------------------

public boolean equals (Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String anotherString = (String) anObject;
        int n = count;
        if (n == anotherString.count) {
            char v1 [] = value;
            char v2 [] = anotherString.value;
            int i = offset;
            int j = anotherString.offset;
            while (n -- != 0) {
                if (v1 [i ++] != v2 [j ++]) return false;

            }
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15589353_15589557_34_53
15589353_15589557_6_17
Title: Avoid Code Duplicate Android Class 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_upload);
    Bundle extras = getIntent ().getExtras ();
    String picturePathView = extras.getString ("picturePath");
    ImageView imageView = (ImageView) findViewById (R.id.imgView);
    findViewById (R.id.imgView).setScrollBarStyle (View.SCROLLBARS_INSIDE_INSET);
    imageView.setImageBitmap (BitmapFactory.decodeFile (picturePathView));
    Button btnGallery = (Button) findViewById (R.id.btnGallery);
    btnGallery.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View arg0) {
            startMediaPicker ();
        }}

    );
}
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button btnGallery = (Button) findViewById (R.id.btnGallery);
    btnGallery.setOnClickListener (new View.OnClickListener () {
        @Override
        public void onClick (View arg0) {
            startMediaPicker ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15591637_17995031_310_405
15591637_17995031_417_491
Title: Parsing raw data received from bluetooth HDP device 
----------------------------------------

public void run () {
    Log.e ("TEST", "Read Data 1");
    FileInputStream fis = new FileInputStream (mFd.getFileDescriptor ());
    final byte data [] = new byte [200];
    Log.i (TAG, "Read Data 2");
    try {
        while (fis.read (data) > - 1) {
            Log.i (TAG, "INBOUND");
            String test = byte2hex (data);
            Log.i (TAG, test);
            if (data [0] != (byte) 0x00) {
                if (data [0] == (byte) 0xE2) {
                    Log.i (TAG, "E2 - Association Request");
                    count = 1;
                    (new WriteThread (mFd)).start ();
                    try {
                        sleep (100);
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    count = 2;
                    (new WriteThread (mFd)).start ();
                } else if (data [0] == (byte) 0xE7) {
                    Log.i (TAG, "E7 - Data Given");
                    if (data [3] != (byte) 0xda) {
                        invoke [0] = data [6];
                        invoke [1] = data [7];
                        Log.i (TAG, "E7 - Reading?");
                        ByteBuffer sys = ByteBuffer.allocate (2);
                        sys.order (ByteOrder.LITTLE_ENDIAN);
                        sys.put (data [45]);
                        sys.put (data [46]);
                        short sysVal = sys.getShort (0);
                        Log.i (TAG, " Sys - " + sysVal);
                        ByteBuffer dia = ByteBuffer.allocate (2);
                        dia.order (ByteOrder.LITTLE_ENDIAN);
                        dia.put (data [47]);
                        dia.put (data [48]);
                        short diaVal = dia.getShort (0);
                        Log.i (TAG, " Dia - " + diaVal);
                        sendMessage (9919, diaVal);
                        sendMessage (9920, sysVal);
                        for (int i = 0;
                        i < (data.length - 2); i ++) {
                            ByteBuffer bb = ByteBuffer.allocate (2);
                            bb.order (ByteOrder.LITTLE_ENDIAN);
                            bb.put (data [i]);
                            bb.put (data [i + 1]);
                            short shortVal = bb.getShort (0);
                            Log.i (TAG, i + " Short Val - " + shortVal);
                        }
                        count = 3;
                        (new WriteThread (mFd)).start ();
                    }
                } else if (data [0] == (byte) 0xE4) {
                }

                for (int i = 0;
                i < data.length; i ++) {
                    data [i] = (byte) 0x00;
                }
            }
            sendMessage (STATUS_READ_DATA, 0);
        }
    } catch (IOException ioe) {
    }
    if (mFd != null) {
        try {
            mFd.close ();
        } catch (IOException e) {
        }
    }
    sendMessage (STATUS_READ_DATA_DONE, 0);
}
----------------------------------------

public void run () {
    FileOutputStream fos = new FileOutputStream (mFd.getFileDescriptor ());
    final byte data_AR [] = new byte [] {(byte) 0xE3, (byte) 0x00, (byte) 0x00, (byte) 0x2C, (byte) 0x00, (byte) 0x00, (byte) 0x50, (byte) 0x79, (byte) 0x00, (byte) 0x26, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x00, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x3C, (byte) 0x5A, (byte) 0x37, (byte) 0xFF, (byte) 0xFE, (byte) 0x95, (byte) 0xEE, (byte) 0xE3, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
    final byte data_DR [] = new byte [] {(byte) 0xE7, (byte) 0x00, (byte) 0x00, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x00, (byte) 0x24, (byte) 0x02, (byte) 0x01, (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x1D, (byte) 0x00, (byte) 0x00};
    final byte get_MDS [] = new byte [] {(byte) 0xE7, (byte) 0x00, (byte) 0x00, (byte) 0x0E, (byte) 0x00, (byte) 0x0C, (byte) 0x00, (byte) 0x24, (byte) 0x01, (byte) 0x03, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
    final byte data_RR [] = new byte [] {(byte) 0xE5, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00};
    try {
        Log.i (TAG, String.valueOf (count));
        if (count == 1) {
            fos.write (data_AR);
            Log.i (TAG, "Association Responded!");
        } else if (count == 2) {
            fos.write (get_MDS);
            Log.i (TAG, "Get MDS object attributes!");
        } else if (count == 3) {
            fos.write (data_DR);
            Log.i (TAG, "Data Responsed!");
        } else if (count == 4) {
            fos.write (data_RR);
            Log.i (TAG, "Data Released!");
        }

    } catch (IOException ioe) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15602830_15602925_8_31
15602830_15602973_1_17
Title: Elevator Simulator help in Java 
----------------------------------------

public void selectFloor () {
    Scanner scnr = new Scanner (System.in);
    int newFloor;
    System.out.println ("Enter the floor you'd like to go to ==> ");
    newFloor = scnr.nextInt ();
    if (newFloor > 100 || newFloor < 0 || newFloor == 13) {
        System.out.println ("Invalid selection");
    } else {
        int direction = 0;
        if (currentFloor < newFloor) {
            direction = 1;
        } else if (currentFloor > newFloor) {
            direction = - 1;
        } else {
            direction = 0;
        }

        for (; currentFloor != newFloor; currentFloor += newFloor) System.out.println ("..." + i);

        System.out.println ("Ding!");
    }
}
----------------------------------------

public void selectFloor () {
    Scanner scnr = new Scanner (System.in);
    int newFloor;
    System.out.println ("Enter the floor you'd like to go to ==> ");
    newFloor = scnr.nextInt ();
    if (newFloor > 100 || newFloor < 0 || newFloor == 13) {
        System.out.println ("Invalid selection");
    } else if (newFloor <= 100 && newFloor > 0 && newFloor != 13) {
        for (int i = 1;
        i <= newFloor; i ++) System.out.println ("..." + i);

        System.out.println ("Ding!");
        backToBasement (newFloor);
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15607779_15607927_2_15
15607779_15607947_3_15
Title: How to change the color of a JTable entire row having a particular column value 
----------------------------------------

public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    Component c = super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, column);
    if (isHighlightingEnabled) {
        Integer percentage = (Integer) table.getValueAt (row, 3);
        if (percentage > 30) c.setBackground (Color.RED);

    }
    return c;
}
----------------------------------------

public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, column);
    Double percent = (Double) table.getValueAt (row, 3);
    if (percent > 0.3 && ! isSelected) {
        setOpaque (true);
        setBackground (Color.RED);
    } else {
        setOpaque (false);
    }
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15613885_15613959_1_12
15613885_15614251_18_25
Title: Removing a comma at the end of String 
----------------------------------------

public static void main (String args []) {
    String [] a = symbolsSet.toArray (new String [0]);
    StringBuffer sb = new StringBuffer ();
    for (int i = 0;
    i < a.length - 1; i ++) {
        sb.append (a [i] + ",");
    }
    sb.append (a [a.length - 1]);
    System.out.println (sb.toString ());
}
----------------------------------------

public static void main (String [] args) {
    SimpleSeparator sep = new SimpleSeparator (",");
    System.out.print ("[");
    for (int i = 0;
    i < 10; i ++) {
        System.out.print (sep.sep () + i);
    }
    System.out.print ("]");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15617928_15618237_1_18
15617928_15619528_23_34
Title: Sort String s2 using the order of String s1 using either of comparable or comparator interface 
----------------------------------------

public static void main (String [] args) {
    String s1 = "war";
    String s2 = "Its awesome being a programmer";
    String result = "";
    for (int i = 0;
    i < s1.length (); i ++) {
        int len = s2.length () - s2.replace (String.valueOf (s1.charAt (i)), "").length ();
        s2 = s2.replace (String.valueOf (s1.charAt (i)), "").replace (" ", "");
        for (int j = 0;
        j < len; j ++) result = result + String.valueOf (s1.charAt (i));

    }
    char [] remaining = s2.toCharArray ();
    Arrays.sort (remaining);
    for (Character c : remaining) result = result + String.valueOf (c);

    System.out.println (result);
}
----------------------------------------

public static void main (String [] args) {
    final String a = "war";
    final String b = "Its awesome being a programmer";
    final List < Character > chars = new ArrayList < Character > ();
    for (char c : b.toCharArray ()) {
        if (c != ' ') {
            chars.add (c);
        }
    }
    Collections.sort (chars, compareOn (a));
    System.out.println (chars);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15624226_15624430_21_30
15624226_28529559_15_56
Title: Java - Search for files in a directory 
----------------------------------------

public static void main (String [] args) {
    FindFile ff = new FindFile ();
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the file to be searched.. ");
    String name = scan.next ();
    System.out.println ("Enter the directory where to search ");
    String directory = scan.next ();
    ff.findFile (name, new File (directory));
}
----------------------------------------

public static void main (String args []) throws IOException {
    String progFile = "C:\\";
    GetList obj = new GetList ();
    String temp = progFile;
    int i;
    while (! "&%@#".equals (temp)) {
        File dir = new File (temp);
        String [] directory = dir.list ();
        if (directory != null) {
            for (String name : directory) {
                if (new File (temp + name).isDirectory ()) obj.push (temp + name + "\\");
                else if (new File (temp + name).isFile ()) {
                    try {
                        if (".exe".equals (name.substring (name.lastIndexOf ('.'), name.length ()))) {
                            System.out.println (temp + name);
                        }
                    } catch (StringIndexOutOfBoundsException e) {
                        System.out.println ("ERROR******" + temp + name);
                    }
                }

            }
        }
        temp = obj.pop ();
    }
    obj.display ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15624226_15624430_21_30
15624226_41237288_7_15
Title: Java - Search for files in a directory 
----------------------------------------

public static void main (String [] args) {
    FindFile ff = new FindFile ();
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the file to be searched.. ");
    String name = scan.next ();
    System.out.println ("Enter the directory where to search ");
    String directory = scan.next ();
    ff.findFile (name, new File (directory));
}
----------------------------------------

public static void main (String [] args) throws IOException {
    Filesearch2 fs = new Filesearch2 ();
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the file to be searched.. ");
    String name = scan.next ();
    System.out.println ("Enter the directory where to search ");
    String directory = scan.next ();
    fs.findFile (name, new File (directory));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15624226_15624430_5_20
15624226_41237288_16_38
Title: Java - Search for files in a directory 
----------------------------------------

public void findFile (String name, File file) {
    File [] list = file.listFiles ();
    if (list != null) for (File fil : list) {
        if (fil.isDirectory ()) {
            findFile (name, fil);
        } else if (name.equalsIgnoreCase (fil.getName ())) {
            System.out.println (fil.getParentFile ());
        }

    }

}
----------------------------------------

public void findFile (String name, File file1) throws IOException {
    File [] list = file1.listFiles ();
    if (list != null) {
        for (File file2 : list) {
            if (file2.isDirectory ()) {
                findFile (name, file2);
            } else if (name.equalsIgnoreCase (file2.getName ())) {
                System.out.println ("Found");
                System.out.println ("File found at : " + file2.getParentFile ());
                System.out.println ("Path diectory: " + file2.getAbsolutePath ());
                String p1 = "" + file2.getParentFile ();
                File f2 = new File (p1);
                Desktop.getDesktop ().open (f2);
            }

        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15624226_28529559_15_56
15624226_41237288_7_15
Title: Java - Search for files in a directory 
----------------------------------------

public static void main (String args []) throws IOException {
    String progFile = "C:\\";
    GetList obj = new GetList ();
    String temp = progFile;
    int i;
    while (! "&%@#".equals (temp)) {
        File dir = new File (temp);
        String [] directory = dir.list ();
        if (directory != null) {
            for (String name : directory) {
                if (new File (temp + name).isDirectory ()) obj.push (temp + name + "\\");
                else if (new File (temp + name).isFile ()) {
                    try {
                        if (".exe".equals (name.substring (name.lastIndexOf ('.'), name.length ()))) {
                            System.out.println (temp + name);
                        }
                    } catch (StringIndexOutOfBoundsException e) {
                        System.out.println ("ERROR******" + temp + name);
                    }
                }

            }
        }
        temp = obj.pop ();
    }
    obj.display ();
}
----------------------------------------

public static void main (String [] args) throws IOException {
    Filesearch2 fs = new Filesearch2 ();
    Scanner scan = new Scanner (System.in);
    System.out.println ("Enter the file to be searched.. ");
    String name = scan.next ();
    System.out.println ("Enter the directory where to search ");
    String directory = scan.next ();
    fs.findFile (name, new File (directory));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1563502_1563546_1_16
1563502_1563590_12_24
Title: Java setting values from a Map to a Set 
----------------------------------------

public static < K, E > void values (Map < K, Set < E > > m1, Map < K, List < E > > m2) {
    for (K key : m1.keySet ()) {
        Set < E > source = m1.get (key);
        List < E > dest = m2.get (key);
        if (dest == null) {
            dest = new ArrayList < E > ();
            m2.put (key, dest);
        }
        dest.addAll (source);
    }
}
----------------------------------------

public static < K, E > Map < K, List < E > > values (Map < K, Set < E > > m) {
    if (m == null) throw new IllegalArgumentException ("null map");

    Map < K, List < E > > m2 = new HashMap < K, List < E > > (Math.max ((int) (m.size () / 0.75f) + 1, 16), 0.75f);
    for (Map.Entry < K, Set < E > > e : m.entrySet ()) {
        m2.put (e.getKey (), new ArrayList < E > (e.getValue ()));
    }
    return m2;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1563502_1563546_1_16
1563502_1563590_1_10
Title: Java setting values from a Map to a Set 
----------------------------------------

public static < K, E > void values (Map < K, Set < E > > m1, Map < K, List < E > > m2) {
    for (K key : m1.keySet ()) {
        Set < E > source = m1.get (key);
        List < E > dest = m2.get (key);
        if (dest == null) {
            dest = new ArrayList < E > ();
            m2.put (key, dest);
        }
        dest.addAll (source);
    }
}
----------------------------------------

public static < K, E > void values (Map < K, Set < E > > m1, final Map < K, List < E > > m2) {
    if (m1 == null) throw new IllegalArgumentException ("null map 1");

    if (m2 == null) throw new IllegalArgumentException ("null map 2");

    for (Map.Entry < K, Set < E > > e : m1.entrySet ()) {
        m2.put (e.getKey (), new ArrayList < E > (e.getValue ()));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1563502_1563590_12_24
1563502_1563590_1_10
Title: Java setting values from a Map to a Set 
----------------------------------------

public static < K, E > Map < K, List < E > > values (Map < K, Set < E > > m) {
    if (m == null) throw new IllegalArgumentException ("null map");

    Map < K, List < E > > m2 = new HashMap < K, List < E > > (Math.max ((int) (m.size () / 0.75f) + 1, 16), 0.75f);
    for (Map.Entry < K, Set < E > > e : m.entrySet ()) {
        m2.put (e.getKey (), new ArrayList < E > (e.getValue ()));
    }
    return m2;
}
----------------------------------------

public static < K, E > void values (Map < K, Set < E > > m1, final Map < K, List < E > > m2) {
    if (m1 == null) throw new IllegalArgumentException ("null map 1");

    if (m2 == null) throw new IllegalArgumentException ("null map 2");

    for (Map.Entry < K, Set < E > > e : m1.entrySet ()) {
        m2.put (e.getKey (), new ArrayList < E > (e.getValue ()));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15635585_42786707_1_21
15635585_46069596_1_25
Title: Remove adjacent duplicate characters in a String(java) i.e input:aaaabbbccdbbaae output: abcdbae 
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    System.out.print ("Enter any word: ");
    String str = scanner.nextLine ();
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == str.charAt (i - 1)) {
            str = str.substring (0, i - 1) + str.substring (i + 1);
            System.out.println (str);
            i = 0;
        }
    }
    if (str.length () == 0) {
        System.out.println ("Empty String");
    }
    scanner.close ();
}
----------------------------------------

public static void main (String [] args) {
    String str;
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter the Word or Sentence");
    str = in.nextLine ();
    String revStr = "null";
    char [] chars = str.toCharArray ();
    char [] reversedChars = new char [chars.length];
    reversedChars [reversedChars.length - 1] = chars [0];
    int r = reversedChars.length - 2;
    for (int i = 1;
    i < chars.length; i ++) {
        if (chars [i] != chars [i - 1]) {
            reversedChars [r] = chars [i];
            r --;
        }
    }
    revStr = new String (Arrays.copyOfRange (reversedChars, r + 1, reversedChars.length));
    System.out.println (revStr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15638626_15638773_1_11
15638626_15640245_16_37
Title: Java string to xml to list 
----------------------------------------

public static void main (String [] args) throws SAXException, ParserConfigurationException, IOException, XPathExpressionException {
    final String pXML = "<root><x>1</x><x>2</x><x>3</x><x>4</x></root>";
    final Document document = DocumentBuilderFactory.newInstance ().newDocumentBuilder ().parse (new ByteArrayInputStream (pXML.getBytes ()));
    final XPathExpression xPathExpression = XPathFactory.newInstance ().newXPath ().compile ("//x/text()");
    final NodeList nodeList = (NodeList) xPathExpression.evaluate (document, XPathConstants.NODESET);
    final List < String > values = new LinkedList < > ();
    for (int i = 0;
    i < nodeList.getLength (); ++ i) {
        values.add (nodeList.item (i).getNodeValue ());
    }
    System.out.println (values);
}
----------------------------------------

public static void main (String arg []) throws Exception {
    String xmlRecords = "<root><x>1</x><x>2</x><x>3</x><x>4</x></root>";
    DocumentBuilder db = DocumentBuilderFactory.newInstance ().newDocumentBuilder ();
    InputSource is = new InputSource ();
    is.setCharacterStream (new StringReader (xmlRecords));
    Document doc = db.parse (is);
    NodeList nodes = doc.getElementsByTagName ("x");
    System.out.println (nodes.getLength ());
    List < String > valueList = new ArrayList < String > ();
    for (int i = 0;
    i < nodes.getLength (); i ++) {
        Element element = (Element) nodes.item (i);
        String name = element.getTextContent ();
        System.out.println ("Name: " + name);
        valueList.add (name);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15644319_15644537_143_154
15644319_15644939_120_147
Title: JFileChooser within a JTable 
----------------------------------------

public static void main (String st []) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            TableFileChooser td = new TableFileChooser ();
            td.prepareAndShowGUI ();
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    String [] columnNames = {"Item", "Description"};
    Object [] [] data = {{"Item 1", "Description of Item 1"}, {"Item 2", "Description of Item 2"}, {"Item 3", "Description of Item 3"}};
    JTable table = new JTable (data, columnNames);
    table.getColumnModel ().getColumn (1).setPreferredWidth (300);
    table.setPreferredScrollableViewportSize (table.getPreferredSize ());
    JScrollPane scrollPane = new JScrollPane (table);
    TablePopupEditor popupEditor = new TablePopupEditor ();
    table.getColumnModel ().getColumn (1).setCellEditor (popupEditor);
    JFrame frame = new JFrame ("Popup Editor Test");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.add (new JTextField (), BorderLayout.NORTH);
    frame.add (scrollPane);
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15644319_15644939_43_64
15644319_19030725_47_60
Title: JFileChooser within a JTable 
----------------------------------------

public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column) {
    SwingUtilities.invokeLater (new Runnable () {
        public void run () {
            System.out.println ("run");
            popup.setText (currentText);
            Point p = editorComponent.getLocationOnScreen ();
            popup.setLocation (p.x, p.y + editorComponent.getSize ().height);
            popup.show ();
            fireEditingStopped ();
        }}

    );
    currentText = value.toString ();
    editorComponent.setText (currentText);
    return editorComponent;
}
----------------------------------------

public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column) {
    file = value.toString ();
    SwingUtilities.invokeLater (new Runnable () {
        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
        }}

    );
    button.setText (file);
    return button;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15645923_15649962_101_112
15645923_15649962_156_181
Title: Custom JComponent(s) refuse to paint (if added to an ArrayList) 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getActionCommand ().equals ("counterFinished")) {
        System.out.println ("Counter finished");
        Pocitadlo tmp = (Pocitadlo) e.getSource ();
        poc.remove (tmp);
        this.setTitle ("Počet počítadiel: " + poc.size ());
        body.remove (tmp);
        body.repaint ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getActionCommand ().equals ("valueTimer")) {
        value --;
        System.out.println ("value = " + value);
        if (actionListener != null) {
            repaint ();
            actionListener.actionPerformed (new ActionEvent (this, ActionEvent.ACTION_PERFORMED, "counterTick"));
        }
        if (value == 0 && actionListener != null) {
            isRunning = false;
            valueTimer.stop ();
            actionListener.actionPerformed (new ActionEvent (this, ActionEvent.ACTION_PERFORMED, "counterFinished"));
            blinkTimer.stop ();
        } else if (value < maxValue / 2 && ! blinkTimer.isRunning ()) {
            blinkTimer.start ();
        }

    }
    if (e.getActionCommand ().equals ("blinkTimer")) {
        System.out.println ("Blink");
        isDisplayed = ! isDisplayed;
        repaint ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15645923_15649962_101_112
15645923_15649962_70_94
Title: Custom JComponent(s) refuse to paint (if added to an ArrayList) 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getActionCommand ().equals ("counterFinished")) {
        System.out.println ("Counter finished");
        Pocitadlo tmp = (Pocitadlo) e.getSource ();
        poc.remove (tmp);
        this.setTitle ("Počet počítadiel: " + poc.size ());
        body.remove (tmp);
        body.repaint ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int val, x, y;
    val = 20;
    x = (getWidth () / 2) - 10 + rnd.nextInt (20);
    y = (getHeight () / 2) - 10 + rnd.nextInt (20);
    Pocitadlo tmp = new Pocitadlo (val, x, y, getFont ());
    tmp.addActionListener (MainFrame.this);
    GridBagConstraints gbc = new GridBagConstraints ();
    gbc.gridwidth = GridBagConstraints.REMAINDER;
    gbc.weightx = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    poc.add (tmp);
    tmp.start ();
    body.add (tmp);
    body.repaint ();
    setTitle ("Počet počítadiel: " + getComponentCount ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15645923_15649962_156_181
15645923_15649962_70_94
Title: Custom JComponent(s) refuse to paint (if added to an ArrayList) 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getActionCommand ().equals ("valueTimer")) {
        value --;
        System.out.println ("value = " + value);
        if (actionListener != null) {
            repaint ();
            actionListener.actionPerformed (new ActionEvent (this, ActionEvent.ACTION_PERFORMED, "counterTick"));
        }
        if (value == 0 && actionListener != null) {
            isRunning = false;
            valueTimer.stop ();
            actionListener.actionPerformed (new ActionEvent (this, ActionEvent.ACTION_PERFORMED, "counterFinished"));
            blinkTimer.stop ();
        } else if (value < maxValue / 2 && ! blinkTimer.isRunning ()) {
            blinkTimer.start ();
        }

    }
    if (e.getActionCommand ().equals ("blinkTimer")) {
        System.out.println ("Blink");
        isDisplayed = ! isDisplayed;
        repaint ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int val, x, y;
    val = 20;
    x = (getWidth () / 2) - 10 + rnd.nextInt (20);
    y = (getHeight () / 2) - 10 + rnd.nextInt (20);
    Pocitadlo tmp = new Pocitadlo (val, x, y, getFont ());
    tmp.addActionListener (MainFrame.this);
    GridBagConstraints gbc = new GridBagConstraints ();
    gbc.gridwidth = GridBagConstraints.REMAINDER;
    gbc.weightx = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    poc.add (tmp);
    tmp.start ();
    body.add (tmp);
    body.repaint ();
    setTitle ("Počet počítadiel: " + getComponentCount ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15648364_15648497_38_62
15648364_15650333_37_58
Title: JDialog not updating for new input 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (testDialog == null) {
        testDialog = new TestDialog (Test.this);
    }
    String [] newWords = new String [5];
    for (int i = 0;
    i < newWords.length; i ++) {
        newWords [i] = words [wordIndex];
        wordIndex = (wordIndex + 1) % words.length;
    }
    testDialog.initialize (newWords);
    testDialog.setVisible (true);
    if (testDialog.getOkClicked ()) {
        msg.setText ("Ok, we have: " + testDialog.getSelectedString ());
    } else {
        msg.setText ("Cancelled!");
    }
}
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    if (enterHorseNamesDialog == null) {
        Window mainWindow = SwingUtilities.getWindowAncestor (mainPanel);
        enterHorseNamesDialog = new JDialog (mainWindow, "Enter Horses Name", ModalityType.APPLICATION_MODAL);
        enterHorseNamesDialog.getContentPane ().add (enterHorsesNames.getMainComponent ());
        enterHorseNamesDialog.pack ();
        enterHorseNamesDialog.setLocationRelativeTo (mainWindow);
    }
    enterHorseNamesDialog.setVisible (true);
    System.out.println ("Horse Names:");
    for (int row = 0;
    row < HORSE_NAMES_FIELD_COUNT; row ++) {
        System.out.printf ("%2d: %s%n", row + 1, enterHorsesNames.getTextFieldText (row));
    }
    enterHorsesNames.clearFields ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15650928_20529281_1_12
15650928_53509729_6_51
Title: Java: Recursively Finding the minimum element in a list 
----------------------------------------

public static Integer minimum (List < Integer > t) {
    int minInt;
    if (t.size () == 1) {
        return t.get (0);
    } else {
        int first = t.get (0);
        List < Integer > u = t.subList (1, t.size ());
        minInt = Math.min (first, u.get (0));
        minInt = IntegerList.minimum (u);
    }
    return minInt;
}
----------------------------------------

public int minimum (MyList < Integer > m) {
    int res = 0;
    int e0 = 0;
    int e1 = 0;
    int scenario = 0;
    if (m.length () == 0) {
        scenario = 1;
    } else {
        scenario = 2;
    }
    switch (scenario) {
        case 1 :
            res = - 1;
            break;
        case 2 :
            e0 = m.getElement (0);
            m.removeElement (0);
            e1 = minimum (m);
            if (e0 < e1) {
                res = e0;
            } else {
                res = e1;
            }
            m.addElement (0, e0);
            break;
    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15685788_15685824_1_13
15685788_15685945_1_12
Title: reason for program termination before method 
----------------------------------------

public static void main (String args []) {
    double gallons;
    double liters;
    gallons = 10;
    liters = gallons * 3.7854;
    System.out.println ("The number of liters in " + gallons + " gallons is " + liters);
    System.out.println ();
    root (args);
}
----------------------------------------

public static void main (String args []) {
    double gallons;
    double liters;
    gallons = 10;
    liters = gallons * 3.7854;
    System.out.println ("The number of liters in " + gallons + " gallons is " + liters);
    System.out.println ();
    root (args);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15706728_15706815_1_20
15706728_15706817_1_14
Title: conditions I need to satisfy before running my program 
----------------------------------------

public static void main (String [] args) throws IOException {
    try {
        if (args == null || args.length != 2) {
            System.out.println ("Invalid arguments");
        } else {
            int x = Integer.parseInt (args [0]);
            process (x, args [1]);
        }
    } catch (NumberFormatException e) {
        System.out.println ("Please enter an integer");
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    if (args == null || args.length != 2) {
        System.out.println ("You have not entered the required two parameters");
        return;
    }
    try {
        int x = Integer.parseInt (args [0]);
        process (x, args [1]);
    } catch (NumberFormatException e) {
        System.out.println ("Please enter an integer");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15711146_15711225_3_18
15711146_47616509_5_45
Title: Print a graph of numbers in a horizontal and vertical graph using an array in java 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    int a;
    System.out.println ("Please enter a number between 1 and 9:");
    int [] graph = new int [10];
    for (int i = 0;
    i < 10; ++ i) {
        a = scan.nextInt ();
        graph [i] = a;
    }
    System.out.println ("----------Vertical Graph-------------");
    printVerticalGraph (graph);
    System.out.println ("----------Horizontal Graph-------------");
    printHorizontalGraph (graph);
}
----------------------------------------

public static void main (String [] args) {
    int arr [] = {2, 5, 4, 1, 6, 9};
    System.out.println ("--Horizontal--");
    for (int i = 0;
    i < arr.length; i ++) {
        int j = arr [i];
        for (int k = 0;
        k < j; k ++) {
            System.out.print (j);
        }
        System.out.print ("\n");
    }
    System.out.println ("--Vertical--");
    int max = 0;
    for (int i = 0;
    i < arr.length; i ++) {
        if (arr [i] > max) {
            max = arr [i];
        }
    }
    int x = max;
    for (int i = 0;
    i < x; i ++) {
        for (int j = 0;
        j < arr.length; j ++) {
            int k = max - arr [j];
            if (k > 0) System.out.print (" ");
            else System.out.print (arr [j]);

            System.out.print (" ");
        }
        System.out.print ("\n");
        max --;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15714609_15715116_6_19
15714609_15717804_66_77
Title: robot class mouseWheel not working 
----------------------------------------

public static void main (String [] args) {
    try {
        Robot bot = new Robot ();
        bot.setAutoDelay (100);
        Thread.sleep (2000);
        System.out.println ("++");
        bot.mouseWheel (25);
        Thread.sleep (2000);
        System.out.println ("--");
        bot.mouseWheel (- 25);
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public static void main (String args []) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            MouseScrollRobot msr = new MouseScrollRobot ();
            msr.createAndShowGUI ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725207_15725351_10_21
15725207_15725351_25_36
Title: concurrency loop in java 
----------------------------------------

public void run () {
    while (true) {
        lock.lock ();
        System.out.println ("a");
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            Thread.currentThread ().interrupt ();
        }
        lock.unlock ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        lock.lock ();
        System.out.println ("b");
        try {
            Thread.sleep (1000);
        } catch (InterruptedException e) {
            Thread.currentThread ().interrupt ();
        }
        lock.unlock ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_15725452_2_16
15725370_26654885_3_15
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    int [] counts = new int [n.length];
    for (int i = 0;
    i < n.length; i ++) {
        counts [n [i]] ++;
        if (maxCounts < counts [n [i]]) {
            maxCounts = counts [n [i]];
            maxKey = n [i];
        }
    }
    return maxKey;
}
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    for (int i : n) {
        if (instancesOf (i, n) > maxCounts) {
            maxCounts = instancesOf (i, n);
            maxKey = i;
        }
    }
    return maxKey;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_15725452_2_16
15725370_29373490_1_25
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    int [] counts = new int [n.length];
    for (int i = 0;
    i < n.length; i ++) {
        counts [n [i]] ++;
        if (maxCounts < counts [n [i]]) {
            maxCounts = counts [n [i]];
            maxKey = n [i];
        }
    }
    return maxKey;
}
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max) {
                max = count;
                temp = array [i];
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_15725452_2_16
15725370_29538007_1_26
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    int [] counts = new int [n.length];
    for (int i = 0;
    i < n.length; i ++) {
        counts [n [i]] ++;
        if (maxCounts < counts [n [i]]) {
            maxCounts = counts [n [i]];
            maxKey = n [i];
        }
    }
    return maxKey;
}
----------------------------------------

public static int mode (int [] arr) {
    int max = 0;
    int maxFreq = 0;
    Arrays.sort (arr);
    max = arr [arr.length - 1];
    int [] count = new int [max + 1];
    for (int i = 0;
    i < arr.length; i ++) {
        count [arr [i]] ++;
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] > maxFreq) {
            maxFreq = count [i];
        }
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] == maxFreq) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_15725452_2_16
15725370_30951439_1_16
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    int [] counts = new int [n.length];
    for (int i = 0;
    i < n.length; i ++) {
        counts [n [i]] ++;
        if (maxCounts < counts [n [i]]) {
            maxCounts = counts [n [i]];
            maxKey = n [i];
        }
    }
    return maxKey;
}
----------------------------------------

public int mode (int [] array) {
    int mode = array [0];
    int maxCount = 0;
    for (int i = 0;
    i < array.length; i ++) {
        int value = array [i];
        int count = 1;
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == value) count ++;

            if (count > maxCount) {
                mode = value;
                maxCount = count;
            }
        }
    }
    return mode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_15725452_2_16
15725370_45178487_1_23
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    int [] counts = new int [n.length];
    for (int i = 0;
    i < n.length; i ++) {
        counts [n [i]] ++;
        if (maxCounts < counts [n [i]]) {
            maxCounts = counts [n [i]];
            maxKey = n [i];
        }
    }
    return maxKey;
}
----------------------------------------

int mode (int n, int [] ar) {
    int personalMax = 1, totalMax = 0, maxNum = 0;
    for (int i = 0;
    i < n - 1; i ++) {
        if (ar [i] == ar [i + 1]) {
            personalMax ++;
            if (totalMax < personalMax) {
                totalMax = personalMax;
                maxNum = ar [i];
            }
        } else {
            personalMax = 1;
        }
    }
    return maxNum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_15725452_2_16
15725370_51212994_6_27
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    int [] counts = new int [n.length];
    for (int i = 0;
    i < n.length; i ++) {
        counts [n [i]] ++;
        if (maxCounts < counts [n [i]]) {
            maxCounts = counts [n [i]];
            maxKey = n [i];
        }
    }
    return maxKey;
}
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max || temp > array [i] && count == max) {
                temp = array [i];
                max = count;
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_26654885_3_15
15725370_29373490_1_25
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    for (int i : n) {
        if (instancesOf (i, n) > maxCounts) {
            maxCounts = instancesOf (i, n);
            maxKey = i;
        }
    }
    return maxKey;
}
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max) {
                max = count;
                temp = array [i];
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_26654885_3_15
15725370_29538007_1_26
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    for (int i : n) {
        if (instancesOf (i, n) > maxCounts) {
            maxCounts = instancesOf (i, n);
            maxKey = i;
        }
    }
    return maxKey;
}
----------------------------------------

public static int mode (int [] arr) {
    int max = 0;
    int maxFreq = 0;
    Arrays.sort (arr);
    max = arr [arr.length - 1];
    int [] count = new int [max + 1];
    for (int i = 0;
    i < arr.length; i ++) {
        count [arr [i]] ++;
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] > maxFreq) {
            maxFreq = count [i];
        }
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] == maxFreq) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_26654885_3_15
15725370_30951439_1_16
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    for (int i : n) {
        if (instancesOf (i, n) > maxCounts) {
            maxCounts = instancesOf (i, n);
            maxKey = i;
        }
    }
    return maxKey;
}
----------------------------------------

public int mode (int [] array) {
    int mode = array [0];
    int maxCount = 0;
    for (int i = 0;
    i < array.length; i ++) {
        int value = array [i];
        int count = 1;
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == value) count ++;

            if (count > maxCount) {
                mode = value;
                maxCount = count;
            }
        }
    }
    return mode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_26654885_3_15
15725370_45178487_1_23
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    for (int i : n) {
        if (instancesOf (i, n) > maxCounts) {
            maxCounts = instancesOf (i, n);
            maxKey = i;
        }
    }
    return maxKey;
}
----------------------------------------

int mode (int n, int [] ar) {
    int personalMax = 1, totalMax = 0, maxNum = 0;
    for (int i = 0;
    i < n - 1; i ++) {
        if (ar [i] == ar [i + 1]) {
            personalMax ++;
            if (totalMax < personalMax) {
                totalMax = personalMax;
                maxNum = ar [i];
            }
        } else {
            personalMax = 1;
        }
    }
    return maxNum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_26654885_3_15
15725370_51212994_6_27
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (final int [] n) {
    int maxKey = 0;
    int maxCounts = 0;
    for (int i : n) {
        if (instancesOf (i, n) > maxCounts) {
            maxCounts = instancesOf (i, n);
            maxKey = i;
        }
    }
    return maxKey;
}
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max || temp > array [i] && count == max) {
                temp = array [i];
                max = count;
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------

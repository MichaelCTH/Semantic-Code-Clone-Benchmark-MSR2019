$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15313240_15314122_123_137
15313240_15314122_167_177
Title: java same ArrayList for multiple table model 
----------------------------------------

public Object getValueAt (int rowIndex, int columnIndex) {
    TableData data = tableData.get (rowIndex);
    switch (columnIndex) {
        case 0 :
            return data.getName ();
        case 1 :
            return data.getGrade ();
        case 2 :
            return data.getSubject ();
        case 3 :
            return data.getStaff ();
        default :
            return null;
    }
}
----------------------------------------

public Object getValueAt (int rowIndex, int columnIndex) {
    TableData data = tableData.get (rowIndex);
    switch (columnIndex) {
        case 0 :
            return data.getName ();
        case 1 :
            return data.getGrade ();
        default :
            return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15313240_15314122_123_137
15313240_15314122_206_216
Title: java same ArrayList for multiple table model 
----------------------------------------

public Object getValueAt (int rowIndex, int columnIndex) {
    TableData data = tableData.get (rowIndex);
    switch (columnIndex) {
        case 0 :
            return data.getName ();
        case 1 :
            return data.getGrade ();
        case 2 :
            return data.getSubject ();
        case 3 :
            return data.getStaff ();
        default :
            return null;
    }
}
----------------------------------------

public Object getValueAt (int rowIndex, int columnIndex) {
    TableData data = tableData.get (rowIndex);
    switch (columnIndex) {
        case 0 :
            return data.getSubject ();
        case 1 :
            return data.getStaff ();
        default :
            return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15313240_15314122_167_177
15313240_15314122_206_216
Title: java same ArrayList for multiple table model 
----------------------------------------

public Object getValueAt (int rowIndex, int columnIndex) {
    TableData data = tableData.get (rowIndex);
    switch (columnIndex) {
        case 0 :
            return data.getName ();
        case 1 :
            return data.getGrade ();
        default :
            return null;
    }
}
----------------------------------------

public Object getValueAt (int rowIndex, int columnIndex) {
    TableData data = tableData.get (rowIndex);
    switch (columnIndex) {
        case 0 :
            return data.getSubject ();
        case 1 :
            return data.getStaff ();
        default :
            return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15313240_15314122_82_92
15313240_15314309_104_115
Title: java same ArrayList for multiple table model 
----------------------------------------

public static void main (String [] args) {
    Runnable r = new Runnable () {
        @Override
        public void run () {
            new AllTableExample ().createUI ();
        }}

    ;
    EventQueue.invokeLater (r);
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            TablesHavingSameData ths = new TablesHavingSameData ();
            ths.createAndShowGUI ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15318400_15318413_19_33
15318400_15318555_9_24
Title: "Trying to read from a text file store it into an an arrayList and print the stored information unto my screen. Why is my output empty?" 
----------------------------------------

public static void main (String [] args) {
    try {
        File file = new File ("resources/timeTable.txt");
        Scanner scanner = new Scanner (file);
        while (scanner.hasNextLine ()) {
            String [] times = scanner.nextLine ().split ("\\s+");
            for (String time : times) {
                timesArray.add (time);
            }
            System.out.println (timesArray);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = null;
    try {
        File file = new File ("d:/Visitor.txt");
        scanner = new Scanner (file);
        while (scanner.hasNextLine ()) {
            String [] tokens = scanner.nextLine ().split ("\\s+");
            String [] times = tokens;
            for (String time : times) timesArray.add (time);

        }
        System.out.println (timesArray);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15319561_34794716_63_76
15319561_42592144_23_31
Title: How to implement a Median-heap 
----------------------------------------

public void insert (int n) {
    if (isEmpty ()) {
        minheap.add (n);
    } else {
        if (Double.compare (n, median ()) <= 0) {
            maxheap.add (n);
        } else {
            minheap.add (n);
        }
    }
    fixChaos ();
}
----------------------------------------

public void insert (int element) {
    float median = median ();
    if (element > median) {
        minHeap.offer (element);
    } else {
        maxHeap.offer (element);
    }
    balanceHeap ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15319561_34794716_95_105
15319561_42592144_9_21
Title: How to implement a Median-heap 
----------------------------------------

public double median () {
    if (maxheap.size () == minheap.size ()) {
        return ((double) maxheap.peek () + (double) minheap.peek ()) / 2;
    } else if (maxheap.size () > minheap.size ()) {
        return (double) maxheap.peek ();
    } else {
        return (double) minheap.peek ();
    }

}
----------------------------------------

public float median () {
    int minSize = minHeap.size ();
    int maxSize = maxHeap.size ();
    if (minSize == 0 && maxSize == 0) {
        return 0;
    }
    if (minSize > maxSize) {
        return minHeap.peek ();
    }
    if (minSize < maxSize) {
        return maxHeap.peek ();
    }
    return (minHeap.peek () + maxHeap.peek ()) / 2F;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15319742_15321196_21_30
15319742_15325163_22_31
Title: Why invokeAndWait() is preferred for applets and not for standalone applications? 
----------------------------------------

public void init2 () {
    try {
        javax.swing.SwingUtilities.invokeAndWait (new Runnable () {
            public void run () {
                createGUI ();
            }}

        );
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public void init2 () {
    try {
        javax.swing.SwingUtilities.invokeAndWait (new Runnable () {
            public void run () {
                createGUI ();
            }}

        );
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15319742_15321196_32_44
15319742_15325163_33_45
Title: Why invokeAndWait() is preferred for applets and not for standalone applications? 
----------------------------------------

private void createGUI () {
    JPanel p = new JPanel ();
    JButton b = new JButton ("Click to say Hello to the world");
    b.addActionListener (this);
    p.add (b);
    if (frame != null) {
        b = new JButton ("Exit");
        b.addActionListener (this);
        p.add (b);
        p.setPreferredSize (new Dimension (400, 50));
    }
    getContentPane ().add (p);
}
----------------------------------------

private void createGUI () {
    JPanel p = new JPanel (new BorderLayout ());
    JButton b = new JButton ("Click to say Hello to the world");
    b.addActionListener (this);
    p.add (b, "South");
    p.add (painter, "Center");
    if (frame != null) {
        b = new JButton ("Exit");
        b.addActionListener (this);
        p.add (b, "North");
    }
    getContentPane ().add (p);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_10_26
15322847_31022580_10_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String args []) {
    NumberSequence t = new NumberSequence ();
    ThreadTasks t1 = t.new ThreadTasks (0);
    ThreadTasks t2 = t.new ThreadTasks (1);
    ThreadTasks t3 = t.new ThreadTasks (2);
    Thread ts1 = new Thread (t1);
    Thread ts2 = new Thread (t2);
    Thread ts3 = new Thread (t3);
    ts1.start ();
    ts2.start ();
    ts3.start ();
}
----------------------------------------

public static void main (String [] args) {
    MkThread2 mkThread = new MkThread2 ();
    Thread t1 = new Thread (new Worker2 (1, mkThread));
    Thread t2 = new Thread (new Worker2 (2, mkThread));
    Thread t3 = new Thread (new Worker2 (3, mkThread));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_10_26
15322847_32690601_4_17
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String args []) {
    NumberSequence t = new NumberSequence ();
    ThreadTasks t1 = t.new ThreadTasks (0);
    ThreadTasks t2 = t.new ThreadTasks (1);
    ThreadTasks t3 = t.new ThreadTasks (2);
    Thread ts1 = new Thread (t1);
    Thread ts2 = new Thread (t2);
    Thread ts3 = new Thread (t3);
    ts1.start ();
    ts2.start ();
    ts3.start ();
}
----------------------------------------

public static void main (String [] args) {
    print p1 = new print (0);
    print p2 = new print (1);
    print p3 = new print (2);
    Thread t1 = new Thread (p1);
    Thread t2 = new Thread (p2);
    Thread t3 = new Thread (p3);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_10_26
15322847_39394768_56_65
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String args []) {
    NumberSequence t = new NumberSequence ();
    ThreadTasks t1 = t.new ThreadTasks (0);
    ThreadTasks t2 = t.new ThreadTasks (1);
    ThreadTasks t3 = t.new ThreadTasks (2);
    Thread ts1 = new Thread (t1);
    Thread ts2 = new Thread (t2);
    Thread ts3 = new Thread (t3);
    ts1.start ();
    ts2.start ();
    ts3.start ();
}
----------------------------------------

public static void main (String [] args) {
    ThreeThread lock = new ThreeThread ();
    Thread t1 = new Thread (new Task ("Hello", lock, 1));
    Thread t2 = new Thread (new Task ("Good", lock, 2));
    Thread t3 = new Thread (new Task ("Morning", lock, 3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_10_26
15322847_39936378_3_13
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String args []) {
    NumberSequence t = new NumberSequence ();
    ThreadTasks t1 = t.new ThreadTasks (0);
    ThreadTasks t2 = t.new ThreadTasks (1);
    ThreadTasks t3 = t.new ThreadTasks (2);
    Thread ts1 = new Thread (t1);
    Thread ts2 = new Thread (t2);
    Thread ts3 = new Thread (t3);
    ts1.start ();
    ts2.start ();
    ts3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > objList = new ArrayList < > ();
    for (int i = 0;
    i < 5; i ++) {
        objList.add (new Object ());
    }
    for (int i = 0;
    i < 5; i ++) {
        Thread t = new Thread (new PrintThread (objList.get (i), objList.get ((i + 1) % 5)));
        t.setName ("Thread" + i);
        t.start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_10_26
15322847_43183072_41_61
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String args []) {
    NumberSequence t = new NumberSequence ();
    ThreadTasks t1 = t.new ThreadTasks (0);
    ThreadTasks t2 = t.new ThreadTasks (1);
    ThreadTasks t3 = t.new ThreadTasks (2);
    Thread ts1 = new Thread (t1);
    Thread ts2 = new Thread (t2);
    Thread ts3 = new Thread (t3);
    ts1.start ();
    ts2.start ();
    ts3.start ();
}
----------------------------------------

public static void main (String [] args) {
    int THREAD_COUNT = 10;
    List < ThreadCall > listThread = new ArrayList < > ();
    for (int i = 1;
    i <= THREAD_COUNT; i ++) {
        listThread.add (new ThreadCall ("Thread " + i));
    }
    for (int i = 0;
    i < listThread.size (); i ++) {
        if (i == listThread.size () - 1) {
            listThread.get (i).setNext (listThread.get (0));
        } else listThread.get (i).setNext (listThread.get (i + 1));

    }
    listThread.get (0).addElBQ (1);
    for (int i = 0;
    i < listThread.size (); i ++) {
        listThread.get (i).start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_10_26
15322847_44613137_9_23
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String args []) {
    NumberSequence t = new NumberSequence ();
    ThreadTasks t1 = t.new ThreadTasks (0);
    ThreadTasks t2 = t.new ThreadTasks (1);
    ThreadTasks t3 = t.new ThreadTasks (2);
    Thread ts1 = new Thread (t1);
    Thread ts2 = new Thread (t2);
    Thread ts3 = new Thread (t3);
    ts1.start ();
    ts2.start ();
    ts3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_10_26
15322847_53019428_3_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String args []) {
    NumberSequence t = new NumberSequence ();
    ThreadTasks t1 = t.new ThreadTasks (0);
    ThreadTasks t2 = t.new ThreadTasks (1);
    ThreadTasks t3 = t.new ThreadTasks (2);
    Thread ts1 = new Thread (t1);
    Thread ts2 = new Thread (t2);
    Thread ts3 = new Thread (t3);
    ts1.start ();
    ts2.start ();
    ts3.start ();
}
----------------------------------------

public static void main (String [] args) {
    AtomicInteger counter = new AtomicInteger (0);
    int numThreads = 3;
    Thread t1 = new Thread (new SeqNumPrinter (counter, 0, numThreads));
    Thread t2 = new Thread (new SeqNumPrinter (counter, 1, numThreads));
    Thread t3 = new Thread (new SeqNumPrinter (counter, 2, numThreads));
    t1.currentThread ().setName ("T1");
    t2.currentThread ().setName ("T2");
    t3.currentThread ().setName ("T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_39_55
15322847_31022580_33_57
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (sharedOutput.get () < 10) {
        synchronized (object) {
            if (sharedOutput.get () % 3 == this.threadPosition) {
                if (sharedOutput.get () < 10) System.out.println ("Printing output for Thread: " + this.threadPosition + "  " + sharedOutput.incrementAndGet ());

            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        synchronized (mkThread) {
            while (mkThread.token) {
                while (threadNo != mkThread.nextThreadToRun) {
                    mkThread.wait ();
                }
                if (mkThread.token) {
                    System.out.print (threadName + "->" + mkThread.arr [mkThread.nextArrayIndex.get ()]);
                    if (threadNo == 3) System.out.println ();

                    mkThread.nextThreadToRun = getNextThread (threadNo);
                    if (mkThread.nextArrayIndex.get () == mkThread.arr.length - 1) {
                        mkThread.token = false;
                    }
                    mkThread.nextArrayIndex.incrementAndGet ();
                }
                mkThread.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_39_55
15322847_32690601_31_48
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (sharedOutput.get () < 10) {
        synchronized (object) {
            if (sharedOutput.get () % 3 == this.threadPosition) {
                if (sharedOutput.get () < 10) System.out.println ("Printing output for Thread: " + this.threadPosition + "  " + sharedOutput.incrementAndGet ());

            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (atomicInteger.get () < 10) {
            synchronized (atomicInteger) {
                if ((atomicInteger.get () % 3) == this.threadNumber) {
                    System.out.println (atomicInteger.getAndIncrement () + " Thread :" + this.threadNumber);
                    atomicInteger.notifyAll ();
                } else atomicInteger.wait ();

            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_39_55
15322847_39394768_17_50
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (sharedOutput.get () < 10) {
        synchronized (object) {
            if (sharedOutput.get () % 3 == this.threadPosition) {
                if (sharedOutput.get () < 10) System.out.println ("Printing output for Thread: " + this.threadPosition + "  " + sharedOutput.incrementAndGet ());

            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            while (! ((lock.status % 3) == 0) && p == 1) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 1) && p == 2) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 2) && p == 3) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println ("thread: " + p + " : " + message);
            lock.status ++;
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_39_55
15322847_39936378_28_43
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (sharedOutput.get () < 10) {
        synchronized (object) {
            if (sharedOutput.get () % 3 == this.threadPosition) {
                if (sharedOutput.get () < 10) System.out.println ("Printing output for Thread: " + this.threadPosition + "  " + sharedOutput.incrementAndGet ());

            }
        }
    }
}
----------------------------------------

public void run () {
    for (; i <= 100;) {
        synchronized (current) {
            synchronized (next) {
                next.notify ();
                System.out.println (Thread.currentThread ().getName () + " Value : " + i ++);
            }
            try {
                current.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_39_55
15322847_43183072_24_39
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (sharedOutput.get () < 10) {
        synchronized (object) {
            if (sharedOutput.get () % 3 == this.threadPosition) {
                if (sharedOutput.get () < 10) System.out.println ("Printing output for Thread: " + this.threadPosition + "  " + sharedOutput.incrementAndGet ());

            }
        }
    }
}
----------------------------------------

public void run () {
    int x = 0;
    while (true) {
        try {
            x = 0;
            x = bq.take ();
            if (x != 0) {
                System.out.println (Thread.currentThread ().getName () + " =>" + x);
                if (x >= 100) System.exit (0);

                next.addElBQ (x + 1);
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_30775847_39_55
15322847_44613137_40_64
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (sharedOutput.get () < 10) {
        synchronized (object) {
            if (sharedOutput.get () % 3 == this.threadPosition) {
                if (sharedOutput.get () < 10) System.out.println ("Printing output for Thread: " + this.threadPosition + "  " + sharedOutput.incrementAndGet ());

            }
        }
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_10_18
15322847_32690601_4_17
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    MkThread2 mkThread = new MkThread2 ();
    Thread t1 = new Thread (new Worker2 (1, mkThread));
    Thread t2 = new Thread (new Worker2 (2, mkThread));
    Thread t3 = new Thread (new Worker2 (3, mkThread));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    print p1 = new print (0);
    print p2 = new print (1);
    print p3 = new print (2);
    Thread t1 = new Thread (p1);
    Thread t2 = new Thread (p2);
    Thread t3 = new Thread (p3);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_10_18
15322847_39394768_56_65
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    MkThread2 mkThread = new MkThread2 ();
    Thread t1 = new Thread (new Worker2 (1, mkThread));
    Thread t2 = new Thread (new Worker2 (2, mkThread));
    Thread t3 = new Thread (new Worker2 (3, mkThread));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    ThreeThread lock = new ThreeThread ();
    Thread t1 = new Thread (new Task ("Hello", lock, 1));
    Thread t2 = new Thread (new Task ("Good", lock, 2));
    Thread t3 = new Thread (new Task ("Morning", lock, 3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_10_18
15322847_39936378_3_13
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    MkThread2 mkThread = new MkThread2 ();
    Thread t1 = new Thread (new Worker2 (1, mkThread));
    Thread t2 = new Thread (new Worker2 (2, mkThread));
    Thread t3 = new Thread (new Worker2 (3, mkThread));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > objList = new ArrayList < > ();
    for (int i = 0;
    i < 5; i ++) {
        objList.add (new Object ());
    }
    for (int i = 0;
    i < 5; i ++) {
        Thread t = new Thread (new PrintThread (objList.get (i), objList.get ((i + 1) % 5)));
        t.setName ("Thread" + i);
        t.start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_10_18
15322847_43183072_41_61
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    MkThread2 mkThread = new MkThread2 ();
    Thread t1 = new Thread (new Worker2 (1, mkThread));
    Thread t2 = new Thread (new Worker2 (2, mkThread));
    Thread t3 = new Thread (new Worker2 (3, mkThread));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    int THREAD_COUNT = 10;
    List < ThreadCall > listThread = new ArrayList < > ();
    for (int i = 1;
    i <= THREAD_COUNT; i ++) {
        listThread.add (new ThreadCall ("Thread " + i));
    }
    for (int i = 0;
    i < listThread.size (); i ++) {
        if (i == listThread.size () - 1) {
            listThread.get (i).setNext (listThread.get (0));
        } else listThread.get (i).setNext (listThread.get (i + 1));

    }
    listThread.get (0).addElBQ (1);
    for (int i = 0;
    i < listThread.size (); i ++) {
        listThread.get (i).start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_10_18
15322847_44613137_9_23
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    MkThread2 mkThread = new MkThread2 ();
    Thread t1 = new Thread (new Worker2 (1, mkThread));
    Thread t2 = new Thread (new Worker2 (2, mkThread));
    Thread t3 = new Thread (new Worker2 (3, mkThread));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_10_18
15322847_53019428_3_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    MkThread2 mkThread = new MkThread2 ();
    Thread t1 = new Thread (new Worker2 (1, mkThread));
    Thread t2 = new Thread (new Worker2 (2, mkThread));
    Thread t3 = new Thread (new Worker2 (3, mkThread));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    AtomicInteger counter = new AtomicInteger (0);
    int numThreads = 3;
    Thread t1 = new Thread (new SeqNumPrinter (counter, 0, numThreads));
    Thread t2 = new Thread (new SeqNumPrinter (counter, 1, numThreads));
    Thread t3 = new Thread (new SeqNumPrinter (counter, 2, numThreads));
    t1.currentThread ().setName ("T1");
    t2.currentThread ().setName ("T2");
    t3.currentThread ().setName ("T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_33_57
15322847_32690601_31_48
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        synchronized (mkThread) {
            while (mkThread.token) {
                while (threadNo != mkThread.nextThreadToRun) {
                    mkThread.wait ();
                }
                if (mkThread.token) {
                    System.out.print (threadName + "->" + mkThread.arr [mkThread.nextArrayIndex.get ()]);
                    if (threadNo == 3) System.out.println ();

                    mkThread.nextThreadToRun = getNextThread (threadNo);
                    if (mkThread.nextArrayIndex.get () == mkThread.arr.length - 1) {
                        mkThread.token = false;
                    }
                    mkThread.nextArrayIndex.incrementAndGet ();
                }
                mkThread.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        while (atomicInteger.get () < 10) {
            synchronized (atomicInteger) {
                if ((atomicInteger.get () % 3) == this.threadNumber) {
                    System.out.println (atomicInteger.getAndIncrement () + " Thread :" + this.threadNumber);
                    atomicInteger.notifyAll ();
                } else atomicInteger.wait ();

            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_33_57
15322847_39394768_17_50
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        synchronized (mkThread) {
            while (mkThread.token) {
                while (threadNo != mkThread.nextThreadToRun) {
                    mkThread.wait ();
                }
                if (mkThread.token) {
                    System.out.print (threadName + "->" + mkThread.arr [mkThread.nextArrayIndex.get ()]);
                    if (threadNo == 3) System.out.println ();

                    mkThread.nextThreadToRun = getNextThread (threadNo);
                    if (mkThread.nextArrayIndex.get () == mkThread.arr.length - 1) {
                        mkThread.token = false;
                    }
                    mkThread.nextArrayIndex.incrementAndGet ();
                }
                mkThread.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            while (! ((lock.status % 3) == 0) && p == 1) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 1) && p == 2) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 2) && p == 3) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println ("thread: " + p + " : " + message);
            lock.status ++;
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_33_57
15322847_39936378_28_43
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        synchronized (mkThread) {
            while (mkThread.token) {
                while (threadNo != mkThread.nextThreadToRun) {
                    mkThread.wait ();
                }
                if (mkThread.token) {
                    System.out.print (threadName + "->" + mkThread.arr [mkThread.nextArrayIndex.get ()]);
                    if (threadNo == 3) System.out.println ();

                    mkThread.nextThreadToRun = getNextThread (threadNo);
                    if (mkThread.nextArrayIndex.get () == mkThread.arr.length - 1) {
                        mkThread.token = false;
                    }
                    mkThread.nextArrayIndex.incrementAndGet ();
                }
                mkThread.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    for (; i <= 100;) {
        synchronized (current) {
            synchronized (next) {
                next.notify ();
                System.out.println (Thread.currentThread ().getName () + " Value : " + i ++);
            }
            try {
                current.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_33_57
15322847_43183072_24_39
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        synchronized (mkThread) {
            while (mkThread.token) {
                while (threadNo != mkThread.nextThreadToRun) {
                    mkThread.wait ();
                }
                if (mkThread.token) {
                    System.out.print (threadName + "->" + mkThread.arr [mkThread.nextArrayIndex.get ()]);
                    if (threadNo == 3) System.out.println ();

                    mkThread.nextThreadToRun = getNextThread (threadNo);
                    if (mkThread.nextArrayIndex.get () == mkThread.arr.length - 1) {
                        mkThread.token = false;
                    }
                    mkThread.nextArrayIndex.incrementAndGet ();
                }
                mkThread.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    int x = 0;
    while (true) {
        try {
            x = 0;
            x = bq.take ();
            if (x != 0) {
                System.out.println (Thread.currentThread ().getName () + " =>" + x);
                if (x >= 100) System.exit (0);

                next.addElBQ (x + 1);
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_31022580_33_57
15322847_44613137_40_64
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        synchronized (mkThread) {
            while (mkThread.token) {
                while (threadNo != mkThread.nextThreadToRun) {
                    mkThread.wait ();
                }
                if (mkThread.token) {
                    System.out.print (threadName + "->" + mkThread.arr [mkThread.nextArrayIndex.get ()]);
                    if (threadNo == 3) System.out.println ();

                    mkThread.nextThreadToRun = getNextThread (threadNo);
                    if (mkThread.nextArrayIndex.get () == mkThread.arr.length - 1) {
                        mkThread.token = false;
                    }
                    mkThread.nextArrayIndex.incrementAndGet ();
                }
                mkThread.notifyAll ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_31_48
15322847_39394768_17_50
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        while (atomicInteger.get () < 10) {
            synchronized (atomicInteger) {
                if ((atomicInteger.get () % 3) == this.threadNumber) {
                    System.out.println (atomicInteger.getAndIncrement () + " Thread :" + this.threadNumber);
                    atomicInteger.notifyAll ();
                } else atomicInteger.wait ();

            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            while (! ((lock.status % 3) == 0) && p == 1) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 1) && p == 2) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 2) && p == 3) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println ("thread: " + p + " : " + message);
            lock.status ++;
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_31_48
15322847_39936378_28_43
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        while (atomicInteger.get () < 10) {
            synchronized (atomicInteger) {
                if ((atomicInteger.get () % 3) == this.threadNumber) {
                    System.out.println (atomicInteger.getAndIncrement () + " Thread :" + this.threadNumber);
                    atomicInteger.notifyAll ();
                } else atomicInteger.wait ();

            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    for (; i <= 100;) {
        synchronized (current) {
            synchronized (next) {
                next.notify ();
                System.out.println (Thread.currentThread ().getName () + " Value : " + i ++);
            }
            try {
                current.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_31_48
15322847_43183072_24_39
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        while (atomicInteger.get () < 10) {
            synchronized (atomicInteger) {
                if ((atomicInteger.get () % 3) == this.threadNumber) {
                    System.out.println (atomicInteger.getAndIncrement () + " Thread :" + this.threadNumber);
                    atomicInteger.notifyAll ();
                } else atomicInteger.wait ();

            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    int x = 0;
    while (true) {
        try {
            x = 0;
            x = bq.take ();
            if (x != 0) {
                System.out.println (Thread.currentThread ().getName () + " =>" + x);
                if (x >= 100) System.exit (0);

                next.addElBQ (x + 1);
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_31_48
15322847_44613137_40_64
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    try {
        while (atomicInteger.get () < 10) {
            synchronized (atomicInteger) {
                if ((atomicInteger.get () % 3) == this.threadNumber) {
                    System.out.println (atomicInteger.getAndIncrement () + " Thread :" + this.threadNumber);
                    atomicInteger.notifyAll ();
                } else atomicInteger.wait ();

            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_4_17
15322847_39394768_56_65
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    print p1 = new print (0);
    print p2 = new print (1);
    print p3 = new print (2);
    Thread t1 = new Thread (p1);
    Thread t2 = new Thread (p2);
    Thread t3 = new Thread (p3);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    ThreeThread lock = new ThreeThread ();
    Thread t1 = new Thread (new Task ("Hello", lock, 1));
    Thread t2 = new Thread (new Task ("Good", lock, 2));
    Thread t3 = new Thread (new Task ("Morning", lock, 3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_4_17
15322847_39936378_3_13
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    print p1 = new print (0);
    print p2 = new print (1);
    print p3 = new print (2);
    Thread t1 = new Thread (p1);
    Thread t2 = new Thread (p2);
    Thread t3 = new Thread (p3);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > objList = new ArrayList < > ();
    for (int i = 0;
    i < 5; i ++) {
        objList.add (new Object ());
    }
    for (int i = 0;
    i < 5; i ++) {
        Thread t = new Thread (new PrintThread (objList.get (i), objList.get ((i + 1) % 5)));
        t.setName ("Thread" + i);
        t.start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_4_17
15322847_43183072_41_61
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    print p1 = new print (0);
    print p2 = new print (1);
    print p3 = new print (2);
    Thread t1 = new Thread (p1);
    Thread t2 = new Thread (p2);
    Thread t3 = new Thread (p3);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    int THREAD_COUNT = 10;
    List < ThreadCall > listThread = new ArrayList < > ();
    for (int i = 1;
    i <= THREAD_COUNT; i ++) {
        listThread.add (new ThreadCall ("Thread " + i));
    }
    for (int i = 0;
    i < listThread.size (); i ++) {
        if (i == listThread.size () - 1) {
            listThread.get (i).setNext (listThread.get (0));
        } else listThread.get (i).setNext (listThread.get (i + 1));

    }
    listThread.get (0).addElBQ (1);
    for (int i = 0;
    i < listThread.size (); i ++) {
        listThread.get (i).start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_4_17
15322847_44613137_9_23
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    print p1 = new print (0);
    print p2 = new print (1);
    print p3 = new print (2);
    Thread t1 = new Thread (p1);
    Thread t2 = new Thread (p2);
    Thread t3 = new Thread (p3);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_32690601_4_17
15322847_53019428_3_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    print p1 = new print (0);
    print p2 = new print (1);
    print p3 = new print (2);
    Thread t1 = new Thread (p1);
    Thread t2 = new Thread (p2);
    Thread t3 = new Thread (p3);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    AtomicInteger counter = new AtomicInteger (0);
    int numThreads = 3;
    Thread t1 = new Thread (new SeqNumPrinter (counter, 0, numThreads));
    Thread t2 = new Thread (new SeqNumPrinter (counter, 1, numThreads));
    Thread t3 = new Thread (new SeqNumPrinter (counter, 2, numThreads));
    t1.currentThread ().setName ("T1");
    t2.currentThread ().setName ("T2");
    t3.currentThread ().setName ("T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39394768_17_50
15322847_39936378_28_43
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            while (! ((lock.status % 3) == 0) && p == 1) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 1) && p == 2) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 2) && p == 3) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println ("thread: " + p + " : " + message);
            lock.status ++;
            lock.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    for (; i <= 100;) {
        synchronized (current) {
            synchronized (next) {
                next.notify ();
                System.out.println (Thread.currentThread ().getName () + " Value : " + i ++);
            }
            try {
                current.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39394768_17_50
15322847_43183072_24_39
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            while (! ((lock.status % 3) == 0) && p == 1) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 1) && p == 2) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 2) && p == 3) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println ("thread: " + p + " : " + message);
            lock.status ++;
            lock.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    int x = 0;
    while (true) {
        try {
            x = 0;
            x = bq.take ();
            if (x != 0) {
                System.out.println (Thread.currentThread ().getName () + " =>" + x);
                if (x >= 100) System.exit (0);

                next.addElBQ (x + 1);
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39394768_17_50
15322847_44613137_40_64
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            while (! ((lock.status % 3) == 0) && p == 1) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 1) && p == 2) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            while (! ((lock.status % 3) == 2) && p == 3) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            System.out.println ("thread: " + p + " : " + message);
            lock.status ++;
            lock.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39394768_56_65
15322847_39936378_3_13
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    ThreeThread lock = new ThreeThread ();
    Thread t1 = new Thread (new Task ("Hello", lock, 1));
    Thread t2 = new Thread (new Task ("Good", lock, 2));
    Thread t3 = new Thread (new Task ("Morning", lock, 3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > objList = new ArrayList < > ();
    for (int i = 0;
    i < 5; i ++) {
        objList.add (new Object ());
    }
    for (int i = 0;
    i < 5; i ++) {
        Thread t = new Thread (new PrintThread (objList.get (i), objList.get ((i + 1) % 5)));
        t.setName ("Thread" + i);
        t.start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39394768_56_65
15322847_43183072_41_61
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    ThreeThread lock = new ThreeThread ();
    Thread t1 = new Thread (new Task ("Hello", lock, 1));
    Thread t2 = new Thread (new Task ("Good", lock, 2));
    Thread t3 = new Thread (new Task ("Morning", lock, 3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    int THREAD_COUNT = 10;
    List < ThreadCall > listThread = new ArrayList < > ();
    for (int i = 1;
    i <= THREAD_COUNT; i ++) {
        listThread.add (new ThreadCall ("Thread " + i));
    }
    for (int i = 0;
    i < listThread.size (); i ++) {
        if (i == listThread.size () - 1) {
            listThread.get (i).setNext (listThread.get (0));
        } else listThread.get (i).setNext (listThread.get (i + 1));

    }
    listThread.get (0).addElBQ (1);
    for (int i = 0;
    i < listThread.size (); i ++) {
        listThread.get (i).start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39394768_56_65
15322847_44613137_9_23
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    ThreeThread lock = new ThreeThread ();
    Thread t1 = new Thread (new Task ("Hello", lock, 1));
    Thread t2 = new Thread (new Task ("Good", lock, 2));
    Thread t3 = new Thread (new Task ("Morning", lock, 3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39394768_56_65
15322847_53019428_3_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    ThreeThread lock = new ThreeThread ();
    Thread t1 = new Thread (new Task ("Hello", lock, 1));
    Thread t2 = new Thread (new Task ("Good", lock, 2));
    Thread t3 = new Thread (new Task ("Morning", lock, 3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    AtomicInteger counter = new AtomicInteger (0);
    int numThreads = 3;
    Thread t1 = new Thread (new SeqNumPrinter (counter, 0, numThreads));
    Thread t2 = new Thread (new SeqNumPrinter (counter, 1, numThreads));
    Thread t3 = new Thread (new SeqNumPrinter (counter, 2, numThreads));
    t1.currentThread ().setName ("T1");
    t2.currentThread ().setName ("T2");
    t3.currentThread ().setName ("T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39936378_28_43
15322847_43183072_24_39
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    for (; i <= 100;) {
        synchronized (current) {
            synchronized (next) {
                next.notify ();
                System.out.println (Thread.currentThread ().getName () + " Value : " + i ++);
            }
            try {
                current.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    int x = 0;
    while (true) {
        try {
            x = 0;
            x = bq.take ();
            if (x != 0) {
                System.out.println (Thread.currentThread ().getName () + " =>" + x);
                if (x >= 100) System.exit (0);

                next.addElBQ (x + 1);
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39936378_28_43
15322847_44613137_40_64
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    for (; i <= 100;) {
        synchronized (current) {
            synchronized (next) {
                next.notify ();
                System.out.println (Thread.currentThread ().getName () + " Value : " + i ++);
            }
            try {
                current.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39936378_3_13
15322847_43183072_41_61
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    List < Object > objList = new ArrayList < > ();
    for (int i = 0;
    i < 5; i ++) {
        objList.add (new Object ());
    }
    for (int i = 0;
    i < 5; i ++) {
        Thread t = new Thread (new PrintThread (objList.get (i), objList.get ((i + 1) % 5)));
        t.setName ("Thread" + i);
        t.start ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int THREAD_COUNT = 10;
    List < ThreadCall > listThread = new ArrayList < > ();
    for (int i = 1;
    i <= THREAD_COUNT; i ++) {
        listThread.add (new ThreadCall ("Thread " + i));
    }
    for (int i = 0;
    i < listThread.size (); i ++) {
        if (i == listThread.size () - 1) {
            listThread.get (i).setNext (listThread.get (0));
        } else listThread.get (i).setNext (listThread.get (i + 1));

    }
    listThread.get (0).addElBQ (1);
    for (int i = 0;
    i < listThread.size (); i ++) {
        listThread.get (i).start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39936378_3_13
15322847_44613137_9_23
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    List < Object > objList = new ArrayList < > ();
    for (int i = 0;
    i < 5; i ++) {
        objList.add (new Object ());
    }
    for (int i = 0;
    i < 5; i ++) {
        Thread t = new Thread (new PrintThread (objList.get (i), objList.get ((i + 1) % 5)));
        t.setName ("Thread" + i);
        t.start ();
    }
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_39936378_3_13
15322847_53019428_3_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    List < Object > objList = new ArrayList < > ();
    for (int i = 0;
    i < 5; i ++) {
        objList.add (new Object ());
    }
    for (int i = 0;
    i < 5; i ++) {
        Thread t = new Thread (new PrintThread (objList.get (i), objList.get ((i + 1) % 5)));
        t.setName ("Thread" + i);
        t.start ();
    }
}
----------------------------------------

public static void main (String [] args) {
    AtomicInteger counter = new AtomicInteger (0);
    int numThreads = 3;
    Thread t1 = new Thread (new SeqNumPrinter (counter, 0, numThreads));
    Thread t2 = new Thread (new SeqNumPrinter (counter, 1, numThreads));
    Thread t3 = new Thread (new SeqNumPrinter (counter, 2, numThreads));
    t1.currentThread ().setName ("T1");
    t2.currentThread ().setName ("T2");
    t3.currentThread ().setName ("T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_43183072_24_39
15322847_44613137_40_64
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public void run () {
    int x = 0;
    while (true) {
        try {
            x = 0;
            x = bq.take ();
            if (x != 0) {
                System.out.println (Thread.currentThread ().getName () + " =>" + x);
                if (x >= 100) System.exit (0);

                next.addElBQ (x + 1);
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_43183072_41_61
15322847_44613137_9_23
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    int THREAD_COUNT = 10;
    List < ThreadCall > listThread = new ArrayList < > ();
    for (int i = 1;
    i <= THREAD_COUNT; i ++) {
        listThread.add (new ThreadCall ("Thread " + i));
    }
    for (int i = 0;
    i < listThread.size (); i ++) {
        if (i == listThread.size () - 1) {
            listThread.get (i).setNext (listThread.get (0));
        } else listThread.get (i).setNext (listThread.get (i + 1));

    }
    listThread.get (0).addElBQ (1);
    for (int i = 0;
    i < listThread.size (); i ++) {
        listThread.get (i).start ();
    }
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_43183072_41_61
15322847_53019428_3_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    int THREAD_COUNT = 10;
    List < ThreadCall > listThread = new ArrayList < > ();
    for (int i = 1;
    i <= THREAD_COUNT; i ++) {
        listThread.add (new ThreadCall ("Thread " + i));
    }
    for (int i = 0;
    i < listThread.size (); i ++) {
        if (i == listThread.size () - 1) {
            listThread.get (i).setNext (listThread.get (0));
        } else listThread.get (i).setNext (listThread.get (i + 1));

    }
    listThread.get (0).addElBQ (1);
    for (int i = 0;
    i < listThread.size (); i ++) {
        listThread.get (i).start ();
    }
}
----------------------------------------

public static void main (String [] args) {
    AtomicInteger counter = new AtomicInteger (0);
    int numThreads = 3;
    Thread t1 = new Thread (new SeqNumPrinter (counter, 0, numThreads));
    Thread t2 = new Thread (new SeqNumPrinter (counter, 1, numThreads));
    Thread t3 = new Thread (new SeqNumPrinter (counter, 2, numThreads));
    t1.currentThread ().setName ("T1");
    t2.currentThread ().setName ("T2");
    t3.currentThread ().setName ("T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15322847_44613137_9_23
15322847_53019428_3_18
Title: 3 threads to print alternate values in sequence 
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------

public static void main (String [] args) {
    AtomicInteger counter = new AtomicInteger (0);
    int numThreads = 3;
    Thread t1 = new Thread (new SeqNumPrinter (counter, 0, numThreads));
    Thread t2 = new Thread (new SeqNumPrinter (counter, 1, numThreads));
    Thread t3 = new Thread (new SeqNumPrinter (counter, 2, numThreads));
    t1.currentThread ().setName ("T1");
    t2.currentThread ().setName ("T2");
    t3.currentThread ().setName ("T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15333891_15334570_6_40
15333891_15336203_12_41
Title: Need to fix my Java Timer code 
----------------------------------------

public static void main (String args []) throws InterruptedException {
    System.out.println ("This is the main program");
    Timer timeOn = new Timer ();
    Timer timeOff = new Timer ();
    Bulb b1 = new Bulb ("B1");
    BulbJob bjOn = new BulbJob (b1);
    BulbJob bjOff = new BulbJob (b1);
    bjOn.setBulbStateEqualTo (true);
    bjOff.setBulbStateEqualTo (false);
    Date current = new Date ();
    Date afterCurrent = (Date) current.clone ();
    System.out.println ("Current time is - " + current);
    int currentSecs = current.getSeconds ();
    int offset = 3;
    afterCurrent.setSeconds (currentSecs + offset);
    System.out.println ("Future time is - " + afterCurrent);
    timeOn.schedule (bjOn, afterCurrent);
    afterCurrent.setSeconds (currentSecs + 2 * offset);
    System.out.println ("Future time is - " + afterCurrent);
    timeOff.schedule (bjOff, afterCurrent);
    System.out.println ("Main program ends");
}
----------------------------------------

public static void main (String args []) throws InterruptedException {
    System.out.println ("This is the main method");
    java.util.GregorianCalendar cal = new java.util.GregorianCalendar ();
    Bulb b1 = new Bulb ("bulb 1", false);
    Bulb b2 = new Bulb ("bulb 2", false);
    System.out.println ("Time now " + formatDate (cal.getTime ()));
    Timer timer = new Timer ("bulbs");
    BulbJob b1On = new BulbJob (b1, true);
    BulbJob b1Off = new BulbJob (b1, false);
    BulbJob b2On = new BulbJob (b2, true);
    BulbJob b2Off = new BulbJob (b2, false);
    timer.schedule (b1On, 3 * 1000);
    timer.schedule (b2On, 7 * 1000);
    timer.schedule (b1Off, 6 * 1000);
    b1On = new BulbJob (b1, true);
    timer.schedule (b1On, 9 * 1000);
    System.out.println ("This is the main method ending; but other threads might be running ...");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15344560_15344693_1_22
15344560_15344778_1_18
Title: Java Swing separate core with GUI 
----------------------------------------

public static void main (String [] args) {
    GUI gui = null;
    Calcul calculs = new Calcul ();
    SwingUtilities.invokeLater (new Runnable () {
        public void run () {
            gui = new GUI ();
        }}

    );
    while (true) {
        javax.swing.SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                gui.displayResults (calculs);
            }}

        );
    }
}
----------------------------------------

public static void main (String [] args) {
    final GUI myGUI = new GUI ();
    Thread workThread = new Thread (new Runnable () {
        public void run () {
            SwingUtilities.invokeLater (new Runnable () {
                public void run () {
                    myGUI.updateMyResults ();
                }}

            );
        }}

    );
    workThread.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15351261_15351326_10_37
15351261_15351365_1_11
Title: Do I need to implement hashCode() and equals() methods? 
----------------------------------------

@Override
public boolean equals (Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (! (obj instanceof EventInfo)) {
        return false;
    }
    EventInfo other = (EventInfo) obj;
    if (info == null) {
        if (other.info != null) {
            return false;
        }
    } else if (! info.equals (other.info)) {
        return false;
    }

    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (! name.equals (other.name)) {
        return false;
    }

    return true;
}
----------------------------------------

@Override
public boolean equals (Object obj) {
    if (obj instanceof EventInfo) {
        EventInfo other = (EventInfo) obj;
        EqualsBuilder builder = new EqualsBuilder ();
        builder.append (name, other.name);
        builder.append (info, other.info);
        return builder.isEquals ();
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15351604_15351675_9_27
15351604_15351814_8_37
Title: Adding a border to an image in Java 
----------------------------------------

public static void main (String [] args) {
    BufferedImage image = null;
    ImagePanel imagePanel = null;
    try {
        image = ImageIO.read (new File ("Pictures/pl.jpg"));
        imagePanel = new ImagePanel (image);
    } catch (IOException e) {
        System.err.println ("Trying to read in image " + e);
    }
    JFrame frame = new JFrame ("Example");
    frame.add (imagePanel);
    frame.pack ();
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    Runnable r = new Runnable () {
        @Override
        public void run () {
            JPanel gui = new JPanel (new BorderLayout ());
            gui.setBorder (new LineBorder (Color.BLUE, 12));
            Image image = new BufferedImage (400, 50, BufferedImage.TYPE_INT_RGB);
            JLabel l = new JLabel (new ImageIcon (image));
            Border b1 = new BevelBorder (BevelBorder.LOWERED, Color.LIGHT_GRAY, Color.DARK_GRAY);
            Border b2 = new LineBorder (Color.GRAY, 12);
            Border b3 = new BevelBorder (BevelBorder.LOWERED, Color.LIGHT_GRAY, Color.DARK_GRAY);
            Border bTemp = new CompoundBorder (b1, b2);
            Border b = new CompoundBorder (bTemp, b3);
            l.setBorder (b);
            gui.add (l);
            JOptionPane.showMessageDialog (null, gui);
        }}

    ;
    SwingUtilities.invokeLater (r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15353671_15358249_7_20
15353671_34678989_14_80
Title: Java file encoding conversion 
----------------------------------------

public static void main (String [] args) throws IOException {
    Charset windows1252 = Charset.forName ("windows-1252");
    try (InputStream in = new FileInputStream (args [0]); Reader reader = new InputStreamReader (in, windows1252); OutputStream out = new FileOutputStream (args [1]); Writer writer = new OutputStreamWriter (out, StandardCharsets.UTF_8)) {
        writer.write (BYTE_ORDER_MARK);
        char [] buffer = new char [1024];
        int read;
        while ((read = reader.read (buffer)) != - 1) {
            writer.write (buffer, 0, read);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("Please name a source and a target directory");
        return;
    }
    File inputFolder = new File (args [0]);
    if (! inputFolder.isDirectory ()) {
        System.out.println ("Input folder " + inputFolder + " does not exist");
        return;
    }
    File outputFolder = new File (args [1]);
    if (outputFolder.exists ()) {
        System.out.println ("Folder " + outputFolder + " exists - aborting");
        return;
    }
    if (outputFolder.mkdir ()) {
        System.out.println ("Placing converted files in " + outputFolder);
    } else {
        System.out.println ("Output folder " + outputFolder + " exists - aborting");
        return;
    }
    ArrayList < File > fileList = new ArrayList < File > ();
    for (final File fileEntry : inputFolder.listFiles ()) {
        fileList.add (fileEntry);
    }
    InputStream in;
    Reader reader = null;
    Writer writer = null;
    int converted = 0;
    try {
        for (File file : fileList) {
            try {
                in = new FileInputStream (file.getAbsoluteFile ());
                reader = new InputStreamReader (in, ANSI_CHARSET);
                OutputStream out = new FileOutputStream (outputFolder.getAbsoluteFile () + PATH_SEP + file.getName ());
                writer = new OutputStreamWriter (out, UTF_CODE);
                if (WRITE_BOM) writer.write (BYTE_ORDER_MARK);

                char [] buffer = new char [1024];
                int read;
                while ((read = reader.read (buffer)) != - 1) {
                    writer.write (buffer, 0, read);
                }
                ++ converted;
            } finally {
                reader.close ();
                writer.close ();
            }
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    System.out.println (converted + " files converted");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15354909_15355055_1_14
15354909_15355157_3_22
Title: Replacing multiple characters at a time 
----------------------------------------

public static void main (String [] args) {
    String alp = "abc";
    String alteredAlp = "";
    for (int i = 0;
    i < alp.length (); i ++) {
        if (alp.charAt (i) == 'a') alteredAlp = alteredAlp + 'b';
        else if (alp.charAt (i) == 'b') alteredAlp = alteredAlp + 'c';
        else if (alp.charAt (i) == 'c') alteredAlp = alteredAlp + 'a';

    }
    System.out.println (alteredAlp);
}
----------------------------------------

public static void main (String [] args) {
    String alp = "abc";
    StringBuilder alteredAlp = new StringBuilder ();
    for (int i = 0;
    i < alp.length (); i ++) {
        switch (alp.charAt (i)) {
            case 'a' :
                alteredAlp.append ('b');
                break;
            case 'b' :
                alteredAlp.append ('c');
                break;
            case 'c' :
                alteredAlp.append ('a');
                break;
        }
    }
    System.out.println (alteredAlp.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15356205_15356231_1_14
15356205_15356529_1_25
Title: How to compare DateTime or MutableDateTime objects correctly in Joda Time? 
----------------------------------------

public static void main (String [] args) {
    DateTime dt1 = new DateTime ();
    DateTime dt2 = new DateTime (dt1);
    DateTime dt3 = new DateTime (dt1).minusSeconds (10);
    DateTime dt4 = new DateTime (dt1).plusSeconds (10);
    int result1 = dt1.compareTo (dt2);
    int result2 = dt1.compareTo (dt3);
    int result3 = dt1.compareTo (dt4);
    System.out.println ("Results " + result1 + " , " + result2 + " , " + result3);
}
----------------------------------------

public static void main (String [] args) {
    DateTime dt1 = new DateTime ();
    DateTime dt2 = new DateTime (dt1);
    DateTime dt3 = new DateTime (dt1);
    DateTime dt4 = new DateTime (dt1);
    MutableDateTime mdt1 = new MutableDateTime (dt1);
    mdt1.addYears (- 10);
    dt3 = dt3.minusYears (10);
    dt4 = dt4.plusYears (10);
    int result1 = dt1.compareTo (dt2);
    int result2 = dt1.compareTo (dt3);
    int result3 = dt1.compareTo (dt4);
    System.out.println ("Results " + result1 + " , " + result2 + " , " + result3);
    System.out.println ("IMmutable is " + dt1);
    System.out.println ("mutable is " + mdt1);
    mdt1.addYears (- 10000);
    System.out.println ("mutable is " + mdt1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15363735_15363971_1_17
15363735_15364117_1_22
Title: "When compiling I receive the error: ""unreachable statement"". How can I fix the issue?" 
----------------------------------------

public double [] Convertir (double nombre) {
    double [] yearsWeeksAndDays = new double [3];
    double annee = 0;
    double semaine = 0;
    while (nombre >= 365) {
        annee += 1;
        nombre -= 365;
    }
    yearsWeeksAndDays [0] = annee;
    while (nombre >= 7) {
        semaine = semaine + 1;
        nombre -= 7;
    }
    yearsWeeksAndDays [1] = semaine;
    yearsWeeksAndDays [2] = nombre;
    return yearsWeeksAndDays;
}
----------------------------------------

public double Convertir (double Number) {
    double annee = 0;
    double semaine = 0;
    double jour = 0;
    while ((Number - 365) >= 0) {
        annee += 1;
    }
    if (annee > 0) {
        return annee;
    }
    double nombreSemaine = Number - (annee * 365);
    while ((nombreSemaine - 7) >= 0) {
        semaine = semaine + 1;
    }
    if (semaine > 0) return semaine;

    double nombreJour = Number - (annee * 365) - (semaine * 7);
    nombreJour = jour;
    return jour;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15370044_15370730_1_32
15370044_15372393_21_45
Title: Trouble with Merge Sort 
----------------------------------------

private void merge (int [] a, int first, int mid, int last) {
    ArrayList < Integer > left = new ArrayList < Integer > (mid - first + 1), right = new ArrayList < Integer > (last - mid);
    for (int m = first;
    m <= mid; ++ m) {
        left.add (a [m]);
    }
    for (int m = mid + 1;
    m <= last; ++ m) {
        right.add (a [m]);
    }
    int i = first;
    while (! left.isEmpty () || ! right.isEmpty ()) {
        if (left.isEmpty ()) {
            a [i ++] = right.remove (0);
        } else if (right.isEmpty ()) {
            a [i ++] = left.remove (0);
        } else if (left.get (0) < right.get (0)) {
            a [i ++] = left.remove (0);
        } else {
            a [i ++] = right.remove (0);
        }

    }
}
----------------------------------------

private static void merge (int [] a, int beg, int middle, int end) {
    int [] d = new int [a.length];
    int mid = middle + 1;
    int beg1 = beg;
    for (int i = beg1;
    i <= end; i ++) {
        if (beg <= middle && mid <= end) {
            if (a [beg] <= a [mid]) {
                d [i] = a [beg];
                beg ++;
            } else if (a [mid] <= a [beg]) {
                d [i] = a [mid];
                mid ++;
            }

        } else if (beg > middle) {
            d [i] = a [mid];
            mid ++;
        } else if (mid >= end) {
            d [i] = a [beg];
            beg ++;
        }

    }
    for (int w = beg1;
    w <= end; w ++) {
        a [w] = d [w];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1537207_1537458_14_32
1537207_31220485_9_52
Title: How to convert XML to java.util.Map and vice versa 
----------------------------------------

public static void main (String [] args) {
    Map < String, String > map = new HashMap < String, String > ();
    map.put ("name", "chris");
    map.put ("island", "faranga");
    XStream magicApi = new XStream ();
    magicApi.registerConverter (new MapEntryConverter ());
    magicApi.alias ("root", Map.class);
    String xml = magicApi.toXML (map);
    System.out.println ("Result of tweaked XStream toXml()");
    System.out.println (xml);
    Map < String, String > extractedMap = (Map < String, String >) magicApi.fromXML (xml);
    assert extractedMap.get ("name").equals ("chris");
    assert extractedMap.get ("island").equals ("faranga");
}
----------------------------------------

public static void main (String [] args) {
    try {
        Map < String, Object > map = new HashMap < String, Object > ();
        map.put ("name", "chris");
        map.put ("island", "faranga");
        Map < String, String > mapInner = new HashMap < String, String > ();
        mapInner.put ("a", "A");
        mapInner.put ("b", "B");
        mapInner.put ("c", "C");
        map.put ("innerMap", mapInner);
        Map < String, Object > mapRoot = new HashMap < String, Object > ();
        mapRoot.put ("ROOT", map);
        System.out.println ("Map: " + mapRoot);
        System.out.println ();
        ToXML toXML = new ToXML ();
        String convertedXML = String.valueOf (toXML.convertToXML (mapRoot, true));
        System.out.println ("Converted XML: " + convertedXML);
        System.out.println ();
        ToMap toMap = new ToMap ();
        Map < String, Object > convertedMap = toMap.convertToMap (convertedXML);
        System.out.println ("Converted Map: " + convertedMap);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1537207_1537458_40_53
1537207_9109704_7_16
Title: How to convert XML to java.util.Map and vice versa 
----------------------------------------

public void marshal (Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
    AbstractMap map = (AbstractMap) value;
    for (Object obj : map.entrySet ()) {
        Map.Entry entry = (Map.Entry) obj;
        writer.startNode (entry.getKey ().toString ());
        Object val = entry.getValue ();
        if (null != val) {
            writer.setValue (val.toString ());
        }
        writer.endNode ();
    }
}
----------------------------------------

public void marshal (Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
    AbstractMap map = (AbstractMap) value;
    for (Object obj : map.entrySet ()) {
        Entry entry = (Entry) obj;
        writer.startNode (entry.getKey ().toString ());
        context.convertAnother (entry.getValue ());
        writer.endNode ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1537207_1537458_55_70
1537207_18855811_26_39
Title: How to convert XML to java.util.Map and vice versa 
----------------------------------------

public Object unmarshal (HierarchicalStreamReader reader, UnmarshallingContext context) {
    Map < String, String > map = new HashMap < String, String > ();
    while (reader.hasMoreChildren ()) {
        reader.moveDown ();
        String key = reader.getNodeName ();
        String value = reader.getValue ();
        map.put (key, value);
        reader.moveUp ();
    }
    return map;
}
----------------------------------------

public Object unmarshal (HierarchicalStreamReader reader, UnmarshallingContext context) {
    Map < String, String > map = new HashMap < String, String > ();
    while (reader.hasMoreChildren ()) {
        reader.moveDown ();
        map.put (reader.getAttribute ("name"), reader.getAttribute ("value"));
        reader.moveUp ();
    }
    return map;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1537207_1537458_55_70
1537207_44152959_20_38
Title: How to convert XML to java.util.Map and vice versa 
----------------------------------------

public Object unmarshal (HierarchicalStreamReader reader, UnmarshallingContext context) {
    Map < String, String > map = new HashMap < String, String > ();
    while (reader.hasMoreChildren ()) {
        reader.moveDown ();
        String key = reader.getNodeName ();
        String value = reader.getValue ();
        map.put (key, value);
        reader.moveUp ();
    }
    return map;
}
----------------------------------------

public Object unmarshal (HierarchicalStreamReader reader, UnmarshallingContext unmarshallingContext) {
    Map < String, Object > map = new HashMap < > ();
    while (reader.hasMoreChildren ()) {
        reader.moveDown ();
        String key = reader.getNodeName ();
        String value = reader.getValue ().replaceAll ("\\n|\\t", "");
        if (StringUtils.isBlank (value)) {
            map.put (key, unmarshal (reader, unmarshallingContext));
        } else {
            map.put (key, value);
        }
        reader.moveUp ();
    }
    return map;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1537207_18855811_26_39
1537207_44152959_20_38
Title: How to convert XML to java.util.Map and vice versa 
----------------------------------------

public Object unmarshal (HierarchicalStreamReader reader, UnmarshallingContext context) {
    Map < String, String > map = new HashMap < String, String > ();
    while (reader.hasMoreChildren ()) {
        reader.moveDown ();
        map.put (reader.getAttribute ("name"), reader.getAttribute ("value"));
        reader.moveUp ();
    }
    return map;
}
----------------------------------------

public Object unmarshal (HierarchicalStreamReader reader, UnmarshallingContext unmarshallingContext) {
    Map < String, Object > map = new HashMap < > ();
    while (reader.hasMoreChildren ()) {
        reader.moveDown ();
        String key = reader.getNodeName ();
        String value = reader.getValue ().replaceAll ("\\n|\\t", "");
        if (StringUtils.isBlank (value)) {
            map.put (key, unmarshal (reader, unmarshallingContext));
        } else {
            map.put (key, value);
        }
        reader.moveUp ();
    }
    return map;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1537207_44152959_4_17
1537207_9109704_7_16
Title: How to convert XML to java.util.Map and vice versa 
----------------------------------------

public void marshal (Object value, HierarchicalStreamWriter writer, MarshallingContext marshallingContext) {
    AbstractMap map = (AbstractMap) value;
    for (Object obj : map.entrySet ()) {
        Map.Entry entry = (Map.Entry) obj;
        writer.startNode (entry.getKey ().toString ());
        Object val = entry.getValue ();
        if (val instanceof Map) {
            marshal (val, writer, marshallingContext);
        } else if (null != val) {
            writer.setValue (val.toString ());
        }

        writer.endNode ();
    }
}
----------------------------------------

public void marshal (Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
    AbstractMap map = (AbstractMap) value;
    for (Object obj : map.entrySet ()) {
        Entry entry = (Entry) obj;
        writer.startNode (entry.getKey ().toString ());
        context.convertAnother (entry.getValue ());
        writer.endNode ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15376228_15376383_1_14
15376228_15376442_1_18
Title: How to write an .add() method? 
----------------------------------------

public int add (Distance d) {
    int df = d.getFeet ();
    int di = d.getInches ();
    int sumInches, sumFeet, temp;
    sumInches = di + this.inches;
    sumFeet = df + this.feet;
    if (sumInches > 11) {
        temp = sumInches - 11;
        sumFeet = sumFeet + 1;
        sumInches = temp;
    }
    this.feet = sumFeet;
    this.inches = sumInches;
}
----------------------------------------

public int add (Distance newDistance) {
    int newDistanceFeet = newDistance.getFeet ();
    int newDistanceInches = newDistance.getInches ();
    int sumInches = newDistanceInches + this.getInches ();
    int sumFeet = newDistanceFeet + this.getFeet ();
    sumInches += (sumInches % 12);
    sumFeet += (sumInches / 12);
    this.setFeet (sumFeet);
    this.setInches (sumInches);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15376228_15376383_1_14
15376228_15376620_1_12
Title: How to write an .add() method? 
----------------------------------------

public int add (Distance d) {
    int df = d.getFeet ();
    int di = d.getInches ();
    int sumInches, sumFeet, temp;
    sumInches = di + this.inches;
    sumFeet = df + this.feet;
    if (sumInches > 11) {
        temp = sumInches - 11;
        sumFeet = sumFeet + 1;
        sumInches = temp;
    }
    this.feet = sumFeet;
    this.inches = sumInches;
}
----------------------------------------

public void add (Distance d) {
    int newFeet = this.feet + d.feet;
    int newInches = this.inches + d.inches;
    if (newInches > 11) {
        newFeet ++;
        newInches = newInches - 12;
    }
    this.feet = newFeet;
    this.inches = newInches;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15376228_15376442_1_18
15376228_15376620_1_12
Title: How to write an .add() method? 
----------------------------------------

public int add (Distance newDistance) {
    int newDistanceFeet = newDistance.getFeet ();
    int newDistanceInches = newDistance.getInches ();
    int sumInches = newDistanceInches + this.getInches ();
    int sumFeet = newDistanceFeet + this.getFeet ();
    sumInches += (sumInches % 12);
    sumFeet += (sumInches / 12);
    this.setFeet (sumFeet);
    this.setInches (sumInches);
}
----------------------------------------

public void add (Distance d) {
    int newFeet = this.feet + d.feet;
    int newInches = this.inches + d.inches;
    if (newInches > 11) {
        newFeet ++;
        newInches = newInches - 12;
    }
    this.feet = newFeet;
    this.inches = newInches;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15379485_15379852_3_30
15379485_15379952_5_43
Title: How to return a value from thread in java? 
----------------------------------------

public String rate (String dt) {
    String total = "";
    try {
        URL url = new URL (tally_ipaddr + "/prorate.jsp?plist=" + sss.toString ().trim ());
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection ();
        InputStream in = new BufferedInputStream (urlConnection.getInputStream ());
        BufferedReader r = new BufferedReader (new InputStreamReader (in));
        String x = "";
        String total = "";
        x = r.readLine ();
        int i = 0;
        while (x.length () > 1) {
            total = total + x.toString ().trim ();
            i ++;
            x = r.readLine ();
        }
    } catch (Exception e) {
        return e.toString ();
    }
    return total;
}
----------------------------------------

public String rate (String dt) {
    StringBuilder sb = new StringBuilder ();
    new Thread (new Runnable () {
        public void run () {
            try {
                URL url = new URL (tally_ipaddr + "/prorate.jsp?plist=" + sss.toString ().trim ());
                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection ();
                InputStream in = new BufferedInputStream (urlConnection.getInputStream ());
                BufferedReader r = new BufferedReader (new InputStreamReader (in));
                StringBuilder sb = new StringBuilder ();
                String s;
                while (true) {
                    s = r.readLine ();
                    if (s == null || s.length () == 0) break;

                    sb.append (s);
                }
                b = true;
            } catch (Exception e) {
                b = true;
            }
        }}

    ).start ();
    while (b) {
    }
    total = sb.toString ();
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15388216_15388272_15_34
15388216_15388291_17_28
Title: Concurrent actions and threads 
----------------------------------------

public void run () {
    String importantInfo [] = {"Mares eat oats", "Does eat oats", "Little lambs eat ivy", "A kid will eat ivy too"};
    try {
        for (int i = 0;
        i < importantInfo.length; i ++) {
            Thread.sleep (4000);
            threadMessage (importantInfo [i]);
        }
    } catch (InterruptedException e) {
        threadMessage ("I wasn't done!");
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 1000; i ++) {
            queue.add (i);
            Thread.sleep (1);
        }
        queue.add (End);
    } catch (InterruptedException ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15388216_15388272_15_34
15388216_15388291_39_48
Title: Concurrent actions and threads 
----------------------------------------

public void run () {
    String importantInfo [] = {"Mares eat oats", "Does eat oats", "Little lambs eat ivy", "A kid will eat ivy too"};
    try {
        for (int i = 0;
        i < importantInfo.length; i ++) {
            Thread.sleep (4000);
            threadMessage (importantInfo [i]);
        }
    } catch (InterruptedException e) {
        threadMessage ("I wasn't done!");
    }
}
----------------------------------------

public void run () {
    boolean ended = false;
    while (! ended) {
        Integer i = queue.poll ();
        if (i != null) {
            ended = i == End;
            System.out.println (i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15388216_15388291_17_28
15388216_15388291_39_48
Title: Concurrent actions and threads 
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 1000; i ++) {
            queue.add (i);
            Thread.sleep (1);
        }
        queue.add (End);
    } catch (InterruptedException ex) {
    }
}
----------------------------------------

public void run () {
    boolean ended = false;
    while (! ended) {
        Integer i = queue.poll ();
        if (i != null) {
            ended = i == End;
            System.out.println (i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15396258_15398008_31_39
15396258_15398270_89_110
Title: drawPolygon keeps drawing lines from starting (mousePressed) location to current (mouseDragged) location 
----------------------------------------

public void paintComponent (final Graphics g1) {
    final Graphics2D g = (Graphics2D) g1;
    g.setColor (Color.RED);
    g.translate (modX, modY);
    g.setStroke (STROKE);
    for (int i = 0;
    i < SHAPE.length; i ++) {
        g.drawLine (SHAPE [i].x, SHAPE [i].y, SHAPE [(i + 1) % SHAPE.length].x, SHAPE [(i + 1) % SHAPE.length].y);
    }
}
----------------------------------------

protected void paintComponent (Graphics g) {
    super.paintComponent (g);
    Graphics2D g2d = (Graphics2D) g.create ();
    if (lastPoint != null) {
        g2d.setColor (Color.RED);
        g2d.fillOval (lastPoint.x - 2, lastPoint.y - 2, 4, 4);
    }
    if (currentShape != null) {
        g2d.setColor (Color.RED);
        g2d.draw (currentShape);
        if (lastPoint != null && currentPoint != null) {
            System.out.println (lastPoint + " - " + currentPoint);
            g2d.setColor (new Color (255, 0, 0, 64));
            g2d.draw (new Line2D.Float (lastPoint, currentPoint));
        }
    }
    g2d.setColor (Color.BLACK);
    for (Shape shape : lstPloys) {
        g2d.draw (shape);
    }
    g2d.dispose ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15401192_15401755_18_61
15401192_15401996_6_44
Title: Printing an ArrayList while reading it for print conditions 
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > first = new ArrayList < String > ();
    first.add ("it's");
    first.add ("Sit");
    first.add ("yes-man");
    first.add ("murdered");
    first.add ("ok");
    first.add ("DereDrum");
    first.add ("Hello");
    first.add ("Friend");
    ArrayList < String > second = new ArrayList < String > ();
    second.add ("its");
    second.add ("sit");
    second.add ("yesman");
    second.add ("murdered");
    second.add ("ok");
    second.add ("deredrum");
    second.add ("hello");
    second.add ("friend");
    ArrayList < Integer > checked = new ArrayList < Integer > ();
    for (int i = 0;
    i < first.size (); i ++) {
        String line = "";
        if (! checked.contains (i)) line += first.get (i) + " ";

        ArrayList < Character > firstChrAry = convert (first.get (i));
        for (int j = i + 1;
        j < second.size (); j ++) {
            ArrayList < Character > secondChrAry = convert (second.get (j));
            if (firstChrAry.size () == secondChrAry.size ()) {
                if (firstChrAry.equals (secondChrAry)) {
                    line += first.get (j);
                    checked.add (j);
                }
            }
        }
        if (! line.equals ("")) System.out.println (line);

    }
}
----------------------------------------

public static void main (String [] args) {
    List < String > lst1 = new ArrayList < String > ();
    List < String > lst2 = new ArrayList < String > ();
    lst1.add ("it's");
    lst1.add ("Sit");
    lst1.add ("yes-man");
    lst1.add ("murdered");
    lst1.add ("ok");
    lst1.add ("DereDrum");
    lst1.add ("Hello");
    lst1.add ("Friend");
    lst2.add ("its");
    lst2.add ("sit");
    lst2.add ("yesman");
    lst2.add ("murdered");
    lst2.add ("ok");
    lst2.add ("deredrum");
    lst2.add ("hello");
    lst2.add ("friend");
    for (int i = 0;
    i < lst2.size (); i ++) {
        String original = lst2.get (i);
        StringBuffer buff = new StringBuffer (original);
        buff.reverse ();
        if (lst2.contains (buff.toString ())) {
            System.out.println (lst1.get (i) + " " + lst1.get (lst2.indexOf (buff.toString ())));
            lst1.remove (lst2.indexOf (buff.toString ()));
            lst2.remove (buff.toString ());
        } else {
            System.out.println (lst1.get (i));
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15401630_15401675_1_16
15401630_15401841_3_17
Title: "Java Check if a String is a palindrome. Case insensitive" 
----------------------------------------

public static void main (String [] args) {
    boolean notPalindrome = false;
    String string = "Doc, note, I dissent. A fast never prevents a fatness. I diet on cod";
    string = string.replaceAll ("[^a-zA-Z]+", "").toLowerCase ();
    char [] array = string.toCharArray ();
    for (int i = 0, j = array.length - 1;
    i < j; i ++, j --) {
        if (array [i] != array [j]) {
            notPalindrome = true;
            break;
        }
    }
    System.out.println (string + " is palindrome? " + ! notPalindrome);
}
----------------------------------------

public static void main (String args []) {
    String str = "Doc, note, I dissent. A fast never prevents a fatness. I diet on cod";
    char c [] = str.toCharArray ();
    String newStr = "";
    for (int i = 0;
    i < c.length; i ++) {
        if ((c [i] >= 65 && c [i] <= 90) || (c [i] >= 97 && c [i] <= 122)) {
            newStr = newStr + c [i];
        }
    }
    boolean isPalindrome = newStr.toLowerCase ().equals (new StringBuilder (newStr.toLowerCase ()).reverse ().toString ());
    System.out.println (isPalindrome);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15404206_15404595_179_210
15404206_15406954_1_36
Title: Populating Spinner using ArrayList in Android 
----------------------------------------

void parse_ExamList () {
    XMLParser parser = new XMLParser ();
    Document doc = parser.getDomElement (xmlContent);
    NodeList nl = doc.getElementsByTagName (KEY_EXAMSET);
    for (int i = 0;
    i < nl.getLength (); i ++) {
        Element e = (Element) nl.item (i);
        menuKeys.add (parser.getValue (e, KEY_SETID));
        menuItems.add (parser.getValue (e, KEY_SETNAME));
    }
}
----------------------------------------

void parse_ExamList () {
    ArrayList < HashMap < String, String > > menuItems = new ArrayList < HashMap < String, String > > ();
    XMLParser parser = new XMLParser ();
    Document doc = parser.getDomElement (xmlContent);
    List < String > list = new ArrayList < String > ();
    NodeList nl = doc.getElementsByTagName (KEY_EXAMSET);
    for (int i = 0;
    i < nl.getLength (); i ++) {
        HashMap < String, String > map = new HashMap < String, String > ();
        Element e = (Element) nl.item (i);
        map.put (KEY_SETID, parser.getValue (e, KEY_SETID));
        map.put (KEY_SETNAME, parser.getValue (e, KEY_SETNAME));
        list.add ("(" + parser.getValue (e, KEY_SETID) + ") " + parser.getValue (e, KEY_SETNAME));
        menuItems.add (map);
    }
    ArrayAdapter < String > dataAdapter = new ArrayAdapter < String > (this, android.R.layout.simple_spinner_item, list);
    dataAdapter.setDropDownViewResource (android.R.layout.simple_spinner_dropdown_item);
    exam_list_spinner.setAdapter (dataAdapter);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15413815_15414425_1_41
15413815_15414730_11_41
Title: 1D array printed as 2D Java 
----------------------------------------

public void printFullMatrix () {
    int count = 0;
    int temp = 0;
    int rows = 0;
    for (int i = 0;
    i < aList.size (); i ++) {
        if (count % size == 0) {
            System.out.println ("");
            rows ++;
        }
        for (int j = 0;
        j < aList.get (i).pos - temp; j ++) {
            count += 1;
            if (count % size == 0) {
                System.out.println ("");
                rows ++;
            } else {
                System.out.print (0 + " ");
            }
        }
        System.out.print (aList.get (i).val + " ");
        temp = aList.get (i).pos;
        count ++;
        if (count % size == 0) {
            System.out.println ("");
            rows ++;
        }
    }
    while (rows < size) {
        count ++;
        if (count % size == 0) {
            System.out.println ("");
            rows ++;
        } else {
            System.out.print (0 + " ");
        }
    }
}
----------------------------------------

public static void printFullMatrix (Integer [] [] pairs, int length) {
    Arrays.sort (pairs, new Comparator < Integer [] > () {
        @Override
        public int compare (Integer [] a1, Integer [] a2) {
            return a1 [0] - a2 [0];
        }}

    );
    for (int i = 0;
    i < length * length; i ++) {
        if (i % length == 0 && i != 0) {
            System.out.println ();
        }
        int value = 0;
        for (int j = 0;
        j < pairs.length; j ++) {
            if (pairs [j] [0] == i) {
                value = pairs [j] [1];
            }
            if (pairs [j] [0] > i) {
                break;
            }
        }
        System.out.print (value + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15413815_15414425_1_41
15413815_15415448_1_12
Title: 1D array printed as 2D Java 
----------------------------------------

public void printFullMatrix () {
    int count = 0;
    int temp = 0;
    int rows = 0;
    for (int i = 0;
    i < aList.size (); i ++) {
        if (count % size == 0) {
            System.out.println ("");
            rows ++;
        }
        for (int j = 0;
        j < aList.get (i).pos - temp; j ++) {
            count += 1;
            if (count % size == 0) {
                System.out.println ("");
                rows ++;
            } else {
                System.out.print (0 + " ");
            }
        }
        System.out.print (aList.get (i).val + " ");
        temp = aList.get (i).pos;
        count ++;
        if (count % size == 0) {
            System.out.println ("");
            rows ++;
        }
    }
    while (rows < size) {
        count ++;
        if (count % size == 0) {
            System.out.println ("");
            rows ++;
        } else {
            System.out.print (0 + " ");
        }
    }
}
----------------------------------------

public void printFullMatrix () {
    int mi = 0;
    int li = 0;
    for (int row = 0;
    row < size; row ++) {
        for (int col = 0;
        col < size; col ++) {
            System.out.printf (" %3d", (li < aList.size () && mi ++ == aList.get (li).pos) ? aList.get (li ++).val : 0);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15413815_15414730_11_41
15413815_15415448_1_12
Title: 1D array printed as 2D Java 
----------------------------------------

public static void printFullMatrix (Integer [] [] pairs, int length) {
    Arrays.sort (pairs, new Comparator < Integer [] > () {
        @Override
        public int compare (Integer [] a1, Integer [] a2) {
            return a1 [0] - a2 [0];
        }}

    );
    for (int i = 0;
    i < length * length; i ++) {
        if (i % length == 0 && i != 0) {
            System.out.println ();
        }
        int value = 0;
        for (int j = 0;
        j < pairs.length; j ++) {
            if (pairs [j] [0] == i) {
                value = pairs [j] [1];
            }
            if (pairs [j] [0] > i) {
                break;
            }
        }
        System.out.print (value + " ");
    }
}
----------------------------------------

public void printFullMatrix () {
    int mi = 0;
    int li = 0;
    for (int row = 0;
    row < size; row ++) {
        for (int col = 0;
        col < size; col ++) {
            System.out.printf (" %3d", (li < aList.size () && mi ++ == aList.get (li).pos) ? aList.get (li ++).val : 0);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15426780_15426972_1_10
15426780_15427046_3_12
Title: Comparing one arraylist to another and deleting extra items java 
----------------------------------------

public static ArrayList < Integer > compareArrayandList (ArrayList < Integer > compare, ArrayList < Integer > array2) {
    ListIterator < Integer > iter = compare.listIterator (compare.size ());
    while (iter.hasPrevious ()) {
        Integer a = new Integer (iter.previous ());
        for (int number : array2) {
            if (a == number) iter.remove ();

        }
    }
    return compare;
}
----------------------------------------

public static ArrayList < Integer > compareArrayandList (ArrayList < Integer > compare, ArrayList < Integer > array2) {
    ArrayList < Integer > a3 = new ArrayList < Integer > ();
    for (Integer a : compare) {
        if (array2.contains (a)) a3.add (a);

    }
    System.out.println (a3);
    return a3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15436539_15455226_14_30
15436539_15455766_3_42
Title: Set ToolBar Buttons square and all the same size in JavaFX 2 
----------------------------------------

public void start (Stage stage) {
    BorderPane borderPane = new BorderPane ();
    Scene scene = new Scene (borderPane, 500, 500);
    Button btn1 = new Button ("short");
    Button btn2 = new Button ("between");
    Button btn3 = new Button ("pretty long");
    SquareButtonToolBar toolBar = new SquareButtonToolBar ();
    toolBar.getItems ().addAll (btn1, btn2, btn3);
    borderPane.setTop (toolBar);
    stage.setScene (scene);
    stage.show ();
    toolBar.requestLayout ();
}
----------------------------------------

public void start (final Stage stage) throws Exception {
    final Button [] buttons = new Button [] {new Button ("Short"), new Button ("Slightly longer"), new Button ("Very very very long button")};
    for (Button b : buttons) b.setStyle ("-fx-background-radius: 0");

    final InvalidationListener listener = new InvalidationListener () {
        public void invalidated (final Observable observable) {
            double size = 0;
            for (Button b : buttons) {
                size = Math.max (size, b.prefWidth (Integer.MAX_VALUE));
                size = Math.max (size, b.prefHeight (Integer.MAX_VALUE));
            }
            for (Button b : buttons) {
                b.setPrefWidth (size);
                b.setPrefHeight (size);
            }
        }}

    ;
    for (Button b : buttons) b.widthProperty ().addListener (listener);

    final ToolBar toolbar = new ToolBar ();
    toolbar.getItems ().addAll (buttons);
    final Scene scene = new Scene (toolbar);
    stage.setScene (scene);
    stage.setWidth (800);
    stage.setHeight (200);
    stage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15438818_15439073_8_20
15438818_15449177_5_17
Title: Printing a word every X seconds 
----------------------------------------

public void run () {
    while (true) {
        System.out.println ("Hello World");
        try {
            Thread.sleep (1000);
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (doLoop) {
        try {
            Thread.sleep (10000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
    System.out.println ("Thread closed !");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15447532_15447619_28_57
15447532_15447619_81_100
Title: Adding delay to the showing of output on if statements in gui Java 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    hideAllLabels ();
    if (counter == 1) {
        n1.setVisible (true);
        counter ++;
    } else if (counter == 2) {
        n4.setVisible (true);
        counter ++;
    } else if (counter == 3) {
        n2.setVisible (true);
        counter ++;
    } else if (counter == 4) {
        n5.setVisible (true);
        counter ++;
    } else if (counter == 5) {
        n3.setVisible (true);
        counter ++;
        timer.stop ();
    }

}
----------------------------------------

public void actionPerformed (ActionEvent a) {
    Object clicked = a.getSource ();
    if (show == clicked) {
        if (! timer.isRunning ()) {
            if (! started) {
                timer.start ();
                started = true;
            } else {
                counter = 1;
                timer.restart ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15447532_15447619_28_57
15447532_15448402_66_75
Title: Adding delay to the showing of output on if statements in gui Java 
----------------------------------------

public void actionPerformed (ActionEvent evt) {
    hideAllLabels ();
    if (counter == 1) {
        n1.setVisible (true);
        counter ++;
    } else if (counter == 2) {
        n4.setVisible (true);
        counter ++;
    } else if (counter == 3) {
        n2.setVisible (true);
        counter ++;
    } else if (counter == 4) {
        n5.setVisible (true);
        counter ++;
    } else if (counter == 5) {
        n3.setVisible (true);
        counter ++;
        timer.stop ();
    }

}
----------------------------------------

public void actionPerformed (ActionEvent a) {
    List < Integer > order = new ArrayList < > (5);
    order.add (2);
    order.add (4);
    order.add (0);
    order.add (3);
    order.add (1);
    new ShowWorker (labels, order).execute ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15447532_15447619_81_100
15447532_15448402_66_75
Title: Adding delay to the showing of output on if statements in gui Java 
----------------------------------------

public void actionPerformed (ActionEvent a) {
    Object clicked = a.getSource ();
    if (show == clicked) {
        if (! timer.isRunning ()) {
            if (! started) {
                timer.start ();
                started = true;
            } else {
                counter = 1;
                timer.restart ();
            }
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent a) {
    List < Integer > order = new ArrayList < > (5);
    order.add (2);
    order.add (4);
    order.add (0);
    order.add (3);
    order.add (1);
    new ShowWorker (labels, order).execute ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15452172_15452329_11_19
15452172_15452329_25_38
Title: gson parsing nested json objects 
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ('\t');
    sb.append (element);
    sb.append (" ==> ");
    sb.append (skip);
    sb.append ('\n');
    return sb.toString ();
}
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("Comment:\n");
    for (String c : comment) {
        sb.append ('\t');
        sb.append (c);
        sb.append ('\n');
    }
    sb.append ("Rules:\n");
    for (Rule r : rules) {
        sb.append (r.toString ());
    }
    return sb.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15456642_15457475_76_105
15456642_15457475_78_102
Title: Sending json Post date in android with parameter 
----------------------------------------

public void run () {
    handler.post (new Runnable () {
        public void run () {
            Double latitude = location.getLatitude ();
            Double longitude = location.getLongitude ();
            Double altitude = location.getAltitude ();
            Float accuracy = location.getAccuracy ();
            textView.setText ("Latitude: " + latitude + "\n" + "Longitude: " + longitude + "\n" + "Altitude: " + altitude + "\n" + "Accuracy: " + accuracy + "meters" + "\n" + "Location Counter: " + cnt);
            try {
                jsonData = new JSONObject ();
                jsonData.put ("Latitude", latitude);
                jsonData.put ("Longitude", longitude);
                jsonData.put ("Altitude", altitude);
                jsonData.put ("Accuracy", accuracy);
                System.out.println (jsonData.toString ());
                if (url != null) {
                    new HttpPostHandler ().execute ();
                }
            } catch (JSONException e) {
                e.printStackTrace ();
            }
            cnt ++;
        }}

    );
}
----------------------------------------

public void run () {
    Double latitude = location.getLatitude ();
    Double longitude = location.getLongitude ();
    Double altitude = location.getAltitude ();
    Float accuracy = location.getAccuracy ();
    textView.setText ("Latitude: " + latitude + "\n" + "Longitude: " + longitude + "\n" + "Altitude: " + altitude + "\n" + "Accuracy: " + accuracy + "meters" + "\n" + "Location Counter: " + cnt);
    try {
        jsonData = new JSONObject ();
        jsonData.put ("Latitude", latitude);
        jsonData.put ("Longitude", longitude);
        jsonData.put ("Altitude", altitude);
        jsonData.put ("Accuracy", accuracy);
        System.out.println (jsonData.toString ());
        if (url != null) {
            new HttpPostHandler ().execute ();
        }
    } catch (JSONException e) {
        e.printStackTrace ();
    }
    cnt ++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15456724_15506262_1_19
15456724_15506262_21_53
Title: Spring MVC Pages HTTP Status 400 and Incorrect URL's 
----------------------------------------

@RequestMapping (value = "citizen_list.htm", method = RequestMethod.POST)
public ModelAndView getCitizenList (@Valid
@ModelAttribute
Citizens citizen, BindingResult result, ModelMap m, Model model,@RequestParam (value = "user_request")
String user_request) throws Exception {
    try {
        logger.debug ("about to preform query");
        if (citizenManager.getListOfCitizens (citizen).isEmpty ()) {
            model.addAttribute ("icon", "ui-icon ui-icon-circle-close");
            model.addAttribute ("results", "Notice: Query Caused No Records To Be Retrived!");
        } else {
            model.addAttribute ("citizens", citizenManager.getListOfCitizens (citizen));
            return new ModelAndView ("citizenList");
        }
    } catch (Exception e) {
        logger.error ("Exception in CitizenRegistrationController - ModelAndView loadPage " + e);
        return new ModelAndView ("citizen_registration");
    }
}
----------------------------------------

@RequestMapping (value = "citizen_registration.htm", method = RequestMethod.POST)
public ModelAndView handleRequest (@Valid
@ModelAttribute
Citizens citizen, BindingResult result, ModelMap m, Model model,@RequestParam (value = "user_request")
String user_request) throws Exception {
    try {
        logger.debug ("In Http method for CitizenRegistrationController - Punishment Registration");
        logger.debug ("User Request Is " + user_request);
        if (result.hasErrors ()) {
            logger.debug ("Has Errors");
            return new ModelAndView ("citizen_registration");
        } else {
            if (user_request.equals ("Save")) {
                citizenManager.RegisterCitizen (citizen);
                model.addAttribute ("icon", "ui-icon ui-icon-circle-check");
                model.addAttribute ("results", "Record Was Saved");
                return new ModelAndView ("citizen_registration");
            } else if (user_request.equals ("Update")) {
                logger.info ("About to do update");
                citizenManager.UpdateCitizen (citizen);
                return new ModelAndView ("citizen_registration");
            }

        }
        logger.debug ("Has No Errors");
        return new ModelAndView ("citizen_registration");
    } catch (Exception e) {
        logger.error ("Exception in CitizenRegistrationController - ModelAndView loadPage " + e);
        return new ModelAndView ("citizen_registration");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15457132_15457397_19_39
15457132_15457397_9_17
Title: How to make a faster breadth first search? 
----------------------------------------

public static boolean search (int x, int y, char [] [] grid) {
    if (x < 0 || x >= grid.length || y < 0 || y > grid [0].length) return false;

    char ch = grid [x] [y];
    if (ch == 'X') {
        System.out.println ("End " + x + ", " + y);
        return true;
    }
    if (ch == '-' || ch == '#') {
        return false;
    }
    grid [x] [y] = '-';
    boolean found = search (x - 1, y, grid) || search (x + 1, y, grid) || search (x, y - 1, grid) || search (x, y + 1, grid);
    grid [x] [y] = ch;
    if (found) System.out.println ("... " + x + ", " + y);

    return found;
}
----------------------------------------

public static boolean search (int x, int y, String grid) {
    String [] rows = grid.split ("\n");
    char [] [] grid2 = new char [rows.length] [];
    for (int i = 0;
    i < rows.length; i ++) {
        String row = rows [i];
        grid2 [i] = row.toCharArray ();
    }
    return search (x, y, grid2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
154577_31455175_82_106
154577_39532917_112_131
Title: Polymorphism vs Overriding vs Overloading 
----------------------------------------

public static void main (String [] args) throws Exception {
    System.out.println ("Overriding\n");
    Super s1 = new SubOne ();
    s1.getClassName (null);
    Super s2 = new SubTwo ();
    s2.getClassName (null);
    Super s3 = new SubThree ();
    s3.getClassName (null);
    Super s4 = new SubFour ();
    s4.getClassName (null);
    Super s5 = new SubFive ();
    s5.getClassName (null);
    System.out.println ("Overloading\n");
    SubSix s6 = new SubSix ();
    s6.getClassName (null, null);
    s6 = new SubSix ();
    s6.getClassName (null);
    SubSeven s7 = new SubSeven ();
    s7.getClassName (s7);
    s7 = new SubSeven ();
    s7.getClassName (new Super ());
}
----------------------------------------

public static void main (String args []) {
    try {
        Game game = new Chess ();
        Thread t1 = new Thread (game);
        t1.start ();
        Thread.sleep (1000);
        game.setRunGame (false);
        Thread.sleep (1000);
        game = new TicTacToe ();
        Thread t2 = new Thread (game);
        t2.start ();
        Thread.sleep (1000);
        game.setRunGame (false);
    } catch (Exception err) {
        err.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
154577_31455175_82_106
154577_50202481_127_187
Title: Polymorphism vs Overriding vs Overloading 
----------------------------------------

public static void main (String [] args) throws Exception {
    System.out.println ("Overriding\n");
    Super s1 = new SubOne ();
    s1.getClassName (null);
    Super s2 = new SubTwo ();
    s2.getClassName (null);
    Super s3 = new SubThree ();
    s3.getClassName (null);
    Super s4 = new SubFour ();
    s4.getClassName (null);
    Super s5 = new SubFive ();
    s5.getClassName (null);
    System.out.println ("Overloading\n");
    SubSix s6 = new SubSix ();
    s6.getClassName (null, null);
    s6 = new SubSix ();
    s6.getClassName (null);
    SubSeven s7 = new SubSeven ();
    s7.getClassName (s7);
    s7 = new SubSeven ();
    s7.getClassName (new Super ());
}
----------------------------------------

public static void main (String [] args) {
    VolumeControllerV4 volumeControllerV4 = new VolumeControllerV4 ();
    BrightnessControllerV4 brightnessControllerV4 = new BrightnessControllerV4 ();
    ColourControllerV4 colourControllerV4 = new ColourControllerV4 ();
    List < ControllerV4 > controllerV4s = new ArrayList < > ();
    controllerV4s.add (brightnessControllerV4);
    controllerV4s.add (volumeControllerV4);
    controllerV4s.add (colourControllerV4);
    List < OnStart > controllersToInitialize = new ArrayList < > ();
    controllersToInitialize.addAll (controllerV4s);
    InitializeDeviceV4 initializeDeviceV4 = new InitializeDeviceV4 (controllersToInitialize);
    initializeDeviceV4.initialize ();
    List < OnReset > controllersToReset = new ArrayList < > ();
    controllersToReset.addAll (controllerV4s);
    ResetFunctionV4 resetFunctionV4 = new ResetFunctionV4 (controllersToReset);
    OUTER : while (true) {
        Scanner sc = new Scanner (System.in);
        System.out.println (" Enter your option \n Press 1 to increase volume \n Press 2 to decrease volume");
        System.out.println (" Press 3 to increase brightness \n Press 4 to decrease brightness");
        System.out.println (" Press 5 to increase color \n Press 6 to decrease color");
        System.out.println (" Press 7 to reset TV \n Press any other Button to shutdown");
        int button = sc.nextInt ();
        switch (button) {
            case 1 :
                {
                    volumeControllerV4.adjust (5);
                    break;
                } case 2 :
                {
                    volumeControllerV4.adjust (- 5);
                    break;
                } case 3 :
                {
                    brightnessControllerV4.adjust (5);
                    break;
                } case 4 :
                {
                    brightnessControllerV4.adjust (- 5);
                    break;
                } case 5 :
                {
                    colourControllerV4.adjust (5);
                    break;
                } case 6 :
                {
                    colourControllerV4.adjust (- 5);
                    break;
                } case 7 :
                {
                    resetFunctionV4.onReset ();
                    break;
                } default :
                System.out.println ("Shutting down...........");
                break OUTER;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_29373490_1_25
15725370_29538007_1_26
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max) {
                max = count;
                temp = array [i];
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------

public static int mode (int [] arr) {
    int max = 0;
    int maxFreq = 0;
    Arrays.sort (arr);
    max = arr [arr.length - 1];
    int [] count = new int [max + 1];
    for (int i = 0;
    i < arr.length; i ++) {
        count [arr [i]] ++;
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] > maxFreq) {
            maxFreq = count [i];
        }
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] == maxFreq) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_29373490_1_25
15725370_30951439_1_16
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max) {
                max = count;
                temp = array [i];
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------

public int mode (int [] array) {
    int mode = array [0];
    int maxCount = 0;
    for (int i = 0;
    i < array.length; i ++) {
        int value = array [i];
        int count = 1;
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == value) count ++;

            if (count > maxCount) {
                mode = value;
                maxCount = count;
            }
        }
    }
    return mode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_29373490_1_25
15725370_45178487_1_23
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max) {
                max = count;
                temp = array [i];
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------

int mode (int n, int [] ar) {
    int personalMax = 1, totalMax = 0, maxNum = 0;
    for (int i = 0;
    i < n - 1; i ++) {
        if (ar [i] == ar [i + 1]) {
            personalMax ++;
            if (totalMax < personalMax) {
                totalMax = personalMax;
                maxNum = ar [i];
            }
        } else {
            personalMax = 1;
        }
    }
    return maxNum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_29538007_1_26
15725370_30951439_1_16
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (int [] arr) {
    int max = 0;
    int maxFreq = 0;
    Arrays.sort (arr);
    max = arr [arr.length - 1];
    int [] count = new int [max + 1];
    for (int i = 0;
    i < arr.length; i ++) {
        count [arr [i]] ++;
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] > maxFreq) {
            maxFreq = count [i];
        }
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] == maxFreq) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------

public int mode (int [] array) {
    int mode = array [0];
    int maxCount = 0;
    for (int i = 0;
    i < array.length; i ++) {
        int value = array [i];
        int count = 1;
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == value) count ++;

            if (count > maxCount) {
                mode = value;
                maxCount = count;
            }
        }
    }
    return mode;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_29538007_1_26
15725370_45178487_1_23
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (int [] arr) {
    int max = 0;
    int maxFreq = 0;
    Arrays.sort (arr);
    max = arr [arr.length - 1];
    int [] count = new int [max + 1];
    for (int i = 0;
    i < arr.length; i ++) {
        count [arr [i]] ++;
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] > maxFreq) {
            maxFreq = count [i];
        }
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] == maxFreq) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------

int mode (int n, int [] ar) {
    int personalMax = 1, totalMax = 0, maxNum = 0;
    for (int i = 0;
    i < n - 1; i ++) {
        if (ar [i] == ar [i + 1]) {
            personalMax ++;
            if (totalMax < personalMax) {
                totalMax = personalMax;
                maxNum = ar [i];
            }
        } else {
            personalMax = 1;
        }
    }
    return maxNum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_29538007_1_26
15725370_51212994_6_27
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public static int mode (int [] arr) {
    int max = 0;
    int maxFreq = 0;
    Arrays.sort (arr);
    max = arr [arr.length - 1];
    int [] count = new int [max + 1];
    for (int i = 0;
    i < arr.length; i ++) {
        count [arr [i]] ++;
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] > maxFreq) {
            maxFreq = count [i];
        }
    }
    for (int i = 0;
    i < count.length; i ++) {
        if (count [i] == maxFreq) {
            return i;
        }
    }
    return - 1;
}
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max || temp > array [i] && count == max) {
                temp = array [i];
                max = count;
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_30951439_1_16
15725370_45178487_1_23
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public int mode (int [] array) {
    int mode = array [0];
    int maxCount = 0;
    for (int i = 0;
    i < array.length; i ++) {
        int value = array [i];
        int count = 1;
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == value) count ++;

            if (count > maxCount) {
                mode = value;
                maxCount = count;
            }
        }
    }
    return mode;
}
----------------------------------------

int mode (int n, int [] ar) {
    int personalMax = 1, totalMax = 0, maxNum = 0;
    for (int i = 0;
    i < n - 1; i ++) {
        if (ar [i] == ar [i + 1]) {
            personalMax ++;
            if (totalMax < personalMax) {
                totalMax = personalMax;
                maxNum = ar [i];
            }
        } else {
            personalMax = 1;
        }
    }
    return maxNum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_30951439_1_16
15725370_51212994_6_27
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

public int mode (int [] array) {
    int mode = array [0];
    int maxCount = 0;
    for (int i = 0;
    i < array.length; i ++) {
        int value = array [i];
        int count = 1;
        for (int j = 0;
        j < array.length; j ++) {
            if (array [j] == value) count ++;

            if (count > maxCount) {
                mode = value;
                maxCount = count;
            }
        }
    }
    return mode;
}
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max || temp > array [i] && count == max) {
                temp = array [i];
                max = count;
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15725370_45178487_1_23
15725370_51212994_6_27
Title: Write a mode method in Java to find the most frequently occurring element in an array 
----------------------------------------

int mode (int n, int [] ar) {
    int personalMax = 1, totalMax = 0, maxNum = 0;
    for (int i = 0;
    i < n - 1; i ++) {
        if (ar [i] == ar [i + 1]) {
            personalMax ++;
            if (totalMax < personalMax) {
                totalMax = personalMax;
                maxNum = ar [i];
            }
        } else {
            personalMax = 1;
        }
    }
    return maxNum;
}
----------------------------------------

public static int mode (int [] array) {
    HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
    int max = 1;
    int temp = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (hm.get (array [i]) != null) {
            int count = hm.get (array [i]);
            count ++;
            hm.put (array [i], count);
            if (count > max || temp > array [i] && count == max) {
                temp = array [i];
                max = count;
            }
        } else hm.put (array [i], 1);

    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15726233_15726452_1_22
15726233_15726465_1_32
Title: Using references (temporary variables) to manipulate LinkedList? 
----------------------------------------

public void deleteItem (int target) {
    int index = 0;
    CarNode item = head;
    CarNode prev = null;
    while (item != null) {
        if (index == target) {
            if (prev == null) {
                head = item.getNode ();
                return;
            } else {
                prev.setNode (item.getNode ());
                return;
            }
        }
        prev = item;
        item = item.getNode ();
        index ++;
    }
}
----------------------------------------

public void deleteItem (int target) {
    int index = 0;
    CarNode item = head;
    CarNode next = null;
    CarNode previous = null;
    while (item != null) {
        if (item.node != null) next = item.node.node;
        else next = null;

        if (index == target) {
            previous.setNode (next);
            break;
        }
        previous = item;
        item = item.node;
        index ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15727754_15727791_1_12
15727754_15727805_1_12
Title: How to fix my simple Java recursion method? 
----------------------------------------

public static void sumReverse (int n) {
    if (n == 1) {
        System.out.print (n);
        return;
    } else if (n > 0) {
        System.out.print (n + " + " + (n - 1));
    } else return;

    sumReverse (-- n);
}
----------------------------------------

public static void sumReverse (int n) {
    if (n == 1) {
        System.out.print (n);
        return;
    } else if (n > 0) {
        System.out.print (n + " + ");
    }

    sumReverse (n - 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15727754_15727791_1_12
15727754_15727817_15_27
Title: How to fix my simple Java recursion method? 
----------------------------------------

public static void sumReverse (int n) {
    if (n == 1) {
        System.out.print (n);
        return;
    } else if (n > 0) {
        System.out.print (n + " + " + (n - 1));
    } else return;

    sumReverse (-- n);
}
----------------------------------------

public static String sumReverse (int n) {
    int x = n;
    if (x == 1) {
        s = "1" + s;
        return s;
    } else if (x > 0) {
        s = "+" + Integer.toString (x) + s;
        sumReverse (x - 1);
    }

    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15727754_15727805_1_12
15727754_15727817_15_27
Title: How to fix my simple Java recursion method? 
----------------------------------------

public static void sumReverse (int n) {
    if (n == 1) {
        System.out.print (n);
        return;
    } else if (n > 0) {
        System.out.print (n + " + ");
    }

    sumReverse (n - 1);
}
----------------------------------------

public static String sumReverse (int n) {
    int x = n;
    if (x == 1) {
        s = "1" + s;
        return s;
    } else if (x > 0) {
        s = "+" + Integer.toString (x) + s;
        sumReverse (x - 1);
    }

    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15728356_15728603_3_20
15728356_15729033_5_56
Title: Wild Card Search in Java 
----------------------------------------

public boolean compare (String s1, String s2) {
    String s = "";
    try {
        s = s1.substring (s1.indexOf ('a') + 2, s1.indexOf ('b') - 1);
    } catch (IndexOutOfBoundsException e) {
        return false;
    }
    System.out.println ("string: " + s);
    if (s2.substring (2, 3).equals ("*") && s.length () >= 1) {
        return true;
    } else return false;

}
----------------------------------------

public boolean compare (String str, String regex) {
    if (regex == null || str == null) {
        return false;
    }
    if (regex.equals ("*")) {
        return true;
    }
    if (regex.equals ("?") && str.length () == 1) {
        return true;
    }
    if (! regex.contains ("*") && ! regex.contains ("?")) {
        return str.equals (regex);
    }
    String token = null;
    if (regex.contains ("*")) {
        token = "*";
    }
    if (regex.contains ("?")) {
        token = "?";
    }
    if (token != null) {
        String before = regex.substring (0, regex.indexOf (token));
        String after = regex.substring (regex.indexOf (token) + 1, regex.length ());
        boolean bmatches = true;
        if (before != null && before.length () != 0) {
            if (str.indexOf (before) == 0) {
                bmatches = true;
            } else {
                bmatches = false;
            }
        }
        boolean amatches = true;
        if (after != null && after.length () != 0) {
            if (str.indexOf (after) == (str.length () - after.length ())) {
                amatches = true;
            } else {
                amatches = false;
            }
        }
        return bmatches && amatches;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15730105_15730293_24_40
15730105_15730293_44_59
Title: What does synchronized(class reference) do? 
----------------------------------------

public void run () {
    try {
        synchronized (SyncTest.class) {
            System.out.println ("Task 1 Sleeping ");
            Thread.sleep (500);
            SyncTest.valueA = "One";
            System.out.println ("T1 A: " + SyncTest.valueA);
        }
        synchronized (SyncTest.instance) {
            Thread.sleep (1000);
            SyncTest.instance.valueB = "Two";
            System.out.println ("T1 B: " + SyncTest.instance.valueB);
        }
    } catch (InterruptedException interrupt) {
    }
    System.out.println ("Task 1 Finished ");
}
----------------------------------------

public void run () {
    System.out.println ("Task 2 Started");
    try {
        Thread.sleep (1000);
        synchronized (SyncTest.class) {
            SyncTest.instance.valueB = "Four";
            System.out.println ("T2 B: " + SyncTest.instance.valueB);
            Thread.sleep (5000);
            SyncTest.valueA = "Three";
            System.out.println ("T2 A: " + SyncTest.valueA);
        }
    } catch (InterruptedException interrupt) {
    }
    System.out.println ("Task 2 Finished");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15733865_15734326_1_15
15733865_15734327_1_19
Title: "Creating static method to compare two strings char by char. Return true if all the letters in string a are in string b. Else then return false" 
----------------------------------------

public static boolean checkWord (String a, String b) {
    int j;
    for (int i = 0;
    i < a.length (); i ++) {
        j = 0;
        while (j < b.length ()) {
            if (a.charAt (i) == b.charAt (j)) break;

            j ++;
        }
        if (j == b.length ()) return false;

    }
    return true;
}
----------------------------------------

public static boolean checkWord (String a, String b) {
    int x = 0;
    while (x < a.length ()) {
        int y = 0;
        while (y < b.length ()) {
            System.out.println ("x:" + x + " y:" + y + " a.charAt(x)==b.charAt(y):" + (a.charAt (x) == b.charAt (y)));
            if (a.charAt (x) == b.charAt (y)) {
                break;
            } else {
                y ++;
            }
            if (y == b.length ()) {
                return false;
            }
        }
        x ++;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15735023_15735183_1_25
15735023_15735240_6_23
Title: Need to output all prime numbers 
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter a positive number: ");
    Scanner scanner = new Scanner (System.in);
    int number = scanner.nextInt ();
    int count;
    for (int i = 2;
    i <= (number); i ++) {
        count = 0;
        while (number % i == 0) {
            number /= i;
            count ++;
            if (count == 0) {
                continue;
            }
            System.out.print (i + " ");
        }
    }
}
----------------------------------------

public static void main (String [] args) throws java.lang.Exception {
    System.out.print ("Enter a positive number: ");
    Scanner scanner = new Scanner (System.in);
    int number = scanner.nextInt ();
    int divisor = 2;
    while (number != 1) {
        if (number % divisor == 0) {
            System.out.println (divisor + " ");
            number /= divisor;
        } else {
            divisor ++;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15744827_15744984_4_38
15744827_18751504_9_22
Title: Program in java that reads data from a text file 
----------------------------------------

public static void main (String [] args) {
    File file = new File ("C:/Users/hussain.a/Desktop/test.txt");
    StringBuilder line = new StringBuilder ();
    BufferedReader reader = null;
    try {
        reader = new BufferedReader (new FileReader (file));
        String text = null;
        while ((text = reader.readLine ()) != null) {
            line.append (text).append (System.getProperty ("line.separator"));
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    } finally {
        try {
            if (reader != null) {
                reader.close ();
            }
        } catch (IOException e) {
            e.printStackTrace ();
        }
    }
    System.out.println (line.toString ());
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    File file = new File ("test.txt");
    Scanner scanner = new Scanner (file);
    List < Result > results = new ArrayList < Result > ();
    while (scanner.hasNextLine ()) {
        String currentLine = scanner.nextLine ();
        String [] resultArray = currentLine.split (" ");
        results.add (new Result (resultArray [0], resultArray [1], resultArray [2]));
    }
    scanner.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15750288_15750457_3_21
15750288_40930197_1_16
Title: Move 0's to end of array 
----------------------------------------

public static void main (String [] args) {
    int [] elements = new int [] {1, 2, 3, 4, 0, 5, 6, 0, 7, 8, 9};
    int swapCount = 0;
    int lastIndex = elements.length - 1;
    for (int i = lastIndex - 1;
    i >= 0; i --) {
        if (elements [i] == 0) {
            elements [i] = elements [lastIndex - swapCount];
            elements [lastIndex - swapCount] = 0;
            swapCount ++;
        }
    }
    for (int i : elements) {
        System.out.print (i + ", ");
    }
}
----------------------------------------

public static void main (String args []) {
    int [] array = {1, 0, 3, 0, 0, 4, 0, 6, 0, 9};
    int count = - 1;
    for (int i = 0;
    i < array.length; i ++) {
        if (array [i] != 0) array [++ count] = array [i];

    }
    while (count < array.length - 1) array [++ count] = 0;

    for (int i = 0;
    i < array.length; i ++) {
        System.out.print (array [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15750288_15750457_3_21
15750288_43264190_54_62
Title: Move 0's to end of array 
----------------------------------------

public static void main (String [] args) {
    int [] elements = new int [] {1, 2, 3, 4, 0, 5, 6, 0, 7, 8, 9};
    int swapCount = 0;
    int lastIndex = elements.length - 1;
    for (int i = lastIndex - 1;
    i >= 0; i --) {
        if (elements [i] == 0) {
            elements [i] = elements [lastIndex - swapCount];
            elements [lastIndex - swapCount] = 0;
            swapCount ++;
        }
    }
    for (int i : elements) {
        System.out.print (i + ", ");
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    ShiftZeroesToBack sztb = new ShiftZeroesToBack ();
    System.out.print ("Enter Size of Array\t");
    int size = scanner.nextInt ();
    int [] input = sztb.input (scanner, size);
    sztb.shiftZeroes (input);
    sztb.print ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15750288_15750457_3_21
15750288_49580161_1_16
Title: Move 0's to end of array 
----------------------------------------

public static void main (String [] args) {
    int [] elements = new int [] {1, 2, 3, 4, 0, 5, 6, 0, 7, 8, 9};
    int swapCount = 0;
    int lastIndex = elements.length - 1;
    for (int i = lastIndex - 1;
    i >= 0; i --) {
        if (elements [i] == 0) {
            elements [i] = elements [lastIndex - swapCount];
            elements [lastIndex - swapCount] = 0;
            swapCount ++;
        }
    }
    for (int i : elements) {
        System.out.print (i + ", ");
    }
}
----------------------------------------

public static void main (String [] args) {
    Integer a [] = {10, 0, 0, 0, 6, 0, 0, 0, 70, 6, 7, 8, 0, 4, 0};
    int flag = 0;
    int count = 0;
    for (int i = 0;
    i < a.length; i ++) {
        if (a [i] == 0) {
            flag = 1;
            count ++;
        } else if (a [i] != 0) {
            flag = 0;
        }

        if (flag == 0 && count > 0 && a [i] != 0) {
            a [i - count] = a [i];
            a [i] = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15750288_40930197_1_16
15750288_43264190_54_62
Title: Move 0's to end of array 
----------------------------------------

public static void main (String args []) {
    int [] array = {1, 0, 3, 0, 0, 4, 0, 6, 0, 9};
    int count = - 1;
    for (int i = 0;
    i < array.length; i ++) {
        if (array [i] != 0) array [++ count] = array [i];

    }
    while (count < array.length - 1) array [++ count] = 0;

    for (int i = 0;
    i < array.length; i ++) {
        System.out.print (array [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    ShiftZeroesToBack sztb = new ShiftZeroesToBack ();
    System.out.print ("Enter Size of Array\t");
    int size = scanner.nextInt ();
    int [] input = sztb.input (scanner, size);
    sztb.shiftZeroes (input);
    sztb.print ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15750288_40930197_1_16
15750288_49580161_1_16
Title: Move 0's to end of array 
----------------------------------------

public static void main (String args []) {
    int [] array = {1, 0, 3, 0, 0, 4, 0, 6, 0, 9};
    int count = - 1;
    for (int i = 0;
    i < array.length; i ++) {
        if (array [i] != 0) array [++ count] = array [i];

    }
    while (count < array.length - 1) array [++ count] = 0;

    for (int i = 0;
    i < array.length; i ++) {
        System.out.print (array [i] + " ");
    }
}
----------------------------------------

public static void main (String [] args) {
    Integer a [] = {10, 0, 0, 0, 6, 0, 0, 0, 70, 6, 7, 8, 0, 4, 0};
    int flag = 0;
    int count = 0;
    for (int i = 0;
    i < a.length; i ++) {
        if (a [i] == 0) {
            flag = 1;
            count ++;
        } else if (a [i] != 0) {
            flag = 0;
        }

        if (flag == 0 && count > 0 && a [i] != 0) {
            a [i - count] = a [i];
            a [i] = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15750288_43264190_54_62
15750288_49580161_1_16
Title: Move 0's to end of array 
----------------------------------------

public static void main (String [] args) {
    Scanner scanner = new Scanner (System.in);
    ShiftZeroesToBack sztb = new ShiftZeroesToBack ();
    System.out.print ("Enter Size of Array\t");
    int size = scanner.nextInt ();
    int [] input = sztb.input (scanner, size);
    sztb.shiftZeroes (input);
    sztb.print ();
}
----------------------------------------

public static void main (String [] args) {
    Integer a [] = {10, 0, 0, 0, 6, 0, 0, 0, 70, 6, 7, 8, 0, 4, 0};
    int flag = 0;
    int count = 0;
    for (int i = 0;
    i < a.length; i ++) {
        if (a [i] == 0) {
            flag = 1;
            count ++;
        } else if (a [i] != 0) {
            flag = 0;
        }

        if (flag == 0 && count > 0 && a [i] != 0) {
            a [i - count] = a [i];
            a [i] = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15753536_15753837_22_35
15753536_15753876_34_62
Title: Parent JPanel - How to listen to the events generated by components of a Child JPanel? 
----------------------------------------

public static void main (String [] args) {
    JFrame frame = new JFrame ("Radio buttons");
    frame.getContentPane ().setLayout (new FlowLayout ());
    frame.setSize (400, 100);
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    AnActionListener an = new AnActionListener ();
    RadioListener rl = new RadioListener ();
    rl.setActionListener (an);
    frame.getContentPane ().add (rl);
    frame.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            try {
                UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            }
            ProxyActionListener pal = new ProxyActionListener ();
            pal.addActionListener (new ActionListener () {
                @Override
                public void actionPerformed (ActionEvent e) {
                    JRadioButton jrb = (JRadioButton) e.getSource ();
                    Integer id = (Integer) jrb.getClientProperty (ProxyActionListener.id);
                    System.out.println ("Proxy- id " + id);
                }}

            );
            JFrame frame = new JFrame ("Radio buttons");
            frame.getContentPane ().setLayout (new FlowLayout ());
            frame.setSize (400, 100);
            frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            frame.getContentPane ().add (pal);
            frame.setVisible (true);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15759062_15759106_1_14
15759062_15759212_1_22
Title: Getting string representations from a hashtable using a toString 
----------------------------------------

@Override
public String toString () {
    final StringBuilder builder = new StringBuilder ();
    for (final Map.Entry < String, String > entry : myTable.entrySet ()) {
        builder.append (entry.getKey ());
        builder.append ("=>");
        builder.append (entry.getValue ());
        builder.append ("\n");
    }
    return builder.toString ();
}
----------------------------------------

public synchronized String toString () {
    int max = size () - 1;
    if (max == - 1) return "{}";

    StringBuilder sb = new StringBuilder ();
    Iterator < Map.Entry < K, V > > it = entrySet ().iterator ();
    sb.append ('{');
    for (int i = 0;
    ; i ++) {
        Map.Entry < K, V > e = it.next ();
        K key = e.getKey ();
        V value = e.getValue ();
        sb.append (key == this ? "(this Map)" : key.toString ());
        sb.append ('=');
        sb.append (value == this ? "(this Map)" : value.toString ());
        if (i == max) return sb.append ('}').toString ();

        sb.append (", ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15762941_15763058_1_21
15762941_15763087_1_24
Title: "Small error I don't know how to fix "" not a statment""" 
----------------------------------------

public static void addNewWord () throws IOException {
    String newWord = JOptionPane.showInputDialog (null, "Enter the word you want to add to your dictionary.");
    String filename = "dictionary.txt";
    File resultsFile = new File (filename);
    Scanner inFile = new Scanner (resultsFile);
    List < String > dictionary = new ArrayList < String > ();
    while (inFile.hasNext ()) {
        String aLineFromFile = inFile.nextLine ();
        if (aLineFromFile.startsWith (newWord)) {
            dictionary.add (aLineFromFile);
            JOptionPane.showMessageDialog (null, "Word already is dictionary");
            addNewWord ();
        } else {
            FileWriter aDictionary = new FileWriter ("dictionary.txt", true);
            PrintWriter out = new PrintWriter (aDictionary);
            out.println (newWord);
            out.close ();
            aDictionary.close ();
        }
    }
}
----------------------------------------

public static void addNewWord () throws IOException {
    String newWord = "";
    newWord = JOptionPane.showInputDialog (null, "Enter the word you want to add to your dictionary.");
    String aLineFromFile = "";
    String filename = "dictionary.txt";
    ArrayList < String > dictionary = new ArrayList < String > ();
    File resultsFile = new File (filename);
    Scanner inFile = new Scanner (resultsFile);
    while (inFile.hasNext ()) {
        aLineFromFile = inFile.nextLine ();
        if (aLineFromFile.startsWith (newWord)) {
            dictionary.add (aLineFromFile);
            JOptionPane.showMessageDialog (null, "Word already is dictionary");
            addNewWord ();
        } else {
            FileWriter aDictionary = new FileWriter ("dictionary.txt", true);
            PrintWriter out = new PrintWriter (aDictionary);
            out.println (newWord);
            out.close ();
            aDictionary.close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15762941_15763087_1_24
15762941_15763124_1_23
Title: "Small error I don't know how to fix "" not a statment""" 
----------------------------------------

public static void addNewWord () throws IOException {
    String newWord = "";
    newWord = JOptionPane.showInputDialog (null, "Enter the word you want to add to your dictionary.");
    String aLineFromFile = "";
    String filename = "dictionary.txt";
    ArrayList < String > dictionary = new ArrayList < String > ();
    File resultsFile = new File (filename);
    Scanner inFile = new Scanner (resultsFile);
    while (inFile.hasNext ()) {
        aLineFromFile = inFile.nextLine ();
        if (aLineFromFile.startsWith (newWord)) {
            dictionary.add (aLineFromFile);
            JOptionPane.showMessageDialog (null, "Word already is dictionary");
            addNewWord ();
        } else {
            FileWriter aDictionary = new FileWriter ("dictionary.txt", true);
            PrintWriter out = new PrintWriter (aDictionary);
            out.println (newWord);
            out.close ();
            aDictionary.close ();
        }
    }
}
----------------------------------------

public static void addNewWord () throws IOException {
    String newWord;
    newWord = JOptionPane.showInputDialog (null, "Enter the word you want to add to your dictionary.");
    String aLineFromFile = "";
    String filename = "dictionary.txt";
    ArrayList < String > dictionary = new ArrayList < String > ();
    File resultsFile = new File (filename);
    Scanner inFile = new Scanner (resultsFile);
    while (inFile.hasNext ()) {
        aLineFromFile = inFile.nextLine ();
        if (aLineFromFile.startsWith (newWord)) {
            dictionary.add (aLineFromFile);
            JOptionPane.showMessageDialog (null, "Word already is dictionary");
            addNewWord ();
        } else {
            FileWriter aDictionary = new FileWriter ("dictionary.txt", true);
            PrintWriter out = new PrintWriter (aDictionary);
            out.println (newWord);
            out.close ();
            aDictionary.close ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15762941_15763087_1_24
15762941_15763142_1_29
Title: "Small error I don't know how to fix "" not a statment""" 
----------------------------------------

public static void addNewWord () throws IOException {
    String newWord = "";
    newWord = JOptionPane.showInputDialog (null, "Enter the word you want to add to your dictionary.");
    String aLineFromFile = "";
    String filename = "dictionary.txt";
    ArrayList < String > dictionary = new ArrayList < String > ();
    File resultsFile = new File (filename);
    Scanner inFile = new Scanner (resultsFile);
    while (inFile.hasNext ()) {
        aLineFromFile = inFile.nextLine ();
        if (aLineFromFile.startsWith (newWord)) {
            dictionary.add (aLineFromFile);
            JOptionPane.showMessageDialog (null, "Word already is dictionary");
            addNewWord ();
        } else {
            FileWriter aDictionary = new FileWriter ("dictionary.txt", true);
            PrintWriter out = new PrintWriter (aDictionary);
            out.println (newWord);
            out.close ();
            aDictionary.close ();
        }
    }
}
----------------------------------------

public static void addNewWord () throws IOException {
    String newWord = "";
    newWord = JOptionPane.showInputDialog (null, "Enter the word you want to add to your dictionary.");
    String aLineFromFile = "";
    String filename = "dictionary.txt";
    ArrayList < String > dictionary = new ArrayList < String > ();
    File resultsFile = new File (filename);
    Scanner inFile = new Scanner (resultsFile);
    while (inFile.hasNext ()) {
        aLineFromFile = inFile.nextLine ();
        if (aLineFromFile.startsWith (newWord)) {
            dictionary.add (aLineFromFile);
            JOptionPane.showMessageDialog (null, "Word already is dictionary");
            addNewWord ();
        } else {
            FileWriter aDictionary = new FileWriter ("dictionary.txt", true);
            PrintWriter out = new PrintWriter (aDictionary);
            out.println (newWord);
            out.close ();
            aDictionary.close ();
        }
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15768194_15768273_3_24
15768194_15768492_2_16
Title: Error on Declaring Double 
----------------------------------------

public static void main (String...args) {
    double a = 1;
    double b = 1;
    double sum = 0;
    double evenSum = 0;
    double target = 4000000;
    while (sum < target) {
        sum = a + b;
        a = b;
        b = sum;
        if (sum % 2 == 0) evenSum += sum;

    }
    System.out.println (evenSum);
}
----------------------------------------

public static void main (String [] args) {
    double a = 1;
    double b = 1;
    double sum = 0;
    double evenSum = 0;
    double target = 4000000;
    while (sum < target) {
        sum = a + b;
        a = b;
        b = sum;
        if (sum % 2 == 0) evenSum += sum;

    }
    System.out.println (evenSum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15777821_34092666_29_37
15777821_42327288_31_39
Title: How can I pixelate a jpg with java? 
----------------------------------------

public static BufferedImage getCroppedImage (BufferedImage image, int startx, int starty, int width, int height) {
    if (startx < 0) startx = 0;

    if (starty < 0) starty = 0;

    if (startx > image.getWidth ()) startx = image.getWidth ();

    if (starty > image.getHeight ()) starty = image.getHeight ();

    if (startx + width > image.getWidth ()) width = image.getWidth () - startx;

    if (starty + height > image.getHeight ()) height = image.getHeight () - starty;

    return image.getSubimage (startx, starty, width, height);
}
----------------------------------------

public static BufferedImage getCroppedImage (BufferedImage image, int startx, int starty, int width, int height) {
    if (startx < 0) startx = 0;

    if (starty < 0) starty = 0;

    if (startx > image.getWidth ()) startx = image.getWidth ();

    if (starty > image.getHeight ()) starty = image.getHeight ();

    if (startx + width > image.getWidth ()) width = image.getWidth () - startx;

    if (starty + height > image.getHeight ()) height = image.getHeight () - starty;

    return image.getSubimage (startx, starty, width, height);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15777821_34092666_39_49
15777821_42327288_41_51
Title: How can I pixelate a jpg with java? 
----------------------------------------

public static Color getDominantColor (BufferedImage image) {
    Map < Integer, Integer > colorCounter = new HashMap < > (100);
    for (int x = 0;
    x < image.getWidth (); x ++) {
        for (int y = 0;
        y < image.getHeight (); y ++) {
            int currentRGB = image.getRGB (x, y);
            int count = colorCounter.getOrDefault (currentRGB, 0);
            colorCounter.put (currentRGB, count + 1);
        }
    }
    return getDominantColor (colorCounter);
}
----------------------------------------

public static Color getDominantColor (BufferedImage image) {
    Map < Integer, Integer > colorCounter = new HashMap < > (100);
    for (int x = 0;
    x < image.getWidth (); x ++) {
        for (int y = 0;
        y < image.getHeight (); y ++) {
            int currentRGB = image.getRGB (x, y);
            int count = colorCounter.getOrDefault (currentRGB, 0);
            colorCounter.put (currentRGB, count + 1);
        }
    }
    return getDominantColor (colorCounter);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15777821_34092666_8_27
15777821_42327288_10_29
Title: How can I pixelate a jpg with java? 
----------------------------------------

public static BufferedImage pixelate (BufferedImage imageToPixelate, int pixelSize) {
    BufferedImage pixelateImage = new BufferedImage (imageToPixelate.getWidth (), imageToPixelate.getHeight (), imageToPixelate.getType ());
    for (int y = 0;
    y < imageToPixelate.getHeight (); y += pixelSize) {
        for (int x = 0;
        x < imageToPixelate.getWidth (); x += pixelSize) {
            BufferedImage croppedImage = getCroppedImage (imageToPixelate, x, y, pixelSize, pixelSize);
            Color dominantColor = getDominantColor (croppedImage);
            for (int yd = y;
            (yd < y + pixelSize) && (yd < pixelateImage.getHeight ()); yd ++) {
                for (int xd = x;
                (xd < x + pixelSize) && (xd < pixelateImage.getWidth ()); xd ++) {
                    pixelateImage.setRGB (xd, yd, dominantColor.getRGB ());
                }
            }
        }
    }
    return pixelateImage;
}
----------------------------------------

public static BufferedImage pixelate (BufferedImage imageToPixelate, int pixelSize) {
    BufferedImage pixelateImage = new BufferedImage (imageToPixelate.getWidth (), imageToPixelate.getHeight (), imageToPixelate.getType ());
    for (int y = 0;
    y < imageToPixelate.getHeight (); y += pixelSize) {
        for (int x = 0;
        x < imageToPixelate.getWidth (); x += pixelSize) {
            BufferedImage croppedImage = getCroppedImage (imageToPixelate, x, y, pixelSize, pixelSize);
            Color dominantColor = getDominantColor (croppedImage);
            for (int yd = y;
            (yd < y + pixelSize) && (yd < pixelateImage.getHeight ()); yd ++) {
                for (int xd = x;
                (xd < x + pixelSize) && (xd < pixelateImage.getWidth ()); xd ++) {
                    pixelateImage.setRGB (xd, yd, dominantColor.getRGB ());
                }
            }
        }
    }
    return pixelateImage;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15779266_15779688_2_16
15779266_15783351_1_11
Title: How to Split a String into Different Variables 
----------------------------------------

public static void main (String [] args) {
    String s = "{U1,U2,U3},{U5,U7},{U4,U6,U8}";
    String [] splitted = s.split ("},");
    for (int i = 0;
    i < splitted.length - 1; i ++) {
        splitted [i] = splitted [i] + "}";
    }
    for (int i = 0;
    i < splitted.length; i ++) {
        System.out.println ("String s" + i + " = " + splitted [i]);
    }
}
----------------------------------------

public static void main (String...args) {
    String input = "{U1,U2,U3},{U5,U7},{U4,U6,U8}";
    Pattern pattern = Pattern.compile ("\\{[^\\}]*\\}");
    Matcher matcher = pattern.matcher (input);
    while (matcher.find ()) {
        String s = matcher.group ();
        System.out.format ("%s\n", s);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15788224_15788337_1_11
15788224_15788343_1_12
Title: Sum of integers in an array 
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            i ++;
        } else {
            sum = sum + nums [i];
        }
    }
    return sum;
}
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 13) {
            sum += nums [i];
        } else {
            i ++;
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15788224_15788337_1_11
15788224_15788384_1_20
Title: Sum of integers in an array 
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            i ++;
        } else {
            sum = sum + nums [i];
        }
    }
    return sum;
}
----------------------------------------

public int sum13 (int [] nums) {
    boolean skip = false;
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            skip = true;
            continue;
        } else {
            if (skip) {
                skip = false;
                continue;
            }
            sum += nums [i];
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15788224_15788343_1_12
15788224_15788384_1_20
Title: Sum of integers in an array 
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 13) {
            sum += nums [i];
        } else {
            i ++;
        }
    }
    return sum;
}
----------------------------------------

public int sum13 (int [] nums) {
    boolean skip = false;
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            skip = true;
            continue;
        } else {
            if (skip) {
                skip = false;
                continue;
            }
            sum += nums [i];
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15788224_15788343_1_12
15788224_15788501_1_13
Title: Sum of integers in an array 
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 13) {
            sum += nums [i];
        } else {
            i ++;
        }
    }
    return sum;
}
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            i ++;
        } else {
            sum += nums [i];
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15788224_15788343_1_12
15788224_15788525_1_12
Title: Sum of integers in an array 
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] != 13) {
            sum += nums [i];
        } else {
            i ++;
        }
    }
    return sum;
}
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            continue;
        } else {
            sum = sum + nums [i];
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15788224_15788384_1_20
15788224_15788501_1_13
Title: Sum of integers in an array 
----------------------------------------

public int sum13 (int [] nums) {
    boolean skip = false;
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            skip = true;
            continue;
        } else {
            if (skip) {
                skip = false;
                continue;
            }
            sum += nums [i];
        }
    }
    return sum;
}
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            i ++;
        } else {
            sum += nums [i];
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15788224_15788384_1_20
15788224_15788525_1_12
Title: Sum of integers in an array 
----------------------------------------

public int sum13 (int [] nums) {
    boolean skip = false;
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            skip = true;
            continue;
        } else {
            if (skip) {
                skip = false;
                continue;
            }
            sum += nums [i];
        }
    }
    return sum;
}
----------------------------------------

public int sum13 (int [] nums) {
    int sum = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 13) {
            continue;
        } else {
            sum = sum + nums [i];
        }
    }
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15804537_15804634_5_17
15804537_15804689_5_20
Title: Better way to generate random numbers 
----------------------------------------

public static void main (String args []) {
    int n = 32;
    ArrayList < Integer > randomNumbersListX = new ArrayList < Integer > ();
    ArrayList < Integer > randomNumbersListY = new ArrayList < Integer > ();
    for (int i = 1;
    i <= n; i ++) {
        randomNumbersListX.add ((int) (Math.random () * 760));
        randomNumbersListY.add ((int) (Math.random () * 555));
    }
    for (int i = 0;
    i < randomNumbersListX.size (); i ++) {
        System.out.println ("rx" + (i + 1) + " " + randomNumbersListX.get (i));
        System.out.println ("ry" + (i + 1) + " " + randomNumbersListY.get (i));
    }
}
----------------------------------------

public static void main (String args []) {
    int [] tempArray = new int [64];
    for (int i = 0;
    i < 64; i ++) {
        if (i % 2 == 0) tempArray [i] = (int) (Math.random () * 760);
        else tempArray [i] = (int) (Math.random () * 555);

    }
    for (int i = 0;
    i < 64; i ++) {
        System.out.print (tempArray [i] + " , ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15807356_15808914_1_36
15807356_15814833_56_90
Title: Sorted Linked List using comparable in Java 
----------------------------------------

public boolean add (Comparable obj) {
    OrderedListNode node = new OrderedListNode (obj);
    if (head.next == tail) {
        head.next = node;
        node.next = tail;
        tail.prev = node;
        return true;
    }
    if (obj.compareTo (head.next.theItem) < 0) {
        node.next = head.next;
        head.next = node;
        return true;
    }
    OrderedListNode current = head.next;
    OrderedListNode previous = head;
    while (current != tail && node.theItem.compareTo (current.theItem) >= 0) {
        previous = current;
        current = current.next;
    }
    previous.next = node;
    node.next = current;
    return true;
}
----------------------------------------

public void add (Comparable obj) {
    OrderedListNode freshNode = new OrderedListNode (obj);
    if (head == null) {
        head = freshNode;
        tail = freshNode;
        return;
    }
    OrderedListNode nodeToTraverse = head;
    while (nodeToTraverse != null) {
        int result = freshNode.theItem.compareTo (nodeToTraverse.theItem);
        if (result > 0) {
            if (nodeToTraverse.next == null) {
                nodeToTraverse.next = freshNode;
                freshNode.prev = nodeToTraverse;
                break;
            } else {
                nodeToTraverse = nodeToTraverse.next;
                continue;
            }
        } else {
            nodeToTraverse.prev.next = freshNode;
            freshNode.prev = nodeToTraverse.prev;
            freshNode.next = nodeToTraverse;
            nodeToTraverse.prev = freshNode;
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15807356_15808914_1_36
15807356_17355298_17_25
Title: Sorted Linked List using comparable in Java 
----------------------------------------

public boolean add (Comparable obj) {
    OrderedListNode node = new OrderedListNode (obj);
    if (head.next == tail) {
        head.next = node;
        node.next = tail;
        tail.prev = node;
        return true;
    }
    if (obj.compareTo (head.next.theItem) < 0) {
        node.next = head.next;
        head.next = node;
        return true;
    }
    OrderedListNode current = head.next;
    OrderedListNode previous = head;
    while (current != tail && node.theItem.compareTo (current.theItem) >= 0) {
        previous = current;
        current = current.next;
    }
    previous.next = node;
    node.next = current;
    return true;
}
----------------------------------------

public void add (int element) {
    if (head == null) {
        head = new Node (element, null);
        manyNodes ++;
    } else {
        head.addNodeAfter (element);
        manyNodes ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15807356_15814833_56_90
15807356_17355298_17_25
Title: Sorted Linked List using comparable in Java 
----------------------------------------

public void add (Comparable obj) {
    OrderedListNode freshNode = new OrderedListNode (obj);
    if (head == null) {
        head = freshNode;
        tail = freshNode;
        return;
    }
    OrderedListNode nodeToTraverse = head;
    while (nodeToTraverse != null) {
        int result = freshNode.theItem.compareTo (nodeToTraverse.theItem);
        if (result > 0) {
            if (nodeToTraverse.next == null) {
                nodeToTraverse.next = freshNode;
                freshNode.prev = nodeToTraverse;
                break;
            } else {
                nodeToTraverse = nodeToTraverse.next;
                continue;
            }
        } else {
            nodeToTraverse.prev.next = freshNode;
            freshNode.prev = nodeToTraverse.prev;
            freshNode.next = nodeToTraverse;
            nodeToTraverse.prev = freshNode;
            break;
        }
    }
}
----------------------------------------

public void add (int element) {
    if (head == null) {
        head = new Node (element, null);
        manyNodes ++;
    } else {
        head.addNodeAfter (element);
        manyNodes ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15807356_15814833_98_113
15807356_17355298_27_58
Title: Sorted Linked List using comparable in Java 
----------------------------------------

public boolean remove (Comparable obj) {
    OrderedListNode curr = head;
    OrderedListNode prev = head;
    while (curr != null && ! (curr.theItem.compareTo (obj) == 0)) {
        prev = curr;
        curr = curr.next;
    }
    if (curr == null) return false;
    else {
        prev.next = curr.next;
        curr = null;
        return true;
    }
}
----------------------------------------

public boolean remove (int target) {
    boolean removed = false;
    Node cursor = head;
    Node precursor;
    if (head == null) {
        throw new NoSuchElementException ("Cannot remove from empty list");
    }
    if (head.getInfo () == target) {
        head = head.getNodeAfter ();
        manyNodes --;
        removed = true;
    } else {
        precursor = cursor;
        cursor = cursor.getNodeAfter ();
        while ((cursor != null) && (! removed)) {
            if (cursor.getInfo () == target) {
                precursor.removeNodeAfter ();
                manyNodes --;
                removed = true;
            } else {
                precursor = cursor;
                cursor = cursor.getNodeAfter ();
            }
        }
    }
    return removed;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15816693_15817292_1_15
15816693_15818035_1_12
Title: Change text between tags to uppercase java 
----------------------------------------

public List < String > tags (String xml) {
    List < String > list = new ArrayList < String > ();
    String startTag = "<upcase>";
    String endTag = "</upcase>";
    int sPos = xml.indexOf (startTag);
    while (sPos >= 0) {
        int ePos = xml.indexOf (endTag, sPos + startTag.length ());
        if (ePos >= 0) {
            list.add (xml.substring (sPos + startTag.length (), ePos).toUpperCase ());
        }
        sPos = xml.indexOf (startTag, ePos + endTag.length ());
    }
    return list;
}
----------------------------------------

public static String tags (String xml) {
    final String upcaseTagRegex = "<upcase>(.*?)</upcase>";
    String result = xml;
    Pattern pattern = Pattern.compile (upcaseTagRegex, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
    Matcher matcher = pattern.matcher (xml);
    while (matcher.find ()) {
        result = result.replaceFirst (upcaseTagRegex, matcher.group (1).toUpperCase ());
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15816878_30314253_2_27
15816878_33959593_3_28
Title: Palindrome coding 
----------------------------------------

public static void main (String [] args) {
    try {
        String s = args [0];
        int i = args [0].length () - 1;
        int i2 = args [0].length ();
        char [] chrs = new char [i2];
        for (int i3 = i;
        i3 > - 1; i3 --) {
            chrs [i2 - i3 - 1] = (s.charAt (i3));
        }
        String s2 = String.valueOf (chrs);
        if (s2.equals (s)) {
            System.out.println (s + " is a palindrome!");
        } else {
            System.out.println (s + " is not a palindrome");
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        System.out.println ("Please enter at least one letter or digit!");
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    int right = 0;
    int left = 1;
    System.out.println ("Please enter a word: ");
    String word = scan.next ();
    int word_length = word.length ();
    while (word.charAt (right) == word.charAt (word_length - left) && left < (word_length / 2)) {
        left ++;
        right ++;
    }
    if (word.charAt (right) == word.charAt (word_length - left)) {
        System.out.println ("'" + word + "'" + " is a palindrome!");
    } else {
        System.out.println ("'" + word + "'" + " is NOT a palindrome.");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15816878_30314253_2_27
15816878_39398857_4_45
Title: Palindrome coding 
----------------------------------------

public static void main (String [] args) {
    try {
        String s = args [0];
        int i = args [0].length () - 1;
        int i2 = args [0].length ();
        char [] chrs = new char [i2];
        for (int i3 = i;
        i3 > - 1; i3 --) {
            chrs [i2 - i3 - 1] = (s.charAt (i3));
        }
        String s2 = String.valueOf (chrs);
        if (s2.equals (s)) {
            System.out.println (s + " is a palindrome!");
        } else {
            System.out.println (s + " is not a palindrome");
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        System.out.println ("Please enter at least one letter or digit!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int startIndex = 0;
    int lastIndex = str.length () - 1;
    boolean result = true;
    while (true) {
        if (startIndex >= lastIndex) {
            break;
        }
        char first = str.charAt (startIndex);
        char last = str.charAt (lastIndex);
        if (first != last) {
            result = false;
            break;
        }
        startIndex ++;
        lastIndex --;
    }
    if (result) {
        System.out.println ("Yes! It was");
    } else {
        System.out.println ("Nope! it wasn't");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15816878_33959593_3_28
15816878_39398857_4_45
Title: Palindrome coding 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    int right = 0;
    int left = 1;
    System.out.println ("Please enter a word: ");
    String word = scan.next ();
    int word_length = word.length ();
    while (word.charAt (right) == word.charAt (word_length - left) && left < (word_length / 2)) {
        left ++;
        right ++;
    }
    if (word.charAt (right) == word.charAt (word_length - left)) {
        System.out.println ("'" + word + "'" + " is a palindrome!");
    } else {
        System.out.println ("'" + word + "'" + " is NOT a palindrome.");
    }
}
----------------------------------------

public static void main (String [] args) {
    int startIndex = 0;
    int lastIndex = str.length () - 1;
    boolean result = true;
    while (true) {
        if (startIndex >= lastIndex) {
            break;
        }
        char first = str.charAt (startIndex);
        char last = str.charAt (lastIndex);
        if (first != last) {
            result = false;
            break;
        }
        startIndex ++;
        lastIndex --;
    }
    if (result) {
        System.out.println ("Yes! It was");
    } else {
        System.out.println ("Nope! it wasn't");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15824928_15824977_17_26
15824928_15825500_26_37
Title: Deck of Cards issue -Java 
----------------------------------------

public void shuffle () {
    int i = 0;
    while (i < 52) {
        int rando = (int) (5.0 * (Math.random ()));
        Cards temp = deck [rando];
        deck [rando] = deck [i];
        deck [i] = temp;
        i ++;
    }
}
----------------------------------------

public void shuffle () {
    int i = 0;
    while (i < 52) {
        int rando = rand.nextInt (52);
        Cards temp = Deck [rando];
        Deck [rando] = Deck [i];
        Deck [i] = temp;
        i ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15824928_15824977_5_15
15824928_15825500_11_24
Title: Deck of Cards issue -Java 
----------------------------------------

public DeckOfCards () {
    deck = new Cards [52];
    int n = 0;
    for (int i = 1;
    i <= 13; i ++) {
        for (int j = 1;
        j <= 4; j ++) {
            deck [n] = new Cards (i, j);
            n = n + 1;
        }
    }
    cardHold = - 1;
}
----------------------------------------

public DeckOfCards () {
    rand = new Random ();
    Date d = new Date ();
    rand.setSeed (d.getTime ());
    Deck = new Cards [52];
    int n = 0;
    for (int i = 1;
    i <= 13; i ++) {
        for (int j = 1;
        j <= 4; j ++) {
            Deck [n] = new Cards (i, j);
            n = n + 1;
        }
    }
    cardHold = 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15826366_15826429_1_17
15826366_15826511_1_12
Title: Skip execution if exception thrown 
----------------------------------------

private void loadLevel (URL url) {
    Scanner in = null;
    try {
        in = new Scanner (new BufferedReader (new InputStreamReader (url.openStream ())));
        readLine (in);
        in.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

private void loadLevel (URL url) throws IOException, FileNotFoundException {
    Scanner in = null;
    try {
        in = new Scanner (new BufferedReader (new InputStreamReader (url.openStream ())));
        if (in == null) throw new FileNotFoundException ();

        readLine (in);
    } finally {
        in.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15848603_46507557_1_17
15848603_50378924_1_15
Title: Returning vowels 
----------------------------------------

public static boolean isVowel (String x) {
    String y = x.toLowerCase ();
    if (y.equals ("a")) return true;
    else if (y.equals ("e")) return true;
    else if (y.equals ("i")) return true;
    else if (y.equals ("o")) return true;
    else if (y.equals ("u")) return true;
    else return false;

}
----------------------------------------

public static boolean isVowel (String str) {
    if (str.equalsIgnoreCase ("a")) {
        return true;
    } else if (str.equalsIgnoreCase ("e")) {
        return true;
    } else if (str.equalsIgnoreCase ("i")) {
        return true;
    } else if (str.equalsIgnoreCase ("o")) {
        return true;
    } else if (str.equalsIgnoreCase ("u")) {
        return true;
    } else {
        return false;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15849204_37398815_2_23
15849204_45823617_2_18
Title: Removing contiguous spaces in a String without trim() and replaceAll() 
----------------------------------------

public static void main (String args []) {
    String s1 = " world qwer ";
    int count = 0;
    char q [] = new char [9];
    char ch [] = s1.toCharArray ();
    System.out.println (ch);
    for (int i = 0;
    i <= ch.length - 1; i ++) {
        int j = ch [i];
        if (j == 32) {
            continue;
        } else q [count] = ch [i];

        count ++;
    }
    System.out.println (q);
}
----------------------------------------

public static void main (String [] args) {
    char space = ' ';
    int ascii = (int) space;
    String str = "    this is    a   string  containing numerous  whitespaces   ";
    char c [] = str.toCharArray ();
    for (int i = 0;
    i < c.length - 1; i ++) {
        if (c [i] == ascii) {
            continue;
        } else {
            System.out.print (c [i]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15857960_15858101_26_36
15857960_15858101_8_20
Title: Prevent multiple asynchronous calls from being in flight simultaneously without blocking 
----------------------------------------

public void run () {
    try {
        Thread.sleep (1000);
    } catch (InterruptedException ex) {
        return;
    }
    done.set (true);
    synchronized (done) {
        done.notifyAll ();
    }
}
----------------------------------------

public void run () {
    while (! done.get ()) {
        System.out.println ("Waiting.");
        synchronized (done) {
            try {
                done.wait ();
            } catch (InterruptedException ex) {
                return;
            }
        }
    }
    System.out.println ("Done!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15858352_15858369_1_10
15858352_15858396_1_15
Title: How to return a new ArrayList? 
----------------------------------------

public ArrayList < Student > studentInGrade (String category) {
    ArrayList < Student > gradeCategory = new ArrayList < Student > ();
    for (DVD stu : studentList) {
        if (stu.GetCategory ().toUpperCase ().contains (category.toUpperCase ())) {
            System.out.println ("Found");
            gradeCategory.add (dvdEntry);
        }
    }
    return gradeCategory;
}
----------------------------------------

public ArrayList < Student > studentInGrade (String category) {
    ArrayList < Student > gradeCategory = new ArrayList < Student > ();
    for (Student stu : studentList) {
        if (stu.GetCategory ().toUpperCase ().contains (category.toUpperCase ())) {
            System.out.println ("Found");
            gradeCategory.add (stu);
        }
    }
    if (gradeCategory.size () > 0) return gradeCategory;
    else {
        System.out.println ("No Category Found");
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15866205_15866464_1_23
15866205_15866576_8_33
Title: java.util.Calendar 
----------------------------------------

public static void main (String [] args) throws IOException {
    final Scanner scanner = new Scanner (System.in);
    final String yearString = scanner.next ();
    final int year;
    try {
        year = Integer.parseInt (yearString);
        if (year < 2000 || year > 3000) throw new NumberFormatException ("Year not in valid range");

    } catch (NumberFormatException ex) {
        throw new RuntimeException ("Failed to parse year.", ex);
    }
    final String monthString = scanner.next ();
    final int month;
    try {
        month = Integer.parseInt (monthString);
        if (month < 1 || month > 12) throw new NumberFormatException ("Month not in valid range");

    } catch (NumberFormatException ex) {
        throw new RuntimeException ("Failed to parse month.", ex);
    }
}
----------------------------------------

public static void main (String [] args) throws ParseException {
    Calendar cal = Calendar.getInstance ();
    DateFormat formatter = DateFormat.getDateTimeInstance (DateFormat.FULL, DateFormat.FULL);
    DateFormat scanner;
    Date date;
    scanner = DateFormat.getDateTimeInstance (DateFormat.SHORT, DateFormat.SHORT);
    date = scanner.parse ("7/4/2013 21:01:05");
    cal.setTime (date);
    System.out.println (formatter.format (cal.getTime ()));
    scanner = DateFormat.getDateTimeInstance (DateFormat.MEDIUM, DateFormat.MEDIUM);
    date = scanner.parse ("7 avr. 2013 21:01:05");
    cal.setTime (date);
    System.out.println (formatter.format (cal.getTime ()));
    scanner = DateFormat.getDateTimeInstance (DateFormat.FULL, DateFormat.FULL);
    date = scanner.parse ("dimanche 7 avril 2013 21 h 01 CEST");
    cal.setTime (date);
    System.out.println (scanner.format (cal.getTime ()));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15867088_15867239_1_11
15867088_15867397_1_13
Title: Java. Restricting the values for a Date 
----------------------------------------

public Rehearsal (int d, int m, int y) {
    if (d < 1 || d > 31) {
        throw new IllegalArgumentException ("Invalid day");
    }
    if (m < 1 || m > 12) {
        throw new IllegalArgumentException ("Invalid month");
    }
    day = d;
    month = m;
    year = y;
}
----------------------------------------

public Rehearsal (int d, int m, int y) {
    try {
        sdf = new SimpleDateFormat ("d-M-yyyy");
        sdf.setLenient (false);
        sdf.parse (d + "-" + m + "-" + y);
    } catch (ParseException e) {
        throw new IllegalArgumentException ();
    }
    day = d;
    month = m;
    year = y;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15873406_47093338_127_180
15873406_47093338_60_124
Title: DataProvider in TestNG to pass data from Excel using Java WebDriver 
----------------------------------------

public String getCellData (String sheetName, int colNum, int rowNum) {
    try {
        if (rowNum <= 0) return "";

        int index = workbook.getSheetIndex (sheetName);
        if (index == - 1) return "";

        sheet = workbook.getSheetAt (index);
        row = sheet.getRow (rowNum - 1);
        if (row == null) return "";

        cell = row.getCell (colNum);
        if (cell == null) return "";

        if (cell.getCellType () == Cell.CELL_TYPE_STRING) return cell.getStringCellValue ();
        else if (cell.getCellType () == Cell.CELL_TYPE_NUMERIC || cell.getCellType () == Cell.CELL_TYPE_FORMULA) {
            String cellText = String.valueOf (cell.getNumericCellValue ());
            if (HSSFDateUtil.isCellDateFormatted (cell)) {
                double d = cell.getNumericCellValue ();
                Calendar cal = Calendar.getInstance ();
                cal.setTime (HSSFDateUtil.getJavaDate (d));
                cellText = (String.valueOf (cal.get (Calendar.YEAR))).substring (2);
                cellText = cal.get (Calendar.MONTH) + 1 + "/" + cal.get (Calendar.DAY_OF_MONTH) + "/" + cellText;
            }
            return cellText;
        } else if (cell.getCellType () == Cell.CELL_TYPE_BLANK) return "";
        else return String.valueOf (cell.getBooleanCellValue ());

    } catch (Exception e) {
        e.printStackTrace ();
        return "row " + rowNum + " or column " + colNum + " does not exist  in xls";
    }
}
----------------------------------------

public String getCellData (String sheetName, String colName, int rowNum) {
    try {
        if (rowNum <= 0) return "";

        int index = workbook.getSheetIndex (sheetName);
        int col_Num = - 1;
        if (index == - 1) return "";

        sheet = workbook.getSheetAt (index);
        row = sheet.getRow (0);
        for (int i = 0;
        i < row.getLastCellNum (); i ++) {
            if (row.getCell (i).getStringCellValue ().trim ().equals (colName.trim ())) col_Num = i;

        }
        if (col_Num == - 1) return "";

        sheet = workbook.getSheetAt (index);
        row = sheet.getRow (rowNum - 1);
        if (row == null) return "";

        cell = row.getCell (col_Num);
        if (cell == null) return "";

        if (cell.getCellType () == Cell.CELL_TYPE_STRING) return cell.getStringCellValue ();
        else if (cell.getCellType () == Cell.CELL_TYPE_NUMERIC || cell.getCellType () == Cell.CELL_TYPE_FORMULA) {
            String cellText = String.valueOf (cell.getNumericCellValue ());
            if (HSSFDateUtil.isCellDateFormatted (cell)) {
                double d = cell.getNumericCellValue ();
                Calendar cal = Calendar.getInstance ();
                cal.setTime (HSSFDateUtil.getJavaDate (d));
                cellText = (String.valueOf (cal.get (Calendar.YEAR))).substring (2);
                cellText = cal.get (Calendar.DAY_OF_MONTH) + "/" + cal.get (Calendar.MONTH) + 1 + "/" + cellText;
            }
            return cellText;
        } else if (cell.getCellType () == Cell.CELL_TYPE_BLANK) return "";
        else return String.valueOf (cell.getBooleanCellValue ());

    } catch (Exception e) {
        e.printStackTrace ();
        return "row " + rowNum + " or column " + colName + " does not exist in xls";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15873523_15874263_7_80
15873523_15874474_15_80
Title: Java Swing GroupLayout does not include the intended 3 buttons. How to fix this? 
----------------------------------------

private static void createWindow () {
    JFrame frame = new JFrame ("PDF Denoiser");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    JPanel panel = new JPanel ();
    GroupLayout layout = new GroupLayout (panel);
    panel.setLayout (layout);
    layout.setAutoCreateGaps (true);
    layout.setAutoCreateContainerGaps (true);
    JLabel label1 = new JLabel ("Image File");
    JLabel label2 = new JLabel ("Destination");
    JLabel label3 = new JLabel ("Preview");
    JTextField current = new JTextField (10);
    JTextField dest = new JTextField (10);
    JTextArea preview = new JTextArea (5, 10);
    final JButton choose1 = new JButton ("Search1");
    final JButton choose2 = new JButton ("Search2");
    final JButton algo1 = new JButton ("MDWM");
    final JButton algo2 = new JButton ("BFMR");
    final JButton algo3 = new JButton ("Mine");
    layout.setHorizontalGroup (layout.createSequentialGroup ().addGroup (layout.createParallelGroup (GroupLayout.Alignment.LEADING).addComponent (label1).addComponent (label2).addComponent (label3)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.LEADING).addComponent (current).addComponent (dest).addComponent (preview)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.LEADING).addComponent (choose1).addComponent (choose2).addComponent (algo1).addComponent (algo2).addComponent (algo3)));
    layout.linkSize (SwingConstants.HORIZONTAL, choose1, choose2, algo1, algo2, algo3);
    layout.setVerticalGroup (layout.createSequentialGroup ().addGroup (layout.createParallelGroup (GroupLayout.Alignment.BASELINE).addComponent (label1).addComponent (current).addComponent (choose1)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.BASELINE).addComponent (label2).addComponent (dest).addComponent (choose2)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.LEADING).addComponent (label3).addComponent (preview).addGroup (layout.createSequentialGroup ().addGroup (layout.createParallelGroup (GroupLayout.Alignment.BASELINE).addComponent (algo1).addComponent (algo2).addComponent (algo3)))));
    frame.setLocationRelativeTo (null);
    frame.add (panel);
    frame.pack ();
    frame.setVisible (true);
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            System.out.println (choose1.getBounds ());
            System.out.println (choose1.getBounds ());
            System.out.println (algo1.getBounds ());
            System.out.println (algo2.getBounds ());
            System.out.println (algo3.getBounds ());
        }}

    );
}
----------------------------------------

private static void createWindow () {
    JFrame frame = new JFrame ("PDF Denoiser");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    JPanel panel = new JPanel ();
    GroupLayout layout = new GroupLayout (panel);
    panel.setLayout (layout);
    layout.setAutoCreateGaps (true);
    layout.setAutoCreateContainerGaps (true);
    JLabel label1 = new JLabel ("Image File");
    JLabel label2 = new JLabel ("Destination");
    JLabel label3 = new JLabel ("Preview");
    JTextField current = new JTextField ();
    JTextField dest = new JTextField ();
    JTextArea preview = new JTextArea ();
    JButton choose1 = new JButton ("Search1");
    JButton choose2 = new JButton ("Search2");
    JButton algo1 = new JButton ("MDWM");
    JButton algo2 = new JButton ("BFMR");
    JButton algo3 = new JButton ("Mine");
    layout.setHorizontalGroup (layout.createSequentialGroup ().addGroup (layout.createParallelGroup (GroupLayout.Alignment.LEADING).addComponent (label1).addComponent (label2).addComponent (label3)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.LEADING).addComponent (current).addComponent (dest).addComponent (preview)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.LEADING).addComponent (choose1).addComponent (choose2).addGroup (layout.createSequentialGroup ().addComponent (algo1).addComponent (algo2).addComponent (algo3))));
    layout.linkSize (SwingConstants.HORIZONTAL, choose1, choose2, algo1, algo2, algo3);
    layout.setVerticalGroup (layout.createSequentialGroup ().addGroup (layout.createParallelGroup (GroupLayout.Alignment.BASELINE).addComponent (label1).addComponent (current).addComponent (choose1)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.BASELINE).addComponent (label2).addComponent (dest).addComponent (choose2)).addGroup (layout.createParallelGroup (GroupLayout.Alignment.BASELINE).addComponent (label3).addComponent (preview).addComponent (algo1).addComponent (algo2).addComponent (algo3)));
    frame.setLocationRelativeTo (null);
    frame.add (panel);
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15897947_15900205_136_162
15897947_15900205_27_40
Title: "Problems with Java's Paint method ridiculous refresh velocity" 
----------------------------------------

public void run () {
    while (pane.getHeight () <= 0) {
        try {
            Thread.sleep (125);
        } catch (InterruptedException ex) {
        }
    }
    while (true) {
        long startTime = System.currentTimeMillis ();
        pane.updateState ();
        long elasped = System.currentTimeMillis () - startTime;
        long sleep = Math.round ((1000f / fps) - elasped);
        pane.repaint ();
        if (sleep > 0) {
            try {
                Thread.sleep (sleep);
            } catch (InterruptedException ex) {
            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Test");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (new GamePane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15898726_15898823_2_12
15898726_15898852_5_15
Title: An array in main reffering to an array outside main 
----------------------------------------

public int [] [] createGrid (int N) {
    int thisarray [] [] = new int [N] [N];
    for (int x = 0;
    x < N; x ++) {
        for (int y = 0;
        y < N; y ++) {
            int n = (int) (Math.random () * 6 + 1);
            thisarray [x] [y] = n;
        }
    }
    return thisarray;
}
----------------------------------------

public void createGrid () {
    int N = StdIn.readInt ();
    thisarray = new int [N] [N];
    for (int x = 0;
    x < N; x ++) {
        for (int y = 0;
        y < N; y ++) {
            int n = (int) (Math.random () * 6 + 1);
            thisarray [x] [y] = n;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15898726_15898828_4_14
15898726_15898852_5_15
Title: An array in main reffering to an array outside main 
----------------------------------------

public int [] [] createGrid () {
    int N = StdIn.readInt ();
    int thisarray [] [] = new int [N] [N];
    for (int x = 0;
    x < N; x ++) {
        for (int y = 0;
        y < N; y ++) {
            int n = (int) (Math.random () * 6 + 1);
            thisarray [x] [y] = n;
        }
    }
    return thisarray;
}
----------------------------------------

public void createGrid () {
    int N = StdIn.readInt ();
    thisarray = new int [N] [N];
    for (int x = 0;
    x < N; x ++) {
        for (int y = 0;
        y < N; y ++) {
            int n = (int) (Math.random () * 6 + 1);
            thisarray [x] [y] = n;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15899699_20449776_1_18
15899699_30393978_2_13
Title: add an element to int [] array in java 
----------------------------------------

public static void main (String [] args) {
    int [] series = new int [0];
    int x = 5;
    series = addInt (series, x);
    System.out.print ("New series: ");
    for (int i = 0;
    i < series.length; i ++) {
        if (i == series.length - 1) {
            System.out.println (series [i]);
        } else {
            System.out.print (series [i] + ", ");
        }
    }
}
----------------------------------------

public static void main (String s []) {
    int arr [] = {2, 3};
    int add [] = new int [arr.length + 1];
    for (int i = 0;
    i < add.length; i ++) {
        if (i == add.length - 1) {
            add [i] = 4;
        } else {
            add [i] = arr [i];
        }
        System.out.println (add [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15902662_17834810_2_36
15902662_42404471_84_138
Title: How to serve static content using suns simple httpserver 
----------------------------------------

public void handle (HttpExchange t) throws IOException {
    String root = "./wwwroot";
    URI uri = t.getRequestURI ();
    System.out.println ("looking for: " + root + uri.getPath ());
    String path = uri.getPath ();
    File file = new File (root + path).getCanonicalFile ();
    if (! file.isFile ()) {
        String response = "404 (Not Found)\n";
        t.sendResponseHeaders (404, response.length ());
        OutputStream os = t.getResponseBody ();
        os.write (response.getBytes ());
        os.close ();
    } else {
        String mime = "text/html";
        if (path.substring (path.length () - 3).equals (".js")) mime = "application/javascript";

        if (path.substring (path.length () - 3).equals ("css")) mime = "text/css";

        Headers h = t.getResponseHeaders ();
        h.set ("Content-Type", mime);
        t.sendResponseHeaders (200, 0);
        OutputStream os = t.getResponseBody ();
        FileInputStream fs = new FileInputStream (file);
        final byte [] buffer = new byte [0x10000];
        int count = 0;
        while ((count = fs.read (buffer)) >= 0) {
            os.write (buffer, 0, count);
        }
        fs.close ();
        os.close ();
    }
}
----------------------------------------

public void handle (HttpExchange he) throws IOException {
    String method = he.getRequestMethod ();
    if (! ("HEAD".equals (method) || "GET".equals (method))) {
        sendError (he, 501, "Unsupported HTTP method");
        return;
    }
    String wholeUrlPath = he.getRequestURI ().getPath ();
    if (wholeUrlPath.endsWith ("/")) {
        wholeUrlPath += directoryIndex;
    }
    if (! wholeUrlPath.startsWith (urlPrefix)) {
        throw new RuntimeException ("Path is not in prefix - incorrect routing?");
    }
    String urlPath = wholeUrlPath.substring (urlPrefix.length ());
    File f = new File (filesystemRoot, urlPath);
    File canonicalFile;
    try {
        canonicalFile = f.getCanonicalFile ();
    } catch (IOException e) {
        reportPathTraversal (he);
        return;
    }
    String canonicalPath = canonicalFile.getPath ();
    if (! canonicalPath.startsWith (filesystemRoot)) {
        reportPathTraversal (he);
        return;
    }
    FileInputStream fis;
    try {
        fis = new FileInputStream (canonicalFile);
    } catch (FileNotFoundException e) {
        sendError (he, 404, "File not found");
        return;
    }
    String mimeType = lookupMime (urlPath);
    he.getResponseHeaders ().set ("Content-Type", mimeType);
    if ("GET".equals (method)) {
        he.sendResponseHeaders (200, canonicalFile.length ());
        OutputStream os = he.getResponseBody ();
        copyStream (fis, os);
        os.close ();
    } else {
        assert ("HEAD".equals (method));
        he.sendResponseHeaders (200, - 1);
    }
    fis.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15920680_15922252_17_52
15920680_15922257_4_23
Title: How to restrict visibility of items? 
----------------------------------------

public void start (Stage primaryStage) throws Exception {
    Group root = new Group ();
    StackPane pane = new StackPane ();
    pane.setMaxWidth (100);
    pane.setMaxHeight (100);
    pane.setLayoutX (50);
    pane.setLayoutY (50);
    Rectangle rect = new Rectangle (100, 100);
    rect.setFill (null);
    rect.setStroke (Color.RED);
    Rectangle rect2 = new Rectangle (150, 150);
    rect2.setFill (Color.BLUE);
    pane.getChildren ().addAll (rect2, rect);
    root.getChildren ().add (pane);
    Scene scene = new Scene (root, 250, 250);
    primaryStage.setScene (scene);
    primaryStage.show ();
}
----------------------------------------

public void start (Stage stage) throws Exception {
    Pane clipPane = new Pane ();
    clipPane.setStyle ("-fx-border-color: red;");
    clipPane.setPrefSize (200, 200);
    Rectangle rect = new Rectangle (200, 200);
    clipPane.setClip (rect);
    Button btn = new Button ("Hello, world!");
    btn.relocate (120, 0);
    clipPane.getChildren ().add (btn);
    AnchorPane root = new AnchorPane ();
    root.getChildren ().add (clipPane);
    AnchorPane.setTopAnchor (clipPane, 50.);
    AnchorPane.setLeftAnchor (clipPane, 50.);
    stage.setScene (new Scene (root, 300, 300));
    stage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15927885_15928051_4_40
15927885_45133478_4_53
Title: Yes/No with boolean or if/else? 
----------------------------------------

public static void main (String [] args) {
    int age;
    String name;
    String input = "y";
    do {
        Scanner scan = new Scanner (System.in);
        System.out.println ("Enter in your age.");
        age = scan.nextInt ();
        if (age >= 10 && age < 18) {
            System.out.println ("So you're a kid, huh?");
        } else if (age < 10) {
            System.out.println ("Nice try.");
            System.exit (0);
        } else if (age >= 18 && age <= 100) {
            System.out.println ("So you're an adult, huh?");
        } else if (age > 100) {
            System.out.println ("Nice try.");
            System.exit (0);
        }

        Scanner in = new Scanner (System.in);
        System.out.println ("Enter in your name");
        name = in.nextLine ();
        System.out.println ("So you're " + age + " years old and your name is " + name + "?");
        Scanner sc = new Scanner (System.in);
        System.out.println ("y/n");
        input = sc.nextLine ();
    } while (input.equalsIgnoreCase ("y"));
}
----------------------------------------

public static void main (String [] args) {
    String day;
    boolean yn = true;
    boolean userContinue;
    String answer;
    Scanner stdIn = new Scanner (System.in);
    do {
        System.out.println ("Hello, thank you for visiting the Museum 
    website. For what day would you like to check our hours of operation?");
        day = stdIn.nextLine ();
        System.out.println ("Is today a holiday? Enter y or n.");
        answer = stdIn.nextLine ();
        if (answer.equals ("y")) {
            yn = true;
        } else if (answer.equals ("n")) {
            yn = false;
        } else {
            System.out.println ("Sorry, I didn't understand. Please reply y or n.");
        }

        switch (day) {
            case "Monday" :
                System.out.println ("Closed.");
                break;
            case "Tuesday" :
                if (yn) {
                    System.out.println ("We are open from 1:00 to 4:00.");
                } else {
                    System.out.println ("We are open from 12:00 to 5:00.");
                }
                break;
            case "Wednesday" :
                if (yn) {
                    System.out.println ("We are open from 2:00 to 5:00.");
                } else {
                    System.out.println ("We are open from 1:00 to 6:00.");
                    break;
                }
            case "Thursday" :
                System.out.println ("Closed.");
                break;
        }
        System.out.println ("Do you want to re-run the program? Type y or n.");
    } while (userContinue = "y".equalsIgnoreCase (stdIn.nextLine ()));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15930946_34692873_3_15
15930946_38763576_1_19
Title: Java Beginner - Counting number of words in sentence 
----------------------------------------

public static void main (String [] args) {
    int word = 1;
    Scanner s = new Scanner (System.in);
    System.out.println ("Enter a string: ");
    String str = s.nextLine ();
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == ' ' && str.charAt (i - 1) != ' ') word ++;

    }
    System.out.println ("Total Number of words= " + word);
}
----------------------------------------

public static void main (final String [] args) {
    System.out.println ("Please Enter Your String: ");
    final Map < String, Integer > hm = new HashMap < String, Integer > ();
    final Scanner sc = new Scanner (System.in);
    final String s1 = sc.nextLine ();
    final String [] c1 = s1.split (" ");
    for (int i = 0;
    i < c1.length; i ++) {
        if (! hm.containsKey (c1 [i])) {
            hm.put (c1 [i], (Integer) 1);
        } else {
            hm.put (c1 [i], hm.get (c1 [i]) + (Integer) 1);
        }
    }
    System.out.println ("The Total No Of Words: " + hm);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15930946_34692873_3_15
15930946_51036604_3_13
Title: Java Beginner - Counting number of words in sentence 
----------------------------------------

public static void main (String [] args) {
    int word = 1;
    Scanner s = new Scanner (System.in);
    System.out.println ("Enter a string: ");
    String str = s.nextLine ();
    for (int i = 1;
    i < str.length (); i ++) {
        if (str.charAt (i) == ' ' && str.charAt (i - 1) != ' ') word ++;

    }
    System.out.println ("Total Number of words= " + word);
}
----------------------------------------

public static void main (String [] args) {
    String words = "1 2 3 44 55                            966 5                                   88              ";
    int count = 0;
    String [] data = words.split (" ");
    for (String string : data) {
        if (! string.equals ("")) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15930946_38763576_1_19
15930946_51036604_3_13
Title: Java Beginner - Counting number of words in sentence 
----------------------------------------

public static void main (final String [] args) {
    System.out.println ("Please Enter Your String: ");
    final Map < String, Integer > hm = new HashMap < String, Integer > ();
    final Scanner sc = new Scanner (System.in);
    final String s1 = sc.nextLine ();
    final String [] c1 = s1.split (" ");
    for (int i = 0;
    i < c1.length; i ++) {
        if (! hm.containsKey (c1 [i])) {
            hm.put (c1 [i], (Integer) 1);
        } else {
            hm.put (c1 [i], hm.get (c1 [i]) + (Integer) 1);
        }
    }
    System.out.println ("The Total No Of Words: " + hm);
}
----------------------------------------

public static void main (String [] args) {
    String words = "1 2 3 44 55                            966 5                                   88              ";
    int count = 0;
    String [] data = words.split (" ");
    for (String string : data) {
        if (! string.equals ("")) {
            count ++;
        }
    }
    System.out.println (count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15931553_15931758_5_22
15931553_15932158_5_30
Title: Android: How to apply a variable to a toast? 
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    setTextvalue ();
    Button b = (Button) findViewById (R.id.button1);
    b.setOnClickListener (new OnClickListener () {
        @Override
        public void onClick (View v) {
            displayValue ();
        }}

    );
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_screen_next);
    Button send = (Button) findViewById (R.id.bSend);
    send.setOnClickListener (new OnClickListener () {
        public void onClick (View v) {
            String cText = "Toast Message";
            int val = 1;
            Toast.makeText (getApplicationContext (), cText, Toast.LENGTH_LONG).show ();
            Toast.makeText (getApplicationContext (), "vlaue is " + val, Toast.LENGTH_LONG).show ();
            Toast.makeText (getApplicationContext (), getMessage (), Toast.LENGTH_LONG).show ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15939188_15939246_62_70
15939188_15939246_75_83
Title: How Can I add a picture to this program 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        BufferedImage image = ImageIO.read (new File ("Pony01.png"));
        lblPic.setIcon (new ImageIcon (image));
    } catch (Exception exp) {
        JOptionPane.showMessageDialog (TestPane.this, "Failed to load image", "Fail", JOptionPane.ERROR_MESSAGE);
        exp.printStackTrace ();
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        BufferedImage image = ImageIO.read (getClass ().getResource ("/Pony02.png"));
        lblPic.setIcon (new ImageIcon (image));
    } catch (Exception exp) {
        JOptionPane.showMessageDialog (TestPane.this, "Failed to load image", "Fail", JOptionPane.ERROR_MESSAGE);
        exp.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15939547_15939601_1_11
15939547_15959784_115_173
Title: Can a method reference a method in the same class if that method refernces the original method 
----------------------------------------

public static void invMenu () {
    choice = userInput.next ();
    if (choice.equals ("1")) {
        return;
    } else if (choice.equals ("2")) {
        backSetter ();
    }

}
----------------------------------------

public static void invMenu () {
    boolean correctAnswer = false;
    int invList [] = new int [50];
    int itemAmount [] = new int [50];
    for (int i = 0;
    i <= 3; i ++) {
        if (healthPotionAmount > 0) {
            invList [0] = 1;
            itemTempName [0] = "Health Potion x ";
            itemAmount [0] = healthPotionAmount;
        } else {
            invList [0] = 0;
        }
        if (rustySwordAmount > 0) {
            invList [1] = 1;
            itemTempName [1] = "Rusty Sword x ";
            itemAmount [1] = rustySwordAmount;
        } else {
            invList [1] = 0;
        }
        if (ragsBodyAmount > 0) {
            invList [2] = 1;
            itemTempName [2] = "Rags x ";
            itemAmount [2] = ragsBodyAmount;
        } else {
            invList [2] = 0;
        }
        if (chainBodyAmount > 0) {
            invList [3] = 1;
            itemTempName [3] = "Chainmail Armor x ";
            itemAmount [3] = chainBodyAmount;
        } else {
            invList [3] = 0;
        }
    }
    for (int i = 0;
    i <= 3; i ++) {
        if (invList [i] > 0) {
            System.out.println (itemTempName [i] + itemAmount [i]);
        } else if (invList [0] == 0 && invList [1] == 0 && invList [2] == 0 && invList [3] == 0) {
            System.out.println ("You have no items.");
        }

    }
    System.out.println ("");
    System.out.println ("1. Back");
    System.out.println ("2. Home");
    menuChoice = userInput.next ();
    System.out.println ("");
    while (correctAnswer == false);

    if (menuChoice.equals ("1") || menuChoice.equalsIgnoreCase ("back") || menuChoice.equalsIgnoreCase ("b")) {
        correctAnswer = true;
        menuHome ();
    } else if (menuChoice.equals ("2") || menuChoice.equalsIgnoreCase ("home") || menuChoice.equalsIgnoreCase ("h")) {
        correctAnswer = true;
        backSetter ();
    } else {
        System.out.println ("That is not a valid option, choose again.");
        menuChoice = userInput.next ();
        System.out.println ("");
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1595015_1708471_13_44
1595015_1708471_46_71
Title: How can I populate a JFace ContentProposalAdapter from the internet? 
----------------------------------------

public IContentProposal [] getProposals (String contents, int position) {
    synchronized (this) {
        if (retrievalThread == null && contents.length () > 1 && (proposals == null || ! contents.startsWith (proposalQuery))) {
            getProposals (contents);
        }
        if (proposals != null) {
            List < IContentProposal > validProposals = new ArrayList < IContentProposal > ();
            for (IContentProposal prop : proposals) {
                if (prop == null) {
                    continue;
                }
                String propVal = prop.getContent ();
                if (isProposalValid (propVal, contents)) {
                    validProposals.add (prop);
                }
            }
            return validProposals.toArray (new IContentProposal [validProposals.size ()]);
        }
    }
    return new IContentProposal [0];
}
----------------------------------------

protected void getProposals (final String query) {
    retrievalThread = new Thread () {
        @Override
        public void run () {
            GetProfilesJob job = new GetProfilesJob ("profiles", query);
            job.schedule ();
            try {
                job.join ();
                ArrayList < String > names = job.getResults ();
                if (names != null) {
                    List < IContentProposal > props = new ArrayList < IContentProposal > ();
                    for (String name : names) {
                        props.add (new ProfileProposal (name, name));
                    }
                    setProposals (props, query);
                }
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            retrievalThread = null;
        }}

    ;
    retrievalThread.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15963382_15963425_10_42
15963382_15964287_3_16
Title: How to Add Application StartUp Image in Android Mobile? 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.splash);
    final SplashScreen sPlashScreen = this;
    mSplashThread = new Thread () {
        @Override
        public void run () {
            try {
                synchronized (this) {
                    wait (5000);
                }
            } catch (InterruptedException ex) {
            }
            finish ();
            Intent intent = new Intent ();
            intent.setClass (sPlashScreen, MainActivity.class);
            startActivity (intent);
            stop ();
        }}

    ;
    mSplashThread.start ();
}
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.splashscreen);
    Handler handler = new Handler ();
    handler.postDelayed (new Runnable () {
        public void run () {
            finish ();
            Intent menu = new Intent (getBaseContext (), MainMenu.class);
            startActivity (menu);
        }}

    , 3000);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15968579_15968948_18_36
15968579_15968948_2_14
Title: Conversion Calculations With Array 
----------------------------------------

public void actionPerformed (ActionEvent event) {
    int selectedRow = destinationBox.getSelectedIndex ();
    int selectedCol = originBox.getSelectedIndex ();
    String text = fileData [selectedRow + 1] [selectedColumn + 1];
    if (event.getSource () == kilometersRadioButton) {
        distanceLabel.setText ("Distance (kilometers):");
        avgspeedLabel.setText ("Avg. Speeg (kph): ");
        text = String.valueOf (MetricConverter.milesToKilometers (Double.valueOf (text)));
    } else if (event.getSource () == milesRadioButton) {
        distanceLabel.setText ("Distance (miles): ");
        avgspeedLabel.setText ("Avg. Speeg (mph): ");
    }

    distanceText.setText (text);
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int selectedRow = destinationBox.getSelectedIndex ();
    int selectedCol = originBox.getSelectedIndex ();
    String text = fileData [selectedRow + 1] [selectedColumn + 1];
    if (kilometersRadioButton.isSelected ()) {
        text = String.valueOf (MetricConverter.milesToKilometers (Double.valueOf (text)));
    }
    distanceText.setText (text);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15968883_15969656_27_42
15968883_31557287_45_56
Title: how to zip a folder itself using java 
----------------------------------------

private void addFolderToZip (String path, String srcFolder, ZipOutputStream zip) throws IOException {
    File folder = new File (srcFolder);
    if (folder.list ().length == 0) {
        addFileToZip (path, srcFolder, zip, true);
    } else {
        for (String fileName : folder.list ()) {
            if (path.equals ("")) {
                addFileToZip (folder.getName (), srcFolder + "/" + fileName, zip, false);
            } else {
                addFileToZip (path + "/" + folder.getName (), srcFolder + "/" + fileName, zip, false);
            }
        }
    }
}
----------------------------------------

static private void addFolderToZip (String path, String srcFolder, ZipOutputStream zip) throws Exception {
    File folder = new File (srcFolder);
    for (String fileName : folder.list ()) {
        if (path.equals ("")) {
            addFileToZip (folder.getName (), srcFolder + "/" + fileName, zip);
        } else {
            addFileToZip (path + "/" + folder.getName (), srcFolder + "/" + fileName, zip);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15968883_15969656_44_63
15968883_31557287_29_43
Title: how to zip a folder itself using java 
----------------------------------------

private void addFileToZip (String path, String srcFile, ZipOutputStream zip, boolean flag) throws IOException {
    File folder = new File (srcFile);
    if (flag) {
        zip.putNextEntry (new ZipEntry (path + "/" + folder.getName () + "/"));
    } else {
        if (folder.isDirectory ()) {
            addFolderToZip (path, srcFile, zip);
        } else {
            byte [] buf = new byte [1024];
            int len;
            FileInputStream in = new FileInputStream (srcFile);
            zip.putNextEntry (new ZipEntry (path + "/" + folder.getName ()));
            while ((len = in.read (buf)) > 0) {
                zip.write (buf, 0, len);
            }
        }
    }
}
----------------------------------------

static private void addFileToZip (String path, String srcFile, ZipOutputStream zip) throws Exception {
    File folder = new File (srcFile);
    if (folder.isDirectory ()) {
        addFolderToZip (path, srcFile, zip);
    } else {
        byte [] buf = new byte [1024];
        int len;
        FileInputStream in = new FileInputStream (srcFile);
        zip.putNextEntry (new ZipEntry (path + "/" + folder.getName ()));
        while ((len = in.read (buf)) > 0) {
            zip.write (buf, 0, len);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15968883_32052016_1_18
15968883_35158142_1_21
Title: how to zip a folder itself using java 
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p))) {
        Path pp = Paths.get (sourceDirPath);
        Files.walk (pp).filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

public static void pack (final Path folder, final Path zipFilePath) throws IOException {
    try (FileOutputStream fos = new FileOutputStream (zipFilePath.toFile ()); ZipOutputStream zos = new ZipOutputStream (fos)) {
        Files.walkFileTree (folder, new SimpleFileVisitor < Path > () {
            public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                zos.putNextEntry (new ZipEntry (folder.relativize (file).toString ()));
                Files.copy (file, zos);
                zos.closeEntry ();
                return FileVisitResult.CONTINUE;
            } public FileVisitResult preVisitDirectory (Path dir, BasicFileAttributes attrs) throws IOException {
                zos.putNextEntry (new ZipEntry (folder.relativize (dir).toString () + "/"));
                zos.closeEntry ();
                return FileVisitResult.CONTINUE;
            }}

        );
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15968883_35158142_1_21
15968883_53275074_1_19
Title: how to zip a folder itself using java 
----------------------------------------

public static void pack (final Path folder, final Path zipFilePath) throws IOException {
    try (FileOutputStream fos = new FileOutputStream (zipFilePath.toFile ()); ZipOutputStream zos = new ZipOutputStream (fos)) {
        Files.walkFileTree (folder, new SimpleFileVisitor < Path > () {
            public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                zos.putNextEntry (new ZipEntry (folder.relativize (file).toString ()));
                Files.copy (file, zos);
                zos.closeEntry ();
                return FileVisitResult.CONTINUE;
            } public FileVisitResult preVisitDirectory (Path dir, BasicFileAttributes attrs) throws IOException {
                zos.putNextEntry (new ZipEntry (folder.relativize (dir).toString () + "/"));
                zos.closeEntry ();
                return FileVisitResult.CONTINUE;
            }}

        );
    }
}
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    Path pp = Paths.get (sourceDirPath);
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p)); Stream < Path > paths = Files.walk (pp)) {
        paths.filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15981435_15982568_19_48
15981435_31664729_24_49
Title: Multi threaded Hello World 
----------------------------------------

public void run () {
    while (cycles.get () > 0) {
        int thisWord = whichWord.get ();
        int nextWord = thisWord + 1;
        boolean cycled = false;
        if (nextWord >= words.length) {
            cycled = true;
            nextWord = 0;
        }
        synchronized (System.out) {
            if (whichWord.compareAndSet (thisWord, nextWord)) {
                System.out.print (words [thisWord]);
                if (cycled) {
                    cycles.decrementAndGet ();
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 1000 && ! Thread.currentThread ().isInterrupted ();) {
        synchronized (lock) {
            if (printHello == iPrintHello) {
                System.out.print (toPrint);
                printHello = ! printHello;
                lock.notify ();
                i ++;
            } else {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    Thread.currentThread ().interrupt ();
                    return;
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_25_40
15997483_32164161_23_34
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 1) {
                    threadOrderTest.wait ();
                }
                System.out.print ("A ");
                threadOrderTest.status = 2;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 1 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    System.out.print ("A");
    countDownLatch1.countDown ();
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_25_40
15997483_32164161_40_55
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 1) {
                    threadOrderTest.wait ();
                }
                System.out.print ("A ");
                threadOrderTest.status = 2;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 1 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        countDownLatch1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("B");
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_25_40
15997483_32164161_61_75
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 1) {
                    threadOrderTest.wait ();
                }
                System.out.print ("A ");
                threadOrderTest.status = 2;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 1 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        countDownLatch.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("C");
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_25_40
15997483_33655989_21_62
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 1) {
                    threadOrderTest.wait ();
                }
                System.out.print ("A ");
                threadOrderTest.status = 2;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 1 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 3; i ++) {
        synchronized (this) {
            if (turn == 0) {
                System.out.println ("Thread1");
                turn = 1;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 1) {
                System.out.println ("Thread2");
                turn = 2;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 2) {
                System.out.println ("Thread3");
                System.out.println ("*********");
                turn = 0;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_25_40
15997483_51792104_49_60
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 1) {
                    threadOrderTest.wait ();
                }
                System.out.print ("A ");
                threadOrderTest.status = 2;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 1 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    int count = 0;
    while (count < max) {
        synchronized (this.state) {
            if (this.state.getState () == this.value) {
                System.out.print (value);
                count ++;
                this.state.incrState ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_52_67
15997483_32164161_23_34
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 2) {
                    threadOrderTest.wait ();
                }
                System.out.print ("B ");
                threadOrderTest.status = 3;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 2 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    System.out.print ("A");
    countDownLatch1.countDown ();
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_52_67
15997483_32164161_40_55
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 2) {
                    threadOrderTest.wait ();
                }
                System.out.print ("B ");
                threadOrderTest.status = 3;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 2 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        countDownLatch1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("B");
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_52_67
15997483_32164161_61_75
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 2) {
                    threadOrderTest.wait ();
                }
                System.out.print ("B ");
                threadOrderTest.status = 3;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 2 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        countDownLatch.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("C");
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_52_67
15997483_33655989_21_62
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 2) {
                    threadOrderTest.wait ();
                }
                System.out.print ("B ");
                threadOrderTest.status = 3;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 2 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 3; i ++) {
        synchronized (this) {
            if (turn == 0) {
                System.out.println ("Thread1");
                turn = 1;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 1) {
                System.out.println ("Thread2");
                turn = 2;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 2) {
                System.out.println ("Thread3");
                System.out.println ("*********");
                turn = 0;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_52_67
15997483_51792104_49_60
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 2) {
                    threadOrderTest.wait ();
                }
                System.out.print ("B ");
                threadOrderTest.status = 3;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 2 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    int count = 0;
    while (count < max) {
        synchronized (this.state) {
            if (this.state.getState () == this.value) {
                System.out.print (value);
                count ++;
                this.state.incrState ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_5_13
15997483_32680780_44_59
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public static void main (String [] args) {
    ThreadOrderTest threadOrderTest = new ThreadOrderTest ();
    A a = new A (threadOrderTest);
    B b = new B (threadOrderTest);
    C c = new C (threadOrderTest);
    a.start ();
    b.start ();
    c.start ();
}
----------------------------------------

public static void main (String [] args) {
    Thread a = new Thread (new A ());
    Thread b = new Thread (new B ());
    Thread c = new Thread (new C ());
    a.start ();
    try {
        a.join ();
        b.start ();
        b.join ();
        c.start ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_5_13
15997483_33655989_2_14
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public static void main (String [] args) {
    ThreadOrderTest threadOrderTest = new ThreadOrderTest ();
    A a = new A (threadOrderTest);
    B b = new B (threadOrderTest);
    C c = new C (threadOrderTest);
    a.start ();
    b.start ();
    c.start ();
}
----------------------------------------

public static void main (String [] args) {
    MyThread h = new MyThread ();
    Thread t1 = new Thread (h);
    Thread t2 = new Thread (h);
    Thread t3 = new Thread (h);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_5_13
15997483_51792104_3_12
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public static void main (String [] args) {
    ThreadOrderTest threadOrderTest = new ThreadOrderTest ();
    A a = new A (threadOrderTest);
    B b = new B (threadOrderTest);
    C c = new C (threadOrderTest);
    a.start ();
    b.start ();
    c.start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyState state = new MyState ();
    final Thread t1 = new Thread (new MyRunnable (10, 'A', state));
    final Thread t2 = new Thread (new MyRunnable (10, 'B', state));
    final Thread t3 = new Thread (new MyRunnable (10, 'C', state));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_79_94
15997483_32164161_23_34
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 3) {
                    threadOrderTest.wait ();
                }
                System.out.println ("C ");
                threadOrderTest.status = 1;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    System.out.print ("A");
    countDownLatch1.countDown ();
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_79_94
15997483_32164161_40_55
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 3) {
                    threadOrderTest.wait ();
                }
                System.out.println ("C ");
                threadOrderTest.status = 1;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        countDownLatch1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("B");
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_79_94
15997483_32164161_61_75
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 3) {
                    threadOrderTest.wait ();
                }
                System.out.println ("C ");
                threadOrderTest.status = 1;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    try {
        countDownLatch.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("C");
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_79_94
15997483_33655989_21_62
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 3) {
                    threadOrderTest.wait ();
                }
                System.out.println ("C ");
                threadOrderTest.status = 1;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 3; i ++) {
        synchronized (this) {
            if (turn == 0) {
                System.out.println ("Thread1");
                turn = 1;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 1) {
                System.out.println ("Thread2");
                turn = 2;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 2) {
                System.out.println ("Thread3");
                System.out.println ("*********");
                turn = 0;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_13727332_1_10
13727030_39692924_17_29
Title: Mergesort in java 
----------------------------------------

static int [] mergeSort (int [] A) {
    if (A.length > 1) {
        int q = A.length / 2;
        int [] leftArray = Arrays.copyOfRange (A, 0, q);
        int [] rightArray = Arrays.copyOfRange (A, q + 1, A.length);
        return merge (mergeSort (leftArray), mergeSort (rightArray));
    } else return A;

}
----------------------------------------

private static void mergeSort (Integer [] itens, Integer [] tmpArray, int left, int right) {
    if (itens == null || itens.length == 0 || left >= right) {
        return;
    }
    int midle = (left + right) / 2;
    mergeSort (itens, tmpArray, left, midle);
    mergeSort (itens, tmpArray, midle + 1, right);
    merge (itens, tmpArray, left, midle + 1, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_13727872_22_36
13727030_39692924_17_29
Title: Mergesort in java 
----------------------------------------

static void mergeSort (int [] A) {
    if (A.length > 1) {
        int q = A.length / 2;
        int [] leftArray = Arrays.copyOfRange (A, 0, q - 1);
        int [] rightArray = Arrays.copyOfRange (A, q, A.length - 1);
        mergeSort (leftArray);
        mergeSort (rightArray);
        merge (A, leftArray, rightArray);
    }
}
----------------------------------------

private static void mergeSort (Integer [] itens, Integer [] tmpArray, int left, int right) {
    if (itens == null || itens.length == 0 || left >= right) {
        return;
    }
    int midle = (left + right) / 2;
    mergeSort (itens, tmpArray, left, midle);
    mergeSort (itens, tmpArray, midle + 1, right);
    merge (itens, tmpArray, left, midle + 1, right);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_13727872_38_75
13727030_20039399_20_62
Title: Mergesort in java 
----------------------------------------

static void merge (int [] a, int [] l, int [] r) {
    int totElem = l.length + r.length;
    int i, li, ri;
    i = li = ri = 0;
    while (i < totElem) {
        if ((li < l.length) && (ri < r.length)) {
            if (l [li] < r [ri]) {
                a [i] = l [li];
                i ++;
                li ++;
            } else {
                a [i] = r [ri];
                i ++;
                ri ++;
            }
        } else {
            if (li >= l.length) {
                while (ri < r.length) {
                    a [i] = r [ri];
                    i ++;
                    ri ++;
                }
            }
            if (ri >= r.length) {
                while (li < l.length) {
                    a [i] = l [li];
                    li ++;
                    i ++;
                }
            }
        }
    }
}
----------------------------------------

private void merge (int low, int mid, int high) {
    int temp [] = new int [high - low + 1];
    int left = low;
    int right = mid + 1;
    int index = 0;
    while (left <= mid && right <= high) {
        if (copy [left] < copy [right]) {
            temp [index] = copy [left];
            left ++;
        } else {
            temp [index] = copy [right];
            right ++;
        }
        index ++;
    }
    while (left <= mid || right <= high) {
        if (left <= mid) {
            temp [index] = copy [left];
            left ++;
            index ++;
        } else if (right <= high) {
            temp [index] = copy [right];
            right ++;
            index ++;
        }

    }
    for (int i = 0;
    i < temp.length; i ++) {
        copy [low + i] = temp [i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_13727872_38_75
13727030_23311527_18_36
Title: Mergesort in java 
----------------------------------------

static void merge (int [] a, int [] l, int [] r) {
    int totElem = l.length + r.length;
    int i, li, ri;
    i = li = ri = 0;
    while (i < totElem) {
        if ((li < l.length) && (ri < r.length)) {
            if (l [li] < r [ri]) {
                a [i] = l [li];
                i ++;
                li ++;
            } else {
                a [i] = r [ri];
                i ++;
                ri ++;
            }
        } else {
            if (li >= l.length) {
                while (ri < r.length) {
                    a [i] = r [ri];
                    i ++;
                    ri ++;
                }
            }
            if (ri >= r.length) {
                while (li < l.length) {
                    a [i] = l [li];
                    li ++;
                    i ++;
                }
            }
        }
    }
}
----------------------------------------

private static void merge (int [] a, int [] b, int [] all) {
    int i = 0, j = 0, k = 0;
    while (i < a.length && j < b.length) {
        if (a [i] < b [j]) {
            all [k] = a [i];
            i ++;
        } else {
            all [k] = b [j];
            j ++;
        }
        k ++;
    }
    while (i < a.length) {
        all [k ++] = a [i ++];
    }
    while (j < b.length) {
        all [k ++] = b [j ++];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_13727872_38_75
13727030_39692924_31_52
Title: Mergesort in java 
----------------------------------------

static void merge (int [] a, int [] l, int [] r) {
    int totElem = l.length + r.length;
    int i, li, ri;
    i = li = ri = 0;
    while (i < totElem) {
        if ((li < l.length) && (ri < r.length)) {
            if (l [li] < r [ri]) {
                a [i] = l [li];
                i ++;
                li ++;
            } else {
                a [i] = r [ri];
                i ++;
                ri ++;
            }
        } else {
            if (li >= l.length) {
                while (ri < r.length) {
                    a [i] = r [ri];
                    i ++;
                    ri ++;
                }
            }
            if (ri >= r.length) {
                while (li < l.length) {
                    a [i] = l [li];
                    li ++;
                    i ++;
                }
            }
        }
    }
}
----------------------------------------

private static void merge (Integer [] itens, Integer [] tmpArray, int left, int right, int rightEnd) {
    int leftEnd = right - 1;
    int tmpIndex = left;
    while (left <= leftEnd && right <= rightEnd) {
        if (itens [left] < itens [right]) {
            tmpArray [tmpIndex ++] = itens [left ++];
        } else {
            tmpArray [tmpIndex ++] = itens [right ++];
        }
    }
    while (left <= leftEnd) {
        tmpArray [tmpIndex ++] = itens [left ++];
    }
    while (right <= rightEnd) {
        tmpArray [tmpIndex ++] = itens [right ++];
    }
    while (rightEnd >= 0) {
        itens [rightEnd] = tmpArray [rightEnd --];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_13727872_38_75
13727030_44055124_1_31
Title: Mergesort in java 
----------------------------------------

static void merge (int [] a, int [] l, int [] r) {
    int totElem = l.length + r.length;
    int i, li, ri;
    i = li = ri = 0;
    while (i < totElem) {
        if ((li < l.length) && (ri < r.length)) {
            if (l [li] < r [ri]) {
                a [i] = l [li];
                i ++;
                li ++;
            } else {
                a [i] = r [ri];
                i ++;
                ri ++;
            }
        } else {
            if (li >= l.length) {
                while (ri < r.length) {
                    a [i] = r [ri];
                    i ++;
                    ri ++;
                }
            }
            if (ri >= r.length) {
                while (li < l.length) {
                    a [i] = l [li];
                    li ++;
                    i ++;
                }
            }
        }
    }
}
----------------------------------------

public static void merge (int [] a, int [] b, int [] result) {
    int i = 0, j = 0;
    while (true) {
        if (i == a.length) {
            if (j == b.length) return;

            result [i + j] = b [j];
            j ++;
        } else if (j == b.length) {
            result [i + j] = a [i];
            i ++;
        } else if (a [i] < b [j]) {
            result [i + j] = a [i];
            i ++;
        } else {
            result [i + j] = b [j];
            j ++;
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_13727872_7_20
13727030_51255769_7_16
Title: Mergesort in java 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader R = new BufferedReader (new InputStreamReader (System.in));
    int arraySize = Integer.parseInt (R.readLine ());
    int [] inputArray = new int [arraySize];
    for (int i = 0;
    i < arraySize; i ++) {
        inputArray [i] = Integer.parseInt (R.readLine ());
    }
    mergeSort (inputArray);
    for (int j = 0;
    j < inputArray.length; j ++) {
        System.out.println (inputArray [j]);
    }
}
----------------------------------------

public static void main (String a []) {
    int [] inputArr = {45, 23, 11, 89, 77, 98, 4, 28, 65, 43};
    MyMergeSort mms = new MyMergeSort ();
    mms.sort (inputArr);
    for (int i : inputArr) {
        System.out.print (i);
        System.out.print (" ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_20039399_20_62
13727030_23311527_18_36
Title: Mergesort in java 
----------------------------------------

private void merge (int low, int mid, int high) {
    int temp [] = new int [high - low + 1];
    int left = low;
    int right = mid + 1;
    int index = 0;
    while (left <= mid && right <= high) {
        if (copy [left] < copy [right]) {
            temp [index] = copy [left];
            left ++;
        } else {
            temp [index] = copy [right];
            right ++;
        }
        index ++;
    }
    while (left <= mid || right <= high) {
        if (left <= mid) {
            temp [index] = copy [left];
            left ++;
            index ++;
        } else if (right <= high) {
            temp [index] = copy [right];
            right ++;
            index ++;
        }

    }
    for (int i = 0;
    i < temp.length; i ++) {
        copy [low + i] = temp [i];
    }
}
----------------------------------------

private static void merge (int [] a, int [] b, int [] all) {
    int i = 0, j = 0, k = 0;
    while (i < a.length && j < b.length) {
        if (a [i] < b [j]) {
            all [k] = a [i];
            i ++;
        } else {
            all [k] = b [j];
            j ++;
        }
        k ++;
    }
    while (i < a.length) {
        all [k ++] = a [i ++];
    }
    while (j < b.length) {
        all [k ++] = b [j ++];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_20039399_20_62
13727030_39692924_31_52
Title: Mergesort in java 
----------------------------------------

private void merge (int low, int mid, int high) {
    int temp [] = new int [high - low + 1];
    int left = low;
    int right = mid + 1;
    int index = 0;
    while (left <= mid && right <= high) {
        if (copy [left] < copy [right]) {
            temp [index] = copy [left];
            left ++;
        } else {
            temp [index] = copy [right];
            right ++;
        }
        index ++;
    }
    while (left <= mid || right <= high) {
        if (left <= mid) {
            temp [index] = copy [left];
            left ++;
            index ++;
        } else if (right <= high) {
            temp [index] = copy [right];
            right ++;
            index ++;
        }

    }
    for (int i = 0;
    i < temp.length; i ++) {
        copy [low + i] = temp [i];
    }
}
----------------------------------------

private static void merge (Integer [] itens, Integer [] tmpArray, int left, int right, int rightEnd) {
    int leftEnd = right - 1;
    int tmpIndex = left;
    while (left <= leftEnd && right <= rightEnd) {
        if (itens [left] < itens [right]) {
            tmpArray [tmpIndex ++] = itens [left ++];
        } else {
            tmpArray [tmpIndex ++] = itens [right ++];
        }
    }
    while (left <= leftEnd) {
        tmpArray [tmpIndex ++] = itens [left ++];
    }
    while (right <= rightEnd) {
        tmpArray [tmpIndex ++] = itens [right ++];
    }
    while (rightEnd >= 0) {
        itens [rightEnd] = tmpArray [rightEnd --];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_20039399_20_62
13727030_44055124_1_31
Title: Mergesort in java 
----------------------------------------

private void merge (int low, int mid, int high) {
    int temp [] = new int [high - low + 1];
    int left = low;
    int right = mid + 1;
    int index = 0;
    while (left <= mid && right <= high) {
        if (copy [left] < copy [right]) {
            temp [index] = copy [left];
            left ++;
        } else {
            temp [index] = copy [right];
            right ++;
        }
        index ++;
    }
    while (left <= mid || right <= high) {
        if (left <= mid) {
            temp [index] = copy [left];
            left ++;
            index ++;
        } else if (right <= high) {
            temp [index] = copy [right];
            right ++;
            index ++;
        }

    }
    for (int i = 0;
    i < temp.length; i ++) {
        copy [low + i] = temp [i];
    }
}
----------------------------------------

public static void merge (int [] a, int [] b, int [] result) {
    int i = 0, j = 0;
    while (true) {
        if (i == a.length) {
            if (j == b.length) return;

            result [i + j] = b [j];
            j ++;
        } else if (j == b.length) {
            result [i + j] = a [i];
            i ++;
        } else if (a [i] < b [j]) {
            result [i + j] = a [i];
            i ++;
        } else {
            result [i + j] = b [j];
            j ++;
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_23311527_18_36
13727030_39692924_31_52
Title: Mergesort in java 
----------------------------------------

private static void merge (int [] a, int [] b, int [] all) {
    int i = 0, j = 0, k = 0;
    while (i < a.length && j < b.length) {
        if (a [i] < b [j]) {
            all [k] = a [i];
            i ++;
        } else {
            all [k] = b [j];
            j ++;
        }
        k ++;
    }
    while (i < a.length) {
        all [k ++] = a [i ++];
    }
    while (j < b.length) {
        all [k ++] = b [j ++];
    }
}
----------------------------------------

private static void merge (Integer [] itens, Integer [] tmpArray, int left, int right, int rightEnd) {
    int leftEnd = right - 1;
    int tmpIndex = left;
    while (left <= leftEnd && right <= rightEnd) {
        if (itens [left] < itens [right]) {
            tmpArray [tmpIndex ++] = itens [left ++];
        } else {
            tmpArray [tmpIndex ++] = itens [right ++];
        }
    }
    while (left <= leftEnd) {
        tmpArray [tmpIndex ++] = itens [left ++];
    }
    while (right <= rightEnd) {
        tmpArray [tmpIndex ++] = itens [right ++];
    }
    while (rightEnd >= 0) {
        itens [rightEnd] = tmpArray [rightEnd --];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_23311527_18_36
13727030_44055124_1_31
Title: Mergesort in java 
----------------------------------------

private static void merge (int [] a, int [] b, int [] all) {
    int i = 0, j = 0, k = 0;
    while (i < a.length && j < b.length) {
        if (a [i] < b [j]) {
            all [k] = a [i];
            i ++;
        } else {
            all [k] = b [j];
            j ++;
        }
        k ++;
    }
    while (i < a.length) {
        all [k ++] = a [i ++];
    }
    while (j < b.length) {
        all [k ++] = b [j ++];
    }
}
----------------------------------------

public static void merge (int [] a, int [] b, int [] result) {
    int i = 0, j = 0;
    while (true) {
        if (i == a.length) {
            if (j == b.length) return;

            result [i + j] = b [j];
            j ++;
        } else if (j == b.length) {
            result [i + j] = a [i];
            i ++;
        } else if (a [i] < b [j]) {
            result [i + j] = a [i];
            i ++;
        } else {
            result [i + j] = b [j];
            j ++;
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13727030_39692924_31_52
13727030_44055124_1_31
Title: Mergesort in java 
----------------------------------------

private static void merge (Integer [] itens, Integer [] tmpArray, int left, int right, int rightEnd) {
    int leftEnd = right - 1;
    int tmpIndex = left;
    while (left <= leftEnd && right <= rightEnd) {
        if (itens [left] < itens [right]) {
            tmpArray [tmpIndex ++] = itens [left ++];
        } else {
            tmpArray [tmpIndex ++] = itens [right ++];
        }
    }
    while (left <= leftEnd) {
        tmpArray [tmpIndex ++] = itens [left ++];
    }
    while (right <= rightEnd) {
        tmpArray [tmpIndex ++] = itens [right ++];
    }
    while (rightEnd >= 0) {
        itens [rightEnd] = tmpArray [rightEnd --];
    }
}
----------------------------------------

public static void merge (int [] a, int [] b, int [] result) {
    int i = 0, j = 0;
    while (true) {
        if (i == a.length) {
            if (j == b.length) return;

            result [i + j] = b [j];
            j ++;
        } else if (j == b.length) {
            result [i + j] = a [i];
            i ++;
        } else if (a [i] < b [j]) {
            result [i + j] = a [i];
            i ++;
        } else {
            result [i + j] = b [j];
            j ++;
        }

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13733460_13773625_48_68
13733460_26143731_68_85
Title: Android: Providing recent search suggestions without searchable activity? 
----------------------------------------

public boolean onQueryTextChange (String newText) {
    Cursor cursor = database.getSuggestions (newText);
    if (cursor.getCount () != 0) {
        String [] columns = new String [] {SuggestionsDatabase.FIELD_SUGGESTION};
        int [] columnTextId = new int [] {android.R.id.text1};
        SuggestionSimpleCursorAdapter simple = new SuggestionSimpleCursorAdapter (getBaseContext (), android.R.layout.simple_list_item_1, cursor, columns, columnTextId, 0);
        searchView.setSuggestionsAdapter (simple);
        return true;
    } else {
        return false;
    }
}
----------------------------------------

public boolean onQueryTextChange (final String newText) {
    suggestionsArray.clear ();
    for (int i = 0;
    i < dummyArray.size (); i ++) {
        if (dummyArray.get (i).contains (newText)) {
            suggestionsArray.add (dummyArray.get (i));
        }
    }
    final MatrixCursor matrixCursor = getCursor (suggestionsArray);
    suggestionsAdapter = new SuggestAdapter (this, matrixCursor, suggestionsArray);
    searchView.setSuggestionsAdapter (suggestionsAdapter);
    suggestionsAdapter.notifyDataSetChanged ();
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13736251_13736304_30_77
13736251_13736380_1_32
Title: calculate myClickHandler function not working 
----------------------------------------

public void myClickHandler (View view) {
    switch (view.getId ()) {
        case R.id.calcBtn :
            int i = rg1.getCheckedRadioButtonId ();
            if (i == rb1.getId ()) {
                double Bill = Double.parseDouble (et1.getText ().toString ());
                double Tip = Bill * .05;
                double Total = Tip + Bill;
                DecimalFormat df = new DecimalFormat ("#.00");
                et2.setText (df.format (Tip));
                et3.setText (df.format (Total));
            }
            if (i == rb2.getId ()) {
                double Bill = Double.parseDouble (et1.getText ().toString ());
                double Tip = Bill * .1;
                double Total = Tip + Bill;
                DecimalFormat df = new DecimalFormat ("#.00");
                et2.setText (df.format (Tip));
                et3.setText (df.format (Total));
            }
            if (i == rb3.getId ()) {
                double Bill = Double.parseDouble (et1.getText ().toString ());
                double Tip = Bill * .15;
                double Total = Tip + Bill;
                DecimalFormat df = new DecimalFormat ("#.00");
                et2.setText (df.format (Tip));
                et3.setText (df.format (Total));
            }
            if (i == rb4.getId ()) {
                double Bill = Double.parseDouble (et1.getText ().toString ());
                double Tip = Bill * .2;
                double Total = Tip + Bill;
                DecimalFormat df = new DecimalFormat ("#.00");
                et2.setText (df.format (Tip));
                et3.setText (df.format (Total));
                break;
            }
        case R.id.resetBtn :
            et1.setText ("");
            et2.setText ("");
            et3.setText ("");
            break;
    }
}
----------------------------------------

public void myClickHandler (View view) {
    switch (view.getId ()) {
        case R.id.calcBtn :
            if (rb1.isChecked ()) {
                double Bill = Double.parseDouble (et1.getText ().toString ());
                double Tip = Bill * .05;
                double Total = Tip + Bill;
                DecimalFormat df = new DecimalFormat ("#.00");
                et2.setText (df.format (Tip));
                et3.setText (df.format (Total));
            }
            if (rb2.isChecked ()) {
            }
            if (rb3.isChecked ()) {
            }
            if (rb4.isChecked ()) {
            }
            break;
        case R.id.resetBtn :
            et1.setText ("");
            et2.setText ("");
            et3.setText ("");
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13737076_13737194_8_32
13737076_13737307_9_25
Title: "Android getSelectedItem how to use?" 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.main);
    sp = (Spinner) findViewById (R.id.spinner1);
    adapter = new ArrayAdapter < String > (this, android.R.layout.simple_spinner_item, numbers);
    sp.setAdapter (adapter);
    sp.setOnItemSelectedListener (new OnItemSelectedListener () {
        public void onItemSelected (AdapterView < ? > arg0, View arg1, int arg2, long arg3) {
            Toast.makeText (getBaseContext (), sp.getSelectedItem ().toString (), Toast.LENGTH_LONG).show ();
        } public void onNothingSelected (AdapterView < ? > arg0) {
        }}

    );
}
----------------------------------------

public void onCreate (Bundle icicle) {
    super.onCreate (icicle);
    setContentView (R.layout.main);
    selection = (TextView) findViewById (R.id.selection);
    Spinner spin = (Spinner) findViewById (R.id.spinner);
    spin.setOnItemSelectedListener (this);
    ArrayAdapter aa = new ArrayAdapter (this, android.R.layout.simple_spinner_item, items);
    aa.setDropDownViewResource (android.R.layout.simple_spinner_dropdown_item);
    spin.setAdapter (aa);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13756235_19532488_2_60
13756235_45534001_62_89
Title: How to sort ip address in ascending order 
----------------------------------------

public static void main (String [] args) {
    String [] arr = {"192.168.1.1", "191.122.123.112", "192.161.1.1", "191.122.123.1", "123.24.5.78", "121.24.5.78", "123.24.4.78", "123.2.5.78", "192.1.1.1", "125.45.67.89", "1.1.1.1", "3.4.5.6", "2.2.2.2", "6.6.6.7", "155.155.23.0"};
    String tmp;
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 1;
        j < arr.length - i; j ++) {
            String [] instr1 = arr [j - 1].split ("\\.");
            String [] instr2 = arr [j].split ("\\.");
            if (Integer.parseInt (instr1 [0]) > Integer.parseInt (instr2 [0])) {
                tmp = arr [j - 1];
                arr [j - 1] = arr [j];
                arr [j] = tmp;
            } else if (Integer.parseInt (instr1 [0]) == Integer.parseInt (instr2 [0]) && Integer.parseInt (instr1 [1]) > Integer.parseInt (instr2 [1])) {
                tmp = arr [j - 1];
                arr [j - 1] = arr [j];
                arr [j] = tmp;
            } else if (Integer.parseInt (instr1 [0]) == Integer.parseInt (instr2 [0]) && Integer.parseInt (instr1 [1]) == Integer.parseInt (instr2 [1]) && Integer.parseInt (instr1 [2]) > Integer.parseInt (instr2 [2])) {
                tmp = arr [j - 1];
                arr [j - 1] = arr [j];
                arr [j] = tmp;
            } else if (Integer.parseInt (instr1 [0]) == Integer.parseInt (instr2 [0]) && Integer.parseInt (instr1 [1]) == Integer.parseInt (instr2 [1]) && Integer.parseInt (instr1 [2]) == Integer.parseInt (instr2 [2]) && Integer.parseInt (instr1 [3]) > Integer.parseInt (instr2 [3])) {
                tmp = arr [j - 1];
                arr [j - 1] = arr [j];
                arr [j] = tmp;
            }

        }
    }
    System.out.println ("final sorted list of ips :\n");
    for (int k = 0;
    k < arr.length; k ++) {
        System.out.println (arr [k]);
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < Integer, String > ipRange = new TreeMap < Integer, String > ();
    Map < Integer, Long > formatedIpRange = new TreeMap < Integer, Long > ();
    ipRange.put (1, "10.1.4.100");
    ipRange.put (2, "1.10.400.10");
    ipRange.put (3, "196.0.14.15");
    ipRange.put (4, "196.70.5.1");
    ipRange.put (5, "196.70.7.3");
    ipRange.put (6, "153.70.7.0");
    for (int j = 1;
    j <= ipRange.size (); j ++) {
        formatedIpRange.put (j, Long.parseLong (getFormattedIP (ipRange.get (j))));
    }
    Object [] a = formatedIpRange.entrySet ().toArray ();
    ArrayList < Integer > key = sortedList (a, "descending");
    System.out.println ("ordered list ");
    for (Integer integer : key) {
        System.out.println (ipRange.get (integer));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13756268_13756350_1_11
13756268_13757282_1_16
Title: Find Max Number(s) in an ArrayList (Possibility of More Than One Max Value) 
----------------------------------------

public static ArrayList < Integer > maxIndices (ArrayList < Integer > list) {
    List < Integer > indices = new ArrayList < Integer > ();
    int max = getMaxValue (list);
    for (int i = 0;
    i < list.size (); i ++) {
        if (list.get (i) == max) {
            indices.add (list.get (i));
        }
    }
    return indices;
}
----------------------------------------

public static List < Integer > maxIndices (List < Integer > l) {
    List < Integer > result = new ArrayList < Integer > ();
    Integer candidate = l.get (0);
    result.add (0);
    for (int i = 1;
    i < l.size (); i ++) {
        if (l.get (i).compareTo (candidate) > 0) {
            candidate = l.get (i);
            result.clear ();
            result.add (i);
        } else if (l.get (i).compareTo (candidate) == 0) {
            result.add (i);
        }

    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13772593_13773208_15_27
13772593_13775661_14_59
Title: Find next character in a string? 
----------------------------------------

public void getDate () {
    String date;
    do {
        System.out.print ("Please enter your birth date (mm / dd / yyyy): ");
        Scanner in = new Scanner (System.in);
        date = in.nextLine ();
    } while (validDate (date) == false);
    calcNum ();
}
----------------------------------------

public void getDate () {
    int fields = 0;
    String delim1 = "";
    String delim2 = "";
    Scanner in = new Scanner (System.in);
    do {
        fields = 0;
        System.out.print ("Please enter your birth date (mm / dd / yyyy): ");
        while (fields < 5 && in.hasNext ()) {
            try {
                fields ++;
                switch (fields) {
                    case 1 :
                        month = in.nextInt ();
                        break;
                    case 3 :
                        day = in.nextInt ();
                        break;
                    case 5 :
                        year = in.nextInt ();
                        break;
                    case 2 :
                        delim1 = in.next ();
                        break;
                    case 4 :
                        delim2 = in.next ();
                        break;
                }
            } catch (InputMismatchException e) {
                System.out.println ("ERROR: Field " + fields + " must be an integer");
                String temp = in.nextLine ();
                fields = 6;
                break;
            }
        }
    } while (fields != 5 || validDate (delim1, delim2) == false);
    in.close ();
    System.out.println ("Input date: " + month + "/" + day + "/" + year);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13772593_13773208_29_57
13772593_13775661_61_84
Title: Find next character in a string? 
----------------------------------------

boolean validDate (String date) {
    String [] fields = date.split ("\\s");
    if (fields.length != 5) {
        return false;
    }
    if (! (fields [1].equals ("/") && fields [3].equals ("/"))) return false;

    if (! (Pattern.matches ("^\\d*$", fields [0]) && Pattern.matches ("^\\d*$", fields [2]) && Pattern.matches ("^\\d*$", fields [4]))) return false;

    month = Integer.parseInt (fields [0]);
    day = Integer.parseInt (fields [2]);
    year = Integer.parseInt (fields [4]);
    return true;
}
----------------------------------------

boolean validDate (String delim1, String delim2) {
    if ((! delim1.equals ("/")) || (! delim2.equals ("/"))) {
        System.out.println ("ERROR: use '/' as the date delimiter");
        return false;
    }
    if (month < 1 || month > 12) {
        System.out.println ("Invalid month value: " + month);
        return false;
    }
    if (day < 1 || day > 31) {
        System.out.println ("Invalid day value: " + day);
        return false;
    }
    if (year < 1 || year > 3000) {
        System.out.println ("Invalid year: " + year);
        return false;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1377279_1381041_1_50
1377279_29895658_1_23
Title: Find a line in a file and remove it 
----------------------------------------

public void removeLineFromFile (String file, String lineToRemove) {
    try {
        File inFile = new File (file);
        if (! inFile.isFile ()) {
            System.out.println ("Parameter is not an existing file");
            return;
        }
        File tempFile = new File (inFile.getAbsolutePath () + ".tmp");
        BufferedReader br = new BufferedReader (new FileReader (file));
        PrintWriter pw = new PrintWriter (new FileWriter (tempFile));
        String line = null;
        while ((line = br.readLine ()) != null) {
            if (! line.trim ().equals (lineToRemove)) {
                pw.println (line);
                pw.flush ();
            }
        }
        pw.close ();
        br.close ();
        if (! inFile.delete ()) {
            System.out.println ("Could not delete file");
            return;
        }
        if (! tempFile.renameTo (inFile)) System.out.println ("Could not rename file");

    } catch (FileNotFoundException ex) {
        ex.printStackTrace ();
    } catch (IOException ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public static void removeLineFromFile (File targetFile, String searchTerm) throws IOException {
    StringBuffer fileContents = new StringBuffer (FileUtils.readFileToString (targetFile));
    String [] fileContentLines = fileContents.toString ().split (System.lineSeparator ());
    emptyFile (targetFile);
    fileContents = new StringBuffer ();
    for (int fileContentLinesIndex = 0;
    fileContentLinesIndex < fileContentLines.length; fileContentLinesIndex ++) {
        if (fileContentLines [fileContentLinesIndex].contains (searchTerm)) {
            continue;
        }
        fileContents.append (fileContentLines [fileContentLinesIndex] + System.lineSeparator ());
    }
    FileUtils.writeStringToFile (targetFile, fileContents.toString ().trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1377279_1381041_1_50
1377279_39180577_13_64
Title: Find a line in a file and remove it 
----------------------------------------

public void removeLineFromFile (String file, String lineToRemove) {
    try {
        File inFile = new File (file);
        if (! inFile.isFile ()) {
            System.out.println ("Parameter is not an existing file");
            return;
        }
        File tempFile = new File (inFile.getAbsolutePath () + ".tmp");
        BufferedReader br = new BufferedReader (new FileReader (file));
        PrintWriter pw = new PrintWriter (new FileWriter (tempFile));
        String line = null;
        while ((line = br.readLine ()) != null) {
            if (! line.trim ().equals (lineToRemove)) {
                pw.println (line);
                pw.flush ();
            }
        }
        pw.close ();
        br.close ();
        if (! inFile.delete ()) {
            System.out.println ("Could not delete file");
            return;
        }
        if (! tempFile.renameTo (inFile)) System.out.println ("Could not rename file");

    } catch (FileNotFoundException ex) {
        ex.printStackTrace ();
    } catch (IOException ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public static void removeLineFromFile (String lineToRemove) {
    if (! file.exists ()) {
        try {
            file.createNewFile ();
        } catch (IOException e) {
            System.out.println ("File " + file.getName () + " not created successfully");
        }
    }
    File tempFile = new File (file.getAbsolutePath () + ".tmp");
    try (Scanner scanner = new Scanner (file)) {
        try (PrintWriter pw = new PrintWriter (new FileWriter (tempFile))) {
            String line;
            while (scanner.hasNextLine ()) {
                line = scanner.nextLine ();
                if (! line.trim ().equals (lineToRemove)) {
                    pw.println (line);
                    pw.flush ();
                }
            }
            if (! file.delete ()) {
                System.out.println ("Could not delete file");
                return;
            }
            if (! tempFile.renameTo (file)) System.out.println ("Could not rename file");

        }
    } catch (IOException e) {
        System.out.println ("IO Exception Occurred");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1377279_25810690_1_63
1377279_43279789_1_17
Title: Find a line in a file and remove it 
----------------------------------------

public static void deleteLine (String line, String filePath) {
    File file = new File (filePath);
    File file2 = new File (file.getParent () + "\\temp" + file.getName ());
    PrintWriter pw = null;
    Scanner read = null;
    FileInputStream fis = null;
    FileOutputStream fos = null;
    FileChannel src = null;
    FileChannel dest = null;
    try {
        pw = new PrintWriter (file2);
        read = new Scanner (file);
        while (read.hasNextLine ()) {
            String currline = read.nextLine ();
            if (line.equalsIgnoreCase (currline)) {
                continue;
            } else {
                pw.println (currline);
            }
        }
        pw.flush ();
        fis = new FileInputStream (file2);
        src = fis.getChannel ();
        fos = new FileOutputStream (file);
        dest = fos.getChannel ();
        dest.transferFrom (src, 0, src.size ());
    } catch (IOException e) {
        e.printStackTrace ();
    } finally {
        pw.close ();
        read.close ();
        try {
            fis.close ();
            fos.close ();
            src.close ();
            dest.close ();
        } catch (IOException e) {
            e.printStackTrace ();
        }
        if (file2.delete ()) {
            System.out.println ("File is deleted");
        } else {
            System.out.println ("Error occured! File: " + file2.getName () + " is not deleted!");
        }
    }
}
----------------------------------------

public static void deleteLine () throws IOException {
    RandomAccessFile file = new RandomAccessFile ("me.txt", "rw");
    String delete;
    String task = "";
    byte [] tasking;
    while ((delete = file.readLine ()) != null) {
        if (delete.startsWith ("BAD")) {
            continue;
        }
        task += delete + "\n";
    }
    System.out.println (task);
    BufferedWriter writer = new BufferedWriter (new FileWriter ("me.txt"));
    writer.write (task);
    file.close ();
    writer.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1377279_28247987_14_33
1377279_43067865_1_22
Title: Find a line in a file and remove it 
----------------------------------------

public static void main (String [] args) throws IOException {
    File inputFile = new File ("C://somelocation//Demographics.txt");
    File tempFile = new File ("C://somelocation//Demographics_report.txt");
    BufferedReader reader = new BufferedReader (new FileReader (inputFile));
    BufferedWriter writer = new BufferedWriter (new FileWriter (tempFile));
    String currentLine;
    while ((currentLine = reader.readLine ()) != null) {
        if (null != currentLine && ! currentLine.equalsIgnoreCase ("BBB")) {
            writer.write (currentLine + System.getProperty ("line.separator"));
        }
    }
    writer.close ();
    reader.close ();
    boolean successful = tempFile.renameTo (inputFile);
    System.out.println (successful);
}
----------------------------------------

public static void main (String [] args) throws IOException {
    File file = new File ("file.csv");
    CSVReader csvFileReader = new CSVReader (new FileReader (file));
    List < String [] > list = csvFileReader.readAll ();
    for (int i = 0;
    i < list.size (); i ++) {
        String [] filter = list.get (i);
        if (filter [0].equalsIgnoreCase ("bbb")) {
            list.remove (i);
        }
    }
    csvFileReader.close ();
    CSVWriter csvOutput = new CSVWriter (new FileWriter (file));
    csvOutput.writeAll (list);
    csvOutput.flush ();
    csvOutput.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1377279_28790330_13_61
1377279_29895658_1_23
Title: Find a line in a file and remove it 
----------------------------------------

public void removeLineFromFile (String file, String lineToRemove) {
    try {
        File inFile = new File (file);
        if (! inFile.isFile ()) {
            System.out.println ("Parameter is not an existing file");
            return;
        }
        File tempFile = new File (inFile.getAbsolutePath () + ".tmp");
        BufferedReader br = new BufferedReader (new FileReader (file));
        PrintWriter pw = new PrintWriter (new FileWriter (tempFile));
        String line = null;
        while ((line = br.readLine ()) != null) {
            if (! line.trim ().equals (lineToRemove)) {
                pw.println (line);
                pw.flush ();
            }
        }
        pw.close ();
        br.close ();
        if (! inFile.delete ()) {
            System.out.println ("Could not delete file");
            return;
        }
        if (! tempFile.renameTo (inFile)) System.out.println ("Could not rename file");

    } catch (FileNotFoundException ex) {
        ex.printStackTrace ();
    } catch (IOException ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public static void removeLineFromFile (File targetFile, String searchTerm) throws IOException {
    StringBuffer fileContents = new StringBuffer (FileUtils.readFileToString (targetFile));
    String [] fileContentLines = fileContents.toString ().split (System.lineSeparator ());
    emptyFile (targetFile);
    fileContents = new StringBuffer ();
    for (int fileContentLinesIndex = 0;
    fileContentLinesIndex < fileContentLines.length; fileContentLinesIndex ++) {
        if (fileContentLines [fileContentLinesIndex].contains (searchTerm)) {
            continue;
        }
        fileContents.append (fileContentLines [fileContentLinesIndex] + System.lineSeparator ());
    }
    FileUtils.writeStringToFile (targetFile, fileContents.toString ().trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1377279_28790330_13_61
1377279_39180577_13_64
Title: Find a line in a file and remove it 
----------------------------------------

public void removeLineFromFile (String file, String lineToRemove) {
    try {
        File inFile = new File (file);
        if (! inFile.isFile ()) {
            System.out.println ("Parameter is not an existing file");
            return;
        }
        File tempFile = new File (inFile.getAbsolutePath () + ".tmp");
        BufferedReader br = new BufferedReader (new FileReader (file));
        PrintWriter pw = new PrintWriter (new FileWriter (tempFile));
        String line = null;
        while ((line = br.readLine ()) != null) {
            if (! line.trim ().equals (lineToRemove)) {
                pw.println (line);
                pw.flush ();
            }
        }
        pw.close ();
        br.close ();
        if (! inFile.delete ()) {
            System.out.println ("Could not delete file");
            return;
        }
        if (! tempFile.renameTo (inFile)) System.out.println ("Could not rename file");

    } catch (FileNotFoundException ex) {
        ex.printStackTrace ();
    } catch (IOException ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

public static void removeLineFromFile (String lineToRemove) {
    if (! file.exists ()) {
        try {
            file.createNewFile ();
        } catch (IOException e) {
            System.out.println ("File " + file.getName () + " not created successfully");
        }
    }
    File tempFile = new File (file.getAbsolutePath () + ".tmp");
    try (Scanner scanner = new Scanner (file)) {
        try (PrintWriter pw = new PrintWriter (new FileWriter (tempFile))) {
            String line;
            while (scanner.hasNextLine ()) {
                line = scanner.nextLine ();
                if (! line.trim ().equals (lineToRemove)) {
                    pw.println (line);
                    pw.flush ();
                }
            }
            if (! file.delete ()) {
                System.out.println ("Could not delete file");
                return;
            }
            if (! tempFile.renameTo (file)) System.out.println ("Could not rename file");

        }
    } catch (IOException e) {
        System.out.println ("IO Exception Occurred");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1377279_29895658_1_23
1377279_39180577_13_64
Title: Find a line in a file and remove it 
----------------------------------------

public static void removeLineFromFile (File targetFile, String searchTerm) throws IOException {
    StringBuffer fileContents = new StringBuffer (FileUtils.readFileToString (targetFile));
    String [] fileContentLines = fileContents.toString ().split (System.lineSeparator ());
    emptyFile (targetFile);
    fileContents = new StringBuffer ();
    for (int fileContentLinesIndex = 0;
    fileContentLinesIndex < fileContentLines.length; fileContentLinesIndex ++) {
        if (fileContentLines [fileContentLinesIndex].contains (searchTerm)) {
            continue;
        }
        fileContents.append (fileContentLines [fileContentLinesIndex] + System.lineSeparator ());
    }
    FileUtils.writeStringToFile (targetFile, fileContents.toString ().trim ());
}
----------------------------------------

public static void removeLineFromFile (String lineToRemove) {
    if (! file.exists ()) {
        try {
            file.createNewFile ();
        } catch (IOException e) {
            System.out.println ("File " + file.getName () + " not created successfully");
        }
    }
    File tempFile = new File (file.getAbsolutePath () + ".tmp");
    try (Scanner scanner = new Scanner (file)) {
        try (PrintWriter pw = new PrintWriter (new FileWriter (tempFile))) {
            String line;
            while (scanner.hasNextLine ()) {
                line = scanner.nextLine ();
                if (! line.trim ().equals (lineToRemove)) {
                    pw.println (line);
                    pw.flush ();
                }
            }
            if (! file.delete ()) {
                System.out.println ("Could not delete file");
                return;
            }
            if (! tempFile.renameTo (file)) System.out.println ("Could not rename file");

        }
    } catch (IOException e) {
        System.out.println ("IO Exception Occurred");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13777726_13777815_13_22
13777726_13777852_34_48
Title: Splash Screen - Touch to Skip 
----------------------------------------

public void run () {
    try {
        sleep (12000);
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } finally {
        Intent openStartingPoint = new Intent ("android.intent.action.MENU");
        startActivity (openStartingPoint);
    }
}
----------------------------------------

public void run () {
    try {
        synchronized (this) {
            wait (12000);
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } finally {
        Intent openStartingPoint = new Intent ("android.intent.action.MENU");
        startActivity (openStartingPoint);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13777967_13778068_11_23
13777967_13779208_14_44
Title: reading from file and showing in textarea java 
----------------------------------------

public NameSwing () {
    frame.add (new JLabel ("Name"));
    textArea.setEditable (true);
    frame.add (textArea);
    btnView.addActionListener (this);
    frame.add (btnView);
    frame.setLayout (new FlowLayout ());
    frame.setSize (300, 100);
    frame.setVisible (true);
}
----------------------------------------

public NameSwing () {
    performFileRelatedTask ();
    f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    JPanel contentPane = new JPanel ();
    contentPane.setLayout (new BorderLayout (5, 5));
    JScrollPane scroller = new JScrollPane ();
    scroller.setBorder (BorderFactory.createLineBorder (Color.BLUE.darker (), 5));
    JPanel centerPanel = new JPanel ();
    centerPanel.setLayout (new BorderLayout (5, 5));
    centerPanel.add (new JLabel ("Name", JLabel.CENTER), BorderLayout.PAGE_START);
    tf.setBorder (BorderFactory.createEmptyBorder (5, 5, 5, 5));
    tf.setEditable (true);
    centerPanel.add (tf, BorderLayout.CENTER);
    scroller.setViewportView (centerPanel);
    JPanel footerPanel = new JPanel ();
    b.addActionListener (this);
    footerPanel.add (b);
    contentPane.add (scroller, BorderLayout.CENTER);
    contentPane.add (footerPanel, BorderLayout.PAGE_END);
    f.setContentPane (contentPane);
    f.pack ();
    f.setLocationByPlatform (true);
    f.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13778320_13778432_1_21
13778320_18814634_3_21
Title: Find all the elements which has no duplicate in multiple HashSet of Integers in Java 
----------------------------------------

public static void main (String [] args) {
    HashSet < Integer > set1 = new HashSet < Integer > ();
    set1.add (2);
    set1.add (4);
    set1.add (6);
    set1.add (8);
    set1.add (9);
    HashSet < Integer > set2 = new HashSet < Integer > ();
    set2.add (2);
    set2.add (8);
    set2.add (9);
    HashSet < Integer > set3 = new HashSet < Integer > ();
    set3.add (2);
    set3.add (4);
    set3.add (8);
    set3.add (9);
    set1.removeAll (set2);
    set1.removeAll (set3);
    System.out.println (set1);
}
----------------------------------------

public static void main (String [] args) throws Exception, IOException {
    int count = 0;
    HashSet < Integer > set1 = new HashSet < Integer > ();
    HashMap < Integer, String > ee = new HashMap < Integer, String > ();
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("how many elements u want to store");
    int n = Integer.parseInt (br.readLine ());
    System.out.println ("enter te element u want insert");
    for (int i = 0;
    i < n; i ++) {
        boolean x = set1.add (Integer.parseInt (br.readLine ()));
        if (x == false) {
            count ++;
        }
    }
    System.out.println ("no of duplicate elements is   " + count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13779643_13779686_1_8
13779643_13779879_1_11
Title: Sorting an array of strings in reverse alphabetical order in Java 
----------------------------------------

public static void sort (String [] arr) {
    for (int pass = 1;
    pass < arr.length; pass ++) {
        int largestPos = findSmallest (arr, arr.length - pass);
        if (largestPos != arr.length - pass) {
            swap (arr, largestPos, arr.length - pass);
        }
    }
}
----------------------------------------

public static void sort (String [] arr) {
    for (int pass = 1;
    pass < arr.length; pass ++) {
        int largestPos = findLargest (arr, pass - 1);
        if (largestPos != pass - 1) {
            swap (arr, largestPos, pass - 1);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13779643_13780011_1_25
13779643_34243148_4_17
Title: Sorting an array of strings in reverse alphabetical order in Java 
----------------------------------------

public static void main (String args []) {
    String [] arr = {"abc", "bac", "cbc"};
    String temp = "";
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i + 1;
        j < arr.length; j ++) {
            if (arr [j].compareTo (arr [i]) > 0) {
                temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    for (String val : arr) {
        System.out.println (val);
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] arrayString = new String [5];
    arrayString [0] = "Cat";
    arrayString [1] = "Apple";
    arrayString [2] = "Dog";
    arrayString [3] = "Mouse";
    arrayString [4] = "kitchen";
    Arrays.sort (arrayString);
    String [] arrReverse = new String [arrayString.length];
    for (int i = arrayString.length - 1;
    i >= 0; i --) {
        arrReverse [arrayString.length - 1 - i] = arrayString [i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13782154_13800851_61_79
13782154_13800851_88_104
Title: User only on definition for all my class 
----------------------------------------

AppConfigurationEntry [] testLdapExample1 () {
    String name = "org.jboss.security.auth.spi.LdapLoginModule";
    HashMap options = new HashMap ();
    options.put ("java.naming.factory.initial", "com.sun.jndi.ldap.LdapCtxFactory");
    options.put ("java.naming.provider.url", "ldap://127.0.0.1:10389/");
    options.put ("java.naming.security.authentication", "simple");
    options.put ("principalDNPrefix", "uid=");
    options.put ("principalDNSuffix", ",ou=users,o=myorg");
    options.put ("rolesCtxDN", "ou=groups,o=myorg");
    options.put ("uidAttributeID", "member");
    options.put ("matchOnUserDN", "true");
    options.put ("roleAttributeID", "cn");
    options.put ("roleAttributeIsDN", "false");
    AppConfigurationEntry ace = new AppConfigurationEntry (name, AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, options);
    AppConfigurationEntry [] entry = {ace};
    return entry;
}
----------------------------------------

public void testLdapExample1 () throws Exception {
    System.out.println ("testLdapExample1");
    UsernamePasswordHandler handler = new UsernamePasswordHandler ("nameuser", "passduser".toCharArray ());
    LoginContext lc = new LoginContext ("testLdapExample1", handler);
    lc.login ();
    Subject subject = lc.getSubject ();
    System.out.println ("Subject: " + subject);
    Set groups = subject.getPrincipals (Group.class);
    assertTrue ("Principals contains nameuser", subject.getPrincipals ().contains (new SimplePrincipal ("nameuser")));
    Group roles = (Group) groups.iterator ().next ();
    assertTrue ("admin is a role", roles.isMember (new SimplePrincipal ("admin")));
    lc.logout ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13806094_13806239_1_28
13806094_13806279_1_20
Title: "Search Method If Statement showing several times" 
----------------------------------------

public boolean search (String StudentlName) {
    boolean found = true;
    while (found == true) {
        for (int index = 0;
        index < lName.length; index ++) {
            if (StudentlName.equalsIgnoreCase (lName [index])) {
                System.out.println (course + "\n" + "Student ID = \t" + index + "\n" + unitTitle + "\n" + fName [index] + "\n" + lName [index] + "\n" + Marks [index] + "\n" + "\n");
                found = false;
                return true;
            }
        }
        System.out.println ("Student Not Found");
        return false;
    }
    return true;
}
----------------------------------------

public boolean search (String StudentlName) {
    for (int index = 0;
    index < lName.length; index ++) {
        if (StudentlName.equalsIgnoreCase (lName [index])) {
            System.out.println (course + "\n" + "Student ID = \t" + index + "\n" + unitTitle + "\n" + fName [index] + "\n" + lName [index] + "\n" + Marks [index] + "\n" + "\n");
            return true;
        }
    }
    System.out.println ("Student Not Found");
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13814314_13814724_1_10
13814314_14145560_1_12
Title: Keep a variable's value unchanging in Java 
----------------------------------------

public void cast (Player caster) {
    Location loc = caster.getTargetBlock (null, 512).getLocation ();
    for (int c = - 3;
    c < 3; c ++) for (int b = - 1;
    b < 5; b ++) for (int a = - 3;
    a < 3; a ++) {
        Block ice = caster.getWorld ().getBlockAt (loc.add (a, b, c));
        ice.setTypeId (79);
        loc = loc.subtract (a, b, c);
    }

}
----------------------------------------

public void cast (Player caster) {
    Location loc = caster.getTargetBlock (null, 512).getLocation ();
    for (int c = 0;
    c < 2; c ++) {
        for (int b = 0;
        b < 2; b ++) {
            for (int a = 0;
            a < 1; a ++) {
                caster.sendMessage ("" + loc);
                caster.getWorld ().getBlockAt (loc.clone ().add (a, b, c)).setTypeId (79);
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
138157_187056_110_119
138157_187056_77_84
Title: Java - Console-like web applet 
----------------------------------------

public void run () {
    try {
        String line;
        while ((line = bufferedReader.readLine ()) != null) {
            textArea.append (line + "\n");
        }
    } catch (IOException ioException) {
        textArea.append ("ERROR");
    }
}
----------------------------------------

public void run () {
    while (true) {
        jScrollBar.setValue (jScrollBar.getMaximum ());
        try {
            Thread.sleep (100);
        } catch (Exception e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13824065_13824658_173_199
13824065_13824658_230_252
Title: Close an Opened JInternalFrame that is been opened within another JInternalFrame while changing the tab of a JTabbedPane 
----------------------------------------

private void initComponents () {
    pane = new javax.swing.JDesktopPane ();
    jButton1 = new javax.swing.JButton ();
    pane.setBackground (new java.awt.Color (240, 240, 240));
    jButton1.setText ("SEARCH");
    jButton1.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed (evt);
        }}

    );
    jButton1.setBounds (170, 60, 90, 23);
    pane.add (jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (pane, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (pane, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE));
    pack ();
}
----------------------------------------

private void initComponents () {
    jLabel1 = new javax.swing.JLabel ();
    jLabel1.setText ("JIFrame2..............");
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (100, 100, 100).addComponent (jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (137, Short.MAX_VALUE)));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (86, 86, 86).addComponent (jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (145, Short.MAX_VALUE)));
    pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13824065_13824658_173_199
13824065_13824658_33_63
Title: Close an Opened JInternalFrame that is been opened within another JInternalFrame while changing the tab of a JTabbedPane 
----------------------------------------

private void initComponents () {
    pane = new javax.swing.JDesktopPane ();
    jButton1 = new javax.swing.JButton ();
    pane.setBackground (new java.awt.Color (240, 240, 240));
    jButton1.setText ("SEARCH");
    jButton1.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed (evt);
        }}

    );
    jButton1.setBounds (170, 60, 90, 23);
    pane.add (jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (pane, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (pane, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE));
    pack ();
}
----------------------------------------

private void initComponents () {
    tab1 = new javax.swing.JDesktopPane ();
    tab2 = new javax.swing.JDesktopPane ();
    setDefaultCloseOperation (javax.swing.WindowConstants.EXIT_ON_CLOSE);
    tabbedPane.setTabPlacement (javax.swing.JTabbedPane.LEFT);
    tabbedPane.addChangeListener (new javax.swing.event.ChangeListener () {
        public void stateChanged (javax.swing.event.ChangeEvent evt) {
            tabbedPaneStateChanged (evt);
        }}

    );
    tab1.setBackground (new java.awt.Color (240, 240, 240));
    tabbedPane.addTab ("Tabbedpane 1", tab1);
    tab2.setBackground (javax.swing.UIManager.getDefaults ().getColor ("Button.background"));
    tabbedPane.addTab ("Tabbedpane 2", tab2);
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE));
    pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13824065_13824658_173_199
13824065_13824658_95_152
Title: Close an Opened JInternalFrame that is been opened within another JInternalFrame while changing the tab of a JTabbedPane 
----------------------------------------

private void initComponents () {
    pane = new javax.swing.JDesktopPane ();
    jButton1 = new javax.swing.JButton ();
    pane.setBackground (new java.awt.Color (240, 240, 240));
    jButton1.setText ("SEARCH");
    jButton1.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed (evt);
        }}

    );
    jButton1.setBounds (170, 60, 90, 23);
    pane.add (jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (pane, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (pane, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE));
    pack ();
}
----------------------------------------

private void initComponents () {
    jTextField1 = new javax.swing.JTextField ();
    jScrollPane1 = new javax.swing.JScrollPane ();
    jTable1 = new javax.swing.JTable ();
    jButton1 = new javax.swing.JButton ();
    jTextField1.setBorder (javax.swing.BorderFactory.createBevelBorder (javax.swing.border.BevelBorder.LOWERED));
    jTable1.setModel (new javax.swing.table.DefaultTableModel (new Object [] [] {{null, null, null, null}, {null, null, null, null}, {null, null, null, null}, {null, null, null, null}}, new String [] {"Title 1", "Title 2", "Title 3", "Title 4"}));
    jScrollPane1.setViewportView (jTable1);
    jButton1.setText ("CLOSE");
    jButton1.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed (evt);
        }}

    );
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addContainerGap ().addGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addComponent (jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE).addContainerGap ()).addGroup (layout.createSequentialGroup ().addComponent (jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (205, Short.MAX_VALUE)))).addGroup (layout.createSequentialGroup ().addGap (158, 158, 158).addComponent (jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (172, Short.MAX_VALUE)));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (22, 22, 22).addComponent (jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap (18, 18, 18).addComponent (jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE).addGap (18, 18, 18).addComponent (jButton1).addContainerGap (javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13824065_13824658_230_252
13824065_13824658_33_63
Title: Close an Opened JInternalFrame that is been opened within another JInternalFrame while changing the tab of a JTabbedPane 
----------------------------------------

private void initComponents () {
    jLabel1 = new javax.swing.JLabel ();
    jLabel1.setText ("JIFrame2..............");
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (100, 100, 100).addComponent (jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (137, Short.MAX_VALUE)));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (86, 86, 86).addComponent (jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (145, Short.MAX_VALUE)));
    pack ();
}
----------------------------------------

private void initComponents () {
    tab1 = new javax.swing.JDesktopPane ();
    tab2 = new javax.swing.JDesktopPane ();
    setDefaultCloseOperation (javax.swing.WindowConstants.EXIT_ON_CLOSE);
    tabbedPane.setTabPlacement (javax.swing.JTabbedPane.LEFT);
    tabbedPane.addChangeListener (new javax.swing.event.ChangeListener () {
        public void stateChanged (javax.swing.event.ChangeEvent evt) {
            tabbedPaneStateChanged (evt);
        }}

    );
    tab1.setBackground (new java.awt.Color (240, 240, 240));
    tabbedPane.addTab ("Tabbedpane 1", tab1);
    tab2.setBackground (javax.swing.UIManager.getDefaults ().getColor ("Button.background"));
    tabbedPane.addTab ("Tabbedpane 2", tab2);
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE));
    pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13824065_13824658_230_252
13824065_13824658_95_152
Title: Close an Opened JInternalFrame that is been opened within another JInternalFrame while changing the tab of a JTabbedPane 
----------------------------------------

private void initComponents () {
    jLabel1 = new javax.swing.JLabel ();
    jLabel1.setText ("JIFrame2..............");
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (100, 100, 100).addComponent (jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (137, Short.MAX_VALUE)));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (86, 86, 86).addComponent (jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (145, Short.MAX_VALUE)));
    pack ();
}
----------------------------------------

private void initComponents () {
    jTextField1 = new javax.swing.JTextField ();
    jScrollPane1 = new javax.swing.JScrollPane ();
    jTable1 = new javax.swing.JTable ();
    jButton1 = new javax.swing.JButton ();
    jTextField1.setBorder (javax.swing.BorderFactory.createBevelBorder (javax.swing.border.BevelBorder.LOWERED));
    jTable1.setModel (new javax.swing.table.DefaultTableModel (new Object [] [] {{null, null, null, null}, {null, null, null, null}, {null, null, null, null}, {null, null, null, null}}, new String [] {"Title 1", "Title 2", "Title 3", "Title 4"}));
    jScrollPane1.setViewportView (jTable1);
    jButton1.setText ("CLOSE");
    jButton1.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed (evt);
        }}

    );
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addContainerGap ().addGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addComponent (jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE).addContainerGap ()).addGroup (layout.createSequentialGroup ().addComponent (jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (205, Short.MAX_VALUE)))).addGroup (layout.createSequentialGroup ().addGap (158, 158, 158).addComponent (jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (172, Short.MAX_VALUE)));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (22, 22, 22).addComponent (jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap (18, 18, 18).addComponent (jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE).addGap (18, 18, 18).addComponent (jButton1).addContainerGap (javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13824065_13824658_33_63
13824065_13824658_95_152
Title: Close an Opened JInternalFrame that is been opened within another JInternalFrame while changing the tab of a JTabbedPane 
----------------------------------------

private void initComponents () {
    tab1 = new javax.swing.JDesktopPane ();
    tab2 = new javax.swing.JDesktopPane ();
    setDefaultCloseOperation (javax.swing.WindowConstants.EXIT_ON_CLOSE);
    tabbedPane.setTabPlacement (javax.swing.JTabbedPane.LEFT);
    tabbedPane.addChangeListener (new javax.swing.event.ChangeListener () {
        public void stateChanged (javax.swing.event.ChangeEvent evt) {
            tabbedPaneStateChanged (evt);
        }}

    );
    tab1.setBackground (new java.awt.Color (240, 240, 240));
    tabbedPane.addTab ("Tabbedpane 1", tab1);
    tab2.setBackground (javax.swing.UIManager.getDefaults ().getColor ("Button.background"));
    tabbedPane.addTab ("Tabbedpane 2", tab2);
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addComponent (tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE));
    pack ();
}
----------------------------------------

private void initComponents () {
    jTextField1 = new javax.swing.JTextField ();
    jScrollPane1 = new javax.swing.JScrollPane ();
    jTable1 = new javax.swing.JTable ();
    jButton1 = new javax.swing.JButton ();
    jTextField1.setBorder (javax.swing.BorderFactory.createBevelBorder (javax.swing.border.BevelBorder.LOWERED));
    jTable1.setModel (new javax.swing.table.DefaultTableModel (new Object [] [] {{null, null, null, null}, {null, null, null, null}, {null, null, null, null}, {null, null, null, null}}, new String [] {"Title 1", "Title 2", "Title 3", "Title 4"}));
    jScrollPane1.setViewportView (jTable1);
    jButton1.setText ("CLOSE");
    jButton1.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed (evt);
        }}

    );
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout (getContentPane ());
    getContentPane ().setLayout (layout);
    layout.setHorizontalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addContainerGap ().addGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addComponent (jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE).addContainerGap ()).addGroup (layout.createSequentialGroup ().addComponent (jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (205, Short.MAX_VALUE)))).addGroup (layout.createSequentialGroup ().addGap (158, 158, 158).addComponent (jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap (172, Short.MAX_VALUE)));
    layout.setVerticalGroup (layout.createParallelGroup (javax.swing.GroupLayout.Alignment.LEADING).addGroup (layout.createSequentialGroup ().addGap (22, 22, 22).addComponent (jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap (18, 18, 18).addComponent (jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE).addGap (18, 18, 18).addComponent (jButton1).addContainerGap (javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    pack ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13851356_13851369_1_11
13851356_13852715_15_27
Title: Java: how to change code from button click to onload 
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    NameSwing nameSwing = new NameSwing ();
    Names t = new Names ();
    t.OpenFile ();
    t.ReadFile ();
    t.CloseFile ();
    fullName = Names.fullName;
    tf.setText (fullName);
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    NameSwing nameSwing = new NameSwing ();
    Names t = new Names ();
    t.OpenFile ();
    t.ReadFile ();
    t.CloseFile ();
    fullName = Names.fullName;
    nameSwing.fillTextArea ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13853621_13866042_34_60
13853621_13870874_110_127
Title: Multiple Components in one column of JavaFX TableView 
----------------------------------------

public void updateItem (Object item, boolean empty) {
    super.updateItem (item, empty);
    if (empty) {
        setText (null);
        setGraphic (null);
    } else {
        if (isEditing ()) {
            if (getItem () instanceof Boolean) {
                if (checkBox != null) {
                    checkBox.setSelected (getBoolean ());
                }
                setText (null);
                setGraphic (checkBox);
            } else {
                if (textField != null) {
                    textField.setText (getString ());
                }
                setText (null);
                setGraphic (textField);
            }
        } else {
            setText (getString ());
            setGraphic (null);
        }
    }
}
----------------------------------------

protected void updateItem (String item, boolean empty) {
    super.updateItem (item, empty);
    if (empty) {
        setText (null);
        setGraphic (null);
        System.out.println ("In empty");
    } else {
        if (getTableView ().getColumns ().get (1).getCellData (getIndex ()).toString ().startsWith ("M")) {
            System.out.println ("Making ComboBox");
            setGraphic (comboBox);
        } else {
            setGraphic (textField);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13858092_13858431_1_29
13858092_51034115_1_37
Title: Unable to display received messages with SMACK api in JAVA 
----------------------------------------

@Override
public void processMessage (Chat arg0, Message arg1) {
    try {
        SwingUtilities.invokeAndWait (new Runnable () {
            @Override
            public void run () {
                board.setText (board.getText () + arg1.getBody ());
            }}

        );
    } catch (InvocationTargetException e) {
        e.printStackTrace ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println (arg1.getFrom () + ":" + arg1.getBody ().toString ());
}
----------------------------------------

public void processMessage (Chat aChat, Message aMessage) {
    final XmppBot bot = this.xmppBot;
    final Chat chat = aChat;
    final Message message = aMessage;
    log.debug ("message received, type {}", message.getType ().toString ());
    if (message.getBody () != null) {
        Runnable runnable = new Runnable () {
            public void run () {
                Thread.currentThread ().setName ("Chat: " + chat.getParticipant () + " Message: " + message.getBody ());
                PrintWriter threadPrintWriter = null;
                threadPrintWriter = new PrintWriter (new ChatWriter (chat));
                bot.getContext ().setChat (chat);
                bot.getContext ().setPrintWriter (threadPrintWriter);
                bot.processCommand (message.getBody ());
                bot.getContext ().removeMultiUserChat ();
                bot.getContext ().removePrintWriter ();
            }}

        ;
        Thread t = new Thread (runnable);
        t.start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1386107_1386858_63_82
1386107_17205988_1_25
Title: Text Extraction from HTML Java 
----------------------------------------

public static void main (String [] args) throws IOException {
    ParserCallbackTest parser = new ParserCallbackTest ();
    Reader reader = new FileReader (args [0]);
    try {
        new ParserDelegator ().parse (reader, parser, true);
    } catch (IOException e) {
        System.out.println (e);
    }
}
----------------------------------------

public static void main (String [] args) {
    String url = "http://en.wikipedia.org/wiki/Big_data";
    Document document;
    try {
        document = Jsoup.connect (url).get ();
        Elements paragraphs = document.select ("p");
        Element firstParagraph = paragraphs.first ();
        Element lastParagraph = paragraphs.last ();
        Element p;
        int i = 1;
        p = firstParagraph;
        System.out.println ("*  " + p.text ());
        while (p != lastParagraph) {
            p = paragraphs.get (i);
            System.out.println ("*  " + p.text ());
            i ++;
        }
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13865235_13865774_27_59
13865235_13865774_5_19
Title: Nested For Loops Dynamic Depth Java 
----------------------------------------

public static void main (String [] args) {
    char [] values = {'a', 'b', 'c', 'd'};
    int n = values.length;
    int r = 2;
    int i [] = new int [r];
    int rc = 0;
    for (int j = 0;
    j < Math.pow (n, r); j ++) {
        rc = 0;
        while (rc < r) {
            System.out.print (values [i [rc]] + " ");
            rc ++;
        }
        System.out.println ();
        rc = 0;
        while (rc < r) {
            if (i [rc] < n - 1) {
                i [rc] ++;
                break;
            } else {
                i [rc] = 0;
            }
            rc ++;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    char [] values = {'a', 'b', 'c', 'd'};
    int n = values.length;
    int r = 2;
    int i = 0, j = 0;
    for (i = 0; i < n; i ++) {
        for (j = 0; j < n; j ++) {
            System.out.println (values [j] + " " + values [i]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13873455_13873835_32_41
13873455_13873835_7_15
Title: How do I implement thread wait notify in this case? 
----------------------------------------

public void doSomething () {
    synchronized (example) {
        System.out.println ("waiting for example 1 to complete");
        try {
            example.wait ();
        } catch (InterruptedException ignore) {
        }
    }
    System.out.println ("Do something");
}
----------------------------------------

public void doSomething () {
    synchronized (this) {
        System.out.println ("Do something else");
        try {
            Thread.sleep (1000);
            this.notify ();
        } catch (InterruptedException ignore) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13873455_13873835_32_41
13873455_13874042_3_24
Title: How do I implement thread wait notify in this case? 
----------------------------------------

public void doSomething () {
    synchronized (example) {
        System.out.println ("waiting for example 1 to complete");
        try {
            example.wait ();
        } catch (InterruptedException ignore) {
        }
    }
    System.out.println ("Do something");
}
----------------------------------------

public void doSomething () throws InterruptedException {
    final CountDownLatch latch = new CountDownLatch (1);
    Thread thread = new Thread () {
        public void run () {
            System.out.println ("do something");
            latch.countDown ();
        }}

    ;
    System.out.println ("waiting for execution of method in your example class");
    thread.start ();
    latch.await (3000, TimeUnit.MILLISECONDS);
    System.out.println ("now i can execute from example 2 do something else");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13873455_13873835_7_15
13873455_13874042_3_24
Title: How do I implement thread wait notify in this case? 
----------------------------------------

public void doSomething () {
    synchronized (this) {
        System.out.println ("Do something else");
        try {
            Thread.sleep (1000);
            this.notify ();
        } catch (InterruptedException ignore) {
        }
    }
}
----------------------------------------

public void doSomething () throws InterruptedException {
    final CountDownLatch latch = new CountDownLatch (1);
    Thread thread = new Thread () {
        public void run () {
            System.out.println ("do something");
            latch.countDown ();
        }}

    ;
    System.out.println ("waiting for execution of method in your example class");
    thread.start ();
    latch.await (3000, TimeUnit.MILLISECONDS);
    System.out.println ("now i can execute from example 2 do something else");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13904484_13904572_22_59
13904484_15750138_7_27
Title: java random number chooser 
----------------------------------------

public static int getRandom (int...excludeNumbers) {
    int random;
    regeneration : while (true) {
        random = 1 + (int) (Math.random () * 54);
        for (int i = 0;
        i < excludeNumbers.length; i ++) {
            if (excludeNumbers [i] == random) {
                continue regeneration;
            }
        }
        System.out.println ("\n(for test only) next random number: " + random);
        break regeneration;
    }
    return random;
}
----------------------------------------

public static int getRandom (int...numbers) {
    int n = (int) (Math.random () * 54) + 1;
    boolean newRandom = false;
    boolean getNew = false;
    while (getNew == false) {
        for (int i = 0;
        (i < numbers.length) && newRandom == false; i ++) {
            if (n == numbers [i]) {
                newRandom = true;
            }
        }
        if (newRandom) {
            n = (int) (Math.random () * 54) + 1;
            getNew = false;
            newRandom = false;
        } else getNew = true;

    }
    return n;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13904484_13904572_22_59
13904484_31762428_1_25
Title: java random number chooser 
----------------------------------------

public static int getRandom (int...excludeNumbers) {
    int random;
    regeneration : while (true) {
        random = 1 + (int) (Math.random () * 54);
        for (int i = 0;
        i < excludeNumbers.length; i ++) {
            if (excludeNumbers [i] == random) {
                continue regeneration;
            }
        }
        System.out.println ("\n(for test only) next random number: " + random);
        break regeneration;
    }
    return random;
}
----------------------------------------

public static int getRandom (int...numbers) {
    final Random random = new Random ();
    final int [] arr1 = new int [54];
    int count = 54;
    for (int i = 0;
    i < arr1.length; ++ i) {
        arr1 [i] = i + 1;
    }
    for (int i = 0;
    i < numbers.length; ++ i) {
        final int n = numbers [i];
        if (arr1 [n] != 0) {
            -- count;
        }
        arr1 [n] = 0;
    }
    final int [] arr2 = new int [count];
    for (int i = 0, j = 0;
    i < arr2.length; ++ i, ++ j) {
        if (arr1 [j] == 0) {
            ++ j;
        } else {
            arr2 [i] = arr1 [j];
        }
    }
    return arr2 [random.nextInt (count)];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13904484_13904572_22_59
13904484_32133936_7_22
Title: java random number chooser 
----------------------------------------

public static int getRandom (int...excludeNumbers) {
    int random;
    regeneration : while (true) {
        random = 1 + (int) (Math.random () * 54);
        for (int i = 0;
        i < excludeNumbers.length; i ++) {
            if (excludeNumbers [i] == random) {
                continue regeneration;
            }
        }
        System.out.println ("\n(for test only) next random number: " + random);
        break regeneration;
    }
    return random;
}
----------------------------------------

public static int getRandom (int a, int...numbers) {
    System.out.println ("x1: " + a);
    for (int j = 0;
    j < numbers.length;) {
        if (numbers [j] == a) {
            a = 1 + (int) (Math.random () * 54);
            System.out.println ("x2: " + a);
            j = 0;
            continue;
        }
        j ++;
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13904484_15750138_7_27
13904484_31762428_1_25
Title: java random number chooser 
----------------------------------------

public static int getRandom (int...numbers) {
    int n = (int) (Math.random () * 54) + 1;
    boolean newRandom = false;
    boolean getNew = false;
    while (getNew == false) {
        for (int i = 0;
        (i < numbers.length) && newRandom == false; i ++) {
            if (n == numbers [i]) {
                newRandom = true;
            }
        }
        if (newRandom) {
            n = (int) (Math.random () * 54) + 1;
            getNew = false;
            newRandom = false;
        } else getNew = true;

    }
    return n;
}
----------------------------------------

public static int getRandom (int...numbers) {
    final Random random = new Random ();
    final int [] arr1 = new int [54];
    int count = 54;
    for (int i = 0;
    i < arr1.length; ++ i) {
        arr1 [i] = i + 1;
    }
    for (int i = 0;
    i < numbers.length; ++ i) {
        final int n = numbers [i];
        if (arr1 [n] != 0) {
            -- count;
        }
        arr1 [n] = 0;
    }
    final int [] arr2 = new int [count];
    for (int i = 0, j = 0;
    i < arr2.length; ++ i, ++ j) {
        if (arr1 [j] == 0) {
            ++ j;
        } else {
            arr2 [i] = arr1 [j];
        }
    }
    return arr2 [random.nextInt (count)];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13904484_15750138_7_27
13904484_32133936_7_22
Title: java random number chooser 
----------------------------------------

public static int getRandom (int...numbers) {
    int n = (int) (Math.random () * 54) + 1;
    boolean newRandom = false;
    boolean getNew = false;
    while (getNew == false) {
        for (int i = 0;
        (i < numbers.length) && newRandom == false; i ++) {
            if (n == numbers [i]) {
                newRandom = true;
            }
        }
        if (newRandom) {
            n = (int) (Math.random () * 54) + 1;
            getNew = false;
            newRandom = false;
        } else getNew = true;

    }
    return n;
}
----------------------------------------

public static int getRandom (int a, int...numbers) {
    System.out.println ("x1: " + a);
    for (int j = 0;
    j < numbers.length;) {
        if (numbers [j] == a) {
            a = 1 + (int) (Math.random () * 54);
            System.out.println ("x2: " + a);
            j = 0;
            continue;
        }
        j ++;
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13904484_31762428_1_25
13904484_32133936_7_22
Title: java random number chooser 
----------------------------------------

public static int getRandom (int...numbers) {
    final Random random = new Random ();
    final int [] arr1 = new int [54];
    int count = 54;
    for (int i = 0;
    i < arr1.length; ++ i) {
        arr1 [i] = i + 1;
    }
    for (int i = 0;
    i < numbers.length; ++ i) {
        final int n = numbers [i];
        if (arr1 [n] != 0) {
            -- count;
        }
        arr1 [n] = 0;
    }
    final int [] arr2 = new int [count];
    for (int i = 0, j = 0;
    i < arr2.length; ++ i, ++ j) {
        if (arr1 [j] == 0) {
            ++ j;
        } else {
            arr2 [i] = arr1 [j];
        }
    }
    return arr2 [random.nextInt (count)];
}
----------------------------------------

public static int getRandom (int a, int...numbers) {
    System.out.println ("x1: " + a);
    for (int j = 0;
    j < numbers.length;) {
        if (numbers [j] == a) {
            a = 1 + (int) (Math.random () * 54);
            System.out.println ("x2: " + a);
            j = 0;
            continue;
        }
        j ++;
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13917543_13917637_1_10
13917543_13918244_1_12
Title: Making an Array out of an ArrayList containing Arraylists 
----------------------------------------

public static double [] [] to2DArray (List < List < Double > > input) {
    double [] [] output = new double [input.size ()] [];
    for (int i = 0;
    i < input.size (); i ++) {
        output [i] = new double [input.get (i).size ()];
        for (int j = 0;
        j < input.get (i).size (); j ++) {
            output [i] [j] = input.get (i).get (j);
        }
    }
    return output;
}
----------------------------------------

private Double [] [] to2DArray (ArrayList < ArrayList < Double > > data) {
    Double [] [] result = new Double [data.size ()] [];
    Double [] temp;
    int mainIdx = 0;
    for (List < Double > arrayOfDouble : data) {
        temp = new Double [arrayOfDouble.size ()];
        result [mainIdx ++] = arrayOfDouble.toArray (temp);
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13918167_13918422_1_42
13918167_13919833_1_24
Title: Java exercise - display table with 2d array 
----------------------------------------

public static void main (String [] args) {
    int num = 5;
    int [] [] figures = new int [num] [num];
    for (int row = 0;
    row < figures.length; ++ row) {
        for (int col = 0;
        col < figures [row].length; ++ col) {
            figures [row] [col] = (row + col) % num + 1;
        }
    }
    for (int row = 0;
    row < figures.length; ++ row) {
        for (int col = 0;
        col < figures [row].length; ++ col) {
            System.out.print ("+-");
        }
        System.out.println ("+");
        System.out.print ("|");
        for (int col = 0;
        col < figures [row].length; ++ col) {
            System.out.print (figures [row] [col]);
            System.out.print ("|");
        }
        System.out.println ();
    }
    for (int col = 0;
    col < figures [0].length; ++ col) {
        System.out.print ("+-");
    }
    System.out.println ("+");
}
----------------------------------------

public static void main (String [] args) {
    final int num = 5;
    final int [] [] data = new int [num] [num];
    for (int r = 0;
    r < data.length; r ++) {
        for (int c = 0;
        c < data [r].length; c ++) {
            final int t = r + c + 1;
            data [r] [c] = t <= num ? t : t - num;
        }
    }
    final StringBuilder sb = new StringBuilder ("+");
    for (int i = 0;
    i < data.length; i ++) sb.append ("-+");

    for (int r = 0;
    r < data.length; r ++) {
        System.out.println (sb.toString ());
        for (int c = 0;
        c < data.length; c ++) System.out.print ("|" + data [r] [c]);

        System.out.println ("|");
    }
    System.out.println (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13923980_13924008_16_24
13923980_13924008_27_35
Title: Controlling Thread access with semaphores in JAVA 
----------------------------------------

public void run () {
    try {
        sem.acquire ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("B");
    sem.release ();
}
----------------------------------------

public void run () {
    try {
        sem.acquire ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("C");
    sem.release ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13923980_13924008_16_24
13923980_13924008_5_13
Title: Controlling Thread access with semaphores in JAVA 
----------------------------------------

public void run () {
    try {
        sem.acquire ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("B");
    sem.release ();
}
----------------------------------------

public void run () {
    try {
        sem.acquire ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("A");
    sem.release ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13923980_13924008_27_35
13923980_13924008_5_13
Title: Controlling Thread access with semaphores in JAVA 
----------------------------------------

public void run () {
    try {
        sem.acquire ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("C");
    sem.release ();
}
----------------------------------------

public void run () {
    try {
        sem.acquire ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.println ("A");
    sem.release ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13946859_13947020_1_16
13946859_13947071_1_24
Title: Retrieve the file name while using file type input 
----------------------------------------

public String convertFile (HttpServletRequest request, HttpSession session) {
    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
    CommonsMultipartFile multipartFile = null;
    Iterator < String > iterator = multipartRequest.getFileNames ();
    while (iterator.hasNext ()) {
        String key = (String) iterator.next ();
        multipartFile = (CommonsMultipartFile) multipartRequest.getFile (key);
    }
}
----------------------------------------

public String convertFile (HttpServletRequest request, HttpSession session) {
    boolean isMultipart = ServletFileUpload.isMultipartContent (request);
    if (! isMultipart) {
        out.println ("File Not Uploaded");
    } else {
        FileItemFactory factory = new DiskFileItemFactory ();
        ServletFileUpload upload = new ServletFileUpload (factory);
        List items = null;
        try {
            items = upload.parseRequest (request);
        } catch (FileUploadException e) {
            e.printStackTrace ();
        }
        try {
            FileItem file = (FileItem) items.get (0);
            out.print ("Field Name :" + file.getFieldName ());
            out.print ("Content Type :" + file.getContentType ());
            out.print ("File Name :" + file.getName ());
        } catch (Exception e) {
            out.print (e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13954848_13954911_8_43
13954848_13955194_2_11
Title: Looping Algorithm 
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;

        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void stars (int size) {
    for (int i = 0;
    i < size * size; i ++) {
        int y = i / size, x = i % size;
        System.out.print ((x >= y && x < size - y) || (x >= size - y - 1 && x <= y) ? '*' : ' ');
        if (x == size - 1) System.out.println ();

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13954848_13954911_8_43
13954848_13955853_1_25
Title: Looping Algorithm 
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;

        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void stars () {
    for (int i = 7;
    i >= 1; i -= 2) {
        for (int k = 0;
        k < ((7 - i) / 2); k ++) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ("");
    }
    for (int i = 1;
    i <= 7; i += 2) {
        for (int k = 0;
        k < ((7 - i) / 2); k ++) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13954848_13955194_2_11
13954848_13955853_1_25
Title: Looping Algorithm 
----------------------------------------

public static void stars (int size) {
    for (int i = 0;
    i < size * size; i ++) {
        int y = i / size, x = i % size;
        System.out.print ((x >= y && x < size - y) || (x >= size - y - 1 && x <= y) ? '*' : ' ');
        if (x == size - 1) System.out.println ();

    }
}
----------------------------------------

public static void stars () {
    for (int i = 7;
    i >= 1; i -= 2) {
        for (int k = 0;
        k < ((7 - i) / 2); k ++) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ("");
    }
    for (int i = 1;
    i <= 7; i += 2) {
        for (int k = 0;
        k < ((7 - i) / 2); k ++) {
            System.out.print (" ");
        }
        for (int j = 1;
        j <= i; j ++) {
            System.out.print ("*");
        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13961125_13961524_4_34
13961125_13961626_6_18
Title: Recursive Flood Fill - Checking Boundries 
----------------------------------------

public static void fill (int [] [] map, int col, int row, int color, int oldColor) {
    System.out.println ("row is: " + row + "col is:" + col);
    if ((row <= 0) || (row >= map.length) || (col <= 0) || (col >= map.length)) return;

    if (map [row] [col] == color) return;

    if (map [row] [col] == oldColor) {
        map [row] [col] = color;
    }
    if (col + 1 <= map.length) {
        fill (map, col + 1, row, color, oldColor);
    }
    if ((col - 1) <= 0) {
        fill (map, col - 1, row, color, oldColor);
    }
    if (row + 1 <= map.length) {
        fill (map, col, row + 1, color, oldColor);
    }
    if ((row - 1) <= 0) {
        fill (map, col, row - 1, color, oldColor);
    }
}
----------------------------------------

public static void fill (int [] [] map, int row, int col, int color, int oldColor) {
    if (map [row] [col] == oldColor) {
        map [row] [col] = color;
        if (col + 1 < map [row].length) fill (map, row, col + 1, color, oldColor);

        if (col > 0) fill (map, row, col - 1, color, oldColor);

        if (row + 1 < map.length) fill (map, row + 1, col, color, oldColor);

        if (row > 0) fill (map, row - 1, col, color, oldColor);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13962743_13962819_1_26
13962743_13962820_1_26
Title: method flow control 
----------------------------------------

private void jButton1ActionPerformed (java.awt.event.ActionEvent evt) {
    try {
        setFName (jTextField1.getText ());
        if (havedigit (getFName ())) {
            jLabel6.setText ("First name error!");
            return;
        }
        setLName (jTextField2.getText ());
        if (havedigit (lastName)) {
            jLabel6.setText ("Last name error!");
            return;
        }
        WriteToFile (getFName ());
        WriteToFile (getLName ());
        setDate (Integer.parseInt (jTextField3.getText ()));
        WriteToFile (String.valueOf (getDate ()));
        Random rnd1 = new Random ();
        Registration_Number = rnd1.nextInt (100);
        setRegNum (Registration_Number);
        WriteToFile (String.valueOf (getRegNum ()));
        jLabel6.setText (String.valueOf (getRegNum ()));
    } catch (Exception e) {
        jLabel6.setText ("Error!");
    }
}
----------------------------------------

private void jButton1ActionPerformed (java.awt.event.ActionEvent evt) {
    try {
        setFName (jTextField1.getText ());
        setLName (jTextField2.getText ());
        boolean firstNameHasDigit = havedigit (getFName ());
        boolean lastNameHasDigit = havedigit (getLName ());
        if (firstNameHasDigit || lastNameHasDigit) {
            jLabel6.setText ("Names cannot contain digits");
        } else {
            WriteToFile (getFName ());
            WriteToFile (getLName ());
            setDate (Integer.parseInt (jTextField3.getText ()));
            WriteToFile (String.valueOf (getDate ()));
            Random rnd1 = new Random ();
            Registration_Number = rnd1.nextInt (100);
            setRegNum (Registration_Number);
            WriteToFile (String.valueOf (getRegNum ()));
            jLabel6.setText (String.valueOf (getRegNum ()));
        }
    } catch (Exception e) {
        jLabel6.setText ("Error!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13985796_13985912_1_13
13985796_13985990_1_12
Title: Sum of all digits for a given Positive Number 
----------------------------------------

public int compute (int methParam) {
    int sum = 0;
    for (int i = 0;
    methParam > 10; i ++) {
        int currentDigit = methParam % 10;
        methParam = methParam / 10;
        sum = sum + currentDigit;
    }
    if (sum + methParam > 10) {
        return compute (sum + methParam);
    } else {
        return sum + methParam;
    }
}
----------------------------------------

public static int compute (int param) {
    int sum = 0;
    do {
        sum = 0;
        while (param > 0) {
            sum += param % 10;
            param /= 10;
        }
        param = sum;
    } while (sum >= 10);
    return sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13985796_13985912_1_13
13985796_13986164_3_21
Title: Sum of all digits for a given Positive Number 
----------------------------------------

public int compute (int methParam) {
    int sum = 0;
    for (int i = 0;
    methParam > 10; i ++) {
        int currentDigit = methParam % 10;
        methParam = methParam / 10;
        sum = sum + currentDigit;
    }
    if (sum + methParam > 10) {
        return compute (sum + methParam);
    } else {
        return sum + methParam;
    }
}
----------------------------------------

public int compute (int MethParam) {
    int rem = MethParam % 10;
    Sum += rem;
    MethParam = MethParam / 10;
    if (MethParam > 10) compute (MethParam);
    else Sum += MethParam;

    if (Sum >= 10) {
        int temp = Sum;
        Sum = 0;
        compute (temp);
    }
    return Sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13985796_13985934_1_11
13985796_13986412_37_47
Title: Sum of all digits for a given Positive Number 
----------------------------------------

public int FindSumDigit (int number) {
    if (number < 10) return number;

    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number = number / 10;
    }
    return FindSumDigit (sum);
}
----------------------------------------

public static int FindSumDigit (int n) {
    if (n < 10) return n;

    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n = n / 10;
    }
    return FindSumDigit (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13985796_13985990_1_12
13985796_13986164_3_21
Title: Sum of all digits for a given Positive Number 
----------------------------------------

public static int compute (int param) {
    int sum = 0;
    do {
        sum = 0;
        while (param > 0) {
            sum += param % 10;
            param /= 10;
        }
        param = sum;
    } while (sum >= 10);
    return sum;
}
----------------------------------------

public int compute (int MethParam) {
    int rem = MethParam % 10;
    Sum += rem;
    MethParam = MethParam / 10;
    if (MethParam > 10) compute (MethParam);
    else Sum += MethParam;

    if (Sum >= 10) {
        int temp = Sum;
        Sum = 0;
        compute (temp);
    }
    return Sum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13993612_14004585_490_517
13993612_14004585_53_113
Title: problems revalidating/repainting button panel 
----------------------------------------

public void mouseReleased (MouseEvent e) {
    super.mouseReleased (e);
    if (! potentialDrag) {
        return;
    }
    source.removeMouseMotionListener (this);
    potentialDrag = false;
    if (changeCursor) {
        source.setCursor (originalCursor);
    }
    if (destination instanceof JComponent) {
        ((JComponent) destination).setAutoscrolls (autoscrolls);
    }
    if (autoLayout) {
        if (destination instanceof JComponent) {
            ((JComponent) destination).revalidate ();
        } else {
            destination.revalidate ();
        }
        destination.repaint ();
    }
}
----------------------------------------

public void mouseReleased (MouseEvent e) {
    super.mouseReleased (e);
    HashMap < Integer, JButton > collisions = new HashMap < > ();
    JButton draggedButton = (JButton) e.getSource ();
    for (JButton btn : buttons) {
        if (btn != draggedButton) {
            int col = checkPerPixelCollision (draggedButton, btn);
            System.out.println ("Button " + btn.getText ());
            System.out.println (col);
            collisions.put (col, btn);
        }
    }
    int maxCollisions = 0;
    JButton intersectingButton = null;
    for (Map.Entry < Integer, JButton > entry : collisions.entrySet ()) {
        Integer collisionCount = entry.getKey ();
        JButton button = entry.getValue ();
        if (collisionCount > maxCollisions) {
            maxCollisions = collisionCount;
            intersectingButton = button;
        }
    }
    boolean reLayout = false;
    if (maxCollisions > 0) {
        System.out.println ("Button " + draggedButton.getText () + " is intersecting more of Button " + intersectingButton.getText ());
        System.out.println ("Collisions: " + maxCollisions);
        reLayout = true;
    } else {
        System.out.println ("No change made");
        reLayout = false;
    }
    ArrayList < JButton > tmpButtons = (ArrayList < JButton >) buttons.clone ();
    if (reLayout) {
        buttons.clear ();
        for (JButton b : tmpButtons) {
            if (b == intersectingButton) {
                buttons.add (draggedButton);
            } else if (b == draggedButton) {
                buttons.add (intersectingButton);
            } else {
                buttons.add (b);
            }

        }
        panel.removeAll ();
        for (JButton btn : buttons) {
            panel.add (btn);
        }
        panel.revalidate ();
        panel.repaint ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13994272_13994437_7_22
13994272_13994789_4_16
Title: button click event doesnt work 
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button sobre = (Button) findViewById (R.id.button1);
    sobre.setOnClickListener (new OnClickListener () {
        public void onClick (View v) {
            goBack = true;
            setContentView (R.layout.janela2);
        }}

    );
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    Button sobre = (Button) findViewById (R.id.button1);
    sobre.setOnClickListener (new OnClickListener () {
        public void onClick (View v) {
            Intent intent = new Intent (MainActivity.this, t.class);
            startActivity (intent);
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
13998379_35282168_147_215
13998379_35282168_238_292
Title: Directory watching for changes in java 
----------------------------------------

public void run () {
    print ("DirWatcherThread started.");
    while (! interrupted ()) {
        WatchKey key;
        try {
            key = watcher.take ();
        } catch (InterruptedException x) {
            continue;
        } catch (ClosedWatchServiceException cwse) {
            break;
        }
        Path dir = keys.get (key);
        if (dir == null) {
            printe ("WatchKey not recognized!!");
            continue;
        }
        try {
            key.pollEvents ().stream ().filter ((event) -> {
                WatchEvent.Kind kind = event.kind ();
                return ! (kind == OVERFLOW);
            }).forEach ((event) -> {
                WatchEvent.Kind kind = event.kind ();
                WatchEvent < Path > ev = cast (event);
                Path name = ev.context ();
                Path child = dir.resolve (name);
                if (kind.equals (ENTRY_CREATE)) {
                    if (recursive) {
                        try {
                            if (Files.isDirectory (child, NOFOLLOW_LINKS)) {
                                registerAll (child);
                                return;
                            }
                        } catch (IOException x) {
                        }
                    }
                    fileProcessingQueue.put (child.toString (), ev);
                }
            });
            boolean valid = key.reset ();
            if (! valid) {
                keys.remove (key);
                if (keys.isEmpty ()) {
                    break;
                }
            }
        } catch (ClosedWatchServiceException cwse) {
            break;
        }
    }
    print ("DirWatcherThread exited.");
}
----------------------------------------

public void run () {
    print ("DirWatchProcessingThread Started");
    Entry < String, WatchEvent > fileEvent;
    outerLoop : while (! interrupted ()) {
        if (fileProcessingQueue.isEmpty ()) {
            try {
                Thread.sleep (WatchCoreParameters.timeToIdle);
            } catch (InterruptedException ex) {
                Logger.getLogger (WatchCore.class.getName ()).log (Level.SEVERE, null, ex);
            }
            continue;
        }
        fileEvent = fileProcessingQueue.entrySet ().iterator ().next ();
        fileProcessingQueue.remove (fileEvent.getKey ());
        long startTime = System.currentTimeMillis ();
        while (true) {
            FileInputStream fis = null;
            File file = new File (fileEvent.getKey ());
            try {
                fis = new FileInputStream (fileEvent.getKey ());
                break;
            } catch (FileNotFoundException fnfe) {
                if (! file.exists () || file.isDirectory ()) {
                    print ("File: '" + fileEvent + "has been deleted in file system or it is not file. Not processing this file.");
                    continue outerLoop;
                }
                try {
                    Thread.sleep (WatchCoreParameters.millisToPauseForFileLock);
                } catch (InterruptedException ie) {
                }
                if ((System.currentTimeMillis () - startTime) > WatchCoreParameters.millisToSwapFileForUnlocking) {
                    fileProcessingQueue.put (fileEvent.getKey (), fileEvent.getValue ());
                }
            } finally {
                if (fis != null) {
                    try {
                        fis.close ();
                    } catch (IOException ioe) {
                        ioe.printStackTrace ();
                    }
                }
            }
        }
        print ("Queuing File: " + fileEvent);
        onEventAndUnlocked (fileEvent.getValue ());
    }
    print ("DirWatchProcessingThread Exited");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14001085_14001200_1_16
14001085_14001263_1_11
Title: Update properties of a linked list/vector 
----------------------------------------

public void addToRanksInOrderWithUpDown (Rank r) {
    ranksInOrder.addElement (r);
    if (ranksInOrder.size () != 1) {
        Rank rd;
        try {
            rd = ranksInOrder.elementAt (ranksInOrder.indexOf (r) - 1);
            r.setUp (rd);
            r.setDown (r);
            rd.setDown (r);
        } catch (ArrayIndexOutOfBoundsException e) {
            r.setUp (r);
            r.setDown (r);
        }
    }
}
----------------------------------------

void addToRanksInOrderWithUpDown (Rank r) {
    r.setUp (r);
    if (ranksInOrder.isEmpty ()) {
        r.setDown (r);
    } else {
        Rank last = ranksInOrder.get (ranksInOrder.size () - 1);
        r.setDown (last);
        last.setUp (r);
    }
    ranksInOrder.add (r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14001085_14001200_1_16
14001085_14001377_1_16
Title: Update properties of a linked list/vector 
----------------------------------------

public void addToRanksInOrderWithUpDown (Rank r) {
    ranksInOrder.addElement (r);
    if (ranksInOrder.size () != 1) {
        Rank rd;
        try {
            rd = ranksInOrder.elementAt (ranksInOrder.indexOf (r) - 1);
            r.setUp (rd);
            r.setDown (r);
            rd.setDown (r);
        } catch (ArrayIndexOutOfBoundsException e) {
            r.setUp (r);
            r.setDown (r);
        }
    }
}
----------------------------------------

public void addToRanksInOrderWithUpDown (Rank r) {
    r.setDown (r);
    if (ranksInOrder.isEmpty ()) {
        r.setUp (r);
    } else {
        Rank last = ranksInOrder.lastElement ();
        last.setDown (r);
        r.setUp (last);
    }
    ranksInOrder.addElement (r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14014158_14014200_5_17
14014158_18561826_1_11
Title: Double to fraction in Java 
----------------------------------------

public Rational (double d) {
    String s = String.valueOf (d);
    int digitsDec = s.length () - 1 - s.indexOf ('.');
    int denom = 1;
    for (int i = 0;
    i < digitsDec; i ++) {
        d *= 10;
        denom *= 10;
    }
    int num = (int) Math.round (d);
    this.num = num;
    this.denom = denom;
}
----------------------------------------

public Rational (double d) {
    double temp = d;
    int j = 1, num;
    do {
        j = j * 10;
    } while ((temp * j) % 10 == 0);
    j = j / 10;
    num = (int) (d * j);
    System.out.println (num);
    System.out.println (j);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14023775_14025181_181_218
14023775_14027044_7_55
Title: Java: Changing jLabel foreground color 
----------------------------------------

public static void main (String args []) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels ()) {
            if ("Nimbus".equals (info.getName ())) {
                javax.swing.UIManager.setLookAndFeel (info.getClassName ());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    }
    java.awt.EventQueue.invokeLater (new Runnable () {
        public void run () {
            new OsvetlenieForm ().setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    Runnable r = new Runnable () {
        @Override
        public void run () {
            try {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels ()) {
                    if ("Nimbus".equals (info.getName ())) {
                        System.out.println ("Nimbus found!");
                        UIManager.setLookAndFeel (info.getClassName ());
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
            JPanel gui = new JPanel (new GridLayout (3, 1, 2, 2));
            MouseAdapter adapter = new MouseAdapter () {
                @Override
                public void mouseEntered (MouseEvent me) {
                    Object c = me.getSource ();
                    JLabel l = (JLabel) c;
                    l.setForeground (Color.RED);
                }@Override
                public void mouseExited (MouseEvent me) {
                    Object c = me.getSource ();
                    JLabel l = (JLabel) c;
                    l.setForeground (Color.BLUE);
                }}

            ;
            for (int ii = 0;
            ii < 3; ii ++) {
                JLabel l = new JLabel ("Float Me!");
                l.addMouseListener (adapter);
                gui.add (l);
            }
            JOptionPane.showMessageDialog (null, gui);
        }}

    ;
    SwingUtilities.invokeLater (r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14023775_14025181_181_218
14023775_30153001_5_16
Title: Java: Changing jLabel foreground color 
----------------------------------------

public static void main (String args []) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels ()) {
            if ("Nimbus".equals (info.getName ())) {
                javax.swing.UIManager.setLookAndFeel (info.getClassName ());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger (OsvetlenieForm.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
    }
    java.awt.EventQueue.invokeLater (new Runnable () {
        public void run () {
            new OsvetlenieForm ().setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        public void run () {
            try {
                MouseChangeLabel window = new MouseChangeLabel ();
                window.frame.setVisible (true);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14023775_14027044_7_55
14023775_30153001_5_16
Title: Java: Changing jLabel foreground color 
----------------------------------------

public static void main (String [] args) {
    Runnable r = new Runnable () {
        @Override
        public void run () {
            try {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels ()) {
                    if ("Nimbus".equals (info.getName ())) {
                        System.out.println ("Nimbus found!");
                        UIManager.setLookAndFeel (info.getClassName ());
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
            JPanel gui = new JPanel (new GridLayout (3, 1, 2, 2));
            MouseAdapter adapter = new MouseAdapter () {
                @Override
                public void mouseEntered (MouseEvent me) {
                    Object c = me.getSource ();
                    JLabel l = (JLabel) c;
                    l.setForeground (Color.RED);
                }@Override
                public void mouseExited (MouseEvent me) {
                    Object c = me.getSource ();
                    JLabel l = (JLabel) c;
                    l.setForeground (Color.BLUE);
                }}

            ;
            for (int ii = 0;
            ii < 3; ii ++) {
                JLabel l = new JLabel ("Float Me!");
                l.addMouseListener (adapter);
                gui.add (l);
            }
            JOptionPane.showMessageDialog (null, gui);
        }}

    ;
    SwingUtilities.invokeLater (r);
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        public void run () {
            try {
                MouseChangeLabel window = new MouseChangeLabel ();
                window.frame.setVisible (true);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14023906_14025566_52_61
14023906_14025566_77_90
Title: button sound and reset button not functioning Android java 
----------------------------------------

public void onClick (View v) {
    count ++;
    if (count > 50) count = 0;

    image.setImageResource (R.drawable.duroodimage);
    if (count > 0) image.setImageResource (R.drawable.duroodimage);

    if (count > 9) image.setImageResource (R.drawable.zikrimage);

    if (count > 39) image.setImageResource (R.drawable.duroodimage);

    txtCount.setText (String.valueOf (count));
    mpButtonClick.start ();
}
----------------------------------------

public void onClick (View v) {
    if (! mutestatus) {
        mutestatus = true;
        audioManager.setMode (AudioManager.MODE_IN_CALL);
        audioManager.setStreamSolo (AudioManager.STREAM_VOICE_CALL, true);
        Log.v ("'test....", "" + mutestatus);
    } else {
        mutestatus = false;
        audioManager.setMode (AudioManager.MODE_NORMAL);
        audioManager.setStreamSolo (AudioManager.STREAM_VOICE_CALL, false);
        Log.v ("'test....", "" + mutestatus);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14029907_15335143_4_23
14029907_38274373_8_22
Title: Java: Summing all digits of 2^1000 
----------------------------------------

public static void main (String [] args) {
    BigInteger number2 = new BigInteger ("2");
    BigInteger number3 = new BigInteger ("0");
    number3 = number2.pow (1000);
    String str = number3.toString ();
    BigInteger sum = new BigInteger ("0");
    for (int i = 0;
    i < str.length (); i ++) {
        char c = str.charAt (i);
        int value = Character.getNumericValue (c);
        BigInteger value2 = new BigInteger (Integer.toString (value));
        sum = sum.add (value2);
    }
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    BigInteger zero = BigInteger.valueOf (0);
    BigInteger ten = BigInteger.valueOf (10);
    BigInteger sum = zero;
    BigInteger a = new BigInteger ("2").pow (1000);
    while (a.compareTo (zero) > 0) {
        sum = sum.add (a.mod (ten));
        a = a.divide (ten);
    }
    System.out.println (sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14030124_14030145_1_28
14030124_14031877_51_58
Title: How to dynamically add JLabels to JPanel? 
----------------------------------------

public static void main (String [] args) {
    final JFrame frame = new JFrame ("Test");
    frame.setLayout (new GridLayout (0, 1));
    frame.add (new JButton (new AbstractAction ("Click to add") {
        @Override
        public void actionPerformed (ActionEvent e) {
            SwingUtilities.invokeLater (new Runnable () {
                @Override
                public void run () {
                    frame.add (new JLabel ("Bla"));
                    frame.validate ();
                    frame.repaint ();
                }}

            );
        }}

    ));
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setSize (400, 300);
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            frame.setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new Test ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14037284_14037419_57_68
14037284_14037856_74_84
Title: Draw in an image inside panel 
----------------------------------------

public void jButton1_ActionPerformed (ActionEvent evt) {
    BufferedImage image = new BufferedImage (jPanel1.getWidth (), jPanel1.getHeight (), BufferedImage.TYPE_3BYTE_BGR);
    Graphics2D g = image.createGraphics ();
    g.fillRect (0, 0, image.getWidth (), image.getHeight ());
    g.setColor (Color.BLUE);
    g.drawLine (0, 0, 300, 400);
    g.dispose ();
    JLabel l = new JLabel (new ImageIcon (image));
    l.setBorder (new LineBorder (Color.BLUE));
    jPanel1.add (l);
    jPanel1.revalidate ();
}
----------------------------------------

public void jButton1_ActionPerformed (ActionEvent evt) {
    Graphics graphics = image.getGraphics ();
    Graphics2D g = (Graphics2D) graphics;
    g.setColor (Color.RED);
    g.drawLine (0, 0, x, y);
    x -= 4;
    y += 2;
    g.dispose ();
    imageView.repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14037284_14037419_75_86
14037284_14037856_52_71
Title: Draw in an image inside panel 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            try {
                UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
            } catch (Exception exp) {
            }
            new BadLabel ("BadLabel");
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    Runnable r = new Runnable () {
        public void run () {
            JFrame f = new JFrame ("Try Panel");
            f.setDefaultCloseOperation (WindowConstants.DISPOSE_ON_CLOSE);
            f.setLocationByPlatform (true);
            Container cp = f.getContentPane ();
            cp.setLayout (new BorderLayout (3, 3));
            Try_Panel tp = new Try_Panel ();
            cp.add (tp.getGui ());
            f.pack ();
            f.setMinimumSize (f.getSize ());
            f.setVisible (true);
        }}

    ;
    SwingUtilities.invokeLater (r);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14038207_14038439_26_49
14038207_14039825_26_49
Title: Spell word with images in Android 
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    requestWindowFeature (Window.FEATURE_NO_TITLE);
    getWindow ().setFlags (WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
    tv = new TextView (this);
    setContentView (R.layout.deletreo);
    etxt = (EditText) findViewById (R.id.text);
    Button btn = (Button) findViewById (R.id.btn7);
    btn.setOnClickListener (new OnClickListener () {
        public void onClick (View v) {
            letra ();
        }}

    );
}
----------------------------------------

public void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    requestWindowFeature (Window.FEATURE_NO_TITLE);
    getWindow ().setFlags (WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
    tv = new TextView (this);
    setContentView (R.layout.deletreo);
    etxt = (EditText) findViewById (R.id.text);
    Button btn = (Button) findViewById (R.id.btn7);
    btn.setOnClickListener (new OnClickListener () {
        public void onClick (View v) {
            letra ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14038207_14038439_51_77
14038207_14039825_55_235
Title: Spell word with images in Android 
----------------------------------------

private void letra () {
    String t = etxt.getText ().toString ();
    char [] array = t.toCharArray ();
    int p = array.length;
    for (int j = 0;
    j < p; j ++) {
        if (array [j] == 'a' || array [j] == 'A') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.aa);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_1);
            onStop ();
        }
        if (array [j] == 'b' || array [j] == 'B') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.bb);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_2);
        }
        mth ();
    }
}
----------------------------------------

private void letra () {
    String t = etxt.getText ().toString ();
    char [] array = t.toCharArray ();
    int p = array.length;
    for (int j = 0;
    j < p; j ++) {
        if (array [j] == 'a' || array [j] == 'A') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.aa);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_1);
        }
        if (array [j] == 'b' || array [j] == 'B') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.bb);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_2);
        }
        if (array [j] == 'c' || array [j] == 'C') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.cc);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_3);
        }
        if (array [j] == 'd' || array [j] == 'D') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.dd);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_4);
        }
        if (array [j] == 'e' || array [j] == 'E') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.ee);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_5);
        }
        if (array [j] == 'f' || array [j] == 'F') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.ff);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_6);
        }
        if (array [j] == 'g' || array [j] == 'G') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.gg);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_7);
        }
        if (array [j] == 'h' || array [j] == 'H') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.hh);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_8);
        }
        if (array [j] == 'i' || array [j] == 'I') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.ii);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_9);
        }
        if (array [j] == 'j' || array [j] == 'J') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.jj);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_10);
        }
        if (array [j] == 'k' || array [j] == 'K') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.kk);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_11);
        }
        if (array [j] == 'l' || array [j] == 'L') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.ll);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_12);
        }
        if (array [j] == 'm' || array [j] == 'M') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.mm);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_13);
        }
        if (array [j] == 'n' || array [j] == 'N') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.nn);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_14);
        }
        if (array [j] == 'ñ' || array [j] == 'Ñ') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.nini);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_15);
        }
        if (array [j] == 'o' || array [j] == 'O') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.oo);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_16);
        }
        if (array [j] == 'p' || array [j] == 'P') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.pp);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_17);
        }
        if (array [j] == 'q' || array [j] == 'Q') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.qq);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_18);
        }
        if (array [j] == 'r' || array [j] == 'R') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.rr);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_19);
        }
        if (array [j] == 's' || array [j] == 'S') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.ss);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_20);
        }
        if (array [j] == 't' || array [j] == 'T') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.tt);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_21);
        }
        if (array [j] == 'u' || array [j] == 'U') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.uu);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_22);
        }
        if (array [j] == 'v' || array [j] == 'V') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.vv);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_23);
        }
        if (array [j] == 'w' || array [j] == 'W') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.ww);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_24);
        }
        if (array [j] == 'x' || array [j] == 'X') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.xx);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_25);
        }
        if (array [j] == 'y' || array [j] == 'Y') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.yy);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_26);
        }
        if (array [j] == 'z' || array [j] == 'Z') {
            img = (ImageView) findViewById (R.id.img);
            img.setImageResource (R.drawable.zz);
            img2 = (ImageView) findViewById (R.id.img2);
            img2.setImageResource (R.drawable.image_27);
        }
        mth ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14038207_14038439_9_22
14038207_14039825_9_21
Title: Spell word with images in Android 
----------------------------------------

protected void mth () {
    Thread t = new Thread () {
        public void run () {
            try {
                Thread.sleep (1000);
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }}

    ;
    t.start ();
}
----------------------------------------

protected void mth () {
    Thread t = new Thread () {
        public void run () {
            try {
                Thread.sleep (3000);
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }}

    ;
    t.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14041505_14044694_10_27
14041505_14044694_32_49
Title: Sleeping thread losses ownership of monitor lock? 
----------------------------------------

public void run () {
    System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r1 before synch block");
    synchronized (sync) {
        System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r1 entered synch block");
        try {
            sync.wait (5000);
            System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r1 finished waiting");
        } catch (final InterruptedException e) {
            e.printStackTrace ();
        }
    }
    System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r1 exited synch block");
}
----------------------------------------

public void run () {
    System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r2 before synch block");
    synchronized (sync) {
        System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r2 entered synch block");
        try {
            Thread.sleep (5000);
            System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r2 finished waiting");
        } catch (final InterruptedException e) {
            e.printStackTrace ();
        }
    }
    System.out.println ((System.currentTimeMillis () - startTime) / 1000 + ": r2 exited synch block");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14042935_14043094_1_16
14042935_14043220_1_16
Title: checking a condition only in the first cycle and in the rest cycles execute some code 
----------------------------------------

public void someMethod () {
    int index;
    if (cond1) {
        if (cond2) {
            methodXForTheFirstCycle ();
            for (int j = 1;
            j < 10; j ++) {
                methodXForTheRestCycles ();
            }
        } else {
            methodYForTheFirstCycle ();
            for (int j = 1;
            j < 10; j ++) {
                methodYForTheRestCycles ();
            }
        }
    }
}
----------------------------------------

public void someMethod () {
    int index;
    boolean firstConditionSuccess = false;
    for (int j = 0;
    j < 10; j ++) {
        if (j == 0 && cond1 && cond2) {
            methodXForTheFirstCycle ();
            firstConditionSuccess = true;
        } else if (j == 0 && cond1) {
            methodYForTheFirstCycle ();
            firstConditionSuccess = true;
        }

        if (firstConditionSuccess) {
            methodYForTheRestCycles ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_24934359_49_67
14047583_35118155_1_46
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String args []) {
    A a = new A ();
    Scanner input = new Scanner (System.in);
    System.out.println ("Types of Triangles");
    System.out.println ("\t1. Left");
    System.out.println ("\t2. Right");
    System.out.println ("\t3. Center");
    System.out.print ("Enter a number: ");
    int menu = input.nextInt ();
    Scanner input1 = new Scanner (System.in);
    System.out.print ("maximum Stars in last row: ");
    int row = input1.nextInt ();
    if (menu == 1) a.triagle_left (row);

    if (menu == 2) a.triagle_right (row);

    if (menu == 3) a.triagle_center (row);

}
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter the number: ");
    Scanner userInput = new Scanner (System.in);
    int myNum = userInput.nextInt ();
    userInput.close ();
    System.out.println ("Centered Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
    System.out.println ("Left Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
    }
    System.out.println ("Right Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print ("  ");
        }
        for (int j = 0;
        j < i; j += 1) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_24934359_49_67
14047583_35376145_4_17
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String args []) {
    A a = new A ();
    Scanner input = new Scanner (System.in);
    System.out.println ("Types of Triangles");
    System.out.println ("\t1. Left");
    System.out.println ("\t2. Right");
    System.out.println ("\t3. Center");
    System.out.print ("Enter a number: ");
    int menu = input.nextInt ();
    Scanner input1 = new Scanner (System.in);
    System.out.print ("maximum Stars in last row: ");
    int row = input1.nextInt ();
    if (menu == 1) a.triagle_left (row);

    if (menu == 2) a.triagle_right (row);

    if (menu == 3) a.triagle_center (row);

}
----------------------------------------

public static void main (String a []) throws Exception {
    DataInputStream in = new DataInputStream (System.in);
    int n = Integer.parseInt (in.readLine ());
    String b = new String (new char [n]).replaceAll ("\0", " ");
    String s = "*";
    for (int i = 1;
    i <= n; i ++) {
        System.out.print (b);
        System.out.println (s);
        s += "**";
        b = b.substring (0, n - i);
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_24934359_49_67
14047583_39545734_6_19
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String args []) {
    A a = new A ();
    Scanner input = new Scanner (System.in);
    System.out.println ("Types of Triangles");
    System.out.println ("\t1. Left");
    System.out.println ("\t2. Right");
    System.out.println ("\t3. Center");
    System.out.print ("Enter a number: ");
    int menu = input.nextInt ();
    Scanner input1 = new Scanner (System.in);
    System.out.print ("maximum Stars in last row: ");
    int row = input1.nextInt ();
    if (menu == 1) a.triagle_left (row);

    if (menu == 2) a.triagle_right (row);

    if (menu == 3) a.triagle_center (row);

}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int size = sc.nextInt ();
    for (int i = 0;
    i < size; i ++) {
        for (int k = 1;
        k < size - i; k ++) {
            System.out.print (" ");
        }
        for (int j = size;
        j >= size - i; j --) {
            System.out.print ("#");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_24934359_49_67
14047583_40108646_1_17
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String args []) {
    A a = new A ();
    Scanner input = new Scanner (System.in);
    System.out.println ("Types of Triangles");
    System.out.println ("\t1. Left");
    System.out.println ("\t2. Right");
    System.out.println ("\t3. Center");
    System.out.print ("Enter a number: ");
    int menu = input.nextInt ();
    Scanner input1 = new Scanner (System.in);
    System.out.print ("maximum Stars in last row: ");
    int row = input1.nextInt ();
    if (menu == 1) a.triagle_left (row);

    if (menu == 2) a.triagle_right (row);

    if (menu == 3) a.triagle_center (row);

}
----------------------------------------

public static void main (String [] args) {
    int nuberOfRows = 10;
    for (int row = 0;
    row < nuberOfRows; row ++) {
        for (int leftspace = 0;
        leftspace < (nuberOfRows - row); leftspace ++) {
            System.out.print (" ");
        }
        for (int star = 0;
        star < 2 * row + 1; star ++) {
            System.out.print ("*");
        }
        for (int rightSpace = 0;
        rightSpace < (nuberOfRows - row); rightSpace ++) {
            System.out.print (" ");
        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_24934359_49_67
14047583_42349573_2_24
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String args []) {
    A a = new A ();
    Scanner input = new Scanner (System.in);
    System.out.println ("Types of Triangles");
    System.out.println ("\t1. Left");
    System.out.println ("\t2. Right");
    System.out.println ("\t3. Center");
    System.out.print ("Enter a number: ");
    int menu = input.nextInt ();
    Scanner input1 = new Scanner (System.in);
    System.out.print ("maximum Stars in last row: ");
    int row = input1.nextInt ();
    if (menu == 1) a.triagle_left (row);

    if (menu == 2) a.triagle_right (row);

    if (menu == 3) a.triagle_center (row);

}
----------------------------------------

public static void main (String arg []) {
    System.out.print ("Enter Triangle Size : ");
    int num = 0;
    try {
        num = Integer.parseInt (read.readLine ());
    } catch (Exception Number) {
        System.out.println ("Invalid Number!");
    }
    for (int i = 1;
    i <= num; i ++) {
        for (int j = 1;
        j < num - (i - 1); j ++) {
            System.out.print (" ");
        }
        for (int k = 1;
        k <= i; k ++) {
            System.out.print ("*");
            for (int k1 = 1;
            k1 < k; k1 += k) {
                System.out.print ("*");
            }
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_24934359_49_67
14047583_46392957_1_14
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String args []) {
    A a = new A ();
    Scanner input = new Scanner (System.in);
    System.out.println ("Types of Triangles");
    System.out.println ("\t1. Left");
    System.out.println ("\t2. Right");
    System.out.println ("\t3. Center");
    System.out.print ("Enter a number: ");
    int menu = input.nextInt ();
    Scanner input1 = new Scanner (System.in);
    System.out.print ("maximum Stars in last row: ");
    int row = input1.nextInt ();
    if (menu == 1) a.triagle_left (row);

    if (menu == 2) a.triagle_right (row);

    if (menu == 3) a.triagle_center (row);

}
----------------------------------------

public static void main (String [] args) {
    String whatToPrint = "aword";
    int strLen = whatToPrint.length ();
    int floors = 8;
    for (int f = 1, h = strLen * floors;
    f < floors * 2; f += 2, h -= strLen) {
        for (int k = 1;
        k < h; k ++) {
            System.out.print (" ");
        }
        for (int g = 0;
        g < f; g ++) {
            System.out.print (whatToPrint);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_35118155_1_46
14047583_35376145_4_17
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter the number: ");
    Scanner userInput = new Scanner (System.in);
    int myNum = userInput.nextInt ();
    userInput.close ();
    System.out.println ("Centered Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
    System.out.println ("Left Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
    }
    System.out.println ("Right Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print ("  ");
        }
        for (int j = 0;
        j < i; j += 1) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String a []) throws Exception {
    DataInputStream in = new DataInputStream (System.in);
    int n = Integer.parseInt (in.readLine ());
    String b = new String (new char [n]).replaceAll ("\0", " ");
    String s = "*";
    for (int i = 1;
    i <= n; i ++) {
        System.out.print (b);
        System.out.println (s);
        s += "**";
        b = b.substring (0, n - i);
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_35118155_1_46
14047583_39545734_6_19
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter the number: ");
    Scanner userInput = new Scanner (System.in);
    int myNum = userInput.nextInt ();
    userInput.close ();
    System.out.println ("Centered Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
    System.out.println ("Left Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
    }
    System.out.println ("Right Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print ("  ");
        }
        for (int j = 0;
        j < i; j += 1) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int size = sc.nextInt ();
    for (int i = 0;
    i < size; i ++) {
        for (int k = 1;
        k < size - i; k ++) {
            System.out.print (" ");
        }
        for (int j = size;
        j >= size - i; j --) {
            System.out.print ("#");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14047583_35118155_1_46
14047583_40108646_1_17
Title: Printing *s as triangles in Java? 
----------------------------------------

public static void main (String [] args) {
    System.out.print ("Enter the number: ");
    Scanner userInput = new Scanner (System.in);
    int myNum = userInput.nextInt ();
    userInput.close ();
    System.out.println ("Centered Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < i; j ++) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
    System.out.println ("Left Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int j = 0;
        j < i; j ++) {
            System.out.print ("* ");
        }
        System.out.println ("");
    }
    System.out.println ("Right Triange");
    for (int i = 1;
    i <= myNum; i += 1) {
        for (int k = 0;
        k < (myNum - i); k += 1) {
            System.out.print ("  ");
        }
        for (int j = 0;
        j < i; j += 1) {
            System.out.print (" *");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String [] args) {
    int nuberOfRows = 10;
    for (int row = 0;
    row < nuberOfRows; row ++) {
        for (int leftspace = 0;
        leftspace < (nuberOfRows - row); leftspace ++) {
            System.out.print (" ");
        }
        for (int star = 0;
        star < 2 * row + 1; star ++) {
            System.out.print ("*");
        }
        for (int rightSpace = 0;
        rightSpace < (nuberOfRows - row); rightSpace ++) {
            System.out.print (" ");
        }
        System.out.println ("");
    }
}
----------------------------------------

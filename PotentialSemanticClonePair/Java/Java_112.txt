$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46617904_46618030_1_29
46617904_46618128_1_41
Title: "Case statement code does not display on the screen but complies without error" 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter your credit card number without spaces.");
    Scanner keyIn = new Scanner (System.in);
    long ccNum = keyIn.nextLong ();
    String cNum = ccNum + "";
    switch (Character.getNumericValue (cNum.charAt (0))) {
        case 4 :
            System.out.println ("The card is a Visa");
            break;
        case 5 :
            System.out.println ("The card is a MasterCard");
            break;
        case 6 :
            System.out.println ("The card is a Discover Card");
            break;
        case 37 :
            System.out.println ("The card is an American Express Card");
            break;
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter your credit card number without spaces.");
    final Scanner keyIn = new Scanner (System.in);
    long ccNum = 0L;
    if (keyIn.hasNext ()) {
        ccNum = keyIn.nextLong ();
    }
    final String cNum = "" + ccNum;
    int firstDigits = Integer.parseInt (cNum.substring (0, 2));
    if (firstDigits > 37) {
        firstDigits /= 10;
    }
    switch (firstDigits) {
        case 4 :
            {
                System.out.println ("The card is a Visa");
                break;
            } case 5 :
            {
                System.out.println ("The card is a MasterCard");
                break;
            } case 6 :
            {
                System.out.println ("The card is a Discover Card");
                break;
            } case 37 :
            {
                System.out.println ("The card is an American Express Card");
                break;
            } default :
            {
                System.out.println ("Incorrect card number");
            }}
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46620142_46620249_1_18
46620142_46621127_1_20
Title: List manipulation algorithm is too slow 
----------------------------------------

public static void main (String [] args) {
    int [] values = {10, 3, 5, 7, 9, 2, 2, 14, - 5, 7, 9, 3};
    if (values.length == 0) {
        return;
    }
    int minValue = values [0];
    int temp;
    values [0] = - 1;
    for (int i = 1;
    i < values.length; i ++) {
        temp = values [i];
        values [i] = minValue;
        if (temp < minValue) {
            minValue = temp;
        }
    }
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    ArrayList < Integer > list = new ArrayList < > ();
    Scanner scanner = new Scanner (System.in);
    int nElements = scanner.nextInt ();
    for (int i = 0;
    i < nElements; i ++) {
        list.add (scanner.nextInt ());
    }
    ArrayList < Integer > newList = new ArrayList < > ();
    TreeSet < Integer > set = new TreeSet < > ();
    for (Integer aList : list) {
        Integer tmp = set.ceiling (aList + 1);
        if (tmp == null) {
            newList.add (- 1);
        } else {
            newList.add (tmp);
        }
        set.add (aList);
    }
    list = newList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46621253_46624225_11_19
46621253_46624981_30_41
Title: JavaFX - Mask text of a TextArea 
----------------------------------------

protected String maskText (String text) {
    int n = txt.length ();
    StringBuilder passwordBuilder = new StringBuilder (n);
    for (int i = 0;
    i < n; i ++) {
        passwordBuilder.append ('\u2022');
    }
    return passwordBuilder.toString ();
}
----------------------------------------

protected String maskText (String txt) {
    int n = txt.length ();
    StringBuilder passwordBuilder = new StringBuilder (n);
    for (int i = 0;
    i < n; i ++) {
        if (txt.charAt (i) == '\n') {
            passwordBuilder.append ('\n');
        } else {
            passwordBuilder.append (TextFieldSkin.BULLET);
        }
    }
    return passwordBuilder.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651267_1_27
46650850_46651388_1_13
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

public static double getEvenAverage (int [] values, int curIndex, Results results) {
    if (curIndex == 0) {
        results = new Results ();
    }
    int myValue = values [curIndex];
    if (myValue % 2 == 0) {
        results.totalValueOfEvens += myValue;
        results.amountOfEvens ++;
    }
    int returnValue = 0;
    if (curIndex != values.length - 1) {
        getEvenAverage (values, curIndex + 1, results);
    }
    return results.getAverage ();
}
----------------------------------------

static int getEvenAverage (int [] elements, int index, int sum, int count) {
    if (index >= a.length) {
        return count == 0 ? 0 : sum / count;
    }
    if (a [index] % 2 == 0) {
        sum += a [index];
        count ++;
    }
    return getEvenAverage (elements, index + 1, sum, count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651267_1_27
46650850_46651402_12_26
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

public static double getEvenAverage (int [] values, int curIndex, Results results) {
    if (curIndex == 0) {
        results = new Results ();
    }
    int myValue = values [curIndex];
    if (myValue % 2 == 0) {
        results.totalValueOfEvens += myValue;
        results.amountOfEvens ++;
    }
    int returnValue = 0;
    if (curIndex != values.length - 1) {
        getEvenAverage (values, curIndex + 1, results);
    }
    return results.getAverage ();
}
----------------------------------------

private static double getEvenAverage (int [] values, double currentAverage, int nrEvenValues) {
    if (values.length == 0) {
        return currentAverage;
    }
    int head = values [0];
    int [] tail = new int [values.length - 1];
    System.arraycopy (values, 1, tail, 0, tail.length);
    if (head % 2 != 0) {
        return getEvenAverage (tail, currentAverage, nrEvenValues);
    }
    double newAverage = currentAverage * nrEvenValues + head;
    nrEvenValues ++;
    newAverage = newAverage / nrEvenValues;
    return getEvenAverage (tail, newAverage, nrEvenValues);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651267_1_27
46650850_46653621_7_16
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

public static double getEvenAverage (int [] values, int curIndex, Results results) {
    if (curIndex == 0) {
        results = new Results ();
    }
    int myValue = values [curIndex];
    if (myValue % 2 == 0) {
        results.totalValueOfEvens += myValue;
        results.amountOfEvens ++;
    }
    int returnValue = 0;
    if (curIndex != values.length - 1) {
        getEvenAverage (values, curIndex + 1, results);
    }
    return results.getAverage ();
}
----------------------------------------

private static double getEvenAverage (int [] a, int i, int n, double avg) {
    if (i >= a.length) {
        return avg;
    }
    if (a [i] % 2 == 0) {
        avg += (a [i] - avg) / n;
        n += 1;
    }
    return getEvenAverage (a, i + 1, n, avg);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651267_1_27
46650850_46675693_1_16
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

public static double getEvenAverage (int [] values, int curIndex, Results results) {
    if (curIndex == 0) {
        results = new Results ();
    }
    int myValue = values [curIndex];
    if (myValue % 2 == 0) {
        results.totalValueOfEvens += myValue;
        results.amountOfEvens ++;
    }
    int returnValue = 0;
    if (curIndex != values.length - 1) {
        getEvenAverage (values, curIndex + 1, results);
    }
    return results.getAverage ();
}
----------------------------------------

private static Pair getEvenAverage (int [] a, int first, int last) {
    if (first == last) {
        if (a [first] % 2 == 0) {
            return new Pair (a [first], 1);
        }
    } else {
        int mid = (first + last) / 2;
        Pair p1 = getEvenAverage (a, first, mid);
        Pair p2 = getEvenAverage (a, mid + 1, last);
        int total = p1.n + p2.n;
        if (total > 0) {
            return new Pair ((p1.n * p1.avg + p2.n * p2.avg) / total, total);
        }
    }
    return new Pair (0.0, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651388_1_13
46650850_46651402_12_26
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

static int getEvenAverage (int [] elements, int index, int sum, int count) {
    if (index >= a.length) {
        return count == 0 ? 0 : sum / count;
    }
    if (a [index] % 2 == 0) {
        sum += a [index];
        count ++;
    }
    return getEvenAverage (elements, index + 1, sum, count);
}
----------------------------------------

private static double getEvenAverage (int [] values, double currentAverage, int nrEvenValues) {
    if (values.length == 0) {
        return currentAverage;
    }
    int head = values [0];
    int [] tail = new int [values.length - 1];
    System.arraycopy (values, 1, tail, 0, tail.length);
    if (head % 2 != 0) {
        return getEvenAverage (tail, currentAverage, nrEvenValues);
    }
    double newAverage = currentAverage * nrEvenValues + head;
    nrEvenValues ++;
    newAverage = newAverage / nrEvenValues;
    return getEvenAverage (tail, newAverage, nrEvenValues);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651388_1_13
46650850_46653621_7_16
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

static int getEvenAverage (int [] elements, int index, int sum, int count) {
    if (index >= a.length) {
        return count == 0 ? 0 : sum / count;
    }
    if (a [index] % 2 == 0) {
        sum += a [index];
        count ++;
    }
    return getEvenAverage (elements, index + 1, sum, count);
}
----------------------------------------

private static double getEvenAverage (int [] a, int i, int n, double avg) {
    if (i >= a.length) {
        return avg;
    }
    if (a [i] % 2 == 0) {
        avg += (a [i] - avg) / n;
        n += 1;
    }
    return getEvenAverage (a, i + 1, n, avg);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651388_1_13
46650850_46675693_1_16
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

static int getEvenAverage (int [] elements, int index, int sum, int count) {
    if (index >= a.length) {
        return count == 0 ? 0 : sum / count;
    }
    if (a [index] % 2 == 0) {
        sum += a [index];
        count ++;
    }
    return getEvenAverage (elements, index + 1, sum, count);
}
----------------------------------------

private static Pair getEvenAverage (int [] a, int first, int last) {
    if (first == last) {
        if (a [first] % 2 == 0) {
            return new Pair (a [first], 1);
        }
    } else {
        int mid = (first + last) / 2;
        Pair p1 = getEvenAverage (a, first, mid);
        Pair p2 = getEvenAverage (a, mid + 1, last);
        int total = p1.n + p2.n;
        if (total > 0) {
            return new Pair ((p1.n * p1.avg + p2.n * p2.avg) / total, total);
        }
    }
    return new Pair (0.0, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651402_12_26
46650850_46653621_7_16
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

private static double getEvenAverage (int [] values, double currentAverage, int nrEvenValues) {
    if (values.length == 0) {
        return currentAverage;
    }
    int head = values [0];
    int [] tail = new int [values.length - 1];
    System.arraycopy (values, 1, tail, 0, tail.length);
    if (head % 2 != 0) {
        return getEvenAverage (tail, currentAverage, nrEvenValues);
    }
    double newAverage = currentAverage * nrEvenValues + head;
    nrEvenValues ++;
    newAverage = newAverage / nrEvenValues;
    return getEvenAverage (tail, newAverage, nrEvenValues);
}
----------------------------------------

private static double getEvenAverage (int [] a, int i, int n, double avg) {
    if (i >= a.length) {
        return avg;
    }
    if (a [i] % 2 == 0) {
        avg += (a [i] - avg) / n;
        n += 1;
    }
    return getEvenAverage (a, i + 1, n, avg);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46651402_12_26
46650850_46675693_1_16
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

private static double getEvenAverage (int [] values, double currentAverage, int nrEvenValues) {
    if (values.length == 0) {
        return currentAverage;
    }
    int head = values [0];
    int [] tail = new int [values.length - 1];
    System.arraycopy (values, 1, tail, 0, tail.length);
    if (head % 2 != 0) {
        return getEvenAverage (tail, currentAverage, nrEvenValues);
    }
    double newAverage = currentAverage * nrEvenValues + head;
    nrEvenValues ++;
    newAverage = newAverage / nrEvenValues;
    return getEvenAverage (tail, newAverage, nrEvenValues);
}
----------------------------------------

private static Pair getEvenAverage (int [] a, int first, int last) {
    if (first == last) {
        if (a [first] % 2 == 0) {
            return new Pair (a [first], 1);
        }
    } else {
        int mid = (first + last) / 2;
        Pair p1 = getEvenAverage (a, first, mid);
        Pair p2 = getEvenAverage (a, mid + 1, last);
        int total = p1.n + p2.n;
        if (total > 0) {
            return new Pair ((p1.n * p1.avg + p2.n * p2.avg) / total, total);
        }
    }
    return new Pair (0.0, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46650850_46653621_7_16
46650850_46675693_1_16
Title: Recursively finding the average of even numbers in an array 
----------------------------------------

private static double getEvenAverage (int [] a, int i, int n, double avg) {
    if (i >= a.length) {
        return avg;
    }
    if (a [i] % 2 == 0) {
        avg += (a [i] - avg) / n;
        n += 1;
    }
    return getEvenAverage (a, i + 1, n, avg);
}
----------------------------------------

private static Pair getEvenAverage (int [] a, int first, int last) {
    if (first == last) {
        if (a [first] % 2 == 0) {
            return new Pair (a [first], 1);
        }
    } else {
        int mid = (first + last) / 2;
        Pair p1 = getEvenAverage (a, first, mid);
        Pair p2 = getEvenAverage (a, mid + 1, last);
        int total = p1.n + p2.n;
        if (total > 0) {
            return new Pair ((p1.n * p1.avg + p2.n * p2.avg) / total, total);
        }
    }
    return new Pair (0.0, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46651250_46651555_1_17
46651250_46870845_17_37
Title: Push An ArrayList of Strings Into HashMap 
----------------------------------------

public static HashMap < Character, List < Double > > TotalAmount (ArrayList < String > initialList) {
    HashMap < Character, List < Double > > resultMap = new HashMap < > ();
    for (String line : initialList) {
        Double size = Double.parseDouble (line.substring (0, line.length () - 1));
        Character sizeChar = line.charAt (line.length () - 1);
        if (resultMap.containsKey (sizeChar)) {
            resultMap.get (sizeChar).add (size);
        } else {
            resultMap.put (sizeChar, Collections.singletonList (size));
        }
    }
    return resultMap;
}
----------------------------------------

public static HashMap < Character, ArrayList < Double > > TotalAmount (ArrayList < String > x) {
    HashMap < Character, ArrayList < Double > > map = new HashMap < > ();
    for (String line : x) {
        Double num = Double.parseDouble (line.substring (0, line.length () - 1));
        Character c = line.charAt (line.length () - 1);
        if (map.containsKey (c)) {
            map.get (c).add (num);
        } else {
            ArrayList < Double > newList = new ArrayList < > ();
            newList.add (num);
            map.put (c, newList);
        }
    }
    return map;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46657321_46657918_64_128
46657321_46665927_1_20
Title: ascii table counter with Java not returning null as false 
----------------------------------------

public static boolean NumberIsValid (String value) {
    int period = 0;
    boolean valid = true;
    int length = value.length ();
    int digitCount = 0;
    if (value.isEmpty ()) {
        valid = false;
    }
    for (int i = 0;
    i < length; i ++) {
        char aChar = value.charAt (i);
        if ((int) aChar < 48 || (int) aChar > 57) {
            if ((int) aChar == 46) {
                period ++;
                if (length < 2) {
                    valid = false;
                    break;
                }
            } else {
                valid = false;
                break;
            }
        }
        if (period > 1) {
            valid = false;
            break;
        }
        if (value.contains (".") && length == 1) {
            valid = false;
        }
    }
    return valid;
}
----------------------------------------

public static boolean NumberIsValid (String value) {
    int period = 0;
    boolean valid = false;
    for (int i = 0;
    i < length; i ++) {
        if (value.charAt (i) >= 48 && value.charAt (i) <= 57) valid = true;

        if (value.charAt (i) == 46) {
            valid = true;
            period ++;
        }
        if (period != 1 && period != 0) {
            valid = false;
            break;
        }
    }
    return valid;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46662450_46662505_5_18
46662450_46662830_2_17
Title: Arrange letters in one line 
----------------------------------------

public void ChangeCase () {
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter an input String: ");
    String inputString = scanner.nextLine ();
    String vowels = "aeiouAEIOU";
    for (char c : inputString.toCharArray ()) {
        if (vowels.indexOf (c) != - 1) {
            c = Character.toUpperCase (c);
        } else if (Character.isLetter (c)) {
            c = Character.toLowerCase (c);
        }

        System.out.print (c);
    }
}
----------------------------------------

public void ChangeCase () {
    String resultString;
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter an input String: ");
    String inputString = scanner.nextLine ();
    resultString = inputString.toLowerCase ();
    resultString = uppercaseVowels (resultString);
    System.out.println ("Input: " + inputString);
    System.out.println ("Result: " + resultString);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46678590_46678833_1_36
46678590_46679147_1_39
Title: Nested SWT message box giving error 
----------------------------------------

public static void main (final String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    final JUnitCore junit = new JUnitCore ();
    Result result;
    final int style = SWT.ICON_WARNING | SWT.YES | SWT.NO;
    final MessageBox messageBox = new MessageBox (shell, style);
    messageBox.setMessage ("Would you like to start the test?");
    int rc = messageBox.open ();
    if (rc == SWT.YES) {
        result = junit.run (testMyCode.class);
        final MessageBox messageBox1 = new MessageBox (shell, style);
        messageBox1.setMessage ("Would you like to repeat the test?");
        rc = messageBox1.open ();
        if (rc == SWT.YES) {
            result = junit.run (testMyCode.class);
        }
        int style1 = SWT.ICON_WARNING | SWT.OK;
        final MessageBox messageBox2 = new MessageBox (shell, style1);
        messageBox2.setMessage ("Thank You For Using");
        messageBox2.open ();
    }
    display.dispose ();
}
----------------------------------------

public static void main (final String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    final JUnitCore junit = new JUnitCore ();
    Result result;
    final int style = SWT.ICON_WARNING | SWT.YES | SWT.NO;
    final MessageBox messageBox = new MessageBox (shell, style);
    messageBox.setMessage ("Would you like to start the test?");
    int rc = messageBox.open ();
    if (rc == SWT.YES) {
        result = junit.run (testMyCode.class);
        final MessageBox messageBox1 = new MessageBox (shell, style);
        messageBox1.setMessage ("Would you like to repeat the test?");
        int rc2 = messageBox1.open ();
        if (rc2 == SWT.YES) {
            result = junit.run (testMyCode.class);
        } else {
            int style1 = SWT.ICON_WARNING | SWT.OK;
            final MessageBox messageBox2 = new MessageBox (shell, style1);
            messageBox2.setMessage ("Thank You For Using");
            messageBox2.open ();
        }
    }
    display.dispose ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46686057_46686407_1_12
46686057_46686426_5_22
Title: Separating an unknown amount of hyphens in java? 
----------------------------------------

public static void main (String [] args) {
    String output = "";
    String input = "Patrick-Connor-O'Neil-Saint-Patricks-Day";
    String [] brokenInput = input.split ("-");
    for (String temp : brokenInput) {
        if (! temp.equals ("")) output = output + temp.charAt (0);

    }
    System.out.println (output);
}
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    String input = "";
    System.out.println ("What's your name?");
    input = scan.nextLine ();
    String [] x = input.split ("-");
    int u = 0;
    for (String i : x) {
        String y = input.split ("-") [u];
        u ++;
        System.out.println (y);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46688682_46695371_1_27
46688682_46732379_27_47
Title: How to come up with minimal BufferedReader with Line numbers 
----------------------------------------

String readLine (LineNumberReader reader) throws IOException {
    StringBuilder line = new StringBuilder ();
    int c = reader.read ();
    while (c >= 0 && c != '\r' && c != '\n') {
        line.append ((char) c);
        if (line.length () >= MAX_LINE_LENGTH) {
            reader.setLineNumber (reader.getLineNumber () + 1);
            break;
        }
        c = reader.read ();
    }
    if (c == '\r') {
        reader.mark (1);
        if (reader.read () != '\n') {
            reader.reset ();
        }
    }
    return line.toString ();
}
----------------------------------------

public String readLine () throws IOException {
    StringBuilder line = new StringBuilder ();
    int c = delegate.read ();
    if (c <= 0) {
        return null;
    }
    while (c >= 0 && c != '\n') {
        if (line.length () >= readerMaxLineLen) {
            throw new IOException ("Exceeded max line length of " + readerMaxLineLen);
        }
        line.append ((char) c);
        c = delegate.read ();
    }
    lineNumber ++;
    return line.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46693345_46693603_8_17
46693345_46693691_6_15
Title: Java returning Array Out Of Bounds Exception 
----------------------------------------

public static int [] filter (int [] a, int b) {
    int [] newArray = new int [a.length];
    for (int i = 0;
    i < a.length; i ++) {
        if (a [i] < b) {
            newArray [i] = a [i];
        }
    }
    System.out.println (Arrays.toString (newArray));
    return newArray;
}
----------------------------------------

public static ArrayList < Integer > filter (int [] a, int b) {
    ArrayList < Integer > newArray = new ArrayList < > ();
    for (int i = 0;
    i < a.length; i ++) {
        if (a [i] > b) {
            newArray.add (a [i]);
        }
    }
    System.out.println (Arrays.toString (newArray.toArray ()));
    return newArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46696697_46706494_36_67
46696697_46706494_69_85
Title: Join multiple callback executions in a CompletableFuture 
----------------------------------------

public CompletableFuture < T > removeAsync (long timeout, TimeUnit unit) {
    if (unit == null) throw new NullPointerException ("unit");

    CompletableFuture < Long > currentCf = null;
    synchronized (lock) {
        T item = queue.poll ();
        if (item != null) {
            return CompletableFuture.completedFuture (item);
        } else if (timeout <= 0L) {
            return CompletableFuture.completedFuture (null);
        } else {
            if (removeCf.isDone ()) {
                removeCf = new CompletableFuture < > ();
            }
            currentCf = removeCf;
        }

    }
    long startTime = System.nanoTime ();
    long nanosTimeout = unit.toNanos (timeout);
    CompletableFuture < T > itemCf = currentCf.thenCompose (endTime -> {
        long leftNanosTimeout = nanosTimeout - (endTime - startTime);
        return removeAsync (leftNanosTimeout, TimeUnit.NANOSECONDS);
    });
    ScheduledFuture < ? > scheduledFuture = scheduledExecutorService.schedule (() -> itemCf.complete (null), timeout, unit);
    itemCf.thenRun (() -> scheduledFuture.cancel (true));
    return itemCf;
}
----------------------------------------

public CompletableFuture < T > removeAsync () {
    CompletableFuture < Long > currentCf = null;
    synchronized (lock) {
        T item = queue.poll ();
        if (item != null) {
            return CompletableFuture.completedFuture (item);
        } else {
            if (removeCf.isDone ()) {
                removeCf = new CompletableFuture < > ();
            }
            currentCf = removeCf;
        }
    }
    return currentCf.thenCompose (endTime -> removeAsync ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4671858_16091241_5_25
4671858_5496982_4_16
Title: deepHashCode with byte array 
----------------------------------------

public static void main (String [] args) {
    byte [] a = {10, 32, - 43, 80};
    byte [] b = {13, - 40};
    byte [] c = {10, 32, - 43, 80};
    System.out.println ("NOTE: A and C have identical values, B differs");
    System.out.println ("Using byte[].hashCode(): A and C have different hash codes");
    System.out.println ("a = " + a.hashCode ());
    System.out.println ("b = " + b.hashCode ());
    System.out.println ("c = " + c.hashCode ());
    System.out.println ("Using Arrays.hashCode(): A and C have identical hash codes");
    System.out.println ("a = " + Arrays.hashCode (a));
    System.out.println ("b = " + Arrays.hashCode (b));
    System.out.println ("c = " + Arrays.hashCode (c));
    System.out.println ("Using Arrays.deepHashCode(): A and C have identical hash codes");
    System.out.println ("a = " + Arrays.deepHashCode (new Object [] {a}));
    System.out.println ("b = " + Arrays.deepHashCode (new Object [] {b}));
    System.out.println ("c = " + Arrays.deepHashCode (new Object [] {c}));
}
----------------------------------------

public static void main (String [] args) {
    byte [] a = {10, 32, - 43, 80};
    byte [] b = {13, - 40};
    byte [] c = {10, 32, - 43, 80};
    System.out.println (a.hashCode ());
    System.out.println (b.hashCode ());
    System.out.println (c.hashCode ());
    System.out.println (Arrays.deepHashCode (new Object [] {a}));
    System.out.println (Arrays.deepHashCode (new Object [] {b}));
    System.out.println (Arrays.deepHashCode (new Object [] {c}));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46721848_46722082_1_19
46721848_46722998_5_40
Title: "I'm trying to create a program that reads a string and displays how many of each letter there is but it isn't working" 
----------------------------------------

public static void main (String [] args) {
    int occurrence = 0;
    String arr = "I am tired";
    List < Character > nos = new ArrayList < > ();
    for (int i = 0;
    i < arr.length (); i ++) {
        nos.add (Character.toLowerCase (arr.charAt (i)));
    }
    Set < Character > uniqueNos = new HashSet < > (nos);
    for (char temp : uniqueNos) {
        for (char tempList : nos) {
            if (String.valueOf (temp).equalsIgnoreCase (String.valueOf (tempList))) {
                occurrence ++;
            }
        }
        if (temp != ' ') System.out.println (temp + " Appears " + occurrence + " times");

        occurrence = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    int counter = 0;
    String statement;
    int length;
    char space = ' ';
    String word = "";
    char letter;
    char check;
    int count = 0;
    Scanner input = new Scanner (System.in);
    System.out.print ("Enter a string: ");
    statement = input.nextLine ();
    char c [] = statement.toCharArray ();
    length = statement.length ();
    System.out.print ("Entered String: " + statement);
    while (counter <= length - 1) {
        letter = c [counter];
        for (int charcount = 0;
        charcount <= length - 1; charcount ++) {
            check = c [charcount];
            if (letter != ' ' && charcount <= length - 1) {
                if (Character.toLowerCase (letter) == Character.toLowerCase (check)) {
                    count += 1;
                    c [charcount] = ' ';
                }
            }
        }
        if (letter != ' ') System.out.printf ("\nletter %c:\t %d", letter, count);

        counter += 1;
        count = 0;
    }
    System.out.println ("hello" + statement);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46725378_46725917_2_18
46725378_46726094_3_22
Title: How To Copy Values To Object Array 
----------------------------------------

public static void main (String args []) throws FileNotFoundException {
    String fileName = "sales.txt";
    SalesPerson sp = new SalesPerson [4];
    Scanner sc = new Scanner (new FileReader (fileName));
    int i = 0;
    while (sc.hasNext ()) {
        staff [i] = new SalesPerson ();
        staff [i].name = sc.nextLine ();
        staff [i].number = sc.nextLine ();
        staff [i].salesAmount = Double.parseDouble (sc.nextLine ());
        i ++;
    }
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    List < SalesPerson > persons = new ArrayList < > ();
    SalesPerson salesPerson = null;
    Scanner scanner = new Scanner (new FileReader ("sales.txt"));
    int count = 0;
    while (scanner.hasNext ()) {
        if (count == 0 || count % 3 == 0) {
            salesPerson = new SalesPerson ();
            salesPerson.setNumber (scanner.nextLine ());
            salesPerson.setName (scanner.nextLine ());
            salesPerson.setSalesAmount (Double.parseDouble (scanner.nextLine ()));
            persons.add (salesPerson);
            count += 3;
        }
    }
    persons.forEach (person -> System.out.println (person.toString ()));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46730275_46730409_1_16
46730275_46730607_1_13
Title: Get approximate square root 
----------------------------------------

public static void getApproximatedSquare (long n) {
    DecimalFormat decimalFormat = new DecimalFormat ("#.####");
    decimalFormat.setRoundingMode (RoundingMode.CEILING);
    double lastGuess = n + 1;
    double nextGuess = n;
    double init = 0.0001;
    while (lastGuess - nextGuess > init) {
        lastGuess = nextGuess;
        nextGuess = (lastGuess + n / lastGuess) / 2;
    }
    System.out.println (decimalFormat.format (init));
}
----------------------------------------

public static double getApproximatedSquare (long n) {
    DecimalFormat decimalFormat = new DecimalFormat ("#.####");
    decimalFormat.setRoundingMode (RoundingMode.CEILING);
    double lastGuess, nextGuess = 1;
    double init = 0.0001;
    do {
        lastGuess = nextGuess;
        nextGuess = (lastGuess + (double) n / lastGuess) / 2;
        System.out.println (decimalFormat.format (lastGuess) + " ---> " + decimalFormat.format (nextGuess));
    } while (Math.abs (lastGuess - nextGuess) >= init);
    return nextGuess;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46733087_46733290_1_17
46733087_46733379_4_16
Title: Java program to print prime numbers until user input 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("This program takes the user input and prints the prime numbers until that number");
    System.out.println ("Enter Number:");
    Scanner sc = new Scanner (System.in);
    num = sc.nextInt ();
    long startValue = 0;
    long primeNumbersToTest = num;
    for (long i = startValue;
    i < primeNumbersToTest; i ++) {
        if (findPrime (i).equals ("Prime")) {
            System.out.println (i + " is Prime");
        } else {
            System.out.println (i + " is not Prime");
        }
    }
}
----------------------------------------

public static void main (String args []) {
    System.out.println ("This program takes the user input and prints the prime numbers until that number");
    System.out.println ("Enter Number:");
    Scanner sc = new Scanner (System.in);
    int num = sc.nextInt ();
    int i = 0;
    while (i <= num) {
        if (isPrime (i)) {
            System.out.println ("Prime Number: " + i);
        }
        i ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46738348_46738710_7_23
46738348_46738964_4_12
Title: How to print the middle name in reverse order? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    String name, middle, reversed = "";
    System.out.println ("Enter your first, middle, and last name ");
    name = in.nextLine ();
    int space1 = name.indexOf (" ");
    int space2 = name.lastIndexOf (" ");
    middle = name.substring (space1 + 1, space2);
    for (int i = middle.length ();
    i > 0; i --) {
        reversed = reversed + middle.charAt (i - 1);
    }
    System.out.println (reversed);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter your first, middle and last name.");
    String [] name = in.nextLine ().split (" ");
    for (int i = name [1].length () - 1;
    i >= 0; i --) {
        System.out.print (name [1].charAt (i));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46738348_46738710_7_23
46738348_46739729_1_25
Title: How to print the middle name in reverse order? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    String name, middle, reversed = "";
    System.out.println ("Enter your first, middle, and last name ");
    name = in.nextLine ();
    int space1 = name.indexOf (" ");
    int space2 = name.lastIndexOf (" ");
    middle = name.substring (space1 + 1, space2);
    for (int i = middle.length ();
    i > 0; i --) {
        reversed = reversed + middle.charAt (i - 1);
    }
    System.out.println (reversed);
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter your first, middle, and last name ");
    String fullname = in.nextLine ();
    String [] fullnameArray = fullname.trim ().split ("\\s");
    String first = fullnameArray [0];
    String middle = fullnameArray [1];
    String last = fullnameArray [2];
    String middleReversed = new StringBuilder (middle).reverse ().toString ();
    System.out.println ("First name:" + first);
    System.out.println ("middle name (reversed):" + middleReversed);
    System.out.println ("last name:" + last);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46738348_46738964_4_12
46738348_46739729_1_25
Title: How to print the middle name in reverse order? 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter your first, middle and last name.");
    String [] name = in.nextLine ().split (" ");
    for (int i = name [1].length () - 1;
    i >= 0; i --) {
        System.out.print (name [1].charAt (i));
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter your first, middle, and last name ");
    String fullname = in.nextLine ();
    String [] fullnameArray = fullname.trim ().split ("\\s");
    String first = fullnameArray [0];
    String middle = fullnameArray [1];
    String last = fullnameArray [2];
    String middleReversed = new StringBuilder (middle).reverse ().toString ();
    System.out.println ("First name:" + first);
    System.out.println ("middle name (reversed):" + middleReversed);
    System.out.println ("last name:" + last);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46739227_46739357_6_42
46739227_46739549_5_16
Title: Java Homework trouble asterisks 
----------------------------------------

public static void main (String [] args) throws IOException {
    Scanner stdin = new Scanner (System.in);
    System.out.print ("Enter an integer in the range of 1-24: ");
    int side = stdin.nextInt ();
    while ((side < 1) || (side > 24)) {
        System.out.print ("Enter an integer in the range of 1-24: ");
        side = stdin.nextInt ();
    }
    System.out.print ("Enter an integer in the range of 1-24: ");
    int height = stdin.nextInt ();
    while ((height < 1) || (height > 24)) {
        System.out.print ("Enter an integer in the range of 1-24: ");
        height = stdin.nextInt ();
    }
    for (int rows = 0;
    rows < side; rows ++) {
        for (int cols = 0;
        cols < height; cols ++) {
            System.out.print ("X");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (final String...args) {
    try (Scanner input = new Scanner (System.in)) {
        final int columns = getInRange (input, 1, 24);
        final int rows = getInRange (input, 1, 24);
        for (int x = 0;
        x < columns; x ++) {
            for (int y = 0;
            y < rows; y ++) {
                System.out.print ("X");
            }
            System.out.println ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46742189_46742336_2_18
46742189_46742633_2_24
Title: Java print integer in 4 rows and 4 columns in below format without using array 
----------------------------------------

public static void main (String [] args) {
    int n = 16;
    int rows = 4;
    int cols = 4;
    int flag = 0;
    for (int i = 1;
    i <= rows; i ++) {
        for (int j = 1;
        j <= cols; j ++) {
            System.out.print (n - cols * flag + (2 * j - 1) * flag + " ");
            n --;
        }
        if (i != rows) {
            System.out.println ();
            flag = 1 - flag;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int n = 16;
    final int rows = 4;
    final int cols = 4;
    boolean reverse = false;
    for (int r = 1;
    r <= rows; ++ r) {
        if (reverse) {
            for (int c = n - cols + 1;
            c <= n; ++ c) {
                System.out.print (c + " ");
            }
            n -= cols;
        } else {
            for (int c = 1;
            c <= cols; ++ c, -- n) {
                System.out.print (n + " ");
            }
        }
        System.out.println ();
        reverse = ! reverse;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46742628_46743052_22_59
46742628_46743169_1_10
Title: Towers Of Hanoi with Stacks Implementation and Recursion (Java) 
----------------------------------------

public static void show () {
    String Pillar1 = "Pillar1: ";
    String Pillar2 = "Pillar2: ";
    String Pillar3 = "Pillar3: ";
    String emptStr1 = "";
    String emptStr2 = "";
    String emptStr3 = "";
    for (int x = 0;
    x <= temp - 1; x ++) {
        try {
            emptStr1 += String.valueOf (tower [1].get (x)) + " ";
        } catch (Exception e) {
        }
        try {
            emptStr2 += String.valueOf (tower [2].get (x)) + " ";
        } catch (Exception e) {
        }
        try {
            emptStr3 += String.valueOf (tower [3].get (x)) + " ";
        } catch (Exception e) {
        }
    }
    System.out.print (Pillar1 + emptStr1 + "\n");
    System.out.print (Pillar2 + emptStr2 + "\n");
    System.out.print (Pillar3 + emptStr3 + "\n");
    System.out.print ("\n");
}
----------------------------------------

public static void show () {
    for (int i = 1;
    i < tower.length; i ++) {
        String pillar = "Pillar " + i + ":";
        for (int disk : tower [i]) {
            pillar += " " + disk;
        }
        System.out.println (pillar);
    }
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4674850_22409526_6_19
4674850_25476257_45_62
Title: Converting a sentence string to a string array of words in Java 
----------------------------------------

public static void main (String [] args) {
    String s = "a a a A A";
    String [] splitedString = s.split (" ");
    Map m = new HashMap ();
    int count = 1;
    for (String s1 : splitedString) {
        count = m.containsKey (s1) ? count + 1 : 1;
        m.put (s1, count);
    }
    Iterator < StringToword > itr = m.entrySet ().iterator ();
    while (itr.hasNext ()) {
        System.out.println (itr.next ());
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Please enter the String");
    Scanner input = new Scanner (System.in);
    String userInput = input.nextLine ().trim ();
    int numOfWords = getNumberOfWords (userInput);
    char words [] [] = new char [numOfWords + 1] [];
    words = getWordsFromString (userInput);
    System.out.println ("Total number of words found in the String is " + (numOfWords));
    for (int i = 0;
    i < numOfWords; i ++) {
        System.out.println (" ");
        for (int j = 0;
        j < words [i].length; j ++) {
            System.out.print (words [i] [j]);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46755684_46756106_1_30
46755684_46756460_1_10
Title: "Triangle printing letters in the wrong order and unwanted characters" 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    int a = 0;
    int b = 0;
    while (a != - 1) {
        System.out.println ("How many rows would you like? (finish with -1):");
        a = scan.nextInt ();
        if (a != - 1) {
            System.out.println ("Do you want the triangle to face up (1) or down (2)?");
            int c = scan.nextInt ();
            if (c == 1) {
                for (int i = 0;
                i < a; i ++) {
                    for (int j = 0;
                    j <= i; j ++) {
                        System.out.print ((char) (j + 'A'));
                    }
                    System.out.println ();
                }
            } else {
                for (int i = 0;
                i < a; i ++) {
                    for (int j = a;
                    j > i; j --) {
                        System.out.print ((char) (a - j + 'A'));
                    }
                    System.out.println ();
                }
            }
        }
    }
}
----------------------------------------

public static void main (String args []) {
    int a = 4;
    for (int i = 1;
    i <= a; i ++) printRow (i);

    System.out.println ("--------");
    for (int i = a;
    i > 0; i --) printRow (i);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46767076_46767382_1_17
46767076_46767586_1_30
Title: Removing only the last word in an ArrayList of Strings 
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > list = new ArrayList < String > ();
    list.add ("8.4 8.4");
    list.add ("6.5 8.0");
    list.add ("5.0 6.3 10.0");
    ArrayList < String > restlist = new ArrayList < String > ();
    ArrayList < String > lastlist = new ArrayList < String > ();
    for (String str : list) {
        String everything = str.trim ();
        String [] words = everything.split (" ");
        String lastWord = words [words.length - 1];
        String restWords = everything.substring (0, everything.length () - lastWord.length ());
        lastlist.add (lastWord);
        restlist.add (restWords);
    }
    System.out.println (restlist);
    System.out.println (lastlist);
}
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > list = new ArrayList < String > ();
    list.add ("8.4 8.4");
    list.add ("6.5 8.0");
    list.add ("5.0 6.3 10.0");
    List < List < String > > split = new ArrayList < List < String > > ();
    for (String str : list) {
        String [] strSp = str.split (" ");
        List < String > row = new ArrayList < > ();
        split.add (row);
        Collections.addAll (row, strSp);
    }
    System.out.println ("all=> " + split);
    System.out.println ();
    System.out.println ("without last column=> ");
    for (List < String > strings : split) {
        for (int i = 0;
        i < strings.size () - 1; i ++) {
            System.out.print (strings.get (i) + " ");
        }
        System.out.println ();
    }
    System.out.println ();
    System.out.print ("last columns=> ");
    for (List < String > strings : split) {
        System.out.print (strings.get (strings.size () - 1) + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46767089_46767821_2_12
46767089_46767912_18_41
Title: String Splitup and assign to array in Java 
----------------------------------------

public static void main (String args []) {
    List < Double > priceList = new ArrayList < > ();
    List < Integer > qtyList = new ArrayList < > ();
    Scanner sc = new Scanner (System.in);
    String input = sc.nextLine ();
    if (input != null) {
        String [] arr = input.split ("  ");
        priceList.add (Double.parseDouble (arr [0]));
        qtyList.add (Integer.parseInt (arr [1]));
    }
}
----------------------------------------

public static void main (String args []) throws Exception {
    DataInputStream din = new DataInputStream (System.in);
    int N = 0;
    ArrayList < Item > arr = new ArrayList < Item > ();
    System.out.println ("Enter count of Line Items:");
    N = Integer.parseInt (din.readLine ());
    for (int i = 0;
    i < N; i ++) {
        String st = din.readLine ();
        Item item = new Item (Float.parseFloat (st.split (" ") [0]), Integer.parseInt (st.split (" ") [1]));
    }
    for (Item item : arr) {
        System.out.println ("Price: " + item.price + " Quantity: " + item.quantity);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4679028_4726043_44_60
4679028_4726043_62_74
Title: JAXB2 Mtom attachment broken by BOM 
----------------------------------------

private static void removeBOM (Reader reader) throws Exception {
    if (removeBOM (reader, UTF32BE)) {
        return;
    }
    if (removeBOM (reader, UTF32LE)) {
        return;
    }
    if (removeBOM (reader, UTF16BE)) {
        return;
    }
    if (removeBOM (reader, UTF16LE)) {
        return;
    }
    if (removeBOM (reader, UTF8)) {
        return;
    }
}
----------------------------------------

private static boolean removeBOM (Reader reader, char [] bom) throws Exception {
    int bomLength = bom.length;
    reader.mark (bomLength);
    char [] possibleBOM = new char [bomLength];
    reader.read (possibleBOM);
    for (int x = 0;
    x < bomLength; x ++) {
        if (bom [x] != possibleBOM [x]) {
            reader.reset ();
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46809106_46809173_1_14
46809106_46809246_1_14
Title: How do I find if the array have any two elements (i+j) which is equal to my given key? 
----------------------------------------

public static boolean checkPair (int [] arr, int key) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i + 1;
        j < arr.length; j ++) {
            if (arr [i] + arr [j] == key) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

public static boolean checkPair (int [] arr, int key) {
    boolean isMacthed = false;
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i + 1;
        j < arr.length; j ++) {
            if (arr [i] + arr [j] == key) {
                isMacthed = true;
                break;
            }
        }
        if (isMacthed) break;

    }
    return isMacthed;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46809106_46809173_1_14
46809106_46809896_1_18
Title: How do I find if the array have any two elements (i+j) which is equal to my given key? 
----------------------------------------

public static boolean checkPair (int [] arr, int key) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i + 1;
        j < arr.length; j ++) {
            if (arr [i] + arr [j] == key) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

public static boolean checkPair (int [] arr, int key) {
    int i = 0;
    int j = arr.length - 1;
    while (i < j) {
        if (arr [i] + arr [j] > key) {
            j --;
            continue;
        }
        if (arr [i] + arr [j] < key) {
            i ++;
            continue;
        } else {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46809106_46809246_1_14
46809106_46809896_1_18
Title: How do I find if the array have any two elements (i+j) which is equal to my given key? 
----------------------------------------

public static boolean checkPair (int [] arr, int key) {
    boolean isMacthed = false;
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i + 1;
        j < arr.length; j ++) {
            if (arr [i] + arr [j] == key) {
                isMacthed = true;
                break;
            }
        }
        if (isMacthed) break;

    }
    return isMacthed;
}
----------------------------------------

public static boolean checkPair (int [] arr, int key) {
    int i = 0;
    int j = arr.length - 1;
    while (i < j) {
        if (arr [i] + arr [j] > key) {
            j --;
            continue;
        }
        if (arr [i] + arr [j] < key) {
            i ++;
            continue;
        } else {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46812878_46813322_1_12
46812878_46813404_1_18
Title: After accept permission how to open a activity? 
----------------------------------------

@Override
public void onRequestPermissionsResult (int requestCode,@NonNull
String [] permissions,@NonNull
int [] grantResults) {
    super.onRequestPermissionsResult (requestCode, permissions, grantResults);
    if (requestCode == REQUEST_CODE_CAMERA && grantResults [0] == PackageManager.PERMISSION_GRANTED) {
    } else {
    }
}
----------------------------------------

@Override
public void onRequestPermissionsResult (int requestCode,@NonNull
String [] permissions,@NonNull
int [] grantResults) {
    switch (requestCode) {
        case REQUEST_CODE_CAMERA :
            if (grantResults [0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText (this, "Thanks for your permission", LENGTH_SHORT).show ();
                openScanBarCodeAcitvity ();
            } else {
                Toast.makeText (this, "We need your permission to open camera", LENGTH_SHORT).show ();
            }
        default :
            super.onRequestPermissionsResult (requestCode, permissions, grantResults);
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46820425_46820971_1_18
46820425_46821211_1_10
Title: How to arrange an array vertically instead of horizontally? 
----------------------------------------

public static void fillDown (int [] [] fillDownArray, int step) {
    int count = 0;
    for (int i = 0;
    i < fillDownArray.length; i ++) {
        for (int j = 0;
        j < fillDownArray [i].length; j ++) {
            count ++;
            fillDownArray [i] [j] += step * count;
        }
    }
    for (int j = 0;
    j < fillDownArray [0].length; j ++) {
        for (int i = 0;
        i < fillDownArray.length; i ++) {
            System.out.print (fillDownArray [i] [j] + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void fillDown (int [] [] fillDownArray, int step) {
    final int NESTED_ARRAY_LENGTH = fillDownArray [0].length;
    for (int j = 0;
    j < NESTED_ARRAY_LENGTH; j ++) {
        for (int i = 0;
        i < fillDownArray.length; i ++) {
            fillDownArray [i] [j] = step * (j + 1) + NESTED_ARRAY_LENGTH * step * i;
            System.out.print (fillDownArray [i] [j] + " ");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46824161_46825001_129_144
46824161_46825001_97_109
Title: Polylines are not showing between 2 Locations but Time and Distance is showing 
----------------------------------------

protected List < HashMap < String, String > > doInBackground (String...jsonData) {
    JSONObject jObject;
    List < HashMap < String, String > > routes = null;
    try {
        jObject = new JSONObject (jsonData [0]);
        DistanceTimeParser parser = new DistanceTimeParser ();
        routes = parser.parse (jObject);
    } catch (Exception e) {
        e.printStackTrace ();
    }
    return routes;
}
----------------------------------------

protected String doInBackground (String...url) {
    String data = "";
    try {
        data = downloadUrl (url [0]);
    } catch (Exception e) {
        Log.d ("Background Task", e.toString ());
    }
    return data;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46837194_46837678_7_19
46837194_46837849_6_28
Title: Java Using Scanner to Read File and Then Read Line 
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    Scanner fileInput = new Scanner (new File ("textwithspaces.txt"));
    while (fileInput.hasNext ()) {
        String nextLine = fileInput.nextLine ();
        Scanner lineInput = new Scanner (nextLine);
        while (lineInput.hasNext ()) {
            System.out.print (lineInput.next () + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) throws FileNotFoundException {
    File file = new File ("textwithspaces.txt");
    Scanner scannerWithFile = new Scanner (file);
    do {
        String thisLine = scannerWithFile.nextLine ();
        if (! thisLine.isEmpty ()) {
            thisLine = thisLine.replaceAll (" ", "");
            System.out.println (thisLine);
        }
    } while (scannerWithFile.hasNext ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46840085_46840235_5_28
46840085_46840291_3_26
Title: Removing vowels from an input string using a loop 
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    String s = "";
    System.out.println ("Type a tweet: ");
    String input = keyboard.nextLine ();
    int tweetLengthAllowed = 5;
    int i = 0;
    boolean isNotVowel;
    boolean limitReached;
    for (char c : input.toCharArray ()) {
        isNotVowel = "AEIOUaeiou".indexOf (c) == - 1;
        limitReached = tweetLengthAllowed <= i;
        if (limitReached) {
            break;
        } else if (isNotVowel) {
            s += c;
            i ++;
        }

    }
    System.out.println (s);
}
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    String s = "";
    System.out.println ("Type a tweet: ");
    String input = keyboard.nextLine ();
    int f = 0;
    int tweetLengthAllowed = 5;
    for (int i = 0;
    i < tweetLengthAllowed; ++ i) {
        char c = input.charAt (i);
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
            f = 1;
            tweetLengthAllowed ++;
        } else {
            s = s += c;
            f = 0;
        }
    }
    System.out.println (s);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46841450_46841947_17_26
46841450_46841947_3_12
Title: How to sort out by index(0) alphabelically or index(2) of the List<String> in the ArrayList<List<String>> as bellow 
----------------------------------------

public int compare (List < String > list1, List < String > list2) {
    if (list1.size () >= 3 && list2.size () >= 3) {
        return Integer.valueOf (list1.get (2)).compareTo (Integer.valueOf (list2.get (2)));
    } else if (list1.size () < list2.size ()) {
        return - 1;
    } else if (list1.size () > list2.size ()) {
        return 1;
    }

    return 0;
}
----------------------------------------

public int compare (List < String > list1, List < String > list2) {
    if (list1.size () >= 1 && list2.size () >= 1) {
        return list1.get (0).compareTo (list2.get (0));
    } else if (list1.size () < list2.size ()) {
        return - 1;
    } else if (list1.size () > list2.size ()) {
        return 1;
    }

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46841780_46841983_20_31
46841780_46842002_3_25
Title: Copying two arrays into one array 
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {31, 14, 5, 12, 50, 80, 100, 29, 58, 57};
    int [] arrayB = {9, 13, 156, 78, 36, 46, 86, 98, 63, 2};
    int [] arrayC = combineArrays (arrayA, arrayB);
    System.out.println ("The values of ArrayC are: ");
    for (int val : arrayC) {
        System.out.println (val);
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] arrayA = {31, 14, 5, 12, 50, 80, 100, 29, 58, 57};
    int [] arrayB = {9, 13, 156, 78, 36, 46, 86, 98, 63, 2};
    int [] arrayC = new int [arrayA.length + arrayB.length];
    for (int i = 0;
    i < arrayA.length; i ++) arrayC [i] = arrayA [i];

    int element = arrayA.length;
    for (int i = 0;
    i < arrayB.length; i ++) {
        arrayC [element + i] = arrayB [i];
    }
    System.out.println ("The values of ArrayC are: ");
    for (int val : arrayC) {
        System.out.println (val);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46852719_46852902_1_13
46852719_46853573_1_21
Title: Pair elements equally between two ArrayLists 
----------------------------------------

public static ArrayList < String > assignGraders (List < String > students, List < String > graders) {
    ArrayList < String > list = new ArrayList < > ();
    int average = students.size () / graders.size ();
    int j = 0;
    for (int i = 0;
    i < students.size (); i ++) {
        list.add (students.get (i) + ", " + graders.get (j));
        j ++;
        if (j == graders.size ()) {
            j = 0;
        }
    }
    return list;
}
----------------------------------------

public static ArrayList < String > assignGraders (ArrayList < String > students, ArrayList < String > graders) {
    int studentsSize = students.size ();
    int gradersSize = graders.size ();
    int studentToGrader = studentsSize / gradersSize;
    int assignedStudents = 0;
    ArrayList < String > studToGrader = new ArrayList < String > (students.size ());
    while (assignedStudents < studentsSize) {
        int i = 0;
        while (i < studentToGrader) {
            studToGrader.add (students.get (assignedStudents) + "--" + graders.get (i));
            assignedStudents ++;
            i ++;
        }
    }
    return studToGrader;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46855327_46855634_5_35
46855327_46855671_6_37
Title: Finding a missing number in an array that uses a random generator 
----------------------------------------

public static void main (String [] args) {
    int [] numbers = new int [9];
    Random rand = new Random ();
    int numArr = 1;
    numbers [0] = rand.nextInt (10) + 1;
    for (int i = 1;
    i < 9; i ++) {
        int n = rand.nextInt (10) + 1;
        numbers [i] = n;
        int x = 0;
        while (x < i) {
            if (numbers [x] == n) {
                i = i - 1;
                break;
            }
            x ++;
        }
    }
    int sum = 0;
    for (int val : numbers) {
        sum = sum + val;
        System.out.println ("The next value is " + val);
    }
    System.out.println ("Missing number is " + (55 - sum));
}
----------------------------------------

public static void main (String [] args) {
    int [] numbers = new int [9];
    Random rand = new Random ();
    for (int i = 0;
    i < 9; i ++) {
        numbers [i] = checkForANumber (rand, numbers, i);
    }
    for (int val : numbers) System.out.println ("The next value is " + val);

    for (int i = 1;
    i <= 10; i ++) {
        boolean exist = false;
        for (int val : numbers) {
            if (val == i) {
                exist = true;
            }
        }
        if (! exist) System.out.println ("The missing number is " + i);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46857104_46858039_46_67
46857104_46861248_1_65
Title: Interview test: Implement a decoding algorithm 
----------------------------------------

private static void decode (Pair pair) {
    String pattern = code.substring (pair.s + 1, pair.e);
    String patternCount = code.substring (pair.s - 1, pair.s);
    if (! parseInteger (patternCount)) {
        code = code.replace (code.substring (pair.s - 1, pair.e + 1), "");
    } else if (parseInteger (pattern)) {
        Scanner scanner = new Scanner (System.in);
        System.out.println ("Enter Code for : " + code.substring (pair.s - 1, pair.e + 1));
        String replacement = "";
        pattern = scanner.nextLine ();
        for (int i = 0;
        i < Integer.parseInt (patternCount); i ++) {
            replacement = replacement + pattern;
        }
        code = code.replace (code.substring (pair.s - 1, pair.e + 1), replacement);
    } else {
        String replacement = "";
        for (int i = 0;
        i < Integer.parseInt (patternCount); i ++) {
            replacement = replacement + pattern;
        }
        code = code.replace (code.substring (pair.s - 1, pair.e + 1), replacement);
    }

}
----------------------------------------

public static String decode (String in) {
    Deque < Character > stack = new ArrayDeque < Character > ();
    Deque < Integer > occurencesStack = new ArrayDeque < Integer > ();
    StringBuilder result = new StringBuilder ();
    int brackets = 0;
    for (int i = 0;
    i < in.length (); ++ i) {
        Character ch = in.charAt (i);
        if (ch == '[') {
            ++ brackets;
            continue;
        } else if (ch == ']') {
            -- brackets;
            StringBuilder temp = new StringBuilder ();
            while (! stack.isEmpty ()) {
                Character top = stack.pop ();
                temp.append (top);
            }
            int times = occurencesStack.pop ();
            if (temp.length () == 0) {
                temp = new StringBuilder (result);
                result.setLength (0);
                for (int j = 0;
                j < times; ++ j) {
                    result.append (temp);
                }
            } else {
                temp.reverse ();
                for (int j = 0;
                j < times; ++ j) {
                    result.append (temp);
                }
                temp.setLength (0);
            }
        } else if (Character.isDigit (ch)) {
            StringBuilder nb = new StringBuilder ();
            nb.append (ch);
            while (i < in.length () - 1 && Character.isDigit (in.charAt (i + 1))) {
                nb.append (in.charAt (i + 1));
                ++ i;
            }
            if (i < in.length () - 1 && in.charAt (i + 1) == ']') {
                throw new IllegalArgumentException ("Invalid sequence");
            }
            occurencesStack.push (Integer.parseInt (nb.toString ()));
        } else if (ch >= 'a' && ch <= 'z') {
            if (i < in.length () - 1 && in.charAt (i + 1) == '[') {
                throw new IllegalArgumentException ("Invalid sequence");
            }
            stack.push (ch);
        } else {
            throw new IllegalArgumentException ("Invalid character in sequence " + ch);
        }

    }
    if (brackets != 0) {
        throw new IllegalArgumentException ("Unmatched brackets!");
    }
    return result.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46857104_46858039_46_67
46857104_47144971_1_42
Title: Interview test: Implement a decoding algorithm 
----------------------------------------

private static void decode (Pair pair) {
    String pattern = code.substring (pair.s + 1, pair.e);
    String patternCount = code.substring (pair.s - 1, pair.s);
    if (! parseInteger (patternCount)) {
        code = code.replace (code.substring (pair.s - 1, pair.e + 1), "");
    } else if (parseInteger (pattern)) {
        Scanner scanner = new Scanner (System.in);
        System.out.println ("Enter Code for : " + code.substring (pair.s - 1, pair.e + 1));
        String replacement = "";
        pattern = scanner.nextLine ();
        for (int i = 0;
        i < Integer.parseInt (patternCount); i ++) {
            replacement = replacement + pattern;
        }
        code = code.replace (code.substring (pair.s - 1, pair.e + 1), replacement);
    } else {
        String replacement = "";
        for (int i = 0;
        i < Integer.parseInt (patternCount); i ++) {
            replacement = replacement + pattern;
        }
        code = code.replace (code.substring (pair.s - 1, pair.e + 1), replacement);
    }

}
----------------------------------------

private static void decode (String value) {
    int startBracket = 0;
    int endBracket = 0;
    int encodedCount = 0;
    int startIndex = 0;
    String result = "";
    StringBuilder temp = new StringBuilder ();
    char [] data = value.toCharArray ();
    for (int i = 0;
    i < data.length; i ++) {
        if (data [i] == '[') {
            if (encodedCount == 0) {
                encodedCount = Character.getNumericValue (data [i - 1]);
                startIndex = i;
            }
            startBracket ++;
            continue;
        }
        if (data [i] == ']') {
            endBracket ++;
        }
        if (startBracket == endBracket && startBracket != 0 && endBracket != 0) {
            System.out.println (encodedCount);
            result = value.substring (0, startIndex - 1);
            String expandedTarget = value.substring (startIndex + 1, i);
            String remainingEncodedValue = value.substring (i + 1, value.length ());
            System.out.println (expandedTarget);
            System.out.println (remainingEncodedValue);
            for (int j = 1;
            j <= encodedCount; j ++) {
                temp.append (expandedTarget);
            }
            if (remainingEncodedValue.length () > 1) temp.append (remainingEncodedValue);

            System.out.println ("Decoded Result : " + result + temp.toString ());
            decode (result + temp.toString ());
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46857104_46861248_1_65
46857104_47144971_1_42
Title: Interview test: Implement a decoding algorithm 
----------------------------------------

public static String decode (String in) {
    Deque < Character > stack = new ArrayDeque < Character > ();
    Deque < Integer > occurencesStack = new ArrayDeque < Integer > ();
    StringBuilder result = new StringBuilder ();
    int brackets = 0;
    for (int i = 0;
    i < in.length (); ++ i) {
        Character ch = in.charAt (i);
        if (ch == '[') {
            ++ brackets;
            continue;
        } else if (ch == ']') {
            -- brackets;
            StringBuilder temp = new StringBuilder ();
            while (! stack.isEmpty ()) {
                Character top = stack.pop ();
                temp.append (top);
            }
            int times = occurencesStack.pop ();
            if (temp.length () == 0) {
                temp = new StringBuilder (result);
                result.setLength (0);
                for (int j = 0;
                j < times; ++ j) {
                    result.append (temp);
                }
            } else {
                temp.reverse ();
                for (int j = 0;
                j < times; ++ j) {
                    result.append (temp);
                }
                temp.setLength (0);
            }
        } else if (Character.isDigit (ch)) {
            StringBuilder nb = new StringBuilder ();
            nb.append (ch);
            while (i < in.length () - 1 && Character.isDigit (in.charAt (i + 1))) {
                nb.append (in.charAt (i + 1));
                ++ i;
            }
            if (i < in.length () - 1 && in.charAt (i + 1) == ']') {
                throw new IllegalArgumentException ("Invalid sequence");
            }
            occurencesStack.push (Integer.parseInt (nb.toString ()));
        } else if (ch >= 'a' && ch <= 'z') {
            if (i < in.length () - 1 && in.charAt (i + 1) == '[') {
                throw new IllegalArgumentException ("Invalid sequence");
            }
            stack.push (ch);
        } else {
            throw new IllegalArgumentException ("Invalid character in sequence " + ch);
        }

    }
    if (brackets != 0) {
        throw new IllegalArgumentException ("Unmatched brackets!");
    }
    return result.toString ();
}
----------------------------------------

private static void decode (String value) {
    int startBracket = 0;
    int endBracket = 0;
    int encodedCount = 0;
    int startIndex = 0;
    String result = "";
    StringBuilder temp = new StringBuilder ();
    char [] data = value.toCharArray ();
    for (int i = 0;
    i < data.length; i ++) {
        if (data [i] == '[') {
            if (encodedCount == 0) {
                encodedCount = Character.getNumericValue (data [i - 1]);
                startIndex = i;
            }
            startBracket ++;
            continue;
        }
        if (data [i] == ']') {
            endBracket ++;
        }
        if (startBracket == endBracket && startBracket != 0 && endBracket != 0) {
            System.out.println (encodedCount);
            result = value.substring (0, startIndex - 1);
            String expandedTarget = value.substring (startIndex + 1, i);
            String remainingEncodedValue = value.substring (i + 1, value.length ());
            System.out.println (expandedTarget);
            System.out.println (remainingEncodedValue);
            for (int j = 1;
            j <= encodedCount; j ++) {
                temp.append (expandedTarget);
            }
            if (remainingEncodedValue.length () > 1) temp.append (remainingEncodedValue);

            System.out.println ("Decoded Result : " + result + temp.toString ());
            decode (result + temp.toString ());
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46858520_46860957_2_40
46858520_46862268_25_52
Title: Update and retain existing data with RxJava 
----------------------------------------

public static void main (String [] args) {
    Observable < List < Integer > > observable1 = Observable.just (Arrays.asList (0, 1));
    Observable < List < Integer > > observable2 = Observable.just (Arrays.asList (10, 11));
    Observable < List < Integer > > observable3 = Observable.just (Arrays.asList (20, 21));
    Observable.zip (observable1, observable2, observable3, new Func3 < List < Integer >, List < Integer >, List < Integer >, List < Integer > > () {
        @Override
        public List < Integer > call (List < Integer > list1, List < Integer > list2, List < Integer > list3) {
            List < Integer > mergedList = new ArrayList < > ();
            mergedList.addAll (list1);
            mergedList.addAll (list2);
            mergedList.addAll (list3);
            return mergedList;
        }}

    ).subscribe (new Observer < List < Integer > > () {
        @Override
        public void onNext (List < Integer > mergedList) {
            System.out.println (mergedList);
        }@Override
        public void onError (Throwable throwable) {
            System.out.println (throwable.toString ());
        }@Override
        public void onCompleted () {
        }}

    );
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final List < Feed > [] currentList = new List [] {new ArrayList ()};
    refreshContent (currentList [0]).subscribe (feeds -> {
        currentList [0] = feeds;
        for (int i = 0;
        i < currentList [0].size (); i ++) {
            System.out.println (currentList [0].get (i).content);
        }
    });
    Thread.sleep (2000);
    System.out.println ();
    refreshContent (currentList [0]).subscribe (feeds -> {
        currentList [0] = feeds;
        for (int i = 0;
        i < currentList [0].size (); i ++) {
            System.out.println (currentList [0].get (i).content);
        }
    });
    Thread.sleep (2000);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46863214_46865525_20_38
46863214_46866538_1_23
Title: Finding the maximum row for each set of rows in 3D array 
----------------------------------------

public static void getMaxVotes (int [] [] [] votes) {
    int largestInt = - 1;
    String largestRowIndex = "";
    for (int i = 0;
    i < votes.length; i ++) {
        for (int j = 0;
        j < votes [i].length; j ++) {
            for (int k = 0;
            k < votes [i] [j].length; k ++) {
                if (largestInt <= votes [i] [j] [k]) {
                    largestInt = votes [i] [j] [k];
                    largestRowIndex = "votes[" + i + "][" + j + "][" + k + "]";
                }
            }
        }
    }
    System.out.println (largestInt);
    System.out.println (largestRowIndex);
    return;
}
----------------------------------------

public static void getMaxVotes (int [] [] [] votes, String [] [] uniStud, int size, int size1, PrintWriter uniWrite) {
    int maxRow = 0;
    int indexOfMaxRow = 0;
    for (int column = 0;
    column < votes [size].length; column ++) {
        maxRow += votes [size] [0] [column];
    }
    for (int row = 0;
    row < votes [size].length; row ++) {
        int totalOfThisRow = 0;
        for (int column = 0;
        column < votes [size] [row].length; column ++) {
            totalOfThisRow += votes [size] [row] [column];
        }
        if (totalOfThisRow > maxRow) {
            maxRow = totalOfThisRow;
            indexOfMaxRow = row;
        }
    }
    System.out.println (" has the maximum sum of " + maxRow);
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46869837_46869946_8_23
46869837_46870121_1_17
Title: Using a while loop in Java to count sentences 
----------------------------------------

public static void main (String...arg) {
    int numSentences = 0;
    Scanner countSentences = new Scanner (inputText);
    while (countSentences.hasNext ()) {
        String sentence = countSentences.useDelimiter (SENTENCE_DELIMITERS).next ();
        System.out.println (sentence);
        if (sentence.compareTo ("") != 0) {
            numSentences ++;
        }
    }
    System.out.println ("#ofSentences" + numSentences);
}
----------------------------------------

public static void main (String...arg) {
    int numSentences = 0;
    Scanner countSentences = new Scanner (inputText);
    countSentences.useDelimiter (SENTENCE_DELIMITERS);
    while (countSentences.hasNext ()) {
        String sentence = countSentences.next ();
        System.out.println (sentence);
        if (sentence.compareTo ("") != 0) {
            numSentences ++;
        }
    }
    System.out.println ("#ofSentences" + numSentences);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46877785_46877958_13_22
46877785_46878144_1_24
Title: Java Prime Number check with User Input 
----------------------------------------

private static boolean isPrime (final int in) {
    if (in < 2) return false;

    for (int i = 2;
    i <= Math.sqrt (in); i ++) {
        if (in % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

boolean isPrime (int n) {
    if (n <= 0) return false;

    BitSet sieve = new BitSet (n + 1);
    sieve.set (0, n + 1);
    sieve.clear (0);
    sieve.clear (1);
    for (int i = 2;
    i <= n; ++ i) {
        if (sieve.get (i)) {
            for (int j = 2 * i;
            j <= n; j += i) {
                sieve.clear (j);
            }
        }
    }
    return sieve.get (n);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46877785_46877958_13_22
46877785_46878940_1_16
Title: Java Prime Number check with User Input 
----------------------------------------

private static boolean isPrime (final int in) {
    if (in < 2) return false;

    for (int i = 2;
    i <= Math.sqrt (in); i ++) {
        if (in % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

private static boolean isPrime (int n) {
    if (n <= 1) {
        return false;
    } else if (n <= 3) {
        return true;
    } else if (n % 2 == 0 || n % 3 == 0) {
        return false;
    }

    int sq = (int) Math.ceil (Math.sqrt (n));
    for (int i = 5;
    i <= sq; i += 6) {
        if (n % i == 0 || n % 2 + i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46877785_46878144_1_24
46877785_46878940_1_16
Title: Java Prime Number check with User Input 
----------------------------------------

boolean isPrime (int n) {
    if (n <= 0) return false;

    BitSet sieve = new BitSet (n + 1);
    sieve.set (0, n + 1);
    sieve.clear (0);
    sieve.clear (1);
    for (int i = 2;
    i <= n; ++ i) {
        if (sieve.get (i)) {
            for (int j = 2 * i;
            j <= n; j += i) {
                sieve.clear (j);
            }
        }
    }
    return sieve.get (n);
}
----------------------------------------

private static boolean isPrime (int n) {
    if (n <= 1) {
        return false;
    } else if (n <= 3) {
        return true;
    } else if (n % 2 == 0 || n % 3 == 0) {
        return false;
    }

    int sq = (int) Math.ceil (Math.sqrt (n));
    for (int i = 5;
    i <= sq; i += 6) {
        if (n % i == 0 || n % 2 + i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46888770_46888822_1_13
46888770_46888840_1_13
Title: method gives error to make method return void 
----------------------------------------

public Step createStep (int position) {
    try {
        final StepFragmentSample step = new StepFragmentSample ();
        Bundle b = new Bundle ();
        b.putInt (CURRENT_STEP_POSITION_KEY, position);
        step.setArguments (b);
        return step;
    } catch (Exception e) {
        e.printStackTrace ();
        Log.e ("/Test", "/Excp due to" + e.toString ());
        return null;
    }
}
----------------------------------------

public Step createStep (int position) {
    try {
        final StepFragmentSample step = new StepFragmentSample ();
        Bundle b = new Bundle ();
        b.putInt (CURRENT_STEP_POSITION_KEY, position);
        step.setArguments (b);
    } catch (Exception e) {
        e.printStackTrace ();
        Log.e ("/Test", "/Excp due to" + e.toString ());
    }
    return step;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46888770_46888829_1_13
46888770_46888840_1_13
Title: method gives error to make method return void 
----------------------------------------

public Step createStep (int position) {
    try {
        final StepFragmentSample step = new StepFragmentSample ();
        Bundle b = new Bundle ();
        b.putInt (CURRENT_STEP_POSITION_KEY, position);
        step.setArguments (b);
        return step;
    } catch (Exception e) {
        e.printStackTrace ();
        Log.e ("/Test", "/Excp due to" + e.toString ());
    }
    return new Step ();
}
----------------------------------------

public Step createStep (int position) {
    try {
        final StepFragmentSample step = new StepFragmentSample ();
        Bundle b = new Bundle ();
        b.putInt (CURRENT_STEP_POSITION_KEY, position);
        step.setArguments (b);
    } catch (Exception e) {
        e.printStackTrace ();
        Log.e ("/Test", "/Excp due to" + e.toString ());
    }
    return step;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46900236_46900417_4_16
46900236_46901028_5_21
Title: How do I get delimiter to work? 
----------------------------------------

public static void main (String [] args) {
    Scanner reader = new Scanner (System.in);
    System.out.println ("Please enter a date to be checked using the format mm/dd/yyyy.");
    String [] test = reader.nextLine ().split ("/");
    int mm = Integer.parseInt (test [0]);
    int dd = Integer.parseInt (test [1]);
    int yy = Integer.parseInt (test [2]);
    System.out.println ("Your date is " + mm + ":" + dd + ":" + yy);
}
----------------------------------------

public static void main (String [] args) {
    try (Scanner reader = new Scanner (System.in)) {
        do {
            System.out.println ("Please enter a date to be checked using the format mm/dd/yyyy.");
            if (reader.findInLine ("(\\d+)/(\\d+)/(\\d+)") != null) {
                MatchResult result = reader.match ();
                int dd = Integer.parseInt (result.group (1));
                int mm = Integer.parseInt (result.group (2));
                int yy = Integer.parseInt (result.group (3));
                System.out.println ("Your date is " + mm + ":" + dd + ":" + yy);
                break;
            } else {
                reader.nextLine ();
            }
        } while (true);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46901771_46901810_1_11
46901771_46901845_1_10
Title: nested for loop even number print out 
----------------------------------------

public static void mjj () {
    int s = 1;
    for (int i = 1;
    i <= 5; i ++) {
        for (int j = 1;
        j <= 20; j ++) {
            s ++;
            if (s % 2 == 0) System.out.print (s + " ");

        }
        System.out.println ();
    }
}
----------------------------------------

public static void mjj () {
    int s = 0;
    for (int i = 1;
    i <= 10; i ++) {
        for (int j = 1;
        j <= 10; j ++) {
            s = s + 2;
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46901818_46901910_1_16
46901818_46902133_1_17
Title: Write method countVowels to take a string and return the amount of vowels 
----------------------------------------

public int countVowels (String str) {
    int vowelCount = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.toLowerCase ().toCharArray () [i] == 'a' | str.toLowerCase ().toCharArray () [i] == 'e' | str.toLowerCase ().toCharArray () [i] == 'i' | str.toLowerCase ().toCharArray () [i] == 'o' | str.toLowerCase ().toCharArray () [i] == 'u') {
            vowelCount ++;
        }
    }
    return vowelCount;
}
----------------------------------------

public static String countVowels (String count) {
    int Vowelcount = 0;
    String [] arr = count.split (" ");
    for (int i = 0;
    i <= arr.length - 1; i ++) {
        for (char ch : arr [i].toCharArray ()) {
            if (ch == 'e' || ch == 'a' || ch == 'o' || ch == 'u' || ch == 'i') {
                Vowelcount += 1;
            }
        }
    }
    return Integer.toString (Vowelcount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46908895_46909429_6_20
46908895_46909945_6_32
Title: "Java save random generated number several times to use them later" 
----------------------------------------

public static void main (String args []) {
    ArrayList < Integer > rands = new ArrayList ();
    Scanner scan = new Scanner (System.in);
    System.out.println ("Set the ammount of minutes that the program lasts");
    int minutes = scan.nextInt ();
    while (minutes > 0) {
        pause ();
        rands.add (ThreadLocalRandom.current ().nextInt (0, 100));
        minutes --;
    }
    System.out.println (rands);
}
----------------------------------------

public static void main (String args []) {
    ArrayList < Integer > temps = new ArrayList ();
    Scanner scan = new Scanner (System.in);
    System.out.println ("Set the ammount of minutes that the program lasts");
    int minutes = scan.nextInt ();
    System.out.println ("Enter max temperature");
    int maxT = scan.nextInt ();
    System.out.println ("Enter min temperature");
    int minT = scan.nextInt ();
    int count = 0;
    while (minutes > 0) {
        minutes --;
        pause ();
        int newTemp = (ThreadLocalRandom.current ().nextInt (0, 100));
        temps.add (newTemp);
        if (newTemp > maxT || newTemp < minT) count ++;

        if (count > 3) {
            System.out.println ("ALERT! Issue at time :" + minutes);
            break;
        }
    }
    System.out.println (temps);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46929363_46940285_36_44
46929363_46940285_70_78
Title: I want to know(print) state of one thread from another thread... can we do that? 
----------------------------------------

private void waitForTurn () {
    if (! shareable.threadToRun.equals (getName ())) {
        try {
            shareable.wait ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

private void waitForTurn () {
    if (! shareable.threadToRun.equals (getName ())) {
        try {
            shareable.wait ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46949438_46949740_1_35
46949438_46958232_12_99
Title: Java: ordering elements without use of array 
----------------------------------------

public static void main (String...args) {
    int a = 32;
    int b = 42;
    int c = 2;
    int d = 88;
    int e = 92901;
    int counter = 0;
    while (counter < 5) {
        int currentMin = findMin (a, b, c, d, e);
        System.out.print (currentMin + " ");
        if (a == currentMin) {
            a = Integer.MAX_VALUE;
        }
        if (b == currentMin) {
            b = Integer.MAX_VALUE;
        }
        if (c == currentMin) {
            c = Integer.MAX_VALUE;
        }
        if (d == currentMin) {
            d = Integer.MAX_VALUE;
        }
        if (e == currentMin) {
            e = Integer.MAX_VALUE;
        }
        counter ++;
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    int a = Integer.parseInt (br.readLine ());
    int b = Integer.parseInt (br.readLine ());
    int c = Integer.parseInt (br.readLine ());
    int d = Integer.parseInt (br.readLine ());
    int e = Integer.parseInt (br.readLine ());
    int temp, smallest, idx;
    temp = a;
    smallest = Math.min (a, Math.min (b, Math.min (c, Math.min (d, e))));
    idx = find_min_index (a, b, c, d, e, smallest);
    a = smallest;
    if (idx == 1) a = temp;
    else if (idx == 2) b = temp;
    else if (idx == 3) c = temp;
    else if (idx == 4) d = temp;
    else e = temp;

    temp = b;
    smallest = Math.min (b, Math.min (c, Math.min (d, e)));
    idx = find_min_index (Integer.MAX_VALUE, b, c, d, e, smallest);
    b = smallest;
    if (idx == 1) a = temp;
    else if (idx == 2) b = temp;
    else if (idx == 3) c = temp;
    else if (idx == 4) d = temp;
    else e = temp;

    temp = c;
    smallest = Math.min (c, Math.min (d, e));
    idx = find_min_index (Integer.MAX_VALUE, Integer.MAX_VALUE, c, d, e, smallest);
    c = smallest;
    if (idx == 1) a = temp;
    else if (idx == 2) b = temp;
    else if (idx == 3) c = temp;
    else if (idx == 4) d = temp;
    else e = temp;

    temp = d;
    smallest = Math.min (d, e);
    idx = find_min_index (Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, d, e, smallest);
    d = smallest;
    if (idx == 1) a = temp;
    else if (idx == 2) b = temp;
    else if (idx == 3) c = temp;
    else if (idx == 4) d = temp;
    else e = temp;

    System.out.println (a + " " + b + " " + c + " " + d + " " + e);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46950163_46950316_12_25
46950163_46950558_10_30
Title: Can't seem to figure out why bubble sort is not working in java 
----------------------------------------

public static int [] bubbleSort (int [] a) {
    int temp = 0;
    int n = a.length;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 1;
        j < n; j ++) {
            if (a [j - 1] > a [j]) {
                temp = a [j - 1];
                a [j - 1] = a [j];
                a [j] = temp;
            }
        }
    }
    return a;
}
----------------------------------------

public static void bubbleSort (int [] a) {
    int temp = 0;
    int n = a.length;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 1;
        j < (n - i); j ++) {
            if (a [j - 1] > a [j]) {
                temp = a [j - 1];
                a [j - 1] = a [j];
                a [j] = temp;
            }
        }
    }
    for (int i = 0;
    i < a.length; i ++) {
        System.out.print (a [i] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46950163_46950558_10_30
46950163_46951074_7_24
Title: Can't seem to figure out why bubble sort is not working in java 
----------------------------------------

public static void bubbleSort (int [] a) {
    int temp = 0;
    int n = a.length;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 1;
        j < (n - i); j ++) {
            if (a [j - 1] > a [j]) {
                temp = a [j - 1];
                a [j - 1] = a [j];
                a [j] = temp;
            }
        }
    }
    for (int i = 0;
    i < a.length; i ++) {
        System.out.print (a [i] + " ");
    }
}
----------------------------------------

public static void bubbleSort (int [] a) {
    int temp;
    int n = a.length;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 1;
        j < n; j ++) {
            if (a [j - 1] > a [j]) {
                temp = a [j - 1];
                a [j - 1] = a [j];
                a [j] = temp;
            }
        }
    }
    System.out.println (Arrays.toString (a));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46957406_46959078_58_68
46957406_46960646_11_22
Title: Can Handler return a Future object? 
----------------------------------------

public T get () throws InterruptedException, CancellationException {
    while (_state == State.Empty) {
        synchronized (_lock) {
            _lock.wait ();
        }
    }
    if (_state == State.Resolved) return _result;
    else throw new CancellationException ();

}
----------------------------------------

T get () {
    while (! ready) {
        synchronized (this) {
            try {
                wait ();
            } catch (InterruptedException e) {
                return null;
            }
        }
    }
    return object;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46963106_46985013_30_62
46963106_49023562_1_22
Title: Java Fabric 8 - Get Pods of Kubernetes service and starting service using Fabric8 Java API 
----------------------------------------

public static void main (String [] args) {
    System.setProperty ("KUBERNETES_AUTH_TRYKUBECONFIG_SYSTEM_PROPERTY", "true");
    Config config = Config.autoConfigure ();
    try (final KubernetesClient client = new DefaultKubernetesClient (config)) {
        System.out.println (client.namespaces ().list ());
        System.out.println (client.namespaces ().withLabel ("this", "works").list ());
        System.out.println (client.pods ().withLabel ("this", "works").list ());
        System.out.println (client.pods ().inNamespace ("test").withLabel ("this", "works").list ());
        System.out.println (client.pods ().inNamespace ("test").withName ("testing").get ());
    } catch (KubernetesClientException e) {
        logger.error (e.getMessage (), e);
    }
}
----------------------------------------

public static void main (String [] args) throws Exception {
    try {
        String url = "cluster_endpoint";
        String oathToken = "serviceAccountToken";
        Config config = new ConfigBuilder ().withMasterUrl ("").withTrustCerts (true).withOauthToken (oathToken.replaceAll ("(\\r|\\n)", "")).build ();
        KubernetesClient client = new DefaultKubernetesClient (config);
        System.out.println (client.pods ().inNamespace ("default").list ());
    } catch (KubernetesClientException kce) {
        logger.error ("KubernetesClientException : {}, {}", KubernetesErrorUtil.getErrorMsg (kce), kce);
    } catch (Exception e) {
        logger.error ("Exception :");
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46968698_46971218_138_148
46968698_46971218_43_73
Title: Calling next class not opening a new window in java using swing 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (name.equalsIgnoreCase ("Finish")) {
    } else {
        for (int i = 0;
        i < dataModel.getRowCount (); i ++) {
            System.out.println ("actionPerformed value : " + value + " " + i + " " + CHECK_COL + " " + name);
            dataModel.setValueAt (value, i, CHECK_COL);
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if ((Male.isSelected () == false) && (Female.isSelected () == false)) {
        System.out.println ("if part ");
        JOptionPane.showMessageDialog (null, "Please select system settings");
    } else {
        System.out.println ("else part ");
        EventQueue.invokeLater (new Runnable () {
            @Override
            public void run () {
                try {
                    UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace ();
                }
                JFrame frame = new JFrame ("EI Scanning");
                frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
                JPanel content = new JPanel (new GridBagLayout ());
                content.setBorder (new EmptyBorder (20, 20, 20, 20));
                frame.setContentPane (content);
                frame.add (new CustomerConfigurationPane ());
                frame.pack ();
                frame.setSize (1000, 700);
                frame.setLocationRelativeTo (null);
                frame.setVisible (true);
            }}

        );
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46968932_46969018_1_16
46968932_46969185_1_23
Title: Java do loop repeat until valid entry 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int number;
    int minimum = 5;
    int maximum = 15;
    do {
        System.out.print ("Enter a number between" + " " + minimum + " " + "and" + " " + maximum + ":");
        number = input.nextInt ();
        if (number < minimum || number > maximum) System.out.print ("Sorry, invalid");

    } while (number < minimum || number > maximum);
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int number;
    boolean check = false;
    final int minimum = 5;
    final int maximum = 15;
    do {
        System.out.print ("Enter a number between " + minimum + " and " + maximum + ":");
        number = input.nextInt ();
        if (number >= minimum && number <= maximum) check = true;
        else System.out.println ("Sorry, invalid");

        break;
    } while (check);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46974742_46974823_1_12
46974742_46975072_1_13
Title: Using try catch on FileWriter 
----------------------------------------

public static void writeAssignment (ArrayList < String > assignment, String filename) throws FileNotFoundException {
    try (FileWriter writer = new FileWriter (filename)) {
        for (String str : assignment) {
            writer.write (str + "\n");
        }
    } catch (FileNotFoundException e) {
        throw e;
    } catch (IOException e) {
        System.err.print ("Something went wrong");
    }
}
----------------------------------------

public static void writeAssignment (ArrayList < String > assignment, String filename) throws FileNotFoundException {
    try {
        FileWriter writer = new FileWriter (filename);
        for (String str : assignment) {
            writer.write (str + "\n");
        }
        writer.close ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46975995_46978047_23_32
46975995_46978047_67_76
Title: Change background screen (image) with animation by click button 
----------------------------------------

public void handleMessage (Message msg) {
    super.handleMessage (msg);
    if (msg.what == CHANGE_LEVEL) {
        int level = mClipDrawable.getLevel () + 50;
        if (level >= 10000) {
            level = 10000;
        }
        mClipDrawable.setLevel (level);
    }
}
----------------------------------------

public void handleMessage (Message msg) {
    super.handleMessage (msg);
    if (msg.what == CHANGE_LEVEL) {
        int level = imageDrawable.getLevel () + 50;
        if (level >= 10000) {
            level = 10000;
        }
        imageDrawable.setLevel (level);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46986109_46986284_1_10
46986109_46986476_57_65
Title: Custom Classes: Custom type cannot be converted to other custom type 
----------------------------------------

@Override
public int compareTo (Lot lot) {
    if (calculateArea () == lot.calculateArea ()) {
        return 0;
    } else if (calculateArea () > lot.calculateArea ()) {
        return 1;
    } else {
        return - 1;
    }

}
----------------------------------------

public int compareTo (Lot lot) {
    if (calculateArea () == lot.calculateArea ()) {
        return 0;
    } else if (calculateArea () > lot.calculateArea ()) {
        return 1;
    } else {
        return - 1;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46986109_46986284_1_10
46986109_46986476_89_97
Title: Custom Classes: Custom type cannot be converted to other custom type 
----------------------------------------

@Override
public int compareTo (Lot lot) {
    if (calculateArea () == lot.calculateArea ()) {
        return 0;
    } else if (calculateArea () > lot.calculateArea ()) {
        return 1;
    } else {
        return - 1;
    }

}
----------------------------------------

public int compareTo (Lot lot) {
    if (calculateArea () == lot.calculateArea ()) {
        return 0;
    } else if (calculateArea () > lot.calculateArea ()) {
        return 1;
    } else {
        return - 1;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46986109_46986476_57_65
46986109_46986476_89_97
Title: Custom Classes: Custom type cannot be converted to other custom type 
----------------------------------------

public int compareTo (Lot lot) {
    if (calculateArea () == lot.calculateArea ()) {
        return 0;
    } else if (calculateArea () > lot.calculateArea ()) {
        return 1;
    } else {
        return - 1;
    }

}
----------------------------------------

public int compareTo (Lot lot) {
    if (calculateArea () == lot.calculateArea ()) {
        return 0;
    } else if (calculateArea () > lot.calculateArea ()) {
        return 1;
    } else {
        return - 1;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46988694_46988886_7_16
46988694_46994983_3_16
Title: how to resolve the error in this code 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    int s = sc.nextInt ();
    for (int i = s;
    i > 0; i --) {
        for (int j = 1;
        j < s; j ++) {
            System.out.println ("*");
        }
    }
    sc.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("Enter Number :");
    int s = sc.nextInt ();
    for (int i = s;
    i > 1; i --) {
        s = s - 1;
        System.out.print ("*");
        for (int j = 1;
        j < s; j ++) {
            System.out.print ("*");
        }
        System.out.println ("");
    }
    sc.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46989392_46989458_18_29
46989392_46989458_38_51
Title: Can some one explain why program doesn't end? 
----------------------------------------

public void run () {
    synchronized (line) {
        for (int i = 0;
        i < 5; i ++) {
            try {
                if (i == 2) line.wait ();

            } catch (Exception e) {
                e.printStackTrace ();
            }
            System.out.println (Thread.currentThread ().getName () + line [i]);
        }
    }
}
----------------------------------------

public void run () {
    synchronized (line) {
        for (int i = 0;
        i < 5; i ++) {
            System.out.println (Thread.currentThread ().getName () + line [i]);
        }
    }
    try {
        synchronized (line) {
            line.notify ();
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46990919_46996437_21_31
46990919_46996437_37_47
Title: send email using implicit intent 
----------------------------------------

public void onClick (View view) {
    Intent intent = new Intent (Intent.ACTION_SEND);
    intent.setData (Uri.parse ("mailto:"));
    String [] to = {"honeysonwani88@gmail.com", ""};
    intent.putExtra (Intent.EXTRA_EMAIL, to);
    intent.putExtra (Intent.EXTRA_SUBJECT, "subject to your app");
    intent.putExtra (Intent.EXTRA_TEXT, "text inside email");
    intent.setType ("message/rfc822");
    Intent chooser = Intent.createChooser (intent, "Send email");
    startActivity (chooser);
}
----------------------------------------

public void onClick (View view) {
    Intent intent = new Intent (Intent.ACTION_SEND);
    intent.setData (Uri.parse ("mailto:"));
    String [] to = {"honeysonwani88@gmail.com", ""};
    intent.putExtra (Intent.EXTRA_EMAIL, to);
    intent.putExtra (Intent.EXTRA_SUBJECT, "subject to your app");
    intent.putExtra (Intent.EXTRA_TEXT, "text inside email");
    intent.setType ("message/rfc822");
    Intent chooser = Intent.createChooser (intent, "Send email");
    startActivity (chooser);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47003121_47004223_6_18
47003121_47010844_1_16
Title: Iterating Java Arrays in Java 8 
----------------------------------------

public static List < Integer > productExceptSelf (int [] nums) {
    List < Integer > list = Arrays.stream (nums).boxed ().collect (Collectors.toList ());
    List < Integer > results = new ArrayList < > ();
    list.forEach (value -> {
        int x = 1;
        for (Integer i : list) {
            if (value.equals (i)) continue;

            x *= i;
        }
        results.add (x);
    });
    return results;
}
----------------------------------------

private static int [] productExceptSelf (int [] arr) {
    IntBinaryOperator product = (a, b) -> a * b;
    int [] leftPrefix = IntStream.concat (IntStream.of (1), IntStream.of (arr)).toArray ();
    Arrays.parallelPrefix (leftPrefix, product);
    int [] reversedRightPrefix = reversed (IntStream.concat (IntStream.of (arr), IntStream.of (1)).toArray ());
    Arrays.parallelPrefix (reversedRightPrefix, product);
    int [] rightPrefix = reversed (reversedRightPrefix);
    return IntStream.range (0, arr.length).map (i -> product.applyAsInt (leftPrefix [i], rightPrefix [i + 1])).toArray ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47003121_47004223_6_18
47003121_47020605_1_14
Title: Iterating Java Arrays in Java 8 
----------------------------------------

public static List < Integer > productExceptSelf (int [] nums) {
    List < Integer > list = Arrays.stream (nums).boxed ().collect (Collectors.toList ());
    List < Integer > results = new ArrayList < > ();
    list.forEach (value -> {
        int x = 1;
        for (Integer i : list) {
            if (value.equals (i)) continue;

            x *= i;
        }
        results.add (x);
    });
    return results;
}
----------------------------------------

static int [] productExceptSelf (int [] nums) {
    int len = nums.length;
    int [] lefts = new int [len];
    Arrays.setAll (lefts, i -> i == 0 ? 1 : lefts [i - 1] * nums [i - 1]);
    int [] rights = new int [len];
    Arrays.setAll (rights, i -> i == 0 ? 1 : rights [i - 1] * nums [len - i]);
    int [] result = new int [len];
    Arrays.setAll (result, i -> lefts [i] * rights [len - i - 1]);
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47003121_47010844_1_16
47003121_47020605_1_14
Title: Iterating Java Arrays in Java 8 
----------------------------------------

private static int [] productExceptSelf (int [] arr) {
    IntBinaryOperator product = (a, b) -> a * b;
    int [] leftPrefix = IntStream.concat (IntStream.of (1), IntStream.of (arr)).toArray ();
    Arrays.parallelPrefix (leftPrefix, product);
    int [] reversedRightPrefix = reversed (IntStream.concat (IntStream.of (arr), IntStream.of (1)).toArray ());
    Arrays.parallelPrefix (reversedRightPrefix, product);
    int [] rightPrefix = reversed (reversedRightPrefix);
    return IntStream.range (0, arr.length).map (i -> product.applyAsInt (leftPrefix [i], rightPrefix [i + 1])).toArray ();
}
----------------------------------------

static int [] productExceptSelf (int [] nums) {
    int len = nums.length;
    int [] lefts = new int [len];
    Arrays.setAll (lefts, i -> i == 0 ? 1 : lefts [i - 1] * nums [i - 1]);
    int [] rights = new int [len];
    Arrays.setAll (rights, i -> i == 0 ? 1 : rights [i - 1] * nums [len - i]);
    int [] result = new int [len];
    Arrays.setAll (result, i -> lefts [i] * rights [len - i - 1]);
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47011631_47012990_5_51
47011631_47028228_4_66
Title: java print other side of pyramid nested loop 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int number;
    final int minimum = 5;
    final int maximum = 15;
    System.out.print ("Enter a number between" + " " + minimum + " " + "and" + " " + maximum + ":");
    number = input.nextInt ();
    if (number <= minimum || number >= 15) {
        System.out.println ("Sorry, invalid");
        return;
    }
    for (int i = 1;
    i <= number; i ++) {
        for (int j = 1;
        j <= number; j ++) {
            System.out.print (j + "  ");
        }
        System.out.println ();
    }
    for (int row = 1;
    row < number; row ++) {
        for (int column = - (number - 1);
        column <= number; column ++) {
            int absValue = Math.abs (column);
            if (absValue <= row) System.out.print (absValue);
            else {
                System.out.print (absValue < 10 ? " " : "  ");
            }
            if (absValue == 1) {
                column = 1;
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    int number;
    final int minimum = 5;
    final int maximum = 15;
    do {
        System.out.print ("Enter a number between" + " " + minimum + " " + "and" + " " + maximum + ":");
        number = input.nextInt ();
        if (number <= minimum || number >= maximum) {
            System.out.println ("Sorry, invalid");
            break;
        }
        for (int i = 1;
        i <= number; i ++) {
            for (int j = 1;
            j <= number; j ++) {
                System.out.print (j + "  ");
            }
            System.out.println ();
        }
        int columns = 1;
        for (int i = number;
        i >= 1; i --) {
            for (int j = 1;
            j <= i * 2; j ++) {
                System.out.print (" ");
            }
            for (int j = i;
            j <= number; j ++) {
                System.out.print (j + " ");
            }
            for (int j = number - 1;
            j >= i; j --) {
                System.out.printf (j + " ");
            }
            System.out.println ();
            columns ++;
        }
    } while (number <= minimum || number >= maximum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47021406_47021772_1_13
47021406_47021822_5_25
Title: Return multiple documents from MongoDB using Java 
----------------------------------------

public static String getItems () {
    List < String > items = new ArrayList < > ();
    MongoCursor < Document > cursor = itemCollection.find ().iterator ();
    try {
        while (cursor.hasNext ()) {
            items.add (cursor.next ().toJson ());
        }
    } finally {
        cursor.close ();
    }
    return "[" + String.join (", ", items) + "]";
}
----------------------------------------

public static String getItems () {
    StringBuilder items = new StringBuilder ();
    MongoCursor < Document > cursor = itemCollection.find ().iterator ();
    try {
        items.append ("[");
        while (cursor.hasNext ()) {
            items.append (cursor.next ().toJson ());
            if (cursor.hasNext ()) {
                items.append (",");
            }
        }
        items.append ("]");
    } finally {
        cursor.close ();
    }
    return items.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47026099_47026272_1_20
47026099_47026294_1_18
Title: How do exit a while loop with a JOptionPane 
----------------------------------------

public int getBirthYear () {
    boolean prompt = true;
    while (prompt) {
        String enteredAge = showInputDialog (null, "Enter age:");
        if (enteredAge == null) {
            age = - 1;
            prompt = false;
        } else {
            try {
                age = Integer.parseInt (enteredAge);
                age = year - age;
                prompt = false;
                showMessageDialog (null, age);
            } catch (NumberFormatException e) {
                showMessageDialog (null, "Enter a valid number");
            }
        }
    }
    return age;
}
----------------------------------------

public Integer getBirthYear () {
    boolean prompt = true;
    while (prompt) {
        String enteredAge = showInputDialog (null, "Enter age:");
        try {
            age = Integer.parseInt (enteredAge);
            if (age == JOptionPane.CANCEL_OPTION || age == JOptionPane.CLOSED_OPTION) {
                System.out.println ("MADE IT INTO IF");
            }
            age = year - age;
            showMessageDialog (null, age);
        } catch (NumberFormatException e) {
            e.printStackTrace ();
        }
        prompt = false;
    }
    return age;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47026099_47026272_1_20
47026099_47038889_1_17
Title: How do exit a while loop with a JOptionPane 
----------------------------------------

public int getBirthYear () {
    boolean prompt = true;
    while (prompt) {
        String enteredAge = showInputDialog (null, "Enter age:");
        if (enteredAge == null) {
            age = - 1;
            prompt = false;
        } else {
            try {
                age = Integer.parseInt (enteredAge);
                age = year - age;
                prompt = false;
                showMessageDialog (null, age);
            } catch (NumberFormatException e) {
                showMessageDialog (null, "Enter a valid number");
            }
        }
    }
    return age;
}
----------------------------------------

public Integer getBirthYear () {
    boolean prompt = true;
    do {
        try {
            age = year - Integer.parseInt (showInputDialog (null, "Enter age:"));
            prompt = false;
            showMessageDialog (null, age);
        } catch (NumberFormatException e) {
            String ageEntered = showInputDialog (null, "Enter age:");
            e.printStackTrace ();
            if (ageEntered == null) {
                prompt = false;
            }
        }
    } while (prompt);
    return age;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47026099_47026294_1_18
47026099_47038889_1_17
Title: How do exit a while loop with a JOptionPane 
----------------------------------------

public Integer getBirthYear () {
    boolean prompt = true;
    while (prompt) {
        String enteredAge = showInputDialog (null, "Enter age:");
        try {
            age = Integer.parseInt (enteredAge);
            if (age == JOptionPane.CANCEL_OPTION || age == JOptionPane.CLOSED_OPTION) {
                System.out.println ("MADE IT INTO IF");
            }
            age = year - age;
            showMessageDialog (null, age);
        } catch (NumberFormatException e) {
            e.printStackTrace ();
        }
        prompt = false;
    }
    return age;
}
----------------------------------------

public Integer getBirthYear () {
    boolean prompt = true;
    do {
        try {
            age = year - Integer.parseInt (showInputDialog (null, "Enter age:"));
            prompt = false;
            showMessageDialog (null, age);
        } catch (NumberFormatException e) {
            String ageEntered = showInputDialog (null, "Enter age:");
            e.printStackTrace ();
            if (ageEntered == null) {
                prompt = false;
            }
        }
    } while (prompt);
    return age;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47029935_47029979_1_9
47029935_47030545_21_29
Title: Slow calculation of sum of primes for large datasets 
----------------------------------------

public boolean isPrime (ArrayList < Long > primes, long n) {
    for (Long t : primes) {
        if (n % t == 0) {
            return false;
        }
        if (t * t > n) return true;

    }
    return true;
}
----------------------------------------

public static boolean isPrime (int n) {
    if (n < 2) return false;

    if (n == 2) return true;

    if (n % 2 == 0) return false;

    for (int i = 3;
    (i * i) <= n; i += 2) {
        if (n % i == 0) return false;

    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47041919_47042262_1_17
47041919_47042459_1_33
Title: "Series of input where’s the largest and the second largest?" 
----------------------------------------

public static void main (String [] args) {
    int number = 0, largest = 0, secondLargest = 0, count = 0;
    Scanner scanner = new Scanner (System.in);
    do {
        System.out.print ("Enter number #" + count ++ + ": ");
        number = scanner.nextInt ();
        secondLargest = Math.max (secondLargest, number);
        if (largest < number) {
            secondLargest = largest;
            largest = number;
        }
    } while (number >= 0);
    System.out.println ("The largest number entered is: " + largest);
    System.out.println ("The second largest number entered is: " + secondLargest);
    scanner.close ();
}
----------------------------------------

public static void main (String [] args) {
    int number = 0;
    int numberCount = 1;
    System.out.println ("Enter a series of positive integers (-1 to stop): ");
    List < Integer > numbers = new ArrayList < > ();
    Scanner sc = new Scanner (System.in);
    while (number >= 0) {
        System.out.print ("Enter number #" + numberCount ++ + ": ");
        number = sc.nextInt ();
        numbers.add (number);
    }
    int largest = numbers.get (0);
    int secondLargest = numbers.get (0);
    int smallest = Integer.MAX_VALUE;
    for (int i = 1;
    i < numbers.size (); i ++) {
        Integer currentNumber = numbers.get (i);
        if (currentNumber >= largest) {
            secondLargest = largest;
            largest = currentNumber;
        } else if (currentNumber > secondLargest) {
            secondLargest = currentNumber;
        }

        if (currentNumber < smallest) {
            smallest = currentNumber;
        }
    }
    sc.close ();
    System.out.println ("The largest number entered is:" + largest);
    System.out.println ("The second largest number entered is : " + secondLargest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47042838_47042966_1_11
47042838_47044029_56_68
Title: How to iterate through array list and add or remove Object based on conditions? 
----------------------------------------

public DVD add (String titlez, String categoryz, String runTimez, String yearz, String pricez) {
    for (DVD dvd : arrayList) {
        if (dvd.getTitle ().equals (titlez)) {
            return dvd;
        }
    }
    DVD dvd1 = new DVD (titlez, categoryz, runTimez, yearz, pricez);
    arraylist.add (dvd1);
    return null;
}
----------------------------------------

private boolean add (DVD dvd) {
    if (dvdStore == null) {
        dvdStore = new HashMap < > ();
    }
    if (! exists (dvd.getTitlez ())) {
        dvdStore.put (dvd.getTitlez (), dvd);
        return true;
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47052698_47054102_21_33
47052698_47054102_58_70
Title: Java - Show menu from CardLayout 
----------------------------------------

private void showPopupMenu (MouseEvent e) {
    if (! e.isPopupTrigger ()) {
        return;
    }
    JMenuItem showSettingsView = new JMenuItem ("Settings");
    showSettingsView.addActionListener (mainFrame :: showSettingsView);
    JPopupMenu popupMenu = new JPopupMenu ();
    popupMenu.add (showSettingsView);
    popupMenu.show (e.getComponent (), e.getX (), e.getY ());
}
----------------------------------------

private void showPopupMenu (MouseEvent e) {
    if (! e.isPopupTrigger ()) {
        return;
    }
    JMenuItem showSettingsView = new JMenuItem ("Test 4G");
    showSettingsView.addActionListener (mainFrame :: showTest4GView);
    JPopupMenu popupMenu = new JPopupMenu ();
    popupMenu.add (showSettingsView);
    popupMenu.show (e.getComponent (), e.getX (), e.getY ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4707894_4708121_3_10
4707894_4708638_3_20
Title: Need some slight help on this generic Java 
----------------------------------------

public static void main (String [] args) {
    List < Integer > originalList = new ArrayList < Integer > ();
    List < Integer > newList = map (originalList, new IFunction < Integer > () {
        public Integer execute (Integer anInt) {
            return anInt.intValue () + 1;
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    List < Integer > originalList = new ArrayList < Integer > ();
    originalList.add (1);
    originalList.add (2);
    originalList.add (3);
    originalList.add (4);
    List < Integer > newList = map (originalList, new IFunction < Integer > () {
        public < T extends Number > T execute (T aNumber) {
            Integer result = aNumber.intValue () + 1;
            return (T) result;
        }}

    );
    System.out.println (newList);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47085602_47085777_3_19
47085602_47085868_4_29
Title: Eclipse Java Loops Dice Roll to Get Doubles and show how many times it ran 
----------------------------------------

public static void main (String [] args) {
    int first, second, third;
    int counter = 0;
    boolean isDoubles = false;
    while (! isDoubles) {
        first = (int) (Math.random () * (6 - 1 + 1) + 1);
        second = (int) (Math.random () * (6 - 1 + 1) + 1);
        third = (int) (Math.random () * (6 - 1 + 1) + 1);
        System.out.println (first + "\t" + second + "\t" + third + "\t");
        isDoubles = first == second || first == third || second == third;
        counter ++;
    }
    System.out.println ("Double! It took " + counter + " tries to get it!");
}
----------------------------------------

public static void main (String [] args) {
    int first, second, third;
    int counter = 0;
    boolean rolledDoubles;
    do {
        rolledDoubles = false;
        counter = counter + 1;
        first = (int) (Math.random () * (6 - 1 + 1) + 1);
        second = (int) (Math.random () * (6 - 1 + 1) + 1);
        third = (int) (Math.random () * (6 - 1 + 1) + 1);
        System.out.println (first + "\t" + second + "\t" + third + "\t");
        if (first == second || second == third || first == third) {
            rolledDoubles = true;
            System.out.println ("Double! It took " + counter + " tries to get it!");
        }
    } while (! rolledDoubles);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47099747_47099981_3_14
47099747_47100277_13_29
Title: Fill objects fields from Stream<Integer> 
----------------------------------------

public static void main (String [] args) throws IOException {
    List < Integer > myList = new ArrayList < > ();
    myList.add (1);
    myList.add (0);
    myList.add (1);
    Test t = new Test ();
    t.setA (myList.stream ().filter (x -> x != 0).mapToInt (x -> x).toArray ());
    t.setB (myList.stream ().filter (x -> x == 0).mapToInt (x -> x).toArray ());
    System.out.println ("t: " + t);
}
----------------------------------------

public static void main (String [] args) {
    IntStream.Builder zeroStreamBuilder = IntStream.builder ();
    IntStream.Builder nonZeroStreamBuilder = IntStream.builder ();
    IntStream intStream = IntStream.of (0, 0, 1, 2, 3, 4);
    intStream.forEach (value -> {
        if (value == 0) zeroStreamBuilder.add (value);
        else nonZeroStreamBuilder.add (value);

    });
    int [] a = zeroStreamBuilder.build ().toArray ();
    int [] b = nonZeroStreamBuilder.build ().toArray ();
    Test result = new Test (a, b);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4710693_13600857_21_64
4710693_4711577_1_41
Title: "Java falling matrix code (like the movie continued)" 
----------------------------------------

public void scroll () {
    int [] random_x = new int [NUMBER_OF_REPEATS];
    while (true) {
        for (int i = 0;
        i < NUMBER_OF_REPEATS; i ++) {
            int character_initial = random.nextInt (TEXT.length ());
            random_x [i] = random.nextInt (panel.getWidth () / FONT_SIZE) - 1;
            label [i] = new JLabel ("" + TEXT.charAt (character_initial));
            panel.add (label [i]);
            label [i].setFont (new Font ("monospaced", Font.PLAIN, FONT_SIZE));
            label [i].setForeground (new Color (0, 255, 0));
        }
        for (int j = 0;
        j < (panel.getHeight () / FONT_SIZE) * 2; j ++) {
            int character = random.nextInt (TEXT.length ());
            for (int i = 0;
            i < NUMBER_OF_REPEATS; i ++) {
                label [i].setBounds (random_x [i] * FONT_SIZE, j * (FONT_SIZE / 2), FONT_SIZE, FONT_SIZE);
                label [i].setText ("" + TEXT.charAt (character));
                label [i].setForeground (new Color (0, 255 - (j * 5), 0));
                for (int k = 0;
                k < NUMBER_OF_REPEATS; k ++) {
                    int character_initial = random.nextInt (TEXT.length ());
                    random_x [k] = random.nextInt (panel.getWidth () / FONT_SIZE) - 1;
                    label [k] = new JLabel ("" + TEXT.charAt (character_initial));
                    panel.add (label [k]);
                    label [k].setFont (new Font ("monospaced", Font.PLAIN, FONT_SIZE));
                    label [k].setForeground (new Color (0, 255, 0));
                    Color colour = label [k].getForeground ();
                    if (colour.getGreen () <= 80) {
                        panel.remove (label [k]);
                        k = (panel.getHeight () / FONT_SIZE) * 2;
                    }
                }
            }
            try {
                Thread.sleep (15);
            } catch (Exception e) {
            }
        }
    }
}
----------------------------------------

public void scroll () {
    int [] random_x = new int [NUMBER_OF_REPEATS];
    while (true) {
        for (int i = 0;
        i < NUMBER_OF_REPEATS; i ++) {
            int character_initial = random.nextInt (TEXT.length ());
            random_x [i] = random.nextInt (panel.getWidth () / FONT_SIZE) - 1;
            label [i] = new JLabel ("" + TEXT.charAt (character_initial));
            panel.add (label [i]);
            label [i].setFont (new Font ("monospaced", Font.PLAIN, FONT_SIZE));
            label [i].setForeground (new Color (0, 255, 0));
        }
        for (int j = 0;
        j < (panel.getHeight () / FONT_SIZE) * 2; j ++) {
            int character = random.nextInt (TEXT.length ());
            for (int i = 0;
            i < NUMBER_OF_REPEATS; i ++) {
                label [i].setBounds (random_x [i] * FONT_SIZE, j * (FONT_SIZE / 2), FONT_SIZE, FONT_SIZE);
                label [i].setText ("" + TEXT.charAt (character));
                label [i].setForeground (new Color (0, 255 - (j * 5), 0));
                Color colour = label [i].getForeground ();
                if (colour.getGreen () <= 80) {
                    panel.remove (label [i]);
                    j = (panel.getHeight () / FONT_SIZE) * 2;
                }
            }
            try {
                Thread.sleep (75);
            } catch (Exception e) {
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47114795_47114873_1_13
47114795_47114944_1_23
Title: Boolean use in an if statement 
----------------------------------------

public static int search (int [] a, int target) {
    int foundIdx = - 1;
    for (int i = 0;
    i < a.length && foundIdx < 0; i ++) {
        if (a [i] == target) {
            foundIdx = i;
            break;
        }
    }
    return foundIdx;
}
----------------------------------------

public static int search (int [] a, int target) {
    int i = 0;
    boolean found = false;
    while ((i < a.length) && ! found) {
        if (a [i] == target) {
            found = true;
        } else i ++;

    }
    if (found) return i;
    else return - 1;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47115408_47115700_6_55
47115408_47119297_4_43
Title: "string length number of capitals and number of numbers in a string" 
----------------------------------------

public static void main (String [] args) {
    Scanner keyb = new Scanner (System.in);
    System.out.printf ("Enter a password to be checked: \n");
    String passwordInput = keyb.next ();
    int numberCharaters = passwordInput.length ();
    int numberCount = 0;
    for (int i = 0;
    i <= numberCharaters - 1; i ++) {
        for (char c = '0';
        c <= '9'; c ++) {
            if (passwordInput.charAt (i) == c) {
                numberCount ++;
            }
        }
    }
    int numberNumbers = numberCount - 0;
    int captialCount = 0;
    for (int i = 1;
    i <= numberCharaters; i ++) {
        for (char c = 'A';
        c <= 'Z'; c ++) {
            if (passwordInput.charAt (i) == c) {
                captialCount ++;
            }
        }
    }
    int numberCaptials = captialCount - 0;
    if (numberCharaters >= 8 && numberNumbers >= 1 && numberCaptials >= 1) {
        String strongEnough = "Password is strong enough.";
        System.out.println (strongEnough);
    } else {
        String strongEnough = "Password is not strong enough.";
        System.out.println (strongEnough);
    }
}
----------------------------------------

public static void main () {
    Scanner sc = new Scanner (System.in);
    System.out.print ("enter the password : ");
    String s = sc.nextLine ();
    int l = s.length ();
    int k = 0, k1 = 0;
    if (l >= 8) {
        for (int i = 0;
        i < l; i ++) {
            if (Character.isLetter (s.charAt (i))) {
                if (Character.isUpperCase (s.charAt (i))) {
                    k ++;
                }
            } else {
                if (Character.isDigit (s.charAt (i))) {
                    k1 ++;
                }
            }
        }
        if (k > 0 && k1 > 0) {
            System.out.println ("Password is strong enough");
        } else {
            System.out.println ("Password shoud contain atleast capital letter and one number");
        }
    } else {
        System.out.println ("Password shoud contain atleast capital letter,one number and shoud have length of 8 or more");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47126900_47127005_1_31
47126900_47127189_1_32
Title: Finding the closest value in array and remove it 
----------------------------------------

public static void main (String [] args) {
    Scanner console = new Scanner (System.in);
    System.out.println ("Power: ");
    int power = Integer.parseInt (console.nextLine ());
    ArrayList < Integer > weight = new ArrayList < > ();
    int averageWagon = 0;
    int sum = 0;
    while (console.hasNextInt ()) {
        weight.add (console.nextInt ());
    }
    for (int i = 0;
    i < weight.size (); i ++) {
        sum += weight.get (i);
    }
    if (sum > power) {
        averageWagon = sum / weight.size ();
        int closest = findClosestNumber (averageWagon, weight);
        System.out.println ("Closest number to average: " + closest);
    }
    System.out.println (averageWagon);
    System.out.println (weight);
    System.out.println (power);
    System.out.println (sum);
}
----------------------------------------

public static void main (String [] args) {
    Scanner console = new Scanner (System.in);
    System.out.println ("Power: ");
    int power = Integer.parseInt (console.nextLine ());
    ArrayList < Integer > weight = new ArrayList < > ();
    int averageWagon = 0;
    int sum = 0;
    while (console.hasNextInt ()) {
        weight.add (console.nextInt ());
    }
    for (int i = 0;
    i < weight.size (); i ++) sum += weight.get (i);

    if (sum > power) {
        averageWagon = sum / weight.size ();
        Integer closest = weight.get (0);
        for (Integer i : weight) {
            if (Math.abs (averageWagon - closest) > Math.abs (averageWagon - i)) closest = i;

        }
        weight.remove (closest);
    }
    System.out.println (averageWagon);
    System.out.println (weight);
    System.out.println (power);
    System.out.println (sum);
}
----------------------------------------

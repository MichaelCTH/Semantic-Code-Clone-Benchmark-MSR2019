$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_115_125
23647256_23647976_84_91
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == OperationArray [0]) {
        String temp = WritingZone.getText ();
        String temp2 = "";
        WritingZone.setText ("");
        for (int x = 0;
        x < temp.length () - 1; x ++) {
            temp2 += (Character.toString (temp.charAt (x)));
        }
        WritingZone.setText (temp2);
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    for (int a = 0;
    a < ButtonArray.length - 1; a ++) {
        if (e.getSource () == ButtonArray [a]) {
            String temp = WritingZone.getText ();
            WritingZone.setText (temp + ButtonArray [a].getText ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_115_125
23647256_23647976_95_110
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == OperationArray [0]) {
        String temp = WritingZone.getText ();
        String temp2 = "";
        WritingZone.setText ("");
        for (int x = 0;
        x < temp.length () - 1; x ++) {
            temp2 += (Character.toString (temp.charAt (x)));
        }
        WritingZone.setText (temp2);
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == ButtonArray [11]) {
        StringBuilder temp = new StringBuilder ();
        temp.append (WritingZone.getText ());
        WritingZone.setText ("");
        for (int a = 0;
        a < temp.length (); a ++) {
            if (temp.charAt (a) == '-') {
                temp.deleteCharAt (a);
                WritingZone.setText (temp.toString ());
            } else {
                WritingZone.setText ("-" + temp.toString ());
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_181_225
23647256_23647976_46_243
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (operation == '*') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first * second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    } else if (operation == '/') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        if (second < 0) {
            result = (first / second);
            String temp2 = String.valueOf (result);
            WritingZone.setText (temp2);
        } else if (second > 0) {
            result = (first / second);
            String temp2 = String.valueOf (result);
            WritingZone.setText (temp2);
        } else if (second == 0) WritingZone.setText ("Error! Can't divide by 0");

    } else if (operation == '+') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first + second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    } else if (operation == '-') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first - second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    }

}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == b1) {
        if (r1.isSelected ()) {
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                ButtonArray [a] = new JButton (ButtonString [a]);
            }
            NumberPanel.removeAll ();
            NumberPanel.setLayout (new GridLayout (4, 3, 5, 5));
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                NumberPanel.add (ButtonArray [a]);
            }
            for (int a = 0;
            a < OperationArray.length; a ++) {
                OperationArray [a] = new JButton (OperationString [a]);
            }
            OperationPanel.removeAll ();
            OperationPanel.setLayout (new GridLayout (4, 2, 5, 5));
            for (int a = 0;
            a < OperationArray.length; a ++) {
                OperationPanel.add (OperationArray [a]);
            }
            JPanel Finalpanel = new JPanel ();
            Finalpanel.setLayout (new FlowLayout ());
            Finalpanel.add (NumberPanel);
            Finalpanel.add (OperationPanel);
            WritingZone.setComponentOrientation (ComponentOrientation.RIGHT_TO_LEFT);
            WritingZone.setBorder (BorderFactory.createLoweredSoftBevelBorder ());
            WritingZone.setEditable (false);
            WritingZone.setBackground (Color.white);
            JPanel TextPanel = new JPanel ();
            TextPanel.add (WritingZone);
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                ButtonArray [a].addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent e) {
                        for (int a = 0;
                        a < ButtonArray.length - 1; a ++) {
                            if (e.getSource () == ButtonArray [a]) {
                                String temp = WritingZone.getText ();
                                WritingZone.setText (temp + ButtonArray [a].getText ());
                            }
                        }
                    }}

                );
            }
            ButtonArray [11].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == ButtonArray [11]) {
                        StringBuilder temp = new StringBuilder ();
                        temp.append (WritingZone.getText ());
                        WritingZone.setText ("");
                        for (int a = 0;
                        a < temp.length (); a ++) {
                            if (temp.charAt (a) == '-') {
                                temp.deleteCharAt (a);
                                WritingZone.setText (temp.toString ());
                            } else {
                                WritingZone.setText ("-" + temp.toString ());
                            }
                        }
                    }
                }}

            );
            OperationArray [0].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == OperationArray [0]) {
                        String temp = WritingZone.getText ();
                        String temp2 = "";
                        WritingZone.setText ("");
                        for (int x = 0;
                        x < temp.length () - 1; x ++) {
                            temp2 += (Character.toString (temp.charAt (x)));
                        }
                        WritingZone.setText (temp2);
                    }
                }}

            );
            OperationArray [1].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == OperationArray [1]) {
                        WritingZone.setText ("");
                        first = 0;
                        second = 0;
                    }
                }}

            );
            OperationArray [2].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [2].getText ().charAt (0);
                }}

            );
            OperationArray [3].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [3].getText ().charAt (0);
                }}

            );
            OperationArray [4].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [4].getText ().charAt (0);
                }}

            );
            OperationArray [5].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [5].getText ().charAt (0);
                }}

            );
            OperationArray [6].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    String temp = String.valueOf (result);
                    String temp2 = WritingZone.getText ();
                    WritingZone.setText ("");
                    WritingZone.setText (temp2 + "" + temp);
                }}

            );
            OperationArray [7].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (operation == '*') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first * second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    } else if (operation == '/') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        if (second < 0) {
                            result = (first / second);
                            String temp2 = String.valueOf (result);
                            WritingZone.setText (temp2);
                        } else if (second > 0) {
                            result = (first / second);
                            String temp2 = String.valueOf (result);
                            WritingZone.setText (temp2);
                        } else if (second == 0) WritingZone.setText ("Error! Can't divide by 0");

                    } else if (operation == '+') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first + second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    } else if (operation == '-') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first - second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    }

                }}

            );
            final JPanel AllPanel = new JPanel ();
            AllPanel.setLayout (new BorderLayout (5, 5));
            AllPanel.add (BorderLayout.NORTH, TextPanel);
            AllPanel.add (BorderLayout.CENTER, Finalpanel);
            AllPanel.setBorder (BorderFactory.createTitledBorder ("Simple      Calculator"));
            emptyPanel.removeAll ();
            emptyPanel.add (AllPanel);
            emptyPanel.setVisible (true);
            pack ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_181_225
23647256_23647976_84_91
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (operation == '*') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first * second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    } else if (operation == '/') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        if (second < 0) {
            result = (first / second);
            String temp2 = String.valueOf (result);
            WritingZone.setText (temp2);
        } else if (second > 0) {
            result = (first / second);
            String temp2 = String.valueOf (result);
            WritingZone.setText (temp2);
        } else if (second == 0) WritingZone.setText ("Error! Can't divide by 0");

    } else if (operation == '+') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first + second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    } else if (operation == '-') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first - second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    }

}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    for (int a = 0;
    a < ButtonArray.length - 1; a ++) {
        if (e.getSource () == ButtonArray [a]) {
            String temp = WritingZone.getText ();
            WritingZone.setText (temp + ButtonArray [a].getText ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_181_225
23647256_23647976_95_110
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (operation == '*') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first * second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    } else if (operation == '/') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        if (second < 0) {
            result = (first / second);
            String temp2 = String.valueOf (result);
            WritingZone.setText (temp2);
        } else if (second > 0) {
            result = (first / second);
            String temp2 = String.valueOf (result);
            WritingZone.setText (temp2);
        } else if (second == 0) WritingZone.setText ("Error! Can't divide by 0");

    } else if (operation == '+') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first + second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    } else if (operation == '-') {
        String temp = WritingZone.getText ();
        WritingZone.setText ("");
        second = Double.valueOf (temp);
        result = (first - second);
        String temp2 = String.valueOf (result);
        WritingZone.setText (temp2);
    }

}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == ButtonArray [11]) {
        StringBuilder temp = new StringBuilder ();
        temp.append (WritingZone.getText ());
        WritingZone.setText ("");
        for (int a = 0;
        a < temp.length (); a ++) {
            if (temp.charAt (a) == '-') {
                temp.deleteCharAt (a);
                WritingZone.setText (temp.toString ());
            } else {
                WritingZone.setText ("-" + temp.toString ());
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_46_243
23647256_23647976_84_91
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == b1) {
        if (r1.isSelected ()) {
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                ButtonArray [a] = new JButton (ButtonString [a]);
            }
            NumberPanel.removeAll ();
            NumberPanel.setLayout (new GridLayout (4, 3, 5, 5));
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                NumberPanel.add (ButtonArray [a]);
            }
            for (int a = 0;
            a < OperationArray.length; a ++) {
                OperationArray [a] = new JButton (OperationString [a]);
            }
            OperationPanel.removeAll ();
            OperationPanel.setLayout (new GridLayout (4, 2, 5, 5));
            for (int a = 0;
            a < OperationArray.length; a ++) {
                OperationPanel.add (OperationArray [a]);
            }
            JPanel Finalpanel = new JPanel ();
            Finalpanel.setLayout (new FlowLayout ());
            Finalpanel.add (NumberPanel);
            Finalpanel.add (OperationPanel);
            WritingZone.setComponentOrientation (ComponentOrientation.RIGHT_TO_LEFT);
            WritingZone.setBorder (BorderFactory.createLoweredSoftBevelBorder ());
            WritingZone.setEditable (false);
            WritingZone.setBackground (Color.white);
            JPanel TextPanel = new JPanel ();
            TextPanel.add (WritingZone);
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                ButtonArray [a].addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent e) {
                        for (int a = 0;
                        a < ButtonArray.length - 1; a ++) {
                            if (e.getSource () == ButtonArray [a]) {
                                String temp = WritingZone.getText ();
                                WritingZone.setText (temp + ButtonArray [a].getText ());
                            }
                        }
                    }}

                );
            }
            ButtonArray [11].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == ButtonArray [11]) {
                        StringBuilder temp = new StringBuilder ();
                        temp.append (WritingZone.getText ());
                        WritingZone.setText ("");
                        for (int a = 0;
                        a < temp.length (); a ++) {
                            if (temp.charAt (a) == '-') {
                                temp.deleteCharAt (a);
                                WritingZone.setText (temp.toString ());
                            } else {
                                WritingZone.setText ("-" + temp.toString ());
                            }
                        }
                    }
                }}

            );
            OperationArray [0].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == OperationArray [0]) {
                        String temp = WritingZone.getText ();
                        String temp2 = "";
                        WritingZone.setText ("");
                        for (int x = 0;
                        x < temp.length () - 1; x ++) {
                            temp2 += (Character.toString (temp.charAt (x)));
                        }
                        WritingZone.setText (temp2);
                    }
                }}

            );
            OperationArray [1].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == OperationArray [1]) {
                        WritingZone.setText ("");
                        first = 0;
                        second = 0;
                    }
                }}

            );
            OperationArray [2].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [2].getText ().charAt (0);
                }}

            );
            OperationArray [3].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [3].getText ().charAt (0);
                }}

            );
            OperationArray [4].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [4].getText ().charAt (0);
                }}

            );
            OperationArray [5].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [5].getText ().charAt (0);
                }}

            );
            OperationArray [6].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    String temp = String.valueOf (result);
                    String temp2 = WritingZone.getText ();
                    WritingZone.setText ("");
                    WritingZone.setText (temp2 + "" + temp);
                }}

            );
            OperationArray [7].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (operation == '*') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first * second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    } else if (operation == '/') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        if (second < 0) {
                            result = (first / second);
                            String temp2 = String.valueOf (result);
                            WritingZone.setText (temp2);
                        } else if (second > 0) {
                            result = (first / second);
                            String temp2 = String.valueOf (result);
                            WritingZone.setText (temp2);
                        } else if (second == 0) WritingZone.setText ("Error! Can't divide by 0");

                    } else if (operation == '+') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first + second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    } else if (operation == '-') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first - second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    }

                }}

            );
            final JPanel AllPanel = new JPanel ();
            AllPanel.setLayout (new BorderLayout (5, 5));
            AllPanel.add (BorderLayout.NORTH, TextPanel);
            AllPanel.add (BorderLayout.CENTER, Finalpanel);
            AllPanel.setBorder (BorderFactory.createTitledBorder ("Simple      Calculator"));
            emptyPanel.removeAll ();
            emptyPanel.add (AllPanel);
            emptyPanel.setVisible (true);
            pack ();
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    for (int a = 0;
    a < ButtonArray.length - 1; a ++) {
        if (e.getSource () == ButtonArray [a]) {
            String temp = WritingZone.getText ();
            WritingZone.setText (temp + ButtonArray [a].getText ());
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_46_243
23647256_23647976_95_110
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == b1) {
        if (r1.isSelected ()) {
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                ButtonArray [a] = new JButton (ButtonString [a]);
            }
            NumberPanel.removeAll ();
            NumberPanel.setLayout (new GridLayout (4, 3, 5, 5));
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                NumberPanel.add (ButtonArray [a]);
            }
            for (int a = 0;
            a < OperationArray.length; a ++) {
                OperationArray [a] = new JButton (OperationString [a]);
            }
            OperationPanel.removeAll ();
            OperationPanel.setLayout (new GridLayout (4, 2, 5, 5));
            for (int a = 0;
            a < OperationArray.length; a ++) {
                OperationPanel.add (OperationArray [a]);
            }
            JPanel Finalpanel = new JPanel ();
            Finalpanel.setLayout (new FlowLayout ());
            Finalpanel.add (NumberPanel);
            Finalpanel.add (OperationPanel);
            WritingZone.setComponentOrientation (ComponentOrientation.RIGHT_TO_LEFT);
            WritingZone.setBorder (BorderFactory.createLoweredSoftBevelBorder ());
            WritingZone.setEditable (false);
            WritingZone.setBackground (Color.white);
            JPanel TextPanel = new JPanel ();
            TextPanel.add (WritingZone);
            for (int a = 0;
            a < ButtonArray.length; a ++) {
                ButtonArray [a].addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent e) {
                        for (int a = 0;
                        a < ButtonArray.length - 1; a ++) {
                            if (e.getSource () == ButtonArray [a]) {
                                String temp = WritingZone.getText ();
                                WritingZone.setText (temp + ButtonArray [a].getText ());
                            }
                        }
                    }}

                );
            }
            ButtonArray [11].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == ButtonArray [11]) {
                        StringBuilder temp = new StringBuilder ();
                        temp.append (WritingZone.getText ());
                        WritingZone.setText ("");
                        for (int a = 0;
                        a < temp.length (); a ++) {
                            if (temp.charAt (a) == '-') {
                                temp.deleteCharAt (a);
                                WritingZone.setText (temp.toString ());
                            } else {
                                WritingZone.setText ("-" + temp.toString ());
                            }
                        }
                    }
                }}

            );
            OperationArray [0].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == OperationArray [0]) {
                        String temp = WritingZone.getText ();
                        String temp2 = "";
                        WritingZone.setText ("");
                        for (int x = 0;
                        x < temp.length () - 1; x ++) {
                            temp2 += (Character.toString (temp.charAt (x)));
                        }
                        WritingZone.setText (temp2);
                    }
                }}

            );
            OperationArray [1].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (e.getSource () == OperationArray [1]) {
                        WritingZone.setText ("");
                        first = 0;
                        second = 0;
                    }
                }}

            );
            OperationArray [2].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [2].getText ().charAt (0);
                }}

            );
            OperationArray [3].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [3].getText ().charAt (0);
                }}

            );
            OperationArray [4].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [4].getText ().charAt (0);
                }}

            );
            OperationArray [5].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    first = Double.valueOf (WritingZone.getText ());
                    WritingZone.setText ("");
                    operation = OperationArray [5].getText ().charAt (0);
                }}

            );
            OperationArray [6].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    String temp = String.valueOf (result);
                    String temp2 = WritingZone.getText ();
                    WritingZone.setText ("");
                    WritingZone.setText (temp2 + "" + temp);
                }}

            );
            OperationArray [7].addActionListener (new ActionListener () {
                public void actionPerformed (ActionEvent e) {
                    if (operation == '*') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first * second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    } else if (operation == '/') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        if (second < 0) {
                            result = (first / second);
                            String temp2 = String.valueOf (result);
                            WritingZone.setText (temp2);
                        } else if (second > 0) {
                            result = (first / second);
                            String temp2 = String.valueOf (result);
                            WritingZone.setText (temp2);
                        } else if (second == 0) WritingZone.setText ("Error! Can't divide by 0");

                    } else if (operation == '+') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first + second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    } else if (operation == '-') {
                        String temp = WritingZone.getText ();
                        WritingZone.setText ("");
                        second = Double.valueOf (temp);
                        result = (first - second);
                        String temp2 = String.valueOf (result);
                        WritingZone.setText (temp2);
                    }

                }}

            );
            final JPanel AllPanel = new JPanel ();
            AllPanel.setLayout (new BorderLayout (5, 5));
            AllPanel.add (BorderLayout.NORTH, TextPanel);
            AllPanel.add (BorderLayout.CENTER, Finalpanel);
            AllPanel.setBorder (BorderFactory.createTitledBorder ("Simple      Calculator"));
            emptyPanel.removeAll ();
            emptyPanel.add (AllPanel);
            emptyPanel.setVisible (true);
            pack ();
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == ButtonArray [11]) {
        StringBuilder temp = new StringBuilder ();
        temp.append (WritingZone.getText ());
        WritingZone.setText ("");
        for (int a = 0;
        a < temp.length (); a ++) {
            if (temp.charAt (a) == '-') {
                temp.deleteCharAt (a);
                WritingZone.setText (temp.toString ());
            } else {
                WritingZone.setText ("-" + temp.toString ());
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23647256_23647976_84_91
23647256_23647976_95_110
Title: How do I clear a Panel? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    for (int a = 0;
    a < ButtonArray.length - 1; a ++) {
        if (e.getSource () == ButtonArray [a]) {
            String temp = WritingZone.getText ();
            WritingZone.setText (temp + ButtonArray [a].getText ());
        }
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (e.getSource () == ButtonArray [11]) {
        StringBuilder temp = new StringBuilder ();
        temp.append (WritingZone.getText ());
        WritingZone.setText ("");
        for (int a = 0;
        a < temp.length (); a ++) {
            if (temp.charAt (a) == '-') {
                temp.deleteCharAt (a);
                WritingZone.setText (temp.toString ());
            } else {
                WritingZone.setText ("-" + temp.toString ());
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23656833_23657150_1_22
23656833_23657475_1_23
Title: question mark colon switch case 
----------------------------------------

public Boolean prendiTessera (TipoTerreno tipo) {
    boolean flag = true;
    switch (tipo) {
        case PIANURA :
            flag = tesserePianura != 4 ? true : false;
            break;
        case CAMPAGNA :
            flag = tessereCampagna != 4 ? true : false;
            break;
        case MONTAGNA :
            flag = tessereMontagna != 4 ? true : false;
            break;
        case DESERTO :
            flag = tessereDeserto != 4 ? true : false;
            break;
        case FIUME :
            flag = tessereFiume != 4 ? true : false;
            break;
        case BOSCO :
            flag = tessereBosco != 4 ? true : false;
            break;
        default :
            flag = false;
    }
    if (flag) tessereMontagna ++;

    return flag;
}
----------------------------------------

public Boolean prendiTessera (TipoTerreno tipo) {
    int test;
    switch (tipo) {
        case PIANURA :
            test = (tesserePianura != 4) ? tesserePianura ++ : 0;
            break;
        case CAMPAGNA :
            test = (tessereCampagna != 4) ? tessereCampagna ++ : 0;
            break;
        case MONTAGNA :
            test = (tessereMontagna != 4) ? tessereMontagna ++ : 0;
            break;
        case DESERTO :
            test = (tessereDeserto != 4) ? tessereDeserto ++ : 0;
            break;
        case FIUME :
            test = (tessereFiume != 4) ? tessereFiume ++ : 0;
            break;
        case BOSCO :
            test = (tessereBosco != 4) ? tessereBosco ++ : 0;
            break;
        default :
            test = 0;
    }
    return (test == 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23667478_23667743_152_175
23667478_23667743_70_92
Title: How could my two classes share the same JFrame or Frame? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    super.actionPerformed (e);
    if (x < 0) {
        velx = 0;
        x = 0;
    }
    if (y < 0) {
        vely = 0;
        y = 0;
    }
    if (y > 330) {
        vely = 0;
        y = 330;
    }
    x += velx;
    y += vely;
    repaint ();
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (x < 0) {
        velx = 0;
        x = 0;
    }
    if (y < 0) {
        vely = 0;
        y = 0;
    }
    if (y > 330) {
        vely = 0;
        y = 330;
    }
    x += velx;
    y += vely;
    repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23667478_23667743_178_204
23667478_23667743_95_120
Title: How could my two classes share the same JFrame or Frame? 
----------------------------------------

public void keyPressed (KeyEvent e) {
    super.keyPressed (e);
    int code = e.getKeyCode ();
    {
        if (code == KeyEvent.VK_NUMPAD2) {
            vely = 1;
        }
        if (code == KeyEvent.VK_NUMPAD8) {
            vely = - 1;
        }
        if (code == KeyEvent.VK_NUMPAD4) {
            vely = 0;
            velx = - 1;
        }
        {
            if (code == KeyEvent.VK_NUMPAD6) {
                vely = 0;
                velx = 1;
            }
        }}}
----------------------------------------

public void keyPressed (KeyEvent e) {
    int code = e.getKeyCode ();
    {
        if (code == KeyEvent.VK_DOWN) {
            vely = 1;
        }
        if (code == KeyEvent.VK_UP) {
            vely = - 1;
        }
        if (code == KeyEvent.VK_LEFT) {
            velx = - 1;
        }
        {
            if (code == KeyEvent.VK_RIGHT) {
                velx = 1;
            }
        }}}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23677301_23678493_17_25
23677301_23678493_27_36
Title: How to cross join multiple Lists in Java? 
----------------------------------------

public static < T > List < List < T > > getCross (List < List < T > > values) {
    List < List < T > > accumulator = new ArrayList < List < T > > ();
    if (values.size () != 0) {
        List < T > comb = new ArrayList < T > ();
        comb.addAll (Collections.< T > nCopies (values.size (), null));
        getCross (accumulator, 0, comb, values);
    }
    return accumulator;
}
----------------------------------------

private static < T > void getCross (List < List < T > > accumulator, int idx, List < T > combination, List < List < T > > param) {
    if (idx == combination.size ()) {
        accumulator.add (new ArrayList < T > (combination));
    } else {
        for (T t : param.get (idx)) {
            combination.set (idx, t);
            getCross (accumulator, idx + 1, combination, param);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2368802_2368810_5_32
2368802_31882982_1_19
Title: How to create dynamic Template String 
----------------------------------------

public static String replaceAll (String text, Map < String, String > params, char leading, char trailing) {
    String pattern = "";
    if (leading != 0) {
        pattern += leading;
    }
    pattern += "(\\w+)";
    if (trailing != 0) {
        pattern += trailing;
    }
    Pattern p = Pattern.compile (pattern);
    Matcher m = p.matcher (text);
    boolean result = m.find ();
    if (result) {
        StringBuffer sb = new StringBuffer ();
        do {
            String replacement = params.get (m.group (1));
            if (replacement == null) {
                replacement = m.group ();
            }
            m.appendReplacement (sb, replacement);
            result = m.find ();
        } while (result);
        m.appendTail (sb);
        return sb.toString ();
    }
    return text;
}
----------------------------------------

public static String replaceAll (String text, Object...replacements) {
    Assert.isTrue (replacements.length % 2 == 0, "Is not key - value pairs: " + replacements);
    Map < String, String > longToShortNamesMap = new TreeMap < > (new Comparator < String > () {
        @Override
        public int compare (String o1, String o2) {
            return o1.length () == o2.length () ? o1.compareTo (o2) : o2.length () - o1.length ();
        }}

    );
    for (int i = 0;
    i < replacements.length; i += 2) {
        longToShortNamesMap.put (Objects.toString (replacements [i]), Objects.toString (replacements [i + 1]));
    }
    String result = text;
    for (String key : longToShortNamesMap.keySet ()) {
        Assert.isTrue (text.contains (key), "Can not find key in the text " + key);
        result = result.replaceAll (key, longToShortNamesMap.get (key));
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_148_157
23689880_23690775_167_176
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_148_157
23689880_23690775_186_195
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_148_157
23689880_23690775_205_214
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_148_157
23689880_23690775_71_91
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_167_176
23689880_23690775_186_195
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_167_176
23689880_23690775_205_214
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_167_176
23689880_23690775_71_91
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_186_195
23689880_23690775_205_214
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_186_195
23689880_23690775_71_91
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_205_214
23689880_23690775_71_91
Title: Java making a label move? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        resultPane.setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23689880_23690775_30_46
23689880_23691027_31_39
Title: Java making a label move? 
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    ResultPane resultPane = new ResultPane ();
    JFrame frame = new JFrame ("Testing");
    frame.setGlassPane (resultPane);
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (new CalculatorPane (resultPane));
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------

public void run () {
    jWindow.setLocation (jWindow.getLocation ().x + 25, jWindow.getLocation ().y + 24);
    if (jWindow.getLocation ().x > Toolkit.getDefaultToolkit ().getScreenSize ().width / 2) {
        jWindow.setLocation (0, 0);
    }
    if (jWindow.getLocation ().y > Toolkit.getDefaultToolkit ().getScreenSize ().height / 2) {
        jWindow.setLocation (0, 0);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23692732_23692830_2_16
23692732_23692972_1_16
Title: New to Java and I am attempting to program a Project Euler Q with recursion 
----------------------------------------

public static void main (String [] args) {
    int y = 1;
    while (y <= 23) {
        int x = 3;
        if (y > 0) {
            if (y % x == 0) {
                System.out.println (y + " is a multiple of 3");
                y ++;
            } else {
                System.out.println (y + " is not a multiple of 3");
                y ++;
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int x = 3;
    int sumOfAll = 0;
    for (int y = 0;
    y < 10; y ++) {
        if (y % x == 0) {
            System.out.println (y + " is a multiple of 3");
            sumOfAll = sumOfAll + y;
            System.out.println ("Sum is " + sumOfAll);
        } else {
            System.out.println (y + " is not a multiple of 3");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23692732_23692830_2_16
23692732_23693241_2_11
Title: New to Java and I am attempting to program a Project Euler Q with recursion 
----------------------------------------

public static void main (String [] args) {
    int y = 1;
    while (y <= 23) {
        int x = 3;
        if (y > 0) {
            if (y % x == 0) {
                System.out.println (y + " is a multiple of 3");
                y ++;
            } else {
                System.out.println (y + " is not a multiple of 3");
                y ++;
            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i < 10; ++ i) {
        if (i % 3 == 0 || i % 5 == 0) {
            System.out.println (i + " is a multiple of 3 or 5");
            sum = sum + i;
        }
    }
    System.out.println ("The sum is : " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23692732_23692972_1_16
23692732_23693241_2_11
Title: New to Java and I am attempting to program a Project Euler Q with recursion 
----------------------------------------

public static void main (String [] args) {
    int x = 3;
    int sumOfAll = 0;
    for (int y = 0;
    y < 10; y ++) {
        if (y % x == 0) {
            System.out.println (y + " is a multiple of 3");
            sumOfAll = sumOfAll + y;
            System.out.println ("Sum is " + sumOfAll);
        } else {
            System.out.println (y + " is not a multiple of 3");
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    int sum = 0;
    for (int i = 1;
    i < 10; ++ i) {
        if (i % 3 == 0 || i % 5 == 0) {
            System.out.println (i + " is a multiple of 3 or 5");
            sum = sum + i;
        }
    }
    System.out.println ("The sum is : " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23702158_23702643_24_35
23702158_23742158_41_47
Title: How to get the text box to scroll 
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        public void run () {
            try {
                SamplePane frame = new SamplePane ();
                frame.setVisible (true);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }}

    );
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            createAndShowGUI ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23704667_23705161_32_45
23704667_23705161_7_19
Title: Preventing concurrent modification to an object 
----------------------------------------

public void process (Exchange exchange) throws Exception {
    l.lock ();
    try {
        while (! routeFinishedFlag) {
            MultimapRoute.multimapRouteFinished.await ();
        }
        MultimapRoute.performMapUpdate (newData);
    } catch (InterruptedException e) {
    } finally {
        l.unlock ();
    }
}
----------------------------------------

public void process (Exchange exchange) throws Exception {
    l.lock ();
    try {
        performMapUpdate (newData);
        routeFinishedFlag = true;
        multimapRouteFinished.signal ();
    } catch (InterruptedException e) {
    } finally {
        l.unlock ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23707966_23707990_2_14
23707966_23708031_2_14
Title: How to print nth number series in java 
----------------------------------------

public static void main (String args []) {
    int i, j;
    for (j = 5; j >= 1; j --) {
        for (i = 1; i <= j; i ++) {
            System.out.print (" " + i * 9 + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String args []) {
    int i = 0, j = 0, mul = 1;
    for (j = 5; j >= 1; j --) {
        mul = 1;
        for (i = 1; i <= j; i ++) {
            System.out.print (" " + mul ++ * 9 + " ");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23709385_23709563_1_18
23709385_23709588_1_15
Title: Java Android - Dynamic load fragment (ViewPager) 
----------------------------------------

@Override
public Fragment getItem (int i) {
    switch (i) {
        case 0 :
            if (btn0.isChecked == true) return new Fragment_One ();

        case 1 :
            if (btn1.isChecked == true) return new Fragment_Two ();

        case 2 :
            if (btn2.isChecked == true) return new Fragment_Three ();

        case 3 :
            if (btn3.isChecked == true) return new Fragment_Four ();

    }
    return null;
}
----------------------------------------

public Fragment getItem (int position) {
    int cnt = - 1;
    for (int i = 0;
    i < 4; i ++) {
        if (shouldShowFragment (i)) cnt ++;

        if (cnt == position) {
            switch (i) {
                case 0 :
                    return new Fragment_One ();
                case 1 :
                    return new Fragment_Two ();
                case 2 :
                    return new Fragment_Three ();
                case 3 :
                    return new Fragment_Four ();
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23710164_23824412_121_150
23710164_23824506_65_90
Title: Drag context menu with Parent 
----------------------------------------

public void handle (ActionEvent e) {
    actiontarget.setText ("");
    if (userTextField.getText ().equals ("")) {
        double x, y;
        Window win = userTextField.getScene ().getWindow ();
        x = win.getX () + userTextField.localToScene (0, 0).getX () + userTextField.getScene ().getX () + userTextField.getWidth ();
        y = win.getY () + userTextField.localToScene (0, 0).getY () + userTextField.getScene ().getY ();
        usernameValidator.show (userTextField, x, y);
    }
    if (pwBox.getText ().equals ("")) {
        passValidator.getItems ().clear ();
        passValidator.getItems ().add (new MenuItem ("Please enter Password"));
        passValidator.show (pwBox, Side.RIGHT, 10, 0);
    }
    if (! pwBox.getText ().equals ("") && ! userTextField.getText ().equals ("")) {
        actiontarget.setFill (Color.GREEN);
        actiontarget.setText ("Welcome");
    }
}
----------------------------------------

public void handle (ActionEvent e) {
    actiontarget.setText ("");
    if (userTextField.getText ().equals ("")) {
        usernameValidator.setVisible (true);
        usernameValidator.setManaged (true);
    }
    if (pwBox.getText ().equals ("")) {
        pwBox.setStyle ("-fx-background-color: orangered, derive(orangered,80%); -fx-prompt-text-fill: purple;");
        pwBox.setPromptText ("Please enter Password");
    }
    if (! pwBox.getText ().equals ("") && ! userTextField.getText ().equals ("")) {
        actiontarget.setFill (Color.GREEN);
        actiontarget.setText ("Welcome");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23710164_23824412_7_66
23710164_23824506_4_14
Title: Drag context menu with Parent 
----------------------------------------

public void start (Stage stage) throws Exception {
    stage.setTitle ("Validation Demo");
    BorderPane borderPane = new BorderPane ();
    borderPane.setCenter (loadLoginScreen ());
    Scene scene = new Scene (borderPane, 700, 500);
    scene.getStylesheets ().add (MainApp.class.getResource ("/styles/context.css").toExternalForm ());
    stage.setScene (scene);
    stage.show ();
    stage.xProperty ().addListener (new ChangeListener < Number > () {
        @Override
        public void changed (ObservableValue < ? extends Number > arg0, Number oldX, Number newX) {
            double delta = oldX.doubleValue () - newX.doubleValue ();
            if (usernameValidator.isShowing ()) adjustX (usernameValidator, delta);

            if (passValidator.isShowing ()) adjustX (passValidator, delta);

        } private void adjustX (PopupWindow menu, double delta) {
            menu.setX (menu.getX () - delta);
        }}

    );
    stage.yProperty ().addListener (new ChangeListener < Number > () {
        @Override
        public void changed (ObservableValue < ? extends Number > arg0, Number oldY, Number newY) {
            double delta = oldY.doubleValue () - newY.doubleValue ();
            if (usernameValidator.isShowing ()) adjustY (usernameValidator, delta);

            if (passValidator.isShowing ()) adjustY (passValidator, delta);

        } private void adjustY (PopupWindow menu, double delta) {
            menu.setY (menu.getY () - delta);
        }}

    );
    stage.focusedProperty ().addListener (new ChangeListener < Boolean > () {
        @Override
        public void changed (ObservableValue < ? extends Boolean > arg0, Boolean wasFocused, Boolean isFocused) {
            if (wasFocused && ! isFocused) {
                if (usernameValidator.isShowing ()) usernameValidator.hide ();

                if (passValidator.isShowing ()) passValidator.hide ();

            }
        }}

    );
    stage.setResizable (false);
}
----------------------------------------

public void start (Stage stage) throws Exception {
    stage.setTitle ("Validation Demo");
    BorderPane borderPane = new BorderPane ();
    borderPane.setCenter (loadLoginScreen ());
    Scene scene = new Scene (borderPane, 700, 500);
    scene.getStylesheets ().add (MainApp.class.getResource ("/styles/context.css").toExternalForm ());
    stage.setScene (scene);
    stage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_130_150
23713392_23718319_237_248
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_130_150
23713392_23718319_260_269
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_130_150
23713392_23718319_281_290
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_130_150
23713392_23718319_302_311
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Point point = result.getLocation ();
    point.x += xDelta;
    point.y += yDelta;
    if (point.x < 0) {
        point.x = 0;
        xDelta *= - 1;
    } else if (point.x + result.getWidth () > getWidth ()) {
        point.x = getWidth () - result.getWidth ();
        xDelta *= - 1;
    }

    if (point.y < 0) {
        point.y = 0;
        yDelta *= - 1;
    } else if (point.y + result.getHeight () > getHeight ()) {
        point.y = getHeight () - result.getHeight ();
        yDelta *= - 1;
    }

    result.setLocation (point);
    repaint ();
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_237_248
23713392_23718319_260_269
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_237_248
23713392_23718319_281_290
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_237_248
23713392_23718319_302_311
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 + num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_260_269
23713392_23718319_281_290
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_260_269
23713392_23718319_302_311
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 - num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23713392_23718319_281_290
23713392_23718319_302_311
Title: How to transfer a value from one JLabel to another? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 * num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    try {
        double num1 = Double.parseDouble (firstNumberField.getText ());
        double num2 = Double.parseDouble (secondNumberField.getText ());
        double result = num1 / num2;
        getModel ().setResult (result);
    } catch (NumberFormatException exp) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23715241_23715336_5_26
23715241_23715525_22_29
Title: Java swing JOptionPane: combine showInputDialog and showOptionDialog? 
----------------------------------------

public static void main (String [] args) {
    String [] weekdays = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
    final JComboBox < String > combo = new JComboBox < > (weekdays);
    String [] options = {"OK", "Cancel", "Fugedaboutit"};
    String title = "Title";
    int selection = JOptionPane.showOptionDialog (null, combo, title, JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options [0]);
    if (selection > 0) {
        System.out.println ("selection is: " + options [selection]);
    }
    Object weekday = combo.getSelectedItem ();
    if (weekday != null) {
        System.out.println ("weekday: " + weekday);
    }
}
----------------------------------------

public static void main (String [] args) {
    EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
            MyOptionPane mOP = new MyOptionPane ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
237159_237204_1_22
237159_25069800_1_45
Title: What's the best way to check if a String represents an integer in Java? 
----------------------------------------

public static boolean isInteger (String str) {
    if (str == null) {
        return false;
    }
    if (str.isEmpty ()) {
        return false;
    }
    int i = 0;
    if (str.charAt (0) == '-') {
        if (length == 1) {
            return false;
        }
        i = 1;
    }
    for (; i < length; i ++) {
        char c = str.charAt (i);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    return true;
}
----------------------------------------

public static boolean isInteger (String str) {
    if (str == null) {
        return false;
    }
    int length = str.length ();
    int i = 0;
    int maxlength = 10;
    String maxnum = String.valueOf (Integer.MAX_VALUE);
    if (str.charAt (0) == '-') {
        maxlength = 11;
        i = 1;
        maxnum = String.valueOf (Integer.MIN_VALUE);
    }
    if (length > maxlength) {
        return false;
    }
    if (maxlength == 11 && length == 1) {
        return false;
    }
    for (int num = i;
    num < length; num ++) {
        char c = str.charAt (num);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    if (length == maxlength) {
        for (; i < length; i ++) {
            if (str.charAt (i) < maxnum.charAt (i)) {
                return true;
            } else if (str.charAt (i) > maxnum.charAt (i)) {
                return false;
            }

        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
237159_237204_1_22
237159_40358657_1_11
Title: What's the best way to check if a String represents an integer in Java? 
----------------------------------------

public static boolean isInteger (String str) {
    if (str == null) {
        return false;
    }
    if (str.isEmpty ()) {
        return false;
    }
    int i = 0;
    if (str.charAt (0) == '-') {
        if (length == 1) {
            return false;
        }
        i = 1;
    }
    for (; i < length; i ++) {
        char c = str.charAt (i);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    return true;
}
----------------------------------------

public static boolean isInteger (String str) {
    if (str == null || str.isEmpty ()) {
        return false;
    }
    try {
        long value = Long.valueOf (str);
        return value >= - 2147483648 && value <= 2147483647;
    } catch (Exception ex) {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
237159_25069800_1_45
237159_40358657_1_11
Title: What's the best way to check if a String represents an integer in Java? 
----------------------------------------

public static boolean isInteger (String str) {
    if (str == null) {
        return false;
    }
    int length = str.length ();
    int i = 0;
    int maxlength = 10;
    String maxnum = String.valueOf (Integer.MAX_VALUE);
    if (str.charAt (0) == '-') {
        maxlength = 11;
        i = 1;
        maxnum = String.valueOf (Integer.MIN_VALUE);
    }
    if (length > maxlength) {
        return false;
    }
    if (maxlength == 11 && length == 1) {
        return false;
    }
    for (int num = i;
    num < length; num ++) {
        char c = str.charAt (num);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    if (length == maxlength) {
        for (; i < length; i ++) {
            if (str.charAt (i) < maxnum.charAt (i)) {
                return true;
            } else if (str.charAt (i) > maxnum.charAt (i)) {
                return false;
            }

        }
    }
    return true;
}
----------------------------------------

public static boolean isInteger (String str) {
    if (str == null || str.isEmpty ()) {
        return false;
    }
    try {
        long value = Long.valueOf (str);
        return value >= - 2147483648 && value <= 2147483647;
    } catch (Exception ex) {
        return false;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23727204_23727257_1_16
23727204_23727317_1_15
Title: Out of bounds error at keyword to alpha comparison 
----------------------------------------

public String putKeyword (String keyword) {
    StringBuffer alpha = new StringBuffer ();
    alpha.append (keyword.charAt (0));
    for (int i = 1;
    i < keyword.length (); i ++) {
        boolean found = false;
        for (int j = 0;
        j < alpha.length (); j ++) {
            if (keyword.charAt (i) == alpha.charAt (j)) found = true;

        }
        if (found == false) alpha.append (keyword.charAt (i));

    }
    return alphabet = alpha.toString ();
}
----------------------------------------

public String putKeyword (String keyword) {
    StringBuffer alpha = new StringBuffer ();
    Set < Character > seenChars = new HashSet < String > ();
    for (int i = 0;
    i < keyword.length (); i ++) {
        char c = keyword.charAt (i);
        if (! seenChars.contains (c)) {
            seenChars.add (c);
            alpha.append (c);
        }
    }
    return alpha.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23769751_23769970_1_27
23769751_23770476_6_44
Title: "Searching for a string from file and returning that string in java?" 
----------------------------------------

public static String getName (File inFile, Scanner console) throws FileNotFoundException {
    boolean hasName = false;
    while (! hasName) {
        System.out.print ("Enter a name (or quit): ");
        String name = console.next ();
        System.out.println ();
        Scanner scanner = new Scanner (inFile);
        while (scanner.hasNextLine ()) {
            String lineFromFile = scanner.nextLine ();
            if (lineFromFile.contains (name)) {
                System.out.println ("I found " + name);
                hasName = true;
                break;
            }
            if (name.equalsIgnoreCase ("quit")) {
                System.exit (0);
            }
        }
    }
    return name;
}
----------------------------------------

public static String getName (File inFile, Scanner console) throws FileNotFoundException {
    String lineFromFile;
    String name;
    Scanner scanner;
    while (true) {
        System.out.print ("Enter a name (or quit): ");
        name = console.nextLine ().trim ();
        if (name.equalsIgnoreCase ("quit")) {
            return null;
        }
        scanner = new Scanner (inFile);
        while (scanner.hasNextLine ()) {
            lineFromFile = scanner.nextLine ().trim ();
            if (lineFromFile.equalsIgnoreCase (name)) {
                scanner.close ();
                System.out.println ("I found " + name);
                return name;
            }
        }
        scanner.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_26917989_1_18
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_29741840_1_27
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_30420473_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_30931456_1_15
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int carsEast = 0;
    int carPairs = 0;
    for (int i = 0;
    i < A.Length; i ++) {
        carsEast = A [i] == 0 ? carsEast += 1 : carsEast;
        carPairs = A [i] == 1 && carsEast > 0 ? carPairs + carsEast : carPairs;
        if (carPairs > 1000000000) {
            return - 1;
        }
    }
    return carPairs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_31222875_1_47
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int west = 0;
    int east = 0;
    int pairsCounter = 0;
    if (A.Length < 0 || A.Length > 100000) return 0;

    if (A.Length == 2 && A [0] == 0 && A [1] == 1) return 1;

    for (int i = 0;
    i < A.Length; i ++) {
        if (A [i] == 1) west ++;

    }
    east = A.Length - west;
    if (east == 0 || west == 0) return 0;

    for (int i = 0;
    (i < A.Length && west > 0); i ++) {
        if (A [i] == 0 && west > 0) {
            pairsCounter = pairsCounter + west;
        } else {
            west --;
        }
        if (pairsCounter > 1000000000) return - 1;

    }
    return pairsCounter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_31644557_13_49
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    if (N < 2) {
        return 0;
    }
    int onesCount = 0;
    boolean zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (zeroHappenedBefore && A [i] == 1) {
            ++ onesCount;
        } else if (A [i] == 0) {
            zeroHappenedBefore = true;
        }

    }
    if (onesCount == 0) {
        return 0;
    }
    long combinations = 0;
    int conditionReturnFail = 1000000000;
    zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (A [i] == 0) {
            combinations += onesCount;
            if (conditionReturnFail < combinations) {
                return FAIL;
            }
            zeroHappenedBefore = true;
        } else {
            if (zeroHappenedBefore) {
                -- onesCount;
            }
        }
    }
    return (int) combinations;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_32138195_9_20
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    int [] sum = new int [N];
    calculateOnes (A, sum);
    int counter = 0;
    for (int i = 0;
    i < N; i ++) {
        if (A [i] == 0) {
            counter += sum [i];
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_33650673_2_17
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    final int MAX_RESULT = 1000000000;
    int result = 0, one_counter = 0;
    for (int i = A.length - 1;
    i >= 0; i --) {
        if (A [i] == 1) {
            one_counter ++;
        } else {
            if (result > MAX_RESULT) {
                return - 1;
            }
            result += one_counter;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_33759174_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    boolean isZero = false;
    long pairCount = 0;
    int zeroCount = 0;
    long LIMIT_CAR_COUNT = 1000000000;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            isZero = true;
            zeroCount ++;
        }
        if (A [i] == 1 && isZero) pairCount = pairCount + zeroCount;

    }
    if (pairCount > LIMIT_CAR_COUNT) return - 1;
    else return (int) pairCount;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_35704440_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

int solution (int A [], int N) {
    int X = 0, count = 0, i;
    for (i = 0; i < N; i ++) {
        if (A [i] == 0) X ++;
        else {
            count += X;
        }
        if (count > 1000000000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_37336768_2_21
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int countZeros = 0;
    int sumOfValidPairs = 0;
    int i = 0;
    while (i < A.length) {
        if (A [i] == 0) {
            countZeros ++;
        } else {
            sumOfValidPairs += countZeros;
        }
        i ++;
    }
    if (sumOfValidPairs <= 1000000000 && sumOfValidPairs >= 0) {
        return sumOfValidPairs;
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_46779804_1_14
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int ones = 0, count = 0;
    for (int j = A.length - 1;
    j >= 0; j --) {
        if (A [j] == 1) {
            ones ++;
        } else if (A [j] == 0) {
            count += ones;
        }

        if (count > 1_000_000_000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_46798022_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    if (A.length < 2) {
        return 0;
    }
    long passingPairs = 0;
    long eastBound = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            eastBound ++;
        } else {
            if (eastBound > 0) {
                passingPairs += eastBound;
            }
        }
    }
    return passingPairs > 1000000000 ? - 1 : (int) passingPairs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_47966424_1_33
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public static int solution (int [] A) {
    if (A.length == 1) return 0;

    if (A.length == 2) {
        if (A [0] == 0 && A [1] == 1) return 1;
        else return 0;

    }
    int count = 0;
    int zeroCount = 0;
    boolean zeroFlag = false;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0 && ! zeroFlag) zeroFlag = true;
        else if (A [i] == 0 && zeroFlag) zeroCount ++;

        if (zeroFlag && A [i] == 1) count = (count + 1) + zeroCount;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_25527974_1_10
23774985_49591865_1_15
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countOfZeros = 0, count = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) countOfZeros ++;

        if (A [i] == 1) count += countOfZeros;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------

public int solution (int [] A) {
    int A1 = 0;
    int pair = 0;
    for (int i = A.length - 1;
    i >= 0; i --) {
        if (A [i] == 1) {
            A1 ++;
        } else {
            pair += A1;
        }
        if (pair > 1000000000) {
            return - 1;
        }
    }
    return pair;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_29741840_1_27
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_30420473_1_19
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_30931456_1_15
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int carsEast = 0;
    int carPairs = 0;
    for (int i = 0;
    i < A.Length; i ++) {
        carsEast = A [i] == 0 ? carsEast += 1 : carsEast;
        carPairs = A [i] == 1 && carsEast > 0 ? carPairs + carsEast : carPairs;
        if (carPairs > 1000000000) {
            return - 1;
        }
    }
    return carPairs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_31222875_1_47
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int west = 0;
    int east = 0;
    int pairsCounter = 0;
    if (A.Length < 0 || A.Length > 100000) return 0;

    if (A.Length == 2 && A [0] == 0 && A [1] == 1) return 1;

    for (int i = 0;
    i < A.Length; i ++) {
        if (A [i] == 1) west ++;

    }
    east = A.Length - west;
    if (east == 0 || west == 0) return 0;

    for (int i = 0;
    (i < A.Length && west > 0); i ++) {
        if (A [i] == 0 && west > 0) {
            pairsCounter = pairsCounter + west;
        } else {
            west --;
        }
        if (pairsCounter > 1000000000) return - 1;

    }
    return pairsCounter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_31644557_13_49
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    if (N < 2) {
        return 0;
    }
    int onesCount = 0;
    boolean zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (zeroHappenedBefore && A [i] == 1) {
            ++ onesCount;
        } else if (A [i] == 0) {
            zeroHappenedBefore = true;
        }

    }
    if (onesCount == 0) {
        return 0;
    }
    long combinations = 0;
    int conditionReturnFail = 1000000000;
    zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (A [i] == 0) {
            combinations += onesCount;
            if (conditionReturnFail < combinations) {
                return FAIL;
            }
            zeroHappenedBefore = true;
        } else {
            if (zeroHappenedBefore) {
                -- onesCount;
            }
        }
    }
    return (int) combinations;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_32138195_9_20
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    int [] sum = new int [N];
    calculateOnes (A, sum);
    int counter = 0;
    for (int i = 0;
    i < N; i ++) {
        if (A [i] == 0) {
            counter += sum [i];
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_33650673_2_17
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    final int MAX_RESULT = 1000000000;
    int result = 0, one_counter = 0;
    for (int i = A.length - 1;
    i >= 0; i --) {
        if (A [i] == 1) {
            one_counter ++;
        } else {
            if (result > MAX_RESULT) {
                return - 1;
            }
            result += one_counter;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_33759174_1_19
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    boolean isZero = false;
    long pairCount = 0;
    int zeroCount = 0;
    long LIMIT_CAR_COUNT = 1000000000;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            isZero = true;
            zeroCount ++;
        }
        if (A [i] == 1 && isZero) pairCount = pairCount + zeroCount;

    }
    if (pairCount > LIMIT_CAR_COUNT) return - 1;
    else return (int) pairCount;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_35704440_1_19
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

int solution (int A [], int N) {
    int X = 0, count = 0, i;
    for (i = 0; i < N; i ++) {
        if (A [i] == 0) X ++;
        else {
            count += X;
        }
        if (count > 1000000000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_37336768_2_21
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int countZeros = 0;
    int sumOfValidPairs = 0;
    int i = 0;
    while (i < A.length) {
        if (A [i] == 0) {
            countZeros ++;
        } else {
            sumOfValidPairs += countZeros;
        }
        i ++;
    }
    if (sumOfValidPairs <= 1000000000 && sumOfValidPairs >= 0) {
        return sumOfValidPairs;
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_46779804_1_14
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int ones = 0, count = 0;
    for (int j = A.length - 1;
    j >= 0; j --) {
        if (A [j] == 1) {
            ones ++;
        } else if (A [j] == 0) {
            count += ones;
        }

        if (count > 1_000_000_000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_46798022_1_19
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    if (A.length < 2) {
        return 0;
    }
    long passingPairs = 0;
    long eastBound = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            eastBound ++;
        } else {
            if (eastBound > 0) {
                passingPairs += eastBound;
            }
        }
    }
    return passingPairs > 1000000000 ? - 1 : (int) passingPairs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_47966424_1_33
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public static int solution (int [] A) {
    if (A.length == 1) return 0;

    if (A.length == 2) {
        if (A [0] == 0 && A [1] == 1) return 1;
        else return 0;

    }
    int count = 0;
    int zeroCount = 0;
    boolean zeroFlag = false;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0 && ! zeroFlag) zeroFlag = true;
        else if (A [i] == 0 && zeroFlag) zeroCount ++;

        if (zeroFlag && A [i] == 1) count = (count + 1) + zeroCount;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_26917989_1_18
23774985_49591865_1_15
Title: Codility passing car 
----------------------------------------

int solution (int A [], int N) {
    int i = N - 1, j = 0, k = 0;
    do {
        if (A [i] == 0) {
            j += k;
            if (j > 1000000000) return - 1;

        } else k += 1;

    } while (-- i >= 0);
    return j;
}
----------------------------------------

public int solution (int [] A) {
    int A1 = 0;
    int pair = 0;
    for (int i = A.length - 1;
    i >= 0; i --) {
        if (A [i] == 1) {
            A1 ++;
        } else {
            pair += A1;
        }
        if (pair > 1000000000) {
            return - 1;
        }
    }
    return pair;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_30420473_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_30931456_1_15
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    int carsEast = 0;
    int carPairs = 0;
    for (int i = 0;
    i < A.Length; i ++) {
        carsEast = A [i] == 0 ? carsEast += 1 : carsEast;
        carPairs = A [i] == 1 && carsEast > 0 ? carPairs + carsEast : carPairs;
        if (carPairs > 1000000000) {
            return - 1;
        }
    }
    return carPairs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_31222875_1_47
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    int west = 0;
    int east = 0;
    int pairsCounter = 0;
    if (A.Length < 0 || A.Length > 100000) return 0;

    if (A.Length == 2 && A [0] == 0 && A [1] == 1) return 1;

    for (int i = 0;
    i < A.Length; i ++) {
        if (A [i] == 1) west ++;

    }
    east = A.Length - west;
    if (east == 0 || west == 0) return 0;

    for (int i = 0;
    (i < A.Length && west > 0); i ++) {
        if (A [i] == 0 && west > 0) {
            pairsCounter = pairsCounter + west;
        } else {
            west --;
        }
        if (pairsCounter > 1000000000) return - 1;

    }
    return pairsCounter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_31644557_13_49
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    if (N < 2) {
        return 0;
    }
    int onesCount = 0;
    boolean zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (zeroHappenedBefore && A [i] == 1) {
            ++ onesCount;
        } else if (A [i] == 0) {
            zeroHappenedBefore = true;
        }

    }
    if (onesCount == 0) {
        return 0;
    }
    long combinations = 0;
    int conditionReturnFail = 1000000000;
    zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (A [i] == 0) {
            combinations += onesCount;
            if (conditionReturnFail < combinations) {
                return FAIL;
            }
            zeroHappenedBefore = true;
        } else {
            if (zeroHappenedBefore) {
                -- onesCount;
            }
        }
    }
    return (int) combinations;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_32138195_9_20
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    int [] sum = new int [N];
    calculateOnes (A, sum);
    int counter = 0;
    for (int i = 0;
    i < N; i ++) {
        if (A [i] == 0) {
            counter += sum [i];
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_33650673_2_17
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    final int MAX_RESULT = 1000000000;
    int result = 0, one_counter = 0;
    for (int i = A.length - 1;
    i >= 0; i --) {
        if (A [i] == 1) {
            one_counter ++;
        } else {
            if (result > MAX_RESULT) {
                return - 1;
            }
            result += one_counter;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_33759174_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    boolean isZero = false;
    long pairCount = 0;
    int zeroCount = 0;
    long LIMIT_CAR_COUNT = 1000000000;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            isZero = true;
            zeroCount ++;
        }
        if (A [i] == 1 && isZero) pairCount = pairCount + zeroCount;

    }
    if (pairCount > LIMIT_CAR_COUNT) return - 1;
    else return (int) pairCount;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_35704440_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

int solution (int A [], int N) {
    int X = 0, count = 0, i;
    for (i = 0; i < N; i ++) {
        if (A [i] == 0) X ++;
        else {
            count += X;
        }
        if (count > 1000000000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_37336768_2_21
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    int countZeros = 0;
    int sumOfValidPairs = 0;
    int i = 0;
    while (i < A.length) {
        if (A [i] == 0) {
            countZeros ++;
        } else {
            sumOfValidPairs += countZeros;
        }
        i ++;
    }
    if (sumOfValidPairs <= 1000000000 && sumOfValidPairs >= 0) {
        return sumOfValidPairs;
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_46779804_1_14
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    int ones = 0, count = 0;
    for (int j = A.length - 1;
    j >= 0; j --) {
        if (A [j] == 1) {
            ones ++;
        } else if (A [j] == 0) {
            count += ones;
        }

        if (count > 1_000_000_000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_46798022_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public int solution (int [] A) {
    if (A.length < 2) {
        return 0;
    }
    long passingPairs = 0;
    long eastBound = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            eastBound ++;
        } else {
            if (eastBound > 0) {
                passingPairs += eastBound;
            }
        }
    }
    return passingPairs > 1000000000 ? - 1 : (int) passingPairs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_29741840_1_27
23774985_47966424_1_33
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int countZro = 0;
    int countCars = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            countZro ++;
        }
        if (countZro > 0 && A [i] == 1) {
            countCars += countZro;
        }
        if (countCars > 1000000000) {
            return - 1;
        }
    }
    return countCars;
}
----------------------------------------

public static int solution (int [] A) {
    if (A.length == 1) return 0;

    if (A.length == 2) {
        if (A [0] == 0 && A [1] == 1) return 1;
        else return 0;

    }
    int count = 0;
    int zeroCount = 0;
    boolean zeroFlag = false;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0 && ! zeroFlag) zeroFlag = true;
        else if (A [i] == 0 && zeroFlag) zeroCount ++;

        if (zeroFlag && A [i] == 1) count = (count + 1) + zeroCount;

        if (count > 1000000000) return - 1;

    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_30931456_1_15
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    int carsEast = 0;
    int carPairs = 0;
    for (int i = 0;
    i < A.Length; i ++) {
        carsEast = A [i] == 0 ? carsEast += 1 : carsEast;
        carPairs = A [i] == 1 && carsEast > 0 ? carPairs + carsEast : carPairs;
        if (carPairs > 1000000000) {
            return - 1;
        }
    }
    return carPairs;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_31222875_1_47
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    int west = 0;
    int east = 0;
    int pairsCounter = 0;
    if (A.Length < 0 || A.Length > 100000) return 0;

    if (A.Length == 2 && A [0] == 0 && A [1] == 1) return 1;

    for (int i = 0;
    i < A.Length; i ++) {
        if (A [i] == 1) west ++;

    }
    east = A.Length - west;
    if (east == 0 || west == 0) return 0;

    for (int i = 0;
    (i < A.Length && west > 0); i ++) {
        if (A [i] == 0 && west > 0) {
            pairsCounter = pairsCounter + west;
        } else {
            west --;
        }
        if (pairsCounter > 1000000000) return - 1;

    }
    return pairsCounter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_31644557_13_49
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    if (N < 2) {
        return 0;
    }
    int onesCount = 0;
    boolean zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (zeroHappenedBefore && A [i] == 1) {
            ++ onesCount;
        } else if (A [i] == 0) {
            zeroHappenedBefore = true;
        }

    }
    if (onesCount == 0) {
        return 0;
    }
    long combinations = 0;
    int conditionReturnFail = 1000000000;
    zeroHappenedBefore = false;
    for (int i = 0;
    i < N; ++ i) {
        if (A [i] == 0) {
            combinations += onesCount;
            if (conditionReturnFail < combinations) {
                return FAIL;
            }
            zeroHappenedBefore = true;
        } else {
            if (zeroHappenedBefore) {
                -- onesCount;
            }
        }
    }
    return (int) combinations;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_32138195_9_20
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    int N = A.length;
    int [] sum = new int [N];
    calculateOnes (A, sum);
    int counter = 0;
    for (int i = 0;
    i < N; i ++) {
        if (A [i] == 0) {
            counter += sum [i];
        }
    }
    return counter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_33650673_2_17
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    final int MAX_RESULT = 1000000000;
    int result = 0, one_counter = 0;
    for (int i = A.length - 1;
    i >= 0; i --) {
        if (A [i] == 1) {
            one_counter ++;
        } else {
            if (result > MAX_RESULT) {
                return - 1;
            }
            result += one_counter;
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_33759174_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    boolean isZero = false;
    long pairCount = 0;
    int zeroCount = 0;
    long LIMIT_CAR_COUNT = 1000000000;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            isZero = true;
            zeroCount ++;
        }
        if (A [i] == 1 && isZero) pairCount = pairCount + zeroCount;

    }
    if (pairCount > LIMIT_CAR_COUNT) return - 1;
    else return (int) pairCount;

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_35704440_1_19
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

int solution (int A [], int N) {
    int X = 0, count = 0, i;
    for (i = 0; i < N; i ++) {
        if (A [i] == 0) X ++;
        else {
            count += X;
        }
        if (count > 1000000000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_37336768_2_21
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    int countZeros = 0;
    int sumOfValidPairs = 0;
    int i = 0;
    while (i < A.length) {
        if (A [i] == 0) {
            countZeros ++;
        } else {
            sumOfValidPairs += countZeros;
        }
        i ++;
    }
    if (sumOfValidPairs <= 1000000000 && sumOfValidPairs >= 0) {
        return sumOfValidPairs;
    }
    return - 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
23774985_30420473_1_19
23774985_46779804_1_14
Title: Codility passing car 
----------------------------------------

public int solution (int [] A) {
    int output = 0;
    int noOfZero = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] == 0) {
            noOfZero += 1;
            continue;
        }
        if (A [i] == 1 && noOfZero > 0) {
            output += noOfZero * A [i];
        }
    }
    if (output > 1000000000 || output < 0) {
        return - 1;
    }
    return output;
}
----------------------------------------

public int solution (int [] A) {
    int ones = 0, count = 0;
    for (int j = A.length - 1;
    j >= 0; j --) {
        if (A [j] == 1) {
            ones ++;
        } else if (A [j] == 0) {
            count += ones;
        }

        if (count > 1_000_000_000) {
            return - 1;
        }
    }
    return count;
}
----------------------------------------

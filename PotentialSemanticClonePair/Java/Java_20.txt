$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_22491493_79_94
15997483_51792104_49_60
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        synchronized (threadOrderTest) {
            for (int i = 0;
            i < 10; i ++) {
                while (threadOrderTest.status != 3) {
                    threadOrderTest.wait ();
                }
                System.out.println ("C ");
                threadOrderTest.status = 1;
                threadOrderTest.notifyAll ();
            }
        }
    } catch (Exception e) {
        System.out.println ("Exception 3 :" + e.getMessage ());
    }
}
----------------------------------------

public void run () {
    int count = 0;
    while (count < max) {
        synchronized (this.state) {
            if (this.state.getState () == this.value) {
                System.out.print (value);
                count ++;
                this.state.incrState ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32164161_23_34
15997483_32164161_40_55
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    System.out.print ("A");
    countDownLatch1.countDown ();
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        countDownLatch1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("B");
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32164161_23_34
15997483_33655989_21_62
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    System.out.print ("A");
    countDownLatch1.countDown ();
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 3; i ++) {
        synchronized (this) {
            if (turn == 0) {
                System.out.println ("Thread1");
                turn = 1;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 1) {
                System.out.println ("Thread2");
                turn = 2;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 2) {
                System.out.println ("Thread3");
                System.out.println ("*********");
                turn = 0;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32164161_23_34
15997483_51792104_49_60
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    System.out.print ("A");
    countDownLatch1.countDown ();
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    int count = 0;
    while (count < max) {
        synchronized (this.state) {
            if (this.state.getState () == this.value) {
                System.out.print (value);
                count ++;
                this.state.incrState ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32164161_40_55
15997483_33655989_21_62
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        countDownLatch1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("B");
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 3; i ++) {
        synchronized (this) {
            if (turn == 0) {
                System.out.println ("Thread1");
                turn = 1;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 1) {
                System.out.println ("Thread2");
                turn = 2;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 2) {
                System.out.println ("Thread3");
                System.out.println ("*********");
                turn = 0;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32164161_40_55
15997483_51792104_49_60
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        countDownLatch1.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("B");
    countDownLatch.countDown ();
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    int count = 0;
    while (count < max) {
        synchronized (this.state) {
            if (this.state.getState () == this.value) {
                System.out.print (value);
                count ++;
                this.state.incrState ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32164161_61_75
15997483_33655989_21_62
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        countDownLatch.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("C");
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    for (int i = 0;
    i < 3; i ++) {
        synchronized (this) {
            if (turn == 0) {
                System.out.println ("Thread1");
                turn = 1;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 1) {
                System.out.println ("Thread2");
                turn = 2;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 2) {
                System.out.println ("Thread3");
                System.out.println ("*********");
                turn = 0;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32164161_61_75
15997483_51792104_49_60
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    try {
        countDownLatch.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
    System.out.print ("C");
    try {
        barrier.await ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (BrokenBarrierException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    int count = 0;
    while (count < max) {
        synchronized (this.state) {
            if (this.state.getState () == this.value) {
                System.out.print (value);
                count ++;
                this.state.incrState ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32680780_44_59
15997483_33655989_2_14
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public static void main (String [] args) {
    Thread a = new Thread (new A ());
    Thread b = new Thread (new B ());
    Thread c = new Thread (new C ());
    a.start ();
    try {
        a.join ();
        b.start ();
        b.join ();
        c.start ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    MyThread h = new MyThread ();
    Thread t1 = new Thread (h);
    Thread t2 = new Thread (h);
    Thread t3 = new Thread (h);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_32680780_44_59
15997483_51792104_3_12
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public static void main (String [] args) {
    Thread a = new Thread (new A ());
    Thread b = new Thread (new B ());
    Thread c = new Thread (new C ());
    a.start ();
    try {
        a.join ();
        b.start ();
        b.join ();
        c.start ();
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyState state = new MyState ();
    final Thread t1 = new Thread (new MyRunnable (10, 'A', state));
    final Thread t2 = new Thread (new MyRunnable (10, 'B', state));
    final Thread t3 = new Thread (new MyRunnable (10, 'C', state));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_33655989_21_62
15997483_51792104_49_60
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public void run () {
    for (int i = 0;
    i < 3; i ++) {
        synchronized (this) {
            if (turn == 0) {
                System.out.println ("Thread1");
                turn = 1;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 1) {
                System.out.println ("Thread2");
                turn = 2;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
            if (turn == 2) {
                System.out.println ("Thread3");
                System.out.println ("*********");
                turn = 0;
                notify ();
            } else {
                try {
                    wait ();
                } catch (InterruptedException ie) {
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    int count = 0;
    while (count < max) {
        synchronized (this.state) {
            if (this.state.getState () == this.value) {
                System.out.print (value);
                count ++;
                this.state.incrState ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15997483_33655989_2_14
15997483_51792104_3_12
Title: How to ensure Java threads run in a particular order 
----------------------------------------

public static void main (String [] args) {
    MyThread h = new MyThread ();
    Thread t1 = new Thread (h);
    Thread t2 = new Thread (h);
    Thread t3 = new Thread (h);
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    MyState state = new MyState ();
    final Thread t1 = new Thread (new MyRunnable (10, 'A', state));
    final Thread t2 = new Thread (new MyRunnable (10, 'B', state));
    final Thread t3 = new Thread (new MyRunnable (10, 'C', state));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16002647_16002777_64_87
16002647_16002908_76_93
Title: Checking if text in a textbox matches a string once a button has been pressed 
----------------------------------------

public void actionPerformed (final ActionEvent ev) {
    Thread thread = new Thread () {
        public void run () {
            if (! input.getText ().trim ().equals ("")) {
                String cmd = ev.getActionCommand ();
                if (ENTER.equals (cmd)) {
                    output.append (input.getText ());
                    if (input.getText ().trim ().equals (testString)) output.append (" = " + testString);
                    else output.append (" != " + testString);

                    output.append ("\n");
                }
            }
            input.setText ("");
            input.requestFocus ();
        }}

    ;
    thread.start ();
}
----------------------------------------

public void actionPerformed (ActionEvent ae) {
    JFrame f = new JFrame ();
    if (ae.getSource ().equals (enter)) {
        if (flag == 1) {
            flag = 0;
            if (tb.getText ().equals ("cat")) {
                tb.setText ("Correct");
            }
        } else JOptionPane.showMessageDialog (f, "enter cat 1st");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16006901_16006960_1_22
16006901_16007031_1_19
Title: Find the distinct duplicates in an array 
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    boolean twoDuplicate = false;
    int counter = 0;
    Arrays.sort (values);
    int old = values [0];
    boolean numberSeen = false;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == old) {
            if (! numberSeen) {
                counter ++;
                numberSeen = true;
            }
        } else {
            numberSeen = false;
            old = values [i];
        }
    }
    if (counter == 2) twoDuplicate = true;

    return twoDuplicate;
}
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;

            }
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16006901_16006960_1_22
16006901_16007143_1_15
Title: Find the distinct duplicates in an array 
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    boolean twoDuplicate = false;
    int counter = 0;
    Arrays.sort (values);
    int old = values [0];
    boolean numberSeen = false;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == old) {
            if (! numberSeen) {
                counter ++;
                numberSeen = true;
            }
        } else {
            numberSeen = false;
            old = values [i];
        }
    }
    if (counter == 2) twoDuplicate = true;

    return twoDuplicate;
}
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    HashSet < Integer > map = new HashSet < Integer > ();
    int cont = 0;
    for (int i = 0;
    i < values.length; i ++) {
        if (map.contains (values [i])) {
            cont ++;
            if (cont == 2) return true;

        } else map.add (values [i]);

    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16006901_16007031_1_19
16006901_16007143_1_15
Title: Find the distinct duplicates in an array 
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;

            }
        }
    }
    return false;
}
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    HashSet < Integer > map = new HashSet < Integer > ();
    int cont = 0;
    for (int i = 0;
    i < values.length; i ++) {
        if (map.contains (values [i])) {
            cont ++;
            if (cont == 2) return true;

        } else map.add (values [i]);

    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16008491_16008565_1_12
16008491_16008611_1_11
Title: Converting String to it's integer ascii values 
----------------------------------------

public static long toAscii (String s) {
    StringBuilder sb = new StringBuilder ();
    String ascString = null;
    long asciiInt;
    for (int i = 0;
    i < s.length (); i ++) {
        sb.append ((int) s.charAt (i));
        char c = s.charAt (i);
    }
    ascString = sb.toString ();
    asciiInt = Long.parseLong (ascString);
    return asciiInt;
}
----------------------------------------

public static long toAscii (String s) {
    StringBuilder sb = new StringBuilder ();
    long asciiInt;
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        asciiInt = (int) c;
        System.out.println (c + "=" + asciiInt);
        sb.append (asciiInt);
    }
    return Long.parseLong (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16016064_16016324_1_27
16016064_16017118_51_59
Title: Border Layout not taking up all available space 
----------------------------------------

public static void main (String [] args) {
    JFrame frame = new JFrame ("New Message");
    frame.setSize (100, 100);
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    JTextArea textArea = new JTextArea ();
    frame.add (textArea, BorderLayout.CENTER);
    JPanel list = new JPanel ();
    list.setLayout (new BoxLayout (list, BoxLayout.Y_AXIS));
    frame.add (list, BorderLayout.NORTH);
    String [] labels = {"To: ", "Cc: ", "Bcc: ", "Subject: "};
    for (int i = 0;
    i < labels.length; i ++) {
        JLabel l = new JLabel (labels [i]);
        JTextField f = new JTextField ();
        JPanel p = new JPanel (new BorderLayout ());
        p.add (l, BorderLayout.WEST);
        p.add (f, BorderLayout.CENTER);
        list.add (p);
    }
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new Mail ().initUI ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16031849_16031945_2_13
16031849_16032186_4_31
Title: Java program implementing boolean instead of not (!) 
----------------------------------------

public static void main (String...ignored) {
    Scanner input = new Scanner (System.in);
    double sum = 0.0;
    while (true) {
        System.out.println ("So far, sum = " + sum);
        System.out.print ("Enter 'exit' to exit: ");
        if (! input.hasNextDouble ()) break;

        sum += input.nextDouble ();
    }
    System.out.println ("Ending sum: " + sum);
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    double data = 1.0;
    double sum = 0.0;
    boolean valid = false;
    while (! valid) {
        try {
            while (true) {
                System.out.print ("So far, sum = " + sum + "\nEnter a number or 0 to exit: ");
                data = input.nextDouble ();
                sum = sum + data;
                valid = true;
                if (data == 0.0) {
                    break;
                }
            }
        } catch (InputMismatchException e) {
            System.out.println ("Error--please enter a double number");
            input.next ();
        } catch (NoSuchElementException e) {
            System.out.println ("\nGoodbye!");
            System.exit (0);
        }
    }
    System.out.println ("Ending sum: " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16047417_16047597_5_23
16047417_33979281_3_14
Title: quadratic formula with scanner inputs 
----------------------------------------

public static void main (String [] args) {
    Scanner s = new Scanner (System.in);
    System.out.println ("Insert value for a: ");
    double a = Double.parseDouble (s.nextLine ());
    System.out.println ("Insert value for b: ");
    double b = Double.parseDouble (s.nextLine ());
    System.out.println ("Insert value for c: ");
    double c = Double.parseDouble (s.nextLine ());
    s.close ();
    double answer1 = (- b + Math.sqrt (Math.pow (b, 2) - (4 * a * c))) / (2 * a);
    double answer2 = (- b - Math.sqrt (Math.pow (b, 2) - (4 * a * c))) / (2 * a);
    if (Double.isNaN (answer1) || Double.isNaN (answer2)) {
        System.out.println ("Answer contains imaginary numbers");
    } else System.out.println ("The values are: " + answer1 + ", " + answer2);

}
----------------------------------------

public static void main (String [] args) {
    java.util.Scanner input = new java.util.Scanner (System.in);
    double a = input.nextDouble ();
    double b = input.nextDouble ();
    double c = input.nextDouble ();
    double quadPos = (- b + Math.sqrt (Math.pow (b, 2) - (4 * a * c))) / (2 * a);
    double quadNeg = (- b - Math.sqrt (Math.pow (b, 2) - (4 * a * c))) / (2 * a);
    System.out.println ("-b - = " + quadNeg + "\n-b + = " + quadPos);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16050222_16050291_5_27
16050222_52196308_4_20
Title: Put a range on the input of an array in java 
----------------------------------------

public static void main (String [] args) {
    Scanner kbin = new Scanner (System.in);
    int list [] = new int [10];
    int i = 0;
    System.out.print ("\n\tInput numbers from 10 to 50: \n");
    while (i < 10) {
        int value = kbin.nextInt ();
        if (value >= 10 && value <= 50) {
            list [i] = value;
            i ++;
        } else {
            System.out.println ("!! Bad number !!");
        }
    }
    for (int value : list) {
        System.out.println ("..." + value);
    }
}
----------------------------------------

public static void main (String [] args) {
    int list [] = new int [10];
    for (int i = 0;
    i < 10; i ++) {
        Scanner sc = new Scanner (System.in);
        if (sc.hasNext ("([1-4][0-9])?(50)?")) {
            list [i] = sc.nextInt ();
        } else {
            System.err.println ("Entered value is out of range 10 - 50. Please enter a valid number");
            i --;
        }
    }
    for (int i = 0;
    i < 9; i ++) {
        System.out.print (list [i] + " ");
    }
    System.out.println (list [9]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16052330_16053250_1_51
16052330_16054165_5_27
Title: The values output are all correct except for the Count on the first index 
----------------------------------------

public static void main (String [] args) {
    int [] numbers = new int [50];
    int index = 0;
    int temp;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter Number: ");
    System.out.println (" ");
    do {
        int input = keyboard.nextInt ();
        if (input != - 999) numbers [index ++] = input;
        else break;

    } while (index != 0);
    keyboard.close ();
    System.out.println ("\nNumbers\t" + "Occurances");
    int [] newNumbers = new int [index];
    for (int i = 0;
    i < index; i ++) newNumbers [i] = numbers [i];

    for (int s = 0;
    s < newNumbers.length - 1; s ++) {
        for (int j = 1;
        j < newNumbers.length - s; j ++) {
            if (newNumbers [j - 1] < newNumbers [j]) {
                temp = newNumbers [j - 1];
                newNumbers [j - 1] = newNumbers [j];
                newNumbers [j] = temp;
            }
        }
    }
    System.out.println (Arrays.toString (newNumbers));
    int count = 1;
    int prevElement = 0;
    if (newNumbers.length > 0) {
        prevElement = newNumbers [0];
    }
    for (int x = 1;
    x < newNumbers.length; x ++) {
        if (newNumbers [x] == prevElement) {
            count ++;
        } else {
            System.out.println (prevElement + " occurs " + count + "times");
            prevElement = newNumbers [x];
            count = 1;
        }
    }
    System.out.println (prevElement + " occurs " + count + "times");
}
----------------------------------------

public static void main (String [] args) {
    Integer number [] = new Integer [50];
    int index = 0;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter Number: ");
    System.out.println (" ");
    do {
        int input = keyboard.nextInt ();
        if (input != - 999) number [index ++] = input;
        else break;

    } while (index != 0);
    List < Integer > asList = Arrays.asList (number);
    for (Integer n : asList) {
        if (n != null) System.out.println (n + " occurance " + Collections.frequency (asList, n));

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16052980_16053803_3_10
16052980_16053831_25_61
Title: CellRenderer Item repaint 
----------------------------------------

public void run () {
    ListModel lm = myList.getModel ();
    DefaultListModel dlm = new DefaultListModel ();
    for (int i = 0;
    i < lm.getSize (); i ++) {
        dlm.addElement (lm.getElementAt (i));
    }
    myList.setModel (dlm);
}
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    final DefaultListModel < Float > model = new DefaultListModel < > ();
    model.addElement (0f);
    JList < Float > list = new JList < > (model);
    list.setCellRenderer (new ProgressListCellRenderer ());
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (new JScrollPane (list));
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
    Timer timer = new Timer (125, new ActionListener () {
        @Override
        public void actionPerformed (ActionEvent e) {
            float value = model.getElementAt (0);
            value += 0.01;
            if (value >= 1f) {
                value = 1f;
                ((Timer) e.getSource ()).stop ();
            }
            model.setElementAt (value, 0);
        }}

    );
    timer.setRepeats (true);
    timer.setCoalesce (true);
    timer.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16059062_16059530_3_45
16059062_16059736_1_14
Title: Java: Size of a Vector in bytes 
----------------------------------------

public static void main (String [] args) throws Exception {
    runGC ();
    usedMemory ();
    final int count = 100000;
    Object [] objects = new Object [count];
    long heap1 = 0;
    for (int i = - 1;
    i < count; ++ i) {
        Object object = null;
        object = new Object ();
        if (i >= 0) objects [i] = object;
        else {
            object = null;
            runGC ();
            heap1 = usedMemory ();
        }
    }
    runGC ();
    long heap2 = usedMemory ();
    final int size = Math.round (((float) (heap2 - heap1)) / count);
    System.out.println ("'before' heap: " + heap1 + ", 'after' heap: " + heap2);
    System.out.println ("heap delta: " + (heap2 - heap1) + ", {" + objects [0].getClass () + "} size = " + size + " bytes");
    for (int i = 0;
    i < count; ++ i) objects [i] = null;

    objects = null;
}
----------------------------------------

public static void main (String [] args) throws Exception {
    Object obj = createObject ();
    long m0 = usedMem ();
    long m1 = usedMem ();
    obj = null;
    for (int i = 0;
    i < 100; i ++) System.gc ();

    m0 = usedMem ();
    obj = createObject ();
    for (int i = 0;
    i < 100; i ++) System.gc ();

    m1 = usedMem ();
    System.out.println (m1 - m0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16060308_16060440_1_13
16060308_16060987_1_14
Title: What is better to use in Java? x <= 10 or x < 11? 
----------------------------------------

public static void main (String [] args) throws IOException {
    int count = 0;
    for (double i = 0;
    i <= 10; i = i + 0.1) count ++;

    System.out.println (count);
    count = 0;
    for (double i = 0;
    i < 11; i = i + 0.1) count ++;

    System.out.println (count);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException, IOException {
    boolean b;
    Date d = new Date ();
    for (long i = 0;
    i < 10000000001L; i ++) {
        b = i < 1000001L;
    }
    System.out.println ("< " + ((new Date ()).getTime () - d.getTime ()) + " ms");
    d = new Date ();
    for (long i = 0;
    i <= 10000000000L; i ++) {
        b = i <= 1000000L;
    }
    System.out.println ("<= " + ((new Date ()).getTime () - d.getTime ()) + " ms");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16068643_16070326_1_36
16068643_51280042_1_13
Title: Recursion and multiplication 
----------------------------------------

public int Multiply (int x, int y) {
    if (x < 0) throw new ArgumentException ("must be positive integer", "x");

    if (y < 0) throw new ArgumentException ("must be positive integer", "y");

    if (x == 0 || y == 0) return 0;

    int xDivBy10 = x / 10;
    int yDivBy10 = y / 10;
    bool xIsSingleDigit = xDivBy10 == 0;
    bool yIsSingleDigit = yDivBy10 == 0;
    if (xIsSingleDigit && yIsSingleDigit) {
        return MultiplySingleDigits (x, y);
    }
    if (xIsSingleDigit) {
        return (Multiply (x, yDivBy10) * 10) + Multiply (x, y % 10);
    }
    if (yIsSingleDigit) {
        return (Multiply (xDivBy10, y) * 10) + Multiply (x % 10, y);
    }
    return (Multiply (x, yDivBy10) * 10) + Multiply (x, y % 10);
}
----------------------------------------

static int Multiply (int x, int y) {
    if (y > 0 && x > 0) return (x + Multiply (x, y - 1));

    if (y < 0 && x > 0) return - Multiply (x, - y);

    if (x < 0 && y > 0) return - Multiply (- x, y);

    if (x < 0 && y < 0) return Multiply (- x, - y);

    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16071944_16072127_43_60
16071944_16072132_5_20
Title: Can not figure out Javas strings? 
----------------------------------------

public static void main (String agrs []) {
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Count non-matching characters in two strings.");
    System.out.println ("Enter first word");
    String word1 = scanner.next ();
    System.out.println ("Enter second word");
    String word2 = scanner.next ();
    int count = countNonMatchChars (word1, word2);
    if (count < 0) {
        System.out.println ("Words are a diffrent length");
        System.out.println ("   " + word1 + " Has " + word1.length () + " chars");
        System.out.println ("   " + word2 + " Has " + word2.length () + " chars");
    } else {
        System.out.println (count + " different chars");
    }
}
----------------------------------------

public static void main (String agrs []) {
    Scanner scanner = new Scanner (System.in);
    System.out.println ("Enter a word");
    String word1 = scanner.next ();
    System.out.println ("Enter another word");
    String word2 = scanner.next ();
    int count = 0;
    int length = word1.length ();
    for (int x = 0;
    x < length; x = x + 1) {
        if (word1.charAt (x) != word2.charAt (x)) {
            count = count + 1;
        }
    }
    System.out.println (count + " different chars");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16075763_16075842_1_13
16075763_16075871_1_14
Title: Outputting a group ring values using two for loops 
----------------------------------------

public static void printSquare (int min, int max) {
    int x = max - min + 1;
    for (int i = min;
    i <= max; i ++) {
        int counter = i;
        for (int j = 0;
        j < x; j ++) {
            System.out.print (counter);
            counter = counter >= max ? min : counter + 1;
        }
        System.out.println ();
    }
}
----------------------------------------

public void printSquare (int min, int max) {
    for (int i = min;
    i <= max; i ++) {
        for (int j = i;
        j <= max; j ++) {
            System.out.print (j);
        }
        for (int k = min;
        k < i; k ++) {
            System.out.print (k);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16075763_16075842_1_13
16075763_16075991_1_13
Title: Outputting a group ring values using two for loops 
----------------------------------------

public static void printSquare (int min, int max) {
    int x = max - min + 1;
    for (int i = min;
    i <= max; i ++) {
        int counter = i;
        for (int j = 0;
        j < x; j ++) {
            System.out.print (counter);
            counter = counter >= max ? min : counter + 1;
        }
        System.out.println ();
    }
}
----------------------------------------

public void printSquare (int min, int max) {
    for (int i = min;
    i <= max; i ++) {
        int j = i;
        for (j = i; j <= max; j ++) {
            System.out.print (j);
        }
        for (int k = j - i, l = min;
        k < max; k ++, l ++) {
            System.out.print (l);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16075763_16075871_1_14
16075763_16075991_1_13
Title: Outputting a group ring values using two for loops 
----------------------------------------

public void printSquare (int min, int max) {
    for (int i = min;
    i <= max; i ++) {
        for (int j = i;
        j <= max; j ++) {
            System.out.print (j);
        }
        for (int k = min;
        k < i; k ++) {
            System.out.print (k);
        }
        System.out.println ();
    }
}
----------------------------------------

public void printSquare (int min, int max) {
    for (int i = min;
    i <= max; i ++) {
        int j = i;
        for (j = i; j <= max; j ++) {
            System.out.print (j);
        }
        for (int k = j - i, l = min;
        k < max; k ++, l ++) {
            System.out.print (l);
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16088994_16089042_1_17
16088994_38646373_2_19
Title: Sorting an Array of int using BubbleSort 
----------------------------------------

public static void bubbleSort (int [] numArray) {
    int n = numArray.length;
    int temp = 0;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 1;
        j < (n - i); j ++) {
            if (numArray [j - 1] > numArray [j]) {
                temp = numArray [j - 1];
                numArray [j - 1] = numArray [j];
                numArray [j] = temp;
            }
        }
    }
}
----------------------------------------

public static int [] bubbleSort (int [] arr) {
    if (arr == null || arr.length <= 1) {
        return arr;
    }
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 1;
        j < arr.length - i; j ++) {
            if (arr [j - 1] > arr [j]) {
                arr [j] = arr [j] + arr [j - 1];
                arr [j - 1] = arr [j] - arr [j - 1];
                arr [j] = arr [j] - arr [j - 1];
            }
        }
    }
    return arr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16088994_16089042_1_17
16088994_50023147_1_18
Title: Sorting an Array of int using BubbleSort 
----------------------------------------

public static void bubbleSort (int [] numArray) {
    int n = numArray.length;
    int temp = 0;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 1;
        j < (n - i); j ++) {
            if (numArray [j - 1] > numArray [j]) {
                temp = numArray [j - 1];
                numArray [j - 1] = numArray [j];
                numArray [j] = temp;
            }
        }
    }
}
----------------------------------------

public static int [] bubbleSort (int [] a) {
    int n = a.length;
    int j = 0;
    boolean swap = true;
    while (swap) {
        swap = false;
        for (int j = 1;
        j < n; j ++) {
            if (a [j - 1] > a [j]) {
                j = a [j - 1];
                a [j - 1] = a [j];
                a [j] = j;
                swap = true;
            }
        }
        n = n - 1;
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16088994_38646373_2_19
16088994_50023147_1_18
Title: Sorting an Array of int using BubbleSort 
----------------------------------------

public static int [] bubbleSort (int [] arr) {
    if (arr == null || arr.length <= 1) {
        return arr;
    }
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 1;
        j < arr.length - i; j ++) {
            if (arr [j - 1] > arr [j]) {
                arr [j] = arr [j] + arr [j - 1];
                arr [j - 1] = arr [j] - arr [j - 1];
                arr [j] = arr [j] - arr [j - 1];
            }
        }
    }
    return arr;
}
----------------------------------------

public static int [] bubbleSort (int [] a) {
    int n = a.length;
    int j = 0;
    boolean swap = true;
    while (swap) {
        swap = false;
        for (int j = 1;
        j < n; j ++) {
            if (a [j - 1] > a [j]) {
                j = a [j - 1];
                a [j - 1] = a [j];
                a [j] = j;
                swap = true;
            }
        }
        n = n - 1;
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16093023_16269659_117_143
16093023_16269659_146_163
Title: Play SecureSocial Persistance with Java 
----------------------------------------

public Identity doSave (Identity user) {
    if (Logger.isDebugEnabled ()) {
        Logger.debug ("save...");
        Logger.debug (String.format ("user = %s", user));
    }
    LocalUser localUser = null;
    localUser = LocalUser.find.byId (user.id ().id ());
    if (localUser == null) {
        localUser = new LocalUser ();
        localUser.id = user.id ().id ();
        localUser.provider = user.id ().providerId ();
        localUser.firstName = user.firstName ();
        localUser.lastName = user.lastName ();
        localUser.email = user.email ().get ();
        localUser.password = user.passwordInfo ().get ().password ();
        localUser.save ();
    } else {
        localUser.id = user.id ().id ();
        localUser.provider = user.id ().providerId ();
        localUser.firstName = user.firstName ();
        localUser.lastName = user.lastName ();
        localUser.email = user.email ().get ();
        localUser.password = user.passwordInfo ().get ().password ();
        localUser.update ();
    }
    return user;
}
----------------------------------------

public void doSave (Token token) {
    if (Logger.isDebugEnabled ()) {
        Logger.debug ("save...");
        Logger.debug (String.format ("token = %s", token.uuid));
    }
    LocalToken localToken = new LocalToken ();
    localToken.uuid = token.uuid;
    localToken.email = token.email;
    try {
        SimpleDateFormat df = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss");
        localToken.createdAt = df.parse (token.creationTime.toString ("yyyy-MM-dd HH:mm:ss"));
        localToken.expireAt = df.parse (token.expirationTime.toString ("yyyy-MM-dd HH:mm:ss"));
    } catch (ParseException e) {
        Logger.error ("SqlUserService.doSave(): ", e);
    }
    localToken.isSignUp = token.isSignUp;
    localToken.save ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16095464_16095538_46_82
16095464_16096813_21_42
Title: How do I get the JLabel to show which button has been selected 
----------------------------------------

public void ComposePane () {
    aF.add (a);
    aF.add (b);
    aF.add (c);
    aF.add (d);
    aF.add (e);
    aF.add (f);
    aF.setLayout (new GridLayout (2, 3));
    gL.add (g);
    gL.add (h);
    gL.add (i);
    gL.add (j);
    gL.add (k);
    gL.add (l);
    gL.setLayout (new GridLayout (2, 3));
    mR.add (m);
    mR.add (n);
    mR.add (o);
    mR.add (p);
    mR.add (q);
    mR.add (r);
    mR.setLayout (new GridLayout (2, 3));
    sX.add (s);
    sX.add (t);
    sX.add (u);
    sX.add (v);
    sX.add (w);
    sX.add (x);
    sX.setLayout (new GridLayout (2, 3));
    yZ.add (y);
    yZ.add (z);
    yZ.add (readout);
    readout.add (notify);
    yZ.setLayout (new GridLayout (2, 3));
}
----------------------------------------

public void ComposePane () {
    init_Buttons (button);
    for (int i = 0;
    i < 6; i ++) aF.add (button [i]);

    aF.setLayout (new GridLayout (2, 3));
    for (int i = 6;
    i < 12; i ++) gL.add (button [i]);

    gL.setLayout (new GridLayout (2, 3));
    for (int i = 12;
    i < 18; i ++) mR.add (button [i]);

    mR.setLayout (new GridLayout (2, 3));
    for (int i = 18;
    i < 24; i ++) sX.add (button [i]);

    sX.setLayout (new GridLayout (2, 3));
    for (int i = 24;
    i < 26; i ++) yZ.add (button [i]);

    yZ.add (readout);
    readout.add (notify);
    yZ.setLayout (new GridLayout (2, 3));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
160970_30671481_7_29
160970_45395762_4_25
Title: How do I invoke a Java method when given the method name as a string? 
----------------------------------------

public static void main (String [] args) throws Exception {
    String dogClassName = "com.mypackage.bean.Dog";
    Class < ? > dogClass = Class.forName (dogClassName);
    Object dog = dogClass.newInstance ();
    String methodName = "";
    methodName = "setName";
    Method setNameMethod = dog.getClass ().getMethod (methodName, String.class);
    setNameMethod.invoke (dog, "Mishka");
    methodName = "getName";
    Method getNameMethod = dog.getClass ().getMethod (methodName);
    String name = (String) getNameMethod.invoke (dog);
    methodName = "printDog";
    Class < ? > [] paramTypes = {String.class, int.class};
    Method printDogMethod = dog.getClass ().getMethod (methodName, paramTypes);
    printDogMethod.invoke (dog, name, 3);
}
----------------------------------------

public static void main (String [] args) {
    try {
        Class cls = Student.class;
        Student s = (Student) cls.newInstance ();
        String x = "kichha";
        Method mm3 = cls.getDeclaredMethod ("m3", String.class);
        mm3.setAccessible (true);
        mm3.invoke (s, x);
        Method mm1 = cls.getDeclaredMethod ("m1", int.class, int.class);
        mm1.invoke (s, 10, 20);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16098134_16098412_5_19
16098134_45612563_3_18
Title: How to get ArrayList<Integer> and Scanner to play nice? 
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    ArrayList < Integer > list = new ArrayList < Integer > ();
    System.out.print ("Enter integers please ");
    System.out.println ("(EOF or non-integer to terminate): ");
    while (scan.hasNextInt ()) {
        list.add (scan.nextInt ());
    }
    Integer [] nums = list.toArray (new Integer [0]);
    for (int i = 0;
    i < nums.length; i ++) {
        System.out.println (nums [i]);
    }
}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > al2 = new ArrayList < Integer > ();
    System.out.println ("enter the item in list");
    while (sc.hasNextInt ()) {
        al2.add (sc.nextInt ());
    }
    Iterator it1 = al2.iterator ();
    while (it1.hasNext ()) {
        System.out.println (it1.next ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16101695_16101829_1_13
16101695_16102744_1_23
Title: Cannot read repeating characters 
----------------------------------------

public static void main (String str []) {
    String word = "aabbcdaaaabbc";
    int c = 1;
    for (int i = 0;
    i < word.length () - 1; i ++) {
        if (word.charAt (i) == word.charAt (i + 1)) {
            c ++;
        } else {
            System.out.println (word.charAt (i) + " = " + c);
            c = 1;
        }
    }
    System.out.println (word.charAt (word.length () - 1) + " = " + c);
}
----------------------------------------

public static void main (String [] args) {
    String word = "aabbcdaaaabbc";
    int c = 0;
    for (int i = 0;
    i < word.length () - 1; i ++) {
        if (word.charAt (i) == word.charAt (i + 1)) {
            int k = 0;
            while ((i + k + 1) < word.length ()) {
                if (word.charAt (i + k) == word.charAt (i + k + 1)) {
                    k ++;
                    continue;
                } else {
                    break;
                }
            }
            c ++;
            i += k - 1;
        }
    }
    System.out.println (c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16101695_16101891_1_15
16101695_16101896_1_20
Title: Cannot read repeating characters 
----------------------------------------

public static int countRepeatedCharacters (String word) {
    boolean withinRepeating = false;
    int c = 0;
    for (int i = 1;
    i < word.length (); i ++) {
        if (! withinRepeating && (withinRepeating = word.charAt (i) == word.charAt (i - 1))) c ++;
        else withinRepeating = word.charAt (i) == word.charAt (i - 1);

    }
    return c;
}
----------------------------------------

public int countRepeatedCharacters (String word) {
    int c = 0;
    Character last = null;
    bool counted = false;
    for (int i = 0;
    i < word.length (); i ++) {
        if (last != null && last.equals (word.charAt (i))) {
            if (! counted) {
                c ++;
                counted = true;
            }
        } else {
            last = word.charAt (i);
            counted = false
        }
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16101695_16101891_1_15
16101695_16102114_1_24
Title: Cannot read repeating characters 
----------------------------------------

public static int countRepeatedCharacters (String word) {
    boolean withinRepeating = false;
    int c = 0;
    for (int i = 1;
    i < word.length (); i ++) {
        if (! withinRepeating && (withinRepeating = word.charAt (i) == word.charAt (i - 1))) c ++;
        else withinRepeating = word.charAt (i) == word.charAt (i - 1);

    }
    return c;
}
----------------------------------------

public int countRepeatedCharacters () {
    int c = 0, x = 0;
    boolean charMatched = false;
    for (int i = 0;
    i < word.length (); i ++) {
        if (i == word.length () - 1) {
            if (word.charAt (i - 1) == word.charAt (i)) c ++;

            break;
        }
        if (word.charAt (i) == word.charAt (i + 1)) {
            charMatched = true;
            continue;
        }
        if (charMatched == true) c ++;

        charMatched = false;
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16101695_16101896_1_20
16101695_16102114_1_24
Title: Cannot read repeating characters 
----------------------------------------

public int countRepeatedCharacters (String word) {
    int c = 0;
    Character last = null;
    bool counted = false;
    for (int i = 0;
    i < word.length (); i ++) {
        if (last != null && last.equals (word.charAt (i))) {
            if (! counted) {
                c ++;
                counted = true;
            }
        } else {
            last = word.charAt (i);
            counted = false
        }
    }
    return c;
}
----------------------------------------

public int countRepeatedCharacters () {
    int c = 0, x = 0;
    boolean charMatched = false;
    for (int i = 0;
    i < word.length (); i ++) {
        if (i == word.length () - 1) {
            if (word.charAt (i - 1) == word.charAt (i)) c ++;

            break;
        }
        if (word.charAt (i) == word.charAt (i + 1)) {
            charMatched = true;
            continue;
        }
        if (charMatched == true) c ++;

        charMatched = false;
    }
    return c;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16102696_16103075_23_42
16102696_29350778_22_45
Title: Removing duplicate elements from Array in Core Java 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Array elements are:");
    for (i = 0; i < a.length; i ++) System.out.println (a [i]);

    InputStreamReader is = new InputStreamReader (System.in);
    BufferedReader br = new BufferedReader (is);
    System.out.print ("Enter the element to be deleted: ");
    try {
        String s = br.readLine ();
        f = Integer.parseInt (s);
        DeleteElementInt (f);
        System.out.println ("New array:");
        for (i = 0; i < l - j; i ++) System.out.println (b [i]);

        if (j == 0) System.out.println ("Entered element was not found in the given array");

    } catch (IOException e) {
        System.out.println (e);
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] a = {3, 5, 5, 5, 3, 6, 5, 3, 3};
    int numberToRemove;
    System.out.println ("the array values are:");
    for (int i : a) {
        System.out.print (a [i] + "\t");
    }
    Scanner sc = new Scanner (System.in);
    System.out.println ("\nenter the number for which all occurences need to be deleted:");
    numberToRemove = sc.nextInt ();
    int [] b = removeAll (a, numberToRemove);
    System.out.println ("After removing all occurences of " + numberToRemove);
    for (int i : b) {
        if (i != - 999) System.out.print (i + "\t");

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16107740_16108213_15_23
16107740_16109003_25_36
Title: Communication between 2 Classes 
----------------------------------------

public static void main (String [] args) throws Exception {
    Counter counter = new Counter ();
    CounterUser a = new CounterUser (counter);
    CounterUser b = new CounterUser (counter);
    System.out.printf ("%s %s %s\n", counter, a, b);
    counter.increment ();
    System.out.printf ("%s %s %s\n", counter, a, b);
    b.increment ();
    System.out.printf ("%s %s %s\n", counter, a, b);
}
----------------------------------------

public static void main (String [] args) {
    A a = new A ();
    System.out.println (a.getCounter ());
    a.incrementCounter ();
    System.out.println (a.getCounter ());
    a.incrementCounter ();
    a.incrementCounter ();
    a.incrementCounter ();
    System.out.println (a.getCounter ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16107771_16108347_1_20
16107771_29864315_1_98
Title: "java regex split on comma only if not in quotes or brackets" 
----------------------------------------

public static List < String > split (String orig) {
    List < String > splitted = new ArrayList < String > ();
    int nextingLevel = 0;
    StringBuilder result = new StringBuilder ();
    for (char c : orig.toCharArray ()) {
        if (c == ',' && nextingLevel == 0) {
            splitted.add (result.toString ());
            result.setLength (0);
        } else {
            if (c == '(') nextingLevel ++;

            if (c == ')') nextingLevel --;

            result.append (c);
        }
    }
    splitted.add (result.toString ());
    return splitted;
}
----------------------------------------

public static List < String > split (String string, String regex, String [] quotesRegex, String [] leftBracketsRegex, String [] rightBracketsRegex) {
    if (leftBracketsRegex.length != rightBracketsRegex.length) {
        throw new IllegalArgumentException ("Bracket count mismatch, left: " + leftBracketsRegex.length + ", right: " + rightBracketsRegex.length);
    }
    String [] delimiters = new String [1 + quotesRegex.length + leftBracketsRegex.length + rightBracketsRegex.length];
    delimiters [0] = regex;
    System.arraycopy (quotesRegex, 0, delimiters, 1, quotesRegex.length);
    System.arraycopy (leftBracketsRegex, 0, delimiters, 1 + quotesRegex.length, leftBracketsRegex.length);
    System.arraycopy (rightBracketsRegex, 0, delimiters, 1 + quotesRegex.length + leftBracketsRegex.length, rightBracketsRegex.length);
    StringBuilder delimitersRegexBuilder = new StringBuilder ("(?:");
    boolean first = true;
    for (String delimiter : delimiters) {
        if (delimiter.endsWith ("\\") && ! delimiter.endsWith ("\\\\")) {
            throw new IllegalArgumentException ("Delimiter contains trailing single \\: " + delimiter);
        }
        if (first) {
            first = false;
        } else {
            delimitersRegexBuilder.append ("|");
        }
        delimitersRegexBuilder.append ("(").append (delimiter).append (")");
    }
    delimitersRegexBuilder.append (")");
    String delimitersRegex = delimitersRegexBuilder.toString ();
    int pendingQuoteIndex = - 1;
    Deque < Integer > bracketStack = new LinkedList < > ();
    StringBuilder pendingSegmentBuilder = new StringBuilder ();
    List < String > segmentList = new ArrayList < > ();
    Matcher matcher = Pattern.compile (delimitersRegex).matcher (string);
    int matcherIndex = 0;
    while (matcher.find ()) {
        pendingSegmentBuilder.append (string.substring (matcherIndex, matcher.start ()));
        int delimiterIndex = - 1;
        for (int i = 1;
        i <= matcher.groupCount (); ++ i) {
            if (matcher.group (i) != null) {
                delimiterIndex = i - 1;
                break;
            }
        }
        if (delimiterIndex < 1) {
            if (pendingQuoteIndex == - 1 && bracketStack.isEmpty ()) {
                segmentList.add (pendingSegmentBuilder.toString ());
                pendingSegmentBuilder.setLength (0);
            } else {
                pendingSegmentBuilder.append (matcher.group ());
            }
        } else {
            delimiterIndex -= 1;
            pendingSegmentBuilder.append (matcher.group ());
            if (delimiterIndex < quotesRegex.length) {
                if (pendingQuoteIndex == - 1) {
                    pendingQuoteIndex = delimiterIndex;
                } else if (pendingQuoteIndex == delimiterIndex) {
                    pendingQuoteIndex = - 1;
                }

            } else if (pendingQuoteIndex == - 1) {
                delimiterIndex -= quotesRegex.length;
                if (delimiterIndex < leftBracketsRegex.length) {
                    bracketStack.push (delimiterIndex);
                } else {
                    delimiterIndex -= leftBracketsRegex.length;
                    int topBracket = bracketStack.peek ();
                    if (delimiterIndex == topBracket) {
                        bracketStack.pop ();
                    }
                }
            }

        }
        matcherIndex = matcher.end ();
    }
    pendingSegmentBuilder.append (string.substring (matcherIndex, string.length ()));
    segmentList.add (pendingSegmentBuilder.toString ());
    while (segmentList.size () > 0 && segmentList.get (segmentList.size () - 1).isEmpty ()) {
        segmentList.remove (segmentList.size () - 1);
    }
    return segmentList;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16113313_16176595_25_46
16113313_16176595_70_117
Title: SWT Button Dropdown Control 
----------------------------------------

public void widgetSelected (SelectionEvent e) {
    super.widgetSelected (e);
    Menu menu = new Menu (shell, SWT.POP_UP);
    MenuItem item1 = new MenuItem (menu, SWT.PUSH);
    item1.setText ("Hare");
    MenuItem item2 = new MenuItem (menu, SWT.PUSH);
    item2.setText ("Fox");
    MenuItem item3 = new MenuItem (menu, SWT.PUSH);
    item3.setText ("Pony");
    Point loc = btnCntrl.getLocation ();
    Rectangle rect = btnCntrl.getBounds ();
    Point mLoc = new Point (loc.x - 1, loc.y + rect.height);
    menu.setLocation (shell.getDisplay ().map (btnCntrl.getParent (), null, mLoc));
    menu.setVisible (true);
}
----------------------------------------

public void widgetSelected (SelectionEvent e) {
    super.widgetSelected (e);
    Shell menu = (Shell) btnCntrl2.getData ("subshell");
    if (menu != null && ! menu.isDisposed ()) {
        menu.dispose ();
    }
    menu = new Shell (shell, SWT.NONE);
    menu.setLayout (new FillLayout ());
    Table table = new Table (menu, SWT.FULL_SELECTION);
    table.addListener (SWT.MeasureItem, new Listener () {
        @Override
        public void handleEvent (Event event) {
            event.height = 20;
        }}

    );
    table.addListener (SWT.PaintItem, new Listener () {
        @Override
        public void handleEvent (Event event) {
            Rectangle bounds = event.getBounds ();
            event.gc.setBackground (event.display.getSystemColor (SWT.COLOR_BLUE));
            event.gc.drawLine (bounds.x, bounds.y + bounds.height - 1, bounds.x + bounds.width, bounds.y + bounds.height - 1);
        }}

    );
    TableItem tableItem = new TableItem (table, SWT.NONE);
    tableItem.setText (0, "Hare");
    TableItem tableItem2 = new TableItem (table, SWT.NONE);
    tableItem2.setText (0, "Pony");
    TableItem tableItem3 = new TableItem (table, SWT.NONE);
    tableItem3.setText (0, "Dog");
    Point loc = btnCntrl2.getLocation ();
    Rectangle rect = btnCntrl2.getBounds ();
    Point mLoc = new Point (loc.x, loc.y + rect.height);
    menu.setLocation (shell.getDisplay ().map (btnCntrl2.getParent (), null, mLoc));
    menu.pack ();
    menu.setVisible (true);
    btnCntrl2.setData ("subshell", menu);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16116540_16117124_4_14
16116540_16164095_3_13
Title: Cannot import views from xml sheet into MainActivity.java 
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    EditText txt_Username = (EditText) findViewById (R.id.txtView_UserName);
    EditText txt_Password = (EditText) findViewById (R.id.txtView_Password);
    Button btn_LogIn = (Button) findViewById (R.id.button_LogIn);
    CheckBox chkbox_RememberMyPassword = (CheckBox) findViewById (R.id.checkbox_RememberPassword);
    CheckBox chkbox_LogMeInAutomatically = (CheckBox) findViewById (R.id.checkbox_LogMeInAutomatically);
    ProgressBar progressbar_LogIn = (ProgressBar) findViewById (R.id.progressBar_LogIn);
}
----------------------------------------

protected void onCreate (Bundle savedInstanceState) {
    super.onCreate (savedInstanceState);
    setContentView (R.layout.activity_main);
    EditText txt_Username = (EditText) findViewById (R.id.txtView_UserName);
    EditText txt_Password = (EditText) findViewById (R.id.txtView_Password);
    Button btn_LogIn = (Button) findViewById (R.id.button_LogIn);
    CheckBox chkbox_RememberMyPassword = (CheckBox) findViewById (R.id.checkbox_RememberPassword);
    CheckBox chkbox_LogMeInAutomatically = (CheckBox) findViewById (R.id.checkbox_LogMeInAutomatically);
    ProgressBar progressbar_LogIn = (ProgressBar) findViewById (R.id.progressBar_LogIn);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16117365_16117448_7_57
16117365_50986953_2_57
Title: Sending mail attachment using Java 
----------------------------------------

public static void main (String [] args) {
    final String username = "your.mail.id@gmail.com";
    final String password = "your.password";
    Properties props = new Properties ();
    props.put ("mail.smtp.auth", true);
    props.put ("mail.smtp.starttls.enable", true);
    props.put ("mail.smtp.host", "smtp.gmail.com");
    props.put ("mail.smtp.port", "587");
    Session session = Session.getInstance (props, new javax.mail.Authenticator () {
        protected PasswordAuthentication getPasswordAuthentication () {
            return new PasswordAuthentication (username, password);
        }}

    );
    try {
        Message message = new MimeMessage (session);
        message.setFrom (new InternetAddress ("from.mail.id@gmail.com"));
        message.setRecipients (Message.RecipientType.TO, InternetAddress.parse ("to.mail.id@gmail.com"));
        message.setSubject ("Testing Subject");
        message.setText ("PFA");
        MimeBodyPart messageBodyPart = new MimeBodyPart ();
        Multipart multipart = new MimeMultipart ();
        messageBodyPart = new MimeBodyPart ();
        String file = "path of file to be attached";
        String fileName = "attachmentName";
        DataSource source = new FileDataSource (file);
        messageBodyPart.setDataHandler (new DataHandler (source));
        messageBodyPart.setFileName (fileName);
        multipart.addBodyPart (messageBodyPart);
        message.setContent (multipart);
        System.out.println ("Sending");
        Transport.send (message);
        System.out.println ("Done");
    } catch (MessagingException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    String to = "test@gmail.com";
    String from = "tester@gmail.com";
    final String username = "tester@gmail.com";
    final String password = "test";
    Properties props = new Properties ();
    props.put ("mail.smtp.host", "smtp.gmail.com");
    props.put ("mail.smtp.socketFactory.port", "465");
    props.put ("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
    props.put ("mail.smtp.auth", "true");
    props.put ("mail.smtp.port", "465");
    Session session = Session.getInstance (props, new javax.mail.Authenticator () {
        protected PasswordAuthentication getPasswordAuthentication () {
            return new PasswordAuthentication (username, password);
        }}

    );
    try {
        Message message = new MimeMessage (session);
        message.setFrom (new InternetAddress (from));
        message.setRecipients (Message.RecipientType.TO, InternetAddress.parse (to));
        message.setSubject ("Attachment");
        BodyPart messageBodyPart = new MimeBodyPart ();
        messageBodyPart.setText ("Please find the attachment below");
        Multipart multipart = new MimeMultipart ();
        multipart.addBodyPart (messageBodyPart);
        messageBodyPart = new MimeBodyPart ();
        String filename = "D:/test.PDF";
        DataSource source = new FileDataSource (filename);
        messageBodyPart.setDataHandler (new DataHandler (source));
        messageBodyPart.setFileName (filename);
        multipart.addBodyPart (messageBodyPart);
        message.setContent (multipart);
        Transport.send (message);
        System.out.println ("Email Sent Successfully !!");
    } catch (MessagingException e) {
        throw new RuntimeException (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16126401_16126429_1_17
16126401_16126595_1_21
Title: How to get the counts display only once for each same character? 
----------------------------------------

public static int [] countlist (char [] list) {
    int [] counts = new int [list.length];
    for (int k = 0;
    k < list.length; k ++) {
        for (int m = 0;
        m < list.length; m ++) {
            if (list [m] == list [k]) {
                counts [m] ++;
            }
        }
        System.out.println ("Letter " + list [k] + " = " + counts [k]);
    }
}
----------------------------------------

public static void countlist (char [] list) {
    Map < Character, Integer > map = new HashMap < Character, Integer > ();
    for (int k = 0;
    k < list.length; k ++) {
        if (map.containsKey (list [k])) {
            map.put (list [k], map.get (list [k]) + 1);
        } else {
            map.put (list [k], 1);
        }
    }
    for (Map.Entry < Character, Integer > entry : map.entrySet ()) {
        System.out.println ("letter = " + entry.getKey () + ", count = " + entry.getValue ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16137959_16138008_109_138
16137959_16138008_34_79
Title: Keep the SocketServer alive until the Frame is close 
----------------------------------------

public void run () {
    try {
        socket = new ServerSocket (1234);
        while (flagToSetWhenYouWantToStop) {
            Socket accept = socket.accept ();
            BufferedReader br = null;
            try {
                br = new BufferedReader (new InputStreamReader (accept.getInputStream ()));
                String cmd = br.readLine ();
                System.out.println ("In-Cmd = " + cmd);
                if (cmd.equalsIgnoreCase ("stop")) {
                    stopThatSocket ();
                }
            } finally {
                try {
                    br.close ();
                } catch (Exception e) {
                }
            }
        }
    } catch (IOException exp) {
        exp.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new GridBagLayout ());
    frame.add (new JLabel ("Close me if you dare"));
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
    frame.addWindowListener (new WindowAdapter () {
        @Override
        public void windowClosing (WindowEvent e) {
            Socket socket = null;
            try {
                socket = SocketFactory.getDefault ().createSocket ("localhost", 1234);
                BufferedWriter bw = null;
                try {
                    bw = new BufferedWriter (new OutputStreamWriter (socket.getOutputStream ()));
                    System.out.println ("Out-Cmd = STOP");
                    bw.write ("stop");
                    bw.newLine ();
                } finally {
                    try {
                        bw.close ();
                    } catch (Exception exp) {
                    }
                }
            } catch (IOException ex) {
                ex.printStackTrace ();
            } finally {
                try {
                    socket.close ();
                } catch (Exception exp) {
                }
            }
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16138300_16138382_29_42
16138300_16138382_88_98
Title: How do I wait for a timer to stop before executing code? 
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (new TestPane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------

public void run () {
    System.out.println ("Starting timer...");
    timer.start ();
    synchronized (WAIT_FOR) {
        try {
            WAIT_FOR.wait ();
        } catch (InterruptedException ex) {
        }
    }
    System.out.println ("Timer finished...");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16138300_16138382_57_68
16138300_16138382_84_100
Title: How do I wait for a timer to stop before executing code? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    tickCount ++;
    if (tickCount > 10) {
        tickCount = 0;
        timer.stop ();
        synchronized (WAIT_FOR) {
            WAIT_FOR.notifyAll ();
        }
        start.setEnabled (true);
    }
    ticks.setText (String.valueOf (tickCount));
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    start.setEnabled (false);
    new Thread (new Runnable () {
        @Override
        public void run () {
            System.out.println ("Starting timer...");
            timer.start ();
            synchronized (WAIT_FOR) {
                try {
                    WAIT_FOR.wait ();
                } catch (InterruptedException ex) {
                }
            }
            System.out.println ("Timer finished...");
        }}

    ).start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16138380_16138562_10_75
16138380_25181035_6_29
Title: "How to read a file reverse the order and write reverse order" 
----------------------------------------

public static void main (String [] args) {
    FileInputStream fis = null;
    RandomAccessFile raf = null;
    String characterEncoding = "utf-8";
    if (args.length == 3) {
        characterEncoding = args [2];
    }
    try {
        File in = new File (args [0]);
        fis = new FileInputStream (in);
        Reader r = new InputStreamReader (fis, characterEncoding);
        File out = new File (args [1]);
        raf = new RandomAccessFile (out, "rw");
        raf.setLength (in.length ());
        char [] buff = new char [1];
        long position = in.length ();
        while ((r.read (buff)) > - 1) {
            Character c = buff [0];
            String s = c + "";
            byte [] bBuff = s.getBytes (characterEncoding);
            position = position - bBuff.length;
            raf.seek (position);
            raf.write (bBuff);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    } finally {
        try {
            fis.close ();
        } catch (Exception e2) {
        }
        try {
            raf.close ();
        } catch (Exception e2) {
        }
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    try {
        File sourceFile = new File (args [0]);
        Scanner content = new Scanner (sourceFile);
        PrintWriter pwriter = new PrintWriter (args [1]);
        while (content.hasNextLine ()) {
            String s = content.nextLine ();
            StringBuffer buffer = new StringBuffer (s);
            buffer = buffer.reverse ();
            String rs = buffer.toString ();
            pwriter.println (rs);
        }
        content.close ();
        pwriter.close ();
        System.out.println ("File is copied successful!");
    } catch (Exception e) {
        System.out.println ("Something went wrong");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16138898_16139027_36_54
16138898_16139027_7_24
Title: Building objects in one class and accessing them in another 
----------------------------------------

public static void main (String [] args) {
    AdventureBuilder ab = new AdventureBuilder ();
    StoryRoom entryway;
    ab.main ();
    entryway = ab.getStoryRoom ();
    for (int i = 0;
    i < entryway.description.length; i ++) {
        System.out.println (entryway.GetDescription (i));
    }
}
----------------------------------------

public void main () {
    String [] description = null;
    description = new String [3];
    int [] exits;
    exits = new int [3];
    description [0] = "This is a strange room with 2 doors, one on the left and one on the right.";
    description [1] = "Take the left door? (enter 1)";
    description [2] = "Take the right door? (enter 2)";
    exits [0] = 1;
    exits [1] = 2;
    exits [2] = 3;
    entryway = new StoryRoom (description, exits);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16139030_16139916_30_43
16139030_16139916_74_93
Title: Java RGB Value code Robot Class 
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (new TestPane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------

public void run () {
    try {
        Robot robot = new Robot ();
        Color previous = null;
        while (true) {
            Point coord = MouseInfo.getPointerInfo ().getLocation ();
            Color color = robot.getPixelColor ((int) coord.getX (), (int) coord.getY ());
            if (previous == null || ! previous.equals (color)) {
                SwingUtilities.invokeLater (new UpdateBackgroud (color));
            }
            try {
                Thread.sleep (250);
            } catch (InterruptedException ex) {
            }
        }
    } catch (AWTException | HeadlessException exp) {
        exp.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16140151_16140448_100_113
16140151_16140448_33_46
Title: Adding copy action in windows to java app 
----------------------------------------

public void run () {
    String previous = getClipboardContents ();
    while (true) {
        try {
            Thread.sleep (1000);
        } catch (InterruptedException ex) {
        }
        String text = getClipboardContents ();
        if (text != null && ! text.equals (previous)) {
            setText (text);
            previous = text;
        }
    }
}
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.setLayout (new BorderLayout ());
    frame.add (new TestPane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16142290_16142485_34_44
16142290_16142485_92_102
Title: Add DocumentListener to validate multiple JTextFields 
----------------------------------------

public AbstractFormatter getFormatter (JFormattedTextField tf) {
    NumberFormat format = DecimalFormat.getInstance ();
    format.setMinimumFractionDigits (2);
    format.setMaximumFractionDigits (2);
    format.setRoundingMode (RoundingMode.HALF_UP);
    InternationalFormatter formatter = new InternationalFormatter (format);
    formatter.setAllowsInvalid (false);
    formatter.setMinimum (0.0);
    formatter.setMaximum (1000.00);
    return formatter;
}
----------------------------------------

public AbstractFormatter getFormatter (JFormattedTextField tf) {
    NumberFormat format = DecimalFormat.getInstance ();
    format.setMinimumFractionDigits (2);
    format.setMaximumFractionDigits (2);
    format.setRoundingMode (RoundingMode.HALF_UP);
    InternationalFormatter formatter = new InternationalFormatter (format);
    formatter.setAllowsInvalid (false);
    return formatter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16149778_16156133_8_21
16149778_43114615_16_27
Title: How do I use FragmentPagerAdapter to have tabs with different content? 
----------------------------------------

public Fragment getItem (int position) {
    Fragment fragment = null;
    switch (position) {
        case 0 :
            fragment = Fragment.instantiate (context, ConnectionFragment.class.getName ());
            break;
        case 1 :
            fragment = Fragment.instantiate (context, DataFragment.class.getName ());
            break;
        case 2 :
            fragment = Fragment.instantiate (context, GraphFragment.class.getName ());
            break;
    }
    return fragment;
}
----------------------------------------

public Fragment getItem (int position) {
    switch (position) {
        case 0 :
            return FirstFragment.newInstance (0, "Page # 1");
        case 1 :
            return FirstFragment.newInstance (1, "Page # 2");
        case 2 :
            return SecondFragment.newInstance (2, "Page # 3");
        default :
            return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16150844_16150871_6_26
16150844_16150897_5_23
Title: Java misplaced constructs 
----------------------------------------

public static void main (string args []) {
    double a, b, c, d, e, f;
    Scanner input = new Scanner ();
    out.println (" Please enter the first number: ");
    a = imput.nextDouble;
    out.println ("Please enter the second number: ");
    b = imput.nextDouble;
    out.println ("Please enter the third number : ");
    c = imput.nextDouble;
    out.println ("Please enter in fourth number : ");
    d = imput.nextDouble;
    out.println (" Please enter in fifth number : ");
    e = imput.nextDouble;
    double sum = a + b + c + d + e;
}
----------------------------------------

public static void main (String args []) {
    double a, b, c, d, e, f;
    Scanner input = new Scanner (System.in);
    out.println (" Please enter the first number: ");
    a = input.nextDouble ();
    out.println ("Please enter the second number: ");
    b = input.nextDouble ();
    out.println ("Please enter the third number : ");
    c = input.nextDouble ();
    out.println ("Please enter in fourth number : ");
    d = input.nextDouble ();
    out.println (" Please enter in fifth number : ");
    e = input.nextDouble ();
    double sum = a + b + c + d + e;
    out.println ("Sum is : " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16165942_16166014_1_12
16165942_16166179_1_12
Title: "Write a method that merges two array lists alternating elements from both array lists" 
----------------------------------------

public static < T > ArrayList < T > merge (Collection < T > a, Collection < T > b) {
    Iterator < T > itA = a.iterator ();
    Iterator < T > itB = b.iterator ();
    ArrayList < T > result = new ArrayList < T > ();
    while (itA.hasNext () || itB.hasNext ()) {
        if (itA.hasNext ()) result.add (itA.next ());

        if (itB.hasNext ()) result.add (itB.next ());

    }
    return result;
}
----------------------------------------

public static ArrayList merge (ArrayList a, ArrayList b) {
    int c1 = 0, c2 = 0;
    ArrayList < Integer > res = new ArrayList < Integer > ();
    while (c1 < a.size () || c2 < b.size ()) {
        if (c1 < a.size ()) res.add ((Integer) a.get (c1 ++));

        if (c2 < b.size ()) res.add ((Integer) b.get (c2 ++));

    }
    return res;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16165942_16166014_1_12
16165942_16166200_1_13
Title: "Write a method that merges two array lists alternating elements from both array lists" 
----------------------------------------

public static < T > ArrayList < T > merge (Collection < T > a, Collection < T > b) {
    Iterator < T > itA = a.iterator ();
    Iterator < T > itB = b.iterator ();
    ArrayList < T > result = new ArrayList < T > ();
    while (itA.hasNext () || itB.hasNext ()) {
        if (itA.hasNext ()) result.add (itA.next ());

        if (itB.hasNext ()) result.add (itB.next ());

    }
    return result;
}
----------------------------------------

public static < E > List < E > merge (List < E > een, List < E > twee) {
    List < E > merged = new ArrayList < E > (een.size () + twee.size ());
    List < E > shorter = een.size () <= twee.size () ? een : twee;
    List < E > longer = een.size () > twee.size () ? een : twee;
    for (int i = 0;
    i < shorter.size (); i ++) {
        merged.add (een.get (i));
        merged.add (twee.get (i));
    }
    for (int i = shorter.size ();
    i < longer.size (); i ++) {
        merged.add (longer.get (i));
    }
    return merged;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16165942_16166179_1_12
16165942_16166200_1_13
Title: "Write a method that merges two array lists alternating elements from both array lists" 
----------------------------------------

public static ArrayList merge (ArrayList a, ArrayList b) {
    int c1 = 0, c2 = 0;
    ArrayList < Integer > res = new ArrayList < Integer > ();
    while (c1 < a.size () || c2 < b.size ()) {
        if (c1 < a.size ()) res.add ((Integer) a.get (c1 ++));

        if (c2 < b.size ()) res.add ((Integer) b.get (c2 ++));

    }
    return res;
}
----------------------------------------

public static < E > List < E > merge (List < E > een, List < E > twee) {
    List < E > merged = new ArrayList < E > (een.size () + twee.size ());
    List < E > shorter = een.size () <= twee.size () ? een : twee;
    List < E > longer = een.size () > twee.size () ? een : twee;
    for (int i = 0;
    i < shorter.size (); i ++) {
        merged.add (een.get (i));
        merged.add (twee.get (i));
    }
    for (int i = shorter.size ();
    i < longer.size (); i ++) {
        merged.add (longer.get (i));
    }
    return merged;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16165942_16166180_1_14
16165942_37639946_1_45
Title: "Write a method that merges two array lists alternating elements from both array lists" 
----------------------------------------

public static void main (String [] args) {
    int [] first = {1, 4, 9, 16};
    int [] second = {9, 7, 4, 9, 11};
    int [] merge = new int [first.length + second.length];
    int j = 0, k = 0, l = 0;
    int max = Math.max (first.length, second.length);
    for (int i = 0;
    i < max; i ++) {
        if (j < first.length) merge [l ++] = first [j ++];

        if (k < second.length) merge [l ++] = second [k ++];

    }
    System.out.println (Arrays.toString (merge));
}
----------------------------------------

public static void main (String args []) {
    char [] arr1 = {'1', '2', '3'};
    char [] arr2 = {'a', 'b', 'c', 'd', 'e'};
    int l1 = arr1.length;
    int l2 = arr2.length;
    int l3 = l1 + l2;
    char [] arr3 = new char [l1 + l2];
    int i = 0;
    int j = 0;
    int k = 0;
    int m = 0;
    int r = 0;
    if (l1 < l2) r = l1;
    else r = l2;

    while (m < r) {
        arr3 [k ++] = arr1 [i ++];
        arr3 [k ++] = arr2 [j ++];
        m ++;
    }
    while (k < l3) {
        if (l1 < l2) arr3 [k ++] = arr2 [j ++];
        else arr3 [k ++] = arr1 [i ++];

    }
    for (int n = 0;
    n < l3; n ++) {
        System.out.print (arr3 [n] + " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16167386_16167599_1_27
16167386_16168059_18_30
Title: IndexOutOfBoundsException not working 
----------------------------------------

public int getDisplay () {
    int gadgetDisplay = 0;
    ArrayList arr = new ArrayList ();
    arr.add ("a");
    try {
        String str = arr.get (3);
        if (gadgetDisplay < 0) {
            JOptionPane.showMessageDialog (frame, "Please enter a positive Display");
        }
    } catch (NumberFormatException exception) {
        JOptionPane.showMessageDialog (frame, "Please enter a positive Display");
    } catch (IndexOutOfBoundsException exception) {
        JOptionPane.showMessageDialog (frame, "Gadget is not listed");
    }
    return gadgetDisplay;
}
----------------------------------------

public int getDisplay () throws NumberFormatException {
    int gadgetDisplay = Integer.parseInt (displayText.getText ());
    if (gadgetDisplay < 0) {
        throw new IllegalArgumentException ("Please enter a positive Display");
    } else if (gadgetDisplay >= yourList.size ()) {
        throw new IndexOutOfBoundsException ("Gadget is not listed");
    }

    return gadgetDisplay;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16167532_16167680_2_15
16167532_16167737_2_19
Title: Print Message Once Every Million Iterations 
----------------------------------------

public static void main (String [] args) {
    long startTime = System.currentTimeMillis ();
    long endTime = startTime + 10000;
    int i = 0;
    while (System.currentTimeMillis () < endTime) {
        i ++;
        if (i % 1000000 == 0) {
            System.out.println ("Iteration: " + i);
        }
    }
    System.out.println ("Time up!");
}
----------------------------------------

public static void main (String [] args) {
    long startTime = System.currentTimeMillis ();
    long endTime = startTime + 10000;
    int count = 1;
    for (int i = 0;
    i < count; i ++) {
        if (System.currentTimeMillis () >= endTime) {
            break;
        }
        if (i % 1000000 == 0) {
            System.out.println ("Iteration: " + count ++);
        }
    }
    System.out.println ("Time up!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16178146_16178652_76_84
16178146_16178652_87_95
Title: Eclipse Juno Java EE IDE with Tomcat7 - ClassNotFoundException 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (Statement st) {
    try {
        if (st != null) {
            st.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16178146_16178652_76_84
16178146_16178652_97_105
Title: Eclipse Juno Java EE IDE with Tomcat7 - ClassNotFoundException 
----------------------------------------

public static void close (Connection connection) {
    try {
        if (connection != null) {
            connection.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16178146_16178652_87_95
16178146_16178652_97_105
Title: Eclipse Juno Java EE IDE with Tomcat7 - ClassNotFoundException 
----------------------------------------

public static void close (Statement st) {
    try {
        if (st != null) {
            st.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void close (ResultSet rs) {
    try {
        if (rs != null) {
            rs.close ();
        }
    } catch (SQLException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16179664_16179851_1_18
16179664_16180032_1_17
Title: Factorial Program printing out the recursion 
----------------------------------------

public static int factorial (int num) {
    if (num == 0) {
        System.out.println ("In f(0) and computing f(0). Returning 1");
        return 1;
    }
    System.out.printf ("In f(%d) and calling f(%d) . . .%n", num, num - 1);
    int factorial = factorial (num - 1);
    int result = num * factorial;
    System.out.printf ("f(%1$d) is %1$d * %2$d which equals %3$d. Returning %3$d%n", num, factorial, result);
    return result;
}
----------------------------------------

public static int factorial (int num) {
    int ret = 0;
    if (num == 0) {
        System.out.println ("In f(" + num + ") and computing f(" + num + "). Returning " + 1);
        ret = 1;
    } else {
        System.out.println ("In f(" + num + ") and calling f(" + (num - 1) + ") . . .");
        int fact = factorial (num - 1);
        System.out.println ("f(" + num + ") is " + num + " * " + fact + " which equals " + num * fact + ". Returning " + num * fact);
        ret = num * fact;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16182986_16183039_3_18
16182986_16183123_1_14
Title: Why it keeps looping even i try to stop it? 
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Do you love java? > ");
    String output = sc.nextLine ();
    while (true) {
        if (output.equalsIgnoreCase ("yes") || output.equalsIgnoreCase ("no")) {
            System.out.println ("Thank you!");
            break;
        } else {
            System.out.println ("Try again");
            output = sc.nextLine ();
        }
    }
    sc.close ();
}
----------------------------------------

public static void main (String [] args) {
    Scanner sc = new Scanner (System.in);
    System.out.print ("Do you love java? > ");
    String output = sc.nextLine ();
    while (! (output.equalsIgnoreCase ("yes") || output.equalsIgnoreCase ("no"))) {
        System.out.println ("Try again!");
        System.out.print ("Do you love java? > ");
        output = sc.nextLine ();
    }
    System.out.println ("Thank you!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16190727_16461577_1_38
16190727_16462895_1_27
Title: Android - Contact from number with Country Code 
----------------------------------------

public String getContactDisplayNameByNumber (String number) {
    if (number != null && number.length () != 0) {
        String name = lookupNumber (number);
        if (! name.contains (number)) return name;
        else {
            TelephonyManager manager = (TelephonyManager) getSystemService (Context.TELEPHONY_SERVICE);
            String usersCountryISOCode = manager.getNetworkCountryIso ();
            PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance ();
            try {
                PhoneNumber phonenUmber = phoneUtil.parse (name, usersCountryISOCode);
                if (phoneUtil.isValidNumber (phonenUmber)) {
                    temp = phoneUtil.getNationalSignificantNumber (phonenUmber);
                    name = lookupNumber (temp);
                    return name;
                }
            } catch (Exception e) {
                e.printStackTrace ();
            }
            return number;
        }
    } else {
        return "Invalid Number";
    }
}
----------------------------------------

public static String getContactDisplayNameByNumber (String number) {
    Uri uri = Uri.withAppendedPath (ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode (number));
    String name = "?";
    ContentResolver contentResolver = context.getContentResolver ();
    Cursor contactLookup = contentResolver.query (uri, new String [] {BaseColumns._ID, ContactsContract.PhoneLookup.DISPLAY_NAME}, null, null, null);
    try {
        if (contactLookup != null && contactLookup.getCount () > 0) {
            contactLookup.moveToNext ();
            name = contactLookup.getString (contactLookup.getColumnIndex (ContactsContract.Data.DISPLAY_NAME));
        }
    } finally {
        if (contactLookup != null) {
            contactLookup.close ();
        }
    }
    return name;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16194493_16195203_27_52
16194493_16221841_1_22
Title: Java method which uses a file system hierarchy to create a tree 
----------------------------------------

public static void createNode (final String path) {
    String [] parts = path.split ("/");
    Tree.Node < String > parent = null;
    for (String part : parts) {
        if (parent == null) {
            if (tree.root == null) {
                tree.root = new Tree.Node < String > (part, null);
            }
            parent = tree.root;
        } else {
            Tree.Node < String > found = null;
            for (Tree.Node < String > child : parent.children) {
                if (child.data.equals (part)) {
                    found = child;
                    break;
                }
            }
            if (found == null) {
                parent.children.add (found = new Tree.Node < String > (part, parent));
            }
            parent = found;
        }
    }
}
----------------------------------------

public void createNode (NodePath nodePath, NodeData nodeData, NodeRights nodeRights, NodeCreationHandler nodeCreationHandler) throws KeeperException, InterruptedException, ZookeeperCreationException {
    if (zk == null) {
        throw new ZookeeperCreationException ("The zookeeper client has not been instanced.");
    }
    String targetPath = nodePath.getFullNodePath ();
    logger.warn ("full path: " + targetPath);
    targetPath = targetPath.substring (1, targetPath.length ());
    logger.warn ("full path mod: " + targetPath);
    byte [] serializedData = nodeData.serialize (new Object ());
    String [] array = targetPath.split (ICoordinationConstants.BASE_ROOT_SPTR);
    String acum = "";
    for (int i = 0;
    i < array.length - 1; i ++) {
        acum += (ICoordinationConstants.BASE_ROOT_SPTR + array [i]);
        logger.warn ("acum: " + acum);
        if (zk.exists (acum, null) == null) {
            logger.warn ("It does not exists, proceed to create it...");
            zk.create (acum, serializedData, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        }
    }
    zk.create (acum + ICoordinationConstants.BASE_ROOT_SPTR + array [array.length - 1], serializedData, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16197135_34365362_28_38
16197135_34365362_71_81
Title: How can the wait() and notify() methods be called on Objects that are not threads? 
----------------------------------------

public void run () {
    for (int i = 0;
    i < 7; i ++) {
        System.out.println ("Produced: " + i);
        try {
            produce (i);
        } catch (InterruptedException ex) {
            Logger.getLogger (Producer.class.getName ()).log (Level.SEVERE, null, ex);
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            System.out.println ("Consumed: " + consume ());
            Thread.sleep (50);
        } catch (InterruptedException ex) {
            Logger.getLogger (Consumer.class.getName ()).log (Level.SEVERE, null, ex);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16198401_16204908_137_144
16198401_26945307_23_69
Title: Calculator program in java 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            new CalculatorDemo ().setVisible (true);
        }}

    );
}
----------------------------------------

public static void main (String args []) {
    int num1, num2;
    int a, b, c, d;
    num1 = Integer.parseInt (args [0]);
    num2 = Integer.parseInt (args [2]);
    char op = args [1].charAt (0);
    if (args.length != 3) {
        System.out.println ("incorrect no. of argument");
        System.exit (0);
    } else {
        try {
            switch (op) {
                case '+' :
                    a = num1 + num2;
                    System.out.println ("additiom:" + a);
                    break;
                case '-' :
                    b = num1 - num2;
                    System.out.println ("Sub:" + b);
                    break;
                case '*' :
                    c = num1 * num2;
                    System.out.println ("mul:" + c);
                    break;
                case '/' :
                    d = div (num1, num2);
                    System.out.println ("div:" + d);
                    break;
                default :
                    {
                        System.out.println ("wrong ch");
                    }}
        } catch (Exception E) {
            System.out.println (E);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16202744_16203383_11_22
16202744_16221753_41_104
Title: How to kill a thread on java? 
----------------------------------------

public void run () {
    try {
        while (running) {
            System.out.print (".");
            sleep (1000);
        }
    } catch (InterruptedException e) {
        System.out.println (e.getMessage ());
    }
    System.out.println ("Stopped");
}
----------------------------------------

public void run () {
    DatagramPacket p = null;
    try {
        this.socket = new DatagramSocket (8737);
        this.socket.setBroadcast (true);
    } catch (SocketException e) {
        e.printStackTrace ();
    }
    while (stopThread) {
        byte [] x = new byte [1000];
        p = new DatagramPacket (x, x.length);
        try {
            this.socket.receive (p);
        } catch (IOException e) {
            e.printStackTrace ();
        }
        String d = new String (p.getData ());
        System.out.println ("Mensagem enviada por mim: " + d);
    }
    this.socket.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16203662_16203727_21_35
16203662_16203828_5_19
Title: Beginner Java Q 
----------------------------------------

public static void main (String [] args) {
    Lamp lamp1 = new Lamp ();
    Lamp lamp2 = new Lamp ();
    lamp1.changeOn (true);
    lamp1.changeBrightness (4);
    lamp1.printStates ();
    lamp2.changeOn (true);
    lamp2.changeBrightness (6);
    lamp2.changeBrightness (4);
    lamp2.changeOn (false);
    lamp2.changeBrightness (0);
    lamp2.printStates ();
}
----------------------------------------

public static void main (String [] args) {
    Lamp lamp1 = new Lamp ();
    Lamp lamp2 = new Lamp ();
    lamp1.changeOn (1);
    lamp1.changeBrightness (4);
    lamp1.printStates ();
    lamp2.changeOn (1);
    lamp2.changeBrightness (6);
    lamp2.changeBrightness (4);
    lamp2.changeOn (0);
    lamp2.changeBrightness (0);
    lamp2.printStates ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16210735_16210806_3_20
16210735_16211587_10_34
Title: Calculate number of words in an ArrayList while some words are on the same line 
----------------------------------------

public static void main (String [] args) {
    List < String > arraylist = new ArrayList < String > ();
    arraylist.add ("hello there");
    arraylist.add ("blah");
    arraylist.add ("   cats    dogs");
    arraylist.add (" ");
    arraylist.add (" ");
    arraylist.add (" ");
    int words = 0;
    for (String s : arraylist) {
        s = s.trim ().replaceAll (" +", " ");
        if (! s.isEmpty ()) {
            words += s.split (" ").length;
        }
    }
    System.out.println (words);
}
----------------------------------------

public static void main (String args []) {
    try {
        File f = new File ("C:\\Users\\MissingNumber\\Documents\\NetBeansProjects\\Puzzlecode\\src\\com\\test\\test.txt");
        BufferedReader br = new BufferedReader (new FileReader (f));
        String strLine = " ";
        String filedata = "";
        while ((strLine = br.readLine ()) != null) {
            filedata += strLine + " ";
        }
        StringTokenizer stk = new StringTokenizer (filedata);
        List < String > token = new ArrayList < String > ();
        while (stk.hasMoreTokens ()) {
            token.add (stk.nextToken ());
        }
        System.out.println (token.size ());
        br.close ();
    } catch (Exception e) {
        System.err.println ("Error: " + e.getMessage ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1621252_1621587_1_20
1621252_1624937_1_27
Title: How to iterate over plain text segments with the Jericho HTML parser 
----------------------------------------

public static Iterator < Segment > getChildSegments (Element elem) {
    final Iterator < Segment > it = elem.getContent ().getNodeIterator ();
    final List < Segment > results = new LinkedList < Segment > ();
    final List < Element > children = elem.getChildElements ();
    while (it.hasNext ()) {
        Segment cur = it.next ();
        if (cur instanceof CharacterReference) results.add (cur);
        else if (cur instanceof Tag) {
            if (cur instanceof StartTag) results.add (((StartTag) cur).getElement ());

        } else {
            for (Element child : children) if (child.contains (cur)) continue;

            results.add (cur);
        }

    }
    return results.iterator ();
}
----------------------------------------

public static List < Segment > getChildSegments (Element elem) {
    final Iterator < Segment > it = elem.getContent ().getNodeIterator ();
    final List < Segment > results = new LinkedList < Segment > ();
    final List < Element > children = elem.getChildElements ();
    while (it.hasNext ()) {
        Segment cur = it.next ();
        if (! (cur instanceof Tag) && ! (cur instanceof CharacterReference) && ! cur.isWhiteSpace ()) {
            boolean enclosed = false;
            for (Element child : children) {
                if (child.encloses (cur)) {
                    enclosed = true;
                }
            }
            if (! enclosed) results.add (cur);

        } else {
            for (Element child : children) {
                if (child.getStartTag ().equals (cur)) {
                    results.add (cur);
                    break;
                }
            }
        }
    }
    return results;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16223504_22489064_23_34
16223504_22489064_7_18
Title: How to create Deadlock using these two threads and objects of classes A and B? 
----------------------------------------

public void run () {
    synchronized (b) {
        try {
            sleep (10000);
        } catch (InterruptedException exc) {
        }
        synchronized (a) {
        }
    }
}
----------------------------------------

public void run () {
    synchronized (a) {
        try {
            sleep (10000);
        } catch (InterruptedException exc) {
        }
        synchronized (b) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16228109_32289974_12_21
16228109_32289974_1_10
Title: How can you stream M-JPEG from a Java HttpServer? 
----------------------------------------

public static int searchFor (byte [] array, byte [] subArray, int off) {
    if (subArray.length > array.length) return - 1;

    int p = (new String (array)).indexOf (new String (subArray), off);
    for (int i = 1;
    i < subArray.length; i ++) {
        if (array [p + i] != subArray [i]) return - 1;

    }
    return p;
}
----------------------------------------

public static int searchFor (byte [] array, byte [] subArray) {
    if (subArray.length > array.length) return - 1;

    int p = (new String (array)).indexOf (new String (subArray));
    for (int i = 1;
    i < subArray.length; i ++) {
        if (array [p + i] != subArray [i]) return - 1;

    }
    return p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16228992_16229133_5_29
16228992_19163566_1_25
Title: Commons Lang StringUtils.replace performance vs String.replace 
----------------------------------------

public static String replace (String text, String searchString, String replacement, int max) {
    if (isEmpty (text) || isEmpty (searchString) || replacement == null || max == 0) {
        return text;
    }
    int start = 0;
    int end = text.indexOf (searchString, start);
    if (end == - 1) {
        return text;
    }
    int replLength = searchString.length ();
    int increase = replacement.length () - replLength;
    increase = (increase < 0 ? 0 : increase);
    increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));
    StringBuffer buf = new StringBuffer (text.length () + increase);
    while (end != - 1) {
        buf.append (text.substring (start, end)).append (replacement);
        start = end + replLength;
        if (-- max == 0) {
            break;
        }
        end = text.indexOf (searchString, start);
    }
    buf.append (text.substring (start));
    return buf.toString ();
}
----------------------------------------

public static String replace (String source, String os, String ns) {
    if (source == null) {
        return null;
    }
    int i = 0;
    if ((i = source.indexOf (os, i)) >= 0) {
        char [] sourceArray = source.toCharArray ();
        char [] nsArray = ns.toCharArray ();
        int oLength = os.length ();
        StringBuilder buf = new StringBuilder (sourceArray.length);
        buf.append (sourceArray, 0, i).append (nsArray);
        i += oLength;
        int j = i;
        while ((i = source.indexOf (os, i)) > 0) {
            buf.append (sourceArray, j, i - j).append (nsArray);
            i += oLength;
            j = i;
        }
        buf.append (sourceArray, j, sourceArray.length - j);
        source = buf.toString ();
        buf.setLength (0);
    }
    return source;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16229058_16229113_1_12
16229058_16229138_3_11
Title: "How can I print consecutive integers greater than 0 three per line?" 
----------------------------------------

public static void main (String [] args) {
    int death = 3;
    for (int i = 0;
    i < 10; i ++) {
        System.out.print (i + "    ");
        death = 3 * i;
        for (int j = 1;
        j <= 3; j ++) {
            System.out.print (death + j + " ");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 0, j = 1;
    i < 10; i ++) {
        System.out.print (i + "    ");
        for (int h = 0;
        h < 3; h ++, j ++) {
            System.out.print (j + " ");
        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16229058_16229113_1_12
16229058_16229181_2_10
Title: "How can I print consecutive integers greater than 0 three per line?" 
----------------------------------------

public static void main (String [] args) {
    int death = 3;
    for (int i = 0;
    i < 10; i ++) {
        System.out.print (i + "    ");
        death = 3 * i;
        for (int j = 1;
        j <= 3; j ++) {
            System.out.print (death + j + " ");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String [] args) {
    int i = 0, j = 0;
    for (i = 0; i < 10; i ++) {
        System.out.print ("" + i + "->");
        for (j = (i * 3) + 1; j < (i * 3) + 4; j ++) {
            System.out.print ("" + j + " ");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16229058_16229113_1_12
16229058_16229376_1_14
Title: "How can I print consecutive integers greater than 0 three per line?" 
----------------------------------------

public static void main (String [] args) {
    int death = 3;
    for (int i = 0;
    i < 10; i ++) {
        System.out.print (i + "    ");
        death = 3 * i;
        for (int j = 1;
        j <= 3; j ++) {
            System.out.print (death + j + " ");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String [] args) {
    int numbersPerLine = 3;
    int finalNumber = 12;
    int startingRowNumber = 0;
    System.out.print (startingRowNumber + " -> ");
    for (int i = 0;
    i < finalNumber; i ++) {
        if (i > 0 && (i % numbersPerLine) == 0) {
            System.out.print ("\n" + ((i / numbersPerLine) + startingRowNumber) + " -> ");
        } else if (i > 0) {
            System.out.print (",");
        }

        System.out.print ((i + 1));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16229058_16229138_3_11
16229058_16229181_2_10
Title: "How can I print consecutive integers greater than 0 three per line?" 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0, j = 1;
    i < 10; i ++) {
        System.out.print (i + "    ");
        for (int h = 0;
        h < 3; h ++, j ++) {
            System.out.print (j + " ");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String [] args) {
    int i = 0, j = 0;
    for (i = 0; i < 10; i ++) {
        System.out.print ("" + i + "->");
        for (j = (i * 3) + 1; j < (i * 3) + 4; j ++) {
            System.out.print ("" + j + " ");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16229058_16229138_3_11
16229058_16229376_1_14
Title: "How can I print consecutive integers greater than 0 three per line?" 
----------------------------------------

public static void main (String [] args) {
    for (int i = 0, j = 1;
    i < 10; i ++) {
        System.out.print (i + "    ");
        for (int h = 0;
        h < 3; h ++, j ++) {
            System.out.print (j + " ");
        }
        System.out.println ("");
    }
}
----------------------------------------

public static void main (String [] args) {
    int numbersPerLine = 3;
    int finalNumber = 12;
    int startingRowNumber = 0;
    System.out.print (startingRowNumber + " -> ");
    for (int i = 0;
    i < finalNumber; i ++) {
        if (i > 0 && (i % numbersPerLine) == 0) {
            System.out.print ("\n" + ((i / numbersPerLine) + startingRowNumber) + " -> ");
        } else if (i > 0) {
            System.out.print (",");
        }

        System.out.print ((i + 1));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16229058_16229181_2_10
16229058_16229376_1_14
Title: "How can I print consecutive integers greater than 0 three per line?" 
----------------------------------------

public static void main (String [] args) {
    int i = 0, j = 0;
    for (i = 0; i < 10; i ++) {
        System.out.print ("" + i + "->");
        for (j = (i * 3) + 1; j < (i * 3) + 4; j ++) {
            System.out.print ("" + j + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    int numbersPerLine = 3;
    int finalNumber = 12;
    int startingRowNumber = 0;
    System.out.print (startingRowNumber + " -> ");
    for (int i = 0;
    i < finalNumber; i ++) {
        if (i > 0 && (i % numbersPerLine) == 0) {
            System.out.print ("\n" + ((i / numbersPerLine) + startingRowNumber) + " -> ");
        } else if (i > 0) {
            System.out.print (",");
        }

        System.out.print ((i + 1));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16239416_16239541_17_31
16239416_16239541_45_54
Title: Java happens-before relationship 
----------------------------------------

public void run () {
    lock.lock ();
    try {
        while (! ready) {
            try {
                condition.await ();
            } catch (InterruptedException ex) {
            }
        }
        System.out.println (data);
    } finally {
        lock.unlock ();
    }
}
----------------------------------------

public void run () {
    lock.lock ();
    try {
        data = 42;
        ready = true;
        condition.signalAll ();
    } finally {
        lock.unlock ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16241196_16241341_17_42
16241196_16241916_13_26
Title: synchronise on non-final object 
----------------------------------------

void bar () {
    synchronized (obj) {
        try {
            System.out.println ("inside bar");
            Thread.sleep (5000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
        obj = new Object ();
        System.out.println ("going out of  bar");
        try {
            Thread.sleep (5000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
        System.out.println ("wait over");
    }
}
----------------------------------------

void bar () {
    synchronized (obj) {
        System.out.println (obj.number);
        obj.doWork ();
        for (int i = 0;
        i < 1000000000l; i ++);

        obj = new MyObject (2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16241196_16241341_48_71
16241196_16241916_28_47
Title: synchronise on non-final object 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final ChangeLockObjectState test = new ChangeLockObjectState ();
    new Thread (new Runnable () {
        @Override
        public void run () {
            test.bar ();
        }}

    ).start ();
    Thread.sleep (6000);
    new Thread (new Runnable () {
        @Override
        public void run () {
            test.foo ();
        }}

    ).start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    final Main3 m3 = new Main3 ();
    Thread t1 = new Thread (new Runnable () {
        @Override
        public void run () {
            m3.bar ();
        }}

    );
    Thread t2 = new Thread (new Runnable () {
        @Override
        public void run () {
            m3.foo ();
        }}

    );
    t1.start ();
    t2.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16243267_16256914_6_39
16243267_25326691_5_23
Title: Determine prime number by user input using recursive method 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Enter non 0 if you want debug :");
    dbg = input.nextInt ();
    long constant = 3;
    long variable = 0;
    while (true) {
        System.out.println ("Enter a Number to test if Prime or Not (1 to exit)");
        constant = input.nextLong ();
        if (constant < 3) {
            if (constant == 2) {
                System.out.println ("2 is a special prime");
            }
            return;
        }
        if (constant % 2 == 0) {
            System.out.println (constant + " is NOT a prime number, even number.");
        } else {
            variable = (long) Math.pow (constant, 0.5);
            variable = (variable % 2 == 1) ? variable : variable + 1;
            double answer = 0.0;
            answer = testPrime (constant, variable);
            System.out.println ("End answer : " + answer);
            if (answer == 1) {
                System.out.println (+ constant + " is a prime number. answer : " + answer);
            } else {
                System.out.println (constant + " is NOT a prime number.answer : " + answer);
            }
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String args []) {
    int n, i, sq = 0;
    Scanner in = new Scanner (System.in);
    Prime_Number ob = new Prime_Number ();
    System.out.print ("Enter a no.:>");
    n = in.nextInt ();
    i = n;
    sq = (int) (Math.sqrt (n));
    int k = ob.prime_Chk (n, i, sq);
    if (k == 1) {
        System.out.println ("Prime");
    } else {
        System.out.println ("Non-Prime");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16251884_16252323_19_42
16251884_16252323_23_40
Title: Timer not working inside class that extends SurfaceView and implements Runnable 
----------------------------------------

public void run () {
    runOnUiThread (new Runnable () {
        public void run () {
            long previousTime = System.nanoTime ();
            while (true) {
                sleep (milis, nanos);
                long now = System.nanoTime ();
                long elapsedTime = previousTime - now;
                previousTime = now;
                update (elapsedTime);
            }
        }}

    );
}
----------------------------------------

public void run () {
    long previousTime = System.nanoTime ();
    while (true) {
        sleep (milis, nanos);
        long now = System.nanoTime ();
        long elapsedTime = previousTime - now;
        previousTime = now;
        update (elapsedTime);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16252994_17549360_1_21
16252994_17570990_15_46
Title: "How to build a linked list that every node will have a random int value but the total values sum and the number of nodes will be fixed in advance?" 
----------------------------------------

public Node [] buildRandomPath (int size, int total) {
    Node [] road = new Node [size];
    int tmp = (int) (Math.random () * (double) (total / size));
    if (tmp == 0) tmp = 1;

    total = total - tmp;
    road [0] = new Node (tmp, road [size - 1], road [1]);
    int tmp1 = 0;
    for (int i = 1;
    i < size - 1; i ++) {
        tmp1 = (int) (Math.random () * (double) (total / size - i));
        if (tmp1 == 0) tmp1 = 1;

        total = total - tmp1;
        if (total > 0) road [i] = new Node (tmp1, road [i - 1], road [i + 1]);
        else road [i] = new Node (0, road [i - 1], road [i + 1]);

    }
    road [size - 1] = new Node (total, road [size - 2], road [0]);
    return road;
}
----------------------------------------

public Node [] buildRandomPath (int size, int total) {
    Node [] road = new Node [size];
    for (int i = 0;
    i < road.length; i ++) {
        road [i] = new Node ();
    }
    int tmp = (int) (Math.random () * (double) (total / size));
    if (tmp == 0) tmp = 1;

    total = total - tmp;
    road [0].val = tmp;
    road [0].next = road [1];
    road [0].prev = road [size - 1];
    int tmp1 = 0;
    for (int i = 1;
    i < size - 1; i ++) {
        tmp1 = (int) (Math.random () * (double) (total / size - i));
        if (tmp1 == 0) tmp1 = 1;

        total = total - tmp1;
        road [i].next = road [i + 1];
        road [i].prev = road [i - 1];
        if (total > 0) road [i].val = tmp1;
        else road [i].val = 0;

    }
    road [size - 1].val = total;
    road [size - 1].next = road [0];
    road [size - 1].prev = road [size - 2];
    return road;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16260752_16260973_1_16
16260752_16261179_1_15
Title: Using for loop to get the Hamming distance between 2 strings 
----------------------------------------

public static int getHammingDistance (String sequence1, String sequence2) {
    char [] s1 = sequence1.toCharArray ();
    char [] s2 = sequence2.toCharArray ();
    int shorter = Math.min (s1.length, s2.length);
    int longest = Math.max (s1.length, s2.length);
    int result = 0;
    for (int i = 0;
    i < shorter; i ++) {
        if (s1 [i] != s2 [i]) result ++;

    }
    result += longest - shorter;
    return result;
}
----------------------------------------

public static int getHammingDistance (String sequenceX, String sequenceY) {
    int a = 0;
    if (sequenceX.length () != sequenceY.length ()) {
        return - 1;
    }
    for (int i = 0;
    i < sequenceX.length (); i ++) {
        if (sequenceX.charAt (i) != sequenceY.charAt (i)) {
            a ++;
        }
    }
    return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16261391_16261471_11_47
16261391_16261979_13_27
Title: Compare structure of two XML files 
----------------------------------------

public static void main (String argv []) {
    try {
        File fXmlFile = new File ("/Input.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance ();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder ();
        Document doc = dBuilder.parse (fXmlFile);
        doc.getDocumentElement ().normalize ();
        System.out.println ("Root element :" + doc.getDocumentElement ().getNodeName ());
        NodeList nList = doc.getElementsByTagName ("staff");
        System.out.println ("----------------------------");
        for (int temp = 0;
        temp < nList.getLength (); temp ++) {
            Node nNode = nList.item (temp);
            System.out.println ("\nCurrent Element :" + nNode.getNodeName ());
            if (nNode.getNodeType () == Node.ELEMENT_NODE) {
                Element eElement = (Element) nNode;
                System.out.println ("Note: " + eElement.getAttribute ("note"));
                System.out.println ("From: " + eElement.getElementsByTagName ("from").item (0).getTextContent ());
                System.out.println ("To : " + eElement.getElementsByTagName ("to").item (0).getTextContent ());
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public static void main (String [] args) {
    try {
        FileInputStream in1 = new FileInputStream (new File ("file1.xml"));
        FileInputStream in2 = new FileInputStream (new File ("file2.xml"));
        FileInputStream in3 = new FileInputStream (new File ("file3.xml"));
        System.out.println (digest (in1));
        System.out.println (digest (in2));
        System.out.println (digest (in3));
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16273704_16273845_1_15
16273704_16273904_1_11
Title: Changing the direction of a point 
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    }
    if (d == WEST) {
        d = SOUTH;
    }
    if (d == SOUTH) {
        d = EAST;
    }
    if (d == EAST) {
        d = NORTH;
    }
}
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    } else if (d == WEST) {
        d = SOUTH;
    } else if (d == SOUTH) {
        d = EAST;
    } else if (d == EAST) {
        d = NORTH;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16273704_16273845_1_15
16273704_16273906_1_12
Title: Changing the direction of a point 
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    }
    if (d == WEST) {
        d = SOUTH;
    }
    if (d == SOUTH) {
        d = EAST;
    }
    if (d == EAST) {
        d = NORTH;
    }
}
----------------------------------------

@Test
public void turnLeft () {
    Robot rob = new Robot (20, 20, Robot.SOUTH);
    rob.turnLeft;
    assertEquals ("E", rob.getDirection);
    rob.turnLeft;
    assertEquals ("N", rob.getDirection);
    rob.turnLeft;
    assertEquals ("W", rob.getDirection);
    rob.turnLeft;
    assertEquals ("S", rob.getDirection);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16273704_16273845_1_15
16273704_16273945_1_15
Title: Changing the direction of a point 
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    }
    if (d == WEST) {
        d = SOUTH;
    }
    if (d == SOUTH) {
        d = EAST;
    }
    if (d == EAST) {
        d = NORTH;
    }
}
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    } else if (d == WEST) {
        d = SOUTH;
    } else if (d == SOUTH) {
        d = EAST;
    } else if (d == EAST) {
        d = NORTH;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16273704_16273904_1_11
16273704_16273906_1_12
Title: Changing the direction of a point 
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    } else if (d == WEST) {
        d = SOUTH;
    } else if (d == SOUTH) {
        d = EAST;
    } else if (d == EAST) {
        d = NORTH;
    }

}
----------------------------------------

@Test
public void turnLeft () {
    Robot rob = new Robot (20, 20, Robot.SOUTH);
    rob.turnLeft;
    assertEquals ("E", rob.getDirection);
    rob.turnLeft;
    assertEquals ("N", rob.getDirection);
    rob.turnLeft;
    assertEquals ("W", rob.getDirection);
    rob.turnLeft;
    assertEquals ("S", rob.getDirection);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
16273704_16273904_1_11
16273704_16273945_1_15
Title: Changing the direction of a point 
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    } else if (d == WEST) {
        d = SOUTH;
    } else if (d == SOUTH) {
        d = EAST;
    } else if (d == EAST) {
        d = NORTH;
    }

}
----------------------------------------

public void turnLeft () {
    if (d == NORTH) {
        d = WEST;
    } else if (d == WEST) {
        d = SOUTH;
    } else if (d == SOUTH) {
        d = EAST;
    } else if (d == EAST) {
        d = NORTH;
    }

}
----------------------------------------

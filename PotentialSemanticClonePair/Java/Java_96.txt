$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39913175_39913512_7_28
39913175_39913643_1_21
Title: parser JSON file JSONARRAY AND JSONOBJECT in java 
----------------------------------------

public static void main (String [] args) {
    String jsonString = readJsonFile ("filePath");
    try {
        JSONObject jsonObject = new JSONObject (jsonString);
        JSONArray result = jsonObject.getJSONArray ("result");
        for (int i = 0;
        i < result.length (); i ++) {
            JSONObject j = result.getJSONObject (i);
            String s = j.getString ("sentence");
            int id = j.getInt ("id");
            String txtFile = j.getString ("txtfile");
            System.out.println ("Sentence is " + s);
            System.out.println ("Id is " + id);
            System.out.println ("text file is " + txtFile);
        }
    } catch (JSONException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void main () {
    String jsonFile = "D:\\MYJSON.json";
    JSONParser parser = new JSONParser ();
    try {
        Object obj = parser.parse (new FileReader (jsonFile));
        if (obj instanceof JSONObject) {
            JSONObject jsonObject = (JSONObject) obj;
            String sentence = jsonObject.optString ("sentence");
            System.out.println (sentence);
        } else if (obj instanceof JSONArray) {
            JSONArray jsonArray = (JSONArray) obj;
            for (int i = 0;
            i < jsonArray.length (); i ++) {
                JSONObject jsonObj = jsonArray.getJSONObject (i);
                String sentence = jsonObj.optString ("sentence");
                System.out.println (sentence);
            }
        }

    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39915308_39915344_6_14
39915308_39915436_12_20
Title: Incompatible type of onMapReady() function 
----------------------------------------

@Override
public void onMapReady (GoogleMap map) {
    googleMap = map;
    map.setMapType (GoogleMap.MAP_TYPE_HYBRID);
    map.setTrafficEnabled (true);
    map.setIndoorEnabled (true);
    map.setBuildingsEnabled (true);
    map.getUiSettings ().setZoomControlsEnabled (true);
}
----------------------------------------

@Override
public void onMapReady (GoogleMap map) {
    googleMap = map;
    map.setMapType (GoogleMap.MAP_TYPE_HYBRID);
    map.setTrafficEnabled (true);
    map.setIndoorEnabled (true);
    map.setBuildingsEnabled (true);
    map.getUiSettings ().setZoomControlsEnabled (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39916992_39917088_7_27
39916992_39917305_1_16
Title: Why isn't my Java number input code working? 
----------------------------------------

public void numbers () {
    Scanner sc = new Scanner (System.in);
    int oddnumbers = 0;
    int count = 0;
    int i = 0;
    do {
        System.out.println ("Enter number");
        i = sc.nextInt ();
        count = count + i;
        System.out.println ("The total is:" + count);
        if (i % 2 == 0) {
            System.out.println ("The number is Even");
        } else if (i != 9) {
            oddnumbers += i;
            System.out.println ("The number is odd");
            System.out.println ("the count of odd numbers is :" + oddnumbers);
        } else System.out.println ("The number is odd");

        System.out.println ("the count of odd numbers is :" + oddnumbers);
    } while (i != 0);
}
----------------------------------------

public int numbers () {
    Scanner sc = new Scanner (System.in);
    int num = 0;
    int oddSum = 0;
    do {
        System.out.println ("Enter number");
        num = sc.nextInt ();
        if (num == 0) {
            break;
        } else if (num % 2 != 0) {
            oddSum += num;
        }

    } while (num != 0);
    sc.close ();
    return oddSum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39927511_39928129_12_24
39927511_39928129_42_61
Title: java.net.BindException: Address already in use: Cannot bind 
----------------------------------------

public void run () {
    int client = 0;
    while (true) {
        try {
            Socket clientConn = this.listenOnThis.accept ();
            RequestProcessing processor = new RequestProcessing (clientConn, client ++);
            processor.start ();
        } catch (IOException e) {
            break;
        }
    }
}
----------------------------------------

public void run () {
    try {
        SocketRW utility = new SocketRW (this.channel);
        while (true) {
            String theString = utility.readLine ().trim ();
            System.out.println ("Client " + clientNo + " sent: " + theString);
            if ("quit".equals (theString)) {
                System.out.println ("Client " + clientNo + " disconnected");
                this.channel.close ();
                break;
            }
            theString = theString.toUpperCase ();
            utility.println (theString);
        }
    } catch (IOException e) {
        System.err.println (e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39929070_39929109_5_28
39929070_39929119_5_28
Title: """cannot find symbol"" error in Java" 
----------------------------------------

public static void main (String [] args) {
    int firstInteger, secondInteger, thirdInteger;
    if (args.length != 5) {
        System.out.println ("Please check the number of your integers!");
        return;
    }
    try {
        firstInteger = Integer.parseInt (args [2]);
        secondInteger = Integer.parseInt (args [3]);
        thirdInteger = Integer.parseInt (args [4]);
    } catch (NumberFormatException e) {
        System.out.println ("Make sure that all inputs are integers!");
        return;
    }
    if (firstInteger == secondInteger && secondInteger == thirdInteger) {
        System.out.println ("True");
        return;
    } else {
        System.out.println ("False");
        return;
    }
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 5) {
        System.out.println ("Please check the number of your integers!");
        return;
    }
    try {
        int firstInteger = Integer.parseInt (args [2]);
        int secondInteger = Integer.parseInt (args [3]);
        int thirdInteger = Integer.parseInt (args [4]);
        if (firstInteger == secondInteger && secondInteger == thirdInteger) {
            System.out.println ("True");
            return;
        } else {
            System.out.println ("False");
            return;
        }
    } catch (NumberFormatException e) {
        System.out.println ("Make sure that all inputs are integers!");
        return;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39933866_39934047_1_23
39933866_39934054_1_12
Title: Adding elements in an array in a loop 
----------------------------------------

public static int [] totalSale (int [] mac, int [] iphone, int [] ipad, int [] ipod) {
    int [] totalSale = {0, 0, 0, 0};
    for (int i = 0;
    i < mac.length; i ++) {
        totalSale [0] = totalSale [0] + mac [i];
    }
    for (int i = 0;
    i < iphone.length; i ++) {
        totalSale [1] = totalSale [1] + iphone [i];
    }
    for (int i = 0;
    i < ipad.length; i ++) {
        totalSale [2] = totalSale [2] + ipad [i];
    }
    for (int i = 0;
    i < ipod.length; i ++) {
        totalSale [3] = totalSale [3] + ipod [i];
    }
    System.out.println ("Total sale for category mac: $" + totalSale [0]);
    System.out.println ("Total sale for category iphone: $" + totalSale [1]);
    System.out.println ("Total sale for category ipad: $" + totalSale [2]);
    System.out.println ("Total sale for category ipod: $" + totalSale [3]);
    return totalSale;
}
----------------------------------------

public static int [] totalSale (int []...categories) {
    int [] totalSale = new int [categories.length];
    for (int i = 0;
    i < totalSale.length; i ++) {
        for (int j = 0;
        j < categories [i].length; j ++) {
            totalSale [i] = totalSale [i] + categories [i] [j];
        }
        System.out.println ("Total sale for category " + i + ": $" + totalSale [i]);
    }
    return totalSale;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39935327_39935685_1_22
39935327_39935689_1_15
Title: Finding four of a kind in a 5 card game 
----------------------------------------

private boolean hasFourOfaKind (String hand) {
    if (hand == null || hand.length () == 0) {
        return false;
    }
    char [] chars = hand.toCharArray ();
    Arrays.sort (chars);
    char current = chars [0];
    int count = 1;
    for (int i = 1;
    i < chars.length; i ++) {
        char next = chars [i];
        if (current != next) {
            current = next;
            count = 1;
        } else {
            count ++;
            if (count == 4) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

public static boolean hasFourOfaKind (String hand) {
    int counter = 0;
    for (int i = 0;
    i < hand.length (); i ++) {
        counter = 0;
        for (int j = 0;
        j < hand.length (); j ++) {
            if (hand.charAt (j) == hand.charAt (i)) {
                counter ++;
            }
        }
        if (counter >= 4) {
            return true;
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39936897_39937018_1_27
39936897_39937069_1_26
Title: How can I print the values of a 2D array in descending order? 
----------------------------------------

public static void findLongestPath (int rows, int columns, int [] [] elevationMatrix, int [] [] adjacencyMatrix) {
    int max = 0;
    int cX, cY;
    for (int x = 0;
    x < rows * columns; x ++) {
        for (int i = 0;
        i < rows; i ++) {
            for (int j = 0;
            j < columns; j ++) {
                if (elevationMatrix [i] [j] > max && adjacencyMatrix [i] [j] == 0) {
                    max = elevationMatrix [i] [j];
                    cX = i;
                    cY = j;
                }
            }
        }
        System.out.println (max);
        max = 0;
        adjacencyMatrix [cX] [cJ] = 1;
    }
}
----------------------------------------

public static void findLongestPath (int rows, int columns, int [] [] elevationMatrix) {
    class PosAndValue implements Comparable < PosAndValue > {
        final int x;
        final int y;
        final int value;
        PosAndValue (int x, int y, int value) {
            this.x = x;
            this.y = y;
            this.value = value;
        } public int compareTo (PosAndValue other) {
            return Integer.compare (value, other.value);
        }}

    PosAndValue [] array = new PosAndValue [rows * columns];
    for (int i = 0;
    i < rows; i ++) {
        for (int j = 0;
        j < columns; j ++) {
            array [i * columns + j] = new PosAndValue (i, j, elevationMatrix [i] [j]);
        }
    }
    Arrays.sort (array);
    for (int i = array.length - 1;
    i >= 0; i --) {
        System.out.println (array [i].value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39943020_39943174_1_12
39943020_39943179_18_33
Title: Why won the if statement execute? 
----------------------------------------

public static String back (String str) {
    String y = "";
    for (int i = str.length () - 1;
    i >= 0; i --) {
        char lets = str.charAt (i);
        y += Character.toString (lets);
        System.out.println (y);
        if (y.equals ("olleh")) {
            System.out.println ("nice");
        }
    }
    return y;
}
----------------------------------------

public static String back (String str) {
    String temp = "";
    for (int i = str.length () - 1;
    i >= 0; i --) {
        char lets = str.charAt (i);
        temp = temp + lets;
    }
    if (temp.equals ("olleh")) {
        System.out.println ("nice");
    }
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39945174_39945203_1_14
39945174_39945340_1_15
Title: Java - How to double only Vowels 
----------------------------------------

public String doubleVowel (String str) {
    StringBuilder sb = new StringBuilder ();
    for (int i = 0;
    i <= str.length () - 1; i ++) {
        char vowel = str.charAt (i);
        if (vowel == 'a' || vowel == 'e' || vowel == 'i' || vowel == 'o' || vowel == 'u') {
            sb.append (vowel);
        }
        sb.append (vowel);
    }
    return sb.toString ();
}
----------------------------------------

public String doubleVowel (String str) {
    String vow = "aeiou";
    for (int i = 0;
    i < str.length (); i ++) {
        if (vow.indexOf (str.charAt (i)) != - 1) {
            str = str.substring (0, i + 1) + str.substring (i ++, str.length ());
        }
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39945628_39945728_1_9
39945628_39946200_18_27
Title: I want to implement two methods to check if a number is a palindrome 
----------------------------------------

public static int reverse (int number) {
    int reversed = 0;
    while (number > 0) {
        reversed *= 10;
        reversed += number % 10;
        number /= 10;
    }
    return reversed;
}
----------------------------------------

public static int reverse (int n1) {
    int reversedNumber = 0;
    while (n1 != 0) {
        reversedNumber *= 10;
        reversedNumber += (n1 % 10);
        n1 /= 10;
    }
    return reversedNumber;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39949340_39950122_12_25
39949340_39950319_12_24
Title: "Pascal's Triangle Formatting Issue for ""n"" Rows (Java)" 
----------------------------------------

public static void pascalTriangle (final int N) {
    int [] [] triangle = new int [N] [N];
    for (int i = 0;
    i < N; i ++) {
        for (int j = 0;
        j <= i; j ++) {
            if (j == 0) triangle [i] [0] = 1;
            else triangle [i] [j] = triangle [i - 1] [j - 1] + triangle [i - 1] [j];

            System.out.print (triangle [i] [j] + "\t");
        }
        System.out.println ();
    }
}
----------------------------------------

public static void pascalTriangle (final int N) {
    int row, num;
    for (int i = 0;
    i < N; i ++) {
        num = 1;
        row = i + 1;
        for (int col = 0;
        col <= i; col ++) {
            if (col > 0) num = num * (row - col) / col;

            System.out.print (num + "\t");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39951291_39951424_1_10
39951291_39951469_8_27
Title: Add sequence of number in array and print the nth number 
----------------------------------------

public static void main (String [] args) {
    long res = 0;
    for (int i = 0;
    i < 20; i ++) {
        if (i % 2 == 0) res = res * i;
        else res = i + res;

        System.out.println (res);
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < limit; ++ i) {
        System.out.print (number + " ");
        if (i % 2 != 0) {
            number = previous + i;
            previous = number;
        } else {
            number = previous * i;
            previous = number;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39961907_39962357_1_22
39961907_39963806_58_87
Title: java avoiding dead locks 
----------------------------------------

public boolean occupy () {
    boolean occupationStatus = false;
    masterLock.lock ();
    try {
        Arrays.sort (dependentLocationIds);
        if (lock.tryLock ()) {
        }
        try {
        } finally {
            if (! occupationStatus) {
                lock.unlock ();
            }
        }
    } finally {
        masterLock.unlock ();
    }
    return occupationStatus;
}
----------------------------------------

public void occupy () {
    while (! LocationHelper.acquireLocks (this)) {
        try {
            System.out.printf ("Location: %d sleeping during occupy on: %s\n", this.getId (), Thread.currentThread ().getName ());
            Thread.sleep (1500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
    try {
        Thread.sleep (1000);
        System.out.printf ("Location: %d doing something on: %s\n", this.getId (), Thread.currentThread ().getName ());
    } catch (InterruptedException e) {
        e.printStackTrace ();
        LocationHelper.releaseLocks (this);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39993892_40107740_29_41
39993892_40107740_8_27
Title: How to get invoker object in my callback in Java? 
----------------------------------------

public static Object extractProperty (Object target, String [] fields) {
    Object eachTarget = target;
    for (int i = 0;
    i < fields.length; i ++) {
        eachTarget = extractProperty (eachTarget, eachTarget.getClass (), fields [i]);
        if (eachTarget == null) {
            return null;
        }
    }
    return eachTarget;
}
----------------------------------------

public static Object extractProperty (Object target, Class clazz, String field) {
    try {
        Field f = clazz.getDeclaredField (field);
        if (! f.isAccessible ()) {
            f.setAccessible (true);
        }
        return f.get (target);
    } catch (NoSuchFieldException e) {
        return extractProperty (target, clazz.getSuperclass (), field);
    } catch (Exception e) {
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39995829_39995966_25_32
39995829_39995966_34_41
Title: Create a setter to provide a java List Implementation class 
----------------------------------------

public static < From, To > ListConverter < From, To > extend (Converter < From, To > converter, ListFactory < To > listFactory) {
    return new ListConverter < From, To > (listFactory) {
        @Override
        public To convert (From from) {
            return converter.convert (from);
        }}

    ;
}
----------------------------------------

public static < From, To > ListConverter < From, To > extend (Converter < From, To > converter) {
    return extend (converter, new ListFactory < To > () {
        @Override
        public List < To > newList () {
            return new ArrayList < To > ();
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39999278_40133286_143_153
39999278_51540957_149_159
Title: gson - How to include class name property when serializing object of any type 
----------------------------------------

public RuntimeClassNameTypeAdapterFactory < T > registerSubtype (Class < ? extends T > type, String label) {
    if (type == null || label == null) {
        throw new NullPointerException ();
    }
    if (subtypeToLabel.containsKey (type) || labelToSubtype.containsKey (label)) {
        throw new IllegalArgumentException ("types and labels must be unique");
    }
    labelToSubtype.put (label, type);
    subtypeToLabel.put (type, label);
    return this;
}
----------------------------------------

public RuntimeClassNameTypeAdapterFactory < T > registerSubtype (Class < ? extends T > type, String label) {
    if (type == null || label == null) {
        throw new NullPointerException ();
    }
    if (subtypeToLabel.containsKey (type) || labelToSubtype.containsKey (label)) {
        throw new IllegalArgumentException ("types and labels must be unique");
    }
    labelToSubtype.put (label, type);
    subtypeToLabel.put (type, label);
    return this;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39999278_40133286_166_232
39999278_51540957_172_275
Title: gson - How to include class name property when serializing object of any type 
----------------------------------------

public < R > TypeAdapter < R > create (Gson gson, TypeToken < R > type) {
    final Map < String, TypeAdapter < ? > > labelToDelegate = new LinkedHashMap < String, TypeAdapter < ? > > ();
    final Map < Class < ? >, TypeAdapter < ? > > subtypeToDelegate = new LinkedHashMap < Class < ? >, TypeAdapter < ? > > ();
    if (Object.class.isAssignableFrom (type.getRawType ())) {
        TypeAdapter < ? > delegate = gson.getDelegateAdapter (this, type);
        labelToDelegate.put ("class", delegate);
        subtypeToDelegate.put (type.getRawType (), delegate);
    }
    return new TypeAdapter < R > () {
        @Override
        public R read (JsonReader in) throws IOException {
            JsonElement jsonElement = Streams.parse (in);
            JsonElement labelJsonElement = jsonElement.getAsJsonObject ().remove (typeFieldName);
            if (labelJsonElement == null) {
                throw new JsonParseException ("cannot deserialize " + baseType + " because it does not define a field named " + typeFieldName);
            }
            String label = labelJsonElement.getAsString ();
            @SuppressWarnings ("unchecked")
            TypeAdapter < R > delegate = (TypeAdapter < R >) labelToDelegate.get (label);
            if (delegate == null) {
                throw new JsonParseException ("cannot deserialize " + baseType + " subtype named " + label + "; did you forget to register a subtype?");
            }
            return delegate.fromJsonTree (jsonElement);
        }@Override
        public void write (JsonWriter out, R value) throws IOException {
            Class < ? > srcType = value.getClass ();
            String label = srcType.getName ();
            @SuppressWarnings ("unchecked")
            TypeAdapter < R > delegate = (TypeAdapter < R >) subtypeToDelegate.get (srcType);
            if (delegate == null) {
                throw new JsonParseException ("cannot serialize " + srcType.getName () + "; did you forget to register a subtype?");
            }
            JsonElement jsonTree = delegate.toJsonTree (value);
            if (jsonTree.isJsonPrimitive ()) {
                Streams.write (jsonTree, out);
            } else {
                JsonObject jsonObject = jsonTree.getAsJsonObject ();
                if (jsonObject.has (typeFieldName)) {
                    throw new JsonParseException ("cannot serialize " + srcType.getName () + " because it already defines a field named " + typeFieldName);
                }
                JsonObject clone = new JsonObject ();
                clone.add (typeFieldName, new JsonPrimitive (label));
                for (Map.Entry < String, JsonElement > e : jsonObject.entrySet ()) {
                    clone.add (e.getKey (), e.getValue ());
                }
                Streams.write (clone, out);
            }
        }}

    .nullSafe ();
}
----------------------------------------

public < R > TypeAdapter < R > create (Gson gson, TypeToken < R > type) {
    final Map < String, TypeAdapter < ? > > labelToDelegate = new LinkedHashMap < String, TypeAdapter < ? > > ();
    final Map < Class < ? >, TypeAdapter < ? > > subtypeToDelegate = new LinkedHashMap < Class < ? >, TypeAdapter < ? > > ();
    if (Object.class.isAssignableFrom (type.getRawType ())) {
        TypeAdapter < ? > delegate = gson.getDelegateAdapter (this, type);
        labelToDelegate.put (type.getRawType ().getName (), delegate);
        subtypeToDelegate.put (type.getRawType (), delegate);
    }
    return new TypeAdapter < R > () {
        @SuppressWarnings ("unchecked")
        @Override
        public R read (JsonReader in) throws IOException {
            JsonElement jsonElement = Streams.parse (in);
            if (jsonElement.isJsonObject ()) {
                JsonElement labelJsonElement = jsonElement.getAsJsonObject ().remove (typeFieldName);
                if (labelJsonElement == null) {
                    throw new JsonParseException ("cannot deserialize " + baseType + " because it does not define a field named " + typeFieldName);
                }
                String label = labelJsonElement.getAsString ();
                TypeAdapter < R > delegate = (TypeAdapter < R >) labelToDelegate.get (label);
                if (delegate == null) {
                    Class < R > aClass;
                    try {
                        aClass = (Class < R >) Class.forName (label);
                    } catch (ClassNotFoundException e) {
                        throw new JsonParseException ("Cannot find class " + label, e);
                    }
                    TypeToken < R > subClass = TypeToken.get (aClass);
                    delegate = gson.getDelegateAdapter (RuntimeClassNameTypeAdapterFactory.this, subClass);
                    if (delegate == null) {
                        throw new JsonParseException ("cannot deserialize " + baseType + " subtype named " + label + "; did you forget to register a subtype?");
                    }
                }
                return delegate.fromJsonTree (jsonElement);
            } else if (jsonElement.isJsonNull ()) {
                return null;
            } else {
                TypeAdapter < R > delegate = gson.getDelegateAdapter (RuntimeClassNameTypeAdapterFactory.this, type);
                if (delegate == null) {
                    throw new JsonParseException ("cannot deserialize " + baseType + "; did you forget to register a subtype?");
                }
                return delegate.fromJsonTree (jsonElement);
            }

        }@Override
        public void write (JsonWriter out, R value) throws IOException {
            Class < ? > srcType = value.getClass ();
            String label = srcType.getName ();
            TypeAdapter < R > delegate = getDelegate (srcType);
            if (delegate == null) {
                throw new JsonParseException ("cannot serialize " + srcType.getName () + "; did you forget to register a subtype?");
            }
            JsonElement jsonTree = delegate.toJsonTree (value);
            if (! jsonTree.isJsonObject ()) {
                Streams.write (jsonTree, out);
            } else {
                JsonObject jsonObject = jsonTree.getAsJsonObject ();
                if (jsonObject.has (typeFieldName)) {
                    throw new JsonParseException ("cannot serialize " + srcType.getName () + " because it already defines a field named " + typeFieldName);
                }
                JsonObject clone = new JsonObject ();
                clone.add (typeFieldName, new JsonPrimitive (label));
                for (Map.Entry < String, JsonElement > e : jsonObject.entrySet ()) {
                    clone.add (e.getKey (), e.getValue ());
                }
                Streams.write (clone, out);
            }
        }@SuppressWarnings ("unchecked")
        private TypeAdapter < R > getDelegate (Class < ? > srcType) {
            TypeAdapter < ? > typeAdapter = subtypeToDelegate.get (srcType);
            if (typeAdapter != null) {
                return (TypeAdapter < R >) typeAdapter;
            }
            for (Map.Entry < Class < ? >, TypeAdapter < ? > > classTypeAdapterEntry : subtypeToDelegate.entrySet ()) {
                if (classTypeAdapterEntry.getKey ().isAssignableFrom (srcType)) {
                    return (TypeAdapter < R >) classTypeAdapterEntry.getValue ();
                }
            }
            return null;
        }}

    .nullSafe ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39999278_40133286_188_203
39999278_51540957_196_231
Title: gson - How to include class name property when serializing object of any type 
----------------------------------------

public R read (JsonReader in) throws IOException {
    JsonElement jsonElement = Streams.parse (in);
    JsonElement labelJsonElement = jsonElement.getAsJsonObject ().remove (typeFieldName);
    if (labelJsonElement == null) {
        throw new JsonParseException ("cannot deserialize " + baseType + " because it does not define a field named " + typeFieldName);
    }
    String label = labelJsonElement.getAsString ();
    @SuppressWarnings ("unchecked")
    TypeAdapter < R > delegate = (TypeAdapter < R >) labelToDelegate.get (label);
    if (delegate == null) {
        throw new JsonParseException ("cannot deserialize " + baseType + " subtype named " + label + "; did you forget to register a subtype?");
    }
    return delegate.fromJsonTree (jsonElement);
}
----------------------------------------

public R read (JsonReader in) throws IOException {
    JsonElement jsonElement = Streams.parse (in);
    if (jsonElement.isJsonObject ()) {
        JsonElement labelJsonElement = jsonElement.getAsJsonObject ().remove (typeFieldName);
        if (labelJsonElement == null) {
            throw new JsonParseException ("cannot deserialize " + baseType + " because it does not define a field named " + typeFieldName);
        }
        String label = labelJsonElement.getAsString ();
        TypeAdapter < R > delegate = (TypeAdapter < R >) labelToDelegate.get (label);
        if (delegate == null) {
            Class < R > aClass;
            try {
                aClass = (Class < R >) Class.forName (label);
            } catch (ClassNotFoundException e) {
                throw new JsonParseException ("Cannot find class " + label, e);
            }
            TypeToken < R > subClass = TypeToken.get (aClass);
            delegate = gson.getDelegateAdapter (RuntimeClassNameTypeAdapterFactory.this, subClass);
            if (delegate == null) {
                throw new JsonParseException ("cannot deserialize " + baseType + " subtype named " + label + "; did you forget to register a subtype?");
            }
        }
        return delegate.fromJsonTree (jsonElement);
    } else if (jsonElement.isJsonNull ()) {
        return null;
    } else {
        TypeAdapter < R > delegate = gson.getDelegateAdapter (RuntimeClassNameTypeAdapterFactory.this, type);
        if (delegate == null) {
            throw new JsonParseException ("cannot deserialize " + baseType + "; did you forget to register a subtype?");
        }
        return delegate.fromJsonTree (jsonElement);
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39999278_40133286_205_230
39999278_51540957_234_258
Title: gson - How to include class name property when serializing object of any type 
----------------------------------------

public void write (JsonWriter out, R value) throws IOException {
    Class < ? > srcType = value.getClass ();
    String label = srcType.getName ();
    @SuppressWarnings ("unchecked")
    TypeAdapter < R > delegate = (TypeAdapter < R >) subtypeToDelegate.get (srcType);
    if (delegate == null) {
        throw new JsonParseException ("cannot serialize " + srcType.getName () + "; did you forget to register a subtype?");
    }
    JsonElement jsonTree = delegate.toJsonTree (value);
    if (jsonTree.isJsonPrimitive ()) {
        Streams.write (jsonTree, out);
    } else {
        JsonObject jsonObject = jsonTree.getAsJsonObject ();
        if (jsonObject.has (typeFieldName)) {
            throw new JsonParseException ("cannot serialize " + srcType.getName () + " because it already defines a field named " + typeFieldName);
        }
        JsonObject clone = new JsonObject ();
        clone.add (typeFieldName, new JsonPrimitive (label));
        for (Map.Entry < String, JsonElement > e : jsonObject.entrySet ()) {
            clone.add (e.getKey (), e.getValue ());
        }
        Streams.write (clone, out);
    }
}
----------------------------------------

public void write (JsonWriter out, R value) throws IOException {
    Class < ? > srcType = value.getClass ();
    String label = srcType.getName ();
    TypeAdapter < R > delegate = getDelegate (srcType);
    if (delegate == null) {
        throw new JsonParseException ("cannot serialize " + srcType.getName () + "; did you forget to register a subtype?");
    }
    JsonElement jsonTree = delegate.toJsonTree (value);
    if (! jsonTree.isJsonObject ()) {
        Streams.write (jsonTree, out);
    } else {
        JsonObject jsonObject = jsonTree.getAsJsonObject ();
        if (jsonObject.has (typeFieldName)) {
            throw new JsonParseException ("cannot serialize " + srcType.getName () + " because it already defines a field named " + typeFieldName);
        }
        JsonObject clone = new JsonObject ();
        clone.add (typeFieldName, new JsonPrimitive (label));
        for (Map.Entry < String, JsonElement > e : jsonObject.entrySet ()) {
            clone.add (e.getKey (), e.getValue ());
        }
        Streams.write (clone, out);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
39999457_39999551_1_16
39999457_39999573_1_17
Title: Binary Search giving incorrect output 
----------------------------------------

static String binarySearch (int x, int [] A, int n) {
    if (n == 0) return ("Not present");
    else {
        int mid = n / 2;
        if (x == A [mid]) return ("Present");
        else if (x < A [mid]) return binarySearch (x, Arrays.copyOfRange (A, 0, mid), mid);
        else return binarySearch (x, Arrays.copyOfRange (A, mid, n), n - mid);

    }
}
----------------------------------------

String binarySearch (int x, int [] A, int n) {
    if (n == 0) return ("Not present");
    else {
        int mid = n / 2;
        if (x == A [mid]) return ("Present");
        else if (x < A [mid]) return binarySearch (x, Arrays.copyOfRange (A, 0, mid), mid);
        else return binarySearch (x, Arrays.copyOfRange (A, mid, n), n - mid);

    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4000169_4000324_4_19
4000169_41583231_2_26
Title: Getting the array length of a 2D array in Java 
----------------------------------------

public static void main (String args []) {
    int [] [] test;
    test = new int [5] [];
    for (int i = 0;
    i < test.length; i ++) test [i] = new int [i];

    System.out.println (Arrays.deepToString (test));
    Object [] test2;
    test2 = new Object [5];
    for (int i = 0;
    i < test2.length; i ++) test2 [i] = new int [i];

    System.out.println (Arrays.deepToString (test2));
}
----------------------------------------

public static void main (String [] args) throws IOException, NumberFormatException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    int [] [] a;
    int sum = 0;
    a = new int [3] [2];
    System.out.println ("Enter array with 5 elements");
    for (int i = 0;
    i < a.length; i ++) {
        for (int j = 0;
        j < a [0].length; j ++) {
            a [i] [j] = Integer.parseInt (br.readLine ());
        }
    }
    for (int i = 0;
    i < a.length; i ++) {
        for (int j = 0;
        j < a [0].length; j ++) {
            System.out.print (a [i] [j] + "  ");
            sum = sum + a [i] [j];
        }
        System.out.println ();
        sum = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4000169_4000324_4_19
4000169_53251017_5_26
Title: Getting the array length of a 2D array in Java 
----------------------------------------

public static void main (String args []) {
    int [] [] test;
    test = new int [5] [];
    for (int i = 0;
    i < test.length; i ++) test [i] = new int [i];

    System.out.println (Arrays.deepToString (test));
    Object [] test2;
    test2 = new Object [5];
    for (int i = 0;
    i < test2.length; i ++) test2 [i] = new int [i];

    System.out.println (Arrays.deepToString (test2));
}
----------------------------------------

public static void main (String [] args) {
    double [] [] test = {{100}, {200}, {300}, {400}, {500}, {600}, {700}, {800}, {900}, {1000}};
    int [] [] removeRow = {{0}, {1}, {3}, {4},};
    double [] [] newTest = new double [test.length - removeRow.length] [test [0].length];
    for (int i = 0, j = 0, k = 0;
    i < test.length; i ++) {
        if (j < removeRow.length) {
            if (i == removeRow [j] [0]) {
                j ++;
                continue;
            }
        }
        newTest [k] [0] = test [i] [0];
        k ++;
    }
    System.out.println (Arrays.deepToString (newTest));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4000169_41583231_2_26
4000169_53251017_5_26
Title: Getting the array length of a 2D array in Java 
----------------------------------------

public static void main (String [] args) throws IOException, NumberFormatException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    int [] [] a;
    int sum = 0;
    a = new int [3] [2];
    System.out.println ("Enter array with 5 elements");
    for (int i = 0;
    i < a.length; i ++) {
        for (int j = 0;
        j < a [0].length; j ++) {
            a [i] [j] = Integer.parseInt (br.readLine ());
        }
    }
    for (int i = 0;
    i < a.length; i ++) {
        for (int j = 0;
        j < a [0].length; j ++) {
            System.out.print (a [i] [j] + "  ");
            sum = sum + a [i] [j];
        }
        System.out.println ();
        sum = 0;
    }
}
----------------------------------------

public static void main (String [] args) {
    double [] [] test = {{100}, {200}, {300}, {400}, {500}, {600}, {700}, {800}, {900}, {1000}};
    int [] [] removeRow = {{0}, {1}, {3}, {4},};
    double [] [] newTest = new double [test.length - removeRow.length] [test [0].length];
    for (int i = 0, j = 0, k = 0;
    i < test.length; i ++) {
        if (j < removeRow.length) {
            if (i == removeRow [j] [0]) {
                j ++;
                continue;
            }
        }
        newTest [k] [0] = test [i] [0];
        k ++;
    }
    System.out.println (Arrays.deepToString (newTest));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40008700_40008830_4_34
40008700_40009072_1_27
Title: "User input in my code is not working what am I doing wrong?" 
----------------------------------------

public static void main (String args []) {
    Scanner in = new Scanner (System.in);
    int N = 10;
    int array [] = new int [N];
    for (int i = 0;
    i < N; i ++) {
        array [i] = in.nextInt ();
    }
    int maximum = array [0];
    int minimum = array [0];
    for (int i = 0;
    i < N; i ++) {
        if (array [i] > maximum) {
            maximum = array [i];
        }
        if (array [i] < minimum) {
            minimum = array [i];
        }
    }
    System.out.println ("MAXIMUM : " + maximum);
    System.out.println ("MINIMUM : " + minimum);
}
----------------------------------------

public static void main (String [] args) {
    int [] numbers = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    for (int x = 0;
    x < numbers.length; x ++) {
        Scanner user_input = new Scanner (System.in);
        System.out.println ("What is the " + x + " number of the array");
        numbers [x] = user_input.nextInt ();
    }
    int smallest = numbers [0];
    int largest = numbers [0];
    for (i = 1; i < numbers.length; i ++) {
        if (numbers [i] > largest) largest = numbers [i];
        else if (numbers [i] < smallest) smallest = numbers [i];

    }
    System.out.println ("Largest Number is : " + largest);
    System.out.println ("Smallest Number is : " + smallest);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40010361_40010661_1_18
40010361_40010666_1_16
Title: how to delete duplicate character from a string 
----------------------------------------

public static String eliminateDuplicates (String source) {
    StringBuilder result = new StringBuilder ();
    for (int i = 0, sLength = source.length ();
    i < sLength; i ++) {
        char readyToAdd = source.charAt (i);
        boolean add = true;
        for (int j = 0;
        j < result.length (); j ++) {
            if (readyToAdd == result.charAt (j)) {
                add = false;
                break;
            }
        }
        if (add) result.append (readyToAdd);

    }
    return result.toString ();
}
----------------------------------------

public static String eliminateDuplicates (String str) {
    HashSet < Character > hashSet = new HashSet ();
    char [] toCharArray = str.toCharArray ();
    for (char c : toCharArray) {
        hashSet.add (c);
    }
    StringBuilder answer = new StringBuilder ();
    for (Character character : hashSet) {
        answer.append (character);
    }
    return answer.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40010361_40010661_1_18
40010361_40011047_1_14
Title: how to delete duplicate character from a string 
----------------------------------------

public static String eliminateDuplicates (String source) {
    StringBuilder result = new StringBuilder ();
    for (int i = 0, sLength = source.length ();
    i < sLength; i ++) {
        char readyToAdd = source.charAt (i);
        boolean add = true;
        for (int j = 0;
        j < result.length (); j ++) {
            if (readyToAdd == result.charAt (j)) {
                add = false;
                break;
            }
        }
        if (add) result.append (readyToAdd);

    }
    return result.toString ();
}
----------------------------------------

public static String eliminateDuplicates (String str) {
    StringBuilder result = new StringBuilder ();
    BitSet bs = new BitSet (256);
    char [] chars = str.toCharArray ();
    char getChar = 0;
    for (int i = 0;
    i < chars.length; i ++) {
        getChar = chars [i];
        if (! bs.get (getChar)) {
            result.append (getChar);
            bs.set (getChar);
        }
    }
    return result.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40010361_40010666_1_16
40010361_40011047_1_14
Title: how to delete duplicate character from a string 
----------------------------------------

public static String eliminateDuplicates (String str) {
    HashSet < Character > hashSet = new HashSet ();
    char [] toCharArray = str.toCharArray ();
    for (char c : toCharArray) {
        hashSet.add (c);
    }
    StringBuilder answer = new StringBuilder ();
    for (Character character : hashSet) {
        answer.append (character);
    }
    return answer.toString ();
}
----------------------------------------

public static String eliminateDuplicates (String str) {
    StringBuilder result = new StringBuilder ();
    BitSet bs = new BitSet (256);
    char [] chars = str.toCharArray ();
    char getChar = 0;
    for (int i = 0;
    i < chars.length; i ++) {
        getChar = chars [i];
        if (! bs.get (getChar)) {
            result.append (getChar);
            bs.set (getChar);
        }
    }
    return result.toString ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40010884_40011022_1_24
40010884_40011203_11_23
Title: Find arrray intervals that add up to a given value 
----------------------------------------

public static void findSum (int [] arr) {
    int i = 0;
    while (i < arr.length - 1) {
        int j = i + 1;
        int resu = arr [i];
        while (j < arr.length - 1 && resu < 14) {
            resu = resu + arr [j];
            if (resu == 13) {
                System.out.println ("interval " + i + " and " + j + " is 13");
            }
            j ++;
        }
        i ++;
    }
}
----------------------------------------

public static void findSum (int [] arr) {
    for (int i = 0;
    i < arr.length - 1; i ++) {
        int sum = 0;
        sum += arr [i];
        for (int j = i + 1;
        j < arr.length; j ++) {
            sum += arr [j];
            if (sum == 13) {
                System.out.println ("from=" + i + " to=" + j + " the sum is=13");
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40020902_40021006_5_25
40020902_40021088_5_28
Title: Print an int array and another int array that returns the remainder of the division of first array in JAVA 
----------------------------------------

public static void main (String [] args) {
    int [] array = new int [3];
    Random generator = new Random ();
    for (int i = 0;
    i < array.length; i ++) {
        array [i] = generator.nextInt (80);
        System.out.println ("array= " + array [i]);
    }
    System.out.print ("\n");
    int [] newarray = new int [3];
    for (int j = 0;
    j < newarray.length; j ++) {
        newarray [j] = array [j] % 19;
        System.out.println ("residuals=" + newarray [j]);
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] array = new int [3];
    Random generator = new Random ();
    for (int i = 0;
    i < array.length; i ++) {
        array [i] = generator.nextInt (80);
        int [] newarray = new int [3];
        newarray [i] = array [i] % 19;
        for (int j = 0;
        j < newarray.length; j ++) {
            System.out.println ("array= " + array [i]);
        }
        System.out.println ("");
        for (int j = 0;
        j < newarray.length; j ++) {
            System.out.println ("residuals=" + array [j]);
        }
        System.out.println ("");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40027974_40062500_138_158
40027974_40062500_159_190
Title: Interesting 16x16 grid sum 
----------------------------------------

public Path solveSquare (int [] [] square, long timeout) {
    Map < Integer, Integer > smallPathScores = new HashMap < > ();
    smallPathScores.put (1, - 10);
    for (int i = 0;
    i < squareSize; i ++) {
        for (int j = 0;
        j < squareSize; j ++) {
            if (square [i] [j] > smallPathScores.get (1)) {
                smallPathScores.put (1, square [i] [j]);
            }
        }
    }
    Coords fakeCoords = new Coords (- 10, - 10);
    coordScores.put (fakeCoords, - 10);
    Path bestSmallPath = new Path (fakeCoords);
    for (int i = 2;
    i < targetLength; i ++) {
        SquareSolver smallSolver = new SquareSolver (500 * 1000, squareSize, i);
        bestSmallPath = smallSolver.solveSquare (square, timeout * i, smallPathScores, bestSmallPath);
        smallPathScores.put (i, bestSmallPath.getScore ());
        System.gc ();
    }
    return solveSquare (square, timeout * targetLength, smallPathScores, bestSmallPath);
}
----------------------------------------

public Path solveSquare (int [] [] square, long timeout, Map < Integer, Integer > shortPathScores, Path initialBestPath) {
    bestPath = initialBestPath;
    bestShortPathScores = shortPathScores;
    System.out.println ("=============================Target Length:\t" + targetLength + "(Timeout:\t" + timeout / 60000.0 + " minutes)===========================");
    System.out.println ("Best Short Path Scores (for early cutoff):\t" + bestShortPathScores);
    startTime = System.currentTimeMillis ();
    this.timeout = timeout;
    depthCacheHitsMap = new HashMap < > ();
    depthEarlyCutoffsMap = new HashMap < > ();
    for (int i = 1;
    i < targetLength; i ++) {
        depthCacheHitsMap.put (i, 0);
        depthEarlyCutoffsMap.put (i, 0);
    }
    for (int i = 0;
    i < squareSize; i ++) {
        for (int j = 0;
        j < squareSize; j ++) {
            coordScores.put (new Coords (i, j), square [i] [j]);
        }
    }
    System.out.print ("Expanding from best shorter node");
    expandLegalNeighbors (initialBestPath);
    System.out.println ("Starting from every spot");
    coordScores.keySet ().stream ().sorted (Comparator.comparing (Coords :: getProximityToOrigin)).forEachOrdered (startingCoords -> solveSquareHelper (new Path (startingCoords)));
    System.out.println ();
    System.out.println ("Best Path:\t" + bestPath);
    System.out.println ("Best Score:\t" + bestPath.getScore ());
    System.out.println ("LRU Cache stats:\t" + depthCacheHitsMap);
    System.out.println ("Early Cutoff stats:\t" + depthEarlyCutoffsMap);
    return bestPath;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40030612_40030717_9_21
40030612_40030850_3_19
Title: Is this right way to initialize an array of objects? 
----------------------------------------

public static void main (String [] args) {
    Student studentArray [] = new Student [2];
    studentArray [0] = new Student ();
    studentArray [1] = new Student ();
    studentArray [0].marks = 100;
    studentArray [1].marks = 75;
    int m = 0;
    m = studentArray [0].marks;
    System.out.println (m);
}
----------------------------------------

public static void main (String [] args) {
    Student studentArray [] = new Student [2];
    HelloWorld helloWorld = new HelloWorld ();
    for (int i = 0;
    i < studentArray.length; i ++) {
        studentArray [i] = helloWorld.new Student ();
    }
    studentArray [0].marks = 100;
    studentArray [1].marks = 75;
    int m = 0;
    m = studentArray [0].marks;
    System.out.println (m);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40034995_40035155_1_12
40034995_40035454_1_13
Title: JUnit Test failing and not sure why 
----------------------------------------

public static int countMajority (int count0, int count1, int count2) {
    int allVotes = (count0 + count1 + count2);
    int halfVotes = (allVotes / 2);
    int winner = - 1;
    if (count0 >= halfVotes) {
        winner = 0;
    } else if (count1 >= halfVotes) {
        winner = 1;
    }

    return winner;
}
----------------------------------------

public static int countMajority (int count0, int count1, int count2) {
    int allVotes = (count0 + count1 + count2);
    int halfVotes = (allVotes / 2);
    int winner = - 1;
    if (count0 >= halfVotes) {
        winner = 0;
    }
    if (count1 >= halfVotes && count1 > count0) {
        winner = 1;
    }
    return winner;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40036321_40036797_3_27
40036321_40036879_21_40
Title: Java Array String Compare 
----------------------------------------

public static void main (String [] args) {
    String [] array = {"ok", "aokk", "ko"};
    for (int i = 0;
    i < array.length - 1; i ++) {
        for (int j = i + 1;
        j <= array.length - 1; j ++) {
            if (array [i].length () > array [j].length ()) {
                if (array [i].contains (array [j])) System.out.println (array [j]);

            } else {
                if (array [j].contains (array [i])) System.out.println (array [i]);

            }
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    String [] array = {"bitter", "letter"};
    char [] char1 = array [0].toCharArray ();
    Arrays.sort (char1);
    char [] char2 = array [1].toCharArray ();
    Arrays.sort (char2);
    String common;
    if (char1.length > char2.length) {
        common = commonInArray (char1, char2);
    } else {
        common = commonInArray (char2, char1);
    }
    System.out.println (common);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40036321_40036797_3_27
40036321_40036935_5_17
Title: Java Array String Compare 
----------------------------------------

public static void main (String [] args) {
    String [] array = {"ok", "aokk", "ko"};
    for (int i = 0;
    i < array.length - 1; i ++) {
        for (int j = i + 1;
        j <= array.length - 1; j ++) {
            if (array [i].length () > array [j].length ()) {
                if (array [i].contains (array [j])) System.out.println (array [j]);

            } else {
                if (array [j].contains (array [i])) System.out.println (array [i]);

            }
        }
    }
}
----------------------------------------

public static void main (String args []) {
    String arr [] = {"aokk", "ok"};
    List < Integer > index = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr [0].length (); i ++) {
        for (int j = 0;
        j < arr [1].length (); j ++) {
            if (arr [0].charAt (i) == arr [1].charAt (j) && index.contains (j) == false) {
                System.out.print (arr [0].charAt (i));
                index.add (j);
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40036321_40036879_21_40
40036321_40036935_5_17
Title: Java Array String Compare 
----------------------------------------

public static void main (String [] args) {
    String [] array = {"bitter", "letter"};
    char [] char1 = array [0].toCharArray ();
    Arrays.sort (char1);
    char [] char2 = array [1].toCharArray ();
    Arrays.sort (char2);
    String common;
    if (char1.length > char2.length) {
        common = commonInArray (char1, char2);
    } else {
        common = commonInArray (char2, char1);
    }
    System.out.println (common);
}
----------------------------------------

public static void main (String args []) {
    String arr [] = {"aokk", "ok"};
    List < Integer > index = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr [0].length (); i ++) {
        for (int j = 0;
        j < arr [1].length (); j ++) {
            if (arr [0].charAt (i) == arr [1].charAt (j) && index.contains (j) == false) {
                System.out.print (arr [0].charAt (i));
                index.add (j);
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40037354_40037624_1_11
40037354_40037870_11_22
Title: Boolean method to determine consecutive numbers 
----------------------------------------

public boolean consecutive (int x, int y, int z) {
    if (((x < y && x < z) && (y < z && ((y - x) == 1) && ((z - x) == 2))) || ((z < y && ((z - x) == 1) && ((y - x) == 2)))) {
        return true;
    } else if (((y < x && y < z) && (x < z && ((x - y) == 1) && ((z - y) == 2))) || ((z < x && ((z - y) == 1) && ((x - y) == 2)))) {
        return true;
    } else if (((z < x && z < y) && (y < x && ((y - z) == 1) && ((x - z) == 2))) || ((x < y && ((x - z) == 1) && ((y - z) == 2)))) {
        return true;
    } else return false;

}
----------------------------------------

public static boolean consecutive (int x, int y, int z) {
    if (((x < y && x < z) && (y < z && ((y - x) == 1) && ((z - x) == 2))) || ((z < y && ((z - x) == 1) && ((y - x) == 2)))) {
        return true;
    } else if (((y < x && y < z) && (x < z && ((x - y) == 1) && ((z - y) == 2))) || ((z < x && ((z - y) == 1) && ((x - y) == 2)))) {
        return true;
    } else if (((z < x && z < y) && (y < x && ((y - z) == 1) && ((x - z) == 2))) || ((x < y && ((x - z) == 1) && ((y - z) == 2)))) {
        return true;
    } else {
        return false;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40047416_40047849_10_25
40047416_40048001_3_25
Title: "Print data from another method in a while loop in the main method only once" 
----------------------------------------

public static void main (String [] args) {
    Scanner kb = new Scanner (System.in);
    int num1;
    int num2;
    int mymin = Integer.MAX_VALUE;
    do {
        System.out.print ("Enter number 1: ");
        num1 = kb.nextInt ();
        System.out.print ("Enter number 2: ");
        num2 = kb.nextInt ();
        mymin = pairsMin (mymin, num1, num2);
    } while (! (num1 == num2));
    System.out.print ("\nThe minimum distance is: " + mymin + "\n");
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.print ("Enter number 1: ");
    double num1 = in.nextDouble ();
    System.out.print ("Enter number 2: ");
    double num2 = in.nextDouble ();
    double Min1;
    double myMin = Double.MAX_VALUE;
    double dist = Math.abs (num1 - num2);
    while (! (num1 == num2)) {
        pairsMin (dist, num1, num2, myMin);
        System.out.print ("Enter number 1: ");
        num1 = in.nextDouble ();
        System.out.print ("Enter number 2: ");
        num2 = in.nextDouble ();
        Min1 = pairsMin (dist, num1, num2, myMin);
        if (num1 == num2) {
            System.out.print ("\nThe minimum distance is: " + Min1 + "\n");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4004760_4004874_5_23
4004760_51609497_1_18
Title: Fastest way to copy files in Java 
----------------------------------------

public static void copyFile (File in, File out) throws IOException {
    FileChannel inChannel = new FileInputStream (in).getChannel ();
    FileChannel outChannel = new FileOutputStream (out).getChannel ();
    try {
        inChannel.transferTo (0, inChannel.size (), outChannel);
    } catch (IOException e) {
        throw e;
    } finally {
        if (inChannel != null) inChannel.close ();

        if (outChannel != null) outChannel.close ();

    }
}
----------------------------------------

public void copyFile (File inFileStr, File outFileStr) throws IOException {
    try (BufferedInputStream bis = new BufferedInputStream (new FileInputStream (inFileStr)); BufferedOutputStream bos = new BufferedOutputStream (new FileOutputStream (outFileStr))) {
        byte [] buffer = new byte [1024 * 1024];
        int read = 0;
        while ((read = bis.read (buffer)) != - 1) {
            bos.write (buffer, 0, read);
        }
        bis.close ();
        bos.close ();
    } catch (IOException ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40051686_40060569_27_36
40051686_40060569_38_47
Title: Two ListViews in a ScrollView 
----------------------------------------

public UnscrollableListView (Context context) {
    super (context);
    this.context = context;
    this.mainActivity = (MainActivity) context;
    this.setOrientation (LinearLayout.VERTICAL);
    if (! this.isInEditMode ()) {
        inflater = (LayoutInflater) context.getSystemService (context.LAYOUT_INFLATER_SERVICE);
    }
}
----------------------------------------

public UnscrollableListView (Context context, AttributeSet attrs) {
    super (context, attrs);
    this.context = context;
    this.mainActivity = (MainActivity) context;
    this.setOrientation (LinearLayout.VERTICAL);
    if (! this.isInEditMode ()) {
        inflater = (LayoutInflater) context.getSystemService (context.LAYOUT_INFLATER_SERVICE);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40058123_40058250_1_21
40058123_40058260_1_15
Title: Using switch statement for golf scenario 
----------------------------------------

public static String comment (int score, int parForHole) {
    int total = parForHole - score;
    switch (total) {
        case 3 :
            return "albatross!!!";
    }
    if (total > 4) return "condor!!!!";

    if (total <= 3) return "triple+ bogey!!!!";

    return "asdasd";
}
----------------------------------------

public static String comment (int score, int parForHole) {
    String strig;
    switch (parForHole - score) {
        case 1 :
            string = "something";
            break;
        case 2 :
            string = "something else";
            break;
        default :
            string = "default string";
            break;
    }
    return string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40061511_40061830_5_29
40061511_48729764_4_24
Title: How to print prime numbers up to the user's entered integer? 
----------------------------------------

public static void main (String [] args) {
    Scanner kbd = new Scanner (System.in);
    int limit;
    System.out.print ("Enter an integer (2 or above): ");
    limit = kbd.nextInt ();
    kbd.close ();
    if (limit >= 2) {
        System.out.println ("The prim numbers up to your interger are: " + limit + "\n");
        for (int i = 1;
        i <= limit; i ++) {
            if (isPrime (i)) {
                System.out.println (i);
            }
        }
    } else System.out.println ("Number is not vaild");

}
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    System.out.println ("enter the value of n");
    int n = sc.nextInt ();
    for (int i = 2;
    i <= n; i ++) {
        int count = 0;
        for (int j = 1;
        j <= i; j ++) {
            if (i % j == 0) {
                count ++;
            }
        }
        if (count == 2) {
            System.out.println (i + " ");
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40063548_40063668_1_18
40063548_40090209_1_13
Title: Add arrays of different lengths 
----------------------------------------

public int [] addArrays (int [] a1, int [] a2) {
    int [] result;
    int [] smallPtr;
    if (a1.length <= a2.length) {
        result = Arrays.copyOf (a2);
        smallPtr = a1;
    } else {
        result = Arrays.copyOf (a1);
        smallPtr = a2;
    }
    for (int i = 0;
    i < smallPtr.length; i ++) {
        result [i] += smallPtr [i];
    }
    return result;
}
----------------------------------------

public int [] addArrays (int [] array1, int [] array2) {
    int maxLength = (array1.length > array2.length) ? array1.length : array2.length;
    int index = 0;
    int [] sums = new int [maxLength];
    while (index < maxLength) {
        sums [index] = (index < array1.length) ? array1 [index] : 0;
        sums [index] += (index < array2.length) ? array2 [index] : 0;
        index ++;
    }
    return sums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40064732_40064866_1_10
40064732_40064975_1_21
Title: Appending arrays using method call 
----------------------------------------

int [] append (int [] ary1, int [] ary2) {
    int [] arrayOut = new int [ary1.length + ary2.length];
    for (int i = 0;
    i < ary1.length; i ++) {
        arrayOut [i] = ary1 [i];
    }
    for (int i = ary1.length;
    i < (ary1.length + ary2.length); i ++) {
        arrayOut [i] = ary2 [i - ary1.length];
    }
    return arrayOut;
}
----------------------------------------

public int [] append (int [] array1, int [] array2) {
    int array [] = new int [array1.length + array2.length];
    int counter = 0;
    int flage = 0;
    for (int i = 0;
    i < array.length; i ++) {
        if (i < array1.length) {
            array [i] = array1 [counter];
            counter ++;
        } else {
            if (flage == 0) {
                counter = 0;
                flage = 1;
            }
            array [i] = array2 [counter];
            counter ++;
        }
    }
    return array;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40066485_40066578_1_44
40066485_40066673_1_20
Title: Java Puzzle moving left and right in an array of integers 
----------------------------------------

List < Integer > solve (int...a) {
    int [] path = new int [a.length];
    Arrays.fill (path, - 1);
    Queue < Integer > posQueue = new LinkedList < > ();
    posQueue.add (0);
    path [0] = 0;
    while (! posQueue.isEmpty ()) {
        int pos = posQueue.remove ();
        int prPos = pos - a [pos];
        int nxPos = pos + a [pos];
        if (prPos >= 0 && path [prPos] == - 1) {
            path [prPos] = pos;
            posQueue.add (prPos);
        }
        if (nxPos < a.length && path [nxPos] == - 1) {
            path [nxPos] = pos;
            posQueue.add (nxPos);
        }
        if (path [a.length - 1] != - 1) {
            break;
        }
    }
    if (path [a.length - 1] == - 1) {
        return null;
    }
    List < Integer > result = new ArrayList < > ();
    int idx = a.length - 1;
    while (idx != 0) {
        result.add (0, idx);
        idx = path [idx];
    }
    result.add (0, 0);
    return result;
}
----------------------------------------

boolean solve (int...a) {
    for (int i = 0;
    i < 1 << a.length; i ++) {
        int pos = 0;
        for (int j = 0;
        j < 32; j ++) {
            if ((i & (1 << j)) == 0) {
                if ((pos -= a [pos]) < 0) {
                    break;
                }
            } else {
                if ((pos += a [pos]) >= a.length) {
                    break;
                }
            }
            if (a [pos] == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40068163_40068207_1_30
40068163_40069053_4_20
Title: Sum of the values of the rows of each column read from a CSV file 
----------------------------------------

public static void main (String [] args) throws Exception {
    String line = null;
    ArrayList < String [] > lines = new ArrayList < String [] > ();
    try {
        BufferedReader br = new BufferedReader (new FileReader (filepath));
        while ((line = br.readLine ()) != null) {
            String [] distance = line.split (",");
            lines.add (distance);
            System.out.println (line);
        }
        br.close ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
    int columnToSum = 4;
    int sum = sumRows (lines, columnToSum);
    System.out.println ("The sum of column " + columnToSum + " is: " + sum);
}
----------------------------------------

public static void main (String [] args) throws IOException {
    Scanner lineScanner = new Scanner (Paths.get ("path.to.your.csv.file"));
    int [] sumPerColumn = new int [NUMBER_OF_COLUMNS];
    while (lineScanner.hasNextLine ()) {
        String line = lineScanner.nextLine ();
        String [] values = line.split (",");
        for (int col = 0;
        col < values.length; col ++) {
            sumPerColumn [col] += Integer.parseInt (values [col]);
        }
    }
    System.out.println (Arrays.toString (sumPerColumn));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40075285_40075349_1_45
40075285_40075397_3_17
Title: How to return a variable after assigning it a value in an If/Else statement in Java? 
----------------------------------------

public static int todaysdate () {
    int absolutepday = 0;
    Scanner input = new Scanner (System.in);
    System.out.println ("Please enter today's date:");
    System.out.print ("What is the month (1-12)? ");
    int pmonth = input.nextInt ();
    System.out.print ("What is the day   (1-31)? ");
    int pday = input.nextInt ();
    if (pmonth == 1) absolutepday = pday;
    else if (pmonth == 2) absolutepday = 31 + pday;
    else if (pmonth == 3) absolutepday = 59 + pday;
    else if (pmonth == 4) absolutepday = 90 + pday;
    else if (pmonth == 5) absolutepday = 120 + pday;
    else if (pmonth == 6) absolutepday = 151 + pday;
    else if (pmonth == 7) absolutepday = 181 + pday;
    else if (pmonth == 8) absolutepday = 212 + pday;
    else if (pmonth == 9) absolutepday = 243 + pday;
    else if (pmonth == 10) absolutepday = 273 + pday;
    else if (pmonth == 11) absolutepday = 304 + pday;
    else if (pmonth == 12) absolutepday = 334 + pday;

    System.out.println (pmonth + "/" + pday + " is day #" + absolutepday + " of 365");
    System.out.println ();
    return absolutepday;
}
----------------------------------------

public static void todaysdate (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Please enter today's date:");
    System.out.print ("What is the month (1-12)? ");
    int pmonth = input.nextInt ();
    System.out.print ("What is the day   (1-31)? ");
    int pday = input.nextInt ();
    Integer absolutePDay = getAbsolutePDay (pmonth, pday);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40075285_40075397_3_17
40075285_40075425_1_36
Title: How to return a variable after assigning it a value in an If/Else statement in Java? 
----------------------------------------

public static void todaysdate (String [] args) {
    Scanner input = new Scanner (System.in);
    System.out.println ("Please enter today's date:");
    System.out.print ("What is the month (1-12)? ");
    int pmonth = input.nextInt ();
    System.out.print ("What is the day   (1-31)? ");
    int pday = input.nextInt ();
    Integer absolutePDay = getAbsolutePDay (pmonth, pday);
}
----------------------------------------

public static int todaysdate () {
    int absolutepday = 0;
    Scanner input = new Scanner (System.in);
    System.out.println ("Please enter today's date:");
    System.out.print ("What is the month (1-12)? ");
    int pmonth = input.nextInt ();
    System.out.print ("What is the day (1-31)? ");
    int pday = input.nextInt ();
    if (pmonth == 1) absolutepday = pday;
    else if (pmonth == 2) absolutepday = 31 + pday;
    else if (pmonth == 3) absolutepday = 59 + pday;
    else if (pmonth == 4) absolutepday = 90 + pday;
    else if (pmonth == 5) absolutepday = 120 + pday;
    else if (pmonth == 6) absolutepday = 151 + pday;
    else if (pmonth == 7) absolutepday = 181 + pday;
    else if (pmonth == 8) absolutepday = 212 + pday;
    else if (pmonth == 9) absolutepday = 243 + pday;
    else if (pmonth == 10) absolutepday = 273 + pday;
    else if (pmonth == 11) absolutepday = 304 + pday;
    else if (pmonth == 12) absolutepday = 334 + pday;

    System.out.println (pmonth + "/" + pday + " is day #" + absolutepday + " of 365");
    System.out.println ();
    return absolutepday;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40076117_40076266_7_29
40076117_40076318_7_26
Title: ways to Java for Loops 
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    int end;
    int start;
    List < Integer > evenNumbers = new ArrayList < Integer > ();
    System.out.println ("Enter the starting number");
    start = keyboard.nextInt ();
    System.out.println ("Enter the ending number");
    end = keyboard.nextInt ();
    for (int i = start;
    i <= end; i ++) {
        if (i % 2 == 0) {
            evenNumbers.add (i);
        }
    }
    System.out.println ("There are " + evenNumbers.size () + " even numbers between [" + start + "," + end + "]");
    System.out.println ("The numbers are: " + evenNumbers.toString ());
}
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    int end;
    int start;
    List < Integer > evenNumbers = new ArrayList < Integer > ();
    System.out.println ("Enter the starting number");
    start = keyboard.nextInt ();
    System.out.println ("Enter the ending number");
    end = keyboard.nextInt ();
    keyboard.close ();
    for (int i = start;
    i <= end; i ++) {
        if (i % 2 == 0) {
            evenNumbers.add (i);
        }
    }
    if (! evenNumbers.isEmpty ()) {
        System.out.println ("Even Numbers between " + start + " and " + end);
        System.out.println (evenNumbers);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40077922_40078449_5_38
40077922_40078528_17_34
Title: How to split with multiple symbols and call methods based on the symbol 
----------------------------------------

public void input (String nums) {
    String operator = findSymbol (nums);
    if (operator == null) {
        System.out.println ("Invalid input");
        return;
    }
    String [] split = nums.split (operator);
    int left = Integer.parseInt (split [0]);
    int right = Integer.parseInt (split [1]);
    double result = 0;
    switch (operator) {
        case "-" :
            result = subtract (left, right);
            break;
        case "+" :
            result = add (left, right);
            break;
        case "/" :
            result = divide (left, right);
        case "*" :
            result = multiply (left, right);
            break;
        case "^" :
            result = pwr (left, right);
            break;
        default :
            System.out.println ("Invalid operator");
    }
}
----------------------------------------

public String input (String nums) {
    String [] split = nums.split ("[-.+,/,*,^]");
    for (int i = 0;
    i < split.length; i ++) {
        System.out.println ("" + split [i].length ());
    }
    char operation = nums.charAt (split [0].length ());
    int left = Integer.parseInt (split [0]);
    int right = Integer.parseInt (split [1]);
    double result = 0;
    Operation op = operations.get (Character.valueOf (operation));
    if (op != null) {
        result = op.resultFor (left, right);
        System.out.println ("Result :" + result);
    } else {
        System.out.println ("Error: Unknown operator");
    }
    return String.valueOf (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40079377_40079437_15_33
40079377_40079440_15_29
Title: I put my member method and main methods in different files. Illegal start of expression error 
----------------------------------------

public FacebookLite (String name, int age) {
    this.name = name;
    this.age = age;
    mood = "";
    fIdx = 0;
    fArr = new String [200];
    pIdx = 0;
    pArr = new String [200];
    ageVis = true;
    for (int i = 0;
    i < fArr.length; i ++) {
        fArr [i] = "";
        pArr [i] = "";
    }
}
----------------------------------------

public FacebookLite (String name, int age) {
    this.name = name;
    this.age = age;
    mood = "";
    fIdx = 0;
    fArr = new String [200];
    pIdx = 0;
    pArr = new String [200];
    ageVis = true;
    for (int i = 0;
    i < fArr.length; i ++) {
        fArr [i] = "";
        pArr [i] = "";
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40084686_40084964_1_41
40084686_40085103_3_37
Title: I am trying to write a program that allows a user to input a series of exam scores as integers 
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = 0;
    boolean isNumberEntered = false;
    Scanner keyboard = new Scanner (System.in);
    while (score != - 99) {
        System.out.print ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score == - 99) {
            break;
        } else {
            if (! isNumberEntered) isNumberEntered = true;

            if (score > max) max = score;

            if (score < min) min = score;

        }
    }
    if (isNumberEntered) {
        System.out.println ("Largest: " + max);
        System.out.println ("Smallest: " + min);
    } else {
        System.out.println ("You did not enter any numbers!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = - 100;
    boolean isAnyScore = false;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter an integer, or -99 to quit: ");
    System.out.println ();
    while (true) {
        System.out.print ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score == - 99) {
            break;
        } else {
            isAnyScore = true;
        }
        if (score > max) {
            max = score;
        }
        if (score < min) {
            min = score;
        }
    }
    if (! isAnyScore) {
        System.out.println ("You did not enter any numbers");
    } else {
        System.out.println ("Largest: " + max);
        System.out.println ("Smallest: " + min);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40084686_40084964_1_41
40084686_40085756_7_48
Title: I am trying to write a program that allows a user to input a series of exam scores as integers 
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = 0;
    boolean isNumberEntered = false;
    Scanner keyboard = new Scanner (System.in);
    while (score != - 99) {
        System.out.print ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score == - 99) {
            break;
        } else {
            if (! isNumberEntered) isNumberEntered = true;

            if (score > max) max = score;

            if (score < min) min = score;

        }
    }
    if (isNumberEntered) {
        System.out.println ("Largest: " + max);
        System.out.println ("Smallest: " + min);
    } else {
        System.out.println ("You did not enter any numbers!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int min = 100;
    int max = 0;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter an integer, or -99 to quit: ");
    int score = keyboard.nextInt ();
    if (score < 0 || score > 100) {
        System.out.println ("You did not enter any numbers.");
    }
    if (score >= 0 || score <= 100) {
        while (score != - 99) {
            if (score > max) max = score;

            if (score < min) min = score;

            System.out.print ("Enter an integer, or -99 to quit: ");
            score = keyboard.nextInt ();
            if (score == - 99) {
                System.out.println ();
            } else if (score != - 99 && score < 0 || score > 100) {
                System.out.println ("You did not enter any numbers.");
            }

        }
    }
    System.out.println ("Largest: " + max);
    System.out.println ("Smallest: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40084686_40084964_1_41
40084686_40086008_3_28
Title: I am trying to write a program that allows a user to input a series of exam scores as integers 
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = 0;
    boolean isNumberEntered = false;
    Scanner keyboard = new Scanner (System.in);
    while (score != - 99) {
        System.out.print ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score == - 99) {
            break;
        } else {
            if (! isNumberEntered) isNumberEntered = true;

            if (score > max) max = score;

            if (score < min) min = score;

        }
    }
    if (isNumberEntered) {
        System.out.println ("Largest: " + max);
        System.out.println ("Smallest: " + min);
    } else {
        System.out.println ("You did not enter any numbers!");
    }
}
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = 0;
    Scanner keyboard = new Scanner (System.in);
    int i = 1;
    do {
        System.out.println ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score > max) {
            max = score;
        }
        if (score < min) {
            min = score;
        }
        i ++;
        if (i > 5) {
            break;
        }
    } while ((score != - 99));
    System.out.println ("Largest: " + max);
    System.out.println ("Smallest: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40084686_40085103_3_37
40084686_40085756_7_48
Title: I am trying to write a program that allows a user to input a series of exam scores as integers 
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = - 100;
    boolean isAnyScore = false;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter an integer, or -99 to quit: ");
    System.out.println ();
    while (true) {
        System.out.print ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score == - 99) {
            break;
        } else {
            isAnyScore = true;
        }
        if (score > max) {
            max = score;
        }
        if (score < min) {
            min = score;
        }
    }
    if (! isAnyScore) {
        System.out.println ("You did not enter any numbers");
    } else {
        System.out.println ("Largest: " + max);
        System.out.println ("Smallest: " + min);
    }
}
----------------------------------------

public static void main (String [] args) {
    int min = 100;
    int max = 0;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter an integer, or -99 to quit: ");
    int score = keyboard.nextInt ();
    if (score < 0 || score > 100) {
        System.out.println ("You did not enter any numbers.");
    }
    if (score >= 0 || score <= 100) {
        while (score != - 99) {
            if (score > max) max = score;

            if (score < min) min = score;

            System.out.print ("Enter an integer, or -99 to quit: ");
            score = keyboard.nextInt ();
            if (score == - 99) {
                System.out.println ();
            } else if (score != - 99 && score < 0 || score > 100) {
                System.out.println ("You did not enter any numbers.");
            }

        }
    }
    System.out.println ("Largest: " + max);
    System.out.println ("Smallest: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40084686_40085103_3_37
40084686_40086008_3_28
Title: I am trying to write a program that allows a user to input a series of exam scores as integers 
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = - 100;
    boolean isAnyScore = false;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter an integer, or -99 to quit: ");
    System.out.println ();
    while (true) {
        System.out.print ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score == - 99) {
            break;
        } else {
            isAnyScore = true;
        }
        if (score > max) {
            max = score;
        }
        if (score < min) {
            min = score;
        }
    }
    if (! isAnyScore) {
        System.out.println ("You did not enter any numbers");
    } else {
        System.out.println ("Largest: " + max);
        System.out.println ("Smallest: " + min);
    }
}
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = 0;
    Scanner keyboard = new Scanner (System.in);
    int i = 1;
    do {
        System.out.println ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score > max) {
            max = score;
        }
        if (score < min) {
            min = score;
        }
        i ++;
        if (i > 5) {
            break;
        }
    } while ((score != - 99));
    System.out.println ("Largest: " + max);
    System.out.println ("Smallest: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40084686_40085756_7_48
40084686_40086008_3_28
Title: I am trying to write a program that allows a user to input a series of exam scores as integers 
----------------------------------------

public static void main (String [] args) {
    int min = 100;
    int max = 0;
    Scanner keyboard = new Scanner (System.in);
    System.out.print ("Enter an integer, or -99 to quit: ");
    int score = keyboard.nextInt ();
    if (score < 0 || score > 100) {
        System.out.println ("You did not enter any numbers.");
    }
    if (score >= 0 || score <= 100) {
        while (score != - 99) {
            if (score > max) max = score;

            if (score < min) min = score;

            System.out.print ("Enter an integer, or -99 to quit: ");
            score = keyboard.nextInt ();
            if (score == - 99) {
                System.out.println ();
            } else if (score != - 99 && score < 0 || score > 100) {
                System.out.println ("You did not enter any numbers.");
            }

        }
    }
    System.out.println ("Largest: " + max);
    System.out.println ("Smallest: " + min);
}
----------------------------------------

public static void main (String [] args) {
    int score = 0;
    int min = 100;
    int max = 0;
    Scanner keyboard = new Scanner (System.in);
    int i = 1;
    do {
        System.out.println ("Enter an integer, or -99 to quit: ");
        score = keyboard.nextInt ();
        if (score > max) {
            max = score;
        }
        if (score < min) {
            min = score;
        }
        i ++;
        if (i > 5) {
            break;
        }
    } while ((score != - 99));
    System.out.println ("Largest: " + max);
    System.out.println ("Smallest: " + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4008905_4008928_14_29
4008905_4008967_6_28
Title: Read multiline text with values separated by whitespaces 
----------------------------------------

public static void main (String args []) {
    try {
        FileInputStream fstream = new FileInputStream ("textfile.txt");
        DataInputStream in = new DataInputStream (fstream);
        BufferedReader br = new BufferedReader (new InputStreamReader (in));
        String strLine;
        while ((strLine = br.readLine ()) != null) {
            String [] tokens = str.split (" ");
            Record record = new Record (tokens [0], tokens [1], tokens [2]);
        }
        in.close ();
    } catch (Exception e) {
        System.err.println ("Error: " + e.getMessage ());
    }
}
----------------------------------------

public static void main (String [] args) {
    File file = new File ("tsetfile.txt");
    try {
        Scanner scanner = new Scanner (file);
        while (scanner.hasNextLine ()) {
            String line = scanner.nextLine ();
            System.out.println (line);
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40090459_40154000_28_79
40090459_40154000_65_75
Title: Spring batch - restart FAILED job that uses TaskExecutor 
----------------------------------------

public JobExecution run (final Job job, final JobParameters jobParameters) throws JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException, JobParametersInvalidException {
    Assert.notNull (job, "The Job must not be null.");
    Assert.notNull (jobParameters, "The JobParameters must not be null.");
    final AtomicReference < JobExecution > executionReference = new AtomicReference < > ();
    JobExecution lastExecution = jobRepository.getLastJobExecution (job.getName (), jobParameters);
    if (lastExecution != null) {
        if (! job.isRestartable ()) {
            throw new JobRestartException ("JobInstance already exists and is not restartable");
        }
        for (StepExecution execution : lastExecution.getStepExecutions ()) {
            BatchStatus status = execution.getStatus ();
            if (status.isRunning () || status == BatchStatus.STOPPING) {
                throw new JobExecutionAlreadyRunningException ("A job execution for this job is already running: " + lastExecution);
            } else if (status == BatchStatus.UNKNOWN) {
                throw new JobRestartException ("Cannot restart step [" + execution.getStepName () + "] from UNKNOWN status. " + "The last execution ended with a failure that could not be rolled back, " + "so it may be dangerous to proceed. Manual intervention is probably necessary.");
            }

        }
    }
    job.getJobParametersValidator ().validate (jobParameters);
    taskExecutor.execute (new Runnable () {
        @Override
        public void run () {
            try {
                retryTemplate.execute (new FaultTolerantJobRetryCallback (executionReference, job, jobParameters));
            } catch (TaskRejectedException e) {
                executionReference.get ().upgradeStatus (BatchStatus.FAILED);
                if (executionReference.get ().getExitStatus ().equals (ExitStatus.UNKNOWN)) {
                    executionReference.get ().setExitStatus (ExitStatus.FAILED.addExitDescription (e));
                }
                jobRepository.update (executionReference.get ());
            }
        }}

    );
    return executionReference.get ();
}
----------------------------------------

public void run () {
    try {
        retryTemplate.execute (new FaultTolerantJobRetryCallback (executionReference, job, jobParameters));
    } catch (TaskRejectedException e) {
        executionReference.get ().upgradeStatus (BatchStatus.FAILED);
        if (executionReference.get ().getExitStatus ().equals (ExitStatus.UNKNOWN)) {
            executionReference.get ().setExitStatus (ExitStatus.FAILED.addExitDescription (e));
        }
        jobRepository.update (executionReference.get ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40093859_40094313_1_26
40093859_40094624_9_30
Title: My Java methods are not running correctly and causing my program to compile incorrectly 
----------------------------------------

public static void main (String [] args) {
    String scaleOne;
    String scaleTwo;
    System.out.println ("What scale is your temp currently in?\n" + "1: Fahrenheit\n" + "2: Celsius\n" + "3: Kelvin\n" + "Please enter 1, 2, or 3: \n");
    scaleOne = getScale ();
    System.out.println ("What scale would you like to convert to?\n" + "1: Fahrenheit\n" + "2: Celsius\n" + "3: Kelvin\n" + "Please enter 1, 2, or 3:\n ");
    scaleTwo = getScale ();
    System.out.print ("Your final temp is: " + convert (scaleOne, scaleTwo));
}
----------------------------------------

public static void main (String [] args) {
    char cont = 'E';
    do {
        temp1 = getTemp ();
        scale1 = scaleOne ();
        scale2 = toScale ();
        System.out.print ("Your final temp is: " + convert () + ' ' + scale2);
    } while (cont == 'N');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40095682_40095835_1_20
40095682_40095893_3_14
Title: I am trying to figure out CollatzSequence 
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter Cases: ");
    int cases = in.nextInt ();
    for (int i = 0;
    i <= cases; i ++) {
        int count = 0;
        int a = in.nextInt ();
        do {
            if (a % 2 == 1) {
                a = (3 * a) + 1;
                count ++;
            } else if (a % 2 == 0) {
                a = a / 2;
                count ++;
            }

        } while (a != 1);
        System.out.println (count);
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner in = new Scanner (System.in);
    System.out.println ("Enter Cases: ");
    int cases = in.nextInt ();
    for (int i = 1;
    i <= cases; i ++) {
        System.out.printf ("Enter Sample (%d): ", i);
        int a = in.nextInt ();
        int count = collatzSequenceLength (a);
        System.out.printf ("Input %d -> %d steps to 1.%n", a, count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40096737_40099731_17_26
40096737_40099731_47_58
Title: Prime Factoring in Java - Intro Programming 
----------------------------------------

static boolean isPrime (int num) {
    for (int i = 2;
    i < num; i ++) {
        if (num % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

static boolean isPrime (int num) {
    int i = 2;
    while (i < num) {
        if (num % i == 0) {
            return false;
        }
        i = i + 1;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40099540_40099606_1_10
40099540_40099617_1_13
Title: String and 2 letters 
----------------------------------------

public int countAxA (String s, char one, char two) {
    char [] cs = s.toCharArray ();
    int count = 0;
    for (int i = 0;
    i < cs.length - 2; i ++) {
        if (cs [i] == one && cs [i + 2] == two) {
            count ++;
        }
    }
    return count;
}
----------------------------------------

public int countAxA (String str, char c1, char c2) {
    int count = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == c1) {
            if (i + 2 < str.length () && str.charAt (i + 2) == c2) count ++;

        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40099540_40099617_1_13
40099540_40099619_1_14
Title: String and 2 letters 
----------------------------------------

public int countAxA (String str, char c1, char c2) {
    int count = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == c1) {
            if (i + 2 < str.length () && str.charAt (i + 2) == c2) count ++;

        }
    }
    return count;
}
----------------------------------------

public int countAxA (String str, char c1, char c2) {
    int count = 0;
    for (int i = 0;
    i < str.length () - 2; i ++) {
        if (str.charAt (i) == c1 && str.charAt (i + 2) == c2) {
            count ++;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40099540_40099617_1_13
40099540_40099708_1_12
Title: String and 2 letters 
----------------------------------------

public int countAxA (String str, char c1, char c2) {
    int count = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == c1) {
            if (i + 2 < str.length () && str.charAt (i + 2) == c2) count ++;

        }
    }
    return count;
}
----------------------------------------

public int countAxA (String str, char c1, char c2) {
    int count = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == c1 && i + 2 < str.length && str.charAt (i + 2) == c2) {
            count ++;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40103005_40104615_1_31
40103005_50181602_1_18
Title: Compute recursively the largest substring which starts and ends with sub and return its length 
----------------------------------------

public int strDist (String str, String sub) {
    if (str.length () < sub.length ()) return 0;

    if (str.equals (sub)) return str.length ();

    if (str.length () < 2) {
        if (str.contains (sub)) {
            return str.length ();
        }
        return 0;
    }
    if (str.startsWith (sub) && str.endsWith (sub)) {
        return str.length ();
    }
    if (str.startsWith (sub)) {
        return strDist (str.substring (0, str.length () - 1), sub);
    }
    if (str.endsWith (sub)) return strDist (str.substring (1), sub);

    return strDist (str.substring (1, str.length () - 1), sub);
}
----------------------------------------

public int strDist (String str, String sub) {
    if (str.length () < sub.length ()) return 0;

    if (! str.contains (sub)) return 0;

    if (str.startsWith (sub) && str.endsWith (sub)) return str.length ();

    if (str.startsWith (sub)) return strDist (str.substring (0, str.length () - 1), sub);

    if (str.endsWith (sub)) return strDist (str.substring (1, str.length ()), sub);
    else return strDist (str.substring (1, str.length () - 1), sub);

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40103005_40104615_1_31
40103005_51805449_1_17
Title: Compute recursively the largest substring which starts and ends with sub and return its length 
----------------------------------------

public int strDist (String str, String sub) {
    if (str.length () < sub.length ()) return 0;

    if (str.equals (sub)) return str.length ();

    if (str.length () < 2) {
        if (str.contains (sub)) {
            return str.length ();
        }
        return 0;
    }
    if (str.startsWith (sub) && str.endsWith (sub)) {
        return str.length ();
    }
    if (str.startsWith (sub)) {
        return strDist (str.substring (0, str.length () - 1), sub);
    }
    if (str.endsWith (sub)) return strDist (str.substring (1), sub);

    return strDist (str.substring (1, str.length () - 1), sub);
}
----------------------------------------

public int strDist (String str, String sub) {
    if (str.length () < sub.length () || ! str.contains (sub)) return 0;

    if (str.startsWith (sub) && str.endsWith (sub)) {
        return str.length ();
    }
    if (str.startsWith (sub)) {
        return strDist (str.substring (0, str.length () - 1), sub);
    }
    return strDist (str.substring (1), sub);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40103005_50181602_1_18
40103005_51805449_1_17
Title: Compute recursively the largest substring which starts and ends with sub and return its length 
----------------------------------------

public int strDist (String str, String sub) {
    if (str.length () < sub.length ()) return 0;

    if (! str.contains (sub)) return 0;

    if (str.startsWith (sub) && str.endsWith (sub)) return str.length ();

    if (str.startsWith (sub)) return strDist (str.substring (0, str.length () - 1), sub);

    if (str.endsWith (sub)) return strDist (str.substring (1, str.length ()), sub);
    else return strDist (str.substring (1, str.length () - 1), sub);

}
----------------------------------------

public int strDist (String str, String sub) {
    if (str.length () < sub.length () || ! str.contains (sub)) return 0;

    if (str.startsWith (sub) && str.endsWith (sub)) {
        return str.length ();
    }
    if (str.startsWith (sub)) {
        return strDist (str.substring (0, str.length () - 1), sub);
    }
    return strDist (str.substring (1), sub);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40104688_40105390_3_42
40104688_40106165_1_32
Title: JavaFX - Center Child Stage to Parent Stage 
----------------------------------------

public void start (Stage primaryStage) {
    try {
        BorderPane root = new BorderPane ();
        Scene scene = new Scene (root, 400, 400);
        Button button = new Button ("Open another Stage");
        button.setOnAction (e -> {
            Stage popUpStage = new Stage ();
            Scene popUpScene = new Scene (new Button ());
            popUpStage.setScene (popUpScene);
            double centerXPosition = primaryStage.getX () + primaryStage.getWidth () / 2d;
            double centerYPosition = primaryStage.getY () + primaryStage.getHeight () / 2d;
            popUpStage.setOnShowing (ev -> popUpStage.hide ());
            popUpStage.setOnShown (ev -> {
                popUpStage.setX (centerXPosition - popUpStage.getWidth () / 2d);
                popUpStage.setY (centerYPosition - popUpStage.getHeight () / 2d);
                popUpStage.show ();
            });
            popUpStage.showAndWait ();
        });
        root.setCenter (button);
        primaryStage.setScene (scene);
        primaryStage.show ();
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

@Override
public void start (Stage primaryStage) {
    Button btnMain = new Button ("show");
    btnMain.setOnAction (evt -> {
        Stage stage = new Stage ();
        Button btn = new Button ("Close");
        btn.setOnAction ((ActionEvent event) -> {
            stage.close ();
        });
        StackPane root = new StackPane ();
        root.getChildren ().add (btn);
        Bounds mainBounds = primaryStage.getScene ().getRoot ().getLayoutBounds ();
        Scene scene = new Scene (root, 400, 400);
        stage.setScene (scene);
        scene.getRoot ().applyCss ();
        scene.getRoot ().layout ();
        Bounds rootBounds = scene.getRoot ().getLayoutBounds ();
        stage.setX (primaryStage.getX () + (mainBounds.getWidth () - rootBounds.getWidth ()) / 2);
        stage.setY (primaryStage.getY () + (mainBounds.getHeight () - rootBounds.getHeight ()) / 2);
        stage.showAndWait ();
        System.out.println ("done");
    });
    Scene mainScene = new Scene (new StackPane (btnMain), 600, 600);
    primaryStage.setScene (mainScene);
    primaryStage.show ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40112977_40113287_6_24
40112977_40113297_1_16
Title: Flipping Bits In A String 
----------------------------------------

public static int binaryToDecimalAssumingOnesComp (String binary) {
    int convertedToDecimal = 0;
    if (binary.charAt (0) == '0') {
        convertedToDecimal = Integer.parseInt (binary, 2);
    } else if (binary.charAt (0) == '1') {
        StringBuilder noMSB = new StringBuilder (binary.substring (1));
        for (int i = 0;
        i < noMSB.length (); i ++) {
            if (noMSB.charAt (i) == '1') {
                noMSB.setCharAt (i, '0');
            } else if (noMSB.charAt (i) == '0') {
                noMSB.setCharAt (i, '1');
            }

        }
        String s = noMSB.toString ();
        convertedToDecimal = Integer.parseInt (s, 2);
    }

    return convertedToDecimal;
}
----------------------------------------

public static int binaryToDecimalAssumingOnesComp (String binary) {
    if (binary.charAt (0) == '0') {
        return Integer.parseInt (binary, 2);
    } else {
        StringBuilder noMSB = new StringBuilder (binary.substring (1));
        for (int i = 0;
        i < noMSB.length (); i ++) {
            if (noMSB.charAt (i) == '1') {
                noMSB.setCharAt (i, '0');
            } else if (noMSB.charAt (i) == '0') {
                noMSB.setCharAt (i, '1');
            }

        }
        return Integer.parseInt (noMSB.toString (), 2);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40113986_40114373_1_12
40113986_40114379_1_16
Title: Calling a method for calculation 
----------------------------------------

public static void main (String [] args) {
    List < Beer > beers = new ArrayList < > ();
    beers.add (new Beer ("firstBeerName", 0.04));
    beers.add (new Beer ("secondBeerName", 0.06));
    Scanner reader = new Scanner (System.in);
    System.out.println ("What’s the weight of the person consuming said beverages?");
    double weight = reader.nextDouble ();
    DecimalFormat decimalFormat = new DecimalFormat ("0.000");
    for (Beer beer : beers) {
        System.out.println ("It would take " + decimalFormat.format (beer.Intoxicated (weight)) + " " + beer.getName () + " beers to become intoxicated.");
    }
}
----------------------------------------

public static void main (String [] args) {
    Beer beer1 = new Beer ().beer1.setName ("firstBeerName");
    beer1.setAlcoholContent (3.166);
    Scanner reader = new Scanner (System.in);
    System.out.println ("What’s the weight of the person consuming said beverages?");
    double weight = reader.nextDouble ();
    double answer = beer1.Intoxicated (weight);
    System.out.println ("It would take " + answer + " " + beer1.getName () + " beers to become intoxicated.")
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40113986_40114373_1_12
40113986_40114396_1_13
Title: Calling a method for calculation 
----------------------------------------

public static void main (String [] args) {
    List < Beer > beers = new ArrayList < > ();
    beers.add (new Beer ("firstBeerName", 0.04));
    beers.add (new Beer ("secondBeerName", 0.06));
    Scanner reader = new Scanner (System.in);
    System.out.println ("What’s the weight of the person consuming said beverages?");
    double weight = reader.nextDouble ();
    DecimalFormat decimalFormat = new DecimalFormat ("0.000");
    for (Beer beer : beers) {
        System.out.println ("It would take " + decimalFormat.format (beer.Intoxicated (weight)) + " " + beer.getName () + " beers to become intoxicated.");
    }
}
----------------------------------------

public static void main (String [] args) {
    Beer blueMoon = new Beer ("Blue Moon", 5.4);
    Beer hoegaarden = new Beer ("Hoegaarden", 4.9);
    System.out.println ("Enter your weight: ");
    Scanner input = new Scanner ();
    Double weight = input.nextLine ();
    double value = beer1.Intoxicated (weight);
    System.out.println ("It would take " + value + " of " + blueMoon.getName () + " to become intoxicated.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40113986_40114379_1_16
40113986_40114396_1_13
Title: Calling a method for calculation 
----------------------------------------

public static void main (String [] args) {
    Beer beer1 = new Beer ().beer1.setName ("firstBeerName");
    beer1.setAlcoholContent (3.166);
    Scanner reader = new Scanner (System.in);
    System.out.println ("What’s the weight of the person consuming said beverages?");
    double weight = reader.nextDouble ();
    double answer = beer1.Intoxicated (weight);
    System.out.println ("It would take " + answer + " " + beer1.getName () + " beers to become intoxicated.")
}
----------------------------------------

public static void main (String [] args) {
    Beer blueMoon = new Beer ("Blue Moon", 5.4);
    Beer hoegaarden = new Beer ("Hoegaarden", 4.9);
    System.out.println ("Enter your weight: ");
    Scanner input = new Scanner ();
    Double weight = input.nextLine ();
    double value = beer1.Intoxicated (weight);
    System.out.println ("It would take " + value + " of " + blueMoon.getName () + " to become intoxicated.");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40115973_40117118_50_60
40115973_40117118_9_17
Title: "Pausing a CountDownTimer whilst another one is running in Android Studio then resuming it when the other one ends?" 
----------------------------------------

public void run () {
    try {
        while (true) {
            String message = producer.getMessage ();
            System.out.println ("Got message: " + message);
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            putMessage ();
            sleep (4000);
        }
    } catch (InterruptedException e) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40117746_40119180_8_24
40117746_40119268_28_39
Title: ArrayList in reverse order 
----------------------------------------

private static ArrayList < String > reverseOrder (List < String > food, String start, String end) throws Exception {
    int startIndex = food.indexOf (start);
    if (startIndex < 0) {
        throw new Exception (start + " not found");
    }
    int endIndex = food.lastIndexOf (end);
    if (endIndex < 0) {
        throw new Exception (end + " not found");
    }
    ArrayList < String > lst = new ArrayList < > ();
    while (endIndex >= startIndex) {
        lst.add (food.get (endIndex --));
    }
    return lst;
}
----------------------------------------

public ArrayList < String > reverseOrder (ArrayList < String > food, String last, String first) {
    ArrayList < String > reversed_food = new ArrayList < String > (food);
    reversed_food.remove (first);
    reversed_food.remove (last);
    Collections.reverse (reversed_food);
    reversed_food.add (0, first);
    reversed_food.add (last);
    System.out.println ("Array ordered according to challenge: " + reversed_food);
    return reversed_food;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40121112_40121171_4_17
40121112_40127040_4_22
Title: How to convert base64 data:url to link url? 
----------------------------------------

public Drawable getDrawable (String source) {
    try {
        String base64Image = source.substring ("data:image/jpeg;base64,".length);
        byte [] decodedString = Base64.decode (base64Image, Base64.DEFAULT);
        Bitmap bitmap = BitmapFactory.decodeByteArray (decodedString, 0, decodedString.length);
        Drawable drawable = new BitmapDrawable (getActivity ().getResources (), bitmap);
        drawable.setBounds (0, 0, drawable.getIntrinsicWidth (), drawable.getIntrinsicHeight ());
        return drawable;
    } catch (IOException exception) {
        Log.v ("IOException", exception.getMessage ());
        return null;
    }
}
----------------------------------------

public Drawable getDrawable (String source) {
    try {
        String [] str = source.split ("base64");
        Base64InputStream is = new Base64InputStream (new ByteArrayInputStream (str [1].getBytes ()), 0);
        Bitmap decodedByte = BitmapFactory.decodeStream (is);
        Drawable drawable = new BitmapDrawable (getResources (), decodedByte);
        drawable.setBounds (0, 0, drawable.getIntrinsicWidth (), drawable.getIntrinsicHeight ());
        return drawable;
    } catch (Exception e) {
        e.getMessage ();
        return null;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40141711_40141964_32_45
40141711_40141976_32_45
Title: adding to a double in a switch statement 
----------------------------------------

public static void menu () {
    Scanner input = new Scanner (System.in);
    System.out.println ("Counter: " + counter);
    System.out.println ("Total Price: $" + totalPrice);
    System.out.println ("-----------------------------");
    System.out.println ("  (1) American    1.99       ");
    System.out.println ("  (2) Espresso    2.99       ");
    System.out.println ("  (3) Latte       3.99       ");
    System.out.println ("-----------------------------");
    System.out.println ("");
    System.out.println (" Please make a selection \n\t or enter 0 to total and quit.");
    custChoice = input.nextInt ();
}
----------------------------------------

public static void menu () {
    Scanner input = new Scanner (System.in);
    System.out.println ("Counter: " + counter);
    System.out.println ("Total Price: $" + totalPrice);
    System.out.println ("-----------------------------");
    System.out.println ("  (1) American    1.99       ");
    System.out.println ("  (2) Espresso    2.99       ");
    System.out.println ("  (3) Latte       3.99       ");
    System.out.println ("-----------------------------");
    System.out.println ("");
    System.out.println (" Please make a selection \n\t or enter 0 to total and quit.");
    custChoice = input.nextInt ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40141711_40141964_32_45
40141711_40142783_40_53
Title: adding to a double in a switch statement 
----------------------------------------

public static void menu () {
    Scanner input = new Scanner (System.in);
    System.out.println ("Counter: " + counter);
    System.out.println ("Total Price: $" + totalPrice);
    System.out.println ("-----------------------------");
    System.out.println ("  (1) American    1.99       ");
    System.out.println ("  (2) Espresso    2.99       ");
    System.out.println ("  (3) Latte       3.99       ");
    System.out.println ("-----------------------------");
    System.out.println ("");
    System.out.println (" Please make a selection \n\t or enter 0 to total and quit.");
    custChoice = input.nextInt ();
}
----------------------------------------

public static void menu () {
    Scanner input = new Scanner (System.in);
    System.out.println ("Counter: " + counter);
    System.out.println ("Total Price: $" + totalPrice);
    System.out.println ("-----------------------------");
    System.out.println ("  (1) American    1.99       ");
    System.out.println ("  (2) Espresso    2.99       ");
    System.out.println ("  (3) Latte       3.99       ");
    System.out.println ("-----------------------------");
    System.out.println ("");
    System.out.println (" Please make a selection \n\t or enter 0 to total and quit.");
    custChoice = input.nextInt ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40141711_40141964_9_30
40141711_40141976_8_30
Title: adding to a double in a switch statement 
----------------------------------------

public static void main (String [] args) {
    while (counter <= 3) {
        menu ();
        switch (custChoice) {
            case 1 :
                totalPrice += priceA;
                break;
            case 2 :
                totalPrice += priceE;
                break;
            case 3 :
                totalPrice += priceL;
                break;
            case 0 :
                System.out.println ("Your total is $" + totalPrice);
                return;
            default :
                System.out.println ("Unrecognised command");
        }
        counter ++;
    }
}
----------------------------------------

public static void main (String [] args) {
    menu ();
    while (counter < 3) {
        switch (custChoice) {
            case 1 :
                totalPrice = totalPrice + priceA;
                break;
            case 2 :
                totalPrice = totalPrice + priceE;
                break;
            case 3 :
                totalPrice = totalPrice + priceL;
                break;
            case 0 :
                System.out.println ("Your total is $" + totalPrice);
                return;
            default :
                break;
        }
        counter ++;
        menu ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40141711_40141964_9_30
40141711_40142783_10_34
Title: adding to a double in a switch statement 
----------------------------------------

public static void main (String [] args) {
    while (counter <= 3) {
        menu ();
        switch (custChoice) {
            case 1 :
                totalPrice += priceA;
                break;
            case 2 :
                totalPrice += priceE;
                break;
            case 3 :
                totalPrice += priceL;
                break;
            case 0 :
                System.out.println ("Your total is $" + totalPrice);
                return;
            default :
                System.out.println ("Unrecognised command");
        }
        counter ++;
    }
}
----------------------------------------

public static void main (String [] args) {
    while (counter <= 3) {
        menu ();
        switch (custChoice) {
            case 1 :
                totalPrice += priceA;
                show_total ();
                break;
            case 2 :
                totalPrice += priceE;
                show_total ();
                break;
            case 3 :
                totalPrice += priceL;
                show_total ();
                break;
            case 0 :
                show_total ();
                System.exit (0);
            default :
                System.out.println ("Please try again");
        }
        counter ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40141711_40141976_32_45
40141711_40142783_40_53
Title: adding to a double in a switch statement 
----------------------------------------

public static void menu () {
    Scanner input = new Scanner (System.in);
    System.out.println ("Counter: " + counter);
    System.out.println ("Total Price: $" + totalPrice);
    System.out.println ("-----------------------------");
    System.out.println ("  (1) American    1.99       ");
    System.out.println ("  (2) Espresso    2.99       ");
    System.out.println ("  (3) Latte       3.99       ");
    System.out.println ("-----------------------------");
    System.out.println ("");
    System.out.println (" Please make a selection \n\t or enter 0 to total and quit.");
    custChoice = input.nextInt ();
}
----------------------------------------

public static void menu () {
    Scanner input = new Scanner (System.in);
    System.out.println ("Counter: " + counter);
    System.out.println ("Total Price: $" + totalPrice);
    System.out.println ("-----------------------------");
    System.out.println ("  (1) American    1.99       ");
    System.out.println ("  (2) Espresso    2.99       ");
    System.out.println ("  (3) Latte       3.99       ");
    System.out.println ("-----------------------------");
    System.out.println ("");
    System.out.println (" Please make a selection \n\t or enter 0 to total and quit.");
    custChoice = input.nextInt ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40141711_40141976_8_30
40141711_40142783_10_34
Title: adding to a double in a switch statement 
----------------------------------------

public static void main (String [] args) {
    menu ();
    while (counter < 3) {
        switch (custChoice) {
            case 1 :
                totalPrice = totalPrice + priceA;
                break;
            case 2 :
                totalPrice = totalPrice + priceE;
                break;
            case 3 :
                totalPrice = totalPrice + priceL;
                break;
            case 0 :
                System.out.println ("Your total is $" + totalPrice);
                return;
            default :
                break;
        }
        counter ++;
        menu ();
    }
}
----------------------------------------

public static void main (String [] args) {
    while (counter <= 3) {
        menu ();
        switch (custChoice) {
            case 1 :
                totalPrice += priceA;
                show_total ();
                break;
            case 2 :
                totalPrice += priceE;
                show_total ();
                break;
            case 3 :
                totalPrice += priceL;
                show_total ();
                break;
            case 0 :
                show_total ();
                System.exit (0);
            default :
                System.out.println ("Please try again");
        }
        counter ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40141920_40142252_1_15
40141920_40142260_1_14
Title: InputStream reading file and counting lines/words 
----------------------------------------

public static void readFile (Scanner f) {
    int words = 0;
    int lines = 0;
    while (f.hasNextLine ()) {
        String line = f.nextLine ();
        lines ++;
        for (String token : line.split ("\\s+")) {
            if (! token.isEmpty ()) {
                words ++;
            }
        }
    }
    System.out.println ("Total number of words: " + words);
    System.out.println ("Total number of lines: " + lines);
}
----------------------------------------

public static void readFile (Scanner f) {
    int words = 0;
    int lines = 0;
    while (f.hasNextLine ()) {
        String line = f.nextLine ();
        String [] arr = line.split ("\\s");
        words += arr.length;
        lines ++;
    }
    System.out.println ("Total number of words: " + words);
    System.out.println ("Total number of lines: " + lines);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40143690_40143837_1_15
40143690_40143887_1_10
Title: How do I compare objects from initial arraylist to multiple arraylists until it returns true? 
----------------------------------------

public boolean makeSuggestion (ArrayList < Cards > firstPlayerCards, ArrayList < ArrayList < Cards > > compareLists) {
    for (Cards first : firstPlayerCard) {
        for (ArrayList < Cards > secondPlayerCards : compareLists) {
            for (Cards second : secondPlayerCards) {
                if (first.equals (second)) return true;

            }
        }
    }
}
----------------------------------------

public boolean makeSuggestion (ArrayList < Cards > firstPlayerCards, ArrayList < Cards > secondPlayerCards) {
    for (Card firstPlayerCard : firstPlayerCards) {
        for (Card secondPlayerCard : secondPlayerCards) {
            if (firstPlayerCard.equals (secondPlayerCard)) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40145909_40145959_1_12
40145909_40145963_21_34
Title: Mapping objects in Java 
----------------------------------------

@Override
public boolean equals (Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass () != o.getClass ()) {
        return false;
    }
    A a = (A) o;
    return x == a.x && y == a.y;
}
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (getClass () != obj.getClass ()) return false;

    A other = (A) obj;
    if (x != other.x) return false;

    if (y != other.y) return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4015196_4015476_1_14
4015196_4015569_32_45
Title: "Is there a java library that converts strings describing measures of time (e.g. ""1d 1m 1s"") to milliseconds?" 
----------------------------------------

public static long parse (String input) {
    long result = 0;
    String number = "";
    for (int i = 0;
    i < input.length (); i ++) {
        char c = input.charAt (i);
        if (Character.isDigit (c)) {
            number += c;
        } else if (Character.isLetter (c) && ! number.isEmpty ()) {
            result += convert (Integer.parseInt (number), c);
            number = "";
        }

    }
    return result;
}
----------------------------------------

public long parse (final String input) {
    long value = 0l;
    final Matcher matcher = ITEM_PATTERN.matcher (input);
    while (matcher.find ()) {
        final long modifier = Long.parseLong (matcher.group (1));
        final String unit = matcher.group (2);
        if (! units.containsKey (unit)) {
            throw new IllegalArgumentException ("Unrecognized token: " + unit);
        }
        value += units.get (unit).longValue () * modifier;
    }
    return value;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40153425_40154267_1_14
40153425_40166371_1_11
Title: Java Stream code improvement 
----------------------------------------

public HashMap < String, Set < Car > > addCar (Car car) {
    Map < String, Set < Car > > carmap = getCarsMap ();
    if (carmap.containsKey (car.getModel ())) {
        HashSet < Car > carset = carmap.get (car.getModel ());
        carset.add (car);
        map.put (car.getModel (), carset);
    } else {
        carmap = getBoatsMap ();
        Set < Cars > tempcar = new HashSet < > ();
        tempcar.add (car);
        carmap.put (car.getModel (), tempcar);
    }
    return carmap;
}
----------------------------------------

public boolean addCar (Car car) {
    Map < String, Set < Car > > carsMap = getCarsMap ();
    if (! carsMap.containsKey (car.getModel ())) {
        carsMap.put (car.getModel (), new HashSet < > (Arrays.asList (car)));
        return true;
    }
    if (! carsMap.get (car.getModel ()).contains (car)) {
        return carsMap.get (car.getModel ()).add (car);
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40166416_40166480_1_15
40166416_40166710_1_16
Title: Creating a multiplication table with formatting using for loops 
----------------------------------------

public static void main (String [] args) {
    System.out.println ("\t\t\tMultiplication Table");
    System.out.println ();
    System.out.println ("\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t");
    for (int i = 1;
    i <= 9; i ++) {
        for (int j = 1;
        j <= 9; j ++) {
            System.out.print ("\t" + i * j);
        }
        System.out.println ();
    }
}
----------------------------------------

public static void main (String [] args) {
    System.out.println ("\t\t\tMultiplication Table");
    System.out.println ();
    for (int i = 0;
    i <= 9; i ++) {
        for (int j = 0;
        j <= 9; j ++) {
            if (j == 0) System.out.print ("\t" + i);
            else if (i == 0) System.out.print ("\t" + j);
            else System.out.print ("\t" + i * j);

        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40167883_40169220_5_18
40167883_40169569_1_23
Title: Java (beginner): Displaying the first name alphabetically and last name alphabetically after being given a list of names from the user 
----------------------------------------

public static void main (String [] args) {
    boolean run = true;
    List < String > names = new List < String > ();
    while (run) {
        String name = getString ();
        if (name == "q") run = false;
        else names.add (name);

    }
    Collections.sort (names);
    System.out.println (names.get (0));
    System.out.println (names.get (names.size () - 1));
}
----------------------------------------

public static void main (String [] args) {
    Locale myLocale = Locale.ENGLISH;
    Collator coll = Collator.getInstance (myLocale);
    coll.setStrength (Collator.PRIMARY);
    TreeSet < String > names = new TreeSet < > (coll);
    names.add ("bob");
    names.add ("david");
    names.add ("alex");
    names.add ("charlie");
    System.out.println (names.first ());
    System.out.println (names.last ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40169109_40170176_1_27
40169109_40216788_1_15
Title: Iterating through text with a different length delay between them 
----------------------------------------

public void send (Player player, long delay, String basecolor, String...strings) {
    List < String > str = Arrays.asList (strings);
    new BukkitRunnable () {
        int ind = 0;
        boolean next = true;
        @Override
        public void run () {
            String s = str.get (ind);
            if (next) {
                next = false;
                Bukkit.getScheduler ().runTaskLater (YOUR_PLUGIN_INSTANCE, new Runnable () {
                    @Override
                    public void run () {
                        player.sendMessage (ChatColor.translateAlternateColorCodes ('&', basecolor + s.replace ("%p", player.getName ()).replace ("%s", server_name)));
                        next = true;
                    }}

                , (ind == 0 ? 0 : (str.get (ind - 1).length ())));
                if (ind + 1 < str.size ()) {
                    ind ++;
                } else {
                    cancel ();
                }
            }
        }}

    .runTaskTimer (YOUR_PLUGIN_INSTANCE, delay, 10);
}
----------------------------------------

private void send (final Player player, String...messages) {
    long delaySum = 0;
    for (final String message : messages) {
        Runnable myTask = new Runnable () {
            public void run () {
                player.sendMessage (message);
            }}

        ;
        this.getServer ().getScheduler ().runTaskLater (this, myTask, delaySum);
        delaySum += message.length () * 2;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40169109_40170176_7_25
40169109_40171254_21_34
Title: Iterating through text with a different length delay between them 
----------------------------------------

public void run () {
    String s = str.get (ind);
    if (next) {
        next = false;
        Bukkit.getScheduler ().runTaskLater (YOUR_PLUGIN_INSTANCE, new Runnable () {
            @Override
            public void run () {
                player.sendMessage (ChatColor.translateAlternateColorCodes ('&', basecolor + s.replace ("%p", player.getName ()).replace ("%s", server_name)));
                next = true;
            }}

        , (ind == 0 ? 0 : (str.get (ind - 1).length ())));
        if (ind + 1 < str.size ()) {
            ind ++;
        } else {
            cancel ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            String str = msgQueue.take ();
            Thread.sleep (str.length ());
            TimeUnit.MILLISECONDS.sleep (str.length () * 10);
            System.out.println (str);
        }
    } catch (InterruptedException e) {
        System.out.println ("Quitting...");
        return;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40169254_40169314_1_18
40169254_40172002_1_15
Title: Repeat same method and using new value of one parameter 
----------------------------------------

public void myMethod (String args []) {
    String server = "some value";
    while (true) {
        switch (someExternalOperation (server)) {
            case 1 :
                return;
            case 2 :
                server = "new value";
                break;
            default :
        }
    }
}
----------------------------------------

public void myMethod (String args []) {
    String server;
    server = "some value";
    if (someExternalOperation (server) == 2) server = "new value";

    switch (someExternalOperation (server)) {
        case 1 :
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40176676_40176842_1_14
40176676_40176934_31_43
Title: Add random words at runtime inside jtextArea without using keyboard 
----------------------------------------

private void insertRandomLetterInsideJtextArea () {
    new Thread () {
        Random r = new Random ();
        public void run () {
            while (true) {
                try {
                    sleep (1000);
                    char c = (char) (r.nextInt (26) + 'a');
                    tarea.setText (tarea.getText () + c);
                } catch (Exception e) {
                }
            }
        }}

    .start ();
}
----------------------------------------

private void insertRandomLetterInsideJtextArea () {
    Timer timer = new Timer ();
    timer.scheduleAtFixedRate (new TimerTask () {
        String content = "";
        @Override
        public void run () {
            content += "foo\n";
            tarea.setText (content);
        }}

    , 100, 1000);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40198941_40199003_7_18
40198941_40199161_24_40
Title: Printing the lowest and second lowest values in an array using methods (Java) 
----------------------------------------

int fastestIndex () {
    int firstplace = times [0];
    String firstname = names [0];
    for (int counter = 0;
    counter < times.length; counter ++) {
        if (times [counter] < firstplace) {
            firstplace = times [counter];
            firstname = names [counter];
        }
    }
}
----------------------------------------

public static int fastestIndex (int [] times) {
    int fastestIndex = 0;
    for (int counter = 0;
    counter < times.length; counter ++) {
        if (times [counter] < times [fastestIndex]) {
            fastestIndex = counter;
        }
    }
    return fastestIndex;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40199440_40957692_1_15
40199440_50451548_1_10
Title: How to determine if a number is prime 
----------------------------------------

private static boolean isPrime (int iNum) {
    boolean bResult = true;
    if (iNum <= 1 || iNum != 2 && iNum % 2 == 0) {
        bResult = false;
    } else {
        int iSqrt = (int) Math.sqrt (iNum);
        for (int i = 3;
        i < iSqrt; i += 2) {
            if (iNum % i == 0) {
                bResult = false;
                break;
            }
        }
    }
    return bResult;
}
----------------------------------------

public static boolean isPrime (int num) {
    for (int i = 2;
    i * i <= num; i ++) {
        if (num % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40202033_40202076_1_14
40202033_40202273_1_12
Title: Cartesian product of two arrays 
----------------------------------------

public int [] [] cartesianProduct (int [] s1, int [] s2) {
    List < int [] > list = new ArrayList < > ();
    for (int v1 : s1) {
        for (int v2 : s2) {
            list.add (new int [] {v1, v2});
        }
    }
    int [] [] result = new int [list.size ()] [2];
    int k = 0;
    for (int [] i : list) {
        result [k ++] = i;
    }
    return result;
}
----------------------------------------

public static int [] [] cartesianProduct (int [] s1, int [] s2) {
    int size1 = s1.length;
    int size2 = s2.length;
    int [] [] result = new int [size1 * size2] [2];
    for (int i = 0, d = 0;
    i < size1; ++ i) {
        for (int j = 0;
        j < size2; ++ j, ++ d) {
            result [d] [0] = s1 [i];
            result [d] [1] = s2 [j];
        }
    }
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40205358_40205390_4_22
40205358_40205451_4_25
Title: Searching parallel arrays for matching values 
----------------------------------------

public static void main (String [] args) {
    for (int x = 0;
    x < NUM_OF_ITEMS; ++ x) {
        if (careChoice.equals (validChoices [x])) {
            validChoice = true;
            choicePrice = prices [x];
        }
    }
    if (validChoice) JOptionPane.showMessageDialog (null, "The price of a " + careChoice + " is $" + choicePrice);
    else JOptionPane.showMessageDialog (null, "Sorry - invalid entry");

}
----------------------------------------

public static void main (String [] args) {
    final int NUM_OF_ITEMS = 4;
    String [] validChoices = {"oil change", "tire rotation", "battery check", "brake inspection"};
    double [] prices = {25, 22, 15, 5};
    String strOptions;
    int careChoice;
    double choicePrice = 0.0;
    boolean validChoice = false;
    strOptions = JOptionPane.showInputDialog (null, "Please enter one of the following care options: oil change, tire rotation, battery check, or brake inspection");
    careChoice = Integer.valueOf (strOptions);
    System.out.println ("care choice :" + careChoice);
    if (careChoice < validChoices.length) {
        validChoice = true;
        choicePrice = prices [careChoice - 1];
    }
    if (validChoice) JOptionPane.showMessageDialog (null, "The price of a " + careChoice + " is $" + choicePrice);
    else JOptionPane.showMessageDialog (null, "Sorry - invalid entry");

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40210096_40210510_1_25
40210096_40210585_1_12
Title: Splitting the string in java is giving different results than expected 
----------------------------------------

public static void main (String args []) {
    String str = "broadcast message \"Shubham Agiwal\"";
    char [] chs = str.toCharArray ();
    StringBuilder sb = new StringBuilder ();
    boolean flag = false;
    for (Character c : chs) {
        if (c == '\"') {
            flag = ! flag;
            continue;
        }
        if (flag == false && c == ' ') {
            sb.append ("\t");
            continue;
        }
        sb.append (c);
    }
    String [] strs = sb.toString ().split ("\t");
    for (String s : strs) {
        System.out.println (s);
    }
}
----------------------------------------

public static void main (String [] arg) {
    String str = "broadcast message \"Shubham Agiwal\"";
    String strs [] = str.split ("\\s\"");
    String [] first = strs [0].split (" ");
    for (String st : first) {
        System.out.println (st);
    }
    System.out.println ("\"" + strs [1]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
40213065_40213144_1_12
40213065_40213149_1_19
Title: user input name times age 
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String invoer;
    int invoer2;
    System.out.print ("Fill in your name:");
    invoer = br.readLine ();
    System.out.print ("Fill in your age:");
    invoer2 = Integer.parseInt (br.readLine ());
    for (int i = 0;
    i < invoer2; ++ i) {
        System.out.print (invoer);
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    String invoer;
    String invoer2;
    System.out.print ("Fill in your name:");
    invoer = br.readLine ();
    System.out.print ("Fill in your age:");
    invoer2 = br.readLine ();
    try {
        for (int i = 0;
        i < Integer.parseInt (invoer2); i ++) {
            System.out.println (invoer);
        }
    } catch (NumberFormatException e) {
        System.out.println ("Age should be a number");
        e.printStackTrace ();
    }
    System.out.print ("" + invoer);
    System.out.print (" " + invoer2);
}
----------------------------------------

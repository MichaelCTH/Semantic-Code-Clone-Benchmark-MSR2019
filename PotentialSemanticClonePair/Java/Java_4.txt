$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_14466771_7_24
11544843_36909695_48_69
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (true) {
        System.out.println (i);
        try {
            Thread.sleep (1000);
            cb.await ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        } catch (BrokenBarrierException e) {
            e.printStackTrace ();
        }
        i = i + 3;
    }
}
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_14466771_7_24
11544843_40842665_18_32
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (true) {
        System.out.println (i);
        try {
            Thread.sleep (1000);
            cb.await ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        } catch (BrokenBarrierException e) {
            e.printStackTrace ();
        }
        i = i + 3;
    }
}
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_14466771_7_24
11544843_48617304_15_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (true) {
        System.out.println (i);
        try {
            Thread.sleep (1000);
            cb.await ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        } catch (BrokenBarrierException e) {
            e.printStackTrace ();
        }
        i = i + 3;
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_14466771_7_24
11544843_48617304_27_36
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (true) {
        System.out.println (i);
        try {
            Thread.sleep (1000);
            cb.await ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        } catch (BrokenBarrierException e) {
            e.printStackTrace ();
        }
        i = i + 3;
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_14466771_7_24
11544843_48617304_2_11
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (true) {
        System.out.println (i);
        try {
            Thread.sleep (1000);
            cb.await ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        } catch (BrokenBarrierException e) {
            e.printStackTrace ();
        }
        i = i + 3;
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_136_171
11544843_31785189_56_84
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 3;
    while (i < 50) {
        while (s.getState () != 2) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 2) System.out.println ("t3 " + i);

            i = i + 3;
            s.setState (3);
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_136_171
11544843_36909695_48_69
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 3;
    while (i < 50) {
        while (s.getState () != 2) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 2) System.out.println ("t3 " + i);

            i = i + 3;
            s.setState (3);
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_136_171
11544843_40842665_18_32
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 3;
    while (i < 50) {
        while (s.getState () != 2) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 2) System.out.println ("t3 " + i);

            i = i + 3;
            s.setState (3);
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_136_171
11544843_48617304_15_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 3;
    while (i < 50) {
        while (s.getState () != 2) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 2) System.out.println ("t3 " + i);

            i = i + 3;
            s.setState (3);
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_136_171
11544843_48617304_27_36
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 3;
    while (i < 50) {
        while (s.getState () != 2) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 2) System.out.println ("t3 " + i);

            i = i + 3;
            s.setState (3);
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_136_171
11544843_48617304_2_11
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 3;
    while (i < 50) {
        while (s.getState () != 2) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 2) System.out.println ("t3 " + i);

            i = i + 3;
            s.setState (3);
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_178_189
11544843_31785189_8_42
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String args []) {
    int totalNumOfThreads = 10;
    PrintJob printJob = new PrintJob (totalNumOfThreads);
    ExecutorService executorService = Executors.newFixedThreadPool (totalNumOfThreads);
    Set < Runnable > runnables = new HashSet < Runnable > ();
    for (int i = 1;
    i <= totalNumOfThreads; i ++) {
        MyRunnable command = new MyRunnable (printJob, i);
        runnables.add (command);
        executorService.execute (command);
    }
    executorService.shutdown ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_178_189
11544843_36909695_4_22
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    SyncPrinterAction printAction1 = new SyncPrinterAction (new int [] {1, 5, 9, 13}, true);
    SyncPrinterAction printAction2 = new SyncPrinterAction (new int [] {2, 6, 10, 14}, true);
    SyncPrinterAction printAction3 = new SyncPrinterAction (new int [] {3, 7, 11, 15}, true);
    SyncPrinterAction printAction4 = new SyncPrinterAction (new int [] {4, 8, 12, 16}, false);
    printAction1.setDependentAction (printAction4);
    printAction2.setDependentAction (printAction1);
    printAction3.setDependentAction (printAction2);
    printAction4.setDependentAction (printAction3);
    new Thread (printAction1, "T1").start ();
    new Thread (printAction2, "T2").start ();
    new Thread (printAction3, "T3").start ();
    new Thread (printAction4, "T4").start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_178_189
11544843_40842665_36_52
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] as) {
    Worker w1 = new Worker ();
    Worker w2 = new Worker ();
    Worker w3 = new Worker ();
    w1.setNext (w2);
    w2.setNext (w3);
    w3.setNext (w1);
    new Thread (w1, "Thread-1: ").start ();
    new Thread (w2, "Thread-2: ").start ();
    new Thread (w3, "Thread-3: ").start ();
    w1.accept (100);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_178_189
11544843_42152461_14_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Thread thread1 = new Thread (new MyTestThread (), "t1");
    Thread thread2 = new Thread (new MyTestThread (), "t2");
    thread1.start ();
    thread1.join ();
    thread2.start ();
    thread2.join ();
    System.out.println ("====All threads execution===completed");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_178_189
11544843_48617304_40_66
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    try {
        Tic tic = new Tic ();
        Tac tac = new Tac ();
        Toe toe = new Toe ();
        Thread t1 = new Thread (tic);
        Thread t2 = new Thread (tac);
        Thread t3 = new Thread (toe);
        t1.start ();
        t1.join ();
        if (! t1.isAlive ()) {
            t2.start ();
        }
        t2.join ();
        if (! t2.isAlive ()) {
            t3.start ();
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_29_67
11544843_31785189_56_84
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (i < 50) {
        while (s.getState () != 3) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 3) System.out.println ("t1 " + i);

            s.setState (1);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_29_67
11544843_36909695_48_69
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (i < 50) {
        while (s.getState () != 3) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 3) System.out.println ("t1 " + i);

            s.setState (1);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_29_67
11544843_40842665_18_32
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (i < 50) {
        while (s.getState () != 3) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 3) System.out.println ("t1 " + i);

            s.setState (1);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_29_67
11544843_48617304_15_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (i < 50) {
        while (s.getState () != 3) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 3) System.out.println ("t1 " + i);

            s.setState (1);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_29_67
11544843_48617304_27_36
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (i < 50) {
        while (s.getState () != 3) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 3) System.out.println ("t1 " + i);

            s.setState (1);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_29_67
11544843_48617304_2_11
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    int i = 1;
    while (i < 50) {
        while (s.getState () != 3) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 3) System.out.println ("t1 " + i);

            s.setState (1);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_82_121
11544843_31785189_56_84
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);

            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_82_121
11544843_36909695_48_69
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);

            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_82_121
11544843_40842665_18_32
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);

            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_82_121
11544843_48617304_15_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);

            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_82_121
11544843_48617304_27_36
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);

            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31668619_82_121
11544843_48617304_2_11
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);

            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_56_84
11544843_36909695_48_69
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_56_84
11544843_40842665_18_32
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_56_84
11544843_48617304_15_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_56_84
11544843_48617304_27_36
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_56_84
11544843_48617304_2_11
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        synchronized (printJob) {
            if (threadNum == printJob.counter) {
                printJob.printStuff ();
                if (printJob.counter != printJob.totalNumOfThreads) {
                    printJob.counter ++;
                } else {
                    System.out.println ();
                    printJob.resetCounter ();
                }
                printJob.notifyAll ();
            } else {
                try {
                    printJob.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_8_42
11544843_36909695_4_22
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String args []) {
    int totalNumOfThreads = 10;
    PrintJob printJob = new PrintJob (totalNumOfThreads);
    ExecutorService executorService = Executors.newFixedThreadPool (totalNumOfThreads);
    Set < Runnable > runnables = new HashSet < Runnable > ();
    for (int i = 1;
    i <= totalNumOfThreads; i ++) {
        MyRunnable command = new MyRunnable (printJob, i);
        runnables.add (command);
        executorService.execute (command);
    }
    executorService.shutdown ();
}
----------------------------------------

public static void main (String [] args) {
    SyncPrinterAction printAction1 = new SyncPrinterAction (new int [] {1, 5, 9, 13}, true);
    SyncPrinterAction printAction2 = new SyncPrinterAction (new int [] {2, 6, 10, 14}, true);
    SyncPrinterAction printAction3 = new SyncPrinterAction (new int [] {3, 7, 11, 15}, true);
    SyncPrinterAction printAction4 = new SyncPrinterAction (new int [] {4, 8, 12, 16}, false);
    printAction1.setDependentAction (printAction4);
    printAction2.setDependentAction (printAction1);
    printAction3.setDependentAction (printAction2);
    printAction4.setDependentAction (printAction3);
    new Thread (printAction1, "T1").start ();
    new Thread (printAction2, "T2").start ();
    new Thread (printAction3, "T3").start ();
    new Thread (printAction4, "T4").start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_8_42
11544843_40842665_36_52
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String args []) {
    int totalNumOfThreads = 10;
    PrintJob printJob = new PrintJob (totalNumOfThreads);
    ExecutorService executorService = Executors.newFixedThreadPool (totalNumOfThreads);
    Set < Runnable > runnables = new HashSet < Runnable > ();
    for (int i = 1;
    i <= totalNumOfThreads; i ++) {
        MyRunnable command = new MyRunnable (printJob, i);
        runnables.add (command);
        executorService.execute (command);
    }
    executorService.shutdown ();
}
----------------------------------------

public static void main (String [] as) {
    Worker w1 = new Worker ();
    Worker w2 = new Worker ();
    Worker w3 = new Worker ();
    w1.setNext (w2);
    w2.setNext (w3);
    w3.setNext (w1);
    new Thread (w1, "Thread-1: ").start ();
    new Thread (w2, "Thread-2: ").start ();
    new Thread (w3, "Thread-3: ").start ();
    w1.accept (100);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_8_42
11544843_42152461_14_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String args []) {
    int totalNumOfThreads = 10;
    PrintJob printJob = new PrintJob (totalNumOfThreads);
    ExecutorService executorService = Executors.newFixedThreadPool (totalNumOfThreads);
    Set < Runnable > runnables = new HashSet < Runnable > ();
    for (int i = 1;
    i <= totalNumOfThreads; i ++) {
        MyRunnable command = new MyRunnable (printJob, i);
        runnables.add (command);
        executorService.execute (command);
    }
    executorService.shutdown ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Thread thread1 = new Thread (new MyTestThread (), "t1");
    Thread thread2 = new Thread (new MyTestThread (), "t2");
    thread1.start ();
    thread1.join ();
    thread2.start ();
    thread2.join ();
    System.out.println ("====All threads execution===completed");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_31785189_8_42
11544843_48617304_40_66
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String args []) {
    int totalNumOfThreads = 10;
    PrintJob printJob = new PrintJob (totalNumOfThreads);
    ExecutorService executorService = Executors.newFixedThreadPool (totalNumOfThreads);
    Set < Runnable > runnables = new HashSet < Runnable > ();
    for (int i = 1;
    i <= totalNumOfThreads; i ++) {
        MyRunnable command = new MyRunnable (printJob, i);
        runnables.add (command);
        executorService.execute (command);
    }
    executorService.shutdown ();
}
----------------------------------------

public static void main (String [] args) {
    try {
        Tic tic = new Tic ();
        Tac tac = new Tac ();
        Toe toe = new Toe ();
        Thread t1 = new Thread (tic);
        Thread t2 = new Thread (tac);
        Thread t3 = new Thread (toe);
        t1.start ();
        t1.join ();
        if (! t1.isAlive ()) {
            t2.start ();
        }
        t2.join ();
        if (! t2.isAlive ()) {
            t3.start ();
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_36909695_48_69
11544843_40842665_18_32
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_36909695_48_69
11544843_48617304_15_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_36909695_48_69
11544843_48617304_27_36
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_36909695_48_69
11544843_48617304_2_11
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    synchronized (this) {
        for (int value : data) {
            try {
                while (dependentAction.isDependent ()) wait (100);

            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            dependentAction.setDependent (true);
            System.out.println (Thread.currentThread ().getName () + " :: " + value);
            dependent = false;
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_36909695_4_22
11544843_40842665_36_52
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    SyncPrinterAction printAction1 = new SyncPrinterAction (new int [] {1, 5, 9, 13}, true);
    SyncPrinterAction printAction2 = new SyncPrinterAction (new int [] {2, 6, 10, 14}, true);
    SyncPrinterAction printAction3 = new SyncPrinterAction (new int [] {3, 7, 11, 15}, true);
    SyncPrinterAction printAction4 = new SyncPrinterAction (new int [] {4, 8, 12, 16}, false);
    printAction1.setDependentAction (printAction4);
    printAction2.setDependentAction (printAction1);
    printAction3.setDependentAction (printAction2);
    printAction4.setDependentAction (printAction3);
    new Thread (printAction1, "T1").start ();
    new Thread (printAction2, "T2").start ();
    new Thread (printAction3, "T3").start ();
    new Thread (printAction4, "T4").start ();
}
----------------------------------------

public static void main (String [] as) {
    Worker w1 = new Worker ();
    Worker w2 = new Worker ();
    Worker w3 = new Worker ();
    w1.setNext (w2);
    w2.setNext (w3);
    w3.setNext (w1);
    new Thread (w1, "Thread-1: ").start ();
    new Thread (w2, "Thread-2: ").start ();
    new Thread (w3, "Thread-3: ").start ();
    w1.accept (100);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_36909695_4_22
11544843_42152461_14_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    SyncPrinterAction printAction1 = new SyncPrinterAction (new int [] {1, 5, 9, 13}, true);
    SyncPrinterAction printAction2 = new SyncPrinterAction (new int [] {2, 6, 10, 14}, true);
    SyncPrinterAction printAction3 = new SyncPrinterAction (new int [] {3, 7, 11, 15}, true);
    SyncPrinterAction printAction4 = new SyncPrinterAction (new int [] {4, 8, 12, 16}, false);
    printAction1.setDependentAction (printAction4);
    printAction2.setDependentAction (printAction1);
    printAction3.setDependentAction (printAction2);
    printAction4.setDependentAction (printAction3);
    new Thread (printAction1, "T1").start ();
    new Thread (printAction2, "T2").start ();
    new Thread (printAction3, "T3").start ();
    new Thread (printAction4, "T4").start ();
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Thread thread1 = new Thread (new MyTestThread (), "t1");
    Thread thread2 = new Thread (new MyTestThread (), "t2");
    thread1.start ();
    thread1.join ();
    thread2.start ();
    thread2.join ();
    System.out.println ("====All threads execution===completed");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_36909695_4_22
11544843_48617304_40_66
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) {
    SyncPrinterAction printAction1 = new SyncPrinterAction (new int [] {1, 5, 9, 13}, true);
    SyncPrinterAction printAction2 = new SyncPrinterAction (new int [] {2, 6, 10, 14}, true);
    SyncPrinterAction printAction3 = new SyncPrinterAction (new int [] {3, 7, 11, 15}, true);
    SyncPrinterAction printAction4 = new SyncPrinterAction (new int [] {4, 8, 12, 16}, false);
    printAction1.setDependentAction (printAction4);
    printAction2.setDependentAction (printAction1);
    printAction3.setDependentAction (printAction2);
    printAction4.setDependentAction (printAction3);
    new Thread (printAction1, "T1").start ();
    new Thread (printAction2, "T2").start ();
    new Thread (printAction3, "T3").start ();
    new Thread (printAction4, "T4").start ();
}
----------------------------------------

public static void main (String [] args) {
    try {
        Tic tic = new Tic ();
        Tac tac = new Tac ();
        Toe toe = new Toe ();
        Thread t1 = new Thread (tic);
        Thread t2 = new Thread (tac);
        Thread t3 = new Thread (toe);
        t1.start ();
        t1.join ();
        if (! t1.isAlive ()) {
            t2.start ();
        }
        t2.join ();
        if (! t2.isAlive ()) {
            t3.start ();
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_40842665_18_32
11544843_48617304_15_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_40842665_18_32
11544843_48617304_27_36
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_40842665_18_32
11544843_48617304_2_11
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public void run () {
    while (true) {
        int i;
        try {
            i = q.take ();
            System.out.println (Thread.currentThread ().getName () + i);
            if (next != null) {
                next.accept (i + 1);
            }
            Thread.sleep (500);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_40842665_36_52
11544843_42152461_14_24
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] as) {
    Worker w1 = new Worker ();
    Worker w2 = new Worker ();
    Worker w3 = new Worker ();
    w1.setNext (w2);
    w2.setNext (w3);
    w3.setNext (w1);
    new Thread (w1, "Thread-1: ").start ();
    new Thread (w2, "Thread-2: ").start ();
    new Thread (w3, "Thread-3: ").start ();
    w1.accept (100);
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Thread thread1 = new Thread (new MyTestThread (), "t1");
    Thread thread2 = new Thread (new MyTestThread (), "t2");
    thread1.start ();
    thread1.join ();
    thread2.start ();
    thread2.join ();
    System.out.println ("====All threads execution===completed");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_40842665_36_52
11544843_48617304_40_66
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] as) {
    Worker w1 = new Worker ();
    Worker w2 = new Worker ();
    Worker w3 = new Worker ();
    w1.setNext (w2);
    w2.setNext (w3);
    w3.setNext (w1);
    new Thread (w1, "Thread-1: ").start ();
    new Thread (w2, "Thread-2: ").start ();
    new Thread (w3, "Thread-3: ").start ();
    w1.accept (100);
}
----------------------------------------

public static void main (String [] args) {
    try {
        Tic tic = new Tic ();
        Tac tac = new Tac ();
        Toe toe = new Toe ();
        Thread t1 = new Thread (tic);
        Thread t2 = new Thread (tac);
        Thread t3 = new Thread (toe);
        t1.start ();
        t1.join ();
        if (! t1.isAlive ()) {
            t2.start ();
        }
        t2.join ();
        if (! t2.isAlive ()) {
            t3.start ();
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11544843_42152461_14_24
11544843_48617304_40_66
Title: Interview: How to ensure that a thread runs after another? 
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    Thread thread1 = new Thread (new MyTestThread (), "t1");
    Thread thread2 = new Thread (new MyTestThread (), "t2");
    thread1.start ();
    thread1.join ();
    thread2.start ();
    thread2.join ();
    System.out.println ("====All threads execution===completed");
}
----------------------------------------

public static void main (String [] args) {
    try {
        Tic tic = new Tic ();
        Tac tac = new Tac ();
        Toe toe = new Toe ();
        Thread t1 = new Thread (tic);
        Thread t2 = new Thread (tac);
        Thread t3 = new Thread (toe);
        t1.start ();
        t1.join ();
        if (! t1.isAlive ()) {
            t2.start ();
        }
        t2.join ();
        if (! t2.isAlive ()) {
            t3.start ();
        }
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11547082_11547117_1_17
11547082_30351738_3_22
Title: Fastest way to scan ports with Java 
----------------------------------------

public static void main (final String...args) {
    final ExecutorService es = Executors.newFixedThreadPool (20);
    final String ip = "127.0.0.1";
    final int timeout = 200;
    final List < Future < Boolean > > futures = new ArrayList < > ();
    for (int port = 1;
    port <= 65535; port ++) {
        futures.add (portIsOpen (es, ip, port, timeout));
    }
    es.shutdown ();
    int openPorts = 0;
    for (final Future < Boolean > f : futures) {
        if (f.get ()) {
            openPorts ++;
        }
    }
    System.out.println ("There are " + openPorts + " open ports on host " + ip + " (probed with a timeout of " + timeout + "ms)");
}
----------------------------------------

public static void main (final String...args) throws InterruptedException, ExecutionException {
    final ExecutorService es = Executors.newFixedThreadPool (20);
    final String ip = "127.0.0.1";
    final int timeout = 200;
    final List < Future < ScanResult > > futures = new ArrayList < > ();
    for (int port = 1;
    port <= 65535; port ++) {
        futures.add (portIsOpen (es, ip, port, timeout));
    }
    es.awaitTermination (200L, TimeUnit.MILLISECONDS);
    int openPorts = 0;
    for (final Future < ScanResult > f : futures) {
        if (f.get ().isOpen ()) {
            openPorts ++;
            System.out.println (f.get ().getPort ());
        }
    }
    System.out.println ("There are " + openPorts + " open ports on host " + ip + " (probed with a timeout of " + timeout + "ms)");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11553461_11553472_38_47
11553461_11556441_35_43
Title: JLabel images array 
----------------------------------------

private static void createAndShowGui () {
    GridExample mainPanel = new GridExample ();
    JFrame frame = new JFrame ("GridExample");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.getContentPane ().add (mainPanel);
    frame.pack ();
    frame.setLocationByPlatform (true);
    frame.setVisible (true);
}
----------------------------------------

private static void createAndShowGui () {
    GridExample mainPanel = new GridExample ();
    JFrame frame = new JFrame ("GridExample");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.add (mainPanel);
    frame.pack ();
    frame.setLocationByPlatform (true);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11569076_11569223_54_67
11569076_11569223_79_99
Title: Keeping a JList selection after JList has lost focus? 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int index = list.getSelectedIndex ();
    listModel.remove (index);
    int size = listModel.getSize ();
    if (size == 0) {
        fireButton.setEnabled (false);
    } else {
        if (index == listModel.getSize ()) {
            index --;
        }
        list.setSelectedIndex (index);
        list.ensureIndexIsVisible (index);
    }
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String name = employeeName.getText ();
    if (name.equals ("") || alreadyInList (name)) {
        Toolkit.getDefaultToolkit ().beep ();
        employeeName.requestFocusInWindow ();
        employeeName.selectAll ();
        return;
    }
    int index = list.getSelectedIndex ();
    if (index == - 1) {
        index = 0;
    } else {
        index ++;
    }
    listModel.insertElementAt (employeeName.getText (), index);
    employeeName.requestFocusInWindow ();
    employeeName.setText ("");
    list.setSelectedIndex (index);
    list.ensureIndexIsVisible (index);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11577400_11577459_1_18
11577400_11577474_1_14
Title: Java String representation of an Object handling arrays 
----------------------------------------

public static String toStr (Object a) {
    if (a == null) return "null";

    Class < ? > clazz = a.getClass ();
    if (clazz.isArray ()) {
        if (Object [].class.isAssignableFrom (clazz)) clazz = Object [].class;

        try {
            final Method m = Arrays.class.getMethod ("toString", clazz);
            return (String) m.invoke (null, a);
        } catch (Exception e) {
            throw new RuntimeException (e);
        }
    } else {
        return a.toString ();
    }
}
----------------------------------------

private static String toStr (Object o) {
    if (o == null || ! o.getClass ().isArray ()) {
        return String.valueOf (o);
    } else {
        final int len = Array.getLength (o);
        StringBuilder sb = new StringBuilder ('[');
        for (int i = 0;
        i < len; i ++) sb.append (Array.get (o, i)).append (i + 1 < len ? ", " : "");

        return sb.append (']').toString ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11578624_11578730_1_19
11578624_11578757_12_30
Title: Why does the thread run only once? 
----------------------------------------

public void run () {
    try {
        boolean mouseTracked = false;
        while (! mouseTracked) {
            x = mouseLocation.x;
            y = mouseLocation.y;
            System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
            mouseTracked = true;
        }
    } catch (Exception e) {
        System.out.println ("Exception caught : " + e);
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            mouseLocation = MouseInfo.getPointerInfo ().getLocation ();
            x = mouseLocation.x;
            y = mouseLocation.y;
            System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
        } catch (Exception e) {
            System.out.println ("Exception caught : " + e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11578624_11578730_1_19
11578624_11578822_5_16
Title: Why does the thread run only once? 
----------------------------------------

public void run () {
    try {
        boolean mouseTracked = false;
        while (! mouseTracked) {
            x = mouseLocation.x;
            y = mouseLocation.y;
            System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
            mouseTracked = true;
        }
    } catch (Exception e) {
        System.out.println ("Exception caught : " + e);
    }
}
----------------------------------------

public void run () {
    int x, y;
    try {
        PointerInfo mouseLocation = MouseInfo.getPointerInfo ();
        x = mouseLocation.getLocation ().x;
        y = mouseLocation.getLocation ().y;
        System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
    } catch (Exception e) {
        System.out.println ("Exception caught : " + e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11578624_11578730_1_19
11578624_11578833_1_13
Title: Why does the thread run only once? 
----------------------------------------

public void run () {
    try {
        boolean mouseTracked = false;
        while (! mouseTracked) {
            x = mouseLocation.x;
            y = mouseLocation.y;
            System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
            mouseTracked = true;
        }
    } catch (Exception e) {
        System.out.println ("Exception caught : " + e);
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            x = mouseLocation.x;
            y = mouseLocation.y;
            System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
        } catch (Exception e) {
            System.out.println ("Exception caught : " + e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11578624_11578757_12_30
11578624_11578822_5_16
Title: Why does the thread run only once? 
----------------------------------------

public void run () {
    while (true) {
        try {
            mouseLocation = MouseInfo.getPointerInfo ().getLocation ();
            x = mouseLocation.x;
            y = mouseLocation.y;
            System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
        } catch (Exception e) {
            System.out.println ("Exception caught : " + e);
        }
    }
}
----------------------------------------

public void run () {
    int x, y;
    try {
        PointerInfo mouseLocation = MouseInfo.getPointerInfo ();
        x = mouseLocation.getLocation ().x;
        y = mouseLocation.getLocation ().y;
        System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
    } catch (Exception e) {
        System.out.println ("Exception caught : " + e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11578624_11578822_5_16
11578624_11578833_1_13
Title: Why does the thread run only once? 
----------------------------------------

public void run () {
    int x, y;
    try {
        PointerInfo mouseLocation = MouseInfo.getPointerInfo ();
        x = mouseLocation.getLocation ().x;
        y = mouseLocation.getLocation ().y;
        System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
    } catch (Exception e) {
        System.out.println ("Exception caught : " + e);
    }
}
----------------------------------------

public void run () {
    while (true) {
        try {
            x = mouseLocation.x;
            y = mouseLocation.y;
            System.out.println ("X:" + x + " Y:" + y + " at time " + System.currentTimeMillis ());
        } catch (Exception e) {
            System.out.println ("Exception caught : " + e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11597174_11597183_297_316
11597174_11597183_321_344
Title: Why does my applet blink when i repaint using multiple threads? 
----------------------------------------

public void run () {
    if (fuelVal > 0.00f || speedVal > 0) {
        for (;;) {
            try {
                Thread.sleep (50000 / speedVal);
                if (fuelVal == 0.00f || speedVal == 0) thread1.stop ();

                distanceVal ++;
                fareVal += 1.00;
                fuelVal -= .25f;
                fuel_width = (int) ((getWidth () - 34) * fuelVal / 50f);
                repaint ();
                distance.setText (String.valueOf (distanceVal) + " km");
                fuel.setText (String.valueOf (fuelVal) + " L");
                fare.setText ("P " + String.valueOf (fareVal));
            } catch (InterruptedException e) {
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int b = 0;
    ; b ++) {
        try {
            Thread.sleep (10);
            status_width += 1;
            if (status_width == getWidth ()) status_width = - 330;

            repaint ();
            if (fuelVal == 0.0f) {
                if (b % 2 == 0) {
                    tf_fuel.setBackground (Color.red);
                    tf_fuel.setText ("R E F U E L");
                } else {
                    tf_fuel.setBackground (Color.cyan);
                    tf_fuel.setText ("R E F U E L");
                }
            }
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11598556_11598727_3_13
11598556_11598865_1_23
Title: Inversing a String 
----------------------------------------

public static void main (String [] args) {
    String input = "The quick brown fox. Jumps over. The lazy dog.";
    String [] sentences = input.split ("\\.");
    StringBuilder result = new StringBuilder ();
    for (int i = sentences.length - 1;
    i >= 0; i --) {
        String sentence = sentences [i];
        result.append (".").append (new StringBuilder (sentence).reverse ().toString ());
    }
    System.out.println (result);
}
----------------------------------------

public static void main (String [] args) {
    String paragraph;
    Scanner input = new Scanner (System.in);
    System.out.print ("Enter a paragraph: ");
    paragraph = input.nextLine ();
    paragraph = paragraph.trim ();
    String reversedParagraph = new StringBuilder (paragraph).reverse ().toString ().toLowerCase ();
    StringBuilder out = new StringBuilder ();
    for (String sentence : reversedParagraph.split (" *\\.")) {
        if (! sentence.equals ("")) {
            sentence += ". ";
            out.append (Character.toUpperCase (sentence.charAt (0)) + sentence.substring (1));
        }
    }
    System.out.println (out.toString ().trim ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11602558_11602665_6_23
11602558_11602671_34_42
Title: Java - synchronizing multiple threads on time-step basis 
----------------------------------------

public void run () {
    while (condition) {
        try {
            barrier.await ();
        } catch (InterruptedException ex) {
            return;
        } catch (BrokenBarrierException ex) {
            return;
        }
    }
}
----------------------------------------

public void run () {
    try {
        System.out.println ("Entering thread " + Thread.currentThread () + " for " + sleepTime + " ms.");
        Thread.sleep (sleepTime);
        System.out.println ("Exiting thread " + Thread.currentThread ());
        barrier.await ();
    } catch (BrokenBarrierException | InterruptedException ex) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11602558_11602665_6_23
11602558_11602671_9_22
Title: Java - synchronizing multiple threads on time-step basis 
----------------------------------------

public void run () {
    while (condition) {
        try {
            barrier.await ();
        } catch (InterruptedException ex) {
            return;
        } catch (BrokenBarrierException ex) {
            return;
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            System.out.println ("Starting slaves");
            for (int i = 100;
            i < 500; i += 100) {
                executor.submit (getRunnable (i));
            }
            barrier.await ();
            System.out.println ("All slaves done");
        }
    } catch (InterruptedException | BrokenBarrierException ex) {
        System.out.println ("Bye Bye");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11602558_11602671_34_42
11602558_11602671_9_22
Title: Java - synchronizing multiple threads on time-step basis 
----------------------------------------

public void run () {
    try {
        System.out.println ("Entering thread " + Thread.currentThread () + " for " + sleepTime + " ms.");
        Thread.sleep (sleepTime);
        System.out.println ("Exiting thread " + Thread.currentThread ());
        barrier.await ();
    } catch (BrokenBarrierException | InterruptedException ex) {
    }
}
----------------------------------------

public void run () {
    try {
        while (true) {
            System.out.println ("Starting slaves");
            for (int i = 100;
            i < 500; i += 100) {
                executor.submit (getRunnable (i));
            }
            barrier.await ();
            System.out.println ("All slaves done");
        }
    } catch (InterruptedException | BrokenBarrierException ex) {
        System.out.println ("Bye Bye");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11604246_11604376_64_79
11604246_11604520_21_31
Title: using a method in java 
----------------------------------------

public static void main (String [] args) {
    Average3 myClass = new Average3 ();
    System.out.println ("Enter the first integer.");
    Scanner keyboard = new Scanner (System.in);
    myClass.addInteger (keyboard.nextInt ());
    System.out.println ("Enter the second integer.");
    myClass.addInteger (keyboard.nextInt ());
    System.out.println ("Enter the third integer.");
    myClass.addInteger (keyboard.nextInt ());
    myClass.printAverage ();
}
----------------------------------------

public static void main (String [] args) {
    String [] prompts = {"first", "second", "third"};
    InputData input = new InputData (3);
    Scanner keyboard = new Scanner (System.in);
    for (int i = 0;
    i < prompts.length; ++ i) {
        System.out.println ("Enter the " + prompts [i] + " integer.");
        input.numbers [i] = keyboard.nextInt ();
    }
    System.out.println ("The average of NUMBER1, NUMBER2, and NUMBER3 = " + input.average ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11607378_11607407_1_10
11607378_11607565_10_30
Title: remove duplicate object in Java 
----------------------------------------

@Override
public boolean equals (Object obj) {
    if (obj instanceof User) {
        User temp = (User) obj;
        if (this.firstName.equals (temp.firstName) && this.lastName.equals (temp.lastName)) {
            return true;
        }
    }
    return false;
}
----------------------------------------

@Override
public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (getClass () != obj.getClass ()) return false;

    User other = (User) obj;
    if (firstName == null) {
        if (other.firstName != null) return false;

    } else if (! firstName.equals (other.firstName)) return false;

    if (lastName == null) {
        if (other.lastName != null) return false;

    } else if (! lastName.equals (other.lastName)) return false;

    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11607378_11607437_1_22
11607378_11607438_2_21
Title: remove duplicate object in Java 
----------------------------------------

public static void main (String [] args) {
    Set < User > a = new HashSet < User > ();
    User [] u = new User [3];
    u [0] = new User ();
    u [0].setFirstName ("Mike");
    u [0].setLastName ("Jordon");
    u [1] = new User ();
    u [1].setFirstName ("Jack");
    u [1].setLastName ("Nicolson");
    u [2] = new User ();
    u [2].setFirstName ("Jack");
    u [2].setLastName ("Nicolson");
    for (User user : u) {
        a.add (u);
    }
    User [] duplicatesRemoved = new User [0];
    a.toArray (duplicatesRemoved);
}
----------------------------------------

public static void main (String [] args) {
    Set < User > a = new HashSet < User > ();
    User u = new User ();
    u.setFirstName ("Mike");
    u.setLastName ("Jordon");
    a.add (u);
    u = new User ();
    u.setFirstName ("Jack");
    u.setLastName ("Nicolson");
    a.add (u);
    u = new User ();
    u.setFirstName ("Jack");
    u.setLastName ("Nicolson");
    a.add (u);
    for (User ss : a) {
        System.out.println (ss.getFirstName () + " " + ss.getLastName ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11607943_11610249_1_23
11607943_11610890_5_41
Title: "I can't wrap my head around the ""draw some stairs with stick-men"" program" 
----------------------------------------

public static void main (String [] args) {
    int steps = 5;
    for (int x = 0;
    x < steps; x ++) {
        System.out.format (((steps == (x + 1)) ? "" : ("%" + ((steps - x - 1) * 5) + "s")) + "  o  ******" + ((x == 0) ? "" : ("%" + (x * 5) + "s")) + "*\n", " ", " ");
        System.out.format (((steps == (x + 1)) ? "" : ("%" + ((steps - x - 1) * 5) + "s")) + " /|\\ *     " + ((x == 0) ? "" : ("%" + (x * 5) + "s")) + "*\n", " ", " ");
        System.out.format (((steps == (x + 1)) ? "" : ("%" + ((steps - x - 1) * 5) + "s")) + " / \\ *     " + ((x == 0) ? "" : ("%" + (x * 5) + "s")) + "*\n", " ", " ");
    }
    for (int i = 0;
    i < (steps + 1) * 5 + 2; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int allStairs = 0;
    allStairs <= 4; allStairs ++) {
        for (int spaces = 1;
        spaces <= (- 5 * allStairs + 20); spaces ++) {
            printSpace ();
        }
        System.out.print ("  o  ******");
        for (int backWall = 0;
        backWall < allStairs * (LENGTH); backWall ++) {
            printSpace ();
        }
        printStar ();
        for (int spaces = 1;
        spaces <= (- 5 * allStairs + 20); spaces ++) {
            printSpace ();
        }
        System.out.print (" /|\\ *");
        for (int backWall = 1;
        backWall <= LENGTH * (allStairs + 1); backWall ++) {
            printSpace ();
        }
        printStar ();
        for (int spaces = 1;
        spaces <= (- 5 * allStairs + 20); spaces ++) {
            printSpace ();
        }
        System.out.print (" / \\ *");
        for (int backWall = 1;
        backWall <= LENGTH * (allStairs + 1); backWall ++) {
            printSpace ();
        }
        printStar ();
    }
    for (int lastLine = 1;
    lastLine <= 32; lastLine ++) {
        System.out.print ("*");
    }
    System.out.println ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11607943_11610249_1_23
11607943_33182997_7_52
Title: "I can't wrap my head around the ""draw some stairs with stick-men"" program" 
----------------------------------------

public static void main (String [] args) {
    int steps = 5;
    for (int x = 0;
    x < steps; x ++) {
        System.out.format (((steps == (x + 1)) ? "" : ("%" + ((steps - x - 1) * 5) + "s")) + "  o  ******" + ((x == 0) ? "" : ("%" + (x * 5) + "s")) + "*\n", " ", " ");
        System.out.format (((steps == (x + 1)) ? "" : ("%" + ((steps - x - 1) * 5) + "s")) + " /|\\ *     " + ((x == 0) ? "" : ("%" + (x * 5) + "s")) + "*\n", " ", " ");
        System.out.format (((steps == (x + 1)) ? "" : ("%" + ((steps - x - 1) * 5) + "s")) + " / \\ *     " + ((x == 0) ? "" : ("%" + (x * 5) + "s")) + "*\n", " ", " ");
    }
    for (int i = 0;
    i < (steps + 1) * 5 + 2; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= HEIGHT; i ++) {
        for (int j = 1;
        j <= TOTALHEIGHT + (i * (- 5)); j ++) {
            System.out.print (" ");
        }
        printTop ();
        for (int j = 1;
        j <= (i - 1) * 5; j ++) {
            System.out.print (" ");
        }
        System.out.println ("*");
        for (int j = 1;
        j <= TOTALHEIGHT + (i * (- 5)); j ++) {
            System.out.print (" ");
        }
        printMiddle ();
        for (int j = 1;
        j <= (i - 1) * 5; j ++) {
            System.out.print (" ");
        }
        System.out.println ("*");
        for (int j = 1;
        j <= TOTALHEIGHT + (i * (- 5)); j ++) {
            System.out.print (" ");
        }
        printBottom ();
        for (int j = 1;
        j <= (i - 1) * 5; j ++) {
            System.out.print (" ");
        }
        System.out.println ("*");
    }
    for (int i = 1;
    i <= TOTALHEIGHT + 7; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11607943_11610890_5_41
11607943_33182997_7_52
Title: "I can't wrap my head around the ""draw some stairs with stick-men"" program" 
----------------------------------------

public static void main (String [] args) {
    for (int allStairs = 0;
    allStairs <= 4; allStairs ++) {
        for (int spaces = 1;
        spaces <= (- 5 * allStairs + 20); spaces ++) {
            printSpace ();
        }
        System.out.print ("  o  ******");
        for (int backWall = 0;
        backWall < allStairs * (LENGTH); backWall ++) {
            printSpace ();
        }
        printStar ();
        for (int spaces = 1;
        spaces <= (- 5 * allStairs + 20); spaces ++) {
            printSpace ();
        }
        System.out.print (" /|\\ *");
        for (int backWall = 1;
        backWall <= LENGTH * (allStairs + 1); backWall ++) {
            printSpace ();
        }
        printStar ();
        for (int spaces = 1;
        spaces <= (- 5 * allStairs + 20); spaces ++) {
            printSpace ();
        }
        System.out.print (" / \\ *");
        for (int backWall = 1;
        backWall <= LENGTH * (allStairs + 1); backWall ++) {
            printSpace ();
        }
        printStar ();
    }
    for (int lastLine = 1;
    lastLine <= 32; lastLine ++) {
        System.out.print ("*");
    }
    System.out.println ();
}
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i <= HEIGHT; i ++) {
        for (int j = 1;
        j <= TOTALHEIGHT + (i * (- 5)); j ++) {
            System.out.print (" ");
        }
        printTop ();
        for (int j = 1;
        j <= (i - 1) * 5; j ++) {
            System.out.print (" ");
        }
        System.out.println ("*");
        for (int j = 1;
        j <= TOTALHEIGHT + (i * (- 5)); j ++) {
            System.out.print (" ");
        }
        printMiddle ();
        for (int j = 1;
        j <= (i - 1) * 5; j ++) {
            System.out.print (" ");
        }
        System.out.println ("*");
        for (int j = 1;
        j <= TOTALHEIGHT + (i * (- 5)); j ++) {
            System.out.print (" ");
        }
        printBottom ();
        for (int j = 1;
        j <= (i - 1) * 5; j ++) {
            System.out.print (" ");
        }
        System.out.println ("*");
    }
    for (int i = 1;
    i <= TOTALHEIGHT + 7; i ++) {
        System.out.print ("*");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11619056_19462125_5_17
11619056_22432570_1_16
Title: Java: How to use the compareTo method to check the order of 2 nodes 
----------------------------------------

public static void main (String ar []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i + 1;
        j < arr.length; j ++) {
            if (arr [j].compareTo (arr [i]) < 0) {
                String t = arr [i];
                arr [i] = arr [j];
                arr [j] = t;
            }
        }
        System.out.println (arr [i]);
    }
}
----------------------------------------

public static void main (String args []) {
    User u = new User ();
    u.setName ("pradeep");
    User u1 = new User ();
    u1.setName ("Ajeet");
    User u2 = new User ();
    u2.setName ("sameer");
    List < User > list = new ArrayList < User > ();
    list.add (u);
    list.add (u1);
    list.add (u2);
    Collections.sort (list);
    for (User user : list) {
        System.out.println (user.getName ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11625755_11626130_64_71
11625755_11626130_76_86
Title: how to remove all rows in jtable? 
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    if (model.getRowCount () > 0) {
        for (int i = model.getRowCount () - 1;
        i > - 1; i --) {
            model.removeRow (i);
        }
    }
    System.out.println ("model.getRowCount() --->" + model.getRowCount ());
}
----------------------------------------

public void actionPerformed (ActionEvent arg0) {
    Object [] data0 = {"Buy", "IBM", new Integer (1000), new Double (80.50)};
    model.addRow (data0);
    Object [] data1 = {"Sell", "MicroSoft", new Integer (2000), new Double (6.25)};
    model.addRow (data1);
    Object [] data2 = {"Sell", "Apple", new Integer (3000), new Double (7.35)};
    model.addRow (data2);
    Object [] data3 = {"Buy", "Nortel", new Integer (4000), new Double (20.00)};
    model.addRow (data3);
    System.out.println ("model.getRowCount() --->" + model.getRowCount ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
116276_116293_1_16
116276_116532_21_31
Title: ArrayList in Java and inputting 
----------------------------------------

public static java.util.ArrayList readRange (double end_signal) {
    ArrayList input = new ArrayList ();
    Scanner kbd = new Scanner (System.in);
    int count = 0;
    do {
        input.add (Double.valueOf (kbd.next ()));
        System.out.println (input);
        ++ count;
    } while (input (-- count) != end_signal);
    return input;
}
----------------------------------------

public List readRange (double endSignal) {
    List < Double > input = new ArrayList < Double > ();
    Scanner kdb = new Scanner (System.in);
    int count = 0;
    double number = 0;
    while ((number = kdb.nextDouble ()) != endSignal && count < INPUT_LIMIT) {
        System.out.println (number);
        input.add (number);
    }
    return input;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11638123_38691104_3_22
11638123_53082047_3_24
Title: How to add an element to Array and shift indexes? 
----------------------------------------

public static void main (String [] args) {
    int [] LA = {1, 2, 4, 5};
    int k = 2;
    int item = 3;
    int j = LA.length;
    int [] LA_NEW = new int [LA.length + 1];
    while (j > k) {
        LA_NEW [j] = LA [j - 1];
        j = j - 1;
    }
    LA_NEW [k] = item;
    for (int i = 0;
    i < k; i ++) {
        LA_NEW [i] = LA [i];
    }
    for (int i : LA_NEW) {
        System.out.println (i);
    }
}
----------------------------------------

public static void main (String [] args) {
    int [] inputArray = new int [] {10, 20, 30, 40};
    int inputArraylength = inputArray.length;
    int tempArrayLength = inputArraylength + 1;
    int num = 50, position = 2;
    int [] tempArray = new int [tempArrayLength];
    for (int i = 0;
    i < tempArrayLength; i ++) {
        if (i != position && i < position) tempArray [i] = inputArray [i];
        else if (i == position) tempArray [i] = num;
        else tempArray [i] = inputArray [i - 1];

    }
    inputArray = tempArray;
    for (int number : inputArray) {
        System.out.println ("Number is: " + number);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1164301_25929223_21_29
1164301_29790577_1_26
Title: How do I call some blocking method with a timeout in Java? 
----------------------------------------

public void blockingMethod () {
    try {
        for (int i = 0;
        i < steps && ! stopRequested; i ++) {
            doALittleBit ();
        }
    } catch (InterruptedException e) {
        throw new RuntimeException (e);
    }
}
----------------------------------------

public void blockingMethod (final Object input, long millis) {
    final Object lock = new Object ();
    new Thread (new Runnable () {
        @Override
        public void run () {
            blockingMethod (input);
            synchronized (lock) {
                lock.notify ();
            }
        }}

    ).start ();
    synchronized (lock) {
        try {
            lock.wait (millis);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11644858_25957686_1_15
11644858_28567709_11_21
Title: BubbleSort Implementation 
----------------------------------------

public static void bubbleSort () {
    int [] r = randomArrayDisplayer ();
    int i = r.length;
    while (i != 0) {
        int j = 0;
        while (j != i - 1) {
            if (r [j + 1] < r [j]) {
                swap (r, j, j + 1);
            }
            j ++;
        }
        i --;
    }
}
----------------------------------------

public int [] bubbleSort (int [] arr) {
    int n = arr.length;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 0;
        j < n - i - 1; j ++) if (arr [j] > arr [j + 1]) swap (arr, j, j + 1);

    }
    return arr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11644858_25957686_1_15
11644858_36864246_1_16
Title: BubbleSort Implementation 
----------------------------------------

public static void bubbleSort () {
    int [] r = randomArrayDisplayer ();
    int i = r.length;
    while (i != 0) {
        int j = 0;
        while (j != i - 1) {
            if (r [j + 1] < r [j]) {
                swap (r, j, j + 1);
            }
            j ++;
        }
        i --;
    }
}
----------------------------------------

void bubbleSort (int [] arr) {
    boolean swap = true;
    for (int i = arr.length - 1;
    i > 0 && swap; i --) {
        swap = false;
        for (int j = 0;
        j < i; j ++) {
            if (arr [j] > arr [j + 1]) {
                int temp = arr [j];
                arr [j] = arr [j + 1];
                arr [j + 1] = temp;
                swap = true;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11644858_25957686_1_15
11644858_40700621_1_13
Title: BubbleSort Implementation 
----------------------------------------

public static void bubbleSort () {
    int [] r = randomArrayDisplayer ();
    int i = r.length;
    while (i != 0) {
        int j = 0;
        while (j != i - 1) {
            if (r [j + 1] < r [j]) {
                swap (r, j, j + 1);
            }
            j ++;
        }
        i --;
    }
}
----------------------------------------

void bubbleSort (int arr []) {
    int n = arr.length;
    for (int i = 0;
    i < n - 1; i ++) for (int j = 0;
    j < n - i - 1; j ++) if (arr [j] > arr [j + 1]) {
        int temp = arr [j];
        arr [j] = arr [j + 1];
        arr [j + 1] = temp;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11644858_28567709_11_21
11644858_36864246_1_16
Title: BubbleSort Implementation 
----------------------------------------

public int [] bubbleSort (int [] arr) {
    int n = arr.length;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 0;
        j < n - i - 1; j ++) if (arr [j] > arr [j + 1]) swap (arr, j, j + 1);

    }
    return arr;
}
----------------------------------------

void bubbleSort (int [] arr) {
    boolean swap = true;
    for (int i = arr.length - 1;
    i > 0 && swap; i --) {
        swap = false;
        for (int j = 0;
        j < i; j ++) {
            if (arr [j] > arr [j + 1]) {
                int temp = arr [j];
                arr [j] = arr [j + 1];
                arr [j + 1] = temp;
                swap = true;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11644858_28567709_11_21
11644858_40700621_1_13
Title: BubbleSort Implementation 
----------------------------------------

public int [] bubbleSort (int [] arr) {
    int n = arr.length;
    for (int i = 0;
    i < n; i ++) {
        for (int j = 0;
        j < n - i - 1; j ++) if (arr [j] > arr [j + 1]) swap (arr, j, j + 1);

    }
    return arr;
}
----------------------------------------

void bubbleSort (int arr []) {
    int n = arr.length;
    for (int i = 0;
    i < n - 1; i ++) for (int j = 0;
    j < n - i - 1; j ++) if (arr [j] > arr [j + 1]) {
        int temp = arr [j];
        arr [j] = arr [j + 1];
        arr [j + 1] = temp;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11644858_36864246_1_16
11644858_40700621_1_13
Title: BubbleSort Implementation 
----------------------------------------

void bubbleSort (int [] arr) {
    boolean swap = true;
    for (int i = arr.length - 1;
    i > 0 && swap; i --) {
        swap = false;
        for (int j = 0;
        j < i; j ++) {
            if (arr [j] > arr [j + 1]) {
                int temp = arr [j];
                arr [j] = arr [j + 1];
                arr [j + 1] = temp;
                swap = true;
            }
        }
    }
}
----------------------------------------

void bubbleSort (int arr []) {
    int n = arr.length;
    for (int i = 0;
    i < n - 1; i ++) for (int j = 0;
    j < n - i - 1; j ++) if (arr [j] > arr [j + 1]) {
        int temp = arr [j];
        arr [j] = arr [j + 1];
        arr [j + 1] = temp;
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11656062_11656166_7_22
11656062_11657065_13_29
Title: How is the value of a static / class variable passed around? 
----------------------------------------

public static void main (String [] args) {
    GenericType.myCollection.add ("first item");
    System.out.println (GenericType.myCollection);
    Collection c = GenericType.myCollection;
    GenericType.myCollection.add ("second item");
    GenericType.myCollection = new ArrayList ();
    System.out.println (c);
    System.out.println (GenericType.myCollection);
}
----------------------------------------

public static void main (String [] args) throws Exception {
    URL url = new URL ("file:///C:/workspaces/personal/JavaTest/bin/");
    ClassLoader cl1 = new URLClassLoader (new URL [] {url}, null);
    ClassLoader cl2 = new URLClassLoader (new URL [] {url}, null);
    Class < SampleClass > sampleClass = (Class < SampleClass >) cl1.loadClass ("classloaders.SampleClass");
    Field field1 = sampleClass.getField ("loadTime");
    field1.setAccessible (true);
    System.out.println (field1.get (null));
    Class < SampleClass > sampleClass2 = (Class < SampleClass >) cl2.loadClass ("classloaders.SampleClass");
    Field field2 = sampleClass2.getField ("loadTime");
    field2.setAccessible (true);
    System.out.println (field2.get (null));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1167060_1167751_112_121
1167060_1167751_157_174
Title: How can I get an int[] out of an Iterator? 
----------------------------------------

public int [] getCollection () {
    int N = this.ints.size ();
    int [] array = new int [N];
    int j = 0;
    for (Integer i : this.ints) {
        array [j ++] = i;
    }
    return array;
}
----------------------------------------

public int [] getCollection () {
    try {
        this.out.flush ();
        final int [] ints = new int [this.size];
        final ByteArrayInputStream byteIn = new ByteArrayInputStream (this.byteOut.toByteArray ());
        final DataInputStream in = new DataInputStream (byteIn);
        for (int ct = 0;
        ct < ints.length; ++ ct) {
            ints [ct] = in.readInt ();
        }
        return ints;
    } catch (IOException e) {
    }
    return new int [0];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11688581_11689669_1_29
11688581_11696293_3_51
Title: Search a JTable repeatedly using JTextfield text 
----------------------------------------

private void search8 () {
    ArrayList < String > resultList = new ArrayList < String > ();
    String target8 = sear8.getText ();
    for (int row = 0;
    row < table8.getRowCount (); row ++) {
        for (int col = 0;
        col < table8.getColumnCount (); col ++) {
            String next8 = (String) table8.getValueAt (row, col);
            if (next8.contains (target8)) {
                resultList.add (row + "," + col);
            }
        }
    }
    System.out.println (sarr8.length);
    String [] tokens;
    for (String result : resultList) {
        try {
            tokens = result.split ("[,]");
            showSearchResults (tokens [0], tokens [1]);
        } finally {
            tokens = null;
        }
    }
}
----------------------------------------

protected void search8 () {
    List < Point > slist8 = new ArrayList < Point > (25);
    int i = 0;
    String target8 = sear8.getText ();
    for (int row = 0;
    row < table8.getRowCount (); row ++) {
        for (int col = 0;
        col < table8.getColumnCount (); col ++) {
            String next8 = (String) table8.getValueAt (row, col);
            if (next8.contains (target8)) {
                Point cell = new Point (col.row);
                slist8.add (cell);
            }
        }
    }
    System.out.println (slist8.size ());
    showSearchResults (slist8);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11695894_11695996_1_11
11695894_11696186_1_23
Title: How to add more than one editview to submit to email intent 
----------------------------------------

public void onClick (View v) {
    String [] recipients = new String [] {"email@email.com", "email2@email.com"};
    String subject = textSubject.getText ().toString ();
    String name = nametext.getText ().toString ();
    String email = emailtext.getText ().toString ();
    String phone = phonetext.getText ().toString ();
    String topics = topicstext.getText ().toString ();
    String details = deatilstext.getText ().toString ();
}
----------------------------------------

public void onClick (View v) {
    StringBuilder emailBodyBuilder = new StringBuilder ();
    emailBodyBuilder.append (textSubject.getText ().toString ());
    emailBodyBuilder.append ("\n");
    emailBodyBuilder.append (nametext.getText ().toString ());
    emailBodyBuilder.append ("\n");
    emailBodyBuilder.append (emailtext.getText ().toString ());
    emailBodyBuilder.append ("\n");
    emailBodyBuilder.append (topicstext.getText ().toString ());
    emailBodyBuilder.append ("\n");
    emailBodyBuilder.append (phonetext.getText ().toString ());
    emailBodyBuilder.append ("\n");
    emailBodyBuilder.append (deatilstext.getText ().toString ());
    final Intent emailIntent = new Intent (android.content.Intent.ACTION_SEND);
    emailIntent.setType ("plain/text");
    emailIntent.putExtra (android.content.Intent.EXTRA_EMAIL, new String [] {"email1@domen.com", "email2@domen.com"});
    emailIntent.putExtra (android.content.Intent.EXTRA_SUBJECT, textSubject.getText ().toString ());
    emailIntent.putExtra (android.content.Intent.EXTRA_TEXT, emailBodyBuilder.toString ());
    activity.startActivity (Intent.createChooser (emailIntent, "Send mail..."));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1169739_1170340_14_30
1169739_1170340_33_54
Title: Java TCP socket: data transfer is slow 
----------------------------------------

public void run () {
    try {
        ServerSocket serverSocket = new ServerSocket (12345);
        Socket clientSocket = serverSocket.accept ();
        long startTime = System.currentTimeMillis ();
        byte [] buffer = new byte [BUFFER_SIZE];
        int read;
        int totalRead = 0;
        InputStream clientInputStream = clientSocket.getInputStream ();
        while ((read = clientInputStream.read (buffer)) != - 1) {
            totalRead += read;
        }
        long endTime = System.currentTimeMillis ();
        System.out.println (totalRead + " bytes read in " + (endTime - startTime) + " ms.");
    } catch (IOException e) {
    }
}
----------------------------------------

public void run () {
    try {
        Thread.sleep (1000);
        Socket socket = new Socket ("localhost", 12345);
        FileInputStream fileInputStream = new FileInputStream (largeFile);
        OutputStream socketOutputStream = socket.getOutputStream ();
        long startTime = System.currentTimeMillis ();
        byte [] buffer = new byte [BUFFER_SIZE];
        int read;
        int readTotal = 0;
        while ((read = fileInputStream.read (buffer)) != - 1) {
            socketOutputStream.write (buffer, 0, read);
            readTotal += read;
        }
        socketOutputStream.close ();
        fileInputStream.close ();
        socket.close ();
        long endTime = System.currentTimeMillis ();
        System.out.println (readTotal + " bytes written in " + (endTime - startTime) + " ms.");
    } catch (Exception e) {
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11698160_11799612_8_18
11698160_11800496_8_18
Title: JAXB inheritance conflict - Re-annotating on sub-classes 
----------------------------------------

public static void main (String [] args) throws Exception {
    JAXBContext jc = JAXBContext.newInstance (Bobar.class);
    Unmarshaller unmarshaller = jc.createUnmarshaller ();
    File xml = new File ("src/forum11698160/input.xml");
    Bobar bobar = (Bobar) unmarshaller.unmarshal (xml);
    Marshaller marshaller = jc.createMarshaller ();
    marshaller.setProperty (Marshaller.JAXB_FORMATTED_OUTPUT, true);
    marshaller.marshal (bobar, System.out);
}
----------------------------------------

public static void main (String [] args) throws Exception {
    JAXBContext jc = JAXBContext.newInstance (Bobar.class);
    Unmarshaller unmarshaller = jc.createUnmarshaller ();
    File xml = new File ("src/forum11698160/input.xml");
    Bobar bobar = (Bobar) unmarshaller.unmarshal (xml);
    Marshaller marshaller = jc.createMarshaller ();
    marshaller.setProperty (Marshaller.JAXB_FORMATTED_OUTPUT, true);
    marshaller.marshal (bobar, System.out);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11702121_11702160_1_10
11702121_11702176_1_10
Title: how to refactor this method which has multiple if/else statements 
----------------------------------------

private String someReportUrl (HttpServletRequest request, HttpServletResponse response) {
    String url = "/standAlone/reportUrl.jsp";
    if (isBackToReportsSummary (request)) {
        url = SUMMARY_PAGE;
        getReportsSummary (request, response);
    } else if (isComingFromPageA (request)) {
        url = getTabUrl (request, REPORT_URL_FOR_PAGE_A);
    }

    return url;
}
----------------------------------------

private String someReportUrl (HttpServletRequest request, HttpServletResponse response) {
    if (isBackToReportsSummary (request)) {
        getReportsSummary (request, response);
        return SUMMARY_PAGE;
    }
    if (isComingFromPageA (request)) {
        return getTabUrl (request, REPORT_URL_FOR_PAGE_A);
    }
    return "/standAlone/reportUrl.jsp";
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11706774_44541545_1_23
11706774_44816830_46_71
Title: How to print a Trie in Java? 
----------------------------------------

public void printTrie (TrieNode node, String s) {
    String strSoFar = s;
    strSoFar += String.valueOf (node.c);
    if (node.isLeaf) {
        System.out.println (strSoFar);
        return;
    } else {
        Stack < TrieNode > stack = new Stack < TrieNode > ();
        Iterator < TrieNode > itr = node.children.values ().iterator ();
        while (itr.hasNext ()) {
            stack.add (itr.next ());
        }
        while (! stack.empty ()) {
            TrieNode t = stack.pop ();
            printTrie (t, strSoFar);
        }
    }
}
----------------------------------------

public static void printTrie (TrieNode node) {
    if (node == null || node.visited) return;

    LinkedList < TrieNode > q = new LinkedList < TrieNode > ();
    System.out.println (node);
    node.visited = true;
    q.add (node);
    while (! q.isEmpty ()) {
        TrieNode x = q.removeFirst ();
        for (Map.Entry < Character, TrieNode > i : x.neighbors.entrySet ()) {
            if (i.getValue ().visited == false) {
                System.out.println (i);
                i.getValue ().visited = true;
                q.add (i.getValue ());
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11709536_19977629_27_45
11709536_19977629_7_24
Title: Write a program using java threads to print the following sequence 2 3 4 6 6 9 8 12 10 (Multiple of 2 and 3 in a sequence) 
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 10; i ++) {
        synchronized (lock2) {
            synchronized (lock1) {
                lock1.notify ();
                int n = 3;
                int result = n * i;
                printResult (result);
            }
            try {
                lock2.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    for (int i = 1;
    i <= 10; i ++) {
        synchronized (lock1) {
            synchronized (lock2) {
                lock2.notify ();
                int n = 2;
                int result = n * i;
                printResult (result);
            }
            try {
                lock1.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11721013_28686513_5_19
11721013_46425710_14_33
Title: store X and Y coordinates 
----------------------------------------

public static void main (String [] arguments) {
    Point location = new Point (4, 13);
    System.out.println ("Starting location:");
    System.out.println ("X equals " + location.x);
    System.out.println ("Y equals " + location.y);
    System.out.println ("\nMoving to (7, 6)");
    location.x = 7;
    location.y = 6;
    System.out.println ("\nEnding location:");
    System.out.println ("X equals " + location.x);
    System.out.println ("Y equals " + location.y);
}
----------------------------------------

public static void main (String [] args) {
    Scanner inn = new Scanner (System.in);
    int nInleste = 3;
    double [] tall = new double [nInleste];
    double sum = 0;
    for (int i = 0;
    i < nInleste; i ++) {
        System.out.println ("Leste en tall!");
        tall [i] = inn.nextDouble ();
        sum += tall [i];
    }
    System.out.println (sum);
    double snitt = nInleste / nInleste;
    System.out.println ("Gjennomsnittsverdien:" + snitt);
    for (int i = 0;
    i < nInleste; i ++) {
        double aavik = tall [i] - snitt;
        int avvivk = 0;
        System.out.println (i + 1 + " Tal sitt avvik fra gjennomsnittet " + avvivk);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11732200_11732304_8_21
11732200_11732802_20_54
Title: Java Interview Task: Complete the Java method for a sorted array 
----------------------------------------

static void PrintIntSumValues (int Sum, int sortedInts []) {
    HashMap < Integer, Boolean > pool = new HashMap < Integer, Boolean > ();
    for (int i = 0;
    i < sortedInts.length; i ++) {
        int current = sortedInts [i];
        int target = Sum - current;
        if (pool.containsKey (target)) {
            System.out.println (String.format ("%d and %d sum to %d", current, target, Sum));
            break;
        } else {
            pool.put (current, Boolean.TRUE);
        }
    }
}
----------------------------------------

static void PrintIntSumValues (int Sum, int sortedInts []) {
    int offset = sortedInts.length - 1;
    for (int i = 0;
    i < sortedInts.length; i ++) {
        if ((sortedInts [i] + sortedInts [offset]) == Sum) {
            System.out.println ("sortedInts[" + i + "]+sortedInts[" + offset + "] sums to " + Sum + ".");
            return;
        } else {
            int remaining = Sum - sortedInts [i];
            if (remaining < sortedInts [i]) {
                if (remaining < sortedInts [offset]) {
                    offset = 0 + (offset - 0) / 2;
                } else {
                    offset = offset + (i - offset) / 2;
                }
            } else {
                if (remaining < sortedInts [offset]) {
                    offset = i + (offset - i) / 2;
                } else {
                    offset = offset + (sortedInts.length - offset) / 2;
                }
            }
        }
    }
    System.out.println ("There was no sum :(");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11736555_13331897_64_91
11736555_39480525_37_57
Title: Java autentication of Drupal passwords 
----------------------------------------

private static String password_crypt (String password, String passwordHash) throws Exception {
    passwordHash = passwordHash.substring (0, 12);
    int count_log2 = password_get_count_log2 (passwordHash);
    String salt = passwordHash.substring (4, 12);
    if (salt.length () != 8) {
        return null;
    }
    int count = 1 << count_log2;
    byte [] hash;
    try {
        hash = sha512 (salt.concat (password));
        do {
            hash = sha512 (joinBytes (hash, password.getBytes ("UTF-8")));
        } while (-- count > 0);
    } catch (Exception e) {
        System.out.println ("error " + e.toString ());
        return null;
    }
    String output = passwordHash + _password_base64_encode (hash, hash.length);
    return (output.length () > 0) ? output.substring (0, DRUPAL_HASH_LENGTH) : null;
}
----------------------------------------

private static String password_crypt (String password, String passwordHash) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    passwordHash = passwordHash.substring (0, 12);
    int count_log2 = passwordGetCount (passwordHash);
    String salt = passwordHash.substring (4, 12);
    if (salt.length () != 8) {
        return null;
    }
    int count = 1 << count_log2;
    byte [] hash = sha512 (salt.concat (password).getBytes ());
    do {
        hash = sha512 (joinBytes (hash, password.getBytes ("UTF-8")));
    } while (-- count > 0);
    String output = passwordHash + passwordBase64Encode (hash, hash.length);
    return (output.length () > 0) ? output.substring (0, DRUPAL_HASH_LENGTH) : null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11736692_11736789_1_12
11736692_11736984_1_11
Title: Deleting files from a folder - android 
----------------------------------------

private static boolean delete (File dir) {
    if (dir != null && dir.isDirectory ()) {
        String [] children = dir.list ();
        for (int i = 0;
        i < children.length; i ++) {
            boolean success = delete (new File (dir, children [i]));
            if (! success) {
                return false;
            }
        }
    }
    return (dir.getName ().contains (".FIR")) ? dir.delete () : false;
}
----------------------------------------

void delete (File f) throws IOException {
    if (f.isDirectory ()) {
        for (File c : f.listFiles ()) {
            delete (c);
        }
    } else if (f.getAbsolutePath ().endsWith ("FIR")) {
        if (! f.delete ()) {
            new FileNotFoundException ("Failed to delete file: " + f);
        }
    }

}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11737110_11738675_18_34
11737110_11757437_18_36
Title: ImageIO jpg the image becomes pink after resizeImage 
----------------------------------------

protected void initUI () throws MalformedURLException, IOException {
    final JFrame frame = new JFrame (TestImageResize.class.getSimpleName ());
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    BufferedImage bi = ImageIO.read (new URL ("http://noupe.com/img/wallpaper-4.jpg"));
    File file = new File (System.getProperty ("user.home"), "test.jpg");
    FileOutputStream fos = new FileOutputStream (file);
    Image image = bi.getScaledInstance (100, - 1, Image.SCALE_SMOOTH);
    BufferedImage bsi = new BufferedImage (image.getWidth (null), image.getHeight (null), BufferedImage.TYPE_INT_RGB);
    bsi.getGraphics ().drawImage (image, 0, 0, null);
    ImageIO.write (bsi, "jpg", fos);
    JPanel panel = new JPanel ();
    JLabel label = new JLabel (new ImageIcon (file.getAbsolutePath ()));
    panel.add (label);
    frame.add (panel);
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------

protected void initUI () throws MalformedURLException, IOException {
    final JFrame frame = new JFrame (ImageTest.class.getSimpleName ());
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    BufferedImage bi = ImageIO.read (new URL ("http://www.google.co.kr/logos/2012/field_hockey-2012-hp.jpg"));
    File file = new File (System.getProperty ("user.home"), "test1.jpg");
    FileOutputStream fos = new FileOutputStream (file);
    Image image = bi.getScaledInstance (100, - 1, Image.SCALE_SMOOTH);
    BufferedImage bsi = new BufferedImage (image.getWidth (null), image.getHeight (null), BufferedImage.TYPE_INT_ARGB);
    bsi.getGraphics ().drawImage (image, 0, 0, null);
    ImageIO.write (bi, "jpg", fos);
    JPanel panel = new JPanel ();
    JLabel label = new JLabel (new ImageIcon (file.getAbsolutePath ()));
    panel.add (label);
    frame.add (panel);
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11737110_11738675_36_50
11737110_11757437_1_16
Title: ImageIO jpg the image becomes pink after resizeImage 
----------------------------------------

public static void main (String [] args) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            try {
                new TestImageResize ().initUI ();
            } catch (MalformedURLException e) {
                e.printStackTrace ();
            } catch (IOException e) {
                e.printStackTrace ();
            }
        }}

    );
}
----------------------------------------

public static void main (String argsp []) {
    SwingUtilities.invokeLater (new Runnable () {
        @Override
        public void run () {
            try {
                new ImageTest ().initUI ();
            } catch (MalformedURLException e) {
                e.printStackTrace ();
            } catch (IOException e) {
                e.printStackTrace ();
            }
        }}

    );
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11737110_11738675_40_48
11737110_11757437_5_13
Title: ImageIO jpg the image becomes pink after resizeImage 
----------------------------------------

public void run () {
    try {
        new TestImageResize ().initUI ();
    } catch (MalformedURLException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        new ImageTest ().initUI ();
    } catch (MalformedURLException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11738060_11738492_1_17
11738060_11738715_5_30
Title: Basic array issue in Java 
----------------------------------------

public static void main (String [] args) {
    int wordList [] = new int [20];
    System.out.println ("Please enter a sentence.");
    Scanner scanner = new Scanner (System.in);
    for (int i = 0;
    i <= wordList.length; i ++) {
        String s = scanner.next ();
        int length = s.length ();
        wordList [length] ++;
    }
    for (int i = 0;
    i < wordList.length; i ++) {
        if (wordList [i] > 0) {
            System.out.println (i + "-letter words: " + wordList [i]);
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    HashMap < Integer, Integer > statistic = new HashMap < Integer, Integer > ();
    System.out.println ("Please enter a sentence.");
    Scanner in = new Scanner (System.in);
    String s = in.nextLine ();
    String [] words = s.split (" ");
    for (int i = 0;
    i < words.length; i ++) {
        if (statistic.containsKey (words [i].length ())) {
            Integer value = statistic.get (words [i].length ());
            statistic.put (words [i].length (), value + 1);
        } else statistic.put (words [i].length (), 1);

    }
    for (Integer num : statistic.keySet ()) {
        Integer key = num;
        Integer value = statistic.get (num);
        System.out.println (key + "-letter words: " + value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
11740013_11740146_24_36
11740013_11740146_42_51
Title: Fastest way to recreate the ArrayList in a for loop 
----------------------------------------

public void run (int [] data, int initialSize, int n) {
    List < Integer > values = new ArrayList < Integer > ();
    for (int iter = 0;
    iter < n; iter ++) {
        values.clear ();
        for (int i = 0;
        i < data.length; i ++) {
            int x = data [i];
            if (values.contains (x)) continue;

            values.add (x);
        }
    }
}
----------------------------------------

public void run (int [] data, int initialSize, int n) {
    for (int iter = 0;
    iter < n; iter ++) {
        Set < Integer > values = new HashSet < > (initialSize, 1.0f);
        for (int i = 0;
        i < data.length; i ++) {
            int x = data [i];
            if (values.contains (x)) continue;

            values.add (x);
        }
    }
}
----------------------------------------

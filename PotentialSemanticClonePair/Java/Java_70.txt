$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30852641_30852750_1_13
30852641_30852764_1_18
Title: How to deal with IOException 
----------------------------------------

public static void saveObjectToTextFile (String string, String textFileName) {
    BufferedWriter bw = null;
    try {
        bw = new BufferedWriter (new FileWriter (new File (textFileName)));
        bw.write (string);
    } catch (IOException e) {
    } finally {
        bw.close ();
    }
}
----------------------------------------

public static void saveObjectToTextFile (String string, String textFileName) throws IOException {
    BufferedWriter bw = null;
    try {
        bw = new BufferedWriter (new FileWriter (new File (textFileName)));
        bw.write (string);
    } catch (Exception e) {
        e.printStackTrace ();
    } finally {
        try {
            bw.close ();
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30852641_30852764_1_18
30852641_30852833_1_12
Title: How to deal with IOException 
----------------------------------------

public static void saveObjectToTextFile (String string, String textFileName) throws IOException {
    BufferedWriter bw = null;
    try {
        bw = new BufferedWriter (new FileWriter (new File (textFileName)));
        bw.write (string);
    } catch (Exception e) {
        e.printStackTrace ();
    } finally {
        try {
            bw.close ();
        } catch (Exception e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public static void saveObjectToTextFile (String string, String textFileName) {
    BufferedWriter bw = null;
    try {
        bw = new BufferedWriter (new FileWriter (new File (textFileName)));
        bw.write (string);
    } catch (IOException e) {
    } finally {
        bw.close ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30856244_30856337_1_17
30856244_30856883_1_16
Title: Java > Array-2 > zeroMax 
----------------------------------------

public int [] zeroMax (int [] nums) {
    int acum = 0;
    int i = 0;
    for (i = 0; i < nums.length; i ++) {
        if (nums [i] == 0) {
            for (int j = i;
            j < nums.length; j ++) {
                if (nums [j] % 2 != 0 && nums [j] > acum) {
                    acum = nums [j];
                }
            }
            nums [i] = acum;
            acum = 0;
        }
    }
    return nums;
}
----------------------------------------

public int [] zeroMax (final int [] nums) {
    int replace = 0;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        final int next = nums [i];
        if (next == 0) {
            nums [i] = replace;
        } else if (next % 2 == 1 && next > replace) {
            replace = next;
        }

    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30856244_30856337_1_17
30856244_39564609_1_17
Title: Java > Array-2 > zeroMax 
----------------------------------------

public int [] zeroMax (int [] nums) {
    int acum = 0;
    int i = 0;
    for (i = 0; i < nums.length; i ++) {
        if (nums [i] == 0) {
            for (int j = i;
            j < nums.length; j ++) {
                if (nums [j] % 2 != 0 && nums [j] > acum) {
                    acum = nums [j];
                }
            }
            nums [i] = acum;
            acum = 0;
        }
    }
    return nums;
}
----------------------------------------

public int [] zeroMax (int [] nums) {
    int val = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 0) {
            for (int j = i + 1;
            j < nums.length; j ++) {
                if (val <= nums [j]) {
                    if (nums [j] % 2 == 1) {
                        val = nums [j];
                    }
                }
            }
            nums [i] = val;
            val = 0;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30856244_30856883_1_16
30856244_39564609_1_17
Title: Java > Array-2 > zeroMax 
----------------------------------------

public int [] zeroMax (final int [] nums) {
    int replace = 0;
    for (int i = nums.length - 1;
    i >= 0; i --) {
        final int next = nums [i];
        if (next == 0) {
            nums [i] = replace;
        } else if (next % 2 == 1 && next > replace) {
            replace = next;
        }

    }
    return nums;
}
----------------------------------------

public int [] zeroMax (int [] nums) {
    int val = 0;
    for (int i = 0;
    i < nums.length; i ++) {
        if (nums [i] == 0) {
            for (int j = i + 1;
            j < nums.length; j ++) {
                if (val <= nums [j]) {
                    if (nums [j] % 2 == 1) {
                        val = nums [j];
                    }
                }
            }
            nums [i] = val;
            val = 0;
        }
    }
    return nums;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30864540_30864988_1_55
30864540_30865326_5_51
Title: Java switch results (needing to print the values) 
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    boolean quit = false;
    double dCost = 0;
    double tCost = 0;
    StringBuilder dDetail = new StringBuilder ("The Damage Details are :");
    StringBuilder tDetail = new StringBuilder ("The Traffic details are:  ");
    while (! quit) {
        System.out.println ("Enter one of the following commands:");
        System.out.println ("1 - Damage Repair");
        System.out.println ("2 - Traffic Infringement");
        System.out.println ("3 - Exit Menu");
        int choiceEntry = Integer.parseInt (input.nextLine ());
        if (choiceEntry < 1) {
            System.out.println ("Please enter a valid menu command (1-3)");
        } else if (choiceEntry > 3) {
            System.out.println ("Please enter a valid menu command (1-3)");
        }

        double damageCost = 0;
        switch (choiceEntry) {
            case 1 :
                System.out.print ("Enter a description of the damage:");
                String damageDetail = input.nextLine ();
                System.out.print ("Enter the damage cost:");
                damageCost = Integer.parseInt (input.nextLine ());
                System.out.print ("The damage is: " + damageDetail + "\n");
                System.out.print ("The damage cost is: " + "$" + damageCost + "\n");
                dDetail.append (damageDetail + "\n");
                dCost = dCost + damageCost;
                break;
            case 2 :
                System.out.print ("Enter a description of the traffic infringement:");
                String trafficDetail = input.nextLine ();
                System.out.print ("Enter the traffic infringement cost:");
                double trafficCost = Integer.parseInt (input.nextLine ());
                tDetail.append (trafficDetail + "\n");
                tCost = tCost + trafficCost;
                break;
            case 3 :
                quit = true;
                System.out.println ("Menu entry has been terminated.");
                System.out.println ("the Total traffic cost is " + tCost);
                System.out.println ("the Total Damage cost is " + dCost);
                System.out.println (tDetail);
                System.out.println (dDetail);
                break;
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    boolean quit = false;
    StringBuilder sb = new StringBuilder ();
    outer : while (! quit) {
        System.out.println ("Enter one of the following commands:");
        System.out.println ("1 - Damage Repair");
        System.out.println ("2 - Traffic Infringement");
        System.out.println ("3 - Exit Menu");
        int choiceEntry = Integer.parseInt (input.nextLine ());
        if (choiceEntry < 1 || choiceEntry > 3) continue outer;

        double damageCost = 0;
        switch (choiceEntry) {
            case 1 :
                System.out.print ("Enter a description of the damage:");
                String damageDetail = input.nextLine ();
                System.out.print ("Enter the damage cost:");
                damageCost = Integer.parseInt (input.nextLine ());
                sb.append ("The damage is: " + damageDetail + "\n");
                sb.append ("The damage cost is: " + "$" + damageCost + "\n");
                break;
            case 2 :
                System.out.print ("Enter a description of the traffic infringement:");
                String trafficDetail = input.nextLine ();
                System.out.print ("Enter the traffic infringement cost:");
                double trafficCost = Integer.parseInt (input.nextLine ());
                sb.append ("The traffic infringement is: " + trafficDetail + "\n");
                sb.append ("The traffic infringement cost is: " + "$" + trafficCost + "\n");
                break;
            default :
                quit = true;
                System.out.println ("Menu entry has been terminated.");
                break;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3089151_12320716_7_22
3089151_3623660_8_17
Title: Specifying an order to junit 4 tests at the Method level (not class level) 
----------------------------------------

protected List < FrameworkMethod > computeTestMethods () {
    List < FrameworkMethod > list = super.computeTestMethods ();
    Collections.sort (list, new Comparator < FrameworkMethod > () {
        @Override
        public int compare (FrameworkMethod f1, FrameworkMethod f2) {
            Order o1 = f1.getAnnotation (Order.class);
            Order o2 = f2.getAnnotation (Order.class);
            if (o1 == null || o2 == null) return - 1;

            return o1.order () - o2.order ();
        }}

    );
    return list;
}
----------------------------------------

protected List computeTestMethods () {
    List list = super.computeTestMethods ();
    List copy = new ArrayList (list);
    Collections.sort (copy, new Comparator () {
        public int compare (FrameworkMethod o1, FrameworkMethod o2) {
            return o2.getName ().compareTo (o1.getName ());
        }}

    );
    return copy;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30893119_30893304_1_43
30893119_30894325_1_51
Title: Java silent AudioFile contains values in body 
----------------------------------------

public void decode (String inFileName) throws Exception {
    ByteArrayOutputStream outStream = new ByteArrayOutputStream (1024);
    InputStream is = getAssets ().open (inFileName);
    Bitstream bitstream = new Bitstream (is);
    Decoder decoder = new Decoder ();
    boolean initialized = false;
    boolean done = false;
    while (! done) {
        outStream.reset ();
        Header frameHeader = bitstream.readFrame ();
        if (frameHeader == null) {
            done = true;
        } else {
            try {
                SampleBuffer output = (SampleBuffer) decoder.decodeFrame (frameHeader, bitstream);
                if (! initialized) {
                    initialized = true;
                    processStreamInfo (output.getChannelCount (), output.getSampleFrequency ());
                }
                short [] pcm = output.getBuffer ();
                for (short s : pcm) {
                    outStream.write (s & 0xff);
                    outStream.write ((s>> 8) & 0xff);
                }
                processPCM (outStream.toByteArray ());
            } catch (Throwable t) {
                Log.e ("Throwable", "MP3", t);
            }
        }
        bitstream.closeFrame ();
    }
}
----------------------------------------

private static short [] decode (File file, int startMs, int maxMs, int bufferSize) throws IOException, BitstreamException, DecoderException {
    float totalMs = 0;
    boolean seeking = true;
    InputStream inputStream = new BufferedInputStream (new FileInputStream (file), bufferSize);
    try {
        Bitstream bitstream = new Bitstream (inputStream);
        Decoder decoder = new Decoder ();
        SampleBuffer output = null;
        boolean done = false;
        while (! done) {
            Header frameHeader = bitstream.readFrame ();
            if (frameHeader == null) {
                done = true;
            } else {
                totalMs += frameHeader.ms_per_frame ();
                if (totalMs >= startMs) {
                    seeking = false;
                }
                if (! seeking) {
                    output = (SampleBuffer) decoder.decodeFrame (frameHeader, bitstream);
                    System.out.println ("LEN: " + output.getBufferLength ());
                    if (output.getSampleFrequency () != 44100 || output.getChannelCount () != 2) {
                        System.out.println ("mono or non-44100 MP3 not supported");
                    }
                }
                if (totalMs >= (startMs + maxMs)) {
                    done = true;
                }
            }
            bitstream.closeFrame ();
        }
        return output.getBuffer ();
    } catch (BitstreamException e) {
        throw new IOException ("Bitstream error: " + e);
    } catch (DecoderException e) {
        System.out.println ("Decoder error");
    } finally {
        inputStream.close ();
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30899082_30899220_1_19
30899082_30899409_1_12
Title: Insert node recursively 
----------------------------------------

public BinaryNode recursiveInsert (int key, BinaryNode node) {
    if (node == null) {
        return root = new BinaryNode < > (key);
    } else {
        if (key < node.key) {
            if (node.left == null) {
                return node.left = newNode;
            } else {
                return recursiveInsert (key, node.left);
            }
        } else {
            if (node.right == null) {
                return node.right = newNode;
            } else {
                return recursiveInsert (key, node.right);
            }
        }
    }
}
----------------------------------------

public Node recursiveInsert (Node currentParent, Node newNode) {
    if (currentParent == null) {
        return newNode;
    } else if (newNode.key > currentParent.key) {
        currentParent.right = recursiveInsert (currentParent.right, newNode);
    } else if (newNode.key < currentParent.key) {
        currentParent.left = recursiveInsert (currentParent.left, newNode);
    }

    return currentParent;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3091816_20814652_212_222
3091816_20814652_228_237
Title: Displaying Large JLIST formatted as HTML 
----------------------------------------

public void run () {
    String previousCounter = durationIndicator.getText ();
    final String newCounter = Integer.toString (Integer.parseInt (previousCounter) + 1);
    SwingUtilities.invokeLater (new Runnable () {
        public void run () {
            durationIndicator.setText (newCounter);
            setTitle (newCounter);
        }}

    );
}
----------------------------------------

public void run () {
    try {
        JTableHtmlTest jlt = new JTableHtmlTest ();
        jlt.pack ();
        jlt.setSize (300, 300);
        jlt.setVisible (true);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30919461_30920779_27_52
30919461_30920827_1_27
Title: parsing a csv file using java 
----------------------------------------

private void readFile (Scanner scanner) {
    List < Column > columnList = new ArrayList < > ();
    String a = scanner.nextLine ();
    a = a.replace (" ", "");
    String [] values = a.split (",");
    for (int i = 1;
    i < values.length; i ++) {
        Column column = new Column (values [i]);
        columnList.add (column);
    }
    while (scanner.hasNext ()) {
        a = scanner.nextLine ();
        a = a.replace (" ", "");
        values = a.split (",");
        for (int i = 0;
        i < columnList.size (); i ++) {
            Column column = columnList.get (i);
            column.addValue (Integer.valueOf (values [i + 1]));
        }
    }
    for (int i = 0;
    i < columnList.size (); i ++) {
        System.out.println (columnList.get (i));
    }
}
----------------------------------------

public void readFile () {
    Map < String, String > map = new LinkedHashMap < String, String > ();
    boolean setInitValues = true, setKeys = true;
    String [] keys = null;
    while (x.hasNext ()) {
        String a = x.nextLine ();
        String [] values = a.split (",");
        if (setKeys) {
            keys = Arrays.copyOfRange (values, 1, values.length);
            setKeys = false;
        } else {
            if (setInitValues) {
                for (int i = 1;
                i < values.length; i ++) map.put (keys [i - 1], values [i].trim ());

                setInitValues = false;
            } else for (int i = 1;
            i < values.length; i ++) map.put (keys [i - 1], map.get (keys [i - 1]).concat (values [i].trim ()));

        }
    }
    printMap (map);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30925438_30925903_107_119
30925438_30925903_74_87
Title: Keystroke/Hot Key for JButton in Java 
----------------------------------------

public void actionPerformed (ActionEvent e) {
    Component component = (Component) e.getSource ();
    Window win = SwingUtilities.getWindowAncestor (component);
    if (win == null) {
        JPopupMenu popup = (JPopupMenu) component.getParent ();
        if (popup == null) {
            return;
        }
        component = popup.getInvoker ();
        win = SwingUtilities.getWindowAncestor (component);
    }
    win.dispose ();
}
----------------------------------------

public void actionPerformed (ActionEvent e) {
    if (dialogPanel == null) {
        dialogPanel = new ShowDialogPanel ();
    }
    if (dialog == null) {
        dialog = new JDialog (frame, "My Dialog", ModalityType.APPLICATION_MODAL);
        dialog.getContentPane ().add (dialogPanel);
        dialog.pack ();
    }
    dialog.setLocationRelativeTo (frame);
    dialog.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30935298_30936435_11_23
30935298_30936435_34_48
Title: deadlock using Semaphore 
----------------------------------------

public void run () {
    try {
        sleep (20000);
        s.acquire ();
        System.out.println ("hello");
    } catch (InterruptedException ex) {
        System.out.println (Process.class.getName ());
    }
    s.release (2);
    System.out.println ("released 2");
}
----------------------------------------

public void run () {
    try {
        this.sleep (10000);
        while (! s.tryAcquire (2)) {
            System.out.println ("Busy waiting for 2 permits");
            sleep (1000);
        }
        System.out.println ("Hello 2");
    } catch (InterruptedException ex) {
        System.out.println (Process.class.getName ());
    }
    s.release (3);
    System.out.println ("Released 3");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30935298_30936435_11_23
30935298_30936435_60_74
Title: deadlock using Semaphore 
----------------------------------------

public void run () {
    try {
        sleep (20000);
        s.acquire ();
        System.out.println ("hello");
    } catch (InterruptedException ex) {
        System.out.println (Process.class.getName ());
    }
    s.release (2);
    System.out.println ("released 2");
}
----------------------------------------

public void run () {
    System.out.println ("Acquire  process 3 ");
    while (! s.tryAcquire (3)) {
        System.out.println ("Busy waiting for 3 permits");
        try {
            sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
    System.out.println ("Hello 3");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30935298_30936435_34_48
30935298_30936435_60_74
Title: deadlock using Semaphore 
----------------------------------------

public void run () {
    try {
        this.sleep (10000);
        while (! s.tryAcquire (2)) {
            System.out.println ("Busy waiting for 2 permits");
            sleep (1000);
        }
        System.out.println ("Hello 2");
    } catch (InterruptedException ex) {
        System.out.println (Process.class.getName ());
    }
    s.release (3);
    System.out.println ("Released 3");
}
----------------------------------------

public void run () {
    System.out.println ("Acquire  process 3 ");
    while (! s.tryAcquire (3)) {
        System.out.println ("Busy waiting for 3 permits");
        try {
            sleep (1000);
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
    System.out.println ("Hello 3");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30936413_30936492_17_50
30936413_42272613_23_47
Title: getDate from mysql 
----------------------------------------

public static void main (String args []) {
    ResultSet rs = null;
    Connection conn = null;
    Statement stmt = null;
    try {
        conn = getMySQLConnection ();
        stmt = conn.createStatement ();
        rs = stmt.executeQuery ("select timeCol, dateCol, dateTimeCol from dateTimeTable");
        while (rs.next ()) {
            java.sql.Time dbSqlTime = rs.getTime (1);
            java.sql.Date dbSqlDate = rs.getDate (2);
            java.sql.Timestamp dbSqlTimestamp = rs.getTimestamp (3);
            System.out.println ("dbSqlTime=" + dbSqlTime);
            System.out.println ("dbSqlDate=" + dbSqlDate);
            System.out.println ("dbSqlTimestamp=" + dbSqlTimestamp);
            java.util.Date dbSqlTimeConverted = new java.util.Date (dbSqlTime.getTime ());
            java.util.Date dbSqlDateConverted = new java.util.Date (dbSqlDate.getTime ());
            System.out.println ("in standard date");
            System.out.println (dbSqlTimeConverted);
            System.out.println (dbSqlDateConverted);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    } finally {
        try {
            rs.close ();
            stmt.close ();
            conn.close ();
        } catch (SQLException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public static void main (String [] args) {
    ResultSet rs = null;
    Connection conn = null;
    Statement stmt = null;
    try {
        conn = getMySQLConnection ();
        stmt = conn.createStatement ();
        rs = stmt.executeQuery ("SELECT NOW()");
        while (rs.next ()) {
            System.out.println ("连接成功=" + rs);
            java.sql.Timestamp mysqlTime = rs.getTimestamp (1);
            System.out.println ("数据库时间=" + mysqlTime);
        }
    } catch (Exception e) {
        e.printStackTrace ();
    } finally {
        try {
            rs.close ();
            stmt.close ();
            conn.close ();
        } catch (SQLException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30937796_30937931_1_14
30937796_30938015_1_13
Title: Get parameter Type from dynamic method using reflection 
----------------------------------------

public Method getDynMethod (Class aClass, String methodName, Object...params) {
    Method m = null;
    Class [] paramTypes = new Class [params.length];
    for (int i = 0;
    i < paramTypes.length; i ++) {
        paramTypes [i] = params [i].getClass ();
    }
    try {
        m = aClass.getMethod (methodName, paramTypes);
    } catch (NoSuchMethodException nsme) {
        nsme.printStackTrace ();
    }
    return m;
}
----------------------------------------

public Method getDynMethod (Class aClass, String methodName) {
    for (Method m : aClass.getMethods ()) {
        if (methodName.equals (m.getName ())) {
            Class < ? > [] params = m.getParameterTypes ();
            if (params.length == 1 && (params [0] == Long.class || params [0] == String.class)) {
                return m;
            }
        }
    }
    return null;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30943142_30943338_1_19
30943142_30943338_21_46
Title: How to implement mergeSort? 
----------------------------------------

public static void mergesort (int [] v) {
    int mid = v.length / 2;
    if (v.length < 2) return;

    int l [] = new int [mid];
    int r [] = new int [v.length - mid];
    for (int i = 0;
    i <= mid - 1; i ++) l [i] = v [i];

    for (int i = mid;
    i <= v.length - 1; i ++) r [i - mid] = v [i];

    mergesort (l);
    mergesort (r);
    mergesort (l, r, v);
}
----------------------------------------

public static void mergesort (int [] l, int [] r, int [] v) {
    int i = 0, j = 0, k = 0;
    while (i < l.length && j < r.length) {
        if (l [i] <= r [j]) {
            v [k] = l [i];
            i ++;
        } else {
            v [k] = r [j];
            j ++;
        }
        k ++;
    }
    while (i < l.length) {
        v [k] = l [i];
        i ++;
        k ++;
    }
    while (j < r.length) {
        v [k] = r [j];
        j ++;
        k ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
309495_352738_25_75
309495_672775_20_36
Title: Windows shortcut (.lnk) parser in Java? 
----------------------------------------

private void parse (File f) throws Exception {
    FileInputStream fin = new FileInputStream (f);
    ByteArrayOutputStream bout = new ByteArrayOutputStream ();
    byte [] buff = new byte [256];
    while (true) {
        int n = fin.read (buff);
        if (n == - 1) {
            break;
        }
        bout.write (buff, 0, n);
    }
    fin.close ();
    byte [] link = bout.toByteArray ();
    byte flags = link [0x14];
    final int file_atts_offset = 0x18;
    byte file_atts = link [file_atts_offset];
    byte is_dir_mask = (byte) 0x10;
    if ((file_atts & is_dir_mask) > 0) {
        is_dir = true;
    } else {
        is_dir = false;
    }
    final int shell_offset = 0x4c;
    final byte has_shell_mask = (byte) 0x01;
    int shell_len = 0;
    if ((flags & has_shell_mask) > 0) {
        shell_len = bytes2short (link, shell_offset) + 2;
    }
    int file_start = 0x4c + shell_len;
    final int basename_offset_offset = 0x10;
    final int finalname_offset_offset = 0x18;
    int basename_offset = link [file_start + basename_offset_offset] + file_start;
    int finalname_offset = link [file_start + finalname_offset_offset] + file_start;
    String basename = getNullDelimitedString (link, basename_offset);
    String finalname = getNullDelimitedString (link, finalname_offset);
    real_file = basename + finalname;
}
----------------------------------------

private void parse (File f) throws IOException {
    FileInputStream fin = new FileInputStream (f);
    ByteArrayOutputStream bout = new ByteArrayOutputStream ();
    byte [] buff = new byte [256];
    while (true) {
        int n = fin.read (buff);
        if (n == - 1) {
            break;
        }
        bout.write (buff, 0, n);
    }
    fin.close ();
    byte [] link = bout.toByteArray ();
    parseLink (link);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
309495_52105443_1_11
309495_9403438_43_56
Title: Windows shortcut (.lnk) parser in Java? 
----------------------------------------

public static boolean isPotentialValidLink (final File file) {
    final int minimum_length = 0x64;
    boolean isPotentiallyValid = false;
    if (file.getName ().toLowerCase ().endsWith (".lnk")) try (final InputStream fis = new FileInputStream (file)) {
        isPotentiallyValid = file.isFile () && fis.available () >= minimum_length && isMagicPresent (getBytes (fis, 32));
    } catch (Exception e) {
    }

    return isPotentiallyValid;
}
----------------------------------------

public static boolean isPotentialValidLink (File file) throws IOException {
    final int minimum_length = 0x64;
    InputStream fis = new FileInputStream (file);
    boolean isPotentiallyValid = false;
    try {
        isPotentiallyValid = file.isFile () && file.getName ().toLowerCase ().endsWith (".lnk") && fis.available () >= minimum_length && isMagicPresent (getBytes (fis, 32));
    } finally {
        fis.close ();
    }
    return isPotentiallyValid;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30958034_30958183_1_14
30958034_30958382_7_21
Title: Removing an `int` from a fixed-sized array 
----------------------------------------

public static int [] removeFromIndex (int [] myArray, int num) {
    int [] resultArray = new int [myArray.length - 1];
    for (int i = 0;
    i < myArray.length; i ++) {
        if (myArray [i] != num) {
            resultArray.push (myArray [i]);
        } else {
            return myArray;
        }
        return resultArray;
    }
}
----------------------------------------

public static int [] removeFromIndex (int [] myArray, int num) {
    int index = 0;
    int [] resultArray = new int [myArray.length - 1];
    for (int i = 0;
    i < myArray.length; i ++) {
        if (myArray [i] == num) {
            continue;
        }
        resultArray [index] = myArray [i];
        index ++;
    }
    return resultArray;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30961513_30961713_70_98
30961513_30961801_4_14
Title: Extracting images from a text file of 100 image urls using java 
----------------------------------------

public static void main (String [] args) throws Exception {
    if (args.length < 2) {
        System.out.println ("Usage: <file with urls on each line> <dest path>");
        return;
    }
    String destPath = args [1];
    List < String > listOfURLs = Files.readAllLines (new File (args [0]).toPath ());
    ExecutorService executor = Executors.newFixedThreadPool (5);
    List < ImageSaver > save = new ArrayList < ImageSaver > ();
    for (String path : listOfURLs) {
        String fn = new File (path).getName ();
        ImageSaver worker = new ImageSaver (path, destPath + fn);
        save.add (worker);
        executor.execute (worker);
    }
    executor.shutdown ();
    while (! executor.isTerminated ()) {
        Thread.yield ();
    }
    for (ImageSaver s : save) {
        if (s.isFail ()) {
            System.out.println ("Failed to download " + s);
        }
    }
    executor.shutdown ();
    System.out.println ("All Done");
}
----------------------------------------

public static void main (String [] args) {
    String path = "https://upload.wikimedia.org/wikipedia/commons/1/1e/Stonehenge.jpg";
    String destinationFile = "C:\\Users\\user\\Desktop";
    try {
        BufferedImage tmp = ImageIO.read (new URL (path));
        ImageIO.write (tmp, "jpg", new File (destinationFile + "\\" + "image" + ".jpg"));
    } catch (Exception ex) {
        System.out.println ("Exception ex  ///" + ex);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30962343_30962462_1_24
30962343_30962542_3_29
Title: "Server activate a new thread to process each incoming client request" 
----------------------------------------

public static void main (String [] args) throws IOException {
    ExecutorService executor = Executors.newCachedThreadPool ();
    ServerSocket serverSocket = new ServerSocket (79);
    while (true) {
        final Socket socket = serverSocket.accept ();
        executor.execute (new Runnable () {
            public void run () {
                try {
                    handleSocket (socket);
                } catch (IOException e) {
                }
            } private void handleSocket (final Socket socket) throws IOException {
            }}

        );
    }
}
----------------------------------------

public static void main (String [] args) throws IOException {
    ServerSocket serverSocket = new ServerSocket (79);
    while (true) {
        final Socket socket = serverSocket.accept ();
        new Thread (new Runnable () {
            public void run () {
                System.out.println ("Accepted an echo request");
                System.out.println ("... local socket address " + socket.getLocalSocketAddress ());
                System.out.println ("... remote socket address " + socket.getRemoteSocketAddress ());
                try {
                    InputStream input = socket.getInputStream ();
                    OutputStream output = socket.getOutputStream ();
                    while (true) {
                        int b = input.read ();
                        if (b == - 1) break;

                        output.write (b);
                    }
                    socket.close ();
                } catch (IOException e) {
                    e.printStackTrace ();
                }
            }}

        ).start ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_40990341_30_52
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_44613050_40_64
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_45168192_29_54
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_49714113_12_28
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_50796159_18_44
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_52652531_11_30
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 1) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count ++;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_52652531_36_53
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 2) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_52652531_59_76
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 3) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count = count - 2;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_14_30
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (counter < 100) {
        synchronized (lock) {
            if (counter == this.prev && this.threadID % 3 == this.threadID) {
                System.out.println ("T" + this.threadID + " = " + this.prev);
                this.prev = this.prev + 3;
            }
            counter ++;
            lock.notifyAll ();
            try {
                lock.wait ();
            } catch (Exception e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_36_51
30964133_40990341_4_14
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String args []) throws InterruptedException {
    final Object lock = new Object ();
    ThreadTask first = new ThreadTask (lock, 0, counter);
    ThreadTask second = new ThreadTask (lock, 1, counter);
    ThreadTask third = new ThreadTask (lock, 2, counter);
    Thread t1 = new Thread (first, "first");
    Thread t2 = new Thread (second, "second");
    Thread t3 = new Thread (third, "third");
    t1.start ();
    t2.start ();
    t3.start ();
    t1.join ();
    t2.join ();
    t3.join ();
}
----------------------------------------

public static void main (String [] args) {
    EvenOdd1 edd1 = new EvenOdd1 ();
    AbThread tr2 = new AbThread (0, edd1);
    AbThread tr3 = new AbThread (1, edd1);
    AbThread tr4 = new AbThread (2, edd1);
    tr2.start ();
    tr3.start ();
    tr4.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_36_51
30964133_44613050_9_23
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String args []) throws InterruptedException {
    final Object lock = new Object ();
    ThreadTask first = new ThreadTask (lock, 0, counter);
    ThreadTask second = new ThreadTask (lock, 1, counter);
    ThreadTask third = new ThreadTask (lock, 2, counter);
    Thread t1 = new Thread (first, "first");
    Thread t2 = new Thread (second, "second");
    Thread t3 = new Thread (third, "third");
    t1.start ();
    t2.start ();
    t3.start ();
    t1.join ();
    t2.join ();
    t3.join ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_36_51
30964133_45168192_7_17
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String args []) throws InterruptedException {
    final Object lock = new Object ();
    ThreadTask first = new ThreadTask (lock, 0, counter);
    ThreadTask second = new ThreadTask (lock, 1, counter);
    ThreadTask third = new ThreadTask (lock, 2, counter);
    Thread t1 = new Thread (first, "first");
    Thread t2 = new Thread (second, "second");
    Thread t3 = new Thread (third, "third");
    t1.start ();
    t2.start ();
    t3.start ();
    t1.join ();
    t2.join ();
    t3.join ();
}
----------------------------------------

public static void main (String [] args) {
    TestClass testClass = new TestClass ();
    Thread t1 = new Thread (testClass.new Printer (1));
    Thread t2 = new Thread (testClass.new Printer (2));
    Thread t3 = new Thread (testClass.new Printer (3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40981400_36_51
30964133_52652531_7_84
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String args []) throws InterruptedException {
    final Object lock = new Object ();
    ThreadTask first = new ThreadTask (lock, 0, counter);
    ThreadTask second = new ThreadTask (lock, 1, counter);
    ThreadTask third = new ThreadTask (lock, 2, counter);
    Thread t1 = new Thread (first, "first");
    Thread t2 = new Thread (second, "second");
    Thread t3 = new Thread (third, "third");
    t1.start ();
    t2.start ();
    t3.start ();
    t1.join ();
    t2.join ();
    t3.join ();
}
----------------------------------------

public static void main (String [] args) {
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 1) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count ++;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T1");
    Thread t2 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 2) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T2");
    Thread t3 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 3) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count = count - 2;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_44613050_40_64
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_45168192_29_54
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_49714113_12_28
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_50796159_18_44
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_52652531_11_30
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 1) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count ++;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_52652531_36_53
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 2) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_52652531_59_76
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 3) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count = count - 2;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_30_52
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    synchronized (edd1) {
        try {
            while (true) {
                while (count % num_thread != mod) edd1.wait ();

                if (count == 30) break;

                print ();
                edd1.wait ();
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_4_14
30964133_44613050_9_23
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String [] args) {
    EvenOdd1 edd1 = new EvenOdd1 ();
    AbThread tr2 = new AbThread (0, edd1);
    AbThread tr3 = new AbThread (1, edd1);
    AbThread tr4 = new AbThread (2, edd1);
    tr2.start ();
    tr3.start ();
    tr4.start ();
}
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_4_14
30964133_45168192_7_17
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String [] args) {
    EvenOdd1 edd1 = new EvenOdd1 ();
    AbThread tr2 = new AbThread (0, edd1);
    AbThread tr3 = new AbThread (1, edd1);
    AbThread tr4 = new AbThread (2, edd1);
    tr2.start ();
    tr3.start ();
    tr4.start ();
}
----------------------------------------

public static void main (String [] args) {
    TestClass testClass = new TestClass ();
    Thread t1 = new Thread (testClass.new Printer (1));
    Thread t2 = new Thread (testClass.new Printer (2));
    Thread t3 = new Thread (testClass.new Printer (3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_40990341_4_14
30964133_52652531_7_84
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String [] args) {
    EvenOdd1 edd1 = new EvenOdd1 ();
    AbThread tr2 = new AbThread (0, edd1);
    AbThread tr3 = new AbThread (1, edd1);
    AbThread tr4 = new AbThread (2, edd1);
    tr2.start ();
    tr3.start ();
    tr4.start ();
}
----------------------------------------

public static void main (String [] args) {
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 1) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count ++;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T1");
    Thread t2 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 2) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T2");
    Thread t3 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 3) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count = count - 2;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_40_64
30964133_45168192_29_54
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_40_64
30964133_49714113_12_28
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_40_64
30964133_50796159_18_44
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_40_64
30964133_52652531_11_30
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 1) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count ++;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_40_64
30964133_52652531_36_53
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 2) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_40_64
30964133_52652531_59_76
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 3) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count = count - 2;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_40_64
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    int i = 0;
    try {
        if (firstThread) {
            Thread.sleep (5000);
            firstThread = false;
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
        while (i ++ < Integer.MAX_VALUE) {
            synchronized (currObject) {
                currObject.wait ();
            }
            System.out.println (Thread.currentThread ().getName () + " - " + ThreadSynchronization.i ++);
            Thread.sleep (1000);
            synchronized (nextObject) {
                nextObject.notify ();
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_9_23
30964133_45168192_7_17
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------

public static void main (String [] args) {
    TestClass testClass = new TestClass ();
    Thread t1 = new Thread (testClass.new Printer (1));
    Thread t2 = new Thread (testClass.new Printer (2));
    Thread t3 = new Thread (testClass.new Printer (3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_44613050_9_23
30964133_52652531_7_84
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String [] args) {
    List < Object > list = new ArrayList < > ();
    for (int i = 0;
    i < maxThreads; i ++) {
        list.add (new Object ());
    }
    Object currObject = list.get (maxThreads - 1);
    for (int i = 0;
    i < maxThreads; i ++) {
        Object nextObject = list.get (i);
        RunnableClass1 a = new RunnableClass1 (currObject, nextObject, i == 0 ? true : false);
        Thread th = new Thread (a);
        th.setName ("Thread - " + (i + 1));
        th.start ();
        currObject = list.get (i);
    }
}
----------------------------------------

public static void main (String [] args) {
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 1) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count ++;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T1");
    Thread t2 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 2) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T2");
    Thread t3 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 3) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count = count - 2;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_45168192_29_54
30964133_49714113_12_28
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_45168192_29_54
30964133_50796159_18_44
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_45168192_29_54
30964133_52652531_11_30
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 1) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count ++;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_45168192_29_54
30964133_52652531_36_53
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 2) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_45168192_29_54
30964133_52652531_59_76
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 3) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count = count - 2;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_45168192_29_54
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    try {
        while (count <= 20) {
            synchronized (object) {
                if (threadId != threadIdToRun) {
                    object.wait ();
                } else {
                    System.out.println ("Thread " + threadId + " printed " + count);
                    count += 1;
                    if (threadId == 1) threadIdToRun = 2;
                    else if (threadId == 2) threadIdToRun = 3;
                    else if (threadId == 3) threadIdToRun = 1;

                    object.notifyAll ();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_45168192_7_17
30964133_52652531_7_84
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public static void main (String [] args) {
    TestClass testClass = new TestClass ();
    Thread t1 = new Thread (testClass.new Printer (1));
    Thread t2 = new Thread (testClass.new Printer (2));
    Thread t3 = new Thread (testClass.new Printer (3));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    Thread t1 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 1) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count ++;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T1");
    Thread t2 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 2) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T2");
    Thread t3 = new Thread (new Runnable () {
        public void run () {
            while (true) {
                synchronized (lock) {
                    try {
                        Thread.sleep (100);
                        while (count != 3) {
                            lock.wait ();
                        }
                        System.out.println (Thread.currentThread ().getName () + ": " + counter);
                        count = count - 2;
                        counter ++;
                    } catch (InterruptedException e) {
                        e.printStackTrace ();
                    }
                    lock.notifyAll ();
                }
            }
        }}

    , "T3");
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_49714113_12_28
30964133_50796159_18_44
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_49714113_12_28
30964133_52652531_11_30
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 1) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count ++;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_49714113_12_28
30964133_52652531_36_53
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 2) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_49714113_12_28
30964133_52652531_59_76
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 3) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count = count - 2;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_49714113_12_28
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (running) {
        try {
            synchronized (resourceLock) {
                while (resourceLock.flag != threadNumber) {
                    resourceLock.wait ();
                }
                System.out.println ("Thread:" + threadNumber + " value: " + counter.incrementAndGet ());
                Thread.sleep (1000);
                resourceLock.flag = (threadNumber + 1) % resourceLock.threadsCount;
                resourceLock.notifyAll ();
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e);
        }
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_50796159_18_44
30964133_52652531_11_30
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 1) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count ++;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_50796159_18_44
30964133_52652531_36_53
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 2) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_50796159_18_44
30964133_52652531_59_76
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 3) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count = count - 2;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_50796159_18_44
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    String printThread;
    while (current < MAX_DIGIT) {
        synchronized (lock) {
            if (current % NO_OF_THREADS != 0) {
                printThread = THREAD_NAME_PREFIX + current % NO_OF_THREADS;
            } else {
                printThread = THREAD_NAME_PREFIX + NO_OF_THREADS;
            }
            if (! printThread.equals (Thread.currentThread ().getName ())) {
                try {
                    lock.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
            if (printThread.equals (Thread.currentThread ().getName ())) {
                System.out.println (String.format ("Thread %s : %s", Thread.currentThread ().getName (), current));
                current = current + 1;
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_52652531_11_30
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 1) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count ++;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_52652531_36_53
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 2) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30964133_52652531_59_76
30964133_53059646_1_16
Title: 3 Threads Printing numbers in sequence 
----------------------------------------

public void run () {
    while (true) {
        synchronized (lock) {
            try {
                Thread.sleep (100);
                while (count != 3) {
                    lock.wait ();
                }
                System.out.println (Thread.currentThread ().getName () + ": " + counter);
                count = count - 2;
                counter ++;
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
            lock.notifyAll ();
        }
    }
}
----------------------------------------

@Override
public void run () {
    for (int i = 3;
    ; i = i + 3) {
        try {
            sempahoreThree.acquire ();
            Thread.sleep (1000);
            System.out.println (i);
            sempahoreOne.release ();
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30965206_30966044_15_27
30965206_30966044_33_46
Title: Why do I get an infinite while loop even if I modify the lock variable? 
----------------------------------------

public void run () {
    try {
        Thread.sleep (1000);
        synchronized (guardedBlock) {
            guardedBlock.guard = true;
            guardedBlock.notifyAll ();
        }
        threadMessage ("Set guard=true");
    } catch (InterruptedException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

public void run () {
    threadMessage ("Start waiting");
    while (! guardedBlock.guard) {
        synchronized (guardedBlock) {
            try {
                guardedBlock.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
    threadMessage ("Finally!");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
309675_37165865_49_74
309675_37165865_62_70
Title: How can I make a swing JButton repeat its action when it is held down? 
----------------------------------------

public void run () {
    for (int i = 10000;
    i > 0 && autotype; i --) {
        try {
            Thread.sleep (wait);
        } catch (InterruptedException e) {
            break;
        }
        if (wait != speed) {
            wait = wait - decrement;
            if (wait < speed) wait = speed;

        }
        SwingUtilities.invokeLater (new Runnable () {
            public void run () {
                if (! autotype) return;

                ActionListener [] als = getActionListeners ();
                for (ActionListener al : als) {
                    ActionEvent aevent = new ActionEvent (getClass (), 0, myName);
                    al.actionPerformed (aevent);
                }
            }}

        );
    }
    autotype = false;
}
----------------------------------------

public void run () {
    if (! autotype) return;

    ActionListener [] als = getActionListeners ();
    for (ActionListener al : als) {
        ActionEvent aevent = new ActionEvent (getClass (), 0, myName);
        al.actionPerformed (aevent);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30969003_30969267_1_24
30969003_30969273_12_38
Title: MergeSort not giving correct output 
----------------------------------------

public Node merge (Node a, Node b) {
    Node dummyHead, curr;
    dummyHead = new Node ();
    curr = dummyHead;
    while (a != null && b != null) {
        if (a._word.compareTo (b._word) <= 0) {
            curr._next = a;
            curr = a;
            a = a._next;
        } else {
            curr._next = b;
            curr = b;
            b = b._next;
        }
        curr = curr._next;
    }
    curr._next = (a == null) ? b : a;
    return dummyHead._next;
}
----------------------------------------

public Node merge (Node a, Node b) {
    Node dummyHead = new Node ();
    Node curr = dummyHead;
    while (a != null && b != null) {
        if (a._word.compareTo (b._word) <= 0) {
            curr._next = a;
            a = a._next;
        } else {
            curr._next = b;
            b = b._next;
        }
        curr = curr._next;
    }
    while (a != null) {
        curr._next = a;
        a = a._next;
        curr = curr._next;
    }
    while (b != null) {
        curr._next = b;
        b = b._next;
        curr = curr._next;
    }
    return dummyHead._next;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30970872_30970972_1_13
30970872_30971049_1_22
Title: How to add an element to a linked list? 
----------------------------------------

public boolean add (E element) {
    for (Node ref = first;
    ref != null; ref = ref.next) {
        if (element.equals (ref.data)) {
            return false;
        }
    }
    Node newFirst = new Node (element);
    newFirst.next = first;
    first = newFirst;
    return true;
}
----------------------------------------

public boolean add (E element) {
    boolean doesElementExist = false;
    for (Node ref = first;
    ref != null; ref = ref.next) {
        if (element.equals (ref.data)) {
            doesElementExist = false;
            break;
        }
    }
    if (! doesElementExist) {
        Node newNode = new Node (element);
        newNode.next = first;
        first = newNode;
        doesElementExist = true;
    }
    return doesElementExist;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30981912_30984148_14_33
30981912_30985382_17_32
Title: java Swing: how to keep one component left aligned with another component centered with respect to parent 
----------------------------------------

public Example () {
    JPanel a = new JPanel ();
    a.setBackground (Color.RED);
    a.setPreferredSize (new Dimension (128, 128));
    JPanel b = new JPanel ();
    b.setBackground (Color.BLUE);
    b.setPreferredSize (new Dimension (128, 128));
    JPanel panel = new JPanel (new Sly493LayoutManager ());
    panel.add (a, Sly493LayoutManager.LEFT);
    panel.add (b, Sly493LayoutManager.CENTERED);
    JFrame frame = new JFrame ();
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.add (panel);
    frame.pack ();
    frame.setVisible (true);
}
----------------------------------------

public Example () {
    setLayout (null);
    a = new JPanel ();
    a.setBackground (Color.red);
    a.setPreferredSize (new Dimension (size, size));
    b = new JPanel ();
    b.setBackground (Color.blue);
    b.setPreferredSize (new Dimension (size, size));
    add (a);
    add (b);
    setPreferredSize (new Dimension (4 * size, size));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30989259_30989365_1_15
30989259_30989397_1_13
Title: counting special characters with recursion 
----------------------------------------

public static int countX (String str) {
    int count = 0;
    if (str.length () > 0) {
        if (str.substring (0, 1).equals ("x")) {
            ++ count;
        }
        str = str.substring (1, str.length ());
        count += countX (str);
    }
    return count;
}
----------------------------------------

public static int countX (String str) {
    if (str.length () == 0) {
        return 0;
    }
    if (str.substring (0, 1).equals ("x")) {
        return 1 + countX (str.substring (1));
    }
    return countX (str.substring (1));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30989259_30989365_1_15
30989259_51644785_1_14
Title: counting special characters with recursion 
----------------------------------------

public static int countX (String str) {
    int count = 0;
    if (str.length () > 0) {
        if (str.substring (0, 1).equals ("x")) {
            ++ count;
        }
        str = str.substring (1, str.length ());
        count += countX (str);
    }
    return count;
}
----------------------------------------

public int countX (String str) {
    int end = str.length ();
    int counter = 0;
    if (str.length () == 0) {
        return counter;
    } else {
        if (str.charAt (end - 1) == 'x') {
            counter ++;
        }
        end --;
        str = str.substring (0, end);
    }
    return counter + countX (str);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30989259_30989397_1_13
30989259_51644785_1_14
Title: counting special characters with recursion 
----------------------------------------

public static int countX (String str) {
    if (str.length () == 0) {
        return 0;
    }
    if (str.substring (0, 1).equals ("x")) {
        return 1 + countX (str.substring (1));
    }
    return countX (str.substring (1));
}
----------------------------------------

public int countX (String str) {
    int end = str.length ();
    int counter = 0;
    if (str.length () == 0) {
        return counter;
    } else {
        if (str.charAt (end - 1) == 'x') {
            counter ++;
        }
        end --;
        str = str.substring (0, end);
    }
    return counter + countX (str);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30990477_30990721_182_206
30990477_30990721_28_41
Title: Looking to pause a thread using thread.sleep 
----------------------------------------

public void run () {
    while (! stopped.get ()) {
        while (! stopped.get () && paused.get ()) {
            synchronized (pauseLock) {
                try {
                    pauseLock.wait ();
                } catch (InterruptedException ex) {
                }
            }
        }
        if (! stopped.get ()) {
            value.setValue (value.getValue () + delta);
            try {
                Thread.sleep (100);
            } catch (InterruptedException ex) {
            }
        }
    }
}
----------------------------------------

public void run () {
    try {
        UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
        ex.printStackTrace ();
    }
    JFrame frame = new JFrame ("Testing");
    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
    frame.add (new TestPane ());
    frame.pack ();
    frame.setLocationRelativeTo (null);
    frame.setVisible (true);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30990964_30991040_1_24
30990964_30991218_21_37
Title: How to use an iterator to replace and count 
----------------------------------------

public static < E > int replace (E match, E replacement, ArrayList < E > myList) {
    if (match == null) {
        throw new IllegalArgumentException ("match cannot be null");
    }
    if (replacement == null) {
        throw new IllegalArgumentException ("replacement cannot be null");
    }
    if (myList == null) {
        throw new IllegalArgumentException ("myList cannot be null");
    }
    int counter = 0;
    ListIterator < E > iter = myList.listIterator ();
    while (iter.hasNext ()) {
        E val = iter.next ();
        if (val.equals (match)) {
            iter.set (replacement);
            ++ counter;
        }
    }
    return counter;
}
----------------------------------------

public static < E > int replace (E match, E replacement, ArrayList < E > myList) {
    if (match == null || replacement == null || myList == null) {
        throw new IllegalArgumentException ("match cannot be null");
    }
    int i = 0;
    int replaceCount = 0;
    for (E str : myList) {
        if (str.equals (match)) {
            myList.set (i, replacement);
            replaceCount ++;
        }
        i ++;
    }
    return replaceCount;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30992450_30992555_1_10
30992450_30992829_1_14
Title: Recursion of Linked List 
----------------------------------------

public static void product (Node curr, int value) {
    if (curr == null) {
        return;
    } else {
        int data = value * curr.getData ();
        curr.setData (data);
        product (curr.getNext (), data);
    }
}
----------------------------------------

public void product (Node curr) {
    if (curr.getNext () == null) {
        return;
    } else {
        int data = curr.getData () * curr.getNext ().getData ();
        Node newNode = new Node ();
        newNode.setData (data);
        Node nodeAfterNextNode = curr.getNext ().getNext ();
        newNode.setNext (nodeAfterNextNode);
        curr.setNext (newNode);
        product (newNode);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30993681_30994313_199_224
30993681_30994313_230_251
Title: How to make a Javafx Image Crop App 
----------------------------------------

public void handle (MouseEvent event) {
    if (event.isSecondaryButtonDown ()) return;

    rect.setX (0);
    rect.setY (0);
    rect.setWidth (0);
    rect.setHeight (0);
    group.getChildren ().remove (rect);
    dragContext.mouseAnchorX = event.getX ();
    dragContext.mouseAnchorY = event.getY ();
    rect.setX (dragContext.mouseAnchorX);
    rect.setY (dragContext.mouseAnchorY);
    rect.setWidth (0);
    rect.setHeight (0);
    group.getChildren ().add (rect);
}
----------------------------------------

public void handle (MouseEvent event) {
    if (event.isSecondaryButtonDown ()) return;

    double offsetX = event.getX () - dragContext.mouseAnchorX;
    double offsetY = event.getY () - dragContext.mouseAnchorY;
    if (offsetX > 0) rect.setWidth (offsetX);
    else {
        rect.setX (event.getX ());
        rect.setWidth (dragContext.mouseAnchorX - rect.getX ());
    }
    if (offsetY > 0) {
        rect.setHeight (offsetY);
    } else {
        rect.setY (event.getY ());
        rect.setHeight (dragContext.mouseAnchorY - rect.getY ());
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30995077_30995961_6_29
30995077_30996217_1_15
Title: No such table found even though app successfully opens database from assets folder 
----------------------------------------

private void copyDataBase () throws IOException {
    InputStream myInput = myContext.getAssets ().open (DB_NAME);
    String outFileName = DB_PATH + DB_NAME;
    OutputStream myOutput = new FileOutputStream (outFileName);
    byte [] buffer = new byte [1024];
    int length;
    while ((length = myInput.read (buffer)) > 0) {
        myOutput.write (buffer, 0, length);
    }
    myOutput.flush ();
    myOutput.close ();
    myInput.close ();
}
----------------------------------------

private void copyDataBase () throws IOException {
    InputStream mInput = getApplicationContext ().getAssets ().open (DB_NAME);
    String outFileName = DB_PATH + DB_NAME;
    OutputStream mOutput = new FileOutputStream (outFileName);
    byte [] mBuffer = new byte [1024];
    int mLength;
    while ((mLength = mInput.read (mBuffer)) > 0) {
        mOutput.write (mBuffer, 0, mLength);
    }
    mOutput.flush ();
    mOutput.close ();
    mInput.close ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30995553_30995963_11_50
30995553_30997052_23_33
Title: Remove Strings with same characters in a String Array 
----------------------------------------

public static void main (String [] args) {
    String [] name1 = {"amy", "jose", "jeremy", "alice", "patrick"};
    String [] name2 = {"alan", "may", "jeremy", "helen", "alexi"};
    String [] name3 = {"adel", "aron", "amy", "james", "yam"};
    Comparator < String > comparator = new Comparator < String > () {
        @Override
        public int compare (String o1, String o2) {
            System.out.println ("Compare(" + o1 + "," + o2 + ")");
            char [] a1 = o1.toCharArray ();
            Arrays.sort (a1);
            char [] a2 = o2.toCharArray ();
            Arrays.sort (a2);
            return new String (a1).compareTo (new String (a2));
        }}

    ;
    Set < String > set = new TreeSet < String > (comparator);
    for (String name : name1) {
        set.add (name);
    }
    for (String name : name2) {
        set.add (name);
    }
    for (String name : name3) {
        set.add (name);
    }
    String [] result = set.toArray (new String [set.size ()]);
    System.out.println (Arrays.asList (result));
    TreeMap < String, Integer > map = new TreeMap < String, Integer > (comparator);
    addAll (name1, map);
    addAll (name2, map);
    addAll (name3, map);
    System.out.println (map);
}
----------------------------------------

public static void main (String [] args) {
    String [] name1 = {"amy", "jose", "jeremy", "alice", "patrick"};
    String [] name2 = {"alan", "may", "jeremy", "helen", "alexi"};
    String [] name3 = {"adel", "aron", "amy", "james", "yam"};
    Set < String > keySet = new HashSet < String > ();
    List < String > result = new ArrayList < String > ();
    check (keySet, name1, result);
    check (keySet, name2, result);
    check (keySet, name3, result);
    System.out.println (result);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
30997652_30997956_1_27
30997652_30998039_7_44
Title: Java - Create sublist from a list based on suffix 
----------------------------------------

public static void main (String args []) {
    Map < String, Set < String > > subList = new HashMap < > ();
    List < String > myList = new ArrayList < String > ();
    myList.add ("Text_1");
    myList.add ("XYZ_3");
    myList.add ("ABC_1");
    myList.add ("Text_2");
    myList.add ("Text_3");
    myList.add ("XYZ_1");
    myList.add ("XYZ_2");
    myList.add ("ABC_2");
    for (String item : myList) {
        String suffix = item.substring (item.lastIndexOf ("_"));
        if (subList.containsKey (suffix)) continue;

        Set < String > tempSet = new HashSet < String > ();
        tempSet.add (item);
        for (String value : myList) {
            if (value.endsWith (suffix)) {
                tempSet.add (value);
            }
        }
        subList.put (suffix, tempSet);
    }
    System.out.println (subList);
}
----------------------------------------

public static void main (String [] args) {
    List < String > myList = new ArrayList < String > ();
    myList.add ("Text_1");
    myList.add ("XYZ_3");
    myList.add ("ABC_1");
    myList.add ("Text_2");
    myList.add ("Text_3");
    myList.add ("XYZ_1");
    myList.add ("XYZ_2");
    myList.add ("ABC_2");
    TreeMap < String, ArrayList < String > > map = new TreeMap < > ();
    for (String item : myList) {
        String [] contents = item.split ("_");
        if (! map.containsKey (contents [1])) {
            ArrayList < String > values = new ArrayList < > ();
            values.add (contents [0]);
            map.put (contents [1], values);
        } else {
            map.get (contents [1]).add (contents [0]);
        }
    }
    for (String key : map.keySet ()) {
        System.out.println ("Key: " + key);
        System.out.print ("Values: ");
        for (String value : map.get (key)) {
            System.out.print (value + " ");
        }
        System.out.println ();
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31003508_31003599_1_15
31003508_31004088_1_14
Title: Confused with recursive methods & loops 
----------------------------------------

public boolean authenticity (short pin, int remainingAttempts) {
    if (pin == 1234) {
        System.out.println ("PIN is correct");
        System.out.println ("Card is active for operation!");
        return true;
    } else {
        pin = sc.nextShort ();
        remainingAttempts --;
        if (remainingAttempts > 0) {
            System.out.println ("PIN isn't correct! You have " + remainingAttempts + " attempts left");
            return authenticity (pin, remainingAttempts);
        }
    }
    return false;
}
----------------------------------------

public boolean authenticity (short pin, int tried) {
    if (pin == 1234) {
        System.out.println ("PIN is correct");
        System.out.println ("Card is active for operation!");
        return true;
    } else {
        pin = sc.nextShort ();
        System.out.println ("PIN isn't correct! You have " + tried + "effort(s)");
        if (tried == 0) return false;

        return authenticity (pin, -- tried);
    }
    return false;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31004606_31004698_3_18
31004606_31004714_4_15
Title: I cannot figure out these 3 related errors 
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    System.out.println ("Welcome\n");
    System.out.println ("Sales Month\t\tSales made");
    int sales [] = {60, 54, 62, 67, 54, 67, 51, 50, 62, 55, 49, 70};
    int sum = 0;
    int counter;
    for (counter = 0; counter < sales.length; counter ++) {
        sum += sales [counter];
        System.out.println ("\t\t\t\t" + sales [counter]);
    }
    System.out.println ("The sum of the sales is " + sum);
}
----------------------------------------

public static void main (String [] args) {
    Scanner keyboard = new Scanner (System.in);
    System.out.println ("Welcome\n");
    System.out.println ("Sales Month\t\tSales made");
    int sales [] = {60, 54, 62, 67, 54, 67, 51, 50, 62, 55, 49, 70};
    int sum = 0;
    for (int counter = 0;
    counter < sales.length; counter ++) {
        sum += sales [counter];
        System.out.println (counter + "\t\t\t\t" + sales [counter]);
    }
    System.out.println ("The sum of the sales is " + sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31010273_31010710_1_31
31010273_31014931_118_137
Title: JList does not populates after search button clicked 
----------------------------------------

public void search (String path) {
    lm.clear ();
    File root = new File (path);
    File [] list = root.listFiles ();
    if (list == null) {
        return;
    }
    for (File f : list) {
        if (f.isDirectory ()) {
            search (f.getAbsolutePath ());
        } else {
            if (f.getName ().endsWith (".txt") && f.getName ().startsWith ("abc")) {
                lm.addElement (f.getName ());
                System.out.println (f.getName ());
                found = true;
            }
        }
    }
    jList1.setModel (lm);
}
----------------------------------------

public List < File > search (File path) {
    firePropertyChange ("path", null, path);
    List < File > files = new ArrayList < > (25);
    if (path.exists () && path.isDirectory ()) {
        File [] list = path.listFiles (fileFilter);
        if (list != null && list.length > 0) {
            files.addAll (Arrays.asList (list));
            publish (list);
        }
        File [] dirs = path.listFiles (DIRECTORY_FILE_FILTER);
        if (dirs != null) {
            for (File dir : dirs) {
                files.addAll (search (dir));
            }
        }
    }
    return files;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31028896_41033678_1_20
31028896_48226379_1_56
Title: How to print Jasper Reports in a specified printer? 
----------------------------------------

private void PrintReportToPrinter (JasperPrint jp) throws JRException {
    PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet ();
    printRequestAttributeSet.add (new Copies (1));
    PrinterName printerName = new PrinterName ("Microsoft XPS Document Writer", null);
    PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet ();
    printServiceAttributeSet.add (printerName);
    JRPrintServiceExporter exporter = new JRPrintServiceExporter ();
    exporter.setParameter (JRExporterParameter.JASPER_PRINT, jp);
    exporter.setParameter (JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, printRequestAttributeSet);
    exporter.setParameter (JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, printServiceAttributeSet);
    exporter.setParameter (JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
    exporter.setParameter (JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.FALSE);
    exporter.exportReport ();
}
----------------------------------------

private void PrintReportToPrinter (JasperPrint jasperPrint) throws JRException {
    PrintService [] services = PrintServiceLookup.lookupPrintServices (null, null);
    String selectedPrinter = "Microsoft XPS Document Writer";
    System.out.println ("Number of print services: " + services.length);
    PrintService selectedService = null;
    PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet ();
    printRequestAttributeSet.add (MediaSizeName.ISO_A4);
    printRequestAttributeSet.add (new Copies (1));
    if (jasperPrint.getOrientationValue () == net.sf.jasperreports.engine.type.OrientationEnum.LANDSCAPE) {
        printRequestAttributeSet.add (OrientationRequested.LANDSCAPE);
    } else {
        printRequestAttributeSet.add (OrientationRequested.PORTRAIT);
    }
    PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet ();
    printServiceAttributeSet.add (new PrinterName (selectedPrinter, null));
    JRPrintServiceExporter exporter = new JRPrintServiceExporter ();
    SimplePrintServiceExporterConfiguration configuration = new SimplePrintServiceExporterConfiguration ();
    configuration.setPrintRequestAttributeSet (printRequestAttributeSet);
    configuration.setPrintServiceAttributeSet (printServiceAttributeSet);
    configuration.setDisplayPageDialog (false);
    configuration.setDisplayPrintDialog (false);
    exporter.setExporterInput (new SimpleExporterInput (jasperPrint));
    exporter.setConfiguration (configuration);
    if (services != null && services.length != 0) {
        for (PrintService service : services) {
            String existingPrinter = service.getName ();
            if (existingPrinter.equals (selectedPrinter)) {
                selectedService = service;
                break;
            }
        }
    }
    if (selectedService != null) {
        try {
            exporter.exportReport ();
        } catch (Exception e) {
            System.out.println ("JasperReport Error: " + e.getMessage ());
        }
    } else {
        System.out.println ("JasperReport Error: Printer not found!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31028964_31031723_11_29
31028964_31032293_2_10
Title: How to find a missing number from a string of digits without spaces between them? 
----------------------------------------

public static void main (String [] args) {
    MissingNumber missingNumber = new MissingNumber ();
    missingNumber.setNumberString ("1234678910");
    missingNumber.run ();
    missingNumber.setNumberString ("26272829313233");
    missingNumber.run ();
    missingNumber.setNumberString ("9293949596979899101");
    missingNumber.run ();
    missingNumber.setNumberString ("99101102103104105106107108109110111112");
    missingNumber.run ();
    missingNumber.setNumberString ("596597598600601602");
    missingNumber.run ();
    missingNumber.setNumberString ("989999009901990299049905");
    missingNumber.run ();
    missingNumber.setNumberString ("98999901990299039904990599069907");
    missingNumber.run ();
    missingNumber.setNumberString ("9998999910000100011000210004");
    missingNumber.run ();
}
----------------------------------------

public static void main (String...args) throws Exception {
    System.out.println (gapFinder ("12345789"));
    System.out.println (gapFinder ("99101"));
    System.out.println (gapFinder ("124126"));
    System.out.println ("fail expected: " + gapFinder ("124125"));
    System.out.println ("fail expected: " + gapFinder ("123456A8"));
    System.out.println ("fail expected: " + gapFinder ("9910010210"));
    System.out.println ("fail expected: " + gapFinder ("10121416"));
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31028964_31031723_11_29
31028964_31034371_1_71
Title: How to find a missing number from a string of digits without spaces between them? 
----------------------------------------

public static void main (String [] args) {
    MissingNumber missingNumber = new MissingNumber ();
    missingNumber.setNumberString ("1234678910");
    missingNumber.run ();
    missingNumber.setNumberString ("26272829313233");
    missingNumber.run ();
    missingNumber.setNumberString ("9293949596979899101");
    missingNumber.run ();
    missingNumber.setNumberString ("99101102103104105106107108109110111112");
    missingNumber.run ();
    missingNumber.setNumberString ("596597598600601602");
    missingNumber.run ();
    missingNumber.setNumberString ("989999009901990299049905");
    missingNumber.run ();
    missingNumber.setNumberString ("98999901990299039904990599069907");
    missingNumber.run ();
    missingNumber.setNumberString ("9998999910000100011000210004");
    missingNumber.run ();
}
----------------------------------------

public static void main (String [] args) {
    String pattern = "(\\d{%s})(\\d{0,%s})";
    String toVerify = "9979989991000100110021004";
    String toVerifyCopy = toVerify;
    List < Integer > items = new LinkedList < > ();
    Integer found = null;
    for (int i = 1;
    i < toVerifyCopy.length (); i ++) {
        int first = 0;
        Integer second = 0;
        int secondSize = i;
        boolean isSize = false;
        for (int j = 1;
        j < i + 2; j ++) {
            Pattern patron = Pattern.compile (String.format (pattern, i, j));
            Matcher matcher = patron.matcher (toVerifyCopy);
            if (matcher.find ()) {
                first = Integer.parseInt (matcher.group (1));
                second = Integer.parseInt (matcher.group (2));
                if (second == first + 1) {
                    secondSize = j;
                    isSize = true;
                    j ++;
                } else if (second == first + 2) {
                    found = first + 1;
                    secondSize = j;
                    isSize = true;
                    j ++;
                } else {
                    isSize = false;
                }

            }
        }
        if (isSize) {
            toVerifyCopy = toVerifyCopy.substring (i);
            i = i - 1;
            if (items.size () < 2 || toVerifyCopy.length () == i + secondSize) {
                items.add (first);
            }
            items.add (second);
        } else {
            if (items.size () > 0) {
                if (first == items.get (items.size () - 1)) {
                    items.clear ();
                    toVerifyCopy = toVerify;
                }
            }
        }
    }
    for (Integer item : items) {
        System.out.println (item);
    }
    if (found != null) {
        System.out.println ("Found: " + found);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31028964_31031723_11_29
31028964_48711880_51_62
Title: How to find a missing number from a string of digits without spaces between them? 
----------------------------------------

public static void main (String [] args) {
    MissingNumber missingNumber = new MissingNumber ();
    missingNumber.setNumberString ("1234678910");
    missingNumber.run ();
    missingNumber.setNumberString ("26272829313233");
    missingNumber.run ();
    missingNumber.setNumberString ("9293949596979899101");
    missingNumber.run ();
    missingNumber.setNumberString ("99101102103104105106107108109110111112");
    missingNumber.run ();
    missingNumber.setNumberString ("596597598600601602");
    missingNumber.run ();
    missingNumber.setNumberString ("989999009901990299049905");
    missingNumber.run ();
    missingNumber.setNumberString ("98999901990299039904990599069907");
    missingNumber.run ();
    missingNumber.setNumberString ("9998999910000100011000210004");
    missingNumber.run ();
}
----------------------------------------

public static void main (String [] args) {
    findGap ("012346789");
    findGap ("1234678910");
    findGap ("26272829313233");
    findGap ("26272829313333");
    findGap ("9293949596979899101");
    findGap ("99101102103104105106107108109110111112");
    findGap ("596597598600601602");
    findGap ("989999009901990299049905");
    findGap ("98999901990299039904990599069907");
    findGap ("9998999910000100011000210004");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31028964_31032293_2_10
31028964_31034371_1_71
Title: How to find a missing number from a string of digits without spaces between them? 
----------------------------------------

public static void main (String...args) throws Exception {
    System.out.println (gapFinder ("12345789"));
    System.out.println (gapFinder ("99101"));
    System.out.println (gapFinder ("124126"));
    System.out.println ("fail expected: " + gapFinder ("124125"));
    System.out.println ("fail expected: " + gapFinder ("123456A8"));
    System.out.println ("fail expected: " + gapFinder ("9910010210"));
    System.out.println ("fail expected: " + gapFinder ("10121416"));
}
----------------------------------------

public static void main (String [] args) {
    String pattern = "(\\d{%s})(\\d{0,%s})";
    String toVerify = "9979989991000100110021004";
    String toVerifyCopy = toVerify;
    List < Integer > items = new LinkedList < > ();
    Integer found = null;
    for (int i = 1;
    i < toVerifyCopy.length (); i ++) {
        int first = 0;
        Integer second = 0;
        int secondSize = i;
        boolean isSize = false;
        for (int j = 1;
        j < i + 2; j ++) {
            Pattern patron = Pattern.compile (String.format (pattern, i, j));
            Matcher matcher = patron.matcher (toVerifyCopy);
            if (matcher.find ()) {
                first = Integer.parseInt (matcher.group (1));
                second = Integer.parseInt (matcher.group (2));
                if (second == first + 1) {
                    secondSize = j;
                    isSize = true;
                    j ++;
                } else if (second == first + 2) {
                    found = first + 1;
                    secondSize = j;
                    isSize = true;
                    j ++;
                } else {
                    isSize = false;
                }

            }
        }
        if (isSize) {
            toVerifyCopy = toVerifyCopy.substring (i);
            i = i - 1;
            if (items.size () < 2 || toVerifyCopy.length () == i + secondSize) {
                items.add (first);
            }
            items.add (second);
        } else {
            if (items.size () > 0) {
                if (first == items.get (items.size () - 1)) {
                    items.clear ();
                    toVerifyCopy = toVerify;
                }
            }
        }
    }
    for (Integer item : items) {
        System.out.println (item);
    }
    if (found != null) {
        System.out.println ("Found: " + found);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
31028964_31032293_2_10
31028964_48711880_51_62
Title: How to find a missing number from a string of digits without spaces between them? 
----------------------------------------

public static void main (String...args) throws Exception {
    System.out.println (gapFinder ("12345789"));
    System.out.println (gapFinder ("99101"));
    System.out.println (gapFinder ("124126"));
    System.out.println ("fail expected: " + gapFinder ("124125"));
    System.out.println ("fail expected: " + gapFinder ("123456A8"));
    System.out.println ("fail expected: " + gapFinder ("9910010210"));
    System.out.println ("fail expected: " + gapFinder ("10121416"));
}
----------------------------------------

public static void main (String [] args) {
    findGap ("012346789");
    findGap ("1234678910");
    findGap ("26272829313233");
    findGap ("26272829313333");
    findGap ("9293949596979899101");
    findGap ("99101102103104105106107108109110111112");
    findGap ("596597598600601602");
    findGap ("989999009901990299049905");
    findGap ("98999901990299039904990599069907");
    findGap ("9998999910000100011000210004");
}
----------------------------------------

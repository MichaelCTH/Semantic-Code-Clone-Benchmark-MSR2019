$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_41052402_9_24
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    colWidths = [0] * len(data)
    for m in range(len(colWidths)) :
    INDENT
        for n in range(len(data [0])) :
        INDENT
            if colWidths [m] < len(data [m] [n]) :
            INDENT
                colWidths [m] = len(data [m] [n])

            DEDENT
        DEDENT
    DEDENT
    for u in range(len(data [0])) :
    INDENT
        for v in range(len(data)) :
        INDENT
            print(data [v] [u].rjust(colWidths [v] + 1), end = '')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_45532186_5_12
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_45536270_7_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_46117628_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_42076554_5_13
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)
    for i in range(len(tableData)) :
    INDENT
        for x in range(len(tableData [i])) :
        INDENT
            if colWidths [i] < len(tableData [i] [x]) :
            INDENT
                colWidths [i] = len(tableData [i] [x])
            DEDENT
        DEDENT
    DEDENT
    for x in range(len(tableData [i])) :
    INDENT
        print (tableData [0] [x].rjust(colWidths [0] + 1) + tableData [1] [x].rjust(colWidths [1] + 1) + tableData [2] [x].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_45536270_7_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_46117628_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_46513796_7_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45532186_5_12
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(data) :
INDENT
    for j in range(len(data [0])) :
    INDENT
        for i in range(len(data)) :
        INDENT

            x = len(max(data [i], key = len))
            print(data [i] [j].rjust(x), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45536270_7_22
34488115_46117628_5_13
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45536270_7_22
34488115_46513796_7_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45536270_7_22
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45536270_7_22
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45536270_7_22
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_45536270_7_22
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)
    for i in range(len(table)) :
    INDENT
        for x in table [i] :
        INDENT
            if len(x) > colWidths [i] :
            INDENT
                colWidths [i] = len(x)
            DEDENT
        DEDENT
    DEDENT
    print (colWidths)
    for i in range(len(table [0])) :
    INDENT
        for x in range(len(table)) :
        INDENT
            print(table [x] [i].rjust(colWidths [x]), end = ' ')
            if x == len(table) - 1 :
            INDENT
                print ('\r')
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46117628_5_13
34488115_46513796_7_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46117628_5_13
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46117628_5_13
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46117628_5_13
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46117628_5_13
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46117628_5_13
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46117628_5_13
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(list) :
INDENT
    len_list = []
    for i in range(len(list)) :
    INDENT
        len_list.append(len(max(list [i], key = len)))
    DEDENT
    for m in range(len(list [i])) :
    INDENT
        for i in range(len(list)) :
        INDENT
            print(list [i] [m].rjust(len_list [i] + 1), end = "")
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46513796_7_19
34488115_50200710_5_26
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46513796_7_19
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46513796_7_19
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46513796_7_19
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46513796_7_19
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_46513796_7_19
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable() :
INDENT
    colWidths = [0] * len(tableData)

    for i in range(len(tableData)) :
    INDENT
        for l in tableData [i] :
        INDENT
            if len(l) > = colWidths [i] :
            INDENT
                colWidths [i] = len(l)
            DEDENT
        DEDENT
    DEDENT
    for t in range(4) :
    INDENT
        print (tableData [0] [t].rjust(colWidths [0] + 1) + tableData [1] [t].rjust(colWidths [1] + 1) + tableData [2] [t].rjust(colWidths [2] + 1))
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_48853709_1_33
34488115_52098713_9_21
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printtable(listlist) :
INDENT
    lenghtCounter = 0
    listCounter = 0
    dict = {}
    for list in listlist :
    INDENT
        listCounter += 1
        wordcounter = 0
        for pos in range(len(list)) :
        INDENT
            wordcounter += 1
            for word in list [pos : len(list) : len(list)] :
            INDENT
                dict.update({list [pos] : pos})

                if len(word) > lenghtCounter :
                INDENT
                    lenghtCounter = len(word)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    for i in range(wordcounter) :
    INDENT
        line = []
        strline = ''
        for k, v in dict.items() :
        INDENT
            if v == i :
            INDENT
                line.append(k)
                strline.join(k.ljust(lenghtCounter))
            DEDENT
        DEDENT
        for el in line :
        INDENT
            strline += el.ljust(lenghtCounter + 5)
        DEDENT
        print (strline)
    DEDENT
DEDENT
----------------------------------------

def printtable(printdata) :
INDENT
    for data in printdata :
    INDENT

        columnWidth.append(len(max(data, key = len)))
    DEDENT
    for x, columnData in enumerate(printdata [0]) :
    INDENT
        for y, rowData in enumerate(printdata) :
        INDENT
            print(printdata [y] [x].rjust(columnWidth [y]), end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50200710_5_26
34488115_50443455_5_19
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50200710_5_26
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50200710_5_26
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50200710_5_26
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50200710_5_26
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWid = [0] * len(tableData)
    i = 0
    for row in tableData :
    INDENT
        colWid [i] = len(max(row, key = len))
        i += 1

    DEDENT
    print (colWid)
    wid = max(colWid)

    for m in range(len(tableData [0])) :
    INDENT
        for n in range(len(tableData)) :
        INDENT
            print(tableData [n] [m].ljust(wid), end = ' ')
        DEDENT
        print ()
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50443455_5_19
34488115_50469445_6_28
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50443455_5_19
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50443455_5_19
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(t) :
INDENT
    colWidths = [0] * len(tableData)
    l = []
    for j in range(len(t)) :
    INDENT
        for i in t [j] :
        INDENT
            l += [len(i)]
        DEDENT
        colWidths [j] = max(l)
        l = []
    DEDENT
    print (colWidths)
    for j in range(len(t [0])) :
    INDENT
        for i in range(len(t)) :
        INDENT
            print(t [i] [j].rjust(colWidths [i]), end = ' ')
        DEDENT
        print(end = '\n')
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50469445_6_28
34488115_50820529_8_24
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50469445_6_28
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50469445_6_28
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(mylist) :
INDENT
    maxLength = 0
    for item in mylist :
    INDENT
        for i in item :
        INDENT
            if len(i) > maxLength :
            INDENT
                maxLength = len(i)
            DEDENT
            else :
            INDENT
                maxLength = maxLength
            DEDENT
        DEDENT
    DEDENT
    for item in mylist :
    INDENT
        for i in range(len(item)) :
        INDENT
            item [i] = (item [i].rjust(maxLength))
        DEDENT
    DEDENT
    myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
    for i in range(len(item)) :
    INDENT
        for u in tableData :
        INDENT
            myNewlist [i].append(u [i])
        DEDENT
    DEDENT
    for key, value in myNewlist.items() :
    INDENT
        print (''.join(value))
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_50820529_8_24
34488115_52116288_5_22
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    colWidths = [0] * len(table)

    for y in range(len(table)) :
    INDENT
        for x in table [y] :
        INDENT
            if colWidths [y] < len(x) :
            INDENT
                colWidths [y] = len(x)

            DEDENT
        DEDENT
    DEDENT
    for x in range(len(table [0])) :
    INDENT
        for y in range(len(table)) :
        INDENT
            print(table [y] [x].rjust(colWidths [y]), end = ' ')
        DEDENT
        print ()
        x += 1
    DEDENT
DEDENT
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34488115_52116288_5_22
34488115_53037135_5_20
Title: Automate the Boring Stuff Chapter 6 Table Printer Almost Done 
----------------------------------------

def printTable(table) :
INDENT
    table_len = []
    max_of_table = []
    next_item = ''
    for i in range(len(table)) :
    INDENT
        temp_len = []
        for k in range(len(table [i])) :
        INDENT
            temp_len.append(len(table [i] [k]))
        DEDENT
        table_len.append(temp_len)
    DEDENT
    for b in table_len :
    INDENT
        max_of_table.append(max(b))
    DEDENT
    for a in range(len(table [0])) :
    INDENT
        for s in range(len(table)) :
        INDENT
            next_item = str(table [s] [a])
            next_item = next_item.rjust(max_of_table [s])
            print(next_item, end = ' ')
        DEDENT
        print ('')
    DEDENT
DEDENT
----------------------------------------

def printTable(myTable) :
INDENT
    colWidth = [0] * len(myTable)
    for x in range(len(myTable)) :
    INDENT
        for item in myTable [x] :
        INDENT
            if len(item) > colWidth [x] :
            INDENT
                colWidth [x] = len(item)

            DEDENT
        DEDENT
    DEDENT
    for a in range(len(myTable [0])) :
    INDENT
        for b in range(len(myTable)) :
        INDENT
            print(str(myTable [b] [a]).rjust(colWidth [b]), end = ' ')
        DEDENT
        print ('\n')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34492314_34492401_3_9
34492314_34492432_1_6
Title: NameError for simple nonlocal binding 
----------------------------------------

def make_x_available(fn) :
INDENT
    @ wraps(fn)
    def decorated(* args, ** kwargs) :
    INDENT
        decorated.x = 5
        return fn(* args, ** kwargs)
    DEDENT
    return decorated
DEDENT
----------------------------------------

def make_x_available(fn) :
INDENT
    def decorated(* args, ** kwargs) :
    INDENT
        kwargs ['x'] = 5
        return fn(* args, ** kwargs)
    DEDENT
    return decorated
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34531461_34531589_13_18
34531461_34531621_10_22
Title: Calling list of instances in a function of a class 
----------------------------------------

def petsyay(self) :
INDENT
    tempL = []
    if self.pets is not None :
    INDENT
        for pet in self.pets :
        INDENT
            tempL.append(pet.callpet())
        DEDENT
    DEDENT
    return tempL
DEDENT
----------------------------------------

def petsyay(self) :
INDENT
    if isinstance(self.pet, list) :
    INDENT
        namepet = []
        for pet in self.pet :
        INDENT
            namepet.append(pet.callpet())
        DEDENT
    DEDENT
    elif isinstance(self.pet, Pets) :
    INDENT
        namepet = []
        namepet.append(self.pet.callpet())
    DEDENT
    else :
    INDENT
        raise ValueError("Not a correct type. Send Pets or list of Pets")
    DEDENT
    return namepet

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34531745_34531843_1_27
34531745_34531913_21_38
Title: Python : IndentationError: expected an indented block 
----------------------------------------

def main() :
INDENT
    operation = input("What type of calculation would you like to make? +,-,/,*")
    if (operation ! = '+' and operation ! = '-' and operation ! = '/' and operation ! = '*') :
    INDENT
        print ("To continue enter a vaild operation")
    DEDENT
    else :
    INDENT
        var1 = int(input("Enter num1:"))
        var2 = int(input("Enter num1:"))
        if (operation == '+') :
        INDENT
            print (add(var1, var2))
        DEDENT
        elif (operation == '/') :
        INDENT
            print (div(var1, var2))
        DEDENT
        elif (operation == '*') :
        INDENT
            print (mul(var1, var2))
        DEDENT
        elif (operation == '-') :
        INDENT
            print (sub(var1, var2))
        DEDENT
    DEDENT
    while True :
    INDENT
        answer = raw_input('Run again? (y/n): ')
        if answer in ('y', 'n') :
        INDENT
            break
        DEDENT
        print ("Invalid input.")
        if answer == "y" :
        INDENT
            continue
        DEDENT
        else :
        INDENT
            print ('Goodbye')
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    operation = raw_input("What type of calculation would you like to make? +,-,/,*")
    if (operation ! = '+' and operation ! = '-' and operation ! = '/' and operation ! = '*') :
    INDENT
        print ("To continue enter a vaild operation")
    DEDENT
    else :
    INDENT
        var1 = int(raw_input("Enter num1:"))
        var2 = int(raw_input("Enter num1:"))
        if (operation == '+') :
        INDENT
            print (add(var1, var2))
        DEDENT
        elif (operation == '/') :
        INDENT
            print (div(var1, var2))
        DEDENT
        elif (operation == '*') :
        INDENT
            print (mul(var1, var2))
        DEDENT
        elif (operation == '-') :
        INDENT
            print (sub(var1, var2))
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34544588_34545675_2_15
34544588_34546412_1_11
Title: how can i keep the value when save and confirm? odoo v 8.0 
----------------------------------------

def onchange_product_id(self) :
INDENT
    if not self.product_id :
    INDENT
        self.product_uom_qty = 1.0
        self.product_uom = False
        self.price_unit = 0.0
        self.qty_available = 0.0
        self.virtual_available = 0.0
        self.name = ''
        self.delay = 0.0
    DEDENT
    self.name = self.product_id.name
    self.product_uom = self.product_id.uom_id
    self.qty_available = self.product_id.qty_available
DEDENT
----------------------------------------

def onchange_product_id(self, cr, uid, ids, product_id = False, product_uom_qty = 0.0, product_uom = False, price_unit = 0.0, qty_available = 0.0, virtual_available = 0.0, name = '', analytic_account_id = False, context = None) :
INDENT
    result = {}
    product_obj = self.pool.get('product.product')
    if not product_id :
    INDENT
        return {'value' : {'product_uom_qty' : 1.0, 'product_uom' : False, 'price_unit' : 0.0, 'qty_available' : 0.0, 'virtual_available' : 0.0, 'name' : '', 'delay' : 0.0}}
    DEDENT
    product = product_obj.browse(cr, uid, product_id, context = context)
    res ['value'].update({'name' : product_obj.name_get(cr, uid, [product.id]) [0] [1], 'product_uom' : product.uom_id.id, 'qty_available' : product.qty_available})
    return res
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34544752_34545549_4_16
34544752_34558278_4_11
Title: Argparse and ArgumentDefaultsHelpFormatter. Formatting of default values when sys.stdin/stdout are selected as default 
----------------------------------------

def _get_help_string(self, action) :
INDENT
    help = action.help
    if '%(default)' not in action.help :
    INDENT
        if action.default is not argparse.SUPPRESS :
        INDENT
            defaulting_nargs = [argparse.OPTIONAL, argparse.ZERO_OR_MORE]
            if action.option_strings or action.nargs in defaulting_nargs :
            INDENT
                if type(action.default) == type(sys.stdin) :
                INDENT
                    print action.default.name
                    help += ' (default: ' + str(action.default.name) + ')'
                DEDENT
                else :
                INDENT
                    help += ' (default: %(default)s)'
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return help
DEDENT
----------------------------------------

def _get_help_string(self, action) :
INDENT
    help = action.help
    if '%(default)' not in action.help :
    INDENT
        if action.default is not SUPPRESS :
        INDENT
            defaulting_nargs = [OPTIONAL, ZERO_OR_MORE]
            if action.option_strings or action.nargs in defaulting_nargs :
            INDENT
                help += ' (default: %(default)s)'
            DEDENT
        DEDENT
    DEDENT
    return help
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34546352_34546527_50_69
34546352_34546527_5_47
Title: How to get inheritance to work from parent to child class python34 
----------------------------------------

def process_gprmc_data(self, data) :
INDENT
    (lati, long, v, t_stamp) = super(PrintGPS, self).process_gprmc_data(data)
    print ('got definitions in')
    print ("- - - - - - - - - - - - -")
    print ('lati:', lati)
    print ("- - - - - - - - - - - - -")
    print ('long:', long)
    print ("- - - - - - - - - - - - -")
    print ('v:', v)
    print ("- - - - - - - - - - - - -")
    print ('date:', t_stamp)
    print ("- - - - - - - - - - - - -")
    output_filename = 'test.xlsx'
    print ('XLSX file named ' + output_filename + ' was created')
DEDENT
----------------------------------------

def process_gprmc_data(self, data) :
INDENT
    NMI = 1852.0
    latitude = []
    longitude = []
    altitude = []
    velocity = []
    timestamp = []
    num_sats = []
    print ("- - - - - - - - - - - - -")
    print ('process_gprmc_data')
    print ("- - - - - - - - - - - - -")
    for row in data :
    INDENT
        if row [0] == '$GPRMC' :
        INDENT
            y = (float(row [3] [0 : 2]) + float(row [3] [2 :]) / 60.0)
            if row [4] == "S" :
            INDENT
                y = - y
            DEDENT
            latitude.append(y)
            x = (float(row [5] [0 : 3]) + float(row [5] [3 :]) / 60.0)
            if row [6] == "W" :
            INDENT
                x = - x
            DEDENT
            longitude.append(x)
            print ('x,y:', x, y)
            velocity.append(float(row [7]) * NMI / 1000.0)
            gpstime = row [1] [0 : 6]
            gdate = row [9]
            gpsdate = gdate [4 : 6] + gdate [2 : 4] + gdate [0 : 2]
            real_time = gpsdate + gpstime
            add_date_time = datetime.strptime(real_time, "%y%m%d%H%M%S")
            print (add_date_time)
            timestamp.append(add_date_time)
        DEDENT
    DEDENT
    print ("- - - - - - - - - - - - -")
    print ('arrays in')
    print ("- - - - - - - - - - - - -")
    return (array(latitude), array(longitude), array(velocity), array(timestamp))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34554367_34554796_12_22
34554367_34555325_14_22
Title: __getattr__ throwing maximum recursion error when __setattr__ implemented 
----------------------------------------

def __init__(self, x, y, r) :
INDENT
    self._intialized = False
    self.x = x
    self.y = y
    self.r = r
    self.area = pi * self.r * self.r
    self.circumference = 2 * pi * self.r
    self.distance_to_origin = abs(sqrt(self.x * self.x + self.y * self.y) - self.r)
    self._intialized = True

DEDENT
----------------------------------------

def __init__(self, x, y, r) :
INDENT
    self.x = x
    self.y = y
    super().__setattr__("r", r)
    super().__setattr__("area", pi * self.r * self.r)
    super().__setattr__("circumference", 2 * pi * self.r)
    super().__setattr__("distance_to_origin", abs(sqrt((self.x - 0) * (self.x - 0) + (self.y - 0) * (self.y - 0)) - self.r))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34554367_34554796_23_38
34554367_34555325_32_42
Title: __getattr__ throwing maximum recursion error when __setattr__ implemented 
----------------------------------------

def __setattr__(self, name, value) :
INDENT
    if name in ['_intialized'] :
    INDENT
        self.__dict__ [name] = value
        return
    DEDENT
    if name in ['x', 'y'] :
    INDENT
        if isinstance(value, int) :
        INDENT
            print ('we can set x,y')
            self.__dict__ [name] = value
        DEDENT
        else :
        INDENT
            raise TypeError('Expected an int for: {}'.format(name))
        DEDENT
    DEDENT
    elif not self._intialized :
    INDENT
        self.__dict__ [name] = value
    DEDENT
    elif name in ['area', 'circumference', 'distance_to_origin'] :
    INDENT
        raise AttributeError('Cannot set attribute: {}'.format(name))
    DEDENT
DEDENT
----------------------------------------

def __setattr__(self, name, value) :
INDENT
    print ("===== set:", name, value)
    if name in ['x', 'y'] :
    INDENT
        if isinstance(value, int) :
        INDENT
            print ('we can set x,y')
            super().__setattr__(name, value)
        DEDENT
        else :
        INDENT
            raise TypeError('Expected an int')
        DEDENT
    DEDENT
    elif name in ['r', 'area', 'circumference', 'distance_to_origin'] :
    INDENT
        raise RuntimeError('Cannot set attribute')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34554565_34554611_3_17
34554565_34554864_1_9
Title: "How to make the length of a list ""len(list)"" a variable to be used for further calculations? Python3" 
----------------------------------------

def executeproth() :
INDENT
    r = input("Number to test:")
    n = int(r) - 1
    d = 2
    factors = []
    while n % 2 == 0 :
    INDENT
        factors.append(d)
        n = n / / d
        h = len(factors)
        print (n, factors, h)
        k = 2 ** h

    DEDENT
    return factors
DEDENT
----------------------------------------

def executeproth(r) :
INDENT
    n = r - 1
    count = 0
    if r ! = 0 :
    INDENT
        while n % 2 == 0 :
        INDENT
            count += 1
            n //= 2
        DEDENT
    DEDENT
    return n, count
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34554565_34554743_1_14
34554565_34554864_1_9
Title: "How to make the length of a list ""len(list)"" a variable to be used for further calculations? Python3" 
----------------------------------------

def executeproth() :
INDENT
    r = input("Number to test:")
    n = int(r) - 1
    d = 2
    factors = []
    while n % 2 == 0 :
    INDENT
        factors.append(d)
        n = n / / d
        h = len(factors)
    DEDENT
    else :
    INDENT
        print "{} = ( 2 ^ {} ) * {} + 1".format(r, h, n)
    DEDENT
    return factors
DEDENT
----------------------------------------

def executeproth(r) :
INDENT
    n = r - 1
    count = 0
    if r ! = 0 :
    INDENT
        while n % 2 == 0 :
        INDENT
            count += 1
            n //= 2
        DEDENT
    DEDENT
    return n, count
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34572439_34573827_48_54
34572439_34574658_1_10
Title: How to hide individual widgets created by a loop in python 
----------------------------------------

def create_board(self) :
INDENT
    for x in range(3) :
    INDENT
        for y in range(3) :
        INDENT
            self.buttons.append(GUI(root, x, y))

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def create_board(self) :
INDENT
    self.board = []
    for y in range(3) :
    INDENT
        row = []
        for x in range(3) :
        INDENT
            mycmd = lambda row = y, column = x : self.user_input(row, column)
            button = Button(root, text = "   ", cmd = mycmd)
            button.grid(row = y, column = x)
            row.append(button)
        DEDENT
        self.board.append(row)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3460161_34292744_1_11
3460161_3460450_1_10
Title: Remove adjacent duplicate elements from a list 
----------------------------------------

def remove_adjacent(nums) :
INDENT
    l, r = 0, 1
    while r < len(nums) :
    INDENT
        if nums [l] == nums [r] :
        INDENT
            r += 1
        DEDENT
        else :
        INDENT
            l += 1
            nums [l] = nums [r]
            r += 1
        DEDENT
    DEDENT
    del nums [l + 1 :]
DEDENT
----------------------------------------

def remove_adjacent(l) :
INDENT
    if len(l) < 2 :
    INDENT
        return l
    DEDENT
    prev, i = l [0], 1
    while i < len(l) :
    INDENT
        if l [i] == prev :
        INDENT
            del l [i]
        DEDENT
        else :
        INDENT
            prev = l [i]
            i += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3460161_34292744_1_11
3460161_38082322_1_20
Title: Remove adjacent duplicate elements from a list 
----------------------------------------

def remove_adjacent(nums) :
INDENT
    l, r = 0, 1
    while r < len(nums) :
    INDENT
        if nums [l] == nums [r] :
        INDENT
            r += 1
        DEDENT
        else :
        INDENT
            l += 1
            nums [l] = nums [r]
            r += 1
        DEDENT
    DEDENT
    del nums [l + 1 :]
DEDENT
----------------------------------------

def remove_adjacent(nums) :
INDENT
    rmvelement = []
    checkedIndex = []
    for num in nums :
    INDENT
        if nums.index(num) not in checkedIndex :
        INDENT
            index = nums.index(num)
            checkedIndex.append(index)
            skip = False
        DEDENT
        else :
        INDENT
            skip = True
        DEDENT
    DEDENT
    if skip == False :
    INDENT
        for x in nums [index + 1 :] :
        INDENT
            if x == num :
            INDENT
                rmvelement.append(x)
            DEDENT
            else :
            INDENT
                break
            DEDENT
        DEDENT
    DEDENT
    [nums.remove(_) for _ in rmvelement]
    return nums
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3460161_34292744_1_11
3460161_47998436_1_10
Title: Remove adjacent duplicate elements from a list 
----------------------------------------

def remove_adjacent(nums) :
INDENT
    l, r = 0, 1
    while r < len(nums) :
    INDENT
        if nums [l] == nums [r] :
        INDENT
            r += 1
        DEDENT
        else :
        INDENT
            l += 1
            nums [l] = nums [r]
            r += 1
        DEDENT
    DEDENT
    del nums [l + 1 :]
DEDENT
----------------------------------------

def remove_adjacent(nums) :
INDENT
    numstail = [i for i in range(0, len(nums))]
    nums = nums + numstail
    for i in nums :
    INDENT
        if nums [i] == nums [i - 1] :
        INDENT
            del nums [i]

        DEDENT
    DEDENT
    return nums [: - len(numstail)]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3460161_3460450_1_10
3460161_38082322_1_20
Title: Remove adjacent duplicate elements from a list 
----------------------------------------

def remove_adjacent(l) :
INDENT
    if len(l) < 2 :
    INDENT
        return l
    DEDENT
    prev, i = l [0], 1
    while i < len(l) :
    INDENT
        if l [i] == prev :
        INDENT
            del l [i]
        DEDENT
        else :
        INDENT
            prev = l [i]
            i += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def remove_adjacent(nums) :
INDENT
    rmvelement = []
    checkedIndex = []
    for num in nums :
    INDENT
        if nums.index(num) not in checkedIndex :
        INDENT
            index = nums.index(num)
            checkedIndex.append(index)
            skip = False
        DEDENT
        else :
        INDENT
            skip = True
        DEDENT
    DEDENT
    if skip == False :
    INDENT
        for x in nums [index + 1 :] :
        INDENT
            if x == num :
            INDENT
                rmvelement.append(x)
            DEDENT
            else :
            INDENT
                break
            DEDENT
        DEDENT
    DEDENT
    [nums.remove(_) for _ in rmvelement]
    return nums
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3460161_3460450_1_10
3460161_47998436_1_10
Title: Remove adjacent duplicate elements from a list 
----------------------------------------

def remove_adjacent(l) :
INDENT
    if len(l) < 2 :
    INDENT
        return l
    DEDENT
    prev, i = l [0], 1
    while i < len(l) :
    INDENT
        if l [i] == prev :
        INDENT
            del l [i]
        DEDENT
        else :
        INDENT
            prev = l [i]
            i += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def remove_adjacent(nums) :
INDENT
    numstail = [i for i in range(0, len(nums))]
    nums = nums + numstail
    for i in nums :
    INDENT
        if nums [i] == nums [i - 1] :
        INDENT
            del nums [i]

        DEDENT
    DEDENT
    return nums [: - len(numstail)]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3460161_38082322_1_20
3460161_47998436_1_10
Title: Remove adjacent duplicate elements from a list 
----------------------------------------

def remove_adjacent(nums) :
INDENT
    rmvelement = []
    checkedIndex = []
    for num in nums :
    INDENT
        if nums.index(num) not in checkedIndex :
        INDENT
            index = nums.index(num)
            checkedIndex.append(index)
            skip = False
        DEDENT
        else :
        INDENT
            skip = True
        DEDENT
    DEDENT
    if skip == False :
    INDENT
        for x in nums [index + 1 :] :
        INDENT
            if x == num :
            INDENT
                rmvelement.append(x)
            DEDENT
            else :
            INDENT
                break
            DEDENT
        DEDENT
    DEDENT
    [nums.remove(_) for _ in rmvelement]
    return nums
DEDENT
----------------------------------------

def remove_adjacent(nums) :
INDENT
    numstail = [i for i in range(0, len(nums))]
    nums = nums + numstail
    for i in nums :
    INDENT
        if nums [i] == nums [i - 1] :
        INDENT
            del nums [i]

        DEDENT
    DEDENT
    return nums [: - len(numstail)]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34603032_34603127_7_16
34603032_34618453_6_21
Title: creating a thread safe decorator class 
----------------------------------------

def __call__(self, func, * args, ** kwargs) :
INDENT
    def wrapped_func(* args, ** kwargs) :
    INDENT
        with self._lock :
        INDENT
            print '\nin wrapped func, func name:', func.func_name
            print 'count val:', self.counter
            self.counter += 1
            ret_val = func()
            return ret_val
        DEDENT
    DEDENT
    return wrapped_func
DEDENT
----------------------------------------

def __call__(self, func, * args, ** kwargs) :
INDENT
    def wrapped_func(* args, ** kwargs) :
    INDENT
        self.lock.acquire()
        curr_thread = threading.currentThread().getName()
        self.thread = curr_thread
        print '\nthread name before running func:', self.thread
        ret_val = func()
        print '\nthread name after running func:', self.thread
        self.lock.release()
        return ret_val
    DEDENT
    return wrapped_func
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34603032_34603127_8_15
34603032_34603444_2_11
Title: creating a thread safe decorator class 
----------------------------------------

def wrapped_func(* args, ** kwargs) :
INDENT
    with self._lock :
    INDENT
        print '\nin wrapped func, func name:', func.func_name
        print 'count val:', self.counter
        self.counter += 1
        ret_val = func()
        return ret_val
    DEDENT
DEDENT
----------------------------------------

def wrapped_func(* args, ** kwargs) :
INDENT
    with func._lock :
    INDENT
        if not hasattr(func, "counter") :
        INDENT
            func.counter = 0
        DEDENT
        print '\nin wrapped func, func name:', func.func_name
        print 'count val:', func.counter
        func.counter += 1
        ret_val = func()
        return ret_val
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34603032_34603127_8_15
34603032_34618453_7_19
Title: creating a thread safe decorator class 
----------------------------------------

def wrapped_func(* args, ** kwargs) :
INDENT
    with self._lock :
    INDENT
        print '\nin wrapped func, func name:', func.func_name
        print 'count val:', self.counter
        self.counter += 1
        ret_val = func()
        return ret_val
    DEDENT
DEDENT
----------------------------------------

def wrapped_func(* args, ** kwargs) :
INDENT
    self.lock.acquire()
    curr_thread = threading.currentThread().getName()
    self.thread = curr_thread
    print '\nthread name before running func:', self.thread
    ret_val = func()
    print '\nthread name after running func:', self.thread
    self.lock.release()
    return ret_val
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34603032_34603444_2_11
34603032_34618453_7_19
Title: creating a thread safe decorator class 
----------------------------------------

def wrapped_func(* args, ** kwargs) :
INDENT
    with func._lock :
    INDENT
        if not hasattr(func, "counter") :
        INDENT
            func.counter = 0
        DEDENT
        print '\nin wrapped func, func name:', func.func_name
        print 'count val:', func.counter
        func.counter += 1
        ret_val = func()
        return ret_val
    DEDENT
DEDENT
----------------------------------------

def wrapped_func(* args, ** kwargs) :
INDENT
    self.lock.acquire()
    curr_thread = threading.currentThread().getName()
    self.thread = curr_thread
    print '\nthread name before running func:', self.thread
    ret_val = func()
    print '\nthread name after running func:', self.thread
    self.lock.release()
    return ret_val
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34617242_34617332_1_13
34617242_34617551_1_17
Title: I don't quite understand the while loop in python 
----------------------------------------

def AddSingleCard() :
INDENT
    symbols = ['heart', 'diamond', 'club', 'spade']
    newCardNumber = newCardSign = None
    while (newCardNumber not in range(2, 16) or newCardSign not in symbols) :
    INDENT
        newCardNumber, newCardSign = raw_input('Enter Number and Symbol with space between:').split()
        try :
        INDENT
            newCardNumber = int(newCardNumber)
        DEDENT
        except :
        INDENT
            continue
        DEDENT
    DEDENT
    newCard = [newCardNumber, newCardSign]
    return newCard

DEDENT
----------------------------------------

def AddSingleCard(self) :
INDENT
    symbols = ['heart', 'diamond', 'club', 'spade']
    while True :
    INDENT
        newCardNumber, newCardSign = raw_input("Enter card number and sign (heart, diamond, club, spade), seperated by space").split()
        try :
        INDENT
            newCardNumber = int(newCardNumber)
        DEDENT
        except ValueError :
        INDENT
            print "Card number must be a number between 2 and 15"
            continue
        DEDENT
        if newCardNumber in range(2, 16) and newCardSign in symbols :
        INDENT
            break
        DEDENT
        print "Card number or symbol not valid"
    DEDENT
    newCard = [newCardNumber, newCardSign]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34617451_34618474_1_19
34617451_34620816_1_18
Title: the path complexity (fastest route) to any given number in python 
----------------------------------------

def solve(m) :
INDENT
    p = [set([frozenset([])]) for i in xrange(m + 1)]
    a = [9999 for _ in xrange(m + 1)]
    a [1] = 0
    p [1] = set([frozenset([1])])
    for i in xrange(1, m + 1) :
    INDENT
        for pos in p [i] :
        INDENT
            pos2 = set(pos)
            for j in pos :
            INDENT
                for k in pos2 :
                INDENT
                    if (j + k < = m) :
                    INDENT
                        if a [j + k] > a [i] + 1 :
                        INDENT
                            a [j + k] = a [i] + 1
                            p [j + k] = set([frozenset(list(pos) + [j + k])])
                        DEDENT
                        elif a [j + k] == a [i] + 1 :
                        INDENT
                            p [j + k].add(frozenset(list(pos) + [j + k]))
                        DEDENT
                    DEDENT
                DEDENT
                pos2.remove(j)
            DEDENT
        DEDENT
    DEDENT
    return a [m], sorted(list(p [m].pop()))
DEDENT
----------------------------------------

def solve(m, path) :
INDENT
    if path [- 1] == m :
    INDENT
        return path
    DEDENT
    if path [- 1] > m :
    INDENT
        return False
    DEDENT
    best_path = [i for i in range(m)]
    test_path = solve(m, path + [path [- 1] * 2])
    if test_path and len(test_path) < len(best_path) :
    INDENT
        best_path = test_path
    DEDENT
    for k1 in path [: - 1] :
    INDENT
        for k2 in path [: - 1] :
        INDENT
            test_path = solve(m, path + [path [- 1] + k1 + k2])
            if test_path and len(test_path) < len(best_path) :
            INDENT

                best_path = test_path
            DEDENT
        DEDENT
    DEDENT
    return best_path
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34617451_34618474_1_19
34617451_34621028_16_37
Title: the path complexity (fastest route) to any given number in python 
----------------------------------------

def solve(m) :
INDENT
    p = [set([frozenset([])]) for i in xrange(m + 1)]
    a = [9999 for _ in xrange(m + 1)]
    a [1] = 0
    p [1] = set([frozenset([1])])
    for i in xrange(1, m + 1) :
    INDENT
        for pos in p [i] :
        INDENT
            pos2 = set(pos)
            for j in pos :
            INDENT
                for k in pos2 :
                INDENT
                    if (j + k < = m) :
                    INDENT
                        if a [j + k] > a [i] + 1 :
                        INDENT
                            a [j + k] = a [i] + 1
                            p [j + k] = set([frozenset(list(pos) + [j + k])])
                        DEDENT
                        elif a [j + k] == a [i] + 1 :
                        INDENT
                            p [j + k].add(frozenset(list(pos) + [j + k]))
                        DEDENT
                    DEDENT
                DEDENT
                pos2.remove(j)
            DEDENT
        DEDENT
    DEDENT
    return a [m], sorted(list(p [m].pop()))
DEDENT
----------------------------------------

def solve(start, target) :
INDENT
    currentList = []
    nextList = [Node(start, None)]
    seen = set([start])
    while nextList :
    INDENT
        currentList = nextList
        nextList = []
        for n in currentList :
        INDENT
            path = n.getPath()
            if n.number == target :
            INDENT
                return path [: : - 1]
            DEDENT
            for a in path :
            INDENT
                newnumber = a + path [0]
                if newnumber < = target and newnumber not in seen :
                INDENT
                    nextList.append(Node(newnumber, n))
                DEDENT
            DEDENT
        DEDENT
        for n in nextList :
        INDENT
            seen.add(n.number)
        DEDENT
    DEDENT
    return []
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34617451_34620816_1_18
34617451_34621028_16_37
Title: the path complexity (fastest route) to any given number in python 
----------------------------------------

def solve(m, path) :
INDENT
    if path [- 1] == m :
    INDENT
        return path
    DEDENT
    if path [- 1] > m :
    INDENT
        return False
    DEDENT
    best_path = [i for i in range(m)]
    test_path = solve(m, path + [path [- 1] * 2])
    if test_path and len(test_path) < len(best_path) :
    INDENT
        best_path = test_path
    DEDENT
    for k1 in path [: - 1] :
    INDENT
        for k2 in path [: - 1] :
        INDENT
            test_path = solve(m, path + [path [- 1] + k1 + k2])
            if test_path and len(test_path) < len(best_path) :
            INDENT

                best_path = test_path
            DEDENT
        DEDENT
    DEDENT
    return best_path
DEDENT
----------------------------------------

def solve(start, target) :
INDENT
    currentList = []
    nextList = [Node(start, None)]
    seen = set([start])
    while nextList :
    INDENT
        currentList = nextList
        nextList = []
        for n in currentList :
        INDENT
            path = n.getPath()
            if n.number == target :
            INDENT
                return path [: : - 1]
            DEDENT
            for a in path :
            INDENT
                newnumber = a + path [0]
                if newnumber < = target and newnumber not in seen :
                INDENT
                    nextList.append(Node(newnumber, n))
                DEDENT
            DEDENT
        DEDENT
        for n in nextList :
        INDENT
            seen.add(n.number)
        DEDENT
    DEDENT
    return []
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34618913_34619103_7_29
34618913_34619336_1_26
Title: Towers of hanoi in python with turtle graphics moving disks 
----------------------------------------

def movement(x, y) :
INDENT
    global Steps
    Y = (Properties [1] + len(Disk_List)) * 20 + 45
    if len(Selected) == 0 and len(Disk_List) > 0 :
    INDENT
        Properties [5].fillcolor(Act_Colour)
        Selected.append(Disk_List)
        Selected.append(Properties [5])
    DEDENT
    elif len(Selected) == 2 and len(Disk_List) > 0 and Selected [0] [- 1].shapesize() [1] == Disk_List [- 1].shapesize() [1] :
    INDENT
        Selected [1].fillcolor(Inact_Colour)
        del Selected [0]
        del Selected [0]
    DEDENT
    elif len(Selected) == 2 and (len(Disk_List) == 0 or Selected [0] [- 1].shapesize() [1] < Disk_List [- 1].shapesize() [1]) :
    INDENT
        Selected [1].fillcolor(Inact_Colour)
        Selected [0] [- 1].goto(X, Y)
        Disk_List.append(Selected [0] [- 1])
        del Selected [0] [- 1]
        del Selected [0]
        del Selected [0]

        Steps = Steps + 1
    DEDENT
DEDENT
----------------------------------------

def movement(Properties, x, y) :
INDENT
    global Steps
    X = Properties [0] * 20
    Disk_List = Properties [4]
    Act_Colour = 'white'
    Inact_Colour = 'black'
    Y = (Properties [1] + len(Disk_List)) * 20 + 45
    if len(Selected) == 0 and len(Disk_List) > 0 :
    INDENT
        Properties [5].fillcolor(Act_Colour)
        Selected.append(Disk_List)
        Selected.append(Properties [5])
    DEDENT
    elif len(Selected) == 2 and len(Disk_List) > 0 and Selected [0] [- 1].shapesize() [1] == Disk_List [- 1].shapesize() [1] :
    INDENT
        Selected [1].fillcolor(Inact_Colour)
        del Selected [0]
        del Selected [0]
    DEDENT
    elif len(Selected) == 2 and (len(Disk_List) == 0 or Selected [0] [- 1].shapesize() [1] < Disk_List [- 1].shapesize() [1]) :
    INDENT
        Selected [1].fillcolor(Inact_Colour)
        Selected [0] [- 1].goto(X, Y)
        Disk_List.append(Selected [0] [- 1])
        del Selected [0] [- 1]
        del Selected [0]
        del Selected [0]

        Steps = Steps + 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3462566_3462901_1_10
3462566_3463344_5_11
Title: python: elegant way to deal with lock on a variable? 
----------------------------------------

def startSearching(self) :
INDENT
    self.searchingLock.acquire()
    already_searching = self.searching
    self.searching = True
    self.searchingLock.release()
    if already_searching :
    INDENT
        self.logger.error("Already searching!")
    DEDENT
    return not already_searching
DEDENT
----------------------------------------

def startSearching(self) :
INDENT
    try : self.initSearch()
    except SearchingError as error :
    INDENT
        self.logger.error(error.message)
        return False

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34628158_34628339_14_23
34628158_34628498_18_28
Title: How to remove duplicate lines from a file and writing them in file in Python 
----------------------------------------

def main() :
INDENT
    parser = MyHTMLParser()
    with open("index.html") as f :
    INDENT
        contents = f.read()
    DEDENT
    parser.feed(contents)
    with open("index_link.txt", "w") as f :
    INDENT
        f.write('\n'.join(parser.found_links) + '\n')
    DEDENT
    with open("textfile.html", "w") as f :
    INDENT
        f.write(contents)
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    parser = MyHTMLParser()
    f = open("index.html")
    if f.mode == "r" :
    INDENT
        contents = f.read()
        parser.feed(contents)
    DEDENT
    else :
    INDENT
        print ("No file found")
    DEDENT
    f = open("textfile.html", "w+")
    f.write(contents)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34628158_34628339_8_13
34628158_34628498_8_17
Title: How to remove duplicate lines from a file and writing them in file in Python 
----------------------------------------

def handle_starttag(self, tag, attrs) :
INDENT
    if tag == "a" :
    INDENT
        attrs = dict(attrs)
        if "href" in attrs and attrs ["href"] not in self.found_links :
        INDENT
            self.found_links.append(attrs ["href"])
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def handle_starttag(self, tag, attrs) :
INDENT
    if tag == "a" :
    INDENT
        if attrs.__len__ > 0 :
        INDENT
            for a in attrs :
            INDENT
                if a [0] == "href" and a [1] not in self.html_links :
                INDENT
                    print a [1]
                    self.html_links.append(a [1])
                    f = open("index_link.txt", "a+")
                    f.write(a [1] + "\n")
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3463530_3464418_17_30
3463530_3529275_9_34
Title: Python: coerce new-style class 
----------------------------------------

def __new__(mcs, name, bases, dict) :
INDENT
    def add_op(op) :
    INDENT
        if op in dict :
        INDENT
            return
        DEDENT
        fn = lambda self, * args : self.__op__(op, args)
        fn.__name__ = op
        dict [op] = fn
    DEDENT
    for op in mcs.__ops :
    INDENT
        add_op(op)
    DEDENT
    return type.__new__(mcs, name, bases, dict)

DEDENT
----------------------------------------

def __new__(mcs, name, bases, dict) :
INDENT
    def make_binary_op(op) :
    INDENT
        fn = lambda self, other : self.__op__(op, other)
        fn.__name__ = op
        return fn
    DEDENT
    for opname in mcs.__binary_ops :
    INDENT
        for op in ('__%s__', '__r%s__') :
        INDENT
            op %= opname
            if op in dict :
            INDENT
                continue
            DEDENT
            dict [op] = make_binary_op(op)
        DEDENT
    DEDENT
    def make_unary_op(op) :
    INDENT
        fn = lambda self : self.__op__(op, None)
        fn.__name__ = op
        return fn
    DEDENT
    for opname in mcs.__unary_ops :
    INDENT
        op = '__%s__' % opname
        if op in dict :
        INDENT
            continue
        DEDENT
        dict [op] = make_unary_op(op)
    DEDENT
    return type.__new__(mcs, name, bases, dict)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3463530_3464418_43_51
3463530_3529275_47_56
Title: Python: coerce new-style class 
----------------------------------------

def __op__(self, op, args) :
INDENT
    try :
    INDENT
        other = args [0]
    DEDENT
    except IndexError :
    INDENT
        other = None
    DEDENT
    print "%s %s %s" % (self, op, other)
    self, other = coerce(self, other)
    return getattr(self, op)(* args)
DEDENT
----------------------------------------

def __op__(self, op, other) :
INDENT
    if other is None :
    INDENT
        print "%s(%s)" % (op, self)
        self, other = coerce(self, 0.0)
        return getattr(self, op)()
    DEDENT
    else :
    INDENT
        print "%s %s %s" % (self, op, other)
        self, other = coerce(self, other)
        return getattr(self, op)(other)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34637925_34640312_1_20
34637925_34640954_1_12
Title: Combinatorial product of regex substitutions 
----------------------------------------

def vary(target, pattern, subst) :
INDENT
    numOccurences = len(pattern.findall(target))
    for path in itertools.product((True, False), repeat = numOccurences) :
    INDENT

        variant = ''
        remainingStr = target
        for currentFlag in path :
        INDENT
            if currentFlag :
            INDENT
                remainingStr = pattern.sub(subst, remainingStr, 1)
            DEDENT
            else :
            INDENT
                currentMatch = pattern.search(remainingStr);
                variant += remainingStr [: currentMatch.end()]
                remainingStr = remainingStr [currentMatch.end() :]
            DEDENT
        DEDENT
        variant += remainingStr
        yield variant
    DEDENT
DEDENT
----------------------------------------

def vary(target, pattern, subst) :
INDENT
    matches = [m for m in pattern.finditer(target)]
    occurrences = [m.span() for m in matches]
    for path in itertools.product((True, False), repeat = len(occurrences)) :
    INDENT
        variant = ''
        anchor = 0
        for match, (start, end), apply_this in zip(matches, occurrences, path) :
        INDENT
            if apply_this :
            INDENT
                variant += target [anchor : start] + match.expand(subst)
                anchor = end
            DEDENT
        DEDENT
        variant += target [anchor :]
        yield variant
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34662618_34667909_11_23
34662618_34667909_32_42
Title: How can I add together two local variables from different functions? 
----------------------------------------

def __init__(self, items) :
INDENT
    super().__init__(sorted(items))

    if "name" in self :
    INDENT
        self.pop("name")

    DEDENT
    if "servings" not in self :
    INDENT
        self ["servings"] = 1
    DEDENT
    self.move_to_end("servings", last = False)

DEDENT
----------------------------------------

def __init__(self, number = 1) :
INDENT
    super().__init__()
    self.name = "Cake"
    self.servings = 1
    self.init_ingredients()
    if number > 1 :
    INDENT
        self *= number
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34667874_34668194_20_28
34667874_34668194_9_18
Title: Access a Python Code That is Running 
----------------------------------------

def run(self) :
INDENT
    global queue
    while True :
    INDENT
        num = queue.get()
        queue.task_done()
        print "Consumed", num
        time.sleep(random.random())

    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    nums = range(5)
    global queue
    while True :
    INDENT
        num = random.choice(nums)
        queue.put(num)
        print "Produced", num
        time.sleep(random.random())

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34697106_34697185_1_17
34697106_34697332_1_19
Title: python list within list - why is the sublist repeated 
----------------------------------------

def create_inner_list(string) :
INDENT
    prev = 0
    mainlist = []
    sublist = []
    for each in string :
    INDENT
        if int(each) < = prev :
        INDENT
            prev = int(each)
            sublist.append(int(each))
        DEDENT
        else :
        INDENT
            if sublist :
            INDENT
                mainlist.append(sublist)
            DEDENT
            sublist = []
            mainlist.append(int(each))
            prev = int(each)
        DEDENT
    DEDENT
    if sublist :
    INDENT
        mainlist.append(sublist)
    DEDENT
    return mainlist
DEDENT
----------------------------------------

def create_inner_list(string1) :
INDENT
    main_list = []
    for i in range(0, len(string1), 3) :
    INDENT

        main_list.append(string1 [i])
        if len(string1) - i == 2 :
        INDENT
            main_list.append(string1 [i + 1])
        DEDENT
        elif len(string1) - i == 1 :
        INDENT
            break
        DEDENT
        else :
        INDENT
            main_list.append(list(string1 [i + 1] + string1 [i + 2]))
        DEDENT
    DEDENT
    return main_list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34697106_34697185_1_17
34697106_34697683_13_19
Title: python list within list - why is the sublist repeated 
----------------------------------------

def create_inner_list(string) :
INDENT
    prev = 0
    mainlist = []
    sublist = []
    for each in string :
    INDENT
        if int(each) < = prev :
        INDENT
            prev = int(each)
            sublist.append(int(each))
        DEDENT
        else :
        INDENT
            if sublist :
            INDENT
                mainlist.append(sublist)
            DEDENT
            sublist = []
            mainlist.append(int(each))
            prev = int(each)
        DEDENT
    DEDENT
    if sublist :
    INDENT
        mainlist.append(sublist)
    DEDENT
    return mainlist
DEDENT
----------------------------------------

def create_inner_list(s) :
INDENT
    res = []
    for _, values in it.groupby(s, group_f) :
    INDENT
        res.append(next(values))
        res.append(list(values))
    DEDENT
    return res
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34697106_34697332_1_19
34697106_34697683_13_19
Title: python list within list - why is the sublist repeated 
----------------------------------------

def create_inner_list(string1) :
INDENT
    main_list = []
    for i in range(0, len(string1), 3) :
    INDENT

        main_list.append(string1 [i])
        if len(string1) - i == 2 :
        INDENT
            main_list.append(string1 [i + 1])
        DEDENT
        elif len(string1) - i == 1 :
        INDENT
            break
        DEDENT
        else :
        INDENT
            main_list.append(list(string1 [i + 1] + string1 [i + 2]))
        DEDENT
    DEDENT
    return main_list
DEDENT
----------------------------------------

def create_inner_list(s) :
INDENT
    res = []
    for _, values in it.groupby(s, group_f) :
    INDENT
        res.append(next(values))
        res.append(list(values))
    DEDENT
    return res
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34698927_34710464_76_90
34698927_34710464_96_108
Title: Python - Get windows folder ACL permissions 
----------------------------------------

def __str__(self) :
INDENT
    trustee = self.trustee if self.trustee else self.sid
    access = []
    if self.ace_type == ACCESS_DENIED_ACE_TYPE :
    INDENT
        access.append('(DENY)')
    DEDENT
    elif self.ace_type == SYSTEM_AUDIT_ACE_TYPE :
    INDENT
        access.append('(AUDIT)')
    DEDENT
    if self.inherited() : access.append('(I)')
    if self.object_inherit() : access.append('(OI)')
    if self.container_inherit() : access.append('(CI)')
    if self.inherit_only() : access.append('(IO)')
    if self.no_propagate() : acccess.append('(NP)')
    access.append('(%s)' % ','.join(self.get_file_rights()))
    return '%s:%s' % (trustee, ''.join(access))
DEDENT
----------------------------------------

def __str__(self) :
INDENT
    owner = self.owner if self.owner else self.owner_sid
    group = self.group if self.group else self.group_sid
    items = ['Path:  %s' % self.path,
        'Owner: %s' % owner,
        'Group: %s' % group]
    if self.dacl :
    INDENT
        items += ['DACL:  %s' %
            '\n       '.join(str(x) for x in self.dacl)]
    DEDENT
    if self.sacl :
    INDENT
        items += ['SACL:  %s' %
            '\n       '.join(str(x) for x in self.sacl)]
    DEDENT
    return '\n'.join(items)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34705186_34705216_3_10
34705186_34705305_2_10
Title: Best pythonic way to template dictionary 
----------------------------------------

def get_settings(variable0, variable1) :
INDENT
    return {
        'general' : {
            variable0 + 's' : [variable0 + '1', variable0 + '2'],
            },
        variable1 + 'al' : [variable1 + '1', variable1 + '2'],
        }
DEDENT
----------------------------------------

def get_settings(** kw) :
INDENT
    return json.loads(r"""{{
        "general": {{
            "{variable0:}s": ["{variable0:}1", "{variable0:}2"]
        }},
        "{variable1:}al": ["{variable1:}1", "{variable1:}2"]
    }}""".format(** kw))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3472124_3472211_1_10
3472124_3472426_1_12
Title: Number Guesser: Please Review and Make it More Pythonic 
----------------------------------------

def guesser(low = 0, up = 100) :
INDENT
    print ("Choose a number between %d and %d" % (low, up - 1))
    while low < up - 1 :
    INDENT
        mid = (low + up) / / 2
        yn = raw_input("Is Your Number Smaller Than %s? (y/n): " % mid)
        if yn not in ['y', 'n'] : continue
        low, up = (low, mid) if yn == 'y' else (mid, up)
    DEDENT
    print "Your Number is:", low
DEDENT
----------------------------------------

def guesser(bounds) :
INDENT
    a, b = bounds
    mid = (a + b) / / 2
    if a == b : return a
    if input("over {0}? ".format(mid)) == "y" :
    INDENT
        new_bounds = (mid, b)
    DEDENT
    else :
    INDENT
        new_bounds = (a, mid)
    DEDENT
    return guesser(new_bounds)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34733114_34733353_15_21
34733114_34738890_15_20
Title: Ping a website with output to Tkinter 
----------------------------------------

def commande() :
INDENT
    cmd = 'ping www.wikipedia.com'
    p = Popen(cmd.split(), stdout = PIPE, stderr = STDOUT)
    for line in iter(p.stdout.readline, '') :
    INDENT
        nom_mp4 = tk.Label(root, text = line)
        nom_mp4.pack()
    DEDENT
DEDENT
----------------------------------------

def commande() :
INDENT
    cmd = 'ping localhost'
    p = Popen(cmd.split(), stdout = PIPE, stderr = STDOUT)
    for line in iter(p.stdout.readline, '') :
    INDENT
        result.configure(text = line)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34754111_34767148_7_15
34754111_34770923_8_18
Title: PyQt4 QStackedLayout Switching Layout Error 
----------------------------------------

def __init__(self) :
INDENT
    QMainWindow.__init__(self)
    self.StackedLayout = QStackedLayout()
    self.StackedLayout.addWidget(self.CreateMainLayout())
    self.StackedLayout.addWidget(self.CreateMainLayout2())
    self.MainWidget = QWidget()
    self.MainWidget.setLayout(self.StackedLayout)
    self.setCentralWidget(self.MainWidget)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.ImportWindows()
    self.ConnectButtons()
    self.StackedLayout = QStackedLayout()
    self.StackedLayout.addWidget(self.Window1)
    self.StackedLayout.addWidget(self.Window2)
    self.MainWidget = QWidget()
    self.MainWidget.setLayout(self.StackedLayout)
    self.setCentralWidget(self.MainWidget)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34812800_34813400_9_26
34812800_34813452_10_28
Title: User input from GUI in Python 3.5 
----------------------------------------

def __init__(self, master) :
INDENT
    self.labelText = StringVar()
    self.userInput = StringVar()

    frame = Frame(master)
    frame.pack()
    self.labelText.set("Click when ready")
    label1 = Label(frame, textvariable = self.labelText, height = 4)
    label1.pack()
    someName = Entry(frame, textvariable = self.userInput)
    someName.pack()
    button1 = Button(frame, text = "Click Here", width = 20, command = self.changeLabel)
    button1.pack(side = 'bottom', padx = 15, pady = 15)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    app = Tk()
    app.title("GUI Test")
    app.geometry('450x300')
    self.labelText = StringVar()
    self.labelText.set("Click when ready")
    label1 = Label(app, textvariable = self.labelText, height = 4)
    label1.pack()
    userInput = StringVar(None)
    self.someName = Entry(app, textvariable = userInput)
    self.someName.pack()
    button1 = Button(app, text = "Click Here", width = 20, command = self.changeLabel)
    button1.pack(side = 'bottom', padx = 15, pady = 15)
    app.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3482112_3483161_44_70
3482112_3483161_8_18
Title: How to control/call another python script within one python script? (Communicate between scripts) 
----------------------------------------

def __init__(self, parent, id = - 1, title = "") :
INDENT
    wx.Frame.__init__(self, parent, id, title, size = (140, 180))
    self.SetMinSize((140, 180))
    panel = wx.Panel(id = wx.ID_ANY, name = u'mainPanel', parent = self)

    Publisher().subscribe(self.your_message_handler, "your_topic_name")

    self.startButton = wx.Button(panel, wx.ID_ANY, 'Start thread')
    self.Bind(wx.EVT_BUTTON, self.onStart, self.startButton)

    self.stopButton = wx.Button(panel, wx.ID_ANY, 'Stop thread')
    self.Bind(wx.EVT_BUTTON, self.onStop, self.stopButton)

    self.threadMessage = wx.TextCtrl(panel, wx.ID_ANY, '', size = (75, 20))

    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.startButton, 0, wx.ALL, 10)
    sizer.Add(self.stopButton, 0, wx.ALL, 10)
    sizer.Add(self.threadMessage, 0, wx.ALL, 10)
    panel.SetSizerAndFit(sizer)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    Thread.__init__(self)

    self.stop_flag = False

    self.start()

DEDENT
----------------------------------------

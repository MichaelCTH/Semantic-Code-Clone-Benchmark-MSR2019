$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52224466_52225410_1_22
52224466_52226137_9_21
Title: "How to generate 5-character strings combinations (1 digit two equal letters and two different equal letters) without duplication" 
----------------------------------------

def aabb1(letters = LETTERS, digits = DIGITS) :
INDENT
    letterdxs = set(range(4))
    combs = []
    for (a, b), (i, j), d, k in product(
        combinations(letters, 2),
        combinations(range(4), 2),
        digits,
        range(5)) :
    INDENT
        x, y = letterdxs.difference((i, j))
        result = []
        result [i : i] = a,
        result [j : j] = a,
        result [x : x] = b,
        result [y : y] = b,
        result [k : k] = d,
        combs.append(''.join(result))
    DEDENT
    print (len(combs))
    return combs
DEDENT
----------------------------------------

def aabb1() :
INDENT
    for dig in DIGITS :
    INDENT
        for i in range(len(LETTERS) - 1) :
        INDENT
            for j in range(i + 1, len(LETTERS)) :
            INDENT
                a = LETTERS [i]
                b = LETTERS [j]
                insdig(a + a + b + b, dig)
                insdig(a + b + a + b, dig)
                insdig(b + a + a + b, dig)
                insdig(a + b + b + a, dig)
                insdig(b + a + b + a, dig)
                insdig(b + b + a + a, dig)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52245335_52246026_1_27
52245335_52247098_4_13
Title: Python: csv file to dictionary 
----------------------------------------

def import_inventory(inventory, filename = "import_inventory.csv") :
INDENT
    file = open(filename, 'r')
    data = file.readline().split(',')
    inv = inventory
    for item in data :
    INDENT
        item = item.strip()
        if item in inv :
        INDENT
            inv.update({item : inv [item] + 1})
        DEDENT
        else :
        INDENT
            inv.update({item : 1})
        DEDENT
    DEDENT
    return inv
    def print_table(inventory) :
    INDENT
        inv = inventory
        count = 0
        print ('{:>5} {:>15}'.format('count', 'item name'))
        print ('---------------------')
        for item in inv :
        INDENT
            print ('{:>5} {:>15}'.format(inv [item], item))
            count = count + inv [item]
        DEDENT
        print ('---------------------')
        print ('Total number of items: ' + str(count))
    DEDENT
    given_inventory = {'sword' : 100, 'rope' : 4}
    new_inventory = import_inventory(given_inventory)
    print_table(new_inventory)
DEDENT
----------------------------------------

def import_inventory(inventory, filename) :
INDENT
    _inventory = defaultdict(int)
    with open(filename, encoding = "UTF_8") as stream :
    INDENT
        for line in stream :
        INDENT
            for item in line.split(",") :
            INDENT
                stock = inventory.get(item.strip(), 0)
                with suppress(KeyError) :
                INDENT
                    del (inventory [item.strip()])
                DEDENT
                _inventory [item.strip()] += stock + 1
            DEDENT
        DEDENT
    DEDENT
    return _inventory
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52247214_52252608_19_31
52247214_52252608_2_17
Title: How can I configure a widget that is in a different class? 
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Frame.__init__(self, parent)

    self.parent = parent

    self.btn = tk.Button(self, text = 'Press')
    self.btn.pack()

    self.parent.lbl.config(text = 'Changed')
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)

    self.lbl = tk.Label(self, text = 'Title')
    self.lbl.pack()

    self.child = SubWindow(self)
    self.child.pack()

    self.child.btn.config(bg = 'red')

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52251346_52251405_1_9
52251346_52253906_1_13
Title: Using return in Python 
----------------------------------------

def town() :
INDENT
    reply = input('What is your rely?')
    if reply == '1' :
    INDENT
        location1(reply)
    DEDENT
    elif reply == '2' :
    INDENT
        location2(reply)
    DEDENT
    elif reply == '2' :
    INDENT
        location3(reply)
    DEDENT
DEDENT
----------------------------------------

def town() :
INDENT
    reply = input('What is your reply? ')
    if reply in '123' :
    INDENT

        x = int(reply)
        location(x)
        return x
    DEDENT
    else :
    INDENT
        print ("Reply is different from '1', '2' or '3'")
        return None
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52265195_52265289_2_10
52265195_52265365_6_13
Title: Update global variable inside a function inside a method 
----------------------------------------

def run(self) :
INDENT
    exit = False
    def walk() :
    INDENT
        global exit
        exit = True
    DEDENT
    walk()
    print (exit)
DEDENT
----------------------------------------

def run(self) :
INDENT
    self.exit = False
    def walk() :
    INDENT
        self.exit = True
    DEDENT
    walk()
    print (self.exit)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52266674_52280081_86_98
52266674_52280081_9_41
Title: TK GUI design issues and object has no attribute 'tk'? 
----------------------------------------

def __init__(self, parent) :
INDENT
    tk.Toplevel.__init__(self, parent)
    self.title('Complete Genomics Inc.')
    self.e_value_thresh = ""
    self.e_value_setting = tk.Entry(self)
    self.e_value_setting.pack()
    tk.Button(self, text = "Close", command = self.destroy).pack()
    tk.Button(self, text = "Input file").pack()
    self.entry_field = tk.Entry(self)
    self.entry_field.pack()

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.title("Complete Genomics Inc.")
    self.input = ""
    self.output = ""
    self.param = ""
    self.inputbool = False
    self.outputbool = False
    self.parambool = False
    self.p3filestring = '-p3_settings_file='

    self.entry_input = tk.Entry(self)
    self.entry_output = tk.Entry(self)
    self.entry_parameters = tk.Entry(self)
    self.entry_input.grid(row = 1, column = 1, padx = 1, pady = 1, sticky = "w")
    self.entry_output.grid(row = 2, column = 1, padx = 1, pady = 1, sticky = "w")
    self.entry_parameters.grid(row = 3, column = 1, padx = 1, pady = 1, sticky = "w")
    self.label1 = tk.Label(self, text = "AUTOPRIMER").grid(row = 0, columnspan = 4)
    tk.Button(self, text = "Input Filepath: ", command = lambda : self.button1).grid(row = 1, padx = 1, pady = 1, sticky = "e")
    tk.Button(self, text = "Output Filepath: ", command = lambda : self.button2).grid(row = 2, padx = 1, pady = 1, sticky = "e")
    tk.Button(self, text = "Parameters Filepath: ", command = lambda : self.button3).grid(row = 3, padx = 1, pady = 1, sticky = "e")
    tk.Button(self, text = "Get Primers",).grid(row = 4)
    tk.Button(self, text = "Parse Primers",).grid(row = 4, column = 1, sticky = "w")
    tk.Button(self, text = "Pool Primers",).grid(row = 4, column = 2, sticky = "w")
    tk.Button(self, text = "Blast Primers", command = lambda : BlastAPI(self)).grid(row = 4, column = 3, sticky = "w")
    tk.Button(self, text = "Quit", command = self.destroy).grid(row = 4, column = 4, sticky = "w")

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52270391_52286101_23_62
52270391_52286101_6_19
Title: I want to create a color animation for a button with pyqt5 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Page, self).__init__(parent)
    mainlayout = QtWidgets.QVBoxLayout(self)
    self.keypad = QtWidgets.QGroupBox()
    self.search = QtWidgets.QLineEdit()
    self.search.setProperty("last_text", "")
    self.search.setAlignment(QtCore.Qt.AlignCenter)
    self.search.setStyleSheet('font: bold 50pt')
    self.search.setMaxLength(13)
    self.search.setEchoMode(QtWidgets.QLineEdit.Password)
    mainlayout.addWidget(self.search)
    mainlayout.addWidget(self.keypad)
    mainlayout.setContentsMargins(150, 150, 150, 150)
    lay = QtWidgets.QGridLayout(self.keypad)
    virtualkeypad = [
        '7', '8', '9',
        '4', '5', '6',
        '1', '2', '3',
        'BACK', '0', 'OK']
    positions = [(i, j) for i in range(4) for j in range(3)]
    self.buttons = {}
    for position, name in zip(positions, virtualkeypad) :
    INDENT
        if name == "OK" :
        INDENT
            btn = BeautifulButton(name)
            btn.setStyleSheet('background-color: none; font: 50pt;')
            btn.setDisabled(True)
        DEDENT
        else :
        INDENT
            btn = QtWidgets.QPushButton(name)
            btn.setStyleSheet('background-color: orange; font: bold 50pt;')
        DEDENT
        self.buttons [name] = btn
        btn.clicked.connect(partial(self.on_clicked, name))
        btn.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        lay.addWidget(btn, * position)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(BeautifulButton, self).__init__(* args, ** kwargs)
    effect = QtWidgets.QGraphicsColorizeEffect(self)
    self.setGraphicsEffect(effect)
    self.animation = QtCore.QPropertyAnimation(effect, b"color")
    self.animation.setStartValue(QtGui.QColor(QtCore.Qt.cyan))
    self.animation.setEndValue(QtGui.QColor(255, 255, 255))
    self.animation.setLoopCount(5)
    self.animation.setDuration(5000)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52271228_52272407_17_39
52271228_52272407_7_15
Title: PyQt5 with multiple intents ( pages in the same window ) 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Widget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    self.stacked = QtWidgets.QStackedWidget()
    lay.addWidget(self.stacked)
    self.listWidget = QtWidgets.QListWidget()
    self.listWidget.setViewMode(QtWidgets.QListView.IconMode)
    self.listWidget.setIconSize(QtCore.QSize(128, 128))
    self.listWidget.itemClicked.connect(self.onItemClicked)
    self.stacked.addWidget(self.listWidget)
    for icon, content in [("alarms.png", QtWidgets.QTextEdit()),
        ("fitness.png", QtWidgets.QMdiArea()),
        ("navigation.png", QtWidgets.QTableWidget(4, 4)),
        ("notifications.png", QtWidgets.QListWidget())] :
    INDENT

        p = Page(content)
        p.clicked.connect(lambda : self.stacked.setCurrentIndex(0))
        self.addPage(QtGui.QIcon(icon), p)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, content, parent = None) :
INDENT
    super(Page, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    button = QtWidgets.QPushButton("Back")
    button.clicked.connect(self.clicked)
    lay.addWidget(button)
    lay.addWidget(content)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5227719_5227737_1_16
5227719_5227843_1_15
Title: abbreviations and dictionaries 
----------------------------------------

def abr() :
INDENT
    abbrev = input("Enter a day abbreviation:")
    days = {
        "Su" : "Sunday",
        "Mo" : "Monday",
        "Tu" : "Tuesday",
        "We" : "Wednesday",
        "Th" : "Thursday",
        "Fr" : "Friday",
        "Sa" : "Saturday",
        }
    return days.get(abbrev, '')
DEDENT
----------------------------------------

def abr() :
INDENT
    abr = raw_input("Enter a day abbreviation:")
    days = {"Su" : "Sunday",
        "Mo" : "Monday",
        "Tu" : "Tuesday",
        "We" : "Wednesday",
        "Th" : "Thursday",
        "Fr" : "Friday",
        "Sa" : "Saturday",
        "Su" : "Sunday"}
    if abr in days :
    INDENT
        return days [abr]
    DEDENT
    return None

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52281299_52281415_4_13
52281299_52281644_2_10
Title: Overriding getters and setters for attributes from a list of strings 
----------------------------------------

def __init__(self) :
INDENT
    _get = lambda a : lambda : getattr(self, a)
    _set = lambda a : lambda v : setattr(self, a, v)
    for attr in self.attributes :
    INDENT
        setattr(self, attr, None)
        if not hasattr(self, "get_" + attr) :
        INDENT
            setattr(self, "get_" + attr, _get(attr))
        DEDENT
        if not hasattr(self, "set_" + attr) :
        INDENT
            setattr(self, "set_" + attr, _set(attr))
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    overrides = [override for override in dir(self) if override.startswith("override_")]
    for override in overrides :
    INDENT
        base_name = override.split("override_") [- 1]
        setattr(self, base_name, getattr(self, override))

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52286009_52287012_11_22
52286009_52287012_34_58
Title: How to transfer parameters from PyQt5 QSpinBox to Matplotlib? 
----------------------------------------

def __init__(self, parent = None, width = 5, height = 4, dpi = 100) :
INDENT
    fig = Figure(figsize = (width, height), dpi = dpi)
    self.axes = fig.add_subplot(111)
    FigureCanvas.__init__(self, fig)
    self.setParent(parent)
    self.axes.plot()
    FigureCanvas.setSizePolicy(self,
        QtWidgets.QSizePolicy.Expanding,
        QtWidgets.QSizePolicy.Expanding)
    FigureCanvas.updateGeometry(self)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    QtWidgets.QMainWindow.__init__(self)
    self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
    self.setWindowTitle("application main window")
    self.file_menu = QtWidgets.QMenu('&File', self)
    self.file_menu.addAction('&Quit', self.close, QtCore.Qt.CTRL + QtCore.Qt.Key_Q)
    self.menuBar().addMenu(self.file_menu)
    self.main_widget = QtWidgets.QWidget()
    l = QtWidgets.QVBoxLayout(self.main_widget)
    self.sb = QtWidgets.QSpinBox(minimum = 1, maximum = 10, singleStep = 1, value = 1)
    sc = MyStaticMplCanvas(self.main_widget, width = 5, height = 4, dpi = 100)
    self.sb.valueChanged.connect(sc.update_figure)
    sc.update_figure(self.sb.value())
    l.addWidget(self.sb)
    l.addWidget(sc)
    self.main_widget.setFocus()
    self.setCentralWidget(self.main_widget)
    self.statusBar().showMessage("All hail matplotlib!", 2000)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52286228_52286266_1_12
52286228_52286411_3_12
Title: How can I get rid of yield and use another function instead in my code 
----------------------------------------

def mot(n) :
INDENT
    output = []
    if n == 0 :
    INDENT
        output.append(n)
    DEDENT
    else :
    INDENT
        for m in mot(n - 1) :
        INDENT
            output.append([m])
        DEDENT
        for k in range(0, n - 1) :
        INDENT
            for l in mot(k) :
            INDENT
                for r in mot(n - 2 - k) :
                INDENT
                    output.append((l, r))
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return output
DEDENT
----------------------------------------

def mot() :
INDENT
    M_n1 = 1
    M_n2 = 1
    yield 1
    yield 1
    for n in count(2) :
    INDENT
        M = ((2 * n + 1) / (n + 2)) * M_n1 + ((3 * n - 3) / (n + 2)) * M_n2
        M = int(M)
        yield M
        M_n1, M_n2 = M, M_n1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52291734_52292785_26_51
52291734_52292785_58_79
Title: PyQt5 mouse hover functions 
----------------------------------------

def __init__(self, value, parent = None) :
INDENT
    super().__init__(parent)
    self.setGeometry(750, 100, 300, 300)
    self.parent = parent
    self.setWindowTitle('Window2')
    self.setWindowIcon(self.style().standardIcon(QtWidgets.QStyle.SP_FileDialogInfoView))
    label1 = QtWidgets.QLabel(value)
    self.button = QtWidgets.QPushButton()
    self.button.setSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
    self.button.setIcon(self.style().standardIcon(QtWidgets.QStyle.SP_ArrowLeft))
    self.button.setIconSize(QtCore.QSize(200, 200))
    layoutV = QtWidgets.QVBoxLayout()
    self.pushButton = QtWidgets.QPushButton(self)
    self.pushButton.setStyleSheet('background-color: rgb(0,0,255); color: #fff')
    self.pushButton.setText('Click me!')
    self.pushButton.clicked.connect(self.goMainWindow)
    layoutV.addWidget(self.pushButton)
    layoutH = QtWidgets.QHBoxLayout()
    layoutH.addWidget(label1)
    layoutH.addWidget(self.button)
    layoutV.addLayout(layoutH)
    self.setLayout(layoutV)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Widget, self).__init__(parent)
    self.setGeometry(400, 100, 300, 300)
    hlay = QtWidgets.QHBoxLayout()
    hlay.addStretch(1)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addStretch(1)
    self.btn = QtWidgets.QPushButton("Press me", objectName = "BlueButton")
    self.btn.clicked.connect(self.btn_onClick)
    self.btn.installEventFilter(self)
    hlay.addWidget(self.btn)
    hlay.addStretch(1)
    vlay.addLayout(hlay)
    self.lineEdit = QtWidgets.QLineEdit("Type here what you want to transfer for [Window2].")
    vlay.addWidget(self.lineEdit)
    vlay.addStretch(1)
    self.setLayout(vlay)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52293475_52296035_3_17
52293475_52307825_1_11
Title: Memory efficiency .txt appending Python 
----------------------------------------

def combine_directory_txt(file_paths, output_filename) :
INDENT
    with open(file_paths [0], "rb") as f_input :
    INDENT
        header = next(csv.reader(f_input, delimiter = "|"))
    DEDENT
    with open(output_filename, "wb") as f_output :
    INDENT
        csv_output = csv.writer(f_output, delimiter = "|")
        csv_output.writerow(header)
        for file_name in file_paths :
        INDENT
            with open(file_name, "rb") as f_input :
            INDENT
                csv_input = csv.reader(f_input, delimiter = "|")
                next(csv_input)
                csv_output.writerows(csv_input)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def combine_directory_txt(file_paths, output_filename, chunksize) :
INDENT
    with open(output_filename, "wb") as outfile :
    INDENT
        chunk_transfer(file_paths [0], outfile, chunksize, append = False)
        for path in file_paths [1 :] :
        INDENT
            chunk_transfer(path, outfile, chunksize, append = True)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52298964_52300425_1_12
52298964_52300687_2_16
Title: Function multiplying two polynomials gives wrong result 
----------------------------------------

def multipoly(p1, p2) :
INDENT
    mul = dict()
    for m in p1 :
    INDENT
        for n in p2 :
        INDENT
            if m [1] + n [1] in mul :
            INDENT
                mul [m [1] + n [1]] += m [0] * n [0]
            DEDENT
            else :
            INDENT
                mul [m [1] + n [1]] = m [0] * n [0]
            DEDENT
        DEDENT
    DEDENT
    m_res = []
    for p, q in mul.items() :
    INDENT
        m_res.append((q, p))
    DEDENT
    return m_res
DEDENT
----------------------------------------

def multipoly(poly1, poly2) :
INDENT
    temp = [(p1 [0] * p2 [0], p1 [1] + p2 [1]) for p1 in poly1 for p2 in poly2]

    temp = sorted(temp, key = lambda x : x [1])
    g = groupby(temp, lambda x : x [1])

    result = []
    for k, v in g :
    INDENT
        result.append((sum([i [0] for i in v]), k))
    DEDENT
    result.sort(key = lambda x : - x [1])
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52308164_52309299_13_24
52308164_52318553_64_77
Title: How to a thread a wxpython progress bar GUI? 
----------------------------------------

def run(self) :
INDENT
    self.sendEvent('checking', 0)

    self.sendEvent('Downloading...', 100)
    Download()
    self.sendEvent('Downloading complete', 400)
    Extract()
    Clean()
DEDENT
----------------------------------------

def run(self) :
INDENT
    self.SendEvent('Checking...', 50)
    Check()
    self.SendEvent('Connecting to download...', 0)
    urllib.request.urlretrieve(url, 'temp.zip', reporthook = self.Download_Progress)
    self.SendEvent('Extracting...', 800)
    Extract()
    self.SendEvent('Cleaning...', 900)
    Clean()
    self.SendEvent('Finished...', 1000)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52314186_52324580_10_14
52314186_52324580_18_24
Title: Extended dict-like subclass to support casting and JSON dumping without extras 
----------------------------------------

def default_wrapper(o) :
INDENT
    o = default_func(o)
    if isinstance(o, MutableMapping) :
    INDENT
        o = dict(o)
    DEDENT
    return o
DEDENT
----------------------------------------

def default_wrapper(self, o) :
INDENT
    try :
    INDENT
        return default_func(self, o)
    DEDENT
    except TypeError :
    INDENT
        if isinstance(o, MutableMapping) :
        INDENT
            return dict(o)
        DEDENT
        raise
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52322211_52322322_1_9
52322211_52322434_1_15
Title: "How do I find the smallest largest value and total and the average in a 2D list that the user provides in python?" 
----------------------------------------

def list_stats(a) :
INDENT
    flattened = [num for sublist in a for num in sublist]
    min_val = min(flattened)
    max_val = max(flattened)
    sum_val = sum(flattened)
    avg_val = sum_val / len(flattened)
    return min_val, max_val, sum_val, avg_val

DEDENT
----------------------------------------

def list_stats(a) :
INDENT
    total = 0
    counter = 0
    small = 99999
    large = - 999
    for x in a :
    INDENT
        for y in x :
        INDENT
            if y < small :
            INDENT
                small = y
            DEDENT
            if y > large :
            INDENT
                large = y
            DEDENT
            counter += 1
            total += y
        DEDENT
    DEDENT
    average = total / counter
    return small, large, total, average
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52327405_52327471_11_24
52327405_52327535_11_18
Title: Giving a list of Harshad numbers using Python script 
----------------------------------------

def ithHarshad(i) :
INDENT
    a = []
    count = 0
    x = 0
    while True :
    INDENT
        x += 1
        if isHarshad(x) :
        INDENT
            a = a + [x]
            count += 1
        DEDENT
        if count == i :
        INDENT
            break
        DEDENT
    DEDENT
    print (a)
DEDENT
----------------------------------------

def ithHarshad(start, end) :
INDENT
    a = []
    count = 0
    for x in (range(start, end)) :
    INDENT
        if isHarshad(x) :
        INDENT
            a = a + [x]
        DEDENT
    DEDENT
    print (a)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52327405_52327471_11_24
52327405_52327681_11_23
Title: Giving a list of Harshad numbers using Python script 
----------------------------------------

def ithHarshad(i) :
INDENT
    a = []
    count = 0
    x = 0
    while True :
    INDENT
        x += 1
        if isHarshad(x) :
        INDENT
            a = a + [x]
            count += 1
        DEDENT
        if count == i :
        INDENT
            break
        DEDENT
    DEDENT
    print (a)
DEDENT
----------------------------------------

def ithHarshad(i) :
INDENT
    a = []
    count = 0
    x = 1
    while True :
    INDENT
        if isHarshad(x) :
        INDENT
            a = a + [x]
            count += 1
            x += 1
            if count == i :
            INDENT
                print (a)
            DEDENT
        DEDENT
        else :
        INDENT
            x += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52327405_52327535_11_18
52327405_52327681_11_23
Title: Giving a list of Harshad numbers using Python script 
----------------------------------------

def ithHarshad(start, end) :
INDENT
    a = []
    count = 0
    for x in (range(start, end)) :
    INDENT
        if isHarshad(x) :
        INDENT
            a = a + [x]
        DEDENT
    DEDENT
    print (a)
DEDENT
----------------------------------------

def ithHarshad(i) :
INDENT
    a = []
    count = 0
    x = 1
    while True :
    INDENT
        if isHarshad(x) :
        INDENT
            a = a + [x]
            count += 1
            x += 1
            if count == i :
            INDENT
                print (a)
            DEDENT
        DEDENT
        else :
        INDENT
            x += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52335974_52338250_6_24
52335974_52340163_9_27
Title: Using a miniature version of the plotted data as the legend handle in python 
----------------------------------------

def create_artists(self, legend, orig_handle,
xdescent, ydescent, width, height, fontsize,
trans) :
INDENT
    xdata, y1 = orig_handle.get_data()

    min_val = np.min(y1)
    max_val = np.max(y1)
    y2 = (y1 - (min_val + (max_val - min_val) / 2)) / ((max_val - min_val) / 2)
    y3 = height * y2 + xdescent + height / 2
    legline = matplotlib.lines.Line2D(xdata, y3)
    self.update_prop(legline, orig_handle, legend)
    legline.set_transform(trans)
    return [legline]

DEDENT
----------------------------------------

def create_artists(self, legend, orig_handle,
xdescent, ydescent, width, height, fontsize,
trans) :
INDENT
    legline, _ = HandlerLine2D.create_artists(self, legend, orig_handle,
        xdescent, ydescent, width, height, fontsize, trans)
    legline.set_data(* orig_handle.get_data())
    ext = mpath.get_paths_extents([orig_handle.get_path()])
    if ext.width == 0 :
    INDENT
        ext.x0 -= 0.1
        ext.x1 += 0.1
    DEDENT
    bbox0 = BboxTransformFrom(ext)
    bbox1 = BboxTransformTo(Bbox.from_bounds(xdescent, ydescent, width, height))
    legline.set_transform(bbox0 + bbox1 + trans)
    return legline,
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
523363_523485_14_26
523363_532873_5_20
Title: How do I layout a 3 pane window using wxPython? 
----------------------------------------

def __init__(self, * args, ** kwds) :
INDENT
    kwds ["style"] = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER | wx.THICK_FRAME
    wx.Dialog.__init__(self, * args, ** kwds)
    self.window_1 = wx.SplitterWindow(self, - 1, style = wx.SP_3D | wx.SP_BORDER)
    self.tree_ctrl_1 = wx.TreeCtrl(self, - 1, style = wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
    self.text_ctrl_1 = wx.TextCtrl(self.window_1, - 1, "This is the Edit", style = wx.TE_MULTILINE)
    self.grid_1 = wx.grid.Grid(self.window_1, - 1, size = (1, 1))
    self.__set_properties()
    self.__do_layout()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    wx.Frame.__init__(self, * args, ** kwargs)
    self.mgr = wx.aui.AuiManager(self)
    leftpanel = wx.Panel(self, - 1, size = (200, 150))
    rightpanel = wx.Panel(self, - 1, size = (200, 150))
    bottompanel = wx.Panel(self, - 1, size = (200, 150))
    self.mgr.AddPane(leftpanel, wx.aui.AuiPaneInfo().Bottom())
    self.mgr.AddPane(rightpanel, wx.aui.AuiPaneInfo().Left().Layer(1))
    self.mgr.AddPane(bottompanel, wx.aui.AuiPaneInfo().Center().Layer(2))
    self.mgr.Update()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52338366_52338587_44_68
52338366_52338587_6_23
Title: PyQt5 Qtablewidget and connecting to buttons 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ThirdTabLoads, self).__init__(parent)
    table = LoadTable()
    add_button = QtWidgets.QPushButton("Add")
    add_button.clicked.connect(table._addrow)
    delete_button = QtWidgets.QPushButton("Delete")
    delete_button.clicked.connect(table._removerow)
    button_layout = QtWidgets.QVBoxLayout()
    button_layout.addWidget(add_button, alignment = QtCore.Qt.AlignBottom)
    button_layout.addWidget(delete_button, alignment = QtCore.Qt.AlignTop)

    tablehbox = QtWidgets.QHBoxLayout()
    tablehbox.setContentsMargins(10, 10, 10, 10)
    tablehbox.addWidget(table)
    grid = QtWidgets.QGridLayout(self)
    grid.addLayout(button_layout, 0, 1)
    grid.addLayout(tablehbox, 0, 0)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoadTable, self).__init__(1, 5, parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    headertitle = ("A", "B", "C", "D", "E")
    self.setHorizontalHeaderLabels(headertitle)
    self.verticalHeader().hide()
    self.horizontalHeader().setHighlightSections(False)
    self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
    self.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
    self.setColumnWidth(0, 130)
    combox_lay = QtWidgets.QComboBox(self)
    combox_lay.addItems(["I", "II"])
    self.setCellWidget(0, 4, combox_lay)
    self.cellChanged.connect(self._cellclicked)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52342543_52342703_4_14
52342543_52344119_5_15
Title: Extract content of <Script> in Python with BeautifulSoup 
----------------------------------------

def check_script_tag(url) :
INDENT
    r = requests.get(url)
    parsed_html = BeautifulSoup(r.content, features = "html.parser")
    try :
    INDENT
        text = parsed_html.body.find('script').text
        print (text)
    DEDENT
    except AttributeError :
    INDENT
        print ("There is no script tag !!")
    DEDENT
DEDENT
----------------------------------------

def check_script_tag(url) :
INDENT
    r = requests.get(url)
    parsed_html = BeautifulSoup(r.content, features = "html.parser")
    script_tags = parsed_html.body.find_all('script')
    for script_tag in script_tags :
    INDENT
        text = script_tag.text
        if 'window.FEED__INITIAL__STATE'.lower() in text.lower() :
        INDENT
            print (text)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52347671_52347761_1_12
52347671_52347871_3_12
Title: What is wrong with my root mean square average? 
----------------------------------------

def rms() :
INDENT
    total = 0.0
    count = 0
    while True :
    INDENT
        x = input('enter value (enter nothing to stop):')
        if x.strip() == '' :
        INDENT
            break
        DEDENT
        count += 1
        total += float(x) ** 2
    DEDENT
    print ('mean square root is:', math.sqrt(total / count))
DEDENT
----------------------------------------

def rms() :
INDENT
    print ("This program will calculate the RMS of your values.")
    print ()
    n = int(input("Please enter the number of values you want calculated: "))
    total = 0.0
    for i in range(n) :
    INDENT
        x = float(input("Enter a desired values:"))
        total = total + math.sqrt(x)
    DEDENT
    print ("\nThe Root Mean Square is:", math.sqrt(total / n))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52355051_52355332_6_22
52355051_52360326_13_35
Title: How can I crawl all the <td> contents?(python3.6) 
----------------------------------------

def main() :
INDENT
    global url
    r = requests.get(url)
    soup = BeautifulSoup(r.text, 'html.parser')
    tags = soup.find_all('h1', class_ = 'title_thema')
    for tag in tags :
    INDENT
        name = tag.find('span', id = 'doctitle').get_text()
        print (name)
    DEDENT
    table1 = soup.find('table', attrs = {'id' : 'jqe-table-0'})
    tr = table1.find_all('tr')
    for trr in tr :
    INDENT
        td = trr.findAll('td')
        print (td [0].text)
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    try :
    INDENT
        for count in range(100, 1000) :
        INDENT
            url = "http://baike.hrhrs.com/index.php?doc-view-" + str(count) + ".html"
            html = getHTMLText(url)
            soup = BeautifulSoup(html, 'html.parser')

            for tag in soup.find_all('h1', class_ = 'title_thema') :
            INDENT
                name = tag.find('span', id = 'doctitle').get_text()
                n [0] = name;
            DEDENT
            tr = soup.find_all('tr')
            for trr in tr :
            INDENT
                tdlist = trr.find_all('td')
                for i in range(len(tdlist)) :
                INDENT
                    print (str(tdlist [i].text))
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        print ("error")
    DEDENT
    print ("successfully！")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52368510_52447989_158_248
52368510_52447989_38_89
Title: How to edit data from a database using QLineEdit or Something else 
----------------------------------------

def __init__(self, parent) :
INDENT
    super(edit_window, self).__init__()
    edit_window.setWindowTitle(self, 'Izmjena podataka postojećeg korisnika')
    self.setFixedSize(500, 400)
    self.layout = QVBoxLayout()
    self.setLayout(self.layout)
    self.groupBox = QtWidgets.QGroupBox()
    self.groupBox.setGeometry(QtCore.QRect(190, 20, 421, 231))
    self.groupBox.setObjectName("groupBox")
    self.groupBox.setTitle('Edit Contact')
    self.label = QtWidgets.QLabel(self.groupBox)
    self.label.setGeometry(QtCore.QRect(10, 30, 391, 51))
    font = QtGui.QFont()
    font.setFamily("Times New Roman")
    font.setPointSize(20)
    font.setBold(True)
    font.setWeight(75)
    self.label.setFont(font)
    self.label.setAlignment(QtCore.Qt.AlignCenter)
    self.label.setObjectName("label")
    self.label.setText('Izmjena postojećeg kontakta')
    self.le_prezime = QtWidgets.QLineEdit(self.groupBox)
    self.le_prezime.setGeometry(QtCore.QRect(160, 130, 150, 20))
    self.le_prezime.setObjectName("le_prezime")
    self.le_ime = QtWidgets.QLineEdit(self.groupBox)
    self.le_ime.setGeometry(QtCore.QRect(160, 160, 150, 20))
    self.le_ime.setObjectName("le_ime")
    self.le_telefon = QtWidgets.QLineEdit(self.groupBox)
    self.le_telefon.setGeometry(QtCore.QRect(160, 190, 150, 20))
    self.le_telefon.setObjectName("le_telefon")
    self.le_lokal = QtWidgets.QLineEdit(self.groupBox)
    self.le_lokal.setGeometry(QtCore.QRect(160, 220, 150, 20))
    self.le_lokal.setObjectName("le_lokal")
    self.le_fax = QtWidgets.QLineEdit(self.groupBox)
    self.le_fax.setGeometry(QtCore.QRect(160, 250, 150, 20))
    self.le_fax.setObjectName("le_fax")
    self.le_oblast = QtWidgets.QLineEdit(self.groupBox)
    self.le_oblast.setGeometry(QtCore.QRect(160, 280, 150, 20))
    self.le_oblast.setObjectName("le_oblast")
    self.lbl_prezime = QtWidgets.QLabel(self.groupBox)
    self.lbl_prezime.setGeometry(QtCore.QRect(0, 130, 150, 20))
    self.lbl_prezime.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    self.lbl_prezime.setObjectName("lbl_prezime")
    self.lbl_prezime.setText('Prezime')
    self.lbl_ime = QtWidgets.QLabel(self.groupBox)
    self.lbl_ime.setGeometry(QtCore.QRect(0, 160, 150, 20))
    self.lbl_ime.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    self.lbl_ime.setObjectName("lbl_ime")
    self.lbl_ime.setText('Ime')
    self.lbl_telefon = QtWidgets.QLabel(self.groupBox)
    self.lbl_telefon.setGeometry(QtCore.QRect(0, 190, 150, 20))
    self.lbl_telefon.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    self.lbl_telefon.setObjectName("lbl_telefon")
    self.lbl_telefon.setText('Telefon')
    self.lbl_lokal = QtWidgets.QLabel(self.groupBox)
    self.lbl_lokal.setGeometry(QtCore.QRect(0, 220, 150, 20))
    self.lbl_lokal.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    self.lbl_lokal.setObjectName("lbl_lokal")
    self.lbl_lokal.setText('Lokal')
    self.lbl_fax = QtWidgets.QLabel(self.groupBox)
    self.lbl_fax.setGeometry(QtCore.QRect(0, 250, 150, 20))
    self.lbl_fax.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    self.lbl_fax.setObjectName("lbl_fax")
    self.lbl_fax.setText('Fax')
    self.lbl_oblast = QtWidgets.QLabel(self.groupBox)
    self.lbl_oblast.setGeometry(QtCore.QRect(0, 280, 150, 20))
    self.lbl_oblast.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    self.lbl_oblast.setObjectName("lbl_oblast")
    self.lbl_oblast.setText('Oblast')

    self.btn_save = QtWidgets.QPushButton(self.groupBox, clicked = parent.clickedBtnSave)
    self.btn_save.setGeometry(QtCore.QRect(140, 340, 80, 25))
    self.btn_save.setObjectName("btn_save")
    self.btn_save.setText('Snimi izmjene')

    self.btn_cancel = QtWidgets.QPushButton(self.groupBox, clicked = parent.clickedBtnCancel)
    self.btn_cancel.setGeometry(QtCore.QRect(230, 340, 80, 25))
    self.btn_cancel.setObjectName("btn_cancel")
    self.btn_cancel.setText('Odustani')
    self.layout.addWidget(self.groupBox)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(Glavni_prozor, self).__init__()
    self.setFixedSize(1024, 768)
    self.edit_window = edit_window(self)
    layout = QVBoxLayout(self)
    self.tabelaEditovanje = QTableView()
    self.tabelaEditovanje.setGeometry(50, 50, 300, 200)
    self.tabelaEditovanje.setSelectionMode(QAbstractItemView.SingleSelection)
    self.tabelaEditovanje.setSelectionBehavior(QAbstractItemView.SelectRows)
    self.tabelaEditovanje.doubleClicked.connect(self.select_id)
    self.tabelaEditovanje.doubleClicked.connect(self.prikazi_drugi)
    layout.addWidget(self.tabelaEditovanje)

    self.model = QtSql.QSqlQueryModel()

    self.model.setQuery("""SELECT 
                                   id,                
                                   Lokacija,
                                   Kancelarija,
                                   Prezime,
                                   Ime,
                                   Telefon,
                                   Lokal,
                                   Fax,
                                   Oblast 
                               FROM telImenik""")

    self.tabelaEditovanje.setModel(self.model)

    for i, width in enumerate([10, 150, 65, 100, 80, 90, 40, 80, 340]) :
    INDENT
        self.tabelaEditovanje.setColumnWidth(i, width)
    DEDENT
    self.tabelaEditovanje.setColumnHidden(0, True)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52370032_52370215_4_21
52370032_52370460_4_23
Title: creating corresponding subfolders and writing a portion of the file in new files inside those subfolders using python 
----------------------------------------

def pre_processor() :
INDENT
    data_location = "D:\data"
    for root, dirs, files in os.walk(data_location) :
    INDENT
        for dir in dirs :
        INDENT

            folder_name = dir
        DEDENT
        for filename in files :
        INDENT
            with open(os.path.join(root, filename), encoding = "utf8", mode = "r") as f :
            INDENT
                processed_file_name = 'D:\\processed_data\\' + folder_name + '\\' + 'processed' + filename
                processed_file = open(processed_file_name, "w", encoding = "utf8")
                for line_number, line in enumerate(f, 1) :
                INDENT
                    if "1293" in line :
                    INDENT
                        processed_file.write(str(line))
                    DEDENT
                DEDENT
            DEDENT
            processed_file.close()

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def pre_processor() :
INDENT
    data_location = "data"
    for root, dirs, files in os.walk(data_location) :
    INDENT
        for dir in dirs :
        INDENT

            folder_name = dir
        DEDENT
        for filename in files :
        INDENT
            joined_path = os.path.join(root, filename)
            with open(joined_path, encoding = "utf8", mode = "r") as f :
            INDENT
                processed_folder_name = root.replace("data/", 'processed_data/')
                processed_file_name = processed_folder_name + '/processed' + filename
                if not os.path.exists(processed_folder_name) :
                INDENT
                    os.makedirs(processed_folder_name)
                DEDENT
                processed_file = open(processed_file_name, "w", encoding = "utf8")
                for line in f :
                INDENT
                    if "1293" in line :
                    INDENT
                        processed_file.write(str(line))
                    DEDENT
                DEDENT
                processed_file.close()
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52379482_52379603_1_7
52379482_52379606_2_10
Title: "Python Lottery generator I'm trying to figure out how to add a number input and separate them on lines and be x amount of num long" 
----------------------------------------

def lotto(numbers) :
INDENT
    import random
    integer = []
    for number in range(0, numbers) :
    INDENT
        integer.append(random.randint(1, 101))
    DEDENT
    return integer
DEDENT
----------------------------------------

def lotto(repetitions) :
INDENT
    lista = []
    for i in range(repetitions) :
    INDENT
        integer = []
        for number in range(0, 5) :
        INDENT
            integer.append(random.randint(1, 101))
        DEDENT
        lista.append(integer)
    DEDENT
    return lista
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52388784_52396021_21_32
52388784_52396021_34_69
Title: Pyqt5 stop QThread worker on QAction 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    layout = QVBoxLayout(self)
    self.label = QLabel("")
    layout.addWidget(self.label)
    close_btn = QPushButton("Close window")
    layout.addWidget(close_btn)
    close_btn.clicked.connect(self.close)
    self.setGeometry(900, 300, 400, 80)
    self.setWindowTitle('MsgBox AThread(QThread)')

DEDENT
----------------------------------------

def __init__(self, parent = None, * args) :
INDENT
    super().__init__(parent, * args)
    self.setWindowTitle("Pyqt5 stop QThread worker on QAction")
    self.setGeometry(550, 300, 300, 300)
    centralWidget = QWidget(self)
    self.setCentralWidget(centralWidget)
    layout = QVBoxLayout(centralWidget)
    self.lbl = QLabel("Start")
    layout.addWidget(self.lbl)
    bar = self.menuBar()
    barThread = bar.addMenu('Thread')
    quit = bar.addMenu('Quit')
    quit.aboutToShow.connect(app.quit)
    self.start_update = QAction('&Start', self)
    self.start_update.setShortcut('Ctrl+S')
    self.start_update.triggered.connect(self._start_thread)
    self.stop_update = QAction('Sto&p', self)
    self.stop_update.setShortcut('Ctrl+P')
    self.stop_update.setVisible(False)
    self.stop_update.triggered.connect(self._stop_thread)
    barThread.addAction(self.start_update)
    barThread.addAction(self.stop_update)
    self.msg = MsgBoxAThread()
    self.myworker = None
    self.counter = 0
    self.timer = QTimer()
    self.timer.setInterval(1000)
    self.timer.timeout.connect(self.recurring_timer)
    self.timer.start()
    self.show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52389401_52389688_4_12
52389401_52389736_4_11
Title: global variable and reference before assignment 
----------------------------------------

def do_stuff_and_append_df(df) :
INDENT
    dt = datetime.now()
    row = dict.fromkeys(df.columns.tolist())
    row ['datetime'] = dt
    row ['pduType'] = 'blah'
    df = df.append(row, ignore_index = True)
    print (df.head())
    return df
DEDENT
----------------------------------------

def do_stuff_and_append_df() :
INDENT
    dt = datetime.now()
    row = dict.fromkeys(df.columns.tolist())
    row ['datetime'] = dt
    row ['pduType'] = 'blah'
    df = df.append(row, ignore_index = True)
    print (df.head())
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52392157_52392473_1_11
52392157_52392618_5_15
Title: How to generate a combination of two numbers that equal a given input 
----------------------------------------

def change(amount) :
INDENT
    if not 24 < = amount < = 1001 :
    INDENT
        print ('{} is outside range'.format(amount))
        return
    DEDENT
    sevens = []
    fives, remainder = divmod(amount, 5)
    while remainder :
    INDENT
        amount -= 7
        sevens.append(7)
        fives, remainder = divmod(amount, 5)
    DEDENT
    return [5] * fives + sevens
DEDENT
----------------------------------------

def change(target) :
INDENT
    nums = [5, 7]
    min_len = int(target / 7)
    max_len = int(target / 5) + 1
    res = reduce(lambda x, y :
        x + (list(itertools.combinations_with_replacement(nums, y))),
        range(min_len, max_len), [])

    return list(filter(lambda x : sum(x) == target, res))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52392157_52392473_1_11
52392157_52392808_1_14
Title: How to generate a combination of two numbers that equal a given input 
----------------------------------------

def change(amount) :
INDENT
    if not 24 < = amount < = 1001 :
    INDENT
        print ('{} is outside range'.format(amount))
        return
    DEDENT
    sevens = []
    fives, remainder = divmod(amount, 5)
    while remainder :
    INDENT
        amount -= 7
        sevens.append(7)
        fives, remainder = divmod(amount, 5)
    DEDENT
    return [5] * fives + sevens
DEDENT
----------------------------------------

def change(amount) :
INDENT
    if not 24 < = amount < = 1000 :
    INDENT
        print ("The number is outside the range.")
        return None

    DEDENT
    k = 3 * amount / / 7
    x = 3 * amount - 7 * k
    y = 5 * k - 2 * amount
    return x, y, [5] * x + [7] * y

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52392157_52392618_5_15
52392157_52392808_1_14
Title: How to generate a combination of two numbers that equal a given input 
----------------------------------------

def change(target) :
INDENT
    nums = [5, 7]
    min_len = int(target / 7)
    max_len = int(target / 5) + 1
    res = reduce(lambda x, y :
        x + (list(itertools.combinations_with_replacement(nums, y))),
        range(min_len, max_len), [])

    return list(filter(lambda x : sum(x) == target, res))
DEDENT
----------------------------------------

def change(amount) :
INDENT
    if not 24 < = amount < = 1000 :
    INDENT
        print ("The number is outside the range.")
        return None

    DEDENT
    k = 3 * amount / / 7
    x = 3 * amount - 7 * k
    y = 5 * k - 2 * amount
    return x, y, [5] * x + [7] * y

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52414654_52415249_23_43
52414654_52415339_17_28
Title: run method when QPlainTextEdit at a certain length 
----------------------------------------

def populate_row(self, letter) :
INDENT
    self.dialog = QDialog()
    self.dialog.resize(660, 260)
    self.textBox = QPlainTextEdit(self.dialog)
    self.textBox.blockCountChanged [int].connect(self.blockCount)

    Rbtn = QPushButton("Add Data")
    Rbtn.clicked.connect(
        lambda : self.enter_data(self.textBox.toPlainText()))
    layout = QVBoxLayout(self.dialog)
    layout.addWidget(self.textBox)

    self.dialog.exec_()
DEDENT
----------------------------------------

def populate_row(self, letter) :
INDENT
    self.dialog = QtWidgets.QDialog()
    self.dialog.resize(660, 260)
    self.textBox = QtWidgets.QPlainTextEdit()
    self.textBox.blockCountChanged.connect(self.blockCount)
    self.Rbtn = QtWidgets.QPushButton("Add Data")
    self.Rbtn.clicked.connect(self.runcode)
    layout = QtWidgets.QVBoxLayout(self.dialog)
    layout.addWidget(self.textBox)
    layout.addWidget(self.Rbtn)
    self.dialog.exec_()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52414654_52415249_49_63
52414654_52415339_36_44
Title: run method when QPlainTextEdit at a certain length 
----------------------------------------

def enter_data(self, text) :
INDENT
    self.label.setText(text)
    lst = text.split("\n")
    try :
    INDENT
        for x in lst :
        INDENT
            if x ! = "" :
            INDENT
                print (x)
                self.do_something_with_x()
            DEDENT
        DEDENT
    DEDENT
    except IndexError :
    INDENT
        pass
    DEDENT
    self.update_data()
    self.dialog.close()
DEDENT
----------------------------------------

def enter_data(self, text) :
INDENT
    self.label.setText(text)
    for x in text.split("\n") :
    INDENT
        if x :
        INDENT
            print (x)
            self.do_something_with_x()
        DEDENT
    DEDENT
    self.update_data()
    self.dialog.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52414654_52415249_7_22
52414654_52415339_6_16
Title: run method when QPlainTextEdit at a certain length 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Status, self).__init__(parent)
    self.label = QLabel()
    self.btn = QPushButton("Input Data")
    self.btn.clicked.connect(self.populate_row)
    self.layout = QVBoxLayout()
    self.layout.addWidget(self.btn)
    self.layout.addWidget(self.label)
    self.resize(660, 260)
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Status, self).__init__(parent)
    self.label = QtWidgets.QLabel()
    self.btn = QtWidgets.QPushButton("Input Data")
    self.btn.clicked.connect(self.populate_row)
    layout = QtWidgets.QVBoxLayout(self)
    layout.addWidget(self.btn)
    layout.addWidget(self.label)
    self.resize(660, 260)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52432133_52433015_1_14
52432133_52433210_1_37
Title: Filter out elements of a list based on their interrelationship 
----------------------------------------

def micro_world(bacteria, K) :
INDENT
    sarg = [i [0] for i in sorted(enumerate(bacteria), key = lambda x : x [1])]
    sortedbac = [bacteria [i] for i in sarg]

    diff = [j - i for i, j in zip(sortedbac [: - 1], sortedbac [1 :])] + [K + 1]

    idx = [i for i, v in enumerate(diff) if v > K]

    return [bacteria [i] for i in sorted([sarg [i] for i in idx])]
DEDENT
----------------------------------------

def micro_world(bacteria, k) :
INDENT
    bacteria = sorted(bacteria, reverse = True)

    i = 0
    result = 0
    while i < len(bacteria) :
    INDENT
        bacterium_size = bacteria [i]

        bigger_bacterium_exists = False
        while i + 1 < len(bacteria) :
        INDENT
            difference = bacterium_size - bacteria [i + 1]

            if difference > k :
            INDENT
                break
            DEDENT
            if difference == 0 and not bigger_bacterium_exists :
            INDENT
                break
            DEDENT
            bacterium_size = bacteria [i + 1]
            i += 1
            bigger_bacterium_exists = True

        DEDENT
        result += 1
        i += 1
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52435052_52437751_15_24
52435052_52437751_4_13
Title: Python Turtle Space Invaders bullets not hitting invaders 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__(shape = "arrow", visible = False)
    self.shapesize(.5, 1)
    self.color("yellow")
    self.penup()
    self.setheading(90)
    self.speed('fastest')
    self.bulletspeed = 20
DEDENT
----------------------------------------

def __init__(self, xcor, ycor) :
INDENT
    super().__init__(shape = "turtle")
    self.color("red")
    self.penup()
    self.setposition(xcor, ycor)
    self.tilt(- 90)
    self.speed('slow')
    self.hit = 0
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52435547_52435647_1_8
52435547_52435653_1_12
Title: Recursion in Python 3 
----------------------------------------

def merge(arr1, arr2) :
INDENT
    merged = []
    while arr1 and arr2 :
    INDENT
        if arr1 [0] > arr2 [0] :
        INDENT
            arr1, arr2 = arr2, arr1
        DEDENT
        merged.append(arr1.pop(0))
    DEDENT
    merged.extend(arr1 or arr2)
    return merged
DEDENT
----------------------------------------

def merge(arr1, arr2) :
INDENT
    for i in arr1 :
    INDENT
        for j in list(range(len(arr2))) :
        INDENT
            if i < arr2 [j] :
            INDENT
                arr2.append(arr2 [- 1])
                for count in list(range(len(arr2) - 1, j, - 1)) :
                INDENT
                    arr2 [count] = arr2 [count - 1]
                DEDENT
                arr2 [j] = i
                break
            DEDENT
            if j == len(arr2) - 1 :
            INDENT
                arr2.append(i)
            DEDENT
        DEDENT
    DEDENT
    return arr2
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52435641_52435669_4_10
52435641_52435765_7_21
Title: "Python - How to output strings that are in a list that have a certain number of letters in them" 
----------------------------------------

def wordsInListsCounter(stringList) :
INDENT
    elements = []
    for element in stringList :
    INDENT
        if len(element) < = threshold :
        INDENT
            elements.append(element)
        DEDENT
    DEDENT
    return elements
DEDENT
----------------------------------------

def wordsInListsCounter() :
INDENT
    elements = listOfWords(list)
    if len(elements) ! = 0 :
    INDENT
        strLessThanThreshold = [x for x in elements if len(x) < = threshold]
        return strLessThanThreshold
    DEDENT
    elif len(elements) == 0 :
    INDENT
        emptyString = "There are no words in this list"
        return emptyString
    DEDENT
    else :
    INDENT
        error = "There is invalid information"
        return error
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52446347_52446461_1_14
52446347_52446510_1_11
Title: Python for loop and function 
----------------------------------------

def number(x, y) :
INDENT
    list = []
    if x > y :
    INDENT
        for i in range(y, x) :
        INDENT
            if i % 2 == 0 :
            INDENT
                list.append(i)
            DEDENT
        DEDENT
    DEDENT
    else :
    INDENT
        for i in range(x, y) :
        INDENT
            if i % 2 == 1 :
            INDENT
                list.append(i)
            DEDENT
        DEDENT
    DEDENT
    return list
    print (number(10, 2))
DEDENT
----------------------------------------

def number(x, y) :
INDENT
    if x > y :
    INDENT
        if y % 2 == 1 :
        INDENT
            y += 1
        DEDENT
        return list(range(y, x, 2))
    DEDENT
    else :
    INDENT
        if x % 2 == 0 :
        INDENT
            x += 1
        DEDENT
        return list(range(x, y, 2))

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52446347_52446510_1_11
52446347_52446616_1_12
Title: Python for loop and function 
----------------------------------------

def number(x, y) :
INDENT
    if x > y :
    INDENT
        if y % 2 == 1 :
        INDENT
            y += 1
        DEDENT
        return list(range(y, x, 2))
    DEDENT
    else :
    INDENT
        if x % 2 == 0 :
        INDENT
            x += 1
        DEDENT
        return list(range(x, y, 2))

    DEDENT
DEDENT
----------------------------------------

def number(x, y) :
INDENT
    num = []
    if x > y :
    INDENT
        for i in range(y, x) :
        INDENT
            if i % 2 == 0 :
            INDENT
                num.append(i)
            DEDENT
        DEDENT
    DEDENT
    else :
    INDENT
        for i in range(x, y) :
        INDENT
            if i % 2 == 1 :
            INDENT
                num.append(i)
            DEDENT
        DEDENT
    DEDENT
    return num
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52446347_52446510_1_11
52446347_52447021_1_15
Title: Python for loop and function 
----------------------------------------

def number(x, y) :
INDENT
    if x > y :
    INDENT
        if y % 2 == 1 :
        INDENT
            y += 1
        DEDENT
        return list(range(y, x, 2))
    DEDENT
    else :
    INDENT
        if x % 2 == 0 :
        INDENT
            x += 1
        DEDENT
        return list(range(x, y, 2))

    DEDENT
DEDENT
----------------------------------------

def number(x, y) :
INDENT
    list = []
    if x > y :
    INDENT
        for num in range(y, x) :
        INDENT
            if (num % 2 == 0) :
            INDENT
                list.append(num)
            DEDENT
        DEDENT
    DEDENT
    elif y > x :
    INDENT
        for num in range(x, y) :
        INDENT
            if (num % 2 ! = 0) :
            INDENT
                list.append(num)
            DEDENT
        DEDENT
    DEDENT
    return list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52448652_52449667_9_39
52448652_52451376_12_42
Title: AttributeError: 'NoneType' object has no attribute '_inbound_nodes' while trying to add multiple keras Dense layers 
----------------------------------------

def tst_1() :
INDENT
    num_channels = 3
    inputs = Input(shape = (num_channels, 1000, 1))
    branch_outputs = []
    for i in range(num_channels) :
    INDENT

        out = Lambda(lambda x : x [:, i, :, :], name = "Lambda_" + str(i))(inputs)

        out = Dense(224, activation = 'relu', name = "Dense_224_" + str(i))(out)
        out = Dense(112, activation = 'relu', name = "Dense_112_" + str(i))(out)
        out = Dense(56, activation = 'relu', name = "Dense_56_" + str(i))(out)
        branch_outputs.append(out)

    DEDENT
    out = Concatenate()(branch_outputs)

    dense1 = Dense(224, activation = 'relu')(out)
    drop1 = Dropout(0.5)(dense1)
    dense2 = Dense(112, activation = 'relu')(drop1)
    drop2 = Dropout(0.5)(dense2)
    dense3 = Dense(32, activation = 'relu')(drop2)
    densef = Dense(1, activation = 'sigmoid')(dense3)
    model = Model(inputs = inputs, outputs = densef)
    return model
DEDENT
----------------------------------------

def tst_1() :
INDENT
    inputs = Input((3, 1000))
    x1 = Lambda(lambda x : x [:, 0])(inputs)
    dense10 = Dense(224, activation = 'relu')(x1)
    dense11 = Dense(112, activation = 'relu')(dense10)
    dense12 = Dense(56, activation = 'relu')(dense11)
    x2 = Lambda(lambda x : x [:, 1])(inputs)
    dense20 = Dense(224, activation = 'relu')(x2)
    dense21 = Dense(112, activation = 'relu')(dense20)
    dense22 = Dense(56, activation = 'relu')(dense21)
    x3 = Lambda(lambda x : x [:, 2])(inputs)
    dense30 = Dense(224, activation = 'relu')(x3)
    dense31 = Dense(112, activation = 'relu')(dense30)
    dense32 = Dense(56, activation = 'relu')(dense31)
    flat = Add()([dense12, dense22, dense32])
    dense1 = Dense(224, activation = 'relu')(flat)
    drop1 = Dropout(0.5)(dense1)
    dense2 = Dense(112, activation = 'relu')(drop1)
    drop2 = Dropout(0.5)(dense2)
    dense3 = Dense(32, activation = 'relu')(drop2)
    densef = Dense(1, activation = 'sigmoid')(dense3)
    model = Model(inputs = inputs, outputs = densef)
    return model
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52450713_52450993_17_35
52450713_52450993_2_15
Title: Qcombobox with Qlabel and signal&slot 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ConcreteStrengthInFo, self).__init__(parent)
    hbox = QtWidgets.QHBoxLayout()
    concrete_strength = QtWidgets.QLabel("Concrete strength: ")
    hbox.addWidget(concrete_strength)
    self.concreteproperty = ConcreteProperty()
    self.concretestrengthbox = ConcreteStrengthComboBox()
    hbox.addWidget(self.concretestrengthbox)

    self.concretestrengthbox.activated.connect(self.setdatastrength)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(hbox)
    self.vlay.addLayout(self.concreteproperty.concretestrength_lay)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ConcreteStrengthComboBox, self).__init__(parent)
    self.addItems(["C12/15", "C16/20", "C20/25", "C25/30", "C30/37", "C35/45", "C40/50", "C45/55",
            "C50/60", "C55/67", "C60/75", "C70/85", "C80/95", "C90/105"])
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.compressive_strength = ["12", "16", "20", "25", "30", "35", "40", "45", "50", "55",
        "60", "70", "80", "90"]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52450877_52450919_5_10
52450877_52450954_4_9
Title: Python 'For' Loop Iterate Array 
----------------------------------------

def discount(array) :
INDENT
    disPrice = price
    for day in array :
    INDENT
        disPrice = disPrice * 0.9
        print (day, disPrice)
    DEDENT
DEDENT
----------------------------------------

def discount(array, price) :
INDENT
    for day in array :
    INDENT
        price = price - (price *.1)
        print (day, round(price, 2))
    DEDENT
    return price
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52453490_52453586_1_10
52453490_52453693_8_13
Title: User validation loop for binary input is not recognising input 
----------------------------------------

def convert_to_decimal(binary_number) :
INDENT
    print ('\n')
    binary = input('Please enter binary numbera: ')
    while binary.isalpha() or binary == '' :
    INDENT
        print ("Please make sure your number contains digits 0-1 only.a ")
        binary = input('Please enter numberb: ')
    DEDENT
    while not binary.startswith('0') and not binary.startswith('1') :
    INDENT
        print ("Please make sure your number contains digits 0-1 only.x ")
        binary = input('Please enter numberc: ')
    DEDENT
DEDENT
----------------------------------------

def convert_to_decimal() :
INDENT
    print ('\n')
    binary = input('Please enter binary number: ')
    while not isBinary(binary) :
    INDENT
        binary = input('Please enter binary number: ')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52460846_52461255_45_54
52460846_52461255_82_109
Title: Python Tkinter Radiobutton returns value for wrong instance 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    Page.__init__(self, * args, ** kwargs)
    def ButtonPress() :
    INDENT
        print ("Selected Option:", self.q1.GetSelectedIndex())
    DEDENT
    self.q1 = Question(self)
    self.q1.Configure("Car", "Minecart", "Riding a spider", "Flight",
        question = "How would you prefer to get around?")
    self.q1.pack(side = "bottom", fill = "both", expand = True)
    tk.Button(self, command = ButtonPress, text = "press me - 1").pack()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Frame.__init__(self, * args, ** kwargs)
    def On_Back() :
    INDENT
        ChangePage(- 1)
        Pages [CurrentPage].lift()
    DEDENT
    def On_Next() :
    INDENT
        ChangePage(1)
        Pages [CurrentPage].lift()
    DEDENT
    def GetP1Value() :
    INDENT
        print ("Selected Option:", Pages [0].GetSelectedIndex())
    DEDENT
    Pages = [Page1(self), Page2(self)]
    Frame_Buttons = tk.Frame(self)
    Frame_Buttons.pack(side = "bottom", fill = "x", expand = False)
    Button_Next = tk.Button(Frame_Buttons, text = "Next",
        command = On_Next).pack(side = "right")
    Button_Back = tk.Button(Frame_Buttons, text = "Back",
        command = On_Back).pack(side = "right")
    tk.Button(Frame_Buttons, text = "get page 1",
        command = GetP1Value).pack(side = "right")
    Frame_Pages = tk.Frame(self)
    Frame_Pages.pack(side = "top", fill = "both", expand = True)
    for page in Pages :
    INDENT
        page.place(in_ = Frame_Pages, x = 0, y = 0, relwidth = 1, relheight = 1)
    DEDENT
    Pages [0].show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52460846_52461255_59_68
52460846_52461255_82_109
Title: Python Tkinter Radiobutton returns value for wrong instance 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    Page.__init__(self, * args, ** kwargs)
    def ButtonPress() :
    INDENT
        print ("Selected Option:", self.q1.GetSelectedIndex())
    DEDENT
    self.q1 = Question(self)
    self.q1.Configure("Day", "Night",
        question = "Do you prefer day or night time?")
    self.q1.pack(side = "bottom", fill = "both", expand = True)
    tk.Button(self, command = ButtonPress, text = "press me - 2").pack()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Frame.__init__(self, * args, ** kwargs)
    def On_Back() :
    INDENT
        ChangePage(- 1)
        Pages [CurrentPage].lift()
    DEDENT
    def On_Next() :
    INDENT
        ChangePage(1)
        Pages [CurrentPage].lift()
    DEDENT
    def GetP1Value() :
    INDENT
        print ("Selected Option:", Pages [0].GetSelectedIndex())
    DEDENT
    Pages = [Page1(self), Page2(self)]
    Frame_Buttons = tk.Frame(self)
    Frame_Buttons.pack(side = "bottom", fill = "x", expand = False)
    Button_Next = tk.Button(Frame_Buttons, text = "Next",
        command = On_Next).pack(side = "right")
    Button_Back = tk.Button(Frame_Buttons, text = "Back",
        command = On_Back).pack(side = "right")
    tk.Button(Frame_Buttons, text = "get page 1",
        command = GetP1Value).pack(side = "right")
    Frame_Pages = tk.Frame(self)
    Frame_Pages.pack(side = "top", fill = "both", expand = True)
    for page in Pages :
    INDENT
        page.place(in_ = Frame_Pages, x = 0, y = 0, relwidth = 1, relheight = 1)
    DEDENT
    Pages [0].show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52461309_52462276_107_121
52461309_52462276_5_17
Title: Broken drawing shapes 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    self.scribbleArea = ScribbleArea()
    self.scribbleArea.set_pen_width(10)
    self.scribbleArea.set_pen_color("red")
    self.setCentralWidget(self.scribbleArea)
    self.rectangle = QtWidgets.QAction(QtGui.QIcon('Image/rectangle.png'), 'Rectangle', self)
    self.rectangle.triggered.connect(self.scribbleArea.rectangleOn)
    self.ellipse = QtWidgets.QAction(QtGui.QIcon('Image/Ellipse.png'), 'Ellipse', self)
    self.ellipse.triggered.connect(self.scribbleArea.ellipseOn)
    toolbar = self.addToolBar('Tools')
    toolbar.addAction(self.rectangle)
    toolbar.addAction(self.ellipse)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(AbstractScribbleArea, self).__init__(parent)
    self._start = QtCore.QPoint()
    self._end = QtCore.QPoint()
    self._pixmap = QtGui.QPixmap()
    self._shape = ""
    self._color = QtGui.QColor("black")
    self._pen_width = 1
    self._pen = QtGui.QPen(self._color, self._pen_width,
        QtCore.Qt.SolidLine, QtCore.Qt.RoundCap, QtCore.Qt.RoundJoin)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52470040_52471654_103_108
52470040_52471654_31_40
Title: Broken drawing pencil 
----------------------------------------

def mouseReleaseEvent(self, event) :
INDENT
    if self.shape() == "pencil" :
    INDENT
        delattr(self, "pencil_start")
    DEDENT
    else :
    INDENT
        super(ScribbleArea, self).mouseReleaseEvent(event)
    DEDENT
DEDENT
----------------------------------------

def mouseReleaseEvent(self, event) :
INDENT
    painter = QtGui.QPainter(self._pixmap)
    painter.setPen(self._pen)
    self.draw_shape(painter, self._start, self._end, True)
    self._start = QtCore.QPoint()
    self._end = QtCore.QPoint()
    self.update()
    super(AbstractShapeScribbleArea, self).mouseReleaseEvent(event)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52470040_52471654_137_153
52470040_52471654_5_17
Title: Broken drawing pencil 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    scribbleArea = ScribbleArea()
    self.setCentralWidget(scribbleArea)
    rectangle = QtWidgets.QAction(QtGui.QIcon('Image/rectangle.png'), 'Rectangle', self)
    rectangle.triggered.connect(scribbleArea.rectangleOn)
    ellipse = QtWidgets.QAction(QtGui.QIcon('Image/Ellipse.png'), 'Ellipse', self)
    ellipse.triggered.connect(scribbleArea.ellipseOn)
    pen = QtWidgets.QAction(QtGui.QIcon('Image/pen.png'), 'Pencil', self)
    pen.triggered.connect(scribbleArea.pencilOn)
    toolbar = self.addToolBar('Tools')
    toolbar.addAction(rectangle)
    toolbar.addAction(ellipse)
    toolbar.addAction(pen)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(AbstractShapeScribbleArea, self).__init__(parent)
    self._start = QtCore.QPoint()
    self._end = QtCore.QPoint()
    self._pixmap = QtGui.QPixmap()
    self._shape = ""
    self._color = QtGui.QColor("black")
    self._pen_width = 1
    self._pen = QtGui.QPen(self._color, self._pen_width,
        QtCore.Qt.SolidLine, QtCore.Qt.RoundCap, QtCore.Qt.RoundJoin)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52470040_52471654_18_24
52470040_52471654_88_94
Title: Broken drawing pencil 
----------------------------------------

def mousePressEvent(self, event) :
INDENT
    if event.buttons() & QtCore.Qt.LeftButton :
    INDENT
        self._start = event.pos()
        self._end = event.pos()
        self.update()
    DEDENT
    super(AbstractShapeScribbleArea, self).mousePressEvent(event)
DEDENT
----------------------------------------

def mousePressEvent(self, event) :
INDENT
    if self.shape() == "pencil" and event.buttons() & QtCore.Qt.LeftButton :
    INDENT
        setattr(self, "pencil_start", event.pos())
        self.draw_pencil(event.pos(), event.pos())
    DEDENT
    else :
    INDENT
        super(ScribbleArea, self).mousePressEvent(event)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52470040_52471654_25_30
52470040_52471654_95_102
Title: Broken drawing pencil 
----------------------------------------

def mouseMoveEvent(self, event) :
INDENT
    if event.buttons() & QtCore.Qt.LeftButton :
    INDENT
        self._end = event.pos()
        self.update()
    DEDENT
    super(AbstractShapeScribbleArea, self).mouseMoveEvent(event)
DEDENT
----------------------------------------

def mouseMoveEvent(self, event) :
INDENT
    if self.shape() == "pencil" and event.buttons() & QtCore.Qt.LeftButton :
    INDENT
        pencil_start = getattr(self, "pencil_start")
        self.draw_pencil(pencil_start, event.pos())
        setattr(self, "pencil_start", event.pos())
    DEDENT
    else :
    INDENT
        super(ScribbleArea, self).mouseMoveEvent(event)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52475852_52476593_1_20
52475852_52476887_3_19
Title: obtaining substring from square bracket in a sentence 
----------------------------------------

def find_tags(text) :
INDENT
    inside_tag = False
    tags = []
    t = []
    for c in text :
    INDENT
        if not inside_tag :
        INDENT
            inside_tag = c == "["
        DEDENT
        elif c ! = "]" :
        INDENT
            t.append(c)
        DEDENT
        else :
        INDENT
            tags.append(''.join(t))
            inside_tag = False
            t = []
        DEDENT
    DEDENT
    if t :
    INDENT
        tags.append(''.join(t))
    DEDENT
    return list(enumerate(tags, start = 1))

DEDENT
----------------------------------------

def find_tags(string1) :
INDENT
    start = False
    data = ''
    data_list = []
    for i in string1 :
    INDENT
        if i == '[' :
        INDENT
            start = True
        DEDENT
        if i ! = ']' and start == True :
        INDENT
            if i ! = '[' :
            INDENT
                data += i
            DEDENT
        DEDENT
        else :
        INDENT
            if data ! = '' :
            INDENT
                data_list.append(data)
            DEDENT
            data = ''
            start = False
        DEDENT
    DEDENT
    return (data_list)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52479442_52492689_23_41
52479442_52492689_71_92
Title: "Running a long Python calculation in a thread with logging to a Qt window crashes after a short while" 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super().__init__(parent)

    self.logger = logging.getLogger("Worker")

    self.logHandler = ThreadLogger()
    self.logHandler.setFormatter(
        logging.Formatter('%(asctime)s - %(levelname)s - %(threadName)s - %(message)s'))
    self.logger.addHandler(self.logHandler)

    self.logger.setLevel(logging.DEBUG)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super().__init__(parent)

    self.logTextBox = QtWidgets.QPlainTextEdit(self)
    self.logTextBox.setReadOnly(True)
    self.resize(400, 500)

    self.startButton = QtWidgets.QPushButton(self)
    self.startButton.setText('Start')

    self.startButton.clicked.connect(self.start)

    layout = QtWidgets.QVBoxLayout()
    layout.addWidget(self.logTextBox)
    layout.addWidget(self.startButton)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52480066_52480446_4_45
52480066_52480557_20_29
Title: How do I Iterate over my JSON data questions once a correct answer is given? 
----------------------------------------

def game_questions() :
INDENT
    req = request.form.to_dict()
    user_answer = req.get('answer')
    with open("data/company.json", "r") as json_data :
    INDENT
        data = json.load(json_data)
    DEDENT
    questions = [
        {
            "name" : "riddle_0",
            "description" : "The more you take, the more you leave behind, what am i?",
            "answer" : "footsteps"},
        {
            "name" : "riddle_1",
            "description" : "what has a head, a tail, is brown but has no legs?",
            "answer" : "penny"},
        {
            "name" : "riddle_2",
            "description" : "what has many keys, but can't even open a single door?",
            "answer" : "piano"}]
    new_question = None
    for i, question in enumerate(questions) :
    INDENT
        if question ['answer'] == user_answer :
        INDENT
            try :
            INDENT
                new_question = questions [i + 1] ['description']
                question_index = int(questions [i + 1] ['name'].split('_') [1])
            DEDENT
            except IndexError :
            INDENT
                new_question = 'No more questions left'
                question_index = None
            DEDENT
            break
        DEDENT
    DEDENT
    context = {'question' : new_question, 'riddle_index' : question_index}
    return render_template("game.html", page_title = "riddle_me_this",
        company_data = data, context = context)
DEDENT
----------------------------------------

def game_questions() :
INDENT
    if request.method == 'GET' :
    INDENT
        riddle_index = 0
    DEDENT
    else :
    INDENT
        riddle_index = int(request.form ['riddle_id'])
        if riddles [riddle_index] ['answer'] == request.form ['answer'] :
        INDENT
            riddle_index += 1
            if riddle_index > = len(riddles) :
            INDENT
                riddle_index = 0
            DEDENT
        DEDENT
    DEDENT
    return render_template_string(TEMPLATE_STRING, riddle_index = riddle_index, riddle = riddles [riddle_index])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52486823_52489234_6_16
52486823_52489556_5_19
Title: Custom QSizeGrip to resize a QListWidget 
----------------------------------------

def __init__(self) :
INDENT
    super(Dialog, self).__init__()
    layout = QtGui.QVBoxLayout(self)
    splitter = QtGui.QSplitter(QtCore.Qt.Vertical)
    layout.addWidget(splitter)
    list_widget = QtGui.QListWidget()
    splitter.addWidget(list_widget)
    splitter.addWidget(QtGui.QLabel("Test"))

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(Dialog, self).__init__()
    layoutMain = QtGui.QVBoxLayout(self)
    listWidget = QtGui.QListWidget(self)
    gripper = QtGui.QSizeGrip(listWidget)
    l = QtGui.QHBoxLayout(listWidget)
    l.setContentsMargins(0, 0, 0, 0)
    l.addWidget(gripper, 0, QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)
    layoutMain.addWidget(listWidget)
    layoutMain.addWidget(QtGui.QLabel("Test", self))
    self.setGeometry(200, 500, 200, 500)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52486823_52489234_6_16
52486823_52504543_5_18
Title: Custom QSizeGrip to resize a QListWidget 
----------------------------------------

def __init__(self) :
INDENT
    super(Dialog, self).__init__()
    layout = QtGui.QVBoxLayout(self)
    splitter = QtGui.QSplitter(QtCore.Qt.Vertical)
    layout.addWidget(splitter)
    list_widget = QtGui.QListWidget()
    splitter.addWidget(list_widget)
    splitter.addWidget(QtGui.QLabel("Test"))

DEDENT
----------------------------------------

def __init__(self, parent, move_widget) :
INDENT
    super(Grip, self).__init__(parent)
    self.move_widget = move_widget
    self.setText("+")
    self.min_height = 50
    self.mouse_start = None
    self.height_start = self.move_widget.height()
    self.resizing = False
    self.setMouseTracking(True)
    self.setCursor(QtCore.Q.SizeVerCursor)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52486823_52489556_5_19
52486823_52504543_51_61
Title: Custom QSizeGrip to resize a QListWidget 
----------------------------------------

def __init__(self) :
INDENT
    super(Dialog, self).__init__()
    layoutMain = QtGui.QVBoxLayout(self)
    listWidget = QtGui.QListWidget(self)
    gripper = QtGui.QSizeGrip(listWidget)
    l = QtGui.QHBoxLayout(listWidget)
    l.setContentsMargins(0, 0, 0, 0)
    l.addWidget(gripper, 0, QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)
    layoutMain.addWidget(listWidget)
    layoutMain.addWidget(QtGui.QLabel("Test", self))
    self.setGeometry(200, 500, 200, 500)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(Dialog, self).__init__()
    layout = QtGui.QVBoxLayout()
    self.setLayout(layout)
    list_widget = QtGui.QListWidget()
    layout.addWidget(list_widget)
    gripper = Grip(self, list_widget)
    layout.addWidget(QtGui.QLabel("Test"))
    self.setGeometry(200, 500, 200, 500)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52486823_52489556_5_19
52486823_52504543_5_18
Title: Custom QSizeGrip to resize a QListWidget 
----------------------------------------

def __init__(self) :
INDENT
    super(Dialog, self).__init__()
    layoutMain = QtGui.QVBoxLayout(self)
    listWidget = QtGui.QListWidget(self)
    gripper = QtGui.QSizeGrip(listWidget)
    l = QtGui.QHBoxLayout(listWidget)
    l.setContentsMargins(0, 0, 0, 0)
    l.addWidget(gripper, 0, QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)
    layoutMain.addWidget(listWidget)
    layoutMain.addWidget(QtGui.QLabel("Test", self))
    self.setGeometry(200, 500, 200, 500)
DEDENT
----------------------------------------

def __init__(self, parent, move_widget) :
INDENT
    super(Grip, self).__init__(parent)
    self.move_widget = move_widget
    self.setText("+")
    self.min_height = 50
    self.mouse_start = None
    self.height_start = self.move_widget.height()
    self.resizing = False
    self.setMouseTracking(True)
    self.setCursor(QtCore.Q.SizeVerCursor)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52486823_52504543_51_61
52486823_52504543_5_18
Title: Custom QSizeGrip to resize a QListWidget 
----------------------------------------

def __init__(self) :
INDENT
    super(Dialog, self).__init__()
    layout = QtGui.QVBoxLayout()
    self.setLayout(layout)
    list_widget = QtGui.QListWidget()
    layout.addWidget(list_widget)
    gripper = Grip(self, list_widget)
    layout.addWidget(QtGui.QLabel("Test"))
    self.setGeometry(200, 500, 200, 500)
DEDENT
----------------------------------------

def __init__(self, parent, move_widget) :
INDENT
    super(Grip, self).__init__(parent)
    self.move_widget = move_widget
    self.setText("+")
    self.min_height = 50
    self.mouse_start = None
    self.height_start = self.move_widget.height()
    self.resizing = False
    self.setMouseTracking(True)
    self.setCursor(QtCore.Q.SizeVerCursor)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5249348_5249438_1_10
5249348_5249645_2_10
Title: creating a reverse method for a python list from scratch 
----------------------------------------

def reverse(data_list) :
INDENT
    length = len(data_list)
    s = length
    new_list = [None] * length
    for item in data_list :
    INDENT
        s = s - 1
        new_list [s] = item
    DEDENT
    return new_list
DEDENT
----------------------------------------

def reverse(orig_list) :
INDENT
    data_list = orig_list [:]
    length = len(data_list)
    for i in xrange(0, length / 2) :
    INDENT
        tmp = data_list [length - i - 1]
        data_list [length - i - 1] = data_list [i]
        data_list [i] = tmp
    DEDENT
    return data_list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52503082_52503274_1_13
52503082_52504109_1_20
Title: "more elegant way to do this? python multiples of 2 3 or 4" 
----------------------------------------

def fizz_buzz_bang(i) :
INDENT
    fizz = not i % 2
    buzz = not i % 3
    bang = not i % 4
    if fizz :
    INDENT
        if buzz :
        INDENT
            if bang :
            INDENT
                return 'FizzBuzzBang'
            DEDENT
            return 'FizzBuzz'
        DEDENT
        return 'Fizz' if not bang else 'Bang'
    DEDENT
    if buzz :
    INDENT
        return 'Buzz'
    DEDENT
    return i
DEDENT
----------------------------------------

def fizz_buzz_bang(i) :
INDENT
    x = "Fizz"
    y = "Buzz"
    z = "Bang"
    x1 = 2 if i % 2 == 0 else 1
    y1 = 3 if i % 3 == 0 else 1
    z1 = 4 if i % 4 == 0 else 1
    a = x1 * y1 * z1
    return {
        2 : x,
        3 : y,
        4 : z,
        6 : x + y,
        8 : x + z,
        12 : y + z,
        24 : x + y + z}.get(a, i)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52503082_52503274_1_13
52503082_52504228_1_15
Title: "more elegant way to do this? python multiples of 2 3 or 4" 
----------------------------------------

def fizz_buzz_bang(i) :
INDENT
    fizz = not i % 2
    buzz = not i % 3
    bang = not i % 4
    if fizz :
    INDENT
        if buzz :
        INDENT
            if bang :
            INDENT
                return 'FizzBuzzBang'
            DEDENT
            return 'FizzBuzz'
        DEDENT
        return 'Fizz' if not bang else 'Bang'
    DEDENT
    if buzz :
    INDENT
        return 'Buzz'
    DEDENT
    return i
DEDENT
----------------------------------------

def fizz_buzz_bang(i, a, b, c) :
INDENT
    x = 'Fizz'
    y = 'Buzz'
    z = 'Bang'
    if not i % b * c :
    INDENT
        return x + y + z
    DEDENT
    elif not i % a * b :
    INDENT
        return x + y
    DEDENT
    elif not i % c :
    INDENT
        return z
    DEDENT
    elif not i % b :
    INDENT
        return y
    DEDENT
    elif not i % a :
    INDENT
        return x
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52503082_52504109_1_20
52503082_52504228_1_15
Title: "more elegant way to do this? python multiples of 2 3 or 4" 
----------------------------------------

def fizz_buzz_bang(i) :
INDENT
    x = "Fizz"
    y = "Buzz"
    z = "Bang"
    x1 = 2 if i % 2 == 0 else 1
    y1 = 3 if i % 3 == 0 else 1
    z1 = 4 if i % 4 == 0 else 1
    a = x1 * y1 * z1
    return {
        2 : x,
        3 : y,
        4 : z,
        6 : x + y,
        8 : x + z,
        12 : y + z,
        24 : x + y + z}.get(a, i)
DEDENT
----------------------------------------

def fizz_buzz_bang(i, a, b, c) :
INDENT
    x = 'Fizz'
    y = 'Buzz'
    z = 'Bang'
    if not i % b * c :
    INDENT
        return x + y + z
    DEDENT
    elif not i % a * b :
    INDENT
        return x + y
    DEDENT
    elif not i % c :
    INDENT
        return z
    DEDENT
    elif not i % b :
    INDENT
        return y
    DEDENT
    elif not i % a :
    INDENT
        return x
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52503695_52505893_2_17
52503695_52506059_2_10
Title: RuntimeError: expected stride to be a single integer value 
----------------------------------------

def __init__(self) :
INDENT
    super(PR, self).__init__()
    self.conv1 = nn.Conv2d(3, 6, kernel_size = 5)
    self.conv2 = nn.Conv2d(6, 1, kernel_size = 2)

    self.dens1 = nn.Linear(529, 256)
    self.dens2 = nn.Linear(256, 256)

    self.dens3 = nn.Linear(256, 24)
    self.drop = nn.Dropout()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(PR, self).__init__()
    self.conv1 = torch.nn.Conv2d(3, 6, kernel_size = 5)
    self.conv2 = torch.nn.Conv2d(6, 1, kernel_size = 2)
    self.dens1 = torch.nn.Linear(529, 256)
    self.dens2 = torch.nn.Linear(256, 256)
    self.dens3 = torch.nn.Linear(256, 24)
    self.drop = torch.nn.Dropout()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507438_52507635_133_227
52507438_52507635_20_54
Title: QGridlayout and QGroupbox alignment 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.topone = QtWidgets.QComboBox()
    self.topone.addItems(["One", "Two", "Three", "four"])
    self.longitudinalone = QtWidgets.QComboBox()
    self.longitudinalone.addItems(["One", "Two", "Three", "four"])
    self.bottomone = QtWidgets.QComboBox()
    self.bottomone.addItems(["One", "Two", "Three", "four"])
    self.stirrupone = QtWidgets.QComboBox()
    self.stirrupone.addItems(["One", "Two", "Three", "four"])
    self.toprebar = QtWidgets.QComboBox()
    self.toprebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.longitudinalrebar = QtWidgets.QComboBox()
    self.longitudinalrebar.addItems(["1", "2", "3", "4", "5", "6",
            "7", "8", "9"])
    self.bottomrebar = QtWidgets.QComboBox()
    self.bottomrebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.stirruprebar = QtWidgets.QComboBox()
    self.stirruprebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.rebarbox = QtWidgets.QVBoxLayout()
    self.topvoid = QtWidgets.QLabel(" ")
    self.top = QtWidgets.QLabel("One: ")
    self.longitudinal = QtWidgets.QLabel("Two: ")
    self.bottom = QtWidgets.QLabel("Three: ")
    self.stirrup = QtWidgets.QLabel("Four: ")
    self.rebarbox.addWidget(self.topvoid)
    self.rebarbox.addWidget(self.top)
    self.rebarbox.addWidget(self.longitudinal)
    self.rebarbox.addWidget(self.bottom)
    self.rebarbox.addWidget(self.stirrup)
    self.typebox = QtWidgets.QVBoxLayout()
    self.type = QtWidgets.QLabel("Type   ")
    self.typebox.addWidget(self.type, alignment = QtCore.Qt.AlignCenter)
    self.typebox.addWidget(self.topone)
    self.typebox.addWidget(self.longitudinalone)
    self.typebox.addWidget(self.bottomone)
    self.typebox.addWidget(self.stirrupone)
    self.Reinforcebox = QtWidgets.QVBoxLayout()
    self.Reinforcement = QtWidgets.QLabel("One, One")
    self.Reinforcebox.addWidget(self.Reinforcement)
    self.Reinforcebox.addWidget(self.toprebar)
    self.Reinforcebox.addWidget(self.longitudinalrebar)
    self.Reinforcebox.addWidget(self.bottomrebar)
    self.Reinforcebox.addWidget(self.stirruprebar)
    self.designstrengthbox = QtWidgets.QVBoxLayout()
    self.designsteelstrength = QtWidgets.QLabel("Four")
    self.topsteelstrength = QtWidgets.QLabel()
    self.longsteelstrength = QtWidgets.QLabel()
    self.bottompsteelstrength = QtWidgets.QLabel()
    self.stirrupsteelstrength = QtWidgets.QLabel()
    self.designstrengthbox.addWidget(self.designsteelstrength)
    self.designstrengthbox.addWidget(self.topsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.longsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.bottompsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.stirrupsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.sbox = QtWidgets.QVBoxLayout()
    self.anytext = QtWidgets.QLabel("Any text")
    self.value = QtWidgets.QLabel("Any")
    self.value1 = QtWidgets.QLabel("Any")
    self.value2 = QtWidgets.QLabel("Any")
    self.value3 = QtWidgets.QLabel("Any")
    self.sbox.addWidget(self.anytext)
    self.sbox.addWidget(self.value)
    self.sbox.addWidget(self.value1)
    self.sbox.addWidget(self.value2)
    self.sbox.addWidget(self.value3)
    self.hlay = QtWidgets.QHBoxLayout()
    self.hlay.addStretch()
    self.hlay.addLayout(self.rebarbox)
    self.hlay.addLayout(self.typebox)
    self.hlay.addLayout(self.Reinforcebox)
    self.hlay.addLayout(self.designstrengthbox)
    self.hlay.addLayout(self.sbox)
    self.hlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupC")
    Concrete_Group.setLayout(self.hlay)
    self.rebarstrength = ["1", "2", "3", "4"]
    self.topone.activated.connect(self.setdatatopstrength)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)

    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.comth = ["10", "12", "14", "16"]
    self.combo.activated.connect(self.setdatastrength)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507438_52507635_133_227
52507438_52507635_6_18
Title: QGridlayout and QGroupbox alignment 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.topone = QtWidgets.QComboBox()
    self.topone.addItems(["One", "Two", "Three", "four"])
    self.longitudinalone = QtWidgets.QComboBox()
    self.longitudinalone.addItems(["One", "Two", "Three", "four"])
    self.bottomone = QtWidgets.QComboBox()
    self.bottomone.addItems(["One", "Two", "Three", "four"])
    self.stirrupone = QtWidgets.QComboBox()
    self.stirrupone.addItems(["One", "Two", "Three", "four"])
    self.toprebar = QtWidgets.QComboBox()
    self.toprebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.longitudinalrebar = QtWidgets.QComboBox()
    self.longitudinalrebar.addItems(["1", "2", "3", "4", "5", "6",
            "7", "8", "9"])
    self.bottomrebar = QtWidgets.QComboBox()
    self.bottomrebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.stirruprebar = QtWidgets.QComboBox()
    self.stirruprebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.rebarbox = QtWidgets.QVBoxLayout()
    self.topvoid = QtWidgets.QLabel(" ")
    self.top = QtWidgets.QLabel("One: ")
    self.longitudinal = QtWidgets.QLabel("Two: ")
    self.bottom = QtWidgets.QLabel("Three: ")
    self.stirrup = QtWidgets.QLabel("Four: ")
    self.rebarbox.addWidget(self.topvoid)
    self.rebarbox.addWidget(self.top)
    self.rebarbox.addWidget(self.longitudinal)
    self.rebarbox.addWidget(self.bottom)
    self.rebarbox.addWidget(self.stirrup)
    self.typebox = QtWidgets.QVBoxLayout()
    self.type = QtWidgets.QLabel("Type   ")
    self.typebox.addWidget(self.type, alignment = QtCore.Qt.AlignCenter)
    self.typebox.addWidget(self.topone)
    self.typebox.addWidget(self.longitudinalone)
    self.typebox.addWidget(self.bottomone)
    self.typebox.addWidget(self.stirrupone)
    self.Reinforcebox = QtWidgets.QVBoxLayout()
    self.Reinforcement = QtWidgets.QLabel("One, One")
    self.Reinforcebox.addWidget(self.Reinforcement)
    self.Reinforcebox.addWidget(self.toprebar)
    self.Reinforcebox.addWidget(self.longitudinalrebar)
    self.Reinforcebox.addWidget(self.bottomrebar)
    self.Reinforcebox.addWidget(self.stirruprebar)
    self.designstrengthbox = QtWidgets.QVBoxLayout()
    self.designsteelstrength = QtWidgets.QLabel("Four")
    self.topsteelstrength = QtWidgets.QLabel()
    self.longsteelstrength = QtWidgets.QLabel()
    self.bottompsteelstrength = QtWidgets.QLabel()
    self.stirrupsteelstrength = QtWidgets.QLabel()
    self.designstrengthbox.addWidget(self.designsteelstrength)
    self.designstrengthbox.addWidget(self.topsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.longsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.bottompsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.stirrupsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.sbox = QtWidgets.QVBoxLayout()
    self.anytext = QtWidgets.QLabel("Any text")
    self.value = QtWidgets.QLabel("Any")
    self.value1 = QtWidgets.QLabel("Any")
    self.value2 = QtWidgets.QLabel("Any")
    self.value3 = QtWidgets.QLabel("Any")
    self.sbox.addWidget(self.anytext)
    self.sbox.addWidget(self.value)
    self.sbox.addWidget(self.value1)
    self.sbox.addWidget(self.value2)
    self.sbox.addWidget(self.value3)
    self.hlay = QtWidgets.QHBoxLayout()
    self.hlay.addStretch()
    self.hlay.addLayout(self.rebarbox)
    self.hlay.addLayout(self.typebox)
    self.hlay.addLayout(self.Reinforcebox)
    self.hlay.addLayout(self.designstrengthbox)
    self.hlay.addLayout(self.sbox)
    self.hlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupC")
    Concrete_Group.setLayout(self.hlay)
    self.rebarstrength = ["1", "2", "3", "4"]
    self.topone.activated.connect(self.setdatatopstrength)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassWidget, self).__init__(parent)
    self.setGeometry(QtCore.QRect(200, 100, 670, 360))
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    grid = QtWidgets.QGridLayout(self)
    grid.addWidget(self.A, 0, 0)
    grid.addWidget(self.B, 0, 1, 1, 2)
    grid.addWidget(self.C, 1, 0, 1, 2)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507438_52507635_133_227
52507438_52507635_73_131
Title: QGridlayout and QGroupbox alignment 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.topone = QtWidgets.QComboBox()
    self.topone.addItems(["One", "Two", "Three", "four"])
    self.longitudinalone = QtWidgets.QComboBox()
    self.longitudinalone.addItems(["One", "Two", "Three", "four"])
    self.bottomone = QtWidgets.QComboBox()
    self.bottomone.addItems(["One", "Two", "Three", "four"])
    self.stirrupone = QtWidgets.QComboBox()
    self.stirrupone.addItems(["One", "Two", "Three", "four"])
    self.toprebar = QtWidgets.QComboBox()
    self.toprebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.longitudinalrebar = QtWidgets.QComboBox()
    self.longitudinalrebar.addItems(["1", "2", "3", "4", "5", "6",
            "7", "8", "9"])
    self.bottomrebar = QtWidgets.QComboBox()
    self.bottomrebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.stirruprebar = QtWidgets.QComboBox()
    self.stirruprebar.addItems(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    self.rebarbox = QtWidgets.QVBoxLayout()
    self.topvoid = QtWidgets.QLabel(" ")
    self.top = QtWidgets.QLabel("One: ")
    self.longitudinal = QtWidgets.QLabel("Two: ")
    self.bottom = QtWidgets.QLabel("Three: ")
    self.stirrup = QtWidgets.QLabel("Four: ")
    self.rebarbox.addWidget(self.topvoid)
    self.rebarbox.addWidget(self.top)
    self.rebarbox.addWidget(self.longitudinal)
    self.rebarbox.addWidget(self.bottom)
    self.rebarbox.addWidget(self.stirrup)
    self.typebox = QtWidgets.QVBoxLayout()
    self.type = QtWidgets.QLabel("Type   ")
    self.typebox.addWidget(self.type, alignment = QtCore.Qt.AlignCenter)
    self.typebox.addWidget(self.topone)
    self.typebox.addWidget(self.longitudinalone)
    self.typebox.addWidget(self.bottomone)
    self.typebox.addWidget(self.stirrupone)
    self.Reinforcebox = QtWidgets.QVBoxLayout()
    self.Reinforcement = QtWidgets.QLabel("One, One")
    self.Reinforcebox.addWidget(self.Reinforcement)
    self.Reinforcebox.addWidget(self.toprebar)
    self.Reinforcebox.addWidget(self.longitudinalrebar)
    self.Reinforcebox.addWidget(self.bottomrebar)
    self.Reinforcebox.addWidget(self.stirruprebar)
    self.designstrengthbox = QtWidgets.QVBoxLayout()
    self.designsteelstrength = QtWidgets.QLabel("Four")
    self.topsteelstrength = QtWidgets.QLabel()
    self.longsteelstrength = QtWidgets.QLabel()
    self.bottompsteelstrength = QtWidgets.QLabel()
    self.stirrupsteelstrength = QtWidgets.QLabel()
    self.designstrengthbox.addWidget(self.designsteelstrength)
    self.designstrengthbox.addWidget(self.topsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.longsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.bottompsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.designstrengthbox.addWidget(self.stirrupsteelstrength, alignment = QtCore.Qt.AlignCenter)
    self.sbox = QtWidgets.QVBoxLayout()
    self.anytext = QtWidgets.QLabel("Any text")
    self.value = QtWidgets.QLabel("Any")
    self.value1 = QtWidgets.QLabel("Any")
    self.value2 = QtWidgets.QLabel("Any")
    self.value3 = QtWidgets.QLabel("Any")
    self.sbox.addWidget(self.anytext)
    self.sbox.addWidget(self.value)
    self.sbox.addWidget(self.value1)
    self.sbox.addWidget(self.value2)
    self.sbox.addWidget(self.value3)
    self.hlay = QtWidgets.QHBoxLayout()
    self.hlay.addStretch()
    self.hlay.addLayout(self.rebarbox)
    self.hlay.addLayout(self.typebox)
    self.hlay.addLayout(self.Reinforcebox)
    self.hlay.addLayout(self.designstrengthbox)
    self.hlay.addLayout(self.sbox)
    self.hlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupC")
    Concrete_Group.setLayout(self.hlay)
    self.rebarstrength = ["1", "2", "3", "4"]
    self.topone.activated.connect(self.setdatatopstrength)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)

    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507438_52507635_20_54
52507438_52507635_6_18
Title: QGridlayout and QGroupbox alignment 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)

    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.comth = ["10", "12", "14", "16"]
    self.combo.activated.connect(self.setdatastrength)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassWidget, self).__init__(parent)
    self.setGeometry(QtCore.QRect(200, 100, 670, 360))
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    grid = QtWidgets.QGridLayout(self)
    grid.addWidget(self.A, 0, 0)
    grid.addWidget(self.B, 0, 1, 1, 2)
    grid.addWidget(self.C, 1, 0, 1, 2)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507438_52507635_20_54
52507438_52507635_73_131
Title: QGridlayout and QGroupbox alignment 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)

    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.comth = ["10", "12", "14", "16"]
    self.combo.activated.connect(self.setdatastrength)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)

    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507438_52507635_6_18
52507438_52507635_73_131
Title: QGridlayout and QGroupbox alignment 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassWidget, self).__init__(parent)
    self.setGeometry(QtCore.QRect(200, 100, 670, 360))
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    grid = QtWidgets.QGridLayout(self)
    grid.addWidget(self.A, 0, 0)
    grid.addWidget(self.B, 0, 1, 1, 2)
    grid.addWidget(self.C, 1, 0, 1, 2)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)

    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507695_52508165_25_30
52507695_52581907_55_60
Title: Moving multiple Widgets in Kivy independently 
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    Widget.__init__(self, ** kwargs)
    for i in range(7) :
    INDENT
        cw = CircleWidget()
        self.add_widget(cw)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(RootWidget, self).__init__(** kwargs)
    for i in range(8) :
    INDENT
        self.add_widget(CircleWidget(pos = (randint(0, Window.width - 50), randint(0, Window.height - 50))))

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507695_52508165_25_30
52507695_52581907_9_16
Title: Moving multiple Widgets in Kivy independently 
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    Widget.__init__(self, ** kwargs)
    for i in range(7) :
    INDENT
        cw = CircleWidget()
        self.add_widget(cw)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(CircleWidget, self).__init__(** kwargs)
    self.size = (50, 50)
    with self.canvas :
    INDENT
        Color(0, 0, 1, 0.5)
        self.circle = Ellipse(pos = self.pos, size = self.size)
    DEDENT
    self.bind(pos = self.redraw, size = self.redraw)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52507695_52581907_55_60
52507695_52581907_9_16
Title: Moving multiple Widgets in Kivy independently 
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(RootWidget, self).__init__(** kwargs)
    for i in range(8) :
    INDENT
        self.add_widget(CircleWidget(pos = (randint(0, Window.width - 50), randint(0, Window.height - 50))))

    DEDENT
DEDENT
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(CircleWidget, self).__init__(** kwargs)
    self.size = (50, 50)
    with self.canvas :
    INDENT
        Color(0, 0, 1, 0.5)
        self.circle = Ellipse(pos = self.pos, size = self.size)
    DEDENT
    self.bind(pos = self.redraw, size = self.redraw)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52520457_52520767_1_15
52520457_52521102_1_21
Title: "Python how to not require an additional space at the end of the list?" 
----------------------------------------

def compress(string) :
INDENT
    output = ""
    counter = 0
    string = string + '|'
    for element in range(0, len(string)) :
    INDENT
        if string [element] == string [element - 1] :
        INDENT

            counter = counter + 1
        DEDENT
        elif element ! = len(string) :
        INDENT
            output = output + string [element - 1] + str(counter)
            counter = 1
        DEDENT
    DEDENT
    return output [2 :]
DEDENT
----------------------------------------

def compress(string) :
INDENT
    output = ""
    counter = 0
    firstLoop = True
    for i in range(len(string)) :
    INDENT
        if firstLoop :
        INDENT
            counter += 1
            output += string [i]
        DEDENT
        else :
        INDENT
            if string [i] == string [i - 1] :
            INDENT
                counter += 1
            DEDENT
            else :
            INDENT
                output += str(counter) + string [i]
                counter = 1
            DEDENT
        DEDENT
        firstLoop = False
    DEDENT
    else :
    INDENT
        output += str(counter)
    DEDENT
    return output
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52526022_52551870_14_28
52526022_52551870_43_55
Title: How do I stop a thread when its done working and restart it when a button is pressed? 
----------------------------------------

def run(self) :
INDENT
    '''
        This is what runs on a separate thread when you click the download button
        '''
    x = 0
    while self.stop_download == 0 :
    INDENT
        time.sleep(0.5)
        x += 1
        if x > 20 :
        INDENT
            self.stop_download = 1
        DEDENT
        print ("Downloading App", x)
    DEDENT
    print ("Download finished")
    self.parent.worker = None
DEDENT
----------------------------------------

def run(self) :
INDENT
    '''
        This is what runs on a separate thread when you click the Start App button.
        '''
    x = 0
    while self.stop_app_thread == 0 :
    INDENT
        print ("Game in progress", str(x))
        time.sleep(0.5)
        x += 1
    DEDENT
    print ("Game finished")
    self.parent.worker = None
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52545744_52555743_3_11
52545744_52555945_4_10
Title: Output ends in none when delaying text 
----------------------------------------

def de(string) :
INDENT
    for c in string :
    INDENT
        print(c, end = '')
        sys.stdout.flush()
        sleep(0.1)

    DEDENT
DEDENT
----------------------------------------

def de(string, end = '\n') :
INDENT
    for c in string :
    INDENT
        print(c, end = '')
        sys.stdout.flush()
        sleep(0.1)
    DEDENT
    print(end, end = '')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52546154_52546437_1_23
52546154_52561180_1_12
Title: Code takes a lot of time to run for large numbers 
----------------------------------------

def dims(num_sqrs) :
INDENT
    dim_list = []
    sum_squares = [0]
    sums = [0]
    for i in range(1, num_sqrs + 1) :
    INDENT
        sums.append(sums [- 1] + i)
        sum_squares.append(sum_squares [- 1] + i * i)
    DEDENT
    for i in range(1, num_sqrs + 1) :
    INDENT
        if sum_squares [i] > num_sqrs :
        INDENT
            break
        DEDENT
        if sum_squares [i] == num_sqrs :
        INDENT
            dim_list.append((i, i))
            break
        DEDENT
        for x in range(i + 1, num_sqrs + 1) :
        INDENT
            total_squares = sum_squares [i] + sums [i] * (x - i)
            if total_squares == num_sqrs :
            INDENT
                dim_list.append((x, i))
                dim_list.append((i, x))
                break
            DEDENT
            if total_squares > num_sqrs :
            INDENT
                break
            DEDENT
        DEDENT
    DEDENT
    return dim_list
DEDENT
----------------------------------------

def dims(num_sqrs) :
INDENT
    dim = [(1, num_sqrs)]
    limit = ceil((3 * num_sqrs) ** (1.0 / 3.0))
    for n in range(2, limit) :
    INDENT
        numer = 6 * num_sqrs - n * (n + 1) * (2 * n + 1)
        denom = 3 * n * (n + 1)
        if numer % denom == 0 :
        INDENT
            t = numer / / denom
            if t > = 0 :
            INDENT
                dim.append((n, n + t))
            DEDENT
        DEDENT
    DEDENT
    return dim
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52546295_52552285_10_16
52546295_52552285_23_28
Title: "Python multiprocessing share data between process using an object" 
----------------------------------------

def run(self) :
INDENT
    cont = 0
    while True :
    INDENT
        cont += 1
        self.memory.value = cont
        time.sleep(self.val)
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        self.datum = self.memory.value
        print (self.datum)
        time.sleep(self.val)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52553011_52557622_43_66
52553011_52557622_79_100
Title: How to implement a timeout/cooldown after collision 
----------------------------------------

def update(self, dt) :
INDENT
    if self.boost > 0 :
    INDENT
        self.boost -= dt
    DEDENT
    if self.boost < 0 :
    INDENT
        self.boost = 0

    DEDENT
    keys = pygame.key.get_pressed()
    if keys [pygame.K_LEFT] :
    INDENT
        self.angle += 5
        self.vel.rotate_ip(- 5)
    DEDENT
    elif keys [pygame.K_RIGHT] :
    INDENT
        self.angle -= 5
        self.vel.rotate_ip(5)
    DEDENT
    self.update_image(self.rect.center)

    self.rect.move_ip(self.vel * (2 if self.boost else 1))

    self.rect.clamp_ip(pygame.display.get_surface().get_rect())
DEDENT
----------------------------------------

def update(self, dt) :
INDENT
    disabled = self.timeout > 0
    if disabled :
    INDENT
        self.timeout -= dt
        self.image.fill(pygame.color.Color('grey'))
        FONT.render_to(self.image, (10, 10), str((self.timeout / / 1000) + 1), pygame.color.Color('white'))
    DEDENT
    if self.timeout < 0 :
    INDENT
        self.timeout = 0
    DEDENT
    if disabled and self.timeout == 0 :
    INDENT

        self.image.fill(pygame.color.Color('yellow'))
    DEDENT
    if not disabled :
    INDENT
        for car in pygame.sprite.spritecollide(self, self.cars, False, pygame.sprite.collide_mask) :
        INDENT

            car.boost += 1000
            self.timeout = 3000
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52554841_1_19
52554702_52554881_3_17
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_roman) :
INDENT
    user_roman = user_roman.upper()
    resultI = 0
    while user_roman :
    INDENT
        if user_roman [: 2] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 2]]
            user_roman = user_roman [2 :]
        DEDENT
        elif user_roman [: 1] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 1]]
            user_roman = user_roman [1 :]
        DEDENT
        else :
        INDENT
            print ('No roman number')
            return
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        resultI = 0
        pos = 0
        try :
        INDENT
            resultI = roman_numerals [user_roman]
        DEDENT
        except :
        INDENT
            try :
            INDENT
                while pos < len(user_roman) :
                INDENT
                    resultI += roman_numerals [user_roman [pos]]
                    pos += 1
                DEDENT
            DEDENT
            except :
            INDENT
                print ('Not present in our dictionary')
            DEDENT
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52554841_1_19
52554702_52555308_3_13
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_roman) :
INDENT
    user_roman = user_roman.upper()
    resultI = 0
    while user_roman :
    INDENT
        if user_roman [: 2] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 2]]
            user_roman = user_roman [2 :]
        DEDENT
        elif user_roman [: 1] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 1]]
            user_roman = user_roman [1 :]
        DEDENT
        else :
        INDENT
            print ('No roman number')
            return
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        result = 0
        user_roman = input("What numeral would you like to convert?\n").upper()
        for k, v in roman_numerals.items() :
        INDENT
            result += v * user_roman.count(k)
            if len(k) == 2 :
            INDENT
                result -= roman_numerals [k [0]] * user_roman.count(k)
                result -= roman_numerals [k [1]] * user_roman.count(k)
            DEDENT
        DEDENT
    DEDENT
    print (result)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52554841_1_19
52554702_52555788_3_36
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_roman) :
INDENT
    user_roman = user_roman.upper()
    resultI = 0
    while user_roman :
    INDENT
        if user_roman [: 2] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 2]]
            user_roman = user_roman [2 :]
        DEDENT
        elif user_roman [: 1] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 1]]
            user_roman = user_roman [1 :]
        DEDENT
        else :
        INDENT
            print ('No roman number')
            return
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        result = 0
        values = []

        try :
        INDENT
            result = roman_numerals [user_roman]
        DEDENT
        except KeyError :
        INDENT
            for i in user_roman :
            INDENT
                try :
                INDENT
                    value = roman_numerals [i]
                    values.append(value)
                DEDENT
                except KeyError :
                INDENT
                    print ("Not valid input")
                DEDENT
            DEDENT
            for i, value in enumerate(values) :
            INDENT
                try :
                INDENT
                    if value > values [i + 1] :
                    INDENT
                        result += value
                    DEDENT
                    else :
                    INDENT
                        actual_value = values [i + 1] - value
                        result = result + actual_value
                        values [i + 1] = 0
                    DEDENT
                DEDENT
                except IndexError :
                INDENT
                    pass
                DEDENT
            DEDENT
        DEDENT
        print (result)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52554841_1_19
52554702_52557563_1_13
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_roman) :
INDENT
    user_roman = user_roman.upper()
    resultI = 0
    while user_roman :
    INDENT
        if user_roman [: 2] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 2]]
            user_roman = user_roman [2 :]
        DEDENT
        elif user_roman [: 1] in roman_numerals :
        INDENT
            resultI += roman_numerals [user_roman [: 1]]
            user_roman = user_roman [1 :]
        DEDENT
        else :
        INDENT
            print ('No roman number')
            return
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    ix = 0
    iy = 0
    result = 0
    while ix < len(user_choice) :
    INDENT
        while iy < len(roman_numerals) and not user_choice.startswith(roman_numerals [iy] [0], ix) :
        INDENT
            iy += 1
        DEDENT
        if iy < len(roman_numerals) :
        INDENT
            result += roman_numerals [iy] [1]
            ix += len(roman_numerals [iy] [0])
        DEDENT
        else :
        INDENT
            raise ValueError('Invalid Roman numeral')
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52554881_3_17
52554702_52555308_3_13
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        resultI = 0
        pos = 0
        try :
        INDENT
            resultI = roman_numerals [user_roman]
        DEDENT
        except :
        INDENT
            try :
            INDENT
                while pos < len(user_roman) :
                INDENT
                    resultI += roman_numerals [user_roman [pos]]
                    pos += 1
                DEDENT
            DEDENT
            except :
            INDENT
                print ('Not present in our dictionary')
            DEDENT
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        result = 0
        user_roman = input("What numeral would you like to convert?\n").upper()
        for k, v in roman_numerals.items() :
        INDENT
            result += v * user_roman.count(k)
            if len(k) == 2 :
            INDENT
                result -= roman_numerals [k [0]] * user_roman.count(k)
                result -= roman_numerals [k [1]] * user_roman.count(k)
            DEDENT
        DEDENT
    DEDENT
    print (result)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52554881_3_17
52554702_52555788_3_36
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        resultI = 0
        pos = 0
        try :
        INDENT
            resultI = roman_numerals [user_roman]
        DEDENT
        except :
        INDENT
            try :
            INDENT
                while pos < len(user_roman) :
                INDENT
                    resultI += roman_numerals [user_roman [pos]]
                    pos += 1
                DEDENT
            DEDENT
            except :
            INDENT
                print ('Not present in our dictionary')
            DEDENT
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        result = 0
        values = []

        try :
        INDENT
            result = roman_numerals [user_roman]
        DEDENT
        except KeyError :
        INDENT
            for i in user_roman :
            INDENT
                try :
                INDENT
                    value = roman_numerals [i]
                    values.append(value)
                DEDENT
                except KeyError :
                INDENT
                    print ("Not valid input")
                DEDENT
            DEDENT
            for i, value in enumerate(values) :
            INDENT
                try :
                INDENT
                    if value > values [i + 1] :
                    INDENT
                        result += value
                    DEDENT
                    else :
                    INDENT
                        actual_value = values [i + 1] - value
                        result = result + actual_value
                        values [i + 1] = 0
                    DEDENT
                DEDENT
                except IndexError :
                INDENT
                    pass
                DEDENT
            DEDENT
        DEDENT
        print (result)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52554881_3_17
52554702_52557563_1_13
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        resultI = 0
        pos = 0
        try :
        INDENT
            resultI = roman_numerals [user_roman]
        DEDENT
        except :
        INDENT
            try :
            INDENT
                while pos < len(user_roman) :
                INDENT
                    resultI += roman_numerals [user_roman [pos]]
                    pos += 1
                DEDENT
            DEDENT
            except :
            INDENT
                print ('Not present in our dictionary')
            DEDENT
        DEDENT
    DEDENT
    print (resultI)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    ix = 0
    iy = 0
    result = 0
    while ix < len(user_choice) :
    INDENT
        while iy < len(roman_numerals) and not user_choice.startswith(roman_numerals [iy] [0], ix) :
        INDENT
            iy += 1
        DEDENT
        if iy < len(roman_numerals) :
        INDENT
            result += roman_numerals [iy] [1]
            ix += len(roman_numerals [iy] [0])
        DEDENT
        else :
        INDENT
            raise ValueError('Invalid Roman numeral')
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52555308_3_13
52554702_52555788_3_36
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        result = 0
        user_roman = input("What numeral would you like to convert?\n").upper()
        for k, v in roman_numerals.items() :
        INDENT
            result += v * user_roman.count(k)
            if len(k) == 2 :
            INDENT
                result -= roman_numerals [k [0]] * user_roman.count(k)
                result -= roman_numerals [k [1]] * user_roman.count(k)
            DEDENT
        DEDENT
    DEDENT
    print (result)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        result = 0
        values = []

        try :
        INDENT
            result = roman_numerals [user_roman]
        DEDENT
        except KeyError :
        INDENT
            for i in user_roman :
            INDENT
                try :
                INDENT
                    value = roman_numerals [i]
                    values.append(value)
                DEDENT
                except KeyError :
                INDENT
                    print ("Not valid input")
                DEDENT
            DEDENT
            for i, value in enumerate(values) :
            INDENT
                try :
                INDENT
                    if value > values [i + 1] :
                    INDENT
                        result += value
                    DEDENT
                    else :
                    INDENT
                        actual_value = values [i + 1] - value
                        result = result + actual_value
                        values [i + 1] = 0
                    DEDENT
                DEDENT
                except IndexError :
                INDENT
                    pass
                DEDENT
            DEDENT
        DEDENT
        print (result)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52555308_3_13
52554702_52557563_1_13
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        result = 0
        user_roman = input("What numeral would you like to convert?\n").upper()
        for k, v in roman_numerals.items() :
        INDENT
            result += v * user_roman.count(k)
            if len(k) == 2 :
            INDENT
                result -= roman_numerals [k [0]] * user_roman.count(k)
                result -= roman_numerals [k [1]] * user_roman.count(k)
            DEDENT
        DEDENT
    DEDENT
    print (result)
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    ix = 0
    iy = 0
    result = 0
    while ix < len(user_choice) :
    INDENT
        while iy < len(roman_numerals) and not user_choice.startswith(roman_numerals [iy] [0], ix) :
        INDENT
            iy += 1
        DEDENT
        if iy < len(roman_numerals) :
        INDENT
            result += roman_numerals [iy] [1]
            ix += len(roman_numerals [iy] [0])
        DEDENT
        else :
        INDENT
            raise ValueError('Invalid Roman numeral')
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554702_52555788_3_36
52554702_52557563_1_13
Title: Roman Numerals to Integers Converter with Python using a dictionary 
----------------------------------------

def roman_int(user_choice) :
INDENT
    if user_choice == "1" :
    INDENT
        user_roman = input("What numeral would you like to convert?\n").upper()
        result = 0
        values = []

        try :
        INDENT
            result = roman_numerals [user_roman]
        DEDENT
        except KeyError :
        INDENT
            for i in user_roman :
            INDENT
                try :
                INDENT
                    value = roman_numerals [i]
                    values.append(value)
                DEDENT
                except KeyError :
                INDENT
                    print ("Not valid input")
                DEDENT
            DEDENT
            for i, value in enumerate(values) :
            INDENT
                try :
                INDENT
                    if value > values [i + 1] :
                    INDENT
                        result += value
                    DEDENT
                    else :
                    INDENT
                        actual_value = values [i + 1] - value
                        result = result + actual_value
                        values [i + 1] = 0
                    DEDENT
                DEDENT
                except IndexError :
                INDENT
                    pass
                DEDENT
            DEDENT
        DEDENT
        print (result)
    DEDENT
DEDENT
----------------------------------------

def roman_int(user_choice) :
INDENT
    ix = 0
    iy = 0
    result = 0
    while ix < len(user_choice) :
    INDENT
        while iy < len(roman_numerals) and not user_choice.startswith(roman_numerals [iy] [0], ix) :
        INDENT
            iy += 1
        DEDENT
        if iy < len(roman_numerals) :
        INDENT
            result += roman_numerals [iy] [1]
            ix += len(roman_numerals [iy] [0])
        DEDENT
        else :
        INDENT
            raise ValueError('Invalid Roman numeral')
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554877_52554991_1_10
52554877_52555149_15_21
Title: Python: how do I iterate only if value is a tuple/list and not a string 
----------------------------------------

def translate(self) :
INDENT
    result = {}
    for key, value in self._translateMap.items() :
    INDENT
        if isinstance(value, str) :
        INDENT
            result [value] = getattr(self, key)
        DEDENT
        else :
        INDENT
            for field in value :
            INDENT
                result [field] = getattr(self, key)
            DEDENT
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------

def translate(self) :
INDENT
    result = {}
    for key, value in self._translateMap.items() :
    INDENT
        result [key] = getattr(self, key)
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52554877_52555035_1_10
52554877_52555149_15_21
Title: Python: how do I iterate only if value is a tuple/list and not a string 
----------------------------------------

def translate(self) :
INDENT
    result = {}
    for key, value in self._translateMap.items() :
    INDENT
        if isinstance(value, str) :
        INDENT
            result [value] = getattr(self, key)
        DEDENT
        else :
        INDENT
            for field in value :
            INDENT
                result [field] = getattr(self, key)
            DEDENT
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------

def translate(self) :
INDENT
    result = {}
    for key, value in self._translateMap.items() :
    INDENT
        result [key] = getattr(self, key)
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52558060_52558458_25_40
52558060_52558562_32_50
Title: Merge Two Link List in Python 
----------------------------------------

def merge(lst1, lst2) :
INDENT
    rtn = LinkList()
    while lst1 and lst2 :
    INDENT
        if lst1.data < lst2.data :
        INDENT
            rtn.add(Node(lst1.data))
            lst1 = lst1.next
        DEDENT
        else :
        INDENT
            rtn.add(Node(lst2.data))
            lst2 = lst2.next
        DEDENT
    DEDENT
    if lst1 :
    INDENT
        rtn.add(lst1)
    DEDENT
    if lst2 :
    INDENT
        rtn.add(lst2)
    DEDENT
    return rtn

DEDENT
----------------------------------------

def merge(L1, L2) :
INDENT
    temp = None
    if L1 is None :
    INDENT
        return L2
    DEDENT
    if L2 is None :
    INDENT
        return L1
    DEDENT
    if L1.data > = L2.data :
    INDENT
        temp = L1
        temp.next_node = merge(L1.next_node, L2)
    DEDENT
    else :
    INDENT
        temp = L2
        temp.next_node = merge(L1, L2.next_node)
    DEDENT
    return temp

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52558060_52558458_41_53
52558060_52558562_51_73
Title: Merge Two Link List in Python 
----------------------------------------

def main() :
INDENT
    lst = LinkList()
    lst.add(Node(1))
    lst.add(Node(2))
    lst.add(Node(3))
    lst2 = LinkList()
    lst2.add(Node(1.1))
    lst2.add(Node(2.1))
    lst2.add(Node(3.1))
    rtn = merge(lst.head, lst2.head)
    print (rtn)
DEDENT
----------------------------------------

def main() :
INDENT
    list1 = LinkList()
    list1.add(10)
    list1.add(20)
    list1.add(30)
    print("list2: ", end = " ")
    list1.printlist()
    list2 = LinkList()
    list2.add(11)
    list2.add(21)
    list2.add(51)
    print("list2: ", end = " ")
    list2.printlist()
    list3 = LinkList()
    list3.head = merge(list1.head, list2.head)
    print("merge link list: ", end = " ")
    list3.printlist()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52562991_52563078_1_20
52562991_52563308_1_22
Title: Voting If/Else/Elif 
----------------------------------------

def main() :
INDENT
    messageOne = 'You are too young to vote.'
    messageTwo = 'You can vote.'
    messageThree = 'You need to register before you can vote.'

    age = int(input('Please enter your age: '))

    if age > = 18 :
    INDENT
        registration = input('Are you registered to vote(Y/N)?: ')
        if registration.upper() == "Y" :
        INDENT
            print (messageTwo)
        DEDENT
        else :
        INDENT
            print (messageThree)
        DEDENT
    DEDENT
    else :
    INDENT
        print (messageOne)
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    messageOne = 'You are too young to vote.'
    messageTwo = 'You can vote.'
    messageThree = 'You need to register before you can vote.'

    age = int(input('Please enter your age: '))

    if age < 18 :
    INDENT
        print (messageOne)
        return
    DEDENT
    registration = input('Are you registered to vote(Y/N)?: ')
    if registration.upper() == "Y" :
    INDENT
        print (messageTwo)
        return
    DEDENT
    print (messageThree)
    return
DEDENT
----------------------------------------

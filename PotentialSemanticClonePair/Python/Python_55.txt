$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51526677_51527827_36_52
51526677_51527827_78_94
Title: How to organize layout using PyQt 
----------------------------------------

def __init__(self, parent, * args, ** kwargs) :
INDENT
    super().__init__(parent, * args, ** kwargs)
    self.parent = parent
    layout = QtWidgets.QVBoxLayout(self)
    dynamic_canvas = FigureCanvas(Figure(figsize = (10, 10)))
    layout.addWidget(dynamic_canvas)
    self._dynamic_ax = dynamic_canvas.figure.subplots()
    dynamic_canvas.figure.canvas.mpl_connect('button_press_event', onclick)
    self._dynamic_ax.grid()
    self._timer = dynamic_canvas.new_timer(
        100, [(self._update_window, (), {})])
    self._timer.start()

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(ApplicationWindow, self).__init__()
    self._title = 'Prueba real-time'
    self.setWindowTitle(self._title)
    self._main = QtWidgets.QWidget()
    self.setCentralWidget(self._main)
    main_layout = QtWidgets.QHBoxLayout(self._main)
    self.plot_widget = PlotWidget(self)
    main_layout.addWidget(self.plot_widget)

    self.table_widget = TableWidget(self)
    main_layout.addWidget(self.table_widget)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51556820_51557029_6_16
51556820_51557047_6_19
Title: Python function that reads the file and write lines in tkinter 
----------------------------------------

def draw(filename) :
INDENT
    points = []
    with open(filename, "r") as infile :
    INDENT
        for line in infile :
        INDENT
            line = line.split()
            x, y = (int(line [0]), int(line [1]))
            points.append((x, y))
        DEDENT
    DEDENT
    for i in range(0, len(points) - 1) :
    INDENT
        canvas.create_line(points [i] [0], points [i] [1], points [i + 1] [0], points [i + 1] [1])
    DEDENT
DEDENT
----------------------------------------

def draw(file) :
INDENT
    x = None
    y = None
    with open(file, "r") as file :
    INDENT
        for line in file :
        INDENT
            print (line)
            if x is None :
            INDENT
                x, y = line.strip().split(' ')
            DEDENT
            else :
            INDENT
                x2, y2 = line.strip().split(' ')
                canvas.create_line(x, y, x2, y2)
                x = x2
                y = y2
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51557452_51557652_4_12
51557452_51557918_6_11
Title: Keys with same name with multiple Values in python 
----------------------------------------

def group_by_owners(files) :
INDENT
    d = {}
    for i in files :
    INDENT
        if files [i] in d :
        INDENT
            d [files [i]].append(i)
        DEDENT
        else :
        INDENT
            d [files [i]] = [i]
        DEDENT
    DEDENT
    return d
DEDENT
----------------------------------------

def group_by_owners(files) :
INDENT
    d = defaultdict(list)
    for k, v in files.items() :
    INDENT
        d [v].append(k)
    DEDENT
    return dict(d)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51591163_51595942_17_28
51591163_51610593_20_27
Title: Self Made Tkinter Popup Menu Python 
----------------------------------------

def open_popup(event) :
INDENT
    global f
    if f == None :
    INDENT
        f = Frame(root, width = 80, height = 60, background = 'green')
        f.place(x = event.x, y = event.y)
        b2 = Button(f, text = 'function', command = function1)
        b2.pack()
    DEDENT
    else :
    INDENT
        print ("Can't open popup menu")
    DEDENT
DEDENT
----------------------------------------

def open_popup(event) :
INDENT
    try :
    INDENT
        f.place(x = event.x, y = event.y)
        root.after(1)
        f.focus_set()
    DEDENT
    except :
    INDENT
        pass
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51591163_51595942_9_16
51591163_51610593_9_15
Title: Self Made Tkinter Popup Menu Python 
----------------------------------------

def function1() :
INDENT
    global f
    print ('function1 activated')
    if f ! = None :
    INDENT
        f.destroy()
        f = None
    DEDENT
DEDENT
----------------------------------------

def function1() :
INDENT
    print ('function1 activated')
    try :
    INDENT
        f.place_forget()
    DEDENT
    except :
    INDENT
        pass
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51617405_51618569_17_25
51617405_51618569_39_54
Title: tkinter - How to get entry data in variable 
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.config(background = 'black')
    tk.Label(self, text = 'Welcome to Worker Management App...', font = font32, fg = 'white', bg = 'black').grid(row = 1, column = 0, columnspan = 3)
    tk.Label(self, text = 'Choose a category:', font = font32, fg = 'white', bg = 'black').grid(row = 2, column = 0, columnspan = 3)
    tk.Button(self, text = '1. Individual', font = font28, fg = 'white', bg = 'black', command = self.gui_indi).grid(row = 3, column = 1, pady = 25)
    b2 = tk.Button(self, text = '2. Contractor', font = font28, fg = 'white', bg = 'black')
    b2.grid(row = 4, column = 1, pady = 25)
DEDENT
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Toplevel.__init__(self)
    self.config(background = 'black')
    for i in range(len(lbl_list)) :
    INDENT
        string_var_list.append(tk.StringVar())
        entry_list.append(tk.Entry(self, textvariable = string_var_list [i]))
    DEDENT
    for ndex, lbl_name in enumerate(lbl_list) :
    INDENT
        if lbl_name ! = "Go" :
        INDENT
            tk.Label(self, text = lbl_name, fg = 'white', bg = 'black').grid(row = ndex + 1, column = 0, sticky = "w", padx = 15)
            entry_list [ndex].grid(row = ndex + 1, column = 1, sticky = "w", padx = 15, pady = 10)
        DEDENT
        else :
        INDENT
            tk.Button(self, text = lbl_name, fg = 'white', bg = 'black', font = (14), command = self.master.savedata).grid(row = 21, column = 0, columnspan = 2, pady = 10)

        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51638082_51639653_6_22
51638082_51639660_6_21
Title: Python Tkinter - dragging mouse across disabled Textbox stops update() 
----------------------------------------

def __init__(self) :
INDENT
    tk.Tk.__init__(self)
    self.geometry("500x500")
    self.resizable(False, False)
    self.time_start = time.time()
    self.main_frame = tk.Frame(self)
    self.main_frame.grid(row = 0, column = 0, sticky = "news")
    self.main_text_box = tk.Text(self.main_frame)
    self.main_text_box.grid(row = 0, column = 0, sticky = "news")
    self.main_text_box.tag_configure("bold", font = "Helvetica 50")
    self.main_text_box.insert("end", "Example text", "bold")
    self.main_text_box.configure(state = "disabled")
    self.time_check()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.geometry("500x500")
    self.resizable(False, False)
    self.main_frame = Frame(self)
    self.main_frame.grid(row = 0, column = 0, sticky = "news")
    self.main_text_box = Text(self.main_frame)
    self.main_text_box.grid(row = 0, column = 0, sticky = "news")
    self.main_text_box.tag_configure("bold", font = "Helvetica 50")
    self.main_text_box.insert(END, "Example text", "bold")
    self.main_text_box.configure(state = DISABLED)
    self._update_me()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51640798_51642430_36_59
51640798_51642430_7_29
Title: Make Global Variable For All Forms In Python Pyqt 
----------------------------------------

def __init__(self, value, parent = None) :
INDENT
    super().__init__(parent)
    self.setWindowTitle('Form(QDialog)')
    self.setWindowIcon(self.style().standardIcon(QStyle.SP_FileDialogInfoView))
    label1 = QLabel(value)
    self.button = QPushButton()
    self.button.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Expanding)
    self.button.setIcon(self.style().standardIcon(QStyle.SP_ArrowLeft))
    self.button.setIconSize(QSize(200, 200))
    layoutV = QVBoxLayout()
    self.pushButton = QPushButton(self)
    self.pushButton.setStyleSheet('background-color: rgb(0,0,255); color: #fff')
    self.pushButton.setText('Click me!')
    self.pushButton.clicked.connect(self.B)
    layoutV.addWidget(self.pushButton)
    layoutH = QHBoxLayout()
    layoutH.addWidget(label1)
    layoutH.addWidget(self.button)
    layoutV.addLayout(layoutH)
    self.setLayout(layoutV)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    QMainWindow.__init__(self)
    self.setWindowIcon(self.style().standardIcon(QStyle.SP_TitleBarMenuButton))
    self.resize(300, 150)
    centerWidget = QWidget()
    layout = QVBoxLayout()
    self.setStyleSheet('background-color : rgb(255,255,255);')
    self.setWindowTitle('MainWindow')
    self.lineEdit = QLineEdit("Type here what you want to transfer for [qdialog].")
    self.pushButton = QPushButton(self)
    self.pushButton.setStyleSheet('background-color: rgb(255,0,0); color: #fff')
    self.pushButton.setText('Pass a value for [qdialog]')
    self.pushButton.clicked.connect(self.A)
    layout.addWidget(self.lineEdit)
    layout.addWidget(self.pushButton)
    centerWidget.setLayout(layout)
    self.setCentralWidget(centerWidget)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51641395_51641490_10_15
51641395_51642500_1_9
Title: Check which range a number is within 
----------------------------------------

def find_which_range(value, ranges) :
INDENT
    for i, range in enumerate(sorted(ranges)) :
    INDENT
        if value < range :
        INDENT
            return i
        DEDENT
    DEDENT
    return None
DEDENT
----------------------------------------

def find_which_range(value, ranges) :
INDENT
    if value < = min(ranges) :
    INDENT
        c = 0
    DEDENT
    elif value > = max(ranges) :
    INDENT
        c = len(ranges)
    DEDENT
    else :
    INDENT
        c = [i + 1 for i in range(len(ranges) - 1) if ranges [i] < = value < = ranges [i + 1]] [0]
    DEDENT
    return c
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51653954_51656381_1_15
51653954_51656381_5_14
Title: How to add XML element without duplication using Python 
----------------------------------------

def indent(tree, indent_by = '  ') :
INDENT
    irrelevant = lambda s : s is None or s.lstrip('\r\n\t\v ') == ''
    indent_str = lambda i : '\n' + indent_by * i
    def indent(elem, level = 0, last_child = True) :
    INDENT
        if len(elem) and irrelevant(elem.text) :
        INDENT
            elem.text = indent_str(level + 1)
        DEDENT
        if irrelevant(elem.tail) :
        INDENT
            elem.tail = indent_str(level - (1 if last_child else 0))
        DEDENT
        for i, child in enumerate(elem, 1) :
        INDENT
            indent(child, level + 1, i == len(elem))
        DEDENT
    DEDENT
    indent(tree.getroot())
DEDENT
----------------------------------------

def indent(elem, level = 0, last_child = True) :
INDENT
    if len(elem) and irrelevant(elem.text) :
    INDENT
        elem.text = indent_str(level + 1)
    DEDENT
    if irrelevant(elem.tail) :
    INDENT
        elem.tail = indent_str(level - (1 if last_child else 0))
    DEDENT
    for i, child in enumerate(elem, 1) :
    INDENT
        indent(child, level + 1, i == len(elem))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5165415_5165960_15_22
5165415_5165960_6_13
Title: python argparse subcommand with dependency and conflict 
----------------------------------------

def __call__(self, parser, args, values, option_string = None) :
INDENT
    if getattr(args, 'from') is not None :
    INDENT
        parser.error('--from should not be used with --build')
    DEDENT
    if getattr(args, 'interval') is not None :
    INDENT
        parser.error('--interval should not be used with --build')
    DEDENT
    setattr(args, self.dest, values)
DEDENT
----------------------------------------

def __call__(self, parser, args, values, option_string = None) :
INDENT
    if args.build is not None :
    INDENT
        parser.error(
            '--build should not be used with --from or --interval')
    DEDENT
    setattr(args, self.dest, values)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51657680_51664950_26_69
51657680_51664950_7_24
Title: Tkinter not updating in Windows OS when scrolling too fast 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(InfoFrame, self).__init__(* args, ** kwargs)
    self.nb_frame = Frame(self, height = 300, width = 730)
    self.nb_frame.pack_propagate(False)
    self.nb = ttk.Notebook(self.nb_frame)
    self.nb.pressed_index = None
    filler = {}
    for x in range(0, 3) :
    INDENT
        for y in ('a', 'b', 'c', 'd', 'e', 'f', 'g') :
        INDENT
            filler.update({"out%d_%s" % (x, y) : "nada"})
        DEDENT
    DEDENT
    self.example_dict = {'A' : filler, 'B' : filler, 'C' : filler}
    print ("E_D:\n", self.example_dict)
    for page in sorted(self.example_dict) :
    INDENT
        print ("page:\t", page)
        entry_count = len(self.example_dict [page])
        new_page = Frame(self.nb)
        new_page.pack(fill = BOTH, expand = True)
        canvas = Canvas(new_page)
        scroll = Scrollbar(new_page, command = canvas.yview)
        canvas.config(yscrollcommand = scroll.set, scrollregion = (0, 120, 120, entry_count * 35))
        canvas.pack(side = LEFT, fill = BOTH, expand = True)
        scroll.pack(side = RIGHT, fill = Y)
        canvas_frame = Frame(canvas, bg = 'white', width = 50, height = 50)
        canvas.create_window(345, (entry_count + 12) * 13, window = canvas_frame)
        for row, value in enumerate(sorted(self.example_dict [page])) :
        INDENT
            print ("value:\t", value)
            writeable_entry = WriteableEntry(value, self.example_dict [page] [value], master = canvas_frame, row = row)

        DEDENT
        self.nb.add(new_page, text = "P" + page)
    DEDENT
    self.nb.pack(side = TOP, expand = True, fill = "both")
    self.nb_frame.pack(side = RIGHT, expand = True, fill = BOTH)

DEDENT
----------------------------------------

def __init__(self, name, value, * args, ** kwargs) :
INDENT
    master = kwargs ['master']
    row = kwargs ['row']
    self.label = name
    self.init_value = value
    self.written_value = ''
    self.field_name = Label(master, justify = "left", text = name, width = 25)
    self.field_value = Entry(master, justify = 'left', width = 60)
    self.field_value.insert(END, value)
    self.field_name.grid(row = row, column = 0)
    self.field_value.grid(row = row, column = 1)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51661327_51661752_40_50
51661327_51662011_47_56
Title: Add items to end of Linked List gives strange result 
----------------------------------------

def printNode(self) :
INDENT
    print ("\nPrinting the nodes")
    currentNode = self.head
    while currentNode.next ! = None :
    INDENT
        print(currentNode.data, " --> ", end = "")
        currentNode = currentNode.next
    DEDENT
    print(currentNode.data, " --> ", end = "")
    print (" NULL \n")
DEDENT
----------------------------------------

def printNode(self) :
INDENT
    print ("\nPrinting the nodes")
    currentNode = self.head
    while currentNode ! = None :
    INDENT
        print currentNode.data,
        print " --> ",
        currentNode = currentNode.next
    DEDENT
    print
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51668931_51669070_4_9
51668931_51669089_4_11
Title: Remove 'None' from output 
----------------------------------------

def detecteur_FR(message) :
INDENT
    for text in message.split('\n') :
    INDENT
        if detect(text) == 'fr' :
        INDENT
            return text
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def detecteur_FR(message) :
INDENT
    message_list = [comments for comments in message.split('\n')]
    for text in message_list :
    INDENT
        if detect(text) == 'fr' :
        INDENT
            message_FR = text
            print message_FR
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51678141_51679264_56_64
51678141_51679264_5_20
Title: Passing objects into tabs inside instance of class 
----------------------------------------

def __init__(self, master, names) :
INDENT
    super().__init__(master, width = 390, height = 470)

    self.tabs = {}
    for name in names :
    INDENT
        self.tabs [name] = tab = ttk.Frame(self)
        self.add(tab, text = name)
    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.title("SC")
    self.geometry('400x500')
    self.resizable(width = False, height = False)
    names = ['Title', 'Graphs', 'Messages', 'Instructions']
    self.nb = self.create_notebook(names)
    self.menu = self.create_menus()

    tab = self.nb.tabs ['Instructions']
    tk.Label(tab, text = 'You should\nread these\ninstructions').pack()
    self.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51684664_51684698_2_18
51684664_51684725_1_14
Title: "how to print next line of the match string in python3 (If i give Tea  it should print next line too)" 
----------------------------------------

def main() :
INDENT
    infile = open('coffee.txt', 'r')
    search = input("Please enter an item :-")
    for line in infile :
    INDENT
        line = line.rstrip('\n')
        if stop :
        INDENT
            print (line)
            break
        DEDENT
        if (line == search) :
        INDENT
            print ("Description:-", line)
            stop = True
        DEDENT
    DEDENT
    infile.close()
DEDENT
----------------------------------------

def main() :
INDENT
    infile = open('coffee.txt', 'r')
    search = input("Please enter an item :-")
    lines = line.rstrip('\n')
    for i in range(len(lines)) :
    INDENT
        if (lines [i] == search) :
        INDENT
            print ("Description:-", line)
            print (line [i + 1])
        DEDENT
    DEDENT
    infile.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51684920_51685086_15_21
51684920_51685103_16_21
Title: python class managing in another class 
----------------------------------------

def crawler_testing(self) :
INDENT
    result_pack = {}
    for name, crawler in self.crawlers.items() :
    INDENT
        result_back [name] = crawler.run_before_insert()
    DEDENT
    return result_back

DEDENT
----------------------------------------

def crawler_testing(self) :
INDENT
    result_pack = {}
    for key in self.crawlers :
    INDENT
        result_pack [key] = self.crawlers [key].run_before_insert()
    DEDENT
    return result_pack
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51691499_51691518_1_11
51691499_51691676_1_15
Title: Python - Can't Read Entire .txt File: .readlines error? 
----------------------------------------

def login() :
INDENT
    username = textentry.get()
    password = textentry2.get()
    database = open('database.txt')
    for line in database.readlines() :
    INDENT
        usr, pas = line.strip().split("-")
        if (username == usr) and (password == pas) :
        INDENT
            credentialcheck.insert(END, "welcome")
            return True
        DEDENT
    DEDENT
    credentialcheck.insert(END, "username or password incorrect")
    return False
DEDENT
----------------------------------------

def login() :
INDENT
    username = "test"
    password = "test"
    database = open('database.txt')
    print (database.readlines())
    print (database.readlines())
    for line in database.readlines() :
    INDENT
        print (line)
        usr, pas = line.strip().split("-")
        print (usr, pas)
        if (username in usr) and (password in pas) :
        INDENT
            print ("welcome")
            return True
        DEDENT
    DEDENT
    print ("error")
    return False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51694459_51694584_15_27
51694459_51697337_17_36
Title: Find total count of Distinct Prime in given array using Python 
----------------------------------------

def solve(self, A) :
INDENT
    prod = 1
    tot = 0
    for i in range(0, len(A)) :
    INDENT
        prod = prod * A [i]
    DEDENT
    for i in range(0, len(A)) :
    INDENT
        if (self.prime(A [i])) :
        INDENT
            if (prod % self.prime(A [i]) == 0) :
            INDENT
                tot = tot + 1
            DEDENT
        DEDENT
    DEDENT
    return tot

DEDENT
----------------------------------------

def solve(self, A) :
INDENT
    prod = 1
    tot = 0
    for i in range(0, len(A)) :
    INDENT
        prod = prod * A [i]
    DEDENT
    if (prod < 2) :
    INDENT
        return 0
    DEDENT
    if (prod == 2 or prod == 3) :
    INDENT
        return 1
    DEDENT
    for i in range(2, prod / 2 + 1) :
    INDENT
        if (self.prime(i) and prod % i == 0) :
        INDENT
            tot = tot + 1
        DEDENT
    DEDENT
    return tot
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51694459_51694584_4_14
51694459_51697337_7_16
Title: Find total count of Distinct Prime in given array using Python 
----------------------------------------

def prime(self, num) :
INDENT
    if num == 2 :
    INDENT
        return num
    DEDENT
    if (num > 2) :
    INDENT
        for i in range(2, num) :
        INDENT
            if (num % i == 0) :
            INDENT
                break
            DEDENT
            else :
            INDENT
                return num

            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def prime(self, n) :
INDENT
    if n < 2 :
    INDENT
        return False
    DEDENT
    for number in islice(count(2), int(sqrt(n) - 1)) :
    INDENT
        if n % number == 0 :
        INDENT
            return False
        DEDENT
    DEDENT
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51694459_51694584_4_14
51694459_51753479_2_10
Title: Find total count of Distinct Prime in given array using Python 
----------------------------------------

def prime(self, num) :
INDENT
    if num == 2 :
    INDENT
        return num
    DEDENT
    if (num > 2) :
    INDENT
        for i in range(2, num) :
        INDENT
            if (num % i == 0) :
            INDENT
                break
            DEDENT
            else :
            INDENT
                return num

            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def prime(num) :
INDENT
    if (num == 1) :
    INDENT
        return 0
    DEDENT
    for i in range(2, (num / / 2 + 1)) :
    INDENT
        if (num % i == 0) :
        INDENT
            return 0
        DEDENT
    DEDENT
    return num

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51694459_51697337_7_16
51694459_51753479_2_10
Title: Find total count of Distinct Prime in given array using Python 
----------------------------------------

def prime(self, n) :
INDENT
    if n < 2 :
    INDENT
        return False
    DEDENT
    for number in islice(count(2), int(sqrt(n) - 1)) :
    INDENT
        if n % number == 0 :
        INDENT
            return False
        DEDENT
    DEDENT
    return True
DEDENT
----------------------------------------

def prime(num) :
INDENT
    if (num == 1) :
    INDENT
        return 0
    DEDENT
    for i in range(2, (num / / 2 + 1)) :
    INDENT
        if (num % i == 0) :
        INDENT
            return 0
        DEDENT
    DEDENT
    return num

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51716158_51824919_1_11
51716158_51984528_1_10
Title: Checkhead hg python hook is not working in version 4.6.1 
----------------------------------------

def checkheads(ui, repo, ** kwargs) :
INDENT
    ui.status(_('checkheads hook\n'))
    for b in repo.branchmap() :
    INDENT
        print b
        test = len(repo.branchheads(b))
        print test
        if len(repo.branchheads(b)) > 1 :
        INDENT
            ui.status(_("Two heads detected on branch '%s'\n" % b))
            ui.status(_('Only one head per branch is allowed\n'))
            return 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def checkheads(ui, repo, ** kwargs) :
INDENT
    ui.status(_('checkheads hook\n'))
    branchdata = repo.branchmap()
    for b in branchdata.iterbranches() :
    INDENT
        heads = branchdata.branchheads(b)
        if 1 < len(heads) :
        INDENT
            ui.status(_("Two heads detected on branch '%s'\n") % b)
            ui.status(_('Only one head per branch is allowed\n'))
        DEDENT
        return 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51718228_51718287_1_10
51718228_51718580_5_14
Title: if a function can be created based on different input information? 
----------------------------------------

def func1(x) :
INDENT
    def func2(y) :
    INDENT
        ret = []
        for f in x * len(y) :
        INDENT
            ret += [y [: f]]
            y = y [f :]
            if not y :
            INDENT
                return ret
            DEDENT
        DEDENT
    DEDENT
    return func2
DEDENT
----------------------------------------

def func1(test) :
INDENT
    def func2(longlist) :
    INDENT
        result = []
        for t in test :
        INDENT
            perms = permutations(longlist, t)
            result += perms
        DEDENT
        result = [''.join(t) for t in result]
        return result
    DEDENT
    return func2
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51718228_51718287_2_8
51718228_51718580_6_12
Title: if a function can be created based on different input information? 
----------------------------------------

def func2(y) :
INDENT
    ret = []
    for f in x * len(y) :
    INDENT
        ret += [y [: f]]
        y = y [f :]
        if not y :
        INDENT
            return ret
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def func2(longlist) :
INDENT
    result = []
    for t in test :
    INDENT
        perms = permutations(longlist, t)
        result += perms
    DEDENT
    result = [''.join(t) for t in result]
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51725557_51725944_7_11
51725557_51726602_10_14
Title: how to get year from datefield at django? 
----------------------------------------

def calculate_age(self) :
INDENT
    bd = self.birthday
    if bd :
    INDENT
        td = date.today()
        return td.year - bd.year - ((td.month, td.day) < (bd.month, bd.day))
    DEDENT
DEDENT
----------------------------------------

def calculate_age(self) :
INDENT
    if self.birthday :
    INDENT
        today = date.today()
        return today.year - self.birthday.year - ((today.month, today.day) < (self.birthday.month, self.birthday.day))
    DEDENT
    return 0
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51759222_51759321_1_14
51759222_51759697_1_15
Title: Add border(*) for rectangular matrix of characters 
----------------------------------------

def addBorder(picture) :
INDENT
    maxL = max(len(x) for x in picture)
    patt = "*{:<" + str(maxL) + "}*"
    rv = []
    rv.append('*' * (maxL + 2))
    for t in picture :
    INDENT
        rv.append(patt.format(t))
    DEDENT
    rv.append('*' * (maxL + 2))
    return rv
DEDENT
----------------------------------------

def addBorder(picture,
border_size = 1) :
INDENT
    max_substring_length = max(map(len, picture))
    result = ['*' * (max_substring_length + border_size * 2)]
    for substring in picture :
    INDENT
        diff = max_substring_length - len(substring)
        additional_length, extra = divmod(diff, 2)
        prepend = '*' * (border_size + additional_length + extra)
        append = '*' * (border_size + additional_length)
        result.append(prepend + substring + append)
    DEDENT
    result.append('*' * (max_substring_length + border_size * 2))
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51781149_51781334_14_24
51781149_51836539_1_24
Title: Anagrams in Python using lists 
----------------------------------------

def groupAnagrams(strs) :
INDENT
    allResults = []
    for s in strs :
    INDENT
        results = []
        list_of_permutations = get_list_of_permutations(s)
        for i in range(0, len(strs)) :
        INDENT
            if strs [i] in list_of_permutations :
            INDENT
                results.append(strs [i])
            DEDENT
        DEDENT
        if results not in allResults :
        INDENT
            allResults.append(results)
        DEDENT
    DEDENT
    return allResults
DEDENT
----------------------------------------

def groupAnagrams(word_list) :
INDENT
    allResults = []
    results = []
    for idx, s in enumerate(word_list) :
    INDENT
        if s == None :
        INDENT
            pass
        DEDENT
        else :
        INDENT
            results = [s]

            for i in range(1, len(s), 1) :
            INDENT
                temp = s [i :] + s [: i]

                if temp in word_list :
                INDENT
                    results.append(temp)
                    word_list [word_list.index(temp)] = None
                DEDENT
            DEDENT
            allResults.append(results)
        DEDENT
    DEDENT
    return allResults
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51791042_51791273_14_22
51791042_51791273_37_45
Title: Matplotlib NavigationToolbar overlapping plot (within PyQt4 embedding) 
----------------------------------------

def __init__(self) :
INDENT
    super(App, self).__init__()
    self.left = 10
    self.top = 10
    self.title = 'Minimum, working example'
    self.width = 640
    self.height = 400
    self.initUI()
DEDENT
----------------------------------------

def __init__(self, parent = None, width = 5, height = 4, dpi = 100) :
INDENT
    fig = Figure(figsize = (width, height), dpi = dpi)
    self.axes = fig.add_subplot(111)
    FigureCanvas.__init__(self, fig)
    self.setParent(parent)
    self.updateGeometry()
    fig.set_tight_layout(True)
    self.plot()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51797422_51799244_5_28
51797422_51800985_15_29
Title: Produce Generalised Hamming Numbers Python 
----------------------------------------

def HammingFiveUnder(limit) :
INDENT
    hammings = []
    def prime_list() :
    INDENT
        list_with_repeated_primes = []
        for prime in [2, 3, 5, 7] :
        INDENT
            rep = int(math.log(limit, prime))
            for n in range(rep) :
            INDENT
                list_with_repeated_primes.append(prime)
            DEDENT
        DEDENT
        return list_with_repeated_primes
    DEDENT
    list_with_repeated_primes = prime_list()

    comb = []
    for i in range(len(list_of_repeated_primes)) :
    INDENT
        comb += itertools.combinations(list_of_repeated_primes, i + 1)
    DEDENT
    comb = np.unique(comb)
    for i in comb :
    INDENT
        poss_ham = np.prod(np.array(i))
        if poss_ham < = limit :
        INDENT
            hammings.append(poss_ham)
        DEDENT
    DEDENT
    return sorted(hammings)
DEDENT
----------------------------------------

def HammingFiveUnder(limit) :
INDENT
    hammings = []
    multipliers = (2, 3, 5)
    exps = [int(math.log(limit, x)) for x in multipliers]
    ranges_lists = [[i for i in range(0, n + 1)] for n in exps]
    combo_list = list(itertools.product(* ranges_lists))
    for combo_item in combo_list :
    INDENT
        poss_ham = multiplyIter(list(map(tuplePower, zip(multipliers, combo_item))))
        if poss_ham < = limit :
        INDENT
            hammings.append(poss_ham)
        DEDENT
    DEDENT
    return sorted(hammings)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51805607_51806158_3_25
51805607_51806563_3_9
Title: Updating Variables in Files 
----------------------------------------

def loop() :
INDENT
    import pyVars
    pyVars = importlib.reload(pyVars)
    newVar = int(input('New var: '))
    temp1 = newVar
    temp2 = pyVars.varA
    temp3 = pyVars.varB
    f = open('pyVars.py', 'w')
    f.close()
    f = open('pyVars.py', 'a')
    f.write('varA = ' + str(temp1) + '\n')
    f.write('varB = ' + str(temp2) + '\n')
    f.write('varC = ' + str(temp3) + '\n')
    f.close()
    f = open('pyVars.py')
    print (f.read())
    f.close()
    loop()
DEDENT
----------------------------------------

def loop() :
INDENT
    newVar = int(input('New var: '))
    pyVars.varA, pyVars.varB, pyVars.varC = newVar, pyVars.varA, pyVars.varB
    with open('pyVars.py', 'rb') as f :
    INDENT
        print (f.read())
    DEDENT
    loop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51824723_51824782_2_10
51824723_51825582_6_12
Title: Flask Forms if statement return 
----------------------------------------

def fee_handler() :
INDENT
    x, y, z, a = None, None, None, None
    if request.method == "POST" :
    INDENT
        x = request.form ['x']
        y = request.form ['y']
        z = request.form ['z']
        a = request.form ['a']
        fee.feeCreation(x, y, z, a)
    DEDENT
    return render_template('result.html', x = x, y = y, z = z, a = a)
DEDENT
----------------------------------------

def fee_handler() :
INDENT
    x = request.form ['x']
    y = request.form ['y']
    z = request.form ['z']
    a = request.form ['a']
    fee.feeCreation(x, y, z, a)
    return render_template('result.html', x = x, y = y, z = z, a = a)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51826296_51826399_1_12
51826296_51827730_1_14
Title: How to use try except in case of a dictionary with multiple values? 
----------------------------------------

def transform(x) :
INDENT
    result = {'name' : x.name};
    try :
    INDENT
        result ['result_cap1'] = NLTK.parser(cap1)
    DEDENT
    except :
    INDENT
        result ['result_cap1'] = " "
    DEDENT
    try :
    INDENT
        result ['result_cap2'] = NLTK.parser(cap2)
    DEDENT
    except :
    INDENT
        result ['result_cap2'] = " "
    DEDENT
    return result
DEDENT
----------------------------------------

def transform(x) :
INDENT
    def parse(cap) :
    INDENT
        try :
        INDENT
            result = NLTK.parser(cap)
        DEDENT
        except Exception :
        INDENT
            result = " "
        DEDENT
        return result
    DEDENT
    return {'name' : x.name,
        'result_cap1' : parse(cap1),
        'result_cap2' : parse(cap2)}
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51829622_51830109_36_47
51829622_51830109_49_61
Title: Group buttons aesthetically in PyQt5 
----------------------------------------

def __init__(self, text, path_icon, parent = None) :
INDENT
    super(ToolButton, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    toolButton = QtWidgets.QToolButton()
    toolButton.setIcon(QtGui.QIcon(path_icon))
    toolButton.setIconSize(QtCore.QSize(64, 64))
    label = QtWidgets.QLabel(text)
    lay.addWidget(toolButton, 0, QtCore.Qt.AlignCenter)
    lay.addWidget(label, 0, QtCore.Qt.AlignCenter)
    lay.setContentsMargins(0, 0, 0, 0)

DEDENT
----------------------------------------

def __init__(self, info, parent = None) :
INDENT
    super(GroupButton, self).__init__(parent)
    title = info ["title"]
    self.setTitle(title)
    hlay = QtWidgets.QHBoxLayout(self)
    for info_button in info ["buttons"] :
    INDENT
        text = info_button ["text"]
        path_icon = info_button ["path_icon"]
        btn = ToolButton(text, path_icon)
        hlay.addWidget(btn)
    DEDENT
    hlay.setContentsMargins(5, 5, 5, 5)
    self.setFixedSize(self.sizeHint())
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51829622_51830109_36_47
51829622_51830109_63_73
Title: Group buttons aesthetically in PyQt5 
----------------------------------------

def __init__(self, text, path_icon, parent = None) :
INDENT
    super(ToolButton, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    toolButton = QtWidgets.QToolButton()
    toolButton.setIcon(QtGui.QIcon(path_icon))
    toolButton.setIconSize(QtCore.QSize(64, 64))
    label = QtWidgets.QLabel(text)
    lay.addWidget(toolButton, 0, QtCore.Qt.AlignCenter)
    lay.addWidget(label, 0, QtCore.Qt.AlignCenter)
    lay.setContentsMargins(0, 0, 0, 0)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Widget, self).__init__(parent)
    vlay = QtWidgets.QVBoxLayout(self)
    hlay = QtWidgets.QHBoxLayout()
    for val in data :
    INDENT
        gb = GroupButton(val)
        hlay.addWidget(gb)
    DEDENT
    hlay.addStretch()
    vlay.addLayout(hlay)
    vlay.addStretch()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51829622_51830109_49_61
51829622_51830109_63_73
Title: Group buttons aesthetically in PyQt5 
----------------------------------------

def __init__(self, info, parent = None) :
INDENT
    super(GroupButton, self).__init__(parent)
    title = info ["title"]
    self.setTitle(title)
    hlay = QtWidgets.QHBoxLayout(self)
    for info_button in info ["buttons"] :
    INDENT
        text = info_button ["text"]
        path_icon = info_button ["path_icon"]
        btn = ToolButton(text, path_icon)
        hlay.addWidget(btn)
    DEDENT
    hlay.setContentsMargins(5, 5, 5, 5)
    self.setFixedSize(self.sizeHint())
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Widget, self).__init__(parent)
    vlay = QtWidgets.QVBoxLayout(self)
    hlay = QtWidgets.QHBoxLayout()
    for val in data :
    INDENT
        gb = GroupButton(val)
        hlay.addWidget(gb)
    DEDENT
    hlay.addStretch()
    vlay.addLayout(hlay)
    vlay.addStretch()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51838628_51838861_1_10
51838628_51841446_5_16
Title: How do I code my views.py such that the form data gets stored in my database(/admin)? Using Django (v2) 
----------------------------------------

def leaveRequest(request) :
INDENT
    form_class = LeaveRequestForm
    if request.method == 'POST' :
    INDENT
        form = LeaveRequestForm(request.POST)
        if form.is_valid() :
        INDENT
            lvreq = form.save()
            return HttpResponse('Saved')
        DEDENT
        else :
        INDENT
            return HttpResponse('invalid data entered')
        DEDENT
    DEDENT
    return render(request, "request_form.html", {'form' : form_class})
DEDENT
----------------------------------------

def leaveRequest(request) :
INDENT
    form_class = LeaveRequestForm
    if request.method == "POST" :
    INDENT
        form = LeaveRequestForm(request.POST)
        if form.is_valid() :
        INDENT
            leave = form.save(commit = False)
            leave.user = request.user
            form.save()
        DEDENT
        return HttpResponse("Sucessfully submitted")
    DEDENT
    else :
    INDENT
        form = LeaveRequestForm()
        return render(request, "request_form.html", {'form' : form_class})
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51860417_51861007_1_11
51860417_51861012_6_19
Title: Find if all nodes in BST are greater than a item 
----------------------------------------

def all_bigger(node, val) :
INDENT
    current = node

    while (current.left is not None) :
    INDENT
        current = current.left
        if current.data < val :
        INDENT
            return False
        DEDENT
    DEDENT
    return True
DEDENT
----------------------------------------

def all_bigger(self, value) :
INDENT
    root = self
    while (root ! = None) :
    INDENT
        if root.item > value :
        INDENT
            root = root.left
        DEDENT
        else :
        INDENT
            return False
        DEDENT
    DEDENT
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51860960_52153402_13_23
51860960_52153402_32_50
Title: combining ZMQ event loop with QT / Pyforms event loop 
----------------------------------------

def __init__(self) :
INDENT
    QtCore.QObject.__init__(self)

    context = zmq.Context()
    self.socket = context.socket(zmq.PULL)
    self.socket.connect('tcp://127.0.0.1:5014')
    print ('connected!')
    self.running = True
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(SimpleExample1, self).__init__('Simple example 1')

    self._controltextarea = ControlTextArea('textarea to show incoming zmq messages')
    self._button = ControlButton('Press this button')
    message = QtCore.pyqtSignal(str)
    self.thread = QtCore.QThread()
    self.zeromq_listener = ZeroMQ_Listener()
    self.zeromq_listener.moveToThread(self.thread)
    self.thread.started.connect(self.zeromq_listener.loop)
    self.zeromq_listener.message.connect(self.signal_received)
    QtCore.QTimer.singleShot(0, self.thread.start)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51867579_51868081_7_24
51867579_51871267_5_21
Title: Python Tkinter with classes 
----------------------------------------

def __init__(self, root) :
INDENT
    self.root = root
    root.title("TacoBell TLD Tool")
    self.store_number = IntVar()
    self.tld_date = IntVar()
    Label(root, text = "Store Number (XXXXXX): ").grid(row = 0, sticky = E)
    Label(root, text = "TLD Date(MM/DD/YYYY): ").grid(row = 1, sticky = E)
    self.entStore = Entry(self.root)
    self.entDate = Entry(self.root)
    self.entStore.grid(row = 0, column = 1)
    self.entDate.grid(row = 1, column = 1)
    self.confirm = Button(root, text = "Confirm", command = self.save)
    self.confirm.grid(row = 2, column = 1)
DEDENT
----------------------------------------

def __init__(self, root, ** kw) :
INDENT
    super().__init__(** kw)
    root.title("TacoBell TLD Tool")
    self.store_number = tkinter.IntVar()
    self.tld_date = tkinter.IntVar()
    self.lblstore_number = tkinter.Label(self, text = "Store Number (XXXXXX): ")
    self.lbltld_date = tkinter.Label(self, text = "TLD Date(MM/DD/YYYY): ")
    self.lblstore_number.grid(row = 0, sticky = E)
    self.lbltld_date.grid(row = 1, sticky = E)
    self.entStore = tkinter.Entry(self, textvariable = self.store_number)
    self.entDate = tkinter.Entry(self, textvariable = self.tld_date)
    self.entStore.grid(row = 0, column = 1)
    self.entDate.grid(row = 1, column = 1)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51880657_51881082_14_27
51880657_51881284_10_18
Title: How to make an iterator that filters lists? 
----------------------------------------

def __next__(self) :
INDENT
    next_value = self.current
    if next_value > = len(self.numbers) :
    INDENT
        raise StopIteration
    DEDENT
    output = self.numbers [self.current]
    while "?" not in output :
    INDENT
        self.current += 1
        output = self.numbers [self.current]
    DEDENT
    self.current += 1
    return output
DEDENT
----------------------------------------

def __next__(self) :
INDENT
    while True :
    INDENT
        try :
        INDENT
            next_value = self.numbers.popleft()
        DEDENT
        except IndexError as e :
        INDENT
            raise StopIteration
        DEDENT
        if "?" in next_value :
        INDENT
            return next_value
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51894473_51902139_90_96
51894473_51911840_90_100
Title: TensorFlow : polynomial regression 
----------------------------------------

def model(X, w) :
INDENT
    terms = []
    for i in range(num_coeffs) :
    INDENT
        term = tf.multiply(w [i], tf.pow(X, i))
        terms.append(term)
    DEDENT
    return tf.add_n(terms)
DEDENT
----------------------------------------

def model(x, y) :
INDENT
    temp = []
    for i in range(num_coeffs) :
    INDENT
        temp.append(tf.add(w [i], tf.pow(x, i)))
    DEDENT
    prediction = tf.add(tf.reduce_sum(temp), b)
    errors = tf.square(y - prediction)
    return [prediction, errors]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51903172_51903482_15_34
51903172_51920869_1_21
Title: How to display a tree in python similar to msdos tree command? 
----------------------------------------

def ptree(parent, tree, indent = '') :
INDENT
    if parent ! = - 1 :
    INDENT
        print (parent)
    DEDENT
    if parent not in tree :
    INDENT
        return
    DEDENT
    shift = math.ceil(math.log10(parent)) if parent > = 10 else 1
    indent += ' ' * shift
    for child in tree [parent] [: - 1] :
    INDENT
        print(indent + '|' + '-' * 4, end = '')
        ptree(child, tree, indent + '|' + ' ' * 4)
    DEDENT
    child = tree [parent] [- 1]
    print(indent + '`' + '-' * 4, end = '')
    ptree(child, tree, indent + ' ' * 4)

DEDENT
----------------------------------------

def ptree(start, tree, indent_width = 4) :
INDENT
    def _ptree(start, parent, tree, grandpa = None, indent = "") :
    INDENT
        if parent ! = start :
        INDENT
            if grandpa is None :
            INDENT
                print(parent, end = "")
            DEDENT
            else :
            INDENT
                print (parent)
            DEDENT
        DEDENT
        if parent not in tree :
        INDENT
            return
        DEDENT
        for child in tree [parent] [: - 1] :
        INDENT
            print(indent + "├" + "─" * indent_width, end = "")
            _ptree(start, child, tree, parent, indent + "│" + " " * 4)
        DEDENT
        child = tree [parent] [- 1]
        print(indent + "└" + "─" * indent_width, end = "")
        _ptree(start, child, tree, parent, indent + " " * 5)
    DEDENT
    parent = start
    _ptree(start, parent, tree)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51916181_51918843_37_54
51916181_51918843_56_83
Title: Python Tkinter Run in a loop entries x times defined in a variable 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "This is the start page",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    button1 = tk.Button(
        self,
        text = "Define the number of networks",
        command = lambda : controller.show_frame("PageOne"),
        )
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "Define the number of networks",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    nwnum = tk.Entry(self, textvariable = controller.num_networks)
    nwnum.pack()
    button1 = tk.Button(
        self,
        text = "Go to the start page",
        command = lambda : controller.show_frame("StartPage"),
        )
    button1.pack()
    button2 = tk.Button(
        self,
        text = "Define the networks",
        command = lambda : controller.show_frame("PageTwo"),
        )
    button2.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51916181_51918843_37_54
51916181_51918843_7_22
Title: Python Tkinter Run in a loop entries x times defined in a variable 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "This is the start page",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    button1 = tk.Button(
        self,
        text = "Define the number of networks",
        command = lambda : controller.show_frame("PageOne"),
        )
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title_font = tkfont.Font(
        family = "Helvetica", size = 18, weight = "bold", slant = "italic")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.container = container
    self.current_frame = None
    self.num_networks = tk.IntVar()
    self.show_frame("StartPage")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51916181_51918843_37_54
51916181_51918843_99_129
Title: Python Tkinter Run in a loop entries x times defined in a variable 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "This is the start page",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    button1 = tk.Button(
        self,
        text = "Define the number of networks",
        command = lambda : controller.show_frame("PageOne"),
        )
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "Define the networks",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    self.entries = []
    self.entry_vars = []
    for t in range(1, self.controller.num_networks.get()) :
    INDENT
        entvar = tk.StringVar()
        ent = tk.Entry(self, textvariable = entvar)
        self.entry_vars.append(entvar)
        self.entries.append(ent)
        ent.pack()
    DEDENT
    button3 = tk.Button(
        self,
        text = "Go to the start page",
        command = lambda : controller.show_frame("StartPage"),
        )
    button3.pack()
    button4 = tk.Button(
        self, text = "Create the networks", command = self.getent1)
    button4.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51916181_51918843_56_83
51916181_51918843_7_22
Title: Python Tkinter Run in a loop entries x times defined in a variable 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "Define the number of networks",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    nwnum = tk.Entry(self, textvariable = controller.num_networks)
    nwnum.pack()
    button1 = tk.Button(
        self,
        text = "Go to the start page",
        command = lambda : controller.show_frame("StartPage"),
        )
    button1.pack()
    button2 = tk.Button(
        self,
        text = "Define the networks",
        command = lambda : controller.show_frame("PageTwo"),
        )
    button2.pack()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title_font = tkfont.Font(
        family = "Helvetica", size = 18, weight = "bold", slant = "italic")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.container = container
    self.current_frame = None
    self.num_networks = tk.IntVar()
    self.show_frame("StartPage")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51916181_51918843_56_83
51916181_51918843_99_129
Title: Python Tkinter Run in a loop entries x times defined in a variable 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "Define the number of networks",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    nwnum = tk.Entry(self, textvariable = controller.num_networks)
    nwnum.pack()
    button1 = tk.Button(
        self,
        text = "Go to the start page",
        command = lambda : controller.show_frame("StartPage"),
        )
    button1.pack()
    button2 = tk.Button(
        self,
        text = "Define the networks",
        command = lambda : controller.show_frame("PageTwo"),
        )
    button2.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "Define the networks",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    self.entries = []
    self.entry_vars = []
    for t in range(1, self.controller.num_networks.get()) :
    INDENT
        entvar = tk.StringVar()
        ent = tk.Entry(self, textvariable = entvar)
        self.entry_vars.append(entvar)
        self.entries.append(ent)
        ent.pack()
    DEDENT
    button3 = tk.Button(
        self,
        text = "Go to the start page",
        command = lambda : controller.show_frame("StartPage"),
        )
    button3.pack()
    button4 = tk.Button(
        self, text = "Create the networks", command = self.getent1)
    button4.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51916181_51918843_7_22
51916181_51918843_99_129
Title: Python Tkinter Run in a loop entries x times defined in a variable 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title_font = tkfont.Font(
        family = "Helvetica", size = 18, weight = "bold", slant = "italic")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.container = container
    self.current_frame = None
    self.num_networks = tk.IntVar()
    self.show_frame("StartPage")
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(
        self,
        text = "Define the networks",
        font = controller.title_font,
        )
    label.pack(side = "top", fill = "x", pady = 10)
    self.entries = []
    self.entry_vars = []
    for t in range(1, self.controller.num_networks.get()) :
    INDENT
        entvar = tk.StringVar()
        ent = tk.Entry(self, textvariable = entvar)
        self.entry_vars.append(entvar)
        self.entries.append(ent)
        ent.pack()
    DEDENT
    button3 = tk.Button(
        self,
        text = "Go to the start page",
        command = lambda : controller.show_frame("StartPage"),
        )
    button3.pack()
    button4 = tk.Button(
        self, text = "Create the networks", command = self.getent1)
    button4.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51918954_51921666_2_16
51918954_51926953_2_23
Title: Directed distances between a set of N points in 2D 
----------------------------------------

def distance(r) :
INDENT
    N = r.shape [0]
    F = np.empty((N, N, 2))
    assert r.shape [1] == 2
    for i in nb.prange(N) :
    INDENT
        for j in range(i) :
        INDENT
            r_rel_1 = r [i, 0] - r [j, 0]
            r_rel_2 = r [i, 1] - r [j, 1]
            dist_rel = np.sqrt(r_rel_1 ** 2 + r_rel_2 ** 2)
            V = np.exp(- dist_rel) / (dist_rel + 1)
            F [i, j, 0] = V * r_rel_1
            F [i, j, 1] = V * r_rel_2
        DEDENT
    DEDENT
    return F
DEDENT
----------------------------------------

def distance(r, thr = None) :
INDENT
    if thr == None :
    INDENT
        d_sq_thr = np.log(5e-324) ** 2
    DEDENT
    else :
    INDENT
        d_sq_thr = np.log(thr) ** 2
    DEDENT
    N = r.shape [0]
    F = np.zeros((N, N, 2))
    assert r.shape [1] == 2
    for i in nb.prange(N) :
    INDENT
        for j in range(i) :
        INDENT
            r_rel_1 = r [i, 0] - r [j, 0]
            r_rel_2 = r [i, 1] - r [j, 1]
            dist_rel_sq = r_rel_1 ** 2 + r_rel_2 ** 2
            if dist_rel_sq > d_sq_thr :
            INDENT
                continue
            DEDENT
            dist_rel = np.sqrt(dist_rel_sq)
            V = np.exp(- dist_rel) / (dist_rel + 1)
            F [i, j, 0] = V * r_rel_1
            F [i, j, 1] = V * r_rel_2
        DEDENT
    DEDENT
    return F
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51932556_51935076_50_65
51932556_51935076_9_48
Title: How to add PyQt5 QtWidgets.QTabWidget() properly to sub-classed QWidget 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.title = 'Tabbed PixMap'
    self.left = 0
    self.top = 0
    self.width = 800
    self.height = 600
    self.setWindowTitle(self.title)
    self.setGeometry(self.left, self.top, self.width, self.height)
    self.tabImages = TabImages()
    self.setCentralWidget(self.tabImages)
    self.center()
    self.show()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(QtWidgets.QWidget, self).__init__(parent)
    self.container = QtWidgets.QVBoxLayout(self)

    self.tabs = QtWidgets.QTabWidget()
    self.tab1 = QtWidgets.QWidget()
    self.tab2 = QtWidgets.QWidget()
    self.tab3 = QtWidgets.QWidget()
    self.tab1_layout = QtWidgets.QVBoxLayout()
    self.tab2_layout = QtWidgets.QVBoxLayout()
    self.tab3_layout = QtWidgets.QVBoxLayout()
    self.tab1.setLayout(self.tab1_layout)
    self.tab2.setLayout(self.tab2_layout)
    self.tab3.setLayout(self.tab3_layout)
    self.tab1_label = QtWidgets.QLabel()
    self.tab2_label = QtWidgets.QLabel()
    self.tab3_label = QtWidgets.QLabel()
    self.tab1_pixMap = QtGui.QPixmap(os.path.join(scriptDir, 'test_image1.png'))
    self.tab2_pixMap = QtGui.QPixmap(os.path.join(scriptDir, 'test_image2.png'))
    self.tab3_pixMap = QtGui.QPixmap(os.path.join(scriptDir, 'test_image3.png'))
    self.tab1_label.setPixmap(self.tab1_pixMap)
    self.tab2_label.setPixmap(self.tab2_pixMap)
    self.tab3_label.setPixmap(self.tab3_pixMap)
    self.tab1_layout.addWidget(self.tab1_label)
    self.tab2_layout.addWidget(self.tab2_label)
    self.tab3_layout.addWidget(self.tab3_label)

    self.tabs.addTab(self.tab1, "Tab 1")
    self.tabs.addTab(self.tab2, "Tab 2")
    self.tabs.addTab(self.tab3, "Tab 3")
    self.container.addWidget(self.tabs)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51946790_51950894_4_16
51946790_51953267_1_23
Title: Recursive function on sublist returning None 
----------------------------------------

def check_with_list(dd, check_value) :
INDENT
    my_indexes = {}
    for index, h in enumerate(dd) :
    INDENT
        if isinstance(h, list) :
        INDENT
            result = check_with_list(h, check_value)
            if result is not None :
            INDENT
                my_indexes [index] = result
            DEDENT
        DEDENT
        elif h == check_value :
        INDENT
            my_indexes [index] = True
        DEDENT
    DEDENT
    return my_indexes

DEDENT
----------------------------------------

def check_with_list(dd, check_value, other_value = None) :
INDENT
    global new_index
    for index, h in enumerate(dd) :
    INDENT
        if isinstance(h, list) :
        INDENT
            result = check_with_list(h, check_value)
            if result is not None :
            INDENT
                if other_value :
                INDENT
                    new = (index,) + result
                    if len(new) == 2 :
                    INDENT
                        if dd [new [0]] [0] == other_value :
                        INDENT
                            result = None
                        DEDENT
                        else :
                        INDENT
                            return (index,) + result

                        DEDENT
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
        elif h == check_value :
        INDENT
            return (index,)
        DEDENT
    DEDENT
    return None

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51946790_51950894_4_16
51946790_51961715_1_25
Title: Recursive function on sublist returning None 
----------------------------------------

def check_with_list(dd, check_value) :
INDENT
    my_indexes = {}
    for index, h in enumerate(dd) :
    INDENT
        if isinstance(h, list) :
        INDENT
            result = check_with_list(h, check_value)
            if result is not None :
            INDENT
                my_indexes [index] = result
            DEDENT
        DEDENT
        elif h == check_value :
        INDENT
            my_indexes [index] = True
        DEDENT
    DEDENT
    return my_indexes

DEDENT
----------------------------------------

def check_with_list(structure, check_value, other_value = None) :
INDENT
    for index, item in enumerate(structure) :
    INDENT
        path = (index,)
        if isinstance(item, list) :
        INDENT

            sub_path = check_with_list(item, check_value, other_value)
            if sub_path is not None :
            INDENT

                path += sub_path
                if other_value and check_value in item :
                INDENT
                    if item [0] == other_value :
                    INDENT
                        return path
                    DEDENT
                DEDENT
                else :
                INDENT
                    return path
                DEDENT
            DEDENT
        DEDENT
        elif item == check_value :
        INDENT
            return path
        DEDENT
    DEDENT
    return None
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51946790_51953267_1_23
51946790_51961715_1_25
Title: Recursive function on sublist returning None 
----------------------------------------

def check_with_list(dd, check_value, other_value = None) :
INDENT
    global new_index
    for index, h in enumerate(dd) :
    INDENT
        if isinstance(h, list) :
        INDENT
            result = check_with_list(h, check_value)
            if result is not None :
            INDENT
                if other_value :
                INDENT
                    new = (index,) + result
                    if len(new) == 2 :
                    INDENT
                        if dd [new [0]] [0] == other_value :
                        INDENT
                            result = None
                        DEDENT
                        else :
                        INDENT
                            return (index,) + result

                        DEDENT
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
        elif h == check_value :
        INDENT
            return (index,)
        DEDENT
    DEDENT
    return None

DEDENT
----------------------------------------

def check_with_list(structure, check_value, other_value = None) :
INDENT
    for index, item in enumerate(structure) :
    INDENT
        path = (index,)
        if isinstance(item, list) :
        INDENT

            sub_path = check_with_list(item, check_value, other_value)
            if sub_path is not None :
            INDENT

                path += sub_path
                if other_value and check_value in item :
                INDENT
                    if item [0] == other_value :
                    INDENT
                        return path
                    DEDENT
                DEDENT
                else :
                INDENT
                    return path
                DEDENT
            DEDENT
        DEDENT
        elif item == check_value :
        INDENT
            return path
        DEDENT
    DEDENT
    return None
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5194686_5194909_6_14
5194686_5195492_6_18
Title: Iterate through different permutations of 4 functions in Python 
----------------------------------------

def accuracy(element, brown_train, brown_element) :
INDENT
    if element is nltk.DeafultTagger :
    INDENT
        evaluator = element("NN")
    DEDENT
    else :
    INDENT
        evaluator = element(brown_train, backoff = XXX)

    DEDENT
    return evaluator.evaluate(brown_test)
DEDENT
----------------------------------------

def accuracy(element, brown_train, brown_element) :
INDENT
    evaluator = "NN"
    for e in element :
    INDENT
        if evaluator == "NN" :
        INDENT
            evaluator = e("NN")
        DEDENT
        else :
        INDENT

            evaluator = e(brown_train, backoff = evaluator)

        DEDENT
    DEDENT
    return evaluator.evaluate(brown_test)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51948446_51951085_44_103
51948446_51951295_48_87
Title: "Pygame KEYUP KEYDOWN causing ghost movement" 
----------------------------------------

def game_loop() :
INDENT
    x = 200
    y = 200
    global x_change
    x_change == 0
    global y_change
    y_change == 0

    gameExit = False
    while not gameExit :
    INDENT
        for event in pygame.event.get() :
        INDENT
            if event.type == pygame.QUIT :
            INDENT
                pygame.quit()
                quit()
            DEDENT
            if event.type == pygame.KEYDOWN :
            INDENT
                if event.key == pygame.K_RIGHT :
                INDENT
                    x_change += 5
                DEDENT
                if event.key == pygame.K_LEFT :
                INDENT
                    x_change += - 5
                DEDENT
            DEDENT
            if event.type == pygame.KEYUP :
            INDENT
                if event.key == pygame.K_RIGHT :
                INDENT
                    x_change += - 5
                DEDENT
                if event.key == pygame.K_LEFT :
                INDENT
                    x_change += 5
                DEDENT
            DEDENT
            if event.type == pygame.KEYDOWN :
            INDENT
                if event.key == pygame.K_UP :
                INDENT
                    y_change += - 5
                DEDENT
                if event.key == pygame.K_DOWN :
                INDENT
                    y_change += 5
                DEDENT
            DEDENT
            if event.type == pygame.KEYUP :
            INDENT
                if event.key == pygame.K_UP :
                INDENT
                    y_change += 5
                DEDENT
                if event.key == pygame.K_DOWN :
                INDENT
                    y_change += - 5
                DEDENT
            DEDENT
        DEDENT
        x += x_change
        y += y_change
        gameDisplay.fill(white)
        pygame.draw.rect(gameDisplay, red, [x, y, 75, 75])

        if x > display_width - car_width or x < 0 :
        INDENT
            crash()
        DEDENT
        if y > display_height - car_width or y < 0 :
        INDENT
            crash()
        DEDENT
        pygame.display.update()
        clock.tick(60)

    DEDENT
DEDENT
----------------------------------------

def game_loop() :
INDENT
    rect = pygame.rect.Rect(200, 200, 75, 75)
    gameExit = False
    while not gameExit :
    INDENT
        for event in pygame.event.get() :
        INDENT
            if event.type == pygame.QUIT :
            INDENT
                pygame.quit()
                quit()

            DEDENT
        DEDENT
        pressed = pygame.key.get_pressed()
        vectors = (keymap [key] for key in keymap if pressed [key])
        direction = pygame.math.Vector2(0, 0)
        for v in vectors :
        INDENT
            direction += v

        DEDENT
        if direction.length() > 0 :
        INDENT
            rect.move_ip(* direction.normalize() * 5)
        DEDENT
        gameDisplay.fill(white)
        pygame.draw.rect(gameDisplay, red, rect)

        if not gameDisplay.get_rect().contains(rect) :
        INDENT
            crash()
        DEDENT
        pygame.display.update()
        clock.tick(60)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51954549_51956144_12_24
51954549_51956786_6_16
Title: Lookup django model using two or more different keys 
----------------------------------------

def get_object(self) :
INDENT
    pk = self.kwargs [self.lookup_url_kwarg]

    try :
    INDENT
        self.kwargs [self.lookup_url_kwarg] = int(pk)
        self.lookup_field = 'id'
    DEDENT
    except :
    INDENT
        self.lookup_field = 'name'
    DEDENT
    return super(SomeModelDetailView, self).get_object()
DEDENT
----------------------------------------

def get_object(self) :
INDENT
    for field in self.lookup_fields :
    INDENT
        if field in self.kwargs :
        INDENT
            self.lookup_field = field
            break
        DEDENT
    DEDENT
    else :
    INDENT
        raise AssertionError(
            'Expected view %s to be called with one of the lookup_fields: %s' %
            (self.__class__.__name__, self.lookup_fields))
    DEDENT
    return super().get_object()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51989523_52004029_68_93
51989523_52339438_64_88
Title: PyQt: Pass `mousePressEvent` to original widget when overidding `mousePressEvent` method in base class 
----------------------------------------

def setupUI(self) :
INDENT
    self.resize(250, 150)
    self.setWindowTitle('Context Help Example')
    self.show()
    button = ContextHelpButton("Test Button")
    self.comboBox = ContextHelpComboBox()
    self.comboBox.addItem("Test Item 1")
    self.comboBox.addItem("Test Item 2")
    self.comboBox.addItem("Test Item 3")
    self.comboBox.installEventFilter(self)
    self.helpTextDisplay = ContexHelpDisplay("Context Help")
    vBox = QVBoxLayout()
    vBox.addWidget(button)
    vBox.addWidget(self.comboBox)
    hBox = QHBoxLayout()
    hBox.addLayout(vBox)
    hBox.addWidget(self.helpTextDisplay)
    self.setLayout(hBox)

DEDENT
----------------------------------------

def setupUI(self) :
INDENT
    self.resize(250, 150)
    self.setWindowTitle('Context Help Example')
    self.show()
    button = ContextHelpButton("Test Button")
    comboBox = ContextHelpComboBox()
    comboBox.addItem("Test Item 1")
    comboBox.addItem("Test Item 2")
    comboBox.addItem("Test Item 3")
    helpTextDisplay = ContexHelpDisplay("Context Help")
    button.clicked.connect(button.test)
    vBox = QVBoxLayout()
    vBox.addWidget(button)
    vBox.addWidget(comboBox)
    hBox = QHBoxLayout()
    hBox.addLayout(vBox)
    hBox.addWidget(helpTextDisplay)
    self.setLayout(hBox)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
51989523_52004029_68_93
51989523_52340370_61_85
Title: PyQt: Pass `mousePressEvent` to original widget when overidding `mousePressEvent` method in base class 
----------------------------------------

def setupUI(self) :
INDENT
    self.resize(250, 150)
    self.setWindowTitle('Context Help Example')
    self.show()
    button = ContextHelpButton("Test Button")
    self.comboBox = ContextHelpComboBox()
    self.comboBox.addItem("Test Item 1")
    self.comboBox.addItem("Test Item 2")
    self.comboBox.addItem("Test Item 3")
    self.comboBox.installEventFilter(self)
    self.helpTextDisplay = ContexHelpDisplay("Context Help")
    vBox = QVBoxLayout()
    vBox.addWidget(button)
    vBox.addWidget(self.comboBox)
    hBox = QHBoxLayout()
    hBox.addLayout(vBox)
    hBox.addWidget(self.helpTextDisplay)
    self.setLayout(hBox)

DEDENT
----------------------------------------

def setupUI(self) :
INDENT
    self.resize(250, 150)
    self.setWindowTitle('Context Help Example')
    self.show()
    button = ContextHelpButton("Test Button")
    comboBox = ContextHelpComboBox()
    comboBox.addItem("Test Item 1")
    comboBox.addItem("Test Item 2")
    comboBox.addItem("Test Item 3")
    helpTextDisplay = ContexHelpDisplay("Context Help")
    button.clicked.connect(self.TestButton)
    vBox = QVBoxLayout()
    vBox.addWidget(button)
    vBox.addWidget(comboBox)
    hBox = QHBoxLayout()
    hBox.addLayout(vBox)
    hBox.addWidget(helpTextDisplay)
    self.setLayout(hBox)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52005994_52006324_10_16
52005994_52007869_23_29
Title: Data structure for arrays which share some elements -- Python 
----------------------------------------

def __setitem__(self, _y, _val) :
INDENT
    _place = self.ref.d [self.ref.x] [_y] [0]
    self.ref.d [self.ref.x] [_y] [0] = _val
    for i in range(len(self.ref.d)) :
    INDENT
        for b in range(len(self.ref.d [i])) :
        INDENT
            if self.ref.d [i] [b] [0] == _place :
            INDENT
                self.ref.d [i] [b] = [_val]
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def __setitem__(self, index, value) :
INDENT
    item = super().__getitem__(index)
    if isinstance(item, Intersection) :
    INDENT
        item.value = value
    DEDENT
    else :
    INDENT
        super().__setitem__(index, value)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52010524_52010823_14_24
52010524_52010823_26_42
Title: widgets placement in tabs 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.x, self.y, self.w, self.h = 0, 0, 300, 200
    self.setGeometry(self.x, self.y, self.w, self.h)
    self.window = MainWindow(self)
    self.setCentralWidget(self.window)
    self.setWindowTitle("Window title")
    self.show()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(GeneralWidget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    button_start = QtWidgets.QPushButton("start")
    button_stop = QtWidgets.QPushButton("stop")

    button_start.setToolTip("This is a tooltip for the button!")
    button_start.clicked.connect(self.on_click)
    button_stop.clicked.connect(self.on_click)
    lay.addWidget(button_start)
    lay.addWidget(button_stop)
    lay.addStretch()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52010524_52010823_14_24
52010524_52010823_53_68
Title: widgets placement in tabs 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.x, self.y, self.w, self.h = 0, 0, 300, 200
    self.setGeometry(self.x, self.y, self.w, self.h)
    self.window = MainWindow(self)
    self.setCentralWidget(self.window)
    self.setWindowTitle("Window title")
    self.show()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(OptionsWidget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    hlay = QtWidgets.QHBoxLayout()
    lay.addLayout(hlay)
    lay.addStretch()
    label_language = QtWidgets.QLabel("Language")
    combo_language = QtWidgets.QComboBox(self)
    combo_language.addItem("item1")
    combo_language.addItem("item2")
    hlay.addWidget(label_language)
    hlay.addWidget(combo_language)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52010524_52010823_14_24
52010524_52010823_70_84
Title: widgets placement in tabs 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.x, self.y, self.w, self.h = 0, 0, 300, 200
    self.setGeometry(self.x, self.y, self.w, self.h)
    self.window = MainWindow(self)
    self.setCentralWidget(self.window)
    self.setWindowTitle("Window title")
    self.show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super(MainWindow, self).__init__(parent)
    layout = QtWidgets.QVBoxLayout(self)

    tab_holder = QtWidgets.QTabWidget()
    tab_1 = GeneralWidget()
    tab_2 = OptionsWidget()
    tab_holder.addTab(tab_1, "General")
    tab_holder.addTab(tab_2, "Options")
    layout.addWidget(tab_holder)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52010524_52010823_26_42
52010524_52010823_53_68
Title: widgets placement in tabs 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(GeneralWidget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    button_start = QtWidgets.QPushButton("start")
    button_stop = QtWidgets.QPushButton("stop")

    button_start.setToolTip("This is a tooltip for the button!")
    button_start.clicked.connect(self.on_click)
    button_stop.clicked.connect(self.on_click)
    lay.addWidget(button_start)
    lay.addWidget(button_stop)
    lay.addStretch()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(OptionsWidget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    hlay = QtWidgets.QHBoxLayout()
    lay.addLayout(hlay)
    lay.addStretch()
    label_language = QtWidgets.QLabel("Language")
    combo_language = QtWidgets.QComboBox(self)
    combo_language.addItem("item1")
    combo_language.addItem("item2")
    hlay.addWidget(label_language)
    hlay.addWidget(combo_language)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52010524_52010823_26_42
52010524_52010823_70_84
Title: widgets placement in tabs 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(GeneralWidget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    button_start = QtWidgets.QPushButton("start")
    button_stop = QtWidgets.QPushButton("stop")

    button_start.setToolTip("This is a tooltip for the button!")
    button_start.clicked.connect(self.on_click)
    button_stop.clicked.connect(self.on_click)
    lay.addWidget(button_start)
    lay.addWidget(button_stop)
    lay.addStretch()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super(MainWindow, self).__init__(parent)
    layout = QtWidgets.QVBoxLayout(self)

    tab_holder = QtWidgets.QTabWidget()
    tab_1 = GeneralWidget()
    tab_2 = OptionsWidget()
    tab_holder.addTab(tab_1, "General")
    tab_holder.addTab(tab_2, "Options")
    layout.addWidget(tab_holder)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52010524_52010823_53_68
52010524_52010823_70_84
Title: widgets placement in tabs 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(OptionsWidget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    hlay = QtWidgets.QHBoxLayout()
    lay.addLayout(hlay)
    lay.addStretch()
    label_language = QtWidgets.QLabel("Language")
    combo_language = QtWidgets.QComboBox(self)
    combo_language.addItem("item1")
    combo_language.addItem("item2")
    hlay.addWidget(label_language)
    hlay.addWidget(combo_language)

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super(MainWindow, self).__init__(parent)
    layout = QtWidgets.QVBoxLayout(self)

    tab_holder = QtWidgets.QTabWidget()
    tab_1 = GeneralWidget()
    tab_2 = OptionsWidget()
    tab_holder.addTab(tab_1, "General")
    tab_holder.addTab(tab_2, "Options")
    layout.addWidget(tab_holder)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52011435_52011533_2_15
52011435_52011576_1_7
Title: How to make a function that can handle single inputs or lists of inputs 
----------------------------------------

def square(x) :
INDENT
    if isinstance(x, int) :
    INDENT
        return x ** 2
    DEDENT
    elif isinstance(x, list) :
    INDENT
        return [square(b) for b in x]
    DEDENT
    else :
    INDENT
        raise ValueError("Only ints and list of ints/list of ints allowed")
    DEDENT
DEDENT
----------------------------------------

def square(x) :
INDENT
    try :
    INDENT
        y = [e ** 2 for e in x]
    DEDENT
    except TypeError :
    INDENT
        y = x ** 2
    DEDENT
    return y
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52018496_52019318_17_26
52018496_52019318_4_15
Title: Can't get to things in tkinter made in class 
----------------------------------------

def __init__(self, parent) :
INDENT
    self.myParent = parent
    self.myGame = tk.Frame(parent)
    self.myGame.grid()
    self.statsFrame = tk.Frame(self.myGame)
    self.statsFrame.grid()
    self.make_stat("Strength:", "stat1", 1, 1)
DEDENT
----------------------------------------

def __init__(self, availablePoints) :
INDENT
    self.name = ""
    self.experience = 0
    self.level = 0
    self.gold = 0
    self.stat1 = 0
    self.stat2 = 0
    self.stat3 = 0
    self.stat4 = 0
    self.stat5 = 0
    self.availablePoints = availablePoints
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52020775_52021264_29_53
52020775_52022228_64_95
Title: Solving a non-linear system of equations in Python using Newton's Method 
----------------------------------------

def iterative_newton(fun, x_init, jacobian) :
INDENT
    max_iter = 50
    epsilon = 1e-8
    x_last = x_init
    for k in range(max_iter) :
    INDENT

        J = np.array(jacobian(x_last))
        F = np.array(fun(x_last))
        diff = np.linalg.solve(J, - F)
        x_last = x_last + diff

        if np.linalg.norm(diff) < epsilon :
        INDENT
            print ('convergence!, nre iter:', k)
            break
        DEDENT
    DEDENT
    else :
    INDENT
        print ('not converged')
    DEDENT
    return x_last

DEDENT
----------------------------------------

def iterative_newton(x_init) :
INDENT
    counter = 0
    x_old = x_init

    x_new = newton_method(x_old)

    diff = np.linalg.norm(x_old - x_new)

    while diff > 0.0000000000001 :
    INDENT

        counter += 1

        x_new = newton_method(x_old)

        diff = np.linalg.norm(x_old - x_new)

        x_old = x_new
    DEDENT
    convergent_val = x_new

    return convergent_val

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52024685_52027417_6_52
52024685_52054352_7_45
Title: wxPython other way to create Pie Chart 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = u"PlagDetect", pos = wx.DefaultPosition, size = wx.Size(600, 450))
    self.htmlSummary = wx.html2.WebView.New(self)
    page = """
            <!DOCTYPE html>
            <html lang="en"><![CDATA[
            <head>
                <meta charset="UTF-8"><![CDATA[
                <title>Summary</title>
            </head>
            <body>
                <h1>Summary</h1>

                <div id="piechart"><![CDATA[</div>

                <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"><![CDATA[</script>

                <script type="text/javascript"><![CDATA[
                    // Load google charts
                    google.charts.load('current', {'packages':['corechart']});
                    google.charts.setOnLoadCallback(drawChart);

                    // Draw the chart and set the chart values
                    function drawChart() {
                      var data = google.visualization.arrayToDataTable([
                      ['Task', 'Hours per Day'],
                      ['Work', 8],
                      ['Eat', 2],
                      ['TV', 4],
                      ['Gym', 2],
                      ['Sleep', 8]
                    ]);

                      // Optional; add a title and set the width and height of the chart
                      var options = {'title':'My Average Day', 'width':550, 'height':400};

                      // Display the chart inside the <div> element with id="piechart"
                      var chart = new google.visualization.PieChart(document.getElementById('piechart'));
                      chart.draw(data, options);
                    }
                </script>
            </body>
            </html>
        """
    self.htmlSummary.SetPage(page, "")
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, - 1, "Simple Pie Chart")
    panel = wx.Panel(self, - 1, size = (650, 650))
    self._pie = PieCtrl(panel, - 1, wx.DefaultPosition, wx.Size(180, 270))
    self._pie.GetLegend().SetTransparent(True)
    self._pie.GetLegend().SetHorizontalBorder(10)
    self._pie.GetLegend().SetWindowStyle(wx.STATIC_BORDER)
    self._pie.GetLegend().SetLabelFont(wx.Font(10, wx.FONTFAMILY_DEFAULT,
            wx.FONTSTYLE_NORMAL,
            wx.FONTWEIGHT_NORMAL,
            False, "Courier New"))
    self._pie.GetLegend().SetLabelColour(wx.Colour(0, 0, 127))
    self._pie.SetHeight(10)
    self._pie.SetAngle(0.35)
    part = PiePart()
    part.SetLabel("Label_1")
    part.SetValue(300)
    part.SetColour(wx.Colour(200, 50, 50))
    self._pie._series.append(part)
    part = PiePart()
    part.SetLabel("Label 2")
    part.SetValue(200)
    part.SetColour(wx.Colour(50, 200, 50))
    self._pie._series.append(part)
    part = PiePart()
    part.SetLabel("Label 3")
    part.SetValue(50)
    part.SetColour(wx.Colour(50, 50, 200))
    self._pie._series.append(part)
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52026405_52029782_1_19
52026405_52973985_40_59
Title: How to Create Dataframe from AWS Athena using Boto3 get_query_results method 
----------------------------------------

def run_query(query, database, s3_output) :
INDENT
    client = boto3.client('athena')
    response = client.start_query_execution(
        QueryString = query,
        QueryExecutionContext = {
            'Database' : database},
        ResultConfiguration = {
            'OutputLocation' : s3_output,
            })
    print ('Execution ID: ' + response ['QueryExecutionId'])
    return response

DEDENT
----------------------------------------

def run_query(self) :
INDENT
    queries = [self.query]
    for q in queries :
    INDENT
        res = self.load_conf(q)
    DEDENT
    try :
    INDENT
        query_status = None
        while query_status == 'QUEUED' or query_status == 'RUNNING' or query_status is None :
        INDENT
            query_status = self.client.get_query_execution(QueryExecutionId = res ["QueryExecutionId"]) ['QueryExecution'] ['Status'] ['State']
            print (query_status)
            if query_status == 'FAILED' or query_status == 'CANCELLED' :
            INDENT
                raise Exception('Athena query with the string "{}" failed or was cancelled'.format(self.query))
            DEDENT
            time.sleep(10)
        DEDENT
        print ("Query %s finished.")
        df = self.obtain_data()
        return df
    DEDENT
    except Exception as e :
    INDENT
        print (e)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52040538_52043663_6_26
52040538_52044221_6_27
Title: PyQt5 Get selected index in QListView using QStandardItemModel 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    lay = QtWidgets.QVBoxLayout(self)
    self.listView = QtWidgets.QListView()
    self.label = QtWidgets.QLabel("Please Select item in the QListView")
    lay.addWidget(self.listView)
    lay.addWidget(self.label)
    self.entry = QtGui.QStandardItemModel()
    self.listView.setModel(self.entry)
    self.listView.clicked [QtCore.QModelIndex].connect(self.on_clicked)

    for text in ["Itemname1", "Itemname2", "Itemname3", "Itemname4"] :
    INDENT
        it = QtGui.QStandardItem(text)
        self.entry.appendRow(it)
    DEDENT
    self.itemOld = QtGui.QStandardItem("text")
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Widget, self).__init__(parent)
    lay = QtWidgets.QVBoxLayout(self)
    button = QtWidgets.QPushButton("to list")
    button.clicked.connect(self.modelToList)
    self.listView = QtWidgets.QListView()
    lay.addWidget(button)
    lay.addWidget(self.listView)
    self.entry = QtGui.QStandardItemModel()
    self.listView.setModel(self.entry)
    for text in ("Itemname1", "Itemname2", "Itemname3", "Itemname4") :
    INDENT
        it = QtGui.QStandardItem(text)
        self.entry.appendRow(it)
    DEDENT
    self.listView.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
    sm = self.listView.selectionModel()
    for item in (self.entry.item(1), self.entry.item(2)) :
    INDENT
        index = self.entry.indexFromItem(item)
        sm.select(index, QtCore.QItemSelectionModel.Select)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52048071_52048144_5_17
52048071_52048161_5_18
Title: Does addition not work properly if used on indexes? 
----------------------------------------

def teste_dead_1() :
INDENT
    index_1 = 0
    while index_1 < = 3 :
    INDENT
        if Guess_1 [index_1] == Number_2 [index_1] :
        INDENT
            Set_dead_1.add(Number_2 [index_1])
            print (Number_2 [index_1], "is dead.")
        DEDENT
        else :
        INDENT
            pass
        DEDENT
        index_1 += 1
    DEDENT
DEDENT
----------------------------------------

def teste_dead_1() :
INDENT
    index_1 = 0
    Guess1Length = len(Guess_1)
    Number2Length = len(Guess_1)
    if Guess1Length < 3 or Number2Length < 3 :
    INDENT
        print ('Input must be more than 3 characters')
        return False
    DEDENT
    while index_1 < = 3 :
    INDENT
        if Guess_1 [index_1] == Number_2 [index_1] :
        INDENT
            Set_dead_1.add(Number_2 [index_1])
        DEDENT
        index_1 += 1
    DEDENT
    for i in Set_dead_1 :
    INDENT
        print (i, "is dead.")
    DEDENT
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52058774_52059776_7_18
52058774_52061408_28_40
Title: Python (Tkinter) Click button to make text appear in entry box? 
----------------------------------------

def __init__(self, root) :
INDENT
    self.root = root
    self.txt_frm = Frame(self.root, width = 900, height = 900, bg = 'khaki')
    self.txt_frm.pack(fill = "both", expand = True)
    button1 = Button(self.txt_frm, text = "Hello", command = self.hello_world)
    button1.grid(column = 0, row = 2, padx = 2, pady = 2)
    button2 = Button(self.txt_frm, text = "Goodbye", command = self.goodbye_world)
    button2.grid(column = 1, row = 2, padx = 2, pady = 2)
    self.entry_var = StringVar()
    entry = Entry(self.txt_frm, textvariable = self.entry_var)
    entry.grid(column = 0, row = 3, columnspan = 2, padx = 2, pady = 2)
DEDENT
----------------------------------------

def __init__(self, root) :
INDENT
    self.root = root
    self.txt_frm = Frame(self.root, width = 900, height = 900)
    self.txt_frm.pack(fill = "both", expand = True)
    button1 = Button(self.txt_frm, text = "HELLO", command = self.hello_world)
    button1.grid(column = 0, row = 2, padx = 2, pady = 2)
    button2 = Button(self.txt_frm, text = "GOODBYE", command = self.goodbye_world)
    button2.grid(column = 1, row = 2, padx = 2, pady = 2)
    button3 = Button(self.txt_frm, text = "NEW", command = self.new_world, bg = "red", fg = "white")
    button3.grid(column = 2, row = 2, padx = 2, pady = 2)
    self.label = Label(self.txt_frm, text = '')
    self.label.grid(column = 0, row = 3)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5207305_5210914_22_34
5207305_5210914_5_15
Title: Moving a QGraphicsItem around a central point in PyQt4 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainForm, self).__init__(parent)
    scene = QtGui.QGraphicsScene(- 50, - 50, 600, 600)
    ellipseItem = TestEclipseItem()
    scene.addItem(ellipseItem)
    view = QtGui.QGraphicsView()
    view.setScene(scene)
    view.setGeometry(QtCore.QRect(0, 0, 400, 200))
    self.setCentralWidget(view)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QGraphicsPixmapItem.__init__(self, parent)
    self.setFlag(QtGui.QGraphicsItem.ItemIsMovable, True)
    self.setFlag(QtGui.QGraphicsItem.ItemIsSelectable, True)

    self.move_restrict_rect = QtCore.QRectF(20, 20, 200, 200)
    self.setRect(QtCore.QRectF(50, 50, 50, 50))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52079640_52079928_1_14
52079640_52080807_1_20
Title: Build hierarchized strings 
----------------------------------------

def _build_hierarchy(* keys) :
INDENT
    def combinations(d, current = []) :
    INDENT
        if len(current) == len(keys) :
        INDENT
            yield current
        DEDENT
        else :
        INDENT
            if current :
            INDENT
                yield current
            DEDENT
            for i in d :
            INDENT
                if (not current and keys [0] == i) or i not in current :
                INDENT
                    if len(current) + 1 < 3 or all(c == d for c, d in zip(keys, current [: len(current) + 1])) :
                    INDENT
                        for c in combinations(d, current + [i]) :
                        INDENT
                            yield c
                        DEDENT
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return sorted([i for i in combinations(keys) if i [0] == keys [0]], key = len)
DEDENT
----------------------------------------

def _build_hierarchy(* keys) :
INDENT
    key_len = len(keys)
    result = []
    if key_len < 1 :
    INDENT
        return result
    DEDENT
    result.append(keys [0])
    for i in range(2, key_len + 1) :
    INDENT

        pre_i = i - 1
        count = key_len - pre_i
        pre_str = ':'.join(keys [0 : pre_i])
        for j in range(0, count) :
        INDENT
            result.append(pre_str + ':' + keys [j + pre_i])
        DEDENT
    DEDENT
    return result

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52085001_52085187_1_17
52085001_52085317_15_38
Title: Make the program run faster 
----------------------------------------

def check_profanity(text_to_check) :
INDENT
    flag = 0
    super_word = ''
    for i in range(len(text_to_check)) :
    INDENT
        if i < 100 and i < len(text_to_check) :
        INDENT
            super_word = super_word + " " + word
        DEDENT
        else :
        INDENT
            connection = urllib.request.urlopen("http://www.wdylike.appspot.com/?q=" + super_word)
            super_word = ''
            output = connection.read()
            if b"true" in output :
            INDENT
                flag = flag + 1
                break
            DEDENT
        DEDENT
    DEDENT
    if flag > 0 :
    INDENT
        print ("profanity alert")
    DEDENT
    else :
    INDENT
        print ("the text has no curse words")
    DEDENT
DEDENT
----------------------------------------

def check_profanity(text_to_check) :
INDENT
    if not isinstance(text_to_check, (set, frozenset)) :
    INDENT
        text_to_check = set(text_to_check)

    DEDENT
    text_to_check -= known_good_words

    has_profanity = not known_bad_words.isdisjoint(text_to_check)
    while not has_profanity and text_to_check :
    INDENT
        block_to_check = frozenset(itertools.islice(text_to_check, 100))
        text_to_check -= block_to_check
        with urllib.request.urlopen("http://www.wdylike.appspot.com/?q=" + ' '.join(block_to_check)) as connection :
        INDENT
            output = connection.read()
        DEDENT
        has_profanity = b"true" in output
    DEDENT
    if has_profanity :
    INDENT
        print ("profanity alert")
    DEDENT
    else :
    INDENT
        print ("the text has no curse words")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52085001_52085187_1_17
52085001_52085393_9_24
Title: Make the program run faster 
----------------------------------------

def check_profanity(text_to_check) :
INDENT
    flag = 0
    super_word = ''
    for i in range(len(text_to_check)) :
    INDENT
        if i < 100 and i < len(text_to_check) :
        INDENT
            super_word = super_word + " " + word
        DEDENT
        else :
        INDENT
            connection = urllib.request.urlopen("http://www.wdylike.appspot.com/?q=" + super_word)
            super_word = ''
            output = connection.read()
            if b"true" in output :
            INDENT
                flag = flag + 1
                break
            DEDENT
        DEDENT
    DEDENT
    if flag > 0 :
    INDENT
        print ("profanity alert")
    DEDENT
    else :
    INDENT
        print ("the text has no curse words")
    DEDENT
DEDENT
----------------------------------------

def check_profanity(text) :
INDENT
    number_of_words = 200
    word_lists = [text [x : x + number_of_words] for x in range(0, len(text), number_of_words)]
    flag = False
    for word_list in word_lists :
    INDENT
        connection = urllib.request.urlopen("http://www.wdylike.appspot.com/?q=" + "%20".join(word_list))
        output = connection.read()
        if b"true" in output :
        INDENT
            flag = True
            break
        DEDENT
        connection.close()
    DEDENT
    if flag :
    INDENT
        print ("profanity alert")
    DEDENT
    else :
    INDENT
        print ("the text has no curse words")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52085001_52085317_15_38
52085001_52085393_9_24
Title: Make the program run faster 
----------------------------------------

def check_profanity(text_to_check) :
INDENT
    if not isinstance(text_to_check, (set, frozenset)) :
    INDENT
        text_to_check = set(text_to_check)

    DEDENT
    text_to_check -= known_good_words

    has_profanity = not known_bad_words.isdisjoint(text_to_check)
    while not has_profanity and text_to_check :
    INDENT
        block_to_check = frozenset(itertools.islice(text_to_check, 100))
        text_to_check -= block_to_check
        with urllib.request.urlopen("http://www.wdylike.appspot.com/?q=" + ' '.join(block_to_check)) as connection :
        INDENT
            output = connection.read()
        DEDENT
        has_profanity = b"true" in output
    DEDENT
    if has_profanity :
    INDENT
        print ("profanity alert")
    DEDENT
    else :
    INDENT
        print ("the text has no curse words")
    DEDENT
DEDENT
----------------------------------------

def check_profanity(text) :
INDENT
    number_of_words = 200
    word_lists = [text [x : x + number_of_words] for x in range(0, len(text), number_of_words)]
    flag = False
    for word_list in word_lists :
    INDENT
        connection = urllib.request.urlopen("http://www.wdylike.appspot.com/?q=" + "%20".join(word_list))
        output = connection.read()
        if b"true" in output :
        INDENT
            flag = True
            break
        DEDENT
        connection.close()
    DEDENT
    if flag :
    INDENT
        print ("profanity alert")
    DEDENT
    else :
    INDENT
        print ("the text has no curse words")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52088149_52088222_2_13
52088149_52088522_2_14
Title: Construct tree given root 
----------------------------------------

def t(d, r) :
INDENT
    o = {r : []}
    while d :
    INDENT
        e = d.pop(0)
        if e [1] in o :
        INDENT
            e = e [: : - 1]
        DEDENT
        if e [0] in o :
        INDENT
            o [e [0]].append(e [1])
            o [e [1]] = []
        DEDENT
        else :
        INDENT
            d.append(e)
        DEDENT
    DEDENT
    return o
DEDENT
----------------------------------------

def t(d, r) :
INDENT
    o = {r : []}
    n = []
    for e in d :
    INDENT
        if r in e :
        INDENT
            if e [1] == r :
            INDENT
                e = e [: : - 1]
            DEDENT
            o [e [0]].append(e [1])
        DEDENT
        else :
        INDENT
            n.append(e)
        DEDENT
    DEDENT
    for i in o [r] :
    INDENT
        o.update(t(n, i))
    DEDENT
    return o
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52088392_52088899_5_52
52088392_52103723_4_38
Title: Python even group assigning 
----------------------------------------

def main() :
INDENT
    while True :
    INDENT
        try :
        INDENT
            print ("Welcome to this group picker, follow the instructions and your groups will be picked.")
            groupnum = int(input("How many groups do you want?"))
            peoplenum = int(input("How many people are there?"))
            if groupnum == 'Q' :
            INDENT
                sys.exit(0)
            DEDENT
            print ("Okay, assign everyone a number from 1 to", peoplenum, ".")
            nums = []
            for i in range(1, peoplenum + 1) :
            INDENT
                nums.append(i)
            DEDENT
            ''' Validate number of people vs groups '''
            if peoplenum % groupnum :
            INDENT
                print ("error: You have incorrect number of people to divide them equally")
                sys.exit(1)
            DEDENT
            ''' People per team '''
            peoplePerTeam = int(peoplenum / groupnum)
            ''' Initialize the group'''
            group = {}
            for i in range(1, groupnum + 1) :
            INDENT
                group [i] = set()
            DEDENT
            ''' Loop through the people'''
            for person in nums :
            INDENT
                while True :
                INDENT
                    ''' Find random team '''
                    randomGroup = random.randint(1, groupnum)
                    ''' If team is not filled up yet, then add otherwise find a new team'''
                    if len(group [randomGroup]) < peoplePerTeam :
                    INDENT
                        group [randomGroup].add(person)
                        break
                    DEDENT
                DEDENT
            DEDENT
            ''' Display the team info'''
            for i in range(1, groupnum + 1) :
            INDENT
                print ("Team %s members are %s" % (i, group [i]))
            DEDENT
        DEDENT
        except :
        INDENT
            print ("Error, please follow instructions and enter only numbers.")
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    run = True
    while run :
    INDENT
        print ("\nWelcome to this group picker, follow the" "instructions and your groups will be picked.\n")
        group_amount = int(input("How many groups do you want?\n"))
        people_amount = int(input("How many people are there?\n"))
        print ("\nOkay, assign everyone a number from 1 to " +
            str(people_amount) + " .\n")
        group = list(range(0, group_amount))
        person = list(range(0, people_amount))
        group_size = people_amount / group_amount

        if group_size % 2 ! = 0 :
        INDENT
            reg_group_size = (people_amount - 1) / group_amount
            odd_group_size = ((people_amount - 1) / group_amount) + 1
        DEDENT
        for i in group [0 : - 1] :
        INDENT
            group [i] = reg_group_size
        DEDENT
        group [- 1] = odd_group_size
        for p in person :
        INDENT
            r = random.randint(0, len(group) - 1)
            while group [r] == 0 :
            INDENT
                r = random.randint(0, len(group) - 1)
            DEDENT
            person [p] = r + 1
            group [r] -= 1
            print ("Person " + str(p + 1) + " is in group " +
                str(person [p]) + ".")
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52092332_52092564_3_11
52092332_52093282_1_10
Title: How do I search for a certain character in a text file and say what row and column its in 
----------------------------------------

def find_csv(filename, keyvalue) :
INDENT
    with open(filename, "r", newline = '') as csv_file :
    INDENT
        csv_reader = csv.reader(csv_file)
        for row_idx, row in enumerate(csv_reader) :
        INDENT
            for col_idx, col in enumerate(row) :
            INDENT
                if keyvalue in col :
                INDENT
                    return row_idx, col_idx

                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def find_csv(filename, string_to_find) :
INDENT
    with open(filename, "r") as csv_file :
    INDENT
        line = 0
        for text in csv_file.readlines() :
        INDENT
            line += 1
            char = text.find(string_to_find)
            if char > = 0 :
            INDENT
                return 'string found at line %s, character %s' % (line, char)
            DEDENT
        DEDENT
    DEDENT
    return "string not found"
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52100621_52107088_124_135
52100621_52107088_161_199
Title: Save Qtreewidget item and restore it with selection 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(InfoWidget, self).__init__(parent)
    hlay = QtWidgets.QHBoxLayout(self)
    plabel = QtWidgets.QLabel()
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/circularcolumnnorebard.png")).scaled(230, 230, QtCore.Qt.KeepAspectRatio)
    plabel.setPixmap(pixmap)
    hlay.addWidget(plabel)
    self.ilabel = QtWidgets.QLabel()
    hlay.addWidget(self.ilabel)
    hlay.addStretch()
    self.readSettings()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(CircularDialog, self).__init__(parent)
    grid = QtWidgets.QGridLayout(self)
    self.tree = TreeWidget()
    self.infoWidget = InfoWidget()
    section_lay = QtWidgets.QHBoxLayout()
    section_label = QtWidgets.QLabel("Section name: ")
    section_edit = QtWidgets.QLineEdit('Define en name to section')
    section_lay.addWidget(section_label)
    section_lay.addWidget(section_edit)
    self.tree.currentTextChanged.connect(self.infoWidget.setData)
    button_layout = QtWidgets.QVBoxLayout()
    add_button = QtWidgets.QPushButton("Add")
    add_button.clicked.connect(self.addItem)
    delete_button = QtWidgets.QPushButton("Delete")
    delete_button.clicked.connect(self.removeItem)
    button_layout.addWidget(add_button, alignment = QtCore.Qt.AlignBottom)
    button_layout.addWidget(delete_button, alignment = QtCore.Qt.AlignTop)
    buttonBox = QtWidgets.QDialogButtonBox()
    buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel | QtWidgets.QDialogButtonBox.Ok)
    buttonBox.accepted.connect(self.accept)
    buttonBox.rejected.connect(self.reject)

    self.accepted.connect(self.write_all_data)
    self.rejected.connect(self.write_all_data)
    grid.addLayout(section_lay, 0, 0)
    grid.addWidget(self.tree, 1, 0)
    grid.addLayout(button_layout, 1, 1)
    grid.addWidget(self.infoWidget, 2, 0, 1, 2)
    grid.addWidget(buttonBox, 3, 0, 1, 2)
    self.readSettings()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52100621_52107088_124_135
52100621_52107088_45_53
Title: Save Qtreewidget item and restore it with selection 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(InfoWidget, self).__init__(parent)
    hlay = QtWidgets.QHBoxLayout(self)
    plabel = QtWidgets.QLabel()
    pixmap = QtGui.QPixmap(os.path.join(iconroot, "images/circularcolumnnorebard.png")).scaled(230, 230, QtCore.Qt.KeepAspectRatio)
    plabel.setPixmap(pixmap)
    hlay.addWidget(plabel)
    self.ilabel = QtWidgets.QLabel()
    hlay.addWidget(self.ilabel)
    hlay.addStretch()
    self.readSettings()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(TreeWidget, self).__init__(parent)
    self.currentItemChanged.connect(self.onCurrentItemChanged)
    self.setHeaderLabel('Standard Section Library')
    self.setRootIsDecorated(True)
    self.setAlternatingRowColors(True)
    self.readSettings()
    self.expandAll()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52100621_52107088_161_199
52100621_52107088_45_53
Title: Save Qtreewidget item and restore it with selection 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(CircularDialog, self).__init__(parent)
    grid = QtWidgets.QGridLayout(self)
    self.tree = TreeWidget()
    self.infoWidget = InfoWidget()
    section_lay = QtWidgets.QHBoxLayout()
    section_label = QtWidgets.QLabel("Section name: ")
    section_edit = QtWidgets.QLineEdit('Define en name to section')
    section_lay.addWidget(section_label)
    section_lay.addWidget(section_edit)
    self.tree.currentTextChanged.connect(self.infoWidget.setData)
    button_layout = QtWidgets.QVBoxLayout()
    add_button = QtWidgets.QPushButton("Add")
    add_button.clicked.connect(self.addItem)
    delete_button = QtWidgets.QPushButton("Delete")
    delete_button.clicked.connect(self.removeItem)
    button_layout.addWidget(add_button, alignment = QtCore.Qt.AlignBottom)
    button_layout.addWidget(delete_button, alignment = QtCore.Qt.AlignTop)
    buttonBox = QtWidgets.QDialogButtonBox()
    buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel | QtWidgets.QDialogButtonBox.Ok)
    buttonBox.accepted.connect(self.accept)
    buttonBox.rejected.connect(self.reject)

    self.accepted.connect(self.write_all_data)
    self.rejected.connect(self.write_all_data)
    grid.addLayout(section_lay, 0, 0)
    grid.addWidget(self.tree, 1, 0)
    grid.addLayout(button_layout, 1, 1)
    grid.addWidget(self.infoWidget, 2, 0, 1, 2)
    grid.addWidget(buttonBox, 3, 0, 1, 2)
    self.readSettings()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(TreeWidget, self).__init__(parent)
    self.currentItemChanged.connect(self.onCurrentItemChanged)
    self.setHeaderLabel('Standard Section Library')
    self.setRootIsDecorated(True)
    self.setAlternatingRowColors(True)
    self.readSettings()
    self.expandAll()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52118391_52118462_1_13
52118391_52118540_1_11
Title: Stuck with loops in python - only returning first value 
----------------------------------------

def func1(x) :
INDENT
    new_str = ""
    for (a, b) in enumerate(x) :
    INDENT
        if a % 2 == 0 :
        INDENT
            new_str += b.upper()
        DEDENT
        else :
        INDENT
            new_str += b.lower()

        DEDENT
    DEDENT
    return new_str
DEDENT
----------------------------------------

def func1(x) :
INDENT
    result = []
    for (a, b) in enumerate(x) :
    INDENT
        if (a + 1) % 2 == 0 :
        INDENT
            result.append(b.upper())
        DEDENT
        else :
        INDENT
            result.append(b.lower())
        DEDENT
    DEDENT
    return "".join(result)

    print func1('Testing Testing')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52119441_52125495_4_15
52119441_52137691_1_25
Title: Writing to excel - Python 
----------------------------------------

def write_captions_to_excel_file(data_list, description_path, headers) :
INDENT
    workbook = xlsxwriter.Workbook(os.path.join(description_path, 'all_captions.xlsx'))
    worksheet = workbook.add_worksheet()
    for row, data in enumerate(data_list) :
    INDENT
        for col, header in enumerate(headers) :
        INDENT
            if header == 'Titles' :
            INDENT
                text_to_write = data [header]
            DEDENT
            else :
            INDENT
                text_to_write = data [header].h1.getText().capitalize()
            DEDENT
            worksheet.write(row + 1, col, text_to_write)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def write_captions_to_excel_file(self, description_path, firstlists, secondlists, thirdlists) :
INDENT
    print ('writing to excel')
    workbook = Workbook(os.path.join(description_path, 'all_captions.xlsx'))
    worksheet = workbook.add_worksheet()
    row = 0
    worksheet.write(row, 0, 'Image name')
    worksheet.write(row, 1, 'Titles')
    worksheet.write(row, 2, 'Dates')
    row += 1
    for index, firstlist in enumerate(firstlists) :
    INDENT
        worksheet.write(row, 0, firstlist)
        print (firstlist)
        row += 1
    DEDENT
    row = 1
    for secondlist in secondlists :
    INDENT
        worksheet.write(row, 1, secondlist)
        print (secondlist)
        row += 1
    DEDENT
    row = 1
    for thirdlist in thirdlists :
    INDENT
        worksheet.write(row, 2, thirdlist)
        print (thirdlist)
        row += 1
    DEDENT
    sleep(3)
    workbook.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52125671_52125873_1_10
52125671_52125929_1_16
Title: Working principle between 'for' and 'while' loops in python 
----------------------------------------

def show_magicians(mag_names) :
INDENT
    print ("Here is the name of the magicians")
    print ("The old list is :", mag_names)
    for magician in mag_names [:] :
    INDENT
        full_name = mag_names.pop()
        printed_list.append(full_name.title())
        print ("The name of the magician is ", full_name.title())
    DEDENT
    print ("The old list now :", mag_names)
    print ("The new list is :", printed_list)
DEDENT
----------------------------------------

def show_magicians(magicians) :
INDENT
    print ("Here is the name of the magicians")
    print ("The old list is :", magicians)
    while magicians :
    INDENT
        full_name = magicians.pop()
        printed_list.append(full_name.title())
        print ("The name of the magician is ", full_name.title())
    DEDENT
    print ("The old list now :", magicians)
    print ("The new list is :", printed_list)
    print ("***********With for loop******************")
    for magician in printed_list :
    INDENT
        printed_list_new.append(magician)
        print ("The name of the magician is ", magician)
    DEDENT
    printed_list [:] = []
    print ("The old list now:", printed_list)
    print ("The new list now:", printed_list_new)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52136997_52137546_15_35
52136997_52150701_41_52
Title: "Python beginner problems - Tkinter Threading and bs4 module" 
----------------------------------------

def repeat() :
INDENT
    threading.Timer(10, repeat).start()
    link = 'https://www.daemu.cz/zebricky/online/'
    request = urllib.request.Request(link, headers = {'User-Agent' : 'Mozilla/5.0'})
    source = urllib.request.urlopen(request).read()

    soup = bs.BeautifulSoup(source, "lxml")
    table = soup.table
    table_rows = table.find_all('tr')
    for tr in table_rows :
    INDENT
        td = tr.find_all('td')
        row = [i.text for i in td]
    DEDENT
    if gm in row and label.cget('text') == '-' :
    INDENT
        label.config(text = 'GM je ONLINE!')
    DEDENT
    elif gm not in row and label.cget('text') == 'GM je ONLINE!' :
    INDENT
        label.config(text = '-')

    DEDENT
DEDENT
----------------------------------------

def repeat() :
INDENT
    thread = threading.Timer(10, repeat)
    try :
    INDENT
        check()
        thread.start()
        root.update()
    DEDENT
    except KeyboardInterrupt :
    INDENT
        root.destroy()
        thread.cancel()
        pass
    DEDENT
    pass
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52142950_52143265_37_58
52142950_52143265_8_14
Title: QFrame is not taking QWidget as parent? 
----------------------------------------

def __init__(self, message = None) :
INDENT
    QtGui.QWidget.__init__(self, flags = QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint)
    _desktop = QtGui.QApplication.desktop()
    size = _desktop.screenGeometry().size()
    self.resize(size.width() * 25 / 100, size.height() * 3 / 100)
    self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
    self.main_layout = QtGui.QVBoxLayout(self)
    self.move(size.width() - (size.width() * 25 / 100) - 10, 50)
    self.main_layout.setContentsMargins(0, 0, 0, 0)
    self.main_layout.setSpacing(0)
    self.label = QtGui.QLabel(message)
    self.label.setStyleSheet("color: lightgreen; font: 14px;")
    self.label.setIndent(20)
    self.main_layout.addWidget(self.label)
    cross = CloseCrosss(parent = self)
    cross.clicked.connect(self.close)

DEDENT
----------------------------------------

def __init__(self, side = 10, parent = None) :
INDENT
    QtGui.QFrame.__init__(self, parent)
    self._side = side
    self.setFixedSize(side, side)
    if parent :
    INDENT
        parent.installEventFilter(self)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52147276_52147357_4_12
52147276_52147363_4_11
Title: Can we access class method variable using dot notation in python 
----------------------------------------

def test(self, name) :
INDENT
    var = 5
    var2 = 10
    dic = {"Ada" : "adada"}
    print "asdfdsadv"
    var1 = "Ada"
    var2 = "asada"
    return locals()
DEDENT
----------------------------------------

def test(self, name) :
INDENT
    var = 5
    var2 = 10
    dic = {"Ada" : "adada"}
    print "asdfdsadv"
    self.var1 = "Ada"
    var2 = "asada"
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52156259_52156315_9_16
52156259_52156851_8_14
Title: generating a four digit list without repeats 
----------------------------------------

def compnumber(compnum) :
INDENT
    while len(compnum) ! = 4 :
    INDENT
        compx = random.randint(0, 9)
        if compx not in compnum :
        INDENT
            compnum.append(compx)
        DEDENT
    DEDENT
    return compx, compnum

DEDENT
----------------------------------------

def compnumber(compnum) :
INDENT
    for i in range(4) :
    INDENT
        compx = random.randint(0, 9)
        while compx in compnum :
        INDENT
            compx = random.randint(0, 9)
        DEDENT
        compnum.append(compx)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52156259_52156440_5_11
52156259_52156851_8_14
Title: generating a four digit list without repeats 
----------------------------------------

def compnumber(ur_list) :
INDENT
    while len(ur_list) < 4 :
    INDENT
        compx = random.randint(0, 9)
        if compx not in ur_list :
        INDENT
            ur_list.append(compx)
        DEDENT
    DEDENT
    return ur_list
DEDENT
----------------------------------------

def compnumber(compnum) :
INDENT
    for i in range(4) :
    INDENT
        compx = random.randint(0, 9)
        while compx in compnum :
        INDENT
            compx = random.randint(0, 9)
        DEDENT
        compnum.append(compx)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5216162_21539157_5_16
5216162_7394475_10_15
Title: How to create list field in django 
----------------------------------------

def to_python(self, value) :
INDENT
    if not value :
    INDENT
        value = []
    DEDENT
    if isinstance(value, list) :
    INDENT
        return value
    DEDENT
    converted = ast.literal_eval(value)
    if not isinstance(converted, list) :
    INDENT
        raise ValueError('Value "%s" not a list' % converted)
    DEDENT
    return converted
DEDENT
----------------------------------------

def to_python(self, value) :
INDENT
    if not value : return
    if isinstance(value, list) :
    INDENT
        return value
    DEDENT
    return value.split(self.token)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5218895_13277359_1_11
5218895_26352809_1_14
Title: Python nested functions variable scoping 
----------------------------------------

def outer() :
INDENT
    a = 0
    b = 1
    def inner() :
    INDENT
        print a
        print b
    DEDENT
    inner()
DEDENT
----------------------------------------

def outer(recurse = 2) :
INDENT
    if 0 == recurse :
    INDENT
        return
    DEDENT
    def inner() :
    INDENT
        inner.attribute += 1
    DEDENT
    inner.attribute = 0
    inner()
    inner()
    outer(recurse - 1)
    inner()
    print "inner.attribute =", inner.attribute
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52189954_52190033_2_12
52189954_52190105_3_11
Title: the biggest power of input number under 500 
----------------------------------------

def function(n) :
INDENT
    x = 1
    y = n ** x
    while y < 500 :
    INDENT
        x += 1
        y = n ** x

    DEDENT
    return n, x - 1, n ** (x - 1)

DEDENT
----------------------------------------

def function(n) :
INDENT
    x = 1
    if not n :
    INDENT
        return 0
    DEDENT
    while n ** x < 500 :
    INDENT
        y = n ** x
        x += 1
    DEDENT
    return y
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52189954_52190033_2_12
52189954_52228665_3_12
Title: the biggest power of input number under 500 
----------------------------------------

def function(n) :
INDENT
    x = 1
    y = n ** x
    while y < 500 :
    INDENT
        x += 1
        y = n ** x

    DEDENT
    return n, x - 1, n ** (x - 1)

DEDENT
----------------------------------------

def function(n) :
INDENT
    if n == 500 :
    INDENT
        return 1

    DEDENT
    power = int(math.log(500) / math.log(n))
    return n ** power
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52189954_52190105_3_11
52189954_52228665_3_12
Title: the biggest power of input number under 500 
----------------------------------------

def function(n) :
INDENT
    x = 1
    if not n :
    INDENT
        return 0
    DEDENT
    while n ** x < 500 :
    INDENT
        y = n ** x
        x += 1
    DEDENT
    return y
DEDENT
----------------------------------------

def function(n) :
INDENT
    if n == 500 :
    INDENT
        return 1

    DEDENT
    power = int(math.log(500) / math.log(n))
    return n ** power
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
52201024_52203855_38_56
52201024_52203855_75_82
Title: Update one sprite among a group of sprites [Pygame] 
----------------------------------------

def __init__(self, units, * groups) :
INDENT
    pygame.sprite.Sprite.__init__(self, * groups)

    self.units = units

    self.image = pygame.Surface(TILE_SIZE)
    self.image.set_colorkey((43, 43, 43))
    self.image.fill((43, 43, 43))
    self.rect = self.image.get_rect()
    self.selected_image = self.image.copy()
    pygame.draw.rect(self.image, pygame.Color('red'), self.image.get_rect(), 4)
    pygame.draw.rect(self.selected_image, pygame.Color('purple'), self.image.get_rect(), 4)
    self.base_image = self.image
    self.selected = None
DEDENT
----------------------------------------

def __init__(self, * groups) :
INDENT
    pygame.sprite.Sprite.__init__(self, * groups)
    self.image = pygame.Surface(TILE_SIZE)
    self.image.fill(GREEN)
    self.pos = random.randint(0, COLUMNS), random.randint(0, ROWS)
    self.rect = self.image.get_rect(topleft = posToScreen(self.pos))
    self.target = None
DEDENT
----------------------------------------

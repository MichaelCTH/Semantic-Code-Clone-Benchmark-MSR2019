$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49767563_49770754_17_49
49767563_49787329_22_36
Title: Python3 requests post correctly but get nothing(but by browser is ok) 
----------------------------------------

def disease_json() :
INDENT
    host = 'https://baike.baidu.com'
    target = host + '/wikitag/api/getlemmas'
    headers = {
        'Accept' : 'application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding' : 'gzip, deflate, br',
        'Accept-Language' : 'zh-CN,zh;q=0.8',
        'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36',
        'X-Requested-With' : 'XMLHttpRequest',
        'content-type' : "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
        'Referer' : 'https://baike.baidu.com/wikitag/taglist?tagId=75953',
        'Origin' : 'https://baike.baidu.com',
        'Connection' : 'keep-alive',
        'Host' : 'baike.baidu.com'}
    forms = {
        'limit' : '24',
        'timeout' : '3000',
        'filterTags' : '[]',
        'tagId' : '75953',
        'fromLemma' : 'false',
        'contentLength' : '40',
        'page' : '0',
        }
    payload = encode_multipart_data(forms)
    resp = requests.post(url = target, data = payload, headers = headers)
    print (resp.text)
DEDENT
----------------------------------------

def disease_json(times = - 1) :
INDENT
    times += 1
    response = get_cookies()
    if response.status_code == 302 :
    INDENT
        session = requests.session()
        session.cookies = http.cookiejar.LWPCookieJar(filename = 'cookie')
        session.cookies.load(ignore_discard = True)
        url = response.headers ['Location']
        response = session.post(url, headers = headers, data = payload, allow_redirects = False)
    DEDENT
    json_data = response.text
    print (json.loads(json_data))
    print (times)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49769490_49770134_1_10
49769490_49770171_2_13
Title: How to change outer function variabe? 
----------------------------------------

def f1() :
INDENT
    f1_a = ['f1_a']
    def f2() :
    INDENT
        f2_a = 'f2_a'
        print 'f2_a={:s}'.format(f2_a)
        print 'f1_a={:s}'.format(f1_a [0])
        f1_a [0] = 'f1f2_a'
    DEDENT
    f2()
    print 'f1_a={:s}'.format(f1_a [0])
DEDENT
----------------------------------------

def f1() :
INDENT
    emp = emptyClass()
    emptyClass.f1_a = 'f1_a'
    def f2() :
    INDENT
        f2_a = 'f2_a'
        print ('f2_a={:s}'.format(f2_a))
        print ('f1_a={:s}'.format(emptyClass.f1_a))
        emptyClass.f1_a = 'f1f2_a'
    DEDENT
    f2()
    print ('f1_a={:s}'.format(emptyClass.f1_a))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49784195_49785060_40_51
49784195_49785949_33_45
Title: Tic Tac Toe Game using Turtle 
----------------------------------------

def mouse(x, y) :
INDENT
    for key in BOXES :
    INDENT
        minx, miny, maxx, maxy = BOXES [key]
        if (minx < = x < = maxx) and (miny < = y < = maxy) :
        INDENT
            print (key)
            return key
        DEDENT
    DEDENT
    print ('None')
    return None
DEDENT
----------------------------------------

def mouse(self, box, i, j) :
INDENT
    box.onclick(None)

    box.hideturtle()
    box.color('black')
    box.sety(box.ycor() - FONT_SIZE / 2)
    box.write(self.turn, align = 'center', font = FONT)
    self.board [j] [i] = self.turn
    self.turn = ['X', 'O'] [self.turn == 'X']
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49789827_49790059_24_35
49789827_49790059_6_18
Title: QPixmap: How to increase the size of the picture in addPixmap? 
----------------------------------------

def __init__(self) :
INDENT
    super(Example, self).__init__()
    centralWidget = QWidget()
    self.setCentralWidget(centralWidget)
    lay = QVBoxLayout(centralWidget)
    gv = MyGraphicsView()
    button = QPushButton("scale")
    lay.addWidget(gv)
    lay.addWidget(button)
    button.clicked.connect(gv.scale_pixmap)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(MyGraphicsView, self).__init__()
    scene = QGraphicsScene(self)
    self.m = QPixmap("exit.png")
    self.item = scene.addPixmap(self.m)
    self.item.setTransformOriginPoint(self.item.boundingRect().center())
    self.setScene(scene)
    self.setCacheMode(QGraphicsView.CacheBackground)
    self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
    self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49801901_49802083_2_15
49801901_49802206_33_46
Title: How to add items to a class based on user input 
----------------------------------------

def add_member() :
INDENT
    print ()
    print ("Welcome to the team!")
    print ()
    first_name = input("What's your first name?\n")
    second_name = input("What's your surname?\n")
    address = input("Where do you live?\n")

    if Team.members :
    INDENT
        unique_id = max(Team.members, key = lambda m : m.user_id) + 1
    DEDENT
    else :
    INDENT
        unique_id = 0
    DEDENT
    Team(unique_id, first_name, second_name, address)
DEDENT
----------------------------------------

def add_member() :
INDENT
    print ()
    print ("Welcome to the team!")
    print ()
    first_name = input("What's your first name?\n")
    second_name = input("What's your surname?\n")
    address = input("Where do you live?\n")

    all_users.append(Team(first_name, second_name, address))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49809264_49810198_29_50
49809264_49810198_8_17
Title: Python tkinter button widget executing function outside of parent Toplevel widget class 
----------------------------------------

def __init__(self, master, * args, ** kwargs) :
INDENT
    tk.Toplevel.__init__(self, master, * args, ** kwargs)
    self.title('User Login')
    self.resizable(width = False, height = False)
    self.attributes('-topmost', True)
    self.geometry('230x200+625+275')
    self.title('User Login')
    self.grab_set()
    self.transient(master)
    userlabel = tk.Label(self, text = "Employee ID:", font = 'arial 10 bold')
    userlabel.place(x = 25, y = 5)
    self.user_entry = tk.Entry(self, relief = 'groove', width = 25, font = 'arial 10', bd = 1)
    self.user_entry.place(x = 25, y = 30)
    passwordlabel = tk.Label(self, text = "Password:", font = 'arial 10 bold')
    passwordlabel.place(x = 25, y = 70)
    self.password_entry = tk.Entry(self, relief = 'groove', width = 25, font = 'arial 10', show = "*", bd = 1)
    self.password_entry.place(x = 25, y = 95)
    self.warn = tk.Label(self, font = 'arial 10 bold')
    self.warn.place(x = 25, y = 135)
    button = tk.Button(self, text = "Login", relief = 'groove', width = 12, font = 'arial 15 bold', justify = 'center', command = self.login)
    button.place(x = 37, y = 140)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title('Pilot Flight and Duty Tracker')
    self.geometry('1000x700+250+50')
    self.resizable(width = False, height = False)
    self._frame = None
    Login_Window = Login(self)
    Users = [('Admin', 'AdminPassword')]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4982138_4982519_39_46
4982138_4982519_67_76
Title: How can I use a returned value to open up another instance of a class in Python? 
----------------------------------------

def run(self) :
INDENT
    print textwrap.dedent("""
            It's 6 pm and you have just found out that you need to get to Chicago
            by tomorrow morning for a meeting! How will you get there?
        """)
    inp = getters.getOneOf('car', 'bus', 'train', 'airplane')
    return Room.getroom(inp)
DEDENT
----------------------------------------

def run(self) :
INDENT
    print (random.choice((
                "Oh so sorry you died, you are pretty bad at this.",
                "Too bad, you're dead buddy.",
                "The end is here.",
                "No more playing for you, you're dead.")))
    return None

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49832036_49835682_15_45
49832036_49835682_5_13
Title: How to make a slot or signal between pushbutton and tab widget in pyQt 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    bar = QMenuBar(self)
    menu = bar.addMenu('File')
    action = QAction('Close activ tab', self)
    menu.addAction(action)
    action.triggered.connect(self.closeActivTab)
    self.tabwdg = QTabWidget()
    self.tabwdg.setTabsClosable(True)
    self.tabWidget = MainWidget('this is the first page')
    self.tabwdg.addTab(self.tabWidget, 'first')
    self.tabWidget.btn.clicked.connect(self.numTab)
    self.tabWidget = MainWidget('this is the second page')
    self.tabwdg.addTab(self.tabWidget, 'second')
    self.tabWidget.btn.clicked.connect(self.numTab)
    self.tabWidget = MainWidget('this is the third page')
    self.tabwdg.addTab(self.tabWidget, 'third')
    self.tabWidget.btn.clicked.connect(self.numTab)
    self.tabWidget = MainWidget('this is the fourth page')
    self.tabwdg.addTab(self.tabWidget, 'fourth')
    self.tabWidget.btn.clicked.connect(self.numTab)
    self.tabwdg.tabCloseRequested.connect(self.closeTab)
    box = QVBoxLayout()
    box.addWidget(bar)
    box.addWidget(self.tabwdg)
    self.setLayout(box)
DEDENT
----------------------------------------

def __init__(self, textLabel, * args, ** kwargs) :
INDENT
    super(MainWidget, self).__init__(* args, ** kwargs)
    layout = QVBoxLayout(self)
    self.label = QLabel(textLabel, self)
    self.btn = QPushButton('Next', self)
    layout.addWidget(self.label)
    layout.addWidget(self.btn)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49833538_49833624_48_62
49833538_49833834_14_21
Title: Python 3 UnboundLocalError: local variable referenced before assignment in try statement 
----------------------------------------

def main() :
INDENT
    global pubkey, privkey; pubkey = privkey = None
    try :
    INDENT
        if (open("private.pem", "r") and open("public.pem", "r")) == True :
        INDENT

            pubkey, privkey = readKeys()
        DEDENT
    DEDENT
    except :
    INDENT
        (pubkey, privkey) = genKeys()
    DEDENT
    cryptMessage = send('hello world', pubkey)
    print (cryptMessage)
    print (recv(cryptMessage, privkey))
DEDENT
----------------------------------------

def main() :
INDENT
    global pubkey, privkey
    try :
    INDENT
        pubkey, privkey = readKeys()
    DEDENT
    except :
    INDENT
        (pubkey, privkey) = genKeys()

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49834617_49834710_13_19
49834617_49834710_2_9
Title: Getting unexpected error using decorator 
----------------------------------------

def wrapper() :
INDENT
    censorship_list = ["Word", "Word1", "Word2", "Word3"]
    string = func()
    for words in censorship_list :
    INDENT
        if words in string :
        INDENT
            raise ValueError("You are not allowed to use those word(s) in set order: ")
        DEDENT
    DEDENT
    return string
DEDENT
----------------------------------------

def wrapper() :
INDENT
    vowels = "aeiouAEIOU"
    vowel_count = 0
    start_val = func()
    for items in start_val :
    INDENT
        if items in vowels :
        INDENT
            vowel_count += 1
        DEDENT
    DEDENT
    return start_val, vowel_count
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49837756_49837970_1_15
49837756_49843650_21_46
Title: "Python Class Utilizing Turtle object not working on Windows Works on Linux" 
----------------------------------------

def main() :
INDENT
    d = Display()
    prompt = True
    while prompt :
    INDENT
        order = input("What order do you want your fractal? ")
        size = input("What size do you want your fractal? ")
        if order == '' or size == '' :
        INDENT
            prompt = False
        DEDENT
        else :
        INDENT
            d.koch(int(order), int(size))
        DEDENT
        d.penup()
        d.moveTurtle()
        d.pendown()
    DEDENT
    d.getscreen().mainloop()
DEDENT
----------------------------------------

def main() :
INDENT
    d = Display()
    prompt = True
    while prompt :
    INDENT
        order = input("What order do you want your fractal? ")
        if order == '' :
        INDENT
            prompt = False
            continue
        DEDENT
        size = input("What size do you want your fractal? ")
        if size == '' :
        INDENT
            prompt = False
            continue
        DEDENT
        d.screen.tracer(False)
        d.koch(int(order), int(size))
        d.screen.tracer(True)
        d.penup()
        d.moveTurtle()
        d.pendown()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49869287_49925521_1_12
49869287_49929395_5_18
Title: K-Means: assign clusters to new data points 
----------------------------------------

def kmeans_assignment(centroids, points) :
INDENT
    num_centroids, dim = centroids.shape
    num_points, _ = points.shape

    centroids = np.tile(centroids, [num_points, 1]).reshape([num_points, num_centroids, dim])
    points = np.tile(points, [1, num_centroids]).reshape([num_points, num_centroids, dim])

    distances = np.sum(np.square(centroids - points), axis = 2)
    return np.argmin(distances, axis = 1)
DEDENT
----------------------------------------

def kmeans_assignment(centroids, points) :
INDENT
    num_centroids, dim = centroids.shape
    num_points, _ = points.shape

    centroids = np.tile(centroids, [num_points, 1]).reshape([num_points, num_centroids, dim])
    points = np.tile(points, [1, num_centroids]).reshape([num_points, num_centroids, dim])

    distances = np.sum(np.square(centroids - points), axis = 2)
    return np.argmin(distances, axis = 1)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49883623_49883722_1_9
49883623_49883813_1_11
Title: Implementing for loop in an if statement 
----------------------------------------

def smallest_m() :
INDENT
    start = 1
    while True :
    INDENT
        if all(start % i == 0 for i in range(2, 20 + 1)) :
        INDENT
            print (start)
            break
        DEDENT
        else :
        INDENT
            start += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def smallest_m(n) :
INDENT
    for k in range(20, n, 20) :
    INDENT
        match = True
        for i in range(1, 21) :
        INDENT
            if k % i ! = 0 :
            INDENT
                match = False
                break
            DEDENT
        DEDENT
        else :
        INDENT
            if match :
            INDENT
                yield k
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49885813_49887297_19_25
49885813_49887297_5_18
Title: "WebDriverWait throws TimeoutException why?" 
----------------------------------------

def whichID(id1, id2) :
INDENT
    try :
    INDENT
        id_value = WebDriverWait(driver, timeout).until(EC.presence_of_element_located((By.XPATH, "//*[@id='{0}' or @id='{1}']".format(id1, id2)))).get_attribute("id")
        return id_value
    DEDENT
    except TimeoutException :
    INDENT
        return None
    DEDENT
DEDENT
----------------------------------------

def whichID(id1, id2) :
INDENT
    id_value = None
    try :
    INDENT
        WebDriverWait(driver, timeout).until(EC.presence_of_element_located((By.ID, id1)))
        id_value = id1
    DEDENT
    except TimeoutException :
    INDENT
        try :
        INDENT
            WebDriverWait(driver, timeout).until(EC.presence_of_element_located((By.ID, id2)))
            id_value = id2
        DEDENT
        except TimeoutException :
        INDENT
            print ("No nodes found")
        DEDENT
    DEDENT
    return id_value

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49888412_49888457_1_15
49888412_49888463_1_14
Title: Unable to return none for data from list of tuples 
----------------------------------------

def days_to_reach_n_vehicles(vehicle_records, n) :
INDENT
    cumulative_total = 0
    num_days = 0
    index = 0
    while index < len(vehicle_records) :
    INDENT
        cumulative_total += vehicle_records [index] [1]
        index += 1
        num_days += 1
        if cumulative_total > = n :
        INDENT
            break
        DEDENT
    DEDENT
    return num_days if cumulative_total > = n else None
DEDENT
----------------------------------------

def days_to_reach_n_vehicles(vehicle_records, n) :
INDENT
    cumulative_total = 0
    num_days = 0
    for date, number_of_vehicle in vehicle_records :
    INDENT
        cumulative_total += number_of_vehicle
        num_days += 1
        if cumulative_total > = n :
        INDENT
            break
        DEDENT
    DEDENT
    else :
    INDENT
        num_days = None
    DEDENT
    return num_days
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49901863_49901946_1_11
49901863_49902114_4_12
Title: Map length of words in a sentence to a list of words 
----------------------------------------

def word_lengths(s) :
INDENT
    d = {}
    for i in s.split() :
    INDENT
        l = len(i)
        if l not in d :
        INDENT
            d [l] = [i]
        DEDENT
        else :
        INDENT
            d [l].append(i)
        DEDENT
    DEDENT
    return d

DEDENT
----------------------------------------

def word_lengths(x) :
INDENT
    table = str.maketrans(punctuation, ' ' * len(punctuation))
    x = x.translate(table).lower()
    d = defaultdict(list)
    for word in x.split() :
    INDENT
        d [len(word)].append(word)
    DEDENT
    return d
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49904137_49904348_24_32
49904137_52126820_21_27
Title: "not getting radiobutton 'value' from other function(def) in tkinter how to achieve this without using class?" 
----------------------------------------

def ques2() :
INDENT
    global frame
    frame.destroy()
    frame = Frame(root)
    frame.pack()
    question2 = Label(frame, text = "How many Planets are there in Solar System").grid()
    next2But = Button(frame, text = "Next Question")
DEDENT
----------------------------------------

def ques2() :
INDENT
    for widget in root.winfo_children() :
    INDENT
        widget.destroy()
    DEDENT
    question2 = Label(root, text = "How many Planets are there in Solar System").grid()
    next2But = Button(root, text = "Next Question")

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49929025_49929089_1_14
49929025_49929342_11_22
Title: "Python 3: How to have the ""else"" statement apply only if none of the ""if"" statements are true?" 
----------------------------------------

def scan(seq) :
INDENT
    tests = [
        ('aataaa', 'The trouble sequence, Canonical Poly-A Signal, is present'),
        ('aatgga', 'The trouble sequence, Pea Poly-A Signal, is present'),
        ]
    found_match = False
    for value, message in tests :
    INDENT
        if value in seq :
        INDENT
            print (message)
            found_match = True
        DEDENT
    DEDENT
    if not found_match :
    INDENT
        print (color.GREEN + 'No trouble sequences are present' + color.END)
    DEDENT
DEDENT
----------------------------------------

def scan(seq) :
INDENT
    trouble = ['aataaa', 'aatgga']
    message = ['Canonical Poly-A Signal', 'Pea Poly-A Signal']
    ftrouble = False
    for key in range(len(trouble)) :
    INDENT
        if trouble [key] in seq :
        INDENT
            print ('The trouble sequence, {}, is present'.format(message [key]))
            ftrouble = True
        DEDENT
    DEDENT
    if not ftrouble :
    INDENT
        print ('No trouble sequences are present')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49931836_49931865_1_11
49931836_49931918_1_13
Title: Using dict as switch statement in python 
----------------------------------------

def performAction(argument) :
INDENT
    switcher = {
        'I' : insert,
        'U' : update,
        'D' : delete,
        'R' : retrieve,
        'E' : exit}
    func = switcher.get(argument, lambda : "Invalid Entry")
    result = func()
    print (func, result)
DEDENT
----------------------------------------

def performAction(argument) :
INDENT
    if argument == 'I' :
    INDENT
        insert()
    DEDENT
    elif argument == 'U' :
    INDENT
        update()
    DEDENT
    elif argument == 'D' :
    INDENT
        delete()
    DEDENT
    elif argument == 'R' :
    INDENT
        retrieve()
    DEDENT
    elif argument == 'E' :
    INDENT
        exit()
    DEDENT
    else :
    INDENT
        print ("Invalid Entry")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49933705_49933822_1_9
49933705_49933917_1_7
Title: Passing list to function in Python and printing it 
----------------------------------------

def return_day() :
INDENT
    days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    num = input("Please enter the number: ")
    if int(num) < = 7 :
    INDENT
        print (days [int(num) - 1])
    DEDENT
    else :
    INDENT
        print ("None")
    DEDENT
DEDENT
----------------------------------------

def return_day(num) :
INDENT
    days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    if num < = 7 :
    INDENT
        return (days [num - 1])
    DEDENT
    else :
    INDENT
        return "None"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49933705_49933885_1_9
49933705_49933917_1_7
Title: Passing list to function in Python and printing it 
----------------------------------------

def return_day() :
INDENT
    days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    num = int(input("Please enter the number: "))
    if (num < = 7) :
    INDENT
        print (days [num - 1])
    DEDENT
    else :
    INDENT
        print ("None")
    DEDENT
DEDENT
----------------------------------------

def return_day(num) :
INDENT
    days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    if num < = 7 :
    INDENT
        return (days [num - 1])
    DEDENT
    else :
    INDENT
        return "None"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49944582_49944795_5_14
49944582_50299752_8_21
Title: Dealing with a paginated site using scrapy in a different manner 
----------------------------------------

def parse(self, response) :
INDENT
    link = response.css('.post_more a.qbutton::attr(href)')
    if link :
    INDENT

        href = link.extract_first()
        url = response.urljoin(href)
        yield scrapy.Request(url, callback = self.parse)
    DEDENT
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    page_no = response.meta.get('page', 1) + 1
    items = response.css('.post_more a.qbutton')
    for link in items :
    INDENT
        yield {"link" : link.css('::attr(href)').extract_first()}
    DEDENT
    if items :
    INDENT
        yield Request("http://esencjablog.pl/page/{}".format(page_no), meta = {"page" : page_no}, callback = self.parse)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49944582_49944795_5_14
49944582_50300680_5_11
Title: Dealing with a paginated site using scrapy in a different manner 
----------------------------------------

def parse(self, response) :
INDENT
    link = response.css('.post_more a.qbutton::attr(href)')
    if link :
    INDENT

        href = link.extract_first()
        url = response.urljoin(href)
        yield scrapy.Request(url, callback = self.parse)
    DEDENT
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    for link in response.css('.post_more a.qbutton') :
    INDENT
        yield {"link" : link.css('::attr(href)').extract_first()}
    DEDENT
    next_page = response.xpath('//li[contains(@class, "next_last")]/a/@href')
    if next_page :
    INDENT
        yield response.follow(next_page)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49944582_50299752_8_21
49944582_50300680_5_11
Title: Dealing with a paginated site using scrapy in a different manner 
----------------------------------------

def parse(self, response) :
INDENT
    page_no = response.meta.get('page', 1) + 1
    items = response.css('.post_more a.qbutton')
    for link in items :
    INDENT
        yield {"link" : link.css('::attr(href)').extract_first()}
    DEDENT
    if items :
    INDENT
        yield Request("http://esencjablog.pl/page/{}".format(page_no), meta = {"page" : page_no}, callback = self.parse)
    DEDENT
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    for link in response.css('.post_more a.qbutton') :
    INDENT
        yield {"link" : link.css('::attr(href)').extract_first()}
    DEDENT
    next_page = response.xpath('//li[contains(@class, "next_last")]/a/@href')
    if next_page :
    INDENT
        yield response.follow(next_page)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49944797_49944852_2_10
49944797_49944936_2_8
Title: Add non-lamda function to self of Python class 
----------------------------------------

def __init__(self, x) :
INDENT
    if x > 0 :
    INDENT
        def eval(y) :
        INDENT
            return y
        DEDENT
    DEDENT
    else :
    INDENT
        def eval(y) :
        INDENT
            return y ** 2
        DEDENT
    DEDENT
    self.eval = eval
DEDENT
----------------------------------------

def __init__(self, x) :
INDENT
    if x > 0 :
    INDENT
        self.eval = self.method1
    DEDENT
    else :
    INDENT
        self.eval = self.method2

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49963232_49976847_13_22
49963232_49976847_30_44
Title: How to avoid code blocking in a loop 
----------------------------------------

def run(self) :
INDENT
    global grabbedFrames
    while True :
    INDENT
        frame = self.vs.read()
        if frame is not None :
        INDENT
            grabbedFrames.put(frame)
            time.sleep(0.05)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    global processFrames
    while True :
    INDENT
        if (not processFrames.empty()) :
        INDENT
            fileName = processFrames.get()
            try :
            INDENT
                blob = self.bucket.blob("{}/{}/{}".format(RPID_FOLDER, BY_DAY, fileName))
                blob.upload_from_filename(os.path.abspath(fileName))
                print ("{} uploaded to {}/{}".format(fileName, RPID_FOLDER, BY_DAY))
                os.remove(fileName)
            DEDENT
            except Exception as e :
            INDENT
                print (e)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49963232_49976847_13_22
49963232_49976847_52_68
Title: How to avoid code blocking in a loop 
----------------------------------------

def run(self) :
INDENT
    global grabbedFrames
    while True :
    INDENT
        frame = self.vs.read()
        if frame is not None :
        INDENT
            grabbedFrames.put(frame)
            time.sleep(0.05)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    global grabbedFrames, processFrames
    while True :
    INDENT
        if datetime.datetime.now().second ! = self.startSecond :
        INDENT
            self.startSecond = datetime.datetime.now().second
            self.secondCount = 0
        DEDENT
        if (not grabbedFrames.empty()) :
        INDENT
            frame = grabbedFrames.get()
            self.secondCount = self.secondCount + 1
            frame = imutils.resize(frame, 800)
            fileName = "{}-{}.png".format(datetime.datetime.now().strftime("%H-%M-%S"), self.secondCount)
            processFrames.put(fileName)
            cv2.imwrite(fileName, frame)

        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49963232_49976847_30_44
49963232_49976847_52_68
Title: How to avoid code blocking in a loop 
----------------------------------------

def run(self) :
INDENT
    global processFrames
    while True :
    INDENT
        if (not processFrames.empty()) :
        INDENT
            fileName = processFrames.get()
            try :
            INDENT
                blob = self.bucket.blob("{}/{}/{}".format(RPID_FOLDER, BY_DAY, fileName))
                blob.upload_from_filename(os.path.abspath(fileName))
                print ("{} uploaded to {}/{}".format(fileName, RPID_FOLDER, BY_DAY))
                os.remove(fileName)
            DEDENT
            except Exception as e :
            INDENT
                print (e)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    global grabbedFrames, processFrames
    while True :
    INDENT
        if datetime.datetime.now().second ! = self.startSecond :
        INDENT
            self.startSecond = datetime.datetime.now().second
            self.secondCount = 0
        DEDENT
        if (not grabbedFrames.empty()) :
        INDENT
            frame = grabbedFrames.get()
            self.secondCount = self.secondCount + 1
            frame = imutils.resize(frame, 800)
            fileName = "{}-{}.png".format(datetime.datetime.now().strftime("%H-%M-%S"), self.secondCount)
            processFrames.put(fileName)
            cv2.imwrite(fileName, frame)

        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50008234_50008360_5_13
50008234_50008741_9_17
Title: How do I create a pop up window using tkinter in python? 
----------------------------------------

def popupmsg(msg) :
INDENT
    popup = tk.Toplevel()
    popup.title("!")
    label = tk.Label(popup, text = msg)
    label.pack(side = "top", fill = "x", pady = 10)
    B1 = tk.Button(popup, text = "Okay", command = popup.destroy)
    B1.pack()
    popup.mainloop()
DEDENT
----------------------------------------

def popupmsg(msg) :
INDENT
    popup = tk.Toplevel(root)
    popup.wm_title("!")
    popup.tkraise(root)
    tk.Label(popup, text = msg).pack(side = "top", fill = "x", pady = 10)
    tk.Button(popup, text = "Okay", command = popup.destroy).pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50013225_50013272_1_9
50013225_50013346_1_28
Title: Python: While loops won't stop 
----------------------------------------

def main() :
INDENT
    mainMenu = 'Main Menu:  \n   1. Checkout  \n   2. Returns  \n   3. Additonal Items  \n   4. Item Reference'
    Option1 = "Inititiate Transaction:  \n    scan item  \n    remove item  \n    accept payment  \n    display receipt  \n    back"
    Option2 = "Returns: \n   initiating returns \n   refund money \n   remove item from transaction \n   back"
    Option3 = "Additonal Items: \n   initiating transaction \n   enter new item information \n   display item confirmation \n   back"
    Option4 = "Item Reference: \n   lookup \n   scan item for info \n   display item info \n   back"

DEDENT
----------------------------------------

def main() :
INDENT
    mainMenu = 'Main Menu:  \n   1. Checkout  \n   2. Returns  \n   3. Additonal Items  \n   4. Item Reference'
    Option1 = "Inititiate Transaction:  \n    scan item  \n    remove item  \n    accept payment  \n    display receipt  \n    back"
    Option2 = "Returns: \n   initiating returns \n   refund money \n   remove item from transaction \n   back"
    Option3 = "Additonal Items: \n   initiating transaction \n   enter new item information \n   display item confirmation \n   back"
    Option4 = "Item Reference: \n   lookup \n   scan item for info \n   display item info \n   back"
    print (mainMenu)
    userInput = (input("Please select a number: "))
    while userInput ! = "0" :
    INDENT
        if userInput == "1" :
        INDENT
            print (Option1)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
        elif userInput == "2" :
        INDENT
            print (Option2)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
        elif userInput == "3" :
        INDENT
            print (Option3)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
        elif userInput == "4" :
        INDENT
            print (Option4)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
    DEDENT
    print ("Exiting")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50013225_50013272_1_9
50013225_50013511_1_9
Title: Python: While loops won't stop 
----------------------------------------

def main() :
INDENT
    mainMenu = 'Main Menu:  \n   1. Checkout  \n   2. Returns  \n   3. Additonal Items  \n   4. Item Reference'
    Option1 = "Inititiate Transaction:  \n    scan item  \n    remove item  \n    accept payment  \n    display receipt  \n    back"
    Option2 = "Returns: \n   initiating returns \n   refund money \n   remove item from transaction \n   back"
    Option3 = "Additonal Items: \n   initiating transaction \n   enter new item information \n   display item confirmation \n   back"
    Option4 = "Item Reference: \n   lookup \n   scan item for info \n   display item info \n   back"

DEDENT
----------------------------------------

def main() :
INDENT
    mainMenu = 'Main Menu:  \n   1. Checkout  \n   2. Returns  \n   3. Additonal Items  \n   4. Item Reference'
    Option1 = "Inititiate Transaction:  \n    scan item  \n    remove item  \n    accept payment  \n    display receipt  \n    back"
    Option2 = "Returns: \n   initiating returns \n   refund money \n   remove item from transaction \n   back"
    Option3 = "Additonal Items: \n   initiating transaction \n   enter new item information \n   display item confirmation \n   back"
    Option4 = "Item Reference: \n   lookup \n   scan item for info \n   display item info \n   back"

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50013225_50013346_1_28
50013225_50013511_1_9
Title: Python: While loops won't stop 
----------------------------------------

def main() :
INDENT
    mainMenu = 'Main Menu:  \n   1. Checkout  \n   2. Returns  \n   3. Additonal Items  \n   4. Item Reference'
    Option1 = "Inititiate Transaction:  \n    scan item  \n    remove item  \n    accept payment  \n    display receipt  \n    back"
    Option2 = "Returns: \n   initiating returns \n   refund money \n   remove item from transaction \n   back"
    Option3 = "Additonal Items: \n   initiating transaction \n   enter new item information \n   display item confirmation \n   back"
    Option4 = "Item Reference: \n   lookup \n   scan item for info \n   display item info \n   back"
    print (mainMenu)
    userInput = (input("Please select a number: "))
    while userInput ! = "0" :
    INDENT
        if userInput == "1" :
        INDENT
            print (Option1)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
        elif userInput == "2" :
        INDENT
            print (Option2)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
        elif userInput == "3" :
        INDENT
            print (Option3)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
        elif userInput == "4" :
        INDENT
            print (Option4)
            print (mainMenu)
            userInput = (input("Please select a number: "))
        DEDENT
    DEDENT
    print ("Exiting")
DEDENT
----------------------------------------

def main() :
INDENT
    mainMenu = 'Main Menu:  \n   1. Checkout  \n   2. Returns  \n   3. Additonal Items  \n   4. Item Reference'
    Option1 = "Inititiate Transaction:  \n    scan item  \n    remove item  \n    accept payment  \n    display receipt  \n    back"
    Option2 = "Returns: \n   initiating returns \n   refund money \n   remove item from transaction \n   back"
    Option3 = "Additonal Items: \n   initiating transaction \n   enter new item information \n   display item confirmation \n   back"
    Option4 = "Item Reference: \n   lookup \n   scan item for info \n   display item info \n   back"

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50020111_50021134_23_32
50020111_50021134_4_17
Title: How do I make this button quit the parent window in tkinter? 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    confirmFrame = tk.Frame(self)
    confirmFrame.pack()
    self.buttonNo = tk.Button(confirmFrame, text = "No, quit the program",
        command = controller.quit)
    self.buttonNo.pack()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    self.frames = {}
    for F in (StartPage,) :
    INDENT
        frame = F(container, self)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50022591_50022792_3_12
50022591_50023042_1_11
Title: Alternate letters in a string - code not working 
----------------------------------------

def skyline(str1) :
INDENT
    result = ''
    index = 0
    for i, j in zip_longest(str1 [: : 2], islice(str1, 1, None, 2), fillvalue = '') :
    INDENT
        result += i.upper() + j.lower()
    DEDENT
    return result
DEDENT
----------------------------------------

def skyline(str1) :
INDENT
    result = ''
    length = len(str1)
    for index in range(0, length - 1, 2) :
    INDENT
        result += str1 [index].upper() + str1 [index + 1].lower()
    DEDENT
    if length % 2 == 1 :
    INDENT
        result += str1 [length - 1].upper()
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50032779_50033018_24_30
50032779_50033161_9_26
Title: Alternating Switches ON/OFF? 
----------------------------------------

def __init__(self, switchDependencyList = []) :
INDENT
    self.SwitchDependencyList = switchDependencyList
    if len(self.SwitchDependencyList) == 0 :
    INDENT
        return None
    DEDENT
    if not len(self.SwitchDependencyList) % 2 :
    INDENT
        return None
    DEDENT
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    Gtk.Window.__init__(self, title = "Alt Switch Demo")
    self.set_border_width(10)
    hbox = Gtk.Box(spacing = 10)
    self.add(hbox)
    switch1 = Gtk.Switch()
    switch1.set_active(True)
    hbox.pack_start(switch1, True, True, 0)
    switch2 = Gtk.Switch()
    switch2.set_active(False)
    hbox.pack_start(switch2, True, True, 0)
    switch1.bind_property("active", switch2, "active", GObject.BindingFlags.BIDIRECTIONAL | GObject.BindingFlags.SYNC_CREATE | GObject.BindingFlags.INVERT_BOOLEAN)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50050795_50051007_1_12
50050795_50051123_1_18
Title: Python: sum of values greater than last value 
----------------------------------------

def go(list1) :
INDENT
    if len(list1) == 1 :
    INDENT
        return - 1
    DEDENT
    total = 0
    count = 0
    for i in range(0, len(list1) - 1) :
    INDENT
        if list1 [i] < list1 [i + 1] :
        INDENT
            total += list1 [i + 1]
            count += 1
        DEDENT
    DEDENT
    if count is 0 :
    INDENT
        return - 1
    DEDENT
    return total
DEDENT
----------------------------------------

def go(list1) :
INDENT
    total = 0
    greater_found = False

    if len(list1) < 2 :
    INDENT
        return - 1
    DEDENT
    for i in range(1, len(list1)) :
    INDENT
        if list1 [i] > list1 [i - 1] :
        INDENT
            total = total + list1 [i]
            greater_found = True
        DEDENT
    DEDENT
    if not greater_found :
    INDENT
        return - 1
    DEDENT
    return total
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50052912_50054170_3_15
50052912_50054236_6_18
Title: Python Turtle Checkerboard 
----------------------------------------

def main() :
INDENT
    t = turtle
    t.penup()
    s = int(input("Enter the length of each square: "))
    t.screensize(2000, 2000, "lightblue")
    for row in range(0, 5) :
    INDENT
        for column in range(0, 5) :
        INDENT
            t.goto(s + row * s, s + column * s)
            if (row + column) % 2 == 0 :
            INDENT
                square(s, row, column, "black")
            DEDENT
            else :
            INDENT
                square(s, row, column, "white")
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    s = int(input("Enter the length of each square: "))
    for row in range(5) :
    INDENT
        for column in range(5) :
        INDENT
            if (row + column) % 2 == 0 :
            INDENT
                color = "black"
            DEDENT
            else :
            INDENT
                color = "white"
            DEDENT
            t.penup()
            t.goto(row * s, column * s)
            t.pendown()
            filled_square(s, color)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50052912_50054170_3_15
50052912_50056984_6_34
Title: Python Turtle Checkerboard 
----------------------------------------

def main() :
INDENT
    t = turtle
    t.penup()
    s = int(input("Enter the length of each square: "))
    t.screensize(2000, 2000, "lightblue")
    for row in range(0, 5) :
    INDENT
        for column in range(0, 5) :
        INDENT
            t.goto(s + row * s, s + column * s)
            if (row + column) % 2 == 0 :
            INDENT
                square(s, row, column, "black")
            DEDENT
            else :
            INDENT
                square(s, row, column, "white")
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    length = int(input("Enter the length of each square: "))
    screen = Screen()
    screen.bgcolor("lightblue")
    turtle = Turtle('square', visible = False)
    turtle.shapesize(SQUARES_PER_SIDE * length / CURSOR_SIZE)
    turtle.speed('fastest')
    turtle.stamp()
    turtle.shapesize(length / CURSOR_SIZE)
    turtle.fillcolor("white")
    turtle.penup()
    edge = (1 - SQUARES_PER_SIDE) / 2 * length
    turtle.goto(edge, edge)
    for row in range(SQUARES_PER_SIDE) :
    INDENT
        for column in range(SQUARES_PER_SIDE) :
        INDENT
            if (row + column) % 2 == 0 :
            INDENT
                turtle.stamp()
            DEDENT
            turtle.forward(length)
        DEDENT
        turtle.goto(edge, edge + (row + 1) * length)
    DEDENT
    screen.exitonclick()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50052912_50054236_6_18
50052912_50056984_6_34
Title: Python Turtle Checkerboard 
----------------------------------------

def main() :
INDENT
    s = int(input("Enter the length of each square: "))
    for row in range(5) :
    INDENT
        for column in range(5) :
        INDENT
            if (row + column) % 2 == 0 :
            INDENT
                color = "black"
            DEDENT
            else :
            INDENT
                color = "white"
            DEDENT
            t.penup()
            t.goto(row * s, column * s)
            t.pendown()
            filled_square(s, color)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    length = int(input("Enter the length of each square: "))
    screen = Screen()
    screen.bgcolor("lightblue")
    turtle = Turtle('square', visible = False)
    turtle.shapesize(SQUARES_PER_SIDE * length / CURSOR_SIZE)
    turtle.speed('fastest')
    turtle.stamp()
    turtle.shapesize(length / CURSOR_SIZE)
    turtle.fillcolor("white")
    turtle.penup()
    edge = (1 - SQUARES_PER_SIDE) / 2 * length
    turtle.goto(edge, edge)
    for row in range(SQUARES_PER_SIDE) :
    INDENT
        for column in range(SQUARES_PER_SIDE) :
        INDENT
            if (row + column) % 2 == 0 :
            INDENT
                turtle.stamp()
            DEDENT
            turtle.forward(length)
        DEDENT
        turtle.goto(edge, edge + (row + 1) * length)
    DEDENT
    screen.exitonclick()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50054610_50054834_49_59
50054610_50054834_61_84
Title: Issues displaying average data from ADC 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    tk.Tk.wm_title(self, "Controller")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.show_frame(DefaultScreen)
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.configure(bg = "white")
    f = Figure(figsize = (10, 3), dpi = 100)
    a = f.add_subplot(111)
    a.plot([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10, 12, 14, 16])
    button1 = ttk.Button(self, text = "Contact Page",
        command = lambda : controller.show_frame(ContactPage))
    button1.pack(anchor = "se", pady = 10, padx = 10)
    ventilatorstatus = "Ventilator Status: Closed"
    ventstatus = tk.Label(self, text = ventilatorstatus, font = LARGE_FONT, bg = "white")
    ventstatus.place(relx = 0.5, rely = 0.15, anchor = "center")
    voltage_label = tk.Label(self, font = LARGE_FONT, bg = "white")
    voltage_label.place(relx = 0.5, rely = 0.22, anchor = "center")
    update_label(voltage_label)
    canvas = FigureCanvasTkAgg(f, self)
    canvas.show()
    canvas.get_tk_widget().pack(anchor = "s", fill = tk.X, expand = True, pady = 20)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50064449_50064510_4_15
50064449_50065408_8_15
Title: How to retreive paticular data from dictionary in python 
----------------------------------------

def bag_products(self, product_list) :
INDENT
    bag_list = []
    non_bag_items = []
    MAX_BAG_WEIGHT = 5.0
    for w in product_list ['weight'] :
    INDENT
        if float(w) > MAX_BAG_WEIGHT :
        INDENT
            bag_list.append(w)
            non_bag_items.append(w)
        DEDENT
    DEDENT
    print (bag_list)
    print (non_bag_items)
DEDENT
----------------------------------------

def bag_products(self, product_list) :
INDENT
    non_bag_items = []
    MAX_BAG_WEIGHT = 5.0
    for product in product_list :
    INDENT
        if float(product ['weight']) > MAX_BAG_WEIGHT :
        INDENT
            product_list.remove(product)
            non_bag_items.append(product)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50065474_50065689_3_9
50065474_50066263_3_10
Title: Write a dictionary with multiple values to store data in columns in the CSV file 
----------------------------------------

def save_output(dictionary, output_file_name) :
INDENT
    with open(output_file_name, 'w', newline = '') as csvfile :
    INDENT
        writer = csv.writer(csvfile)
        writer.writerow(dictionary)
        for values in zip(* dictionary.values()) :
        INDENT
            writer.writerow(values)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def save_output(mydict, output_file_name) :
INDENT
    keys = [list(mydict.keys())]
    values = [mydict [key] for key in mydict.keys()]
    final = keys + values
    with open(output_file_name, 'w', newline = '') as csvfile :
    INDENT
        writer = csv.writer(csvfile, delimiter = ' ')
        writer.writerows(final)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50072670_50072825_1_28
50072670_50072871_8_32
Title: Random Simulation of 20 Die Throws 
----------------------------------------

def main() :
INDENT
    example_list = []
    for _ in range(20) :
    INDENT
        example_list.append(random.randint(1, 6))
    DEDENT
    inside = False
    for index in range(len(example_list)) :
    INDENT
        try :
        INDENT
            if inside :
            INDENT
                if example_list [index] ! = example_list [index + 1] :
                INDENT
                    print("%d )" % example_list [index], end = " ")
                    inside = False
                DEDENT
                else :
                INDENT
                    print(example_list [index], end = " ")
                DEDENT
            DEDENT
            else :
            INDENT
                if example_list [index] == example_list [index + 1] :
                INDENT
                    print("( %d" % example_list [index], end = " ")
                    inside = True
                DEDENT
                else :
                INDENT
                    print(example_list [index], end = " ")
                DEDENT
            DEDENT
        DEDENT
        except IndexError :
        INDENT
            print("%d" % example_list [index], end = " ")
            if inside :
            INDENT
                print (")")
            DEDENT
            else :
            INDENT
                print ()
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    exampleList = []
    previous = - 1
    opened = False
    for i in range(20) :
    INDENT
        roll = randint(1, 6)
        if roll == previous :
        INDENT
            if not opened :
            INDENT
                exampleList.insert(- 1, '(')
                opened = True
            DEDENT
        DEDENT
        else :
        INDENT
            if opened :
            INDENT
                exampleList.append(')')
                opened = False
            DEDENT
        DEDENT
        exampleList.append(roll)
        previous = roll
    DEDENT
    if opened :
    INDENT
        exampleList.append(')')
    DEDENT
    for item in exampleList :
    INDENT
        sys.stdout.write('{0} '.format(item))
    DEDENT
    sys.stdout.write('\n')

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50074610_50074844_44_63
50074610_50074844_6_28
Title: Passing data between multiple tkinter frame objects 
----------------------------------------

def __init__(self, parent, controller, pages) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    self.pages = pages
    self.label = tk.Label(self, text = "test")
    button = tk.Button(self, text = "2nd Page", command = lambda : controller.show_frame(pages [1]))
    but_change2nd = tk.Button(self, text = "Change Label on SecondPage", command = lambda : send_text("Hello, too!"))

    self.label.grid(row = 0, column = 0)
    button.grid(row = 1, column = 0)
    but_change2nd.grid(row = 2, column = 0)

    def send_text(text) :
    INDENT
        controller.frames [pages [1]].label.config(text = text)

    DEDENT
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    container = tk.Frame(self)

    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.frames = {}
    self.pages = (StartPage, SecondPage.SecondPage)

    for F in self.pages :
    INDENT
        frame = F(container, self, self.pages)
        self.frames [F] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame(StartPage)

    self.show_frame(StartPage)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50110073_50110109_10_16
50110073_50110175_12_17
Title: How to pass python list slice without copying? 
----------------------------------------

def quickselect(k, arr, start = None, stop = None) :
INDENT
    if start is None : start = 0
    if stop is None : stop = len(arr)
    p = partition(arr, start, stop)
    while k ! = p :
    INDENT
        p = partition(arr, start, p) if k < p else partition(arr, p, stop)
    DEDENT
    return arr [k]
DEDENT
----------------------------------------

def quickselect(k, arr) :
INDENT
    arr = np.array(arr)
    p = partition(arr)
    while k ! = p :
    INDENT
        p = partition(arr [: p]) if k < p else partition(arr [p :])
    DEDENT
    return arr [k]
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50118811_50121135_4_12
50118811_50140151_9_21
Title: Consume tkinter mouse event 
----------------------------------------

def on_click(event) :
INDENT
    current = event.widget.find_withtag("current")
    if current :
    INDENT
        item = current [0]
        color = canvas.itemcget(item, "fill")
        label.configure(text = "you clicked on item with id %s (%s)" % (item, color))
    DEDENT
    else :
    INDENT
        label.configure(text = "You didn't click on an item")
    DEDENT
DEDENT
----------------------------------------

def on_click(event) :
INDENT
    current = event.widget.find_withtag('current')
    if current :
    INDENT
        item = current [0]
        tags = canvas.gettags(item)
        if BKGR_TAG in tags :
        INDENT
            msg = 'You clicked the background'
        DEDENT
        else :
        INDENT
            color = canvas.itemcget(item, 'fill')
            msg = 'You clicked on item with id %s (%s)' % (item, color)
        DEDENT
        label.configure(text = msg)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50118941_50119933_1_14
50118941_50125564_26_42
Title: How to parallelize the same function using different arguments? 
----------------------------------------

def fetch(urls, reward_lst) :
INDENT
    for url in urls :
    INDENT
        json_data = requests.get(url).json()
        try :
        INDENT

            children = list(json_data ['children'])
            for i in children :
            INDENT
                next_url.append(i)
            DEDENT
        DEDENT
        except :
        INDENT
            print ('Tree end')
        DEDENT
        reward = json_data ['reward']
        reward_lst.append(reward)
    DEDENT
DEDENT
----------------------------------------

def fetch(url) :
INDENT
    NUM_WORKERS = 10
    reward_list = []
    url_q = queue.Queue()
    threads = [threading.Thread(target = fetch_worker, args = (url_q, reward_list)) for _ in range(NUM_WORKERS)]
    for t in threads :
    INDENT
        t.start()
    DEDENT
    url_q.put(url)
    url_q.join()
    for _ in range(NUM_WORKERS) :
    INDENT
        url_q.put(None)
    DEDENT
    for t in threads :
    INDENT
        t.join()
    DEDENT
    return reward_list
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50137762_50138423_7_32
50137762_50138629_26_39
Title: How to delete rows in Tkinter? 
----------------------------------------

def input_count() :
INDENT
    try :
    INDENT
        user_submission = int(user_text.get())
    DEDENT
    except :
    INDENT
        wrong_submission = tk.Label(frame_top, text = "That isn't a number, try again!", justify = tk.LEFT, padx = 20)
        wrong_submission.grid(column = 0, row = 1)
    DEDENT
    else :
    INDENT
        try :
        INDENT
            frame_bottom.grid_forget()
        DEDENT
        except :
        INDENT
            pass
        DEDENT
        frame_bottom = tk.Frame(root)
        frame_bottom.grid(row = 2, column = 0, sticky = "nsew")
        for num in range(0, user_submission) :
        INDENT
            old_row = 2
            new_row = old_row + (2 * num)
            extra_new_row = new_row + 1
            animal_check = tk.Label(frame_bottom, text = 'Enter an animal', justify = tk.LEFT, padx = 20)
            animal_check.grid(column = 0, row = new_row)
            animal_text = Entry(frame_bottom, width = 50)
            animal_text.grid(column = 1, row = new_row)
            colour_check = tk.Label(frame_bottom, text = 'Enter a colour', justify = tk.LEFT, padx = 20)
            colour_check.grid(column = 0, row = extra_new_row)
            colour_text = Entry(frame_bottom, width = 50)
            colour_text.grid(column = 1, row = extra_new_row)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def input_count() :
INDENT
    try :
    INDENT
        user_submission = int(user_text.get())
    DEDENT
    except :
    INDENT
        showerror("Error", "That isn't a number, try again!")
    DEDENT
    else :
    INDENT
        for num in range(len(current_rows) - 1, user_submission) :
        INDENT
            current_rows.append(Mgene(root))

        DEDENT
        while len(current_rows) > user_submission :
        INDENT
            current_rows.pop().destroy()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50144817_50144973_1_10
50144817_50145894_10_25
Title: Python - How to create for multiple user input error handling? 
----------------------------------------

def get_filters() :
INDENT
    city_options, month_options, day_options = ['Chicago', 'New York City', 'Washington'.title()], ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'November', 'December', 'all'.title()], ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'all'.title()]
    while True :
    INDENT
        try :
        INDENT
            city = city_options.index(input('\nInsert name of the city to analyze! (Chicago, New York City, Washington)\n'.title()))
            month = month_options.index(input('\nInsert month to filter by or "all" to apply no month filter! (January, February, etc.)\n'.title()))
            day = day_options.index(input('\nInsert day of the week to filter by or "all" to apply no day filter! (Monday, Tuesday, etc.)\n'.title()))
            return city_options [city], month_options [month], day_options [day]
        DEDENT
        except ValueError :
        INDENT
            print ("Your previous choice is not available. Please try again")
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def get_filters() :
INDENT
    city_options = ['Chicago', 'New York City', 'Washington'.title()]
    month_options = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'November',
        'December', 'all'.title()]
    day_options = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'all']
    city_input_msg = 'Insert name of the city to analyze! (Chicago, New York City, Washington): '
    get_valid_input(city_input_msg, city_options)
    month_input_msg = 'Insert month to filter by or "all" to apply no month filter! (January, February, etc.): '
    get_valid_input(month_input_msg, month_options)
    day_input_msg = 'Insert day of the week to filter by or "all" to apply no day filter! (Monday, Tuesday, etc.): '
    get_valid_input(day_input_msg, day_options)
    return city, month, day
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50150459_50153327_1_32
50150459_50154443_3_11
Title: Extract all strings between delimiters 
----------------------------------------

def extraction_error_CF(file) :
INDENT
    f = open(file, 'r')
    file = f.read()
    f.close()

    first = "Error validating"
    second = "</span><br>"

    results = []

    start = file.find(first)
    end = file.find(second)
    while start ! = - 1 and end ! = - 1 :
    INDENT

        results.append(file [start + len(first) : end])
        file = file [end + len(second) :]
        start = file.find(first)
        end = file.find(second)

    DEDENT
    if len(results) ! = 0 :
    INDENT
        return "".join(r for r in results)
    DEDENT
    else :
    INDENT
        return None
    DEDENT
DEDENT
----------------------------------------

def extraction_error_CF(file) :
INDENT
    f = open(file, 'r')
    file = f.read()
    f.close()
    start = re.findall('Error validating(.*)</SPAN><BR>', file)
    if start ! = - 1 :
    INDENT
        return start
    DEDENT
    else :
    INDENT
        return ""
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50156607_50162033_60_101
50156607_50162033_6_38
Title: PyQt: How to refresh label on one window with push button on another one? 
----------------------------------------

def setupUi(self, Dialog) :
INDENT
    Dialog.setObjectName("Dialog")
    Dialog.resize(889, 598)
    self.spinBox = QtWidgets.QSpinBox(Dialog)
    self.spinBox.setGeometry(QtCore.QRect(210, 170, 471, 141))
    font = QtGui.QFont()
    font.setPointSize(33)
    self.spinBox.setFont(font)
    self.spinBox.setAlignment(QtCore.Qt.AlignCenter)
    self.spinBox.setObjectName("spinBox")
    self.horizontalSlider = QtWidgets.QSlider(Dialog)
    self.horizontalSlider.setGeometry(QtCore.QRect(209, 360, 471, 61))
    self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
    self.horizontalSlider.setObjectName("horizontalSlider")
    self.pushButton = QtWidgets.QPushButton(Dialog)
    self.pushButton.setGeometry(QtCore.QRect(310, 460, 271, 71))
    font = QtGui.QFont()
    font.setPointSize(13)
    self.pushButton.setFont(font)
    self.pushButton.setObjectName("pushButton")
    self.pushButton.clicked.connect(self.CloseAndRefresh)

    self.label = QtWidgets.QLabel(Dialog)
    self.label.setGeometry(QtCore.QRect(210, 40, 471, 91))
    font = QtGui.QFont()
    font.setPointSize(24)
    font.setBold(True)
    font.setWeight(75)
    self.label.setFont(font)
    self.label.setAlignment(QtCore.Qt.AlignCenter)
    self.label.setObjectName("label")
    self.retranslateUi(Dialog)
    self.horizontalSlider.valueChanged ['int'].connect(self.spinBox.setValue)
    self.spinBox.valueChanged ['int'].connect(self.horizontalSlider.setValue)
    QtCore.QMetaObject.connectSlotsByName(Dialog)
DEDENT
----------------------------------------

def setupUi(self, MainWindow) :
INDENT
    MainWindow.setObjectName("MainWindow")
    MainWindow.resize(890, 600)
    self.centralwidget = QtWidgets.QWidget(MainWindow)
    self.centralwidget.setObjectName("centralwidget")
    self.label = QtWidgets.QLabel(self.centralwidget)
    self.label.setGeometry(QtCore.QRect(180, 100, 500, 250))
    font = QtGui.QFont()
    font.setPointSize(20)
    self.label.setFont(font)
    self.label.setStyleSheet("background-color: rgb(255, 255, 255);")
    self.label.setAlignment(QtCore.Qt.AlignCenter)
    self.label.setObjectName("label")
    self.pushButton = QtWidgets.QPushButton(self.centralwidget)
    self.pushButton.setGeometry(QtCore.QRect(180, 370, 500, 100))
    font = QtGui.QFont()
    font.setPointSize(15)
    self.pushButton.setFont(font)
    self.pushButton.setObjectName("pushButton")
    self.pushButton.clicked.connect(self.OpenInput)

    MainWindow.setCentralWidget(self.centralwidget)
    self.statusbar = QtWidgets.QStatusBar(MainWindow)
    self.statusbar.setObjectName("statusbar")
    MainWindow.setStatusBar(self.statusbar)
    self.retranslateUi(MainWindow)
    QtCore.QMetaObject.connectSlotsByName(MainWindow)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50161348_50161540_1_10
50161348_50161739_3_23
Title: Coin flipping program that prints percentage for either heads or tails/python 
----------------------------------------

def flipCoin(num_of_flips) :
INDENT
    heads = 0
    for i in range(num_of_flips) :
    INDENT
        coin = random.randint(1, 2)
        if coin == 1 :
        INDENT
            heads += 1
        DEDENT
    DEDENT
    percent = heads / num_of_flips
    print (percent)
DEDENT
----------------------------------------

def flipCoin() :
INDENT
    heads = 0
    tails = 0
    headspercent = 0
    tailspercent = 0
    for i in range(1000) :
    INDENT
        coin = random.randint(1, 2)
        if coin == 1 :
        INDENT
            heads += 1
        DEDENT
        else :
        INDENT
            tails += 1
        DEDENT
    DEDENT
    headspercent = heads / 10.0
    tailspercent = 100.0 - headspercent
    print ("Heads percent: " + str(headspercent))
    print ("Tails percent: " + str(tailspercent))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50164001_50166485_22_32
50164001_52078390_30_38
Title: multiple column/row facet wrap in altair 
----------------------------------------

def facet_wrap(subplts, plots_per_row) :
INDENT
    rows = [subplts [i : i + plots_per_row] for i in range(0, len(subplts), plots_per_row)]
    compound_chart = alt.hconcat()
    for r in rows :
    INDENT
        rowplot = alt.vconcat()
        for item in r :
        INDENT
            rowplot |= item
        DEDENT
        compound_chart &= rowplot
    DEDENT
    return compound_chart

DEDENT
----------------------------------------

def facet_wrap(charts, charts_per_row) :
INDENT
    rows_of_charts = [
        charts [i : i + charts_per_row] for i in range(0, len(charts), charts_per_row)]
    vconcat = [make_hcc(r) for r in rows_of_charts]
    vcc = alt.VConcatChart(vconcat = vconcat).configure_axisX(grid = True).configure_axisY(grid = True)
    return vcc

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50176304_50176448_1_11
50176304_50176558_2_22
Title: how to return multiple lines with python each time next() is called? 
----------------------------------------

def gen_points(name) :
INDENT
    with open(name) as f :
    INDENT
        five_items = []
        for l in f :
        INDENT
            five_items.append(tuple(map(float, l.split())))
            if len(five_items) == 5 :
            INDENT
                yield five_items
                five_items = []
            DEDENT
        DEDENT
        if five_items :
        INDENT
            yield five_items
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def gen_points(name, batchsize = 5) :
INDENT
    with open(name, 'r') as f :
    INDENT

        output = list()
        for l in f :
        INDENT
            clean_string = l.rstrip()
            x, y, z = clean_string.split()
            x = float(x)
            y = float(y)
            z = float(z)
            output.append([x, y, z])
            if len(output) > = batchsize :
            INDENT
                yield output
                output = list()

            DEDENT
        DEDENT
        if output : yield output
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50183044_50187356_200_237
50183044_50187356_40_49
Title: Not clearing graph before plotting another graph using matplotlib in pyqt5 inside tabWidget 
----------------------------------------

def __init__(self, parent = None, width = 5, height = 4, dpi = 100, atest = 'xyz', sf = data_square) :
INDENT
    fig = Figure(figsize = (width, height), dpi = dpi)
    axes = fig.add_subplot(111)
    axes.hold(False)
    FigureCanvas.__init__(self, fig)
    self.setParent(parent)
    FigureCanvas.setSizePolicy(self,
        QSizePolicy.Expanding,
        QSizePolicy.Expanding)
    FigureCanvas.updateGeometry(self)
    ax = self.figure.add_subplot(111)

    x = np.linspace(0, 3 * np.pi, 400)
    y = np.sin(x ** 3)
    print ('atest', atest)
    if atest == 'abc' :
    INDENT
        x = np.linspace(0, 2 * np.pi, 400)
        y = np.sin(x ** 2)
        print ('A case')
    DEDENT
    if atest == 'def' :
    INDENT
        x = np.linspace(0, 4 * np.pi, 400)
        y = np.sin(x ** 4)
        print ('B case')
    DEDENT
    ax.plot(x, y)
    ax.figure.canvas.draw()
    self.show()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.title = 'Test Building PyQT5 with Tabs'
    self.left = 40
    self.top = 40
    self.width = 400
    self.height = 100
    self.initUI()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50199518_50199578_8_14
50199518_50339878_1_23
Title: How to print prime numbers in python without using for loop and while loop 
----------------------------------------

def find_primes(n, i, result) :
INDENT
    if i == n + 1 :
    INDENT
        return result
    DEDENT
    if prime_number(i, 2) :
    INDENT
        result.append(i)
    DEDENT
    return find_primes(n, i + 1, result)
DEDENT
----------------------------------------

def find_primes(n, i = 2) :
INDENT
    primes = []
    if i > n :
    INDENT
        return primes
    DEDENT
    def is_odd_prime(n, d = 3) :
    INDENT
        if n < d * d :
        INDENT
            return True
        DEDENT
        if n % d == 0 :
        INDENT
            return False
        DEDENT
        return is_odd_prime(n, d + 2)
    DEDENT
    multi = i ! = 2
    if not multi or is_odd_prime(i) :
    INDENT
        primes.append(i)
    DEDENT
    return primes + find_primes(n, i + 1 + multi)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219074_1_18
50218908_50219112_1_13
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    odd = None
    even = None
    for i in range(0, len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            odd = i
            break
        DEDENT
    DEDENT
    if odd is not None :
    INDENT
        for i in range(odd, len(list1)) :
        INDENT
            if list1 [i] % 2 == 0 :
            INDENT
                even = i
                break
            DEDENT
        DEDENT
    DEDENT
    if odd is None or even is None :
    INDENT
        return - 1
    DEDENT
    else :
    INDENT
        return even - odd
    DEDENT
DEDENT
----------------------------------------

def go(list1) :
INDENT
    dist = 0
    found = False;
    for i in range(0, len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            for j in range(i, len(list1)) :
            INDENT
                if list1 [j] % 2 == 0 :
                INDENT
                    found = True;
                    return (j - i)
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    if (found == False) :
    INDENT
        return - 1;
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219074_1_18
50218908_50219420_1_13
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    odd = None
    even = None
    for i in range(0, len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            odd = i
            break
        DEDENT
    DEDENT
    if odd is not None :
    INDENT
        for i in range(odd, len(list1)) :
        INDENT
            if list1 [i] % 2 == 0 :
            INDENT
                even = i
                break
            DEDENT
        DEDENT
    DEDENT
    if odd is None or even is None :
    INDENT
        return - 1
    DEDENT
    else :
    INDENT
        return even - odd
    DEDENT
DEDENT
----------------------------------------

def go(iterable) :
INDENT
    itr = iter(iterable)
    try :
    INDENT

        next(num for num in itr if num % 2 == 1)

        return next(i for i, num in enumerate(itr, 1) if num % 2 == 0)
    DEDENT
    except StopIteration :
    INDENT
        return - 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219074_1_18
50218908_50219753_1_19
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    odd = None
    even = None
    for i in range(0, len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            odd = i
            break
        DEDENT
    DEDENT
    if odd is not None :
    INDENT
        for i in range(odd, len(list1)) :
        INDENT
            if list1 [i] % 2 == 0 :
            INDENT
                even = i
                break
            DEDENT
        DEDENT
    DEDENT
    if odd is None or even is None :
    INDENT
        return - 1
    DEDENT
    else :
    INDENT
        return even - odd
    DEDENT
DEDENT
----------------------------------------

def go(lst) :
INDENT
    odd_index = - 1
    for i, n in enumerate(lst) :
    INDENT
        if n % 2 == 1 :
        INDENT
            if odd_index == - 1 :
            INDENT

                odd_index = i
            DEDENT
        DEDENT
        else :
        INDENT
            if odd_index ! = - 1 :
            INDENT
                return i - odd_index

            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219112_1_13
50218908_50219180_1_20
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    dist = 0
    found = False;
    for i in range(0, len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            for j in range(i, len(list1)) :
            INDENT
                if list1 [j] % 2 == 0 :
                INDENT
                    found = True;
                    return (j - i)
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    if (found == False) :
    INDENT
        return - 1;
    DEDENT
DEDENT
----------------------------------------

def go(list1) :
INDENT
    dist = 0
    odd_idx = None
    even_idx = None
    for i in range(len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            odd_idx = i
            break
        DEDENT
    DEDENT
    if odd_idx is None :
    INDENT
        return - 1
    DEDENT
    list2 = list1 [odd_idx + 1 :]
    for i in range(len(list2)) :
    INDENT
        if list2 [i] % 2 == 0 :
        INDENT
            even_idx = i
            break
        DEDENT
    DEDENT
    if even_idx is None :
    INDENT
        return - 1
    DEDENT
    return abs(even_idx - odd_idx + 1)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219112_1_13
50218908_50219420_1_13
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    dist = 0
    found = False;
    for i in range(0, len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            for j in range(i, len(list1)) :
            INDENT
                if list1 [j] % 2 == 0 :
                INDENT
                    found = True;
                    return (j - i)
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    if (found == False) :
    INDENT
        return - 1;
    DEDENT
DEDENT
----------------------------------------

def go(iterable) :
INDENT
    itr = iter(iterable)
    try :
    INDENT

        next(num for num in itr if num % 2 == 1)

        return next(i for i, num in enumerate(itr, 1) if num % 2 == 0)
    DEDENT
    except StopIteration :
    INDENT
        return - 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219112_1_13
50218908_50219753_1_19
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    dist = 0
    found = False;
    for i in range(0, len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            for j in range(i, len(list1)) :
            INDENT
                if list1 [j] % 2 == 0 :
                INDENT
                    found = True;
                    return (j - i)
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    if (found == False) :
    INDENT
        return - 1;
    DEDENT
DEDENT
----------------------------------------

def go(lst) :
INDENT
    odd_index = - 1
    for i, n in enumerate(lst) :
    INDENT
        if n % 2 == 1 :
        INDENT
            if odd_index == - 1 :
            INDENT

                odd_index = i
            DEDENT
        DEDENT
        else :
        INDENT
            if odd_index ! = - 1 :
            INDENT
                return i - odd_index

            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219180_1_20
50218908_50219420_1_13
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    dist = 0
    odd_idx = None
    even_idx = None
    for i in range(len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            odd_idx = i
            break
        DEDENT
    DEDENT
    if odd_idx is None :
    INDENT
        return - 1
    DEDENT
    list2 = list1 [odd_idx + 1 :]
    for i in range(len(list2)) :
    INDENT
        if list2 [i] % 2 == 0 :
        INDENT
            even_idx = i
            break
        DEDENT
    DEDENT
    if even_idx is None :
    INDENT
        return - 1
    DEDENT
    return abs(even_idx - odd_idx + 1)
DEDENT
----------------------------------------

def go(iterable) :
INDENT
    itr = iter(iterable)
    try :
    INDENT

        next(num for num in itr if num % 2 == 1)

        return next(i for i, num in enumerate(itr, 1) if num % 2 == 0)
    DEDENT
    except StopIteration :
    INDENT
        return - 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219180_1_20
50218908_50219753_1_19
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(list1) :
INDENT
    dist = 0
    odd_idx = None
    even_idx = None
    for i in range(len(list1)) :
    INDENT
        if list1 [i] % 2 == 1 :
        INDENT
            odd_idx = i
            break
        DEDENT
    DEDENT
    if odd_idx is None :
    INDENT
        return - 1
    DEDENT
    list2 = list1 [odd_idx + 1 :]
    for i in range(len(list2)) :
    INDENT
        if list2 [i] % 2 == 0 :
        INDENT
            even_idx = i
            break
        DEDENT
    DEDENT
    if even_idx is None :
    INDENT
        return - 1
    DEDENT
    return abs(even_idx - odd_idx + 1)
DEDENT
----------------------------------------

def go(lst) :
INDENT
    odd_index = - 1
    for i, n in enumerate(lst) :
    INDENT
        if n % 2 == 1 :
        INDENT
            if odd_index == - 1 :
            INDENT

                odd_index = i
            DEDENT
        DEDENT
        else :
        INDENT
            if odd_index ! = - 1 :
            INDENT
                return i - odd_index

            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50218908_50219420_1_13
50218908_50219753_1_19
Title: Python - List Manipulation Exercise 
----------------------------------------

def go(iterable) :
INDENT
    itr = iter(iterable)
    try :
    INDENT

        next(num for num in itr if num % 2 == 1)

        return next(i for i, num in enumerate(itr, 1) if num % 2 == 0)
    DEDENT
    except StopIteration :
    INDENT
        return - 1
    DEDENT
DEDENT
----------------------------------------

def go(lst) :
INDENT
    odd_index = - 1
    for i, n in enumerate(lst) :
    INDENT
        if n % 2 == 1 :
        INDENT
            if odd_index == - 1 :
            INDENT

                odd_index = i
            DEDENT
        DEDENT
        else :
        INDENT
            if odd_index ! = - 1 :
            INDENT
                return i - odd_index

            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50219281_50297466_131_150
50219281_50299444_210_234
Title: Python : How to add vertical scroll in RecycleView 
----------------------------------------

def _on_keyboard_down(self, keyboard, keycode, text, modifiers) :
INDENT
    if keycode [1] == 'down' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        self.col_row_controller.select_next()
    DEDENT
    elif keycode [1] == 'up' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        self.col_row_controller.select_previous()

    DEDENT
    if keycode [1] == 'escape' :
    INDENT
        keyboard.release()

    DEDENT
    return True
DEDENT
----------------------------------------

def _on_keyboard_down(self, keyboard, keycode, text, modifiers) :
INDENT
    if keycode [1] == 'down' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        self.row_controller.select_next(self)
    DEDENT
    elif keycode [1] == 'up' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        self.row_controller.select_previous(self)
    DEDENT
    elif len(modifiers) > 0 and modifiers [0] == 'ctrl' and text == 'e' :
    INDENT

        self.display_keystrokes(keyboard, keycode, text, modifiers)
        self.on_keyboard_select()

    DEDENT
    if keycode [1] == 'escape' :
    INDENT
        keyboard.release()

    DEDENT
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50219281_50297466_165_180
50219281_50299444_249_267
Title: Python : How to add vertical scroll in RecycleView 
----------------------------------------

def on_mouse_select(self, instance) :
INDENT
    if (self.col_row_controller.selected_row ! = instance.index) :
    INDENT

        self.col_row_controller.selected_row = instance.index

        self.col_row_controller.select_current()

    DEDENT
    self.row_data = self.data [instance.index]

    self.popup_callback()
DEDENT
----------------------------------------

def on_mouse_select(self, instance) :
INDENT
    if self.row_controller.selected_row ! = instance.index :
    INDENT

        self.row_controller.selected_row = instance.index

        self.row_controller.select_current(self)

    DEDENT
    self.setup_row_data(self.rv_data [instance.index] ['Index'])

    self.popup_callback()

    self._request_keyboard()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50219281_50297466_194_204
50219281_50299444_281_296
Title: Python : How to add vertical scroll in RecycleView 
----------------------------------------

def get_states(self) :
INDENT
    rows = [(x, 'abc') for x in range(25)]
    i = 0
    for row in rows :
    INDENT
        self.data_items.append([row [0], row [1], i])
        i += 1
    DEDENT
    print (self.data_items)
    self.update()

DEDENT
----------------------------------------

def get_states(self) :
INDENT
    self.db_cursor.execute("SELECT * FROM customers ORDER BY CustomerId ASC")
    rows = self.db_cursor.fetchall()
    data = []
    low = 0
    high = self.total_col_headings - 1
    for row in rows :
    INDENT
        for i in range(len(row)) :
        INDENT
            data.append([row [i], row [0], [low, high]])
        DEDENT
        low += self.total_col_headings
        high += self.total_col_headings
    DEDENT
    self.rv_data = [{'text' : str(x [0]), 'Index' : str(x [1]), 'range' : x [2], 'selectable' : True} for x in data]

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50219281_50297466_69_77
50219281_50299444_99_107
Title: Python : How to add vertical scroll in RecycleView 
----------------------------------------

def select_current(self) :
INDENT
    last, nodes = self.get_nodes()
    if not nodes :
    INDENT
        return
    DEDENT
    self.select_node(nodes [self.selected_row])

DEDENT
----------------------------------------

def select_current(self, obj) :
INDENT
    self.obj = obj
    last, nodes = self.get_nodes()
    if not nodes :
    INDENT
        return
    DEDENT
    self.select_row(nodes)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50219281_50299444_182_191
50219281_50299444_300_310
Title: Python : How to add vertical scroll in RecycleView 
----------------------------------------

def __init__(self, table_header, ** kwargs) :
INDENT
    super(RV, self).__init__(** kwargs)
    self.table_header = table_header
    self.total_col_headings = len(table_header.col_headings)
    self.cols_minimum = table_header.cols_minimum
    self.database_connection()
    self.get_states()
    Clock.schedule_once(self.set_default_first_row,.0005)
    self._request_keyboard()
DEDENT
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(Table, self).__init__(** kwargs)
    self.orientation = "vertical"
    self.header = TableHeader()
    self.rv = RV(self.header)
    self.rv.fbind('scroll_x', self.scroll_with_header)
    self.add_widget(self.header)
    self.add_widget(self.rv)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50222466_50231030_45_59
50222466_50231030_62_89
Title: tkinter update interface after button press 
----------------------------------------

def __init__(self, master, cust, key) :
INDENT
    self.master = master
    self.cust = cust [key]
    self.info_window = Toplevel()
    self.info_window.title("Contact Information")
    Label(self.info_window, text = self.cust ['first_name']).pack()
    Label(self.info_window, text = self.cust ['last_name']).pack()
    Label(self.info_window, text = self.cust ['email']).pack()
    Label(self.info_window, text = self.cust ['address']).pack()
    Label(self.info_window, text = self.cust ['phone']).pack()
    Button(self.info_window, text = 'Close', command = self.info_window.destroy).pack(anchor = 's')

DEDENT
----------------------------------------

def __init__(self, master, main_window, cust) :
INDENT
    self.master = master
    self.cust = cust
    self.main_window = main_window
    self.add_window = Toplevel()
    self.add_window.title("Add Contact")
    Label(self.add_window, text = 'First Name: ').grid(row = 0, column = 0)
    Label(self.add_window, text = 'Last Name: ').grid(row = 1, column = 0)
    Label(self.add_window, text = 'Email Address: ').grid(row = 2, column = 0)
    Label(self.add_window, text = 'Living Address: ').grid(row = 3, column = 0)
    Label(self.add_window, text = 'Phone Number:').grid(row = 4, column = 0)
    self.first_name = StringVar()
    self.last_name = StringVar()
    self.email = StringVar()
    self.address = StringVar()
    self.phone = StringVar()
    Button(self.add_window, text = "Submit", command = lambda : self.save(self.cust)).grid(row = 5, column = 0)
    Button(self.add_window, text = 'Cancel', command = self.add_window.destroy).grid(row = 5, column = 1)
    Entry(self.add_window, textvariable = self.first_name).grid(row = 0, column = 1)
    Entry(self.add_window, textvariable = self.last_name).grid(row = 1, column = 1)
    Entry(self.add_window, textvariable = self.email).grid(row = 2, column = 1)
    Entry(self.add_window, textvariable = self.address).grid(row = 3, column = 1)
    Entry(self.add_window, textvariable = self.phone).grid(row = 4, column = 1)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50222466_50231030_45_59
50222466_50231030_8_25
Title: tkinter update interface after button press 
----------------------------------------

def __init__(self, master, cust, key) :
INDENT
    self.master = master
    self.cust = cust [key]
    self.info_window = Toplevel()
    self.info_window.title("Contact Information")
    Label(self.info_window, text = self.cust ['first_name']).pack()
    Label(self.info_window, text = self.cust ['last_name']).pack()
    Label(self.info_window, text = self.cust ['email']).pack()
    Label(self.info_window, text = self.cust ['address']).pack()
    Label(self.info_window, text = self.cust ['phone']).pack()
    Button(self.info_window, text = 'Close', command = self.info_window.destroy).pack(anchor = 's')

DEDENT
----------------------------------------

def __init__(self, master, cust) :
INDENT
    self.master = master
    self.customer_list = cust
    self.cust_frame = Frame(self.master)
    frame = Frame(self.master)
    frame.master.title("Contact List Editor")
    self.label_1 = Label(frame, text = 'Contact list').pack(side = LEFT)
    self.update_customers()
    self.add_button = Button(frame, text = 'Add Contact', command = self.add_contact_window)
    self.add_button.pack(anchor = 'sw')
    frame.pack(anchor = 'nw')
    self.cust_frame.pack(anchor = 'w')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50222466_50231030_62_89
50222466_50231030_8_25
Title: tkinter update interface after button press 
----------------------------------------

def __init__(self, master, main_window, cust) :
INDENT
    self.master = master
    self.cust = cust
    self.main_window = main_window
    self.add_window = Toplevel()
    self.add_window.title("Add Contact")
    Label(self.add_window, text = 'First Name: ').grid(row = 0, column = 0)
    Label(self.add_window, text = 'Last Name: ').grid(row = 1, column = 0)
    Label(self.add_window, text = 'Email Address: ').grid(row = 2, column = 0)
    Label(self.add_window, text = 'Living Address: ').grid(row = 3, column = 0)
    Label(self.add_window, text = 'Phone Number:').grid(row = 4, column = 0)
    self.first_name = StringVar()
    self.last_name = StringVar()
    self.email = StringVar()
    self.address = StringVar()
    self.phone = StringVar()
    Button(self.add_window, text = "Submit", command = lambda : self.save(self.cust)).grid(row = 5, column = 0)
    Button(self.add_window, text = 'Cancel', command = self.add_window.destroy).grid(row = 5, column = 1)
    Entry(self.add_window, textvariable = self.first_name).grid(row = 0, column = 1)
    Entry(self.add_window, textvariable = self.last_name).grid(row = 1, column = 1)
    Entry(self.add_window, textvariable = self.email).grid(row = 2, column = 1)
    Entry(self.add_window, textvariable = self.address).grid(row = 3, column = 1)
    Entry(self.add_window, textvariable = self.phone).grid(row = 4, column = 1)
DEDENT
----------------------------------------

def __init__(self, master, cust) :
INDENT
    self.master = master
    self.customer_list = cust
    self.cust_frame = Frame(self.master)
    frame = Frame(self.master)
    frame.master.title("Contact List Editor")
    self.label_1 = Label(frame, text = 'Contact list').pack(side = LEFT)
    self.update_customers()
    self.add_button = Button(frame, text = 'Add Contact', command = self.add_contact_window)
    self.add_button.pack(anchor = 'sw')
    frame.pack(anchor = 'nw')
    self.cust_frame.pack(anchor = 'w')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50227577_50228461_4_11
50227577_50233035_4_11
Title: Update Label in Tkinter when calling function 
----------------------------------------

def run_script(username, password) :
INDENT
    text = tk.StringVar()
    text.set('')
    lab = tk.Label(master, textvariable = text, fg = 'blue')
    lab.grid(row = 6)
    text.set('calling my function1')

DEDENT
----------------------------------------

def run_script() :
INDENT
    text = StringVar()
    l = Label(master, textvariable = text, fg = 'blue').grid(row = 6)
    text.set('calling my function1')
    master.update()
    sleep(2)
    text.set('end of function1')
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50231298_50260776_5_13
50231298_51149169_8_18
Title: Loading FITS images with PyTorch 
----------------------------------------

def __init__(self, root, transform = None, target_transform = None,
loader = None) :
INDENT
    if loader is None :
    INDENT
        loader = self.__fits_loader
    DEDENT
    super(FitsFolder, self).__init__(root, loader, self.EXTENSIONS,
        transform = transform,
        target_transform = target_transform)
DEDENT
----------------------------------------

def __init__(self, csv_path) :
INDENT
    self.data_info = pd.read_csv(csv_path, header = None)
    self.image_arr = np.asarray(self.data_info.iloc [:, 0])
    self.label_arr = np.asarray(self.data_info.iloc [:, 1 :])
    self.label_arr = np.asarray(self.data_info.iloc [:, 1])
    labels.append(self.label_arr)
    self.data_len = len(self.data_info.index)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50248294_50248580_26_51
50248294_50248580_3_19
Title: Passing user data after login between windows in Python tkinter 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "Start Page", font = controller.title_font)
    label.pack()
    label2 = tk.Label(self, text = "Login:")
    label2.pack()
    label2.place()
    self.e1 = tk.Entry(self)
    self.e1.pack()
    self.e1.place()
    label3 = tk.Label(self, text = "Password:")
    label3.pack()
    label3.place()
    self.e2 = tk.Entry(self, show = "*")
    self.e2.pack()
    self.e2.place()
    button1 = tk.Button(self, text = "Login",
        command = self._login_btn_clicked, width = 25)
    button1.pack()
    button1.place()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title_font = tkfont.Font(family = 'Helvetica', size = 18, weight = "bold", slant = "italic")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.discUserInfo = {}
    self.frames = {}
    for F in (StartPage, Window2, Window1) :
    INDENT
        page_name = F.__name__
        frame = F(parent = container, controller = self)
        self.frames [page_name] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame("StartPage")
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50248294_50248580_26_51
50248294_50248580_61_73
Title: Passing user data after login between windows in Python tkinter 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "Start Page", font = controller.title_font)
    label.pack()
    label2 = tk.Label(self, text = "Login:")
    label2.pack()
    label2.place()
    self.e1 = tk.Entry(self)
    self.e1.pack()
    self.e1.place()
    label3 = tk.Label(self, text = "Password:")
    label3.pack()
    label3.place()
    self.e2 = tk.Entry(self, show = "*")
    self.e2.pack()
    self.e2.place()
    button1 = tk.Button(self, text = "Login",
        command = self._login_btn_clicked, width = 25)
    button1.pack()
    button1.place()
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "window 2", font = controller.title_font)
    label.pack(side = "top", fill = "x", pady = 10)
    button1 = tk.Button(self, text = "Tset",
        command = self.onClick, width = 42, bg = "#C44041")
    button1.pack()
    button3 = tk.Button(self, text = "Back",
        command = lambda : controller.show_frame("Window1"), width = 42, bg = "#C44041")
    button3.pack()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50248294_50248580_26_51
50248294_50248580_79_95
Title: Passing user data after login between windows in Python tkinter 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "Start Page", font = controller.title_font)
    label.pack()
    label2 = tk.Label(self, text = "Login:")
    label2.pack()
    label2.place()
    self.e1 = tk.Entry(self)
    self.e1.pack()
    self.e1.place()
    label3 = tk.Label(self, text = "Password:")
    label3.pack()
    label3.place()
    self.e2 = tk.Entry(self, show = "*")
    self.e2.pack()
    self.e2.place()
    button1 = tk.Button(self, text = "Login",
        command = self._login_btn_clicked, width = 25)
    button1.pack()
    button1.place()
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "window 1", font = controller.title_font)
    label.pack()
    button1 = tk.Button(self, text = "Next",
        command = lambda : controller.show_frame("Window2"), width = 42)
    button1.pack()
    button1.place()

    button2 = tk.Button(self, text = "Test",
        command = self.getAlocationData, width = 42)
    button2.pack()
    button2.place()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50248294_50248580_3_19
50248294_50248580_61_73
Title: Passing user data after login between windows in Python tkinter 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title_font = tkfont.Font(family = 'Helvetica', size = 18, weight = "bold", slant = "italic")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.discUserInfo = {}
    self.frames = {}
    for F in (StartPage, Window2, Window1) :
    INDENT
        page_name = F.__name__
        frame = F(parent = container, controller = self)
        self.frames [page_name] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame("StartPage")
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "window 2", font = controller.title_font)
    label.pack(side = "top", fill = "x", pady = 10)
    button1 = tk.Button(self, text = "Tset",
        command = self.onClick, width = 42, bg = "#C44041")
    button1.pack()
    button3 = tk.Button(self, text = "Back",
        command = lambda : controller.show_frame("Window1"), width = 42, bg = "#C44041")
    button3.pack()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50248294_50248580_3_19
50248294_50248580_79_95
Title: Passing user data after login between windows in Python tkinter 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    tk.Tk.__init__(self, * args, ** kwargs)
    self.title_font = tkfont.Font(family = 'Helvetica', size = 18, weight = "bold", slant = "italic")
    container = tk.Frame(self)
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)
    self.discUserInfo = {}
    self.frames = {}
    for F in (StartPage, Window2, Window1) :
    INDENT
        page_name = F.__name__
        frame = F(parent = container, controller = self)
        self.frames [page_name] = frame
        frame.grid(row = 0, column = 0, sticky = "nsew")
    DEDENT
    self.show_frame("StartPage")
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "window 1", font = controller.title_font)
    label.pack()
    button1 = tk.Button(self, text = "Next",
        command = lambda : controller.show_frame("Window2"), width = 42)
    button1.pack()
    button1.place()

    button2 = tk.Button(self, text = "Test",
        command = self.getAlocationData, width = 42)
    button2.pack()
    button2.place()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50248294_50248580_61_73
50248294_50248580_79_95
Title: Passing user data after login between windows in Python tkinter 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "window 2", font = controller.title_font)
    label.pack(side = "top", fill = "x", pady = 10)
    button1 = tk.Button(self, text = "Tset",
        command = self.onClick, width = 42, bg = "#C44041")
    button1.pack()
    button3 = tk.Button(self, text = "Back",
        command = lambda : controller.show_frame("Window1"), width = 42, bg = "#C44041")
    button3.pack()
DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    tk.Frame.__init__(self, parent)
    self.controller = controller
    label = tk.Label(self, text = "window 1", font = controller.title_font)
    label.pack()
    button1 = tk.Button(self, text = "Next",
        command = lambda : controller.show_frame("Window2"), width = 42)
    button1.pack()
    button1.place()

    button2 = tk.Button(self, text = "Test",
        command = self.getAlocationData, width = 42)
    button2.pack()
    button2.place()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50262296_50268299_38_47
50262296_50268299_9_26
Title: Spinner in a PyGObject Gtk.TreeView does not spin 
----------------------------------------

def __init__(self) :
INDENT
    Gtk.Window.__init__(self, title = 'CellRendererSpinner')
    self.set_default_size(200, 400)
    self.view = TreeView()
    self.add(self.view)
    self.connect('destroy', Gtk.main_quit)
    self.show_all()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    self.model = Gtk.ListStore.new([bool, int])
    for i in range(5) :
    INDENT
        self.model.append([random.choice([True, True, False]), i])

    DEDENT
    Gtk.TreeView.__init__(self, self.model)

    self.spinner_renderer = Gtk.CellRendererSpinner()
    col_bool = Gtk.TreeViewColumn('bool', self.spinner_renderer, active = 0)
    self.append_column(col_bool)

    col_int = Gtk.TreeViewColumn('int', Gtk.CellRendererText(), text = 1)
    self.append_column(col_int)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50283850_50283935_10_21
50283850_50283976_15_29
Title: How to store values in a function and be printed/modified from another? 
----------------------------------------

def printEnemyField() :
INDENT
    print ("Press 1 to get a new EnemyField")
    print ("Press 2 to get a new EnemyField")
    print ("Press 3 to get a new EnemyField")
    print ("Press 4 to get a new EnemyField")
    print ("Press 5 to quit")
    choice = int(input("Enter a number: "))
    while choice ! = 5 :
    INDENT
        if choice == 1 :
        INDENT
            print (fillEnemyField() ['zombies'], "zombies in the field")
        DEDENT
        choice = int(input("Enter a number: "))
    DEDENT
DEDENT
----------------------------------------

def printEnemyField() :
INDENT
    for x in range(4) :
    INDENT
        print ("Press {} to get a new EnemyField".format(x + 1))
    DEDENT
    print ("Press 5 to quit")
    fields = fillEnemyField()
    choice = int(input())
    while choice ! = 5 :
    INDENT
        print (fields [choice - 1])
        choice = int(input())
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
503148_35311918_1_23
503148_503862_1_19
Title: How to parse nagios status.dat file? 
----------------------------------------

def parseConf(source) :
INDENT
    conf = {}
    patID = re.compile(r"(?:\s*define)?\s*(\w+)\s+{")
    patAttr = re.compile(r"\s*(\w+)(?:=|\s+)(.*)")
    patEndID = re.compile(r"\s*}")
    for line in source.splitlines() :
    INDENT
        line = line.strip()
        matchID = patID.match(line)
        matchAttr = patAttr.match(line)
        matchEndID = patEndID.match(line)
        if len(line) == 0 or line [0] == '#' :
        INDENT
            pass
        DEDENT
        elif matchID :
        INDENT
            identifier = matchID.group(1)
            cur = [identifier, {}]
        DEDENT
        elif matchAttr :
        INDENT
            attribute = matchAttr.group(1)
            value = matchAttr.group(2).strip()
            cur [1] [attribute] = value
        DEDENT
        elif matchEndID and cur :
        INDENT
            conf.setdefault(cur [0], []).append(cur [1])
            del cur
        DEDENT
    DEDENT
    return conf
DEDENT
----------------------------------------

def parseConf(filename) :
INDENT
    conf = []
    with open(filename, 'r') as f :
    INDENT
        for i in f.readlines() :
        INDENT
            if i [0] == '#' : continue
            matchID = re.search(r"([\w]+) {", i)
            matchAttr = re.search(r"[ ]*([\w]+)=([\w\d]*)", i)
            matchEndID = re.search(r"[ ]*}", i)
            if matchID :
            INDENT
                identifier = matchID.group(1)
                cur = [identifier, {}]
            DEDENT
            elif matchAttr :
            INDENT
                attribute = matchAttr.group(1)
                value = matchAttr.group(2)
                cur [1] [attribute] = value
            DEDENT
            elif matchEndID :
            INDENT
                conf.append(cur)
            DEDENT
        DEDENT
    DEDENT
    return conf
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50323218_50323247_1_13
50323218_50323542_4_14
Title: 'AnonymousUser' object has no attribute '_meta' 
----------------------------------------

def edit_profile(request) :
INDENT
    if request.user.is_authenticated :
    INDENT
        if request.method == "POST" :
        INDENT
            form = EditProfileForm(request.POST, instance = request.user)
            if form.is_valid() :
            INDENT
                form.save()
                return redirect('/account/profile')
            DEDENT
        DEDENT
        else :
        INDENT
            form = EditProfileForm(instance = request.user)
            args = {'form' : form}
            return render(request, 'accounts/edit_profile.html', args)
        DEDENT
    DEDENT
    else :
    INDENT
        return redirect('/login/')
    DEDENT
DEDENT
----------------------------------------

def edit_profile(request) :
INDENT
    if request.method == "POST" :
    INDENT
        form = EditProfileForm(request.POST, instance = request.user)
        if form.is_valid() :
        INDENT
            form.save()
            return redirect('/account/profile')
        DEDENT
    DEDENT
    else :
    INDENT
        form = EditProfileForm(instance = request.user)
    DEDENT
    args = {'form' : form}
    return render(request, 'accounts/edit_profile.html', args)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50336735_50336886_1_11
50336735_50337297_3_12
Title: Want to concatenate the random uniformly generated values 
----------------------------------------

def colm(p, q, chunk_len = 10) :
INDENT
    x = np.arange(0, 5 * chunk_len)
    x = pd.DataFrame({'x' : x})

    ys = [np.random.uniform(p_, q_, chunk_len) for p_, q_ in zip(p, q)]
    y = np.concatenate(ys)
    return x, pd.Series(y)
DEDENT
----------------------------------------

def colm(p, q) :
INDENT
    s, t = p, q
    z = []
    a = ['y1', 'y2', 'y3', 'y4', 'y5']
    for i in a :
    INDENT
        i = np.random.uniform(s, t, 10)
        s, t = s + 10, t + 10
        z.append(i)
    DEDENT
    y = np.concatenate(z)
    return pd.Series(y)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50337468_50337791_1_18
50337468_50338373_3_14
Title: Python 3.6: Moving around words within a string 
----------------------------------------

def swapping(word_string, word1, word2) :
INDENT
    lower_words = word_string.lower().split()
    try :
    INDENT

        idx1 = lower_words.index(word1.lower())
        idx2 = lower_words.index(word2.lower())
    DEDENT
    except ValueError :
    INDENT
        return word_string

    DEDENT
    words = word_string.split()
    words [idx1], words [idx2] = word2, word1
    return ' '.join(words)
DEDENT
----------------------------------------

def swapping(a, b, c) :
INDENT
    def matchfunc(m) :
    INDENT
        g = m.group(1).lower()
        if g == c.lower() :
        INDENT
            return b.upper()
        DEDENT
        elif g == b.lower() :
        INDENT
            return c.upper()
        DEDENT
        else :
        INDENT
            return m.group(1)
        DEDENT
    DEDENT
    return re.sub("(\w+)", matchfunc, a)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50337827_50338176_6_12
50337827_50338750_7_14
Title: pythonic way to call multiple callbacks 
----------------------------------------

def __init__(self, callback = None) :
INDENT
    def another_callback() :
    INDENT
        if callback : callback()
        print ("another_callback")
    DEDENT
    super().__init__(another_callback)
DEDENT
----------------------------------------

def __init__(self, callback = None) :
INDENT
    def another_callback() :
    INDENT
        print ('another_callback')
    DEDENT
    another_callback()
    super(Subclass, self).__init__(callback)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50345461_50345586_5_13
50345461_50346070_68_85
Title: results depends of other results in python 
----------------------------------------

def reward(action, i, n) :
INDENT
    R = np.zeros((n, 2))
    for i in range(i, n, 1) :
    INDENT
        if action [i] == 1 :
        INDENT
            R [i, 0] = 1 + action [i] / 2
        DEDENT
        else :
        INDENT
            R [i, 1] = 1 + action [i] / 2
        DEDENT
    DEDENT
    return R
DEDENT
----------------------------------------

def reward(N, RHO, p0, n) :
INDENT
    R = np.zeros((n, 2))
    for i in range(p0, n, 1) :
    INDENT

        k = 0
        for j in range(0, 7, 2) :
        INDENT
            if N [i, j] ! = 0 :
            INDENT
                R [i, 0] += RHO [i, j] / N [i, j]
            DEDENT
            else :
            INDENT
                R [i, 0] = 0
            DEDENT
            k = j + 1
            if N [i, k] ! = 0 :
            INDENT
                R [i, 1] += RHO [i, k] / N [i, k]
            DEDENT
            else :
            INDENT
                R [i, 1] = 0
            DEDENT
        DEDENT
    DEDENT
    return R
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5036012_5036533_5_11
5036012_5048068_3_10
Title: Python Function Argument 
----------------------------------------

def populateArray(fname, fn = None) :
INDENT
    with open(fname, 'r') as inf :
    INDENT
        if fn :
        INDENT
            return map(fn, inf)
        DEDENT
        else :
        INDENT
            return inf.readlines()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def populateArray(network) :
INDENT
    file = open('theroute.txt', 'r')
    for line in file :
    INDENT
        network.append(line)
    DEDENT
    file.close()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50381025_50381702_17_58
50381025_50381702_91_118
Title: How to get information from one Main Window to another Main Window after running a function PyQt? 
----------------------------------------

def initUI(self) :
INDENT
    self.button = QPushButton('1', self)
    self.button.clicked.connect(self.analyze)
    self.button.resize(self.button.sizeHint())
    self.button.move(167, 220)
    self.text = "2".format(0, 0)
    self.label = QLabel(self.text, self)
    self.label.move(20, 15)
    self.textbox1 = QLineEdit(self)
    self.textbox1.move(55, 20)
    self.textbox1.resize(300, 20)
    self.text = "3".format(0, 0)
    self.label = QLabel(self.text, self)
    self.label.move(20, 65)
    self.textbox2 = QLineEdit(self)
    self.textbox2.move(150, 70)
    self.textbox2.resize(100, 20)
    self.text = "4".format(0, 0)
    self.label = QLabel(self.text, self)
    self.label.move(20, 115)
    self.textbox3 = QLineEdit(self)
    self.textbox3.move(150, 120)
    self.textbox3.resize(200, 20)
    self.text = "5".format(0, 0)
    self.label = QLabel(self.text, self)
    self.label.move(20, 165)
    self.textbox4 = QLineEdit(self)
    self.textbox4.move(150, 170)
    self.textbox4.resize(200, 20)
    self.setGeometry(200, 200, 400, 260)
    self.setFixedSize(self.size())
    self.setWindowTitle('Settings')
DEDENT
----------------------------------------

def initUI(self) :
INDENT
    self.textEdit = QTextEdit()
    self.setCentralWidget(self.textEdit)
    self.statusBar()

    openFile = QAction(QIcon('open.png'), 'Run with configuration', self)
    openFile.setShortcut('Ctrl+O')
    openFile.setStatusTip('Run with file')
    openFile.triggered.connect(self.showDialog)

    singleURL = QAction('Input URL', self)
    singleURL.setStatusTip('Analyze with a single URL')
    singleURL.triggered.connect(self.showSettings)
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('&File')
    fileMenu.addAction(openFile)
    fileMenu.addAction(singleURL)
    self.runURL = Second(self)
    self.setGeometry(300, 300, 350, 300)
    self.setWindowTitle('HLS Automation')
    self.showMaximized()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50381189_50390834_17_26
50381189_50392765_15_25
Title: scrapy add data to the json file from different functions 
----------------------------------------

def parse(self, response) :
INDENT
    item = dict(title = response.xpath('//title/text()').extract_first(), content = [])
    for line in response.css('div.b') :
    INDENT
        item ['content'].append({
                'right_column' : line.css('div.m1').extract_first(),
                'left_column' : line.css('div.m2').extract_first()})
    DEDENT
    yield item
DEDENT
----------------------------------------

def parse(self, response) :
INDENT
    content = [
        {'right_column' : line.css('div.m1').extract(),
            'left_column' : line.css('div.m2').extract()} for line in response.css('div.b')
        ]
    yield {'title' : response.css('h2').extract_first(),
        'content' : content}
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50388667_50435056_41_51
50388667_50435056_4_15
Title: wxpython controls gathered on top left corner 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Frame.__init__(self, parent, wx.ID_ANY, 'myAwesomeFrame', size = (400, 400))
    controlPnl = ControlPanel(self)
    mainPnlSizer = wx.BoxSizer(wx.HORIZONTAL)
    mainPnlSizer.Add(controlPnl, proportion = 1, flag = wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP)
    self.SetSizer(mainPnlSizer)
    self.CreateStatusBar()
    self.Layout()

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent, name = "controlPanel")
    self.SetBackgroundColour('white')
    self.mainBox = wx.StaticBox(self, label = "Controls")
    self.mainSizer = wx.StaticBoxSizer(self.mainBox, wx.VERTICAL)
    self.initCustomControls()
    self.initCommonControls()
    self.SetSizer(self.mainSizer)
    self.Layout()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50395236_50395496_1_24
50395236_50395551_1_26
Title: Removing ending vowels from a word 
----------------------------------------

def syllables(word) :
INDENT
    vowels = ['a', 'e', 'i', 'o', 'u', 'y']
    N = 0
    previousLetterIsAVowel = False

    for i in word.lower() :
    INDENT
        if i in vowels :
        INDENT

            previousLetterIsAVowel = True
        DEDENT
        else :
        INDENT
            if previousLetterIsAVowel :
            INDENT

                N += 1
            DEDENT
            previousLetterIsAVowel = False
        DEDENT
    DEDENT
    return N
DEDENT
----------------------------------------

def syllables(word) :
INDENT
    def isVowel(c) :
    INDENT
        return c.lower() in ['a', 'e', 'i', 'o', 'u', 'y']

    DEDENT
    while word and isVowel(word [- 1]) :
    INDENT
        word = word [: - 1]
    DEDENT
    lastWasVowel = False
    counter = 0
    for c in word :
    INDENT
        isV = isVowel(c)
        if lastWasVowel and isV :
        INDENT
            continue
        DEDENT
        if isV :
        INDENT

            counter += 1
            lastWasVowel = True
        DEDENT
        else :
        INDENT

            lastWasVowel = False

        DEDENT
    DEDENT
    return counter
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50399683_50400967_14_44
50399683_50401997_5_18
Title: Using Python to parse header string from a file with a unique header printing technique (.inp extension) 
----------------------------------------

def make_dataframe(filename) :
INDENT
    with open('test.txt') as fp :
    INDENT

        headers = []
        for line in fp :
        INDENT
            if not line.startswith(';;-') :
            INDENT

                headers.append('  ' + line [2 : - 1])
            DEDENT
            else :
            INDENT
                break
            DEDENT
        DEDENT
        else :
        INDENT
            print ("ERROR: Header separator not found")
            return None

        DEDENT
        field_lens = [len(m) + 1 for m in re.findall(r"\-+", '--' + line [2 : - 1])]

        start = 0
        pd_header = []
        for f_len in field_lens :
        INDENT
            pd_header.append(' '.join(field.strip() for field in (h [start : start + f_len] for h in headers)
                    if field.strip()))
            start += f_len

        DEDENT
        df = pd.read_fwf(fp, header = None, names = pd_header, widths = field_lens,
            index_col = False)
        return df
    DEDENT
DEDENT
----------------------------------------

def make_dataframe(filename) :
INDENT
    with open(filename) as fp :
    INDENT
        div = []
        headers = list(takewhile(
                lambda x : not x.startswith(';;-') or div.append(x), fp))
        colspecs = [m.span() for m in re.compile("-+").finditer(div [0])]
        headers = [
            re.sub(" +", " ", " ".join(hl [lo : hi] for hl in headers)).strip() for lo, hi in colspecs]
        d = pd.read_fwf(fp, header = None,
            colspecs = [(lo - 2, hi - 2) for lo, hi in colspecs])
    DEDENT
    d.columns = headers
    return d
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50403205_50403283_1_10
50403205_50407439_1_6
Title: NameError: name 'sorting' is not defined 
----------------------------------------

def sorting(final_input) :
INDENT
    count = 0
    while True :
    INDENT
        final_output [count] = min(final_input)
        final_input = final_input.remove(min(final_input))
        count += 1
        if count == len(final_input) :
        INDENT
            break
        DEDENT
        return (final_output)
    DEDENT
DEDENT
----------------------------------------

def sorting(final_input) :
INDENT
    final_output = []
    while 0 ! = len(final_input) :
    INDENT
        final_output += [min(final_input)]
        final_input.remove(min(final_input))
    DEDENT
    return (final_output)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50404221_50404347_1_10
50404221_50404477_1_13
Title: Algorithm for distributing a number between certain number of chunks 
----------------------------------------

def capacity_distribution(task_size, people_size) :
INDENT
    each = math.floor(task_size / people_size)
    extra = task_size % people_size
    distribution = [each for x in range(people_size)]
    for x in range(people_size) :
    INDENT
        if x < extra :
        INDENT
            distribution [x] += 1
        DEDENT
    DEDENT
    return distribution
DEDENT
----------------------------------------

def capacity_distribution(task_size, people_size) :
INDENT
    modulus = task_size % people_size
    div = task_size / / people_size
    dist = []
    if modulus :
    INDENT
        dist.append(div)
        dist.extend(capacity_distribution(task_size - div, people_size - 1))
    DEDENT
    else :
    INDENT
        dist.extend([div] * people_size)
    DEDENT
    return dist
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50415752_50416189_4_54
50415752_50416499_4_69
Title: How do you align labels and entry boxes in a GUI program? 
----------------------------------------

def __init__(self) :
INDENT
    self.main_window = tkinter.Tk()
    self.main_window.title("Loan Calculator")

    self.entry_frame = tkinter.Frame(self.main_window)
    self.entry_frame.pack(side = "right", anchor = "n")

    self.intRate_label = tkinter.Label(self.main_window, text = 'Annual Interest Rate', anchor = "w")
    self.intRate_entry = tkinter.Entry(self.entry_frame, width = 20)
    self.intRate_label.pack(side = "top", anchor = "w")
    self.intRate_entry.pack(side = "top", anchor = "w", pady = 1)

    self.numYears_label = tkinter.Label(self.main_window, text = 'Number of Years', anchor = "w")
    self.numYears_entry = tkinter.Entry(self.entry_frame, width = 20)
    self.numYears_label.pack(side = "top", anchor = "w")
    self.numYears_entry.pack(side = "top", anchor = "w", pady = 1)

    self.loanAmount_label = tkinter.Label(self.main_window, text = 'Loan Amount', anchor = "nw")
    self.loanAmount_entry = tkinter.Entry(self.entry_frame, width = 20)
    self.loanAmount_label.pack(side = "top", anchor = "w")
    self.loanAmount_entry.pack(side = "top", anchor = "w", pady = 1)

    self.result_label = tkinter.Label(self.main_window, text = 'Monthly Payment', anchor = "w")
    self.monthlyPayment = tkinter.StringVar()
    self.monthlyPayment_label = tkinter.Label(self.main_window, textvariable = self.monthlyPayment)
    self.result_label.pack(side = "top", anchor = "w")
    self.monthlyPayment_label.pack(side = "top", anchor = "w")

    self.result2_label = tkinter.Label(self.main_window, text = 'Total Payment', anchor = "w")
    self.totalPayment = tkinter.StringVar()
    self.totalPayment_label = tkinter.Label(self.main_window, textvariable = self.totalPayment)
    self.result2_label.pack(side = "top", anchor = "w")
    self.totalPayment_label.pack(side = "top", anchor = "w")

    self.compute_button = tkinter.Button(self.main_window, text = 'Compute Payment', command = self.calc)
    self.compute_button.pack(side = "top")
    tkinter.mainloop()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    self.main_window = tkinter.Tk()
    self.main_window.title("Loan Calculator")

    self.intRate_frame = tkinter.Frame(self.main_window)
    self.intRate_frame.pack()
    self.numYears_frame = tkinter.Frame(self.main_window)
    self.numYears_frame.pack(fill = 'both')
    self.loanAmount_frame = tkinter.Frame(self.main_window)
    self.loanAmount_frame.pack(fill = 'both')
    self.monthlyPayment_frame = tkinter.Frame(self.main_window)
    self.monthlyPayment_frame.pack(fill = 'both')
    self.totalPayment_frame = tkinter.Frame(self.main_window)
    self.totalPayment_frame.pack(fill = 'both')
    self.button_frame = tkinter.Frame(self.main_window)
    self.button_frame.pack(fill = 'both')

    self.intRate_label = tkinter.Label(self.intRate_frame, text = 'Annual Interest Rate', anchor = "w")
    self.intRate_entry = tkinter.Entry(self.intRate_frame, width = 20, justify = 'right')
    self.intRate_label.pack(side = 'left')
    self.intRate_entry.pack(side = 'left')

    self.numYears_label = tkinter.Label(self.numYears_frame, text = 'Number of Years')
    self.numYears_entry = tkinter.Entry(self.numYears_frame, justify = 'right')
    self.numYears_label.pack(side = 'left')
    self.numYears_entry.pack(side = 'right')

    self.loanAmount_label = tkinter.Label(self.loanAmount_frame, text = 'Loan Amount', anchor = "nw")
    self.loanAmount_entry = tkinter.Entry(self.loanAmount_frame, width = 20, justify = 'right')
    self.loanAmount_label.pack(side = 'left')
    self.loanAmount_entry.pack(side = 'right')

    self.result_label = tkinter.Label(self.monthlyPayment_frame, text = 'Monthly Payment', anchor = "w")
    self.monthlyPayment = tkinter.StringVar()
    self.monthlyPayment_label = tkinter.Label(self.monthlyPayment_frame, textvariable = self.monthlyPayment)
    self.result_label.pack(side = 'left')
    self.monthlyPayment_label.pack(side = 'right')

    self.result2_label = tkinter.Label(self.totalPayment_frame, text = 'Total Payment', anchor = "w")
    self.totalPayment = tkinter.StringVar()
    self.totalPayment_label = tkinter.Label(self.totalPayment_frame, textvariable = self.totalPayment)
    self.result2_label.pack(side = 'left')
    self.totalPayment_label.pack(side = 'left')

    self.compute_button = tkinter.Button(self.button_frame, text = 'Compute Payment', command = self.calc)
    self.compute_button.pack(side = 'right')
    self.intRate_frame.pack()
    self.numYears_frame.pack()
    self.loanAmount_frame.pack()
    self.monthlyPayment_frame.pack()
    self.totalPayment_frame.pack()
    self.button_frame.pack()
    tkinter.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50430449_50430925_10_19
50430449_50430925_21_80
Title: Using QComboBox to select different set of widgets displayed in PyQt5 / PySide2 
----------------------------------------

def __init__(self, parent) :
INDENT
    super(View, self).__init__()
    self.scene = QGraphicsScene(self)
    self.photo = QGraphicsPixmapItem()
    self.scene.addItem(self.photo)
    self.pixmap = QPixmap(image_path_str)
    self.photo.setPixmap(self.pixmap)
    self.setScene(self.scene)
    self.setDragMode(QGraphicsView.ScrollHandDrag)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(Window, self).__init__()
    self.view = View(self)
    self.layout_contain_P1_P2 = QGridLayout()
    self.checkbox_P1 = QCheckBox("P1", self)
    self.line_edit_P1_x = QLineEdit(self)
    self.line_edit_P1_x.setReadOnly(True)
    self.line_edit_P1_y = QLineEdit(self)
    self.line_edit_P1_y.setReadOnly(True)
    self.layout_contain_P1_P2.addWidget(self.checkbox_P1, 0, 0, Qt.AlignLeft)
    self.grid_layout_P1_x_y = QGridLayout()
    self.grid_layout_P1_x_y.addWidget(self.line_edit_P1_x, 1, 0, Qt.AlignLeft)
    self.grid_layout_P1_x_y.addWidget(self.line_edit_P1_y, 2, 0, Qt.AlignLeft)
    self.layout_contain_P1_P2.addLayout(self.grid_layout_P1_x_y, 0, 1, 1, 1)
    self.checkbox_P2 = QCheckBox("P2", self)
    self.line_edit_P2_x = QLineEdit(self)
    self.line_edit_P2_x.setReadOnly(True)
    self.line_edit_P2_y = QLineEdit(self)
    self.line_edit_P2_y.setReadOnly(True)
    self.layout_contain_P1_P2.addWidget(self.checkbox_P2, 1, 0, Qt.AlignLeft)
    self.grid_layout_P2_x_y = QGridLayout()
    self.grid_layout_P2_x_y.addWidget(self.line_edit_P2_x, 0, 0, Qt.AlignLeft)
    self.grid_layout_P2_x_y.addWidget(self.line_edit_P2_y, 1, 0, Qt.AlignLeft)
    self.layout_contain_P1_P2.addLayout(self.grid_layout_P2_x_y, 1, 1, Qt.AlignLeft)
    self.vertical1 = QVBoxLayout()
    self.model = create_model(d)
    ix = self.model.index(0, 0)
    self.combos = []
    while self.model.hasChildren(ix) :
    INDENT
        combo = QComboBox()
        combo.setModel(self.model)
        self.vertical1.addWidget(combo)
        combo.setRootModelIndex(ix)
        combo.setCurrentIndex(0)
        ix = ix.child(0, 0)
        combo.currentIndexChanged.connect(self.on_currentIndexChanged)
        self.combos.append(combo)
    DEDENT
    self.vertical1.addLayout(self.layout_contain_P1_P2)
    self.vertical2 = QVBoxLayout()
    self.vertical2.addWidget(self.view)
    self.horizontal = QHBoxLayout()
    self.horizontal.addLayout(self.vertical1)
    self.horizontal.addLayout(self.vertical2)
    self.setLayout(self.horizontal)
    self.setWindowTitle("Image viewer")
    self.setGeometry(200, 200, 1000, 800)
DEDENT
----------------------------------------

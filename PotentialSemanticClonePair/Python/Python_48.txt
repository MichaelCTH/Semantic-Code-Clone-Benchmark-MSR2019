$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47515111_47515348_1_20
47515111_47515348_2_15
Title: "Collatz Conjecture; How can I edit this python code so that it tries every number from 1 until infinity" 
----------------------------------------

def collataz(number) :
INDENT
    def collataz(number, all_nums) :
    INDENT
        while True :
        INDENT
            all_nums.append(number)
            if number % 2 == 0 :
            INDENT
                number = number / / 2
            DEDENT
            elif number % 2 == 1 :
            INDENT
                number = 3 * number + 1
            DEDENT
            if number == 1 :
            INDENT
                all_nums.append(1)
                return all_nums
            DEDENT
        DEDENT
    DEDENT
    rv = []
    collataz(number, rv)
    return rv

DEDENT
----------------------------------------

def collataz(number, all_nums) :
INDENT
    while True :
    INDENT
        all_nums.append(number)
        if number % 2 == 0 :
        INDENT
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = 3 * number + 1
        DEDENT
        if number == 1 :
        INDENT
            all_nums.append(1)
            return all_nums
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47515111_47515348_1_20
47515111_47515574_1_19
Title: "Collatz Conjecture; How can I edit this python code so that it tries every number from 1 until infinity" 
----------------------------------------

def collataz(number) :
INDENT
    def collataz(number, all_nums) :
    INDENT
        while True :
        INDENT
            all_nums.append(number)
            if number % 2 == 0 :
            INDENT
                number = number / / 2
            DEDENT
            elif number % 2 == 1 :
            INDENT
                number = 3 * number + 1
            DEDENT
            if number == 1 :
            INDENT
                all_nums.append(1)
                return all_nums
            DEDENT
        DEDENT
    DEDENT
    rv = []
    collataz(number, rv)
    return rv

DEDENT
----------------------------------------

def collataz(number) :
INDENT
    print(number, end = ': ')
    initial_number = number
    while True :
    INDENT
        if number == 1 :
        INDENT
            print ("DONE!")
            break
        DEDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            if number < initial_number :
            INDENT
                print ('[{}]'.format(number))
                break
            DEDENT
            print(number, end = ' ')
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = 3 * number + 1
            print(number, end = ' ')
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47515111_47515348_2_15
47515111_47515574_1_19
Title: "Collatz Conjecture; How can I edit this python code so that it tries every number from 1 until infinity" 
----------------------------------------

def collataz(number, all_nums) :
INDENT
    while True :
    INDENT
        all_nums.append(number)
        if number % 2 == 0 :
        INDENT
            number = number / / 2
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = 3 * number + 1
        DEDENT
        if number == 1 :
        INDENT
            all_nums.append(1)
            return all_nums
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def collataz(number) :
INDENT
    print(number, end = ': ')
    initial_number = number
    while True :
    INDENT
        if number == 1 :
        INDENT
            print ("DONE!")
            break
        DEDENT
        if number % 2 == 0 :
        INDENT
            number = number / / 2
            if number < initial_number :
            INDENT
                print ('[{}]'.format(number))
                break
            DEDENT
            print(number, end = ' ')
        DEDENT
        elif number % 2 == 1 :
        INDENT
            number = 3 * number + 1
            print(number, end = ' ')
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47522197_47522234_2_14
47522197_47522236_1_75
Title: Error: returned list doesn't a valid sequence of combinations 
----------------------------------------

def combine(colors, fruits, amount = None) :
INDENT
    assert len(fruits) == len(colors)
    random.shuffle(colors)
    random.shuffle(fruits)
    result = []
    for combi in zip(colors, fruits) :
    INDENT
        result.append(list(combi))
    DEDENT
    if amount is not None and amount < len(fruits) :
    INDENT
        result = result [: amount]
    DEDENT
    return result
DEDENT
----------------------------------------

def combine(colors, fruits, amount = None) :
INDENT
    '''
    >>> colors = ['purple', 'yellow', 'green']
    >>> fruits = ('grape', 'banana', 'apple')
    >>> combine(colors, fruits)
    ['a purple grape', 'a green banana', 'a yellow apple']
    >>> combine(colors, fruits)
    ['a purple grape', 'a green apple', 'a yellow banana']
    >>> combine(colors, fruits)
    ['a purple apple', 'a yellow grape', 'a green banana']
    >>> combine(colors, fruits, amount=1)
    ['a purple grape']
    >>> combine(colors, fruits, amount=2)
    ['a yellow apple', 'a green banana']    
    >>> combine(colors, fruits, amount=4)
    ['a yellow banana', 'a green grape', 'a purple apple']
    '''

    import random
    secure_random = random.SystemRandom()
    listcolors = list(colors)
    listfruits = list(fruits)
    l = list()
    count = 0
    if amount is None :
    INDENT

        b = len(list(colors))
        if len(list(fruits)) > = len(list(colors)) :
        INDENT
            b = len(list(colors))
        DEDENT
        if len(list(fruits)) < = len(list(colors)) :
        INDENT
            b = len(list(fruits))
        DEDENT
        while count < b :
        INDENT

            word1 = "a"
            word2 = random.choice(listcolors)
            listcolors.remove(word2)
            word3 = random.choice(listfruits)
            listfruits.remove(word3)
            k = str(word1 + ' ' + word2 + ' ' + word3)
            l.append(k)
            count += 1
        DEDENT
    DEDENT
    else :
    INDENT
        if amount < len(list(colors)) and amount < len(list(fruits)) :
        INDENT
            amount2 = amount
        DEDENT
        if amount > len(list(colors)) and amount > len(list(fruits)) :
        INDENT
            if len(list(colors)) > = len(list(fruits)) :
            INDENT
                amount2 = len(list(fruits))
            DEDENT
            if len(list(colors)) < = len(list(fruits)) :
            INDENT
                amount2 = len(list(colors))
            DEDENT
            listcolors = list(colors)
            listfruits = list(fruits)
        DEDENT
        while count < amount2 :
        INDENT
            word1 = "a"
            word2 = random.choice(listcolors)
            listcolors.remove(word2)
            word3 = random.choice(listfruits)
            listfruits.remove(word3)
            k = str(word1 + ' ' + word2 + ' ' + word3)
            l.append(k)
            count += 1
        DEDENT
    DEDENT
    return l
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47529493_47529727_1_17
47529493_47530766_38_70
Title: Call class and inherit from another class - python 3 
----------------------------------------

def __init__(self, master, username, password) :
INDENT
    self.path = os.getcwd()
    self.master = master
    self.username = username
    self.password = password
    master.title("main menu")
    master.geometry("800x600")
    master.config(background = "white")
    master.resizable(width = "false", height = "false")
    master.iconbitmap(self.path + r"/img/icon.ico")
    self.mmenu = Menu(master)
    self.menubar = Menu(self.mmenu, tearoff = 0)
    self.menubar.add_command(label = "about", command = aboutme)
    self.menubar.add_command(label = "Exit!", command = master.destroy)
    self.mmenu.add_cascade(label = "menu", menu = self.menubar)
    master.config(menu = self.mmenu)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    self.master = Tk()
    self.path = os.path.realpath(sys.argv [0])
    self.master.title("login")
    self.master.geometry("350x250")
    self.master.config(background = "white")
    self.master.resizable(width = "false", height = "false")

    self.username = StringVar()
    self.password = StringVar()
    self.user_label = Label(self.master, text = "user name")
    self.user_label.pack()
    self.user_value = Entry(self.master, textvariable = self.username)
    self.user_value.pack()

    self.password_label = Label(self.master, text = "password")
    self.password_label.pack()
    self.password_value = Entry(self.master, textvariable = self.password)
    self.password_value.pack()
    self.login = Button(self.master, text = "login", command = self.validation)
    self.login.pack()
    self.message = Label(self.master)
    self.message.pack()
    self.message.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47529493_47529727_1_17
47529493_47530766_7_31
Title: Call class and inherit from another class - python 3 
----------------------------------------

def __init__(self, master, username, password) :
INDENT
    self.path = os.getcwd()
    self.master = master
    self.username = username
    self.password = password
    master.title("main menu")
    master.geometry("800x600")
    master.config(background = "white")
    master.resizable(width = "false", height = "false")
    master.iconbitmap(self.path + r"/img/icon.ico")
    self.mmenu = Menu(master)
    self.menubar = Menu(self.mmenu, tearoff = 0)
    self.menubar.add_command(label = "about", command = aboutme)
    self.menubar.add_command(label = "Exit!", command = master.destroy)
    self.mmenu.add_cascade(label = "menu", menu = self.menubar)
    master.config(menu = self.mmenu)
DEDENT
----------------------------------------

def __init__(self, username, password) :
INDENT
    self.master = Tk()
    self.path = os.getcwd()
    self.path = os.path.realpath(sys.argv [0])
    self.username = StringVar(value = username)
    self.password = StringVar(value = password)
    self.master.title("main menu")
    self.master.geometry("800x600")
    self.master.config(background = "white")
    self.master.resizable(width = "false", height = "false")

    self.mmenu = Menu(self.master)
    self.menubar = Menu(self.mmenu, tearoff = 0)
    self.menubar.add_command(label = "about", command = self.aboutme)
    self.menubar.add_command(label = "Exit!", command = self.master.destroy)
    self.mmenu.add_cascade(label = "menu", menu = self.menubar)
    self.master.config(menu = self.mmenu)
    self.master.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47529493_47530766_38_70
47529493_47530766_7_31
Title: Call class and inherit from another class - python 3 
----------------------------------------

def __init__(self) :
INDENT
    self.master = Tk()
    self.path = os.path.realpath(sys.argv [0])
    self.master.title("login")
    self.master.geometry("350x250")
    self.master.config(background = "white")
    self.master.resizable(width = "false", height = "false")

    self.username = StringVar()
    self.password = StringVar()
    self.user_label = Label(self.master, text = "user name")
    self.user_label.pack()
    self.user_value = Entry(self.master, textvariable = self.username)
    self.user_value.pack()

    self.password_label = Label(self.master, text = "password")
    self.password_label.pack()
    self.password_value = Entry(self.master, textvariable = self.password)
    self.password_value.pack()
    self.login = Button(self.master, text = "login", command = self.validation)
    self.login.pack()
    self.message = Label(self.master)
    self.message.pack()
    self.message.mainloop()
DEDENT
----------------------------------------

def __init__(self, username, password) :
INDENT
    self.master = Tk()
    self.path = os.getcwd()
    self.path = os.path.realpath(sys.argv [0])
    self.username = StringVar(value = username)
    self.password = StringVar(value = password)
    self.master.title("main menu")
    self.master.geometry("800x600")
    self.master.config(background = "white")
    self.master.resizable(width = "false", height = "false")

    self.mmenu = Menu(self.master)
    self.menubar = Menu(self.mmenu, tearoff = 0)
    self.menubar.add_command(label = "about", command = self.aboutme)
    self.menubar.add_command(label = "Exit!", command = self.master.destroy)
    self.mmenu.add_cascade(label = "menu", menu = self.menubar)
    self.master.config(menu = self.mmenu)
    self.master.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47536287_47536452_1_10
47536287_47536722_1_11
Title: Python text file into dictionary not working 
----------------------------------------

def read_dict() :
INDENT
    file1 = open("file.txt", "r").read()
    my_dict = {}
    for line in file1 :
    INDENT
        line = line.split()
        if not line :
        INDENT
            continue
        DEDENT
        my_dict [line [0]] = line [1 :]
    DEDENT
    return my_dict
DEDENT
----------------------------------------

def read_dict() :
INDENT
    with open("file.txt", 'r') as file1 :
    INDENT
        dict = {}
        lines = file1.readlines()
        for line in lines :
        INDENT
            line = line.split()
            if not line : continue
            dict [line [0]] = line [1 :]
        DEDENT
        print (dict)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47544476_47544490_1_6
47544476_47544526_1_5
Title: How come my counter is only returning 1? 
----------------------------------------

def custom_len(input) :
INDENT
    counter = 0
    for i in input :
    INDENT
        counter += 1
    DEDENT
    return counter
DEDENT
----------------------------------------

def custom_len(input) :
INDENT
    counter = 0
    for i in input :
    INDENT
        counter += 1
    DEDENT
    return counter
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47556122_47559208_21_33
47556122_47559208_5_19
Title: Button for duplicating tabs in a QTabWidget 
----------------------------------------

def __init__(self) :
INDENT
    super().__init__()
    self.tabs = QtWidgets.QTabWidget()
    layout = QtWidgets.QVBoxLayout(self)
    layout.addWidget(self.tabs)
    button = QtWidgets.QToolButton()
    button.setToolTip('Add New Tab')
    button.clicked.connect(self.addNewTab)
    button.setIcon(self.style().standardIcon(
            QtWidgets.QStyle.SP_DialogYesButton))
    self.tabs.setCornerWidget(button, QtCore.Qt.TopRightCorner)
    self.addNewTab()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super().__init__(parent)
    group = QtWidgets.QGroupBox('Monty Python')
    layout = QtWidgets.QVBoxLayout(self)
    layout.addWidget(group)
    grid = QtWidgets.QGridLayout(group)
    grid.addWidget(QtWidgets.QLabel('Enter a name:'), 0, 0)
    grid.addWidget(QtWidgets.QLabel('Choose a number:'), 0, 1)
    grid.addWidget(QtWidgets.QLineEdit(), 1, 0)
    grid.addWidget(QtWidgets.QComboBox(), 1, 1)
    grid.addWidget(QtWidgets.QPushButton('Click Me!'), 1, 2)
    grid.addWidget(QtWidgets.QSpinBox(), 2, 0)
    grid.addWidget(QtWidgets.QPushButton('Clear Text'), 2, 2)
    grid.addWidget(QtWidgets.QTextEdit(), 3, 0, 1, 3)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47560026_47560096_7_14
47560026_47560140_9_16
Title: how to get python 3 to use ENTER as an input? 
----------------------------------------

def main() :
INDENT
    while True :
    INDENT
        if not input("Hit ENTER to roll a single dice: ") :
        INDENT
            roll_dice()
        DEDENT
        else :
        INDENT
            print ("exiting program.")
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    enter = input("Hit ENTER to roll a single dice: ")
    if enter == '' :
    INDENT
        roll_dice()
    DEDENT
    else :
    INDENT
        print ("exiting program.")
        exit()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47570276_47570458_3_13
47570276_47570936_3_21
Title: python contact book while loop issue 
----------------------------------------

def addcontact() :
INDENT
    while True :
    INDENT
        name = input("Enter the name of your new contact")
        number = int(input("Enter your phone contact"))
        contactbook [name] = number
        print ("Contact book successfully updated with  :   ", contactbook.items())
        qu = 'X'
        while qu not in 'YN' :
        INDENT
            qu = input("Do you want to add a new contact? Y/N: ").upper()
        DEDENT
        if qu == 'N' :
        INDENT
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def addcontact() :
INDENT
    keepadding = True
    while keepadding :
    INDENT
        name = input("Enter the name of your new contact: ")
        number = int(input("Enter your phone contact: "))
        contactbook [name] = number
        print ("Contact book successfully updated with {}, {}".format(name, number))
        while True :
        INDENT
            qu = input("Do you want to add a new contact? Y/N ").upper()
            if qu in 'YN' :
            INDENT
                break
            DEDENT
            print ("That's not a valid input. Try again.")
        DEDENT
        keepadding = qu.upper() == 'Y'

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47591430_47591909_13_22
47591430_47592283_1_9
Title: Algorithm for data rearrangement in a Python dict 
----------------------------------------

def rotate(data, playerKey) :
INDENT
    playerIndex = int(playerKey [- 1])
    rearrangedData = {}
    for key in data :
    INDENT
        index = int(key [- 1])
        correspondingPlayerKey = 'player_' + str((playerIndex - 1 + index - 1) % len(data.keys()) + 1)
        rearrangedData [key] = data [correspondingPlayerKey]
    DEDENT
    return rearrangedData

DEDENT
----------------------------------------

def rotate(players, top) :
INDENT
    keys, vals = zip(* sorted(players.items()))
    idx = keys.index(top)
    keys = keys [idx :] + keys [: idx]
    players.clear()
    players.update(zip(keys, vals))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47596344_47596458_1_12
47596344_47596647_8_19
Title: loop for a print from list and removes that printed iteam and stops at 0 for quiz project 
----------------------------------------

def ask_questions() :
INDENT
    choice = (random.choice(question))
    index = question.index(choice)
    print (choice)
    print (options [index])
    answer = raw_input(inputs)
    if answer == answers [index] :
    INDENT
        print ("correct")
    DEDENT
    else :
    INDENT
        print ("incorrect")
    DEDENT
    del question [index]
    del options [index]
DEDENT
----------------------------------------

def ask_questions() :
INDENT
    all_questions = QUESTIONS_ANSWERS.keys()
    random.shuffle(all_questions)
    for question in all_questions :
    INDENT
        options = QUESTIONS_ANSWERS [question]
        correct_option = options [0]
        random.shuffle(options)
        print "Q:", question
        print options
        answer = raw_input("><![CDATA[>> ")
        print "correct" if (answer == correct_option) else "incorrect"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47599420_47599498_1_10
47599420_47599571_1_17
Title: "finding primes in a list then printing them" 
----------------------------------------

def pSieve(limit) :
INDENT
    flags = [True] * limit
    flags [0] = flags [1] = False
    primes = []
    for index, flag in enumerate(flags) :
    INDENT
        if flag :
        INDENT
            primes.append(index)
            for n in range(index * index, limit, index) :
            INDENT
                flags [n] = False
            DEDENT
        DEDENT
    DEDENT
    return primes
DEDENT
----------------------------------------

def pSieve(n) :
INDENT
    m = (n - 1)
    b = [True] * m
    i, p, ps = 0, 3, [2]
    while p * p < n :
    INDENT
        if b [i] :
        INDENT
            ps.append(p)
            j = 2 * i * i + 6 * i + 3
            while j < m :
            INDENT
                b [j] = False
                j = j + 2 * i + 3
            DEDENT
        DEDENT
        i += 1; p += 2
    DEDENT
    while i < m :
    INDENT
        if b [i] :
        INDENT
            ps.append(p)
        DEDENT
        i += 1; p += 2
    DEDENT
    return ps
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47600975_47601068_3_17
47600975_47601309_1_15
Title: Recursive function: Syracuse 
----------------------------------------

def syracuse(n) :
INDENT
    syracuse_sequence = [n]
    while True :
    INDENT
        if n == 1 :
        INDENT
            print (syracuse_sequence)
            return 0
        DEDENT
        elif n % 2 == 0 :
        INDENT
            n /= 2
            syracuse_sequence.append(round(n))
            continue
        DEDENT
        else :
        INDENT
            n = (n * 3) + 1
            syracuse_sequence.append(round(n))
            continue
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def syracuse(n, acc = None) :
INDENT
    if acc is None :
    INDENT
        acc = []
    DEDENT
    if n == 1 :
    INDENT
        acc.append(n)
        return acc
    DEDENT
    elif n % 2 == 0 :
    INDENT
        n /= 2
        acc.append(n)
        return syracuse(n, acc)
    DEDENT
    else :
    INDENT
        n = (n * 3) + 1
        acc.append(n)
        return syracuse(n, acc)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47600975_47601068_3_17
47600975_47601381_1_11
Title: Recursive function: Syracuse 
----------------------------------------

def syracuse(n) :
INDENT
    syracuse_sequence = [n]
    while True :
    INDENT
        if n == 1 :
        INDENT
            print (syracuse_sequence)
            return 0
        DEDENT
        elif n % 2 == 0 :
        INDENT
            n /= 2
            syracuse_sequence.append(round(n))
            continue
        DEDENT
        else :
        INDENT
            n = (n * 3) + 1
            syracuse_sequence.append(round(n))
            continue
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def syracuse(seq) :
INDENT
    if type(seq) is not list :
    INDENT
        seq = [seq]
    DEDENT
    n = seq [- 1]
    if n == 1 :
    INDENT
        return seq
    DEDENT
    if n % 2 :
    INDENT
        seq.append(n * 3 + 1)
        return syracuse(seq)
    DEDENT
    seq.append(n / / 2)
    return syracuse(seq)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47600975_47601309_1_15
47600975_47601381_1_11
Title: Recursive function: Syracuse 
----------------------------------------

def syracuse(n, acc = None) :
INDENT
    if acc is None :
    INDENT
        acc = []
    DEDENT
    if n == 1 :
    INDENT
        acc.append(n)
        return acc
    DEDENT
    elif n % 2 == 0 :
    INDENT
        n /= 2
        acc.append(n)
        return syracuse(n, acc)
    DEDENT
    else :
    INDENT
        n = (n * 3) + 1
        acc.append(n)
        return syracuse(n, acc)
    DEDENT
DEDENT
----------------------------------------

def syracuse(seq) :
INDENT
    if type(seq) is not list :
    INDENT
        seq = [seq]
    DEDENT
    n = seq [- 1]
    if n == 1 :
    INDENT
        return seq
    DEDENT
    if n % 2 :
    INDENT
        seq.append(n * 3 + 1)
        return syracuse(seq)
    DEDENT
    seq.append(n / / 2)
    return syracuse(seq)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47612009_47613670_1_19
47612009_47613677_2_21
Title: Validating username/pswd from .txt file in python - unwanted looping 
----------------------------------------

def login() :
INDENT
    passwordAttemptLoop = 3
    print ("You have chosen to login!\n")
    while passwordAttemptLoop > 0 :
    INDENT
        usernameAttempt = input("Please print your username below\n")
        passwordAttempt = input("Please print your password below\n")
        for line in open("usrnmPswd.txt", "r").readlines() [2 :] :
        INDENT
            loginDetails = line.split()
            if usernameAttempt == loginDetails [0] and passwordAttempt == loginDetails [1] :
            INDENT
                startQuiz()
                return
            DEDENT
        DEDENT
        print ("Your username and/ or password is incorrect! Please try again!")
        passwordAttemptLoop = passwordAttemptLoop - 1
    DEDENT
    print ('You are out of login attempts. Please try again later')
DEDENT
----------------------------------------

def login() :
INDENT
    passwordAttemptLoop = 0
    print ("You have chosen to login!\n")
    while passwordAttemptLoop == 0 :
    INDENT
        usernameAttempt = input("Please print your username below\n")
        passwordAttempt = input("Please print your password below\n")
        searchfile = open("usrnmPswd.txt", "r")
        for line in searchfile :
        INDENT
            if usernameAttempt in line :
            INDENT
                loginDetails = line.split()
                if usernameAttempt == loginDetails [0] and passwordAttempt == loginDetails [1] :
                INDENT
                    passwordAttemptLoop = passwordAttemptLoop + 1
                    startQuiz()
                    searchfile.close()
                DEDENT
                else :
                INDENT
                    print ("Your username and/ or password is incorrect! Please try again!")
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47613657_47613741_1_16
47613657_47613935_3_12
Title: Need to print an author of a book by the book's title 
----------------------------------------

def load_library(a) :
INDENT
    s = open(a, 'r')
    result = []
    while True :
    INDENT
        theline = s.readline()
        razdel = theline.split('|')
        if len(theline) == 0 :
        INDENT
            break
        DEDENT
        books_authors = razdel.pop(1)
        result.append(book_authors)
    DEDENT
    s.close()
    return result

DEDENT
----------------------------------------

def load_library(filename) :
INDENT
    authors_by_book = {}
    with open(filename) as file :
    INDENT
        for line in file :
        INDENT
            author, title = line.strip().split('|')
            authors_by_book.setdefault(author, []).append(title)
        DEDENT
    DEDENT
    return authors_by_book

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47616114_47616311_1_14
47616114_47616652_6_18
Title: how to loop over the elementary arithmetic symbols 
----------------------------------------

def is_hundred(args, res = '') :
INDENT
    if res == '' :
    INDENT
        res = args [0]
        args = args [1 :]
    DEDENT
    if not args :
    INDENT
        if eval(res) == 100 :
        INDENT
            print (res)
        DEDENT
    DEDENT
    else :
    INDENT
        first = args [0]
        for op in ['+', '-', '*', '/'] :
        INDENT
            is_hundred(args [1 :], "{}{}{}".format(res, op, first))

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def is_hundred(values) :
INDENT
    n_operators = len(values) - 1
    for ops in product(operators, repeat = n_operators) :
    INDENT
        value = values [0]
        for op, v in zip(ops, values [1 :]) :
        INDENT
            value = op(value, v)
        DEDENT
        if value == 100 :
        INDENT
            print (list(ops))
            return True
        DEDENT
    DEDENT
    else :
    INDENT
        return False
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47631914_52822293_7_13
47631914_52876175_7_29
Title: How to pass several list of arguments to @click.option 
----------------------------------------

def do_stuff(option) :
INDENT
    try :
    INDENT
        option = json.loads(option)
    DEDENT
    except ValueError :
    INDENT
        pass
    DEDENT
DEDENT
----------------------------------------

def do_stuff(option) :
INDENT
    try :
    INDENT
        option = json.loads(option)
    DEDENT
    except ValueError :
    INDENT
        pass
    DEDENT
    option = option [1 : - 1]
    options = option.split(',')
    for i, value in enumerate(options) :
    INDENT
        try :
        INDENT
            int(value)
        DEDENT
        except ValueError :
        INDENT
            options [i] = value
        DEDENT
        else :
        INDENT
            options [i] = int(value)

        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47636985_47704546_22_37
47636985_47704546_6_19
Title: WxPython Window Splitter 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, title = 'Splitters')
    panel = wx.Panel(self)
    main_sizer = wx.BoxSizer(wx.VERTICAL)
    splitter_panel = SplitterPanel(panel, color = 'blue')
    main_sizer.Add(splitter_panel, 1, wx.ALL | wx.EXPAND)
    splitter_panel_two = SplitterPanel(panel, color = 'red')
    main_sizer.Add(splitter_panel_two, 1, wx.ALL | wx.EXPAND)
    panel.SetSizer(main_sizer)
    self.Show()

DEDENT
----------------------------------------

def __init__(self, parent, color) :
INDENT
    wx.Panel.__init__(self, parent)
    main_sizer = wx.BoxSizer(wx.VERTICAL)
    splitter = MultiSplitterWindow(self, style = wx.SP_LIVE_UPDATE)
    for col in range(3) :
    INDENT
        panel = wx.Panel(splitter, size = (200, 200))
        panel.SetBackgroundColour(color)
        splitter.AppendWindow(panel)
    DEDENT
    main_sizer.Add(splitter, 1, wx.ALL | wx.EXPAND)
    self.SetSizer(main_sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47639826_47664205_21_44
47639826_47664205_66_85
Title: Pygame button single click 
----------------------------------------

def __init__(self, x, y, width, height, callback,
font = FONT, text = '', text_color = (0, 0, 0),
image_normal = IMAGE_NORMAL, image_hover = IMAGE_HOVER,
image_down = IMAGE_DOWN) :
INDENT
    super().__init__()
    self.image_normal = pg.transform.scale(image_normal, (width, height))
    self.image_hover = pg.transform.scale(image_hover, (width, height))
    self.image_down = pg.transform.scale(image_down, (width, height))
    self.image = self.image_normal
    self.rect = self.image.get_rect(topleft = (x, y))
    image_center = self.image.get_rect().center
    text_surf = font.render(text, True, text_color)
    text_rect = text_surf.get_rect(center = image_center)
    for image in (self.image_normal, self.image_hover, self.image_down) :
    INDENT
        image.blit(text_surf, text_rect)

    DEDENT
    self.callback = callback
    self.button_down = False
DEDENT
----------------------------------------

def __init__(self, screen) :
INDENT
    self.done = False
    self.clock = pg.time.Clock()
    self.screen = screen

    self.all_sprites = pg.sprite.Group()
    self.number = 0
    self.start_button = Button(
        320, 70, 170, 65, self.increment_number,
        FONT, 'Increment', (255, 255, 255),
        IMAGE_NORMAL, IMAGE_HOVER, IMAGE_DOWN)
    self.quit_button = Button(
        320, 240, 170, 65, self.quit_game,
        FONT, 'Quit', (255, 255, 255))
    self.all_sprites.add(self.start_button, self.quit_button)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47661965_47662005_1_18
47661965_47663442_5_32
Title: Searching list of words in scrabble with blank tile using Python 
----------------------------------------

def valid_word(word, rack) :
INDENT
    available_letters = rack [:]
    blank_count = available_letters.count('_')

    missed_counter = 0
    for letter in word :
    INDENT
        if letter in available_letters :
        INDENT
            available_letters.remove(letter)
        DEDENT
        else :
        INDENT
            missed_counter += 1

        DEDENT
    DEDENT
    if missed_counter < = blank_count :
    INDENT
        print (word)
    DEDENT
DEDENT
----------------------------------------

def valid_word(words, letters) :
INDENT
    not_valid = []
    valid = []
    wild = 0
    for letter in letters :
    INDENT
        if letter == '_' :
        INDENT
            wild += 1
        DEDENT
    DEDENT
    for word in words :
    INDENT
        missing = 0
        for letter in word :
        INDENT
            if letter not in letters :
            INDENT
                missing += 1
                if missing > wild :
                INDENT
                    not_valid.append(word)
                    break
                DEDENT
            DEDENT
        DEDENT
        if word not in not_valid :
        INDENT
            s = ''
            for letter in word :
            INDENT
                if letter in letters :
                INDENT
                    s += letter
                DEDENT
                else :
                INDENT
                    s += '_'
                DEDENT
            DEDENT
            valid.append(s)
        DEDENT
    DEDENT
    return valid
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47665777_47668007_107_134
47665777_47668007_15_40
Title: How to use Pygame's sprite_collide_mask method to detect direction of collision? 
----------------------------------------

def __init__(self) :
INDENT
    self.done = False
    self.screen = pg.display.set_mode((800, 600))
    self.clock = pg.time.Clock()
    self.bg_color = pg.Color(60, 60, 60)
    self.space = pm.Space()
    self.space.gravity = Vec2d(0.0, 0.0)
    self.space.damping =.4
    self.all_sprites = pg.sprite.Group()
    self.ball = Ball((300, 300), self.space)
    self.ball2 = Ball((400, 300), self.space)
    self.all_sprites.add(self.ball, self.ball2)
    vertices = [
        ([10, 80], ((0, 0), (200, 0), (90, 500), (0, 500))),
        ([400, 250], ((40, 80), (200, 0), (170, 90), (10, 170))),
        ([600, 450], ((20, 40), (300, 0), (300, 120), (10, 100))),
        ([760, 10], ((0, 0), (30, 0), (30, 420), (0, 400))),
        ([10, 10], ((0, 0), (760, 0), (700, 60), (0, 60))),
        ([10, 580], ((0, 0), (760, 0), (700, 60), (0, 60))),
        ]
    for pos, verts in vertices :
    INDENT
        Wall(pos, verts, self.space, 1, self.all_sprites)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, pos, space) :
INDENT
    super().__init__()
    self.image = pg.Surface((60, 60), pg.SRCALPHA)
    pg.draw.circle(self.image, pg.Color('steelblue2'), (30, 30), 29)
    pg.draw.circle(self.image, pg.Color('black'), (30, 10), 5)
    self.rect = self.image.get_rect(center = pos)
    self.orig_image = self.image
    self.body = pm.Body()
    self.shape = pm.Circle(self.body, radius = 30)
    self.shape.density =.0001
    self.shape.friction =.1
    self.shape.elasticity =.99
    self.body.position = pos
    self.space = space
    self.space.add(self.body, self.shape)
    print (self.body.mass)
    self.accel_forw = False
    self.accel_back = False
    self.turn_left = False
    self.turn_right = False
    self.topspeed = 1790
    self.angle = 0
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47665777_47668007_107_134
47665777_47668007_83_104
Title: How to use Pygame's sprite_collide_mask method to detect direction of collision? 
----------------------------------------

def __init__(self) :
INDENT
    self.done = False
    self.screen = pg.display.set_mode((800, 600))
    self.clock = pg.time.Clock()
    self.bg_color = pg.Color(60, 60, 60)
    self.space = pm.Space()
    self.space.gravity = Vec2d(0.0, 0.0)
    self.space.damping =.4
    self.all_sprites = pg.sprite.Group()
    self.ball = Ball((300, 300), self.space)
    self.ball2 = Ball((400, 300), self.space)
    self.all_sprites.add(self.ball, self.ball2)
    vertices = [
        ([10, 80], ((0, 0), (200, 0), (90, 500), (0, 500))),
        ([400, 250], ((40, 80), (200, 0), (170, 90), (10, 170))),
        ([600, 450], ((20, 40), (300, 0), (300, 120), (10, 100))),
        ([760, 10], ((0, 0), (30, 0), (30, 420), (0, 400))),
        ([10, 10], ((0, 0), (760, 0), (700, 60), (0, 60))),
        ([10, 580], ((0, 0), (760, 0), (700, 60), (0, 60))),
        ]
    for pos, verts in vertices :
    INDENT
        Wall(pos, verts, self.space, 1, self.all_sprites)
    DEDENT
DEDENT
----------------------------------------

def __init__(self, pos, verts, space, mass, * sprite_groups) :
INDENT
    super().__init__(* sprite_groups)
    width = max(v [0] for v in verts)
    height = max(v [1] for v in verts)
    self.image = pg.Surface((width, height), pg.SRCALPHA)
    pg.draw.polygon(self.image, pg.Color('sienna1'), verts)
    self.rect = self.image.get_rect(topleft = pos)
    moment = pm.moment_for_poly(mass, verts)
    self.body = pm.Body(mass, moment, pm.Body.STATIC)

    verts2 = [(x, - y) for x, y in verts]
    self.shape = pm.Poly(self.body, verts2, radius = 2)
    self.shape.friction = 0.1
    self.shape.elasticity =.92
    self.body.position = flipy(pos)
    self.space = space
    self.space.add(self.shape)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47665777_47668007_15_40
47665777_47668007_83_104
Title: How to use Pygame's sprite_collide_mask method to detect direction of collision? 
----------------------------------------

def __init__(self, pos, space) :
INDENT
    super().__init__()
    self.image = pg.Surface((60, 60), pg.SRCALPHA)
    pg.draw.circle(self.image, pg.Color('steelblue2'), (30, 30), 29)
    pg.draw.circle(self.image, pg.Color('black'), (30, 10), 5)
    self.rect = self.image.get_rect(center = pos)
    self.orig_image = self.image
    self.body = pm.Body()
    self.shape = pm.Circle(self.body, radius = 30)
    self.shape.density =.0001
    self.shape.friction =.1
    self.shape.elasticity =.99
    self.body.position = pos
    self.space = space
    self.space.add(self.body, self.shape)
    print (self.body.mass)
    self.accel_forw = False
    self.accel_back = False
    self.turn_left = False
    self.turn_right = False
    self.topspeed = 1790
    self.angle = 0
DEDENT
----------------------------------------

def __init__(self, pos, verts, space, mass, * sprite_groups) :
INDENT
    super().__init__(* sprite_groups)
    width = max(v [0] for v in verts)
    height = max(v [1] for v in verts)
    self.image = pg.Surface((width, height), pg.SRCALPHA)
    pg.draw.polygon(self.image, pg.Color('sienna1'), verts)
    self.rect = self.image.get_rect(topleft = pos)
    moment = pm.moment_for_poly(mass, verts)
    self.body = pm.Body(mass, moment, pm.Body.STATIC)

    verts2 = [(x, - y) for x, y in verts]
    self.shape = pm.Poly(self.body, verts2, radius = 2)
    self.shape.friction = 0.1
    self.shape.elasticity =.92
    self.body.position = flipy(pos)
    self.space = space
    self.space.add(self.shape)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47666287_47666368_6_13
47666287_47666445_4_12
Title: Return a list of similar authors 
----------------------------------------

def get_similar(author_list, author, currentList = []) :
INDENT
    for similar in author_list [author] :
    INDENT
        if similar not in currentList :
        INDENT
            currentList.append(similar)
            if similar in authors :
            INDENT
                get_similar(author_list, author, currentList)
            DEDENT
        DEDENT
    DEDENT
    return sorted(currentList)
DEDENT
----------------------------------------

def get_similar(authors, author) :
INDENT
    retVal = []
    for k, v in authors.items() :
    INDENT
        if k == author :
        INDENT
            for value in v :
            INDENT
                retVal.append(value)
                if value in authors :
                INDENT
                    for v2 in authors [value] :
                    INDENT
                        retVal.append(v2)
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47671795_47672057_6_17
47671795_47672162_6_19
Title: Python produce function names from string 
----------------------------------------

def fun(self, ar) :
INDENT
    def funA(self) :
    INDENT
        print self.A
    DEDENT
    def funB(self) :
    INDENT
        x = self.B + 4
        print self.B
    DEDENT
    for letter in ar :
    INDENT
        name = 'fun' + letter + '()'
        exec (name)
    DEDENT
DEDENT
----------------------------------------

def fun(self, ar) :
INDENT
    def funA() :
    INDENT
        print self.A
    DEDENT
    def funB() :
    INDENT
        x = self.B + 4
        print self.B
        print x
    DEDENT
    for letter in ar :
    INDENT
        name = 'fun' + letter
        if name in locals() :
        INDENT
            locals() [name]()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47672076_47673395_1_12
47672076_47690655_5_13
Title: Sharing manager list with threads and process creates seperate copies 
----------------------------------------

def consumer(l) :
INDENT
    counter = 0
    while counter < 20 :
    INDENT
        time.sleep(5)
        n = len(l) / 2
        for _ in range(0, n + 1) :
        INDENT
            try :
            INDENT
                l.pop()
            DEDENT
            except IndexError :
            INDENT
                pass
            DEDENT
        DEDENT
        print "consumer l: {}".format(l)
        counter += 5
    DEDENT
DEDENT
----------------------------------------

def consumer(l) :
INDENT
    counter = 0
    while counter < 20 :
    INDENT
        time.sleep(5)
        del l [0 : len(l) / 2 + 1]
        print ("consumer l address {}".format(hex(id(l))))
        print "consumer l: {}".format(l)
        counter += 5
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47676106_47681015_132_139
47676106_47681015_8_19
Title: Toggle QPen for selected items after QGraphicsScene selection change 
----------------------------------------

def __init__(self) :
INDENT
    super(MyMainWindow, self).__init__()
    self.setWindowTitle("Test")
    self.resize(800, 600)
    self.gv = MyGraphicsView()
    self.setCentralWidget(self.gv)
    self.populate()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    super(MyGraphicsView, self).__init__()
    self.setDragMode(QGraphicsView.RubberBandDrag)
    self._isPanning = False
    self._mousePressed = False
    self.setCacheMode(QGraphicsView.CacheBackground)
    self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    self.setScene(MyGraphicsScene(self))
    self.scene().selectionChanged.connect(self.selection_changed)
    self._current_selection = []
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47676972_47677034_14_23
47676972_47680873_10_17
Title: Passing a string variable between two functions in Python 
----------------------------------------

def surname(first_name) :
INDENT
    last_name = input("\nCan you tell my your last name please?")
    if len(last_name) == 0 :
    INDENT
        print ("\nYou did not enter a last name!")
        surname(first_name)
    DEDENT
    else :
    INDENT
        print ("Nice to meet you %s %s." % (first_name, last_name))
    DEDENT
DEDENT
----------------------------------------

def surname(first_name) :
INDENT
    while True :
    INDENT
        last_name = raw_input("\nCan you tell me your last name please?")
        if len(last_name) == 0 :
        INDENT
            print ("\nYou did not enter a last name!")
        DEDENT
        else :
        INDENT
            print "Nice to meet you %s %s." % (first_name, last_name)
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4767808_4786482_26_53
4767808_4786482_7_19
Title: New wxNotebook-Pages stay empty in wxPython 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY,
        "self.notebook Tutorial",
        size = (600, 400))
    panel = wx.Panel(self)
    self.tabNum = 3
    self.notebook = wx.Notebook(panel)
    tabOne = TabPanel(self.notebook)
    self.notebook.AddPage(tabOne, "Tab 1")
    tabTwo = TabPanel(self.notebook)
    self.notebook.AddPage(tabTwo, "Tab 2")
    btn = wx.Button(panel, label = "Add Page")
    btn.Bind(wx.EVT_BUTTON, self.onButton)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.notebook, 1, wx.ALL | wx.EXPAND, 5)
    sizer.Add(btn, 0, wx.ALL, 5)
    panel.SetSizer(sizer)
    self.Layout()
    self.Show()

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    colors = ["red", "blue", "gray", "yellow", "green"]
    self.SetBackgroundColour(random.choice(colors))
    btn = wx.Button(self, label = "Press Me")
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(btn, 0, wx.ALL, 10)
    self.SetSizer(sizer)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4767808_4786482_26_53
4767808_4854177_19_28
Title: New wxNotebook-Pages stay empty in wxPython 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY,
        "self.notebook Tutorial",
        size = (600, 400))
    panel = wx.Panel(self)
    self.tabNum = 3
    self.notebook = wx.Notebook(panel)
    tabOne = TabPanel(self.notebook)
    self.notebook.AddPage(tabOne, "Tab 1")
    tabTwo = TabPanel(self.notebook)
    self.notebook.AddPage(tabTwo, "Tab 2")
    btn = wx.Button(panel, label = "Add Page")
    btn.Bind(wx.EVT_BUTTON, self.onButton)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(self.notebook, 1, wx.ALL | wx.EXPAND, 5)
    sizer.Add(btn, 0, wx.ALL, 5)
    panel.SetSizer(sizer)
    self.Layout()
    self.Show()

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, title = "Notebook Test")
    p = wx.Panel(self)
    self.nb = wx.Notebook(p)
    self.page1 = Page(self.nb)
    sizer = wx.BoxSizer()
    sizer.Add(self.nb, 1, wx.EXPAND)
    p.SetSizer(sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4767808_4786482_7_19
4767808_4854177_19_28
Title: New wxNotebook-Pages stay empty in wxPython 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    colors = ["red", "blue", "gray", "yellow", "green"]
    self.SetBackgroundColour(random.choice(colors))
    btn = wx.Button(self, label = "Press Me")
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(btn, 0, wx.ALL, 10)
    self.SetSizer(sizer)

DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, title = "Notebook Test")
    p = wx.Panel(self)
    self.nb = wx.Notebook(p)
    self.page1 = Page(self.nb)
    sizer = wx.BoxSizer()
    sizer.Add(self.nb, 1, wx.EXPAND)
    p.SetSizer(sizer)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47682356_47682449_1_12
47682356_47682589_3_9
Title: Last line of code wont execute? 
----------------------------------------

def start() :
INDENT
    invalid = True
    global invalid
    x = input('Type the correct key:')
    if ("m" == x) or ("M" == x) :
    INDENT
        print ('Correct!')
    DEDENT
    else :
    INDENT
        print ('Invalid Input.')
        invalid = False
    DEDENT
    while invalid :
    INDENT
        start()
        print ('Next Question')
    DEDENT
DEDENT
----------------------------------------

def start() :
INDENT
    x = input('Type the correct key:')
    if ("m" == x) or ("M" == x) :
    INDENT
        print ('Correct!')
    DEDENT
    elif x ! = 'm' or x ! = 'M' :
    INDENT
        print ('Invalid Input.')
        invalid = False
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47683120_47683347_3_10
47683120_47686517_1_11
Title: How to convert Numpy NaT values to Pandas datetime values 
----------------------------------------

def dt64_to_datetime(dt64) :
INDENT
    unix_epoch = np.datetime64(0, 's')
    one_second = np.timedelta64(1, 's')
    if pd.isnull(dt64) :
    INDENT
        return pd.NaT
    DEDENT
    else :
    INDENT
        seconds_since_epoch = (dt64 - unix_epoch) / one_second
        return datetime.utcfromtimestamp(seconds_since_epoch)
    DEDENT
DEDENT
----------------------------------------

def dt64_to_datetime(dt64) :
INDENT
    unix_epoch = np.datetime64(0, 's')
    one_second = np.timedelta64(1, 's')
    seconds_since_epoch = (dt64 - unix_epoch) / one_second
    try :
    INDENT
        v = datetime.datetime.utcfromtimestamp(seconds_since_epoch)
    DEDENT
    except OSError as e :
    INDENT

        v = datetime.datetime.max
    DEDENT
    return v
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47684075_47685198_52_61
47684075_47685198_63_72
Title: tkinter gui which loads a flie and can print out the file name 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    super().__init__(parent)
    label = tk.Label(self, text = 'Start Page', font = LARGE_FONT)
    label.pack(pady = 10, padx = 10)
    button1 = tk.Button(self, text = 'Visit Page 1',
        command = lambda : controller.show_frame(SurveyXPSPlotter))
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    super().__init__(parent)
    label = tk.Label(self, text = 'Page One', font = LARGE_FONT)
    label.pack(pady = 10, padx = 10)
    button1 = tk.Button(self, text = 'Back to Page 1',
        command = lambda : controller.show_frame(HRXPSPlotter))
    button1.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47684075_47685198_52_61
47684075_47685198_7_32
Title: tkinter gui which loads a flie and can print out the file name 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    super().__init__(parent)
    label = tk.Label(self, text = 'Start Page', font = LARGE_FONT)
    label.pack(pady = 10, padx = 10)
    button1 = tk.Button(self, text = 'Visit Page 1',
        command = lambda : controller.show_frame(SurveyXPSPlotter))
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super().__init__(* args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = 'top', fill = 'both', expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    self.menuBar = tk.Menu(master = self)
    self.filemenu = tk.Menu(self.menuBar, tearoff = 0)
    self.filemenu.add_command(label = "Open", command = self.browse_file)
    self.filemenu.add_command(label = "Plot", command = self.plot_file)
    self.filemenu.add_command(label = "Quit!", command = self.quit)
    self.menuBar.add_cascade(label = "File", menu = self.filemenu)
    self.config(menu = self.menuBar)
    self.frames = {}
    for FrameSubclass in (HRXPSPlotter, SurveyXPSPlotter) :
    INDENT
        frame = FrameSubclass(container, self)
        self.frames [FrameSubclass] = frame
        frame.grid(row = 0, column = 1, sticky = 'nsew')
    DEDENT
    self.show_frame(HRXPSPlotter)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47684075_47685198_63_72
47684075_47685198_7_32
Title: tkinter gui which loads a flie and can print out the file name 
----------------------------------------

def __init__(self, parent, controller) :
INDENT
    super().__init__(parent)
    label = tk.Label(self, text = 'Page One', font = LARGE_FONT)
    label.pack(pady = 10, padx = 10)
    button1 = tk.Button(self, text = 'Back to Page 1',
        command = lambda : controller.show_frame(HRXPSPlotter))
    button1.pack()

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super().__init__(* args, ** kwargs)
    container = tk.Frame(self)
    container.pack(side = 'top', fill = 'both', expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    self.menuBar = tk.Menu(master = self)
    self.filemenu = tk.Menu(self.menuBar, tearoff = 0)
    self.filemenu.add_command(label = "Open", command = self.browse_file)
    self.filemenu.add_command(label = "Plot", command = self.plot_file)
    self.filemenu.add_command(label = "Quit!", command = self.quit)
    self.menuBar.add_cascade(label = "File", menu = self.filemenu)
    self.config(menu = self.menuBar)
    self.frames = {}
    for FrameSubclass in (HRXPSPlotter, SurveyXPSPlotter) :
    INDENT
        frame = FrameSubclass(container, self)
        self.frames [FrameSubclass] = frame
        frame.grid(row = 0, column = 1, sticky = 'nsew')
    DEDENT
    self.show_frame(HRXPSPlotter)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47687450_47687621_17_23
47687450_47687630_17_23
Title: Why is my function executing twice? 
----------------------------------------

def chooseGender() :
INDENT
    gender = ""
    while gender ! = "boy" and gender ! = "girl" :
    INDENT
        gender = raw_input("Now tell me. Are you a boy? Or are you a girl? ")
    DEDENT
    return gender
DEDENT
----------------------------------------

def chooseGender() :
INDENT
    gender = ""
    while gender ! = "boy" and gender ! = "girl" :
    INDENT
        gender = input("Now tell me. Are you a boy? Or are you a girl? ")
    DEDENT
    return gender
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47706912_47707006_1_19
47706912_47708553_1_14
Title: validate user input and loop until correct 
----------------------------------------

def get_numbers() :
INDENT
    while True :
    INDENT
        try :
        INDENT
            first_number = float(input("Please enter the first number: "))
            break
        DEDENT
        except ValueError :
        INDENT
            print ("Not a valid input, please try again.")
        DEDENT
    DEDENT
    while True :
    INDENT
        try :
        INDENT
            second_number = float(input("Please enter the second number: "))
            break
        DEDENT
        except ValueError :
        INDENT
            print ("Not a valid input, please try again.")
        DEDENT
    DEDENT
    return first_number, second_number
DEDENT
----------------------------------------

def get_numbers() :
INDENT
    result = []
    for item in ("first", "second") :
    INDENT
        while True :
        INDENT
            try :
            INDENT
                number = float(input("Please enter the " + item + " number: "))
            DEDENT
            except ValueError :
            INDENT
                print ("Not a valid input, please try again.")
            DEDENT
            else :
            INDENT
                result += [number]
                break
            DEDENT
        DEDENT
    DEDENT
    return tuple(result)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47721045_47722953_15_22
47721045_47742966_9_15
Title: How to scrape multiple pages from a website? 
----------------------------------------

def start_requests(self) :
INDENT
    for tag in self.tags :
    INDENT
        for page in range(self.pages) :
        INDENT
            url = self.url_template.format(tag, page)
            yield scrapy.Request(url)

        DEDENT
    DEDENT
DEDENT
----------------------------------------

def start_requests(self) :
INDENT
    categories = ["books", "tutorials"]
    base = "https://example.com/Python/?k={category}&p={index}"
    for category, index in itertools.product(categories, range(1, 4)) :
    INDENT
        yield scrapy.Request(base.format(category = category, index = index))
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47721816_47721978_1_12
47721816_47726958_1_10
Title: How to avoid creating unnecessary lists? 
----------------------------------------

def insight_pull(file) :
INDENT
    with open(file) as in_f :
    INDENT
        my_list = in_f.readlines()
        my_list = [line.split('    ') for line in my_list]
        my_list = [i [1] for i in my_list]
        my_list = [[my_list [i], my_list [i + 1]] for i in range(0, len(my_list), 2)]
        my_list = [i [0].split() + i [1].split() for i in my_list]

    DEDENT
    with open("Output_File.txt", "w") as out_f :
    INDENT
        out_f.writelines(' '.join(i) + '\n' for i in my_list)
    DEDENT
DEDENT
----------------------------------------

def insight_pull(file) :
INDENT
    with open(file) as in_f :
    INDENT
        dirty = (line.split('    ') for line in in_f)
        clean = (i [1] for i in dirty)
        cleaner = (pair for pair in zip(clean, clean))
        cleanest = (i [0].split() + i [1].split() for i in cleaner)

        with open("Output_File.txt", "w") as out_f :
        INDENT
            out_f.writelines(' '.join(i) + '\n' for i in cleanest)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47726797_47727333_14_23
47726797_47727422_2_9
Title: Finding included or non-included points 
----------------------------------------

def __init__(self, name, xy, extent) :
INDENT
    self.name = name
    self.x, self.y = [int(u) for u in xy.split(';')]
    east, west, north, south = [int(u) for u in extent.split(';')]
    self.east = self.x + east
    self.west = self.x - west
    self.north = self.y + north
    self.south = self.y - south
DEDENT
----------------------------------------

def __init__(self, center_x, center_y, east, west, north, south) :
INDENT
    self._center_x = center_x
    self._center_y = center_y
    self._north = center_y + north
    self._south = center_y - south
    self._west = center_x - west
    self._east = center_x + east
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47730608_47730686_35_40
47730608_47730710_34_41
Title: Destructive Stack Iteration 
----------------------------------------

def __next__(self) :
INDENT
    if not self.head :
    INDENT
        raise StopIteration()
    DEDENT
    item = self.head.val
    self.head = self.head.next
    return item
DEDENT
----------------------------------------

def __next__(self) :
INDENT
    if self.top :
    INDENT
        curr = self.top
    DEDENT
    else :
    INDENT
        raise StopIteration()
    DEDENT
    self.top = self.top.next
    return curr.val
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47730608_47730686_6_12
47730608_47730710_9_17
Title: Destructive Stack Iteration 
----------------------------------------

def push(self, item) :
INDENT
    node = Node(item)
    if self.head :
    INDENT
        node.next = self.head
    DEDENT
    self.head = node
    self.size += 1
DEDENT
----------------------------------------

def push(self, item) :
INDENT
    node = Node(item)
    if not self.head :
    INDENT
        self.head = node
    DEDENT
    else :
    INDENT
        node.next = self.head
        self.head = node
    DEDENT
    self.size += 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47730608_47730702_8_15
47730608_47730710_34_41
Title: Destructive Stack Iteration 
----------------------------------------

def __next__(self) :
INDENT
    if not self.head :
    INDENT
        raise StopIteration
    DEDENT
    current = self.head
    self.head = self.head.next
    return current.val
DEDENT
----------------------------------------

def __next__(self) :
INDENT
    if self.top :
    INDENT
        curr = self.top
    DEDENT
    else :
    INDENT
        raise StopIteration()
    DEDENT
    self.top = self.top.next
    return curr.val
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47744470_47745239_11_31
47744470_47748468_7_15
Title: How do I make a turtle color fade 
----------------------------------------

def fade() :
INDENT
    global c
    rect(c)

    r, g, b = c
    r += 0.1
    g += 0.1
    b += 0.1
    c = (r, g, b)

    if r < = 1.0 and g < = 1.0 and b < = 1.0 :
    INDENT

        t.ontimer(fade, 100)

    DEDENT
DEDENT
----------------------------------------

def fade(turtle, gray = 0.0) :
INDENT
    turtle.color(gray, gray, gray)
    if gray < 1.0 :
    INDENT
        screen.ontimer(lambda : fade(turtle, min(gray + DELTA, 1.0)), DELAY)
    DEDENT
    else :
    INDENT
        turtle.hideturtle()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47745944_47746150_19_27
47745944_47746306_3_14
Title: Python - confirming string from text file matches format 
----------------------------------------

def read_file(file_name) :
INDENT
    CityValidator(source = LocalFile(file_name)).validate()
    with open(file_name) as weather_file :
    INDENT
        reader = csv.reader(weather_file)
        for city_name, average_rainfall in reader :
        INDENT
            print (city_name, average_rainfall)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def read_file(fileName) :
INDENT
    pattern = re.compile(r'(.*?),([-+]?(?:\d+\.\d*|\.?\d+)(?:[eE][-+]?\d+)?)')
    with open(fileName) as weatherFile :
    INDENT
        for line in weatherFile :
        INDENT
            if not pattern.fullmatch(line.strip()) :
            INDENT
                continue
            DEDENT
            town, rain = line.split(",")
            if checkIfExists(town) :
            INDENT
                dataList.append({"city" : town, "average_rainfall" : float(rain.rstrip())})
            DEDENT
            else :
            INDENT
                print ("It looks like {0} is on the list twice.  Please ensure all towns in {1}  only appear once and try again.".format(town, fileName))
                break
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47750684_47750963_1_11
47750684_47751344_1_17
Title: Get first previous non matched element from array 
----------------------------------------

def get_name(data, match) :
INDENT
    result = []
    last_element = None
    for element in data :
    INDENT
        if match in element :
        INDENT
            result.append(last_element)
        DEDENT
        else :
        INDENT
            last_element = element
            result.append(element)
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------

def get_name(lst, match) :
INDENT
    result = []
    stack = []
    for elem in lst :
    INDENT
        if elem.startswith(match) :
        INDENT
            if stack :
            INDENT
                top = stack [- 1]
                result.append(top)
            DEDENT
            else :
            INDENT
                result.append(None)
            DEDENT
        DEDENT
        else :
        INDENT
            stack.append(elem)
            result.append(elem)
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47761720_47762175_1_17
47761720_47762296_1_36
Title: Python cli calculator bug with input 
----------------------------------------

def divide() :
INDENT
    while True :
    INDENT
        try :
        INDENT
            x = float(input('que numero'))
            break
        DEDENT
        except :
        INDENT
            print ('that\'s no numero!')
        DEDENT
    DEDENT
    while True :
    INDENT
        try :
        INDENT
            y = float(input('que numero'))
            break
        DEDENT
        except :
        INDENT
            print ('that\'s no numero!')
        DEDENT
    DEDENT
    return x / y if x / y ! = int(x / y) else int(x / y)
DEDENT
----------------------------------------

def divide() :
INDENT
    x = False
    while not x :
    INDENT
        try :
        INDENT
            x = float(input("Enter a number to divide: "))
        DEDENT
        except ValueError :
        INDENT
            print ("Please enter a float or an integer, not a string..    .")
        DEDENT
    DEDENT
    x = str(x).split('.')
    if x [1] == '0' :
    INDENT
        x = int(x [0])
    DEDENT
    else :
    INDENT
        x = float(".".join(x))
    DEDENT
    y = False
    while not y :
    INDENT
        try :
        INDENT
            y = float(input("Enter a number to divide %s by: " % x))
        DEDENT
        except ValueError :
        INDENT
            print ("Please enter a float or an integer, not a string...")
        DEDENT
        if y == 0 :
        INDENT
            y = False

        DEDENT
    DEDENT
    y = str(y).split('.')
    if y [1] == '0' :
    INDENT
        y = int(y [0])
    DEDENT
    else :
    INDENT
        y = float(".".join(y))
    DEDENT
    divideAns = x / y
    result = str(x) + " / " + str(y) + " = " + str(divideAns)
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47764131_47764390_7_31
47764131_47764478_1_11
Title: Python program to calculate student grades 
----------------------------------------

def read_test_scores() :
INDENT
    global sid
    print ("ENTER STUDENT ID: ")
    sid = int(input())
    global exam
    print ("ENTER EXAM SCORE: ")
    exam = int(input())
    print ("ENTER ALL TEST SCORES: ")
    score1 = int(input())
    score2 = int(input())
    score3 = int(input())
    score4 = int(input())
    score5 = int(input())
    score6 = int(input())
    score7 = int(input())
    total = (score1 + score2 + score3 + score4 + score5 + score6 + score7)
    global tavge
    tavge = total / 7

DEDENT
----------------------------------------

def read_test_scores() :
INDENT
    scores = []
    num_tests = 7
    print ("ENTER ALL TEST SCORES: ")
    for i in range(num_tests) :
    INDENT
        score = input("Test " + str(i + 1) + ":")
        scores.append(int(score))
    DEDENT
    return sum(scores) / num_tests

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47764131_47764429_6_33
47764131_47764478_1_11
Title: Python program to calculate student grades 
----------------------------------------

def read_test_scores() :
INDENT
    print ("ENTER STUDENT ID: ")
    id = int(input())
    print ("ENTER EXAM SCORE: ")
    exam = int(input())
    print ("ENTER ALL TEST SCORES: ")
    score1 = int(input())
    score2 = int(input())
    score3 = int(input())
    score4 = int(input())
    score5 = int(input())
    score6 = int(input())
    score7 = int(input())
    sum = (score1 + score2 + score3 + score4 + score5 + score6 + score7)
    tavge = sum / 7.0

    return tavge, id, exam

DEDENT
----------------------------------------

def read_test_scores() :
INDENT
    scores = []
    num_tests = 7
    print ("ENTER ALL TEST SCORES: ")
    for i in range(num_tests) :
    INDENT
        score = input("Test " + str(i + 1) + ":")
        scores.append(int(score))
    DEDENT
    return sum(scores) / num_tests

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47768394_47768899_14_25
47768394_47768899_39_49
Title: Python3 weakref WeakMethod and thread safety 
----------------------------------------

def run(self) :
INDENT
    class test :
    INDENT
        def callback(self, count) :
        INDENT
            print (count)
        DEDENT
    DEDENT
    time.sleep(1)
    dummy = test()
    self.listener.register_callback(dummy.callback)
    time.sleep(5)
    del dummy
    gc.collect()

DEDENT
----------------------------------------

def run(self) :
INDENT
    while self.counter :
    INDENT
        try :
        INDENT
            self.runner()(self.counter)
        DEDENT
        except Exception as e :
        INDENT
            pprint(e)
        DEDENT
        self.counter -= 1
        time.sleep(1)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47773412_47774046_1_19
47773412_47774095_18_27
Title: Mastermind check result python 
----------------------------------------

def check(ans, guess) :
INDENT
    correct = False
    right = 0
    wrong = 0
    if guess == ans :
    INDENT
        correct = True
        right = len(guess)
    DEDENT
    else :
    INDENT
        correct = False
        test = list(ans)
        for i, colour in enumerate(guess) :
        INDENT
            if ans [i] == colour :
            INDENT
                right += 1
            DEDENT
            elif colour in test :
            INDENT
                test.remove(colour)
                wrong += 1
            DEDENT
        DEDENT
    DEDENT
    print (right, "black pegs")
    print (wrong, "white pegs")
    return correct
DEDENT
----------------------------------------

def check(ans, guess) :
INDENT
    white = count_white(ans, guess)
    black = count_black(ans, guess)
    white -= black
    print (black, "black pegs")
    print (white, "white pegs")
    return black == 4
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47773412_47774046_1_19
47773412_47774961_1_25
Title: Mastermind check result python 
----------------------------------------

def check(ans, guess) :
INDENT
    correct = False
    right = 0
    wrong = 0
    if guess == ans :
    INDENT
        correct = True
        right = len(guess)
    DEDENT
    else :
    INDENT
        correct = False
        test = list(ans)
        for i, colour in enumerate(guess) :
        INDENT
            if ans [i] == colour :
            INDENT
                right += 1
            DEDENT
            elif colour in test :
            INDENT
                test.remove(colour)
                wrong += 1
            DEDENT
        DEDENT
    DEDENT
    print (right, "black pegs")
    print (wrong, "white pegs")
    return correct
DEDENT
----------------------------------------

def check() :
INDENT
    ans = "ROYY"
    guess = "RGOO"
    correct = False
    right = 0
    wrong = 0
    if guess == ans :
    INDENT
        correct = True
    DEDENT
    for i in ans :
    INDENT
        j = 0
        while (j < len(guess)) :
        INDENT
            if i in guess and i == guess [j] :
            INDENT
                right += 1
                break
            DEDENT
            elif i in guess and i ! = guess [j] :
            INDENT
                wrong += 1
                break
            DEDENT
            elif i not in guess :
            INDENT
                break;
            DEDENT
        DEDENT
        j += 1
    DEDENT
    print (right, "black pegs")
    print (wrong, "white pegs")
    return
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47773412_47774095_18_27
47773412_47774961_1_25
Title: Mastermind check result python 
----------------------------------------

def check(ans, guess) :
INDENT
    white = count_white(ans, guess)
    black = count_black(ans, guess)
    white -= black
    print (black, "black pegs")
    print (white, "white pegs")
    return black == 4
DEDENT
----------------------------------------

def check() :
INDENT
    ans = "ROYY"
    guess = "RGOO"
    correct = False
    right = 0
    wrong = 0
    if guess == ans :
    INDENT
        correct = True
    DEDENT
    for i in ans :
    INDENT
        j = 0
        while (j < len(guess)) :
        INDENT
            if i in guess and i == guess [j] :
            INDENT
                right += 1
                break
            DEDENT
            elif i in guess and i ! = guess [j] :
            INDENT
                wrong += 1
                break
            DEDENT
            elif i not in guess :
            INDENT
                break;
            DEDENT
        DEDENT
        j += 1
    DEDENT
    print (right, "black pegs")
    print (wrong, "white pegs")
    return
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47774809_47775499_11_25
47774809_47775499_28_42
Title: Getting error when using class in tkinter ? (OOP) 
----------------------------------------

def __init__(self, master, status, * options) :
INDENT
    self.frame = tk.Frame(master)
    self.frame.pack()
    self.result = tk.StringVar()

    self.label = tk.Label(self.frame, text = status)
    self.label.pack()
    self.dropdown = tk.OptionMenu(self.frame, self.result, * options)
    self.dropdown.pack()

DEDENT
----------------------------------------

def __init__(self, master, status, * options) :
INDENT
    super().__init__(master)

    self.result = tk.StringVar()

    self.label = tk.Label(self, text = status)
    self.label.pack()
    self.dropdown = tk.OptionMenu(self, self.result, * options)
    self.dropdown.pack()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47780745_47781362_1_15
47780745_47781373_1_18
Title: python list within list initialization and printing 
----------------------------------------

def get_data(file) :
INDENT
    example_list = ['one', 'two', 'three']
    matrix = []
    test_count = 0
    line_count = 0
    for line in file :
    INDENT
        if line.find('example') ! = - 1 :
        INDENT
            temp_a = re.findall(r"\'(.+?)\'", line) [0]
            new_list = example_list [:]
            new_list [0] = temp_a
            matrix.append(new_list)
            test_count += 1
            line_count += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def get_data(file) :
INDENT
    matrix = [['one', 'two', 'three']]
    test_count = 0
    line_count = 0
    for line in file :
    INDENT
        if line.find('example') ! = - 1 :
        INDENT
            temp_a = re.findall(r"\'(.+?)\'", line)
            if temp_a :
            INDENT
                temp_a = temp_a [0]
            DEDENT
            else :
            INDENT
                continue
            DEDENT
            print (matrix [test_count] [0])
            new_list = matrix [test_count] [:]
            new_list [0] = temp_a
            matrix [test_count].append(new_list)
            test_count += 1
            line_count += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47780828_47783072_19_24
47780828_47783072_50_55
Title: stuck at sprite movement 
----------------------------------------

def set_image(self, filename = None) :
INDENT
    if filename ! = None :
    INDENT
        self.image = pygame.Surface((20, 20)).convert_alpha()
        self.image.fill((255, 0, 0))
        self.rect = self.image.get_rect()
    DEDENT
DEDENT
----------------------------------------

def set_image(self, filename = None) :
INDENT
    if filename ! = None :
    INDENT
        self.image = pygame.Surface((20, 20)).convert_alpha()
        self.image.fill((0, 255, 0))
        self.rect = self.image.get_rect()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47794788_47794940_1_13
47794788_47795503_2_29
Title: If a number is a Prime Number? 
----------------------------------------

def isPrime(n) :
INDENT
    if n == 1 :
    INDENT
        return False
    DEDENT
    elif n == 2 :
    INDENT
        return False
    DEDENT
    else :
    INDENT
        prime = True
        for i in range(2, n) :
        INDENT
            if n % i == 0 :
            INDENT
                prime = False
                break
            DEDENT
        DEDENT
        return prime
    DEDENT
DEDENT
----------------------------------------

def isPrime(n) :
INDENT
    if n < = 1 :
    INDENT
        return False

    DEDENT
    elif n < = 3 :
    INDENT
        return True

    DEDENT
    elif n % 2 == 0 or n % 3 == 0 :
    INDENT
        return False
    DEDENT
    i = 5
    while (i * i) < = n :
    INDENT
        if n % i == 0 or n % (i + 2) :
        INDENT
            return False
        DEDENT
        i = i + 6
    DEDENT
    return True

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47795665_47796194_1_17
47795665_47796701_1_15
Title: How to change my code 
----------------------------------------

def computeHCF(x, y) :
INDENT
    if type(x) is str or type(y) is str :
    INDENT
        print ("You wrote something that doesn't have any sense!")
        exit()
    DEDENT
    elif x < 0 or y < 0 :
    INDENT
        print ("You wrote something that doesn't have any sense!")
        exit()
    DEDENT
    elif x > y :
    INDENT
        smaller = y
    DEDENT
    elif y < x :
    INDENT
        smaller = x
    DEDENT
    for i in range(1, smaller + 1) :
    INDENT
        if ((x % i == 0) and (y % i == 0)) :
        INDENT
            hcf = i
        DEDENT
    DEDENT
    return hcf
DEDENT
----------------------------------------

def computeHCF(x, y) :
INDENT
    x = abs(x)
    y = abs(y)
    if any([type(x) ! = int, type(y) ! = int]) :
    INDENT
        return hcf
    DEDENT
    if x > y :
    INDENT
        smaller = y
    DEDENT
    else :
    INDENT
        smaller = x
    DEDENT
    for i in range(1, smaller + 1) :
    INDENT
        if ((x % i == 0) and (y % i == 0)) :
        INDENT
            hcf = i
        DEDENT
    DEDENT
    return hcf
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_102_110
47800755_47808125_19_33
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(Wizard, self).__init__(* args, ** kwargs)
    self.setPage(self.intro, IntroductionPage(self))
    self.setPage(self.class1, ClassesPage1(self))
    self.setPage(self.class2, ClassesPage2(self))
    self.setPage(self.class3, ClassesPage3(self))
    self.setPage(self.conclusion, ConclusionPage(self))
    self.setStartId(self.intro)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage1, self).__init__(* args, ** kwargs)
    self.setTitle("Choices")
    self.setSubTitle("Choose 1")
    self.radButton1 = QtWidgets.QRadioButton('1A')
    self.radButton2 = QtWidgets.QRadioButton('1B')
    self.radButton3 = QtWidgets.QRadioButton('1C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_102_110
47800755_47808125_45_62
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(Wizard, self).__init__(* args, ** kwargs)
    self.setPage(self.intro, IntroductionPage(self))
    self.setPage(self.class1, ClassesPage1(self))
    self.setPage(self.class2, ClassesPage2(self))
    self.setPage(self.class3, ClassesPage3(self))
    self.setPage(self.conclusion, ConclusionPage(self))
    self.setStartId(self.intro)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage2, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 2")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('2A')
    self.radButton2 = QtWidgets.QRadioButton('2B')
    self.radButton3 = QtWidgets.QRadioButton('2C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected2 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_102_110
47800755_47808125_5_14
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(Wizard, self).__init__(* args, ** kwargs)
    self.setPage(self.intro, IntroductionPage(self))
    self.setPage(self.class1, ClassesPage1(self))
    self.setPage(self.class2, ClassesPage2(self))
    self.setPage(self.class3, ClassesPage3(self))
    self.setPage(self.conclusion, ConclusionPage(self))
    self.setStartId(self.intro)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(IntroductionPage, self).__init__(* args, ** kwargs)
    self.setTitle("Introduction")
    self.label = QtWidgets.QLabel("Welcome to the One Inc™'s Teacher Interactive Accessment tool. Follow the prompts to set up your Mark Sheet")
    self.label.setWordWrap(True)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.label)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_102_110
47800755_47808125_67_83
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(Wizard, self).__init__(* args, ** kwargs)
    self.setPage(self.intro, IntroductionPage(self))
    self.setPage(self.class1, ClassesPage1(self))
    self.setPage(self.class2, ClassesPage2(self))
    self.setPage(self.class3, ClassesPage3(self))
    self.setPage(self.conclusion, ConclusionPage(self))
    self.setStartId(self.intro)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage3, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 3")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('3A', self)
    self.radButton2 = QtWidgets.QRadioButton('3B', self)
    self.radButton3 = QtWidgets.QRadioButton('3C', self)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected3 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_102_110
47800755_47808125_88_97
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(Wizard, self).__init__(* args, ** kwargs)
    self.setPage(self.intro, IntroductionPage(self))
    self.setPage(self.class1, ClassesPage1(self))
    self.setPage(self.class2, ClassesPage2(self))
    self.setPage(self.class3, ClassesPage3(self))
    self.setPage(self.conclusion, ConclusionPage(self))
    self.setStartId(self.intro)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ConclusionPage, self).__init__(* args, ** kwargs)
    self.layout = QtWidgets.QVBoxLayout()
    self.label = QtWidgets.QLabel(self)
    self.label2 = QtWidgets.QLabel(self)
    self.layout.addWidget(self.label)
    self.layout.addWidget(self.label2)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_19_33
47800755_47808125_45_62
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage1, self).__init__(* args, ** kwargs)
    self.setTitle("Choices")
    self.setSubTitle("Choose 1")
    self.radButton1 = QtWidgets.QRadioButton('1A')
    self.radButton2 = QtWidgets.QRadioButton('1B')
    self.radButton3 = QtWidgets.QRadioButton('1C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage2, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 2")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('2A')
    self.radButton2 = QtWidgets.QRadioButton('2B')
    self.radButton3 = QtWidgets.QRadioButton('2C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected2 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_19_33
47800755_47808125_5_14
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage1, self).__init__(* args, ** kwargs)
    self.setTitle("Choices")
    self.setSubTitle("Choose 1")
    self.radButton1 = QtWidgets.QRadioButton('1A')
    self.radButton2 = QtWidgets.QRadioButton('1B')
    self.radButton3 = QtWidgets.QRadioButton('1C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(IntroductionPage, self).__init__(* args, ** kwargs)
    self.setTitle("Introduction")
    self.label = QtWidgets.QLabel("Welcome to the One Inc™'s Teacher Interactive Accessment tool. Follow the prompts to set up your Mark Sheet")
    self.label.setWordWrap(True)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.label)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_19_33
47800755_47808125_67_83
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage1, self).__init__(* args, ** kwargs)
    self.setTitle("Choices")
    self.setSubTitle("Choose 1")
    self.radButton1 = QtWidgets.QRadioButton('1A')
    self.radButton2 = QtWidgets.QRadioButton('1B')
    self.radButton3 = QtWidgets.QRadioButton('1C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage3, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 3")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('3A', self)
    self.radButton2 = QtWidgets.QRadioButton('3B', self)
    self.radButton3 = QtWidgets.QRadioButton('3C', self)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected3 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_19_33
47800755_47808125_88_97
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage1, self).__init__(* args, ** kwargs)
    self.setTitle("Choices")
    self.setSubTitle("Choose 1")
    self.radButton1 = QtWidgets.QRadioButton('1A')
    self.radButton2 = QtWidgets.QRadioButton('1B')
    self.radButton3 = QtWidgets.QRadioButton('1C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ConclusionPage, self).__init__(* args, ** kwargs)
    self.layout = QtWidgets.QVBoxLayout()
    self.label = QtWidgets.QLabel(self)
    self.label2 = QtWidgets.QLabel(self)
    self.layout.addWidget(self.label)
    self.layout.addWidget(self.label2)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_45_62
47800755_47808125_5_14
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage2, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 2")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('2A')
    self.radButton2 = QtWidgets.QRadioButton('2B')
    self.radButton3 = QtWidgets.QRadioButton('2C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected2 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(IntroductionPage, self).__init__(* args, ** kwargs)
    self.setTitle("Introduction")
    self.label = QtWidgets.QLabel("Welcome to the One Inc™'s Teacher Interactive Accessment tool. Follow the prompts to set up your Mark Sheet")
    self.label.setWordWrap(True)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.label)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_45_62
47800755_47808125_88_97
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage2, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 2")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('2A')
    self.radButton2 = QtWidgets.QRadioButton('2B')
    self.radButton3 = QtWidgets.QRadioButton('2C')
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected2 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ConclusionPage, self).__init__(* args, ** kwargs)
    self.layout = QtWidgets.QVBoxLayout()
    self.label = QtWidgets.QLabel(self)
    self.label2 = QtWidgets.QLabel(self)
    self.layout.addWidget(self.label)
    self.layout.addWidget(self.label2)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_5_14
47800755_47808125_67_83
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(IntroductionPage, self).__init__(* args, ** kwargs)
    self.setTitle("Introduction")
    self.label = QtWidgets.QLabel("Welcome to the One Inc™'s Teacher Interactive Accessment tool. Follow the prompts to set up your Mark Sheet")
    self.label.setWordWrap(True)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.label)
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage3, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 3")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('3A', self)
    self.radButton2 = QtWidgets.QRadioButton('3B', self)
    self.radButton3 = QtWidgets.QRadioButton('3C', self)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected3 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47800755_47808125_67_83
47800755_47808125_88_97
Title: PySide2 QWizard non linear pages 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ClassesPage3, self).__init__(* args, ** kwargs)
    self.setTitle("Classes for grade 3")
    self.setSubTitle("Please select a Class")
    self.radButton1 = QtWidgets.QRadioButton('3A', self)
    self.radButton2 = QtWidgets.QRadioButton('3B', self)
    self.radButton3 = QtWidgets.QRadioButton('3C', self)
    self.layout = QtWidgets.QVBoxLayout()
    self.layout.addWidget(self.radButton1)
    self.layout.addWidget(self.radButton2)
    self.layout.addWidget(self.radButton3)
    self.class_selected3 = QtWidgets.QLineEdit()
    self.setLayout(self.layout)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(ConclusionPage, self).__init__(* args, ** kwargs)
    self.layout = QtWidgets.QVBoxLayout()
    self.label = QtWidgets.QLabel(self)
    self.label2 = QtWidgets.QLabel(self)
    self.layout.addWidget(self.label)
    self.layout.addWidget(self.label2)
    self.setLayout(self.layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47822764_47822922_1_25
47822764_47823110_1_20
Title: Selectionsort not outputing the right result Python 
----------------------------------------

def selectionSort(aList) :
INDENT
    for i in range(len(aList)) :
    INDENT

        minIndex = i

        for j in range(i + 1, len(aList)) :
        INDENT
            if aList [minIndex] > aList [j] :
            minIndex = j

        DEDENT
        minValue = aList [minIndex]

        del aList [minIndex]

        aList.insert(i, minValue)

    DEDENT
    return aList
DEDENT
----------------------------------------

def selectionSort(aList) :
INDENT
    for i in range(len(aList) - 1) :
    INDENT

        minIndex = i

        for j in range(i + 1, len(aList)) :
        INDENT
            if aList [j] < aList [minIndex] :
            INDENT
                minIndex = j;
            DEDENT
        DEDENT
        if minIndex ! = i :
        INDENT
            aList [i], aList [minIndex] = aList [minIndex], aList [i]

        DEDENT
    DEDENT
    return aList
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47849592_47849988_20_35
47849592_47849988_36_43
Title: moving circle using tkinter 
----------------------------------------

def move(self) :
INDENT
    x_vel = random.randint(- 5, 5)
    y_vel = - 5
    self.canvas.move(self.circle, x_vel, y_vel)
    coordinates = self.canvas.coords(self.circle)
    self.x = coordinates [0]
    self.y = coordinates [1]

    if self.y < - self.size :
    INDENT
        self.x = self.start_x
        self.y = self.start_y
        self.canvas.coords(self.circle, self.x, self.y, self.x + self.size, self.y + self.size)
    DEDENT
DEDENT
----------------------------------------

def move() :
INDENT
    for item in bubbles :
    INDENT
        item.move()
    DEDENT
    window.after(33, move)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47851953_47853276_21_32
47851953_47853276_71_82
Title: Object to shoot a projectile 
----------------------------------------

def __init__(self, pos, all_sprites, bullet_group) :
INDENT
    super().__init__()
    self.image = PLAYER_IMAGE
    self.orig_image = self.image
    self.rect = self.image.get_rect(center = (pos))
    self.pos = Vector2(pos)
    self.vel = Vector2(1, 0)
    self.angle = 0
    self.angle_speed = 0
    self.all_sprites = all_sprites
    self.bullet_group = bullet_group
DEDENT
----------------------------------------

def __init__(self, pos, angle) :
INDENT
    super().__init__()
    self.image = pg.transform.rotate(BULLET_IMAGE, - angle)
    self.rect = self.image.get_rect(center = pos)

    offset = Vector2(40, 0).rotate(angle)
    self.pos = Vector2(pos) + offset
    self.vel = Vector2(9, 0).rotate(angle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47851953_47853276_53_59
47851953_47853276_83_91
Title: Object to shoot a projectile 
----------------------------------------

def update(self) :
INDENT
    self.pos += self.vel
    self.rect.center = self.pos
    if self.angle_speed ! = 0 :
    INDENT
        self.rotate()
    DEDENT
DEDENT
----------------------------------------

def update(self) :
INDENT
    self.pos += self.vel
    self.rect.center = self.pos
    if not screen_rect.contains(self.rect) :
    INDENT
        self.kill()

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47852102_47852140_3_12
47852102_47852159_8_12
Title: drawing circle by clicking using matplotlib 
----------------------------------------

def onclick(event) :
INDENT
    if event.dblclick :
    INDENT
        fig, ax = plt.subplots()
        circle = plt.Circle((event.xdata, event.ydata), 2.5, color = 'black')
        ax.set_xlim([- 40, 40])
        ax.set_ylim([- 40, 40])
        ax.set_aspect('equal')
        ax.add_artist(circle)
        plt.show()
    DEDENT
DEDENT
----------------------------------------

def onclick(event) :
INDENT
    if event.dblclick :
    INDENT
        circle = plt.Circle((event.xdata, event.ydata), 2.5, color = 'black')
        ax.add_patch(circle)
        fig.canvas.draw()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47859255_47859372_4_13
47859255_47859591_1_15
Title: Read csv to dict of lists of dicts 
----------------------------------------

def gather_csv_info(filename) :
INDENT
    all_csv_data = []
    flattened_data = defaultdict(list)
    with open(filename, 'rb') as csvfile :
    INDENT
        reader = csv.DictReader(csvfile)
        for row in reader :
        INDENT
            key = row ["Header1"]
            flattened_data [key].append({"Header2" : row ["Header2"], "Header3" : row ["Header3"]})
        DEDENT
    DEDENT
    return flattened_data
DEDENT
----------------------------------------

def gather_csv_info() :
INDENT
    all_csv_data = []
    flattened_data = {}
    reading_csv = csv.DictReader(open(sys.argv [1], 'rb'))
    for row in reading_csv :
    INDENT
        all_csv_data.append(row)
    DEDENT
    for row in all_csv_data :
    INDENT
        if row ["course_sis_ids"] in flattened_data :
        INDENT
            flattened_data [row ["course_sis_ids"]].append({"user_sis_ids" : row ["user_sis_ids"], "file_ids" : row ["file_ids"]})
        DEDENT
        else :
        INDENT
            flattened_data [row ["course_sis_ids"]] = [{"user_sis_ids" : row ["user_sis_ids"], "file_ids" : row ["file_ids"]}]
        DEDENT
    DEDENT
    return flattened_data
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47860769_47860871_1_11
47860769_47860893_1_12
Title: Python : Dynamic game board 
----------------------------------------

def board_draw(height, width) :
INDENT
    square = 0
    print (" --- " * width)
    for x in range(height) :
    INDENT
        line = "| "
        for i in range(0, width) :
        INDENT
            line += format(square, '02d') + " | "
            square += 1
        DEDENT
        print (line)
    DEDENT
    print (" --- " * width)
DEDENT
----------------------------------------

def board_draw(height, width) :
INDENT
    top = "┌" + "┬".join(["─" * 6] * width) + "┐\n"
    bottom = "└" + "┴".join(["─" * 6] * width) + "┘"
    middle = "├" + "┼".join(["─" * 6] * width) + "┤\n"
    print (top +
        middle.join(
            "│" +
            "│".join('  {:02d}  '.format(x * width + y + 1) for y in range(width)) +
            "│\n" for x in range(height)) +
        bottom)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47865019_47865080_1_13
47865019_47865150_3_13
Title: python wait nth digit before continue 
----------------------------------------

def processKey() :
INDENT
    MAX_ALLOWED_CHAR = 3
    key = input("Enter 3 digit PWD: \n")
    if (key == 123) :
    INDENT
        print ("Correct password.")
        return True
    DEDENT
    elif (len(str(key)) > MAX_ALLOWED_CHAR) :
    INDENT
        print ("The max allowed character is {0}, instead you entered {1}.".format(MAX_ALLOWED_CHAR, key))
        return False
    DEDENT
    else :
    INDENT
        print ("You typed {0} wich is incorrect.".format(key))
        return False
    DEDENT
DEDENT
----------------------------------------

def processKey(key) :
INDENT
    global code
    code += key
    if len(code) == 3 :
    INDENT
        if code == "123" :
        INDENT
            print ("correct")
        DEDENT
        else :
        INDENT
            print ("wrong password, try again")
            code = ''
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4787291_4787804_7_27
4787291_4788700_5_12
Title: Dynamic importing of modules followed by instantiation of objects with a certain baseclass from said modules 
----------------------------------------

def search(base) :
INDENT
    for root, dirs, files in os.walk('.') :
    INDENT
        candidates = [fname for fname in files if fname.endswith('.py')
            and not fname.startswith('__')]
        classList = []
        if candidates :
        INDENT
            for c in candidates :
            INDENT
                modname = os.path.splitext(c) [0]
                try :
                INDENT
                    module = __import__(modname)
                DEDENT
                except (ImportError, NotImplementedError) :
                INDENT
                    continue
                DEDENT
                for cls in dir(module) :
                INDENT
                    cls = getattr(module, cls)
                    if (inspect.isclass(cls)
                        and inspect.getmodule(cls) == module
                        and issubclass(cls, base)) :
                    INDENT

                        classList.append(cls)
                    DEDENT
                DEDENT
            DEDENT
        DEDENT
        print (classList)
    DEDENT
DEDENT
----------------------------------------

def search(plugindir) :
INDENT
    for root, dirs, files in os.walk(plugindir) :
    INDENT
        for fname in files :
        INDENT
            modname = os.path.splitext(fname) [0]
            try :
            INDENT
                module = imp.load_source(modname, os.path.join(root, fname))
            DEDENT
            except Exception : continue
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47876205_47876349_4_17
47876205_47876366_3_18
Title: For loop is overwriting dictionary values in list 
----------------------------------------

def begin() :
INDENT
    file = open("outputfromterminal")
    contents = file.read()
    contents = contents.split(',') [1 :]
    for x in contents :
    INDENT

        device = copy.deepcopy(device)

        x = x.split(' ')
        device ['ip'] = x [0]
        device ['mac'] = x [1]
        listofdevices.append(device)
    DEDENT
DEDENT
----------------------------------------

def begin() :
INDENT
    with open("outputfromterminal", 'r') as f :
    INDENT
        contents = f.read().split(',') [1 :]
    DEDENT
    for line in contents :
    INDENT

        line = line.split(' ')
        device = {'ip' : line [0],
            'mac' : line [1],
            'username' : 'admin',
            'password' : [],
            'device type' : '',
            }
        listofdevices.append(device)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47876205_47876366_3_18
47876205_47876376_2_12
Title: For loop is overwriting dictionary values in list 
----------------------------------------

def begin() :
INDENT
    with open("outputfromterminal", 'r') as f :
    INDENT
        contents = f.read().split(',') [1 :]
    DEDENT
    for line in contents :
    INDENT

        line = line.split(' ')
        device = {'ip' : line [0],
            'mac' : line [1],
            'username' : 'admin',
            'password' : [],
            'device type' : '',
            }
        listofdevices.append(device)
    DEDENT
DEDENT
----------------------------------------

def begin() :
INDENT
    file = open("outputfromterminal")
    contents = file.read()
    contents = contents.split(',') [1 :]
    for x in contents :
    INDENT

        x = x.split(' ')
        device = {'ip' : '', 'mac' : '', 'username' : 'admin', 'password' : [], 'device type' : '',}
        device ['ip'] = x [0]
        device ['mac'] = x [1]
        listofdevices.append(device)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47888350_47889810_9_24
47888350_47889843_14_26
Title: How do I update my gui once it has been initialized with tkinter? 
----------------------------------------

def main() :
INDENT
    global num1
    global screen
    num1 = []
    window = tk.Tk()
    window.title("Calculator")
    screen = tk.Label(text = "0.0")
    screen.grid(column = 0, row = 0)
    tk.Button(text = "1", command = button_one).grid(column = 0, row = 2)
    window.mainloop()
DEDENT
----------------------------------------

def main() :
INDENT
    global screen
    window = Tk()
    window.title("Calculator")
    global num1
    num1 = []
    screen = Label(text = "0.0")
    screen.grid(column = 0, row = 0)
    button1 = Button(text = "1", command = buttonOne)
    button1.grid(column = 0, row = 2)
    window.mainloop()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47891444_47895565_6_24
47891444_48214270_1_21
Title: How can I update my DataFrame in Pandas and export out to Excel? 
----------------------------------------

def update_val(row) :
INDENT
    def time_range(start, stop) :
    INDENT
        return [str(el).zfill(2) for el in range(start, stop + 1)]
    DEDENT
    minutes = str(row ['start appointment']) [14 : 16]
    hour = str(row ['start appointment']) [11 : 13]
    resource = row ['resource']
    if (minutes == '00') and (hour in time_range(8, 15)) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        row ['resource'] = 'ZBMDX2'
    DEDENT
    elif (minutes == '15') and (hour in time_range(9, 15)) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        row ['resource'] = 'ZBMDX3'
    DEDENT
    elif (minutes == '45') and (hour in time_range(7, 14)) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        row ['resource'] = 'ZBMDX1'
    DEDENT
    elif (minutes == '30') and (hour in time_range(8, 14)) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        row ['resource'] = 'ZBMDX4'
    DEDENT
DEDENT
----------------------------------------

def update_val(row) :
INDENT
    minutes = row ['start appointment'].minute
    hour = row ['start appointment'].hour
    resource = row ['resource'].strip()
    if (minutes == 0) and (hour in [8, 9, 10, 11, 13, 14, 15]) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        new_resource = 'ZBMDX2'
    DEDENT
    elif (minutes == 15) and (hour in [8, 9, 10, 11, 13, 14, 15]) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        new_resource = 'ZBMDX3'
    DEDENT
    elif (minutes == 45) and (hour in [7, 8, 9, 10, 12, 13, 14]) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        new_resource = 'ZBMDX1'
    DEDENT
    elif (minutes == 30) and (hour in [8, 9, 10, 13, 14]) and (resource in ['BDIAG1', 'BDIAG2', 'BDIAG3']) :
    INDENT
        new_resource = 'ZBMDX4'
    DEDENT
    else :
    INDENT
        new_resource = resource
    DEDENT
    row ['resource'] = new_resource
    return row
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47894822_47896130_104_133
47894822_47896130_73_84
Title: QListView display multiple labels 
----------------------------------------

def __init__(self) :
INDENT
    super(AssetImporterWindow, self).__init__()
    self.resize(500, 400)
    self.setWindowTitle('Import New Assets')
    self.ui_asset_viewer = QtGui.QListView()
    self.ui_asset_viewer.setItemDelegate(AssetItemDelegate())
    self.ui_asset_viewer.setResizeMode(QtGui.QListView.Adjust)
    self.ui_asset_viewer.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
    self.ui_asset_viewer.setIconSize(QtCore.QSize(96, 96))
    self.ui_asset_viewer.setSpacing(5)
    self.ui_asset_viewer.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
    sorted_model = QtGui.QSortFilterProxyModel()
    sorted_model.setSourceModel(AssetItemModel())
    self.ui_asset_viewer.setModel(sorted_model)
    self.ui_add_tags = QtGui.QPushButton('Add Tags')
    self.ui_add_tags.clicked.connect(self.add_tags)
    lay = QtGui.QVBoxLayout()
    lay.addWidget(self.ui_asset_viewer)
    lay.addWidget(self.ui_add_tags)
    widget = QtGui.QWidget()
    widget.setLayout(lay)
    self.setCentralWidget(widget)
    self.populate()

DEDENT
----------------------------------------

def __init__(self, title, content, font) :
INDENT
    QtGui.QTextDocument.__init__(self)
    cursor = QtGui.QTextCursor(self)
    fmt = QtGui.QTextCharFormat()
    fmt.setFont(font)
    cursor.setCharFormat(fmt)
    self.setPlainText(title + "\n" + ", ".join(content))
    cursor.movePosition(QtGui.QTextCursor.Start);
    cursor.movePosition(QtGui.QTextCursor.EndOfLine, QtGui.QTextCursor.KeepAnchor)
    fmt.setFontWeight(QtGui.QFont.Bold)
    cursor.mergeCharFormat(fmt)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47898497_47898554_8_18
47898497_47900768_9_17
Title: Custom build validation statement on an iterator 
----------------------------------------

def __call__(self, words) :
INDENT
    for word in words :
    INDENT
        if self.digit :
        INDENT
            if word.is_digit() : continue
        DEDENT
        if self.tag :
        INDENT
            if word [0] == "<" : continue
        DEDENT
        if self.short :
        INDENT
            if len(word) < 3 : continue
        DEDENT
        if any(f(word) for f in self.more_filters) :
        INDENT
            continue
        DEDENT
        yield word
    DEDENT
DEDENT
----------------------------------------

def __call__(self, word) :
INDENT
    if self.digit :
    INDENT
        if word.isdigit() : return True
    DEDENT
    if self.tag :
    INDENT
        if word [0] == "<" : return True
    DEDENT
    if self.short :
    INDENT
        if len(word) < 3 : return True
    DEDENT
    return False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47909342_47909752_26_42
47909342_47909752_45_54
Title: New window is empty 
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Frame.__init__(self, master)
    self.master.title("Quiz")
    self.menubar = MenuBar(self)
    self.master.config(menu = self.menubar)
    self.button1 = tk.Button(self)
    self.button1 ['text'] = "Hello!"
    self.button1.grid(row = 2, column = 0)
    self.canvas = tk.Canvas(self, bg = "white", width = 400, height = 400,
        bd = 0, highlightthickness = 0)
    self.canvas.grid(row = 3, column = 0)

DEDENT
----------------------------------------

def __init__(self, master) :
INDENT
    tk.Frame.__init__(self, master)
    self.label = tk.Label(self, text = "Show me my new window")
    self.label.grid(row = 1, column = 0)
    self.button = tk.Button(self, text = "Close", command = self.master.destroy)
    self.button.grid(row = 2, column = 0)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47910947_47911483_10_19
47910947_47911829_9_25
Title: How to draw the values produced by a function using PIL? 
----------------------------------------

def draw_function(function, size = 200) :
INDENT
    im = Image.new("RGB", (size, size))
    for x in range(size) :
    INDENT
        for y in range(size) :
        INDENT
            if function(x) < y :
            INDENT
                im.putpixel((x, y), BLACK)
            DEDENT
            else :
            INDENT
                im.putpixel((x, y), WHITE)
            DEDENT
        DEDENT
    DEDENT
    im.show()
DEDENT
----------------------------------------

def draw_function(function, size = 200) :
INDENT
    min_y, max_y = 0, 0
    for x in range(size) :
    INDENT
        val = function(x)
        if val < min_y :
        INDENT
            min_y = val
        DEDENT
        if val > max_y :
        INDENT
            max_y = val
        DEDENT
    DEDENT
    delta = max_y - min_y
    im = Image.new("RGB", (size, size), WHITE)
    draw = ImageDraw.Draw(im)
    for x in range(size) :
    INDENT
        y = int(((function(x) - min_y) / delta) * (size - 1))
        draw.line([(x, 0), (x, y)], BLACK)
    DEDENT
    im.show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47912318_47912545_12_18
47912318_47912545_29_39
Title: What is the purpose of _init_()? 
----------------------------------------

def move(self, distance) :
INDENT
    if self.canMove :
    INDENT
        self.position += distance
        return 'The vehicle moved {0} meters'.format(distance)
    DEDENT
    return 'The vehicle cannot move'

DEDENT
----------------------------------------

def move(self, distance) :
INDENT
    if self.canMove and self.hasFuel() :
    INDENT
        available_d = self.fuel / self.consumption
        if distance < = available_d :
        INDENT
            self.fuel -= self.consumption * distance
            self.position += distance
            return 'The vehicle moved {0} meters and has {1} litres left.'.format(distance, self.fuel)
        DEDENT
        return 'The vehicle cannot move since it does not have fuel enough'
    DEDENT
    return 'The vehicle cannot move since it does not have any fuel'

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47920356_47932566_7_15
47920356_47932566_91_100
Title: PyQt4 : making certain text on QTextEdit uneditable 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    QTextEdit.__init__(self, * args, ** kwargs)
    self.staticText = os.getcwd()
    self.counter = 1
    self.prefix = ""
    self.callPrefix()
    self.setContextMenuPolicy(Qt.CustomContextMenu)
    self.customContextMenuRequested.connect(self.onCustomContextMenuRequest)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    QWidget.__init__(self, * args, ** kwargs)
    label = QLabel(self.tr("Enter command and press Return"), self)
    self.te = TextEdit(self)
    layout = QVBoxLayout(self)
    layout.addWidget(label)
    layout.addWidget(self.te)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47940356_47941118_12_17
47940356_47958939_19_24
Title: python multiprocessing class 
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        print ("Worker report: val is %s" % (self.val.value))
        time.sleep(self.val.value)

    DEDENT
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        print ("Worker report: val is %s" % (self.val))
        time.sleep(self.val)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47944353_47944758_4_11
47944353_47944806_10_18
Title: Looping over a list of pandas data frames and create a new data frame 
----------------------------------------

def df_stats(dict_df) :
INDENT
    df = pd.DataFrame(columns = ['Number', 'Total PVs', 'Average', 'Median'], index = dict_df.keys())
    for name, data in dict_df.items() :
    INDENT
        df.loc [name, "Number"] = data.number.count()
        df.loc [name, "Total PVs"] = '{0:,.0f}'.format(data.PVs.sum())
        df.loc [name, "Average"] = '{0:,.0f}'.format(data.PVs.mean())
        df.loc [name, "Median"] = '{0:,.0f}'.format(data.PVs.median())
    DEDENT
    return df
DEDENT
----------------------------------------

def df_stats(dataFrame) :
INDENT
    df = pd.DataFrame({}, columns = ['Number', 'Total PVs', 'Average', 'Median'])
    df.loc ['Number'] = dataFrame ['number'].count()
    df ["Total PVs"] = '{0:,.0f}'.format(dataFrame ['PVs'].sum())
    df ["Average"] = '{0:,.0f}'.format(dataFrame ['PVs'].mean())
    df ["Median"] = '{0:,.0f}'.format(dataFrame ['PVs'].median())
    return df

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47950697_47950842_1_12
47950697_47951042_1_9
Title: How to insert value to an array based on if statement in python 
----------------------------------------

def inputUser() :
INDENT
    name.append(raw_input("Enter name = "))
    age.append(int(raw_input("Enter age = ")))
    typeService.append(int(raw_input("Enter code of service type = ")))
    action = raw_input("Do you want to add another kitten = ")
    while action ! = "n" :
    INDENT
        name.append(raw_input("Enter name = "))
        age.append(int(raw_input("Enter age = ")))
        typeService.append(int(raw_input("Enter code of service type = ")))
        action = raw_input("Do you want to add another kitten = ")
    DEDENT
DEDENT
----------------------------------------

def inputUser() :
INDENT
    action = 'y'
    while action ! = "n" :
    INDENT
        name.append(raw_input("Enter name = "))
        age.append(input("Enter age = "))
        typeService.append(raw_input("Enter code of service type = "))
        action = raw_input("Do you want to add another kitten = ")
    DEDENT
DEDENT
----------------------------------------

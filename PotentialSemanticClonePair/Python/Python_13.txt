$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21128555_21128640_4_19
21128555_47146310_1_16
Title: What's the most pythonic way (if any) to refactor these nested for/else loops? 
----------------------------------------

def awesome(somestring) :
INDENT
    x = some_default_value
    vals = [do_something, do_something_else, do_another_thing]
    subs = [['AB', 'CD', 'EF'], ['12', '34', '56'], ['!@', '@#', '#$']]
    for val, substrings in zip(vals, subs) :
    INDENT
        if check(substrings, somestring) :
        INDENT
            x = val()
            break
        DEDENT
    DEDENT
    x += complicated_thing()
    if some_condition(x) :
    INDENT
        x += "Hello"
    DEDENT
    else :
    INDENT
        x += "World"
    DEDENT
    return x
DEDENT
----------------------------------------

def awesome(string) :
INDENT
    count = 0
    for s in ['AB', 'CD', 'EF',
        '12', '34', '56',
        '!@', '@#', '#$'] :
    INDENT
        count += 1
        if s in string :
        INDENT
            break
        DEDENT
    DEDENT
    fun = {'0' : do_something, '1' : do_something_else, '2' : do_another_thing}
    x = fun.get(str(count / 3))() + complicated_thing()
    delta = 'Hello' if some_condition(x) else 'World'
    return x + delta
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21128555_21128642_4_11
21128555_21128688_1_19
Title: What's the most pythonic way (if any) to refactor these nested for/else loops? 
----------------------------------------

def awesome(my_string) :
INDENT
    if is_substr(my_string, ["A", "B", "C"]) :
    INDENT
        x = do_something() + complicated_thing()
    DEDENT
    elif is_substr(my_string, ["1", "2", "3"]) :
    INDENT
        x = do_something_else() + complicated_thing()
    DEDENT
    elif is_substr(my_string, ["!", "#", "$"]) :
    INDENT
        x = do_another_thing() + complicated_thing()
    DEDENT
    return x + ("Hello" if some_condition(x) else "World")
DEDENT
----------------------------------------

def awesome(string) :
INDENT
    foo = [{'subs' : ['A', 'B', 'C'], 'func' : do_something},
        {'subs' : ['1', '2', '3'], 'func' : do_something_else},
        {'subs' : ['!', '?', '.'], 'func' : do_another_thing}]
    for bar in foo :
    INDENT
        if any(s in string for s in bar ['subs']) :
        INDENT
            x = bar ['func']()
            break
        DEDENT
    DEDENT
    x += complicated_thing()
    if some_condition(x) :
    INDENT
        x += "Hello"
    DEDENT
    else :
    INDENT
        x += "World"
    DEDENT
    return x
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21128555_21128642_4_11
21128555_47146310_1_16
Title: What's the most pythonic way (if any) to refactor these nested for/else loops? 
----------------------------------------

def awesome(my_string) :
INDENT
    if is_substr(my_string, ["A", "B", "C"]) :
    INDENT
        x = do_something() + complicated_thing()
    DEDENT
    elif is_substr(my_string, ["1", "2", "3"]) :
    INDENT
        x = do_something_else() + complicated_thing()
    DEDENT
    elif is_substr(my_string, ["!", "#", "$"]) :
    INDENT
        x = do_another_thing() + complicated_thing()
    DEDENT
    return x + ("Hello" if some_condition(x) else "World")
DEDENT
----------------------------------------

def awesome(string) :
INDENT
    count = 0
    for s in ['AB', 'CD', 'EF',
        '12', '34', '56',
        '!@', '@#', '#$'] :
    INDENT
        count += 1
        if s in string :
        INDENT
            break
        DEDENT
    DEDENT
    fun = {'0' : do_something, '1' : do_something_else, '2' : do_another_thing}
    x = fun.get(str(count / 3))() + complicated_thing()
    delta = 'Hello' if some_condition(x) else 'World'
    return x + delta
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21128555_21128688_1_19
21128555_47146310_1_16
Title: What's the most pythonic way (if any) to refactor these nested for/else loops? 
----------------------------------------

def awesome(string) :
INDENT
    foo = [{'subs' : ['A', 'B', 'C'], 'func' : do_something},
        {'subs' : ['1', '2', '3'], 'func' : do_something_else},
        {'subs' : ['!', '?', '.'], 'func' : do_another_thing}]
    for bar in foo :
    INDENT
        if any(s in string for s in bar ['subs']) :
        INDENT
            x = bar ['func']()
            break
        DEDENT
    DEDENT
    x += complicated_thing()
    if some_condition(x) :
    INDENT
        x += "Hello"
    DEDENT
    else :
    INDENT
        x += "World"
    DEDENT
    return x
DEDENT
----------------------------------------

def awesome(string) :
INDENT
    count = 0
    for s in ['AB', 'CD', 'EF',
        '12', '34', '56',
        '!@', '@#', '#$'] :
    INDENT
        count += 1
        if s in string :
        INDENT
            break
        DEDENT
    DEDENT
    fun = {'0' : do_something, '1' : do_something_else, '2' : do_another_thing}
    x = fun.get(str(count / 3))() + complicated_thing()
    delta = 'Hello' if some_condition(x) else 'World'
    return x + delta
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2113427_2113471_1_10
2113427_25868839_4_13
Title: Determining Whether a Directory is Writeable 
----------------------------------------

def isWritable(name) :
INDENT
    uid = os.geteuid()
    gid = os.getegid()
    s = os.stat(dirname)
    mode = s [stat.ST_MODE]
    return (
        ((s [stat.ST_UID] == uid) and (mode & stat.S_IWUSR)) or
        ((s [stat.ST_GID] == gid) and (mode & stat.S_IWGRP)) or
        (mode & stat.S_IWOTH))
DEDENT
----------------------------------------

def isWritable(path) :
INDENT
    try :
    INDENT
        testfile = tempfile.TemporaryFile(dir = path)
        testfile.close()
    DEDENT
    except OSError as e :
    INDENT
        if e.errno == errno.EACCES :
        INDENT
            return False
        DEDENT
        e.filename = path
        raise
    DEDENT
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2113427_2113471_1_10
2113427_8620444_3_18
Title: Determining Whether a Directory is Writeable 
----------------------------------------

def isWritable(name) :
INDENT
    uid = os.geteuid()
    gid = os.getegid()
    s = os.stat(dirname)
    mode = s [stat.ST_MODE]
    return (
        ((s [stat.ST_UID] == uid) and (mode & stat.S_IWUSR)) or
        ((s [stat.ST_GID] == gid) and (mode & stat.S_IWGRP)) or
        (mode & stat.S_IWOTH))
DEDENT
----------------------------------------

def isWritable(directory) :
INDENT
    try :
    INDENT
        tmp_prefix = "write_tester";
        count = 0
        filename = os.path.join(directory, tmp_prefix)
        while (os.path.exists(filename)) :
        INDENT
            filename = "{}.{}".format(os.path.join(directory, tmp_prefix), count)
            count = count + 1
        DEDENT
        f = open(filename, "w")
        f.close()
        os.remove(filename)
        return True
    DEDENT
    except Exception as e :
    INDENT
        return False
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2113427_25868839_4_13
2113427_8620444_3_18
Title: Determining Whether a Directory is Writeable 
----------------------------------------

def isWritable(path) :
INDENT
    try :
    INDENT
        testfile = tempfile.TemporaryFile(dir = path)
        testfile.close()
    DEDENT
    except OSError as e :
    INDENT
        if e.errno == errno.EACCES :
        INDENT
            return False
        DEDENT
        e.filename = path
        raise
    DEDENT
    return True
DEDENT
----------------------------------------

def isWritable(directory) :
INDENT
    try :
    INDENT
        tmp_prefix = "write_tester";
        count = 0
        filename = os.path.join(directory, tmp_prefix)
        while (os.path.exists(filename)) :
        INDENT
            filename = "{}.{}".format(os.path.join(directory, tmp_prefix), count)
            count = count + 1
        DEDENT
        f = open(filename, "w")
        f.close()
        os.remove(filename)
        return True
    DEDENT
    except Exception as e :
    INDENT
        return False
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21136284_21136721_42_48
21136284_21140682_29_34
Title: Implementing a Linked List in Python 
----------------------------------------

def printList(self) :
INDENT
    n = self.head
    while n :
    INDENT
        print str(n)
        n = n.next
    DEDENT
DEDENT
----------------------------------------

def printList(self) :
INDENT
    tempNode = self.head
    while (tempNode ! = self.tail) :
    INDENT
        print (tempNode.getData())
        tempNode = tempNode.getNext()
    DEDENT
    print (self.tail.getData())
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21138734_21138950_1_12
21138734_21139563_1_10
Title: "I'm doing codeacademy to learn some python and I keep getting an error asking me if I've created a function called plane_ride_cost" 
----------------------------------------

def plane_ride_cost(city) :
INDENT
    if city == "Charlotte" :
    INDENT
        fee = 183
    DEDENT
    elif city == "Tampa" :
    INDENT
        fee = 220
    DEDENT
    elif city == "Pittsburgh" :
    INDENT
        fee = 222
    DEDENT
    elif city == "Los Angeles" :
    INDENT
        fee = 475
    DEDENT
    else :
    INDENT
        return "There seems a problem with the city you've asked for!"
    DEDENT
    return fee
DEDENT
----------------------------------------

def plane_ride_cost(city) :
INDENT
    choices = {
        'Charlotte' : 183,
        'Tampa' : 220,
        'Pittsburgh' : 222,
        'Los Angeles' : 475}
    return choices.get(city, None)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21138734_21139563_1_10
21138734_32017806_1_11
Title: "I'm doing codeacademy to learn some python and I keep getting an error asking me if I've created a function called plane_ride_cost" 
----------------------------------------

def plane_ride_cost(city) :
INDENT
    choices = {
        'Charlotte' : 183,
        'Tampa' : 220,
        'Pittsburgh' : 222,
        'Los Angeles' : 475}
    return choices.get(city, None)
DEDENT
----------------------------------------

def plane_ride_cost(city) :
INDENT
    if city == "Charlotte" :
    INDENT
        return 183
    DEDENT
    elif city == "Tampa" :
    INDENT
        return 220
    DEDENT
    elif city == "Pittsburgh" :
    INDENT
        return 222
    DEDENT
    elif city == "Los Angeles" :
    INDENT
        return 475
    DEDENT
    else :
    INDENT
        return "idontknow"
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21143778_21144079_5_40
21143778_21145016_1_16
Title: Handle multiple IO errors 
----------------------------------------

def readCoefficients(self) :
INDENT
    global a0_MSB;
    global a0_LSB;
    global b1_MSB;
    global b1_LSB;
    global b2_MSB;
    global b2_LSB;
    global c12_MSB;
    global c12_LSB;
    max_retries = 15
    a0_MSB = self.readretry(Pressure.MPL115A2_REGISTER_A0_COEFF_MSB + 0, max_retries)
    a0_LSB = self.readretry(Pressure.MPL115A2_REGISTER_A0_COEFF_LSB + 0, max_retries)
    b1_MSB = self.readretry(Pressure.MPL115A2_REGISTER_B1_COEFF_MSB + 0, max_retries)
    b1_LSB = self.readretry(Pressure.MPL115A2_REGISTER_B1_COEFF_LSB + 0, max_retries)
    b2_MSB = self.readretry(Pressure.MPL115A2_REGISTER_B2_COEFF_MSB + 0, max_retries)
    b2_LSB = self.readretry(Pressure.MPL115A2_REGISTER_B2_COEFF_LSB + 0, max_retries)
    c12_MSB = self.readretry(Pressure.MPL115A2_REGISTER_C12_COEFF_MSB + 0, max_retries)
    c12_LSB = self.readretry(Pressure.MPL115A2_REGISTER_C12_COEFF_LSB + 0, max_retries)
    def readretry(self, address, max_retries) :
    INDENT
        for i in range(max_retries) :
        INDENT
            try :
            INDENT
                return Pressure.bus.read_byte_data(
                    Pressure.MPL115A2_ADDRESS,
                    address)
            DEDENT
            except IOError as e :
            INDENT

                time.sleep(0.1)
            DEDENT
        DEDENT
        else :
        INDENT
            raise IOError("Reading failed after multiple tries")
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def readCoefficients(self) :
INDENT
    (
        a0_MSB, a0_LSB,
        b1_MSB, b1_LSB,
        b2_MSB, b2_LSB,
        c12_MSB, c12_LSB) = self.mio_read(15,
        Pressure.MPL115A2_REGISTER_A0_COEFF_MSB + 0,
        Pressure.MPL115A2_REGISTER_A0_COEFF_LSB + 0,
        Pressure.MPL115A2_REGISTER_B1_COEFF_MSB + 0,
        Pressure.MPL115A2_REGISTER_B1_COEFF_LSB + 0,
        Pressure.MPL115A2_REGISTER_B2_COEFF_MSB + 0,
        Pressure.MPL115A2_REGISTER_B2_COEFF_LSB + 0,
        Pressure.MPL115A2_REGISTER_C12_COEFF_MSB + 0,
        Pressure.MPL115A2_REGISTER_C12_COEFF_LSB + 0)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2114659_2125046_18_38
2114659_2125046_55_72
Title: How to serialize db.Model objects to json? 
----------------------------------------

def get(self) :
INDENT
    greetings_query = Greeting.all().order('-date')
    greetings = greetings_query.fetch(5)
    if users.get_current_user() :
    INDENT
        url = users.create_logout_url(self.request.uri)
        url_linktext = 'Logout'
    DEDENT
    else :
    INDENT
        url = users.create_login_url(self.request.uri)
        url_linktext = 'Login'
    DEDENT
    template_values = {
        'greetings' : greetings,
        'url' : url,
        'url_linktext' : url_linktext,
        }
    path = os.path.join(os.path.dirname(__file__), 'index.html')
    self.response.out.write(template.render(path, template_values))

DEDENT
----------------------------------------

def get(self) :
INDENT
    user = None
    greetings_query = Greeting.all().order('-date')
    rs = greetings_query.fetch(5)
    data = json.encode(rs)

    self.response.headers ['Content-Type'] = 'application/json; charset=utf-8'
    self.response.out.write(data)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21148885_21149218_30_37
21148885_21149218_43_50
Title: Need help writing algorithm in Python/Sage 
----------------------------------------

def getchoice(self) :
INDENT
    choice = None
    while choice not in range(1, 7) :
    INDENT
        choice = int(input("Pick a number between 1 and 6: "))
    DEDENT
    return super().makemove(choice)
DEDENT
----------------------------------------

def getchoice(self) :
INDENT
    global s
    choice = s % 7
    if choice == 0 :
    INDENT
        choice = random.randint(1, 6)
    DEDENT
    return super().makemove(choice)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21148885_21149218_4_8
21148885_21149218_57_67
Title: Need help writing algorithm in Python/Sage 
----------------------------------------

def __init__(self, name = None) :
INDENT
    if name is None :
    INDENT
        name = input("What's your name? ")
    DEDENT
    self.name = name
    self.myturn = False
DEDENT
----------------------------------------

def __init__(self, playerArray = []) :
INDENT
    global s
    if type(playerArray) is Player :
    INDENT
        playerArray = [playerArray]
    DEDENT
    while len(playerArray) < 2 :
    INDENT
        playerArray.append(Computer())
    DEDENT
    self.players = playerArray
    s = random.randint(1, 100)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21151807_21151966_3_11
21151807_21152418_4_10
Title: how can I avoid using a global variable as a parameter to a python decorator 
----------------------------------------

def decorator_example(test_value) :
INDENT
    def deco_example(f) :
    INDENT
        @ wraps(f)
        def f_example(* args, ** kwargs) :
        INDENT
            print "The value I need is", test_value
            return f(* args, ** kwargs)
        DEDENT
        return f_example
    DEDENT
    return deco_example
DEDENT
----------------------------------------

def decorator_example(f) :
INDENT
    @ wraps(f)
    def f_example(* args, ** kwargs) :
    INDENT
        print "The value I need is", config.test_value
        return f(* args, ** kwargs)
    DEDENT
    return f_example
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21181958_4_23
21178339_21184152_12_28
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self) :
INDENT
    super(LayoutTest, self).__init__()
    self.first_box = QtGui.QVBoxLayout()
    self.second_box = QtGui.QVBoxLayout()
    self.third_box = QtGui.QVBoxLayout()
    self.fourth_box = QtGui.QVBoxLayout()
    self.zvbox = QtGui.QVBoxLayout()
    vbox = QtGui.QVBoxLayout()
    vbox.addLayout(self.first_box)
    vbox.addLayout(self.second_box)
    vbox.addLayout(self.third_box)
    vbox.addLayout(self.fourth_box)
    self.setLayout(vbox)
    self.first_view()
    self.setGeometry(300, 200, 400, 300)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWizard.__init__(self, parent)
    self.result = 0
    self.company_name = ""
    self.company_listing = ""
    self.info1 = ""
    self.info2 = ""
    self.info3 = ""
    self.setWindowTitle("My wizard")
    self.addPage(company_info(self))
    self.addPage(company_listing(self))
    self.addPage(company_other_infos(self))
    self.finished.connect(self.end)
    pass
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21181958_4_23
21178339_21184152_44_57
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self) :
INDENT
    super(LayoutTest, self).__init__()
    self.first_box = QtGui.QVBoxLayout()
    self.second_box = QtGui.QVBoxLayout()
    self.third_box = QtGui.QVBoxLayout()
    self.fourth_box = QtGui.QVBoxLayout()
    self.zvbox = QtGui.QVBoxLayout()
    vbox = QtGui.QVBoxLayout()
    vbox.addLayout(self.first_box)
    vbox.addLayout(self.second_box)
    vbox.addLayout(self.third_box)
    vbox.addLayout(self.fourth_box)
    self.setLayout(vbox)
    self.first_view()
    self.setGeometry(300, 200, 400, 300)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 1/3")
    self.setSubTitle("Company Name")
    self.lineEdit = QtGui.QLineEdit("The world company")
    self.registerField("company_name", self.lineEdit)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(self.lineEdit)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21181958_4_23
21178339_21184152_65_91
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self) :
INDENT
    super(LayoutTest, self).__init__()
    self.first_box = QtGui.QVBoxLayout()
    self.second_box = QtGui.QVBoxLayout()
    self.third_box = QtGui.QVBoxLayout()
    self.fourth_box = QtGui.QVBoxLayout()
    self.zvbox = QtGui.QVBoxLayout()
    vbox = QtGui.QVBoxLayout()
    vbox.addLayout(self.first_box)
    vbox.addLayout(self.second_box)
    vbox.addLayout(self.third_box)
    vbox.addLayout(self.fourth_box)
    self.setLayout(vbox)
    self.first_view()
    self.setGeometry(300, 200, 400, 300)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 2/3")
    self.setSubTitle("Some listing")
    ipsum = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.
Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.
#Praesent et diam eget libero egestas mattis sit amet vitae augue.
Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.
Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis.
Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet.
Ut convallis libero in urna ultrices accumsan. Donec sed odio eros.
Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus.
Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est."""
    textEdit = QtGui.QTextEdit()
    textEdit.setPlainText(ipsum)
    self.registerField("company_listing", textEdit, "plainText")
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(textEdit)
    layout.addStretch(1)
    self.setLayout(layout)
    pass
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21181958_4_23
21178339_21184152_99_118
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self) :
INDENT
    super(LayoutTest, self).__init__()
    self.first_box = QtGui.QVBoxLayout()
    self.second_box = QtGui.QVBoxLayout()
    self.third_box = QtGui.QVBoxLayout()
    self.fourth_box = QtGui.QVBoxLayout()
    self.zvbox = QtGui.QVBoxLayout()
    vbox = QtGui.QVBoxLayout()
    vbox.addLayout(self.first_box)
    vbox.addLayout(self.second_box)
    vbox.addLayout(self.third_box)
    vbox.addLayout(self.fourth_box)
    self.setLayout(vbox)
    self.first_view()
    self.setGeometry(300, 200, 400, 300)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 3/3")
    self.setSubTitle("Other infos")
    lineEdit_info1 = QtGui.QLineEdit("info1")
    lineEdit_info2 = QtGui.QLineEdit("info2")
    lineEdit_info3 = QtGui.QLineEdit("info3")
    self.registerField("info1", lineEdit_info1)
    self.registerField("info2", lineEdit_info2)
    self.registerField("info3", lineEdit_info3)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(lineEdit_info1)
    layout.addWidget(lineEdit_info2)
    layout.addWidget(lineEdit_info3)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21184152_12_28
21178339_21184152_44_57
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWizard.__init__(self, parent)
    self.result = 0
    self.company_name = ""
    self.company_listing = ""
    self.info1 = ""
    self.info2 = ""
    self.info3 = ""
    self.setWindowTitle("My wizard")
    self.addPage(company_info(self))
    self.addPage(company_listing(self))
    self.addPage(company_other_infos(self))
    self.finished.connect(self.end)
    pass
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 1/3")
    self.setSubTitle("Company Name")
    self.lineEdit = QtGui.QLineEdit("The world company")
    self.registerField("company_name", self.lineEdit)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(self.lineEdit)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21184152_12_28
21178339_21184152_65_91
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWizard.__init__(self, parent)
    self.result = 0
    self.company_name = ""
    self.company_listing = ""
    self.info1 = ""
    self.info2 = ""
    self.info3 = ""
    self.setWindowTitle("My wizard")
    self.addPage(company_info(self))
    self.addPage(company_listing(self))
    self.addPage(company_other_infos(self))
    self.finished.connect(self.end)
    pass
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 2/3")
    self.setSubTitle("Some listing")
    ipsum = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.
Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.
#Praesent et diam eget libero egestas mattis sit amet vitae augue.
Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.
Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis.
Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet.
Ut convallis libero in urna ultrices accumsan. Donec sed odio eros.
Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus.
Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est."""
    textEdit = QtGui.QTextEdit()
    textEdit.setPlainText(ipsum)
    self.registerField("company_listing", textEdit, "plainText")
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(textEdit)
    layout.addStretch(1)
    self.setLayout(layout)
    pass
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21184152_12_28
21178339_21184152_99_118
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    QtGui.QWizard.__init__(self, parent)
    self.result = 0
    self.company_name = ""
    self.company_listing = ""
    self.info1 = ""
    self.info2 = ""
    self.info3 = ""
    self.setWindowTitle("My wizard")
    self.addPage(company_info(self))
    self.addPage(company_listing(self))
    self.addPage(company_other_infos(self))
    self.finished.connect(self.end)
    pass
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 3/3")
    self.setSubTitle("Other infos")
    lineEdit_info1 = QtGui.QLineEdit("info1")
    lineEdit_info2 = QtGui.QLineEdit("info2")
    lineEdit_info3 = QtGui.QLineEdit("info3")
    self.registerField("info1", lineEdit_info1)
    self.registerField("info2", lineEdit_info2)
    self.registerField("info3", lineEdit_info3)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(lineEdit_info1)
    layout.addWidget(lineEdit_info2)
    layout.addWidget(lineEdit_info3)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21184152_44_57
21178339_21184152_65_91
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 1/3")
    self.setSubTitle("Company Name")
    self.lineEdit = QtGui.QLineEdit("The world company")
    self.registerField("company_name", self.lineEdit)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(self.lineEdit)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 2/3")
    self.setSubTitle("Some listing")
    ipsum = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.
Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.
#Praesent et diam eget libero egestas mattis sit amet vitae augue.
Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.
Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis.
Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet.
Ut convallis libero in urna ultrices accumsan. Donec sed odio eros.
Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus.
Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est."""
    textEdit = QtGui.QTextEdit()
    textEdit.setPlainText(ipsum)
    self.registerField("company_listing", textEdit, "plainText")
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(textEdit)
    layout.addStretch(1)
    self.setLayout(layout)
    pass
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21184152_44_57
21178339_21184152_99_118
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 1/3")
    self.setSubTitle("Company Name")
    self.lineEdit = QtGui.QLineEdit("The world company")
    self.registerField("company_name", self.lineEdit)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(self.lineEdit)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 3/3")
    self.setSubTitle("Other infos")
    lineEdit_info1 = QtGui.QLineEdit("info1")
    lineEdit_info2 = QtGui.QLineEdit("info2")
    lineEdit_info3 = QtGui.QLineEdit("info3")
    self.registerField("info1", lineEdit_info1)
    self.registerField("info2", lineEdit_info2)
    self.registerField("info3", lineEdit_info3)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(lineEdit_info1)
    layout.addWidget(lineEdit_info2)
    layout.addWidget(lineEdit_info3)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21178339_21184152_65_91
21178339_21184152_99_118
Title: How to do multiple ui on one main window 
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 2/3")
    self.setSubTitle("Some listing")
    ipsum = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.
Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.
#Praesent et diam eget libero egestas mattis sit amet vitae augue.
Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.
Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis.
Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet.
Ut convallis libero in urna ultrices accumsan. Donec sed odio eros.
Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus.
Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est."""
    textEdit = QtGui.QTextEdit()
    textEdit.setPlainText(ipsum)
    self.registerField("company_listing", textEdit, "plainText")
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(textEdit)
    layout.addStretch(1)
    self.setLayout(layout)
    pass
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    QtGui.QWizardPage.__init__(self, parent)
    self.setTitle("Step 3/3")
    self.setSubTitle("Other infos")
    lineEdit_info1 = QtGui.QLineEdit("info1")
    lineEdit_info2 = QtGui.QLineEdit("info2")
    lineEdit_info3 = QtGui.QLineEdit("info3")
    self.registerField("info1", lineEdit_info1)
    self.registerField("info2", lineEdit_info2)
    self.registerField("info3", lineEdit_info3)
    layout = QtGui.QVBoxLayout(self)
    layout.addWidget(lineEdit_info1)
    layout.addWidget(lineEdit_info2)
    layout.addWidget(lineEdit_info3)
    layout.addStretch(1)
    self.setLayout(layout)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21186691_21188778_44_57
21186691_21188778_8_27
Title: wx.lib.pubsub: How to change the value in a timer 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    self.frame = parent
    self.CenterOnParent()
    setBtn = wx.Button(self, label = "Set", pos = (45, 10))
    setBtn.Bind(wx.EVT_BUTTON, self.setFrame)
    self.redraw_timer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.on_redraw_timer, self.redraw_timer)
    self.redraw_timer.Start(milliseconds = 1000)
    pub.subscribe(self.listener, "update_timer")
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY, size = (100, 200))
    self.CenterOnParent()
    self.SetBackgroundColour('#e4e4e4')
    self.radio2 = wx.RadioButton(self, label = "1 sec", pos = (40, 45))
    self.Bind(wx.EVT_RADIOBUTTON, self.update_timer)
    self.radio2 = wx.RadioButton(self, label = "5 sec", pos = (40, 65))
    self.Bind(wx.EVT_RADIOBUTTON, self.update_timer)
    self.radio3 = wx.RadioButton(self, label = "10 sec", pos = (40, 85))
    self.Bind(wx.EVT_RADIOBUTTON, self.update_timer)
    extBtn = wx.Button(self, label = "Exit", pos = (20, 110))
    extBtn.Bind(wx.EVT_BUTTON, self.extFrame)
    self.choice = 1

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21186691_21188778_44_57
21186691_21188938_12_28
Title: wx.lib.pubsub: How to change the value in a timer 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    self.frame = parent
    self.CenterOnParent()
    setBtn = wx.Button(self, label = "Set", pos = (45, 10))
    setBtn.Bind(wx.EVT_BUTTON, self.setFrame)
    self.redraw_timer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.on_redraw_timer, self.redraw_timer)
    self.redraw_timer.Start(milliseconds = 1000)
    pub.subscribe(self.listener, "update_timer")
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY, size = (100, 200))
    self.CenterOnParent()
    self.SetBackgroundColour('#e4e4e4')
    self.radio1 = wx.RadioButton(self, label = "1 sec", pos = (40, 45))
    self.radio1.Bind(wx.EVT_RADIOBUTTON, self.SetLab1)
    self.radio2 = wx.RadioButton(self, label = "5 sec", pos = (40, 65))
    self.radio2.Bind(wx.EVT_RADIOBUTTON, self.SetLab2)
    self.radio3 = wx.RadioButton(self, label = "10 sec", pos = (40, 85))
    self.radio3.Bind(wx.EVT_RADIOBUTTON, self.SetLab3)
    extBtn = wx.Button(self, label = "Exit", pos = (20, 110))
    extBtn.Bind(wx.EVT_BUTTON, self.extFrame)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21186691_21188778_8_27
21186691_21188938_48_59
Title: wx.lib.pubsub: How to change the value in a timer 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY, size = (100, 200))
    self.CenterOnParent()
    self.SetBackgroundColour('#e4e4e4')
    self.radio2 = wx.RadioButton(self, label = "1 sec", pos = (40, 45))
    self.Bind(wx.EVT_RADIOBUTTON, self.update_timer)
    self.radio2 = wx.RadioButton(self, label = "5 sec", pos = (40, 65))
    self.Bind(wx.EVT_RADIOBUTTON, self.update_timer)
    self.radio3 = wx.RadioButton(self, label = "10 sec", pos = (40, 85))
    self.Bind(wx.EVT_RADIOBUTTON, self.update_timer)
    extBtn = wx.Button(self, label = "Exit", pos = (20, 110))
    extBtn.Bind(wx.EVT_BUTTON, self.extFrame)
    self.choice = 1

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    self.frame = parent
    self.CenterOnParent()
    setBtn = wx.Button(self, label = "Set", pos = (45, 10))
    setBtn.Bind(wx.EVT_BUTTON, self.setFrame)
    self.redraw_timer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.on_redraw_timer, self.redraw_timer)
    self.redraw_timer.Start(milliseconds = 1000)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21186691_21188938_12_28
21186691_21188938_48_59
Title: wx.lib.pubsub: How to change the value in a timer 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY, size = (100, 200))
    self.CenterOnParent()
    self.SetBackgroundColour('#e4e4e4')
    self.radio1 = wx.RadioButton(self, label = "1 sec", pos = (40, 45))
    self.radio1.Bind(wx.EVT_RADIOBUTTON, self.SetLab1)
    self.radio2 = wx.RadioButton(self, label = "5 sec", pos = (40, 65))
    self.radio2.Bind(wx.EVT_RADIOBUTTON, self.SetLab2)
    self.radio3 = wx.RadioButton(self, label = "10 sec", pos = (40, 85))
    self.radio3.Bind(wx.EVT_RADIOBUTTON, self.SetLab3)
    extBtn = wx.Button(self, label = "Exit", pos = (20, 110))
    extBtn.Bind(wx.EVT_BUTTON, self.extFrame)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent)
    self.frame = parent
    self.CenterOnParent()
    setBtn = wx.Button(self, label = "Set", pos = (45, 10))
    setBtn.Bind(wx.EVT_BUTTON, self.setFrame)
    self.redraw_timer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.on_redraw_timer, self.redraw_timer)
    self.redraw_timer.Start(milliseconds = 1000)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21204067_21204655_4_11
21204067_21214042_8_43
Title: Tower of Hanoi Python My own way wont work 
----------------------------------------

def Hanoi(n, src, dest, temp) :
INDENT
    if n == 0 :
    INDENT
        return
    DEDENT
    Hanoi(n - 1, src, temp, dest)
    Move(src, dest)
    print a, c, b
    Hanoi(n - 1, temp, dest, src)
DEDENT
----------------------------------------

def Hanoi(nDisks, src, dest, temp) :
INDENT
    numDisksMoved = 0
    while numDisksMoved < nDisks :
    INDENT
        if len(dest) == 0 :
        INDENT
            Move(src, dest)
            numDisksMoved += 1

        DEDENT
        elif dest [- 1] > src [- 1] :
        INDENT
            Move(src, dest)
            numDisksMoved += 1

        DEDENT
        else :
        INDENT

            MovedTillNow = numDisksMoved

            Hanoi(MovedTillNow, dest, temp, src)

            Move(src, dest)
            numDisksMoved += 1

            Hanoi(MovedTillNow, temp, dest, src)

        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21233127_21235471_1_17
21233127_21239283_7_15
Title: How to bind items in a wx.Choice component to functions? 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, 0, 'wxPython pull-down choice', size = (400, 300))
    panel_select_model = wx.Panel(self, - 1)
    model_list = ['Test_A', 'Test_B']
    self._model_type = None
    self._stat_tex = wx.StaticText(panel_select_model, 1, "Select Model Type:", (15, 20))
    self._droplist = wx.Choice(panel_select_model, 2, (150, 18), choices = model_list)
    """ Bind A Panel """
    self._droplist.SetSelection(0)
    self._droplist.Bind(wx.EVT_CHOICE, self.choice_click)
    """ Bind B Panel """
    self._droplist.SetSelection(1)
    self._droplist.Bind(wx.EVT_CHOICE, self.choice_click)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, title = "Callbacks")
    panel = wx.Panel(self)
    self.choice = wx.Choice(panel, choices = ["test_A", "test_B"])
    self.choice.Bind(wx.EVT_CHOICE, self.onChoice)
    self.Show()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
212358_10578346_1_21
212358_42416906_1_48
Title: Binary search (bisection) in Python 
----------------------------------------

def binary_search(a, key, imin = 0, imax = None) :
INDENT
    if imax is None :
    INDENT

        imax = len(a) - 1
    DEDENT
    while imin < = imax :
    INDENT

        mid = (imin + imax) / / 2
        midval = a [mid]

        if midval < key :
        INDENT

            imin = mid + 1
        DEDENT
        elif midval > key :
        INDENT

            imax = mid - 1
        DEDENT
        else :
        INDENT
            return mid
        DEDENT
    DEDENT
    raise ValueError
DEDENT
----------------------------------------

def binary_search(values, key, lo = 0, hi = None, length = None, cmp = None) :
INDENT
    assert type(values [0]) == type(key) or cmp, "can't be compared"
    assert not (hi and length), "`hi`, `length` both can't be specified at the same time"
    lo = lo
    if not lo :
    INDENT
        lo = 0
    DEDENT
    if hi :
    INDENT
        hi = hi
    DEDENT
    elif length :
    INDENT
        hi = length - 1
    DEDENT
    else :
    INDENT
        hi = len(values) - 1
    DEDENT
    while lo < = hi :
    INDENT
        mid = lo + (hi - lo) / / 2
        if not cmp :
        INDENT
            if values [mid] == key :
            INDENT
                return mid
            DEDENT
            if values [mid] < key :
            INDENT
                lo = mid + 1
            DEDENT
            else :
            INDENT
                hi = mid - 1
            DEDENT
        DEDENT
        else :
        INDENT
            val = cmp(values [mid], key)

            if val == 0 :
            INDENT
                return mid
            DEDENT
            if val < 0 :
            INDENT
                lo = mid + 1
            DEDENT
            else :
            INDENT
                hi = mid - 1
            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
212358_212413_1_13
212358_42416906_1_48
Title: Binary search (bisection) in Python 
----------------------------------------

def binary_search(a, x, lo = 0, hi = None) :
INDENT
    if hi is None :
    INDENT
        hi = len(a)
    DEDENT
    while lo < hi :
    INDENT
        mid = (lo + hi) / / 2
        midval = a [mid]
        if midval < x :
        INDENT
            lo = mid + 1
        DEDENT
        elif midval > x :
        INDENT
            hi = mid
        DEDENT
        else :
        INDENT
            return mid
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------

def binary_search(values, key, lo = 0, hi = None, length = None, cmp = None) :
INDENT
    assert type(values [0]) == type(key) or cmp, "can't be compared"
    assert not (hi and length), "`hi`, `length` both can't be specified at the same time"
    lo = lo
    if not lo :
    INDENT
        lo = 0
    DEDENT
    if hi :
    INDENT
        hi = hi
    DEDENT
    elif length :
    INDENT
        hi = length - 1
    DEDENT
    else :
    INDENT
        hi = len(values) - 1
    DEDENT
    while lo < = hi :
    INDENT
        mid = lo + (hi - lo) / / 2
        if not cmp :
        INDENT
            if values [mid] == key :
            INDENT
                return mid
            DEDENT
            if values [mid] < key :
            INDENT
                lo = mid + 1
            DEDENT
            else :
            INDENT
                hi = mid - 1
            DEDENT
        DEDENT
        else :
        INDENT
            val = cmp(values [mid], key)

            if val == 0 :
            INDENT
                return mid
            DEDENT
            if val < 0 :
            INDENT
                lo = mid + 1
            DEDENT
            else :
            INDENT
                hi = mid - 1
            DEDENT
        DEDENT
    DEDENT
    return - 1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21242011_21242776_3_11
21242011_21252219_1_10
Title: Most efficient way to calculate radial profile 
----------------------------------------

def radial_profile(data, center) :
INDENT
    y, x = np.indices((data.shape))
    r = np.sqrt((x - center [0]) ** 2 + (y - center [1]) ** 2)
    r = r.astype(np.int)
    tbin = np.bincount(r.ravel(), data.ravel())
    nr = np.bincount(r.ravel())
    radialprofile = tbin / nr
    return radialprofile
DEDENT
----------------------------------------

def radial_profile(data, center) :
INDENT
    y, x = np.indices((data.shape))
    r = np.sqrt((x - center [0]) ** 2 + (y - center [1]) ** 2)

    r_max = np.max(r)
    ring_brightness, radius = np.histogram(r, weights = data, bins = r_max / 3)
    plt.plot(radius [1 :], ring_brightness)
    plt.show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21242716_21242784_1_16
21242716_21242833_1_11
Title: Unnecessary repetition of declaration 
----------------------------------------

def minutesToHours() :
INDENT
    time = lambda hour, minute : '%s: %s' % (hour, minute)
    hour = 0
    entry = input("How many minutes? I will convert it to hours...")
    if 0 < = entry < 60 :
    INDENT
        minute = entry
    DEDENT
    elif entry > = 60 :
    INDENT
        hour = entry / 60
        minute = entry % 60
    DEDENT
    else :
    INDENT
        print "Please enter a number greater than zero next time."
        return
    DEDENT
    print time(hour, minute)
DEDENT
----------------------------------------

def minutesToHours() :
INDENT
    entry = ""
    while not entry.isdigit() :
    INDENT
        if entry ! = "" :
        INDENT
            print "Please enter a number greater than zero next time."
        DEDENT
        entry = input("How many minutes? I will convert it to hours...")
    DEDENT
    hour, minutes = divmod(int(entry), 60)
    time = "%s:%s" % (hour, minutes)
    print time
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21242716_21242784_1_16
21242716_21242908_1_7
Title: Unnecessary repetition of declaration 
----------------------------------------

def minutesToHours() :
INDENT
    time = lambda hour, minute : '%s: %s' % (hour, minute)
    hour = 0
    entry = input("How many minutes? I will convert it to hours...")
    if 0 < = entry < 60 :
    INDENT
        minute = entry
    DEDENT
    elif entry > = 60 :
    INDENT
        hour = entry / 60
        minute = entry % 60
    DEDENT
    else :
    INDENT
        print "Please enter a number greater than zero next time."
        return
    DEDENT
    print time(hour, minute)
DEDENT
----------------------------------------

def minutesToHours() :
INDENT
    entry = input("How many minutes? I will convert it to hours...")
    if entry < 0 :
    INDENT
        print "Please enter a number greater than zero next time."
    DEDENT
    else :
    INDENT
        print "%02d:%02d" % divmod(entry, 60)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21242716_21242833_1_11
21242716_21242908_1_7
Title: Unnecessary repetition of declaration 
----------------------------------------

def minutesToHours() :
INDENT
    entry = ""
    while not entry.isdigit() :
    INDENT
        if entry ! = "" :
        INDENT
            print "Please enter a number greater than zero next time."
        DEDENT
        entry = input("How many minutes? I will convert it to hours...")
    DEDENT
    hour, minutes = divmod(int(entry), 60)
    time = "%s:%s" % (hour, minutes)
    print time
DEDENT
----------------------------------------

def minutesToHours() :
INDENT
    entry = input("How many minutes? I will convert it to hours...")
    if entry < 0 :
    INDENT
        print "Please enter a number greater than zero next time."
    DEDENT
    else :
    INDENT
        print "%02d:%02d" % divmod(entry, 60)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21244530_21245166_4_18
21244530_21245220_6_16
Title: Python function not appending last value to list 
----------------------------------------

def succession(list) :
INDENT
    result = []
    saved = - 1
    for value in list :
    INDENT
        int_value = int(value)
        if int_value == saved :
        INDENT
            result [- 1] += 1
        DEDENT
        else :
        INDENT
            result.append(1)
        DEDENT
        saved = int_value
    DEDENT
    return result

DEDENT
----------------------------------------

def succession(p, n) :
INDENT
    run = bools(p, n)
    print run
    lastvalue = None
    successionlist = []
    for item in run :
    INDENT
        if item is not lastvalue :
        INDENT
            lastvalue = item
            successionlist.append(0)
        DEDENT
        successionlist [- 1] += 1
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21285058_21286036_26_40
21285058_21286644_82_104
Title: Find all point pairs closer than a given maximum distance 
----------------------------------------

def test() :
INDENT
    np.random.seed(0)
    X = np.random.rand(100, 2) * 20
    p = close_pairs(X, 2)
    q = close_pairs_ckdtree(X, 2)
    from matplotlib import pyplot as plt
    plt.plot(X [:, 0], X [:, 1], '.r')
    plt.plot(X [p, 0].T, X [p, 1].T, '-b')
    plt.figure()
    plt.plot(X [:, 0], X [:, 1], '.r')
    plt.plot(X [q, 0].T, X [q, 1].T, '-b')
    plt.show()
DEDENT
----------------------------------------

def test() :
INDENT
    X = np.random.rand(1000, 2) * 20
    import time
    t0 = time.time()
    p = close_pairs(X, 2)
    t1 = time.time()
    p2 = close_pairs1(X, 2)
    t2 = time.time()
    print t2 - t1, t1 - t0
    from matplotlib import pyplot as plt
    plt.figure()
    plt.clf()
    plt.plot(X [:, 0], X [:, 1], '.r')
    plt.plot(X [p, 0].T, X [p, 1].T, '-b')
    plt.figure()
    plt.clf()
    plt.plot(X [:, 0], X [:, 1], '.r')
    plt.plot(X [p2, 0].T, X [p2, 1].T, '-b')
    plt.show()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2129369_2134108_16_24
2129369_2134108_3_13
Title: gtk.Builder() and multiple glade files breaks 
----------------------------------------

def __init__(self) :
INDENT
    self.builder = gtk.Builder()
    self.builder.add_from_file("ui_for_two.glade")
    self.some_container = self.builder.get_object("some_container")
    self.one = one()
    self.some_container.pack_start(self.one, False, False)
    self.some_container.show_all()
    self.builder.connect_signals(self)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    gtk.VBox.__init__(self)
    self.builder = gtk.Builder()
    self.builder.add_from_file("ui_for_one.glade")
    some_widget = self.builder.get_object("some_widget")
    self.add(some_widget)
    self.builder.connect_signals(self)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_120_145
21351282_21404464_223_251
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def __init__(self, parent = None, initPos = (0, 0), width = 50, height = 50, dicts = None) :
INDENT
    DragSprite.__init__(self, parent)
    self.type = DragSprite.SPRITE_BUTTON
    self.resourceCfgDict = dicts
    self.imageResource = {}
    self.status = 0
    self.index = 0
    self.parent = parent
    self.initPos = (initPos [0], initPos [1])
    self.width = width
    self.height = height
    self.rectOnLoad = pygame.Rect(initPos, (width, height))
    self.rect = self.rectOnLoad.copy()
    self.operationOn = None
    self.operationOff = None
    self.operationDic = {"on" : self.getOperationOnItem, "off" : self.getOperationOffItem}
    self.guiCfg = None
    for dic in dicts :
    INDENT
        self.loadImgResource(dic)
    DEDENT
    self.setCurrentResource("off")
DEDENT
----------------------------------------

def __init__(self, parent, ID) :
INDENT
    wx.Window.__init__(self, parent, ID)
    self.parent = parent
    self.hwnd = self.GetHandle()
    self.size = self.GetSizeTuple()
    self.size_dirty = True
    self.rootSpriteGroup = pygame.sprite.LayeredUpdates()
    self.timer = wx.Timer(self)
    self.Bind(wx.EVT_PAINT, self.OnPaint)
    self.Bind(wx.EVT_TIMER, self.Update, self.timer)
    self.Bind(wx.EVT_SIZE, self.OnSize)
    self.fps = 60.0
    self.timespacing = 1000.0 / self.fps
    self.timer.Start(self.timespacing, False)
    self.previous_time = 0
    self.Bind(wx.EVT_MOUSE_EVENTS, self.OnMouse)
    self.selectedSprite = None
    self.zoomRatio = 1
    self.background = None
    self.bgRect = None
    self.backgroundOnUpdate = None
    self.bgRetOnUpdate = None
    self.loadBackground()
    self.addTestSprite()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_120_145
21351282_21404464_403_443
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def __init__(self, parent = None, initPos = (0, 0), width = 50, height = 50, dicts = None) :
INDENT
    DragSprite.__init__(self, parent)
    self.type = DragSprite.SPRITE_BUTTON
    self.resourceCfgDict = dicts
    self.imageResource = {}
    self.status = 0
    self.index = 0
    self.parent = parent
    self.initPos = (initPos [0], initPos [1])
    self.width = width
    self.height = height
    self.rectOnLoad = pygame.Rect(initPos, (width, height))
    self.rect = self.rectOnLoad.copy()
    self.operationOn = None
    self.operationOff = None
    self.operationDic = {"on" : self.getOperationOnItem, "off" : self.getOperationOffItem}
    self.guiCfg = None
    for dic in dicts :
    INDENT
        self.loadImgResource(dic)
    DEDENT
    self.setCurrentResource("off")
DEDENT
----------------------------------------

def __init__(self, parent, fSize) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = fSize, style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    fgSizer1 = wx.FlexGridSizer(2, 1, 0, 0)
    fgSizer1.AddGrowableCol(0)
    fgSizer1.AddGrowableRow(0)
    fgSizer1.SetFlexibleDirection(wx.VERTICAL)
    fgSizer1.SetNonFlexibleGrowMode(wx.FLEX_GROWMODE_ALL)

    self.panelMain = MyHmiPanel(self, - 1)
    fgSizer1.Add(self.panelMain, 1, wx.EXPAND | wx.ALL, 5)
    self.m_panel4 = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
    bSizer3 = wx.BoxSizer(wx.HORIZONTAL)
    self.bZoomIn = wx.Button(self.m_panel4, wx.ID_ANY, u"Zoom In", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bZoomIn, 0, wx.ALL, 5)
    self.bReset = wx.Button(self.m_panel4, wx.ID_ANY, u"Reset", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bReset, 0, wx.ALL, 5)
    self.bZoomOut = wx.Button(self.m_panel4, wx.ID_ANY, u"Zoom Out", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bZoomOut, 0, wx.ALL, 5)
    self.m_panel4.SetSizer(bSizer3)
    self.m_panel4.Layout()
    bSizer3.Fit(self.m_panel4)
    fgSizer1.Add(self.m_panel4, 1, wx.EXPAND | wx.ALL, 5)
    self.SetSizer(fgSizer1)
    self.Layout()
    self.Centre(wx.BOTH)
    self.bZoomIn.Bind(wx.EVT_BUTTON, self.onZoomIn)
    self.bReset.Bind(wx.EVT_BUTTON, self.onZoomReset)
    self.bZoomOut.Bind(wx.EVT_BUTTON, self.onZoomOut)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_120_145
21351282_21416770_5_27
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def __init__(self, parent = None, initPos = (0, 0), width = 50, height = 50, dicts = None) :
INDENT
    DragSprite.__init__(self, parent)
    self.type = DragSprite.SPRITE_BUTTON
    self.resourceCfgDict = dicts
    self.imageResource = {}
    self.status = 0
    self.index = 0
    self.parent = parent
    self.initPos = (initPos [0], initPos [1])
    self.width = width
    self.height = height
    self.rectOnLoad = pygame.Rect(initPos, (width, height))
    self.rect = self.rectOnLoad.copy()
    self.operationOn = None
    self.operationOff = None
    self.operationDic = {"on" : self.getOperationOnItem, "off" : self.getOperationOffItem}
    self.guiCfg = None
    for dic in dicts :
    INDENT
        self.loadImgResource(dic)
    DEDENT
    self.setCurrentResource("off")
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super(MyPanel, self).__init__(parent)
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.SetSizer(self.sizer)

    self.Canvas = FloatCanvas.FloatCanvas(self, BackgroundColor = "LIGHT GREY")
    self.Canvas.Bind(wx.EVT_SIZE, self.OnSize)
    self.sizer.Add(self.Canvas, - 1, flag = wx.EXPAND)

    image_dis = wx.Image('file_disabled.png')
    image_ena = wx.Image('file_enabled.png')
    img_dis = self.Canvas.AddScaledBitmap(image_dis, (x, - y), Height = image_dis.GetHeight(), Position = 'tl')
    img_ena = self.Canvas.AddScaledBitmap(image_ena, (x, - y), Height = image_ena.GetHeight(), Position = 'tl')
    img_dis.other = img_ena
    img_ena.other = img_dis
    img_ena.Visible = False

    img_dis.Bind(FloatCanvas.EVT_FC_LEFT_UP, self.OnToggle)
    img_ena.Bind(FloatCanvas.EVT_FC_LEFT_UP, self.OnToggle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_178_190
21351282_21404464_396_401
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def onZoomUpdate(self, zoomRatio) :
INDENT
    parentRect = pygame.Rect(self.parent.GetRect())
    dx = self.rectOnLoad.centerx - parentRect.centerx
    dy = self.rectOnLoad.centery - parentRect.centery
    self.rect.centerx = parentRect.centerx + dx * zoomRatio
    self.rect.centery = parentRect.centery + dy * zoomRatio
    self.rect.height = self.imageOnLoad.get_rect().height * zoomRatio
    self.rect.width = self.imageOnLoad.get_rect().width * zoomRatio
    self.image = pygame.transform.scale(self.imageOnLoad, (self.rect.width, self.rect.height))
DEDENT
----------------------------------------

def onZoomUpdate(self) :
INDENT
    self.zoomUpdateBackground(self.zoomRatio)
    for s in self.rootSpriteGroup.sprites() :
    INDENT
        s.onZoomUpdate(self.zoomRatio)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_211_221
21351282_21404464_96_103
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def move(self, pos) :
INDENT
    DragSprite.move(self, pos)
    parentRect = pygame.Rect(self.parent.GetRect())
    centerDx = self.rect.centerx - parentRect.centerx
    centerDy = self.rect.centery - parentRect.centery
    self.rectOnLoad.centerx = parentRect.centerx + centerDx / self.parent.zoomRatio
    self.rectOnLoad.centery = parentRect.centery + centerDy / self.parent.zoomRatio

DEDENT
----------------------------------------

def move(self, pos) :
INDENT
    dx = pos [0] - self.lastPos [0]
    dy = pos [1] - self.lastPos [1]
    self.lastPos = pos
    center = (self.rect.center [0] + dx, self.rect.center [1] + dy)
    self.rect.center = center
    return
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_223_251
21351282_21404464_403_443
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def __init__(self, parent, ID) :
INDENT
    wx.Window.__init__(self, parent, ID)
    self.parent = parent
    self.hwnd = self.GetHandle()
    self.size = self.GetSizeTuple()
    self.size_dirty = True
    self.rootSpriteGroup = pygame.sprite.LayeredUpdates()
    self.timer = wx.Timer(self)
    self.Bind(wx.EVT_PAINT, self.OnPaint)
    self.Bind(wx.EVT_TIMER, self.Update, self.timer)
    self.Bind(wx.EVT_SIZE, self.OnSize)
    self.fps = 60.0
    self.timespacing = 1000.0 / self.fps
    self.timer.Start(self.timespacing, False)
    self.previous_time = 0
    self.Bind(wx.EVT_MOUSE_EVENTS, self.OnMouse)
    self.selectedSprite = None
    self.zoomRatio = 1
    self.background = None
    self.bgRect = None
    self.backgroundOnUpdate = None
    self.bgRetOnUpdate = None
    self.loadBackground()
    self.addTestSprite()
DEDENT
----------------------------------------

def __init__(self, parent, fSize) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = fSize, style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    fgSizer1 = wx.FlexGridSizer(2, 1, 0, 0)
    fgSizer1.AddGrowableCol(0)
    fgSizer1.AddGrowableRow(0)
    fgSizer1.SetFlexibleDirection(wx.VERTICAL)
    fgSizer1.SetNonFlexibleGrowMode(wx.FLEX_GROWMODE_ALL)

    self.panelMain = MyHmiPanel(self, - 1)
    fgSizer1.Add(self.panelMain, 1, wx.EXPAND | wx.ALL, 5)
    self.m_panel4 = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
    bSizer3 = wx.BoxSizer(wx.HORIZONTAL)
    self.bZoomIn = wx.Button(self.m_panel4, wx.ID_ANY, u"Zoom In", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bZoomIn, 0, wx.ALL, 5)
    self.bReset = wx.Button(self.m_panel4, wx.ID_ANY, u"Reset", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bReset, 0, wx.ALL, 5)
    self.bZoomOut = wx.Button(self.m_panel4, wx.ID_ANY, u"Zoom Out", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bZoomOut, 0, wx.ALL, 5)
    self.m_panel4.SetSizer(bSizer3)
    self.m_panel4.Layout()
    bSizer3.Fit(self.m_panel4)
    fgSizer1.Add(self.m_panel4, 1, wx.EXPAND | wx.ALL, 5)
    self.SetSizer(fgSizer1)
    self.Layout()
    self.Centre(wx.BOTH)
    self.bZoomIn.Bind(wx.EVT_BUTTON, self.onZoomIn)
    self.bReset.Bind(wx.EVT_BUTTON, self.onZoomReset)
    self.bZoomOut.Bind(wx.EVT_BUTTON, self.onZoomOut)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_223_251
21351282_21416770_5_27
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def __init__(self, parent, ID) :
INDENT
    wx.Window.__init__(self, parent, ID)
    self.parent = parent
    self.hwnd = self.GetHandle()
    self.size = self.GetSizeTuple()
    self.size_dirty = True
    self.rootSpriteGroup = pygame.sprite.LayeredUpdates()
    self.timer = wx.Timer(self)
    self.Bind(wx.EVT_PAINT, self.OnPaint)
    self.Bind(wx.EVT_TIMER, self.Update, self.timer)
    self.Bind(wx.EVT_SIZE, self.OnSize)
    self.fps = 60.0
    self.timespacing = 1000.0 / self.fps
    self.timer.Start(self.timespacing, False)
    self.previous_time = 0
    self.Bind(wx.EVT_MOUSE_EVENTS, self.OnMouse)
    self.selectedSprite = None
    self.zoomRatio = 1
    self.background = None
    self.bgRect = None
    self.backgroundOnUpdate = None
    self.bgRetOnUpdate = None
    self.loadBackground()
    self.addTestSprite()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super(MyPanel, self).__init__(parent)
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.SetSizer(self.sizer)

    self.Canvas = FloatCanvas.FloatCanvas(self, BackgroundColor = "LIGHT GREY")
    self.Canvas.Bind(wx.EVT_SIZE, self.OnSize)
    self.sizer.Add(self.Canvas, - 1, flag = wx.EXPAND)

    image_dis = wx.Image('file_disabled.png')
    image_ena = wx.Image('file_enabled.png')
    img_dis = self.Canvas.AddScaledBitmap(image_dis, (x, - y), Height = image_dis.GetHeight(), Position = 'tl')
    img_ena = self.Canvas.AddScaledBitmap(image_ena, (x, - y), Height = image_ena.GetHeight(), Position = 'tl')
    img_dis.other = img_ena
    img_ena.other = img_dis
    img_ena.Visible = False

    img_dis.Bind(FloatCanvas.EVT_FC_LEFT_UP, self.OnToggle)
    img_ena.Bind(FloatCanvas.EVT_FC_LEFT_UP, self.OnToggle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21351282_21404464_403_443
21351282_21416770_5_27
Title: wxPython for image and buttons (resizable) 
----------------------------------------

def __init__(self, parent, fSize) :
INDENT
    wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = fSize, style = wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
    self.SetSizeHintsSz(wx.DefaultSize, wx.DefaultSize)
    fgSizer1 = wx.FlexGridSizer(2, 1, 0, 0)
    fgSizer1.AddGrowableCol(0)
    fgSizer1.AddGrowableRow(0)
    fgSizer1.SetFlexibleDirection(wx.VERTICAL)
    fgSizer1.SetNonFlexibleGrowMode(wx.FLEX_GROWMODE_ALL)

    self.panelMain = MyHmiPanel(self, - 1)
    fgSizer1.Add(self.panelMain, 1, wx.EXPAND | wx.ALL, 5)
    self.m_panel4 = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
    bSizer3 = wx.BoxSizer(wx.HORIZONTAL)
    self.bZoomIn = wx.Button(self.m_panel4, wx.ID_ANY, u"Zoom In", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bZoomIn, 0, wx.ALL, 5)
    self.bReset = wx.Button(self.m_panel4, wx.ID_ANY, u"Reset", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bReset, 0, wx.ALL, 5)
    self.bZoomOut = wx.Button(self.m_panel4, wx.ID_ANY, u"Zoom Out", wx.DefaultPosition, wx.DefaultSize, 0)
    bSizer3.Add(self.bZoomOut, 0, wx.ALL, 5)
    self.m_panel4.SetSizer(bSizer3)
    self.m_panel4.Layout()
    bSizer3.Fit(self.m_panel4)
    fgSizer1.Add(self.m_panel4, 1, wx.EXPAND | wx.ALL, 5)
    self.SetSizer(fgSizer1)
    self.Layout()
    self.Centre(wx.BOTH)
    self.bZoomIn.Bind(wx.EVT_BUTTON, self.onZoomIn)
    self.bReset.Bind(wx.EVT_BUTTON, self.onZoomReset)
    self.bZoomOut.Bind(wx.EVT_BUTTON, self.onZoomOut)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    super(MyPanel, self).__init__(parent)
    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.SetSizer(self.sizer)

    self.Canvas = FloatCanvas.FloatCanvas(self, BackgroundColor = "LIGHT GREY")
    self.Canvas.Bind(wx.EVT_SIZE, self.OnSize)
    self.sizer.Add(self.Canvas, - 1, flag = wx.EXPAND)

    image_dis = wx.Image('file_disabled.png')
    image_ena = wx.Image('file_enabled.png')
    img_dis = self.Canvas.AddScaledBitmap(image_dis, (x, - y), Height = image_dis.GetHeight(), Position = 'tl')
    img_ena = self.Canvas.AddScaledBitmap(image_ena, (x, - y), Height = image_ena.GetHeight(), Position = 'tl')
    img_dis.other = img_ena
    img_ena.other = img_dis
    img_ena.Visible = False

    img_dis.Bind(FloatCanvas.EVT_FC_LEFT_UP, self.OnToggle)
    img_ena.Bind(FloatCanvas.EVT_FC_LEFT_UP, self.OnToggle)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21369171_21369278_6_14
21369171_21369294_1_10
Title: Assigning boolean values to integer 
----------------------------------------

def flip(self, num) :
INDENT
    if 0 < = num < self.num_switches :
    INDENT

        self.states [num] = not self.states [num]
        return "Lightswitch %d is now %s!" % (
            num, "on" if self.states [num] else "off")
    DEDENT
    else :
    INDENT
        return "Lightswitch %d does not exist!" % num
    DEDENT
DEDENT
----------------------------------------

def flip(self, num) :
INDENT
    try :
    INDENT
        if self.switches [num] :
        INDENT
            print ("Turning switch off!")
            self.switches [num] = False
        DEDENT
        else :
        INDENT
            print ("Turning switch on!")
            self.switches [num] = True
        DEDENT
    DEDENT
    except KeyError :
    INDENT
        print ("Switch does not exist!")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21379163_21379935_25_31
21379163_21381172_6_14
Title: How to silence a function's output to console? 
----------------------------------------

def f2(boo = True) :
INDENT
    f1()
    if boo :
    INDENT
        print 'bar'
    DEDENT
    else :
    INDENT
        print 'black sheep'
    DEDENT
DEDENT
----------------------------------------

def f2(boo = True) :
INDENT
    f1()
    if boo :
    INDENT
        if (len(inspect.stack())) < = 2 :
        INDENT
            print 'bar'
        DEDENT
    DEDENT
    else :
    INDENT
        if (len(inspect.stack())) < = 2 :
        INDENT
            print 'black sheep'
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21400082_21400179_4_13
21400082_21400325_2_20
Title: python hex to decimal using for loop 
----------------------------------------

def hexToDec(hexi) :
INDENT
    result = 0;
    for ch in hexi :
    INDENT
        if 'A' < = ch < = 'F' :
        INDENT
            result = result * 16 + ord(ch) - ord('A') + 10
        DEDENT
        else :
        INDENT
            result = result * 16 + ord(ch) - ord('0')
        DEDENT
    DEDENT
    return result;
DEDENT
----------------------------------------

def hexToDec(hexi) :
INDENT
    result = 0
    for i in range(len(hexi)) :
    INDENT
        cur_pow = len(hexi) - i - 1
        if hexi [i] == 'A' :
        INDENT
            result = result + (10 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'B' :
        INDENT
            result = result + (11 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'C' :
        INDENT
            result = result + (12 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'D' :
        INDENT
            result = result + (13 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'E' :
        INDENT
            result = result + (14 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'F' :
        INDENT
            result = result + (15 * math.pow(16, cur_pow))
        DEDENT
        else :
        INDENT
            result = result + (int(hexi [i]) * math.pow(16, cur_pow))
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21400082_21400179_4_13
21400082_21400490_2_12
Title: python hex to decimal using for loop 
----------------------------------------

def hexToDec(hexi) :
INDENT
    result = 0;
    for ch in hexi :
    INDENT
        if 'A' < = ch < = 'F' :
        INDENT
            result = result * 16 + ord(ch) - ord('A') + 10
        DEDENT
        else :
        INDENT
            result = result * 16 + ord(ch) - ord('0')
        DEDENT
    DEDENT
    return result;
DEDENT
----------------------------------------

def hexToDec(hexi) :
INDENT
    result = 0
    convertDict = {"A" : 10, "B" : 11, "C" : 12, "D" : 13, "E" : 14, "F" : 15}
    for i in range(len(hexi)) :
    INDENT
        if str.isdigit(hexi [i]) :
        INDENT
            result += int(hexi [i]) * math.pow(16, len(hexi) - i - 1)
        DEDENT
        else :
        INDENT
            result += convertDict [hexi [i]] * math.pow(16, len(hexi) - i - 1)
        DEDENT
    DEDENT
    return int(result)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21400082_21400325_2_20
21400082_21400490_2_12
Title: python hex to decimal using for loop 
----------------------------------------

def hexToDec(hexi) :
INDENT
    result = 0
    for i in range(len(hexi)) :
    INDENT
        cur_pow = len(hexi) - i - 1
        if hexi [i] == 'A' :
        INDENT
            result = result + (10 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'B' :
        INDENT
            result = result + (11 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'C' :
        INDENT
            result = result + (12 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'D' :
        INDENT
            result = result + (13 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'E' :
        INDENT
            result = result + (14 * math.pow(16, cur_pow))
        DEDENT
        elif hexi [i] == 'F' :
        INDENT
            result = result + (15 * math.pow(16, cur_pow))
        DEDENT
        else :
        INDENT
            result = result + (int(hexi [i]) * math.pow(16, cur_pow))
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------

def hexToDec(hexi) :
INDENT
    result = 0
    convertDict = {"A" : 10, "B" : 11, "C" : 12, "D" : 13, "E" : 14, "F" : 15}
    for i in range(len(hexi)) :
    INDENT
        if str.isdigit(hexi [i]) :
        INDENT
            result += int(hexi [i]) * math.pow(16, len(hexi) - i - 1)
        DEDENT
        else :
        INDENT
            result += convertDict [hexi [i]] * math.pow(16, len(hexi) - i - 1)
        DEDENT
    DEDENT
    return int(result)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21403178_21403296_1_12
21403178_21403306_1_16
Title: Python - different variable with each function run 
----------------------------------------

def TwoPic() :
INDENT
    run = 0
    Lats = []
    Longs = []
    while run < 2 :
    INDENT
        run = run + 1
        getCoordinates()
        Lats.append(latitude)
        Longs.append(longitude)
    DEDENT
    root.quit()
DEDENT
----------------------------------------

def TwoPic() :
INDENT
    run = 0
    while run < 2 :
    INDENT
        run = run + 1
        FirstRunLat, FirstRunLong = getCoordinates()
        print FirstRunLat + " " + FirstRunLong
        SecRunLat, SecRunLong = getCoordinates()
        print SecRunLat + " " + SecRunLong
        ThirdRunLat, ThirdRunLong = getCoordinates()
        print ThirdRunLat + " " + ThirdRunLong
    DEDENT
    root.quit()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21419176_21433436_17_34
21419176_21433436_36_57
Title: Get PyQt4 to open another Qt window when a button is pressed 
----------------------------------------

def __init__(self, parent) :
INDENT
    self.fig = Figure()
    self.axes = self.fig.add_subplot(111)
    t = np.arange(0.0, 3.0, 0.01)
    s = np.cos(2 * np.pi * t)
    self.axes.plot(t, s)
    FigureCanvas.__init__(self, self.fig)
    self.setParent(parent)
    FigureCanvas.setSizePolicy(self,
        QtGui.QSizePolicy.Expanding,
        QtGui.QSizePolicy.Expanding)
    FigureCanvas.updateGeometry(self)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    QtGui.QMainWindow.__init__(self)
    self.setWindowTitle("Matplotlib Figure in a Qt4 Window With NavigationToolbar")
    self.main_widget = QtGui.QWidget(self)
    vbl = QtGui.QVBoxLayout(self.main_widget)
    qmc = Qt4MplCanvas(self.main_widget)
    ntb = NavigationToolbar(qmc, self.main_widget)
    vbl.addWidget(qmc)
    vbl.addWidget(ntb)
    self.main_widget.setFocus()
    self.setCentralWidget(self.main_widget)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21430880_21441023_14_22
21430880_21441023_77_104
Title: wxPython threading downloads 
----------------------------------------

def __init__(self, gnum, url, fsize) :
INDENT
    Thread.__init__(self)
    self.fsize = fsize
    self.gnum = gnum
    self.url = url
    self.start()

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    scrolled.ScrolledPanel.__init__(self, parent)
    self.data = []
    self.download_number = 1

    self.main_sizer = wx.BoxSizer(wx.VERTICAL)
    dl_sizer = wx.BoxSizer(wx.HORIZONTAL)

    lbl = wx.StaticText(self, label = "Download URL:")
    self.dl_txt = wx.TextCtrl(self)
    btn = wx.Button(self, label = "Download")
    btn.Bind(wx.EVT_BUTTON, self.onDownload)

    dl_sizer.Add(lbl, 0, wx.ALL | wx.CENTER, 5)
    dl_sizer.Add(self.dl_txt, 1, wx.EXPAND | wx.ALL, 5)
    dl_sizer.Add(btn, 0, wx.ALL, 5)
    self.main_sizer.Add(dl_sizer, 0, wx.EXPAND)
    self.SetSizer(self.main_sizer)
    self.SetAutoLayout(1)
    self.SetupScrolling()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21443914_21444006_2_14
21443914_21444196_1_10
Title: How do I write a function that returns true if there are duplicate words in a file 
----------------------------------------

def duplicate(fname) :
INDENT
    'returns true if there are duplicates in the file, false otherwise'
    with open(fname, 'r') as file_handle :
    INDENT
        word_dict = dict()
        for line in file_handle :
        INDENT
            words = line.split()
            for word in words :
            INDENT
                if word in word_dict :
                INDENT
                    word_dict [word] = 'Duplicate'
                DEDENT
                else :
                INDENT
                    word_dict [word] = 'Unique'
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return word_dict
DEDENT
----------------------------------------

def duplicate(fname) :
INDENT
    with open(fname, "r") as f :
    INDENT
        dict = {}
        for line in f :
        INDENT
            try :
            INDENT
                foo = dict [line]
                return True
            DEDENT
            except :
            INDENT
                dict [line] = 1
            DEDENT
        DEDENT
    DEDENT
    return False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21443914_21444006_2_14
21443914_21444448_1_16
Title: How do I write a function that returns true if there are duplicate words in a file 
----------------------------------------

def duplicate(fname) :
INDENT
    'returns true if there are duplicates in the file, false otherwise'
    with open(fname, 'r') as file_handle :
    INDENT
        word_dict = dict()
        for line in file_handle :
        INDENT
            words = line.split()
            for word in words :
            INDENT
                if word in word_dict :
                INDENT
                    word_dict [word] = 'Duplicate'
                DEDENT
                else :
                INDENT
                    word_dict [word] = 'Unique'
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    return word_dict
DEDENT
----------------------------------------

def duplicate(fname) :
INDENT
    with open(fname, 'r') as f :
    INDENT
        text = f.read()
    DEDENT
    split_text = [word.strip() for word in text.split()]
    duplicates = {}
    for word in split_text :
    INDENT
        count = text.count(word)
        if count > 1 :
        INDENT
            duplicates [word] = count
        DEDENT
    DEDENT
    if duplicates :
    INDENT
        print duplicates
        return True
    DEDENT
    return False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21443914_21444196_1_10
21443914_21444448_1_16
Title: How do I write a function that returns true if there are duplicate words in a file 
----------------------------------------

def duplicate(fname) :
INDENT
    with open(fname, "r") as f :
    INDENT
        dict = {}
        for line in f :
        INDENT
            try :
            INDENT
                foo = dict [line]
                return True
            DEDENT
            except :
            INDENT
                dict [line] = 1
            DEDENT
        DEDENT
    DEDENT
    return False
DEDENT
----------------------------------------

def duplicate(fname) :
INDENT
    with open(fname, 'r') as f :
    INDENT
        text = f.read()
    DEDENT
    split_text = [word.strip() for word in text.split()]
    duplicates = {}
    for word in split_text :
    INDENT
        count = text.count(word)
        if count > 1 :
        INDENT
            duplicates [word] = count
        DEDENT
    DEDENT
    if duplicates :
    INDENT
        print duplicates
        return True
    DEDENT
    return False
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21467762_21467953_1_9
21467762_25578764_3_11
Title: Return len of the longest word in a list 
----------------------------------------

def find_longest_word() :
INDENT
    list1 = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',]
    max1 = ''
    for x in range(0, len(list1)) :
    INDENT
        if (len(max1) < len(list1 [x])) :
        INDENT
            max1 = list1 [x]
        DEDENT
    DEDENT
    return max1

DEDENT
----------------------------------------

def find_longest_word(a) :
INDENT
    d = []
    for c in a :
    INDENT
        d.append(len(c))
        e = max(d)
    DEDENT
    for b in a :
    INDENT
        if len(b) == e :
        INDENT
            print "Length is %i for %s" % (len(b), b)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21493055_21496455_29_40
21493055_21496455_48_58
Title: Wxpython: Couldn't retrieve information about list control item XXX 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    self.list = MyListCtrl(self, 3)
    self.add_button = wx.Button(self, label = "add")
    h_sizer = wx.BoxSizer(wx.HORIZONTAL)
    h_sizer.Add(self.add_button, proportion = 1, flag = wx.ALL, border = 5)
    v_sizer = wx.BoxSizer(wx.VERTICAL)
    v_sizer.Add(h_sizer, proportion = 0, flag = wx.EXPAND)
    v_sizer.Add(self.list, proportion = 1, flag = wx.EXPAND, border = 5)
    self.SetSizer(v_sizer)
    self.add_button.Bind(wx.EVT_BUTTON, self.onAdd)
DEDENT
----------------------------------------

def __init__(self, parent, item) :
INDENT
    super(MyPopupMenu, self).__init__()
    self.parent = parent
    self.item = item
    menuEdit = wx.MenuItem(self, wx.NewId(), 'edit %s' % item.GetText())
    self.AppendItem(menuEdit)
    self.Bind(wx.EVT_MENU, self.onEdit, menuEdit)
    menuDel = wx.MenuItem(self, wx.NewId(), 'delete %s' % item.GetText())
    self.AppendItem(menuDel)
    self.Bind(wx.EVT_MENU, self.OnDelete, menuDel)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21493055_21496455_29_40
21493055_21496455_68_81
Title: Wxpython: Couldn't retrieve information about list control item XXX 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    self.list = MyListCtrl(self, 3)
    self.add_button = wx.Button(self, label = "add")
    h_sizer = wx.BoxSizer(wx.HORIZONTAL)
    h_sizer.Add(self.add_button, proportion = 1, flag = wx.ALL, border = 5)
    v_sizer = wx.BoxSizer(wx.VERTICAL)
    v_sizer.Add(h_sizer, proportion = 0, flag = wx.EXPAND)
    v_sizer.Add(self.list, proportion = 1, flag = wx.EXPAND, border = 5)
    self.SetSizer(v_sizer)
    self.add_button.Bind(wx.EVT_BUTTON, self.onAdd)
DEDENT
----------------------------------------

def __init__(self, parent, columns) :
INDENT
    wx.ListCtrl.__init__(self, parent, style = wx.LC_REPORT)
    self.parent = parent
    self.R_MOUSE = 0
    self.InsertColumn(0, "name")
    self.InsertColumn(1, "phone")
    self.InsertColumn(2, "address")
    self.SetColumnWidth(0, 200)
    self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelect)
    self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.onRightClick)
    self.itemDataMap = {}
    self.refresh_list()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21493055_21496455_48_58
21493055_21496455_68_81
Title: Wxpython: Couldn't retrieve information about list control item XXX 
----------------------------------------

def __init__(self, parent, item) :
INDENT
    super(MyPopupMenu, self).__init__()
    self.parent = parent
    self.item = item
    menuEdit = wx.MenuItem(self, wx.NewId(), 'edit %s' % item.GetText())
    self.AppendItem(menuEdit)
    self.Bind(wx.EVT_MENU, self.onEdit, menuEdit)
    menuDel = wx.MenuItem(self, wx.NewId(), 'delete %s' % item.GetText())
    self.AppendItem(menuDel)
    self.Bind(wx.EVT_MENU, self.OnDelete, menuDel)
DEDENT
----------------------------------------

def __init__(self, parent, columns) :
INDENT
    wx.ListCtrl.__init__(self, parent, style = wx.LC_REPORT)
    self.parent = parent
    self.R_MOUSE = 0
    self.InsertColumn(0, "name")
    self.InsertColumn(1, "phone")
    self.InsertColumn(2, "address")
    self.SetColumnWidth(0, 200)
    self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelect)
    self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.onRightClick)
    self.itemDataMap = {}
    self.refresh_list()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_459_466
21498541_21500549_479_489
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if keep_running : return
    if DEBUG_PHASE : print 'initiated phase 1 = waiting'
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 3 = send to all'
    target_save.extend(targets [:])
    associate_all_ip_with_all_mac_addresses()
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_459_466
21498541_21500549_491_500
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if keep_running : return
    if DEBUG_PHASE : print 'initiated phase 1 = waiting'
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 4 = broadcast'
    if add_broadcast_to_all_mac_addresses() :
    INDENT
        with targets_lock :
        INDENT
            targets.extend(target_save)
        DEDENT
        reset_state()
    DEDENT
    give_up()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_459_466
21498541_21500549_502_510
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if keep_running : return
    if DEBUG_PHASE : print 'initiated phase 1 = waiting'
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 5 = give up'
    for device_name in scanning.keys() :
    INDENT
        scanning.pop(device_name)
    DEDENT
    reset_state()
    phases.insert(0, phases.pop(- 1))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_468_477
21498541_21500549_491_500
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 2 = send packets'
    send_packets_to_addresses_to_sniff_mac()
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 4 = broadcast'
    if add_broadcast_to_all_mac_addresses() :
    INDENT
        with targets_lock :
        INDENT
            targets.extend(target_save)
        DEDENT
        reset_state()
    DEDENT
    give_up()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_468_477
21498541_21500549_502_510
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 2 = send packets'
    send_packets_to_addresses_to_sniff_mac()
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 5 = give up'
    for device_name in scanning.keys() :
    INDENT
        scanning.pop(device_name)
    DEDENT
    reset_state()
    phases.insert(0, phases.pop(- 1))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_479_489
21498541_21500549_491_500
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 3 = send to all'
    target_save.extend(targets [:])
    associate_all_ip_with_all_mac_addresses()
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 4 = broadcast'
    if add_broadcast_to_all_mac_addresses() :
    INDENT
        with targets_lock :
        INDENT
            targets.extend(target_save)
        DEDENT
        reset_state()
    DEDENT
    give_up()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_479_489
21498541_21500549_502_510
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 3 = send to all'
    target_save.extend(targets [:])
    associate_all_ip_with_all_mac_addresses()
    reset_state()
    phases.pop(0)
    if not targets :
    INDENT
        give_up()
    DEDENT
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 5 = give up'
    for device_name in scanning.keys() :
    INDENT
        scanning.pop(device_name)
    DEDENT
    reset_state()
    phases.insert(0, phases.pop(- 1))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_491_500
21498541_21500549_502_510
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 4 = broadcast'
    if add_broadcast_to_all_mac_addresses() :
    INDENT
        with targets_lock :
        INDENT
            targets.extend(target_save)
        DEDENT
        reset_state()
    DEDENT
    give_up()
DEDENT
----------------------------------------

def do_scanner_phase() :
INDENT
    if not state_has_not_changed_for(timeout) : return
    if DEBUG_PHASE : print 'initiated phase 5 = give up'
    for device_name in scanning.keys() :
    INDENT
        scanning.pop(device_name)
    DEDENT
    reset_state()
    phases.insert(0, phases.pop(- 1))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21498541_21500549_607_613
21498541_48294598_15_58
Title: Packet sniffer in python using pcapy impacket 
----------------------------------------

def main() :
INDENT
    host, ports, timeout = parseArgs(DEFAULT_SOCKET_TIMEOUT)
    scanner = start_scan(timeout)
    for connection in connections(host, ports) :
    INDENT
        scanner.add_scan(connection)
    DEDENT
    scanner.wait()
DEDENT
----------------------------------------

def main(argv) :
INDENT
    devices = pcapy.findalldevs()
    print devices
    errbuf = ""

    print "Available devices are :"
    for d in devices :
    INDENT
        print d
    DEDENT
    dev = raw_input("Enter device name to sniff : ")
    print "Sniffing device " + dev
    '''
    open device
    # Arguments here are:
    #   device
    #   snaplen (maximum number of bytes to capture _per_packet_)
    #   promiscious mode (1 for true)
    #   timeout (in milliseconds)
    '''
    socket.setdefaulttimeout(2)
    s = socket.socket();
    cap = pcapy.open_live(dev, 65536, 1, 1000)

    while (1) :
    INDENT
        (header, packet) = cap.next()
        parse_packet(packet)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21513156_21513198_1_12
21513156_21513292_1_13
Title: How to convert a number into a linked list of its digits in python 
----------------------------------------

def number_to_list(number) :
INDENT
    head = tail = None
    for x in str(number) :
    INDENT
        if not x.isdigit() :
        INDENT
            continue
        DEDENT
        node = Node(x)
        if head is not None :
        INDENT
            tail.next = node
        DEDENT
        else :
        INDENT
            head = node
            tail = node
        DEDENT
    DEDENT
    return head
DEDENT
----------------------------------------

def number_to_list(number) :
INDENT
    head, tail = None, None
    for x in str(number) :
    INDENT
        node = Node(int(x))
        if head :
        INDENT
            tail.next = node
        DEDENT
        else :
        INDENT
            head = node
            tail = node
        DEDENT
    DEDENT
    second = head.next
    third = second.next
    fourth = third.next
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
215132_215216_4_19
215132_215335_4_12
Title: wxpython - Expand list control vertically not horizontally 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None)
    self.test = wx.ListCtrl(self, style = wx.LC_REPORT | wx.LC_NO_HEADER)
    for i in range(5) :
    INDENT
        self.test.InsertColumn(i, 'Col %d' % (i + 1))
        self.test.SetColumnWidth(i, 200)

    DEDENT
    for i in range(0, 100, 5) :
    INDENT
        index = self.test.InsertStringItem(self.test.GetItemCount(), "")
        for j in range(5) :
        INDENT
            self.test.SetStringItem(index, j, str(i + j) * 30)
        DEDENT
    DEDENT
    self.Show()
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None)
    self.test = wx.ListCtrl(self, style = wx.LC_ICON | wx.LC_AUTOARRANGE)
    for i in range(100) :
    INDENT
        self.test.InsertStringItem(self.test.GetItemCount(), str(i))
    DEDENT
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21517346_21517470_3_7
21517346_21517776_4_10
Title: How to read/extract lines with more than 20 spaces ? - unix/python 
----------------------------------------

def readlinesmorethan20spaces(fin) :
INDENT
    for i in fin :
    INDENT
        if i.count(" ") > 20 :
        INDENT
            yield i.strip()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def readlinesmorethan20spaces(intxtfile) :
INDENT
    with codecs.open(intxtfile, 'r', 'utf8') as fin :
    INDENT
        for line in fin :
        INDENT
            counter = collections.Counter(line)
            if counter [" "] > 20 :
            INDENT
                yield line.strip()
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21525703_21532902_35_56
21525703_21532902_7_14
Title: Can't show window from thread 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(MyDialog, self).__init__(* args, ** kwargs)
    self.last_message = None
    self.setModal(True)
    self.message_label = QtGui.QLabel(u"Message")
    self.message_input = QtGui.QLineEdit()
    self.dialog_buttons = QtGui.QDialogButtonBox(QtGui.QDialogButtonBox.Ok | QtGui.QDialogButtonBox.Cancel)
    self.dialog_buttons.accepted.connect(self.accept)
    self.dialog_buttons.accepted.connect(self.on_accepted)
    self.dialog_buttons.rejected.connect(self.reject)
    self.hbox = QtGui.QHBoxLayout()
    self.hbox.addWidget(self.message_label)
    self.hbox.addWidget(self.message_input)
    self.vbox = QtGui.QVBoxLayout()
    self.vbox.addLayout(self.hbox)
    self.vbox.addWidget(self.dialog_buttons)
    self.setLayout(self.vbox)
    self.input_finished = QtCore.QWaitCondition()

DEDENT
----------------------------------------

def __init__(self, id, window) :
INDENT
    super(MyThread, self).__init__()
    self.id = id
    self.window = window
    self.load_message_input.connect(self.window.show_input)
    self.window.got_message.connect(self.print_message)
    self.started.connect(self.do_stuff)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21550018_21555467_25_43
21550018_21555467_48_71
Title: Arranging the panels automatically in wxPython 
----------------------------------------

def __init__(self, parent, number, color, sub_panels) :
INDENT
    wx.Panel.__init__(self, parent)
    self.SetBackgroundColour(color)
    label = "Panel-%s" % number
    lbl = wx.StaticText(self, label = label)
    v_sizer = wx.BoxSizer(wx.VERTICAL)
    for i in range(sub_panels) :
    INDENT
        p = SubPanel(self, i + 1)
        v_sizer.Add(p, 0, wx.ALL | wx.EXPAND | wx.CENTER, 10)
    DEDENT
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(v_sizer, 0, wx.ALL, 5)
    sizer.Add(lbl, 0, wx.ALL | wx.CENTER, 5)
    self.SetSizer(sizer)

DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    hsizer = wx.BoxSizer(wx.HORIZONTAL)
    v_sizer = wx.BoxSizer(wx.VERTICAL)
    colors = [("green", 3),
        ("yellow", 2),
        ("light blue", 2),
        ("purple", 2)]
    count = 1
    for color, subpanel in colors :
    INDENT
        panel = ColorPanel(self, count, color, subpanel)
        hsizer.Add(panel, 1, wx.EXPAND)
        count += 1
    DEDENT
    orange_panel = ColorPanel(self, count, "orange", 0)
    v_sizer.Add(hsizer, 1, wx.EXPAND)
    v_sizer.Add(orange_panel, 1, wx.EXPAND)
    self.SetSizer(v_sizer)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21550018_21555467_25_43
21550018_21555467_8_20
Title: Arranging the panels automatically in wxPython 
----------------------------------------

def __init__(self, parent, number, color, sub_panels) :
INDENT
    wx.Panel.__init__(self, parent)
    self.SetBackgroundColour(color)
    label = "Panel-%s" % number
    lbl = wx.StaticText(self, label = label)
    v_sizer = wx.BoxSizer(wx.VERTICAL)
    for i in range(sub_panels) :
    INDENT
        p = SubPanel(self, i + 1)
        v_sizer.Add(p, 0, wx.ALL | wx.EXPAND | wx.CENTER, 10)
    DEDENT
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(v_sizer, 0, wx.ALL, 5)
    sizer.Add(lbl, 0, wx.ALL | wx.CENTER, 5)
    self.SetSizer(sizer)

DEDENT
----------------------------------------

def __init__(self, parent, number) :
INDENT
    wx.Panel.__init__(self, parent)
    self.SetBackgroundColour("red")
    label = "Sub panel-%s" % number
    lbl = wx.StaticText(self, label = label)
    sizer = wx.BoxSizer()
    sizer.Add(lbl, 0, wx.ALL | wx.CENTER, 5)
    self.SetSizer(sizer)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21550018_21555467_48_71
21550018_21555467_8_20
Title: Arranging the panels automatically in wxPython 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent)
    hsizer = wx.BoxSizer(wx.HORIZONTAL)
    v_sizer = wx.BoxSizer(wx.VERTICAL)
    colors = [("green", 3),
        ("yellow", 2),
        ("light blue", 2),
        ("purple", 2)]
    count = 1
    for color, subpanel in colors :
    INDENT
        panel = ColorPanel(self, count, color, subpanel)
        hsizer.Add(panel, 1, wx.EXPAND)
        count += 1
    DEDENT
    orange_panel = ColorPanel(self, count, "orange", 0)
    v_sizer.Add(hsizer, 1, wx.EXPAND)
    v_sizer.Add(orange_panel, 1, wx.EXPAND)
    self.SetSizer(v_sizer)

DEDENT
----------------------------------------

def __init__(self, parent, number) :
INDENT
    wx.Panel.__init__(self, parent)
    self.SetBackgroundColour("red")
    label = "Sub panel-%s" % number
    lbl = wx.StaticText(self, label = label)
    sizer = wx.BoxSizer()
    sizer.Add(lbl, 0, wx.ALL | wx.CENTER, 5)
    self.SetSizer(sizer)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21557425_21558734_46_69
21557425_21558734_78_106
Title: Connect Qslider and MatplotlibWidget 
----------------------------------------

def __init__(self, parent = None, title = '', xlabel = '', ylabel = '',
xlim = None, ylim = None, xscale = 'linear', yscale = 'linear',
width = 4, height = 3, dpi = 100, hold = False) :
INDENT
    self.figure = Figure(figsize = (width, height), dpi = dpi)
    self.axes = self.figure.add_subplot(111)
    self.axes.set_title(title)
    self.axes.set_xlabel(xlabel)
    self.axes.set_ylabel(ylabel)
    if xscale is not None :
    INDENT
        self.axes.set_xscale(xscale)
    DEDENT
    if yscale is not None :
    INDENT
        self.axes.set_yscale(yscale)
    DEDENT
    if xlim is not None :
    INDENT
        self.axes.set_xlim(* xlim)
    DEDENT
    if ylim is not None :
    INDENT
        self.axes.set_ylim(* ylim)
    DEDENT
    self.axes.hold(hold)
    Canvas.__init__(self, self.figure)
    self.setParent(parent)
    Canvas.setSizePolicy(self, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
    Canvas.updateGeometry(self)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    QtGui.QMainWindow.__init__(self)
    self.mpl = MatplotlibWidget(self, title = 'Graph',
        xlabel = 'x',
        ylabel = 'y',
        hold = True)
    self.mpl.setGeometry(0, 0, 1300, 800)
    self.setGeometry(0, 30, 1680, 800)

    title1 = QtGui.QLabel(self)
    title1.setText('R')
    title1.move(1400, 10)
    self.value1 = QtGui.QLabel(self)
    self.value1.setText('1')
    self.value1.move(1550, 40)
    cb = QtGui.QSlider(QtCore.Qt.Horizontal, self)
    cb.setGeometry(1400, 40, 100, 30)
    cb.setMinimum(1)
    cb.setMaximum(10000)
    cb.valueChanged.connect(self.Rout)

    self.plot(1)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21560437_21560482_15_23
21560437_21560527_1_14
Title: variable not defined in python 
----------------------------------------

def main() :
INDENT
    print ('Welcome to registration.')
    while True :
    INDENT
        inp = raw_input('Are you an authorized user? ')
        if is_yes(inp) :
        INDENT
            return existing_user()
        DEDENT
        elif is_no(inp) :
        INDENT
            return sign_up()
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    print "\n Welcome to registration. Are you an authorized user?\n"
    while True :
    INDENT
        yes_no = raw_input("Yes or No?: ")
        if yes_no in ("Yes", "yes") :
        INDENT
            return oldUser()
        DEDENT
        elif yes_no in ("y", "Y") :
        INDENT
            print ("Please enter 'Yes'")
        DEDENT
        elif yes_no in ("n", "N") :
        INDENT
            print ("Please Enter 'No'")
        DEDENT
        else :
        INDENT
            print ("\n Unauthorized text!\n")
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21563298_21563809_5_11
21563298_21564864_5_11
Title: Creating a metaclass to unpack a struct into a namedtuple 
----------------------------------------

def __new__(meta, name, bases, attrs) :
INDENT
    nt = namedtuple(name, attrs.pop('fields'))
    struct = attrs.pop('struct')
    def factory(record) :
    INDENT
        return nt._make(unpack(struct, record))
    DEDENT
    return factory
DEDENT
----------------------------------------

def __new__(cls, clsname, bases, dct) :
INDENT
    nt = collections.namedtuple(clsname, dct ['fields'])
    def new(cls, record) :
    INDENT
        return super(cls, cls).__new__(cls, * struct.unpack(dct ['struct'], record))
    DEDENT
    dct.update(__new__ = new)
    return super(MetaStruct, cls).__new__(cls, clsname, (nt,), dct)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21565392_21584290_11_18
21565392_21584290_4_9
Title: Password Protected PyQt Window With Two User Type 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Login, self).__init__(parent)
    self.password = QLineEdit(self)
    self.buttonLogin = QPushButton('Login', self)
    self.buttonLogin.clicked.connect(self.usercontrol)
    layout = QVBoxLayout(self)
    layout.addWidget(self.password)
    layout.addWidget(self.buttonLogin)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Window, self).__init__(parent)
    if usercontrol [0] == "admin" :
    INDENT
        self.setWindowTitle('Welcome Admin')
    DEDENT
    if usercontrol [0] == "user" :
    INDENT
        self.setWindowTitle('Welcome User')
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21592753_21592992_1_22
21592753_21593293_3_22
Title: How to output parsed HTML into a file? 
----------------------------------------

def get_movie_info() :
INDENT
    returnedRows = []
    tbl = soup.find('table')
    rows = tbl.findAll('tr')
    for row in rows :
    INDENT
        cols = row.find_all('td')
        for col in cols :
        INDENT
            if col.has_attr('class') and col ['class'] [0] == 'image' :
            INDENT
                hrefs = col.find_all('a')
                for href in hrefs :
                INDENT
                    print href.get('title')
                    returnedRows.append(href.get('title'))
                DEDENT
            DEDENT
            elif col.has_attr('class') and col ['class'] [0] == 'title' :
            INDENT
                spans = col.find_all('span')
                for span in spans :
                INDENT
                    if span.has_attr('class') and span ['class'] [0] == 'wlb_wrapper' :
                    INDENT
                        print span.get('data-tconst')
                        returnedRows.append(span.get('data-tconst'))
                    DEDENT
                DEDENT
            DEDENT
            elif col.has_attr('class') and col ['class'] [0] == 'number' :
            INDENT
                print col.text
                returnedRows.append(col.text)
            DEDENT
        DEDENT
        return returnedRows
    DEDENT
DEDENT
----------------------------------------

def get_movie_info() :
INDENT
    tbl = soup.find('table')
    rows = tbl.findAll('tr')
    for row in rows :
    INDENT
        (imageTitle, dataTConst, number) = ('', '', '')
        cols = row.find_all('td')
        for col in cols :
        INDENT
            if col.has_attr('class') and col ['class'] [0] == 'image' :
            INDENT
                href = col.find('a')
                imageTitle = href.get('title')
            DEDENT
            elif col.has_attr('class') and col ['class'] [0] == 'title' :
            INDENT
                span = col.find('span')
                if span.has_attr('class') and span ['class'] [0] == 'wlb_wrapper' :
                INDENT
                    dataTConst = span.get('data-tconst')
                DEDENT
            DEDENT
            elif col.has_attr('class') and col ['class'] [0] == 'number' :
            INDENT
                number = col.text
            DEDENT
        DEDENT
        yield (imageTitle, dataTConst, number)

    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21597554_21597772_1_11
21597554_21597948_11_19
Title: Python Threading - Managing thread termination and the main thread 
----------------------------------------

def printCount() :
INDENT
    main = None
    for t in threading.enumerate() :
    INDENT
        if t.name == 'MainThread' :
        INDENT
            main = t
        DEDENT
    DEDENT
    print "Thread B started"
    x = 0
    while main and main.isAlive() :
    INDENT
        time.sleep(1)
        x = x + 1
        print x
    DEDENT
DEDENT
----------------------------------------

def printCount() :
INDENT
    print "Thread B started"
    x = 0
    while ALIVE :
    INDENT
        time.sleep(1)
        x = x + 1
        print x
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21597554_21597772_1_11
21597554_21598619_3_12
Title: Python Threading - Managing thread termination and the main thread 
----------------------------------------

def printCount() :
INDENT
    main = None
    for t in threading.enumerate() :
    INDENT
        if t.name == 'MainThread' :
        INDENT
            main = t
        DEDENT
    DEDENT
    print "Thread B started"
    x = 0
    while main and main.isAlive() :
    INDENT
        time.sleep(1)
        x = x + 1
        print x
    DEDENT
DEDENT
----------------------------------------

def printCount(lock, stop) :
INDENT
    with lock :
    INDENT
        print "Thread B started"
    DEDENT
    x = 0
    while not stop.is_set() :
    INDENT
        time.sleep(1)
        x = x + 1
        with lock :
        INDENT
            print x
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21597554_21597948_11_19
21597554_21598619_3_12
Title: Python Threading - Managing thread termination and the main thread 
----------------------------------------

def printCount() :
INDENT
    print "Thread B started"
    x = 0
    while ALIVE :
    INDENT
        time.sleep(1)
        x = x + 1
        print x
    DEDENT
DEDENT
----------------------------------------

def printCount(lock, stop) :
INDENT
    with lock :
    INDENT
        print "Thread B started"
    DEDENT
    x = 0
    while not stop.is_set() :
    INDENT
        time.sleep(1)
        x = x + 1
        with lock :
        INDENT
            print x
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
216141_216603_2_16
216141_217569_2_10
Title: Smart Sudoku Golf 
----------------------------------------

def R(A) :
INDENT
    z = {}
    for i in r :
    INDENT
        if A [i] ! = 0 : continue
        h = {}
        for j in r : h [A [j] if j / 9 == i / 9 or j % 9 == i % 9 or j / 27 == i / 27 and j % 9 / 3 == i % 9 / 3 else 0] = 1
        z [9 - len(h)] = h, i
    DEDENT
    for l, (h, i) in sorted(z.items(), cmp, lambda x : x [0]) :
    INDENT
        for j in s :
        INDENT
            if j not in h :
            INDENT
                A [i] = j
                if R(A) : return A
            DEDENT
        DEDENT
        A [i] = 0; return []
    DEDENT
    return A
DEDENT
----------------------------------------

def R(A) :
INDENT
    if (0 in A) - 1 : yield A; return
    def H(i) : h = set(A [j] for j in r if j / 9 == i / 9 or j % 9 == i % 9 or j / 27 == i / 27 and j % 9 / 3 == i % 9 / 3); return len(h), h, i
    l, h, i = max(H(i) for i in r if not A [i])
    for j in r [1 : 10] :
    INDENT
        if (j in h) - 1 :
        INDENT
            A [i] = j
            for S in R(A) : yield S
        DEDENT
        A [i] = 0
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
216141_217114_2_13
216141_217569_2_10
Title: Smart Sudoku Golf 
----------------------------------------

def R(A) :
INDENT
    z = {}
    for i in r :
    INDENT
        if 0 == A [i] : h = dict((A [j] * (j / 9 == i / 9 or j % 9 == i % 9 or j / 27 == i / 27 and j % 9 / 3 == i % 9 / 3), 1) for j in r); z [9 - len(h)] = h, i
    DEDENT
    for l in sorted(z) :
    INDENT
        h, i = z [l]
        for j in r [1 : 10] :
        INDENT
            if (j in h) - 1 :
            INDENT
                A [i] = j
                if R(A) : return A
            DEDENT
        DEDENT
        A [i] = 0; return []
    DEDENT
    return A
DEDENT
----------------------------------------

def R(A) :
INDENT
    if (0 in A) - 1 : yield A; return
    def H(i) : h = set(A [j] for j in r if j / 9 == i / 9 or j % 9 == i % 9 or j / 27 == i / 27 and j % 9 / 3 == i % 9 / 3); return len(h), h, i
    l, h, i = max(H(i) for i in r if not A [i])
    for j in r [1 : 10] :
    INDENT
        if (j in h) - 1 :
        INDENT
            A [i] = j
            for S in R(A) : yield S
        DEDENT
        A [i] = 0
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21634572_21637608_19_30
21634572_21637608_4_12
Title: Relaying signals to contained widgets 
----------------------------------------

def __init__(self) :
INDENT
    super(Window, self).__init__()
    layout = QtGui.QVBoxLayout(self)
    self.chk = QtGui.QCheckBox('Alpha', self)
    self.btn = QtGui.QPushButton('Push', self)
    self.tri = CheckBoxSet('One Two Three'.split(), self)
    layout.addWidget(self.chk)
    layout.addWidget(self.btn)
    layout.addWidget(self.tri)
    self.chk.stateChanged.connect(self.tri.setCheckState)
    self.btn.clicked.connect(self.clearChecks)
DEDENT
----------------------------------------

def __init__(self, labels, parent = None) :
INDENT
    super(CheckBoxSet, self).__init__(parent)
    layout = QtGui.QVBoxLayout(self)
    self.checkboxes = []
    for label in labels :
    INDENT
        checkbox = QtGui.QCheckBox(label, self)
        layout.addWidget(checkbox)
        self.checkboxes.append(checkbox)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21654008_21654298_33_41
21654008_21688791_37_56
Title: Matplotlib drag overlapping points interactively 
----------------------------------------

def on_motion(self, event) :
INDENT
    if not self.currently_dragging :
    INDENT
        return
    DEDENT
    if self.current_artist is None :
    INDENT
        return
    DEDENT
    dx, dy = self.offset
    self.current_artist.center = event.xdata + dx, event.ydata + dy
    self.current_artist.figure.canvas.draw()
DEDENT
----------------------------------------

def on_motion(self, event) :
INDENT
    if DraggablePoint.lock is not self :
    INDENT
        return
    DEDENT
    if event.inaxes ! = self.point.axes : return
    self.point.center, xpress, ypress = self.press
    dx = event.xdata - xpress
    dy = event.ydata - ypress
    self.point.center = (self.point.center [0] + dx, self.point.center [1] + dy)
    canvas = self.point.figure.canvas
    axes = self.point.axes
    canvas.restore_region(self.background)

    axes.draw_artist(self.point)

    canvas.blit(axes.bbox)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21698703_21699511_68_75
21698703_21699589_9_20
Title: Checking a text segment within brackets with python 
----------------------------------------

def main() :
INDENT
    with open("...", "r") as fh :
    INDENT
        data = fh.read()
        lexer = ParseSegment()
        segments = lexer.parse(data)
        print (segments)
    DEDENT
    return 0
DEDENT
----------------------------------------

def main(search_str) :
INDENT
    f = open('file.txt', 'r')
    lines = f.readlines()
    f.close()
    for line in lines :
    INDENT
        if search_str in line :
        INDENT
            index = lines.index(line)
            break
        DEDENT
    DEDENT
    lines = lines [index + 1 :]
    print SearchStuff(lines, search_str)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2173146_27369913_10_21
2173146_27369913_29_36
Title: How can I draw nodes and edges in PyQT? 
----------------------------------------

def __init__(self, path, index) :
INDENT
    super(Node, self).__init__(- rad, - rad, 2 * rad, 2 * rad)
    self.rad = rad
    self.path = path
    self.index = index
    self.setZValue(1)
    self.setFlag(QGraphicsItem.ItemIsMovable)
    self.setFlag(QGraphicsItem.ItemSendsGeometryChanges)
    self.setBrush(Qt.green)
DEDENT
----------------------------------------

def __init__(self, path, scene) :
INDENT
    super(Path, self).__init__(path)
    for i in xrange(path.elementCount()) :
    INDENT
        node = Node(self, i)
        node.setPos(QPointF(path.elementAt(i)))
        scene.addItem(node)
    DEDENT
    self.setPen(QPen(Qt.red, 1.75))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21755625_21756967_1_11
21755625_21781160_1_17
Title: Find image sequences in a directory - Quicker than os.walk()? 
----------------------------------------

def find_all_ImageSequences(dir) :
INDENT
    seen = set()
    for object in os.listdir(dir) :
    INDENT
        if os.path.isdir(dir + "\\" + str(object)) :
        INDENT
            find_all_ImageSequences(dir + "\\" + str(object))
        DEDENT
        else :
        INDENT
            if object.endswith(('.dpx', '.jpg', '.jpeg', '.exr', '.tif')) :
            INDENT
                image_filename = object.split(".", 1) [0]
                if image_filename not in seen :
                INDENT
                    Image_Sequences_List.append(dir + "\\" + str(object))
                    seen.add(image_filename)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def find_all_ImageSequences(dir) :
INDENT
    child_directories = [x for x in os.listdir(dir) if len(x.split(".")) == 1]
    if len(child_directories) > = 1 :
    INDENT
        for directory in child_directories :
        INDENT
            if os.path.isdir(dir + "\\" + directory) :
            INDENT
                find_all_ImageSequences(dir + "\\" + directory)
            DEDENT
        DEDENT
    DEDENT
    for object in os.listdir(dir) :
    INDENT
        if object.endswith(('.dpx', '.jpg', '.jpeg', '.exr', '.tif')) :
        INDENT
            image_filename = object.split(".") [0]
            Image_Sequences_List.append(dir + "\\" + str(object))
            if any([x for x in os.listdir(dir) if x.split(".") [0] ! = image_filename and len(x.split(".")) > 1]) :
            INDENT
                extras = set([x.split(".") [0] for x in os.listdir(dir) if x.split(".") [0] ! = image_filename])
                for i in extras :
                INDENT
                    Image_Sequences_List.append(i)
                DEDENT
            DEDENT
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21780529_21781001_31_37
21780529_21781001_40_45
Title: Descriptor class design in Python (with inheritance) 
----------------------------------------

def ans(self) :
INDENT
    result = 0
    for gate in self.inputs :
    INDENT
        result += gate.ans
    DEDENT
    return result

DEDENT
----------------------------------------

def ans(self) :
INDENT
    result = 1
    for gate in self.inputs :
    INDENT
        result *= gate.ans
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21803731_21803775_1_16
21803731_21804069_1_11
Title: Replace a substring in a string with python 
----------------------------------------

def rep_str(s, x, y) :
INDENT
    result = ""
    skip = False
    if x in s :
    INDENT
        for i in range(len(s)) :
        INDENT
            if skip :
            INDENT
                skip = False
                continue
            DEDENT
            if s [i : i + 2] == x :
            INDENT
                result += y
                skip = True
            DEDENT
            else :
            INDENT
                result += s [i : i + 1]
            DEDENT
        DEDENT
        return result
    DEDENT
    else :
    INDENT
        return s
    DEDENT
DEDENT
----------------------------------------

def rep_str(string, search, replacement) :
INDENT
    result = ''
    i = 0
    while i < len(string) :
    INDENT
        if string [i : i + len(search)] == search :
        INDENT
            result += replacement
            i += len(search)
        DEDENT
        else :
        INDENT
            result += string [i]
            i += 1
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21803731_21803775_1_16
21803731_21804999_9_15
Title: Replace a substring in a string with python 
----------------------------------------

def rep_str(s, x, y) :
INDENT
    result = ""
    skip = False
    if x in s :
    INDENT
        for i in range(len(s)) :
        INDENT
            if skip :
            INDENT
                skip = False
                continue
            DEDENT
            if s [i : i + 2] == x :
            INDENT
                result += y
                skip = True
            DEDENT
            else :
            INDENT
                result += s [i : i + 1]
            DEDENT
        DEDENT
        return result
    DEDENT
    else :
    INDENT
        return s
    DEDENT
DEDENT
----------------------------------------

def rep_str(s, x, y) :
INDENT
    while x in s :
    INDENT
        s = s [: s.index(x)] + y + s [s.index(x) + len(x) :]
    DEDENT
    return s

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21803731_21804069_1_11
21803731_21804999_9_15
Title: Replace a substring in a string with python 
----------------------------------------

def rep_str(string, search, replacement) :
INDENT
    result = ''
    i = 0
    while i < len(string) :
    INDENT
        if string [i : i + len(search)] == search :
        INDENT
            result += replacement
            i += len(search)
        DEDENT
        else :
        INDENT
            result += string [i]
            i += 1
        DEDENT
    DEDENT
    return result
DEDENT
----------------------------------------

def rep_str(s, x, y) :
INDENT
    while x in s :
    INDENT
        s = s [: s.index(x)] + y + s [s.index(x) + len(x) :]
    DEDENT
    return s

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
21804592_21807844_7_25
21804592_21809246_108_120
Title: wxpython print to tabbed panel 
----------------------------------------

def __init__(self, parent, id, title) :
INDENT
    wx.Frame.__init__(self, parent, id, title, size = (800, 700))
    self.tabbed = wx.Notebook(self, - 1, style = (wx.NB_TOP))
    self.panel1 = wx.Panel(self.tabbed, - 1)
    self.panel2 = wx.Panel(self.tabbed, - 1)
    self.panel3 = wx.Panel(self.tabbed, - 1)
    self.tabbed.AddPage(self.panel1, "Submit Job")
    self.tabbed.AddPage(self.panel2, "Queue")
    self.tabbed.AddPage(self.panel3, "Running Jobs")
    self.CreateStatusBar()
    menuBar = wx.MenuBar()
    menu = wx.Menu()
    self.SetMenuBar(menuBar)
    self.Centre()
    self.submit(self)
    self.queue(self)
    self.running(self)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent, - 1)
    self.parent = parent
    self.buttonClose3 = wx.Button(self, - 1, "Quit", pos = (195, 170))
    self.buttonClose3.Bind(wx.EVT_BUTTON, self.OnClose)
    self.running_log = wx.TextCtrl(self, - 1, pos = (35, 210), size = (720, 400),
        style = wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
    self.Show()

DEDENT
----------------------------------------

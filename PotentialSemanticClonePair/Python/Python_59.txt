$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53359527_53361107_1_12
53359527_53361239_30_54
Title: Add multiple Entries and retrieve data from them dynamically 
----------------------------------------

def onShowButtonClick(self) :
INDENT
    self.values_length = len(self.values)
    for i in range(1, self.values_length) :
    INDENT

        entry_full_name.bind('<Return>', self.change)
        entry_email.bind('<Return>', self.change)
        entry_phone.bind('<Return>', self.change)
        entry_street_address.bind('<Return>', self.change)
        entry_job_title.bind('<Return>', self.change)
    DEDENT
DEDENT
----------------------------------------

def onShowButtonClick(self) :
INDENT
    self.values_length = len(self.values)
    for i in range(1, self.values_length) :
    INDENT
        entry_full_name = ttk.Entry(self.label_frame)
        entry_full_name.grid(row = i, column = 0)
        entry_full_name.insert(0, self.values [i] [0])
        entry_email = ttk.Entry(self.label_frame)
        entry_email.grid(row = i, column = 1)
        entry_email.insert(0, self.values [i] [1])
        entry_phone = ttk.Entry(self.label_frame)
        entry_phone.grid(row = i, column = 2)
        entry_phone.insert(0, self.values [i] [2])
        entry_street_address = ttk.Entry(self.label_frame)
        entry_street_address.grid(row = i, column = 3)
        entry_street_address.insert(0, self.values [i] [3])
        entry_job_title = ttk.Entry(self.label_frame)
        entry_job_title.grid(row = i, column = 4)
        entry_job_title.insert(0, self.values [i] [4])
        self.entryList.append([entry_full_name, entry_email, entry_phone, entry_street_address, entry_job_title])
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53360149_53360189_1_14
53360149_53360216_3_11
Title: reading a text file and counting how many times a word is repeated. Using .split function. Now wants it to ignore case sensitive 
----------------------------------------

def word_count() :
INDENT
    file = "test.txt"
    word = input("Enter word to be searched:")
    k = 0
    with open(file, 'r') as f :
    INDENT
        for line in f :
        INDENT
            words = line.split()
            for i in words :
            INDENT
                if i.lower() == word.lower() :
                INDENT
                    k = k + 1
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    print (word + ": " + str(k))
DEDENT
----------------------------------------

def word_count() :
INDENT
    file = "test.txt"
    with open(file, 'r') as f :
    INDENT
        words = f.read().replace('\n', '').lower().split()
        count = Counter(words)
    DEDENT
    word = input("Enter word to be searched:")
    print (word, ":", count.get(word.lower()))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53364153_53364234_1_10
53364153_53364551_1_9
Title: Invert dictionary with lists in different lengths in python 3.X 
----------------------------------------

def inverter(a) :
INDENT
    b = {}
    for k, v in a.items() :
    INDENT
        if isinstance(v, list) :
        INDENT
            for i in v :
            INDENT
                b.setdefault(i, []).append(k)
            DEDENT
        DEDENT
        else :
        INDENT
            b.setdefault(v, []).append(k)
        DEDENT
    DEDENT
    return b
DEDENT
----------------------------------------

def inverter(a) :
INDENT
    b = []
    for k, v in a.items() :
    INDENT
        if isinstance(v, list) :
        INDENT
            b.extend([[x, k] for x in v])
        DEDENT
        else :
        INDENT
            b.append([v, k])
        DEDENT
    DEDENT
    return dict(b)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53382353_53402252_5_24
53382353_53402526_1_25
Title: LSTM input shape for multivariate time series? 
----------------------------------------

def lstm_baseline(x_train, y_train, batch_size) :
INDENT
    model = Sequential()
    model.add(LSTM(batch_size, input_shape = (None, 13),
            activation = 'relu', return_sequences = True))
    model.add(Dropout(0.2))
    model.add(LSTM(128, activation = 'relu'))
    model.add(Dropout(0.1))
    model.add(Dense(32, activation = 'relu'))
    model.add(Dropout(0.2))
    model.add(Dense(1, activation = 'softmax'))
    model.compile(
        loss = 'binary_crossentropy',
        optimizer = 'adam',
        metrics = ['accuracy'])
    return model
DEDENT
----------------------------------------

def lstm_baseline(x_train, y_train) :
INDENT
    batch_size = 200
    model = Sequential()
    model.add(LSTM(batch_size, input_dim = 1,
            activation = 'relu', return_sequences = True))
    model.add(Dropout(0.2))
    model.add(LSTM(128, activation = 'relu'))
    model.add(Dropout(0.1))
    model.add(Dense(32, activation = 'relu'))
    model.add(Dropout(0.2))

    model.add(Dense(2, activation = 'softmax'))
    model.compile(
        loss = 'categorical_crossentropy',
        optimizer = 'rmsprop',
        metrics = ['accuracy'])
    model.fit(x_train, y_train, epochs = 15)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53385254_53385718_2_12
53385254_53386222_10_23
Title: Draw a box at an angle 
----------------------------------------

def drawRect(x, y, w, h, angle) :
INDENT
    x_vec = (cos(angle), sin(angle))
    y_vec = (cos(angle + pi / 2.0), sin(angle + pi / 2.0))
    a = (x - x_vec [0] * w / 2 - y_vec [0] * h / 2, y - x_vec [1] * w / 2 - y_vec [1] * h / 2)
    b = (x + x_vec [0] * w / 2 + y_vec [0] * h / 2, y - x_vec [1] * w / 2 - y_vec [1] * h / 2)
    c = (x + x_vec [0] * w / 2 + y_vec [0] * h / 2, y + x_vec [1] * w / 2 + y_vec [1] * h / 2)
    d = (x - x_vec [0] * w / 2 - y_vec [0] * h / 2, y + x_vec [1] * w / 2 + y_vec [1] * h / 2)
    line(a, b)
    line(b, c)
    line(c, d)
    line(d, a)
DEDENT
----------------------------------------

def drawRect(x, y, w, h, degrees) :
INDENT
    rot = rotate(degrees)
    x1, y1 = rot.pt(- w / 2, - h / 2)
    a = x + x1, y + y1
    x2, y2 = rot.pt(w / 2, - h / 2)
    b = x + x2, y + y2
    x3, y3 = rot.pt(w / 2, h / 2)
    c = x + x3, y + y3
    x4, y4 = rot.pt(- w / 2, h / 2)
    d = x + x4, y + y4
    line(a, b)
    line(b, c)
    line(c, d)
    line(d, a)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53385254_53385718_2_12
53385254_53388170_1_18
Title: Draw a box at an angle 
----------------------------------------

def drawRect(x, y, w, h, angle) :
INDENT
    x_vec = (cos(angle), sin(angle))
    y_vec = (cos(angle + pi / 2.0), sin(angle + pi / 2.0))
    a = (x - x_vec [0] * w / 2 - y_vec [0] * h / 2, y - x_vec [1] * w / 2 - y_vec [1] * h / 2)
    b = (x + x_vec [0] * w / 2 + y_vec [0] * h / 2, y - x_vec [1] * w / 2 - y_vec [1] * h / 2)
    c = (x + x_vec [0] * w / 2 + y_vec [0] * h / 2, y + x_vec [1] * w / 2 + y_vec [1] * h / 2)
    d = (x - x_vec [0] * w / 2 - y_vec [0] * h / 2, y + x_vec [1] * w / 2 + y_vec [1] * h / 2)
    line(a, b)
    line(b, c)
    line(c, d)
    line(d, a)
DEDENT
----------------------------------------

def drawRect(x, y, w, h, angle) :
INDENT
    a = np.array((- w / 2, - h / 2))
    b = np.array((w / 2, - h / 2))
    c = np.array((w / 2, h / 2))
    d = np.array((- w / 2, h / 2))
    if angle ! = 0 :
    INDENT
        a = np.matmul(rot(angle), a)
        b = np.matmul(rot(angle), b)
        c = np.matmul(rot(angle), c)
        d = np.matmul(rot(angle), d)
    DEDENT
    a += [x, y]
    b += [x, y]
    c += [x, y]
    d += [x, y]
    line(a, b)
    line(b, c)
    line(c, d)
    line(d, a)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53385254_53386222_10_23
53385254_53388170_1_18
Title: Draw a box at an angle 
----------------------------------------

def drawRect(x, y, w, h, degrees) :
INDENT
    rot = rotate(degrees)
    x1, y1 = rot.pt(- w / 2, - h / 2)
    a = x + x1, y + y1
    x2, y2 = rot.pt(w / 2, - h / 2)
    b = x + x2, y + y2
    x3, y3 = rot.pt(w / 2, h / 2)
    c = x + x3, y + y3
    x4, y4 = rot.pt(- w / 2, h / 2)
    d = x + x4, y + y4
    line(a, b)
    line(b, c)
    line(c, d)
    line(d, a)
DEDENT
----------------------------------------

def drawRect(x, y, w, h, angle) :
INDENT
    a = np.array((- w / 2, - h / 2))
    b = np.array((w / 2, - h / 2))
    c = np.array((w / 2, h / 2))
    d = np.array((- w / 2, h / 2))
    if angle ! = 0 :
    INDENT
        a = np.matmul(rot(angle), a)
        b = np.matmul(rot(angle), b)
        c = np.matmul(rot(angle), c)
        d = np.matmul(rot(angle), d)
    DEDENT
    a += [x, y]
    b += [x, y]
    c += [x, y]
    d += [x, y]
    line(a, b)
    line(b, c)
    line(c, d)
    line(d, a)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53386394_53387659_18_33
53386394_53387659_39_46
Title: python- Kivy Screen Manager within .py file 
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(WelcomeScreen, self).__init__(** kwargs)
    welcomePage = FloatLayout()
    box = BoxLayout(orientation = 'vertical', size_hint = (0.4, 0.3),
        padding = 8, pos_hint = {'top' : 0.5, 'center_x' : 0.5})
    welcomeLabel = Label(text = 'Hello and welcome to the Panel Builder version 1.0.\nApp by John Vorsten\nClick below to continue',
        halign = 'center', valign = 'center', size_hint = (0.4, 0.2), pos_hint = {'top' : 1, 'center_x' : 0.5})
    welcomeBox = Button(text = 'Click to continue', on_press = self.callback)
    welcomeBox2 = Button(text = 'not used')
    welcomePage.add_widget(welcomeLabel)
    box.add_widget(welcomeBox)
    box.add_widget(welcomeBox2)
    welcomePage.add_widget(box)
    self.add_widget(welcomePage)
DEDENT
----------------------------------------

def __init__(self, ** kwargs) :
INDENT
    super(FunctionScreen, self).__init__(** kwargs)
    functionPage = FloatLayout()
    functionLabel = Label(text = 'Welcome to the function page. Here you will choose what functions to use',
        halign = 'center', valign = 'center', size_hint = (0.4, 0.2), pos_hint = {'top' : 1, 'center_x' : 0.5})
    functionPage.add_widget(functionLabel)
    self.add_widget(functionPage)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53389948_53390044_1_12
53389948_53390377_3_19
Title: "Return in python reading values from .txt file" 
----------------------------------------

def getUserPoint(userName) :
INDENT
    try :
    INDENT
        with open("userScores.txt", "r") as file :
        INDENT
            for item in file :
            INDENT
                print (item)
                content = item.split(',')
                if content [0] == userName :
                INDENT
                    return content [1]
                DEDENT
            DEDENT
            return "-1"
        DEDENT
    DEDENT
    except IOError :
    INDENT
        print ("File not found")
        return "-1"
    DEDENT
DEDENT
----------------------------------------

def getUserPoint(userName) :
INDENT
    f = open('userScores.txt')
    file = f.readlines()
    for item in file :
    INDENT

        content = item.split(',')
        if content [0] == userName :
        INDENT
            f.close()
            return content [1]
        DEDENT
        else :
        INDENT
            continue
        DEDENT
    DEDENT
    f.close()
    print ('UserNotfound')
    return '-1'
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53415379_53417349_25_42
53415379_53417349_5_23
Title: Align icon on the right and center the text in a QPushButton 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MyWindow, self).__init__(parent)
    icon = QtWidgets.QApplication.style().standardIcon(QtWidgets.QStyle.SP_ArrowRight)

    bout_pag_charg_enr_phase_1 = PushButton("Aller directement à la page de maintenance de la Séquence",
        icon = icon, iconSize = QtCore.QSize(16, 16))
    bout_pag_charg_enr_phase_1.setFixedWidth(506)
    bout_pag_suivante_phase_1 = PushButton("Page suivante",
        icon = icon, iconSize = QtCore.QSize(16, 16))
    bout_pag_suivante_phase_1.setFixedWidth(140)
    lay = QtWidgets.QHBoxLayout(self)
    lay.addWidget(bout_pag_charg_enr_phase_1)
    lay.addWidget(bout_pag_suivante_phase_1)
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    super(PushButton, self).__init__(* args, ** kwargs)
    self.setStyleSheet('''background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #fdfbf7, stop: 1 #6190F2);
            border-style: solid;border-width: 2px;
            border-radius: 8px;
            border-color: #9BB7F0;padding: 3px;''')
    icon = self.icon()
    icon_size = self.iconSize()
    self.setIcon(QtGui.QIcon())
    label_icon = QtWidgets.QLabel()
    label_icon.setAttribute(QtCore.Qt.WA_TranslucentBackground)
    label_icon.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents)
    lay = QtWidgets.QHBoxLayout(self)
    lay.setContentsMargins(0, 0, 0, 0)
    lay.addWidget(label_icon, alignment = QtCore.Qt.AlignRight)
    label_icon.setPixmap(icon.pixmap(icon_size))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53415591_53415732_10_23
53415591_53415794_1_9
Title: I can't make return do the same as print (Python) 
----------------------------------------

def encontra_palavras(sopa) :
INDENT
    tuplo_palavra = obtem_palavras(sopa)
    tuplo_linha = obtem_grelha(sopa)
    final_lst = []
    for item in tuplo_palavra :
    INDENT
        for item1 in tuplo_linha :
        INDENT
            if item in item1 :
            INDENT
                lst = []
                lst.append(item)
                lst.append(tuplo_linha.index(item1))
                lst.append(item1.index(item))
                final_lst.append(tuple(lst))
            DEDENT
        DEDENT
    DEDENT
    return tuple(final_lst)
DEDENT
----------------------------------------

def encontra_palavras(sopa) :
INDENT
    result = ()
    tuplo_palavra = obtem_palavras(sopa)
    tuplo_linha = obtem_grelha(sopa)
    for item in tuplo_palavra :
    INDENT
        for item1 in tuplo_linha :
        INDENT
            if item in item1 :
            INDENT
                yield item, tuplo_linha.index(item1), item1.index(item)
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53427062_53436497_3_23
53427062_53437510_11_34
Title: odoo 11 / Python 3: How to find expiry date of subscription if some weekdays are excluded 
----------------------------------------

def get_expiry_date(start, end, day_selection) :
INDENT
    dayformat = '%Y-%m-%d'
    weekdays = {}
    start = datetime.strptime(str(start), dayformat).date()
    end = datetime.strptime(str(end), dayformat).date()
    for i in range((end - start).days + 1) :
    INDENT
        weekday = (start + timedelta(i)).strftime('%a')
        weekdays [weekday] = 1 + weekdays.setdefault(weekday, 0)
    DEDENT
    sub_days_to_add = 0
    for selected in day_selection :
    INDENT
        sub_days_to_add += weekdays.setdefault(selected, 0)
    DEDENT
    cal_days_extension = 0
    while sub_days_to_add > 0 :
    INDENT
        if (end + timedelta(days = cal_days_extension + 1)).strftime('%a') not in day_selection :
        INDENT
            sub_days_to_add -= 1
        DEDENT
        cal_days_extension += 1
    DEDENT
    return end + timedelta(days = cal_days_extension)
DEDENT
----------------------------------------

def get_expiry_date(start_date, number_of_days, excluded_days = None) :
INDENT
    if excluded_days is None :
    INDENT
        excluded_days = []
    DEDENT
    start_date = str(start_date)
    if number_of_days < 1 :
    INDENT
        raise exception.UserError(_('Number of days should be > 0!!'))
    DEDENT
    if len(excluded_days) > 5 :
    INDENT
        raise exception.UserError(_('To much excluded days!!'))
    DEDENT
    date_format = '%Y-%m-%d'
    end_date = datetime.strptime(start_date, date_format)

    add_one_day = timedelta(days = 1)
    while number_of_days > 1 :
    INDENT
        end_date += add_one_day
        if end_date.strftime('%a') not in excluded_days :
        INDENT

            number_of_days += - 1
        DEDENT
    DEDENT
    return end_date.strftime(date_format)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5343001_5343282_2_7
5343001_5343283_1_6
Title: Python decorator which set class variable 
----------------------------------------

def notify(regex) :
INDENT
    def mark(func) :
    INDENT
        func.regex = regex
        return func
    DEDENT
    return mark
DEDENT
----------------------------------------

def notify(regex) :
INDENT
    def decorate(func) :
    INDENT
        func.regex = regex
        return func
    DEDENT
    return decorate
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5343001_5343282_2_7
5343001_5343780_1_6
Title: Python decorator which set class variable 
----------------------------------------

def notify(regex) :
INDENT
    def mark(func) :
    INDENT
        func.regex = regex
        return func
    DEDENT
    return mark
DEDENT
----------------------------------------

def notify(regex) :
INDENT
    def mark(func) :
    INDENT
        func.regex = regex
        return func
    DEDENT
    return mark
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5343001_5343283_1_6
5343001_5343780_1_6
Title: Python decorator which set class variable 
----------------------------------------

def notify(regex) :
INDENT
    def decorate(func) :
    INDENT
        func.regex = regex
        return func
    DEDENT
    return decorate
DEDENT
----------------------------------------

def notify(regex) :
INDENT
    def mark(func) :
    INDENT
        func.regex = regex
        return func
    DEDENT
    return mark
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53438554_53438751_1_12
53438554_53438786_1_17
Title: Cleaning up a string without split/strip/built-in functions 
----------------------------------------

def cleanupstring(S) :
INDENT
    newstring = ["", 0]
    last_character = ' '
    for i in range(len(S) - 1) :
    INDENT
        char = S [i]
        if char is ' ' and last_character is ' ' :
        INDENT
            continue
        DEDENT
        else :
        INDENT
            last_character = char
            newstring [0] = newstring [0] + char
        DEDENT
    DEDENT
    return newstring
DEDENT
----------------------------------------

def cleanupstring(s) :
INDENT
    out_s = ''
    count = 0
    last_out = ' '
    for c in s :
    INDENT
        if c ! = ' ' or last_out ! = ' ' :
        INDENT
            last_out = c
            out_s += c
        DEDENT
        else :
        INDENT
            count += 1
        DEDENT
    DEDENT
    if last_out == ' ' :
    INDENT
        count -= 1
        out_s = out_s [: - 1]
    DEDENT
    return out_s, count

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53459358_53459456_1_19
53459358_53459524_1_17
Title: Tuple to table from counting DNA sequences 
----------------------------------------

def base_counter(DNA) :
INDENT
    dna_dict = {
        "A" : 0,
        "T" : 0,
        "G" : 0,
        "C" : 0,
        }
    for base in DNA :
    INDENT
        if base == "A" :
        INDENT
            dna_dict ["A"] += 1
        DEDENT
        elif base == "T" :
        INDENT
            dna_dict ["T"] += 1
        DEDENT
        elif base == "G" :
        INDENT
            dna_dict ["G"] += 1
        DEDENT
        elif base == "C" :
        INDENT
            dna_dict ["C"] += 1
        DEDENT
    DEDENT
    return dna_dict

DEDENT
----------------------------------------

def base_counter(DNA) :
INDENT
    A = 0
    T = 0
    G = 0
    C = 0
    for base in DNA :
    INDENT
        if base == "A" :
        INDENT
            A = A + 1
        DEDENT
        elif base == "T" :
        INDENT
            T = T + 1
        DEDENT
        elif base == "G" :
        INDENT
            G = G + 1
        DEDENT
        elif base == "C" :
        INDENT
            C = C + 1
        DEDENT
    DEDENT
    out_str = "A    " + str(A) + "\n" + "T    " + str(T) + "\n" + "G    " + str(G) + "\n" + "C    " + str(C)
    return out_str
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53462792_53463048_1_12
53462792_53463113_1_8
Title: How to count how many times an user input was wrong 
----------------------------------------

def question() :
INDENT
    questions = [
        ("How old are Ring?", "10"),
        ("How old are King?", "20"),
        ("How old are Bing?", "30"),
        ]
    global_wrong_count = 0
    for text, answer in questions :
    INDENT
        global_wrong_count += input_question(text, answer)
    DEDENT
    return global_wrong_count

DEDENT
----------------------------------------

def question() :
INDENT
    x_errors = input_question("How old are Ring?", 10)
    print (x_errors)
    x_errors = input_question("How old are King?", 20)
    print (x_errors)
    x_errors = input_question("How old are Bing?", 30)
    print (x_errors)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53464438_53464643_2_9
53464438_53464920_9_18
Title: How to Use Recursion to Generate Arrays in Python 
----------------------------------------

def permute(lst, n) :
INDENT
    if n == 1 : totalArr.append(lst.copy())
    else :
    INDENT
        for i in range(n) :
        INDENT
            lst [i], lst [n - 1] = lst [n - 1], lst [i]
            permute(lst, n - 1)
            lst [i], lst [n - 1] = lst [n - 1], lst [i]
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def permute(a, l, r) :
INDENT
    if l == r :
    INDENT
        print a
    DEDENT
    else :
    INDENT
        for i in xrange(l, r + 1) :
        INDENT
            a [l], a [i] = a [i], a [l]
            permute(a, l + 1, r)
            a [l], a [i] = a [i], a [l]

        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53468018_53468065_5_10
53468018_53468075_1_7
Title: "In Python how to count the number '1's in a list of email addresses?" 
----------------------------------------

def email_security_scan(a, b) :
INDENT
    numbers = 0
    for item in a :
    INDENT
        numbers += item.count(b)
        print (numbers)
    DEDENT
DEDENT
----------------------------------------

def email_security_scan(a, b) :
INDENT
    count = 0
    for item in a :
    INDENT
        if str(b) in item :
        INDENT
            count += 1
        DEDENT
    DEDENT
    print (count)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53469949_53470012_4_15
53469949_53470063_4_10
Title: Count the number of times a letter appears in a word and put them in the following format: 
----------------------------------------

def countTheLetters(t) :
INDENT
    ret = []
    for word in words :
    INDENT
        thingsList = []
        for x in word :
        INDENT
            n = word.count(x)
            j = x, n
            if not j in thingsList :
            INDENT
                thingsList.append(j)
            DEDENT
        DEDENT
        ret.extend(thingsList)
    DEDENT
    return ret
DEDENT
----------------------------------------

def countTheLetters(t) :
INDENT
    thingsList = []
    for word in words :
    INDENT
        for x in word :
        INDENT
            n = word.count(x)
            j = x, n
            thingsList.append(j)
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53472312_53472346_4_13
53472312_53472416_6_13
Title: Pass a variable between multiple several functions | Python 3 
----------------------------------------

def print_spots(spots) :
INDENT
    s1, s2, s3, s4, s5, s6, s7, s8, s9 = spots
    print ('\n')
    print (str(s1) + ' | ' + str(s2) + ' | ' + str(s3))
    print ('--+---+--')
    print (str(s4) + ' | ' + str(s5) + ' | ' + str(s6))
    print ('--+---+--')
    print (str(s7) + ' | ' + str(s8) + ' | ' + str(s9))
DEDENT
----------------------------------------

def print_spots(s) :
INDENT
    print ('\n')
    print (str(s [0]) + ' | ' + str(s [1]) + ' | ' + str(s [2]))
    print ('--+---+--')
    print (str(s [3]) + ' | ' + str(s [4]) + ' | ' + str(s [5]))
    print ('--+---+--')
    print (str(s [6]) + ' | ' + str(s [7]) + ' | ' + str(s [8]))
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53472494_53472554_5_19
53472494_53472605_4_14
Title: Implementing the Ceaser Cipher function through input in Python 
----------------------------------------

def caesar(plainText, shift) :
INDENT
    cipherText = ""
    for ch in plainText :
    INDENT
        if ch.isalpha() :
        INDENT
            stayInAlphabet = ord(ch) + shift
            if stayInAlphabet > ord('z') :
            INDENT
                stayInAlphabet -= 26
            DEDENT
            finalLetter = chr(stayInAlphabet)
            cipherText += finalLetter
        DEDENT
        elif ch is " " :
        INDENT
            cipherText += " "
        DEDENT
    DEDENT
    print (cipherText)
    return cipherText

DEDENT
----------------------------------------

def caesar(plain_text, shift) :
INDENT
    cipher_text = ""
    for ch in plain_text :
    INDENT
        if ch.isalpha() :
        INDENT
            final_letter = chr((ord(ch) + shift - ord('A')) % 26 + ord('A'))
            cipher_text += final_letter
        DEDENT
        else :
        INDENT
            cipher_text += ch
        DEDENT
    DEDENT
    print (cipher_text)
    return cipher_text
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53480904_53481339_7_29
53480904_53491085_9_14
Title: Stacking triangles with Python turtle 
----------------------------------------

def repeat_triangle(t, l) :
INDENT
    for i in range(3) :
    INDENT
        t.color(randint(0, 255), randint(0, 255), randint(0, 255))
        t.begin_fill()
        t.fd(100)
        t.lt(120)
        t.fd(100)
        t.lt(120)
        t.fd(100)
        t.lt(120)
        t.fd(100)
        t.lt(180)
        t.fd(50)
        t.lt(60)
        t.fd(100)
        t.lt(120)
    DEDENT
    t.fd(100)
    t.lt(120)
    t.fd(100)
    otto.end_fill()
DEDENT
----------------------------------------

def repeat_triangle(turtle, repetitions) :
INDENT
    for _ in range(repetitions) :
    INDENT
        turtle.color(random(), random(), random())
        turtle.stamp()
        turtle.forward(TRIANGLE_HEIGHT)
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53484241_53487364_25_37
53484241_53487364_2_17
Title: Get selected files' filenames from PYQT5 QListview in python 
----------------------------------------

def setupUi(self, SecondWindow) :
INDENT
    SecondWindow.setObjectName("SecondWindow")
    SecondWindow.resize(600, 400)
    self.centralwidget = QtWidgets.QWidget(SecondWindow)
    self.centralwidget.setObjectName("centralwidget")
    SecondWindow.setCentralWidget(self.centralwidget)
    self.tableView = QtWidgets.QTableView(self.centralwidget)
    self.tableView.setGeometry(QtCore.QRect(10, 10, 580, 370))
    self.retranslateUi(SecondWindow)
    QtCore.QMetaObject.connectSlotsByName(SecondWindow)
DEDENT
----------------------------------------

def setupUi(self, MainWindow) :
INDENT
    MainWindow.setObjectName("MainWindow")
    MainWindow.resize(450, 550)
    self.centralwidget = QtWidgets.QWidget(MainWindow)
    self.centralwidget.setObjectName("centralwidget")
    MainWindow.setCentralWidget(self.centralwidget)
    self.listview = QtWidgets.QListView(self.centralwidget)
    self.listview.setGeometry(QtCore.QRect(10, 10, 400, 300))
    self.listview.setObjectName("listview")
    self.pushButton = QtWidgets.QPushButton(self.centralwidget)
    self.pushButton.setObjectName("pushButton")
    self.pushButton.setGeometry(QtCore.QRect(300, 380, 100, 20))
    self.retranslateUi(MainWindow)
    QtCore.QMetaObject.connectSlotsByName(MainWindow)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53487967_53488020_3_10
53487967_53488136_3_13
Title: The loop i tried to make won't loop correctly 
----------------------------------------

def Timer(time) :
INDENT
    if time == '0' :
    INDENT
        print ("done")
    DEDENT
    else :
    INDENT
        print (int(time) - 1)
        tm.sleep(1)
        time = str(int(time) - 1)
        Timer(time)
    DEDENT
DEDENT
----------------------------------------

def Timer(time) :
INDENT
    while (time > 0) :
    INDENT

        tm.sleep(1)
        time -= 1
        print (time)
    DEDENT
    print ("done")
    tm.sleep(3)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53494519_53495112_22_39
53494519_53495112_5_20
Title: AttributeError: 'Settings' object has no attribute 'scene' 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Settings, self).__init__(parent)
    self.save = QtGui.QPushButton("save")
    self.open = QtGui.QPushButton("open")
    self.folder = QtGui.QPushButton("Folder", clicked = self.showSettings)
    central_widget = QtGui.QWidget()
    self.setCentralWidget(central_widget)
    vbox = QtGui.QVBoxLayout()
    vbox.addWidget(self.save)
    vbox.addWidget(self.open)
    vbox.addWidget(self.folder)
    self.scrollArea = QtGui.QScrollArea(widgetResizable = True)
    self.scrollArea.setBackgroundRole(QtGui.QPalette.Light)
    hlay = QtGui.QHBoxLayout(central_widget)
    hlay.addLayout(vbox)
    hlay.addWidget(self.scrollArea)
    self.setGeometry(200, 100, 300, 300)
DEDENT
----------------------------------------

def __init__(self, X = 5, Y = 5, parent = None) :
INDENT
    super(ScanView, self).__init__(parent)
    self._squares = []
    n_rows, n_cols = X, Y
    squareLB = 50
    width, height = (Y + 2) * squareLB, (X + 2) * squareLB
    self._scene = QtGui.QGraphicsScene(0, 0, max(708, width), height)
    p = squareLB if width > 708 else (708.0 - Y * squareLB) / 2.0
    for i in range(n_rows) :
    INDENT
        for j in range(n_cols) :
        INDENT
            it = self._scene.addRect(0, 0, squareLB, squareLB)
            it.setPos(p + j * squareLB, i * squareLB)
            self._squares.append(it)
        DEDENT
    DEDENT
    self.setScene(self._scene)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53505604_53505712_1_10
53505604_53506064_4_10
Title: http get python query key - value 
----------------------------------------

def query_string() :
INDENT
    url = r'https://fury.cse.buffalo.edu/ps-api/a'
    payload = {
        'x' : 5,
        'y' : 4,
        'z' : 5}
    url = url + '?' + urllib.parse.urlencode(payload)
    r = urllib.request.urlopen(url).read().decode()
    r = json.loads(r)
    return float(r ['answer'])
DEDENT
----------------------------------------

def query_string() :
INDENT
    url = "https://fury.cse.buffalo.edu/ps-api/a"
    url = url + "?x=5&y=4&z=5"
    response = urllib.request.urlopen(url)
    content_string = response.read().decode()
    content = json.loads(content_string)
    return float(content ['answer'])
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53507584_53507855_3_9
53507584_53508020_3_14
Title: Deleting indexes in List based on specific values 
----------------------------------------

def sum13(nums, first_call = False) :
INDENT
    if not first_call and nums [0] ! = 13 :
    INDENT
        nums = nums [1 :]
    DEDENT
    if 13 in nums :
    INDENT
        return sum(nums [: nums.index(13)]) + sum13(nums [nums.index(13) + 1 :])
    DEDENT
    return sum(nums)
DEDENT
----------------------------------------

def sum13(nums) :
INDENT
    def filter13(nums) :
    INDENT
        for n, i in enumerate(nums) :
        INDENT
            if i == 13 :
            INDENT
                yield n
                yield n + 1
            DEDENT
        DEDENT
    DEDENT
    bad_ix = set(filter13(nums))
    new_nums = [x for n, x in enumerate(nums) if n not in bad_ix]
    return sum(new_nums)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53509650_53510159_14_26
53509650_53510159_51_61
Title: Python PyQt Send Data Between Forms 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(PunchWindow, self).__init__(parent)
    self.setupUi(self)
    self.move(850, 200)
    buttons = (self.btnOne, self.btnTwo, self.btnThree, self.btnFour,
        self.btnFive, self.btnSix, self.btnSeven, self.btnEight,
        self.btnNine, self.btnZero, self.btnDot, self.btnBackSpace,
        self.btnClear)
    vals = (1, 2, 3, 4, 5, 6, 7, 8, 9, 0, ".", "BS", "Clear")
    for button, val in zip(buttons, vals) :
    INDENT
        button.clicked.connect(partial(self.numberPad, val))
    DEDENT
    self.btnEnter.clicked.connect(self.enter)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(MainWindow, self).__init__(parent)
    self.setupUi(self)
    self.move(450, 200)
    buttons = (self.btnField1, self.btnField2, self.btnField3)
    fields = ("Field1", "Field2", "Field3")
    for button, field in zip(buttons, fields) :
    INDENT
        button.clicked.connect(partial(self.updatePunch, field))
    DEDENT
    self.punch = PunchWindow()
    self.punch.signalPassDataToMainForm.connect(self.updateField)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53512386_53512613_1_11
53512386_53513477_4_10
Title: Python Dice Rolling game - How to check separate rolls and add total 
----------------------------------------

def rollingdice(roll) :
INDENT
    total = 0
    for i in range(roll) :
    INDENT
        rolled = random.randint(1, 6)
        if rolled == 1 :
        INDENT
            print ("You rolled a 1: You have zero points for the round")
            break
        DEDENT
        total += rolled
    DEDENT
    if rolled ! = 1 : print (total)
    main()
DEDENT
----------------------------------------

def rollingdice(roll) :
INDENT
    rolls = (random.randint(1, 6) for i in range(roll))
    rolls = list(takewhile(lambda n : n ! = 1, rolls))
    if len(rolls) == roll :
    INDENT
        print (total)
    DEDENT
    else :
    INDENT
        print ("You rolled a 1: You have zero points for the round")
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53517600_53518859_2_15
53517600_53525085_3_11
Title: Python Turtle How to program it to go down automatically? 
----------------------------------------

def triangle(t, l) :
INDENT
    t.color("cadetblue")
    t.begin_fill()
    t.lt(360 / 6)
    for i in range(3) :
    INDENT
        t.lt(- 360 / 3)
        t.fd(l)
    DEDENT
    t.end_fill()
    t.penup()
    t.lt(- 360 / 3)
    t.fd(l)
    t.lt(- 360 / 3)
    t.fd(l / 2)
    t.lt(180)
DEDENT
----------------------------------------

def triangle(t, length) :
INDENT
    t.begin_fill()
    for i in range(3) :
    INDENT
        t.forward(length)
        t.left(360 / 3)
    DEDENT
    t.end_fill()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53530306_53530481_14_18
53530306_53530836_22_27
Title: Use __str__ of each instance attribute for a class's __str__ 
----------------------------------------

def __str__(self) :
INDENT
    output = ""
    for _, var in vars(self).items() :
    INDENT
        output += str(var)
    DEDENT
    return output
DEDENT
----------------------------------------

def __str__(self) :
INDENT
    bits = ['<C']
    for a in self.__attrs_attrs__ :
    INDENT
        bits.append(' %s=%s' % (a.name, getattr(self, a.name)))
    DEDENT
    bits.append('>')
    return ''.join(bits)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53549594_53561775_25_33
53549594_53561775_56_64
Title: Implicit Components: Set initial param values 
----------------------------------------

def apply_nonlinear(self, params, unknowns, resids) :
INDENT
    print ("Params:   BatteryVoltImplicitComp.temp: {}".format(params ['temp']))
    print ("Unknowns: BatteryVoltImplicitComp.volt: {}".format(unknowns ['volt']))
    print ("Resids: BatteryVoltImplicitComp.volt: {}".format(resids ['volt']))
    calculated_voltage = self.calc_voltage(params, unknowns, resids)
    resids ['volt'] = calculated_voltage - unknowns ['volt']

DEDENT
----------------------------------------

def apply_nonlinear(self, params, unknowns, resids) :
INDENT
    print ("Params:   BatteryTempImplicitComp.volt: {}".format(params ['volt']))
    print ("Unknowns: BatteryTempImplicitComp.temp: {}".format(unknowns ['temp']))
    print ("Resids: BatteryTempImplicitComp.temp: {}".format(resids ['temp']))
    calculated_temp = self.calc_temp(params, unknowns, resids)
    resids ['temp'] = calculated_temp - unknowns ['temp']

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53552377_53552432_3_11
53552377_53552447_3_9
Title: Having trouble reading a file with numbers (strings) into a dictionary with integer values 
----------------------------------------

def createCarDictionary(datafile) :
INDENT
    with open(datafile) as infile :
    INDENT
        next(infile)
        for line in infile :
        INDENT
            line = line.replace(',', '')
            key, value, value2 = map(str.strip, line.split('|'))
            dict1 [key] = [value, value2]
        DEDENT
        return dict1
    DEDENT
DEDENT
----------------------------------------

def createCarDictionary(datafile) :
INDENT
    for line in datafile.splitlines() :
    INDENT
        line = line.replace(',', '')
        key, value, value2 = map(str.strip, line.split('|'))
        dict1 [key] = [int(value), int(value2)]
    DEDENT
    return dict1
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53557207_53557618_1_24
53557207_53564350_3_24
Title: Drawing fractals using recursion 
----------------------------------------

def fractal(length, t) :
INDENT
    if length > = 10 :
    INDENT

        t.lt(90)
        t.fd(length)
        t.rt(90)
        t.fd(length)
        fractal(length / / 2, t)
        t.bk(length * 2)
        fractal(length / / 2, t)
        t.fd(length)
        t.rt(90)
        t.fd(length * 2)
        t.lt(90)
        t.fd(length)
        fractal(length / / 2, t)
        t.bk(length * 2)
        fractal(length / / 2, t)
        t.fd(length)
        t.lt(90)
        t.fd(length)
        t.rt(90)
    DEDENT
DEDENT
----------------------------------------

def fractal(turtle, length, minimum) :
INDENT
    if length < minimum :
    INDENT
        return
    DEDENT
    angle = 90
    length //= 2
    for _ in range(2) :
    INDENT
        for _ in range(2) :
        INDENT
            turtle.forward(length)
            turtle.left(angle)
            turtle.forward(length)
            turtle.left(angle)
            fractal(turtle, length, minimum)
            turtle.left(angle)
            turtle.forward(length)
            turtle.right(angle)
            turtle.forward(length)
        DEDENT
        angle = - angle
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53561458_53561820_10_32
53561458_53562016_10_32
Title: Check Wether A Changing Number is Lower or Higher Than it Last Was 
----------------------------------------

def func(label2, prevSubs, firstTime) :
INDENT
    data = urllib.request.urlopen("https://www.googleapis.com/youtube/v3/channels?part=statistics&id=" + channelid + "&key=" + key).read()
    subs = json.loads(data) ["items"] [0] ["statistics"] ["subscriberCount"]
    subc = ("{:,d}".format(int(subs)))
    subs = int(subc.replace(',', ''))
    if firstTime :
    INDENT
        print ("Started monitoring...")
        firstTime = False
        pass
    DEDENT
    else :
    INDENT
        if subs > prevSubs :
        INDENT
            print ("Gained")
        DEDENT
        elif subs < prevSubs :
        INDENT
            print ("Lost")
        DEDENT
        else :
        INDENT
            pass
        DEDENT
    DEDENT
    prevSubs = subs
    label2.config(text = subc)
    label2.update()
    root.after(10, lambda : func(label2, prevSubs, firstTime))

DEDENT
----------------------------------------

def func(label2, label3) :
INDENT
    global score
    r = urllib.request.urlopen("https://www.googleapis.com/youtube/v3/channels?part=statistics&id=" + channelid + "&key=" + key).read()
    subs = json.loads(r.decode('utf-8')) ["items"] [0] ["statistics"] ["subscriberCount"]
    newscore = int(subs)
    if (score < newscore) :
    INDENT
        label3.config(text = "UP" + " prev[ " + str(score) + "]")
        label3.config(fg = "Green")
    DEDENT
    else :
    INDENT
        if (score == newscore) :
        INDENT
            label3.config(text = "SAME" + " prev[ " + str(score) + "]")
            label3.config(fg = "Blue")
        DEDENT
        else :
        INDENT
            label3.config(text = "DOWN" + " prev[ " + str(score) + "]")
            label3.config(fg = "Red")
        DEDENT
    DEDENT
    score = newscore
    subc = ("{:,d}".format(newscore))
    label2.config(text = subc)
    label2.update()
    root.after(10, lambda : func(label2, label3))

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53563166_53563249_6_14
53563166_53563345_6_21
Title: Python - Try/Except with sum function 
----------------------------------------

def app_sum() :
INDENT
    while True :
    INDENT
        try :
        INDENT
            inp_1 = int(input('Number 1?: '))
            inp_2 = int(input('Number 2?: '))
            break
        DEDENT
        except ValueError :
        INDENT
            print ('Invalid input, try again')
        DEDENT
    DEDENT
    sum(inp_1, inp_2)
DEDENT
----------------------------------------

def app_sum() :
INDENT
    inp_1 = None
    while inp_1 is None :
    INDENT
        try :
        INDENT
            inp_1 = int(input('Number 1?: '))
        DEDENT
        except ValueError :
        INDENT
            print ('Invalid input, try again')
        DEDENT
    DEDENT
    inp_2 = None
    while inp_2 is None :
    INDENT
        try :
        INDENT
            inp_2 = int(input('Number 2?: '))
        DEDENT
        except ValueError :
        INDENT
            print ('Invalid input, try again')
        DEDENT
    DEDENT
    sum(inp_1, inp_2)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53573789_53573830_1_6
53573789_53573983_1_5
Title: Python decorator for function subsegments 
----------------------------------------

def deco_double(f) :
INDENT
    def wrapper() :
    INDENT
        f()
        f()
    DEDENT
    return wrapper
DEDENT
----------------------------------------

def deco_double(f) :
INDENT
    def wrapper() :
    INDENT
        f()
        f()
    DEDENT
    return wrapper
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575010_53575240_1_25
53575010_53575577_1_18
Title: "Problems with ""TryExceptFinally"" in Defining method" 
----------------------------------------

def cmdPerm() :
INDENT
    try :
    INDENT
        Permission = ""
        if Permission == "" :
        INDENT
            Permission = browser.find_element_by_xpath("/html/body/content/div/div[8]/div[2]/card[1]/content/div/p[1]/strong")
        DEDENT
    DEDENT
    except :
    INDENT
        try :
        INDENT
            Permission = ""
            if Permission == "" :
            INDENT
                Permission = browser.find_element_by_xpath("/html/body/content/div/div[8]/div[1]/card[1]/content/div/p")
            DEDENT
        DEDENT
        except :
        INDENT
            try :
            INDENT
                Permission = ""
                if Permission == "" :
                INDENT
                    Permission = browser.find_element_by_xpath("/html/body/content/div/div[7]/div[2]/card[1]/content/div/p/strong")
                DEDENT
            DEDENT
            except :
            INDENT
                try :
                INDENT
                    Permission = ""
                    if Permission == "" :
                    INDENT
                        Permission = browser.find_element_by_xpath("/html/body/content/div/div[7]/div[2]/card[1]/content/div/p[1]/strong")
                    DEDENT
                DEDENT
                except :
                INDENT
                    unused = ""
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    finally :
    INDENT
        Permission = str(Permission.text)
        fileAdd.write("\n" + Permission)
    DEDENT
DEDENT
----------------------------------------

def cmdPerm() :
INDENT
    paths = [
        "/html/body/content/div/div[8]/div[2]/card[1]/content/div/p[1]/strong",
        "/html/body/content/div/div[8]/div[1]/card[1]/content/div/p",
        "/html/body/content/div/div[7]/div[2]/card[1]/content/div/p/strong",
        "/html/body/content/div/div[7]/div[2]/card[1]/content/div/p[1]/strong"]
    for p in paths :
    INDENT
        try :
        INDENT
            permission = browser.find_element_by_xpath(p)
            fileAdd.write("\n" + permission)
            break
        DEDENT
        except NoSuchElementException :
        INDENT
            pass
        DEDENT
        else :
        INDENT
            pass
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_122_178
53575993_53576327_184_193
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)
    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    filenameLabel = QtWidgets.QLabel("Name number:")
    self.fileNameEdit = QtWidgets.QLineEdit()
    ftablayout = QtWidgets.QVBoxLayout(self)
    ftablayout.addWidget(filenameLabel)
    ftablayout.addWidget(self.fileNameEdit)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_122_178
53575993_53576327_199_214
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)
    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoadTable, self).__init__(1, 3, parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    headertitle = ("A", "B", "C")
    self.setHorizontalHeaderLabels(headertitle)
    self.verticalHeader().hide()
    self.horizontalHeader().setHighlightSections(False)
    self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
    self.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
    self.setColumnWidth(0, 130)
    combox_lay = QtWidgets.QComboBox(self)
    combox_lay.addItems(["I", "II"])
    self.setCellWidget(0, 2, combox_lay)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_122_178
53575993_53576327_42_74
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)
    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(FirstTab, self).__init__(parent)
    font = QtGui.QFont("Georgia", 8, QtGui.QFont.Normal)
    sectiontypegroupbox = QtWidgets.QGroupBox('&Type', self)
    sectiontypegroupbox.setFont(QtGui.QFont("Georgia", 10, QtGui.QFont.Normal))
    tab1button = QtWidgets.QPushButton()

    circularlabel = QtWidgets.QLabel("Calculate", self)
    circularlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
    circularlabel.setFont(font)

    circularlay = QtWidgets.QHBoxLayout()
    circularlay.addWidget(tab1button)
    circularlay.addWidget(circularlabel)

    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addLayout(circularlay)
    vboxlayout.setSizeConstraint(vboxlayout.SetFixedSize)
    vboxlayout.setContentsMargins(25, 25, 25, 25)
    sectiontypegroupbox.setLayout(vboxlayout)
    hboxlayout = QtWidgets.QHBoxLayout(self)
    hboxlayout.addWidget(sectiontypegroupbox)
    tab1button.clicked.connect(self.clicked)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_122_178
53575993_53576327_5_30
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)
    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Tabwidget, self).__init__()
    self.setFixedSize(400, 230)
    tab = QtWidgets.QTabWidget()
    self.geometry = FirstTab()
    self.geometry.clicked.connect(self.on_clicked)
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    self.load_table = LoadTable()
    tab.addTab(self.geometry, 'A')
    tab.addTab(self.A, 'B')
    tab.addTab(self.B, 'C')
    tab.addTab(self.C, 'D')
    tab.addTab(self.load_table, 'E')
    tab.setFont(QtGui.QFont("Georgia", 9, QtGui.QFont.Normal))
    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addWidget(tab)
    self.setLayout(vboxlayout)
    self._calculate = Calculate()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_122_178
53575993_53576327_76_108
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassB, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))

    self.combo_exclass = QtWidgets.QComboBox()
    self.combo_exclass.addItems([" Very dry area", " Dry or permanently wet", " Wet, rarely dry", " Moderate humidity", " Tidal splash & spray zones"])

    self.combo_lclass = QtWidgets.QComboBox()
    self.combo_lclass.addItems(["L2", "L4", "L6", "L8"])
    self.combo_vct = QtWidgets.QComboBox()

    self.combo_vct.addItems(["0.10", "0.20", "0.30", "0.40",
            "0.50", "0.60", "0.70"])
    self.combo_in = QtWidgets.QComboBox()
    self.combo_in.addItems(["Class1", "Class2", "Class3"])
    self.tbox = QtWidgets.QHBoxLayout()
    self.exclass = QtWidgets.QLabel("Class1: ")
    self.tbox.addWidget(self.exclass)
    self.tbox.addWidget(self.combo_exclass)

    self.mtbox = QtWidgets.QHBoxLayout()
    self.lclass = QtWidgets.QLabel("Class2: ")
    self.mtbox.addWidget(self.lclass)
    self.mtbox.addWidget(self.combo_lclass)
    self.mbbox = QtWidgets.QHBoxLayout()
    self.vct = QtWidgets.QLabel("Class3: ")
    self.mbbox.addWidget(self.vct)
    self.mbbox.addWidget(self.combo_vct)
    self.bbox = QtWidgets.QHBoxLayout()
    self.inl = QtWidgets.QLabel("Class4: ")
    self.bbox.addWidget(self.inl)
    self.bbox.addWidget(self.combo_in)

    self.grid = QtWidgets.QGridLayout()
    self.grid.addLayout(self.tbox, 0, 0, 1, 2)
    self.grid.addLayout(self.mtbox, 1, 0)
    self.grid.addLayout(self.mbbox, 2, 0)
    self.grid.addLayout(self.bbox, 3, 0)
    Environment_Group = QtWidgets.QGroupBox()
    Environment_Group.setTitle("&Group2")
    Environment_Group.setLayout(self.grid)
    vlay = QtWidgets.QVBoxLayout(self)
    vlay.addWidget(Environment_Group)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)
    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.combo.activated [str].connect(self.display_data)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_184_193
53575993_53576327_199_214
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    filenameLabel = QtWidgets.QLabel("Name number:")
    self.fileNameEdit = QtWidgets.QLineEdit()
    ftablayout = QtWidgets.QVBoxLayout(self)
    ftablayout.addWidget(filenameLabel)
    ftablayout.addWidget(self.fileNameEdit)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoadTable, self).__init__(1, 3, parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    headertitle = ("A", "B", "C")
    self.setHorizontalHeaderLabels(headertitle)
    self.verticalHeader().hide()
    self.horizontalHeader().setHighlightSections(False)
    self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
    self.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
    self.setColumnWidth(0, 130)
    combox_lay = QtWidgets.QComboBox(self)
    combox_lay.addItems(["I", "II"])
    self.setCellWidget(0, 2, combox_lay)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_184_193
53575993_53576327_42_74
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    filenameLabel = QtWidgets.QLabel("Name number:")
    self.fileNameEdit = QtWidgets.QLineEdit()
    ftablayout = QtWidgets.QVBoxLayout(self)
    ftablayout.addWidget(filenameLabel)
    ftablayout.addWidget(self.fileNameEdit)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(FirstTab, self).__init__(parent)
    font = QtGui.QFont("Georgia", 8, QtGui.QFont.Normal)
    sectiontypegroupbox = QtWidgets.QGroupBox('&Type', self)
    sectiontypegroupbox.setFont(QtGui.QFont("Georgia", 10, QtGui.QFont.Normal))
    tab1button = QtWidgets.QPushButton()

    circularlabel = QtWidgets.QLabel("Calculate", self)
    circularlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
    circularlabel.setFont(font)

    circularlay = QtWidgets.QHBoxLayout()
    circularlay.addWidget(tab1button)
    circularlay.addWidget(circularlabel)

    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addLayout(circularlay)
    vboxlayout.setSizeConstraint(vboxlayout.SetFixedSize)
    vboxlayout.setContentsMargins(25, 25, 25, 25)
    sectiontypegroupbox.setLayout(vboxlayout)
    hboxlayout = QtWidgets.QHBoxLayout(self)
    hboxlayout.addWidget(sectiontypegroupbox)
    tab1button.clicked.connect(self.clicked)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_184_193
53575993_53576327_5_30
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    filenameLabel = QtWidgets.QLabel("Name number:")
    self.fileNameEdit = QtWidgets.QLineEdit()
    ftablayout = QtWidgets.QVBoxLayout(self)
    ftablayout.addWidget(filenameLabel)
    ftablayout.addWidget(self.fileNameEdit)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Tabwidget, self).__init__()
    self.setFixedSize(400, 230)
    tab = QtWidgets.QTabWidget()
    self.geometry = FirstTab()
    self.geometry.clicked.connect(self.on_clicked)
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    self.load_table = LoadTable()
    tab.addTab(self.geometry, 'A')
    tab.addTab(self.A, 'B')
    tab.addTab(self.B, 'C')
    tab.addTab(self.C, 'D')
    tab.addTab(self.load_table, 'E')
    tab.setFont(QtGui.QFont("Georgia", 9, QtGui.QFont.Normal))
    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addWidget(tab)
    self.setLayout(vboxlayout)
    self._calculate = Calculate()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_184_193
53575993_53576327_76_108
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassC, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    filenameLabel = QtWidgets.QLabel("Name number:")
    self.fileNameEdit = QtWidgets.QLineEdit()
    ftablayout = QtWidgets.QVBoxLayout(self)
    ftablayout.addWidget(filenameLabel)
    ftablayout.addWidget(self.fileNameEdit)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)
    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.combo.activated [str].connect(self.display_data)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_199_214
53575993_53576327_42_74
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoadTable, self).__init__(1, 3, parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    headertitle = ("A", "B", "C")
    self.setHorizontalHeaderLabels(headertitle)
    self.verticalHeader().hide()
    self.horizontalHeader().setHighlightSections(False)
    self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
    self.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
    self.setColumnWidth(0, 130)
    combox_lay = QtWidgets.QComboBox(self)
    combox_lay.addItems(["I", "II"])
    self.setCellWidget(0, 2, combox_lay)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(FirstTab, self).__init__(parent)
    font = QtGui.QFont("Georgia", 8, QtGui.QFont.Normal)
    sectiontypegroupbox = QtWidgets.QGroupBox('&Type', self)
    sectiontypegroupbox.setFont(QtGui.QFont("Georgia", 10, QtGui.QFont.Normal))
    tab1button = QtWidgets.QPushButton()

    circularlabel = QtWidgets.QLabel("Calculate", self)
    circularlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
    circularlabel.setFont(font)

    circularlay = QtWidgets.QHBoxLayout()
    circularlay.addWidget(tab1button)
    circularlay.addWidget(circularlabel)

    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addLayout(circularlay)
    vboxlayout.setSizeConstraint(vboxlayout.SetFixedSize)
    vboxlayout.setContentsMargins(25, 25, 25, 25)
    sectiontypegroupbox.setLayout(vboxlayout)
    hboxlayout = QtWidgets.QHBoxLayout(self)
    hboxlayout.addWidget(sectiontypegroupbox)
    tab1button.clicked.connect(self.clicked)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_199_214
53575993_53576327_5_30
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoadTable, self).__init__(1, 3, parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    headertitle = ("A", "B", "C")
    self.setHorizontalHeaderLabels(headertitle)
    self.verticalHeader().hide()
    self.horizontalHeader().setHighlightSections(False)
    self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
    self.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
    self.setColumnWidth(0, 130)
    combox_lay = QtWidgets.QComboBox(self)
    combox_lay.addItems(["I", "II"])
    self.setCellWidget(0, 2, combox_lay)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Tabwidget, self).__init__()
    self.setFixedSize(400, 230)
    tab = QtWidgets.QTabWidget()
    self.geometry = FirstTab()
    self.geometry.clicked.connect(self.on_clicked)
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    self.load_table = LoadTable()
    tab.addTab(self.geometry, 'A')
    tab.addTab(self.A, 'B')
    tab.addTab(self.B, 'C')
    tab.addTab(self.C, 'D')
    tab.addTab(self.load_table, 'E')
    tab.setFont(QtGui.QFont("Georgia", 9, QtGui.QFont.Normal))
    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addWidget(tab)
    self.setLayout(vboxlayout)
    self._calculate = Calculate()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_199_214
53575993_53576327_76_108
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(LoadTable, self).__init__(1, 3, parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    headertitle = ("A", "B", "C")
    self.setHorizontalHeaderLabels(headertitle)
    self.verticalHeader().hide()
    self.horizontalHeader().setHighlightSections(False)
    self.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
    self.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
    self.setColumnWidth(0, 130)
    combox_lay = QtWidgets.QComboBox(self)
    combox_lay.addItems(["I", "II"])
    self.setCellWidget(0, 2, combox_lay)
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)
    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.combo.activated [str].connect(self.display_data)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_42_74
53575993_53576327_5_30
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(FirstTab, self).__init__(parent)
    font = QtGui.QFont("Georgia", 8, QtGui.QFont.Normal)
    sectiontypegroupbox = QtWidgets.QGroupBox('&Type', self)
    sectiontypegroupbox.setFont(QtGui.QFont("Georgia", 10, QtGui.QFont.Normal))
    tab1button = QtWidgets.QPushButton()

    circularlabel = QtWidgets.QLabel("Calculate", self)
    circularlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
    circularlabel.setFont(font)

    circularlay = QtWidgets.QHBoxLayout()
    circularlay.addWidget(tab1button)
    circularlay.addWidget(circularlabel)

    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addLayout(circularlay)
    vboxlayout.setSizeConstraint(vboxlayout.SetFixedSize)
    vboxlayout.setContentsMargins(25, 25, 25, 25)
    sectiontypegroupbox.setLayout(vboxlayout)
    hboxlayout = QtWidgets.QHBoxLayout(self)
    hboxlayout.addWidget(sectiontypegroupbox)
    tab1button.clicked.connect(self.clicked)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Tabwidget, self).__init__()
    self.setFixedSize(400, 230)
    tab = QtWidgets.QTabWidget()
    self.geometry = FirstTab()
    self.geometry.clicked.connect(self.on_clicked)
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    self.load_table = LoadTable()
    tab.addTab(self.geometry, 'A')
    tab.addTab(self.A, 'B')
    tab.addTab(self.B, 'C')
    tab.addTab(self.C, 'D')
    tab.addTab(self.load_table, 'E')
    tab.setFont(QtGui.QFont("Georgia", 9, QtGui.QFont.Normal))
    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addWidget(tab)
    self.setLayout(vboxlayout)
    self._calculate = Calculate()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_42_74
53575993_53576327_76_108
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(FirstTab, self).__init__(parent)
    font = QtGui.QFont("Georgia", 8, QtGui.QFont.Normal)
    sectiontypegroupbox = QtWidgets.QGroupBox('&Type', self)
    sectiontypegroupbox.setFont(QtGui.QFont("Georgia", 10, QtGui.QFont.Normal))
    tab1button = QtWidgets.QPushButton()

    circularlabel = QtWidgets.QLabel("Calculate", self)
    circularlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
    circularlabel.setFont(font)

    circularlay = QtWidgets.QHBoxLayout()
    circularlay.addWidget(tab1button)
    circularlay.addWidget(circularlabel)

    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addLayout(circularlay)
    vboxlayout.setSizeConstraint(vboxlayout.SetFixedSize)
    vboxlayout.setContentsMargins(25, 25, 25, 25)
    sectiontypegroupbox.setLayout(vboxlayout)
    hboxlayout = QtWidgets.QHBoxLayout(self)
    hboxlayout.addWidget(sectiontypegroupbox)
    tab1button.clicked.connect(self.clicked)

DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)
    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.combo.activated [str].connect(self.display_data)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
53575993_53576327_5_30
53575993_53576327_76_108
Title: PyQt5 reading values from multiple Qwidgets and transform to class 
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(Tabwidget, self).__init__()
    self.setFixedSize(400, 230)
    tab = QtWidgets.QTabWidget()
    self.geometry = FirstTab()
    self.geometry.clicked.connect(self.on_clicked)
    self.A = ClassA()
    self.B = ClassB()
    self.C = ClassC()
    self.load_table = LoadTable()
    tab.addTab(self.geometry, 'A')
    tab.addTab(self.A, 'B')
    tab.addTab(self.B, 'C')
    tab.addTab(self.C, 'D')
    tab.addTab(self.load_table, 'E')
    tab.setFont(QtGui.QFont("Georgia", 9, QtGui.QFont.Normal))
    vboxlayout = QtWidgets.QVBoxLayout()
    vboxlayout.addWidget(tab)
    self.setLayout(vboxlayout)
    self._calculate = Calculate()
DEDENT
----------------------------------------

def __init__(self, parent = None) :
INDENT
    super(ClassA, self).__init__(parent)
    self.setFont(QtGui.QFont("Helvetica", 10, QtGui.QFont.Normal, italic = False))
    self.c_lay = QtWidgets.QHBoxLayout()
    fctd = "One\n\nTwo\n\nThree"
    con_strength = QtWidgets.QLabel(fctd)
    self.value = QtWidgets.QLineEdit('Test')
    self.c_lay.addWidget(con_strength)
    self.c_lay.addWidget(self.value, alignment = QtCore.Qt.AlignRight)
    self.combo = QtWidgets.QComboBox()
    self.combo.addItems(["10", "12", "14", "16"])
    self.hbox = QtWidgets.QHBoxLayout()
    self.con = QtWidgets.QLabel("Number: ")
    self.hbox.addWidget(self.con)
    self.hbox.addWidget(self.combo)
    self.vlay = QtWidgets.QVBoxLayout()
    self.vlay.addLayout(self.hbox)
    self.vlay.addLayout(self.c_lay)
    self.vlay.addStretch()
    Concrete_Group = QtWidgets.QGroupBox()
    Concrete_Group.setTitle("&GroupA")
    Concrete_Group.setLayout(self.vlay)
    lay = QtWidgets.QVBoxLayout(self)
    lay.addWidget(Concrete_Group)
    self.combo.activated [str].connect(self.display_data)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5360220_13020502_4_36
5360220_14739406_1_62
Title: How to split a list into pairs in all possible ways 
----------------------------------------

def all_pairs(lst) :
INDENT
    N = len(lst)
    choice_indices = itertools.product(* [
            xrange(k) for k in reversed(xrange(1, N, 2))])
    for choice in choice_indices :
    INDENT

        tmp = lst [:]
        result = []
        for index in choice :
        INDENT
            result.append((tmp.pop(0), tmp.pop(index)))
        DEDENT
        yield result
    DEDENT
DEDENT
----------------------------------------

def all_pairs(lst) :
INDENT
    if not lst :
    INDENT
        yield [tuple()]
    DEDENT
    elif len(lst) == 1 :
    INDENT
        yield [tuple(lst)]
    DEDENT
    elif len(lst) == 2 :
    INDENT
        yield [tuple(lst)]
    DEDENT
    else :
    INDENT
        if len(lst) % 2 :
        INDENT
            for i in (None, True) :
            INDENT
                if i not in lst :
                INDENT
                    lst = list(lst) + [i]
                    PAD = i
                    break
                DEDENT
            DEDENT
            else :
            INDENT
                while chr(i) in lst :
                INDENT
                    i += 1
                DEDENT
                PAD = chr(i)
                lst = list(lst) + [PAD]
            DEDENT
        DEDENT
        else :
        INDENT
            PAD = False
        DEDENT
        a = lst [0]
        for i in range(1, len(lst)) :
        INDENT
            pair = (a, lst [i])
            for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
            INDENT
                rv = [pair] + rest
                if PAD is not False :
                INDENT
                    for i, t in enumerate(rv) :
                    INDENT
                        if PAD in t :
                        INDENT
                            rv [i] = (t [0],)
                            break
                        DEDENT
                    DEDENT
                DEDENT
                yield rv
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5360220_13020502_4_36
5360220_5360442_1_15
Title: How to split a list into pairs in all possible ways 
----------------------------------------

def all_pairs(lst) :
INDENT
    N = len(lst)
    choice_indices = itertools.product(* [
            xrange(k) for k in reversed(xrange(1, N, 2))])
    for choice in choice_indices :
    INDENT

        tmp = lst [:]
        result = []
        for index in choice :
        INDENT
            result.append((tmp.pop(0), tmp.pop(index)))
        DEDENT
        yield result
    DEDENT
DEDENT
----------------------------------------

def all_pairs(lst) :
INDENT
    if len(lst) < 2 :
    INDENT
        yield []
        return
    DEDENT
    if len(lst) % 2 == 1 :
    INDENT
        for i in range(len(lst)) :
        INDENT
            for result in all_pairs(lst [: i] + lst [i + 1 :]) :
            INDENT
                yield result
            DEDENT
        DEDENT
    DEDENT
    else :
    INDENT
        a = lst [0]
        for i in range(1, len(lst)) :
        INDENT
            pair = (a, lst [i])
            for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
            INDENT
                yield [pair] + rest
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5360220_14739406_1_62
5360220_5360442_1_15
Title: How to split a list into pairs in all possible ways 
----------------------------------------

def all_pairs(lst) :
INDENT
    if not lst :
    INDENT
        yield [tuple()]
    DEDENT
    elif len(lst) == 1 :
    INDENT
        yield [tuple(lst)]
    DEDENT
    elif len(lst) == 2 :
    INDENT
        yield [tuple(lst)]
    DEDENT
    else :
    INDENT
        if len(lst) % 2 :
        INDENT
            for i in (None, True) :
            INDENT
                if i not in lst :
                INDENT
                    lst = list(lst) + [i]
                    PAD = i
                    break
                DEDENT
            DEDENT
            else :
            INDENT
                while chr(i) in lst :
                INDENT
                    i += 1
                DEDENT
                PAD = chr(i)
                lst = list(lst) + [PAD]
            DEDENT
        DEDENT
        else :
        INDENT
            PAD = False
        DEDENT
        a = lst [0]
        for i in range(1, len(lst)) :
        INDENT
            pair = (a, lst [i])
            for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
            INDENT
                rv = [pair] + rest
                if PAD is not False :
                INDENT
                    for i, t in enumerate(rv) :
                    INDENT
                        if PAD in t :
                        INDENT
                            rv [i] = (t [0],)
                            break
                        DEDENT
                    DEDENT
                DEDENT
                yield rv
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def all_pairs(lst) :
INDENT
    if len(lst) < 2 :
    INDENT
        yield []
        return
    DEDENT
    if len(lst) % 2 == 1 :
    INDENT
        for i in range(len(lst)) :
        INDENT
            for result in all_pairs(lst [: i] + lst [i + 1 :]) :
            INDENT
                yield result
            DEDENT
        DEDENT
    DEDENT
    else :
    INDENT
        a = lst [0]
        for i in range(1, len(lst)) :
        INDENT
            pair = (a, lst [i])
            for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
            INDENT
                yield [pair] + rest
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5374168_5386147_47_52
5374168_5394426_49_54
Title: Unable to select Checkbox inside TreeView 
----------------------------------------

def setData(self, index, value, role) :
INDENT
    if role == Qt.CheckStateRole :
    INDENT
        row = index.row()
        self.args [row].checked = not self.args [row].checked
    DEDENT
    return True
DEDENT
----------------------------------------

def setData(self, index, value, role) :
INDENT
    if role == Qt.CheckStateRole :
    INDENT
        row = index.row()
        self.args [row].checked = not self.args [row].checked
    DEDENT
    return True
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5383817_5383897_1_11
5383817_5383973_10_18
Title: Slow python file I:O; Ruby runs better than this; Got the wrong language? 
----------------------------------------

def splitlines(file) :
INDENT
    fileNo = 0001
    outFile = open("newdocs/%s.txt" % fileNo, 'a')
    reg = re.compile("Copyright ")
    for line in open(file, "r") :
    INDENT
        if reg.search("Copyright ", line) :
        INDENT
            outFile.close()
            outFile = open("newdocs%s.txt" % fileNo, 'a')
            fileNo += 1
        DEDENT
        outFile.write(line)
    DEDENT
DEDENT
----------------------------------------

def splitlines(filename) :
INDENT
    files = file_generator()
    out_file = next(files)
    with open(filename) as in_file :
    INDENT
        for line in in_file :
        INDENT
            if "Copyright " in line :
            INDENT
                out_file = next(files)
            DEDENT
            out_file.write(line)
        DEDENT
        out_file.close()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5407233_5410067_6_52
5407233_5422365_6_47
Title: How to merge only the unique lines from file_a to file_b? 
----------------------------------------

def sorting_merge(o_file, c_file, m_file) :
INDENT
    def toEpoch(dt) :
    INDENT
        dt_ptrn = '%d/%m/%y %H:%M:%S'
        return int(time.mktime(time.strptime(dt, dt_ptrn)))
    DEDENT
    pat = re.compile('([0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d)'
        '[ \t]+[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d')
    fa = open(o_file)
    head = []
    fa.readline()
    while True :
    INDENT
        line1 = fa.readline()
        mat1 = pat.search(line1)
        if not mat1 :
        INDENT
            head.append(('', line1.rstrip()))
        DEDENT
        else :
        INDENT
            break
        DEDENT
    DEDENT
    output = sett((toEpoch(pat.search(line).group(1)), line.rstrip()) for line in fa)
    output.add((toEpoch(mat1.group(1)), line1.rstrip()))
    fa.close()

    fb = open(c_file)
    while True :
    INDENT
        line1 = fb.readline()
        mat1 = pat.search(line1)
        if mat1 : break
    DEDENT
    for line in fb :
    INDENT
        output.add((toEpoch(pat.search(line).group(1)), line.rstrip()))
    DEDENT
    output.add((toEpoch(mat1.group(1)), line1.rstrip()))
    fb.close()
    output = list(output)
    output.sort()
    output [0 : 0] = head
    output [0 : 0] = [('', time.strftime('On %d/%m/%y %H:%M:%S'))]
    fm = open(m_file, 'w')
    fm.writelines(line + '\n' for t, line in output)
    fm.close()

DEDENT
----------------------------------------

def sorting_merge(o_file, c_file, m_file) :
INDENT
    pat = re.compile('[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d'
        '(?=[ \t]+'
        '[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d'
        '|'
        '[ \t]+aborted/deleted)')
    def kl(line, pat = pat) :
    INDENT
        return time.mktime(time.strptime((pat.search(line).group()), '%d/%m/%y %H:%M:%S'))
    DEDENT
    head = []
    output = Set()
    fa = open(o_file)
    fa.readline()
    for line1 in fa :
    INDENT
        if pat.search(line1) : break
        else : head.append(line1)
    DEDENT
    for line in fa :
    INDENT
        output.add(line.rstrip())
    DEDENT
    output.add(line1.rstrip())
    fa.close()
    fb = open(c_file)
    for line1 in fb :
    INDENT
        if pat.search(line1) : break
    DEDENT
    for line in fb :
    INDENT
        output.add(line.rstrip())
    DEDENT
    output.add(line1.rstrip())
    fb.close()
    if '' in output : output.remove('')
    output = [(kl(line), line) for line in output]
    output.sort()
    fm = open(m_file, 'w')
    fm.write(time.strftime('On %d/%m/%y %H:%M:%S\n') + (''.join(head)))
    for t, line in output :
    INDENT
        fm.write(line + '\n')
    DEDENT
    fm.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5429064_34440329_4_12
5429064_5429108_1_10
Title: "How to write list of strings to file adding newlines?" 
----------------------------------------

def generator() :
INDENT
    nums = ['09', '98', '87', '76', '65', '54', '43']
    s_chars = ['*', '&', '^', '%', '$', '#', '@',]

    nums_newlined = (n + "\n" for s in nums)
    with open("list.txt", "w") as data :
    INDENT
        data.writelines(map(''.join, itertools.product(s_chars, nums_newlined)))
    DEDENT
DEDENT
----------------------------------------

def generator() :
INDENT
    nums = ['09', '98', '87', '76', '65', '54', '43']
    s_chars = ['*', '&', '^', '%', '$', '#', '@',]
    data = open("list.txt", "w")
    for c in s_chars :
    INDENT
        for n in nums :
        INDENT
            data.write(c + n)
        DEDENT
        data.write("\n")
    DEDENT
    data.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5432121_5432320_1_17
5432121_5433863_17_21
Title: Python method that is also a generator function? 
----------------------------------------

def optimize(x, want_gen) :
INDENT
    def optimize_gen(x) :
    INDENT
        for i in range(100) :
        INDENT

            x = calculate_next_x(x, foo, bar, baz)
            if want_gen :
            INDENT
                yield x
            DEDENT
        DEDENT
    DEDENT
    if want_gen :
    INDENT
        return optimize_gen(x)
    DEDENT
    for x in optimize_gen(x) :
    INDENT
        pass
    DEDENT
    return x
DEDENT
----------------------------------------

def optimize(x, wantgen) :
INDENT
    if wantgen :
    INDENT
        return iter(Optimize(x))
    DEDENT
    else :
    INDENT
        return Optimize(x)()
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5478699_5478721_1_10
5478699_5478781_1_11
Title: Python script hangs in loop 
----------------------------------------

def online_check(max_checks = 10, current_check = 0) :
INDENT
    try :
    INDENT
        con = urllib2.urlopen("http://www.google.com/")
        data = con.read()
        logging.debug('{0} Reached the host. Exiting online_check'.format(time.strftime('[ %H:%M:%S ]')))
    DEDENT
    except :
    INDENT
        logging.debug('{0} Could not reach host trying again in 3 seconds'.format(time.strftime('[ %H:%M:%S ]')))
        if max_checks > current_check :
        INDENT
            time.sleep(3)
            online_check(max_checks, current_check + 1)
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def online_check() :
INDENT
    while True :
    INDENT
        try :
        INDENT
            con = urllib2.urlopen("http://www.google.com/")
            data = con.read()
            logging.debug('{0} Reached the host. Exiting online_check'.format(time.strftime('[ %H:%M:%S ]')))
        DEDENT
        except urllib2.URLError :
        INDENT
            logging.debug('{0} Could not reach host trying again in 3 seconds'.format(time.strftime('[ %H:%M:%S ]')))
            time.sleep(3)
        DEDENT
        finally :
        INDENT
            con.close()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5481623_18421294_5_13
5481623_5481729_4_12
Title: Python dynamically add decorator to class' methods by decorating class 
----------------------------------------

def wrapped(* args, ** kwargs) :
INDENT
    try :
    INDENT
        print "Entering: [%s] with parameters %s" % (func.__name__, args)
        try :
        INDENT
            return func(* args, ** kwargs)
        DEDENT
        except Exception, e :
        INDENT
            print 'Exception in %s : %s' % (func.__name__, e)
        DEDENT
    DEDENT
    finally :
    INDENT
        print "Exiting: [%s]" % func.__name__
    DEDENT
DEDENT
----------------------------------------

def wrapped(* args, ** kwargs) :
INDENT
    try :
    INDENT
        print "Entering: [%s] with parameters %s" % (func.__name__, args)
        try :
        INDENT
            return func(* args, ** kwargs)
        DEDENT
        except Exception, e :
        INDENT
            print 'Exception in %s : %s' % (func.__name__, e)
        DEDENT
    DEDENT
    finally :
    INDENT
        print "Exiting: [%s]" % func.__name__
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5481739_5481769_1_9
5481739_5484846_1_6
Title: How does this python decorator work? 
----------------------------------------

def decorate(func) :
INDENT
    print "Decorate called"
    def internal(* args, ** kwargs) :
    INDENT
        print "Calling internal"
        func(* args, ** kwargs)
        print "Original function returned: "
    DEDENT
    print "Created the decorated function, returning."
    return internal
DEDENT
----------------------------------------

def decorate(fn) :
INDENT
    def wrapper() :
    INDENT
        fn()
    DEDENT
    print 'Wrapping function ', wrapper
    return wrapper
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5501192_5503152_36_50
5501192_5503152_4_24
Title: How to display picture and get mouse click coordinate on it 
----------------------------------------

def __init__(self, parent = None, id = - 1, filepath = None) :
INDENT
    wx.Frame.__init__(self, parent, id, title = filepath)
    self.canvas = MyCanvas(self, - 1, filepath = filepath)
    self.canvas.SetMinSize((self.canvas.w, self.canvas.h))
    self.canvas.SetMaxSize((self.canvas.w, self.canvas.h))
    self.canvas.SetBackgroundColour(wx.Colour(0, 0, 0))
    vert = wx.BoxSizer(wx.VERTICAL)
    horz = wx.BoxSizer(wx.HORIZONTAL)
    vert.Add(horz, 0, wx.EXPAND, 0)
    vert.Add(self.canvas, 1, wx.EXPAND, 0)
    self.SetSizer(vert)
    vert.Fit(self)
    self.Layout()
DEDENT
----------------------------------------

def __init__(self, parent, id = - 1, size = wx.DefaultSize, filepath = None) :
INDENT
    wx.ScrolledWindow.__init__(self, parent, id, (0, 0), size = size, style = wx.SUNKEN_BORDER)
    self.image = wx.Image(filepath)
    self.w = self.image.GetWidth()
    self.h = self.image.GetHeight()
    self.bmp = wx.BitmapFromImage(self.image)
    self.SetVirtualSize((self.w, self.h))
    self.SetScrollRate(20, 20)
    self.SetBackgroundColour(wx.Colour(0, 0, 0))
    self.buffer = wx.EmptyBitmap(self.w, self.h)
    dc = wx.BufferedDC(None, self.buffer)
    dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
    dc.Clear()
    self.DoDrawing(dc)
    self.Bind(wx.EVT_PAINT, self.OnPaint)
    self.Bind(wx.EVT_LEFT_UP, self.OnClick)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5505967_5506030_6_13
5505967_5506171_9_12
Title: Return a sequence of a variable length whose summation is equal to a given integer 
----------------------------------------

def f2(target_sum, min_length, max_length) :
INDENT
    sequences = {}
    for length in range(min_length, max_length + 1) :
    INDENT
        sequence = f(target_sum, length)
        if len(sequence) :
        INDENT
            sequences [length] = sequence
        DEDENT
    DEDENT
    return sequences
DEDENT
----------------------------------------

def f2(x, y, z) :
INDENT
    for u in range(y, z + 1) :
    INDENT
        for v in f(x, u) :
        INDENT
            yield v
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
553303_22222900_4_13
553303_44674968_5_21
Title: Generate a random date between two other dates 
----------------------------------------

def random_date(start, end, position = None) :
INDENT
    start, end = pd.Timestamp(start), pd.Timestamp(end)
    delta = (end - start).total_seconds()
    if position is None :
    INDENT
        offset = np.random.uniform(0., delta)
    DEDENT
    else :
    INDENT
        offset = position * delta
    DEDENT
    offset = pd.offsets.Second(offset)
    t = start + offset
    return t
DEDENT
----------------------------------------

def random_date(start_time_string, end_time_string, format_string, random_number) :
INDENT
    dt_start = datetime.datetime.strptime(start_time_string, format_string)
    dt_end = datetime.datetime.strptime(end_time_string, format_string)
    start_time = time.mktime(dt_start.timetuple()) + dt_start.microsecond / 1000000.0
    end_time = time.mktime(dt_end.timetuple()) + dt_end.microsecond / 1000000.0
    random_time = start_time + random_number * (end_time - start_time)
    return datetime.datetime.fromtimestamp(random_time).strftime(format_string)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
555009_14146888_5_20
555009_14148086_4_33
Title: Euler problem number #4 
----------------------------------------

def biggest() :
INDENT
    big_x, big_y, max_seen = 0, 0, 0
    for x in xrange(999, 99, - 1) :
    INDENT
        if x * x < max_seen : break
        for y in xrange(x, 99, - 1) :
        INDENT
            if x * y < max_seen : break
            if is_palindrome(x * y) :
            INDENT
                big_x, big_y, max_seen = x, y, x * y
            DEDENT
        DEDENT
    DEDENT
    return big_x, big_y, max_seen
DEDENT
----------------------------------------

def biggest() :
INDENT
    big_x, big_y, max_seen, prod = 0, 0, 0, 0
    for r in xrange(maxFactor, minFactor - 1, - 1) :
    INDENT
        if r * r < max_seen : break
        for i in xrange(0, maxFactor - r + 1) :
        INDENT
            prod = (r + i) * (r - i)
            if prod < max_seen : break
            if is_palindrome(prod) :
            INDENT
                big_x, big_y, max_seen = r + i, r - i, prod

            DEDENT
        DEDENT
        for i in xrange(0, maxFactor - r + 1) :
        INDENT
            prod = (r + i) * (r - i - 1)
            if prod < max_seen : break
            if is_palindrome(prod) :
            INDENT
                big_x, big_y, max_seen = r + i, r - i - 1, prod
            DEDENT
        DEDENT
    DEDENT
    return big_x, big_y, max_seen

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
555009_14148086_4_33
555009_555107_5_15
Title: Euler problem number #4 
----------------------------------------

def biggest() :
INDENT
    big_x, big_y, max_seen, prod = 0, 0, 0, 0
    for r in xrange(maxFactor, minFactor - 1, - 1) :
    INDENT
        if r * r < max_seen : break
        for i in xrange(0, maxFactor - r + 1) :
        INDENT
            prod = (r + i) * (r - i)
            if prod < max_seen : break
            if is_palindrome(prod) :
            INDENT
                big_x, big_y, max_seen = r + i, r - i, prod

            DEDENT
        DEDENT
        for i in xrange(0, maxFactor - r + 1) :
        INDENT
            prod = (r + i) * (r - i - 1)
            if prod < max_seen : break
            if is_palindrome(prod) :
            INDENT
                big_x, big_y, max_seen = r + i, r - i - 1, prod
            DEDENT
        DEDENT
    DEDENT
    return big_x, big_y, max_seen

DEDENT
----------------------------------------

def biggest() :
INDENT
    big_x, big_y, max_seen = 0, 0, 0
    for x in xrange(999, 99, - 1) :
    INDENT
        for y in xrange(x, 99, - 1) :
        INDENT
            if x * y < max_seen : continue
            if is_palindrome(x * y) :
            INDENT
                big_x, big_y, max_seen = x, y, x * y
            DEDENT
        DEDENT
    DEDENT
    return big_x, big_y, max_seen
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5585883_5586816_30_42
5585883_5586816_53_62
Title: Change choice in wx.ComboBox() based on TextCtrl() value in another Notebook Tab 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent, id = wx.ID_ANY)
    self.dirText = wx.StaticText(self, label = "Choice?")
    self.dirT = wx.ComboBox(self, choices = '', style = wx.CB_READONLY)
    self.Bind(wx.EVT_COMBOBOX, self.onSelect, self.dirT)
    sizer = wx.BoxSizer(wx.HORIZONTAL)
    sizer.Add(self.dirText, 0, wx.ALL, 2)
    sizer.Add(self.dirT, 0, wx.ALL | wx.EXPAND, 2)
    self.SetSizer(sizer)
    sizer.Fit(self)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Notebook.__init__(self, parent, id = wx.ID_ANY, style = wx.BK_DEFAULT)
    self.tabOne = InputPanel(self)
    self.AddPage(self.tabOne, "Input")
    self.tabTwo = OutputPanel(self)
    self.AddPage(self.tabTwo, "Output")
    self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.onPageChanged)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5585883_5586816_30_42
5585883_5586816_71_91
Title: Change choice in wx.ComboBox() based on TextCtrl() value in another Notebook Tab 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent, id = wx.ID_ANY)
    self.dirText = wx.StaticText(self, label = "Choice?")
    self.dirT = wx.ComboBox(self, choices = '', style = wx.CB_READONLY)
    self.Bind(wx.EVT_COMBOBOX, self.onSelect, self.dirT)
    sizer = wx.BoxSizer(wx.HORIZONTAL)
    sizer.Add(self.dirText, 0, wx.ALL, 2)
    sizer.Add(self.dirT, 0, wx.ALL | wx.EXPAND, 2)
    self.SetSizer(sizer)
    sizer.Fit(self)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY, "nmrPipeFit", size = (600, 400))
    panel = wx.Panel(self)

    filemenu = wx.Menu()
    menuExit = filemenu.Append(wx.ID_EXIT, "E&xit", "Exit the program")
    menubar = wx.MenuBar()
    menubar.Append(filemenu, "&File")
    self.SetMenuBar(menubar)
    self.Bind(wx.EVT_MENU, self.OnExit, menuExit)
    notebook = Notebook(panel)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(notebook, 1, wx.ALL | wx.EXPAND, 5)
    panel.SetSizer(sizer)
    sizer.Fit(self)
    self.Layout()
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5585883_5586816_53_62
5585883_5586816_71_91
Title: Change choice in wx.ComboBox() based on TextCtrl() value in another Notebook Tab 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Notebook.__init__(self, parent, id = wx.ID_ANY, style = wx.BK_DEFAULT)
    self.tabOne = InputPanel(self)
    self.AddPage(self.tabOne, "Input")
    self.tabTwo = OutputPanel(self)
    self.AddPage(self.tabTwo, "Output")
    self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.onPageChanged)
DEDENT
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY, "nmrPipeFit", size = (600, 400))
    panel = wx.Panel(self)

    filemenu = wx.Menu()
    menuExit = filemenu.Append(wx.ID_EXIT, "E&xit", "Exit the program")
    menubar = wx.MenuBar()
    menubar.Append(filemenu, "&File")
    self.SetMenuBar(menubar)
    self.Bind(wx.EVT_MENU, self.OnExit, menuExit)
    notebook = Notebook(panel)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(notebook, 1, wx.ALL | wx.EXPAND, 5)
    panel.SetSizer(sizer)
    sizer.Fit(self)
    self.Layout()
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5585883_5586816_53_62
5585883_5586816_7_21
Title: Change choice in wx.ComboBox() based on TextCtrl() value in another Notebook Tab 
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Notebook.__init__(self, parent, id = wx.ID_ANY, style = wx.BK_DEFAULT)
    self.tabOne = InputPanel(self)
    self.AddPage(self.tabOne, "Input")
    self.tabTwo = OutputPanel(self)
    self.AddPage(self.tabTwo, "Output")
    self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.onPageChanged)
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent, id = wx.ID_ANY)
    self.dirFileText = wx.StaticText(self, label = "Output Directory:")
    self.dirFile = wx.TextCtrl(self, value = ".", style = wx.TE_PROCESS_ENTER)
    self.Bind(wx.EVT_TEXT, self.EvtText, self.dirFile)
    sizer = wx.BoxSizer(wx.HORIZONTAL)
    sizer.Add(self.dirFileText, 0, wx.ALL, 2)
    sizer.Add(self.dirFile, 0, wx.ALL | wx.EXPAND, 2)
    self.SetSizer(sizer)
    sizer.Fit(self)
    self._dirF = '.'
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5585883_5586816_71_91
5585883_5586816_7_21
Title: Change choice in wx.ComboBox() based on TextCtrl() value in another Notebook Tab 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None, wx.ID_ANY, "nmrPipeFit", size = (600, 400))
    panel = wx.Panel(self)

    filemenu = wx.Menu()
    menuExit = filemenu.Append(wx.ID_EXIT, "E&xit", "Exit the program")
    menubar = wx.MenuBar()
    menubar.Append(filemenu, "&File")
    self.SetMenuBar(menubar)
    self.Bind(wx.EVT_MENU, self.OnExit, menuExit)
    notebook = Notebook(panel)
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(notebook, 1, wx.ALL | wx.EXPAND, 5)
    panel.SetSizer(sizer)
    sizer.Fit(self)
    self.Layout()
    self.Show()
DEDENT
----------------------------------------

def __init__(self, parent) :
INDENT
    wx.Panel.__init__(self, parent = parent, id = wx.ID_ANY)
    self.dirFileText = wx.StaticText(self, label = "Output Directory:")
    self.dirFile = wx.TextCtrl(self, value = ".", style = wx.TE_PROCESS_ENTER)
    self.Bind(wx.EVT_TEXT, self.EvtText, self.dirFile)
    sizer = wx.BoxSizer(wx.HORIZONTAL)
    sizer.Add(self.dirFileText, 0, wx.ALL, 2)
    sizer.Add(self.dirFile, 0, wx.ALL | wx.EXPAND, 2)
    self.SetSizer(sizer)
    sizer.Fit(self)
    self._dirF = '.'
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5603364_20150235_1_12
5603364_5603420_6_20
Title: How to code argparse combinational options in python 
----------------------------------------

def main() :
INDENT
    description = 'Package Compare/Verifier tool.'
    parser = argparse.ArgumentParser(usage = None, description = description)
    maingroup = parser.add_argument_group(title = 'required')
    maingroup.add_argument('-f', '--file', nargs = 1, dest = 'outFileName', help = 'File Name where result is stored.', metavar = "outFileName", required = True)
    exgroup = parser.add_argument_group(title = 'one or the other')
    group = exgroup.add_mutually_exclusive_group(required = True)
    group.add_argument('-c', '--compare', nargs = 2, dest = 'packageInfo', help = 'Compare two packages.', metavar = ("Package1", "Package2"))
    group.add_argument('-v', '--verify', nargs = 1, dest = 'packageName', help = 'Verify Content of package.', metavar = 'Package')
    args = parser.parse_args()
DEDENT
----------------------------------------

def main() :
INDENT
    description = 'Package Compare/Verifier tool.'
    parser = argparse.ArgumentParser(description = description,
        epilog = '--compare and --verify are mutually exclusive')
    parser.add_argument('f', action = 'store', nargs = 1,
        help = 'File Name where result is stored.',
        metavar = "outFileName")
    group = parser.add_mutually_exclusive_group(required = False)
    group.add_argument('-c', '--compare', action = 'store', nargs = 2, dest = 'packageInfo', help = 'Compare two packages.', metavar = ("Package1", "Package2"))
    group.add_argument('-v', '--verify', action = 'store', nargs = 1, dest = 'packageName', help = 'Verify Content of package.', metavar = 'Package')
    args = parser.parse_args()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5649869_5653163_5_26
5649869_5658942_4_22
Title: wxpython: Prevent horizontal growth of specific fields 
----------------------------------------

def __init__(self) :
INDENT
    wx.Frame.__init__(self, None)
    self.SetBackgroundColour(wx.GREEN)
    bSizer1 = wx.BoxSizer(wx.VERTICAL)
    panel1 = wx.Panel(self)
    bSizer1.Add(panel1, 1, wx.EXPAND | wx.ALL, 5)
    bSizer2 = wx.BoxSizer(wx.HORIZONTAL)
    panel2 = wx.Panel(self, size = (- 1, 50))
    bSizer2.Add(panel2, 1, wx.EXPAND | wx.ALL, 5)
    panel3 = wx.Panel(self, size = (- 1, 50))
    bSizer2.Add(panel3, 1, wx.EXPAND | wx.ALL, 5)
    bSizer1.Add(bSizer2, 0, wx.EXPAND, 5)
    self.SetSizer(bSizer1)

DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    wx.Frame.__init__(self, * args, ** kwargs)
    self.panel1 = wx.Panel(self)
    self.panel1.SetBackgroundColour(wx.GREEN)
    self.panel2 = wx.Panel(self)
    self.panel2.SetBackgroundColour(wx.RED)
    self.panel3 = wx.Panel(self)
    self.panel3.SetBackgroundColour(wx.WHITE)
    self.sizer1 = wx.BoxSizer()
    self.sizer2 = wx.BoxSizer(wx.VERTICAL)
    self.sizer1.Add(self.panel1, proportion = 1, flag = wx.EXPAND)
    self.sizer1.Add(self.panel2, proportion = 1, flag = wx.EXPAND)
    self.sizer2.Add(self.panel3, proportion = 1, flag = wx.EXPAND)
    self.sizer2.Add(self.sizer1, proportion = 0, flag = wx.EXPAND)
    self.SetSizerAndFit(self.sizer2)
    self.Show()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5656922_5656982_1_14
5656922_5657024_21_32
Title: "Read file error in Python even though print function is printing the list" 
----------------------------------------

def search_names(list) :
INDENT
    again = 'Y'
    while again.upper == 'Y' :
    INDENT

        search = raw_input('Enter a name to search for: ')
        if search in list :
        INDENT
            try :
            INDENT
                item_index = list.index(search)
                print search, 'found.', item_index
            DEDENT
            except ValueError :
            INDENT
                print search, 'not found.'
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def search_names(namelist) :
INDENT
    while True :
    INDENT
        lookfor = raw_input('Enter a name to search for (or nothing to quit): ').strip()
        if lookfor :
        INDENT
            try :
            INDENT
                ind = namelist.index(lookfor)
                print ("{0} found.".format(lookfor))
            DEDENT
            except ValueError :
            INDENT
                print ("{0} not found.".format(lookfor))
            DEDENT
        DEDENT
        else :
        INDENT
            break
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5664158_5731668_14_28
5664158_5731668_36_49
Title: PyGame get sprite group 
----------------------------------------

def __init__(self, x, y, width, height) :
INDENT
    pygame.sprite.Sprite.__init__(self)

    self.image = pygame.Surface([width, height])
    self.image.fill(blue)

    self.rect = self.image.get_rect()
    self.rect.top = y
    self.rect.left = x

DEDENT
----------------------------------------

def __init__(self, x, y) :
INDENT
    pygame.sprite.Sprite.__init__(self)

    self.image = pygame.Surface([15, 15])
    self.image.fill(white)

    self.rect = self.image.get_rect()
    self.rect.top = y
    self.rect.left = x

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5686211_5698950_9_27
5686211_5708736_6_11
Title: Is there a function that can calculate a score for aligned sequences given the alignment parameters? 
----------------------------------------

def score_pairwise(seq1, seq2, matrix, gap_s, gap_e) :
INDENT
    score = 0
    gap = False
    for i in range(len(seq1)) :
    INDENT
        pair = (seq1 [i], seq2 [i])
        if not gap :
        INDENT
            if '-' in pair :
            INDENT
                gap = True
                score += gap_s
            DEDENT
            else :
            INDENT
                score += score_match(pair, matrix)
            DEDENT
        DEDENT
        else :
        INDENT
            if '-' not in pair :
            INDENT
                gap = False
                score += score_match(pair, matrix)
            DEDENT
            else :
            INDENT
                score += gap_e
            DEDENT
        DEDENT
    DEDENT
    return score
DEDENT
----------------------------------------

def score_pairwise(seq1, seq2, matrix, gap_s, gap_e, gap = True) :
INDENT
    for A, B in izip(seq1, seq2) :
    INDENT
        diag = ('-' == A) or ('-' == B)
        yield (gap_e if gap else gap_s) if diag else matrix [(A, B)]
        gap = diag
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5687056_5687085_147_161
5687056_5687085_96_100
Title: Parsing a file with multiple xmls in it 
----------------------------------------

def __init__(self, validate) :
INDENT
    self.stack = []
    self.errors = []
    self.integers = []
    self.strings = []
    self.lists = []
    self.dictionaries = []
    self.structures = {}
    self.items = []
    self.dtd_urls = []
    self.validating = validate
    self.parser = expat.ParserCreate(namespace_separator = " ")
    self.parser.SetParamEntityParsing(expat.XML_PARAM_ENTITY_PARSING_ALWAYS)
    self.parser.XmlDeclHandler = self.xmlDeclHandler
DEDENT
----------------------------------------

def __init__(self, keys) :
INDENT
    dict.__init__(self)
    for key in keys :
    INDENT
        dict.__setitem__(self, key, [])
    DEDENT
    self.listkeys = keys
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5723919_5724010_1_21
5723919_5725062_50_69
Title: How to convert pounds to kilograms in Python 
----------------------------------------

def conversion() :
INDENT
    amount = input("Please specify the amount: ")
    if type(amount) is int :
    INDENT
        print "derp"
    DEDENT
    answer = raw_input("Please choose between converting FROM kilograms/pounds: ")
    if answer == "kilograms" :
    INDENT
        return (amount * 2.2, "pounds")
    DEDENT
    elif answer == "pounds" :
    INDENT
        return (amount / 2.2, "kilograms")
    DEDENT
    else :
    INDENT
        print "Please choose between kilograms and pounds."
        restart = raw_input("Try again? ")
        if restart == "yes" :
        INDENT
            conversion()
            return 0
        DEDENT
        elif restart == "y" :
        INDENT
            conversion()
            return 0
        DEDENT
        else :
        INDENT
            print "Okay, bye."
            return
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def conversion(s) :
INDENT
    s = s.strip().lower().split()
    if len(s) not in (3, 4) :
    INDENT
        raise ValueError("Argument string has wrong number of words (should be three or four)")
    DEDENT
    try :
    INDENT
        amt = float(s [0])
    DEDENT
    except ValueError :
    INDENT
        raise ValueError("Argument string must start with a number")
    DEDENT
    from_unit = s [1]
    to_unit = s [- 1]
    return convert(amt, from_unit, to_unit)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5732952_5753888_174_189
5732952_5753888_69_85
Title: Draw on image buffer (MemoryDC) in separate thread 
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    wx.Frame.__init__(self, * args, ** kwargs)
    self.panel = wx.Panel(self)
    self.drawing = DrawPanel(self.panel, size = (300, 300))
    self.drawingDB = DrawPanelDB(self.panel, size = (300, 300))
    self.drawingDBT = DrawPanelDBT(self.panel, size = (300, 300))
    self.sizerPanel = wx.BoxSizer()
    self.sizerPanel.Add(self.panel, proportion = 1, flag = wx.EXPAND)
    self.sizerMain = wx.BoxSizer()
    self.sizerMain.Add(self.drawing, 1, wx.ALL | wx.EXPAND, 5)
    self.sizerMain.Add(self.drawingDB, 1, wx.ALL | wx.EXPAND, 5)
    self.sizerMain.Add(self.drawingDBT, 1, wx.ALL | wx.EXPAND, 5)
    self.panel.SetSizerAndFit(self.sizerMain)
    self.SetSizerAndFit(self.sizerPanel)
    self.Show()
DEDENT
----------------------------------------

def __init__(self, * args, ** kwargs) :
INDENT
    wx.Panel.__init__(self, * args, ** kwargs)
    self.t = None
    self.w, self.h = self.GetClientSizeTuple()
    self.buffer = wx.EmptyBitmap(self.w, self.h)
    self.Bind(wx.EVT_PAINT, self.OnPaint)
    self.Bind(wx.EVT_SIZE, self.OnSize)
    self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)
    self.timer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.OnTimer, self.timer)
    self.SizeUpdate()

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5732952_5753888_18_25
5732952_5753888_47_55
Title: Draw on image buffer (MemoryDC) in separate thread 
----------------------------------------

def OnPaint(self, event) :
INDENT
    dc = wx.PaintDC(self)
    dc.SetBackground(wx.Brush(wx.BLACK))
    dc.Clear()
    w, h = self.GetClientSizeTuple()
    dc.DrawCirclePoint((w / 2, h / 2), 50)

DEDENT
----------------------------------------

def OnPaint(self, event) :
INDENT
    dc = wx.BufferedPaintDC(self)
    dc.SetBackground(wx.Brush(wx.BLACK))
    dc.Clear()
    w, h = self.GetClientSizeTuple()
    dc.DrawCirclePoint((w / 2, h / 2), 50)

DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5734438_5734512_1_10
5734438_5734974_1_12
Title: How to create a month iterator 
----------------------------------------

def months(start_month, start_year, end_month, end_year) :
INDENT
    month, year = start_month, start_year
    while True :
    INDENT
        yield month, year
        if (month, year) == (end_month, end_year) :
        INDENT
            return
        DEDENT
        month += 1
        if (month > 12) :
        INDENT
            month = 1
            year += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def months(start_month, start_year, end_month, end_year) :
INDENT
    if start_year == end_year :
    INDENT
        for month in xrange(start_month, end_month + 1) :
        INDENT
            yield month, start_year
        DEDENT
    DEDENT
    else :
    INDENT
        for month in xrange(start_month, 13) :
        INDENT
            yield month, start_year
        DEDENT
        for year in xrange(start_year + 1, end_year) :
        INDENT
            for month in xrange(1, 13) :
            INDENT
                yield month, year
            DEDENT
        DEDENT
        for month in xrange(1, end_month + 1) :
        INDENT
            yield end_month, end_year
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5734438_5734512_1_10
5734438_5736047_1_12
Title: How to create a month iterator 
----------------------------------------

def months(start_month, start_year, end_month, end_year) :
INDENT
    month, year = start_month, start_year
    while True :
    INDENT
        yield month, year
        if (month, year) == (end_month, end_year) :
        INDENT
            return
        DEDENT
        month += 1
        if (month > 12) :
        INDENT
            month = 1
            year += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def months(start_month, start_year, end_month, end_year) :
INDENT
    month, year = start_month, start_year
    while (year, month) < = (end_year, end_month) :
    INDENT
        yield month, year
        month += 1
        if month > 12 :
        INDENT
            month = 1
            year += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5734438_5734974_1_12
5734438_5736047_1_12
Title: How to create a month iterator 
----------------------------------------

def months(start_month, start_year, end_month, end_year) :
INDENT
    if start_year == end_year :
    INDENT
        for month in xrange(start_month, end_month + 1) :
        INDENT
            yield month, start_year
        DEDENT
    DEDENT
    else :
    INDENT
        for month in xrange(start_month, 13) :
        INDENT
            yield month, start_year
        DEDENT
        for year in xrange(start_year + 1, end_year) :
        INDENT
            for month in xrange(1, 13) :
            INDENT
                yield month, year
            DEDENT
        DEDENT
        for month in xrange(1, end_month + 1) :
        INDENT
            yield end_month, end_year
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def months(start_month, start_year, end_month, end_year) :
INDENT
    month, year = start_month, start_year
    while (year, month) < = (end_year, end_month) :
    INDENT
        yield month, year
        month += 1
        if month > 12 :
        INDENT
            month = 1
            year += 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5753457_5754008_16_23
5753457_5754941_9_18
Title: Why does this python regular expression return the wrong string 
----------------------------------------

def ReplaceCRC(file_handle) :
INDENT
    regex = re.compile(r'(_CalcCRC[(]\s*)"(\w+)"(\s*[)])')
    for line in file_handle :
    INDENT
        print "line:", repr(line)
        line2 = regex.sub(repl_func, line)
        print "line2:", repr(line2)
    DEDENT
    return
DEDENT
----------------------------------------

def ReplaceCRC(file_path, regx = regx, ripl = ripl) :
INDENT
    with open(file_path, 'r+') as f :
    INDENT
        file_str = f.read()
        print file_str, '\n'
        if file_str :
        INDENT
            file_str = regx.sub(ripl, file_str)
            print file_str
            f.seek(0, 0)
            f.write(file_str)
            f.truncate()
        DEDENT
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
57708_34463462_11_28
57708_573629_10_38
Title: Convert XML/HTML Entities into Unicode String in Python 
----------------------------------------

def fixup(m) :
INDENT
    text = m.group(0)
    if text [: 2] == "&#" :
    INDENT
        try :
        INDENT
            if text [: 3] == "&#x" :
            INDENT
                return chr(int(text [3 : - 1], 16))
            DEDENT
            else :
            INDENT
                return chr(int(text [2 : - 1]))
            DEDENT
        DEDENT
        except ValueError :
        INDENT
            pass
        DEDENT
    DEDENT
    else :
    INDENT
        try :
        INDENT
            text = chr(html.entities.name2codepoint [text [1 : - 1]])
        DEDENT
        except KeyError :
        INDENT
            pass
        DEDENT
    DEDENT
    return text
DEDENT
----------------------------------------

def fixup(m) :
INDENT
    text = m.group(0)
    if text [: 2] == "&#" :
    INDENT
        try :
        INDENT
            if text [: 3] == "&#x" :
            INDENT
                return unichr(int(text [3 : - 1], 16))
            DEDENT
            else :
            INDENT
                return unichr(int(text [2 : - 1]))
            DEDENT
        DEDENT
        except ValueError :
        INDENT
            print "Value Error"
            pass
        DEDENT
    DEDENT
    else :
    INDENT
        try :
        INDENT
            if text [1 : - 1] == "amp" :
            INDENT
                text = "&amp;amp;"
            DEDENT
            elif text [1 : - 1] == "gt" :
            INDENT
                text = "&amp;gt;"
            DEDENT
            elif text [1 : - 1] == "lt" :
            INDENT
                text = "&amp;lt;"
            DEDENT
            else :
            INDENT
                print text [1 : - 1]
                text = unichr(htmlentitydefs.name2codepoint [text [1 : - 1]])
            DEDENT
        DEDENT
        except KeyError :
        INDENT
            print "keyerror"
            pass
        DEDENT
    DEDENT
    return text
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
57708_34463462_11_28
57708_58125_10_27
Title: Convert XML/HTML Entities into Unicode String in Python 
----------------------------------------

def fixup(m) :
INDENT
    text = m.group(0)
    if text [: 2] == "&#" :
    INDENT
        try :
        INDENT
            if text [: 3] == "&#x" :
            INDENT
                return chr(int(text [3 : - 1], 16))
            DEDENT
            else :
            INDENT
                return chr(int(text [2 : - 1]))
            DEDENT
        DEDENT
        except ValueError :
        INDENT
            pass
        DEDENT
    DEDENT
    else :
    INDENT
        try :
        INDENT
            text = chr(html.entities.name2codepoint [text [1 : - 1]])
        DEDENT
        except KeyError :
        INDENT
            pass
        DEDENT
    DEDENT
    return text
DEDENT
----------------------------------------

def fixup(m) :
INDENT
    text = m.group(0)
    if text [: 2] == "&#" :
    INDENT
        try :
        INDENT
            if text [: 3] == "&#x" :
            INDENT
                return unichr(int(text [3 : - 1], 16))
            DEDENT
            else :
            INDENT
                return unichr(int(text [2 : - 1]))
            DEDENT
        DEDENT
        except ValueError :
        INDENT
            pass
        DEDENT
    DEDENT
    else :
    INDENT
        try :
        INDENT
            text = unichr(htmlentitydefs.name2codepoint [text [1 : - 1]])
        DEDENT
        except KeyError :
        INDENT
            pass
        DEDENT
    DEDENT
    return text
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
57708_34463462_4_29
57708_573629_1_39
Title: Convert XML/HTML Entities into Unicode String in Python 
----------------------------------------

def unescape(text) :
INDENT
    def fixup(m) :
    INDENT
        text = m.group(0)
        if text [: 2] == "&#" :
        INDENT
            try :
            INDENT
                if text [: 3] == "&#x" :
                INDENT
                    return chr(int(text [3 : - 1], 16))
                DEDENT
                else :
                INDENT
                    return chr(int(text [2 : - 1]))
                DEDENT
            DEDENT
            except ValueError :
            INDENT
                pass
            DEDENT
        DEDENT
        else :
        INDENT
            try :
            INDENT
                text = chr(html.entities.name2codepoint [text [1 : - 1]])
            DEDENT
            except KeyError :
            INDENT
                pass
            DEDENT
        DEDENT
        return text
    DEDENT
    return re.sub("&#?\w+;", fixup, text)
DEDENT
----------------------------------------

def unescape(text) :
INDENT
    def fixup(m) :
    INDENT
        text = m.group(0)
        if text [: 2] == "&#" :
        INDENT
            try :
            INDENT
                if text [: 3] == "&#x" :
                INDENT
                    return unichr(int(text [3 : - 1], 16))
                DEDENT
                else :
                INDENT
                    return unichr(int(text [2 : - 1]))
                DEDENT
            DEDENT
            except ValueError :
            INDENT
                print "Value Error"
                pass
            DEDENT
        DEDENT
        else :
        INDENT
            try :
            INDENT
                if text [1 : - 1] == "amp" :
                INDENT
                    text = "&amp;amp;"
                DEDENT
                elif text [1 : - 1] == "gt" :
                INDENT
                    text = "&amp;gt;"
                DEDENT
                elif text [1 : - 1] == "lt" :
                INDENT
                    text = "&amp;lt;"
                DEDENT
                else :
                INDENT
                    print text [1 : - 1]
                    text = unichr(htmlentitydefs.name2codepoint [text [1 : - 1]])
                DEDENT
            DEDENT
            except KeyError :
            INDENT
                print "keyerror"
                pass
            DEDENT
        DEDENT
        return text
    DEDENT
    return re.sub("&#?\w+;", fixup, text)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
57708_573629_10_38
57708_58125_10_27
Title: Convert XML/HTML Entities into Unicode String in Python 
----------------------------------------

def fixup(m) :
INDENT
    text = m.group(0)
    if text [: 2] == "&#" :
    INDENT
        try :
        INDENT
            if text [: 3] == "&#x" :
            INDENT
                return unichr(int(text [3 : - 1], 16))
            DEDENT
            else :
            INDENT
                return unichr(int(text [2 : - 1]))
            DEDENT
        DEDENT
        except ValueError :
        INDENT
            print "Value Error"
            pass
        DEDENT
    DEDENT
    else :
    INDENT
        try :
        INDENT
            if text [1 : - 1] == "amp" :
            INDENT
                text = "&amp;amp;"
            DEDENT
            elif text [1 : - 1] == "gt" :
            INDENT
                text = "&amp;gt;"
            DEDENT
            elif text [1 : - 1] == "lt" :
            INDENT
                text = "&amp;lt;"
            DEDENT
            else :
            INDENT
                print text [1 : - 1]
                text = unichr(htmlentitydefs.name2codepoint [text [1 : - 1]])
            DEDENT
        DEDENT
        except KeyError :
        INDENT
            print "keyerror"
            pass
        DEDENT
    DEDENT
    return text
DEDENT
----------------------------------------

def fixup(m) :
INDENT
    text = m.group(0)
    if text [: 2] == "&#" :
    INDENT
        try :
        INDENT
            if text [: 3] == "&#x" :
            INDENT
                return unichr(int(text [3 : - 1], 16))
            DEDENT
            else :
            INDENT
                return unichr(int(text [2 : - 1]))
            DEDENT
        DEDENT
        except ValueError :
        INDENT
            pass
        DEDENT
    DEDENT
    else :
    INDENT
        try :
        INDENT
            text = unichr(htmlentitydefs.name2codepoint [text [1 : - 1]])
        DEDENT
        except KeyError :
        INDENT
            pass
        DEDENT
    DEDENT
    return text
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
57708_573629_1_39
57708_58125_9_28
Title: Convert XML/HTML Entities into Unicode String in Python 
----------------------------------------

def unescape(text) :
INDENT
    def fixup(m) :
    INDENT
        text = m.group(0)
        if text [: 2] == "&#" :
        INDENT
            try :
            INDENT
                if text [: 3] == "&#x" :
                INDENT
                    return unichr(int(text [3 : - 1], 16))
                DEDENT
                else :
                INDENT
                    return unichr(int(text [2 : - 1]))
                DEDENT
            DEDENT
            except ValueError :
            INDENT
                print "Value Error"
                pass
            DEDENT
        DEDENT
        else :
        INDENT
            try :
            INDENT
                if text [1 : - 1] == "amp" :
                INDENT
                    text = "&amp;amp;"
                DEDENT
                elif text [1 : - 1] == "gt" :
                INDENT
                    text = "&amp;gt;"
                DEDENT
                elif text [1 : - 1] == "lt" :
                INDENT
                    text = "&amp;lt;"
                DEDENT
                else :
                INDENT
                    print text [1 : - 1]
                    text = unichr(htmlentitydefs.name2codepoint [text [1 : - 1]])
                DEDENT
            DEDENT
            except KeyError :
            INDENT
                print "keyerror"
                pass
            DEDENT
        DEDENT
        return text
    DEDENT
    return re.sub("&#?\w+;", fixup, text)
DEDENT
----------------------------------------

def unescape(text) :
INDENT
    def fixup(m) :
    INDENT
        text = m.group(0)
        if text [: 2] == "&#" :
        INDENT
            try :
            INDENT
                if text [: 3] == "&#x" :
                INDENT
                    return unichr(int(text [3 : - 1], 16))
                DEDENT
                else :
                INDENT
                    return unichr(int(text [2 : - 1]))
                DEDENT
            DEDENT
            except ValueError :
            INDENT
                pass
            DEDENT
        DEDENT
        else :
        INDENT
            try :
            INDENT
                text = unichr(htmlentitydefs.name2codepoint [text [1 : - 1]])
            DEDENT
            except KeyError :
            INDENT
                pass
            DEDENT
        DEDENT
        return text
    DEDENT
    return re.sub("&#?\w+;", fixup, text)
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5777916_5777935_2_10
5777916_5783528_3_13
Title: Export entire regex group to text file 
----------------------------------------

def main() :
INDENT
    with open('sirs.txt') as f :
    INDENT
        with open("sirs1.txt", "w") as fw :
        INDENT
            for lines in f :
            INDENT
                match = re.search('(AA|BB|CC|DD)......', lines)
                if match :
                INDENT
                    a = match.group()
                    print (a)
                    fw.write(a)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def main() :
INDENT
    f = open('sirs.txt')
    outputfile = open('sirs1.txt', 'w')
    for lines in f :
    INDENT
        match = re.search('(AA|BB|CC|DD)......', lines)
        if match :
        INDENT
            a = match.group()
            print (a)
            outputfile.write(a + '/n')
        DEDENT
    DEDENT
    f.close()
    outputfile.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5793252_5793418_1_11
5793252_6797154_6_22
Title: TCP server is closing connections 
----------------------------------------

def handle(self) :
INDENT
    close = 0
    while not close :
    INDENT
        _data = self.request.recv(1024)
        if not _data :
        INDENT
            return
        DEDENT
        Utils.log("Received from %s: %s" % (self.client_address, _data))
        self.request.send('got %d bytes\r\n' % len(_data))
        if 'quit' in _data :
        INDENT
            close = 1
        DEDENT
    DEDENT
DEDENT
----------------------------------------

def handle(self) :
INDENT
    while 1 :
    INDENT

        data = self.request.recv(self.BUFFER_SIZE)
        if (len(data) == self.BUFFER_SIZE) :
        INDENT
            while 1 :
            INDENT
                try :
                INDENT
                    data += self.request.recv(self.BUFFER_SIZE, socket.MSG_DONTWAIT)
                DEDENT
                except :
                INDENT
                    break
                DEDENT
            DEDENT
        DEDENT
        if (data == "") : break
        print "%s (%s) wrote: %s" % (self.client_address [0], threading.currentThread().getName(), data.strip())
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5827411_5827465_1_12
5827411_5827611_1_13
Title: *python code* problem/s with .txt file and tuples + dictionaries 
----------------------------------------

def showScores() :
INDENT
    inFile = open("scores.txt", 'r')
    scorelist = []
    for line in inFile :
    INDENT
        line = line.strip()
        namescore = tuple(p.strip() for p in line.split(","))
        scorelist.append(namescore)
    DEDENT
    scorelist.sort(key = lambda namescore : int(namescore [1]))
    print "High Scores:"
    for name, score in scorelist :
    INDENT
        print name, score
    DEDENT
    inFile.close()
DEDENT
----------------------------------------

def showScores() :
INDENT
    inFile = open("scores.txt", 'r')
    scorelist = []
    for line in inFile :
    INDENT
        line = line.strip()
        score = [p.strip() for p in line.split(",")]
        score [1] = int(score [1])
        scorelist.append(tuple(score))
    DEDENT
    scorelist.sort(key = lambda x : x [1])
    print "High Scores:"
    for score in scorelist :
    INDENT
        print score [0], score [1]
    DEDENT
    inFile.close()
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5838479_5838544_17_21
5838479_5838576_15_21
Title: What is the best way to end this thread when a function is called? 
----------------------------------------

def run(self) :
INDENT
    while self.is_running :
    INDENT
        item = self.request_queue.get(True)
        print item
    DEDENT
    self.has_finished = True
DEDENT
----------------------------------------

def run(self) :
INDENT
    while True :
    INDENT
        item = self.request_queue.get(True)
        if item is poison :
        INDENT
            return
        DEDENT
        print item
    DEDENT
DEDENT
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5838479_5838544_17_21
5838479_5838660_3_10
Title: What is the best way to end this thread when a function is called? 
----------------------------------------

def run(self) :
INDENT
    while self.is_running :
    INDENT
        item = self.request_queue.get(True)
        print item
    DEDENT
    self.has_finished = True
DEDENT
----------------------------------------

def run(queue) :
INDENT
    while True :
    INDENT
        item = queue.get()
        queue.task_done()
        if item is DONE :
        INDENT
            break
        DEDENT
        print item
    DEDENT
DEDENT
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42157170_42157426_3_21
42157170_42157700_4_17
Title: Simple C program is not storing the correct value of the input taken in the variable 
----------------------------------------

int main (void) {
    long long int sum = 0;
    while (1) {
        int num;
        printf ("Enter number (0 - exit): ");
        if (scanf ("%d", &num) != 1 || num == 0)
            break;
        sum += num;
    }
    printf ("\nAnswer = %lld\n", sum);
    return 0;
}
----------------------------------------

int main () {
    int num, sum = 0;
    printf ("Enter the number: ");
    do {
        scanf ("%d", & num);
        sum = sum + num;
    }
    while (num != 0);
    printf ("Answerr = %d", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42167475_42167832_3_40
42167475_42167836_3_37
Title: Reading and writing files in C isn't giving correct output 
----------------------------------------

int main (int arg, char *argv []) {
    FILE *intsFile = fopen ("ints.txt", "w");
    FILE *charsFile = fopen ("chars.txt", "w");
    FILE *floatsFile = fopen ("floats.txt", "w");
    FILE *inputFile = fopen ("input.txt", "r");
    char characters;
    int integers;
    float floats;
    char space;
    char flag;
    while (fscanf (inputFile, "%c ", &flag) != EOF) {
        if (flag == 'C') {
            fscanf (inputFile, "%c", & characters);
            fprintf (charsFile, "%c ", characters);
        }
        if (flag == 'F') {
            fscanf (inputFile, "%f", & floats);
            fprintf (floatsFile, "%f ", floats);
        }
        if (flag == 'I') {
            fscanf (inputFile, "%i", & integers);
            fprintf (intsFile, "%i", integers);
        }
        fscanf (inputFile, "%c", & space);
    }
    return 0;
}
----------------------------------------

int main (int arg, char *argv []) {
    FILE *intsFile = fopen ("ints.txt", "wt");
    FILE *charsFile = fopen ("chars.txt", "wt");
    FILE *floatsFile = fopen ("floats.txt", "wt");
    FILE *inputFile = fopen ("input.txt", "r");
    char characters;
    int integers;
    float floats;
    char flag;
    while (fscanf (inputFile, "%c", &flag) != EOF) {
        if (flag == 'C') {
            fscanf (inputFile, " %c", & characters);
            fprintf (charsFile, "%c ", characters);
        }
        if (flag == 'F') {
            fscanf (inputFile, "%f", & floats);
            fprintf (floatsFile, "%f ", floats);
        }
        if (flag == 'I') {
            fscanf (inputFile, "%i", & integers);
            fprintf (intsFile, "%i ", integers);
        }
    }
    fclose (intsFile);
    fclose (charsFile);
    fclose (floatsFile);
    fclose (inputFile);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42171100_42174149_3_33
42171100_42174240_3_35
Title: Having Trouble Calculating The Correct Average of 10 Integer Values in C 
----------------------------------------

int main (void) {
    int count, value, sum;
    double avg;
    count = 0;
    sum = 0;
    avg = 0.0;
    while (count < 10) {
        printf ("Enter a positive Integer\n");
        if (scanf ("%d", &value) != 1) {
            break;
        }
        if (value >= 0) {
            sum = sum + value;
            count = count + 1;
        }
        else {
            printf ("Value must be positive\n");
        }
    }
    if (count > 0) {
        avg = (double) sum / count;
        printf ("average is %f\n", avg);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int count = 0, value = 0, sum = 0;
    double avg = 0.0;
    while (1) {
        int rtn;
        printf ("Enter a positive Integer ([ctrl+d] to quit): ");
        if ((rtn = scanf ("%d", &value)) != 1) {
            if (rtn == EOF) {
                putchar ('\n');
                break;
            }
        }
        if (value < 0) {
            printf ("Value must be positive\n");
            continue;
        }
        sum = sum + value;
        count = count + 1;
    }
    avg = count > 0 ? (double) sum / count : 0;
    printf ("\n (%d/%d) => average: %lf\n", sum, count, avg);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42172565_42172644_3_35
42172565_42172974_3_52
Title: Excluding User's Input Value from Output 
----------------------------------------

int main () {
    int age, avAge, minAge, maxAge, sum;
    minAge = 100000;
    maxAge = -1;
    sum = 0;
    int iteration = 0;
    do {
        printf ("Please enter age: , -1 to quit \n");
        scanf ("%d", & age);
        if (age >= 0 && age <= 100) {
            printf ("Nice try!\n");
            iteration++;
            sum += age;
            avAge = sum / age;
            if (age < minAge)
                minAge = age;
            if (age > maxAge)
                maxAge = age;
        }
        else {
            printf ("Smallest: %d\n", minAge);
            printf ("Largest: %d\n", maxAge);
            printf ("Average: %d\n", avAge);
            break;
        }
    }
    while (age > 0 && age <= 100);
    return 0;
}
----------------------------------------

int main (void) {
    int age, minAge, maxAge, sum, avAge;
    sum = 0;
    int i = 0;
    printf ("Please enter age: ");
    while (scanf ("%d", &age)) {
        if (age > 0 && age <= 100) {
            sum += age;
            if (i == 0) {
                minAge = age;
                maxAge = age;
                ++i;
            }
            else {
                if (age < minAge) {
                    minAge = age;
                }
                if (age > maxAge) {
                    maxAge = age;
                }
                ++i;
            }
        }
        else if (age == 0) {
            break;
        }
        else {
            printf ("Nice try!\n");
        }
        printf ("Please enter age: ");
    }
    avAge = sum / i;
    printf ("Smallest: %d\n", minAge);
    printf ("Largest: %d\n", maxAge);
    printf ("Average: %d\n", avAge);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42172565_42172644_3_35
42172565_42172979_3_28
Title: Excluding User's Input Value from Output 
----------------------------------------

int main () {
    int age, avAge, minAge, maxAge, sum;
    minAge = 100000;
    maxAge = -1;
    sum = 0;
    int iteration = 0;
    do {
        printf ("Please enter age: , -1 to quit \n");
        scanf ("%d", & age);
        if (age >= 0 && age <= 100) {
            printf ("Nice try!\n");
            iteration++;
            sum += age;
            avAge = sum / age;
            if (age < minAge)
                minAge = age;
            if (age > maxAge)
                maxAge = age;
        }
        else {
            printf ("Smallest: %d\n", minAge);
            printf ("Largest: %d\n", maxAge);
            printf ("Average: %d\n", avAge);
            break;
        }
    }
    while (age > 0 && age <= 100);
    return 0;
}
----------------------------------------

int main (void) {
    int age, avAge = 0, minAge = INT_MAX, maxAge = 0, sum = 0, avgCounter = 1;
    while (1) {
        printf ("Please enter age: \n");
        scanf ("%d", & age);
        if (age == -1)
            break;
        else if (age < -1 && age > 100)
            printf ("Nice try!\n");
        else if (age < minAge)
            minAge = age;
        else if (age > maxAge)
            maxAge = age;
        sum += age;
        avAge = sum / avgCounter;
        avgCounter++;
    }
    printf ("Smallest: %d\n", minAge == INT_MAX ? 0 : minAge);
    printf ("Largest: %d\n", maxAge);
    printf ("Average: %d\n", avAge);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42172565_42172974_3_52
42172565_42172979_3_28
Title: Excluding User's Input Value from Output 
----------------------------------------

int main (void) {
    int age, minAge, maxAge, sum, avAge;
    sum = 0;
    int i = 0;
    printf ("Please enter age: ");
    while (scanf ("%d", &age)) {
        if (age > 0 && age <= 100) {
            sum += age;
            if (i == 0) {
                minAge = age;
                maxAge = age;
                ++i;
            }
            else {
                if (age < minAge) {
                    minAge = age;
                }
                if (age > maxAge) {
                    maxAge = age;
                }
                ++i;
            }
        }
        else if (age == 0) {
            break;
        }
        else {
            printf ("Nice try!\n");
        }
        printf ("Please enter age: ");
    }
    avAge = sum / i;
    printf ("Smallest: %d\n", minAge);
    printf ("Largest: %d\n", maxAge);
    printf ("Average: %d\n", avAge);
    return 0;
}
----------------------------------------

int main (void) {
    int age, avAge = 0, minAge = INT_MAX, maxAge = 0, sum = 0, avgCounter = 1;
    while (1) {
        printf ("Please enter age: \n");
        scanf ("%d", & age);
        if (age == -1)
            break;
        else if (age < -1 && age > 100)
            printf ("Nice try!\n");
        else if (age < minAge)
            minAge = age;
        else if (age > maxAge)
            maxAge = age;
        sum += age;
        avAge = sum / avgCounter;
        avgCounter++;
    }
    printf ("Smallest: %d\n", minAge == INT_MAX ? 0 : minAge);
    printf ("Largest: %d\n", maxAge);
    printf ("Average: %d\n", avAge);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42172954_42173341_3_39
42172954_42173973_3_50
Title: C Program That Counts Even Integers from a Set of 5 Integers 
----------------------------------------

int main () {
    int n1, n2, n3, n4, n5, count = 0;
    printf ("Enter five different positive integers: \n");
    scanf ("%d %d %d %d %d", & n1, & n2, & n3, & n4, & n5);
    if (n1 % 2 == 0) {
        count = count + 1;
    }
    if (n2 % 2 == 0) {
        count = count + 1;
    }
    if (n3 % 2 == 0) {
        count = count + 1;
    }
    if (n4 % 2 == 0) {
        count = count + 1;
    }
    if (n5 % 2 == 0) {count = count + 1;
}
----------------------------------------

int main (void) {
    int n1, n2, n3, n4, n5, sum, count;
    printf ("Enter five different positive integers:\n");
    if (scanf ("%d %d %d %d %d", &n1, &n2, &n3, &n4, &n5) != 5) {
        printf ("Invalid input\n");
        return 1;
    }
    count = 0;
    sum = 0;
    if (n1 % 2 == 0) {
        sum += n1;
        count++;
    }
    if (n2 % 2 == 0) {
        sum += n2;
        count++;
    }
    if (n3 % 2 == 0) {
        sum += n3;
        count++;
    }
    if (n4 % 2 == 0) {
        sum += n4;
        count++;
    }
    if (n5 % 2 == 0) {
        sum += n5;
        count++;
    }
    if (count > 0) {
        printf ("There are %d even integers in the input, their sum is %d.\n", count, sum);
    }
    else {
        printf ("There are no even integers in the input.\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42175585_42175686_1_15
42175585_42176029_3_19
Title: How to add adjacent array items in c with pointers? 
----------------------------------------

void add_adjacents () {
    int num1 [5] = {1, 2, 3, 4, 5};
    int num2 [5] = {10, 20, 30, 40, 50};
    int final [5], c;
    int *n1 = num1, *n2 = num2, *f = final;
    for (; n1 < &num1[5];) {
        *f++ = *n1++ + *n2++;
    }
    for (c = 0; c < sizeof (final) / sizeof (final[0]); c++) {
        printf ("%d\n", final [c]);
    }
}
----------------------------------------

void add_adjacents () {
    int num1 [5] = {1, 2, 3, 4, 5};
    int num2 [5] = {10, 20, 30, 40, 50};
    int *final = num1;
    for (int i = 0; i < sizeof (num1) / sizeof (num1[0]); i++)
        *(final + i) = *(num1 + i) + *(num2 + i);
    for (int c = 0; c < sizeof (num1) / sizeof (num1[0]); c++) {
        printf ("%d\n", final [c]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42183063_42183089_3_38
42183063_42183324_3_44
Title: C Programming: Saving value in for loop and finding minimum 
----------------------------------------

int main () {
    int shops = 0, ingredients = 0, i = 0, j = 0, cstore = 0;
    double temp = 0.0, ingredientPrice = 0.0, total = 0.0, cprice = -1.0;
    printf ("How many shops will you be visiting?\n");
    scanf ("%d", & shops);
    for (i = 0; i < shops; i++) {
        printf ("You are at shop # %d\n", i + 1);
        printf ("How many ingredients do you need at shop #%d?\n", i + 1);
        scanf ("%d", & ingredients);
        for (j = 0; j < ingredients; j++) {
            printf ("How much is ingredient #%d?\n", j + 1);
            scanf ("%lf", & temp);
            ingredientPrice += temp;
            total = ingredientPrice;
            if (shops == 1) {
                cstore = shops;
                cprice = total;
            }
            else if (total < ingredientPrice) {
                cstore = i + 1;
                cprice = total;
            }
        }
        if ((cprice < 0.0) || (cprice > total)) {
            cprice = total;
            cstore = i;
        }
        printf ("Your total at shop #%d is $%lf\n", i + 1, total);
    }
    printf ("Your cheapest order was at shop #%d and cost $%lf.\n", cstore, cprice);
    return 0;
}
----------------------------------------

int main () {
    int i = 0, shops = 0;
    int cstore = 0;
    double cprice = 0.0;
    printf ("How many shops will you be visiting?\n");
    scanf ("%d", & shops);
    for (i = 1; i <= shops; i++) {
        int j = 0, ingredients = 0;
        double total = 0.0;
        printf ("You are at shop # %d\n", i);
        printf ("How many ingredients do you need at shop #%d?\n", i);
        scanf ("%d", & ingredients);
        for (j = 1; j <= ingredients; j++) {
            double ingredientPrice = 0.0;
            printf ("How much is ingredient #%d?\n", j);
            scanf ("%lf", & ingredientPrice);
            total += ingredientPrice;
        }
        if (i == 1) {
            cstore = i;
            cprice = total;
        }
        else if (total < cprice && ingredients > 0) {
            cstore = i;
            cprice = total;
        }
        printf ("Your total at shop #%d is $%.2lf and the lowest store is %d for $%.2lf.\n", i, total, cstore, cprice);
    }
    printf ("Your cheapest order was at shop #%d and cost $%.2lf.\n", cstore, cprice);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42183448_42183556_3_19
42183448_42183563_4_23
Title: How to end a loop with 0? 
----------------------------------------

int main () {
    for (;;) {
        printf ("Enter a number: ");
        char buf [10];
        fgets (buf, 10, stdin);
        printf ("You entered %s\n", buf);
        if (buf[0] == '0')
            break;
    }
    printf ("Outside the loop\n");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int n;
    do {
        printf ("Enter a number: ");
        if (scanf ("%d", &n) != 1) {
            perror ("scanf");
            exit (EXIT_FAILURE);
        }
        if (n >= 1 && n <= 49) {
            printf ("%d is in the range 1-49\n", n);
        }
    }
    while (n != 0);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
421860_28614859_2_17
421860_423643_8_21
Title: Capture characters from standard input without waiting for enter to be pressed 
----------------------------------------

main () {
    char ch;
    system ("stty raw");
    while (1) {
        ch = getchar ();
        if (ch == '~') {
            system ("stty cooked");
            exit (0);
        }
        printf ("you pressed %c\n ", ch);
    }
}
----------------------------------------

main () {
    int i = 0;
    intc = '';
    system ("stty raw -echo");
    printf ("enter 'q' to quit \n");
    for (; c != 'q'; i++) {
        if (kbhit ()) {
            c = getchar ();
            printf ("\n got %c, on iteration %d", c, i);
        }
    }
    system ("stty cooked echo");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
421860_33201364_29_44
421860_51051839_7_23
Title: Capture characters from standard input without waiting for enter to be pressed 
----------------------------------------

int main (int argc, char **argv) {
    char c;
    printf ("Press key");
    while (!kbhit ()) {
        printf (".");
        fflush (stdout);
        sleep (1);
    }
    c = getchar ();
    printf ("\nChar received:%c\n", c);
    printf ("Done.\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    initscr ();
    raw ();
    noecho ();
    keypad (stdscr, true);
    auto f = std : : async (std : : launch : : async, get_keyboard_input);
    while (f.wait_for (std : : chrono : : milliseconds (20)) != std : : future_status : : ready) {} endwin ();
std :
    : cout << "returned: " << f.get () << std : : endl;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42188978_42189926_20_32
42188978_42190506_24_36
Title: Error while implementing stack using linkedlist in C 
----------------------------------------

int pop () {
    if (top == NULL) {
        printf ("\nUnderflow- Stack is empty!");
        return -1;
    }
    int ans = top->data;
    struct node *temp = top;
    top = top->next;
    free (temp);
    count--;
    return ans;
}
----------------------------------------

int pop (void) {
    if (top == NULL) {
        printf ("Underflow. Stack is empty!\n");
        return -1;
    }
    else {
        int data = top->data;
        struct node *temp = top;
        top = top->next;
        free (temp);
        count--;
        return data;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42188978_42189926_43_53
42188978_42190506_46_57
Title: Error while implementing stack using linkedlist in C 
----------------------------------------

void printStack () {
    struct node *t = top;
    if (t == NULL) {
        printf ("\nStack is empty. Nothing to print");
    }
    printf ("\n");
    while (t != NULL) {
        printf ("%d ", t -> data);
        t = t->next;
    }
}
----------------------------------------

void printStack (void) {
    if (top == NULL) {
        printf ("Stack is empty. Nothing to print\n");
        return;
    }
    struct node *temp = top;
    while (temp != NULL) {
        printf ("%d ", temp -> data);
        temp = temp->next;
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42201455_42201624_1_21
42201455_42202101_5_25
Title: "Converting a string ""10.214.239"" to integer" 
----------------------------------------

int main () {
    const char num [] = "12.345.66";
    char buffer [100];
    char c;
    int j = 0;
    for (int i = 0; c = num[i]; i++) {
        if (c != '.')
            buffer[j++] = c;
    }
    buffer[j] = 0;
    long number = strtol (buffer, NULL, 10);
}
----------------------------------------

int main (void) {
    const char *test = "10.214.239";
    const char neg = '-';
    long number = 0;
    for (size_t i = 0; test[i] != '\0'; i++) {
        if (isdigit (test[i])) {
            number *= 10;
            number += test[i] - '0';
        }
    }
    if (test[0] == neg) {
        number *= -1;
    }
    printf ("number = %ld\n", number);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42201455_42201624_1_21
42201455_42208395_3_14
Title: "Converting a string ""10.214.239"" to integer" 
----------------------------------------

int main () {
    const char num [] = "12.345.66";
    char buffer [100];
    char c;
    int j = 0;
    for (int i = 0; c = num[i]; i++) {
        if (c != '.')
            buffer[j++] = c;
    }
    buffer[j] = 0;
    long number = strtol (buffer, NULL, 10);
}
----------------------------------------

int main (void) {
    const char *test = "10.214.239";
    int vals [3] = {0, 0, 0};
    const int n = sscanf (test, "%i.%i.%i", &vals[0], &vals[1], &vals[2]);
    const int exponent = n < sizeof (vals) / sizeof (int) ? 1 : 1E3;
    long number = vals [0] * 1E3 * exponent + vals [1] * exponent + vals [2]);
    printf ("%ld\n", number);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42201455_42202101_5_25
42201455_42208395_3_14
Title: "Converting a string ""10.214.239"" to integer" 
----------------------------------------

int main (void) {
    const char *test = "10.214.239";
    const char neg = '-';
    long number = 0;
    for (size_t i = 0; test[i] != '\0'; i++) {
        if (isdigit (test[i])) {
            number *= 10;
            number += test[i] - '0';
        }
    }
    if (test[0] == neg) {
        number *= -1;
    }
    printf ("number = %ld\n", number);
    return 0;
}
----------------------------------------

int main (void) {
    const char *test = "10.214.239";
    int vals [3] = {0, 0, 0};
    const int n = sscanf (test, "%i.%i.%i", &vals[0], &vals[1], &vals[2]);
    const int exponent = n < sizeof (vals) / sizeof (int) ? 1 : 1E3;
    long number = vals [0] * 1E3 * exponent + vals [1] * exponent + vals [2]);
    printf ("%ld\n", number);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42208204_42208868_5_38
42208204_42210046_46_72
Title: C Program - How to read a file and store its texts in a variable? 
----------------------------------------

int main (void) {
    char filename [] = "/proc/cpuinfo";
    char *key = "system type";
    char *value;
    FILE *file = fopen (filename, "r");
    if (file != NULL) {
        char line [1000];
        char *router_model = NULL;
        while (fgets (line, sizeof line, file) != NULL) {
            fprintf (stdout, "%s", line);
            if (strncmp (line, key, strlen (key)) == 0) {
                char *value = strchr (line, ':');
                value += 2;
                router_model = strdup (value);
                break;
            }
        }
        fclose (file);
        if (router_model != NULL)
            printf ("The model is %s\n", router_model);
        else
            printf ("No %s entry in %s\n", key, filename);
        free (router_model);
    }
    else {
        perror (filename);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char filename [] = "/proc/cpuinfo";
    char *key = "system type";
    char *value;
    FILE *file = fopen (filename, "r");
    if (file != NULL) {
        char line [2048] = {0x00};
        char temp_key [1024] = {0x00};
        char temp_value [1024] = {0x00};
        while (fscanf (file, " %[^\n]s", line) != EOF) {
            process_line (line, temp_key, temp_value);
            if (strcmp (temp_key, key) == 0) {
                break;
            }
            memset (line, 0x00, sizeof (line));
            memset (temp_key, 0x00, sizeof (temp_key));
            memset (temp_value, 0x00, sizeof (temp_value));
        }
        fclose (file);
        printf ("model:%s\n", temp_value);
    }
    else {
        perror (filename);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42212813_42212895_1_17
42212813_42213516_1_13
Title: Deleting every odd positioned node in a linked list in C 
----------------------------------------

void deletee (ll *l) {
    if (l->head == NULL)
        return;
    node *tmp = l->head;
    l->head = l->head->next;
    free (tmp);
    node *k = l->head;
    while (k != NULL && k->next != NULL) {
        tmp = k->next;
        k->next = k->next->next;
        free (tmp);
        k = k->next;
    }
}
----------------------------------------

void deletee (ll *l) {
    node **k = &l->head;
    while (*k != NULL) {
        node *tmp = *k;
        *k = (*k)->next;
        free (tmp);
        if (*k != NULL) {
            k = &(*k)->next;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42236138_42236726_5_39
42236138_42236826_3_30
Title: "Counting blanks tabs and new line" 
----------------------------------------

int main (void) {
    unsigned int space = 0;
    unsigned int tabs = 0;
    unsigned int newLine = 0;
    printf ("Enter the text: ");
    char str [N];
    while (fgets (str, sizeof (str), stdin)) {
        for (const char *p = str; *p; ++p) {
            switch (*p) {
            case ' ' :
                ++space;
                break;
            case '\t' :
                ++tabs;
                break;
            case '\n' :
                ++newLine;
                break;
            }
        }
    }
    printf ("\nspace: %u\ntabs: %u\nnew line: %u\n", space, tabs, newLine);
    return 0;
}
----------------------------------------

int main () {
    char str [SIZE_MAX];
    int i;
    int space;
    int tabs;
    printf ("Enter the text : ");
    fgets (str, SIZE_MAX, stdin);
    if (strchr (str, '\n') != 0) {
        str[strlen (str) - 1] = '\0';
    }
    for (i = 0; i < strlen (str); i++) {
        if (str[i] == ' ') {
            space++;
        }
        if (str[i] == '\t') {
            tabs++;
        }
    }
    printf ("\nspace : %d\ntabs: %d\n", space, tabs);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42256344_42257260_1_17
42256344_42257451_1_11
Title: Reverse double linked list 
----------------------------------------

void snake_reverse (struct snake **s) {
    struct snake *last, *newHead, *tmp = NULL;
    last = *s;
    while (last != NULL) {
        tmp = last->prev;
        if (tmp != NULL)
            newHead = tmp;
        last->prev = last->next;
        last->next = tmp;
        last = last->prev;
    }
    *s = newHead;
}
----------------------------------------

void snake_reverse (struct snake **s) {
    struct snake *last, *tmp = NULL;
    last = *s;
    while (last != NULL) {
        * s = last tmp = last -> prev;
        last->prev = last->next;
        last->next = tmp;
        last = last->prev;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42260702_42261066_4_18
42260702_42261420_4_22
Title: Count number of characters in array of strings in C 
----------------------------------------

int main (void) {
    char *myArray [] = {"Oh! ", "Hello ", "world."};
    size_t count = 0, x, y;
    for (x = 0; x < sizeof (myArray) / sizeof (myArray[0]); x++) {
        for (y = 0; myArray[x][y]; y++) {
            count += (isspace ((unsigned char) myArray[x][y]) == 0);
        }
    }
    printf ("Total chars: %zu\n", count);
}
----------------------------------------

int main () {
    char *myArray [] = {"Oh! ", "Hello ", "world."};
    int count = 0;
    int arrayLength = sizeof (myArray) / sizeof (myArray[0]);
    for (int x = 0; x < arrayLength; x++) {
        int stringLength = strlen (myArray[x]);
        for (int y = 0; y < stringLength; y++) {
            char currentCharacter = myArray[x][y];
            if (currentCharacter != ' ') {
                count++;
            }
        }
    }
    printf ("%d\n", count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42260702_42261066_4_18
42260702_42263008_4_32
Title: Count number of characters in array of strings in C 
----------------------------------------

int main (void) {
    char *myArray [] = {"Oh! ", "Hello ", "world."};
    size_t count = 0, x, y;
    for (x = 0; x < sizeof (myArray) / sizeof (myArray[0]); x++) {
        for (y = 0; myArray[x][y]; y++) {
            count += (isspace ((unsigned char) myArray[x][y]) == 0);
        }
    }
    printf ("Total chars: %zu\n", count);
}
----------------------------------------

int main () {
    char *stringArray [200] = {"O  n e ", " Two  ", "Thre e  ", "Four    ", " F i ve    !"};
    int i, j, chars;
    i = j = chars = 0;
    while (stringArray[i] != '\0') {
        char temp = stringArray[i][j];
        switch (temp) {
        case ' ' :
            j++;
            break;
        case '\0' :
            i++;
            j = 0;
            break;
        default :
            j++;
            chars++;
            break;
        }
    }
    printf ("%d\n", chars);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42260702_42261420_4_22
42260702_42263008_4_32
Title: Count number of characters in array of strings in C 
----------------------------------------

int main () {
    char *myArray [] = {"Oh! ", "Hello ", "world."};
    int count = 0;
    int arrayLength = sizeof (myArray) / sizeof (myArray[0]);
    for (int x = 0; x < arrayLength; x++) {
        int stringLength = strlen (myArray[x]);
        for (int y = 0; y < stringLength; y++) {
            char currentCharacter = myArray[x][y];
            if (currentCharacter != ' ') {
                count++;
            }
        }
    }
    printf ("%d\n", count);
}
----------------------------------------

int main () {
    char *stringArray [200] = {"O  n e ", " Two  ", "Thre e  ", "Four    ", " F i ve    !"};
    int i, j, chars;
    i = j = chars = 0;
    while (stringArray[i] != '\0') {
        char temp = stringArray[i][j];
        switch (temp) {
        case ' ' :
            j++;
            break;
        case '\0' :
            i++;
            j = 0;
            break;
        default :
            j++;
            chars++;
            break;
        }
    }
    printf ("%d\n", chars);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42262459_42262593_4_36
42262459_42262645_4_22
Title: Storing Fibonacci numbers in an array (C) 
----------------------------------------

int main () {
    int F [100];
    F[0] = 0;
    F[1] = 1;
    int i = 2;
    while (1) {
        if (i < 100) {
            F[i] = F[i - 1] + F[i - 2];
            i++;
        }
        else {
            break;
        }
    }
    i = 0;
    while (1) {
        if (i < 100) {
            printf ("%d ; ", F [i]);
            i++;
        }
        else {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    const int MAX_N = 10;
    int list [MAX_N];
    list[0] = 0;
    list[1] = 1;
    for (int i = 2; i < MAX_N; i++) {
        list[i] = list[i - 1] + list[i - 2];
    }
    for (int i = 0; i < MAX_N; i++) {
        printf ("%d\n", list [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42262459_42262593_4_36
42262459_42262686_2_32
Title: Storing Fibonacci numbers in an array (C) 
----------------------------------------

int main () {
    int F [100];
    F[0] = 0;
    F[1] = 1;
    int i = 2;
    while (1) {
        if (i < 100) {
            F[i] = F[i - 1] + F[i - 2];
            i++;
        }
        else {
            break;
        }
    }
    i = 0;
    while (1) {
        if (i < 100) {
            printf ("%d ; ", F [i]);
            i++;
        }
        else {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int MAX_SIZE = 100;
    int n, i;
    int list [MAX_SIZE];
    printf ("Enter value of 'n'");
    scanf ("%d", & n);
    if (n < 0) {
        printf ("'n' cannot be negative number");
        return 0;
    }
    else if (n == 1) {
        list[0] = 0;
    }
    else if (n == 2) {
        list[0] = 0;
        list[1] = 1;
    }
    else {
        list[0] = 0;
        list[1] = 1;
        for (i = 2; i <= n; i++) {
            list[i] = list[i - 1] + list[i - 2];
        }
    }
    for (int i = 0; i < n; i++) {
        printf ("%3d", list [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42262459_42262593_4_36
42262459_42262785_4_29
Title: Storing Fibonacci numbers in an array (C) 
----------------------------------------

int main () {
    int F [100];
    F[0] = 0;
    F[1] = 1;
    int i = 2;
    while (1) {
        if (i < 100) {
            F[i] = F[i - 1] + F[i - 2];
            i++;
        }
        else {
            break;
        }
    }
    i = 0;
    while (1) {
        if (i < 100) {
            printf ("%d ; ", F [i]);
            i++;
        }
        else {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    int *list;
    while (1) {
        scanf ("%d", & n);
        if (n == -1) {
            break;
        }
        else if (n > 0) {
            list = (int *) malloc (n * sizeof (int));
            list[0] = 1;
            list[1] = 1;
            for (i = 2; i < n; i++) {
                list[i] = list[i - 1] + list[i - 2];
            }
            printf ("%d %d\n", i, list [i - 1]);
            free (list);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42262459_42262645_4_22
42262459_42262686_2_32
Title: Storing Fibonacci numbers in an array (C) 
----------------------------------------

int main () {
    const int MAX_N = 10;
    int list [MAX_N];
    list[0] = 0;
    list[1] = 1;
    for (int i = 2; i < MAX_N; i++) {
        list[i] = list[i - 1] + list[i - 2];
    }
    for (int i = 0; i < MAX_N; i++) {
        printf ("%d\n", list [i]);
    }
}
----------------------------------------

int main () {
    int MAX_SIZE = 100;
    int n, i;
    int list [MAX_SIZE];
    printf ("Enter value of 'n'");
    scanf ("%d", & n);
    if (n < 0) {
        printf ("'n' cannot be negative number");
        return 0;
    }
    else if (n == 1) {
        list[0] = 0;
    }
    else if (n == 2) {
        list[0] = 0;
        list[1] = 1;
    }
    else {
        list[0] = 0;
        list[1] = 1;
        for (i = 2; i <= n; i++) {
            list[i] = list[i - 1] + list[i - 2];
        }
    }
    for (int i = 0; i < n; i++) {
        printf ("%3d", list [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42262459_42262645_4_22
42262459_42262785_4_29
Title: Storing Fibonacci numbers in an array (C) 
----------------------------------------

int main () {
    const int MAX_N = 10;
    int list [MAX_N];
    list[0] = 0;
    list[1] = 1;
    for (int i = 2; i < MAX_N; i++) {
        list[i] = list[i - 1] + list[i - 2];
    }
    for (int i = 0; i < MAX_N; i++) {
        printf ("%d\n", list [i]);
    }
}
----------------------------------------

int main () {
    int n, i;
    int *list;
    while (1) {
        scanf ("%d", & n);
        if (n == -1) {
            break;
        }
        else if (n > 0) {
            list = (int *) malloc (n * sizeof (int));
            list[0] = 1;
            list[1] = 1;
            for (i = 2; i < n; i++) {
                list[i] = list[i - 1] + list[i - 2];
            }
            printf ("%d %d\n", i, list [i - 1]);
            free (list);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42262459_42262686_2_32
42262459_42262785_4_29
Title: Storing Fibonacci numbers in an array (C) 
----------------------------------------

int main () {
    int MAX_SIZE = 100;
    int n, i;
    int list [MAX_SIZE];
    printf ("Enter value of 'n'");
    scanf ("%d", & n);
    if (n < 0) {
        printf ("'n' cannot be negative number");
        return 0;
    }
    else if (n == 1) {
        list[0] = 0;
    }
    else if (n == 2) {
        list[0] = 0;
        list[1] = 1;
    }
    else {
        list[0] = 0;
        list[1] = 1;
        for (i = 2; i <= n; i++) {
            list[i] = list[i - 1] + list[i - 2];
        }
    }
    for (int i = 0; i < n; i++) {
        printf ("%3d", list [i]);
    }
}
----------------------------------------

int main () {
    int n, i;
    int *list;
    while (1) {
        scanf ("%d", & n);
        if (n == -1) {
            break;
        }
        else if (n > 0) {
            list = (int *) malloc (n * sizeof (int));
            list[0] = 1;
            list[1] = 1;
            for (i = 2; i < n; i++) {
                list[i] = list[i - 1] + list[i - 2];
            }
            printf ("%d %d\n", i, list [i - 1]);
            free (list);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42283627_42283728_3_20
42283627_42283770_3_22
Title: Converting integer to integer array in c 
----------------------------------------

int main () {
    const int numDigits = 3;
    int answer = 140;
    int digits [numDigits];
    int i = numDigits - 1;
    while (answer > 0) {
        int digit = answer % 10;
        answer /= 10;
        digits[i] = digit;
        printf ("digits[%d] = %d\n", i, digits [i]);
        i--;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int ans = 140;
    int x = ans;
    size_t i, size = 0;
    while (x) {
        x = x / 10;
        size++;
    }
    int arr_answer [size];
    for (i = size - 1, x = ans; x; x = x / 10, i--) {
        arr_answer[i] = x % 10;
    }
    for (i = 0; i < size; i++) {
        printf ("%d ", arr_answer [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42288121_42288185_3_23
42288121_42288305_1_12
Title: "New To C Simple Loop" 
----------------------------------------

int main (int argc, char *argv []) {
    int i, n, sum = 0;
    FILE *fin = fopen ("testdata1.txt", "r");
    if (!fin) {
        fprintf (stderr, "Error: Unable to open file\n");
        return 1;
    }
    for (i = 0; i < 20; i++) {
        if (fscanf (fin, "%d", &n) != 1) {
            fprintf (stderr, "Error: Unexpected input\n");
            fclose (fin);
            return 1;
        }
        sum += n;
    }
    printf ("The sum of numbers is %d.\n", sum);
    fclose (fin);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int sum, values [20];
    FILE *file = fopen ("file");
    for (i = 0; i < 20; i++) {
        if (fscanf (fin, "%d", &values[i]) != 1) {
            printf ("%s\n", "error handling here");
            fclose (fin);
            return 1;
        }
        sum += n;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42319919_42319945_1_13
42319919_42320004_2_17
Title: How to modify a 2d array passed to a function 
----------------------------------------

void c (char **s, int stringCount) {
    int i = 0, j = 0;
    for (j = 0; j < stringCount; ++j) {
        i = 0;
        while (s[j][i]) {
            s[j][i++] = 's';
        }
    }
}
----------------------------------------

void c (int len, char (*s) [len]) {
    int i = 0;
    int j = 0;
    while (i < len) {
        j = 0;
        while (s[i][j]) {
            s[i][j++] = 's';
        }
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42324196_42324228_4_12
42324196_42324307_4_13
Title: How to print a given date in C 
----------------------------------------

int main () {
    int date, month, year;
    printf ("Please enter the date in the form of dd press enter then enter mm then press enter then enter year then press enter.. ");
    scanf ("%d", & date);
    scanf ("%d", & month);
    scanf ("%d", & year);
    printf ("the date you entered was:  %d/%d/%d\n", date, month, year);
    return 0;
}
----------------------------------------

int main () {
    int date, month, year;
    printf ("Please enter the date in the form of dd/mm/yyyy: ");
    if (scanf ("%d/%d/%d", &date, &month, &year) == 3) {
        printf ("the date you entered was:  %d-%d-%d\n", date, month, year);
    }
    else {
        printf ("You have made an error\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4232842_27429011_1_12
4232842_4233114_5_21
Title: How to dynamically change filename while writing in a loop? 
----------------------------------------

int main (void) {
    for (int k = 0; k < 50; k++) {
        char title [8];
        sprintf (title, "%d.txt", k);
        FILE *img = fopen (title, "a");
        char *data = "Write this down";
        fwrite (data, 1, strlen (data), img);
        fclose (img);
    }
}
----------------------------------------

int main () {
std :
    : string someData = "this is some data that'll get written to each file";
    int k = 0;
    while (true) {
    std :
        : ostringstream fn;
        fn << "file" << k << ".txt";
    std :
        : ofstream out (fn.str ().c_str (), std : : ios_base : : binary);
        out.write (&someData[0], someData.size ());
        ++k;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42329852_42330267_4_39
42329852_42330732_6_39
Title: fclose() crashing c program 
----------------------------------------

int *fileRead () {
    FILE *file;
    file = fopen ("PATH.txt", "r");
    if (file == NULL) {
        printf ("There was a problem opening the file");
        exit (1);
    }
    int count = 0;
    char pc = '\n';
    char c;
    while (c = fgetc (file), c != EOF) {
        if (c == '\n' && pc != '\n')
            count++;
        pc = c;
    }
    fseek (file, 0, SEEK_SET);
    int *temp = malloc (sizeof (int) * count);
    int num, i;
    for (i = 0; i < count; i++) {
        fscanf (file, "%d", & temp [i]);
    }
    fclose (file);
    return temp;
}
----------------------------------------

int *fileRead (int *countp) {
    FILE *file = fopen ("PATH.txt", "r");
    if (file == NULL) {
        fprintf (stderr, "Cannot open input file PATH.txt: %s\n", strerror (errno));
        exit (1);
    }
    int num, count = 0;
    while (fscanf (file, "%d", &num) == 1) {
        count++;
    }
    fseek (file, 0, SEEK_SET);
    int *temp = calloc (sizeof (int), count);
    if (temp != NULL) {
        int i;
        for (i = 0; i < count; i++) {
            if (fscanf (file, "%d", &temp[i]) != 1) {
                fprintf (stderr, "error reading element number %d\n", i);
                break;
            }
        }
        *countp = i;
    }
    fclose (file);
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42341099_42343446_8_64
42341099_42348943_5_31
Title: parsing from long text in file in c 
----------------------------------------

int main (void) {
    FILE *fp;
    char *ret, *token, *result;
    char line [LINESIZE] = {0};
    size_t numbytes, slen;
    const char *city = "Athens";
    const char *datetime = "Sun, 08:08 PM";
    const char *delim = "<>\n";
    const char *space = " ";
    fp = fopen ("html.txt", "r");
    if (fp == NULL) {
        fprintf (stderr, "Cannot open file\n");
        exit (EXIT_FAILURE);
    }
    numbytes = strlen (city) + strlen (datetime) + 1;
    result = malloc (numbytes +1);
    if (!result) {
        fprintf (stderr, "Cannot allocate string\n");
        exit (EXIT_FAILURE);
    }
    while (fgets (line, LINESIZE, fp) != NULL) {
        ret = strstr (line, city);
        if (ret != NULL) {
            token = strtok (ret, delim);
            while (token != NULL) {
                slen = strlen (token);
                for (int i = (int) slen - 1; i >= 0; i--) {
                    if (!isspace (token[i])) {
                        token[i + 1] = '\0';
                        break;
                    }
                }
                if (strcmp (token, city) == 0) {
                    strcpy (result, token);
                    strcat (result, space);
                }
                if (strcmp (token, datetime) == 0) {
                    strcat (result, token);
                }
                token = strtok (NULL, delim);
            }
        }
    }
    printf ("Extracted string: %s\n", result);
    free (result);
    result = NULL;
    return 0;
}
----------------------------------------

int main () {
    char buf [1024];
    FILE *fp = fopen ("the-data-file.txt", "r");
    if (!fp) {
    }
    while (fgets (buf, sizeof (buf), fp)) {
        char *city = strstr (buf, "Athens");
        char *td = city ? strstr (city, "<td") : NULL;
        char *greater_than = td ? strstr (td, "><![CDATA[") : NULL;
        char *less_than = greater_than ? strstr (greater_than, "<") : NULL;
        if (less_than) {
            while (*city && isalpha (*city)) {
                printf ("%c", * city ++);
            }
            printf (" ");
            while (++greater_than < less_than) {
                printf ("%c", * greater_than);
            }
            printf ("\n");
        }
    }
    fclose (fp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4237084_4237107_8_31
4237084_4237269_1_30
Title: Reading from a file and storing in array 
----------------------------------------

int main (void) {
    int i = 0;
    char lines [MAXLINES] [BUFSIZ];
    FILE *fp = fopen ("input.txt", "r");
    if (fp == 0) {
        fprintf (stderr, "failed to open input.txt\n");
        exit (1);
    }
    while (i < MAXLINES && fgets (lines[i], sizeof (lines[0]), fp)) {
        lines[i][strlen (lines[i]) - 1] = '\0';
        i = i + 1;
    }
    fclose (fp);
    printf ("%d\n", i);
    srand (time (0));
    int j = rand () % i;
    int k = (j + 1) % i;
    printf ("%s %s\n", lines [j], lines [k]);
    return 0;
}
----------------------------------------

int main () {
    int i = 0;
    int BUFSIZE = 1000;
    char *words [20];
    FILE *fp = fopen ("input.txt", "r");
    if (fp == 0) {
        fprintf (stderr, "Error while opening");
        exit (1);
    }
    words[i] = malloc (BUFSIZE);
    while (fgets (words[i], BUFSIZE, fp)) {
        i++;
        words[i] = malloc (BUFSIZE);
    }
    printf ("Output: \n");
    srand (time (NULL));
    int j = rand () % i;
    int k = (j + 1) % i;
    fflush (stdout);
    printf ("%d - %s %d -%s", j, words [j], k, words [k]);
    int x;
    for (x = 0; x < i; x++)
        free (words[x]);
    scanf ("%d", x);
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401682_2_32
42401198_42401693_4_29
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int largest1, largest2, i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    largest1 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] > a[largest1]) {
            largest1 = i;
        }
    }
    if (largest1 != 0)
        largest2 = 0;
    else
        largest2 = n - 1;
    for (i = 0; i < n && i != largest1; i++) {
        if (a[i] > a[largest2])
            largest2 = i;
    }
    printf ("First and second largest number is %d and %d ", a [largest1], a [largest2]);
}
----------------------------------------

int main () {
    int a [] = {1, 5, 3, 2, 0, 5, 7, 6};
    const int n = sizeof (a) / sizeof (a[0]);
    int max = INT_MIN;
    int second_max = INT_MIN;
    for (int i = 0; i < n; i++) {
        if (a[i] > max) {
            second_max = max;
            max = a[i];
        }
        else if (a[i] > second_max) {
            second_max = a[i];
        }
    }
    printf ("max: %d, second_max: %d\n", max, second_max);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401682_2_32
42401198_42403331_3_46
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int largest1, largest2, i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    largest1 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] > a[largest1]) {
            largest1 = i;
        }
    }
    if (largest1 != 0)
        largest2 = 0;
    else
        largest2 = n - 1;
    for (i = 0; i < n && i != largest1; i++) {
        if (a[i] > a[largest2])
            largest2 = i;
    }
    printf ("First and second largest number is %d and %d ", a [largest1], a [largest2]);
}
----------------------------------------

int main (void) {
    int a [10], n, i;
    int largest1, largest2, has_largest2;
    printf ("enter number of elements you want in array: ");
    if (scanf ("%d", &n) != 1)
        return 1;
    if (n < 2) {
        printf ("need at least 2 elements\n");
        return 1;
    }
    printf ("enter elements: ");
    for (i = 0; i < n; i++) {
        if (scanf ("%d", &a[i]) != 1) {
            printf ("input error\n");
            return 1;
        }
    }
    largest1 = a[0];
    for (i = 1; i < n; i++) {
        if (a[i] > largest1) {
            largest1 = a[i];
        }
    }
    has_largest2 = largest2 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] < largest1) {
            if (!has_largest2) {
                has_largest2 = 1;
                largest2 = a[i];
            }
            else if (a[i] > largest2) {
                largest2 = a[i];
            }
        }
    }
    if (has_largest2) {
        printf ("First and second largest number is %d and %d\n", largest1, largest2);
    }
    else {
        printf ("All values are identical to %d\n", largest1);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401682_2_32
42401198_45514636_2_43
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int largest1, largest2, i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    largest1 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] > a[largest1]) {
            largest1 = i;
        }
    }
    if (largest1 != 0)
        largest2 = 0;
    else
        largest2 = n - 1;
    for (i = 0; i < n && i != largest1; i++) {
        if (a[i] > a[largest2])
            largest2 = i;
    }
    printf ("First and second largest number is %d and %d ", a [largest1], a [largest2]);
}
----------------------------------------

int main () {
    int a1 [100], a2 [100], i, t, l1, l2, n;
    printf ("Enter the number of elements:\n");
    scanf ("%d", & n);
    printf ("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a1 [i]);
    }
    l1 = a1[0];
    for (i = 0; i < n; i++) {
        if (a1[i] >= l1) {
            l1 = a1[i];
            t = i;
        }
    }
    for (i = 0; i < (n - 1); i++) {
        if (i == t) {
            continue;
        }
        else {
            a2[i] = a1[i];
        }
    }
    l2 = a2[0];
    for (i = 1; i < (n - 1); i++) {
        if (a2[i] >= l2 && a2[i] < l1) {
            l2 = a2[i];
        }
    }
    printf ("Second highest number is %d", l2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401682_2_32
42401198_45697292_3_32
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int largest1, largest2, i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    largest1 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] > a[largest1]) {
            largest1 = i;
        }
    }
    if (largest1 != 0)
        largest2 = 0;
    else
        largest2 = n - 1;
    for (i = 0; i < n && i != largest1; i++) {
        if (a[i] > a[largest2])
            largest2 = i;
    }
    printf ("First and second largest number is %d and %d ", a [largest1], a [largest2]);
}
----------------------------------------

int main () {
    int a [10], n;
    int i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    int largest1 = a[0], largest2 = a[0];
    for (i = 0; i < n; i++) {
        if (a[i] > largest1) {
            largest2 = largest1;
            largest1 = a[i];
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401682_2_32
42401198_46284468_3_57
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int largest1, largest2, i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    largest1 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] > a[largest1]) {
            largest1 = i;
        }
    }
    if (largest1 != 0)
        largest2 = 0;
    else
        largest2 = n - 1;
    for (i = 0; i < n && i != largest1; i++) {
        if (a[i] > a[largest2])
            largest2 = i;
    }
    printf ("First and second largest number is %d and %d ", a [largest1], a [largest2]);
}
----------------------------------------

int main () {
    int a [10];
    int i, b, c;
    printf ("Enter ten values : \n");
    for (i = 0; i < 10; i++) {
        scanf ("%d", & a [i]);
    }
    b = a[0];
    for (i = 0; i < 10; i++) {
        if (a[i] > b) {
            b = a[i];
        }
        else {
            b = b;
        }
    }
    if (b == a[1]) {
        c = a[2];
    }
    else {
        c = a[1];
    }
    for (i = 0; i < 10; i++) {
        if (a[i] > c && a[i] != b) {
            c = a[i];
        }
        else if (b > c) {
            c = c;
        }
    }
    printf ("Largest number is %d\nSecond largest number is %d", b, c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401682_2_32
42401198_49332683_1_17
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int largest1, largest2, i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    largest1 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] > a[largest1]) {
            largest1 = i;
        }
    }
    if (largest1 != 0)
        largest2 = 0;
    else
        largest2 = n - 1;
    for (i = 0; i < n && i != largest1; i++) {
        if (a[i] > a[largest2])
            largest2 = i;
    }
    printf ("First and second largest number is %d and %d ", a [largest1], a [largest2]);
}
----------------------------------------

int main () {
    int largest1 = 0, largest2 = 0, i, temp;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & temp);
        if (temp >= largest1) {
            largest2 = largest1;
            largest1 = temp;
        }
        else if (temp > largest2) {
            largest2 = temp;
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401693_4_29
42401198_42403331_3_46
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [] = {1, 5, 3, 2, 0, 5, 7, 6};
    const int n = sizeof (a) / sizeof (a[0]);
    int max = INT_MIN;
    int second_max = INT_MIN;
    for (int i = 0; i < n; i++) {
        if (a[i] > max) {
            second_max = max;
            max = a[i];
        }
        else if (a[i] > second_max) {
            second_max = a[i];
        }
    }
    printf ("max: %d, second_max: %d\n", max, second_max);
}
----------------------------------------

int main (void) {
    int a [10], n, i;
    int largest1, largest2, has_largest2;
    printf ("enter number of elements you want in array: ");
    if (scanf ("%d", &n) != 1)
        return 1;
    if (n < 2) {
        printf ("need at least 2 elements\n");
        return 1;
    }
    printf ("enter elements: ");
    for (i = 0; i < n; i++) {
        if (scanf ("%d", &a[i]) != 1) {
            printf ("input error\n");
            return 1;
        }
    }
    largest1 = a[0];
    for (i = 1; i < n; i++) {
        if (a[i] > largest1) {
            largest1 = a[i];
        }
    }
    has_largest2 = largest2 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] < largest1) {
            if (!has_largest2) {
                has_largest2 = 1;
                largest2 = a[i];
            }
            else if (a[i] > largest2) {
                largest2 = a[i];
            }
        }
    }
    if (has_largest2) {
        printf ("First and second largest number is %d and %d\n", largest1, largest2);
    }
    else {
        printf ("All values are identical to %d\n", largest1);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401693_4_29
42401198_45514636_2_43
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [] = {1, 5, 3, 2, 0, 5, 7, 6};
    const int n = sizeof (a) / sizeof (a[0]);
    int max = INT_MIN;
    int second_max = INT_MIN;
    for (int i = 0; i < n; i++) {
        if (a[i] > max) {
            second_max = max;
            max = a[i];
        }
        else if (a[i] > second_max) {
            second_max = a[i];
        }
    }
    printf ("max: %d, second_max: %d\n", max, second_max);
}
----------------------------------------

int main () {
    int a1 [100], a2 [100], i, t, l1, l2, n;
    printf ("Enter the number of elements:\n");
    scanf ("%d", & n);
    printf ("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a1 [i]);
    }
    l1 = a1[0];
    for (i = 0; i < n; i++) {
        if (a1[i] >= l1) {
            l1 = a1[i];
            t = i;
        }
    }
    for (i = 0; i < (n - 1); i++) {
        if (i == t) {
            continue;
        }
        else {
            a2[i] = a1[i];
        }
    }
    l2 = a2[0];
    for (i = 1; i < (n - 1); i++) {
        if (a2[i] >= l2 && a2[i] < l1) {
            l2 = a2[i];
        }
    }
    printf ("Second highest number is %d", l2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401693_4_29
42401198_45697292_3_32
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [] = {1, 5, 3, 2, 0, 5, 7, 6};
    const int n = sizeof (a) / sizeof (a[0]);
    int max = INT_MIN;
    int second_max = INT_MIN;
    for (int i = 0; i < n; i++) {
        if (a[i] > max) {
            second_max = max;
            max = a[i];
        }
        else if (a[i] > second_max) {
            second_max = a[i];
        }
    }
    printf ("max: %d, second_max: %d\n", max, second_max);
}
----------------------------------------

int main () {
    int a [10], n;
    int i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    int largest1 = a[0], largest2 = a[0];
    for (i = 0; i < n; i++) {
        if (a[i] > largest1) {
            largest2 = largest1;
            largest1 = a[i];
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401693_4_29
42401198_46284468_3_57
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [] = {1, 5, 3, 2, 0, 5, 7, 6};
    const int n = sizeof (a) / sizeof (a[0]);
    int max = INT_MIN;
    int second_max = INT_MIN;
    for (int i = 0; i < n; i++) {
        if (a[i] > max) {
            second_max = max;
            max = a[i];
        }
        else if (a[i] > second_max) {
            second_max = a[i];
        }
    }
    printf ("max: %d, second_max: %d\n", max, second_max);
}
----------------------------------------

int main () {
    int a [10];
    int i, b, c;
    printf ("Enter ten values : \n");
    for (i = 0; i < 10; i++) {
        scanf ("%d", & a [i]);
    }
    b = a[0];
    for (i = 0; i < 10; i++) {
        if (a[i] > b) {
            b = a[i];
        }
        else {
            b = b;
        }
    }
    if (b == a[1]) {
        c = a[2];
    }
    else {
        c = a[1];
    }
    for (i = 0; i < 10; i++) {
        if (a[i] > c && a[i] != b) {
            c = a[i];
        }
        else if (b > c) {
            c = c;
        }
    }
    printf ("Largest number is %d\nSecond largest number is %d", b, c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42401693_4_29
42401198_49332683_1_17
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [] = {1, 5, 3, 2, 0, 5, 7, 6};
    const int n = sizeof (a) / sizeof (a[0]);
    int max = INT_MIN;
    int second_max = INT_MIN;
    for (int i = 0; i < n; i++) {
        if (a[i] > max) {
            second_max = max;
            max = a[i];
        }
        else if (a[i] > second_max) {
            second_max = a[i];
        }
    }
    printf ("max: %d, second_max: %d\n", max, second_max);
}
----------------------------------------

int main () {
    int largest1 = 0, largest2 = 0, i, temp;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & temp);
        if (temp >= largest1) {
            largest2 = largest1;
            largest1 = temp;
        }
        else if (temp > largest2) {
            largest2 = temp;
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42403331_3_46
42401198_45514636_2_43
Title: Program to find largest and second largest number in array 
----------------------------------------

int main (void) {
    int a [10], n, i;
    int largest1, largest2, has_largest2;
    printf ("enter number of elements you want in array: ");
    if (scanf ("%d", &n) != 1)
        return 1;
    if (n < 2) {
        printf ("need at least 2 elements\n");
        return 1;
    }
    printf ("enter elements: ");
    for (i = 0; i < n; i++) {
        if (scanf ("%d", &a[i]) != 1) {
            printf ("input error\n");
            return 1;
        }
    }
    largest1 = a[0];
    for (i = 1; i < n; i++) {
        if (a[i] > largest1) {
            largest1 = a[i];
        }
    }
    has_largest2 = largest2 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] < largest1) {
            if (!has_largest2) {
                has_largest2 = 1;
                largest2 = a[i];
            }
            else if (a[i] > largest2) {
                largest2 = a[i];
            }
        }
    }
    if (has_largest2) {
        printf ("First and second largest number is %d and %d\n", largest1, largest2);
    }
    else {
        printf ("All values are identical to %d\n", largest1);
    }
    return 0;
}
----------------------------------------

int main () {
    int a1 [100], a2 [100], i, t, l1, l2, n;
    printf ("Enter the number of elements:\n");
    scanf ("%d", & n);
    printf ("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a1 [i]);
    }
    l1 = a1[0];
    for (i = 0; i < n; i++) {
        if (a1[i] >= l1) {
            l1 = a1[i];
            t = i;
        }
    }
    for (i = 0; i < (n - 1); i++) {
        if (i == t) {
            continue;
        }
        else {
            a2[i] = a1[i];
        }
    }
    l2 = a2[0];
    for (i = 1; i < (n - 1); i++) {
        if (a2[i] >= l2 && a2[i] < l1) {
            l2 = a2[i];
        }
    }
    printf ("Second highest number is %d", l2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42403331_3_46
42401198_45697292_3_32
Title: Program to find largest and second largest number in array 
----------------------------------------

int main (void) {
    int a [10], n, i;
    int largest1, largest2, has_largest2;
    printf ("enter number of elements you want in array: ");
    if (scanf ("%d", &n) != 1)
        return 1;
    if (n < 2) {
        printf ("need at least 2 elements\n");
        return 1;
    }
    printf ("enter elements: ");
    for (i = 0; i < n; i++) {
        if (scanf ("%d", &a[i]) != 1) {
            printf ("input error\n");
            return 1;
        }
    }
    largest1 = a[0];
    for (i = 1; i < n; i++) {
        if (a[i] > largest1) {
            largest1 = a[i];
        }
    }
    has_largest2 = largest2 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] < largest1) {
            if (!has_largest2) {
                has_largest2 = 1;
                largest2 = a[i];
            }
            else if (a[i] > largest2) {
                largest2 = a[i];
            }
        }
    }
    if (has_largest2) {
        printf ("First and second largest number is %d and %d\n", largest1, largest2);
    }
    else {
        printf ("All values are identical to %d\n", largest1);
    }
    return 0;
}
----------------------------------------

int main () {
    int a [10], n;
    int i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    int largest1 = a[0], largest2 = a[0];
    for (i = 0; i < n; i++) {
        if (a[i] > largest1) {
            largest2 = largest1;
            largest1 = a[i];
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42403331_3_46
42401198_46284468_3_57
Title: Program to find largest and second largest number in array 
----------------------------------------

int main (void) {
    int a [10], n, i;
    int largest1, largest2, has_largest2;
    printf ("enter number of elements you want in array: ");
    if (scanf ("%d", &n) != 1)
        return 1;
    if (n < 2) {
        printf ("need at least 2 elements\n");
        return 1;
    }
    printf ("enter elements: ");
    for (i = 0; i < n; i++) {
        if (scanf ("%d", &a[i]) != 1) {
            printf ("input error\n");
            return 1;
        }
    }
    largest1 = a[0];
    for (i = 1; i < n; i++) {
        if (a[i] > largest1) {
            largest1 = a[i];
        }
    }
    has_largest2 = largest2 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] < largest1) {
            if (!has_largest2) {
                has_largest2 = 1;
                largest2 = a[i];
            }
            else if (a[i] > largest2) {
                largest2 = a[i];
            }
        }
    }
    if (has_largest2) {
        printf ("First and second largest number is %d and %d\n", largest1, largest2);
    }
    else {
        printf ("All values are identical to %d\n", largest1);
    }
    return 0;
}
----------------------------------------

int main () {
    int a [10];
    int i, b, c;
    printf ("Enter ten values : \n");
    for (i = 0; i < 10; i++) {
        scanf ("%d", & a [i]);
    }
    b = a[0];
    for (i = 0; i < 10; i++) {
        if (a[i] > b) {
            b = a[i];
        }
        else {
            b = b;
        }
    }
    if (b == a[1]) {
        c = a[2];
    }
    else {
        c = a[1];
    }
    for (i = 0; i < 10; i++) {
        if (a[i] > c && a[i] != b) {
            c = a[i];
        }
        else if (b > c) {
            c = c;
        }
    }
    printf ("Largest number is %d\nSecond largest number is %d", b, c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_42403331_3_46
42401198_49332683_1_17
Title: Program to find largest and second largest number in array 
----------------------------------------

int main (void) {
    int a [10], n, i;
    int largest1, largest2, has_largest2;
    printf ("enter number of elements you want in array: ");
    if (scanf ("%d", &n) != 1)
        return 1;
    if (n < 2) {
        printf ("need at least 2 elements\n");
        return 1;
    }
    printf ("enter elements: ");
    for (i = 0; i < n; i++) {
        if (scanf ("%d", &a[i]) != 1) {
            printf ("input error\n");
            return 1;
        }
    }
    largest1 = a[0];
    for (i = 1; i < n; i++) {
        if (a[i] > largest1) {
            largest1 = a[i];
        }
    }
    has_largest2 = largest2 = 0;
    for (i = 0; i < n; i++) {
        if (a[i] < largest1) {
            if (!has_largest2) {
                has_largest2 = 1;
                largest2 = a[i];
            }
            else if (a[i] > largest2) {
                largest2 = a[i];
            }
        }
    }
    if (has_largest2) {
        printf ("First and second largest number is %d and %d\n", largest1, largest2);
    }
    else {
        printf ("All values are identical to %d\n", largest1);
    }
    return 0;
}
----------------------------------------

int main () {
    int largest1 = 0, largest2 = 0, i, temp;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & temp);
        if (temp >= largest1) {
            largest2 = largest1;
            largest1 = temp;
        }
        else if (temp > largest2) {
            largest2 = temp;
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_45514636_2_43
42401198_45697292_3_32
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a1 [100], a2 [100], i, t, l1, l2, n;
    printf ("Enter the number of elements:\n");
    scanf ("%d", & n);
    printf ("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a1 [i]);
    }
    l1 = a1[0];
    for (i = 0; i < n; i++) {
        if (a1[i] >= l1) {
            l1 = a1[i];
            t = i;
        }
    }
    for (i = 0; i < (n - 1); i++) {
        if (i == t) {
            continue;
        }
        else {
            a2[i] = a1[i];
        }
    }
    l2 = a2[0];
    for (i = 1; i < (n - 1); i++) {
        if (a2[i] >= l2 && a2[i] < l1) {
            l2 = a2[i];
        }
    }
    printf ("Second highest number is %d", l2);
    return 0;
}
----------------------------------------

int main () {
    int a [10], n;
    int i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    int largest1 = a[0], largest2 = a[0];
    for (i = 0; i < n; i++) {
        if (a[i] > largest1) {
            largest2 = largest1;
            largest1 = a[i];
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_45514636_2_43
42401198_46284468_3_57
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a1 [100], a2 [100], i, t, l1, l2, n;
    printf ("Enter the number of elements:\n");
    scanf ("%d", & n);
    printf ("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a1 [i]);
    }
    l1 = a1[0];
    for (i = 0; i < n; i++) {
        if (a1[i] >= l1) {
            l1 = a1[i];
            t = i;
        }
    }
    for (i = 0; i < (n - 1); i++) {
        if (i == t) {
            continue;
        }
        else {
            a2[i] = a1[i];
        }
    }
    l2 = a2[0];
    for (i = 1; i < (n - 1); i++) {
        if (a2[i] >= l2 && a2[i] < l1) {
            l2 = a2[i];
        }
    }
    printf ("Second highest number is %d", l2);
    return 0;
}
----------------------------------------

int main () {
    int a [10];
    int i, b, c;
    printf ("Enter ten values : \n");
    for (i = 0; i < 10; i++) {
        scanf ("%d", & a [i]);
    }
    b = a[0];
    for (i = 0; i < 10; i++) {
        if (a[i] > b) {
            b = a[i];
        }
        else {
            b = b;
        }
    }
    if (b == a[1]) {
        c = a[2];
    }
    else {
        c = a[1];
    }
    for (i = 0; i < 10; i++) {
        if (a[i] > c && a[i] != b) {
            c = a[i];
        }
        else if (b > c) {
            c = c;
        }
    }
    printf ("Largest number is %d\nSecond largest number is %d", b, c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_45514636_2_43
42401198_49332683_1_17
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a1 [100], a2 [100], i, t, l1, l2, n;
    printf ("Enter the number of elements:\n");
    scanf ("%d", & n);
    printf ("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a1 [i]);
    }
    l1 = a1[0];
    for (i = 0; i < n; i++) {
        if (a1[i] >= l1) {
            l1 = a1[i];
            t = i;
        }
    }
    for (i = 0; i < (n - 1); i++) {
        if (i == t) {
            continue;
        }
        else {
            a2[i] = a1[i];
        }
    }
    l2 = a2[0];
    for (i = 1; i < (n - 1); i++) {
        if (a2[i] >= l2 && a2[i] < l1) {
            l2 = a2[i];
        }
    }
    printf ("Second highest number is %d", l2);
    return 0;
}
----------------------------------------

int main () {
    int largest1 = 0, largest2 = 0, i, temp;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & temp);
        if (temp >= largest1) {
            largest2 = largest1;
            largest1 = temp;
        }
        else if (temp > largest2) {
            largest2 = temp;
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_45697292_3_32
42401198_46284468_3_57
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    int largest1 = a[0], largest2 = a[0];
    for (i = 0; i < n; i++) {
        if (a[i] > largest1) {
            largest2 = largest1;
            largest1 = a[i];
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------

int main () {
    int a [10];
    int i, b, c;
    printf ("Enter ten values : \n");
    for (i = 0; i < 10; i++) {
        scanf ("%d", & a [i]);
    }
    b = a[0];
    for (i = 0; i < 10; i++) {
        if (a[i] > b) {
            b = a[i];
        }
        else {
            b = b;
        }
    }
    if (b == a[1]) {
        c = a[2];
    }
    else {
        c = a[1];
    }
    for (i = 0; i < 10; i++) {
        if (a[i] > c && a[i] != b) {
            c = a[i];
        }
        else if (b > c) {
            c = c;
        }
    }
    printf ("Largest number is %d\nSecond largest number is %d", b, c);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_45697292_3_32
42401198_49332683_1_17
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10], n;
    int i;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & a [i]);
    }
    int largest1 = a[0], largest2 = a[0];
    for (i = 0; i < n; i++) {
        if (a[i] > largest1) {
            largest2 = largest1;
            largest1 = a[i];
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------

int main () {
    int largest1 = 0, largest2 = 0, i, temp;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & temp);
        if (temp >= largest1) {
            largest2 = largest1;
            largest1 = temp;
        }
        else if (temp > largest2) {
            largest2 = temp;
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42401198_46284468_3_57
42401198_49332683_1_17
Title: Program to find largest and second largest number in array 
----------------------------------------

int main () {
    int a [10];
    int i, b, c;
    printf ("Enter ten values : \n");
    for (i = 0; i < 10; i++) {
        scanf ("%d", & a [i]);
    }
    b = a[0];
    for (i = 0; i < 10; i++) {
        if (a[i] > b) {
            b = a[i];
        }
        else {
            b = b;
        }
    }
    if (b == a[1]) {
        c = a[2];
    }
    else {
        c = a[1];
    }
    for (i = 0; i < 10; i++) {
        if (a[i] > c && a[i] != b) {
            c = a[i];
        }
        else if (b > c) {
            c = c;
        }
    }
    printf ("Largest number is %d\nSecond largest number is %d", b, c);
}
----------------------------------------

int main () {
    int largest1 = 0, largest2 = 0, i, temp;
    printf ("enter number of elements you want in array");
    scanf ("%d", & n);
    printf ("enter elements");
    for (i = 0; i < n; i++) {
        scanf ("%d", & temp);
        if (temp >= largest1) {
            largest2 = largest1;
            largest1 = temp;
        }
        else if (temp > largest2) {
            largest2 = temp;
        }
    }
    printf ("First and second largest number is %d and %d ", largest1, largest2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42419674_42421529_1_17
42419674_42435738_6_24
Title: Scanning text file into an array? 
----------------------------------------

int main () {
    int numbers [50];
    int i = 0;
    for (; i < 50; i++) {
        int n;
        int conversion_count = scanf ("%i", &n);
        if (conversion_count != 1) {
            break;
        }
        if (n == -1) {
            break;
        }
        numbers[i] = n;
    }
    printf ("%d numbers read.\n", i);
}
----------------------------------------

int main (void) {
    int numbers [MAX_NUMBERS];
    int i;
    for (i = 0; i < MAX_NUMBERS; i++) {
        if (1 != scanf ("%d", &numbers[i])) {
            perror ("scanf for number failed");
            exit (EXIT_FAILURE);
        }
        if (-1 == numbers[i])
            break;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42423897_42424008_1_18
42423897_42424210_1_17
Title: Check how many Fibonacci numbers exists between 1 and N 
----------------------------------------

int main () {
    int n, count = 2, first = 0, second = 1, next = 0, fib = 0;
    printf ("Enter the value of N: ");
    scanf ("%d", & n);
    while ((first + second) <= n) {
        next = first + second;
        first = second;
        second = next;
        printf ("%d", next);
        count++;
    }
    printf ("found %d numbers ", count);
}
----------------------------------------

int main () {
    int n, i, first = 0, second = 1, next = 0, fib = 0;
    printf ("Enter the value of N: ");
    scanf ("%d", & n);
    for (i = 1; next <= n; i++) {
        next = first + second;
        first = second;
        second = next;
    }
    printf ("%d", i);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42438530_42440202_1_44
42438530_42457690_52_75
Title: A stack of words in C (Sentence Palindrome) 
----------------------------------------

void create_stack (TOP *s, char str [1000]) {
    char temp1 [30];
    int i = 0, j = 0;
    STACK *temp;
    temp = malloc (1 * sizeof (STACK));
    temp->next = NULL;
    while (1) {
        if (str[i] != ' ' && str[i] != '\0') {
            temp1[j] = str[i];
            j++;
        }
        else {
            temp1[j] = '\0';
            strcpy (temp -> s, temp1);
            printf ("%s\n", temp -> s);
            if (s->top == NULL) {
                s->top = temp;
                s->num = 1;
            }
            else {
                temp->next = s->top;
                s->top = temp;
                s->num++;
            }
            j = 0;
            temp = malloc (1 * sizeof (STACK));
        }
        if (str[i] == '\0') {
            free (temp);
            break;
        }
        i++;
    }
}
----------------------------------------

void create_stack (TOP *s, char str [1000]) {
    char temp1 [30];
    int i = 0, j = 0;
    while (1) {
        if (str[i] != ' ' && str[i] != '\0') {
            temp1[j] = str[i];
            j++;
        }
        else {
            temp1[j] = '\0';
            push (s, temp1);
            j = 0;
        }
        if (str[i] == '\0') {
            break;
        }
        i++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42475689_42475765_3_15
42475689_42475919_8_23
Title: Function calling trouble 
----------------------------------------

int main (void) {
    int year;
    double population;
    printf ("Enter a year after 1990 >  ");
    scanf ("%d", & year);
    population = get_population (year);
    printf ("Predicted Gotham City population for %d (in thousands):%f", year, population);
    return 0;
}
----------------------------------------

int main (void) {
    int t;
    double population;
    printf ("Enter a year after 1990 >  ");
    scanf ("%d", & t);
    population = int get_population (t);
    printf ("Predicted Gotham City population for 2015 (in thousands):%f");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494329_3_20
42494100_42494337_3_21
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i;
    int n;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                printf ("%d is not a prime number\n", i);
                break;
            }
            n--;
        }
        if (n == 2)
            printf ("%d is a prime number\n", i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i = 10;
    for (; i > 1; i--) {
        int n = 10;
        int flag = 0;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                flag = 1;
                printf ("%d is not a prime number", i);
                break;
            }
            n--;
        }
        if (flag == 0) {
            printf ("%d is a prime number", i);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494329_3_20
42494100_42494444_15_36
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i;
    int n;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                printf ("%d is not a prime number\n", i);
                break;
            }
            n--;
        }
        if (n == 2)
            printf ("%d is a prime number\n", i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        unsigned int n;
        printf ("Enter a non-negative number (0 - exit): ");
        if (scanf ("%u", &n) != 1 || n == 0)
            break;
        printf ("\nPrime numbers up to %u:", n);
        for (unsigned int i = 0; i < n; i++) {
            if (is_prime (i +1))
                printf (" %u", i +1);
        }
        printf ("\n\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494329_3_20
42494100_42494660_3_22
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i;
    int n;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                printf ("%d is not a prime number\n", i);
                break;
            }
            n--;
        }
        if (n == 2)
            printf ("%d is a prime number\n", i);
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 10;
    int n = 10;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 1) {
            if ((i % (n - 1)) == 0 && (n - 1 != 1)) {
                printf ("\n\n %d is not a prime number", i);
                break;
            }
            n--;
            if (n == 1) {printf ("\n\n %d is a prime number", i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494329_3_20
42494100_42494796_2_12
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i;
    int n;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                printf ("%d is not a prime number\n", i);
                break;
            }
            n--;
        }
        if (n == 2)
            printf ("%d is a prime number\n", i);
    }
    return 0;
}
----------------------------------------

int main () {
    int i, a;
    for (i = 2; i <= 10; i++) {
        for (a = 2; a < i; a++)
            if (a % i == 0)
                break;
        if (a == i)
            printf ("%d is a prime number", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494329_3_20
42494100_42494860_3_33
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i;
    int n;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                printf ("%d is not a prime number\n", i);
                break;
            }
            n--;
        }
        if (n == 2)
            printf ("%d is a prime number\n", i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num;
    int divisor;
    for (num = 10; num > 2; num--) {
        if (num % 2 == 0) {
            printf ("%d is not a prime number\n", num);
            continue;
        }
        for (divisor = 3; divisor <= num / 2; divisor += 2) {
            if (num % divisor == 0) {
                printf ("%d is not a prime number\n", num);
                break;
            }
        }
        if (divisor > num / 2) {
            printf ("%d is a prime number\n", num);
        }
    }
    printf ("2 is a prime number\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494337_3_21
42494100_42494444_15_36
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i = 10;
    for (; i > 1; i--) {
        int n = 10;
        int flag = 0;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                flag = 1;
                printf ("%d is not a prime number", i);
                break;
            }
            n--;
        }
        if (flag == 0) {
            printf ("%d is a prime number", i);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        unsigned int n;
        printf ("Enter a non-negative number (0 - exit): ");
        if (scanf ("%u", &n) != 1 || n == 0)
            break;
        printf ("\nPrime numbers up to %u:", n);
        for (unsigned int i = 0; i < n; i++) {
            if (is_prime (i +1))
                printf (" %u", i +1);
        }
        printf ("\n\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494337_3_21
42494100_42494660_3_22
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i = 10;
    for (; i > 1; i--) {
        int n = 10;
        int flag = 0;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                flag = 1;
                printf ("%d is not a prime number", i);
                break;
            }
            n--;
        }
        if (flag == 0) {
            printf ("%d is a prime number", i);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 10;
    int n = 10;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 1) {
            if ((i % (n - 1)) == 0 && (n - 1 != 1)) {
                printf ("\n\n %d is not a prime number", i);
                break;
            }
            n--;
            if (n == 1) {printf ("\n\n %d is a prime number", i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494337_3_21
42494100_42494796_2_12
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i = 10;
    for (; i > 1; i--) {
        int n = 10;
        int flag = 0;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                flag = 1;
                printf ("%d is not a prime number", i);
                break;
            }
            n--;
        }
        if (flag == 0) {
            printf ("%d is a prime number", i);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int i, a;
    for (i = 2; i <= 10; i++) {
        for (a = 2; a < i; a++)
            if (a % i == 0)
                break;
        if (a == i)
            printf ("%d is a prime number", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494337_3_21
42494100_42494860_3_33
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    int i = 10;
    for (; i > 1; i--) {
        int n = 10;
        int flag = 0;
        while (n > 2) {
            if ((i % (n - 1)) == 0) {
                flag = 1;
                printf ("%d is not a prime number", i);
                break;
            }
            n--;
        }
        if (flag == 0) {
            printf ("%d is a prime number", i);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num;
    int divisor;
    for (num = 10; num > 2; num--) {
        if (num % 2 == 0) {
            printf ("%d is not a prime number\n", num);
            continue;
        }
        for (divisor = 3; divisor <= num / 2; divisor += 2) {
            if (num % divisor == 0) {
                printf ("%d is not a prime number\n", num);
                break;
            }
        }
        if (divisor > num / 2) {
            printf ("%d is a prime number\n", num);
        }
    }
    printf ("2 is a prime number\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494444_15_36
42494100_42494660_3_22
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    while (1) {
        unsigned int n;
        printf ("Enter a non-negative number (0 - exit): ");
        if (scanf ("%u", &n) != 1 || n == 0)
            break;
        printf ("\nPrime numbers up to %u:", n);
        for (unsigned int i = 0; i < n; i++) {
            if (is_prime (i +1))
                printf (" %u", i +1);
        }
        printf ("\n\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i = 10;
    int n = 10;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 1) {
            if ((i % (n - 1)) == 0 && (n - 1 != 1)) {
                printf ("\n\n %d is not a prime number", i);
                break;
            }
            n--;
            if (n == 1) {printf ("\n\n %d is a prime number", i);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494444_15_36
42494100_42494796_2_12
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    while (1) {
        unsigned int n;
        printf ("Enter a non-negative number (0 - exit): ");
        if (scanf ("%u", &n) != 1 || n == 0)
            break;
        printf ("\nPrime numbers up to %u:", n);
        for (unsigned int i = 0; i < n; i++) {
            if (is_prime (i +1))
                printf (" %u", i +1);
        }
        printf ("\n\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int i, a;
    for (i = 2; i <= 10; i++) {
        for (a = 2; a < i; a++)
            if (a % i == 0)
                break;
        if (a == i)
            printf ("%d is a prime number", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494444_15_36
42494100_42494860_3_33
Title: Getting all prime numbers 
----------------------------------------

int main (void) {
    while (1) {
        unsigned int n;
        printf ("Enter a non-negative number (0 - exit): ");
        if (scanf ("%u", &n) != 1 || n == 0)
            break;
        printf ("\nPrime numbers up to %u:", n);
        for (unsigned int i = 0; i < n; i++) {
            if (is_prime (i +1))
                printf (" %u", i +1);
        }
        printf ("\n\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num;
    int divisor;
    for (num = 10; num > 2; num--) {
        if (num % 2 == 0) {
            printf ("%d is not a prime number\n", num);
            continue;
        }
        for (divisor = 3; divisor <= num / 2; divisor += 2) {
            if (num % divisor == 0) {
                printf ("%d is not a prime number\n", num);
                break;
            }
        }
        if (divisor > num / 2) {
            printf ("%d is a prime number\n", num);
        }
    }
    printf ("2 is a prime number\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494660_3_22
42494100_42494796_2_12
Title: Getting all prime numbers 
----------------------------------------

int main () {
    int i = 10;
    int n = 10;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 1) {
            if ((i % (n - 1)) == 0 && (n - 1 != 1)) {
                printf ("\n\n %d is not a prime number", i);
                break;
            }
            n--;
            if (n == 1) {printf ("\n\n %d is a prime number", i);
        }
    }
}
----------------------------------------

int main () {
    int i, a;
    for (i = 2; i <= 10; i++) {
        for (a = 2; a < i; a++)
            if (a % i == 0)
                break;
        if (a == i)
            printf ("%d is a prime number", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494660_3_22
42494100_42494860_3_33
Title: Getting all prime numbers 
----------------------------------------

int main () {
    int i = 10;
    int n = 10;
    for (i = 10; i > 1; i--) {
        n = i;
        while (n > 1) {
            if ((i % (n - 1)) == 0 && (n - 1 != 1)) {
                printf ("\n\n %d is not a prime number", i);
                break;
            }
            n--;
            if (n == 1) {printf ("\n\n %d is a prime number", i);
        }
    }
}
----------------------------------------

int main (void) {
    int num;
    int divisor;
    for (num = 10; num > 2; num--) {
        if (num % 2 == 0) {
            printf ("%d is not a prime number\n", num);
            continue;
        }
        for (divisor = 3; divisor <= num / 2; divisor += 2) {
            if (num % divisor == 0) {
                printf ("%d is not a prime number\n", num);
                break;
            }
        }
        if (divisor > num / 2) {
            printf ("%d is a prime number\n", num);
        }
    }
    printf ("2 is a prime number\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42494100_42494796_2_12
42494100_42494860_3_33
Title: Getting all prime numbers 
----------------------------------------

int main () {
    int i, a;
    for (i = 2; i <= 10; i++) {
        for (a = 2; a < i; a++)
            if (a % i == 0)
                break;
        if (a == i)
            printf ("%d is a prime number", i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num;
    int divisor;
    for (num = 10; num > 2; num--) {
        if (num % 2 == 0) {
            printf ("%d is not a prime number\n", num);
            continue;
        }
        for (divisor = 3; divisor <= num / 2; divisor += 2) {
            if (num % divisor == 0) {
                printf ("%d is not a prime number\n", num);
                break;
            }
        }
        if (divisor > num / 2) {
            printf ("%d is a prime number\n", num);
        }
    }
    printf ("2 is a prime number\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42500516_42500747_1_38
42500516_42501062_1_47
Title: Using Write() to write to a pipe is always returning 0 
----------------------------------------

int main () {
    int fdP [2];
    int fdC [2];
    char readBuffer [2];
    pipe (fdP);
    pipe (fdC);
    pid_t pid;
    pid = fork ();
    if (pid < 0) {
        perror ("There was an error during the fork");
        exit (1);
    }
    if (pid == 0) {
        close (fdP [0]);
        close (fdC [1]);
        read (fdC [0], readBuffer, sizeof (readBuffer));
        printf ("Child received: %s\n", readBuffer);
        write (fdP [1], "B", 2);
        exit (0);
    }
    else {
        close (fdC [0]);
        close (fdP [1]);
        write (fdC [1], "A", 2);
        read (fdP [0], readBuffer, sizeof (readBuffer));
        printf ("Parent received: %s\n", readBuffer);
        wait (NULL);
    }
    printf ("%s\n", "finished");
}
----------------------------------------

int main () {
    int fdChildtoParent [2];
    int fdParentToChild [2];
    int nBytes;
    char childInbox [1];
    char parentInbox [1];
    pipe (fdChildtoParent);
    pipe (fdParentToChild);
    pid_t pid;
    pid = fork ();
    if (pid < 0) {
        perror ("There was an error during the fork");
        exit (1);
    }
    if (pid == 0) {
        close (fdChildtoParent [0]);
        close (fdParentToChild [1]);
        read (fdParentToChild [0], childInbox, sizeof (childInbox));
        printf ("Child received: %s\n", childInbox);
        write (fdChildtoParent [1], "B", sizeof ("B"));
        exit (0);
    }
    else {
        close (fdParentToChild [0]);
        close (fdChildtoParent [1]);
        write (fdParentToChild [1], "A", sizeof ("A"));
        read (fdChildtoParent [0], parentInbox, sizeof (parentInbox));
        printf ("Parent received: %s\n", parentInbox);
        exit (0);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42511040_42511435_4_16
42511040_42512241_6_33
Title: Max value using define 
----------------------------------------

int main () {
    int a = INT_MIN;
    int i = 0;
    for (i = 0; i < 5; i++) {
        int x = 0;
        printf ("Enter the value of X:\n");
        scanf ("%d", & x);
        a = LARGEST (x, a);
    }
    printf ("%d", a);
}
----------------------------------------

int main (void) {
    int largest = 0, n = 0, x;
    while (n < MAX) {
        int ret;
        printf ("enter value %d of %d: ", n + 1, MAX);
        ret = scanf ("%d", &x);
        if (ret == 1) {
            if (n)
                largest = LARGEST (largest, x);
            n++;
        }
        else if (ret == EOF) {
            fprintf (stderr, "user canceled input.\n");
            return 0;
        }
        else {
            fprintf (stderr, "error: invalid input.\n");
            int c;
            while ((c = getchar ()) != '\n' && c != EOF) {
            }
        }
    }
    printf ("\nlargest: %d\n", largest);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42517844_42517928_5_19
42517844_42518238_3_17
Title: Reading until I manage to enter an integer 
----------------------------------------

int main (void) {
    long int value;
    char line [100];
    while (fgets (line, sizeof (line), stdin) != NULL) {
        char *endptr;
        value = strtol (line, &endptr, 10);
        if ((isspace (*endptr) != 0) && (endptr != line))
            break;
    }
    fprintf (stdout, "%ld\n", value);
    return 0;
}
----------------------------------------

int main () {
    int a;
    do {
        printf ("Give an intiger\n");
        if (scanf ("%d", &a)) {
            break;
        }
        if (scanf ("%*[^\n]") == EOF) {
            break;
        }
    }
    while (1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42545824_42546024_1_19
42545824_42548763_1_26
Title: Can I improve the running time of this selection sort algorithm? 
----------------------------------------

void SelectionSort (int a [], size_t n) {
    for (size_t i = 0; i < n; i++) {
        size_t min = i;
        for (size_t j = i + 1; j < n; j++) {
            if (a[j] < a[min])
                min = j;
        }
        if (i != min) {
            int tmp = a[i];
            a[i] = a[min];
            a[min] = tmp;
        }
    }
}
----------------------------------------

void SelectionSort (int array [], int len) {
    int temp, i, j, minpos, swapped;
    swapped = 0;
    for (j = 0; j < len; j++) {
        minpos = j;
        for (i = j + 1; i < len; i++) {
            if (array[minpos] > array[i]) {
                minpos = i;
                swapped = 1;
            }
        }
        if (swapped == 1) {
            temp = array[j];
            array[j] = array[minpos];
            array[minpos] = temp;
            swapped = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42569928_42569969_1_10
42569928_42570029_1_10
Title: C Program to calculate sum of numbers X to Y using recursion 
----------------------------------------

int calculateSum (int from, int to) {
    int res;
    if (to == from) {
        return (from);
    }
    else {
        res = to + calculateSum (from, to -1);
    }
    return (res);
}
----------------------------------------

int calculateSum (int fromNum, int toNum) {
    int res;
    if (fromNum == toNum) {
        return (fromNum);
    }
    else {
        res = fromNum + calculateSum ((fromNum + 1), toNum);
    }
    return (res);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42571619_42571734_1_17
42571619_42576140_1_12
Title: Function not returning expected value 
----------------------------------------

int isValid (char inputUN [], account acount []) {
    int index;
    int y = -1;
    for (index = 0; index < 10 && y == -1; index++) {
        if (strcmp (acount[index].unList, inputUN) == 0) {
            y = index;
        }
        else {
            y = -1;
        }
    }
    return y;
}
----------------------------------------

int isValid (char inputUN [], account acount []) {
    int index;
    for (index = 0; index < 10; index++) {
        if (strcmp (acount[index].unList, inputUN) == 0) {
            return index;
        }
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42594104_42594334_11_25
42594104_42595990_12_19
Title: How is it possible to access a functions variable outside the function? 
----------------------------------------

int main (void) {
    bool *xp;
    address (& xp);
    xp[0] = false;
    xp[2] = false;
    xp[7] = false;
    printf ("%d", xp [0]);
    printf ("%d", xp [2]);
    printf ("%d", xp [7]);
    return 0;
}
----------------------------------------

int main () {
    int *a = address ();
    int i, sum = 0;
    for (i = 0; i < 5; i++)
        sum += a[i];
    printf ("sum = %d\n", sum);
    for (i = 0; i < 5; i++)
        printf ("a[%d] = %d\n", i, a[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42596776_42596891_5_19
42596776_42596987_17_34
Title: decimal to octal conversion in c programming (using code blocks) 
----------------------------------------

int main () {
    int num, i, len = 0, x [100];
    printf ("enter a number\t");
    scanf ("%d", & num);
    while (num > 0) {
        x[len] = num % 8;
        num = num / 8;
        len++;
    }
    for (i = len; i >= 0; i--)
        printf ("\n%d", x[i]);
    return 0;
}
----------------------------------------

int main () {
    int num, count;
    long sum, x;
    printf ("enter a number\t");
    scanf ("%d", & num);
    count = 0;
    sum = 0;
    while (num > 0) {
        x = num % 8;
        x = x * pow10 (count);
        count = count + 1;
        num = num / 8;
        sum = sum + x;
    }
    printf ("\n%ld", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4260719_12659192_2_15
4260719_21372787_1_20
Title: loop on prompt with a yes or no? 
----------------------------------------

int main (void) {
    avi;
    char loop [10];
    while (loop = yes) {
        ...
    }
    printf ("would you like to continue (yes/no)/n");
    scanf ("%s", loop);
    if (strcpm (loop, "YES") == 0) goto avi :
}
----------------------------------------

int main () {
    char A = 'n';
    char B = 'y';
    char Answer;
    printf ("Does the subject have a glazed over look?  (y/n): \n");
    scanf ("%c", & Answer);
    if (Answer == 'N' || Answer == 'y' || Answer == 'N' || Answer == 'Y')
        printf ("Good\n");
    else
        printf ("Please enter 'y' or 'n' \n ");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42621698_42622137_16_35
42621698_42622502_12_34
Title: Close a thread based on a variable value from calling thread 
----------------------------------------

void *func2 (void *arg) {
    bool *check = (bool *) arg;
    ...func4 ();
    if (*check == TRUE)
        goto end;
    char *var2 = malloc (10);
    func5 ();
    if (*check == TRUE)
        goto clean_var2;
    char *var3 = malloc (20);
    ...cleanup : free (var3);
clean_var2 :
    free (var2);
end :
    return (void *) 0;
}
----------------------------------------

void *func2 (void *arg) {
    struct func2_data data = {NULL, NULL};
    pthread_cleanup_push (func2_cleanup, & data);
    func4 ();
    data.var2 = malloc (10);
    pthread_testcancel ();
    func5 ();
    data.var3 = malloc (10);
    pthread_testcancel ();
    pthread_cleanup_pop (1);
    return NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42668005_42668275_3_20
42668005_42671942_1_27
Title: I have to check a number is palindrome or not by recursion 
----------------------------------------

int pali (int n) {
    int fUnit, lUnit;
    fUnit = n;
    int mul = 1;
    while (fUnit > 10) {
        fUnit /= 10;
        mul *= 10;
    }
    lUnit = n - ((n / 10) * 10);
    n -= (fUnit * mul);
    n /= 10;
    if (mul == 1)
        return 1;
    else if (fUnit == lUnit)
        return pali (n);
    else
        return 0;
}
----------------------------------------

int pali (int number) {
    int smallDigit, bigDigit;
    if (number == 0)
        return 1;
    smallDigit = number % 10;
    bigDigit = number;
    while (bigDigit / 10 != 0) {
        bigDigit = bigDigit / 10;
        smallDigit = smallDigit * 10;
    }
    if (bigDigit != number % 10)
        return 0;
    else {
        number = (number - smallDigit) / 10;
        return pali (number);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42698181_42698550_1_19
42698181_42699439_6_26
Title: Main thread and worker thread initialization 
----------------------------------------

void create_thread (t_game_data *game_data) {
    for (size_t i = 0; i < 10; i++) {
        t_args *args = malloc (sizeof (t_args));
        if (!args) {
        }
        else {
            args->game = game_data;
            args->id = i;
            printf ("%zu CREATION\n", i);
            if (pthread_create (&game_data->object[i]->thread_id, NULL, &do_action, args) != 0) {
                free (args);
            }
        }
    }
}
----------------------------------------

void create_thread (t_game_data *game_data) {
    size_t i;
    t_args args;
    i = 0;
    if (sem_init (&semaphore, 0, 0) == -1) {
    }
    args.game = game_data;
    while (i < 10) {
        args.id = i;
        printf ("%zu CREATION\n", i);
        pthread_create (& game_data -> object [i] -> thread_id, NULL, & do_action, args);
        sem_wait (& semaphore);
        i++;
    }
    sem_destroy (& semaphore);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42724021_42724121_9_37
42724021_42724172_9_41
Title: How to count the characters of a string and assign them to different groups (lower case & upper case) in C 
----------------------------------------

int main () {
    char str [MAX_LEN] = {0};
    char upper [MAX_LEN] = {0};
    char lower [MAX_LEN] = {0};
    int i = 0;
    int j = 0, h = 0;
    printf ("Enter a string: ");
    fgets (str, MAX_LEN, stdin);
    str[strcspn (str, "\n")] = 0;
    for (i = 0; i < strlen (str); i++) {
        if (str[i] >= 'A' && str[i] <= 'Z') {
            upper[j++] = str[i];
        }
        else if (str[i] > 'a' && str[i] < 'z') {
            lower[h++] = str[i];
        }
    }
    printf ("%s", upper);
    printf ("%s", lower);
    return 0;
}
----------------------------------------

int main () {
    char str [MAX_LEN] = {0};
    char upper [MAX_LEN] = {0};
    char lower [MAX_LEN] = {0};
    int i = 0;
    int up = 0, low = 0;
    printf ("Enter a string: ");
    fgets (str, MAX_LEN, stdin);
    str[strcspn (str, "\n")] = 0;
    for (i = 0; i < strlen (str); i++) {
        if (str[i] >= 'A' && str[i] <= 'Z') {
            upper[up] = str[i];
            up++;
        }
        else if (str[i] >= 'a' && str[i] <= 'z') {
            lower[low] = str[i];
            low++;
        }
    }
    printf ("%s\n", upper);
    printf ("%s", lower);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4272918_4273128_3_40
4272918_4273145_23_53
Title: c pointer to pointer memory allocation 
----------------------------------------

struct node_t *node_create (void *node_data) {
    struct node_t *node = NULL;
    char *s = node_data;
    size_t slen = strlen (s);
    node = malloc (sizeof *node);
    if (!node) {
        printf ("Erro ao criar um node!\n");
        return NULL;
    }
    node->tuple = malloc (sizeof *node->tuple);
    if (!node->tuple) {
        printf ("Erro ao criar o node->tuple\n");
        free (node);
        return NULL;
    }
    node->tuple->fields = malloc (slen * sizeof node->tuple->fields[0]);
    if (!node->tuple->fields) {
        printf ("Erro ao criar o node->tuple->node_fields\n");
        free (node -> tuple);
        free (node);
        return NULL;
    }
    char arr [slen + 1];
    strcpy (arr, s);
    int i = split_str (arr, node->tuple->fields, " ");
    node->tuple->n_fields = i;
    node->tuple->timestamp = 0L;
    node->next = NULL;
    return node;
}
----------------------------------------

struct node_t *node_create (char *node_data) {
    struct node_t *node = (struct node_t *) malloc (sizeof (struct node_t));
    if (!node) {
        printf ("Erro ao criar um node!\n");
        return NULL;
    }
    node->tuple = (struct tuple_t *) malloc (sizeof (struct tuple_t));
    if (!node->tuple) {
        printf ("Erro ao criar o node->tuple\n");
        node_destroy (node);
        return NULL;
    }
    node->tuple->timestamp = 0L;
    node->tuple->fields = split_str (node_data, " ", &(node->tuple->n_fields));
    if (!node->tuple->fields) {
        printf ("Erro ao criar o node->tuple->node_fields\n");
        node_destroy (node);
        return NULL;
    }
    node->next = NULL;
    return node;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42777224_42777820_17_35
42777224_42777936_1_18
Title: How to directly compare a first and second element in an array? 
----------------------------------------

void printNext (const char *t) {
    bool first = true;
    for (; *t; ++t) {
        if (first) {
            if (sameKindAndSeq (*t, t[1])) {
                putchar (*t);
                first = false;
            }
        }
        else {
            if (sameKindAndSeq (t[-1], *t)) {
                putchar (*t);
            }
            if (!sameKindAndSeq (*t, t[1])) {
                putchar ('\n');
                first = true;
            }
        }
    }
}
----------------------------------------

void printNext (const char *t) {
    int i;
    int isdigit (int);
    int isupper (int);
    int islower (int);
    for (i = 0; t[i] != '\0'; i++) {
        if (isdigit (t[i]))
            printf ("%c", t[i]);
        if (isupper (t[i]))
            printf ("%c", t[i]);
        if (islower (t[i]))
            printf ("%c", t[i]);
        if (t[i] + 1 != t[i + 1])
            printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42800462_42803200_23_33
42800462_51809191_23_33
Title: Trying to implement a red-black tree in C 
----------------------------------------

Node *newNode (int key) {
    Node *temp = (Node *) malloc (sizeof (Node));
    temp->key = key;
    temp->color = RED;
    temp->left = NULL;
    temp->right = NULL;
    temp->parent = NULL;
    return temp;
}
----------------------------------------

Node *newNode (int key) {
    Node *temp = (Node *) malloc (sizeof (Node));
    temp->key = key;
    temp->color = RED;
    temp->left = NULL;
    temp->right = NULL;
    temp->parent = NULL;
    return temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42806683_42806766_1_11
42806683_42807218_1_14
Title: binary tree preorder traversal prints only NULL 
----------------------------------------

Node *insert (Node *node, int key) {
    if (node == NULL)
        return newNode (key);
    else if (node->data > key)
        node->left = insert (node->left, key);
    else if (node->data < key)
        node->right = insert (node->right, key);
    return node;
}
----------------------------------------

Node *insert (Node *root, int key) {
    Node **link = &root;
    while (*link) {
        if ((*link)->data > key) {
            link = &((*link)->left);
        }
        else {
            link = &((*link)->right);
        }
    }
    *link = newNode (key);
    return root;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42810897_42874352_4_31
42810897_42882040_4_39
Title: reverse an unsigned int number causing overflow 
----------------------------------------

int main (void) {
    unsigned int x;
    printf ("max unsigned int = %u\n\n", UINT_MAX);
    printf ("please enter any unsigned int,\n" "it will show the reverse number if it is in range\n" "(enter 10 digit only)\n\n");
    while (scanf ("%u", &x) == 1) {
        unsigned int temp = x, result = 0;
        int overflow = 0;
        while (temp > 0) {
            unsigned int digit = temp % 10;
            if (result > UINT_MAX / 10 || (result == UINT_MAX / 10 && digit > UINT_MAX % 10)) {
                overflow++;
                break;
            }
            result = result * 10 + digit;
            temp /= 10;
        }
        if (overflow)
            printf ("out of range for unsigned int type\n\n");
        else
            printf ("result is %u\n\n", result);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int x;
    printf ("max int = %d\n", INT_MAX);
    printf ("min int = %d\n\n", INT_MIN);
    printf ("please enter any integer within -2,147,483,648 ~ 2,147,483,647,\n" "it will show the reverse number if it is in range\n" "(enter 10 digit or less)\n\n");
    while (scanf ("%d", &x) == 1) {
        int temp = x, result = 0;
        int overflow = 0;
        while (temp >= INT_MIN || temp <= INT_MAX) {
            int digit = temp % 10;
            printf ("temp is %u\n", temp);
            printf ("result is %u\n", result);
            if (result > INT_MAX / 10 || (result == INT_MAX / 10 && digit > INT_MAX % 10)) {
                overflow++;
                break;
            }
            if (result < INT_MIN / 10 || (result == INT_MIN / 10 && digit > INT_MIN % 10)) {
                overflow++;
                break;
            }
            result = result * 10 + digit;
            temp /= 10;
            if (temp == 0)
                break;
        }
        if (overflow)
            printf ("out of range for int type\n\n");
        else
            printf ("result is %d\n\n", result);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42812404_42812561_1_12
42812404_42812594_8_23
Title: trying to sort structures but errors or crashing 
----------------------------------------

void fnEmployeeNumSort (struct strPerson *ptrPerson, size_t count) {
    for (size_t i = 0; i < count - 1; i++) {
        if (ptrPerson[i].nEmployeeNum > ptrPerson[i + 1].nEmployeeNum) {
            struct strPerson temp = ptrPerson[i + 1];
            ptrPerson[i + 1] = ptrPerson[i];
            ptrPerson[i] = temp;
            if (i > 0) {
                i -= 2;
            }
        }
    }
}
----------------------------------------

void fnEmployeeNumSort (struct strPerson *ptrPerson, size_t n) {
    for (size_t last = n; !(n < 2); n = last) {
        for (size_t i = last = 1; i < n; i++) {
            if (ptrPerson[i].nEmployeeNum < ptrPerson[i - 1].nEmployeeNum) {
                struct strPerson temp = ptrPerson[i];
                ptrPerson[i] = ptrPerson[i - 1];
                ptrPerson[i - 1] = temp;
                last = i;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42820898_42820961_13_45
42820898_42820961_57_93
Title: Collective or individual loops for best performance? 
----------------------------------------

int main (void) {
    int a [N], b [N], c [N], d [N], e [N], i;
    wallclock_t t;
    double s;
    wallclock_mark (& t);
    for (i = 0; i < N; ++i) {
        a[i] = i * 10 + (i - 2);
        b[i] = i * 9 + (i - 3);
        c[i] = i * 8 + (i - 1);
        d[i] = i * 11 + (i - 5);
        e[i] = i * 5 + (i - 0);
    }
    s = wallclock_since (&t);
    printf ("Populating took %.9f seconds wall clock time.\n", s);
    wallclock_mark (& t);
    for (i = 0; i < N; ++i) {
        a[i] = e[i] + (i - 1);
        b[i] = d[i] + (i + 3);
        c[i] = a[i] - (i + 2);
        d[i] = b[i] + (i - 2);
        e[i] = a[i] + (i - 4);
    }
    s = wallclock_since (&t);
    printf ("Load/write took %.9f seconds wall clock time.\n", s);
    return 0;
}
----------------------------------------

int main (void) {
    int a [N], b [N], c [N], d [N], e [N], i;
    wallclock_t t;
    double s;
    wallclock_mark (& t);
    for (i = 0; i < N; ++i)
        a[i] = i * 10 + (i - 2);
    for (i = 0; i < N; ++i)
        b[i] = i * 9 + (i - 3);
    for (i = 0; i < N; ++i)
        c[i] = i * 8 + (i - 1);
    for (i = 0; i < N; ++i)
        d[i] = i * 11 + (i - 5);
    for (i = 0; i < N; ++i)
        e[i] = i * 5 + (i - 0);
    s = wallclock_since (&t);
    printf ("Populating took %.9f seconds wall clock time.\n", s);
    wallclock_mark (& t);
    for (i = 0; i < N; ++i)
        a[i] = e[i] + (i - 1);
    for (i = 0; i < N; ++i)
        b[i] = d[i] + (i + 3);
    for (i = 0; i < N; ++i)
        c[i] = a[i] - (i + 2);
    for (i = 0; i < N; ++i)
        d[i] = b[i] + (i - 2);
    for (i = 0; i < N; ++i)
        e[i] = a[i] + (i - 4);
    s = wallclock_since (&t);
    printf ("Load/write took %.9f seconds wall clock time.\n", s);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
42877617_42879599_4_31
42877617_42879608_5_36
Title: How to read multiple digit number from a string 
----------------------------------------

int main (void) {
    char s [1000], alp [1000];
    int num [1000];
    int i, k = 0, m, n;
    if (scanf ("%999[^\n]", s) == 1) {
        for (i = 0; s[i]; i++) {
            n = 1;
            if (isdigit ((unsigned char) s[i])) {
                for (n = s[i++] - '0'; isdigit ((unsigned char) s[i]); i++) {
                    n = n * 10 + s[i] - '0';
                }
            }
            if (isalpha ((unsigned char) s[i])) {
                alp[k] = s[i];
                num[k] = n;
                k += 1;
            }
        }
        for (i = 0; i < k; i++) {
            for (m = 0; m < num[i]; m++)
                putchar (alp[i]);
        }
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    char s [1000], alp [1000];
    int num [1000];
    int m = 0, n = 0;
    int i, j;
    unsigned char ch;
    scanf ("%999[^\n]", s);
    for (i = 0; ch = s[i]; i++) {
        if (isalpha (ch)) {
            alp[n++] = s[i];
        }
        else if (isdigit (ch)) {
            num[m] = 0;
            while (isdigit (ch = s[i])) {
                num[m] = num[m] * 10 + s[i] - '0';
                ++i;
            }
            ++m;
            --i;
        }
        else {
            printf ("include invalid character (%c).\n", ch);
            return -1;
        }
    }
    for (i = 0; i < m; i++) {
        for (j = 0; j < num[i]; j++)
            printf ("%c", alp[i]);
    }
    puts ("");
    return 0;
}
----------------------------------------

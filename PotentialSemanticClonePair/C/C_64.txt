$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
985051_20790106_8_20
985051_48729979_10_39
Title: What is the purpose of fork()? 
----------------------------------------

void main (void) {
    pid_t pid;
    int i;
    char buf [BUF_SIZE];
    fork ();
    pid = getpid ();
    for (i = 1; i <= MAX_COUNT; i++) {
        sprintf (buf, "This line is from pid %d, value = %d\n", pid, i);
        write (1, buf, strlen (buf));
    }
}
----------------------------------------

int main (void) {
    pid_t childPID;
    int var_lcl = 0;
    childPID = fork ();
    if (childPID >= 0) {
        if (childPID == 0) {
            var_lcl++;
            var_glb++;
            printf ("\n Child Process :: var_lcl = [%d], var_glb[%d]\n", var_lcl, var_glb);
        }
        else {
            var_lcl = 10;
            var_glb = 20;
            printf ("\n Parent process :: var_lcl = [%d], var_glb[%d]\n", var_lcl, var_glb);
        }
    }
    else {
        printf ("\n Fork failed, quitting!!!!!!\n");
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
985051_20790106_8_20
985051_8840855_4_24
Title: What is the purpose of fork()? 
----------------------------------------

void main (void) {
    pid_t pid;
    int i;
    char buf [BUF_SIZE];
    fork ();
    pid = getpid ();
    for (i = 1; i <= MAX_COUNT; i++) {
        sprintf (buf, "This line is from pid %d, value = %d\n", pid, i);
        write (1, buf, strlen (buf));
    }
}
----------------------------------------

int main () {
    int t1, t2, p, i, n, ab;
    p = getpid ();
    printf ("enter the number of levels\n");
    fflush (stdout);
    scanf ("%d", & n);
    printf ("root %d\n", p);
    fflush (stdout);
    for (i = 1; i < n; i++) {
        t1 = fork ();
        if (t1 != 0)
            t2 = fork ();
        if (t1 != 0 && t2 != 0)
            break;
        printf ("child pid %d   parent pid %d\n", getpid (), getppid ());
        fflush (stdout);
    }
    waitpid (t1, & ab, 0);
    waitpid (t2, & ab, 0);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
985051_48729979_10_39
985051_8840855_4_24
Title: What is the purpose of fork()? 
----------------------------------------

int main (void) {
    pid_t childPID;
    int var_lcl = 0;
    childPID = fork ();
    if (childPID >= 0) {
        if (childPID == 0) {
            var_lcl++;
            var_glb++;
            printf ("\n Child Process :: var_lcl = [%d], var_glb[%d]\n", var_lcl, var_glb);
        }
        else {
            var_lcl = 10;
            var_glb = 20;
            printf ("\n Parent process :: var_lcl = [%d], var_glb[%d]\n", var_lcl, var_glb);
        }
    }
    else {
        printf ("\n Fork failed, quitting!!!!!!\n");
        return 1;
    }
    return 0;
}
----------------------------------------

int main () {
    int t1, t2, p, i, n, ab;
    p = getpid ();
    printf ("enter the number of levels\n");
    fflush (stdout);
    scanf ("%d", & n);
    printf ("root %d\n", p);
    fflush (stdout);
    for (i = 1; i < n; i++) {
        t1 = fork ();
        if (t1 != 0)
            t2 = fork ();
        if (t1 != 0 && t2 != 0)
            break;
        printf ("child pid %d   parent pid %d\n", getpid (), getppid ());
        fflush (stdout);
    }
    waitpid (t1, & ab, 0);
    waitpid (t2, & ab, 0);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9861110_9861124_1_21
9861110_9861367_1_20
Title: Function is not printing out the result 
----------------------------------------

char *function (char *s1, char *s2) {
    int size = strlen (s1) + strlen (s2) + 2;
    char *result = malloc (size);
    char *p = result;
    while (*s1 != '\0') {
        *p = *s1;
        p++;
        s1++;
    }
    *p = '\n';
    p++;
    while (*s2 != '\0') {
        *p = *s2;
        p++;
        s2++;
    }
    *p = '\0';
    return result;
}
----------------------------------------

char *function (char *s1, char *s2) {
    char *newStr, *str;
    int size;
    size = strlen (s1) + strlen (s2);
    newStr = (char *) malloc ((size + 2) * sizeof (char));
    str = newStr;
    while (*s1 != '\0') {
        *(newStr++) = *(s1++);
    }
    *newStr = '\n';
    newStr++;
    while (*s2 != '\0') {
        *newStr = *s2;
        newStr++;
        s2++;
    }
    *newStr = '\0';
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9864558_24055801_2_19
9864558_9865067_5_27
Title: stack with finding character inside string in C language 
----------------------------------------

int main () {
    int vowel = 0, consonant = 0;
    printf ("input the string: ");
    scanf ("%s", name);
    printf ("The string is %s\n", name);
    for (int i = 0; name[i] != '\0'; i++) {
        if (name[i] == 'A' || name[i] == 'E' || name[i] == 'I' || name[i] == 'O' || name[i] == 'U') {
            vowel++;
        }
        else
            consanant++;
    }
    printf ("%d %d", vowel, consonant);
    return 0;
}
----------------------------------------

int main () {
    int i;
    int counter = 0, counter2 = 0;
    char *s;
    char name [30];
    char vowel [6] = "AEIOU";
    printf ("input the string: ");
    scanf ("%s", name);
    printf ("The string is %s\n", name);
    for (i = 0; name[i] != '\0'; i++) {
        if (strchr (vowel, toupper (name[i])) != NULL) {
            counter++;
        }
        else {
            counter2++;
        }
    }
    printf ("First counter is %d\n", counter);
    printf ("The second counter is %d\n", counter2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9864558_24055801_2_19
9864558_9865159_3_26
Title: stack with finding character inside string in C language 
----------------------------------------

int main () {
    int vowel = 0, consonant = 0;
    printf ("input the string: ");
    scanf ("%s", name);
    printf ("The string is %s\n", name);
    for (int i = 0; name[i] != '\0'; i++) {
        if (name[i] == 'A' || name[i] == 'E' || name[i] == 'I' || name[i] == 'O' || name[i] == 'U') {
            vowel++;
        }
        else
            consanant++;
    }
    printf ("%d %d", vowel, consonant);
    return 0;
}
----------------------------------------

int main () {
    int t [256];
    int i, c;
    int cntw = 0;
    int cntc = 0;
    const char *vowel = "AEIOUaeiou";
    const char *consonants = "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz";
    memset (t, 0, 256);
    while (*vowel) {
        t[*vowel] = 1;
        ++vowel;
    }
    while (*consonants) {
        t[*consonants] = 2;
        ++consonants;
    }
    printf ("Input the text:  CTRL-D to end\n");
    c = getchar ();
    while (c >= 0) {
        switch (t[c]) {
        case 1 :
            ++cntw;
            break;
        case 2 :
            ++cntc;
            break;
        }
        c = getchar ();
    }
    printf ("Text has %d vowel%s and %d consonant%s\n", cntw, (cntw > 1) ? "s" : "", cntc, (cntc > 1) ? "s" : "");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9864558_9865067_5_27
9864558_9865159_3_26
Title: stack with finding character inside string in C language 
----------------------------------------

int main () {
    int i;
    int counter = 0, counter2 = 0;
    char *s;
    char name [30];
    char vowel [6] = "AEIOU";
    printf ("input the string: ");
    scanf ("%s", name);
    printf ("The string is %s\n", name);
    for (i = 0; name[i] != '\0'; i++) {
        if (strchr (vowel, toupper (name[i])) != NULL) {
            counter++;
        }
        else {
            counter2++;
        }
    }
    printf ("First counter is %d\n", counter);
    printf ("The second counter is %d\n", counter2);
    return 0;
}
----------------------------------------

int main () {
    int t [256];
    int i, c;
    int cntw = 0;
    int cntc = 0;
    const char *vowel = "AEIOUaeiou";
    const char *consonants = "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz";
    memset (t, 0, 256);
    while (*vowel) {
        t[*vowel] = 1;
        ++vowel;
    }
    while (*consonants) {
        t[*consonants] = 2;
        ++consonants;
    }
    printf ("Input the text:  CTRL-D to end\n");
    c = getchar ();
    while (c >= 0) {
        switch (t[c]) {
        case 1 :
            ++cntw;
            break;
        case 2 :
            ++cntc;
            break;
        }
        c = getchar ();
    }
    printf ("Text has %d vowel%s and %d consonant%s\n", cntw, (cntw > 1) ? "s" : "", cntc, (cntc > 1) ? "s" : "");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9881024_9881185_1_19
9881024_9881399_1_19
Title: removing duplicate integers from an array in C 
----------------------------------------

int removedup (int a []) {
    int i, count, j;
    count = n;
    for (i = 0; i < (count - 1); i++) {
        if (a[i] == a[i + 1]) {
            for (j = i; j < (count - 1); j++) {
                a[j] = a[j + 1];
            }
            count--;
            i--;
        }
    }
    return count;
}
----------------------------------------

int removedup (int a []) {
    int i;
    count = n;
    for (i = 0; i < (count - 1); ++i) {
        if (a[i] == a[i + 1]) {
            int d = 0;
            do {
                ++d;
            }
            while ((i + 1 + d) < count && a[i] == a[i + 1 + d]);
            if ((i + 1 + d) < count)
                memmove (&a[i + 1], &a[i + 1 + d], sizeof (int) * (count - (i + 1 + d)));
            count -= d;
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9881024_9881185_1_19
9881024_9882001_1_29
Title: removing duplicate integers from an array in C 
----------------------------------------

int removedup (int a []) {
    int i, count, j;
    count = n;
    for (i = 0; i < (count - 1); i++) {
        if (a[i] == a[i + 1]) {
            for (j = i; j < (count - 1); j++) {
                a[j] = a[j + 1];
            }
            count--;
            i--;
        }
    }
    return count;
}
----------------------------------------

int removedup (int a []) {
    int i, count, j;
    count = n;
    int b [n];
    memset (b, 0, sizeof (b));
    for (i = 0; i < (n - 1); i++) {
        if (-1 != b[i]) {
            for (j = i + 1; j < n - 1; j++) {
                if (a[i] == a[j]) {
                    b[j] = -1;
                    count--;
                }
            }
        }
    }
    for (i = 0; i < n - 1; i++) {
        if (-1 != b[i]) {
            printf ("%d ", a [i]);
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9881024_9881399_1_19
9881024_9882001_1_29
Title: removing duplicate integers from an array in C 
----------------------------------------

int removedup (int a []) {
    int i;
    count = n;
    for (i = 0; i < (count - 1); ++i) {
        if (a[i] == a[i + 1]) {
            int d = 0;
            do {
                ++d;
            }
            while ((i + 1 + d) < count && a[i] == a[i + 1 + d]);
            if ((i + 1 + d) < count)
                memmove (&a[i + 1], &a[i + 1 + d], sizeof (int) * (count - (i + 1 + d)));
            count -= d;
        }
    }
    return count;
}
----------------------------------------

int removedup (int a []) {
    int i, count, j;
    count = n;
    int b [n];
    memset (b, 0, sizeof (b));
    for (i = 0; i < (n - 1); i++) {
        if (-1 != b[i]) {
            for (j = i + 1; j < n - 1; j++) {
                if (a[i] == a[j]) {
                    b[j] = -1;
                    count--;
                }
            }
        }
    }
    for (i = 0; i < n - 1; i++) {
        if (-1 != b[i]) {
            printf ("%d ", a [i]);
        }
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9886103_9886200_3_24
9886103_9889036_1_17
Title: converting integers to binary 
----------------------------------------

int main () {
    int nv, r, num;
    int counter = 0;
    printf ("Enter a number: ");
    scanf ("%d", & num);
    while (num > 0) {
        nv = num / 2;
        r = num % 2;
        num -= (nv + r);
        counter++;
        printf ("New Value: %d\n", nv);
        printf ("Remainder: %d\n", r);
        printf ("Current Value: %d\n", num);
    }
    printf ("Counter: %d\n", counter);
    return 0;
}
----------------------------------------

int main () {
    int val = 1;
    int n = 0;
    int num;
    printf ("Enter a number: ");
    scanf ("%d", & num);
    while (val <= num) {
        if (val & num)
            printf ("bit %d is '1'\n", n);
        else
            printf ("bit %d is '0'\n", n);
        n++;
        val <<= 1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9895600_9898809_3_20
9895600_9903751_4_40
Title: Octal to Decimal in C 
----------------------------------------

main () {
    printf ("Please enter an octal number ending with # \n");
    int number [21];
    int numberOfSlots = 0;
    int decimalNumber = 0;
    int nextNum, i;
    for (nextNum = getchar (); nextNum != '#'; nextNum = getchar ()) {
        number[numberOfSlots++] = nextNum - '0';
    }
    for (i = 0; i < numberOfSlots; ++i) {
        decimalNumber = decimalNumber * 8 + number[i];
    }
    printf ("%d", decimalNumber);
}
----------------------------------------

main () {
    printf ("Please enter an octal number ending with # \n");
    int nextNum = getchar ();
    int number [100];
    int numberOfSlots = 0;
    int power = 0;
    int decimalNumber = 0;
    int i = 0;
    while (nextNum != '#') {
        if (nextNum >= '0' && nextNum <= '9') {
            nextNum = (nextNum - '0');
            number[numberOfSlots] = nextNum;
            numberOfSlots++;
        }
        else {
            printf ("Oops! That's not a valid number!");
        }
        nextNum = getchar ();
    }
    for (i = numberOfSlots - 1; i >= 0; i--) {
        decimalNumber = decimalNumber + (number[i] * pow (8, power));
        power++;
    }
    printf ("%d", decimalNumber);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9901058_10967575_6_17
9901058_28600613_8_20
Title: Arduino can't read Serial properly 
----------------------------------------

void loop () {
    while (!Serial.available ())
        ;
    while (true) {
        int byte = Serial.timedRead ();
        if (byte == -1)
            break;
        Serial.write (byte);
    }
    Serial.println ();
}
----------------------------------------

void loop () {
    while (Serial.available () > 0) {
        char c = Serial.read ();
        str.concat (c);
        if (Serial.available () == 0) {
            Serial.print (str);
            str = "";
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9901678_9902216_5_31
9901678_9902258_8_39
Title: not getting the correct sum - openmp 
----------------------------------------

int main () {
    int i, nthreads;
    int chunk = 10;
    float a [N], b [N], c [N], d [N];
    double result = 0;
    nthreads = omp_get_num_threads ();
    printf ("no of threads %d\n", nthreads);
    for (i = 0; i < N; i++) {
        a[i] = i * 1.5;
        b[i] = i + 22.35;
    }
    for (i = 0; i < N; i++) {
        result = result + (a[i] + b[i]);
    }
    printf ("value is %f", result);
    return 0;
}
----------------------------------------

int main () {
    int i, nthreads;
    float a [N], b [N];
    double result = 0;
    {
        nthreads = omp_get_num_threads ();
        printf ("no. of threads %d\n", nthreads);
        for (int i = 0; i < N; i++) {
            a[i] = i * 1.5;
            b[i] = i + 22.35;
        }
        for (int i = 0; i < N; i++) {
            double sum = a[i] + b[i];
            result += sum;
        }
        printf ("result = %f\n", result);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9901678_9902216_5_31
9901678_9956658_7_39
Title: not getting the correct sum - openmp 
----------------------------------------

int main () {
    int i, nthreads;
    int chunk = 10;
    float a [N], b [N], c [N], d [N];
    double result = 0;
    nthreads = omp_get_num_threads ();
    printf ("no of threads %d\n", nthreads);
    for (i = 0; i < N; i++) {
        a[i] = i * 1.5;
        b[i] = i + 22.35;
    }
    for (i = 0; i < N; i++) {
        result = result + (a[i] + b[i]);
    }
    printf ("value is %f", result);
    return 0;
}
----------------------------------------

int main () {
    const double A = 22.35;
    const double B = 1.5;
    double a [N], b [N], c [N], d [N];
    double result = 0;
    {
    std :
        : cout << "no of threads: " << omp_get_num_threads () << std : : endl;
        for (int i = 0; i < N; ++i) {
            a[i] = i * B;
            b[i] = i + A;
        }
        for (int i = 0; i < N; ++i)
            result += a[i] + b[i];
    }
    double answer = N * (A + 0.5 * (B + 1) * (N - 1));
std :
    : cout << "computed result = " << std : : setprecision (16) << result << '\n' << "correct answer  = " << std : : setprecision (16) << answer << std : : endl;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9901678_9902258_8_39
9901678_9956658_7_39
Title: not getting the correct sum - openmp 
----------------------------------------

int main () {
    int i, nthreads;
    float a [N], b [N];
    double result = 0;
    {
        nthreads = omp_get_num_threads ();
        printf ("no. of threads %d\n", nthreads);
        for (int i = 0; i < N; i++) {
            a[i] = i * 1.5;
            b[i] = i + 22.35;
        }
        for (int i = 0; i < N; i++) {
            double sum = a[i] + b[i];
            result += sum;
        }
        printf ("result = %f\n", result);
    }
    return 0;
}
----------------------------------------

int main () {
    const double A = 22.35;
    const double B = 1.5;
    double a [N], b [N], c [N], d [N];
    double result = 0;
    {
    std :
        : cout << "no of threads: " << omp_get_num_threads () << std : : endl;
        for (int i = 0; i < N; ++i) {
            a[i] = i * B;
            b[i] = i + A;
        }
        for (int i = 0; i < N; ++i)
            result += a[i] + b[i];
    }
    double answer = N * (A + 0.5 * (B + 1) * (N - 1));
std :
    : cout << "computed result = " << std : : setprecision (16) << result << '\n' << "correct answer  = " << std : : setprecision (16) << answer << std : : endl;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
992836_13486890_1_32
992836_992876_4_38
Title: How to access the Java method in a C++ application 
----------------------------------------

int main (int argc, char *argv []) {
    JNIEnv *env;
    JavaVM *jvm;
    env = create_vm (&jvm);
    if (env == NULL)
        return 1;
    jclass myClass = NULL;
    jmethodID main = NULL;
    myClass = env->FindClass ("HelloWorld");
    if (myClass != NULL)
        main = env->GetStaticMethodID (myClass, "main", "([Ljava/lang/String;)V");
    else
        printf ("Unable to find the requested class\n");
    if (main != NULL) {
        env->CallStaticVoidMethod (myClass, main, " ");
    }
    else
        printf ("main method not found");
    jvm->DestroyJavaVM ();
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    JavaVM *vm;
    JNIEnv *env;
    JavaVMInitArgs vm_args;
    vm_args.version = JNI_VERSION_1_2;
    vm_args.nOptions = 0;
    vm_args.ignoreUnrecognized = 1;
    jint res = JNI_CreateJavaVM (&vm, (void **) &env, &vm_args);
    jstring jstr = env->NewStringUTF ("Hello World");
    jclass clazz = env->FindClass ("java/lang/String");
    jmethodID to_lower = env->GetMethodID (clazz, "toLowerCase", "()Ljava/lang/String;");
    jobject result = env->CallObjectMethod (jstr, to_lower);
    const char *str = env->GetStringUTFChars ((jstring) result, NULL);
    printf ("%s\n", str);
    env->ReleaseStringUTFChars (jstr, str);
    vm->DestroyJavaVM ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9982737_9982822_2_16
9982737_9982913_3_13
Title: counting the number of digits in using only scanf in c 
----------------------------------------

int main () {
    long int a;
    int b;
    do {
        scanf ("%ld", & a);
        if (a < 0)
            printf ("invalid input");
    }
    while (a < 0);
    for (b = 0; a != 0; b++, a = a / 10)
        ;
    printf ("%d", b);
}
----------------------------------------

int main (void) {
    char buffer [10] = {0};
    size_t len;
    scanf ("%9[0-9]", buffer);
    for (len = 0; buffer[len] != 0; len++)
        ;
    printf ("%zu '%s'\n", len, buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9989596_9990075_7_56
9989596_9990130_14_61
Title: Calculating sum of N powers 
----------------------------------------

int main (void) {
    int msg;
    int child_pid;
    int parent_to_child [2];
    int child_to_parent [2];
    int ret_val = pipe (parent_to_child);
    if (ret_val != 0) {
        printf ("pipe command failed !!\n");
        exit (1);
    }
    ret_val = pipe (child_to_parent);
    if (ret_val != 0) {
        printf ("pipe command failed !!\n");
        exit (1);
    }
    child_pid = fork ();
    if (child_pid == -1) {
        printf ("fork() failed !!\n");
        exit (1);
    }
    else if (child_pid == 0) {
        read (parent_to_child [0], & msg, sizeof (int));
        printf ("child got %d from parent \n", msg);
        msg = 34;
        write (child_to_parent [1], & msg, sizeof (int));
    }
    else {
        msg = 24;
        write (parent_to_child [1], & msg, sizeof (int));
        read (child_to_parent [0], & msg, sizeof (int));
        printf ("parent got %d from child \n", msg);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    pid_t figli [N];
    unsigned int i;
    int status;
    int fd [N * 2] [2];
    int msg1 = 0, msg2;
    int risultato = 0;
    bool padre = true;
    for (i = 0; i < N && padre; i++) {
        pipe (fd [i * 2]);
        pipe (fd [i * 2 + 1]);
        figli[i] = fork ();
        if (figli[i] < 0) {
            fprintf (stderr, "Una fork ha fallito\n");
        }
        else if (figli[i] == 0) {
            padre = false;
        }
        else {
            msg1 = i + 1;
            write (fd [i * 2] [1], & msg1, sizeof (int));
        }
    }
    if (!padre) {
        i--;
        read (fd [i * 2] [0], & msg2, sizeof (int));
        msg2 = pow (2.0, msg2);
        write (fd [i * 2 + 1] [1], & msg2, sizeof (int));
        exit (0);
    }
    else {
        for (i = 0; i < N; i++) {
            read (fd [i * 2 + 1] [0], & msg2, sizeof (int));
            risultato += msg2;
        }
    }
    if (padre)
        fprintf (stderr, "%d\n", risultato);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
9995564_9995728_10_22
9995564_9996019_15_27
Title: Function with return type array in C 
----------------------------------------

int main (int argc, char **argv) {
    printf ("Printing array:\n");
    int *arr = foo (42);
    for (int i = 0; i < 42; i++) {
        arr[i] = i;
    }
    for (int i = 0; i < 42; i++) {
        printf ("Element: %d: %d\n", i, arr [i]);
    }
    free (arr);
    return 0;
}
----------------------------------------

int main () {
    int *x;
    int i;
    x = function (10);
    for (i = 0; i < 10; i++) {
        printf ("TEST: %i\n", x [i]);
    }
    free (x);
    x = NULL;
    return 0;
}
----------------------------------------

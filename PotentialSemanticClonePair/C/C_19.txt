$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26474263_26475368_5_19
26474263_26475799_1_15
Title: Return a string on C 
----------------------------------------

const char *checkExtension (const char *filename) {
    int len = strlen (filename) - 5;
    char *newName = NULL;
    if (len > 0 && !strcmp (filename +len, ".palz")) {
        newName = malloc (len +1);
        if (newName) {
            memcpy (newName, filename, len);
            newName[len] = 0;
        }
    }
    return newName;
}
----------------------------------------

char *checkExtension (const char *filename) {
    char *point;
    static char newName [512];
    strncpy (newName, filename, 512);
    if ((point = strstr (newName, ".palz")) != NULL) {
        if (strlen (point) == 5) {
            *point = 0;
            return newName;
        }
    }
    return NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26491288_26491433_1_12
26491288_26491648_1_23
Title: How to pass null parameters to a function 
----------------------------------------

void displayNum (int n, int first, int second, int third, int fourth, int fifth) {
    switch (n) {
    case 5 :
        printf ("%d", fifth);
    case 4 :
        printf ("%d", fourth);
    case 3 :
        printf ("%d", third);
    case 2 :
        printf ("%d", second);
    case 1 :
        printf ("%d", first);
        break;
    default :
        printf ("wrong n value\n");
    }
}
----------------------------------------

void displayNum (int n, int first, int second, int third, int fourth, int fifth) {
    int temp = 1;
    while (n >= temp) {
        if (temp == 5)
            printf ("%d ", fifth);
        elseif (temp == 4)
        printf ("%d ", fourth);
        elseif (temp == 3)
        printf ("%d ", third);
        else if (temp == 2)
            printf ("%d ", second);
        else if (temp == 1)
            printf ("%d", first);
        temp++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26491288_26491433_1_12
26491288_26495867_45_56
Title: How to pass null parameters to a function 
----------------------------------------

void displayNum (int n, int first, int second, int third, int fourth, int fifth) {
    switch (n) {
    case 5 :
        printf ("%d", fifth);
    case 4 :
        printf ("%d", fourth);
    case 3 :
        printf ("%d", third);
    case 2 :
        printf ("%d", second);
    case 1 :
        printf ("%d", first);
        break;
    default :
        printf ("wrong n value\n");
    }
}
----------------------------------------

void displayNum (int n, ... ) {
    va_list ap;
    va_start (ap, n);
    for (int i = 0; i < n; i++) {
        int value = va_arg (ap, int);
        printf ("%20s: %d\n", label (i + 1), value);
    }
    printf ("\n");
    va_end (ap);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26491288_26491648_1_23
26491288_26495867_45_56
Title: How to pass null parameters to a function 
----------------------------------------

void displayNum (int n, int first, int second, int third, int fourth, int fifth) {
    int temp = 1;
    while (n >= temp) {
        if (temp == 5)
            printf ("%d ", fifth);
        elseif (temp == 4)
        printf ("%d ", fourth);
        elseif (temp == 3)
        printf ("%d ", third);
        else if (temp == 2)
            printf ("%d ", second);
        else if (temp == 1)
            printf ("%d", first);
        temp++;
    }
}
----------------------------------------

void displayNum (int n, ... ) {
    va_list ap;
    va_start (ap, n);
    for (int i = 0; i < n; i++) {
        int value = va_arg (ap, int);
        printf ("%20s: %d\n", label (i + 1), value);
    }
    printf ("\n");
    va_end (ap);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26499313_26499839_1_16
26499313_26500512_1_15
Title: Char array comparison 
----------------------------------------

void mutations (char arrayt [], char arraymt [], int *result, int max_index) {
    int i = 0;
    for (i = 0; i < max_index; i++) {
        if (arrayt[i] == arraymt[i]) {
            result[i] = 0;
            continue;
        }
        else {
            result[i] = 1;
        }
    }
}
----------------------------------------

unsigned mutations (char arrayt [], char arraymt [], int n_size, int m_size) {
    int sizemin = min (n_size, m_size);
    int sizemax = max (n_size, m_size);
    unsigned dest = 0;
    int i;
    for (i = 0; i < sizemin; i++) {
        if (arrayt[i] == arraymt[i])
            dest |= 1 << i;
    }
    for (; i < sizemax; i++) {
        dest |= 1 << i;
    }
    return dest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26509000_26509273_1_16
26509000_26510579_4_29
Title: How do I get console to loop until the right input is entered in C? 
----------------------------------------

void main () {
    int pin;
    printf ("Please enter the default pin: ");
    scanf ("%d", & pin);
    while (pin != 1111) {
        printf ("Invalid input\n");
        printf ("Please enter the default pin again: ");
        scanf ("%d", & pin);
    }
    printf ("program continues...");
}
----------------------------------------

int main () {
    int pin = 0;
    int ch = 0;
    printf ("Enter the default pin\n");
    while (pin != 1111) {
        if (scanf ("%d", &pin) == 1) {
            if (pin == 1111) {
                break;
            }
            else {
                printf ("Enter the default pin\n");
            }
        }
        else {
            while ((ch = getchar ()) != '\n') {
                if (ch == EOF) {
                    fprintf (stderr, "problem getting input\n");
                    return 1;
                }
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26530013_26530068_9_28
26530013_26530468_6_43
Title: Why are both parent and child pid showing 
----------------------------------------

int main () {
    pid_t children [nr_children];
    for (size_t i = 0; i < nr_children; ++i) {
        children[i] = fork ();
        if (children[i] == 0) {
            printf ("In Child %d\n", getpid ());
            exit (0);
        }
        else {
            printf ("In Parent %d\n", children [i]);
            getchar ();
        }
    }
    for (size_t i = 0; i < nr_children; ++i)
        waitpid (children[i], NULL, 0);
    exit (0);
}
----------------------------------------

int main (void) {
    int nPIDStore [12];
    for (size_t i = 0; i < 5; ++i) {
        pid_t p = fork ();
        if (p == -1) {
            perror ("error calling fork()");
            return EXIT_FAILURE;
        }
        else if (p == 0) {
            printf ("Child %zu created with pid %d.\n", i + 1, (int) getpid ());
            return EXIT_SUCCESS;
        }
        else {
            nPIDStore[i] = p;
            printf ("Pid of child %zu is %d\n", i + 1, nPIDStore [i]);
        }
    }
    for (size_t i = 0; i < 5; ++i) {
        if (waitpid (nPIDStore[i], NULL, 0) == -1) {
            perror ("error calling waitpid()");
            return EXIT_FAILURE;
        }
        else {
            printf ("Child %zu reaped.\n", i + 1);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26536288_26537017_16_35
26536288_26538291_51_77
Title: Reading in multiple lines of keywords as character arrays from file? In C 
----------------------------------------

int main () {
    const int KEYWORDS_COUNT = 100;
    char *keywords [KEYWORDS_COUNT];
    FILE *finn;
    int i = 0;
    finn = fopen ("plik.txt", "r");
    do {
        keywords[i] = (char *) malloc (sizeof (char) * 31);
    }
    while (readLine (finn, keywords[i++]));
    for (; i > 0; i--)
        free (keywords[i - 1]);
    fclose (finn);
}
----------------------------------------

int main () {
    FILE *fp = fopen ("keywords.txt", "r");
    if (!fp) {
        perror ("Opening file failed");
        return 1;
    }
    char *lineptr = NULL;
    size_t buffer_len = 0;
    ssize_t string_len;
    struct list_node *head = NULL;
    while ((string_len = getline (&lineptr, &buffer_len, fp)) != -1) {
        printf ("line:%s\n", lineptr);
        if (lineptr[string_len - 1] == '\n')
            lineptr[string_len - 1] = '\0';
        head = appendToList (head, lineptr);
    }
    free (lineptr);
    fclose (fp);
    int idx = 0;
    const char *keyword;
    while ((keyword = getKeywordAtIndex (head, idx++)) != NULL) {
        printf ("from list: %s\n", keyword);
    }
    clearList (head);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26540200_26540450_4_35
26540200_26540457_2_12
Title: How to repeat a menu (ask for user input again) after switch got a wrong input character 
----------------------------------------

int main (void) {
    char opcao;
    printf ("1 - \n");
    printf ("2 -\n");
    printf ("3 - \n");
    printf ("4 - \n");
    printf ("5 - \n");
    printf ("6 - Terminar programa\n");
    printf ("Introduza a sua opcao:\n");
    do {
        scanf (" %c", & opcao);
        switch (opcao) {
        case '1' :
        case '2' :
        case '3' :
        case '4' :
        case '5' :
            printf ("Funcionalidade nao disponivel.");
            break;
        case '6' :
            exit (0);
        default :
            printf ("invalid input, please type again:");
        }
    }
    while (opcao < '1' || opcao > '6');
    return 0;
}
----------------------------------------

int main () {
    char c, q = 1;
    while (q) {
        c = getchar ();
        switch (c) {
        case '1' :
            {
            }
            break;
        case '2' :
            {
                printf ("quit the menu\n");
                q = 0;
            }
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26545226_26545401_7_22
26545226_26545607_4_27
Title: How to use arrays in C 
----------------------------------------

int main () {
    index = 0;
    printf ("Insert x: ");
    scanf ("%c", & x);
    while (x != '%' && index <= 10) {
        sequence[index] = x;
        printf ("Insert x: ");
        scanf ("%c", & x);
        index = index + 1;
    }
    while (index > 0) {
        index = index - 1;
        printf ("%c", sequence [index]);
    }
    return 0;
}
----------------------------------------

int main () {
    int x = 0;
    int index = 0;
    int sequence [10] = {0};
    int ch = 0;
    printf ("Input 10 integers  (% to exit)\n");
    while (ch != '%') {
        if (scanf ("%d", &x) == 1) {
            sequence[index] = x;
            index++;
            if (index >= 10) {
                break;
            }
        }
        else {
            ch = getchar ();
        }
    }
    while (index > 0) {
        index = index - 1;
        printf ("%d\n", sequence [index]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26552099_26552630_1_25
26552099_26552794_4_24
Title: Storing a char n number of times in 1 loop 
----------------------------------------

int main (void) {
    int numberArray [] = {5, 10, 2};
    int charArray [] = {'x', 'y', 'z'};
    int outputArray [200];
    int inputIndex = 0;
    int inputLength = sizeof (numberArray) / sizeof (numberArray[0]);
    int outputIndex = 0;
    int outputCount = 0;
    while (inputIndex < inputLength) {
        if (outputCount < numberArray[inputIndex]) {
            outputArray[outputIndex++] = charArray[inputIndex];
            outputCount++;
        }
        else {
            outputCount = 0;
            inputIndex++;
        }
    }
}
----------------------------------------

int main (void) {
    int count = 0, i = 0, j = 0;
    int numbers [] = {4, 3, 2};
    char array [] = {'x', 'y', 'z'};
    int size = sizeof (numbers) / sizeof (numbers[0]);
    char target [BUFSIZ] = {'\0'};
    for (i = 0; i < size;) {
        target[j++] = array[i];
        ++count;
        if (!(numbers[i] > count)) {
            ++i;
            count = 0;
        }
    }
    printf ("target: %s\n", target);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26569509_26569558_1_18
26569509_26569651_9_28
Title: "C: Enqueue() - Inserting at the end of a linked list returning head of list" 
----------------------------------------

Queue *enqueue (Queue *queue, int data) {
    Queue *new_node, *p;
    new_node = malloc (sizeof (Queue));
    new_node->data = data;
    new_node->next = NULL;
    if (!queue)
        return new_node;
    p = queue;
    while (p->next)
        p = p->next;
    p->next = new_node;
    return queue;
}
----------------------------------------

Queue *enqueue (Queue *queue, int data) {
    Queue *new_node, *p;
    new_node = malloc (sizeof (Queue));
    new_node->data = data;
    new_node->next = NULL;
    p = queue;
    while (p->next != NULL) {
        p = p->next;
    }
    p->next = new_node;
    p = new_node;
    return (queue);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26569915_26569951_1_23
26569915_26571337_23_47
Title: Passing file opened from system call open() to function 
----------------------------------------

int copyCharArr (char *arr [], int fd) {
    int num_written = write (fd, arr, sizeof (arr));
    if (num_written == -1) {
        printf ("Unable to write file\n");
        return -1;
    }
    if (num_written != sizeof (arr)) {
        printf ("Unable to write entire file\n");
        return -1;
    }
    return 0;
}
----------------------------------------

int copyCharArr (char *arr, const size_t s, int fd) {
    ssize_t result = write (fd, arr, s);
    if (result == -1) {
        perror ("write() failed");
        return -1;
    }
    {
        size_t num_written = result;
        if (num_written != s) {
            fprintf (stderr, "Unable to write entire file.\n");
            return -1;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26571077_26571238_3_33
26571077_26571318_4_25
Title: How to show the digits which were repeated in c? 
----------------------------------------

int main (void) {
    int number [10] = {0};
    int digit;
    long n;
    printf ("Enter a number: ");
    scanf ("%ld", & n);
    printf ("Repeated digit(s): ");
    while (n > 0) {
        digit = n % 10;
        if (number[digit] > 0) {
            number[digit]++;
        }
        else if (number[digit] == 0)
            number[digit] = 1;
        n /= 10;
    }
    int i = 0;
    for (; i < 10; i++) {
        if (number[i] > 0)
            printf ("%d ", i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str [256] = {0};
    char rep [256] = {0};
    int ri = 0;
    char *p = str;
    printf ("\nEnter a number: ");
    scanf ("%[^\n]s", str);
    while (*p) {
        if (*(p + 1) && strchr (p +1, *p))
            if (!strchr (rep, *p))
                rep[ri++] = *p;
        p++;
    }
    printf ("\n  Repeated digit(s): %s\n\n", rep);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26572570_26572662_1_47
26572570_26572909_3_60
Title: If statement in while loop not working 
----------------------------------------

int main (void) {
    int choose, number1, number2, total_hold;
    do {
        printf ("\n");
        printf ("1: sum of two numbers \n");
        printf ("2: difference of two numbers\n");
        printf ("3: product of two numbers\n");
        printf ("<0:terminate the program\n");
        printf ("Select calculation:");
        scanf ("%d", & choose);
        if (choose < 0) {
            printf ("Terminating the program...");
            break;
        }
        printf ("Enter the first number:");
        scanf ("%d", & number1);
        printf ("Enter the second number:");
        scanf ("%d", & number2);
        if (choose == 1) {
            total_hold = sumOfNumbers (number1, number2);
            displayS (number1, number2, total_hold);
        }
        else if (choose == 2) {
            total_hold = differenceOfNumbers (number1, number2);
            displayD (number1, number2, total_hold);
        }
        else if (choose == 3) {
            total_hold = MultiplicationOfNumbers (number1, number2);
            displayM (number1, number2, total_hold);
        }
    }
    while (choose > 0);
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        enum {Exit = 0, Addition = 1, Difference = 2, Multiplication = 3};
        unsigned int choose;
        int number1, number2, total_hold;
        printf ("\n");
        printf ("%d: sum of two numbers \n", Addition);
        printf ("%d: difference of two numbers\n", Difference);
        printf ("%d: product of two numbers\n", Multiplication);
        printf ("%d: terminate the program\n", Exit);
        printf ("Select calculation:");
        scanf ("%u", & choose);
        if (choose == Exit) {
            printf ("Terminating the program...");
            break;
        }
        if (choose <= Multiplication) {
            printf ("Enter the first number:");
            scanf ("%d", & number1);
            printf ("Enter the second number:");
            scanf ("%d", & number2);
        }
        switch (choose) {
        case Addition :
            {total_hold = sumOfNumbers (number1, number2);
            displayS (number1, number2, total_hold);
            break;
        case Difference :
            total_hold = differenceOfNumbers (number1, number2);
            displayD (number1, number2, total_hold);
            break;
        case Multiplication :
            total_hold = MultiplicationOfNumbers (number1, number2);
            displayM (number1, number2, total_hold);
            break;
        default :
            printf ("Invalid selection. Try again.\n");
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26576417_26576498_3_17
26576417_26576562_3_23
Title: Weird behavior of a counter inside the for loop 
----------------------------------------

int main () {
    int a, b, matrice [2] [2];
    printf ("Put inside the matrix some numbers..\n");
    for (a = 1; a >= 0; a--) {
        for (b = 1; b >= 0; b--) {
            scanf ("%d", & matrice [a] [b]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int a, i, b, matrice [2] [2];
    printf ("Put inside the matrix some numbers..\n");
    for (a = 1; a >= 0; a--) {
        printf ("a->%d\n", a);
        for (b = 1; b >= 0; b--) {
            printf (" b->%d\n", b);
            scanf ("%d", & matrice [a] [b]);
        }
    }
    printf ("Check:\n");
    for (a = 1; a >= 0; a--) {
        for (b = 1; b >= 0; b--) {
            printf (" [%d][%d]:%d\n", a, b, matrice [a] [b]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26578947_26579228_3_22
26578947_26579808_58_74
Title: Reading strings with spaces from a file 
----------------------------------------

int main (void) {
    char username [16];
    char text [512];
    int ch, i;
    FILE *my_file = fopen ("inbox.txt", "r");
    while (1 == fscanf (my_file, "%15s%*c", username)) {
        i = 0;
        while (i < sizeof (text) - 1 && EOF != (ch = fgetc (my_file))) {
            if (ch == '\n' && i && text[i - 1] == '\n')
                break;
            text[i++] = ch;
        }
        text[i] = 0;
        printf ("user:%s\n", username);
        printf ("text:\n%s\n", text);
    }
    fclose (my_file);
    return 0;
}
----------------------------------------

int main (void) {
    Message mbox [MAX_MESSAGES];
    int n_msgs;
    for (n_msgs = 0; n_msgs < MAX_MESSAGES; n_msgs++) {
        if (read_message (stdin, &mbox[n_msgs]) == EOF)
            break;
    }
    printf ("Inbox (%d messages):\n\n", n_msgs);
    for (int i = 0; i < n_msgs; i++)
        printf ("%d: %s\n   %s\n\n", i +1, mbox[i].dest, mbox[i].text);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26600640_26600898_5_19
26600640_26601115_3_16
Title: Find bug in the C Program to Reverse a String 
----------------------------------------

void reverseStr (char *str) {
    int i, len;
    len = strlen (str);
    char temp1, temp2;
    int j = len - 1;
    for (i = 0; i < j / 2 + j % 2; i++) {
        printf ("%d %d %s\n", i, j, str);
        temp1 = str[j - i];
        temp2 = str[i];
        str[i] = temp1;
        str[j - i] = temp2;
        printf ("%d %d %s\n", i, j, str);
    }
    return;
}
----------------------------------------

void reverseStr (char *str) {
    int i, len = 0;
    while (str[len] != NULL) {
        len++;
    }
    len -= 1;
    char temp;
    for (i = 0; i < len / 2 + len % 2; i++) {
        temp = str[len - i];
        str[len - i] = str[i];
        str[i] = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26607114_26607470_2_41
26607114_26608532_9_50
Title: What's wrong with my algorithm code? 
----------------------------------------

int main (void) {
    int r, c;
    scanf ("%d %d", & r, & c);
    char cake [r] [c];
    < -- - Change int i, j, cnt = 0, cou = 0, a = 0, b = 0, cell = 0;
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            scanf ("%c", & cake [i] [j]);
        }
        < -- - Change
    }
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            cnt++;
            if (cake[i][j] == 'S') {
                cnt = 0;
                break;
            }
        }
        if (cnt > 0) {
            a++;
        }
    }
    for (j = 0; j < c; j++) {
        for (i = 0; i < r; i++) {
            cou++;
            if (cake[i][j] == 'S') {
                cou = 0;
                break;
            }
        }
        if (cou > 0) {
            b++;
        }
    }
    cell = cnt + cou - a * b;
    printf ("%d", cell);
    return 0;
}
----------------------------------------

int main () {
    int numrows, numcols, row, col, emptyr = 0, emptyc = 0, cell;
    scanf ("%d %d", & numrows, & numcols);
    if (numrows < 2 || numrows > MAXIND || numcols < 2 || numcols > MAXIND)
        return;
    for (row = 0; row < numrows; row++) {
        scanf ("%s", strg);
        strupr (strg);
        strncpy (cake [row], strg, MAXIND);
    }
    for (row = 0; row < numrows; row++) {
        for (col = 0; col < numcols; col++)
            if (cake[row][col] == 'S')
                break;
        if (col == numcols)
            emptyr++;
    }
    for (col = 0; col < numcols; col++) {
        for (row = 0; row < numrows; row++)
            if (cake[row][col] == 'S')
                break;
        if (row == numrows)
            emptyc++;
    }
    cell = emptyr * (numcols - emptyc) + emptyc * numrows;
    printf ("%d\n", cell);
    cell = emptyr * numcols + emptyc * (numrows - emptyr);
    printf ("%d\n", cell);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26607896_26608247_1_28
26607896_26609899_13_33
Title: capitalize first letter in file 
----------------------------------------

void cptlz (char x []) {
    char ch;
    int currentch, previouschar = '\n', st = 1;
    FILE *fptr_in;
    if ((fptr_in = fopen (x, "r")) == NULL) {
        printf ("Error reading file\n");
    }
    else {
        while ((ch = fgetc (fptr_in)) != EOF) {
            if (ch >= 'a' && ch <= 'z' && (previouschar == '\n' || previouschar == ' ')) {
                printf ("%c", ch - 32);
            }
            else
                printf ("%c", ch);
            previouschar = ch;
        }
    }
}
----------------------------------------

void cptlz (const char *input_filename) {
    int ch, lastWasLetter = 0;
    FILE *fptr_in;
    fptr_in = fopen (input_filename, "r");
    if (fptr_in == NULL) {
        printf ("Error reading file '%s'\n", input_filename);
        return;
    }
    while ((ch = fgetc (fptr_in)) != EOF) {
        if (!lastWasLetter && islower (ch))
            ch = toupper (ch);
        printf ("%c", ch);
        lastWasLetter = isalpha (ch);
    }
    fclose (fptr_in);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2660802_2661088_19_40
2660802_2661710_1_13
Title: Issue with dynamic array Queue data structure with void pointer 
----------------------------------------

Bool queuePop (Queue * const queue, QueueValue **value, size_t item_size) {
    if (isEmpty (queue))
        return FALSE;
    QueueItem *p = queue->items[queue->first];
    assert (p -> item_size == item_size);
    memcpy (* value, p -> value, p -> item_size);
    free (queue -> items [queue -> first].value);
    queue->first = (queue->first + 1) % queue->size;
    queue->count -= 1;
    return TRUE;
}
----------------------------------------

Bool queuePop (Queue * const queue, QueueValue value, size_t val_sz) {
    if (isEmpty (queue))
        return FALSE;
    memcpy (value, queue -> items [queue -> first].value, val_sz);
    free (queue -> items [queue -> first].value);
    queue->first = (queue->first + 1) % queue->size;
    queue->count -= 1;
    return TRUE;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26618903_26619062_5_25
26618903_26619166_1_10
Title: implicit declaration of function ‘strrev’ 
----------------------------------------

char *strrev (char *str) {
    if (!str) {
        fprintf (stderr, "%s() Error: invalid string\n", __func__);
        return NULL;
    }
    char *begin = str;
    char *end = str + strlen (str) - 1;
    char tmp;
    while (end > begin) {
        tmp = *end;
        *end-- = *begin;
        *begin++ = tmp;
    }
    return str;
}
----------------------------------------

char *strrev (char *str) {
    char c, *front, *back;
    if (!str || !*str)
        return str;
    for (front = str, back = str + strlen (str) - 1; front < back; front++, back--) {
        c = *front;
        *front = *back;
        *back = c;
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26620388_26620524_13_26
26620388_26642551_1_35
Title: C substrings / C string slicing? 
----------------------------------------

int main (void) {
    const char *str = "Polly";
    const size_t len = strlen (str);
    char buffer [len + 1];
    for (size_t start = 0; start < len; ++start) {
        for (int end = len - 1; end >= (int) start; --end) {
            slice_str (str, buffer, start, end);
            printf ("%s\n", buffer);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    const char *s = "madam";
    size_t i, n;
    size_t len = strlen (s);
    for (i = 0; i < len; ++i) {
        for (n = 1; n <= len - i; ++n) {
            const char *start = s + i;
            switch (ispalin (start, start +n)) {
            case -1 :
                fprintf (stderr, "error: %p >= %p\n", (void *) start, (void *) (start + n));
                break;
            case 0 :
                printf ("Not a palindrome: %.*s\n", (int) n, start);
                break;
            case 1 :
                printf ("Palindrome: %.*s\n", (int) n, start);
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26620580_26620927_1_26
26620580_26620961_1_49
Title: How to copy specific contents of a file onto another file in C? 
----------------------------------------

void process_file (FILE *temp) {
    FILE *data, *text, *fp;
    char line [256], str [256];
    char *token;
    data = fopen ("data.asm", "w");
    text = fopen ("text.asm", "w");
    if (temp == NULL || data == NULL || text == NULL) {
        printf ("UNABLE TO OPEN OR LOCATE FILES. EXITING.\n");
        exit (1);
    }
    fp = data;
    while (fgets (line, sizeof line, temp)) {
        strcpy (str, line);
        if ((token = strtok (str, " \t\n")) != NULL) {
            if (strcmp (token, ".data") == 0)
                fp = data;
            else if (strcmp (token, ".text") == 0)
                fp = text;
        }
        fprintf (fp, "%s", line);
    }
    fclose (data);
    fclose (text);
}
----------------------------------------

void process_file (FILE *temp) {
    FILE *data = 0, *text = 0;
    char *token = 0;
    char *nextLine = 0;
    char line [256];
    int i = 0;
    data = fopen ("data.asm", "w");
    text = fopen ("text.asm", "w");
    if (0 == temp || 0 == data || 0 == text) {
        printf ("UNABLE TO OPEN OR LOCATE FILES. EXITING.\n");
        exit (1);
    }
    while (!feof (temp)) {
        if ((nextLine = fgets (line, 256, temp)) != NULL) {
            token = strtok (nextLine, "\n");
            if (0 != token) {
                if (strcmp (token, ".data") == 0) {
                    i = 1;
                }
                else if (strcmp (token, ".text") == 0) {
                    i = 2;
                }
                switch (i) {case 1 : fprintf (data, "%s\r\n", token);
                break;
            case 2 :
                fprintf (text, "%s\r\n", token);
                break;
            default :
                printf ("Invalid!");
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26620580_26620927_1_26
26620580_26620972_3_50
Title: How to copy specific contents of a file onto another file in C? 
----------------------------------------

void process_file (FILE *temp) {
    FILE *data, *text, *fp;
    char line [256], str [256];
    char *token;
    data = fopen ("data.asm", "w");
    text = fopen ("text.asm", "w");
    if (temp == NULL || data == NULL || text == NULL) {
        printf ("UNABLE TO OPEN OR LOCATE FILES. EXITING.\n");
        exit (1);
    }
    fp = data;
    while (fgets (line, sizeof line, temp)) {
        strcpy (str, line);
        if ((token = strtok (str, " \t\n")) != NULL) {
            if (strcmp (token, ".data") == 0)
                fp = data;
            else if (strcmp (token, ".text") == 0)
                fp = text;
        }
        fprintf (fp, "%s", line);
    }
    fclose (data);
    fclose (text);
}
----------------------------------------

void process_file (FILE *temp) {
    FILE *data, *text, *write = NULL;
    char *token;
    char *nextLine;
    char line [256];
    char *str_token = malloc (256 * sizeof (char));
    char *str = malloc (256 * sizeof (char));
    char val [] = "safasfsdf";
    int i;
    data = fopen ("data.asm", "w");
    text = fopen ("text.asm", "w");
    if (temp == NULL || data == NULL || text == NULL) {
        printf ("UNABLE TO OPEN OR LOCATE FILES. EXITING.\n");
        exit (1);
    }
    while (!feof (temp)) {
        if ((nextLine = fgets (line, 256, temp)) != NULL) {
            if ((strstr (line, ".data")) != NULL) {
                write = data;
            }
            else if ((strstr (line, ".text")) != NULL) {
                write = text;
            }
            if (line[0] != '\n') {
                printf ("%p %s", write, line);
                fprintf (write, "%s", line);
            }
        }
    }
    fclose (data);
    fclose (text);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26620580_26620961_1_49
26620580_26620972_3_50
Title: How to copy specific contents of a file onto another file in C? 
----------------------------------------

void process_file (FILE *temp) {
    FILE *data = 0, *text = 0;
    char *token = 0;
    char *nextLine = 0;
    char line [256];
    int i = 0;
    data = fopen ("data.asm", "w");
    text = fopen ("text.asm", "w");
    if (0 == temp || 0 == data || 0 == text) {
        printf ("UNABLE TO OPEN OR LOCATE FILES. EXITING.\n");
        exit (1);
    }
    while (!feof (temp)) {
        if ((nextLine = fgets (line, 256, temp)) != NULL) {
            token = strtok (nextLine, "\n");
            if (0 != token) {
                if (strcmp (token, ".data") == 0) {
                    i = 1;
                }
                else if (strcmp (token, ".text") == 0) {
                    i = 2;
                }
                switch (i) {case 1 : fprintf (data, "%s\r\n", token);
                break;
            case 2 :
                fprintf (text, "%s\r\n", token);
                break;
            default :
                printf ("Invalid!");
                break;
            }
        }
    }
}
----------------------------------------

void process_file (FILE *temp) {
    FILE *data, *text, *write = NULL;
    char *token;
    char *nextLine;
    char line [256];
    char *str_token = malloc (256 * sizeof (char));
    char *str = malloc (256 * sizeof (char));
    char val [] = "safasfsdf";
    int i;
    data = fopen ("data.asm", "w");
    text = fopen ("text.asm", "w");
    if (temp == NULL || data == NULL || text == NULL) {
        printf ("UNABLE TO OPEN OR LOCATE FILES. EXITING.\n");
        exit (1);
    }
    while (!feof (temp)) {
        if ((nextLine = fgets (line, 256, temp)) != NULL) {
            if ((strstr (line, ".data")) != NULL) {
                write = data;
            }
            else if ((strstr (line, ".text")) != NULL) {
                write = text;
            }
            if (line[0] != '\n') {
                printf ("%p %s", write, line);
                fprintf (write, "%s", line);
            }
        }
    }
    fclose (data);
    fclose (text);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26633051_26634131_3_13
26633051_26634633_3_12
Title: Pyramid of Stars 
----------------------------------------

void main () {
    int size = 3, i;
    while (size) {
        i = 0;
        while (i++ < size) {
            putchar ('*');
        }
        putchar ('\n');
        size--;
    }
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc) {
        int i;
        (void) main (argc -1, argv);
        for (i = 0; i < argc; ++i)
            putchar ('*');
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
266357_19721184_47_58
266357_266425_4_14
Title: Tokenizing strings in C 
----------------------------------------

void main () {
    char string [10] = "abcb_dccc";
    char delim [10] = "_";
    char *token = NULL;
    char *last = "";
    token = token_separater (string, delim, &last);
    printf ("%s\n", token);
    while (last) {token = token_separater (NULL, delim, & last);
    printf ("%s\n", token);
}
----------------------------------------

int main () {
    char str [100], *s = str, *t = NULL;
    strcpy (str, "a space delimited string");
    while ((t = strtok (s, " ")) != NULL) {
        s = NULL;
        printf (":%s:\n", t);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26637623_26637792_8_43
26637623_26637874_5_36
Title: How can I pull this off in C? 
----------------------------------------

int main (void) {
    float weight [USERS];
    float height [USERS];
    float BMI = 0.0f;
    char *BMI_Status [THRESHOLDS + 1] = {"Normal", "Overweight", "Obese"};
    float thresholds [THRESHOLDS] = {10.0, 20.0};
    int i, j;
    for (i = 0; i < USERS; i++) {
        printf ("Please enter your weight: ");
        scanf ("%f", & (weight [i]));
        printf ("Now enter your height: ");
        scanf ("%f", & (height [i]));
    }
    for (i = 0; i < USERS; i++) {
        BMI = weight[i] / (height[i] * height[i]);
        printf ("%d\t%f\t", i, BMI);
        for (j = 0; j < THRESHOLDS; j++) {
            if (BMI < thresholds[j]) {
                break;
            }
        }
        printf ("%s\n", BMI_Status [j]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    float weight_value [10];
    float user_height [10];
    float BMI = 0.0f;
    char BMI_Status [30];
    int i;
    for (i = 0; i < 10; i++) {
        printf ("Please enter your weight: ");
        scanf ("%f", & weight_value [i]);
        printf ("Now enter your height: ");
        scanf ("%f", & user_height [i]);
    }
    printf ("USER     BMI\t\tSTATUS\n");
    for (i = 0; i < 10; i++) {
        BMI = weight_value[i] / (user_height[i] * user_height[i]);
        printf ("%d\t%f\t", i + 1, BMI);
        if (BMI < 30)
            printf ("Underweight\n");
        else if (BMI < 50)
            printf ("Normal\n");
        else
            printf ("Overweight\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26641842_26642006_3_13
26641842_26642042_1_14
Title: Is it possible to run scanf like this? 
----------------------------------------

int main () {
    int **x;
    int i, a, b, c, d, e;
    int *vars [] = {&b, &c, &d, &e, &a};
    x = vars;
    for (x = vars; *x != &a; x++) {
        scanf ("%d", * x);
    }
    printf ("%d, %d, %d, %d\n", b, c, d, e);
    return 0;
}
----------------------------------------

int main () {
    int numList [5];
    int i;
    for (i = 0; i < 5; i++) {
        printf ("Input number %d ", i);
        scanf ("%d", & a [i]);
    }
    printf ("Your numbers: ");
    for (i = 0; i < 5; i++) {
        printf ("%d, ", a [i]);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26648149_26649089_8_39
26648149_26674008_58_112
Title: "C: Read from one file Sort and then Output to another" 
----------------------------------------

int main (int argc, char **argv) {
    FILE *infile, *outfile;
    char name [MAXNAMELEN];
    char line [MAXLINELEN];
    char lines [MAXITEMS] [MAXLINELEN];
    int i, items = 0;
    printf ("Enter a source filename: ");
    fgets (name, sizeof (name), stdin);
    name[strlen (name) - 1] = '\0';
    infile = fopen (name, "r");
    while (fgets (line, sizeof (line), infile)) {
        strcpy (lines [items], line);
        items++;
    }
    qsort (lines, items, MAXLINELEN, strcmp);
    printf ("Enter a destination filename: ");
    fgets (name, sizeof (name), stdin);
    name[strlen (name) - 1] = '\0';
    outfile = fopen (name, "w");
    for (i = 0; i < items; i++) {
        fputs (lines [i], outfile);
    }
    fclose (infile);
    fclose (outfile);
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *infile, *outfile;
    char *inname, *outname, *tmpstr;
    char **lines;
    int ret, tmp, nlines, i, items = 0;
    if (argc != 3) {
        printf ("Usage: %s file_to_sort output_file\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    inname = argv[1];
    outname = argv[2];
    if ((lines = malloc (INITITEMS * sizeof (char *))) == NULL) {
        perror ("memory error (malloc)");
        exit (EXIT_FAILURE);
    }
    nlines = INITITEMS;
    infile = fopen (inname, "r");
    while ((ret = unlimited_read (&lines[items], infile)) > 0) {
        items++;
        if (items == nlines) {
            nlines += INITITEMS;
            lines = realloc (lines, (nlines * sizeof (char *)));
        }
    }
    if (ret < 0) {
        printf ("WARNING: possibly truncated file\n");
    }
    tmpstr = lines[items - 1];
    tmp = strlen (tmpstr);
    if (tmpstr[tmp - 1] != '\n') {
        printf ("Error: input file does not end with newline\n");
        exit (EXIT_FAILURE);
    }
    qsort (lines, items, sizeof (char *), cmpstringp);
    outfile = fopen (outname, "w");
    for (i = 0; i < items; i++) {
        fputs (lines [i], outfile);
        free (lines [i]);
    }
    free (lines);
    fclose (infile);
    fclose (outfile);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26648857_26648924_29_72
26648857_26648931_394_487
Title: Can fopen be used to open the URL 
----------------------------------------

int main (void) {
    CURL *curl;
    CURLcode res;
    struct FtpFile ftpfile = {"curl.tar.gz", NULL};
    curl_global_init (CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init ();
    if (curl) {
        curl_easy_setopt (curl, CURLOPT_URL, "ftp://ftp.example.com/pub/www/utilities/curl/curl-7.9.2.tar.gz");
        curl_easy_setopt (curl, CURLOPT_WRITEFUNCTION, my_fwrite);
        curl_easy_setopt (curl, CURLOPT_WRITEDATA, & ftpfile);
        curl_easy_setopt (curl, CURLOPT_VERBOSE, 1L);
        res = curl_easy_perform (curl);
        curl_easy_cleanup (curl);
        if (CURLE_OK != res) {
            fprintf (stderr, "curl told us %d\n", res);
        }
    }
    if (ftpfile.stream)
        fclose (ftpfile.stream);
    curl_global_cleanup ();
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    URL_FILE *handle;
    FILE *outf;
    int nread;
    char buffer [256];
    const char *url;
    if (argc < 2)
        url = "http://192.168.7.3/testfile";
    else
        url = argv[1];
    outf = fopen ("fgets.test", "w+");
    if (!outf) {
        perror ("couldn't open fgets output file\n");
        return 1;
    }
    handle = url_fopen (url, "r");
    if (!handle) {
        printf ("couldn't url_fopen() %s\n", url);
        fclose (outf);
        return 2;
    }
    while (!url_feof (handle)) {
        url_fgets (buffer, sizeof (buffer), handle);
        fwrite (buffer, 1, strlen (buffer), outf);
    }
    url_fclose (handle);
    fclose (outf);
    outf = fopen ("fread.test", "w+");
    if (!outf) {
        perror ("couldn't open fread output file\n");
        return 1;
    }
    handle = url_fopen ("testfile", "r");
    if (!handle) {
        printf ("couldn't url_fopen() testfile\n");
        fclose (outf);
        return 2;
    }
    do {
        nread = url_fread (buffer, 1, sizeof (buffer), handle);
        fwrite (buffer, 1, nread, outf);
    }
    while (nread);
    url_fclose (handle);
    fclose (outf);
    outf = fopen ("rewind.test", "w+");
    if (!outf) {
        perror ("couldn't open fread output file\n");
        return 1;
    }
    handle = url_fopen ("testfile", "r");
    if (!handle) {
        printf ("couldn't url_fopen() testfile\n");
        fclose (outf);
        return 2;
    }
    nread = url_fread (buffer, 1, sizeof (buffer), handle);
    fwrite (buffer, 1, nread, outf);
    url_rewind (handle);
    buffer[0] = '\n';
    fwrite (buffer, 1, 1, outf);
    nread = url_fread (buffer, 1, sizeof (buffer), handle);
    fwrite (buffer, 1, nread, outf);
    url_fclose (handle);
    fclose (outf);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26667280_26667429_8_30
26667280_26669827_3_16
Title: C Program to get Valid Input 
----------------------------------------

int main () {
    char input [MAXINPUT] = "";
    int length, i, ok;
    do {
        ok = 1;
        scanf ("%s", input);
        length = strlen (input);
        if (input <= 0) {
            ok = 0;
            printf ("Entered input is not a positive number\n");
        }
        else {
            for (i = 0; i < length; i++) {
                if (!isdigit (input[i])) {
                    printf ("Entered input is not a number\n");
                    ok = 0;
                }
            }
        }
    }
    while (!ok);
    printf ("Given input is a positive number\n");
    return 0;
}
----------------------------------------

int main (void) {
    int a, b;
    while (1) {
        printf ("Please Enter the Kilometers:");
        if (1 == scanf ("%d", &a) && a > 0)
            break;
        else
            scanf ("%*[^\n]");
    }
    b = a * 1000;
    printf ("%d kilometers are %d meters", a, b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26667280_26667429_8_30
26667280_42130311_3_20
Title: C Program to get Valid Input 
----------------------------------------

int main () {
    char input [MAXINPUT] = "";
    int length, i, ok;
    do {
        ok = 1;
        scanf ("%s", input);
        length = strlen (input);
        if (input <= 0) {
            ok = 0;
            printf ("Entered input is not a positive number\n");
        }
        else {
            for (i = 0; i < length; i++) {
                if (!isdigit (input[i])) {
                    printf ("Entered input is not a number\n");
                    ok = 0;
                }
            }
        }
    }
    while (!ok);
    printf ("Given input is a positive number\n");
    return 0;
}
----------------------------------------

int main () {
    int input1, input2;
    int inputs_count;
    inputs_count = scanf ("%i %i", &input1, &input2);
    if (inputs_count == 1) {
        puts ("only 1 valid input");
    }
    else if (inputs_count == 2) {
        puts ("both inputs are valid");
    }
    else {
        puts ("no valid inputs");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26667280_26669827_3_16
26667280_42130311_3_20
Title: C Program to get Valid Input 
----------------------------------------

int main (void) {
    int a, b;
    while (1) {
        printf ("Please Enter the Kilometers:");
        if (1 == scanf ("%d", &a) && a > 0)
            break;
        else
            scanf ("%*[^\n]");
    }
    b = a * 1000;
    printf ("%d kilometers are %d meters", a, b);
    return 0;
}
----------------------------------------

int main () {
    int input1, input2;
    int inputs_count;
    inputs_count = scanf ("%i %i", &input1, &input2);
    if (inputs_count == 1) {
        puts ("only 1 valid input");
    }
    else if (inputs_count == 2) {
        puts ("both inputs are valid");
    }
    else {
        puts ("no valid inputs");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2667095_2667166_4_24
2667095_27892887_4_33
Title: How to get the return value of a program ran via calling a member of the exec family of functions? 
----------------------------------------

int main () {
    int number, statval;
    printf ("%d: I'm the parent !\n", getpid ());
    if (fork () == 0) {
        number = 10;
        printf ("PID %d: exiting with number %d\n", getpid (), number);
        exit (number);
    }
    else {
        printf ("PID %d: waiting for child\n", getpid ());
        wait (& statval);
        if (WIFEXITED (statval))
            printf ("Child's exit code %d\n", WEXITSTATUS (statval));
        else
            printf ("Child did not terminate with exit\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int number, statval;
    int child_pid;
    printf ("%d: I'm the parent !\n", getpid ());
    child_pid = fork ();
    if (child_pid == -1) {
        printf ("could not fork! \n");
        exit (1);
    }
    else if (child_pid == 0) {
        execl ("/bin/ping", "/bin/ping", "-c", "1", "-t", "1", ip_addr, NULL);
    }
    else {
        printf ("PID %d: waiting for child\n", getpid ());
        waitpid (child_pid, & statval, WUNTRACED);
        if (WIFEXITED (statval))
            printf ("Child's exit code %d\n", WEXITSTATUS (statval));
        else
            printf ("Child did not terminate with exit\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26683874_26683929_4_34
26683874_46503695_3_24
Title: Not counting spaces as words in c 
----------------------------------------

int main () {
    unsigned long c;
    unsigned long line;
    unsigned long word;
    char ch;
    char lastch = -1;
    c = 0;
    line = 0;
    word = 0;
    while ((ch = getchar ()) != EOF) {
        c++;
        if (ch == '\n') {
            line++;
        }
        if (ch == ' ' || ch == '\n' || ch == '\'') {
            if (!(lastch == ' ' && ch == ' ')) {
                word++;
            }
        }
        lastch = ch;
    }
    printf ("%lu %lu %lu\n", c, word, line);
    return 0;
}
----------------------------------------

int main () {
    int nbword = 1;
    char c, prvc = 0;
    while ((c = getchar ()) != EOF) {
        if (c == ' ') {
            nbword++;
        }
        if (c == prvc && prvc == ' ') nbword -;
        if (c == '\n') {
            printf ("%d\n", nbword);
            nbword = 1 :
        }
        prvc = c;
    }
    return 0 :
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26684457_26684583_1_35
26684457_26684696_5_42
Title: How to use sscanf to find the lowercase letters in a string 
----------------------------------------

int main () {
    char *str = malloc (sizeof (char) * 10);
    char temp [200];
    int count = 0;
    if (str == NULL) {
        printf ("Error");
    }
    str[0] = 'a';
    str[1] = 'b';
    str[2] = 'C';
    str[3] = 'd';
    str[4] = 'E';
    str[5] = 'f';
    str[6] = '\0';
    int res;
    char *p = str;
    while (1) {
        res = sscanf (p, "%[a-z]%n", temp, &count);
        if (res == EOF) {
            break;
        }
        else if (res == 0) {
            ++p;
            continue;
        }
        printf ("%s\n", temp);
        printf ("%d\n", count);
        p += count;
    }
    free (str);
    return 0;
}
----------------------------------------

int main () {
    char *str = malloc (sizeof (char) * 10);
    char temp [200];
    char result [200] = "\0";
    int count = 0;
    if (str == NULL) {
        printf ("Error");
    }
    str[0] = 'a';
    str[1] = 'b';
    str[2] = 'C';
    str[3] = 'd';
    str[4] = 'E';
    str[5] = 'f';
    str[6] = '\0';
    int res;
    while (1) {
        if (!strlen (str))
            break;
        res = sscanf (str, "%[a-z]%n", temp, &count);
        if (res != 1) {
            str = str + 1;
            continue;
        }
        printf ("temp = %s\n", temp);
        printf ("count = %d\n", count);
        str = str + count;
        strcat (result, temp);
    }
    printf ("%s", result);
    free (str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26688413_26688557_15_25
26688413_26688578_3_24
Title: How to extract digits from a number in C? Begining from the most significant digit? 
----------------------------------------

int main () {
    int i = 1024;
    int number = reversDigits (i);
    while (number != 0) {
        int digit = number % 10;
        number = number / 10;
        printf ("%d\n", digit);
    }
    return 0;
}
----------------------------------------

int main () {
    int rmdr;
    int dvsr;
    int quot;
    scanf ("%d", & rmdr);
    dvsr = 1000000000;
    while (0 >= (quot = rmdr / dvsr)) {
        rmdr %= dvsr;
        dvsr /= 10;
        if (dvsr == 1)
            break;
    }
    while (dvsr) {
        quot = rmdr / dvsr;
        printf ("%1d", quot);
        rmdr %= dvsr;
        dvsr /= 10;
    }
    printf ("\n");
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26688413_26688557_15_25
26688413_26688805_3_30
Title: How to extract digits from a number in C? Begining from the most significant digit? 
----------------------------------------

int main () {
    int i = 1024;
    int number = reversDigits (i);
    while (number != 0) {
        int digit = number % 10;
        number = number / 10;
        printf ("%d\n", digit);
    }
    return 0;
}
----------------------------------------

int main () {
    int num = 0;
    int power = 1;
    printf ("Enter any number:");
    scanf ("%d", & num);
    while (num > power)
        power *= 10;
    power /= 10;
    while (num != 0) {
        int digit = num / power;
        printf ("%d\n", digit);
        if (digit != 0)
            num = num - digit * power;
        if (power != 1)
            power /= 10;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26688413_26688578_3_24
26688413_26688805_3_30
Title: How to extract digits from a number in C? Begining from the most significant digit? 
----------------------------------------

int main () {
    int rmdr;
    int dvsr;
    int quot;
    scanf ("%d", & rmdr);
    dvsr = 1000000000;
    while (0 >= (quot = rmdr / dvsr)) {
        rmdr %= dvsr;
        dvsr /= 10;
        if (dvsr == 1)
            break;
    }
    while (dvsr) {
        quot = rmdr / dvsr;
        printf ("%1d", quot);
        rmdr %= dvsr;
        dvsr /= 10;
    }
    printf ("\n");
    return (0);
}
----------------------------------------

int main () {
    int num = 0;
    int power = 1;
    printf ("Enter any number:");
    scanf ("%d", & num);
    while (num > power)
        power *= 10;
    power /= 10;
    while (num != 0) {
        int digit = num / power;
        printf ("%d\n", digit);
        if (digit != 0)
            num = num - digit * power;
        if (power != 1)
            power /= 10;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26690388_26690708_4_21
26690388_26690861_4_43
Title: Problems with variables and scanf function 
----------------------------------------

int main () {
    printf ("This is my first program.\nPlease put in your name...\n");
    char letter [7];
    scanf ("%6s", letter);
    if (strcmp (letter, "bob") == 0 || strcmp (letter, "travis") == 0)
        printf ("Access Granted\nWelcome %s.\n", letter);
    else
        printf ("You are not autorized.\nThis program will exit now...\n");
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    unsigned int len_max = 128;
    unsigned int current_size = 0;
    char *pStr = malloc (len_max);
    current_size = len_max;
    printf ("\nEnter your string value:\n");
    if (pStr != NULL) {
        int c = EOF;
        unsigned int i = 0;
        while ((c = getchar ()) != '\n' && c != EOF) {
            pStr[i++] = (char) c;
            if (i == current_size) {
                current_size = i + len_max;
                pStr = realloc (pStr, current_size);
            }
        }
        pStr[i] = '\0';
        printf ("\nLong String value:%s \n\n", pStr);
        free (pStr);
        pStr = NULL;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26690719_26690813_3_15
26690719_26690893_3_13
Title: C how to print short ints stored in char array? 
----------------------------------------

int main () {
    char buf [50];
    int i;
    short int num = 12;
    memset (buf, num, 50);
    for (i = 0; i < 50; i++) {
        printf ("%hd|", buf [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char buf [50];
    int i;
    short int num = 12;
    memset (buf, num, 50);
    for (i = 0; i < 50; i++)
        printf ("%hd|", buf[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26690964_26691021_1_15
26690964_26691027_1_16
Title: "How will I print the highest scorer (with it's other ""struc mates"") using a function. C" 
----------------------------------------

void getHighestScorer (struct studentType s [20]) {
    int maximum, i, index = 0;
    maximum = s[0].score;
    for (i = 1; i < 3; i++) {
        if (s[i].score > maximum) {
            maximum = s[i].score;
            index = i;
        }
    }
    printf ("The highest scorer is: %s, %s %d\n", s [index].studentLName, s [index].studentFName, s [index].score);
}
----------------------------------------

int getHighestScorer (struct studentType s [], size_t n) {
    int maximum;
    size_t i;
    if (n == 0)
        return 0;
    maximum = s[0].score;
    for (i = 1; i < n; i++) {
        if (maximum < s[i].score)
            maximum = s[i].score;
    }
    return maximum;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26695133_26695402_10_44
26695133_26695554_37_54
Title: how to sort 3 arrays together in C 
----------------------------------------

int main () {
    char A [6] [10] = {"John", "David", "Michael", "Steve", "Sam", "Claire"};
    int B [6] = {12, 30, 12, 12, 19, 12};
    int C [6] = {2, 1, 2, 1, 2, 1};
    int index [6] = {0, 1, 2, 3, 4, 5};
    int i = 0;
    bool swapped;
    for (i = 0; i < 6; i++) {
        printf ("%s\t%d\t%d\n", A [i], B [i], C [i]);
    }
    while (1) {
        swapped = false;
        for (i = 0; i < 6 - 1; i++) {
            if (isDes (index[i], index[i + 1], A, B, C)) {
                int temp = index[i];
                index[i] = index[i + 1];
                index[i + 1] = temp;
                swapped = true;
            }
        }
        if (swapped == false) {
            break;
        }
    }
    printf ("\nnew list\n\n");
    for (i = 0; i < 6; i++) {
        printf ("%s\t%d\t%d\n", A [index [i]], B [index [i]], C [index [i]]);
    }
    return 0;
}
----------------------------------------

int main () {
    int i;
    char A [6] [10] = {"John", "David", "Michael", "Steve", "Sam", "Claire"};
    int B [6] = {12, 30, 12, 12, 19, 12};
    int C [6] = {2, 1, 2, 1, 2, 1};
    for (i = 0; i < 6; i++)
        printf ("%s\t%d\t%d\n", A[i], B[i], C[i]);
    printf ("\n");
    sortarray (6, A, B, C);
    for (i = 0; i < 6; i++)
        printf ("%s\t%d\t%d\n", A[i], B[i], C[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26697627_26697734_4_13
26697627_26698035_4_15
Title: How to pipe data to a program which calls scanf() and read() in Linux 
----------------------------------------

int main () {
    int n;
    char str [16];
    scanf ("%d", & n);
    printf ("n: %d\n", n);
    int count = fread (str, 16, 1, stdin);
    printf ("str: %s\n", str);
    printf ("read %d bytes\n", count);
}
----------------------------------------

int main () {
    int n;
    char str [16];
    setbuf (stdin, NULL);
    scanf ("%d", & n);
    printf ("n: %d\n", n);
    int count = read (STDIN_FILENO, str, 16);
    printf ("str: %s\n", str);
    printf ("read %d bytes\n", count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26702774_26703013_4_39
26702774_26703048_4_31
Title: Counting words separated by symbols as two words 
----------------------------------------

int main () {
    unsigned long c;
    unsigned long line;
    unsigned long word;
    char ch;
    char lastch = -1;
    int A [256] = {0};
    A[' '] = 1;
    A['+'] = 1;
    A['!'] = 1;
    A['-'] = 1;
    A['\n'] = 1;
    c = 0;
    line = 0;
    word = 0;
    while ((ch = getchar ()) != EOF) {
        c++;
        if (ch == '\n') {
            line++;
        }
        if (A[ch] == 1) {
            if (!(A[lastch] == 1 && A[ch] == 1)) {
                word++;
            }
        }
        lastch = ch;
    }
    printf ("%lu %lu %lu\n", c, word, line);
    return 0;
}
----------------------------------------

int main () {
    unsigned long c;
    unsigned long line;
    unsigned long word;
    char ch;
    char lastch = -1;
    c = 0;
    line = 0;
    word = 0;
    while ((ch = getchar ()) != EOF) {
        c++;
        if (ch == '\n') {
            line++;
            continue;
        }
        if (!isalnum (ch)) {
            word++;
        }
    }
    printf ("%lu %lu %lu\n", c, word, line);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26714225_26714708_9_32
26714225_26714792_4_27
Title: "copy 2 arrays into 1 array in C prog" 
----------------------------------------

int main () {
    int i, j, count;
    char ar1 [3] [10] = {"a", "b", "c"};
    char ar2 [3] [10] = {"d", "e", "f"};
    char ar3 [6] [10];
    for (i = 0; i < 3; i++) {
        printf ("%s\n", ar1 [i]);
        strcpy (ar3 [i], ar1 [i]);
    }
    for (i = 0; i < 3; i++) {
        printf ("%s\n", ar2 [i]);
        strcpy (ar3 [i + 3], ar2 [i]);
    }
    for (i = 0; i < 6; i++)
        printf ("%s\t\n", ar3[i]);
}
----------------------------------------

int main (void) {
    char ar1 [3] [10] = {"a", "b", "c"};
    char ar2 [3] [10] = {"d", "e", "f"};
    char ar3 [6] [10];
    size_t j = 0;
    for (size_t i = 0; i < 3; i++, j++) {
        strcpy (ar3 [j], ar1 [i]);
    }
    for (size_t i = 0; i < 3; i++, j++) {
        strcpy (ar3 [j], ar2 [i]);
    }
    for (size_t i = 0; i < 6; i++) {
        puts (ar3 [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26720677_26720832_1_14
26720677_26721344_1_17
Title: returning pointer to pointer array of a struct 
----------------------------------------

struct rec **returnPointerToPointerArray () {
    rec *pointerArray [2];
    pointerArray[0] = addEntry ();
    pointerArray[1] = addEntry ();
    printf ("ID in main : %d\n", pointerArray [0] -> ID);
    printf ("Name in main : %s\n", pointerArray [0] -> Name);
    printf ("ID in main : %d\n", pointerArray [1] -> ID);
    printf ("Name in main : %s\n", pointerArray [1] -> Name);
    rec **pointerArray2 = malloc (sizeof pointerArray);
    pointerArray2[0] = pointerArray[0];
    pointerArray2[1] = pointerArray[1];
    return pointerArray2;
}
----------------------------------------

rec **returnPointerToPointerArray () {
    rec **pA = malloc (2 * sizeof *pA);
    if (pA) {
        pA[0] = addEntry ();
        pA[1] = addEntry ();
        if (pA[0]) {
            printf ("ID in main : %d\n", pA [0] -> ID);
            printf ("Name in main : %s\n", pA [0] -> Name);
        }
        if (pA[1]) {
            printf ("ID in main : %d\n", pA [1] -> ID);
            printf ("Name in main : %s\n", pA [1] -> Name);
        }
    }
    return pA;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26741956_26742154_2_22
26741956_26742225_2_19
Title: Array with chars in c 
----------------------------------------

main () {
    int i, j;
    char feld [3] [3];
    for (j = 0; j < 3; j++) {
        for (i = 0; i < 3; i++) {
            printf ("\t %2i. Row %2i. Column:\n ", j + 1, i + 1);
            scanf (" %c", & feld [j] [i]);
        }
    }
    for (j = 0; j < 3; j++) {
        for (i = 0; i < 3; i++) {
            printf ("\t%c", feld [j] [i]);
        }
        printf ("\n");
    }
}
----------------------------------------

main () {
    int i, j;
    char feld [3] [3];
    for (j = 0; j < 3; j++) {
        for (i = 0; i < 3; i++) {
            printf ("\t %2i. column %2i. row: ", i + 1, j + 1);
            scanf ("%c", & feld [j] [i]);
        }
    }
    for (j = 0;
    j < 3;
    j ++) {for (i = 0;
    i < 3;
    i ++) {printf ("\t %c", feld [i] [j]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2674312_35458253_5_20
2674312_45672167_33_55
Title: How to append strings using sprintf? 
----------------------------------------

int main (void) {
    char *buf;
    size_t size;
    FILE *fp = open_memstream (&buf, &size);
    assert (fp);
    fprintf (fp, "Hello World!\n");
    fprintf (fp, "%s also work, of course.\n", "Format specifiers");
    fclose (fp);
    puts (buf);
    free (buf);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *json = NULL;
    int i;
    for (i = 0; i < 100; i++) {
        str_append (& json, "id-%d", i);
    }
    printf ("%s\n", json);
    if (json)
        free (json);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26747783_26747916_1_16
26747783_26748008_3_15
Title: C - Add odd digits of a number to the end of another number 
----------------------------------------

int NumberAdd (int n, int m) {
    int power = 1, x = 0, newnumber;
    while (n != 0) {
        if (n % 2 != 0) {
            x = x + (n % 10) * power;
            power *= 10;
        }
        n = n / 10;
    }
    newnumber = m * power + x;
    return newnumber;
}
----------------------------------------

int NumberAdd (int n, int m) {
    int quotient, divisor = MAXNUM;
    do {
        quotient = n / divisor;
        if (quotient & 1)
            m = m * 10 + quotient;
        n = n - quotient * divisor;
        divisor /= 10;
    }
    while (divisor);
    return m;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26749414_26749679_2_20
26749414_44865451_3_28
Title: c programming - printing sentences 
----------------------------------------

int main () {
    char array [1000];
    printf ("Please enter a phrase: ");
    int index = 0;
    scanf ("%c", & array [index]);
    while (array[index] != '\n') {
        scanf ("%c", & array [++ index]);
    }
    index = 0;
    while (array[index] != '\n') {
        printf ("%c", array [index]);
        ++index;
    }
    printf ("\n");
}
----------------------------------------

int main () {
    int index = 0;
    char array [1000];
    while (index < 1000) {
        array[index] = '0';
        index++;
    }
    printf ("Please enter a phrase: ");
    index = 0;
    do {
        scanf ("%c", & array [index]);
    }
    while (array[index] != '\n' && index++ < 1000);
    index = 0;
    while (index < 1000)
        printf ("%c", array[index++]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26753808_29620235_3_28
26753808_52975939_1_34
Title: failed to print complicated number pattern using c 
----------------------------------------

int main (void) {
    int numLines;
    numLines = 5;
    for (int line = 1; line <= numLines; line++) {
        for (int spaces = 0; spaces < numLines - line; spaces++)
            putchar (' ');
        for (int digit = line; digit < line * 2; digit++)
            printf ("%d", digit);
        for (int digit = line * 2 - 2; digit >= line; digit--)
            printf ("%d", digit);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------

int main () {
    int k = 1;
    int num;
    scanf ("%d", & num);
    int x = num;
    for (int i = 1; i < num + 1; i++) {
        int j = i;
        int h;
        for (int g = 1; g < x; g++) {
            printf (" ");
        }
        while (j != 0) {
            printf ("%d", k);
            k++;
            j--;
        }
        h = k - 1;
        while (h != i) {
            printf ("%d", k - 2);
            k--;
            h--;
        }
        k = i + 1;
        printf ("\n");
        x--;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26765494_26766135_6_29
26765494_26815249_9_39
Title: How to constantly define and then empty a string in a loop with C? 
----------------------------------------

int main (int argc, char **argv) {
    char line [10 + 1] = {'\0'};
    char *plants [PLANT_COUNT] [10] = {{"apple", "fruit"}, {"orange", "fruit"}, {"cabbage", "vegetable"}};
    unsigned idx = 0;
    while (fgets (line, 10, stdin) != NULL) {
        strtok (line, "\n");
        for (idx = 0; idx < PLANT_COUNT; idx++) {
            if (strcmp (line, plants[idx][0]) == 0) {
                printf ("Found %s.  It is a %s\n", line, plants [idx] [1]);
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char line [MAXS] = {0};
    int match = 0;
    char *fruit = "orange,apple,banana";
    char *veg = "cabbage,lettuce";
    int cnt = 1;
    while (strcmp (line, "quit") != 0) {
        if (cnt == 1)
            printf ("\nEnter produce (quit to end): ");
        else
            printf ("  next: ");
        match = scanf ("%[^\n]%*c", line);
        if (!match)
            strncpy (line, "quit", strlen ("quit") + 1);
        str2lower (line);
        if (strstr (fruit, line))
            printf ("                  entry [%2d]  %-10s -> fruit\n", cnt, line);
        else if (strstr (veg, line))
            printf ("                  entry [%2d]  %-10s -> vegetable\n", cnt, line);
        else if (strcmp (line, "quit") != 0)
            printf ("                  entry [%2d]  %-10s -> no match\n", cnt, line);
        cnt++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26770032_26778681_5_66
26770032_26790612_7_48
Title: MadLib C Program with Redirected Input & Output 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fpIn = NULL;
    FILE *fpOut = NULL;
    char cFileIn [100] = {0};
    char cFileOut [100] = {0};
    char cIn [500] = {0};
    char cType [100] = {0};
    char cWord [100] = {0};
    char cCh [2] = {0};
    char *pDash = NULL;
    if (argc == 3) {
        strcpy (cFileIn, argv [1]);
        strcpy (cFileOut, argv [2]);
    }
    else {
        strcpy (cFileIn, "madlib.txt");
        strcpy (cFileOut, "madlib-out.txt");
    }
    fpIn = fopen (cFileIn, "r");
    if (fpIn == NULL) {
        printf ("could not open input file %s\n", cFileIn);
        return 1;
    }
    fpOut = fopen (cFileOut, "w");
    if (fpOut == NULL) {
        fclose (fpIn);
        printf ("could not open output file %s\n", cFileOut);
        return 1;
    }
    while (fscanf (fpIn, "%499[^<]", cIn) == 1) {
        if ((fscanf (fpIn, "%1s", cCh)) == 1) {
            if (cCh[0] == '<') {
                fprintf (fpOut, "%s", cIn);
                if ((fscanf (fpIn, "%99[^>]", cType)) == 1) {
                    if ((pDash = strstr (cType, "-"))) {
                        *pDash = ' ';
                    }
                    printf ("Enter a(n) %s\n", cType);
                    scanf (" %99[^\n]", cWord);
                    fprintf (fpOut, "%s", cWord);
                }
                if ((fscanf (fpIn, "%1[>]", cCh)) == 1) {
                }
            }
        }
    }
    fclose (fpIn);
    fclose (fpOut);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char string_dict [4] [3] [MAXSTR] = {{"What is your name? ", "[name]", ""}, {"What country do you live in? ", "[country]", ""}, {"What is your age? ", "[age]", ""}, {"What is your favourite food?", "[favourite food]", ""}};
    int arr_len = sizeof (string_dict) / sizeof (*string_dict);
    char buf1 [BUFSIZE];
    char buf2 [BUFSIZE];
    char currtag [MAXSTR];
    char *pos = buf1;
    FILE *fd;
    int i;
    buf2[0] = '\0';
    fd = fopen ("input_file.txt", "r");
    fread (buf1, BUFSIZE - 1, 1, fd);
    fclose (fd);
    for (i = 0; i < arr_len; i++) {
        printf ("%s", string_dict [i] [0]);
        fgets (string_dict [i] [2], MAXSTR, stdin);
        string_dict[i][2][strlen (string_dict[i][2]) - 1] = '\0';
        while (pos = strstr (buf1, string_dict[i][1])) {
            *pos = '\0';
            strcat (buf2, pos + strlen (string_dict [i] [1]));
            strcat (pos, string_dict [i] [2]);
            pos += strlen (string_dict[i][2]);
            strcat (pos, buf2);
            pos = buf1;
            buf2[0] = '\0';
        }
    }
    fd = fopen ("output_file.txt", "w");
    fputs (buf1, fd);
    fclose (fd);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26771084_26771421_4_14
26771084_26799056_7_16
Title: How to access this bidimensional array in another function? 
----------------------------------------

void insert (int d, int array [] [d]) {
    int a = 0, i, j;
    for (i = 0; i < d; i++) {
        for (j = 0; j < d; j++) {
            array[i][j] = (d * d) - a;
            a++;
        }
    }
}
----------------------------------------

void insert (void) {
    int (*array) [D] = Array;
    int a = 0;
    for (int i = 0; i < D; i++) {
        for (int j = 0; j < D; j++) {
            array[i][j] = (D * D) -a;
            a++;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2677396_16996448_8_27
2677396_19649917_6_127
Title: "Calculate Age Given Date of Birth" 
----------------------------------------

void main () {
    clrscr ();
    printf ("please enter the current date \n");
    printf ("enter the day");
    scanf ("%d", & d1);
    printf ("enter the month");
    scanf ("%d", & m1);
    printf ("enter the year");
    scanf ("%d", & y1);
    printf ("Now thank you for your cooperation \n now please enter the date of birth");
    printf ("enter the day");
    scanf ("%d", & d2);
    printf ("enter the month");
    scanf ("%d", & m2);
    printf ("enter the year");
    scanf ("%d", & y2);
    year (d1, m1, y1, d2, m2, y2);
    getch ();
}
----------------------------------------

void main () {
    system ("cls");
    time_t theTime = time (NULL);
    struct tm *aTime = localtime (&theTime);
    int currentday = aTime->tm_mday;
    int currentmonth = aTime->tm_mon + 1;
    int currentyear = aTime->tm_year + 1900;
    int birthday, birthmonth, birthyear;
    cout << "Enter birth year: ";
    cin >> birthyear;
    if (birthyear > currentyear) {
        cout << "Current year: " << currentyear << endl << "Birht year  : " << birthyear << endl << "Invalid...." << endl << endl;
        system ("pause");
        main ();
    }
    else if (birthyear < 1900) {
        cout << "Birht year should greater than 1900...." << endl;
        system ("pause");
        main ();
    }
    cout << "Enter birth month: ";
    cin >> birthmonth;
    if (birthmonth < 1 || birthmonth > 12) {
        cout << "Birth month should be 1-12" << endl;
        system ("pause");
        main ();
    }
    else if (birthyear == currentyear && birthmonth > currentmonth) {
        cout << "Current Month/Year: " << currentmonth << "/" << currentyear << endl << "Birth Month/Year  : " << birthmonth << "/" << birthyear << endl << "Future Birth Date. Invalid...." << endl;
        system ("pause");
        main ();
    }
    cout << "Enter birth day: ";
    cin >> birthday;
    if (birthday < 1 || birthday > 31) {
        cout << "Birth day should 1-31" << endl;
        system ("pause");
        main ();
    }
    else if (birthyear == currentyear && birthmonth == currentmonth && birthday > currentday) {
        cout << "Current Day/Month/Year: " << currentday << "/" << currentmonth << "/" << currentyear << endl << "Birth Day/Month/Year  : " << birthday << "/" << birthmonth << "/" << birthyear << endl << "Future Birth Date. Invalid...." << endl;
        system ("pause");
        main ();
    }
    else if (birthyear % 4 == 0 && birthmonth == 2 && birthday > 29) {
        cout << "Febuary should be 1-29" << endl;
        system ("pause");
        main ();
    }
    else if ((birthmonth == 4 || birthmonth == 6 || birthmonth == 9 || birthmonth == 11) && birthday > 31) {
        cout << "This month cannot have 31 days...." << endl;
        system ("pause");
        main ();
    }
    int ageday, agemonth, ageyear;
    if (birthmonth > currentmonth) {
        agemonth = currentmonth;
        ageyear = currentyear - birthyear - 1;
        ageday = currentday;
    }
    else {
        agemonth = currentmonth - birthmonth;
        ageyear = currentyear - birthyear;
        ageday = currentday - birthday;
    }
    if (ageyear == 0 && agemonth == 0) {
        cout << "your Date of Birth: " << birthday << "/" << birthmonth << "/" << birthyear << endl;
        cout << "Current Date      : " << currentday << "/" << currentmonth << "/" << currentyear << endl;
        cout << "your Age          : " << ageday << " days" << endl;
    }
    else if (ageyear == 0) {
        cout << "your Date of Birth: " << birthday << "/" << birthmonth << "/" << birthyear << endl;
        cout << "Current Date      : " << currentday << "/" << currentmonth << "/" << currentyear << endl;
        cout << "your Age          : " << agemonth << " Months" << ageday << " days" << endl;
    }
    else if (agemonth == 0) {
        cout << "your Date of Birth: " << birthday << "/" << birthmonth << "/" << birthyear << endl;
        cout << "Current Date      : " << currentday << "/" << currentmonth << "/" << currentyear << endl;
        cout << "your Age          : " << ageyear << " years" << ageday << " days" << endl;
    }
    else if (ageday == 0) {
        cout << "your Date of Birth: " << birthday << "/" << birthmonth << "/" << birthyear << endl;
        cout << "Current Date      : " << currentday << "/" << currentmonth << "/" << currentyear << endl;
        cout << "your Age          : " << ageyear << " years" << agemonth << " Months" << endl;
    }
    else
        cout << "your Date of Birth: " << birthday << "/" << birthmonth << "/" << birthyear << endl;
    cout << "Current Date      : " << currentday << "/" << currentmonth << "/" << currentyear << endl;
    cout << "your Age          : " << ageyear << " years" << agemonth << " Months" << ageday << " days" << endl;
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26790111_26790172_3_20
26790111_26790201_3_15
Title: "C - scanfprintf name and age program" 
----------------------------------------

int main () {
    char yourname [20];
    int yourage;
    printf ("Whats your name?\t");
    scanf ("%18[^\n]s", yourname);
    yourname[19] = '\0';
    fflush (stdin);
    printf ("How old are you?\t");
    scanf (" %d", & yourage);
    printf ("You are %d years old and your name is %s\n\n\n", yourage, yourname);
    system ("pause");
    return (0);
}
----------------------------------------

int main () {
    char yourname [100];
    int yourage;
    printf ("Whats your name?\t");
    scanf ("%s", yourname);
    printf ("How old are you?\t");
    scanf ("%d", & yourage);
    printf ("You are %d years old and your name is %s \n\n\n", yourage, yourname);
    system ("pause");
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26792092_26792231_1_34
26792092_26795253_43_77
Title: random array in c 
----------------------------------------

int hi_lo_avg (int r, int c) {
    int a [3] [5];
    int max = 0;
    int max_r, max_c;
    int min_r, min_c;
    int min = 100;
    for (r = 0; r < 3; r++)
        for (c = 0; c < 5; c++) {
            a[r][c] = random () % 100 + 1;
            if (a[r][c] > max) {
                max = a[r][c];
                max_r = r;
                max_c = c;
            }
        }
    printf ("High %d, at row %d, col %d address of %p\n", max, max_r, max_c, & a [max_r] [max_c]);
    for (r = 0; r < 3; r++)
        for (c = 0; c < 5; c++) {
            if (a[r][c] < min) {
                min = a[r][c];
                min_r = r;
                min_c = c;
            }
        }
    printf ("Low %d, at row %d, col %d address of %p\n", min, min_r, min_c, & a [min_r] [min_c]);
    return 0;
}
----------------------------------------

int hi_lo_avg (int a [] [col], int r, int c) {
    int max = 0;
    int max_r, max_c;
    int min_r, min_c;
    int min = 100;
    int total = 0;
    float average = 0.0;
    for (r = 0; r < row; r++) {
        for (c = 0; c < col; c++) {
            if (a[r][c] > max) {
                max = a[r][c];
                max_r = r;
                max_c = c;
            }
            if (a[r][c] < min) {
                min = a[r][c];
                min_r = r;
                min_c = c;
            }
            total += a[r][c];
        }
    }
    printf ("\n\nHigh %2d, at row %d, col %d address of %p\n", max, max_r, max_c, & a [max_r] [max_c]);
    printf ("Low  %2d, at row %d, col %d address of %p\n", min, min_r, min_c, & a [min_r] [min_c]);
    average = (float) total / (float) (row * col);
    printf ("\nThe array average is %f\n\n", average);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2679734_2679780_17_52
2679734_2679785_1_17
Title: C programming fopen 
----------------------------------------

void cabclh (ALUNO alunos []) {
    FILE *fp;
    int i;
    for (i = 0; i < 100; i++)
        alunos[i].cabecalho[0] = '\0';
    fp = fopen ("trabalho.txt", "r");
    if (fp == NULL) {
        printf ("Erro ao abrir o ficheiro\n");
        return;
    }
    for (i = 0; i < 100; i++) {
        if (!feof (fp)) {
            fgets (alunos [i].cabecalho, 60, fp);
            if (alunos[i].cabecalho[strlen (alunos[i].cabecalho) - 1] == '\n')
                alunos[i].cabecalho[strlen (alunos[i].cabecalho) - 1] = '\0';
            printf ("%s\n", alunos [i].cabecalho);
        }
    }
    fclose (fp);
}
----------------------------------------

void cabclh (ALUNO alunos [], int a) {
    FILE *fp;
    int i = 0;
    fp = fopen ("trabalho.txt", "r");
    if (fp == NULL) {
        printf ("Erro ao abrir o ficheiro\n");
        return;
    }
    while (!feof (fp) && i < 100) {
        fgets (alunos [i].cabecalho, 60, fp);
        printf ("%s\n", alunos [i ++].cabecalho);
    }
    fclose (fp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26799685_26799809_6_29
26799685_26799832_5_22
Title: combine the whole elements in the array and store it in index 0 
----------------------------------------

int main () {
    char array1 [MAX_SIZE];
    char array2 [1] [MAX_SIZE];
    array1[0] = 'a';
    array1[1] = 'p';
    array1[2] = 'p';
    array1[3] = 'l';
    array1[4] = 'e';
    array1[MAX_SIZE - 1] = '\0';
    strcpy (array2 [0], array1);
    array2[0][MAX_SIZE - 1] = '\0';
    printf ("%s", array2 [0]);
    return 0;
}
----------------------------------------

int main (void) {
    char array1 [5];
    char array2 [10] [6];
    array1[0] = 'a';
    array1[1] = 'p';
    array1[2] = 'p';
    array1[3] = 'l';
    array1[4] = 'e';
    memcpy (array2 [0], array1, 5);
    array2[0][5] = '\0';
    printf ("array2[0] = %s\n", array2 [0]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26799685_26799809_6_29
26799685_26800047_19_27
Title: combine the whole elements in the array and store it in index 0 
----------------------------------------

int main () {
    char array1 [MAX_SIZE];
    char array2 [1] [MAX_SIZE];
    array1[0] = 'a';
    array1[1] = 'p';
    array1[2] = 'p';
    array1[3] = 'l';
    array1[4] = 'e';
    array1[MAX_SIZE - 1] = '\0';
    strcpy (array2 [0], array1);
    array2[0][MAX_SIZE - 1] = '\0';
    printf ("%s", array2 [0]);
    return 0;
}
----------------------------------------

int main (void) {
    char *array1 [] = {"a", "p", "p", "l", "e"};
    char *string;
    int n = sizeof (array1) / sizeof (*array1);
    string = join (n, array1);
    puts (string);
    free (string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26799685_26799809_6_29
26799685_26802670_13_25
Title: combine the whole elements in the array and store it in index 0 
----------------------------------------

int main () {
    char array1 [MAX_SIZE];
    char array2 [1] [MAX_SIZE];
    array1[0] = 'a';
    array1[1] = 'p';
    array1[2] = 'p';
    array1[3] = 'l';
    array1[4] = 'e';
    array1[MAX_SIZE - 1] = '\0';
    strcpy (array2 [0], array1);
    array2[0][MAX_SIZE - 1] = '\0';
    printf ("%s", array2 [0]);
    return 0;
}
----------------------------------------

int main (void) {
    int array [] = {12, 32, 54, 1, 6};
    char *as_string = get_hex_string (array, sizeof array / sizeof *array);
    if (as_string == NULL) {
        fprintf (stderr, "Failed to get hex-string\n");
        exit (EXIT_FAILURE);
    }
    printf ("Hex-string: %s\n", as_string);
    free (as_string);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26799685_26799832_5_22
26799685_26800047_19_27
Title: combine the whole elements in the array and store it in index 0 
----------------------------------------

int main (void) {
    char array1 [5];
    char array2 [10] [6];
    array1[0] = 'a';
    array1[1] = 'p';
    array1[2] = 'p';
    array1[3] = 'l';
    array1[4] = 'e';
    memcpy (array2 [0], array1, 5);
    array2[0][5] = '\0';
    printf ("array2[0] = %s\n", array2 [0]);
    return 0;
}
----------------------------------------

int main (void) {
    char *array1 [] = {"a", "p", "p", "l", "e"};
    char *string;
    int n = sizeof (array1) / sizeof (*array1);
    string = join (n, array1);
    puts (string);
    free (string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26799685_26799832_5_22
26799685_26802670_13_25
Title: combine the whole elements in the array and store it in index 0 
----------------------------------------

int main (void) {
    char array1 [5];
    char array2 [10] [6];
    array1[0] = 'a';
    array1[1] = 'p';
    array1[2] = 'p';
    array1[3] = 'l';
    array1[4] = 'e';
    memcpy (array2 [0], array1, 5);
    array2[0][5] = '\0';
    printf ("array2[0] = %s\n", array2 [0]);
    return 0;
}
----------------------------------------

int main (void) {
    int array [] = {12, 32, 54, 1, 6};
    char *as_string = get_hex_string (array, sizeof array / sizeof *array);
    if (as_string == NULL) {
        fprintf (stderr, "Failed to get hex-string\n");
        exit (EXIT_FAILURE);
    }
    printf ("Hex-string: %s\n", as_string);
    free (as_string);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26799685_26800047_19_27
26799685_26802670_13_25
Title: combine the whole elements in the array and store it in index 0 
----------------------------------------

int main (void) {
    char *array1 [] = {"a", "p", "p", "l", "e"};
    char *string;
    int n = sizeof (array1) / sizeof (*array1);
    string = join (n, array1);
    puts (string);
    free (string);
    return 0;
}
----------------------------------------

int main (void) {
    int array [] = {12, 32, 54, 1, 6};
    char *as_string = get_hex_string (array, sizeof array / sizeof *array);
    if (as_string == NULL) {
        fprintf (stderr, "Failed to get hex-string\n");
        exit (EXIT_FAILURE);
    }
    printf ("Hex-string: %s\n", as_string);
    free (as_string);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26804841_26805015_2_18
26804841_26805092_3_24
Title: Drawing a triangle using a for loop 
----------------------------------------

int main () {
    int m, n, i, j;
    scanf ("%d %d", & m, & n);
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            if (j <= i)
                printf ("+");
            else
                printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int row, column, rowCount, columnCount;
    printf ("Enter row and column length: \n>");
    scanf (" %d %d", & row, & column);
    for (rowCount = 0; rowCount < row; rowCount++) {
        for (columnCount = 0; columnCount < column; columnCount++) {
            if (columnCount <= rowCount)
                printf ("+");
            else
                printf ("*");
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26813343_26813440_6_19
26813343_26813470_6_28
Title: Testing the input if it is numeric or not 
----------------------------------------

void main () {
    system ("clear");
    char str [1];
    printf ("Enter a number\n");
    scanf ("%s", str);
    printf ("What you entered was %s\n", str);
    if (isdigit (str[0]))
        printf ("this is not an alphabet\n");
    else
        printf ("this is an alphabet\n");
}
----------------------------------------

int main () {
    char c;
    printf ("Enter a character: ");
    scanf ("%c", & c);
    bool check = true;
    while (check) {
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
            printf ("%c is an alphabet.", c);
            check = true;
            break;
        }
        else {
            printf ("%c is not an alphabet.", c);
            check = false;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26815187_26815221_1_18
26815187_48960715_21_41
Title: printing a pascal triangle in C 
----------------------------------------

void Pascal (int n) {
    int i, j;
    int a [100] = {0}, b [100] = {0};
    a[1] = 1;
    for (i = 1; i <= n; i++) {
        printf (" ");
        b[i] = 1;
        for (j = 1; j <= i; j++) {
            if (j <= 1)
                a[j - 1] = 0;
            b[j] = a[j - 1] + a[j];
            printf ("%d ", b [j]);
        }
        for (j = 1; j <= i; j++) {
            a[j] = b[j];
        }
        printf ("\n");
    }
}
----------------------------------------

void Pascal (int rows) {
    int coef = 1, space;
    for (int i = 0; i < rows; i++) {
        for (space = 1; space <= rows - i; space++)
            printf ("  ");
        for (int j = 0; j <= i; j++) {
            if (j == 0 || i == 0)
                coef = 1;
            else
                coef = coef * (i - j + 1) / j;
            printf ("%4d", coef);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26815786_26815857_1_11
26815786_26815858_1_17
Title: Accessing fields of a struct for a double linked list 
----------------------------------------

void insert (int val, node **head) {
    node *temp = malloc (sizeof (*temp));
    temp->val = val;
    temp->prev = NULL;
    temp->next = *head;
    *head = temp;
    if (temp->next)
        temp->next->prev = temp;
}
----------------------------------------

void insert (int val, node **head) {
    if (*head == NULL) {
        node *temp2 = (node *) malloc (sizeof (node));
        temp2->val = val;
        *head = temp2;
    }
    else {
        node *temp = *head;
        node *temp2 = (node *) malloc (sizeof (node));
        temp2->val = val;
        temp2->prev = NULL;
        temp2->next = temp;
        temp->prev = temp2;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26815786_26815857_1_11
26815786_26816695_1_12
Title: Accessing fields of a struct for a double linked list 
----------------------------------------

void insert (int val, node **head) {
    node *temp = malloc (sizeof (*temp));
    temp->val = val;
    temp->prev = NULL;
    temp->next = *head;
    *head = temp;
    if (temp->next)
        temp->next->prev = temp;
}
----------------------------------------

void insert (int val, node **head) {
    node *temp = (node *) malloc (sizeof (node));
    temp->val = val;
    temp->prev = NULL;
    temp->next = *head;
    if (*head)
        (*head)->prev = temp;
    *head = temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26815786_26815858_1_17
26815786_26816695_1_12
Title: Accessing fields of a struct for a double linked list 
----------------------------------------

void insert (int val, node **head) {
    if (*head == NULL) {
        node *temp2 = (node *) malloc (sizeof (node));
        temp2->val = val;
        *head = temp2;
    }
    else {
        node *temp = *head;
        node *temp2 = (node *) malloc (sizeof (node));
        temp2->val = val;
        temp2->prev = NULL;
        temp2->next = temp;
        temp->prev = temp2;
    }
}
----------------------------------------

void insert (int val, node **head) {
    node *temp = (node *) malloc (sizeof (node));
    temp->val = val;
    temp->prev = NULL;
    temp->next = *head;
    if (*head)
        (*head)->prev = temp;
    *head = temp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26818526_26818661_1_22
26818526_26819071_5_28
Title: adding a char in every instance of substring 
----------------------------------------

void main () {
    char haystack [20] = "foofoofoofoo", *ptr = haystack, *temp = NULL, *temp1 = NULL, needle [] = "foo";
    int position, length = strlen (needle);
    ptr = strstr (haystack, needle);
    while (ptr != NULL) {
        temp = (char *) calloc (strlen (haystack) +100, sizeof (char));
        position = (strstr (haystack, needle) - haystack);
        strncpy (temp, haystack, position + length);
        strcat (temp, "d");
        strcat (temp, strstr (haystack, needle) + length);
        strcpy (haystack, temp);
        free (temp);
        printf ("\n%s", haystack);
        ptr = strstr (ptr +length, needle);
    }
}
----------------------------------------

void main () {
    char haystack [20] = "foofoofoofoo", *ptr = haystack, *temp = NULL, *temp1 = NULL, needle [] = "foo";
    int position, length = strlen (needle);
    temp = (char *) calloc (strlen (haystack) +100, sizeof (char));
    while (*ptr != '\0') {
        ptr = strstr (ptr, needle);
        if (ptr == NULL)
            break;
        position = ptr - haystack;
        strncpy (temp, haystack, position + length);
        temp[position + length] = '\0';
        strcat (temp, "d");
        strcat (temp, ptr + length);
        strcpy (haystack, temp);
        ptr += length + 1;
    }
    printf ("\n%s", haystack);
    free (temp);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26818685_26818757_3_15
26818685_26818758_3_15
Title: double to int in c 
----------------------------------------

int main () {
    double d = 10;
    int x = 5;
    x = (int) d + x;
    d = (double) x + d;
    printf ("%lf\n", d);
    printf ("%d", x);
    return 0;
}
----------------------------------------

int main (void) {
    double d = 10;
    int x = 5;
    x = (int) d + x;
    d = (double) x + d;
    printf ("%f\n", d);
    printf ("%d\n", x);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26820979_26821037_1_12
26820979_26821040_5_26
Title: For loop in C Language 
----------------------------------------

int main () {
    int i = 0, arrayLength = 3;
    int array [arrayLength] = {543};
    int a0 = 0;
    int a1 = 14;
    int a2 = 22;
    int aValues [3] = {a0, a1, a2
    }
    for (i = 0; i < arrayLength; i++) {
        array[i] = aValues[i];
    }
    return 1;
}
----------------------------------------

int main () {
    int count;
    int array1 [MAX_SIZE] = {5, 4, 3};
    int array2 [MAX_SIZE] = {0, 14, 22};
    printf ("Values before they get changed:\n");
    for (count = 0; count < MAX_SIZE; count++)
        printf ("%d \n", array1[count]);
    for (count = 0; count < MAX_SIZE; count++)
        array1[count] = array2[count];
    printf ("\nValues after they get changed:\n");
    for (count = 0; count < MAX_SIZE; count++)
        printf ("%d \n", array1[count]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26821570_26821760_1_22
26821570_26821798_1_20
Title: Printing a linked list in the right order 
----------------------------------------

int main () {
    item *curr, *head, *tail;
    int value;
    head = NULL;
    scanf ("%d", & value);
    while (value != 0) {
        curr = (item *) malloc (sizeof (item));
        curr->val = value;
        curr->next = NULL;
        if (head == NULL) {
            head = tail = curr;
        }
        else {
            tail->next = curr;
            tail = curr;
        }
        scanf ("%d", & value);
    }
    ...
}
----------------------------------------

int main () {
    item *curr, *head;
    int value = -1;
    head = (item *) malloc (sizeof (item));
    curr = head;
    while (value != 0) {
        scanf ("%d", & value);
        curr->val = value;
        curr->next = (item *) malloc (sizeof (item));
        curr = curr->next;
    }
    curr = head;
    while (curr->next) {
        printf ("%d\n", curr -> val);
        curr = curr->next;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26826647_26826703_14_23
26826647_26827670_10_22
Title: read words from line 
----------------------------------------

char *readline () {
    line[line_length] = 0;
    while ((input = getchar ()) != '\n' && line_length < MAX_LINE - 1) {
        line[line_length] = input;
        line_length++;
    }
    pocet_radek++;
    printf ("%d\n", pocet_radek);
    return line;
}
----------------------------------------

char *readline (char *line, size_t size) {
    int input, line_length = 0;
    while ((input = getchar ()) != EOF && input != '\n' && line_length < size - 1) {
        line[line_length++] = input;
    }
    line[line_length] = 0;
    if (!line_length && input == EOF)
        return NULL;
    pocet_radek++;
    printf ("%d\n", pocet_radek);
    return line;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26862923_26863225_5_24
26862923_26863269_1_26
Title: Splitting string using symbols in C 
----------------------------------------

int main () {
    char splitter [100];
    char mystring [1000];
    char newstring [1000] [1000];
    int i, j, z, k = 0;
    gets (splitter);
    for (i = 0; i < strlen (splitter); ++i) {
        if (((splitter[i]) >= 65 && (splitter[i] <= 90)) || ((splitter[i] >= 97) && (splitter[i] <= 122)))
            mystring[k++] = splitter[i];
        else
            mystring[k++] = ' ';
    }
    printf ("%s\n", mystring);
    return 0;
}
----------------------------------------

int main () {
    int i = 0, j = 0, t, f = 0;
    char s [20];
    char b [20];
    printf ("Enter the string\n");
    scanf ("%s", & s);
    while (s[i] != '\0') {
        t = s[i];
        if ((t >= 65 && t <= 90) || (t >= 97 && t <= 122)) {
            b[j++] = s[i];
            f = 1;
        }
        else {
            if (f)
                b[j++] = ' ';
        }
        i++;
    }
    b[j] = '\0';
    printf ("%s\n", b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26862923_26863225_5_24
26862923_26864185_4_25
Title: Splitting string using symbols in C 
----------------------------------------

int main () {
    char splitter [100];
    char mystring [1000];
    char newstring [1000] [1000];
    int i, j, z, k = 0;
    gets (splitter);
    for (i = 0; i < strlen (splitter); ++i) {
        if (((splitter[i]) >= 65 && (splitter[i] <= 90)) || ((splitter[i] >= 97) && (splitter[i] <= 122)))
            mystring[k++] = splitter[i];
        else
            mystring[k++] = ' ';
    }
    printf ("%s\n", mystring);
    return 0;
}
----------------------------------------

int main () {
    char splitter [100];
    char mystring [1000];
    char *tokens [500];
    char *token;
    int i = 0;
    scanf ("%99[^\n]%*c", splitter);
    scanf ("%999[^\n]", mystring);
    token = strtok (mystring, splitter);
    while (token) {
        if (i)
            putchar (' ');
        printf ("%s", token);
        tokens[i++] = token;
        token = strtok (NULL, splitter);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26862923_26863269_1_26
26862923_26864185_4_25
Title: Splitting string using symbols in C 
----------------------------------------

int main () {
    int i = 0, j = 0, t, f = 0;
    char s [20];
    char b [20];
    printf ("Enter the string\n");
    scanf ("%s", & s);
    while (s[i] != '\0') {
        t = s[i];
        if ((t >= 65 && t <= 90) || (t >= 97 && t <= 122)) {
            b[j++] = s[i];
            f = 1;
        }
        else {
            if (f)
                b[j++] = ' ';
        }
        i++;
    }
    b[j] = '\0';
    printf ("%s\n", b);
    return 0;
}
----------------------------------------

int main () {
    char splitter [100];
    char mystring [1000];
    char *tokens [500];
    char *token;
    int i = 0;
    scanf ("%99[^\n]%*c", splitter);
    scanf ("%999[^\n]", mystring);
    token = strtok (mystring, splitter);
    while (token) {
        if (i)
            putchar (' ');
        printf ("%s", token);
        tokens[i++] = token;
        token = strtok (NULL, splitter);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26885140_26885831_5_29
26885140_26885995_10_59
Title: Get the length of each line in file with C and write in output file 
----------------------------------------

int main (int argc, char *argv []) {
    FILE *my_file = fopen (argv[1], "r");
    FILE *my_output = fopen (argv[2], "w");
    int total_sequence_coutns = 0;
    char *sequence_name;
    int dna_length;
    char *line = NULL;
    size_t size = 0;
    while (-1 != getline (&line, &size, my_file)) {
        if (line[0] == '>') {
            sequence_name = strdup (strtok (line, "><![CDATA[\n"));
            total_sequence_coutns += 1;
            continue;
        }
        dna_length = strlen (strtok (line, "\n"));
        fprintf (my_output, "%s %d\n", sequence_name, dna_length);
        free (sequence_name);
    }
    fprintf (my_output, "Total number of sequences = %d\n", total_sequence_coutns);
    fclose (my_file);
    fclose (my_output);
    free (line);
    return (0);
}
----------------------------------------

int main (int argc, char *argv []) {
    FILE *in;
    FILE *out;
    char line [MAXLEN];
    char ref [MAXLEN] = "";
    int nseq = 0;
    if (argc != 3) {
        fprintf (stderr, "Usage: %s infile outfile\n", argv [0]);
        exit (1);
    }
    in = fopen (argv[1], "r");
    if (in == NULL) {
        fprintf (stderr, "Couldn't open %s.\n", argv [1]);
        exit (1);
    }
    out = fopen (argv[2], "w");
    if (in == NULL) {
        fprintf (stderr, "Couldn't open %s for writing.\n", argv [2]);
        exit (1);
    }
    while (fgets (line, sizeof (line), in)) {
        int len = strlen (line);
        while (len > 0 && isspace (line[len - 1]))
            len--;
        line[len] = '\0';
        if (line[0] == '>') {
            strcpy (ref, line + 1);
        }
        else {
            fprintf (out, "%s: %d\n", ref, len);
            nseq++;
        }
    }
    fprintf (out, "Total number of sequences. %d\n", nseq);
    fclose (in);
    fclose (out);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26892859_26893076_1_32
26892859_26893691_12_40
Title: How do I get switch() to loop multiple times in C? 
----------------------------------------

int main () {
    int firstReel;
    int i = 0;
    srand (time (NULL));
    while (i < 7) {
        firstReel = rand () % 4;
        switch (firstReel) {
        case 0 :
            printf ("Bell ");
            break;
        case 1 :
            printf ("Cherry ");
            break;
        case 2 :
            printf ("Orange ");
            break;
        case 3 :
            printf ("Horseshoe ");
            break;
        }
        i++;
    }
}
----------------------------------------

int main (int argc, char **argv) {
    int s, r, elap, tix, counts;
    srand ((unsigned) time (NULL));
    for (s = SPINS; s > 0; s--) {
        printf ("\r");
        for (r = 0; r < REELS; r++) {
            reel[r] = rand () % SYMBOLS;
            printf ("%s", symbol [reel [r]]);
        }
        tix = clock ();
        counts = CLOCKS_PER_SEC / s;
        do {
            elap = clock () - tix;
        }
        while (elap < counts);
    }
    printf ("\n");
    for (r = 1; r < REELS; r++)
        if (reel[r] != reel[r - 1])
            break;
    if (r < REELS)
        printf ("You lost!\n");
    else
        printf ("You won!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26911620_26920512_9_46
26911620_27022738_21_66
Title: Read out RGB data from images with C on Raspberry PI 
----------------------------------------

double compare_pictures (const char *path1, const char *path2) {
    double totalDiff = 0.0;
    unsigned int x, y;
    int width1, height1, comps1;
    unsigned char *image1 = stbi_load (path1, &width1, &height1, &comps1, 0);
    int width2, height2, comps2;
    unsigned char *image2 = stbi_load (path2, &width2, &height2, &comps2, 0);
    if (image1 == NULL || image2 == NULL) {
        fprintf (stderr, "One of the images does not exist\n");
        return -1;
    }
    if ((width1 != width2) || (height1 != height2)) {
        fprintf (stderr, "width/height of the images must match!\n");
        return -1;
    }
    else {
        for (y = 0; y < height1; y++) {
            for (x = 0; x < width1; x++) {
                totalDIff += fabs ((int) image1[(x + y * width1) * comps1 + 0] - (int) image2[(x + y * width2) * comps2 + 0]) / 255.0;
                totalDiff += fabs ((int) image1[(x + y * width1) * comps1 + 1] - (int) image2[(x + y * width2) * comps2 + 1]) / 255.0;
                totalDiff += fabs ((int) image1[(x + y * width1) * comps1 + 2] - (int) image2[(x + y * width2) * comps2 + 2]) / 255.0;
            }
        }
        totalDiff = 100.0 * totalDiff / (double) (width1 * height1 * 3);
        printf ("%lf\n", totalDiff);
        return totalDiff;
    }
}
----------------------------------------

double compare_pictures (const char *path1, const char *path2) {
    double totalDiff = 0.0, value;
    unsigned int x, y;
    int width1, height1, comps1;
    unsigned char *image1 = stbi_load (path1, &width1, &height1, &comps1, 0);
    int width2, height2, comps2;
    unsigned char *image2 = stbi_load (path2, &width2, &height2, &comps2, 0);
    if (image1 == NULL || image2 == NULL) {
        return -1;
    }
    if ((width1 != width2) || (height1 != height2)) {
        return -2;
    }
    else {
        for (y = 0; y < height1; y++) {
            for (x = 0; x < width1; x++) {
                value = (int) image1[(x + y * width1) * comps1 + COLOR_R] - (int) image2[(x + y * width2) * comps2 + COLOR_R];
                if (value < OFFSET && value > (OFFSET * -1)) {
                    value = 0;
                }
                totalDiff += fabs (value) / 255.0;
                value = (int) image1[(x + y * width1) * comps1 + COLOR_G] - (int) image2[(x + y * width2) * comps2 + COLOR_G];
                if (value < OFFSET && value > (OFFSET * -1)) {
                    value = 0;
                }
                totalDiff += fabs (value) / 255.0;
                value = (int) image1[(x + y * width1) * comps1 + COLOR_B] - (int) image2[(x + y * width2) * comps2 + COLOR_B];
                if (value < OFFSET && value > (OFFSET * -1)) {
                    value = 0;
                }
                totalDiff += fabs (value) / 255.0;
            }
        }
        totalDiff = 100.0 * totalDiff / (double) (width1 * height1 * 3);
        return totalDiff;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26925059_26925501_47_61
26925059_26925538_43_65
Title: "What's wrong with my ""Create new nodes"" function & my ""add node as last node"" function?" 
----------------------------------------

int main () {
    Str30 data;
    struct nodeTag *pFirst = NULL;
    struct nodeTag *pTemp;
    while (scanf ("%s", data) != -1) {
        pTemp = CreateNewNode (data, strlen (data));
        pFirst = Add_as_Last_Node (pFirst, pTemp);
    }
    Traverse (pFirst);
    return 0;
}
----------------------------------------

int main () {
    Str30 data;
    int i = 0;
    struct nodeTag *pFirst = NULL;
    struct nodeTag *pTemp;
    for (i = 0; i < 3; i++) {
        scanf ("%s", data);
        pTemp = CreateNewNode (data);
        if (pFirst == NULL) {
            pFirst = pTemp;
        }
        else {
            Add_as_Last_Node (pFirst, pTemp);
        }
    }
    Traverse (pFirst);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26928983_26929004_5_27
26928983_26929384_1_26
Title: "Give a file name as a string remove all dots from it" 
----------------------------------------

int main () {
    char input [128] = {0,};
    char saveptr [32] [32];
    char *tok = NULL;
    printf ("Enter the name of your chosen file: ");
    fgets (input, 127, stdin);
    tok = strtok_r (input, ".", (char **) saveptr);
    if (tok) {
        printf ("File Name : %s\t", tok);
    }
    tok = strtok_r (NULL, ". \n \0", (char **) saveptr);
    if (tok) {
        printf ("Extension : %s\n", tok);
    }
    return 0;
}
----------------------------------------

int main () {
    char s [50], *aux [10], ch;
    int i, cnt = 0, size;
    printf ("Enter the name of your chosen file: ");
    while (fgets (s, 50, stdin) == 0)
        ;
    size = strlen (s);
    ch = '.';
    for (i = 0; i < size; i++) {
        if (!i)
            aux[cnt] = &s[i];
        if (s[i] == ch) {
            s[i] = '\0';
            aux[++cnt] = &s[++i];
        }
    }
    for (i = 0; i <= cnt; i++)
        printf ("%s\n", aux[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26928983_26929004_5_27
26928983_26929420_5_16
Title: "Give a file name as a string remove all dots from it" 
----------------------------------------

int main () {
    char input [128] = {0,};
    char saveptr [32] [32];
    char *tok = NULL;
    printf ("Enter the name of your chosen file: ");
    fgets (input, 127, stdin);
    tok = strtok_r (input, ".", (char **) saveptr);
    if (tok) {
        printf ("File Name : %s\t", tok);
    }
    tok = strtok_r (NULL, ". \n \0", (char **) saveptr);
    if (tok) {
        printf ("Extension : %s\n", tok);
    }
    return 0;
}
----------------------------------------

int main () {
    char s [50];
    memset (s, 0, 50);
    printf ("Enter the name of your chosen file: ");
    while (fgets (s, 50, stdin) != 0)
        ;
    for (int i = 0; i < 50; i++) {
        if (s[i] == '.') {
            memmove (s + i, s + i + 1, 50 - i - 1);
        }
    }
    printf ("The name of your file without dot extension indicators is: %s \n", s);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26928983_26929384_1_26
26928983_26929420_5_16
Title: "Give a file name as a string remove all dots from it" 
----------------------------------------

int main () {
    char s [50], *aux [10], ch;
    int i, cnt = 0, size;
    printf ("Enter the name of your chosen file: ");
    while (fgets (s, 50, stdin) == 0)
        ;
    size = strlen (s);
    ch = '.';
    for (i = 0; i < size; i++) {
        if (!i)
            aux[cnt] = &s[i];
        if (s[i] == ch) {
            s[i] = '\0';
            aux[++cnt] = &s[++i];
        }
    }
    for (i = 0; i <= cnt; i++)
        printf ("%s\n", aux[i]);
    return 0;
}
----------------------------------------

int main () {
    char s [50];
    memset (s, 0, 50);
    printf ("Enter the name of your chosen file: ");
    while (fgets (s, 50, stdin) != 0)
        ;
    for (int i = 0; i < 50; i++) {
        if (s[i] == '.') {
            memmove (s + i, s + i + 1, 50 - i - 1);
        }
    }
    printf ("The name of your file without dot extension indicators is: %s \n", s);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26951288_26951397_1_20
26951288_26951697_2_25
Title: Programs counting even and odd numbers 
----------------------------------------

int main (void) {
    int n;
    printf ("Enter the count of numbers that you want to check: ");
    if (scanf ("%d", &n) != 1)
        Handle_Error ();
    while (n > 0) {
        n--;
        printf ("Enter a number that you want to check: ");
        int i;
        if (scanf ("%d", &i) != 1)
            break;
        if ((i % 2) == 0) {
            if (i == 0)
                printf ("%d is zero.\n", i);
            else
                printf ("%d is even and not 0.\n", i);
        }
        else
            printf ("%d is odd.\n", i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int n, nEven = 0, nOdd = 0, nZero = 0;
    for (;;) {
        printf ("\nEnter a number that you want to check: ");
        if (scanf ("%d", &n) != 1)
            break;
        if (n == 0) {
            nZero++;
        }
        else {
            if (n % 2) {
                nEven++;
            }
            else {
                nOdd++;
            }
        }
    }
    printf ("There were %d even, %d odd, and %d zero values.", nEven, nOdd, nZero);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26951288_26951397_1_20
26951288_38181488_4_39
Title: Programs counting even and odd numbers 
----------------------------------------

int main (void) {
    int n;
    printf ("Enter the count of numbers that you want to check: ");
    if (scanf ("%d", &n) != 1)
        Handle_Error ();
    while (n > 0) {
        n--;
        printf ("Enter a number that you want to check: ");
        int i;
        if (scanf ("%d", &i) != 1)
            break;
        if ((i % 2) == 0) {
            if (i == 0)
                printf ("%d is zero.\n", i);
            else
                printf ("%d is even and not 0.\n", i);
        }
        else
            printf ("%d is odd.\n", i);
    }
    return 0;
}
----------------------------------------

void main () {
    int nodd, neven, num, digit;
    clrscr ();
    printf ("Count number of odd and even digits in a given integer number ");
    scanf ("%d", & num);
    nodd = neven = 0;
    while (num > 0) {
        digit = num % 10;
        if (digit % 2 == 1)
            nodd++;
        else
            neven++;
        num /= 10;
    }
    printf ("Odd digits : %d Even digits: %d\n", nodd, neven);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26951288_26951697_2_25
26951288_38181488_4_39
Title: Programs counting even and odd numbers 
----------------------------------------

int main (void) {
    int n, nEven = 0, nOdd = 0, nZero = 0;
    for (;;) {
        printf ("\nEnter a number that you want to check: ");
        if (scanf ("%d", &n) != 1)
            break;
        if (n == 0) {
            nZero++;
        }
        else {
            if (n % 2) {
                nEven++;
            }
            else {
                nOdd++;
            }
        }
    }
    printf ("There were %d even, %d odd, and %d zero values.", nEven, nOdd, nZero);
    return 0;
}
----------------------------------------

void main () {
    int nodd, neven, num, digit;
    clrscr ();
    printf ("Count number of odd and even digits in a given integer number ");
    scanf ("%d", & num);
    nodd = neven = 0;
    while (num > 0) {
        digit = num % 10;
        if (digit % 2 == 1)
            nodd++;
        else
            neven++;
        num /= 10;
    }
    printf ("Odd digits : %d Even digits: %d\n", nodd, neven);
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26958029_26958401_1_14
26958029_26961291_1_17
Title: "Using a list to store data from a .txt file only stores the last input (C)" 
----------------------------------------

void insertaCab (lista **p, char path [100]) {
    char lectura [50];
    FILE *archivo;
    = fopen (path, "r");
    if (archivo == NULL)
        return;
    lista *t = new lista;
    while (fgets (lectura, 50, archivo)) {
        for (i = 1; i <= 8 && fgets (lectura, 50, archivo); i++)
            asignar (i, lectura, &t);
        if (i <= 8)
            break;
        t->prox = *p;
        *p = t;
    }
    fclose (archivo);
}
----------------------------------------

void insertaCab (lista **p, char path [100]) {
    lista *t = new lista;
    t = (struct lista *) malloc (sizeof (struct lista));
    char lectura [50];
    int i = 1;
    FILE *archivo = fopen (path, "r");
    if (archivo == NULL)
        return;
    while (fgets (lectura, 50, archivo)) {
        t = (struct lista *) malloc (sizeof (struct lista));
        for (i = 1; (i <= 8) && (fgets (lectura, 50, archivo)); i++)
            asignar (i, lectura, &t);
        if (i <= 8)
            break;
        t->prox = (*p);
        (*p) = t;
    }
    fclose (archivo);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26962887_26963190_5_25
26962887_26963251_4_13
Title: Returning a C string from a function in C 
----------------------------------------

void convertToBinary (char *ReturnV, int _this) {
    int bin_no [16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, bin_Index;
    int working = _this;
    int i, singleDigit, a;
    char binaryDigit [1];
    for (bin_Index = 15; bin_Index >= 0; bin_Index--) {
        working = (working / 2);
        bin_no[bin_Index] = working % 2;
    }
    for (i = 0; i < 18; i++) {
        if (i <= 7)
            ReturnV[i] = (char) (((int) '0') + bin_no[i]);
        else if (i == 8)
            ReturnV[8] = ' ';
        else
            ReturnV[i] = (char) (((int) '0') + bin_no[i + 1]);
    }
    ReturnV[17] = '\0';
}
----------------------------------------

void convertToBinary (char *ReturnV, int working) {
    int bin_Index;
    for (bin_Index = 16; bin_Index > 0; bin_Index--) {
        ReturnV[bin_Index] = '0' + (working & 1);
        working >>= 1;
    }
    ReturnV[17] = 0;
    strncpy (ReturnV, ReturnV + 1, 8);
    ReturnV[8] = ' ';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26963664_26963756_22_33
26963664_26963834_1_10
Title: Input string with getchar 
----------------------------------------

void strInput (char str [], int nchars) {
    int i = 0;
    char c;
    while ((c = getchar ()) != '\n' && i <= (nchars - 1)) {
        str[i] = c;
        i++;
    }
    str[i] = '\0';
    printf ("%s %d\n", str, (int) strlen (str));
}
----------------------------------------

void strInput (char str [], int nchars) {
    int i = 0;
    int ch;
    while ((ch = getchar ()) != '\n' && ch != EOF) {
        if (i < nchars) {
            str[i++] = ch;
        }
    }
    str[i] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26964188_26964334_12_48
26964188_26967190_13_53
Title: how to fill each structure of my array of structures with cycle-for and scanf? 
----------------------------------------

int main () {
    int number_of_books;
    printf ("enter number of books to store");
    scanf ("%d", & number_of_books);
    struct book *head, *temp, *curnode;
    head = NULL;
    temp = NULL;
    for (int i = 0; i < number_of_books; i++) {
        temp = (struct book *) malloc (sizeof (struct book));
        printf ("Enter new book record: Book_Name, Pages, Author, Price\n");
        scanf ("%s %d %s %ld", temp -> bname, & temp -> pages, temp -> author, & temp -> price);
        temp->next = NULL;
        if (head == NULL) {
            printf ("in head if");
            head = temp;
            curnode = temp;
        }
        else {
            curnode->next = temp;
            curnode = curnode->next;
        }
    }
    temp = head;
    while (temp != NULL) {
        printf ("%s\t %d\t %s\t %ld", temp -> bname, temp -> pages, temp -> author, temp -> price);
        printf ("\n");
        temp = temp->next;
    }
    return 0;
}
----------------------------------------

int main () {
    struct book books [MAXS] = {{{0}, 0, {0}, 0}};
    int nbooks = 0;
    int i = 0;
    printf ("\nEnter number of books to store: ");
    scanf ("%d%*c", & nbooks);
    if (nbooks < 1) {
        fprintf (stderr, "error: invalid entry for 'nbooks'\n");
        return 1;
    }
    for (i = 0; i < nbooks; i++) {
        printf ("\n  book[%2d] name  : ", i + 1);
        scanf ("%[^\n]%*c", books [i].bname);
        printf ("  book[%2d] pages : ", i + 1);
        scanf ("%d%*c", & books [i].pages);
        printf ("  book[%2d] author: ", i + 1);
        scanf ("%[^\n]%*c", books [i].author);
        printf ("  book[%2d] price : ", i + 1);
        scanf ("%ld%*c", & books [i].price);
    }
    printf ("\n\nThe Books Entered Were:\n");
    i = 0;
    while (*books[i].bname) {
        printf ("\n  Book %-3d \"%s\"\n", i + 1, books [i].bname);
        printf ("    author : %s\n", books [i].author);
        printf ("    pages  : %d\n", books [i].pages);
        printf ("    price  : %ld\n", books [i].price);
        i++;
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26967982_26968078_14_23
26967982_26968090_10_19
Title: passing pointer to strcat does not update the string 
----------------------------------------

int main () {
    char s1 [MAXVALUE];
    char s2 [] = "Jim!";
    s1[0] = 'H', s1[1] = 'i', s1[2] = ' ';
    s1[3] = '\0';
    concat (s1, s2);
    printf ("%s\n", s1);
    return 0;
}
----------------------------------------

int main () {
    char s1 [MAXVALUE];
    char s2 [] = "Jim!";
    s1[0] = 'H', s1[1] = 'i', s1[2] = ' ';
    s1[3] = '\0';
    concat (s1, s2);
    printf ("%s\n", s1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26982462_26982618_12_24
26982462_26982630_14_26
Title: How to combine two variables of different data types in C? 
----------------------------------------

int main (void) {
    Player array [CONTESTANTS];
    int n;
    for (n = 0; n < CONTESTANTS; n++) {
        printf ("Player %d: ", array [n].number = n + 1);
        scanf ("%19s", array [n].name);
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct Contestant contestants [CONTESTANTS_LEN];
    int i;
    for (i = 0; i < CONTESTANTS_LEN; i++) {
        printf ("Player %d: ", i + 1);
        contestants[i].contestant_id = i + 1;
        scanf ("%s", & (contestants [i].contestant_name));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26984657_26984711_1_11
26984657_26992857_7_14
Title: "int format pointer arg (arg 3)" 
----------------------------------------

void diff (int a, int b, int x, int y) {
    int m, n;
    m = a - x;
    n = b - y;
    if ((b - n) > 0)
        printf (" La difference est %d + %d = %d", m, n, (m + n));
    else
        printf (" La difference est %d - %d = %d", m, n, (m - n));
}
----------------------------------------

void diff (int a, int b, int x, int y) {
    int m, n;
    m = a - x;
    n = b - y;
    if (n < 0)
        printf (" La difference est %d %s %d%s\n", m, "-", -n, "i");
    else
        printf (" La difference est %d %s %d%s\n", m, "+", n, "i");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
26985497_26985555_24_37
26985497_26985841_1_13
Title: First and Second Call in C 
----------------------------------------

void loadedDice (int *export1, int *export2, int *uninit) {
    if (*uninit) {
        *export1 = 1 + (rand () % 6);
        *export2 = 1 + (rand () % 6);
        *uninit = 0;
    }
    else if (*export1 == 6 && *export2 == 6) {
        *export1 = 1 + (rand () % 6);
        *export2 = 1 + (rand () % 6);
    }
    else {
        *export1 = 6;
        *export2 = 6;
    }
}
----------------------------------------

void loadedDice (int *export1, int *export2) {
    static int check = 1;
    if (check == 1) {
        *export1 = 1 + (rand () % 6);
        *export2 = 1 + (rand () % 6);
        check = 0;
    }
    else if (*export1 == 6 && *export2 == 6) {
        *export1 = 1 + (rand () % 6);
        *export2 = 1 + (rand () % 6);
    }
    else {* export1 = 6;
    *export2 = 6;
}
----------------------------------------

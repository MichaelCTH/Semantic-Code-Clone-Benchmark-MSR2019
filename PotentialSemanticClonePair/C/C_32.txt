$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33583478_33583562_1_15
33583478_33583572_3_19
Title: Comparing strings with if else 
----------------------------------------

int main () {
    int i = 0;
    int j = 1;
    char key [6] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf ("%s", ckey);
    for (i = 0; i < 6; i++) {
        if (ckey[i] != key[i])
            j = 0;
    }
    if (j == 1)
        printf (% s, "Correct.")
    else
        printf (% s, "Wrong.")
    return 0;
}
----------------------------------------

int main (void) {
    char key [5] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf ("%5s", ckey);
    size_t i = 0;
    while (i < sizeof (key) && key[i] == ckey[i])
        ++i;
    if (i == sizeof (key)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33583478_33583562_1_15
33583478_33583716_4_15
Title: Comparing strings with if else 
----------------------------------------

int main () {
    int i = 0;
    int j = 1;
    char key [6] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf ("%s", ckey);
    for (i = 0; i < 6; i++) {
        if (ckey[i] != key[i])
            j = 0;
    }
    if (j == 1)
        printf (% s, "Correct.")
    else
        printf (% s, "Wrong.")
    return 0;
}
----------------------------------------

int main () {
    char key [] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf (" %5s", ckey);
    if (!strcmp (ckey, key)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33583478_33583562_1_15
33583478_33590685_16_28
Title: Comparing strings with if else 
----------------------------------------

int main () {
    int i = 0;
    int j = 1;
    char key [6] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf ("%s", ckey);
    for (i = 0; i < 6; i++) {
        if (ckey[i] != key[i])
            j = 0;
    }
    if (j == 1)
        printf (% s, "Correct.")
    else
        printf (% s, "Wrong.")
    return 0;
}
----------------------------------------

int main (void) {
    char key [6] = "april", ckey [6];
    printf ("Enter the key: ");
    fgets (ckey, sizeof ckey, stdin);
    if (!compare (key, ckey)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33583478_33583572_3_19
33583478_33583716_4_15
Title: Comparing strings with if else 
----------------------------------------

int main (void) {
    char key [5] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf ("%5s", ckey);
    size_t i = 0;
    while (i < sizeof (key) && key[i] == ckey[i])
        ++i;
    if (i == sizeof (key)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------

int main () {
    char key [] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf (" %5s", ckey);
    if (!strcmp (ckey, key)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33583478_33583572_3_19
33583478_33590685_16_28
Title: Comparing strings with if else 
----------------------------------------

int main (void) {
    char key [5] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf ("%5s", ckey);
    size_t i = 0;
    while (i < sizeof (key) && key[i] == ckey[i])
        ++i;
    if (i == sizeof (key)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char key [6] = "april", ckey [6];
    printf ("Enter the key: ");
    fgets (ckey, sizeof ckey, stdin);
    if (!compare (key, ckey)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33583478_33583716_4_15
33583478_33590685_16_28
Title: Comparing strings with if else 
----------------------------------------

int main () {
    char key [] = "april", ckey [6];
    printf ("Enter the key: ");
    scanf (" %5s", ckey);
    if (!strcmp (ckey, key)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char key [6] = "april", ckey [6];
    printf ("Enter the key: ");
    fgets (ckey, sizeof ckey, stdin);
    if (!compare (key, ckey)) {
        printf ("Correct.");
    }
    else {
        printf ("Wrong.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33594098_33594402_4_37
33594098_33594823_24_60
Title: Printing 60 characters per line 
----------------------------------------

int main (void) {
    FILE *fp = NULL;
    char file_name [257] = {'\0'};
    char line [61] = {'\0'};
    char word [61] = {'\0'};
    int out = 0;
    printf ("Enter file name:\n");
    scanf (" %256[^\n]", file_name);
    if ((fp = fopen (file_name, "r")) == NULL) {
        printf ("could not open file\n");
        return 1;
    }
    while ((fscanf (fp, "%60s", word)) == 1) {
        if (strlen (line) + strlen (word) + 1 <= 60) {
            strcat (line, " ");
            strcat (line, word);
            out = 0;
        }
        else {
            printf ("%s\n", line);
            strcpy (line, word);
            out = 1;
        }
    }
    if (!out) {
        printf ("%s\n", line);
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main (void) {
    char ch, file_name [25];
    char buff [50];
    int pos = 0;
    FILE *fp;
    printf ("Enter file name: \n");
    gets (file_name);
    if (!(fp = fopen (file_name, "r"))) {
        perror ("This file does not exist\n");
        exit (EXIT_FAILURE);
    }
    int c, count;
    count = 0;
    while ((pos = readWord (fp, buff, &ch)) != EOF) {
        count += pos + (!!ch);
        if (count > 60) {
            printf ("\n");
            count = pos;
        }
        if (ch) {
            printf ("%s%c", buff, ch);
        }
        else {
            printf ("%s", buff);
        }
        if (!pos) {
            count = 0;
        }
    }
    putchar ('\n');
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3360904_3360928_1_13
3360904_3360966_1_11
Title: Linken list in Visual Studio 2010 problems 
----------------------------------------

LLIST *list_add (LLIST **p, int i) {
    LLIST *first;
    if (p == NULL)
        return NULL;
    first = malloc (sizeof (LLIST));
    if (first == NULL)
        return NULL;
    *p = first;
    first->value = i;
    return first;
}
----------------------------------------

LLIST *list_add (LLIST **p, int i) {
    if (p == NULL)
        return NULL;
    LLIST *first = (LLIST *) malloc (sizeof (LLIST));
    if (first == NULL)
        return NULL;
    *p = first;
    first->value = i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33621681_33621700_4_16
33621681_33634185_30_47
Title: How to check if user input is a float number in C? 
----------------------------------------

int main (void) {
    char buffer [100];
    double value;
    char *endptr;
    if (fgets (buffer, sizeof (buffer) stdin) == NULL)
        return -1;
    value = strtod (buffer, &endptr);
    if ((*endptr == '\0') || (isspace (*endptr) != 0))
        printf ("It's float: %f\n", value);
    else
        printf ("It's NOT float ...\n");
}
----------------------------------------

int main (void) {
    is_float_test ("123");
    is_float_test (" 123");
    is_float_test ("123.456\n");
    is_float_test ("123  ");
    is_float_test ("123e123");
    is_float_test ("123e456");
    is_float_test ("  123 xyz");
    is_float_test ("  abc");
    is_float_test (" ");
    is_float_test ("");
    char buffer [80];
    is_float_test (fgets (buffer, sizeof buffer, stdin));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33637896_33638058_1_17
33637896_33638090_1_19
Title: Copying strings of equal length to new string array 
----------------------------------------

void get_equal_length (char equal_length_dictionary [MAX_WORDS] [MAX_WORD_LENGTH], char dictionary [MAX_WORDS] [MAX_WORD_LENGTH], Scanned_words words) {
    int i, word_count = 0, len = strlen (words.startword);
    for (i = 0; dictionary[i][0] != '\0'; i++) {
        if (strlen (dictionary[i]) == len) {
            strcpy (equal_length_dictionary [i], dictionary [i]);
            word_count++;
            printf ("Word #%d: %s\n", word_count, equal_length_dictionary [i]);
        }
    }
    equal_length_dictionary[i][0] = '\0';
    printf ("Equal length words: %d\n", word_count);
}
----------------------------------------

void get_equal_length (char equal_length_dictionary [MAX_WORDS] [MAX_WORD_LENGTH], char dictionary [MAX_WORDS] [MAX_WORD_LENGTH], Scanned_words words) {
    int i, word_count = 0;
    for (i = 0; i < MAX_WORDS; i++) {
        char *cur_word = dictionary[i];
        if (!cur_word || !*cur_word)
            break;
        if (strlen (cur_word) == strlen (words.startword)) {
            strcpy (equal_length_dictionary [word_count], cur_word);
            word_count++;
            printf ("Word #%d: %s\n", word_count, equal_length_dictionary [word_count]);
        }
    }
    printf ("Equal length words: %d\n", word_count);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33659326_33659806_13_22
33659326_48122649_13_22
Title: Printing Array In Reverse Order using Recursive function 
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    int a [n];
    for (i = 0; i < n; i++)
        scanf ("%d", &a[i]);
    PrintArray (a, n);
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    int a [n];
    for (i = 0; i < n; i++)
        scanf ("%d", &a[i]);
    PrintArray (a, n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33659326_33659806_2_12
33659326_48122649_2_12
Title: Printing Array In Reverse Order using Recursive function 
----------------------------------------

void PrintArray (int a [], int k) {
    int z;
    if (k > 0) {
        z = k - 1;
        printf ("%d ", a [z]);
        PrintArray (a, z);
    }
    return;
}
----------------------------------------

void PrintArray (int a [], int k) {
    int z;
    if (k > 0) {
        z = k - 1;
        printf ("%d ", a [z]);
        PrintArray (a, z);
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3366760_3366841_1_11
3366760_3366849_1_13
Title: Seg Fault in Knowledge Tree 
----------------------------------------

char *newStr (char *charBuffer) {
    int i;
    int length = strlen (charBuffer);
    char newStr;
    if (charBuffer[0] == 'A' || charBuffer[0] == 'Q') {
        for (i = 1; i < length; i++)
            newStr += charBuffer[i];
    }
    return (newStr + "\0");
}
----------------------------------------

char *newStr (char *charBuffer) {
    char *newStr;
    if (charBuffer[0] == 'A' || charBuffer[0] == 'Q') {
        newStr = strdup (&charBuffer[1]);
    }
    else {
        newStr = strdup ("");
    }
    if (newStr == NULL) {
    }
    return newStr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33685394_33685455_1_30
33685394_33685659_1_19
Title: Error when using malloc for a struct 
----------------------------------------

Node **ht_create (void) {
    Node **hashtable;
    if (htsize < 1) {
        printf ("Error: please enter adequate size for hashtable");
        return NULL;
    }
    hashtable = malloc (htsize * sizeof (Node *))
    if (hashtable == NULL) {
        printf ("Error: could not allocate memory for hashtable");
        return NULL;
    }
    for (int i = 0; i < htsize; i++) {
        hashtable[i] = malloc (sizeof (Node));
        if (hashtable[i] == NULL) {
            printf ("Error: could not allocate memory for hashtable");
            return NULL;
        }
    }
    return hashtable;
}
----------------------------------------

Node **ht_create (size_t htsize) {
    if (htsize < 1) {
        printf ("Error: please enter adequate size for hashtable");
        return NULL;
    }
    Node **hashtable = malloc (sizeof *hashtable * htsize);
    if (hashtable == NULL) {
        printf ("Error: could not allocate memory for hashtable");
        return NULL;
    }
    for (size_t i = 0; i < htsize; i++) {
        hashtable[i] = NULL;
    }
    return hashtable;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33705906_33706084_3_26
33705906_33706353_3_29
Title: Could not print the BMI table as per expectation 
----------------------------------------

int main (void) {
    int m;
    int h;
    printf ("%10s    ", "BMI");
    for (m = 50; m <= 105; m = m + 5) {
        printf ("%8dkg", m);
    }
    printf ("\n\n");
    for (h = 140; h <= 220; h += 5) {
        printf ("%8dcm    ", h);
        for (m = 50; m <= 105; m = m + 5) {
            double bmi = 10000.0 * m / (h * h);
            printf ("%10.2f", bmi);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    float kg;
    float m;
    float col;
    float bmi;
    float cm = 140.0;
    printf ("BMI    ");
    for (kg = 50; kg <= 105; kg = kg + 5) {
        printf ("%.0fkg  ", kg);
    }
    printf ("\n");
    for (m = 1.4; m <= 2.2; m = m + 0.05) {
        printf ("%.0fcm  ", cm);
        for (kg = 50; kg <= 105; kg = kg + 5) {
            bmi = kg / (m * m);
            printf ("%.1f  ", bmi);
        }
        cm += 5;
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33706724_33706963_23_40
33706724_33706989_1_25
Title: Counting and removing duplicates in an array c 
----------------------------------------

int main () {
    char a [] = {'2', '4', '6', '7', '7', '4', '4'};
    int i;
    for (i = 0; i < sizeof (a) / sizeof (char); i++) {
        my_set[a[i] - '0'].num++;
    }
    printf ("%-10s%-10s\n", "Value:", "Count:");
    for (i = 0; i < sizeof (my_set) / sizeof (TSet); i++) {
        if (my_set[i].num != 0) {
            printf ("%-10c%-10d\n", my_set [i].c, my_set [i].num);
        }
    }
}
----------------------------------------

int main () {
    int arr [] = {2, 4, 6, 7, 7, 4, 4};
    int size = (sizeof (arr) / sizeof (int));
    printf ("Value:\tCount\n");
    for (int i = 0; i < size; i++) {
        int count = 0, bl = 1;
        for (int j = i; j < size; j++) {
            if (arr[i] == arr[j]) {
                count++;
            }
        }
        for (int j = i - 1; j >= 0; j--) {
            if (arr[i] == arr[j]) {
                bl = 0;
            }
        }
        if (bl) {
            printf ("%d\t\t%d\n", arr [i], count);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33719586_33719691_1_24
33719586_33720700_1_28
Title: how to delete a node 
----------------------------------------

Stack *Delete_theNode (int the_node) {
    if (the_node == head->number) {
        Stack *temp = head;
        head = head->next;
        free (temp);
        return;
    }
    Stack *cur = head->next;
    Stack *prev = head;
    while (!cur && !prev) {
        if (the_node == cur->number) {
            Stack *tmp = cur;
            prev->next = cur->next;
            free (tmp);
            return;
        }
        prev = cur;
        cur = cur->next;
    }
}
----------------------------------------

Stack *Delete_theNode (int the_node) {
    if (head == NULL) {
        printf ("empty stack..");
    }
    else {
        if ((head != NULL) && (head->number != the_node)) {
            Stack *deletedNode = Delete_Node ();
            Delete_theNode (the_node);
            Add_toStack (deletedNode);
        }
        else if (head->number == the_node) {
            Delete_Node ();
        }
        else {
            printf ("\n%d there is no such a node\n", the_node);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33720296_33720771_1_18
33720296_33857013_1_12
Title: Queue in circular linked list 
----------------------------------------

void queue_push (queue *q, int value) {
    Node *n = (Node *) malloc (sizeof (Node));
    n->val = value;
    n->prev = NULL;
    if (q->head == NULL && q->tail == NULL) {
        n->next = NULL;
        q -> head = n q -> tail = n;
    }
    else {
        n->next = q->head;
        n->head->prev = n;
        q->head = n;
    }
}
----------------------------------------

void queue_push (struct queue **q, void *p) {
    struct queue *tmp = malloc (sizeof (struct queue));
    tmp->val = p;
    if (*q) {
        tmp->next = (*q)->next;
        (*q)->next = tmp;
    }
    else
        tmp->next = tmp;
    *q = tmp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33722494_33722669_2_16
33722494_33722784_1_11
Title: Load Array Elements Using Function 
----------------------------------------

int LoadArray (int grade [], size_t gradeMaxCount) {
    int i = 0;
    while (1) {
        int tmp;
        if (i >= gradeMaxCount || scanf ("%i", &tmp) != 1 || tmp == -1)
            break;
        grade[i++] = tmp;
    }
    return i;
}
----------------------------------------

int LoadArray (int grade []) {
    int i = 0;
    for (int j = 0; j < 200; j++) {
        if ((scanf ("%d", grade +j) == -1) || (grade[j] == -1))
            break;
        i++;
    }
    return i;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33728097_33730762_4_22
33728097_33744933_7_21
Title: Access the next word/string 
----------------------------------------

int main (void) {
    char str [] = "The quick brown fox";
    char *token = strtok (str, " ");
    if (token != NULL) {
        printf ("%s\n", token);
        if (strcmp (token, "The") == 0) {
            printf ("%s\n", strtok (NULL, " "));
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char str [] = "The quick brown fox";
    char last [MAXW] = {0};
    char *p;
    for (p = strtok (str, " "); p; p = strtok (NULL, " ")) {
        if (*last && strcmp (last, "The") == 0)
            printf (" '%s'\n", p);
        strncpy (last, p, MAXW);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33732283_33732709_6_48
33732283_33732731_2_26
Title: "read data and reformat it seperate by newline" 
----------------------------------------

int main (void) {
    double num;
    FILE *fp, *fp_newFT;
    char lineBuf [MAX_LINE_LENGTH];
    if (!(fp = fopen ("data.txt", "r"))) {
    }
    if (!(fp_newFT = fopen ("data-newFT.txt", "w"))) {
    }
    while (fgets (lineBuf, sizeof (lineBuf), fp)) {
        char *tok = strtok (lineBuf, " ");
        while (tok != NULL) {
            if (!sscanf (tok, "%lf", &num)) {
            }
            fprintf (fp_newFT, "%.8f\t", num);
            tok = strtok (NULL, " ");
        }
        fprintf (fp_newFT, "\n");
    }
    fclose (fp);
    fclose (fp_newFT);
    return 0;
}
----------------------------------------

int main (void) {
    double num;
    FILE *fp, *fp_newFT;
    int index = 0;
    fp = fopen ("data.txt", "r");
    fp_newFT = fopen ("data-newFT.txt", "w");
    while (fscanf (fp, "%lf", &num) == 1) {
        fprintf (fp_newFT, "%-14lf\t", num);
        index++;
        if (!(index % 4)) {
            fprintf (fp_newFT, "\n");
        }
    }
    fclose (fp);
    fclose (fp_newFT);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33737803_33739626_5_21
33737803_33741167_6_25
Title: How to compare multibyte characters in C 
----------------------------------------

int main () {
    wchar_t *text = L "öçşğü";
    int i = 0;
    while (text[i]) {
        if (text[i] == L'ö') {
            wprintf (L "ö \n");
        }
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    char *text = "öçşğü";
    int i = 0, char_len;
    setlocale (LC_CTYPE, "en_US.utf8");
    while ((char_len = mblen (&text[i], MB_CUR_MAX)) > 0) {
        if (memcmp (&text[i], "ö", char_len) == 0) {
            printf ("ö \n");
        }
        i += char_len;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33737803_33739626_5_21
33737803_33745171_46_71
Title: How to compare multibyte characters in C 
----------------------------------------

int main () {
    wchar_t *text = L "öçşğü";
    int i = 0;
    while (text[i]) {
        if (text[i] == L'ö') {
            wprintf (L "ö \n");
        }
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *rhs;
    codepoint_t *lhs;
    rhs = inpbuf;
    lhs = outbuf;
    for (; *rhs != 0; ++lhs) {
        lhs->code = 0;
        if ((*rhs & 0x80) == 0)
            lhs->utf8[0] = *rhs++;
        else
            rhs = unidecode (lhs, rhs);
    }
    lhs->code = 0;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33737803_33741167_6_25
33737803_33745171_46_71
Title: How to compare multibyte characters in C 
----------------------------------------

int main () {
    char *text = "öçşğü";
    int i = 0, char_len;
    setlocale (LC_CTYPE, "en_US.utf8");
    while ((char_len = mblen (&text[i], MB_CUR_MAX)) > 0) {
        if (memcmp (&text[i], "ö", char_len) == 0) {
            printf ("ö \n");
        }
        i += char_len;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *rhs;
    codepoint_t *lhs;
    rhs = inpbuf;
    lhs = outbuf;
    for (; *rhs != 0; ++lhs) {
        lhs->code = 0;
        if ((*rhs & 0x80) == 0)
            lhs->utf8[0] = *rhs++;
        else
            rhs = unidecode (lhs, rhs);
    }
    lhs->code = 0;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33747945_33749565_5_40
33747945_33753186_7_59
Title: Count the number of equal words in a txt file 
----------------------------------------

int main () {
    char word [100], oriword [100];
    int count = 0;
    FILE *file;
    file = fopen ("hello.txt", "r");
    if (file == NULL) {
        printf ("Error\n");
        exit (0);
    }
    printf ("Write a word.\n");
    scanf ("%s", word);
    printf ("Got %s\n", word);
    while (fscanf (file, "%s", oriword) != EOF) {
        if (strcmp (word, oriword)) {
            count = count + 1;
            printf ("Match of %s so far %d have been found\n", word, count);
        }
        printf ("Found %s\n", oriword);
    }
    printf ("That word appears %d times\n", count);
    fclose (file);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char read [MAXW] [MAXC] = {{0}};
    char word [MAXC] = {0};
    size_t seen [MAXW] = {0};
    size_t i, idx = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    if (fscanf (fp, " %32[^ ,.\n]%*c", word) == 1) {
        strcpy (read [idx], word);
        seen[idx]++;
        idx++;
    }
    else {
        fprintf (stderr, "error: file read error.\n");
        return 1;
    }
    while (fscanf (fp, " %32[^ ,.\n]%*c", word) == 1) {
        for (i = 0; i < idx; i++) {
            if (strcmp (read[i], word) == 0) {
                seen[i]++;
                goto present;
            }
        }
        strcpy (read [idx], word);
        seen[idx]++;
        idx++;
    present :
        if (idx == MAXW) {
            fprintf (stderr, "warning: MAXW words exceeded.\n");
            break;
        }
    }
    if (fp != stdin)
        fclose (fp);
    printf ("\nthe occurrence of words are:\n\n");
    for (i = 0; i < idx; i++)
        printf ("  %-28s : %zu\n", read[i], seen[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33770018_33770162_1_10
33770018_33770204_31_41
Title: a function that properly populates members of a struct 
----------------------------------------

int main () {
    const int numitems = 100;
    set *item = calloc (numitems, sizeof (set));
    set *ritem = item;
    ext (& item, 0);
    ext (& item, 1);
    itr8 (ritem, item);
    free (ritem);
    return 0;
}
----------------------------------------

int main (void) {
    const int numitems = 100;
    set *item = calloc (1, sizeof (set) * numitems);
    set *ritem = item;
    ext (& item, 0);
    ext (& item, 1);
    item = ritem;
    itr8 (& item);
    free (ritem);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33770606_33773813_1_18
33770606_33776338_3_19
Title: How to check if scanf() worked fine in C? 
----------------------------------------

int main (void) {
    int num1, num2;
    char str, c;
    int check;
    printf ("Enter : ");
    check = scanf ("%d,%d, %c", &num1, &num2, &str);
    while (check != 3) {
        while ((c = getchar ()) != '\n' && c != EOF)
            ;
        printf ("Enter : ");
        check = scanf ("%d,%d, %c", &num1, &num2, &str);
    }
}
----------------------------------------

int main (void) {
    int num1, num2, c;
    char str;
    while (printf ("\nEnter : ") && scanf (" %d, %d, %c%*c", &num1, &num2, &str) != 3) {
        printf ("error: invalid input, required: 'int, int, char'\n");
        while ((c = getchar ()) != '\n' && c != EOF) {
        }
    }
    printf ("\n num1 : %d\n num2 : %d\n str  : %c\n\n", num1, num2, str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33790401_33790765_5_19
33790401_33790893_3_19
Title: Writing a C Program to Delete Space Between Strings 
----------------------------------------

int main (void) {
    char str [11] = "I love you", str2;
    char *src, *dst;
    for (src = dst = str; *src != '\0'; src++) {
        *dst = *src;
        if (*dst != ' ')
            dst++;
    }
    *dst = '\0';
    printf ("%s", str);
    return 0;
}
----------------------------------------

int main (void) {
    char str [] = "I love you";
    size_t i = 0;
    while (str[i] && str[i] != ' ')
        i++;
    size_t j = i;
    while (str[i]) {
        if (str[++i] != ' ')
            str[j++] = str[i];
    }
    puts (str);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33791339_33791762_13_26
33791339_33792000_6_25
Title: On linux in C how to generate file of size X? 
----------------------------------------

int main (int argc, char **argv) {
    char buf [1000];
    memset (buf, 'A', sizeof (buf));
    int fd;
    if ((fd = open (argv[1], O_WRONLY | O_CREAT, 0666)) < 0) {
        perror (argv [1]);
        exit (EX_NOPERM);
    }
    ssize_t left = writen (fd, buf, sizeof (buf));
    if (left)
        perror ("write error\n");
    return !!left;
}
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fdest;
    char ch = '\n';
    if (argc != 2)
        exit (EXIT_FAILURE);
    fdest = fopen (argv[1], "wb");
    if (fdest == NULL)
        exit (EXIT_FAILURE);
    fseek (fdest, SIZE_OF_FILE - 1, SEEK_CUR);
    fwrite (& ch, sizeof (char), 1, fdest);
    fclose (fdest);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33792754_33792776_7_30
33792754_33793397_3_13
Title: In C on linux how would you implement cp 
----------------------------------------

int main (int argc, char **argv) {
    char buffer [1024];
    int files [2];
    ssize_t count;
    if (argc < 3)
        return -1;
    files[0] = open (argv[1], O_RDONLY);
    if (files[0] == -1)
        return -1;
    files[1] = open (argv[2], O_WRONLY | O_CREAT | S_IRUSR | S_IWUSR);
    if (files[1] == -1) {
        close (files [0]);
        return -1;
    }
    while ((count = read (files[0], buffer, sizeof (buffer))) != 0)
        write (files[1], buffer, count);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char *fn1 = argv[1];
    char *fn2 = argv[2];
    if (cpy (fn2, fn1) == -1) {
        perror ("cpy");
        return 1;
    }
    reurn 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33796210_33796798_1_14
33796210_33796961_48_68
Title: Passing a two dimensional array by reference in C 
----------------------------------------

void averageGradeOfStudents (int M, int N, float p [], float x [] [N]) {
    for (int row = 0; row < M; row++) {
        p[row] = 0;
        for (int col = 0; col < N; col++) {
            p[row] += x[row][col];
        }
        p[row] /= N;
    }
    for (int row = 0; row < M; row++) {
        printf ("The average grade of student%d is: %.2f\n\n", row, p [row]);
    }
}
----------------------------------------

void averageGradeOfStudents (int M, int N, float p [], float (*xPtr) [quizzes]) {
    float grade [M];
    for (int i = 0; i < M; i++)
        grade[i] = 0;
    for (int i = 0; i < M; i++) {
        for (int k = 0; k < N; k++) {
            grade[i] += xPtr[i][k];
        }
    }
    printf ("The average grades for the students are:\n\n");
    for (int k = 0; k < M; k++) {
        p[k] = grade[k] / N;
        printf ("  student[%3d] is: %6.2f\n", k, p [k]);
    }
    putchar ('\n');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33805425_33806921_4_26
33805425_33807845_5_17
Title: C program to find if a number is palindrome or not 
----------------------------------------

int main () {
    int i = 0, n, ok = 1;
    char buff [20];
    printf ("Enter an integer: ");
    scanf ("%d", & n);
    n = sprintf (buff, "%d", n);
    if (n < 2)
        return 0;
    i = n / 2;
    n--;
    while (i && ok) {
        i--;
        ok &= (buff[i] == buff[n - i]);
    }
    printf ("%s is %spalindrome\n", buff, ok ? "" : "not ");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int n, rn, tn;
    printf ("Enter an integer: ");
    scanf ("%d", & n);
    for (rn = 0, tn = n; tn; tn /= 10)
        rn = rn * 10 + tn % 10;
    if (rn == n)
        printf ("%d is palindrome\n", n);
    else
        printf ("%d is not palindrome\n", n);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33810628_33811429_1_23
33810628_33811828_1_11
Title: reverse print linked list 
----------------------------------------

void printListEnd () {
    struct node *end;
    if (list == NULL)
        printf ("\n\nLIST IS EMPTY\n\n");
    else {
        end = NULL;
        while (end != list) {
            tmpdisplay = list;
            while (tmpdisplay->next != end)
                tmpdisplay = tmpdisplay->next;
            printf ("\n%s\n", tmpdisplay -> customer_name);
            printf ("%d\n", tmpdisplay -> customer_number);
            printf ("%s\n", tmpdisplay -> gender_);
            printf ("%s\n", tmpdisplay -> order_description);
            printf ("%s\n", tmpdisplay -> customer_address);
            end = tmpdisplay;
        }
    }
}
----------------------------------------

void printListEnd (struct node *myList) {
    if (myList != NULL) {
        printListEnd (myList -> next);
        printf ("\n%s\n", myList -> customer_name);
        printf ("%d\n", myList -> customer_number);
        printf ("%s\n", myList -> gender_);
        printf ("%s\n", myList -> order_description);
        printf ("%s\n", myList -> customer_address);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33828016_33828108_1_15
33828016_33829237_1_35
Title: Range Search in BST 
----------------------------------------

int rangeSearch (struct treeNode *node, int leftBound, int rightBound) {
    int count = 0;
    if (node->item >= leftBound & node->item <= rightBound) {
        printf ("%d ", node -> item);
        count++;
    }
    if (node->left != 0 & node->item > leftBound)
        count += rangeSearch (node->left, leftBound, rightBound);
    if (node->right != 0 & node->item < rightBound)
        count += rangeSearch (node->right, leftBound, rightBound);
    return count;
}
----------------------------------------

int rangeSearch (struct treeNode *node, int leftBound, int rightBound) {
    if (node == 0) {
        return 0;
    }
    else {
        int countLeft = rangeSearch (node->left, leftBound, rightBound);
        int countRight = rangeSearch (node->right, leftBound, rightBound);
        if (node->item > leftBound && node->item < rightBound) {
            return 1 + countLeft + countRight;
        }
        else {
            return 0 + countLeft + countRight;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33841722_33841997_7_32
33841722_33842069_3_35
Title: Swap the 2nd character with the next-to-last 
----------------------------------------

int main (void) {
    size_t len;
    char str [MAXS] = {0};
    char word [MAXW] = {0};
    char *p = NULL;
    fgets (str, MAXS, stdin);
    for (p = strtok (str, " "); p; p = strtok (NULL, " \n")) {
        strncpy (word, p, MAXW - 1);
        if ((len = strlen (word)) > 3) {
            char tmp = word[1];
            word[1] = word[len - 2];
            word[len - 2] = tmp;
        }
        printf ("%s ", word);
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (void) {
    char s [] = "Alex Chiurtu";
    char t [sizeof (s)];
    size_t i = 0, j = 0;
    do {
        t[i] = s[i];
        if (s[i] != ' ' && s[i] != '\t' && s[i] != '\0') {
            ++j;
        }
        else if (j != 0) {
            if (j > 3) {
                char c = t[i - j + 1];
                t[i - j + 1] = t[i - 2];
                t[i - 2] = c;
            }
            j = 0;
        }
    }
    while (s[i++]);
    puts (s);
    puts (t);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33846623_33846758_1_29
33846623_33848604_12_30
Title: C programming: ouput two strings as two columns next to each other 
----------------------------------------

void display_columns (char *string1, char *string2) {
    int i, j;
    int len1 = strlen (string1);
    int len2 = strlen (string2);
    int maxlen = (len1 > len2) ? len1 : len2;
    int numloops = (maxlen + 20 - 1) / 20;
    for (i = 0; i < numloops; i++) {
        for (j = 0 + 20 * i; j < 20 + 20 * i; j++) {
            if (j < len1)
                putchar (string1[j]);
            else
                putchar (' ');
        }
        printf ("\t");
        for (j = 0 + 20 * i; j < 20 + 20 * i; j++) {
            if (j < len2)
                putchar (string2[j]);
            else
                break;
        }
        putchar ('\n');
    }
}
----------------------------------------

void display_columns (char *string1, char *string2) {
    int counter = 0, counter2 = 0;
    while (1) {
        print_line (string1, & counter);
        printf ("\t");
        print_line (string2, & counter2);
        printf ("\n");
        if (string1[counter] == '\0' && string2[counter2] == '\0') {
            break;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33849932_33850162_1_28
33849932_33850342_12_44
Title: Doubly Linked List Insertion With Recursion in C 
----------------------------------------

void insert (node **head, node *cur, node *p) {
    if (*head == NULL) {
        p->next = p->prev = NULL;
        *head = p;
        return;
    }
    if (p->value < cur->value) {
        p->prev = cur->prev;
        p->next = cur;
        cur->prev = p;
        if (cur->prev != NULL)
            cur->prev->next = p;
        else
            *head = p;
        return;
    }
    if (cur->next == NULL) {
        cur->next = p;
        p->next = NULL;
        p->prev = cur;
    }
    else
        insert (head, cur->next, p);
}
----------------------------------------

void insert (node **current, int value) {
    if (*current == NULL || value < (*current)->value) {
        node *tmp = malloc (sizeof (node));
        tmp->value = value;
        tmp->next = *current;
        if (*current != NULL) {
            tmp->prev = (*current)->prev;
            (*current)->prev = tmp;
        }
        else {
            tmp->prev = NULL;
        }
        *current = tmp;
    }
    else if ((*current)->next == NULL) {
        node *tmp = malloc (sizeof (node));
        tmp->value = value;
        tmp->next = (*current)->next;
        tmp->prev = *current;
        (*current)->next = tmp;
    }
    else {
        insert (& (* current) -> next, value);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33861464_33861559_1_20
33861464_33861577_6_26
Title: fprintf in do while loop wrote only one line in file C 
----------------------------------------

void foo () {
    int ID;
    char answer;
    FILE *input = fopen ("Dane.txt", "w");
    do {
        printf ("Give ID: ");
        scanf ("%d", & ID);
        fprintf (input, "%d\n", ID);
        printf ("Exit? y/n ");
        scanf (" %c", & answer);
        fflush (NULL);
    }
    while (answer == 'n');
    fclose (input);
}
----------------------------------------

void foo () {
    int ID;
    char answer [4];
    FILE *output = fopen ("Dane.txt", "w");
    if (output == NULL)
        return;
    do {
        printf ("Give ID: ");
        if (scanf ("%d", &ID) != 1)
            break;
        fprintf (output, "%d\n", ID);
        printf ("Exit? y/n ");
        if (scanf ("%3s", answer) != 1)
            break;
        fflush (NULL);
    }
    while (answer[0] != 'y');
    fclose (output);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33888880_33889714_1_13
33888880_33889783_1_20
Title: Modified N-Queens in C 
----------------------------------------

int place (int row, int column) {
    int i;
    if (row > 1 && abs (column -board[row - 1]) == 2)
        return 0;
    if (row > 2 && abs (column -board[row - 2]) == 1)
        return 0;
    for (i = 1; i < row; ++i) {
        if (board[i] == column)
            return 0;
    }
    return 1;
}
----------------------------------------

int place (int row, int column) {
    int i;
    for (i = 1; i <= row - 1; ++i) {
        if (board[i] == column) {
            return 0;
        }
        if (abs (board[i] - column) + abs (row -i) == 3) {
            return 0;
        }
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33901207_33901412_22_41
33901207_33902138_4_20
Title: Remove even numbers from array in c 
----------------------------------------

int main (void) {
    int *a = malloc (N * sizeof (int));
    for (size_t i = 0; i < N; i++)
        a[i] = i;
    for (size_t i = 0; i < N; i++)
        printf ("%d ", a[i]);
    printf ("\n");
    size_t m = remove_even (a, N);
    int *tmp = realloc (a, m * sizeof (int));
    if (tmp != NULL)
        a = tmp;
    for (size_t i = 0; i < m; i++)
        printf ("%d ", a[i]);
    printf ("\n");
    free (a);
}
----------------------------------------

int main (void) {
    int n;
    printf ("Enter an integer:>  ");
    if ((scanf ("%d", &n)) != 1) {
        printf ("Error, Fix it!\n");
        exit (1);
    }
    if (n % 2 == 0) {
        printf ("Even\n");
    }
    else {
        printf ("Odd\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33908935_33909115_3_15
33908935_33909184_4_19
Title: find the prime numbers in C 
----------------------------------------

int main (void) {
    int i, j, f;
    for (i = 11; i < MAXNUMB; i += 2) {
        for (j = 2, f = 1; f && j * j < i; ++j) {
            f = (i % j != 0);
        }
        if (f)
            printf ("%d\n", i);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i, j, P [MAXNUMB];
    memset (P, 0, sizeof (P));
    for (i = 2; i < MAXNUMB; ++i) {
        if (P[i] == 0) {
            printf ("%d\n", i);
            if (i < MAXNUMB / i)
                for (j = i * i; j < MAXNUMB; j += i)
                    P[j] = 1;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33916595_33917592_3_27
33916595_33917894_8_34
Title: C programming language 
----------------------------------------

int main () {
    int i, j, sum = 0, marks [3] [5];
    float avg;
    printf ("Program to compute average marks of 3 students.\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 5; j++) {
            printf ("Enter marks for student %d in subject %d:\t", i + 1, j + 1);
            scanf ("%d", & marks [i] [j]);
        }
    }
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 5; j++) {
            sum = sum + marks[i][j];
        }
        avg = sum / 5.0;
        printf ("The average marks of student %d is %f:\n", i + 1, avg);
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j, sum, marks [3] [5], count;
    float avg;
    printf ("Program to compute average marks of 3 students.\n");
    for (i = 0; i < LEN (marks); i++) {
        for (j = 0; j < LEN (marks[0]); j++) {
            printf ("Enter marks for student %d in subject %d:\t", i + 1, j + 1);
            count = scanf ("%d", &marks[i][j]);
            if (count != 1) {
                fprintf (stderr, "invalid input\n");
                exit (EXIT_FAILURE);
            }
        }
    }
    for (i = 0; i < LEN (marks); i++) {
        sum = 0;
        for (j = 0; j < LEN (marks[0]); j++) {
            sum = sum + marks[i][j];
        }
        avg = ((float) sum) / ((float) LEN (marks[0]));
        printf ("The average marks of student %d is %f:\n", i + 1, avg);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33928227_33928645_1_17
33928227_33928796_5_16
Title: Return a string made with a line read from input 
----------------------------------------

char *getLine (void) {
    int ch;
    int size = 100;
    size_t pos = 0;
    char *result = malloc (size * sizeof (char *));
    while ((ch = getchar ()) != EOF) {
        *result++ = ch;
        if (++pos >= size) {
            realloc (result, size += 100);
            if (!result)
                exit (1);
        }
        if (c == '\n')
            break;
    }
    *result = '\0';
    return result - pos;
}
----------------------------------------

char *getLine (char *s, int max) {
    int i = 0, c = 0;
    char *p = s;
    while (i + 1 < max && (c = getchar ()) != '\n' && c != EOF) {
        *p++ = c;
        i++;
    }
    *p = 0;
    return s;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33929282_33930025_1_25
33929282_33930255_1_12
Title: Find spaces and alphanumeric characters in a string 
----------------------------------------

int Validate_Alphanumeric (char str []) {
    int i;
    int res;
    int valid = 0;
    int invalid = 0;
    const char *p = str;
    while (*p) {
        if (isalnum ((unsigned char) *p) || *p == ' ') {
            valid++;
        }
        else {
            invalid++;
        }
        p++;
    }
    if (invalid == 0)
        res = 1;
    else
        res = 0;
    return res;
}
----------------------------------------

int Validate_Alphanumeric (char *str) {
    unsigned char *ptr = (unsigned char *) str;
    unsigned char uc;
    while ((uc = *ptr++) != '\0') {
        if (!isalnum (uc) && uc != ' ')
            return 0;
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33937867_33938276_4_35
33937867_33941581_6_32
Title: Implement a sum formula in C 
----------------------------------------

int main () {
    int n, t, k, c, i, s, power, j;
    do {
        printf ("Enter n = ");
        scanf ("%d", & n);
    }
    while (n < 1);
    t = n;
    k = 0;
    while (t > 0) {
        t = t / 10;
        k++;
    }
    t = n;
    s = 0;
    for (i = 1; i <= k; i++) {
        c = 9 - (t % 10);
        power = 1;
        for (j = 1; j <= i; j++)
            power = c * power;
        s = s + power;
        t = t / 10;
    }
    if (s == n)
        printf ("The number fulfills the equation");
    else
        printf ("The number doesn't fulfill the equation");
    return 0;
}
----------------------------------------

int main () {
    int n, c, t, t1, to_add, ans = 0, d, i;
    printf ("enter number: ");
    scanf ("%d", & n);
    t = t1 = n;
    d = num_digits (n);
    for (i = 1; i <= d; i++) {
        t = t1 % 10;
        c = 9 - t;
        to_add = pow (c, i);
        ans = ans + to_add;
        t1 = t1 / 10;
        printf ("%d\n", t1);
    }
    if (ans == n)
        printf ("condition fulfilled!\n");
    else
        printf ("condition not fulfilled");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33937867_33940148_5_35
33937867_33941581_6_32
Title: Implement a sum formula in C 
----------------------------------------

int main () {
    int n, t, k, c, i, s, power, j;
    do {
        printf ("Enter n = ");
        scanf ("%d", & n);
    }
    while (n < 1);
    t = n;
    k = 0;
    while (t > 0) {
        t = t / 10;
        k++;
    }
    t = n;
    s = 0;
    for (i = 1; i <= k; i++) {
        c = 9 - (t % 10);
        power = 1;
        power = pow (c, i);
        s = s + power;
        t = t / 10;
    }
    if (s == n)
        printf ("The number fulfills the equation");
    else
        printf ("The number doesn't fulfill the equation");
    return 0;
}
----------------------------------------

int main () {
    int n, c, t, t1, to_add, ans = 0, d, i;
    printf ("enter number: ");
    scanf ("%d", & n);
    t = t1 = n;
    d = num_digits (n);
    for (i = 1; i <= d; i++) {
        t = t1 % 10;
        c = 9 - t;
        to_add = pow (c, i);
        ans = ans + to_add;
        t1 = t1 / 10;
        printf ("%d\n", t1);
    }
    if (ans == n)
        printf ("condition fulfilled!\n");
    else
        printf ("condition not fulfilled");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33940070_33940579_46_60
33940070_33940604_7_21
Title: Unable to access the array i've created 
----------------------------------------

int main (void) {
    int **mine = 0;
    int r, c;
    initField (& mine, & r, & c);
    markMines (mine, r, c);
    for (r--; r >= 0; r--) {
        free (mine [r]);
    }
    free (mine);
    return 0;
}
----------------------------------------

int main (void) {
    int **mine = 0;
    int r, c;
    int i;
    initField (& mine, & r, & c);
    markMines (mine, r, c);
    for (i = 0; i < r; i++)
        free (mine[i]);
    free (mine);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33947947_33948545_5_42
33947947_46055274_2_49
Title: swapping odd and even numbers inside an Array in C 
----------------------------------------

int main (void) {
    int a [N] = {12, 23, 0, -7, 138, 22, 7, 99, 10, -2};
    int i, j;
    printf ("Array[%d] = { ", N);
    i = 0;
    do {
        printf ("%d", a [i]);
    }
    while (++i < N && printf (", "));
    printf (" };\n");
    i = 0;
    j = N;
    while (i != j) {
        if (a[i] % 2 == 0) {
            ++i;
        }
        else if (a[--j] % 2 == 0) {
            int tmp = a[j];
            a[j] = a[i];
            a[i] = tmp;
        }
    }
    printf ("Array[%d] = { ", N);
    i = 0;
    do {
        printf ("%d", a [i]);
    }
    while (++i < N && printf (", "));
    printf (" };\n");
    return 0;
}
----------------------------------------

int main () {
    int arr [10];
    int i, temp;
    printf ("Enter elements into arry\n");
    for (i = 0; i <= 9; i++) {
        printf ("Element #%d-->", i);
        scanf ("%d", & arr [i]);
    }
    for (i = 0; i <= 9; i = i + 2) {
        if ((arr[i] % 2) != 0) {
            if ((arr[i + 1] % 2) != 0) {
                arr[i] = arr[i];
                arr[i + 1] = arr[i + 1];
            }
            else if ((arr[i + 1] % 2) == 0) {
                temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
        else {
            if ((arr[i + 1] % 2) == 0) {
                arr[i] = arr[i];
                arr[i + 1] = arr[i + 1];
            }
            else if ((arr[i + 1] % 2) != 0) {
                temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
    }
    for (i = 0; i <= 9; i++) {
        printf ("Element #%d-->%d\n", i, arr [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33966043_33966966_41_60
33966043_33966966_5_36
Title: Dynamically Allocate 2D Array on Input 
----------------------------------------

int *realoc2d (int *arr, int old_x, int old_y, int new_x, int new_y) {
    int x, y, cx, cy;
    int *new_arr;
    new_arr = malloc (new_x *new_y * sizeof (int));
    if (!new_arr) {
    }
    cx = MIN (old_x, new_x);
    cy = MIN (old_y, new_y);
    for (x = 0; x < cy; x++)
        for (y = 0; y < cy; y++)
            new_arr[x + (y * new_y)] = arr[x + (y * old_y)];
    return new_arr;
}
----------------------------------------

int *realoc2d (int *arr, int old_x, int old_y, int new_x, int new_y) {
    int x, y, cx, cy;
    int old_size, new_size;
    int *new_arr = NULL, *sav_arr;
    old_size = (old_x * old_y * sizeof (int));
    new_size = (new_x * new_y * sizeof (int));
    sav_arr = malloc (old_size);
    if (!sav_arr) {
    }
    memcpy (sav_arr, arr, old_size);
    new_arr = realloc (arr, new_size);
    if (!new_arr) {
    }
    cx = MIN (old_x, new_x);
    cy = MIN (old_y, new_y);
    for (x = 0; x < cy; x++)
        for (y = 0; y < cy; y++)
            new_arr[x + (y * new_y)] = sav_arr[x + (y * old_y)];
    free (sav_arr);
    return new_arr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33970848_33971011_2_31
33970848_33972715_2_22
Title: Issue in detecting Armstrong Numbers 
----------------------------------------

int main () {
    int x [3], y, temp;
    int temp2 = 0;
    temp = y;
    printf ("Enter a supposed Armstrong number: ");
    scanf ("%d", & y);
    for (int j = 2; j >= 0; j--) {
        x[j] = temp % 10;
        temp = temp / 10;
    }
    for (int i = 0; i < 3; i++) {
        temp = x[i] * x[i] * x[i];
        temp2 = temp2 + temp;
    }
    if (temp2 == x) {
        printf ("This is an Armstrong number!");
    }
    else {
        printf ("This is not an Armstrong number!");
    }
}
----------------------------------------

int main () {
    int x [3], n, r, c, temp, i;
    int temp2 = 0;
    printf ("Enter a supposed Armstrong number: ");
    scanf ("%d", & n);
    c = n;
    for (i = 0; i < 3; i++) {
        x[i] = n % 10;
        n = n / 10;
        temp = x[i] * x[i] * x[i];
        temp2 = temp2 + temp;
    }
    if (temp2 == c) {
        printf ("This is an Armstrong number!");
    }
    else {
        printf ("This is not an Armstrong number!");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33970848_33971011_2_31
33970848_33973725_3_30
Title: Issue in detecting Armstrong Numbers 
----------------------------------------

int main () {
    int x [3], y, temp;
    int temp2 = 0;
    temp = y;
    printf ("Enter a supposed Armstrong number: ");
    scanf ("%d", & y);
    for (int j = 2; j >= 0; j--) {
        x[j] = temp % 10;
        temp = temp / 10;
    }
    for (int i = 0; i < 3; i++) {
        temp = x[i] * x[i] * x[i];
        temp2 = temp2 + temp;
    }
    if (temp2 == x) {
        printf ("This is an Armstrong number!");
    }
    else {
        printf ("This is not an Armstrong number!");
    }
}
----------------------------------------

int main () {
    int x, y, z, temp;
    int temp2 = 0;
    printf ("Enter a supposed Armstrong number: ");
    scanf ("%d", & x);
    z = x;
    for (int i = 0; i < 3; i++) {
        y = x % 10;
        temp = y * y * y;
        temp2 = temp2 + temp;
        x = x / 10;
    }
    if (temp2 == z) {
        printf ("This is an Armstrong number!");
    }
    else {
        printf ("This is not an Armstrong number!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33970848_33972715_2_22
33970848_33973725_3_30
Title: Issue in detecting Armstrong Numbers 
----------------------------------------

int main () {
    int x [3], n, r, c, temp, i;
    int temp2 = 0;
    printf ("Enter a supposed Armstrong number: ");
    scanf ("%d", & n);
    c = n;
    for (i = 0; i < 3; i++) {
        x[i] = n % 10;
        n = n / 10;
        temp = x[i] * x[i] * x[i];
        temp2 = temp2 + temp;
    }
    if (temp2 == c) {
        printf ("This is an Armstrong number!");
    }
    else {
        printf ("This is not an Armstrong number!");
    }
    return 0;
}
----------------------------------------

int main () {
    int x, y, z, temp;
    int temp2 = 0;
    printf ("Enter a supposed Armstrong number: ");
    scanf ("%d", & x);
    z = x;
    for (int i = 0; i < 3; i++) {
        y = x % 10;
        temp = y * y * y;
        temp2 = temp2 + temp;
        x = x / 10;
    }
    if (temp2 == z) {
        printf ("This is an Armstrong number!");
    }
    else {
        printf ("This is not an Armstrong number!");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33972616_33972876_1_28
33972616_33973057_1_15
Title: Deleting from a List in C 
----------------------------------------

void delete (Item client) {
    for (link current = head, previous = NULL; current != NULL;) {
        if (current->item == client) {
            link tmp = current;
            if (previous != NULL) {
                previous->next = current->next;
                current = current->next;
            }
            else {
                head = current->next;
                current = head;
            }
            free (tmp);
        }
        else {
            previous = current;
            current = current->next;
        }
    }
}
----------------------------------------

void delete (Item client) {
    link *l = &head;
    while (*l) {
        if ((*l)->client == client) {
            link r = *l;
            *l = (*l)->next;
            free (r);
        }
        else {
            l = &(*l)->next;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33974290_33974539_16_44
33974290_33974542_7_66
Title: "Reading in a text file in C separate lines into multiple variables" 
----------------------------------------

int main (int argc, char **args) {
    FILE *fil;
    char typeOf [4];
    int numPro, i;
    if ((fil = fopen ("myfile.txt", "rt")) == NULL)
        exit (1);
    if (fscanf (fil, "%4s", typeOf) != 1)
        exit (1);
    if (fscanf (fil, "%d", &numPro) != 1)
        exit (1);
    if (numPro > MAX)
        exit (1);
    for (i = 0; i < numPro; i++) {
        if (fscanf (fil, "%d%d%d%d", &structs[i].pNum, &structs[i].arTime, &structs[i].cpuBur, &structs[i].prio) != 4)
            exit (1);
    }
    fclose (fil);
    printf ("Type: %s\n", typeOf);
    printf ("Num: %d\n", numPro);
    for (i = 0; i < numPro; i++) {
        printf ("%d %d %d %d\n", structs [i].pNum, structs [i].arTime, structs [i].cpuBur, structs [i].prio);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    FILE *inputfile;
    if (argc < 2) {
        fprintf (stderr, "error: missing file name in the arguments\n");
        exit (EXIT_FAILURE);
    }
    inputfile = fopen (argv[1], "r");
    if (!inputfile) {
        perror ("myprogram");
        exit (EXIT_FAILURE);
    }
    char *line = NULL;
    size_t line_size = 0;
    if (!getline (&line, &line_size, inputfile)) {
        fprintf (stderr, "error: failed to read first line\n");
        exit (EXIT_FAILURE);
    }
    unsigned int size;
    if (sscanf (line, "%zd", &size) != 1) {
        fprintf (stderr, "error: first line has wrong format\n");
        exit (EXIT_FAILURE);
    }
    int matrix [size] [size];
    for (unsigned int i = 0; i < size; i++) {
        if (!getline (&line, &line_size, inputfile)) {
            fprintf (stderr, "error: input file has wrong format\n");
            exit (EXIT_FAILURE);
        }
        char *ptr = line;
        for (unsigned j = 0; j < size; j++) {
            matrix[i][j] = atoi (strtok (ptr, " "));
            ptr = NULL;
        }
    }
    free (line);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33974602_33975005_1_21
33974602_33975135_2_33
Title: Inverted number pyramid 
----------------------------------------

int triangle (int n) {
    int x, j, linhas, spaces, m;
    m = n;
    for (linhas = 0; linhas < n; linhas++) {
        for (spaces = 0; spaces < linhas; spaces++) {
            printf ("   ");
        }
        for (x = 0; x < m; x++) {
            printf (" %d ", (x + 1));
        }
        for (j = 0; j < (m - 1); j++) {
            printf (" %d ", ((m - 1) - j));
        }
        printf ("\n");
        m--;
    }
}
----------------------------------------

int triangle (int n) {
    int x, j, linhas, spaces;
    int orig_n = n;
    for (linhas = 0; linhas < n; linhas++) {
        do {
            for (spaces = 0; spaces < (orig_n - n) * 3; spaces++) {
                printf (" ");
            }
            for (x = 0; x < n; x++) {
                printf (" %d ", (x + 1));
            }
            for (j = 0; j < (n - 1); j++) {
                printf (" %d ", ((n - 1) - j));
            }
            printf ("\n");
            n--;
        }
        while (n > 0);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33976737_33976854_8_21
33976737_33977020_16_38
Title: Searching for string in char array of strings in C 
----------------------------------------

int main (int argc, const char *argv []) {
    char names [MAX_CLASS_SIZE] [MAX_NAME_SIZE + 1] = {"Julias Hoffman", "Dianne Conner", "Mitchell Cooper", "Johnnie Greene", "Johanna Mason", "Kevin Adkins", "Brandi Spencer", "Marian Tyler", "Chester Cross", "Martin Lawrence", "Jane Smith", "Sara Jones"};
    char specificName [] = "Brandi Spencer";
    int search (char names [] [MAX_NAME_SIZE + 1], char specificName []);
    for (int i = 0; i < MAX_CLASS_SIZE; i++) {
        if (strcmp (names[i], specificName) == 0) {
            printf ("Found %s", names [i]);
            return i;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    size_t length;
    char specificName [100];
    char *names [12] = {"Julias Hoffman", "Dianne Conner", "Mitchell Cooper", "Johnnie Greene", "Johanna Mason", "Kevin Adkins", "Brandi Spencer", "Marian Tyler", "Chester Cross", "Martin Lawrence", "Jane Smith", "Sara Jones"};
    length = sizeof names / sizeof *(names + 0);
    printf ("Type a name to be searched:> ");
    if (fgets (specificName, 100, stdin) == NULL) {
        printf ("Error!\n");
    }
    specificName[strcspn (specificName, "\n")] = 0;
    if ((search (names, specificName, length)) == 0) {
        printf ("Found %s", specificName);
    }
    else {
        printf ("There was no Record Found.\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33980213_33980288_4_17
33980213_33980344_1_10
Title: C - How to make function return a pointer? 
----------------------------------------

const int *arr_first_max (const int *a) {
    const int *k;
    int largest = 0;
    for (k = a; *k != '\0'; k++) {
        if (*k > largest) {
            largest = *k;
        }
    }
    for (k = a; *k != '\0'; k++) {
        if (*k == largest) {
            return k;
        }
    }
}
----------------------------------------

const int *arr_first_max (const int *a, size_t n) {
    const int *largest = a;
    while (n--) {
        if (*a > *largest)
            largest = a;
        a++;
    }
    printf ("%d\n", * largest);
    return largest;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33982694_33982761_1_12
33982694_33982817_1_14
Title: Check if string is already printed 
----------------------------------------

int isAdded (char *token) {
    int i = 0;
    while (temp[i] != NULL) {
        if (strcmp (temp[i], token) == 0) {
            return 1;
        }
        i++;
    }
    return - 1
}
----------------------------------------

int isAdded (char *token) {
    int i = 0, flag = 0;
    while (temp[i] != NULL) {
        if (strcmp (temp[i], token) == 0) {
            flag = 1;
            break;
        }
        i++;
    }
    if (flag == 1)
        return 1;
    else
        return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33985804_33986405_2_38
33985804_33986806_1_30
Title: Remove element in array / swapping values 
----------------------------------------

int main () {
    int size = 4;
    int size2D = 2;
    int numToFind [2] = {1, 1};
    int **a = (int **) malloc (sizeof (int *) * size);
    for (int i = 0; i < size; i++) {
        a[i] = (int *) malloc (sizeof (int) * size2D);
        a[i][0] = i;
        a[i][1] = i;
    }
    for (int i = 0; i < size; i++) {
        if (a[i][0] == numToFind[0] && a[i][1] == numToFind[1]) {
            memmove (& a [i], & a [i + 1], sizeof (int *) * (size - i));
            a = (int **) realloc (a, sizeof (int *) * (size - 1));
            size--;
        }
    }
    for (int i = 0; i < size; i++) {
        printf ("%d, %d\n", a [i] [0], a [i] [1]);
    }
    free (a);
    return 0;
}
----------------------------------------

int main () {
    int array [100], position, c, n;
    printf ("Enter number of elements in array\n");
    scanf ("%d", & n);
    printf ("Enter %d elements\n", n);
    for (c = 0; c < n; c++)
        scanf ("%d", &array[c]);
    printf ("Enter the location where you wish to delete element\n");
    scanf ("%d", & position);
    if (position >= n + 1)
        printf ("Deletion not possible.\n");
    else {
        for (c = position - 1; c < n - 1; c++)
            array[c] = array[c + 1];
        printf ("Resultant array is\n");
        for (c = 0; c < n - 1; c++)
            printf ("%d\n", array[c]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33985804_33986405_2_38
33985804_33988103_10_42
Title: Remove element in array / swapping values 
----------------------------------------

int main () {
    int size = 4;
    int size2D = 2;
    int numToFind [2] = {1, 1};
    int **a = (int **) malloc (sizeof (int *) * size);
    for (int i = 0; i < size; i++) {
        a[i] = (int *) malloc (sizeof (int) * size2D);
        a[i][0] = i;
        a[i][1] = i;
    }
    for (int i = 0; i < size; i++) {
        if (a[i][0] == numToFind[0] && a[i][1] == numToFind[1]) {
            memmove (& a [i], & a [i + 1], sizeof (int *) * (size - i));
            a = (int **) realloc (a, sizeof (int *) * (size - 1));
            size--;
        }
    }
    for (int i = 0; i < size; i++) {
        printf ("%d, %d\n", a [i] [0], a [i] [1]);
    }
    free (a);
    return 0;
}
----------------------------------------

int main (void) {
    int rows = 4;
    int **arr = malloc (rows * sizeof (*arr));
    for (int r = 0; r < rows; ++r) {
        arr[r] = malloc (COLS * sizeof (**arr));
    }
    memcpy (arr [0], (int [COLS]) {5, 5}, sizeof (int [COLS]));
    memcpy (arr [1], (int [COLS]) {6, 6}, sizeof (int [COLS]));
    memcpy (arr [2], (int [COLS]) {1, 2}, sizeof (int [COLS]));
    memcpy (arr [3], (int [COLS]) {7, 7}, sizeof (int [COLS]));
    print (arr, rows);
    for (int r = 0; r < rows; ++r) {
        if (!memcmp (arr[r], (int [COLS]) {1, 2}, sizeof (int [COLS]))) {
            free (arr [r]);
            memmove (& arr [r], & arr [r + 1], (rows - (r + 1)) * sizeof (* arr));
            --rows;
            break;
        }
    }
    print (arr, rows);
    swap_row (& arr [0], & arr [2]);
    print (arr, rows);
    for (int r = 0; r < rows; ++r)
        free (arr[r]);
    free (arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
33985804_33986806_1_30
33985804_33988103_10_42
Title: Remove element in array / swapping values 
----------------------------------------

int main () {
    int array [100], position, c, n;
    printf ("Enter number of elements in array\n");
    scanf ("%d", & n);
    printf ("Enter %d elements\n", n);
    for (c = 0; c < n; c++)
        scanf ("%d", &array[c]);
    printf ("Enter the location where you wish to delete element\n");
    scanf ("%d", & position);
    if (position >= n + 1)
        printf ("Deletion not possible.\n");
    else {
        for (c = position - 1; c < n - 1; c++)
            array[c] = array[c + 1];
        printf ("Resultant array is\n");
        for (c = 0; c < n - 1; c++)
            printf ("%d\n", array[c]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int rows = 4;
    int **arr = malloc (rows * sizeof (*arr));
    for (int r = 0; r < rows; ++r) {
        arr[r] = malloc (COLS * sizeof (**arr));
    }
    memcpy (arr [0], (int [COLS]) {5, 5}, sizeof (int [COLS]));
    memcpy (arr [1], (int [COLS]) {6, 6}, sizeof (int [COLS]));
    memcpy (arr [2], (int [COLS]) {1, 2}, sizeof (int [COLS]));
    memcpy (arr [3], (int [COLS]) {7, 7}, sizeof (int [COLS]));
    print (arr, rows);
    for (int r = 0; r < rows; ++r) {
        if (!memcmp (arr[r], (int [COLS]) {1, 2}, sizeof (int [COLS]))) {
            free (arr [r]);
            memmove (& arr [r], & arr [r + 1], (rows - (r + 1)) * sizeof (* arr));
            --rows;
            break;
        }
    }
    print (arr, rows);
    swap_row (& arr [0], & arr [2]);
    print (arr, rows);
    for (int r = 0; r < rows; ++r)
        free (arr[r]);
    free (arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3401138_3401368_6_31
3401138_3401555_25_44
Title: Permutation of char array In C 
----------------------------------------

int main (void) {
    int i, j;
    x[0] = -1;
    unsigned mask = -1;
    for (i = 0;;) {
        for (j = x[i] + 1; j < N; j++) {
            if ((mask >> j) & 1) {
                x[i] = j;
                mask ^= (1 << x[i]);
                if (++i >= N) {
                    for (j = 0; j < N; j++)
                        printf ("%3i", x[j]);
                    printf ("\n");
                }
                else
                    x[i] = -1;
                break;
            }
        }
        if ((j >= N) || (i >= N)) {
            if (--i < 0)
                break;
            mask ^= (1 << x[i]);
        }
    }
}
----------------------------------------

int main (int argc, char **argv) {
    const char *allStrings [8] = {"0", "1", "2", "3", "4", "5", "6", "7"};
    static const char *allPermutations [322560];
    const char *permBuffer [8];
    unsigned long nextOutputIdx = 0;
    CalculatePermutations (8, allStrings, permBuffer, 0, allPermutations, & nextOutputIdx);
    for (unsigned long i = 0; i < 322560; ++i) {
        printf ("%s", allPermutations [i]);
        if (i % 8 == 7) {
            printf ("\n");
        }
        else {
            printf (", ");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3401138_3401368_6_31
3401138_3407870_19_39
Title: Permutation of char array In C 
----------------------------------------

int main (void) {
    int i, j;
    x[0] = -1;
    unsigned mask = -1;
    for (i = 0;;) {
        for (j = x[i] + 1; j < N; j++) {
            if ((mask >> j) & 1) {
                x[i] = j;
                mask ^= (1 << x[i]);
                if (++i >= N) {
                    for (j = 0; j < N; j++)
                        printf ("%3i", x[j]);
                    printf ("\n");
                }
                else
                    x[i] = -1;
                break;
            }
        }
        if ((j >= N) || (i >= N)) {
            if (--i < 0)
                break;
            mask ^= (1 << x[i]);
        }
    }
}
----------------------------------------

int main (void) {
    uint32_t f [NPER + 1];
    uint32_t p [NPER];
    uint32_t r, s;
    fact (NPER, f);
    for (r = 0; r < f[NPER]; r++) {
        perm (r, NPER, f, p);
        for (s = 0; s < NPER; s++)
            printf ("%s, ", DukeQuote[p[s]]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
3401138_3401555_25_44
3401138_3407870_19_39
Title: Permutation of char array In C 
----------------------------------------

int main (int argc, char **argv) {
    const char *allStrings [8] = {"0", "1", "2", "3", "4", "5", "6", "7"};
    static const char *allPermutations [322560];
    const char *permBuffer [8];
    unsigned long nextOutputIdx = 0;
    CalculatePermutations (8, allStrings, permBuffer, 0, allPermutations, & nextOutputIdx);
    for (unsigned long i = 0; i < 322560; ++i) {
        printf ("%s", allPermutations [i]);
        if (i % 8 == 7) {
            printf ("\n");
        }
        else {
            printf (", ");
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    uint32_t f [NPER + 1];
    uint32_t p [NPER];
    uint32_t r, s;
    fact (NPER, f);
    for (r = 0; r < f[NPER]; r++) {
        perm (r, NPER, f, p);
        for (s = 0; s < NPER; s++)
            printf ("%s, ", DukeQuote[p[s]]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34013585_34013716_1_19
34013585_34014162_1_19
Title: How to copy a character from one string to a different string? 
----------------------------------------

void sumNumbersInString (char j [100]) {
    int count = 0;
    char list [100] = {0};
    int i;
    for (i = 0; i < 100; i++) {
        if (j[i] == '0' || j[i] == '1' || j[i] == '2' || j[i] == '3' || j[i] == '4' || j[i] == '5' || j[i] == '6' || j[i] == '7' || j[i] == '8' || j[i] == '9') {
            list[count] = j[i];
            count++;
            printf ("%c\n", j [i]);
        }
    }
    printf ("Count = %d\n", count);
    printf ("Final String: %s\n", list);
}
----------------------------------------

void sumNumbersInString (char j [100]) {
    int count = 0;
    char list [100] = {0,};
    int i, idx;
    for (i = 0, idx = 0; i < 100; i++) {
        if (j[i] >= '0' && j[i] <= '9') {
            count++;
        }
        else {
            list[idx] = j[i];
            idx++;
        }
    }
    printf ("Count = %d\n", count);
    printf ("Final String: %s\n", list);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34018328_34018976_7_20
34018328_34019539_5_37
Title: Program in C that checks a number's digit subsequences 
----------------------------------------

int main (void) {
    int theNumber = 879;
    int base = 10;
    int n, sub_n;
    do {
        for (n = theNumber; n >= base / 10; n /= 10) {
            sub_n = n % base;
            isPrime (sub_n);
        }
        base *= 10;
    }
    while (sub_n != theNumber);
    return 0;
}
----------------------------------------

int main (void) {
    int i, num = NUM, x, y, mask, digits = 0, max = 1;
    while (num != 0) {
        num /= 10;
        digits++;
    }
    for (i = 1; i <= digits; i++) {
        max *= 2;
    }
    printf ("Subsequences are:\n");
    for (i = 1; i < max - 1; i++) {
        mask = i;
        x = 1;
        num = NUM;
        y = 0;
        while (num != 0) {
            if (mask % 2 == 1) {
                y += num % 10 * x;
                x *= 10;
            }
            num /= 10;
            mask /= 2;
        }
        printf ("%d \n", y);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34035169_34036630_1_21
34035169_46292151_4_16
Title: Fastest way to reverse a string in C 
----------------------------------------

int main () {
    char str [100], temp;
    int i, j = 0;
    printf ("\nEnter the string :");
    gets (str);
    i = 0;
    j = strlen (str) - 1;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
    printf ("\nReverse string is :%s", str);
    return (0);
}
----------------------------------------

int main () {
    char str [30], str1 [30];
    printf ("Enter string :");
    scanf ("%s", str);
    int i = strlen (str);
    for (int j = 0; j <= 5; j++) {
        str1[j] = str[i - j];
        printf ("%c", str1 [j]);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34052618_34052651_17_29
34052618_34052685_5_17
Title: Function with garbage at the end of the string (tried with NULL) 
----------------------------------------

int largest (int num1, int num2, int *largestValue) {
    int rc = 0;
    if (num1 > num2) {
        rc = -1;
        *largestValue = num1;
    }
    else if (num2 > num1) {
        rc = 1;
        *largestValue = num2;
    }
    return rc;
}
----------------------------------------

int largest (int num1, int num2) {
    if (num2 > num1) {
        printf ("%d is bigger than %d\n", num2, num1);
        return num2;
    }
    else if (num1 > num2) {
        printf ("%d is bigger than %d\n", num1, num2);
        return num1;
    }
    else {
        printf ("%d and %d are equal\n", num1, num2);
        return num1;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34065512_34065931_5_17
34065512_34066901_3_24
Title: C: Input text during runtime without setting a fixed array size before 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Usage: a.out num\n");
        return 0;
    }
    int size = atoi (argv[1]);
    printf ("the size is %d\n", size);
    int * t = new int [size];
    delete [] t;
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int n, i, *ptr, s = 0;
    char *pt;
    if (argc == 2) {
        for (i = 0; i < argv[1][i] != '\0'; i++) {
            s++;
        }
        printf (" %s\n", argv [1]);
        printf ("array size is= %d\n", s);
        pt = (char *) malloc (s * sizeof (char));
        for (i = 0; i < s; i++)
            pt[i] = argv[1][i];
        for (i = 0; i < pt[i] != '\0'; i++)
            printf ("%c", pt[i]);
    }
    else if (argc > 2) {
        printf ("Too many arguments supplied.\n");
    }
    else {
        printf ("One argument expected.\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34065512_34065931_5_17
34065512_34066911_6_31
Title: C: Input text during runtime without setting a fixed array size before 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Usage: a.out num\n");
        return 0;
    }
    int size = atoi (argv[1]);
    printf ("the size is %d\n", size);
    int * t = new int [size];
    delete [] t;
    return 0;
}
----------------------------------------

int main (void) {
    char *text;
    int maxlen = CHUNKSIZE;
    int index = 0;
    int ch;
    text = malloc (CHUNKSIZE);
    if (text == NULL)
        exit (1);
    printf ("Enter your text:\n");
    while ((ch = getchar ()) != EOF && ch != '\n') {
        text[index++] = ch;
        if (index >= maxlen) {
            maxlen += CHUNKSIZE;
            text = realloc (text, maxlen);
            if (text == NULL)
                exit (1);
        }
    }
    text[index] = 0;
    printf ("You entered: %s\n", text);
    free (text);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34065512_34066901_3_24
34065512_34066911_6_31
Title: C: Input text during runtime without setting a fixed array size before 
----------------------------------------

int main (int argc, char *argv []) {
    int n, i, *ptr, s = 0;
    char *pt;
    if (argc == 2) {
        for (i = 0; i < argv[1][i] != '\0'; i++) {
            s++;
        }
        printf (" %s\n", argv [1]);
        printf ("array size is= %d\n", s);
        pt = (char *) malloc (s * sizeof (char));
        for (i = 0; i < s; i++)
            pt[i] = argv[1][i];
        for (i = 0; i < pt[i] != '\0'; i++)
            printf ("%c", pt[i]);
    }
    else if (argc > 2) {
        printf ("Too many arguments supplied.\n");
    }
    else {
        printf ("One argument expected.\n");
    }
}
----------------------------------------

int main (void) {
    char *text;
    int maxlen = CHUNKSIZE;
    int index = 0;
    int ch;
    text = malloc (CHUNKSIZE);
    if (text == NULL)
        exit (1);
    printf ("Enter your text:\n");
    while ((ch = getchar ()) != EOF && ch != '\n') {
        text[index++] = ch;
        if (index >= maxlen) {
            maxlen += CHUNKSIZE;
            text = realloc (text, maxlen);
            if (text == NULL)
                exit (1);
        }
    }
    text[index] = 0;
    printf ("You entered: %s\n", text);
    free (text);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34066974_34067210_6_21
34066974_34067369_5_20
Title: Can't change total number of randoms 
----------------------------------------

int main () {
    int z, x, y = 0;
    char word [11];
    srand (time (NULL) ^ getpid ());
    for (z = 0; z < 1; z++) {
        y = 5 + rand () % 6;
        for (x = 0; x < y; x++) {
            word[x] = rand () % 26 + 'a';
        }
        word[y] = '\0';
        printf ("%s\n\n", word);
    }
}
----------------------------------------

int main (void) {
    int z, x, y = 0;
    char word [11];
    srand ((unsigned) time (NULL));
    for (z = 0; z < 3; z++) {
        y = 5 + rand () % 6;
        for (x = 0; x < y; x++) {
            word[x] = rand () % 26 + 'a';
        }
        word[x] = '\0';
        printf ("%s\n", word);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34108303_34108748_3_23
34108303_34110917_4_26
Title: Codechef Total Expenses 
----------------------------------------

int main (int argc, char const *argv []) {
    int test, qty, price;
    double total;
    scanf ("%d", & test);
    while (test--) {
        scanf ("%d %d", & qty, & price);
        total = qty * price;
        if (qty > 1000)
            total -= ((total * 10.0) / 100.0);
        printf ("%.6lf\n", total);
    }
    return 0;
}
----------------------------------------

int main (int argc, char const *argv []) {
    int T, quantity, price, i;
    double *tex = NULL;
    scanf ("%d", & T);
    tex = (double *) malloc (sizeof (double) * T);
    for (i = 0; i < T; i++) {
        scanf ("%d %d", & quantity, & price);
        tex[i] = (float) (quantity * price);
        if (quantity > 1000)
            tex[i] -= (tex[i] * 0.1);
    }
    for (i = 0; i < T; i++)
        printf ("%.6lf\n", tex[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34109796_34109883_4_39
34109796_34116859_7_27
Title: Finding angles of triangle by given sides in C programming 
----------------------------------------

int main (void) {
    float a, b, c, A, B, C, R, s, pi, area;
    pi = acos (-1);
    if (scanf ("%f %f %f", &a, &b, &c) != 3) {
        fprintf (stderr, "Failed to read 3 numbers\n");
        return 1;
    }
    if (a <= 0 || b <= 0 || c <= 0) {
        fprintf (stderr, "Sides must be strictly positive\n");
        return 1;
    }
    s = (a + b + c) / 2;
    if (a > s || b > s || c > s) {
        fprintf (stderr, "The three sides %.2f, %.2f, %.2f do not form a triangle\n", a, b, c);
        return 1;
    }
    area = sqrt (s *(s - a) * (s - b) * (s - c));
    R = (a * b * c) / (4 * area);
    A = (180 / pi) * asin (a / (2 * R));
    B = (180 / pi) * asin (b / (2 * R));
    C = (180 / pi) * asin (c / (2 * R));
    printf ("Sides:  %6.2f %6.2f %6.2f\n", a, b, c);
    printf ("Angles: %6.2f %6.2f %6.2f\n", A, B, C);
    return 0;
}
----------------------------------------

int main (void) {
    int a, b, c;
    double A, B, C;
    scanf ("%d %d %d", & a, & b, & c);
    A = RAD_2_DEG * acos ((double) (b * b + c * c - a * a) / (2.0 * b * c));
    B = RAD_2_DEG * acos ((double) (c * c + a * a - b * b) / (2.0 * a * c));
    C = TOTAL_DEG - (A + B);
    printf ("%.2f %.2f %.2f", A, B, C);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34129737_34129899_4_28
34129737_34130094_6_43
Title: C - Finding the index of the largest item in 2D array 
----------------------------------------

int main () {
    int a [] [2] = {{0, 0}, {1, 2}, {2, 4}, {3, 6}, {4, 8}};
    int maxrow = -1, maxcol = -1;
    int nrows = sizeof a / sizeof *a;
    int i, j, max = INT_MIN;
    for (i = 0; i < nrows; i++) {
        for (j = 0; j < 2; j++) {
            printf ("a[%d][%d] = %d\n", i, j, a [i] [j]);
            if (a[i][j] > max) {
                max = a[i][j];
                maxrow = i;
                maxcol = j;
            }
        }
    }
    printf ("\n maximum value at 'a[%d][%d]' : %d\n\n", maxrow, maxcol, max);
    return 0;
}
----------------------------------------

int main (void) {
    int a [M] [N] = {{0, 0}, {1, 2}, {2, 4}, {3, 6}, {4, 8}};
    int i, j;
    int max_i, max_j;
    for (i = 0; i < M; i++) {
        for (j = 0; j < N; j++) {
            printf ("a[%d][%d] = %d\n", i, j, a [i] [j]);
        }
    }
    max_i = 0;
    max_j = 0;
    for (i = 0; i < M; i++) {
        for (j = 0; j < N; j++) {
            if (a[max_i][max_j] < a[i][j]) {
                max_i = i;
                max_j = j;
            }
        }
    }
    printf ("The maximum value is %d at row %d and column %d\n", a [max_i] [max_j], max_i, max_j);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34133786_34133895_4_28
34133786_34134233_6_31
Title: How many times a digit is appeared in a number 
----------------------------------------

int main () {
    int i = 0, j = 0, temp = 0, indexNum = 0, num = 0, level = 10;
    int arr [10] = {0};
    num = 7766123;
    temp = num;
    if (0 == temp)
        arr[0] = 1;
    while (temp > 0) {
        indexNum = temp % level;
        arr[indexNum]++;
        temp /= 10;
    }
    for (j = 0; j < 10; j++) {
        printf ("%d\n", arr [j]);
    }
    return 0;
}
----------------------------------------

int main () {
    int j;
    int temp;
    int indexNum;
    int arr [10] = {0};
    int num;
    int level = 10;
    int level2 = 1;
    printf ("Please enter a digit number (upto 10 digits) \n");
    scanf ("%d", & num);
    temp = num;
    while (temp > 0) {
        indexNum = num % level / level2;
        arr[indexNum]++;
        level *= 10;
        level2 *= 10;
        temp /= 10;
    }
    for (j = 0; j < 10; j++) {
        printf ("%d\n", arr [j]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34133786_34133895_4_28
34133786_34134284_17_29
Title: How many times a digit is appeared in a number 
----------------------------------------

int main () {
    int i = 0, j = 0, temp = 0, indexNum = 0, num = 0, level = 10;
    int arr [10] = {0};
    num = 7766123;
    temp = num;
    if (0 == temp)
        arr[0] = 1;
    while (temp > 0) {
        indexNum = temp % level;
        arr[indexNum]++;
        temp /= 10;
    }
    for (j = 0; j < 10; j++) {
        printf ("%d\n", arr [j]);
    }
    return 0;
}
----------------------------------------

int main () {
    int count [10] = {0};
    unsigned int num = 1122345;
    int i = 0;
    count_digits (num, count);
    for (i = 0; i < 10; i++) {
        printf ("%d: -- %d\n", i, count [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34133786_34134233_6_31
34133786_34134284_17_29
Title: How many times a digit is appeared in a number 
----------------------------------------

int main () {
    int j;
    int temp;
    int indexNum;
    int arr [10] = {0};
    int num;
    int level = 10;
    int level2 = 1;
    printf ("Please enter a digit number (upto 10 digits) \n");
    scanf ("%d", & num);
    temp = num;
    while (temp > 0) {
        indexNum = num % level / level2;
        arr[indexNum]++;
        level *= 10;
        level2 *= 10;
        temp /= 10;
    }
    for (j = 0; j < 10; j++) {
        printf ("%d\n", arr [j]);
    }
    return 0;
}
----------------------------------------

int main () {
    int count [10] = {0};
    unsigned int num = 1122345;
    int i = 0;
    count_digits (num, count);
    for (i = 0; i < 10; i++) {
        printf ("%d: -- %d\n", i, count [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34142909_34143013_1_54
34142909_34144439_6_43
Title: Segmentation fault when attempting to get length of file name 
----------------------------------------

int main () {
    char **files;
    int sum;
    int i;
    DIR *d;
    struct dirent *dir;
    d = opendir (".");
    if (d) {
        int size = 10;
        sum = 0;
        files = malloc (size * sizeof (char *));
        if (files == NULL) {
            perror ("malloc failed");
            exit (1);
        }
        while ((dir = readdir (d)) != NULL) {
            if (sum >= size) {
                char **tmp;
                size *= 2;
                tmp = realloc (size * sizeof (char *));
                if (tmp == NULL) {
                    perror ("realloc failed");
                    exit (1);
                }
                files = tmp;
            }
            files[sum] = strdup (dir->d_name);
            sum++;
        }
        closedir (d);
    }
    else {
        return -1;
    }
    strlen (files [0]);
    for (i = 0; i < sum; i++) {
        free (files [i]);
    }
    free (files);
    return 0;
}
----------------------------------------

int main () {
    int sum;
    int i;
    DIR *d;
    struct dirent *dir;
    struct dirent dirList [255];
    struct dirent *dirListPtr [255];
    d = opendir (".");
    if (d) {
        i = 0;
        while ((dir = readdir (d)) != NULL) {
            dirList[i] = *dir;
            dirListPtr[i] = dir;
            i++;
        }
    }
    else {
        return -1;
    }
    printf ("size of filename: %lu size of dirent %lu\n", strlen (dirList [0].d_name), sizeof (dirList [0]));
    printf ("size of filename: %lu\n", strlen (dirListPtr [0] -> d_name));
    closedir (d);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34156600_34156819_12_31
34156600_34157265_38_55
Title: Need help breaking down code to smaller parts C 
----------------------------------------

int main (int argc, char *argv []) {
    int min, max;
    if (argc != 3)
        exit (EXIT_FAILURE);
    min = atoi (argv[1]);
    max = atoi (argv[2]);
    if (min > max)
        swap (&min, &max);
    if (min < 0)
        min = 1;
    magic (min, max);
    return EXIT_SUCCESS;
}
----------------------------------------

int main (int argc, char *argv []) {
    int min;
    int max;
    if (argc != 3)
        exit (EXIT_FAILURE);
    min = atoi (argv[1]);
    max = atoi (argv[2]);
    if (min > max)
        swap_int (&min, &max);
    display_primes_in_range (min, max);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34156600_34156819_34_51
34156600_34157030_5_25
Title: Need help breaking down code to smaller parts C 
----------------------------------------

void magic (int min, int max) {
    int i, j, count;
    for (i = min; i <= max; i++) {
        count = 0;
        for (j = 2; j <= i / 2; j++) {
            if (i % j == 0) {
                count++;
                break;
            }
        }
        if (count == 0 && i != 1 && i != 0)
            printf ("%d \n", i);
    }
}
----------------------------------------

int magic (int min, int max) {
    int count;
    for (int i = min; i <= max; i++) {
        count = 0;
        for (int j = 2; j <= i / 2; j++) {
            if (i % j == 0) {
                count++;
                break;
            }
        }
        if (count == 0 && i != 1 && i != 0)
            printf ("%d \n", i);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34165589_34166415_60_81
34165589_35325721_18_42
Title: Linked lists with structures 
----------------------------------------

int main (void) {
    node **array = malloc (sizeof (node *) * 10);
    if (array == NULL)
        return -1;
    for (int i = 0; i < 10; i++) {
        array[i] = create_list_of (10);
    }
    print_array_linked_list (array);
    return 0;
}
----------------------------------------

int main (void) {
    int i, j;
    Node **head, *curr;
    head = (Node **) malloc (sizeof (Node *));
    for (j = 1; j <= 10; j++) {
        head[j] = NULL;
        curr = NULL;
        for (i = 1; i <= 10; i++) {
            curr = addfrontnode (&head[j], i);
            head[j] = curr;
        }
    }
    i = 10;
    while (head[i]) {
        printf ("%d\n", head [i] -> data);
        head[i] = head[i]->next;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34165592_34165718_5_14
34165592_34165759_4_25
Title: "scanf skipped after reading in integer in C in while loop" 
----------------------------------------

int main (void) {
    int choice, ch;
    while (scanf ("%d", &choice) != 1 || choice < 1 || choice > MAXCHOICE) {
        printf ("Incorrect value entered, please re-enter\n");
        while ((ch = getchar (stdin)) != '\n')
            ;
    }
    printf ("Choice %d\n", choice);
    return 0;
}
----------------------------------------

int main (void) {
    int choice, repeat = 0;
    do {
        printf ("Give a Number: ");
        if ((scanf ("%d", &choice)) != 1) {
            printf ("ErrorFix it!\n");
            exit (1);
        }
        else {
            if (choice > 0) {
                printf ("OK\n");
                repeat = 0;
            }
            else {
                printf ("Incorrect value entered, please re-enter\n");
                repeat = 1;
            }
        }
    }
    while (repeat == 1);
    printf ("Your typed %d\n", choice);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34180537_34181109_3_22
34180537_34209354_7_53
Title: Reading a text file backwards and put in C 
----------------------------------------

int main () {
    int i;
    char buffer [100];
    char a [10] [100];
    FILE *f, *p;
    f = fopen ("Frozen_snowman.txt", "r");
    p = fopen ("Reverse.txt", "w");
    for (i = 0; i < 10; i++) {
        fgets (buffer, 100, f);
        strcpy (a [i], buffer);
    }
    for (i = 9; i > -1; i--) {
        fputs (a [i], p);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    char *a [MAX_LINES] = {NULL};
    FILE *fin = NULL;
    FILE *fout = NULL;
    if (NULL == (fin = fopen ("Frozen_snowman.txt", "r"))) {
        perror ("fopen for input file: Frozen Snowman.txt failed");
        exit (EXIT_FAILURE);
    }
    if (NULL == (fout = fopen ("Reverse.txt", "w"))) {
        perror ("fopen for output file Reverse.txt failed");
        fclose (fin);
        exit (EXIT_FAILURE);
    }
    i = 0;
    while (i < MAX_LINES && getline (&(a[i]), NULL, fin)) {
        i++;
    }
    for (i--; i >= 0; i--) {
        fputs (a [i], fout);
        free (a [i]);
    }
    fclose (fin);
    fclose (fout);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34181374_34182314_4_142
34181374_34182602_1_86
Title: C code to print the unique numbers of an array 
----------------------------------------

int main () {
    int size1 = 4, a [] = {1, 1, 1, 2};
    int size2 = 4, b [] = {2, 2, 2, 3};
    int size3 = 4, c [] = {3, 3, 3, 4};
    int size4 = 5, d [] = {4, 4, 4, 5, 6};
    int a_b [30], c_d [30], e [30];
    int i, j, k, t, sizefull;
    sizefull = size1 + size2 + size3 + size4;
    printf ("%d\n", sizefull);
    i = j = k = 0;
    while (i < size1 && j < size2) {
        if (a[i] <= b[j]) {
            a_b[k] = a[i];
            i++;
            k++;
        }
        else {
            a_b[k] = b[j];
            k++;
            j++;
        }
    }
    while (i < size1) {
        a_b[k] = a[i];
        i++;
        k++;
    }
    while (j < size2) {
        a_b[k] = b[j];
        k++;
        j++;
    }
    printf ("\nMerged array is :");
    for (i = 0; i < size1 + size2; i++)
        printf ("%d ", a_b[i]);
    i = j = k = 0;
    while (i < size3 && j < size4) {
        if (c[i] <= d[j]) {
            c_d[k] = c[i];
            i++;
            k++;
        }
        else {
            c_d[k] = d[j];
            k++;
            j++;
        }
    }
    while (i < size3) {
        c_d[k] = c[i];
        i++;
        k++;
    }
    while (j < size4) {
        c_d[k] = d[j];
        k++;
        j++;
    }
    printf ("\nMerged array is :");
    for (i = 0; i < size3 + size4; i++)
        printf ("%d ", c_d[i]);
    i = j = k = 0;
    while (i < size1 + size2 && j < size3 + size4) {
        if (a_b[i] <= c_d[j]) {
            e[k] = a_b[i];
            i++;
            k++;
        }
        else {
            e[k] = c_d[j];
            k++;
            j++;
        }
    }
    while (i < size1 + size2) {
        e[k] = a_b[i];
        i++;
        k++;
    }
    while (j < size3 + size4) {
        e[k] = c_d[j];
        k++;
        j++;
    }
    printf ("\n After merging: \n");
    for (i = 0; i < sizefull; i++) {
        printf ("%d ", e [i]);
    }
    for (i = 0; i < sizefull; i++) {
        for (j = i + 1; j < sizefull; j++) {
            if (e[i] > e[j]) {
                t = e[i];
                e[i] = e[j];
                e[j] = t;
            }
        }
    }
    printf ("\nAscending Order is:");
    for (j = 0; j < sizefull; j++) {
        printf ("%d ", e [j]);
    }
    printf ("\n\n Final Array is \n");
    for (i = 0; i < sizefull; i++) {
        printf (" %d", e [i]);
    }
    for (i = 0; i < sizefull;) {
        for (j = (i + 1); j < sizefull; j++) {
            if (e[i] != e[j])
                break;
        }
        printf ("\nunique element = %d, at index = %d\n", e [i], i);
        printf ("\nunique element = %d, at index = %d\n", e [i], i);
        i = j;
        return 0;
    }
}
----------------------------------------

int main () {
    int size1, size2, size3, size4, sizefull, a [30], b [30], c [30], d [30], e [120];
    int i, j, t, match, temp;
    printf ("Insert the size of A: ");
    scanf ("%d", & size1);
    printf ("Insert %d elements of A:\n", size1);
    for (i = 0; i < size1; i++)
        scanf ("%d", &a[i]);
    printf ("Insert the size of B: ");
    scanf ("%d", & size2);
    printf ("Insert %d elements of B:\n", size2);
    for (i = 0; i < size2; i++)
        scanf ("%d", &b[i]);
    printf ("Insert the size of C: ");
    scanf ("%d", & size3);
    printf ("Insert %d elements of C:\n", size3);
    for (i = 0; i < size3; i++)
        scanf ("%d", &c[i]);
    printf ("Insert the size of D: ");
    scanf ("%d", & size4);
    printf ("Insert %d elements of D:\n", size4);
    for (i = 0; i < size4; i++)
        scanf ("%d", &d[i]);
    sizefull = size1 + size2 + size3 + size4;
    i = 0;
    j = 0;
    while (i < size1) {
        e[j] = a[i];
        i++;
        j++;
    }
    i = 0;
    while (i < size2) {
        e[j] = b[i];
        i++;
        j++;
    }
    i = 0;
    while (i < size3) {
        e[j] = c[i];
        i++;
        j++;
    }
    i = 0;
    while (i < size4) {
        e[j] = d[i];
        i++;
        j++;
    }
    for (i = 0; i < sizfull - i; i++) {
        for (j = 0; j < sizefull - i; j++) {
            if (e[j] > e[j + 1]) {
                temp = e[j];
                e[j] = e[j + 1];
                e[j + 1] = temp;
            }
        }
    }
    for (i = 0; i < sizefull - 1; i++) {
        match = 0;
        for (j = i + 1; j < sizefull; j++) {
            if (e[i] == e[j]) {
                match++;
                break;
            }
        }
        if (match == 0)
            printf ("unique number=%d at index %d", e[i], i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34181374_34182314_4_142
34181374_34184297_59_91
Title: C code to print the unique numbers of an array 
----------------------------------------

int main () {
    int size1 = 4, a [] = {1, 1, 1, 2};
    int size2 = 4, b [] = {2, 2, 2, 3};
    int size3 = 4, c [] = {3, 3, 3, 4};
    int size4 = 5, d [] = {4, 4, 4, 5, 6};
    int a_b [30], c_d [30], e [30];
    int i, j, k, t, sizefull;
    sizefull = size1 + size2 + size3 + size4;
    printf ("%d\n", sizefull);
    i = j = k = 0;
    while (i < size1 && j < size2) {
        if (a[i] <= b[j]) {
            a_b[k] = a[i];
            i++;
            k++;
        }
        else {
            a_b[k] = b[j];
            k++;
            j++;
        }
    }
    while (i < size1) {
        a_b[k] = a[i];
        i++;
        k++;
    }
    while (j < size2) {
        a_b[k] = b[j];
        k++;
        j++;
    }
    printf ("\nMerged array is :");
    for (i = 0; i < size1 + size2; i++)
        printf ("%d ", a_b[i]);
    i = j = k = 0;
    while (i < size3 && j < size4) {
        if (c[i] <= d[j]) {
            c_d[k] = c[i];
            i++;
            k++;
        }
        else {
            c_d[k] = d[j];
            k++;
            j++;
        }
    }
    while (i < size3) {
        c_d[k] = c[i];
        i++;
        k++;
    }
    while (j < size4) {
        c_d[k] = d[j];
        k++;
        j++;
    }
    printf ("\nMerged array is :");
    for (i = 0; i < size3 + size4; i++)
        printf ("%d ", c_d[i]);
    i = j = k = 0;
    while (i < size1 + size2 && j < size3 + size4) {
        if (a_b[i] <= c_d[j]) {
            e[k] = a_b[i];
            i++;
            k++;
        }
        else {
            e[k] = c_d[j];
            k++;
            j++;
        }
    }
    while (i < size1 + size2) {
        e[k] = a_b[i];
        i++;
        k++;
    }
    while (j < size3 + size4) {
        e[k] = c_d[j];
        k++;
        j++;
    }
    printf ("\n After merging: \n");
    for (i = 0; i < sizefull; i++) {
        printf ("%d ", e [i]);
    }
    for (i = 0; i < sizefull; i++) {
        for (j = i + 1; j < sizefull; j++) {
            if (e[i] > e[j]) {
                t = e[i];
                e[i] = e[j];
                e[j] = t;
            }
        }
    }
    printf ("\nAscending Order is:");
    for (j = 0; j < sizefull; j++) {
        printf ("%d ", e [j]);
    }
    printf ("\n\n Final Array is \n");
    for (i = 0; i < sizefull; i++) {
        printf (" %d", e [i]);
    }
    for (i = 0; i < sizefull;) {
        for (j = (i + 1); j < sizefull; j++) {
            if (e[i] != e[j])
                break;
        }
        printf ("\nunique element = %d, at index = %d\n", e [i], i);
        printf ("\nunique element = %d, at index = %d\n", e [i], i);
        i = j;
        return 0;
    }
}
----------------------------------------

int main () {
    int a [64], b [64], c [64], d [64];
    int a_b [128], c_d [128];
    int e [256];
    int sizea, sizeb, sizec, sized;
    int sizea_b, sizec_d, sizee;
    sizea = getdata (a, 'A');
    sizeb = getdata (b, 'B');
    sizec = getdata (c, 'C');
    sized = getdata (d, 'D');
    sizea_b = sizea + sizeb;
    sizec_d = sizec + sized;
    sizee = sizea_b + sizec_d;
    qsort (a, sizea, sizeof (a [0]), cmp);
    qsort (b, sizeb, sizeof (b [0]), cmp);
    qsort (c, sizec, sizeof (c [0]), cmp);
    qsort (d, sized, sizeof (d [0]), cmp);
    merge (a_b, a, sizea, b, sizeb);
    merge (c_d, c, sizec, d, sized);
    merge (e, a_b, sizea_b, c_d, sizec_d);
    printf ("\n");
    print_uniques (e, sizee);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34181374_34182602_1_86
34181374_34184297_59_91
Title: C code to print the unique numbers of an array 
----------------------------------------

int main () {
    int size1, size2, size3, size4, sizefull, a [30], b [30], c [30], d [30], e [120];
    int i, j, t, match, temp;
    printf ("Insert the size of A: ");
    scanf ("%d", & size1);
    printf ("Insert %d elements of A:\n", size1);
    for (i = 0; i < size1; i++)
        scanf ("%d", &a[i]);
    printf ("Insert the size of B: ");
    scanf ("%d", & size2);
    printf ("Insert %d elements of B:\n", size2);
    for (i = 0; i < size2; i++)
        scanf ("%d", &b[i]);
    printf ("Insert the size of C: ");
    scanf ("%d", & size3);
    printf ("Insert %d elements of C:\n", size3);
    for (i = 0; i < size3; i++)
        scanf ("%d", &c[i]);
    printf ("Insert the size of D: ");
    scanf ("%d", & size4);
    printf ("Insert %d elements of D:\n", size4);
    for (i = 0; i < size4; i++)
        scanf ("%d", &d[i]);
    sizefull = size1 + size2 + size3 + size4;
    i = 0;
    j = 0;
    while (i < size1) {
        e[j] = a[i];
        i++;
        j++;
    }
    i = 0;
    while (i < size2) {
        e[j] = b[i];
        i++;
        j++;
    }
    i = 0;
    while (i < size3) {
        e[j] = c[i];
        i++;
        j++;
    }
    i = 0;
    while (i < size4) {
        e[j] = d[i];
        i++;
        j++;
    }
    for (i = 0; i < sizfull - i; i++) {
        for (j = 0; j < sizefull - i; j++) {
            if (e[j] > e[j + 1]) {
                temp = e[j];
                e[j] = e[j + 1];
                e[j + 1] = temp;
            }
        }
    }
    for (i = 0; i < sizefull - 1; i++) {
        match = 0;
        for (j = i + 1; j < sizefull; j++) {
            if (e[i] == e[j]) {
                match++;
                break;
            }
        }
        if (match == 0)
            printf ("unique number=%d at index %d", e[i], i);
    }
}
----------------------------------------

int main () {
    int a [64], b [64], c [64], d [64];
    int a_b [128], c_d [128];
    int e [256];
    int sizea, sizeb, sizec, sized;
    int sizea_b, sizec_d, sizee;
    sizea = getdata (a, 'A');
    sizeb = getdata (b, 'B');
    sizec = getdata (c, 'C');
    sized = getdata (d, 'D');
    sizea_b = sizea + sizeb;
    sizec_d = sizec + sized;
    sizee = sizea_b + sizec_d;
    qsort (a, sizea, sizeof (a [0]), cmp);
    qsort (b, sizeb, sizeof (b [0]), cmp);
    qsort (c, sizec, sizeof (c [0]), cmp);
    qsort (d, sized, sizeof (d [0]), cmp);
    merge (a_b, a, sizea, b, sizeb);
    merge (c_d, c, sizec, d, sized);
    merge (e, a_b, sizea_b, c_d, sizec_d);
    printf ("\n");
    print_uniques (e, sizee);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34185216_34185924_2_19
34185216_34186194_7_19
Title: "Getting an character as a password with ""*"" sign and match with your password" 
----------------------------------------

int main (int argc, char **argv) {
    char password;
    int a = 0;
    do {
        printf ("\nEnter a character");
        password = getch ();
        putchar ("*");
        if (password != '1') {
            printf ("\n\n");
            continue;
        }
        password = getch ();
        putchar ("*");
        if (password != '2') {
            printf ("\n\n");
            continue;
        }
        a++;
    }
    while (a < 10);
    return 0;
}
----------------------------------------

int main (void) {
    char password [50];
    int c, i = 0;
    char ch = '*';
    while ((c = getch ()) != '\n' && c != EOF) {
        password[i] = (char) c;
        i++;
        putchar (ch);
    }
    printf ("\nYour Password is %s\n", password);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34188126_34188752_5_27
34188126_34195566_1_28
Title: getopt with repeated and optional arguments 
----------------------------------------

int main (int argc, char *argv []) {
    int opt;
    while ((opt = getopt (argc, argv, "s:")) != -1) {
        switch (opt) {
        case 's' :
            printf ("size=%d\n", atoi (optarg));
            break;
        default :
            exit (EXIT_FAILURE);
        }
    }
    if (optind < argc) {
        printf ("name=%s\n", argv [optind]);
    }
    else {
        printf ("optional name arg not present\n");
    }
    exit (EXIT_SUCCESS);
}
----------------------------------------

int main (int argc, char *argv) {
    int nparts = 0;
    unsigned long *parts = NULL;
    const char *diskname = "/the/default/name";
    for (;;) {
        switch (getopt (argc, argv, "s:")) {
        case '?' :
            exit (1);
        case 's' :
            parts = realloc (parts, ++nparts * sizeof *parts);
            parts[nparts - 1] = strtoul (optarg, NULL, 0);
            continue;
        case -1 :
            break;
        }
        break;
    }
    if (optind < argc)
        diskname = argv[optind++];
    if (optind != argc) {
        exit (1);
    }
    return do_partitions (diskname, parts, nparts);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34209854_34210745_4_17
34209854_34210854_6_20
Title: how to detect the ESC key in C? 
----------------------------------------

int main (void) {
    int k;
    do {
        k = _getch ();
        if (k == 0) {
            printf ("Special key: ");
            k = _getch ();
        }
        printf ("%d\n", k);
    }
    while (k != 27);
    return 0;
}
----------------------------------------

int main () {
    char ch;
    do {
        ch = getch ();
        switch (ch) {
        case esc :
            break;
        }
    }
    while (exitflag != 1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34213896_34213968_3_45
34213896_34214315_3_41
Title: Why will my program not flag characters? 
----------------------------------------

int main () {
    int grade;
    int r = 0;
    while (r != 1) {
        scanf ("%i", & grade);
        switch (grade) {
        case 10 :
        case 9 :
            printf ("Your grade is an A\n");
            r = 1 break;
        case 8 :
            printf ("Your grade is a B\n");
            r = 1 break;
        case 7 :
            printf ("Your grade is a C\n");
            r = 1 break;
        case 6 :
            printf ("Your grade is a D\n");
            r = 1 break;
        case 5 :
        case 4 :
        case 3 :
        case 2 :
        case 1 :
        case 0 :
            printf ("Your grade is an F\n");
            r = 1 break;
        default :
            printf ("Invalid score, please re-enter\n");
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int grade;
    int r;
    while ((r = scanf ("%i", &grade)) != EOF) {
        if (r != 1) {
            grade = -1;
        }
        switch (grade) {
        case 10 :
        case 9 :
            printf ("Your grade is an A\n");
            break;
        case 8 :
            printf ("Your grade is a B\n");
            break;
        case 7 :
            printf ("Your grade is a C\n");
            break;
        case 6 :
            printf ("Your grade is a D\n");
            break;
        case 5 :
        case 4 :
        case 3 :
        case 2 :
        case 1 :
        case 0 :
            printf ("Your grade is an F\n");
            break;
        default :
            printf ("Invalid score, please re-enter\n");
            while (getchar () != '\n')
                ;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34226977_34227283_5_26
34226977_34227349_4_21
Title: C language: How do I ignore carriage return and line feed when reading from text file? 
----------------------------------------

int main () {
    int i;
    char info [SIZE];
    char stop, dataread;
    stop = '#';
    dataread = getchar ();
    while (i < SIZE && dataread != EOF) {
        if (isalpha (dataread) || dataread == '#') {
            info[i++] = dataread;
            putchar (dataread);
        }
        if (dataread == '#')
            break;
        dataread = getchar ();
    }
    return 0;
}
----------------------------------------

int main (void) {
    int i;
    char info [size];
    char stop = '#';
    for (i = 0; i < size; i++) {
        if (scanf ("%c", &info[i]) != 1)
            break;
        if (info[i] != '\n' && info[i] != '\r')
            printf ("%c", info[i]);
        if (info[i] == stop)
            break;
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34226977_34227283_5_26
34226977_34227666_3_21
Title: C language: How do I ignore carriage return and line feed when reading from text file? 
----------------------------------------

int main () {
    int i;
    char info [SIZE];
    char stop, dataread;
    stop = '#';
    dataread = getchar ();
    while (i < SIZE && dataread != EOF) {
        if (isalpha (dataread) || dataread == '#') {
            info[i++] = dataread;
            putchar (dataread);
        }
        if (dataread == '#')
            break;
        dataread = getchar ();
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    char stop = '#';
    while ((c = getchar ()) != EOF) {
        if (c != '\r' && c != '\n') {
            putchar (c);
        }
        if (c == stop) {
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34226977_34227283_5_26
34226977_34227703_5_63
Title: C language: How do I ignore carriage return and line feed when reading from text file? 
----------------------------------------

int main () {
    int i;
    char info [SIZE];
    char stop, dataread;
    stop = '#';
    dataread = getchar ();
    while (i < SIZE && dataread != EOF) {
        if (isalpha (dataread) || dataread == '#') {
            info[i++] = dataread;
            putchar (dataread);
        }
        if (dataread == '#')
            break;
        dataread = getchar ();
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int iCharacter;
    FILE *pTextFile;
    char msInfo [SIZE + 1];
    unsigned int uInfoIndex;
    if (argc < 2) {
        puts ("\nPlease specify a file name as parameter.\n");
        return 3;
    }
    pTextFile = fopen (argv[1], "rb");
    if (pTextFile == NULL) {
        printf ("Can't open file \"%s\" for reading.\n", argv [1]);
        return 1;
    }
    uInfoIndex = 0;
    do {
        iCharacter = fgetc (pTextFile);
        if (ferror (pTextFile)) {
            printf ("\n\nError on reading data from file \"%s\"\n", argv [1]);
            fclose (pTextFile);
            return 2;
        }
        if (feof (pTextFile)) {
            break;
        }
        if ((iCharacter != '\r') && (iCharacter != '\n')) {
            msInfo[uInfoIndex] = (char) iCharacter;
            uInfoIndex++;
        }
    }
    while ((iCharacter != '#') && (uInfoIndex < SIZE));
    (void) fclose (pTextFile);
    msInfo[uInfoIndex] = '\0';
    printf ("Data read from file %s:\n\n%s\n", argv [1], msInfo);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34226977_34227349_4_21
34226977_34227666_3_21
Title: C language: How do I ignore carriage return and line feed when reading from text file? 
----------------------------------------

int main (void) {
    int i;
    char info [size];
    char stop = '#';
    for (i = 0; i < size; i++) {
        if (scanf ("%c", &info[i]) != 1)
            break;
        if (info[i] != '\n' && info[i] != '\r')
            printf ("%c", info[i]);
        if (info[i] == stop)
            break;
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main () {
    int c;
    char stop = '#';
    while ((c = getchar ()) != EOF) {
        if (c != '\r' && c != '\n') {
            putchar (c);
        }
        if (c == stop) {
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34226977_34227349_4_21
34226977_34227703_5_63
Title: C language: How do I ignore carriage return and line feed when reading from text file? 
----------------------------------------

int main (void) {
    int i;
    char info [size];
    char stop = '#';
    for (i = 0; i < size; i++) {
        if (scanf ("%c", &info[i]) != 1)
            break;
        if (info[i] != '\n' && info[i] != '\r')
            printf ("%c", info[i]);
        if (info[i] == stop)
            break;
    }
    putchar ('\n');
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int iCharacter;
    FILE *pTextFile;
    char msInfo [SIZE + 1];
    unsigned int uInfoIndex;
    if (argc < 2) {
        puts ("\nPlease specify a file name as parameter.\n");
        return 3;
    }
    pTextFile = fopen (argv[1], "rb");
    if (pTextFile == NULL) {
        printf ("Can't open file \"%s\" for reading.\n", argv [1]);
        return 1;
    }
    uInfoIndex = 0;
    do {
        iCharacter = fgetc (pTextFile);
        if (ferror (pTextFile)) {
            printf ("\n\nError on reading data from file \"%s\"\n", argv [1]);
            fclose (pTextFile);
            return 2;
        }
        if (feof (pTextFile)) {
            break;
        }
        if ((iCharacter != '\r') && (iCharacter != '\n')) {
            msInfo[uInfoIndex] = (char) iCharacter;
            uInfoIndex++;
        }
    }
    while ((iCharacter != '#') && (uInfoIndex < SIZE));
    (void) fclose (pTextFile);
    msInfo[uInfoIndex] = '\0';
    printf ("Data read from file %s:\n\n%s\n", argv [1], msInfo);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34226977_34227666_3_21
34226977_34227703_5_63
Title: C language: How do I ignore carriage return and line feed when reading from text file? 
----------------------------------------

int main () {
    int c;
    char stop = '#';
    while ((c = getchar ()) != EOF) {
        if (c != '\r' && c != '\n') {
            putchar (c);
        }
        if (c == stop) {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int iCharacter;
    FILE *pTextFile;
    char msInfo [SIZE + 1];
    unsigned int uInfoIndex;
    if (argc < 2) {
        puts ("\nPlease specify a file name as parameter.\n");
        return 3;
    }
    pTextFile = fopen (argv[1], "rb");
    if (pTextFile == NULL) {
        printf ("Can't open file \"%s\" for reading.\n", argv [1]);
        return 1;
    }
    uInfoIndex = 0;
    do {
        iCharacter = fgetc (pTextFile);
        if (ferror (pTextFile)) {
            printf ("\n\nError on reading data from file \"%s\"\n", argv [1]);
            fclose (pTextFile);
            return 2;
        }
        if (feof (pTextFile)) {
            break;
        }
        if ((iCharacter != '\r') && (iCharacter != '\n')) {
            msInfo[uInfoIndex] = (char) iCharacter;
            uInfoIndex++;
        }
    }
    while ((iCharacter != '#') && (uInfoIndex < SIZE));
    (void) fclose (pTextFile);
    msInfo[uInfoIndex] = '\0';
    printf ("Data read from file %s:\n\n%s\n", argv [1], msInfo);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34233853_34233913_1_29
34233853_34234202_4_17
Title: I'm trying to read a line from a file in c and dynamically allocate memory but the result is always bad 
----------------------------------------

char *readline (FILE *fp, char *buffer) {
    int ch;
    int i = 0;
    size_t buff_len = 0;
    buffer = malloc (buff_len +1);
    if (!buffer)
        return NULL;
    while ((ch = fgetc (fp)) != '\n' && ch != EOF) {
        buff_len++;
        void *tmp = realloc (buffer, buff_len +1);
        if (tmp == NULL) {
            free (buffer);
            return NULL;
        }
        buffer = tmp;
        buffer[i] = (char) ch;
        i++;
    }
    buffer[i] = '\0';
    if (ch == EOF && (i == 0 || ferror (fp))) {
        free (buffer);
        return NULL;
    }
    return buffer;
}
----------------------------------------

char *readline (FILE *fp) {
    char *buffer = malloc (1024);
    int ch;
    int i = 0;
    while ((ch = fgetc (fp)) != '\n' && ch != EOF)
        buffer[i++] = ch;
    if (ch == EOF) {
        free (buffer);
        return 0;
    }
    buffer[i++] = 0;
    buffer = realloc (buffer, i);
    return buffer;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
34233853_34233913_1_29
34233853_34234475_32_67
Title: I'm trying to read a line from a file in c and dynamically allocate memory but the result is always bad 
----------------------------------------

char *readline (FILE *fp, char *buffer) {
    int ch;
    int i = 0;
    size_t buff_len = 0;
    buffer = malloc (buff_len +1);
    if (!buffer)
        return NULL;
    while ((ch = fgetc (fp)) != '\n' && ch != EOF) {
        buff_len++;
        void *tmp = realloc (buffer, buff_len +1);
        if (tmp == NULL) {
            free (buffer);
            return NULL;
        }
        buffer = tmp;
        buffer[i] = (char) ch;
        i++;
    }
    buffer[i] = '\0';
    if (ch == EOF && (i == 0 || ferror (fp))) {
        free (buffer);
        return NULL;
    }
    return buffer;
}
----------------------------------------

char *readline (FILE *fp, char **buffer) {
    int ch;
    size_t buflen = 0, nchar = NCHAR;
    *buffer = malloc (nchar);
    if (!*buffer) {
        fprintf (stderr, "readline() error: virtual memory exhausted.\n");
        return NULL;
    }
    while ((ch = fgetc (fp)) != '\n' && ch != EOF) {
        (*buffer)[buflen++] = ch;
        if (buflen + 1 >= nchar) {
            char *tmp = realloc (*buffer, nchar *2);
            if (!tmp) {
                fprintf (stderr, "error: realloc failed, " "returning partial buffer.\n");
                (*buffer)[buflen] = 0;
                return *buffer;
            }
            *buffer = tmp;
            nchar *= 2;
        }
    }
    (*buffer)[buflen] = 0;
    if (buflen == 0 && ch == EOF) {
        free (*buffer);
        *buffer = NULL;
    }
    return *buffer;
}
----------------------------------------

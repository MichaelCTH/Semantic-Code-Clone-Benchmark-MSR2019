$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49761053_49761998_1_13
49761053_49762002_1_14
Title: Iterative/recursive search of array 
----------------------------------------

int GetNext (int curr) {
    int start = curr;
    do {
        ++curr;
        if (curr == NUM) {
            curr = 0;
        }
        if (now[curr].actv == 1)
            return curr;
    }
    while (curr != start);
    return -1;
}
----------------------------------------

int GetNext (int curr) {
    int start = curr;
    for (curr++; curr != start; curr++) {
        if (curr >= NUM) {
            curr = 0;
        }
        if (now[curr].actv == 1) {
            return curr;
        }
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49761187_49761261_1_13
49761187_49761434_3_18
Title: Maximum of three numbers in C 
----------------------------------------

int main () {
    float m, n, p;
    scanf ("%f%f%f", & m, & n, & p);
    if (m >= n && m >= p) {
        printf ("%f", m);
    }
    else if (n >= p && n >= m) {
        printf ("%f", n);
    }
    else {
        printf ("%f", p);
    }
    return 0;
}
----------------------------------------

int main () {
    float m, n, p, max;
    if (scanf ("%f%f%f", &m, &n, &p) != 3) {
        puts ("Bad input");
        return 1;
    }
    max = m;
    if (n > max) {
        max = n;
    }
    if (p > max) {
        max = p;
    }
    printf ("%f", max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49766540_49766670_1_11
49766540_49768151_3_19
Title: Factorial calculator using functions in C 
----------------------------------------

int main (void) {
    int result;
    int factorial_result;
    mystamp ();
    result = getnum ();
    factorial_result = factorial (result);
    printf ("You typed %d\n", result);
    printf ("The factorial is %d\n", factorial_result);
    return;
}
----------------------------------------

int main () {
    int num;
    int result;
    printf ("Enter a number to find it's Factorial: ");
    scanf ("%d", & num);
    if (num < 0) {
        printf ("Factorial of negative number not possible\n");
    }
    else {
        result = factorial (num);
        printf ("The Factorial of %d is %d.\n", num, result);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49788179_49788324_1_24
49788179_49788347_6_25
Title: How to get a substring using strchr in multiple occurrences of '/' in c and store it in a variable 
----------------------------------------

int main () {
    char buf [50] = "user/local/etc/bin/example.txt";
    char *pStart = buf;
    char *pCurrent = strchr (pStart, '/');
    while (pCurrent != NULL) {
        char str [20] = {0};
        strncpy (str, pStart, pCurrent - pStart);
        printf ("%s\n", str);
        pStart = pCurrent + 1;
        pCurrent = strchr (pStart, '/');
    }
    pCurrent = strchr (pStart, '.');
    if (pCurrent != NULL) {
        char str [20] = {0};
        strncpy (str, pStart, pCurrent - pStart);
        printf ("%s\n", str);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char buf [] = "user/local/etc/bin/example.txt";
    char substring [MAXLEN + 1];
    char *a, *b;
    int len;
    b = buf;
    while ((a = strchr (b, '/')) != NULL || (a = strchr (b, '.')) != NULL) {
        len = a - b;
        if (len > MAXLEN)
            return 0;
        memcpy (substring, b, len);
        substring[len] = 0;
        printf ("'%s'\n", substring);
        b = a + 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49804476_49805418_1_25
49804476_49814063_1_17
Title: How can I alphabetize this linked list? 
----------------------------------------

Person *add (Person *head, char *n, int a) {
    char empty [1] = "";
    Person sentinel = {0};
    sentinel.name = empty;
    sentinel.next = head;
    Person *p = &sentinel;
    while (p) {
        int cmp = p->next ? strcmp (n, p->next->name) : -1;
        if (cmp == 0) {
            printf ("Name Already Exists in List! Please retry with another name..\n");
            break;
        }
        if (cmp < 0) {
            Person *newNode = malloc (sizeof (Person));
            newNode->name = malloc (strlen (n) +1);
            strcpy (newNode -> name, n);
            newNode->age = a;
            newNode->next = p->next;
            p->next = newNode;
            break;
        }
        p = p->next;
    }
    return sentinel.next;
}
----------------------------------------

Person *add (Person **ptr, const char *name, int age) {
    while (*ptr && strcmp ((*ptr)->name, name) < 0) {
        ptr = &(*ptr)->next;
    }
    if (*ptr == NULL || strcmp ((*ptr)->name, name) != 0) {
        Person *p = person_new (name, age);
        p->next = *ptr;
        *ptr = p;
        return p;
    }
    return NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49808158_49809080_5_32
49808158_49824637_3_29
Title: How do you print different things depending the user input? 
----------------------------------------

int main () {
    char input [20];
    int wrongFlag = 0;
    scanf ("%s", input);
    if (input[0] == '0' && strlen (input) > 1) {
        wrongFlag = 1;
    }
    for (int i = 0; i < strlen (input); i++) {
        if (i == 0 && (input[i] == '-' && strlen (input) > 2 && input[i + 1] == '0')) {
            wrongFlag = 1;
            continue;
        }
        if (i != 0 && !isdigit (input[i])) {
            wrongFlag = 1;
            break;
        }
    }
    if (wrongFlag) {
        printf ("Not integer");
    }
    else {
        printf ("integer");
    }
    return 0;
}
----------------------------------------

int main () {
    int i;
    char value [50];
    int len;
    printf ("Enter maximum 50 digits\n");
    printf ("Enter the value: ");
    gets (value);
    len = strlen (value);
    for (i = 0; i < len; i++) {
        if (48 < value[i] && value[i] <= 57) {
            if (i == (len - 1))
                printf ("It's an integer");
        }
        else {
            printf (" Not an integer");
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49813363_49813423_1_19
49813363_49813534_4_23
Title: How to measure scanf time in a C program? 
----------------------------------------

int main () {
    struct timespec start, finish;
    clock_gettime (CLOCK_REALTIME, & start);
    clock_gettime (CLOCK_REALTIME, & finish);
    long seconds = finish.tv_sec - start.tv_sec;
    long ns = finish.tv_nsec - start.tv_nsec;
    if (start.tv_nsec > finish.tv_nsec) {
        --seconds;
        ns += 1000000000;
    }
    printf ("seconds without ns: %ld\n", seconds);
    printf ("nanoseconds: %ld\n", ns);
    printf ("total seconds: %e\n", (double) seconds + (double) ns / (double) 1000000000);
}
----------------------------------------

int main (void) {
    int i, array [10];
    time_t user_input_time, input_start, input_end;
    input_start = time (NULL);
    for (i = 0; i < 10; i++) {
        scanf ("%d", & array [i]);
    }
    input_end = time (NULL);
    user_input_time = input_end - input_start;
    printf ("User Input Time : %d second\n", (int) user_input_time);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49813363_49813423_1_19
49813363_49813622_4_21
Title: How to measure scanf time in a C program? 
----------------------------------------

int main () {
    struct timespec start, finish;
    clock_gettime (CLOCK_REALTIME, & start);
    clock_gettime (CLOCK_REALTIME, & finish);
    long seconds = finish.tv_sec - start.tv_sec;
    long ns = finish.tv_nsec - start.tv_nsec;
    if (start.tv_nsec > finish.tv_nsec) {
        --seconds;
        ns += 1000000000;
    }
    printf ("seconds without ns: %ld\n", seconds);
    printf ("nanoseconds: %ld\n", ns);
    printf ("total seconds: %e\n", (double) seconds + (double) ns / (double) 1000000000);
}
----------------------------------------

int main (void) {
    int i, array [10];
    struct timeval input_start, input_end;
    gettimeofday (& input_start, NULL);
    for (i = 0; i < 10; i++) {
        scanf ("%d", & array [i]);
    }
    gettimeofday (& input_end, NULL);
    printf ("User Input Time : %d second\n", input_end.tv_sec - input_start.tv_sec);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49813363_49813534_4_23
49813363_49813622_4_21
Title: How to measure scanf time in a C program? 
----------------------------------------

int main (void) {
    int i, array [10];
    time_t user_input_time, input_start, input_end;
    input_start = time (NULL);
    for (i = 0; i < 10; i++) {
        scanf ("%d", & array [i]);
    }
    input_end = time (NULL);
    user_input_time = input_end - input_start;
    printf ("User Input Time : %d second\n", (int) user_input_time);
    return 0;
}
----------------------------------------

int main (void) {
    int i, array [10];
    struct timeval input_start, input_end;
    gettimeofday (& input_start, NULL);
    for (i = 0; i < 10; i++) {
        scanf ("%d", & array [i]);
    }
    gettimeofday (& input_end, NULL);
    printf ("User Input Time : %d second\n", input_end.tv_sec - input_start.tv_sec);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49815014_49815042_4_20
49815014_49815846_1_16
Title: Accept string using scanf and display them using printf 
----------------------------------------

int main () {
    char *a = malloc (size +1);
    int i;
    printf ("\n enter value ");
    for (i = 0; i < 5; i++) {
        printf ("%d Name :\n", i);
        scanf ("%c", & a [i]);
        printf ("%c\n", a [i]);
    }
    printf ("%c\n", a [2]);
    printf ("%c\n", a [3]);
    free (a);
}
----------------------------------------

int main () {
    char *a [5];
    for (int i = 0; i < 5; i++) {
        printf ("%d Name :\n", i);
        a[i] = malloc (MAX);
        scanf ("%s", a [i]);
    }
    for (int i = 0; i < 5; i++) {
        printf ("%s\n", a [i]);
    }
    for (int i = 0; i < 5; i++) {
        free (a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49829314_49829821_4_43
49829314_49829968_3_23
Title: Input string of unknown length 
----------------------------------------

int main () {
    unsigned int len_max = 128;
    char *m = malloc (len_max);
    char c;
    int counter = 0;
    int i;
    int current_size = 256;
    printf ("please input a string\n");
    while ((c = getchar ()) != '\n' && c != EOF) {
        m[counter] = (char) c;
        counter++;
        if (counter == current_size) {
            current_size = i + len_max;
            m = realloc (m, current_size);
        }
    }
    for (i = 0; i < counter; i++) {
        if (m[i] == ' ' && m[i + 1] == ' ') {
            m[i] = '*';
            putchar (m [i]);
            i = i + 2;
            continue;
        }
        putchar (m [i]);
    }
    putchar ('\n');
    free (m);
    m = NULL;
    return 0;
}
----------------------------------------

int main (void) {
    int c = EOF, last = EOF;
    while ((c = getchar ()) != EOF) {
        if (c == ' ' && last == ' ') {
            c = '*';
            last = EOF;
        }
        if (last != EOF)
            putchar (last);
        last = c;
    }
    if (last != EOF)
        putchar (last);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49832970_49833029_4_40
49832970_49833158_5_35
Title: Printing the digits present in the string 
----------------------------------------

int main () {
    char input [200], words [10] [10];
    int length = 0, i = 0, j = 0, k = 0, t;
    fgets (input, 200, stdin);
    while (input[length] != '\0') {
        length++;
    }
    for (i = 1; i <= length; i++) {
        if (input[i] == ',' || input[i] == '}') {
            words[j][k] = '\0';
            j++;
            k = 0;
        }
        else {
            words[j][k] = input[i];
            k++;
        }
    }
    int temp [j];
    for (i = 0; i < j; i++) {
        temp[i] = atoi (words[i]);
        printf ("%d\n", temp [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    enum {N = 200};
    char input [N];
    while (1) {
        printf ("Input: ");
        if (!fgets (input, sizeof (input), stdin) || input[0] == '\n')
            break;
        for (char *p = input; *p;) {
            if (isdigit ((unsigned char) *p)) {
                char *endptr;
                unsigned long long int num = strtoull (p, &endptr, 10);
                printf ("%llu\n", num);
                p = endptr;
            }
            else {
                ++p;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49832970_49833029_4_40
49832970_49834132_5_35
Title: Printing the digits present in the string 
----------------------------------------

int main () {
    char input [200], words [10] [10];
    int length = 0, i = 0, j = 0, k = 0, t;
    fgets (input, 200, stdin);
    while (input[length] != '\0') {
        length++;
    }
    for (i = 1; i <= length; i++) {
        if (input[i] == ',' || input[i] == '}') {
            words[j][k] = '\0';
            j++;
            k = 0;
        }
        else {
            words[j][k] = input[i];
            k++;
        }
    }
    int temp [j];
    for (i = 0; i < j; i++) {
        temp[i] = atoi (words[i]);
        printf ("%d\n", temp [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char input [200], *ptri, *ptr;
    fgets (input, 200, stdin);
    ptr = input;
    while (*ptr != '{' && *ptr != '\0')
        ptr++;
    if (*ptr == '\0') {
        return -1;
    }
    ptr++;
    ptri = ptr;
    while (*ptr != '}' && *ptr != '\0')
        ptr++;
    if (*ptr == '\0') {
        return -1;
    }
    *ptr = '\0';
    ptr = strtok (ptri, s);
    while (ptr != NULL) {
        printf ("%s ", ptr);
        ptr = strtok (NULL, s);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49832970_49833052_4_44
49832970_49833158_5_35
Title: Printing the digits present in the string 
----------------------------------------

int main () {
    char input [200], words [10] [10];
    int length = 0, i = 0, j = 0, k = 0, t;
    fgets (input, 200, stdin);
    while (input[length] != '\0') {
        length++;
    }
    for (i = 1; i <= length; i++) {
        if (input[i] == ',' || input[i] == '}') {
            words[j][k] = '\0';
            j++;
            k = 0;
        }
        else {
            words[j][k] = input[i];
            k++;
        }
    }
    int temp [j];
    for (i = 0; i < j; i++) {
        temp[i] = atoi (words[i]);
        printf ("%d ", temp [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    enum {N = 200};
    char input [N];
    while (1) {
        printf ("Input: ");
        if (!fgets (input, sizeof (input), stdin) || input[0] == '\n')
            break;
        for (char *p = input; *p;) {
            if (isdigit ((unsigned char) *p)) {
                char *endptr;
                unsigned long long int num = strtoull (p, &endptr, 10);
                printf ("%llu\n", num);
                p = endptr;
            }
            else {
                ++p;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49832970_49833052_4_44
49832970_49834132_5_35
Title: Printing the digits present in the string 
----------------------------------------

int main () {
    char input [200], words [10] [10];
    int length = 0, i = 0, j = 0, k = 0, t;
    fgets (input, 200, stdin);
    while (input[length] != '\0') {
        length++;
    }
    for (i = 1; i <= length; i++) {
        if (input[i] == ',' || input[i] == '}') {
            words[j][k] = '\0';
            j++;
            k = 0;
        }
        else {
            words[j][k] = input[i];
            k++;
        }
    }
    int temp [j];
    for (i = 0; i < j; i++) {
        temp[i] = atoi (words[i]);
        printf ("%d ", temp [i]);
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    char input [200], *ptri, *ptr;
    fgets (input, 200, stdin);
    ptr = input;
    while (*ptr != '{' && *ptr != '\0')
        ptr++;
    if (*ptr == '\0') {
        return -1;
    }
    ptr++;
    ptri = ptr;
    while (*ptr != '}' && *ptr != '\0')
        ptr++;
    if (*ptr == '\0') {
        return -1;
    }
    *ptr = '\0';
    ptr = strtok (ptri, s);
    while (ptr != NULL) {
        printf ("%s ", ptr);
        ptr = strtok (NULL, s);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49832970_49833158_5_35
49832970_49834132_5_35
Title: Printing the digits present in the string 
----------------------------------------

int main (void) {
    enum {N = 200};
    char input [N];
    while (1) {
        printf ("Input: ");
        if (!fgets (input, sizeof (input), stdin) || input[0] == '\n')
            break;
        for (char *p = input; *p;) {
            if (isdigit ((unsigned char) *p)) {
                char *endptr;
                unsigned long long int num = strtoull (p, &endptr, 10);
                printf ("%llu\n", num);
                p = endptr;
            }
            else {
                ++p;
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char input [200], *ptri, *ptr;
    fgets (input, 200, stdin);
    ptr = input;
    while (*ptr != '{' && *ptr != '\0')
        ptr++;
    if (*ptr == '\0') {
        return -1;
    }
    ptr++;
    ptri = ptr;
    while (*ptr != '}' && *ptr != '\0')
        ptr++;
    if (*ptr == '\0') {
        return -1;
    }
    *ptr = '\0';
    ptr = strtok (ptri, s);
    while (ptr != NULL) {
        printf ("%s ", ptr);
        ptr = strtok (NULL, s);
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49842604_49842692_1_32
49842604_49842920_13_48
Title: insert an element in binary search tree gives stopped working 
----------------------------------------

void insert (int iElement) {
    if (sRoot == NULL) {
        sRoot = (struct Node *) malloc (sizeof (struct Node));
        sRoot->iData = iElement;
        sRoot->sLeft = NULL;
        sRoot->sRight = NULL;
    }
    else {
        struct Node *current = (struct Node *) malloc (sizeof (struct Node));
        current->iData = iElement;
        current->sLeft = NULL;
        current->sRight = NULL;
        struct Node *parent;
        struct Node *temp;
        parent = sRoot;
        while (parent != NULL) {
            if (iElement > parent->iData) {
                if (parent -> sRight ! = NULL) parent -> sRight = current;
                else
                    parent = parent->sRight;
            }
            if (iElement < parent->iData) {
                if (parent -> sLeft ! = NULL) parent -> sLeft = current;
                else
                    parent = parent->sLeft;
            }
        }
    }
}
----------------------------------------

int insert (int iElement) {
    int success = 1;
    struct Node **current = &sRoot;
    while (success && *current != NULL) {
        if (iElement < (*current)->iData) {
            current = &(*current)->sLeft;
        }
        else if ((*current)->iData < iElement) {
            current = &(*current)->sRight;
        }
        else {
            success = 0;
        }
    }
    if (success) {
        *current = malloc (sizeof (struct Node));
        success = *current != NULL;
        if (success) {
            (*current)->iData = iElement;
            (*current)->sLeft = NULL;
            (*current)->sRight = NULL;
        }
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4987863_22435790_1_11
4987863_5813673_5_22
Title: determine if a string has all unique characters? 
----------------------------------------

bool isUnique (char st [], int size) {
    bool char_set [256] = false;
    for (int i = 0; i < size; i++) {
        if (char_set[st[i]] - '0')
            return false;
        char_set [st [i] - '0') = true;
    }
    return true;
}
----------------------------------------

bool isUnique (string _str) {
    bool char_set [256];
    int len = _str.length ();
    memset (char_set, '\0', 256);
    for (int i = 0; i < len; ++i) {
        int val = _str[i] - '0';
        if (char_set[val]) {
            return false;
        }
        char_set[val] = true;
    }
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4987863_23355376_5_39
4987863_40575812_3_11
Title: determine if a string has all unique characters? 
----------------------------------------

void main (int argc, char *argv []) {
    char *string;
    if (argc < 2) {
        printf ("please specify a string parameter.\n");
        exit (0);
    }
    string = argv[1];
    int i;
    int is_unique = 1;
    char *to_check;
    while (*string) {
        to_check = string + 1;
        while (*to_check) {
            if (*to_check == *string) {
                is_unique = 0;
                break;
            }
            to_check++;
        }
        string++;
    }
    if (is_unique)
        printf ("string is unique\n");
    else
        printf ("string is NOT unique\n");
}
----------------------------------------

int main () {
    string s;
    cin >> s;
    int a [256] = {0};
    int sum = 0;
    for (int i = 0;
    i < s.length ();
    i ++) {if (a [s [i]] == 0) ++ sum;
    a[s[i]] += 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49880034_49880227_12_20
49880034_49880321_1_15
Title: Linked list prints segmentation fault 
----------------------------------------

void makeList (IORB **h, int s) {
    while (s > 0) {
        IORB *temp = (IORB *) malloc (sizeof (IORB));
        temp->base_pri = (rand () % 20);
        temp->link = (*h);
        (*h) = temp;
        s--;
    }
}
----------------------------------------

void makeList (IORB **h, int s) {
    while (s > 0) {
        IORB *temp = (IORB *) malloc (sizeof (IORB));
        temp->base_pri = (rand () % 20);
        temp->link = NULL;
        if (*h == NULL)
            h = temp;
        else {
            temp->link = *h;
            *h = temp;
        }
        s--;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49883415_49883614_1_17
49883415_49884250_12_24
Title: Memory Allocation and Copying to a new struct 
----------------------------------------

void DoubleCapacity (String *s) {
    int newCapa = (s->capa) * 2;
    char *ptr = malloc (newCapa);
    if (ptr == NULL) {
        printf ("Error occurs when allocating memory\n");
        exit (1);
    }
    memcpy (ptr, s -> ptr, len);
    free (s -> ptr);
    s->ptr = ptr;
    s->capa = newCapa;
}
----------------------------------------

int DoubleCapacity (String *s) {
    char *tmp = realloc (s->ptr, 2 * s->capa);
    int success = tmp != NULL;
    if (success) {
        s->ptr = tmp;
        s->capa *= 2;
    }
    return success;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49931538_49931618_2_20
49931538_49931696_1_15
Title: Counting most frequent character in a string 
----------------------------------------

int most_frequent (char *string) {
    int letterCout [52];
    for (int i = 0; i < strlen (string); ++i) {
        if (string[i] >= 'a' && string[i] <= 'z')
            alphabet[string[i] - 'a' + 26]++;
        else if (string[i] >= 'A' && string[i] <= 'Z')
            alphabet[string[i] - 'A']++;
    }
    int max = 0;
    for (int i = 0; i < strlen (string) * 2; ++i)
        if (letterCoutn[i] > max)
            max = letterCount[i];
    return max;
}
----------------------------------------

int most_frequent (char *string) {
    int count [256] = {0};
    int max = 0;
    int i;
    for (i = 0; i < strlen (string); i++) {
        count[(unsigned char) (string[i])]++;
    }
    for (i = 0; i < 256; i++) {
        if (count[i] > max)
            max = count[i];
    }
    return max;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49962856_49963082_2_10
49962856_49963297_6_38
Title: C: The first element of a char cannot be detected 
----------------------------------------

int main (void) {
    printf ("Please type the strings:\n");
    char buffer [1000];
    while ((buffer[0] = getchar ()) != ' ') {
        fgets (buffer + 1, sizeof (buffer), stdin);
        printf ("The output string is: \n%s\n", buffer);
    }
    printf ("A space is detected!\n");
}
----------------------------------------

int main (void) {
    char buffer [MAXC] = "";
    for (;;) {
        size_t len;
        char *delim = " .\n", *p = buffer;
        printf ("\nenter string: ");
        if (!fgets (buffer, sizeof buffer, stdin))
            break;
        len = strlen (buffer);
        if (len && buffer[len - 1] == '\n')
            buffer[--len] = 0;
        else {
            fputs ("error: string too long.\n", stderr);
            return 1;
        }
        if (*buffer == ' ')
            break;
        printf ("buffer: %s  (%zu chars)\n", buffer, len);
        p = strtok (buffer, delim);
        while (p != NULL) {
            printf ("  %s\n", p);
            p = strtok (NULL, delim);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49962860_49962928_6_23
49962860_49963050_4_31
Title: Improving code in C 
----------------------------------------

int main (void) {
    float inner_d, outer_d, surface_area, radius;
    printf ("Enter the outer diameter:\n");
    scanf ("%f", & outer_d);
    printf ("Enter the inner diameter:\n");
    scanf ("%f", & inner_d);
    if (inner_d < 0 || outer_d < 0 || inner_d >= outer_d) {
        return EXIT_FAILURE;
    }
    float inner_a = (inner_d / 2) * (inner_d / 2) * pi;
    float outer_a = (outer_d / 2) * (outer_d / 2) * pi;
    surface_area = outer_a - inner_a;
    printf ("Your surface area is: %f\n", surface_area);
    return 0;
}
----------------------------------------

int main (void) {
    float inner_d, outer_d, surface_area, radius;
    printf ("Enter the outer diameter:\n");
    scanf ("%f", & outer_d);
    printf ("Enter the inner diameter:\n");
    scanf ("%f", & inner_d);
    if (inner_d <= 0.0) {
        printf ("Inner_d must be positive number");
    }
    if (outer_d <= 0.0) {
        printf ("Outer_d must be positive number");
    }
    if (inner_d > outer_d) {
        printf ("Inner_d must less than outer_d");
    }
    float inner_a = (inner_d / 2) * (inner_d / 2) * pi;
    float outer_a = (outer_d / 2) * (outer_d / 2) * pi;
    surface_area = outer_a - inner_a;
    printf ("Your surface area is: %f\n", surface_area);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49968214_49968310_1_13
49968214_49968366_1_14
Title: C function to remove vowels in a string not working? 
----------------------------------------

char *removeVowels (char *inString) {
    int count = 0;
    for (int i = 0; inString[i]; i++) {
        if (inString[i] != 'a' && inString[i] != 'e' && inString[i] != 'i' && inString[i] != 'o' && inString[i] != 'u') {
            inString[count++] = inString[i];
        }
    }
    inString[count] = '\0';
    return inString;
}
----------------------------------------

char *removeVowels (char *inString, int size) {
    char newString [size];
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (inString[i] != 'a' && inString[i] != 'e' && inString[i] != 'i' && inString[i] != 'o' && inString[i] != 'u') {
            newString[count] = inString[i];
            count++;
        }
    }
    newString[count] = '\0';
    return newString;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49968515_49969333_66_83
49968515_49969451_1_13
Title: Reversing a doubly linked list returns nothing 
----------------------------------------

void reverse (struct List *it) {
    struct Node *temp;
    struct Node *corr;
    corr = it->curr;
    while (corr != NULL) {
        temp = corr->prev;
        corr->prev = corr->next;
        corr->next = temp;
        it->curr = corr;
        corr = corr->prev;
    }
    return;
}
----------------------------------------

void reverse (List it) {
    Node *last = NULL;
    Node *corr = it->curr;
    while (corr != NULL) {
        Node *temp = corr->prev;
        corr->prev = corr->next;
        corr->next = temp;
        last = corr;
        corr = corr->prev;
    }
    it->curr = last;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
49991093_49991158_3_21
49991093_49991160_3_10
Title: Command line arguments that has options 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc != 2) {
        fprintf (stderr, "usage: %s option\n", argv [0]);
        return 1;
    }
    if (strcmp (argv[1], "-i") == 0)
        puts ("Test 1");
    else if (strcmp (argv[1], "-w") == 0)
        puts ("Test 2");
    else {
        fprintf (stderr, "Invalid option '%s'\n", argv [1]);
        return 1;
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    printf ("The name of the program is %s\n", argv [0]);
    if (strcmp (argv[1], "-i") == 0) {
        puts ("Test 1");
    }
    if (strcmp (argv[1], "-w") == 0) {
        puts ("Test 2");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
499939_27163871_2_14
499939_34385090_4_35
Title: Extract decimal part from a floating point number in C 
----------------------------------------

int main () {
    char *inStr = "123.4567";
    char *endptr;
    char *loc = strchr (inStr, '.');
    long mantissa = strtod (loc +1, endptr);
    long whole = strtod (inStr, endptr);
    printf ("whole: %d \n", whole);
    printf ("mantissa: %d", mantissa);
}
----------------------------------------

int main (void) {
    char s_value [60], s_integral [60], s_fractional [60];
    int i, found = 0, count = 1, integral, fractional;
    scanf ("%s", s_value);
    for (i = 0; s_value[i] != '\0'; i++) {
        if (!found) {
            if (s_value[i] == '.') {
                found = 1;
                s_integral[i] = '\0';
                continue;
            }
            s_integral[i] = s_value[i];
            count++;
        }
        else
            s_fractional[i - count] = s_value[i];
    }
    s_fractional[i - count] = '\0';
    integral = atoi (s_integral);
    fractional = atoi (s_fractional);
    printf ("value = %s, integral = %d, fractional = %d\n", s_value, integral, fractional);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50006348_50007692_23_74
50006348_50011446_46_66
Title: create numeric expression in c using char and int variables 
----------------------------------------

int main () {
    char expr [256];
    FILE *fp = stdin;
    char *rv;
    int left, right;
    enum operation oper = CONTINUE;
    while (oper != QUIT) {
        fputc (':', stdout);
        rv = fgets (expr, sizeof (expr), fp);
        if (rv == NULL) {
            if (feof (fp)) {
                fprintf (stderr, "someone closed the input\n");
                break;
            }
            if (ferror (fp)) {
                fprintf (stderr, "something bad happened\n");
                break;
            }
        }
        oper = parse (expr, &left, &right);
        switch (oper) {
        case CONTINUE :
            fprintf (stderr, "%d\n", left);
            continue;
        case INVALID :
            fprintf (stderr, "><![CDATA[ Don't know what to do with %-32s...\n", expr);
            continue;
        case QUIT :
            fprintf (stderr, "><![CDATA[ quitting\n");
            break;
        case PLUS :
            fprintf (stdout, "%d\n", left +right);
            break;
        case MINUS :
            fprintf (stdout, "%d\n", left -right);
            break;
        case MULTIPLY :
            fprintf (stdout, "%d\n", left *right);
            break;
        case DIVIDE :
            fprintf (stdout, "%d\n", left / right);
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc > 1) {
        for (int i = 1; i < argc; i++) {
            printf ("%s -> %lld\n", argv [i], eval (argv [i]));
        }
    }
    else {
        char buf [80];
        int a = 1, b = 2, c = 3, w = 4, result;
        for (int i = 0; i < 4 * 4 * 4; i++) {
            snprintf (buf, sizeof buf, "%d %c %d %c %d %c %d", a, "+-/*" [i / 16], b, "+-/*" [i / 4 % 4], c, "+-/*" [i % 4], w);
            result = eval (buf);
            printf ("%s -> %d\n", buf, result);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50028900_50029123_18_30
50028900_50031555_1_20
Title: qsort comparator function doesn't order the entire array (leaves 1 element out) 
----------------------------------------

int lcomparator (const void *el1, const void *el2) {
    unsigned long l1 = ((elemento *) el1)->linha;
    unsigned long l2 = ((elemento *) el2)->linha;
    unsigned long c1 = ((elemento *) el1)->coluna;
    unsigned long c2 = ((elemento *) el2)->coluna;
    if (l1 != l2) {
        return compare_helper (l1, l2);
    }
    return compare_helper (c1, c2);
}
----------------------------------------

int lcomparator (const void *el1, const void *el2) {
    unsigned long l1 = ((elemento *) el1)->linha;
    unsigned long l2 = ((elemento *) el2)->linha;
    unsigned long c1 = ((elemento *) el1)->coluna;
    unsigned long c2 = ((elemento *) el2)->coluna;
    if (l1 < l2) {
        return -1;
    }
    if (l1 > l2) {
        return 1;
    }
    if (c1 < c2) {
        return -1;
    }
    if (c1 > c2) {
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50033111_50033196_5_24
50033111_50033222_7_26
Title: Using concat in C without string library functions or array notation 
----------------------------------------

char *concat (char *first, char *second) {
    int string1Len = strlen (first);
    int string2Len = strlen (second);
    int length = string1Len + string2Len;
    char *string = malloc (sizeof (char) * length + 1);
    assert (string);
    int i = 0;
    while (i < string1Len) {
        string[i] = *first;
        first += 1;
        i += 1;
    }
    while (i < length) {
        string[i] = *second;
        second += 1;
        i += 1;
    }
    string[i] = '\0';
    return string;
}
----------------------------------------

char *concat (char const *first, char const *second) {
    assert (first && second);
    size_t first_len = strlen (first);
    size_t second_len = strlen (second);
    size_t length = first_len + second_len;
    char *string = malloc (length +1);
    if (!string) {
        return NULL;
    }
    size_t i = 0;
    while (*first) {
        string[i++] = *first++;
    }
    while (*second) {
        string[i++] = *second++;
    }
    string[i] = '\0';
    return string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50033111_50033196_5_24
50033111_50033936_1_25
Title: Using concat in C without string library functions or array notation 
----------------------------------------

char *concat (char *first, char *second) {
    int string1Len = strlen (first);
    int string2Len = strlen (second);
    int length = string1Len + string2Len;
    char *string = malloc (sizeof (char) * length + 1);
    assert (string);
    int i = 0;
    while (i < string1Len) {
        string[i] = *first;
        first += 1;
        i += 1;
    }
    while (i < length) {
        string[i] = *second;
        second += 1;
        i += 1;
    }
    string[i] = '\0';
    return string;
}
----------------------------------------

char *concat (char *s1, const char *s2) {
    size_t i = 0;
    while (*s1++)
        i++;
    size_t s1_len = i;
    i = 0;
    s1 -= s1_len + 1;
    while (*s2++)
        i++;
    size_t s2_len = i;
    i = 0;
    s2 -= s2_len + 1;
    char *newStr = (char *) malloc ((s1_len + s2_len) + 1);
    if (!newStr)
        return newStr;
    char *ptr = newStr;
    while (*ptr++ = *s1++)
        ;
    *ptr--;
    while (*ptr++ = *s2++)
        ;
    return newStr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50033111_50033196_5_24
50033111_50034111_1_21
Title: Using concat in C without string library functions or array notation 
----------------------------------------

char *concat (char *first, char *second) {
    int string1Len = strlen (first);
    int string2Len = strlen (second);
    int length = string1Len + string2Len;
    char *string = malloc (sizeof (char) * length + 1);
    assert (string);
    int i = 0;
    while (i < string1Len) {
        string[i] = *first;
        first += 1;
        i += 1;
    }
    while (i < length) {
        string[i] = *second;
        second += 1;
        i += 1;
    }
    string[i] = '\0';
    return string;
}
----------------------------------------

char *concat (const char *first, const char *second) {
    const char *p1 = first;
    while (*p1) {
        p1++;
    }
    const char *p2 = second;
    while (*p2) {
        p2++;
    }
    char *string = malloc ((p1 - first) + (p2 - second) + 1);
    if (string) {
        char *ps = string;
        while ((*ps = *first++)) {
            ps++;
        }
        while ((*ps = *second++)) {
            ps++;
        }
    }
    return string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50033111_50033222_7_26
50033111_50033936_1_25
Title: Using concat in C without string library functions or array notation 
----------------------------------------

char *concat (char const *first, char const *second) {
    assert (first && second);
    size_t first_len = strlen (first);
    size_t second_len = strlen (second);
    size_t length = first_len + second_len;
    char *string = malloc (length +1);
    if (!string) {
        return NULL;
    }
    size_t i = 0;
    while (*first) {
        string[i++] = *first++;
    }
    while (*second) {
        string[i++] = *second++;
    }
    string[i] = '\0';
    return string;
}
----------------------------------------

char *concat (char *s1, const char *s2) {
    size_t i = 0;
    while (*s1++)
        i++;
    size_t s1_len = i;
    i = 0;
    s1 -= s1_len + 1;
    while (*s2++)
        i++;
    size_t s2_len = i;
    i = 0;
    s2 -= s2_len + 1;
    char *newStr = (char *) malloc ((s1_len + s2_len) + 1);
    if (!newStr)
        return newStr;
    char *ptr = newStr;
    while (*ptr++ = *s1++)
        ;
    *ptr--;
    while (*ptr++ = *s2++)
        ;
    return newStr;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50033111_50033222_7_26
50033111_50034111_1_21
Title: Using concat in C without string library functions or array notation 
----------------------------------------

char *concat (char const *first, char const *second) {
    assert (first && second);
    size_t first_len = strlen (first);
    size_t second_len = strlen (second);
    size_t length = first_len + second_len;
    char *string = malloc (length +1);
    if (!string) {
        return NULL;
    }
    size_t i = 0;
    while (*first) {
        string[i++] = *first++;
    }
    while (*second) {
        string[i++] = *second++;
    }
    string[i] = '\0';
    return string;
}
----------------------------------------

char *concat (const char *first, const char *second) {
    const char *p1 = first;
    while (*p1) {
        p1++;
    }
    const char *p2 = second;
    while (*p2) {
        p2++;
    }
    char *string = malloc ((p1 - first) + (p2 - second) + 1);
    if (string) {
        char *ps = string;
        while ((*ps = *first++)) {
            ps++;
        }
        while ((*ps = *second++)) {
            ps++;
        }
    }
    return string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50033111_50033936_1_25
50033111_50034111_1_21
Title: Using concat in C without string library functions or array notation 
----------------------------------------

char *concat (char *s1, const char *s2) {
    size_t i = 0;
    while (*s1++)
        i++;
    size_t s1_len = i;
    i = 0;
    s1 -= s1_len + 1;
    while (*s2++)
        i++;
    size_t s2_len = i;
    i = 0;
    s2 -= s2_len + 1;
    char *newStr = (char *) malloc ((s1_len + s2_len) + 1);
    if (!newStr)
        return newStr;
    char *ptr = newStr;
    while (*ptr++ = *s1++)
        ;
    *ptr--;
    while (*ptr++ = *s2++)
        ;
    return newStr;
}
----------------------------------------

char *concat (const char *first, const char *second) {
    const char *p1 = first;
    while (*p1) {
        p1++;
    }
    const char *p2 = second;
    while (*p2) {
        p2++;
    }
    char *string = malloc ((p1 - first) + (p2 - second) + 1);
    if (string) {
        char *ps = string;
        while ((*ps = *first++)) {
            ps++;
        }
        while ((*ps = *second++)) {
            ps++;
        }
    }
    return string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50042818_50043432_60_94
50042818_50043945_29_70
Title: Generic linked list? 
----------------------------------------

int main () {
    list l;
    TLV *tag;
    unsigned char test2 [2] = {1, 2};
    unsigned char test3 [3] = {1, 2, 3};
    unsigned char test4 [4] = {1, 2, 3, 4};
    listNew (& l, sizeof (TLV *), listFree, Print);
    tag = allocateTLV (2, sizeof (test2), test2);
    if (tag != NULL) {
        listPushFront (& l, & tag);
    }
    tag = allocateTLV (3, sizeof (test3), test3);
    if (tag != NULL) {
        listPushFront (& l, & tag);
    }
    tag = allocateTLV (4, sizeof (test4), test4);
    if (tag != NULL) {
        listPushFront (& l, & tag);
    }
    listPrint (& l);
    listDestroy (& l);
    return 0;
}
----------------------------------------

int main (void) {
    const char *str [] = {"0x0001", "0x0002", "0x0003",};
    node *head = NULL;
    node *tail = NULL;
    lst_nodeAdd (& head, & tail, str [0], strlen (str [0]) + 1);
    lst_nodeAdd (& head, & tail, str [1], strlen (str [1]) + 1);
    lst_nodeAdd (& head, & tail, str [2], strlen (str [2]) + 1);
    lst_nodePrint (head, print_string);
    lst_nodeFree (head);
    head = NULL;
    tail = NULL;
    int int_array [] = {0, 1, 2,};
    lst_nodeAdd (& head, & tail, & int_array [0], sizeof (int));
    lst_nodeAdd (& head, & tail, & int_array [1], sizeof (int));
    lst_nodeAdd (& head, & tail, & int_array [2], sizeof (int));
    lst_nodePrint (head, print_int);
    lst_nodeFree (head);
    head = NULL;
    tail = NULL;
    system ("PAUSE");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50073177_50073270_5_29
50073177_50073298_1_25
Title: Removing every occurance of \n in a string in C 
----------------------------------------

int main () {
    char an_name [20], new_name [20];
    int i;
    strcpy (an_name, "Ant\nho ny");
    printf ("\nBefore removing: %s\n", an_name);
    printf ("%ld", strlen (an_name));
    int j = 0;
    for (i = 0; i < strlen (an_name); i++) {
        printf ("\nthe loop: %d", i);
        if (!isspace (an_name[i])) {
            new_name[j++] = an_name[i];
        }
    }
    new_name[j] = '\0';
    printf ("\nAfter removing: %s\n", new_name);
    printf ("%ld", strlen (an_name));
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    char an_name [20], new_name [20];
    int i;
    int j = 0;
    strcpy (an_name, "Ant\nhony");
    printf ("Tacos are delicious!\n");
    printf ("\nBefore removing: %s", an_name);
    printf ("%d", strlen (an_name));
    for (i = 0; i < strlen (an_name); i++) {
        printf ("\nthe loop: %d", i);
        if (!isspace (an_name[i])) {
            j++;
            new_name[j] = an_name[i];
        }
    }
    printf ("\nAfter removing: %s\n", new_name);
    printf ("%d", strlen (an_name));
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5008029_5008618_14_35
5008029_5008620_1_25
Title: How can I write a string into a two dimensional array in C? 
----------------------------------------

int main () {
    int x, y;
    char t [] = "GOODMORN";
    int edge = 1 + (int) sqrt ((double) strlen (t));
    int vert = 2, horiz = 4;
    char *textbuf = (char *) calloc (vert, horiz);
    char **matrix = matrixify (strncpy (textbuf, t, vert * horiz), vert, horiz);
    for (y = 0; y < vert; y++) {
        for (x = 0; x < horiz; x++)
            printf ("%c ", matrix[y][x]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char A [12] = "Hello World", **B;
    int B_LEN = strlen (A) / 2 + 1;
    B = (char **) malloc (2 * sizeof (char *));
    B[0] = (char *) malloc (B_LEN * sizeof (char));
    B[1] = (char *) malloc (B_LEN * sizeof (char));
    int i, j;
    for (i = 0; i < 2; i++) {
        for (j = 0; j < B_LEN; j++) {
            B[i][j] = A[B_LEN * i + j];
        }
        B[i][j] = '\0';
    }
    printf ("%s", B [0]);
    printf ("[END]\n");
    printf ("%s\n", B [1]);
    printf ("[END]\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50103161_50103307_5_20
50103161_50104071_5_34
Title: right i have this code and the system command keeps coming up with errors 
----------------------------------------

int main () {
    int i = 0;
    while (i <= 999999) {
        char cmd [100];
        sprintf (cmd, "./lock %d", i);
        if (system (cmd) == 0) {
            printf ("Success with i = %d\n", i);
            exit (0);
        }
        ++i;
    }
    return !printf ("Error. Unable to crack file.\n");
}
----------------------------------------

int main () {
    int i;
    char cmd [100];
    char line [1000];
    FILE *fp;
    for (i = 0; i <= 999999; i++) {
        sprintf (cmd, "./lock %d", i);
        fp = popen (cmd, "r");
        if (fp == NULL) {
            fprintf (stderr, "Could not run command: %s\n", cmd);
            return 1;
        }
        while (fgets (line, sizeof (line) - 1, fp) != NULL) {
            if (strstr (line, "Access Granted!") != NULL) {
                printf ("Success with i = %d\n", i);
                pclose (fp);
                return 0;
            }
        }
        pclose (fp);
    }
    printf ("Unable to crack file.\n");
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50104878_50106222_3_15
50104878_50108885_1_14
Title: Chaining 2 Strings in C 
----------------------------------------

char *concat (char *result, const char *s1, const char *s2) {
    int lengh1 = strlen (s1);
    int lengh2 = strlen (s2);
    int i = 0;
    for (i = 0; i < lengh1; i++) {
        result[i] = s1[i];
    }
    for (i = 0; i < lengh2; i++) {
        result[i + lengh1] = s2[i];
    }
    return result;
}
----------------------------------------

char *concat (const char *s1, const char *s2) {
    int length1 = simple_strlen (s1);
    int length2 = simple_strlen (s2);
    char *result = malloc (length1 +length2 + 1);
    int i, j;
    for (i = 0; i < length1; i++) {
        result[i] = s1[i];
    }
    for (i = 0; i < length2; i++) {
        result[length1 + i] = s2[1];
    }
    result[length1 + length2] = '\0';
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50108863_50109032_1_17
50108863_50109203_2_15
Title: Compute the most frequent digit in a string of digits in C 
----------------------------------------

int most (const char *s) {
    int count < : 10 : > = {0};
    int res, i, max;
    while (*s) {
        if (* s >= '0' && * s <= '9') count < : * s - '0' : > ++;
        s++;
    }
    res = -1;
    max = 0;
    for (i = 0; i < 10; i++) {
        if (count < : i : > > max) res = i;
    }
    return res;
}
----------------------------------------

int most (char *nums) {
    int i, max_index = 0;
    int digit_dictionary [10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    for (i = 0; i < strlen (nums); i++) {
        digit_dictionary[nums[i] - '0']++;
    }
    for (i = 1; i < 10; i++) {
        if (digit_dictionary[i] > digit_dictionary[max_index])
            max_index = i;
    }
    return max_index;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50109751_50109799_16_33
50109751_50116281_14_37
Title: What is wrong with my strtok() implementation (C)? 
----------------------------------------

char *Sstrtok (char *str, const char *delim) {
    int i;
    i = 0;
    if (str == NULL) {
        str = p + 1;
    }
    while (str[i] != 0) {
        if (Belongs (str[i], delim) == 1) {
            str[i] = 0;
            p = str + i;
            return str;
        }
        i++;
    }
    p = str + i;
    return *str ? str : NULL;
}
----------------------------------------

char *Sstrtok (char *str, const char *delim) {
    int i;
    char *result;
    if (str == NULL) {
        str = Sstrtok_static_state;
        if (str == NULL)
            return NULL;
    }
    Sstrtok_static_state = NULL;
    for (i = 0; str[i]; i++) {
        if (!Belongs (str[i], delim)) {
            result = str + i;
            for (i++; str[i]; i++) {
                if (Belongs (str[i], delim)) {
                    str[i] = '\0';
                    Sstrtok_static_state = str + i + 1;
                    return result;
                }
            }
            return result;
        }
    }
    return NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50110293_50110378_1_19
50110293_50111803_25_44
Title: Will not filter prime out and giving the wrong factor number in c 
----------------------------------------

bool factor (int number, int *firstFactor, int *secondFactor) {
    int i;
    i = sqrt (number);
    int prime = 1;
    for (i; i > 1; i--) {
        if (number % i == 0) {
            prime = 0;
            *firstFactor = i;
            *secondFactor = number / i;
            break;
        }
    }
    return (prime == 1);
}
----------------------------------------

bool factor (int number, int *firstFactor, int *secondFactor) {
    int i;
    i = sqrt (number);
    prime = true;
    for (i; i > 1; i--) {
        if (number % i == 0) {
            printf ("%d ", i);
            prime = false;
            break;
        }
    }
    *firstFactor = i;
    *secondFactor = number / i;
    return (prime);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50112205_50112290_1_27
50112205_50112586_12_30
Title: How to separate a string into multiple other strings of specific lengths in C? 
----------------------------------------

void breakString (const char *lineStr) {
    char a [8];
    char b [6];
    char c [6];
    char d [8];
    char e [7];
    strncpy (a, lineStr, 7);
    a[7] = '\0';
    lineStr += 7;
    strncpy (b, lineStr, 5);
    b[5] = '\0';
    lineStr += 5;
    strncpy (c, lineStr, 5);
    c[5] = '\0';
    lineStr += 5;
    strncpy (d, lineStr, 7);
    d[7] = '\0';
    lineStr += 7;
    strncpy (e, lineStr, 6);
    e[6] = '\0';
}
----------------------------------------

void breakString (const char *lineStr) {
    char a [7 + 1];
    char b [5 + 1];
    char c [5 + 1];
    char d [7 + 1];
    char e [6 + 1];
    size_t pos = 0;
    pos += getchunk (a, 7, lineStr +pos);
    pos += getchunk (b, 5, lineStr +pos);
    pos += getchunk (c, 5, lineStr +pos);
    pos += getchunk (d, 7, lineStr +pos);
    pos += getchunk (e, 6, lineStr +pos);
    if (e[0] != '\0') {
        printf ("a: %s\nb: %s\nc: %s\nd: %s\ne: %s\n", a, b, c, d, e);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5012126_5012162_3_14
5012126_5012327_3_26
Title: SImple C Program opening a file 
----------------------------------------

int main (void) {
    FILE *fp;
    fp = fopen ("write.txt", "w");
    if (fp == NULL) {
        printf ("File not created okay, errno = %d\n", errno);
        return 1;
    }
    fclose (fp);
    printf ("File created okay\n");
    return 0;
}
----------------------------------------

int main () {
    FILE
    * fp, char ch;
    fp = fopen ("write.txt", "r");
    if (fp == NULL) {
        printf ("Some problem in opening the file");
        exit (0);
    }
    else {
        while ((ch = fgetc (fp)) != EOF) {
            printf ("%c", ch);
        }
    }
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50138700_50139929_1_14
50138700_50140253_9_22
Title: Pointers and linked list in C | Crash on display 
----------------------------------------

void create (list **start, list *new) {
    int data;
    printf ("Input value : ");
    scanf ("%d", & data);
    if (data != 0) {
        new = malloc (sizeof (list));
        new->data = data;
        new->right = *start;
        *(start) = new;
        create (start, new);
    }
    else
        return;
}
----------------------------------------

void create (list **start) {
    int data;
    printf ("Input value : ");
    scanf ("%d", & data);
    if (data == 0) {
        start = NULL;
        return;
    }
    else {
        *start = (list *) malloc (sizeof (list));
        (*start)->data = data;
        create (& (* start) -> right);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5014272_5014297_1_15
5014272_5014556_1_15
Title: C program logic implementation 
----------------------------------------

function1 () {
    for (count = 1; condition && count <= 9; count++) {
        sleep (1);
    }
    if (count > 9) {
        return;
    }
    function2 ();
    return;
}
----------------------------------------

function1 () {
    for (count = 1; count <= 9; ++count) {
        if (!condition) {
            function2 ();
            break;
        }
        sleep (1);
    }
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50145882_50145965_1_37
50145882_50146587_1_19
Title: My code in C for the UNION of two sets is not working 
----------------------------------------

int compute_union (int s1 [], int s2 [], int max_size, int set_union []) {
    int num_elements = 0;
    for (int i = 0; i < size1; ++i) {
        int present = 0;
        for (int n = 0; n < num_elements; ++n) {
            if (set_union[n] == s1[i]) {
                present = 1;
                break;
            }
        }
        if (present == 0) {
            set_union[num_elements] = s1[i];
            ++num_elements;
        }
    }
    for (int i = 0; i < size2; ++i) {
        int present = 0;
        for (int n = 0; n < num_elements; ++n) {
            if (set_union[n] == s2[i]) {
                present = 1;
                break;
            }
        }
        if (present == 0) {
            set_union[num_elements] = s2[i];
            ++num_elements;
        }
    }
    return num_elements;
}
----------------------------------------

int compute_union (int s1 [], int s2 [], int max_size, int set_union []) {
    int i = 0;
    int cursize = 0;
    for (i = 0; i < size1; ++i) {
        if (srch (set_union, cursize, s1[i]) == 0) {
            set_union[cursize++] = s1[i];
        }
    }
    for (i = 0; i < size2; ++i) {
        if (srch (set_union, cursize, s2[i]) == 0) {
            set_union[cursize++] = s2[i];
        }
    }
    return cursize;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50155739_50156271_15_29
50155739_50156530_11_26
Title: summing numbers using pointer arithmetic 
----------------------------------------

int main () {
    int a [N], *i, x;
    printf ("Enter %d Numbers: ", N);
    for (i = a; i < a + N; i++)
        scanf ("%d", i);
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------

int main (void) {
    int a [N], i = 0, x = 0;
    printf ("Enter %d Numbers: ", N);
    for (i = 0; i < N; i++)
        scanf ("%d", a +i);
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50155739_50156271_15_29
50155739_50156588_18_41
Title: summing numbers using pointer arithmetic 
----------------------------------------

int main () {
    int a [N], *i, x;
    printf ("Enter %d Numbers: ", N);
    for (i = a; i < a + N; i++)
        scanf ("%d", i);
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------

int main () {
    int *a, *i, x;
    a = malloc (N * sizeof (*a));
    if (a == NULL)
        exit (-1);
    printf ("Enter %d Numbers: ", N);
    for (i = a; i < a + N; i++) {
        scanf ("%d", i);
    }
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50155739_50156271_15_29
50155739_50181076_7_29
Title: summing numbers using pointer arithmetic 
----------------------------------------

int main () {
    int a [N], *i, x;
    printf ("Enter %d Numbers: ", N);
    for (i = a; i < a + N; i++)
        scanf ("%d", i);
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------

int main (void) {
    int num = 0;
    int sum = 0;
    printf ("Enter %d Numbers: ", N);
    for (size_t i = 0; i < N; i++) {
        if (scanf ("%d", &num) != 1) {
            fprintf (stderr, "failed to read number\n");
            exit (EXIT_FAILURE);
        }
        sum += num;
    }
    printf ("the sum  is %d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50155739_50156530_11_26
50155739_50156588_18_41
Title: summing numbers using pointer arithmetic 
----------------------------------------

int main (void) {
    int a [N], i = 0, x = 0;
    printf ("Enter %d Numbers: ", N);
    for (i = 0; i < N; i++)
        scanf ("%d", a +i);
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------

int main () {
    int *a, *i, x;
    a = malloc (N * sizeof (*a));
    if (a == NULL)
        exit (-1);
    printf ("Enter %d Numbers: ", N);
    for (i = a; i < a + N; i++) {
        scanf ("%d", i);
    }
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50155739_50156530_11_26
50155739_50181076_7_29
Title: summing numbers using pointer arithmetic 
----------------------------------------

int main (void) {
    int a [N], i = 0, x = 0;
    printf ("Enter %d Numbers: ", N);
    for (i = 0; i < N; i++)
        scanf ("%d", a +i);
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------

int main (void) {
    int num = 0;
    int sum = 0;
    printf ("Enter %d Numbers: ", N);
    for (size_t i = 0; i < N; i++) {
        if (scanf ("%d", &num) != 1) {
            fprintf (stderr, "failed to read number\n");
            exit (EXIT_FAILURE);
        }
        sum += num;
    }
    printf ("the sum  is %d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50155739_50156588_18_41
50155739_50181076_7_29
Title: summing numbers using pointer arithmetic 
----------------------------------------

int main () {
    int *a, *i, x;
    a = malloc (N * sizeof (*a));
    if (a == NULL)
        exit (-1);
    printf ("Enter %d Numbers: ", N);
    for (i = a; i < a + N; i++) {
        scanf ("%d", i);
    }
    x = sum_array (a, N);
    printf ("the sum  is %d\n", x);
    return 0;
}
----------------------------------------

int main (void) {
    int num = 0;
    int sum = 0;
    printf ("Enter %d Numbers: ", N);
    for (size_t i = 0; i < N; i++) {
        if (scanf ("%d", &num) != 1) {
            fprintf (stderr, "failed to read number\n");
            exit (EXIT_FAILURE);
        }
        sum += num;
    }
    printf ("the sum  is %d\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50203330_50203467_1_15
50203330_50203611_1_10
Title: How to access elements of char array passed as a parameter to a function in c? 
----------------------------------------

void test (char **s, int len) {
    char *str = (char *) malloc (sizeof (char) * (len + 1));
    int i;
    for (i = 0; i < len; i++)
        str[i] = 'a';
    str[len] = 0;
    printf ("%s\n", str);
    *s = str;
}
----------------------------------------

void test (char **s, int len) {
    char *p = malloc (len +1);
    int i;
    for (i = 0; i < len; i++) {
        p[i] = 'a';
    }
    p[i] = '\0';
    printf ("%s\n", p);
    *s = p;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50230953_50231158_1_33
50230953_50231467_3_24
Title: Merge Sort Error : Segmentation Fault 
----------------------------------------

void merge (int s, int e, int m, int n []) {
    int l1 = m - s + 1;
    int l2 = e - m;
    int a1 [l1];
    int a2 [l2];
    for (int i = 0; i < l1; i++) {
        a1[i] = n[s + i];
    }
    for (int j = 0; j < l2; j++) {
        a2[j] = n[m + j + 1];
    }
    int i = 0, j = 0;
    for (int k = 0; k < l1 + l2; k++) {
        if (a1[i] <= a2[j] && i != l1 && j != l2) {
            n[k] = a1[i];
            i++;
        }
        else if (a2[j] <= a1[i] && i != l1 && j != l2) {
            n[k] = a2[j];
            j++;
        }
        else if (j == l2 && i != l1) {
            n[k] = a1[i];
            i++;
        }
        else if (i == l1 && j != l2) {
            n[k] = a2[j];
            j++;
        }
    }
}
----------------------------------------

void merge (int s, int e, int m, int n []) {
    int l1 = m - s;
    int l2 = e - m;
    int a1 [l1];
    int a2 [l2];
    for (int i = 0; i < l1; i++) {
        a1[i] = n[s + i];
    }
    for (int j = 0; j < l2; j++) {
        a2[j] = n[m + j];
    }
    for (int i = 0, j = 0, k = 0; k < l1 + l2; k++) {
        if (i < l1 && (j >= l2 || a1[i] <= a2[j])) {
            n[s + k] = a1[i];
            i++;
        }
        else {
            n[s + k] = a2[j];
            j++;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50230963_50231584_54_86
50230963_50231988_4_24
Title: split a string by a character without strtok in c 
----------------------------------------

int main () {
    char longstring [1024];
    char **tokens;
    char ch;
    unsigned long s;
    printf ("please enter a long string\n");
    gets (longstring);
    s = strlen (longstring);
    printf ("please choose seperationg charcter\n");
    scanf ("%c", & ch);
    if ((ch < 'A') || ((ch > 'Z') && (ch < 'a')) || (ch > 'z')) {
        tokens = str_split (longstring, ch);
        if (tokens) {
            int i;
            for (i = 0; *(tokens + i); i++) {
                printf ("%s\n", * (tokens + i));
                free (* (tokens + i));
            }
            printf ("\n");
            free (tokens);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char longstring [256];
    int i, len;
    char sep;
    printf ("please enter a long string\n");
    if (fgets (longstring, sizeof longstring, stdin)) {
        len = strlen (longstring);
        printf ("please choose a separationg character: ");
        if (scanf ("%c", &sep) != 1)
            return 1;
        for (i = 0; i < len; i++) {
            if (longstring[i] == sep)
                putchar ('\n');
            else
                putchar (longstring[i]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50235725_50235955_3_19
50235725_50235956_2_22
Title: printing line number in c using getchar and putchar 
----------------------------------------

int main () {
    int c, lastc = '\n';
    int counter = 1;
    while ((c = getchar ()) != EOF) {
        if (lastc == '\n') {
            putchar ('0' + counter / 10 % 10);
            putchar ('0' + counter % 10);
            putchar (':');
            putchar (' ');
            counter++;
        }
        putchar (c);
        lastc = c;
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    int counter = 1;
    putchar ('0');
    putchar ('1');
    putchar (':');
    putchar (' ');
    while ((c = getchar ()) != EOF) {
        putchar (c);
        if (c == '\n') {
            ++counter;
            putchar (counter / 10 + '0');
            putchar (counter % 10 + '0');
            putchar (':');
            putchar (' ');
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50252580_50253638_3_14
50252580_50254138_5_20
Title: "How do I read user input across multiple lines spaces etc?" 
----------------------------------------

int main () {
    char user_input [1000];
    int i = 0;
    while (scanf ("%c", &user_input[i]) == 1) {
        i++;
    }
    user_input[i] = '\0';
    printf ("%d\n", i);
    printf ("%s", user_input);
    return 0;
}
----------------------------------------

int main () {
    char user_input [1000] = {0};
    int i = 0;
    char c;
    while ((c = getchar ()) != EOF) {
        user_input[i] = c;
        ++i;
        if (i >= sizeof (user_input) - 1)
            break;
    }
    user_input[i] = 0;
    printf ("user input: %s\r\n", user_input);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50276364_50276465_3_26
50276364_50277772_1_18
Title: Keep leading zeros when integer length is unknown 
----------------------------------------

int main (void) {
    int n, reversedNumber = 0, remainder;
    printf ("Enter an integer: ");
    scanf ("%d", & n);
    {
        size_t i = (0 > n);
        while (n != 0) {
            remainder = n % 10;
            reversedNumber = reversedNumber * 10 + remainder;
            n /= 10;
            ++i;
        }
        printf ("Reversed Number = %0*d\n", (int) i, reversedNumber);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int start, end;
    unsigned n;
    printf ("Enter an integer: ");
    fflush (stdout);
    if (scanf (" %n%u%n", &start, &n, &end) == 1) {
        int length = end - start;
        unsigned reversedNumber = 0;
        for (int i = length; i > 0; i--) {
            unsigned remainder = n % 10;
            reversedNumber = reversedNumber * 10 + remainder;
            n /= 10;
        }
        printf ("Reversed Number = %0*u\n", length, reversedNumber);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50276364_50276465_3_26
50276364_50302526_5_35
Title: Keep leading zeros when integer length is unknown 
----------------------------------------

int main (void) {
    int n, reversedNumber = 0, remainder;
    printf ("Enter an integer: ");
    scanf ("%d", & n);
    {
        size_t i = (0 > n);
        while (n != 0) {
            remainder = n % 10;
            reversedNumber = reversedNumber * 10 + remainder;
            n /= 10;
            ++i;
        }
        printf ("Reversed Number = %0*d\n", (int) i, reversedNumber);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int number;
    printf ("\nenter a number: ");
    scanf ("%i", & number);
    int power = 1;
    while (number / power > 9)
        power *= 10;
    int sum = 0;
    do {
        int digit = number / power;
        if (power != 1)
            sum += digit;
        number %= power;
        power /= 10;
    }
    while (power > 0);
    printf ("sum (skipping last digit) = %i\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50276364_50277772_1_18
50276364_50302526_5_35
Title: Keep leading zeros when integer length is unknown 
----------------------------------------

int main (void) {
    int start, end;
    unsigned n;
    printf ("Enter an integer: ");
    fflush (stdout);
    if (scanf (" %n%u%n", &start, &n, &end) == 1) {
        int length = end - start;
        unsigned reversedNumber = 0;
        for (int i = length; i > 0; i--) {
            unsigned remainder = n % 10;
            reversedNumber = reversedNumber * 10 + remainder;
            n /= 10;
        }
        printf ("Reversed Number = %0*u\n", length, reversedNumber);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int number;
    printf ("\nenter a number: ");
    scanf ("%i", & number);
    int power = 1;
    while (number / power > 9)
        power *= 10;
    int sum = 0;
    do {
        int digit = number / power;
        if (power != 1)
            sum += digit;
        number %= power;
        power /= 10;
    }
    while (power > 0);
    printf ("sum (skipping last digit) = %i\n", sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50279241_50279431_23_33
50279241_50279488_1_14
Title: Removing consecutive repeated characters from string using C 
----------------------------------------

void Ex6 () {
    char string [MAX_STRING_LEN];
    char *result;
    if (fgets (string, MAX_STRING_LEN, stdin) != NULL) {
        result = removeDup (string);
        printf ("%s", result);
        free (result);
    }
}
----------------------------------------

void Ex6 () {
    char string [80];
    scanf ("%s", string);
    int i, c = 0;
    char newString [80];
    for (i = 0; i < strlen (string); i++) {
        if (string[i] != string[i + 1]) {
            newString[c++] = string[i];
        }
    }
    newString[c] = '\0';
    puts (newString);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50279241_50279431_5_19
50279241_50281158_3_13
Title: Removing consecutive repeated characters from string using C 
----------------------------------------

char *removeDup (const char *string) {
    size_t i, c = 0;
    size_t string_len = strlen (string);
    char *newString = malloc (string_len +1);
    for (i = 0; i < string_len; i++) {
        if (string[i] != string[i + 1]) {
            newString[c++] = string[i];
        }
    }
    newString[c] = '\0';
    return newString;
}
----------------------------------------

char *removeDup (char *input) {
    char *newTail = input, *oldTail = input;
    while (*oldTail) {
        if (*newTail == *oldTail) {
            ++oldTail;
        }
        else {
            *++newTail = *oldTail++;
        }
    }
    return newTail;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50286675_50288555_4_16
50286675_50289212_9_30
Title: How to print an array in a particular triangular shape? 
----------------------------------------

int main (void) {
    int arr [size] = {14, 22, 34, 57, 44, 42, 33, 55, 48, 47};
    int i, j, n = 4;
    for (i = 0; i < n; i++) {
        for (j = 0; j < i + 1; j++) {
            printf ("%d ", i + j * n - j * (j + 1) / 2);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    char a [10] = {14, 22, 34, 57, 44, 42, 33, 55, 48, 47};
    char b [10] [10];
    int limit = getT (10);
    int index1d = 0;
    for (int i = 0; i < limit; i++) {
        for (int j = 0; j < limit; j++) {
            if (j < i)
                b[i][j] = 0;
            else {
                b[i][j] = a[index1d++];
            }
        }
    }
    for (int i = 0; i < limit; i++) {
        for (int j = 0; j <= i; j++) {
            printf ("%d ", b [j] [i]);
        }
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50286846_50287007_3_22
50286846_50287069_3_30
Title: replacing integers with strings in C 
----------------------------------------

int main () {
    int c;
    char *arr [4] = {"zero", "one", "two", "three"};
    int i;
    while ((c = getchar ()) != EOF) {
        int k = c - '0';
        if (k >= 0 && k <= 3) {
            char *str = arr[k];
            for (i = 0; str[i] != '\0'; i++) {
                putchar (str [i]);
            }
        }
        else {
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    char *arr [4] = {"zero", "one", "two", "three"};
    int i, j;
    while ((c = getchar ()) != EOF) {
        for (j = 0; j < 4; j++) {
            if (c == j + '0') {
                char *str = arr[j];
                for (i = 0; str[i] != '\0'; i++) {
                    putchar (str [i]);
                }
                j = 10;
                break;
            }
        }
        if (j != 10) {
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50286846_50287007_3_22
50286846_50287243_1_15
Title: replacing integers with strings in C 
----------------------------------------

int main () {
    int c;
    char *arr [4] = {"zero", "one", "two", "three"};
    int i;
    while ((c = getchar ()) != EOF) {
        int k = c - '0';
        if (k >= 0 && k <= 3) {
            char *str = arr[k];
            for (i = 0; str[i] != '\0'; i++) {
                putchar (str [i]);
            }
        }
        else {
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *arr [11] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "Nine", "Ten"};
    int *input = malloc (sizeof (*input)), row = 1;
    while ((input[row - 1] = getchar ()) != EOF) {
        if (input[row - 1] == 10)
            break;
        input[row - 1] = input[row - 1] - 48;
        printf ("%s ", arr [input [row - 1] % 10]);
        row++;
        input = realloc (input, row * sizeof (*input));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50286846_50287044_3_26
50286846_50287069_3_30
Title: replacing integers with strings in C 
----------------------------------------

int main () {
    int c;
    char *arr [4] = {"zero", "one", "two", "three"};
    int i;
    char last_input = '9';
    while ((c = getchar ()) != EOF) {
        if (c != last_input && '0' <= c && c <= '3') {
            last_input = c;
            int index = c - '0';
            char *str = arr[index];
            for (i = 0; str[i] != '\0'; i++) {
                putchar (str [i]);
            }
        }
        else {
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    char *arr [4] = {"zero", "one", "two", "three"};
    int i, j;
    while ((c = getchar ()) != EOF) {
        for (j = 0; j < 4; j++) {
            if (c == j + '0') {
                char *str = arr[j];
                for (i = 0; str[i] != '\0'; i++) {
                    putchar (str [i]);
                }
                j = 10;
                break;
            }
        }
        if (j != 10) {
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50286846_50287044_3_26
50286846_50287243_1_15
Title: replacing integers with strings in C 
----------------------------------------

int main () {
    int c;
    char *arr [4] = {"zero", "one", "two", "three"};
    int i;
    char last_input = '9';
    while ((c = getchar ()) != EOF) {
        if (c != last_input && '0' <= c && c <= '3') {
            last_input = c;
            int index = c - '0';
            char *str = arr[index];
            for (i = 0; str[i] != '\0'; i++) {
                putchar (str [i]);
            }
        }
        else {
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *arr [11] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "Nine", "Ten"};
    int *input = malloc (sizeof (*input)), row = 1;
    while ((input[row - 1] = getchar ()) != EOF) {
        if (input[row - 1] == 10)
            break;
        input[row - 1] = input[row - 1] - 48;
        printf ("%s ", arr [input [row - 1] % 10]);
        row++;
        input = realloc (input, row * sizeof (*input));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50286846_50287069_3_30
50286846_50287243_1_15
Title: replacing integers with strings in C 
----------------------------------------

int main () {
    int c;
    char *arr [4] = {"zero", "one", "two", "three"};
    int i, j;
    while ((c = getchar ()) != EOF) {
        for (j = 0; j < 4; j++) {
            if (c == j + '0') {
                char *str = arr[j];
                for (i = 0; str[i] != '\0'; i++) {
                    putchar (str [i]);
                }
                j = 10;
                break;
            }
        }
        if (j != 10) {
            putchar (c);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char *arr [11] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "Nine", "Ten"};
    int *input = malloc (sizeof (*input)), row = 1;
    while ((input[row - 1] = getchar ()) != EOF) {
        if (input[row - 1] == 10)
            break;
        input[row - 1] = input[row - 1] - 48;
        printf ("%s ", arr [input [row - 1] % 10]);
        row++;
        input = realloc (input, row * sizeof (*input));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50287819_50288264_27_39
50287819_50289467_27_39
Title: How do I make this pointer work? 
----------------------------------------

void scan_card (int *card_array []) {
    int num1;
    int num2;
    int num3;
    scanf ("%d %d %d", & num1, & num2, & num3);
    card_array[0] = &num1;
    card_array[1] = &num2;
    card_array[2] = &num3;
}
----------------------------------------

void scan_card (int *card_array) {
    int num1;
    int num2;
    int num3;
    scanf ("%d %d %d", & num1, & num2, & num3);
    card_array[0] = num1;
    card_array[1] = num2;
    card_array[2] = num3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50287819_50288264_27_39
50287819_50290504_12_24
Title: How do I make this pointer work? 
----------------------------------------

void scan_card (int *card_array []) {
    int num1;
    int num2;
    int num3;
    scanf ("%d %d %d", & num1, & num2, & num3);
    card_array[0] = &num1;
    card_array[1] = &num2;
    card_array[2] = &num3;
}
----------------------------------------

void scan_card (int card_array [], int *card_one, int *card_two, int *card_three) {
    int num1;
    int num2;
    int num3;
    scanf ("%d %d %d", & num1, & num2, & num3);
    *card_one = num1;
    *card_two = num2;
    *card_three = num3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50287819_50289467_27_39
50287819_50290504_12_24
Title: How do I make this pointer work? 
----------------------------------------

void scan_card (int *card_array) {
    int num1;
    int num2;
    int num3;
    scanf ("%d %d %d", & num1, & num2, & num3);
    card_array[0] = num1;
    card_array[1] = num2;
    card_array[2] = num3;
}
----------------------------------------

void scan_card (int card_array [], int *card_one, int *card_two, int *card_three) {
    int num1;
    int num2;
    int num3;
    scanf ("%d %d %d", & num1, & num2, & num3);
    *card_one = num1;
    *card_two = num2;
    *card_three = num3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50291826_50292173_2_27
50291826_50292280_2_23
Title: To convert a 'for' loop into a 'do..while' loop 
----------------------------------------

main () {
    int i, j, n, isPrime;
    printf ("Enter n\n");
    scanf ("%d", & n);
    printf ("All prime numbers between 2 to %d are:\n", n);
    i = 2;
    do {
        isPrime = 1;
        j = 2;
        do {
            if (i % j == 0)
                isPrime = 0;
            j = j + 1;
        }
        while (j < i / 2);
        if (isPrime == 1 || i == 2)
            printf ("%d\n", i);
        i = i + 1;
    }
    while (i <= n);
}
----------------------------------------

main () {
    int i, j, n, isPrime;
    printf ("Enter n\n");
    scanf ("%d", & n);
    i = 2;
    do {
        j = 2;
        isPrime = 1;
        if (i == 2)
            printf ("%d ", i);
        do {
            if (i % j == 0) {
                isPrime = 0;
                break;
            }
            j = j + 1;
        }
        while (j <= i / 2);
        if (isPrime)
            printf ("%d ", i);
        i = i + 1;
    }
    while (i <= n);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50291826_50292174_2_26
50291826_50292280_2_23
Title: To convert a 'for' loop into a 'do..while' loop 
----------------------------------------

main () {
    int i, j, n, isPrime;
    printf ("Enter n\n");
    scanf ("%d", & n);
    i = 2;
    do {
        isPrime = 1;
        j = 2;
        do {
            if (i % j == 0 && j <= i / 2)
                isPrime = 0;
            j = j + 1;
        }
        while (j <= i / 2);
        if (isPrime == 1)
            printf ("%d\n", i);
        i = i + 1;
    }
    while (i <= n);
}
----------------------------------------

main () {
    int i, j, n, isPrime;
    printf ("Enter n\n");
    scanf ("%d", & n);
    i = 2;
    do {
        j = 2;
        isPrime = 1;
        if (i == 2)
            printf ("%d ", i);
        do {
            if (i % j == 0) {
                isPrime = 0;
                break;
            }
            j = j + 1;
        }
        while (j <= i / 2);
        if (isPrime)
            printf ("%d ", i);
        i = i + 1;
    }
    while (i <= n);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50320770_50320855_4_14
50320770_50320893_1_38
Title: Remove substring between parentheses in a string 
----------------------------------------

int main (void) {
    char str [] = "text(lorem(ipsum)abcd)pieceoftext";
    char const *delim = ")(";
    char *token;
    char *rest = str;
    while ((token = strtok_r (rest, delim, &rest))) {
        printf ("token: %s\n", token);
        printf ("rest: %s\n", rest);
    }
}
----------------------------------------

int main () {
    const char *s = "text(lorem(ipsum)abcd)pieceoftext";
    const char patternA = '(';
    const char patternB = ')';
    char *target;
    int targetIndex = 0;
    int parenDepth = 0;
    target = malloc (strlen (s) +1);
    for (int sourceIndex = 0; sourceIndex < strlen (s); sourceIndex++) {
        if (s[sourceIndex] == patternA) {
            parenDepth++;
            continue;
        }
        if (s[sourceIndex] == patternB) {
            parenDepth--;
            continue;
        }
        if (parenDepth == 0) {
            target[targetIndex++] = s[sourceIndex];
        }
    }
    target[targetIndex] = '\0';
    printf ("Answer: %s\n", target);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50331277_50331491_3_12
50331277_50332478_3_21
Title: Get first two digits of a long long number 
----------------------------------------

int main (void) {
    long long n = 3534567890123456;
    long long n1 = n, n2 = n;
    while (n) {
        n2 = n1;
        n1 = n;
        n /= 10;
    }
    printf ("%lld", n2);
}
----------------------------------------

int main (void) {
    long long n = 3534567890123456;
    if (n < 0)
        n = -n;
    if (n >= 100000000000)
        n /= 100000000000;
    while (n >= 100)
        n /= 10;
    printf ("%lld", n);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50363490_50363721_3_37
50363490_50364218_3_34
Title: Minimum element in diagonal strips of square matrix? 
----------------------------------------

int main () {
    int min [10], x [3] [3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int n = 3, d, j, z, i;
    for (d = 0, i = 0; d < 2 * n - 1; d++, i++) {
        printf ("D %d: ", d);
        z = (d < n) ? 0 : d - n + 1;
        for (j = z; j <= d - z; j++) {
            printf ("%d ", x [j] [d - j]);
            if (j == z) {
                min[d] = x[j][d - j];
            }
            else if (min[d] > x[j][d - j]) {
                min[d] = x[j][d - j];
            }
            if (d == 0 || d == 2 * n - 2) {
                break;
            }
        }
        printf ("\n");
    }
    printf ("\n");
    for (i = 0; i < 2 * n - 1; i++)
        printf ("min = %d\n", min[i]);
    return 0;
}
----------------------------------------

int main (void) {
    int min [10], x [3] [3] = {{1, 2, 3,}, {4, 5, 6,}, {7, 8, 9,},};
    int n = 3;
    for (int d = 0; d < 2 * n - 1; d++) {
        printf ("D %d: ", d);
        int z = (d < n) ? 0 : d - n + 1;
        printf ("A[%d][%d] = %d: ", z, d - z, x [z] [d - z]);
        min[d] = x[z][d - z];
        for (int j = z + 1; j <= d - z; j++) {
            printf ("A[%d][%d] = %d: ", j, d - j, x [j] [d - j]);
            if (x[j][d - j] < min[d])
                min[d] = x[j][d - j];
        }
        printf ("min[%d] = %d\n", d, min [d]);
    }
    printf ("\n");
    for (int i = 0; i < 2 * n - 1; i++)
        printf ("min = %d\n", min[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50381533_50381982_48_74
50381533_50392797_69_91
Title: A more elegant way to parse 
----------------------------------------

int main (int argc, char **argv) {
    char **paths;
    size_t i, n = 0;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        perror ("fopen-failed");
        return 1;
    }
    paths = readcmdfile (fp, &n);
    if (!paths) {
        fprintf (stderr, "error: readcmdfile failed.\n");
        return 1;
    }
    for (i = 0; i < n; i++) {
        printf ("path[%lu]: %s\n", i + 1, paths [i]);
        free (paths [i]);
    }
    free (paths);
    return 0;
}
----------------------------------------

int main (void) {
    int lines_read, index;
    const char *file_name = "cmdfile.txt";
    char *paths [MAX_LINES] = {NULL};
    lines_read = readCMDFile (file_name, paths);
    if (lines_read < 0) {
        printf ("Failed to read file %s\n", file_name);
    }
    for (index = 0; index < lines_read; index++) {
        printf ("Line %d: %s\n", index, paths [index]);
    }
    for (index = 0; index < lines_read; index++) {
        free (paths [index]);
        paths[index] = NULL;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50383139_50398286_29_55
50383139_50409547_67_138
Title: How to Pass a Char Array (String) into a Linked List (Queue) 
----------------------------------------

int main (void) {
    char word [MAXLETTERS] = "", *p = word, *delim = " \t\n";
    list_t *list = calloc (1, sizeof *list);
    while (fgets (word, MAXLETTERS, stdin))
        if (ispunct (*word) || isdigit (*word))
            continue;
        else
            break;
    for (p = strtok (p, delim); p; p = strtok (NULL, delim))
        insert_at_foot (list, p);
    node_t *iter = list->head;
    while (!is_empty_list (iter)) {
        node_t *victim = iter;
        printf ("%s\n", iter -> word);
        iter = iter->next;
        free (victim);
    }
    free (list);
}
----------------------------------------

int main (int argc, char *argv []) {
    name_t name;
    name_t dict [MAXNAMES];
    int limit = MAXLETTERS + NULL_BYTE;
    list_t *list = make_empty_list ();
    char buffer [MAXLETTERS + NULL_BYTE];
    char *word;
    read_dict (& name, & dict [MAXNAMES]);
    print_stage (STAGE3);
    while (getword (buffer, limit) != EOF) {
        word = (char *) malloc (strlen (buffer) +NULL_BYTE);
        strcpy (word, buffer);
        insert_at_foot (list, word);
    }
    int size = 0;
    char A [SIZE];
    while (!is_empty_list (list)) {
        word = *get_head (list);
        printf ("%s\n", word);
        A[size] = *word;
        free (word);
        list = get_tail (list);
        size++;
    }
    printf ("size %d array\n", size);
    print_list (list);
    int i, locn;
    print_stage (STAGE4);
    for (i = 0; i < size; i++) {
        printf ("inside the loop");
        if (binary_search (&dict[MAXNAMES], 0, size, A, &locn) == BS_NOT_FOUND) {
            printf ("inside 1");
            printf ("%s\t NOT_NAME\n", A);
        }
        else {
            printf ("inside 2");
            printf ("%s\t NAME in A[%d]\n", A, locn);
        }
    }
    printf ("\n");
    free_list (list);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50402515_50402929_3_48
50402515_50402943_3_33
Title: Bug in While-Loop Keeps Counting Beyond Condition 
----------------------------------------

int main () {
    float cash;
    int n;
    int counter = 0;
    int quarters = 0;
    int dimes = 0;
    int nickels = 0;
    int pennies = 0;
    for (;;) {
        printf ("Enter change amount: ");
        scanf ("%f", & cash);
        if (cash > 0) {
            break;
        }
    }
    n = cash * 100;
    counter = 0;
    if (n > 0) {
        quarters = (int) floor (n / 25);
        n -= quarters * 25;
        printf ("%i\n", n);
        dimes = (int) floor (n / 10);
        n -= dimes * 10;
        printf ("%i\n", n);
        nickels = (int) floor (n / 5);
        n -= nickels * 5;
        printf ("%i\n", n);
        pennies = n;
        printf ("%i\n", n);
    }
    printf ("%i quarters, %i dimes, %i nickels, %i pennies\n", quarters, dimes, nickels, pennies);
    return 0;
}
----------------------------------------

int main () {
    int dollar, cent;
    int q = 0;
    int d = 0;
    int n = 0;
    int p = 0;
    int re;
    printf ("Enter amount: ");
    scanf (" %d.%d", & dollar, & cent);
    q = dollar * 4;
    re = cent;
    q = q + (re / 25);
    re = re % 25;
    d = re / 10;
    re = re % 10;
    n = re / 5;
    re = re % 5;
    p = re;
    printf ("q %d d %d n %d p %d\n", q, d, n, p);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50419673_50457120_2_33
50419673_50546001_1_24
Title: GtkSourceGutter - How to render icon or text on a specific line 
----------------------------------------

static void gutter_renderer_query_data (GtkSourceGutterRenderer *renderer, GtkTextIter *start, GtkTextIter *end, GtkSourceGutterRendererState state) {
    GSList *marks;
    GdkPixbuf *pixbuf = NULL;
    view = GTK_SOURCE_VIEW (gtk_source_gutter_renderer_get_view (renderer));
    buffer = GTK_SOURCE_BUFFER (gtk_text_view_get_buffer (GTK_TEXT_VIEW (view)));
    marks = gtk_source_buffer_get_source_marks_at_iter (buffer, start, NULL);
    if (marks != NULL) {
        size = measure_line_height (view);
        pixbuf = composite_marks (view, marks, size);
        g_slist_free (marks);
    }
    g_object_set (G_OBJECT (renderer), "pixbuf", pixbuf, NULL);
}
----------------------------------------

G_MODULE_EXPORT void gutter_renderer_query_data (GtkSourceGutterRenderer *renderer, GtkTextIter *start, GtkTextIter *end, GtkSourceGutterRendererState state) {
    GtkSourceView *view = NULL;
    GtkSourceBuffer *buffer = NULL;
    GSList *marks = NULL;
    GdkPixbuf *pixbuf = NULL;
    view = GTK_SOURCE_VIEW (gtk_source_gutter_renderer_get_view (renderer));
    buffer = GTK_SOURCE_BUFFER (gtk_text_view_get_buffer (GTK_TEXT_VIEW (view)));
    marks = gtk_source_buffer_get_source_marks_at_iter (buffer, start, NULL);
    if (marks != NULL) {
        char *category = gtk_source_mark_get_category (marks->data);
        if (!g_strcmp0 (category, "CERTAIN_CATEGORY"))
            pixbuf = gtk_image_get_pixbuf (gtk_image_new_from_file ("icon_file_here"));
        g_slist_free (marks);
    }
    g_object_set (G_OBJECT (renderer), "pixbuf", pixbuf, "yalign", 0.5, NULL);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50448188_50448350_1_14
50448188_50449057_1_17
Title: Which approach is better - More conditions or More Variables? 
----------------------------------------

int max_of_four (int a, int b, int c, int d) {
    int greatest_int = a;
    if (b > greatest_int) {
        greatest_int = b;
    }
    if (c > greatest_int) {
        greatest_int = c;
    }
    if (d > greatest_int) {
        greatest_int = d;
    }
    return greatest_int;
}
----------------------------------------

int max_of_four (int a, int b, int c, int d) {
    int result, result2, result3;
    if (a > b)
        result = a;
    else
        result = b;
    if (result > c)
        result2 = result;
    else
        result2 = c;
    if (result2 > d)
        result3 = result2;
    else
        result3 = d;
    return result3;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50464391_50464579_1_13
50464391_50464596_1_25
Title: Is it necessary to reassign 'root' node on reading the first value in a Binary Search Tree? 
----------------------------------------

void insert (Node **A, int value) {
    if (*A == NULL) {
        *A = malloc (sizeof (Node));
        addToNode (* A, value);
        return;
    }
    Node *root = *A;
    if (value > root->data) {
        insert (& root -> right, value);
    }
    else if (value < root->data) {
        insert (& root -> left, value);
    }
}
----------------------------------------

void insert (Node **A, int value) {
    if (*A == NULL) {
        *A = (Node *) malloc (sizeof (Node));
        addToNode (* A, value);
        return;
    }
    else {
        if (value > (*A)->data) {
            insert (& (* A) -> right, value);
            return;
        }
        else if (value < (*A)->data) {
            insert (& (* A) -> left, value);
            return;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50472860_50473517_1_12
50472860_50485651_1_21
Title: How do I manipulate single bits of an array 
----------------------------------------

void bitmanipulation (Bitstream *bs, const int numberofbits, const int valueofbits) {
    int write = valueofbits;
    for (int i = 0; i < numberofbits; ++i) {
        if (write % 2 == 1) {
        }
        else {
        }
        write /= 2;
    }
    ...
}
----------------------------------------

void bitmanipulation (Bitstream *bs, const int numberofbits, const int valueofbits) {
    int k = valueofbits;
    if ((*bs).position == 0) {
        printf ("%d position\n", (* bs).position);
    }
    for (int i = 0; i < numberofbits; i++) {
        if ((*bs).position > ((8 * (*bs).lengthofarray) - 1)) {
            return;
        }
        if (k % 2 == 1) {
            int charIndex = (*bs).position / 8;
            int bitInCharIndex = (*bs).position % 8;
            unsigned int input = 1;
            input <<= bitInCharIndex;
            (*bs).arrayofunsignedchar[charIndex] |= input;
        }
        k = k / 2;
        (*bs).position = (*bs).position + 1;
        printf ("%d position\n", (* bs).position);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
5047913_9163048_23_56
5047913_9531899_20_45
Title: OpenCV - getting the slider to update its position during video playback 
----------------------------------------

int main (int argc, _TCHAR *argv []) {
    cvNamedWindow ("Example3", CV_WINDOW_AUTOSIZE);
    g_capture = cvCreateFileCapture ("video.avi");
    int frames = (int) cvGetCaptureProperty (g_capture, CV_CAP_PROP_FRAME_COUNT);
    if (frames != 0) {
        cvCreateTrackbar ("Position", "Example3", & g_slider_position, frames, onTrackbarSlide);
    }
    IplImage *frame;
    while (1) {
        count++;
        frame = cvQueryFrame (g_capture);
        if (!frame)
            break;
        cvShowImage ("Example3", frame);
        cvSetTrackbarPos ("Position", "Example3", g_slider_position + 1);
        char c = cvWaitKey (33);
        if (c == 27)
            break;
    }
    cvReleaseCapture (& g_capture);
    cvDestroyWindow ("Example3");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    cvNamedWindow ("Video", CV_WINDOW_AUTOSIZE);
    video_capture = cvCreateFileCapture ("Crowdy.avi");
    int no_of_frames = (int) cvGetCaptureProperty (video_capture, CV_CAP_PROP_FRAME_COUNT);
    if (no_of_frames != 0) {
        cvCreateTrackbar ("Slider", "Video", & g_slider_position, no_of_frames, onTrackbarSlide);
    }
    IplImage *frame;
    while (1) {
        frame = cvQueryFrame (video_capture);
        if (!frame)
            break;
        cvShowImage ("Video", frame);
        cvSetTrackbarPos ("Slider", "Video", ++ g_slider_position);
        char c = cvWaitKey (33);
        if (c == 27)
            break;
    }
    cvReleaseCapture (& video_capture);
    cvDestroyWindow ("Video");
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50489809_50489950_3_17
50489809_50490838_4_24
Title: Storing users input into two arrays 
----------------------------------------

int main (void) {
    char *street [10];
    int number [10];
    int i;
    for (i = 0; i < 3; i++) {
        street[i] = malloc (100);
        printf ("Enter street and number: \n");
        scanf ("%99s %d", street [i], & number [i]);
    }
    for (int i = 0; i < 3; i++) {
        printf ("%s ", street [i]);
    }
}
----------------------------------------

int main (void) {
    char *street [10];
    int number [10];
    int i;
    for (i = 0; i < 10; i++) {
        printf ("Enter street and number: \n");
        street[i] = (char *) malloc (sizeof (char) * 100);
        scanf ("%s%d", street [i], & number [i]);
        getchar ();
    }
    for (int i = 0; i < 10; i++) {
        printf ("%s\n", street [i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50530302_50530802_4_37
50530302_50530851_5_49
Title: I can not determine if it is a prime number 
----------------------------------------

int main (void) {
    int num;
    bool isPrime = true;
    while (scanf ("%d", &num) == 1) {
        for (int i = 2; i * i <= num; ++i) {
            if (num % i == 0) {
                if (i * i != num) {
                    printf ("%d ve %d, divides %d\n", i, num / i, num);
                }
                else {
                    printf ("%d divides %d.\n", i, num);
                }
                isPrime = false;
            }
        }
        if (isPrime) {
            printf ("The number you entered is a prime number.\n");
        }
        isPrime = true;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num;
    bool isPrime = true, finishIt = false;
    printf ("Enter a number: ");
    while (1) {
        while (1) {
            if (scanf ("%d", &num) != 1)
                continue;
            if (num == 0) {
                finishIt = true;
                break;
            }
            int i;
            for (i = 2; i * i <= num; ++i) {
                if (num % i == 0) {
                    if (i * i != num) {
                        printf ("%d ve %d, divides %d\n", i, num / i, num);
                    }
                    else {
                        printf ("%d divides %d.\n", i, num);
                    }
                    isPrime = false;
                }
            }
            if (i * i >= num)
                break;
        }
        if (isPrime) {
            printf ("The number you entered is a prime number.");
        }
        isPrime = true;
        if (finishIt)
            break;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50530302_50530851_5_49
50530302_50557302_3_39
Title: I can not determine if it is a prime number 
----------------------------------------

int main (void) {
    int num;
    bool isPrime = true, finishIt = false;
    printf ("Enter a number: ");
    while (1) {
        while (1) {
            if (scanf ("%d", &num) != 1)
                continue;
            if (num == 0) {
                finishIt = true;
                break;
            }
            int i;
            for (i = 2; i * i <= num; ++i) {
                if (num % i == 0) {
                    if (i * i != num) {
                        printf ("%d ve %d, divides %d\n", i, num / i, num);
                    }
                    else {
                        printf ("%d divides %d.\n", i, num);
                    }
                    isPrime = false;
                }
            }
            if (i * i >= num)
                break;
        }
        if (isPrime) {
            printf ("The number you entered is a prime number.");
        }
        isPrime = true;
        if (finishIt)
            break;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num;
    bool isPrime = true;
    while (1) {
        isPrime = true;
        printf ("Enter a number: ");
        if (scanf ("%d", &num) == 1) {
            for (int i = 2; i * i <= num; ++i) {
                if (num % i == 0) {
                    if (i * i != num) {
                        printf ("%d ve %d, divides %d\n", i, num / i, num);
                    }
                    else {
                        printf ("%d divides %d.\n", i, num);
                    }
                    isPrime = false;
                }
            }
        }
        if (isPrime) {
            printf ("The number you entered is a prime number.\n");
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50538670_50541784_10_39
50538670_50542118_1_35
Title: endless bubble sorting of a linked list 
----------------------------------------

struct Lista *Insert (struct Lista *head, const char *data) {
    struct Lista *newp;
    struct Lista *tmp;
    char *new_data;
    newp = malloc (sizeof (struct Lista));
    new_data = strdup (data);
    if (newp == NULL || new_data == NULL) {
        fprintf (stderr, "out of memory");
        return NULL;
    }
    newp->data = new_data;
    newp->next = NULL;
    if (head == NULL || strcmp (new_data, head->data) < 0) {
        newp->next = head;
        head = newp;
    }
    else {
        tmp = head;
        while (tmp->next && strcmp (new_data, tmp->next->data) >= 0) {
            tmp = tmp->next;
        }
        newp->next = tmp->next;
        tmp->next = newp;
    }
    return head;
}
----------------------------------------

struct Lista *Insert (struct Lista *head, char data [N]) {
    struct Lista * new_el = calloc (1, sizeof (struct Lista)));
    strcpy (new_el -> data, data);
    new_el->next = NULL;
    if (0 == head) {
        return new_el;
    }
    if (0 < strcmp (head->data, new_el->data)) {
        new_el->next = head;
        return new_el;
    }
    struct Lista *tmp = head;
    while (0 != tmp->next) {
        If (0 < strcmp (new_el -> data, tmp -> next -> data))
        {
            new_el->next = tmp->next;
            tmp->next = new_el;
            return head;
        }
        tmp = tmp->next;
    }
    if (0 < strcmp (tmp->data, new_el->data)) {
        new_el->next = tmp;
        return head;
    }
    tmp->next = new_el;
    return head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50547731_50548385_17_32
50547731_50648179_31_43
Title: Saving pointer to last node in doubly linked list when performing insertion sort 
----------------------------------------

void insertionSort (struct list *list) {
    struct node *i = list->head, *j0, *j1;
    while (i) {
        j1 = i, j0 = j1->prev;
        while (j0 && j0->data > j1->data) {
            int temp = j0->data;
            j0->data = j1->data;
            j1->data = temp;
            j1 = j0;
            j0 = j0->prev;
        }
        i = i->next;
    }
}
----------------------------------------

void insertionSort (node *top) {
    node *current = top->next;
    top->next = top->prev = top;
    while (current != top) {
        node *next = current->next;
        sortedInsert (top, current);
        current = next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50548686_50548799_1_23
50548686_50548801_1_28
Title: Deleting LinkedList Last Item 
----------------------------------------

struct node *del_the_last (struct node *head) {
    struct node *h1 = head, *temp = NULL;
    if (h1 != NULL) {
        if (h1->next != NULL) {
            while (h1->next->next != NULL) {
                h1 = h1->next;
            }
            temp = h1->next;
            h1->next = h1->next->next;
            free (temp);
            temp = NULL;
            return head;
        }
        else {
            head = h1->next;
            free (h1);
            h1 = NULL;
            return head;
        }
    }
}
----------------------------------------

struct node *del_the_last (struct node *head) {
    struct node *curr = head;
    if (head == NULL) {
        return NULL;
    }
    if (head->next == NULL) {
        free (head);
        return NULL;
    }
    while (curr != NULL) {
        if (curr->next != NULL && curr->next->next == NULL) {
            free (curr -> next);
            curr->next = NULL;
        }
        else {
            curr = curr->next;
        }
    }
    return head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50549380_50549441_18_33
50549380_50550095_1_13
Title: C program to find a prime number 
----------------------------------------

int main () {
    int number_given_by_user;
    printf ("Enter a positive integer to find whether it is prime or not : ");
    scanf ("%d", & number_given_by_user);
    if (primeornot (number_given_by_user)) {
        printf ("The given number is a prime number");
    }
    else {
        printf ("The given number is not a prime number");
    }
}
----------------------------------------

int main (void) {
    int number_given_by_user;
    printf ("Enter a positive integer to find whether it is prime or not: ");
    scanf ("%d", & number_given_by_user);
    if (primeornot (number_given_by_user)) {
        printf ("The given number is a prime number\n");
    }
    else {
        printf ("The given number is not a prime number\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50549380_50549441_3_16
50549380_50549720_3_26
Title: C program to find a prime number 
----------------------------------------

int primeornot (int a) {
    int i;
    for (i = 2; i <= a / 2; i++) {
        if (a % i == 0) {
            return 0;
            break;
        }
    }
    return 1;
}
----------------------------------------

int primeornot (int a) {
    int i, number_to_increment = 0;
    for (i = 1; i <= a; i++) {
        if (a % i == 0) {
            number_to_increment += 1;
        }
        else {
            number_to_increment += 0;
        }
    }
    if (number_to_increment == 2) {
        return 1;
    }
    else {
        return 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50572065_50572702_3_26
50572065_50573352_4_51
Title: how can i optimise this code so that it takes lesser run time? 
----------------------------------------

int main () {
    float priceOld = 2000;
    float priceNew = 8000;
    int savingperMonth = 1000;
    int finalMonths = 0;
    float finalLeft = 0;
    int mon = 0;
    for (mon = 1; mon < 9; mon++) {
        priceOld = priceOld - ((priceOld * 15) / 100);
        priceNew = priceNew - ((priceNew * 15) / 100);
        if (mon % 2 == 0) {
            priceOld = priceOld - ((priceOld * 5) / 100);
            priceNew = priceNew - ((priceNew * 5) / 100);
        }
        if ((priceOld + (savingperMonth * mon)) >= priceNew) {
            finalMonths = mon;
            finalLeft = (priceOld + (savingperMonth * mon)) - priceNew;
            printf ("Number of months: %d\n", finalMonths);
            printf ("Final amount left: %f$", finalLeft);
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    unsigned int money_now = 0;
    unsigned int salary = 100000;
    unsigned int money_left;
    unsigned int old_car_cost = 200000;
    unsigned int new_car_cost = 800000;
    float decr_percent = 0.015;
    float decr_percent_diff = 0.005;
    size_t months = 0;
    while (1) {
        months++;
        money_now += salary;
        old_car_cost -= old_car_cost * decr_percent;
        new_car_cost -= new_car_cost * decr_percent;
        printf ("b:$%u;\tp:%.1f;\toc:$%u.%u;\tnc:$%u.%u\n", money_now / 100, decr_percent * 100, old_car_cost / 100, old_car_cost % 100, new_car_cost / 100, new_car_cost % 100);
        if (new_car_cost <= (money_now + old_car_cost))
            break;
        if (0 == (months % 2))
            decr_percent += decr_percent_diff;
    }
    puts ("");
    printf ("It has been %lu months.\n", months);
    money_left = (money_now + old_car_cost) - new_car_cost;
    printf ("Money left : $%u.%u\n", money_left / 100, money_left % 100);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50574236_50574491_4_29
50574236_50574551_4_48
Title: "It should print true if the second argument is fully contained within the first argument but it prints false" 
----------------------------------------

int main (int argc, char **argv) {
    char *str1, *str2;
    int str1len, str2len;
    str1 = argv[1];
    str2 = argv[2];
    str1len = strlen (str1);
    str2len = strlen (str2);
    if (str2len > str1len) {
        printf ("false\n");
        return 0;
    }
    char sub1 [100];
    int i = 0;
    for (; i < (str1len - str2len) + 1; i++) {
        strncpy (sub1, str1 + i, str2len);
        sub1[str2len] = '\0';
        if (strcmp (sub1, str2) == 0) {
            printf ("true\n");
            return 0;
        }
    }
    printf ("false\n");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc != 3) {
        fprintf (stderr, "Usage: %s 'haystack string' 'needle'\n", argv [0]);
        return 1;
    }
    char *str1, *str2;
    int str1len, str2len;
    str1 = argv[1];
    str2 = argv[2];
    str1len = strlen (str1);
    str2len = strlen (str2);
    printf ("str1 (%d): [%s]\n", str1len, str1);
    printf ("str2 (%d): [%s]\n", str2len, str2);
    printf ("strstr() says '%s'\n", (strstr (str1, str2) == 0) ? "false" : "true");
    if (str2len > str1len) {
        printf ("false\n");
        return 0;
    }
    char sub1 [100];
    if ((size_t) str2len >= sizeof (sub1)) {
        fprintf (stderr, "Oops: the needle is too big (%d > %zu)\n", str2len, sizeof (sub1));
        return 1;
    }
    memset (sub1, 'X', sizeof (sub1) - 1);
    sub1[sizeof (sub1) - 1] = '\0';
    for (int i = 0; i <= str1len - str2len; i++) {
        strncpy (sub1, str1 + i, str2len);
        sub1[str2len] = '\0';
        printf ("Compare [%s] with [%s]\n", sub1, str2);
        if (strcmp (sub1, str2) == 0) {
            printf ("true\n");
            return 0;
        }
    }
    printf ("false\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50612087_50612442_4_18
50612087_50612484_28_52
Title: How to concatenate bit by bit in c? 
----------------------------------------

int main () {
    unsigned long long result = 0;
    bool matrix [8] [8];
    for (int i = 0; i < mx_size; ++i)
        matrix[i][i] = 1;
    for (int i = 0; i < mx_size; i++) {
        for (int j = 0; j < mx_size; j++) {
            result |= (unsigned long long) matrix[i][j] << (i * mx_size + j);
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    char matrix [8] [8] = {{'1', '0', '1', '0', '1', '0', '1', '0'}, {'0', '1', '0', '1', '0', '1', '0', '1'}, {'1', '1', '1', '0', '0', '0', '1', '1'}, {'0', '0', '0', '1', '1', '1', '0', '0'}, {'1', '1', '1', '1', '1', '0', '0', '0'}, {'0', '0', '0', '0', '1', '1', '1', '1'}, {'1', '1', '0', '0', '1', '1', '0', '0'}, {'0', '0', '1', '1', '0', '0', '1', '1'},};
    unsigned long long result = convert (matrix, 0, '0');
    for (size_t index = 0; index < 64; index++)
        printf ("%1d", !!(result & (1ULL << index)));
    printf ("\n");
    result = convert (matrix, 1, '0');
    for (size_t index = 0; index < 64; index++)
        printf ("%1d", !!(result & (1ULL << index)));
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
50632576_50632847_2_19
50632576_50632855_2_16
Title: I need help debugging a basic C program to calculate Fibonacci numbers 
----------------------------------------

int main () {
    unsigned int a;
    unsigned int b;
    unsigned int c;
    a = 0;
    b = 0;
    c = 1;
    while (1) {
        if (c < b)
            break;
        printf ("%u\n", c);
        a = b;
        b = c;
        c = a + b;
    }
}
----------------------------------------

void main () {
    int a;
    int b;
    int var_z;
    a = 1;
    b = 1;
    for (int i = 0; i < 10; i++) {
        printf ("%d\n", a);
        printf ("%d\n", b);
        a = a + b;
        b = a + b;
    }
}
----------------------------------------

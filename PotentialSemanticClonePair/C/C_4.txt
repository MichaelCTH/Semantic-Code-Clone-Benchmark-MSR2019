$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14365109_14365298_7_33
14365109_14365378_1_12
Title: Add an element to a single linked list 
----------------------------------------

list_t *add (list_t *l, int e) {
    list_t *head;
    if (l == NULL) {
        l = malloc (sizeof (list_t));
        l->val = e;
        l->next = NULL;
        return l;
    }
    head = l;
    while (l->next != NULL)
        l = l->next;
    l->next = malloc (sizeof (list_t));
    l = l->next;
    l->val = e;
    l->next = NULL;
    return head;
}
----------------------------------------

struct list *add (struct list *lp, int e) {
    struct list **pp;
    for (pp = &lp; *pp; pp = &(*pp)->next) {
    }
    *pp = malloc (sizeof **pp);
    (*pp)->val = e;
    (*pp)->next = NULL;
    return lp;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14394117_14394315_4_18
14394117_14394702_1_17
Title: printf format specifier for max double width 
----------------------------------------

int main (int argc, char *argv []) {
    float a [] = {1.123, 12.123, 123.123, 12345.123};
    int i;
    char floatString [100] = {0};
    for (i = 0; i < sizeof (a) / sizeof (a[0]); i++) {
        memset (floatString, 0, sizeof (floatString));
        sprintf (floatString, "%f", a [i]);
        floatString[5] = '\0';
        printf ("%s\n", floatString);
    }
    return 0;
}
----------------------------------------

int main () {
    float a [] = {1.123, 12.123, 123.123, 12345.123};
    for (int i = 0; i < 4; i++) {
    std :
        : stringstream ss;
        ss << a[i];
    std :
        : string s;
        ss >> s;
        s.resize (5);
        cout << s << "\n";
    }
    cout << endl;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14394117_14394315_4_18
14394117_14395505_1_10
Title: printf format specifier for max double width 
----------------------------------------

int main (int argc, char *argv []) {
    float a [] = {1.123, 12.123, 123.123, 12345.123};
    int i;
    char floatString [100] = {0};
    for (i = 0; i < sizeof (a) / sizeof (a[0]); i++) {
        memset (floatString, 0, sizeof (floatString));
        sprintf (floatString, "%f", a [i]);
        floatString[5] = '\0';
        printf ("%s\n", floatString);
    }
    return 0;
}
----------------------------------------

int main () {
    float a [] = {1.123, 12.123, 123.123, 12345.123};
    char buf [8];
    int i;
    for (i = 0; i < sizeof (a) / sizeof (a[0]); i++) {
        snprintf (buf, 6, "%f", a [i]);
        printf ("%s\n", buf);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14394117_14394702_1_17
14394117_14395505_1_10
Title: printf format specifier for max double width 
----------------------------------------

int main () {
    float a [] = {1.123, 12.123, 123.123, 12345.123};
    for (int i = 0; i < 4; i++) {
    std :
        : stringstream ss;
        ss << a[i];
    std :
        : string s;
        ss >> s;
        s.resize (5);
        cout << s << "\n";
    }
    cout << endl;
    return 0;
}
----------------------------------------

int main () {
    float a [] = {1.123, 12.123, 123.123, 12345.123};
    char buf [8];
    int i;
    for (i = 0; i < sizeof (a) / sizeof (a[0]); i++) {
        snprintf (buf, 6, "%f", a [i]);
        printf ("%s\n", buf);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14401223_14401349_6_18
14401223_14401622_6_20
Title: Declaration Error in c 
----------------------------------------

int main () {
    char *str = malloc (sizeof (char));
    FILE *f;
    int i;
    f = fopen ("txt.txt", "r");
    *str = read_char (f);
    putchar (*str);
    return 0;
}
----------------------------------------

int main () {
    char *str;
    FILE *f;
    int i;
    f = fopen ("txt.txt", "r");
    str = read_char (&f);
    putchar (*str);
    free (str);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14416759_14416779_1_10
14416759_14416798_1_13
Title: Return char[]/string from a function 
----------------------------------------

char *createStr () {
    char char1 = 'm';
    char char2 = 'y';
    char *str = malloc (3 * sizeof (char));
    if (str == NULL)
        return NULL;
    str[0] = char1;
    str[1] = char2;
    str[2] = '\0';
    return str;
}
----------------------------------------

char *createStr () {
    char char1 = 'm';
    char char2 = 'y';
    char *str = (char *) malloc (sizeof (char) * 3);
    str[0] = char1;
    str[1] = char2;
    str[2] = '\0';
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14424219_14424246_2_18
14424219_14424295_3_18
Title: How can i read a line of numbers from stdin & compute their average? 
----------------------------------------

int main () {
    char line [1024], *beg, *end;
    long readvalue;
    while (fgets (line, sizeof (line), stdin)) {
        beg = line;
        for (beg = line;; beg = end) {
            readvalue = strtol (beg, &end, 10);
            if (beg == end)
                break;
            printf ("[%d]", readvalue);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int total = 0;
    float average = 0.0f;
    int userinput = 0;
    int counter = -1;
    while (userinput != -1) {
        counter++;
        if (scanf ("%d", &userinput) == 1 && userinput != -1) {
            total += userinput;
        }
    }
    average = ((float) total / (float) counter);
    printf ("Average = %f", average);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14474569_14474627_50_59
14474569_14475637_3_17
Title: C: How can I read unkown number of integers inside parenthesis from input? 
----------------------------------------

int main (int argc, char *argv []) {
    int no, i;
    no = getNumbers (stdin, numbers);
    if (no > 100)
        no = 100;
    for (i = 0; i < no; i++) {
        printf ("%d\n", numbers [i]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int x;
    char c = '\0';
    scanf ("%*[(]");
    while (c != ')' && scanf ("%d %c", &x, &c) == 2) {
        if (c != ',' && c != ')') {
            printf ("format error in the input\n");
            break;
        }
        printf ("Number: %d\n", x);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14477423_14477478_1_14
14477423_14477541_3_13
Title: C Primer plus chapter 6 exercise 3 
----------------------------------------

int main () {
    int count, count2;
    for (count = 0; count < 5; count++) {
        char letterToPrint = 'F';
        for (count2 = 0; count2 <= count; count2++) {
            printf ("%c", letterToPrint --);
        }
        printf ("\n");
    }
}
----------------------------------------

int main () {
    char letter = 'F';
    int i = 0, j;
    do {
        for (j = 0; j <= i; j++)
            printf ("%c", letter -j);
        printf ("\n");
    }
    while (letter - i++ > 'A');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14480462_14480638_3_14
14480462_14481033_14_25
Title: Why does my palindrome function always return 1? 
----------------------------------------

int is_palindrom (const char *palin) {
    int size = strlen (palin), i = 0;
    for (i = 0; i <= (size / 2); ++i) {
        if (palin[i] != palin[(size - i - 1)]) {
            return 1;
        }
    }
    return 0;
}
----------------------------------------

int is_palindrom (const char *palin) {
    int size = strlen (palin), i = 0;
    for (i = 0; i <= (size / 2); ++i) {
        if (palin[i] != palin[(size - i - 1)]) {
            return 1;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14485133_14485190_3_18
14485133_14485258_1_18
Title: Reverse string in C - What am I doing wrong? 
----------------------------------------

char *reverseString (char *original_string) {
    size_t length = strlen (original_string);
    char *reversed_string = malloc (length +1);
    size_t start;
    size_t end;
    for (start = 0, end = length - 1; start < length; start++, end--) {
        reversed_string[start] = original_string[end];
    }
    reversed_string[start] = '\0';
    return reversed_string;
}
----------------------------------------

char *reverseString (char *original_string) {
    int length = strlen (original_string);
    int top_limit = length - 1;
    char *reversed_string = malloc (sizeof (char) * (1 + length));
    int count = 0;
    while (count < length) {
        reversed_string[count] = original_string[top_limit];
        top_limit--;
        count++;
    }
    reversed_string[count] = '\0';
    return reversed_string;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14514435_14514636_1_22
14514435_14515103_1_23
Title: How to set an int to 1 if dependent on a button and in a while loop? 
----------------------------------------

task autonomous () {
    int buttonPressed = 0;
    while (true) {
        if (SensorValue[positionSelectButton] == 1) {
            positionSelect = positionSelect + 1;
            buttonPressed = 1;
        }
        else {
            buttonPressed = 0;
        }
        if (buttonPressed == 1) {
        }
    }
}
----------------------------------------

task autonomous () {
    while (true) {
        if (current_time >= next_detect_time && SensorValue[positionSelectButton] == 1) {
            positionSelect = positionSelect + 1;
            next_detect_time = current_time + 0350;
        }
        if (enemy_is_near) {
            fight ();
        }
        current_time = built_in_now ()
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1451479_1451515_1_15
1451479_1451657_4_31
Title: Expand Tabs to Spaces in C? 
----------------------------------------

void detab (char *in, char *out, size_t max_len) {
    size_t i = 0;
    while (*in && i < max_len - 1) {
        if (*in == '\t') {
            out[i++] = ' ';
            while (i % 8 && i < max_len - 1) {
                out[i++] = ' ';
            }
        }
        else {
            out[i++] = *in++;
        }
    }
    out[i] = 0;
}
----------------------------------------

static int detab (const char *str, char *buffer, size_t buflen) {
    char *end = buffer + buflen;
    char *dst = buffer;
    const char *src = str;
    char c;
    assert (buflen > 0);
    while ((c = *src++) != '\0' && dst < end) {
        if (c != '\t')
            *dst++ = c;
        else {
            do {
                *dst++ = ' ';
            }
            while (dst < end && (dst - buffer) % 8 != 0);
        }
    }
    if (dst < end) {
        *dst = '\0';
        return (dst - buffer);
    }
    else
        return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14536797_14536962_26_43
14536797_14536976_16_26
Title: Returning a bigger type of date from a function with pointer 
----------------------------------------

int main (void) {
    int *arr = NULL;
    size_t count = 0, size = 0, i;
    arr = blah (arr, &count, &size);
    if (arr == NULL) {
    }
    for (i = 0; i < count; ++i)
        printf ("%d\n", arr[i]);
    free (arr);
    exit (EXIT_SUCCESS);
}
----------------------------------------

int main () {
    int *z = NULL;
    int i;
    int count = 0;
    z = blah (z, &count);
    z = blah (z, &count);
    for (i = 0; i < count; i++)
        printf ("%d\n", z[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14536797_14536962_4_24
14536797_14536976_1_14
Title: Returning a bigger type of date from a function with pointer 
----------------------------------------

int *blah (int *arr, size_t *elem_count, size_t *max_size) {
    int i;
    for (i = 1; i <= 3; ++i) {
        if ((*elem_count) == (*max_size)) {
            int *tmp;
            ++(*max_size);
            tmp = realloc (arr, *max_size * sizeof *arr);
            if (tmp == NULL) {
            }
            arr = tmp;
        }
        arr[(*elem_count)++] = i;
    }
    return arr;
}
----------------------------------------

int *blah (int *old, int *count) {
    int *x;
    *count += 3;
    x = realloc (old, sizeof (int) * count);
    if (!x) {
        free (old);
        allocation_failed ();
    }
    x[count - 3] = 1;
    x[count - 2] = 2;
    x[count - 1] = 3;
    return x;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14553456_14553688_7_31
14553456_14553692_21_39
Title: Segmentation fault when freeing String in a Struct - C 
----------------------------------------

node_t *remove (node_t *start, const char *valu) {
    node_t *current = start;
    node_t *prev = NULL;
    while (current && strcmp (current->value, valu)) {
        prev = current;
        current = current->next;
    }
    if (current) {
        if (prev)
            prev->next = current->next;
        else
            start = current->next;
        free (current -> value);
        free (current);
    }
    return start;
}
----------------------------------------

struct node_t *remove (struct node_t *start, const char *value) {
    struct node_t *current = start;
    struct node_t *prev = start;
    while (current != 0) {
        if (!strcmp (value, current->value)) {
            if (current == start) {
                struct node_t *retval = current->next;
                free (current -> value);
                free (current);
                return retval;
            }
            else {
                return 0;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1458131_1458400_8_47
1458131_1460118_27_40
Title: Remove extra white space from inside a C string? 
----------------------------------------

int main (void) {
    FILE *input;
    char record [MAX_REC + 1];
    char *scan;
    const char *recEnd;
    char *columns [MAX_COL] = {0};
    int colCnt;
    input = fopen ("input.txt", "r");
    while (fgets (record, sizeof (record), input) != NULL) {
        memset (columns, 0, sizeof (columns));
        scan = record;
        recEnd = record + strlen (record);
        for (colCnt = 0; colCnt < MAX_COL; colCnt++) {
            while (scan < recEnd && isspace (*scan)) {
                scan++;
            }
            if (scan == recEnd) {
                break;
            }
            columns[colCnt] = scan;
            while (scan < recEnd && !isspace (*scan)) {
                scan++;
            }
            *scan++ = '\0';
        }
        if (colCnt > 0) {
            printf ("%s", columns [0]);
            for (int i = 1; i < colCnt; i++) {
                printf ("#%s", columns [i]);
            }
            printf ("\n");
        }
    }
    fclose (input);
}
----------------------------------------

int main (void) {
    char buffer [256];
    while (fgets (buffer, sizeof (buffer), stdin) != 0) {
        size_t len = strlen (buffer);
        if (len > 0)
            buffer[--len] = '\0';
        printf ("Before: %zd <<%s>>\n", len, buffer);
        len = squidge (buffer);
        printf ("After:  %zd <<%s>>\n", len, buffer);
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1458131_1459602_4_23
1458131_21554463_3_31
Title: Remove extra white space from inside a C string? 
----------------------------------------

char *squeeze (char *str) {
    int r;
    int w;
    r = w = 0;
    while (str[r]) {
        if (isspace (str[r]) || iscntrl (str[r])) {
            if (w > 0 && !isspace (str[w - 1]))
                str[w++] = ' ';
        }
        else
            str[w++] = str[r];
        r++;
    }
    str[w] = 0;
    return str;
}
----------------------------------------

char *squeeze (char *str) {
    char *r;
    char *w;
    char c;
    int sp, sp_old = 0;
    r = w = str;
    do {
        c = *r;
        sp = isspace (c);
        if (!sp) {
            if (sp_old && c) {
                *w++ = ' ';
            }
            *w++ = c;
        }
        if (str < w) {
            sp_old = sp;
        }
        r++;
    }
    while (c);
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1459664_1460325_1_15
1459664_1460393_13_32
Title: Can I use regex_t for several compilations 
----------------------------------------

int match (char *pattern, char *name) {
    static regex_t re;
    static int re_in_use = 0;
    if (isNewRegex (pattern)) {
        if (re_in_use) {
            regfree (& re);
            re_in_use = 0;
        }
    }
    re_in_use = regcomp (&re, pattern, REG_EXTENDED | REG_NOSUB);
    ...
}
----------------------------------------

int match (const char *pattern, const char *name) {
    int ret;
    if (last_match.pattern != (char *) NULL && strcmp (last_match.pattern, pattern) != 0) {
        free (last_match.pattern);
        last_match.pattern = (char *) NULL;
        regfree (& last_match.re);
    }
    if (last_match.pattern == (char *) NULL) {
        last_match.pattern = (char *) malloc (strlen (pattern) +1);
        strcpy (last_match.pattern, pattern);
        ret = regcomp (&last_match.re, last_match.pattern, REG_EXTENDED | REG_NOSUB);
        printf ("regcomp: %i  '%s'\n", ret, last_match.pattern);
    }
    ret = regexec (&last_match.re, name, 0, (regmatch_t *) NULL, 0);
    printf ("regexec: %i\n", ret);
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14601457_14601612_4_14
14601457_14603182_4_16
Title: function having a ip-range string as argument and returning array containing list of ips in 'C' 
----------------------------------------

int main () {
    char str [] = "1.1.1.1-10";
    char *temp;
    temp = strtok (str, "-");
    temp = strtok (NULL, "-");
    int number = atoi (temp);
    printf ("%d", number);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int a, b, c, d, len;
    if (argc != 2)
        exit (1);
    if (sscanf (argv[1], "%d.%d.%d.%d-%d", &a, &b, &c, &d, &len) == 5) {
        pintf ("Got IP range\n");
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14601457_14601612_4_14
14601457_14619593_4_33
Title: function having a ip-range string as argument and returning array containing list of ips in 'C' 
----------------------------------------

int main () {
    char str [] = "1.1.1.1-10";
    char *temp;
    temp = strtok (str, "-");
    temp = strtok (NULL, "-");
    int number = atoi (temp);
    printf ("%d", number);
    return 0;
}
----------------------------------------

int main () {
    char str [] = "11.1.1.251-254";
    char *temp, *a, *b, *c, *temp2, *q;
    char prefix [50];
    int i, count, k;
    temp = strrchr (str, '.');
    if (temp != NULL) {
        printf ("found a '.' as %s\n", temp);
    }
    b = strtok (temp, "-");
    c = strtok (NULL, "-");
    b = strtok (b, ".");
    for (i = 0, k = 0, count = 0; count < 3; i++, k++) {
        prefix[k] = str[i];
        if (str[i] == '.') {
            count++;
        }
    }
    printf ("%s \n", prefix);
    printf ("%s \n", b);
    printf ("%s \n", c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14601457_14603182_4_16
14601457_14619593_4_33
Title: function having a ip-range string as argument and returning array containing list of ips in 'C' 
----------------------------------------

int main (int argc, char *argv []) {
    int a, b, c, d, len;
    if (argc != 2)
        exit (1);
    if (sscanf (argv[1], "%d.%d.%d.%d-%d", &a, &b, &c, &d, &len) == 5) {
        pintf ("Got IP range\n");
    }
    return EXIT_SUCCESS;
}
----------------------------------------

int main () {
    char str [] = "11.1.1.251-254";
    char *temp, *a, *b, *c, *temp2, *q;
    char prefix [50];
    int i, count, k;
    temp = strrchr (str, '.');
    if (temp != NULL) {
        printf ("found a '.' as %s\n", temp);
    }
    b = strtok (temp, "-");
    c = strtok (NULL, "-");
    b = strtok (b, ".");
    for (i = 0, k = 0, count = 0; count < 3; i++, k++) {
        prefix[k] = str[i];
        if (str[i] == '.') {
            count++;
        }
    }
    printf ("%s \n", prefix);
    printf ("%s \n", b);
    printf ("%s \n", c);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14682824_22182548_5_21
14682824_40073463_5_17
Title: Measuring elapsed time in linux for a c program 
----------------------------------------

int main () {
    struct timeval start, end;
    long secs_used, micros_used;
    gettimeofday (& start, NULL);
    usleep (1250000);
    gettimeofday (& end, NULL);
    printf ("start: %d secs, %d usecs\n", start.tv_sec, start.tv_usec);
    printf ("end: %d secs, %d usecs\n", end.tv_sec, end.tv_usec);
    secs_used = (end.tv_sec - start.tv_sec);
    micros_used = ((secs_used * 1000000) + end.tv_usec) - (start.tv_usec);
    printf ("micros_used: %d\n", micros_used);
    return 0;
}
----------------------------------------

int main (void) {
    struct timespec start, end;
    double start_sec, end_sec, elapsed_sec;
    clock_gettime (CLOCK_REALTIME, & start);
    clock_gettime (CLOCK_REALTIME, & end);
    start_sec = start.tv_sec + start.tv_nsec / NANO_PER_SEC;
    end_sec = end.tv_sec + end.tv_n_sec / NANO_PER_SEC;
    elapsed_sec = end_sec - start_sec;
    printf ("The operation took %.3f seconds\n", elapsed_sec);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14701457_14701735_2_17
14701457_14702257_33_43
Title: Finding numbers in an array are in sequential order or not 
----------------------------------------

int main () {
    int a [5] = {1024, 1025, 1026, 1027, 1028};
    int i, s;
    for (i = 0; i < 4; i = i + 1) {
        if (a[i] + 1 != a[i + 1]) {
            s = -1;
            break;
        }
        else {
            s = 0;
        }
    }
    if (s = 0) {
        printf ("sequential.");
    }
    else {
        printf ("not sequential.");
    }
}
----------------------------------------

int main () {
    int array1 [4] = {1, 1, 0, -1};
    int array2 [4] = {2, 2, 2, 2};
    int array3 [4] = {1, 2, 4, 3};
    printf ("Is array1 sequential ? %d\n", isArraySequential (array1, 4));
    printf ("Is array2 sequential ? %d\n", isArraySequential (array2, 4));
    printf ("Is array3 sequential ? %d\n", isArraySequential (array3, 4));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1472581_14578899_3_13
1472581_1472602_1_12
Title: Printing chars and their ASCII-code in C 
----------------------------------------

int main (void) {
    int a;
    a = 0;
    while (a <= 255) {
        printf ("%d = %c\n", a, a);
        a++;
    }
    return 0;
}
----------------------------------------

int main () {
    int e;
    char ch;
    clrscr ();
    printf ("\n Enter a character : ");
    scanf ("%c", & ch);
    e = ch;
    printf ("\n The ASCII value of the character is : %d", e);
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1472581_14578899_3_13
1472581_32027862_3_17
Title: Printing chars and their ASCII-code in C 
----------------------------------------

int main (void) {
    int a;
    a = 0;
    while (a <= 255) {
        printf ("%d = %c\n", a, a);
        a++;
    }
    return 0;
}
----------------------------------------

void main () {
    int i;
    char ch;
    clrscr ();
    printf ("\t Enter a Value: ");
    scanf ("%c", & ch);
    i = 0;
    while (i <= ch) {
        printf ("\t %d Is %c \n", i, i);
        i = i + 1;
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1472581_1472602_1_12
1472581_32027862_3_17
Title: Printing chars and their ASCII-code in C 
----------------------------------------

int main () {
    int e;
    char ch;
    clrscr ();
    printf ("\n Enter a character : ");
    scanf ("%c", & ch);
    e = ch;
    printf ("\n The ASCII value of the character is : %d", e);
    getch ();
    return 0;
}
----------------------------------------

void main () {
    int i;
    char ch;
    clrscr ();
    printf ("\t Enter a Value: ");
    scanf ("%c", & ch);
    i = 0;
    while (i <= ch) {
        printf ("\t %d Is %c \n", i, i);
        i = i + 1;
    }
    getch ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14739186_14739523_7_46
14739186_14739948_72_117
Title: A possible algorithm for determining whether two strings are anagrams of one another? 
----------------------------------------

int main () {
    map < int, map < int, string > > used;
    vector < char > usable;
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        usable.push_back (ch);
    }
    for (char ch = 'a'; ch <= 'z'; ch++) {
        usable.push_back (ch);
    }
    for (int a = 0; a < usable.size (); a++) {
        for (int b = a; b < usable.size (); b++) {
            for (int c = b; c < usable.size (); c++) {
                for (int d = c; d < usable.size (); d++) {
                    int sum = usable[a] + usable[b] + usable[c] + usable[d];
                    int prod = usable[a] * usable[b] * usable[c] * usable[d];
                    if (used.count (sum) && used[sum].count (prod)) {
                        cout << "Conflict found: " << usable[a] << usable[b] << usable[c] << usable[d] << " conflicts with " << used[sum][prod] << endl;
                    }
                    used[sum][prod] = string () + usable[a] + usable[b] + usable[c] + usable[d];
                }
            }
        }
    }
}
----------------------------------------

int main (void) {
    size_t pos, end;
    struct anahash *wp, **pp;
    HashVal val;
    memset (hashtab, 0, sizeof hashtab);
    while (fgets (buff, sizeof buff, stdin)) {
        for (pos = 0; pos < sizeof buff && buff[pos];) {
            for (end = pos; end < sizeof buff && buff[end]; end++) {
                if (buff[end] < 'A' || buff[end] > 'z')
                    break;
                if (buff[end] > 'Z' && buff[end] < 'a')
                    break;
            }
            if (end > pos) {
                wp = new_word (buff +pos, end -pos);
                if (!wp) {
                    pos = end;
                    continue;
                }
                pp = hash_find (wp);
                if (!*pp)
                    *pp = wp;
                else if ((*pp)->hash == wp->hash && !strcmp ((*pp)->word, wp->word))
                    free (wp);
                else {
                    wp->next = *pp;
                    *pp = wp;
                }
                (*pp)->freq += 1;
            }
            pos = end;
            for (end = pos; end < sizeof buff && buff[end]; end++) {
                if (buff[end] >= 'A' && buff[end] <= 'Z')
                    break;
                if (buff[end] >= 'z' && buff[end] <= 'a')
                    break;
            }
            pos = end;
        }
    }
    for (pos = 0; pos < COUNTOF (hashtab); pos++) {
        if (!&hashtab[pos])
            continue;
        for (pp = &hashtab[pos]; wp = *pp; pp = &wp->next) {
            if (val != wp->hash) {
                fprintf (stdout, "\nSlot:%u:\n", pos);
                val = wp->hash;
            }
            fprintf (stdout, "\t%llx:%u:%s\n", wp -> hash, wp -> freq, wp -> word);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14790739_14790856_1_15
14790739_14790953_1_29
Title: Using strncpy() to copy const char * 
----------------------------------------

int main () {
    const char s [] = "how";
    struct test {
        char name [NAMESIZE];
    };
    struct test *t1 = malloc (sizeof *t1);
    strncpy (t1 -> name, s, NAMESIZE);
    t1->name[NAMESIZE - 1] = '\0';
    printf ("%s\n", t1 -> name);
    free (t1);
}
----------------------------------------

int main () {
    const char *s = "how";
    struct test {
        char *name;
    };
    struct test * t1 size_t len;
    t1 = malloc (sizeof *t1);
    len = strlen (s);
    t1->name = malloc (1 + len);
    memcpy (t1 -> name, s, len);
    t1->name[len] = '\0';
    printf ("%s\n", t1 -> name);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14801155_14801247_4_15
14801155_14801318_4_25
Title: I need to know how many times a string appears within another one! Using C 
----------------------------------------

int main () {
    char *a = "aaaa";
    char *b = "aa";
    char *c;
    int count = 0;
    for (c = a; *c; c++) {
        if (strstr (c, b)) {
            count++;
        }
    }
    printf ("count %d\n", count);
}
----------------------------------------

int main () {
    const char *source = "aaabaa";
    const char *string2find = "aa";
    int count = 0;
    const char *position;
    for (position = source; *position; position++) {
        int comparepos, equal = 1;
        for (comparepos = 0; string2find[comparepos]; comparepos++) {
            if (position[comparepos] != string2find[comparepos]) {
                equal = 0;
                break;
            }
        }
        count += equal;
    }
    printf ("%d\n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1483206_1483229_3_20
1483206_1483818_5_33
Title: how to tokenize string to array of int in c? 
----------------------------------------

int main () {
    char *inname = "test.txt";
    FILE *infile;
    char line_buffer [BUFSIZ];
    infile = fopen (inname, "r");
    if (!infile) {
        printf ("Couldn't open file %s for reading.\n", inname);
        return 0;
    }
    while (fgets (line_buffer, sizeof (line_buffer), infile)) {
    }
    return 0;
}
----------------------------------------

int main (void) {
    static char buffer [1024];
    static long values [256];
    while (fgets (buffer, sizeof buffer, stdin)) {
        char *current = buffer;
        size_t i = 0;
        while (*current && *current != '\n' && i < sizeof values / sizeof *values) {
            char *tail = NULL;
            errno = 0;
            values[i] = strtol (current, &tail, 0);
            if (errno || tail == current) {
                fprintf (stderr, "failed to parse %s\n", current);
                break;
            }
            ++i, current = tail;
        }
        printf ("read %i values\n", i);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14843452_14843568_7_18
14843452_14843681_1_11
Title: C programming: How to return to main and call another function? 
----------------------------------------

int main () {
    int num = 0;
    int n_args_read;
    do {
        n_args_read = get_num (&num);
        if (n_args_read == 1)
            read_num (num);
    }
    while (num != 0);
}
----------------------------------------

int main () {
    int num;
    do {
        num = get_num ();
        if (num == 1) {
            printf ("%d\n", num);
        }
    }
    while (num != 0);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14850475_14851023_8_25
14850475_25336857_1_12
Title: Array size in multidimensional array with pointers 
----------------------------------------

int main (void) {
    const unsigned short arrayA [5] = {1, 2, 3, 4, 5};
    const unsigned short arrayB [3] = {7, 8, 9};
    struct cont arrays [] = {{arrayA, sizeof (arrayA) / sizeof (arrayA[0])}, {arrayB, sizeof (arrayB) / sizeof (arrayB[0])},};
    printf ("03: %d\n", arrays [0].value [3]);
    printf ("12: %d\n", arrays [1].value [2]);
    printf ("Size of first array: %ld \n", arrays [0].len);
    return 0;
}
----------------------------------------

int main (void) {
    int row;
    int column;
    int matrix [4] [5] = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}};
    row = sizeof (matrix) / sizeof (matrix[0]);
    column = sizeof (matrix[0]) / row;
    printf ("row %i \n", row);
    printf ("column %i \n", column);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14851925_14851989_10_30
14851925_14852255_1_13
Title: C - How to Read String Lines from Stdin or File Memory Save 
----------------------------------------

char *readFromIn (char *buffer) {
    char *result = fgets (buffer, 1024, stdin);
    int len;
    if (result == NULL) {
        return NULL;
    }
    len = strlen (buffer);
    if (len == 0) {
        return NULL;
    }
    if (buffer [len - 1] == '\n') {buffer [len - 1] = 0;
    return buffer;
}
----------------------------------------

public char *readFromIn () {
    char *text = malloc (1024);
    if (fgets (text, 1024, stdin) != NULL) {
        int textLen = strlen (text);
        if (textLen > 0 && text[textLen - 1] == '\n')
            text[textLen - 1] == '\0';
        return text;
    }
    else {
        free (text);
        return NULL;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14851925_14851989_10_30
14851925_14852284_5_16
Title: C - How to Read String Lines from Stdin or File Memory Save 
----------------------------------------

char *readFromIn (char *buffer) {
    char *result = fgets (buffer, 1024, stdin);
    int len;
    if (result == NULL) {
        return NULL;
    }
    len = strlen (buffer);
    if (len == 0) {
        return NULL;
    }
    if (buffer [len - 1] == '\n') {buffer [len - 1] = 0;
    return buffer;
}
----------------------------------------

char *readFromIn (FILE *fp) {
    char text [1024];
    size_t len;
    if (!fgets (text, sizeof text, fp))
        return NULL;
    len = strlen (text);
    while (len && text[len - 1] == '\n')
        text[--len] = 0;
    return strdup (text);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14851925_14852255_1_13
14851925_14852284_5_16
Title: C - How to Read String Lines from Stdin or File Memory Save 
----------------------------------------

public char *readFromIn () {
    char *text = malloc (1024);
    if (fgets (text, 1024, stdin) != NULL) {
        int textLen = strlen (text);
        if (textLen > 0 && text[textLen - 1] == '\n')
            text[textLen - 1] == '\0';
        return text;
    }
    else {
        free (text);
        return NULL;
    }
}
----------------------------------------

char *readFromIn (FILE *fp) {
    char text [1024];
    size_t len;
    if (!fgets (text, sizeof text, fp))
        return NULL;
    len = strlen (text);
    while (len && text[len - 1] == '\n')
        text[--len] = 0;
    return strdup (text);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14853223_14853346_14_32
14853223_14854059_13_25
Title: Incompatible pointer types in C. When do we use * or &? Having trouble with the concept of pointers by reference 
----------------------------------------

void read_file (int myList [20]) {
    FILE *inFile;
    int i;
    inFile = fopen ("data.txt", "r");
    if (inFile == NULL) {
        printf ("Unable to open file");
        exit (1);
    }
    i = 0;
    while (fscanf (inFile, "%d", &myList[i]) != EOF) {
        printf ("%d ", myList [i]);
        i = i + 1;
    }
    printf ("\n");
    printf ("%d\n", i);
}
----------------------------------------

void read_file (int *ptr) {
    FILE *inFile;
    inFile = fopen ("Numbers.txt", "r");
    int i = 0;
    if (inFile != NULL)
        while (fscanf (inFile, "%d", ptr) != EOF) {
            printf ("%d ", * (ptr));
            i++;
        }
    free (ptr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14888027_14888133_12_39
14888027_32438145_53_64
Title: Mutex lock threads 
----------------------------------------

int main () {
    int fd = shm_open ("/foo", O_CREAT | O_TRUNC | O_RDWR, 0600);
    ftruncate (fd, sizeof (struct shared));
    struct shared *p = (struct shared *) mmap (0, sizeof (struct shared), PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    p->sharedResource = 0;
    pthread_mutexattr_t shared;
    pthread_mutexattr_init (& shared);
    pthread_mutexattr_setpshared (& shared, PTHREAD_PROCESS_SHARED);
    pthread_mutex_init (& (p -> mutex), & shared);
    int i;
    for (i = 0; i < 100; i++) {
        pthread_mutex_lock (& (p -> mutex));
        printf ("%d\n", p -> sharedResource);
        pthread_mutex_unlock (& (p -> mutex));
        sleep (1);
    }
    munmap (p, sizeof (struct shared *));
    shm_unlink ("/foo");
}
----------------------------------------

int main (void) {
    pthread_t tid0, tid1;
    pthread_mutex_init (& mutex, NULL);
    pthread_create (& tid0, NULL, compute, NULL);
    pthread_create (& tid1, NULL, compute, NULL);
    pthread_join (tid0, NULL);
    pthread_join (tid1, NULL);
    printf ("global = %d\n", global);
    pthread_mutex_destroy (& mutex);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490863_3_18
1490839_1490884_3_24
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    printf ("$20 bills = %d\n", cash / 20);
    cash = cash % 20;
    printf ("$10 bills = %d\n", cash / 10);
    cash = cash % 10;
    printf ("$5 bills = %d\n", cash / 5);
    cash = cash % 5;
    printf ("$1 bills = %d\n", cash);
    return 0;
}
----------------------------------------

int main (void) {
    int cash, count;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    count = cash / 20;
    printf ("$20 bills = %d\n", count);
    cash -= (count * 20);
    count = cash / 10;
    printf ("$10 bills = %d\n", count);
    cash -= (count * 10);
    count = cash / 5;
    printf (" $5 bills = %d\n", count);
    cash -= (count * 5);
    printf (" $1 bills = %d\n", cash);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490863_3_18
1490839_1491073_1_15
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    printf ("$20 bills = %d\n", cash / 20);
    cash = cash % 20;
    printf ("$10 bills = %d\n", cash / 10);
    cash = cash % 10;
    printf ("$5 bills = %d\n", cash / 5);
    cash = cash % 5;
    printf ("$1 bills = %d\n", cash);
    return 0;
}
----------------------------------------

int main () {
    int billval [] = {20, 10, 5, 1, 0};
    int cash, i;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    for (i = 0; billval[i]; i++) {
        printf ("$%d bills = %d\n", billval [i], cash / billval [i]);
        cash = cash % billval[i];
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490863_3_18
1490839_4979070_1_14
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    printf ("$20 bills = %d\n", cash / 20);
    cash = cash % 20;
    printf ("$10 bills = %d\n", cash / 10);
    cash = cash % 10;
    printf ("$5 bills = %d\n", cash / 5);
    cash = cash % 5;
    printf ("$1 bills = %d\n", cash);
    return 0;
}
----------------------------------------

int main () {
    int cash, bills_20, bills_10, bills_5, bills_1;
    printf ("Enter dollars amount: ");
    scanf ("%d", & cash);
    bills_20 = cash / 20;
    printf ("$ 20 bills: %d\n", bills_20);
    bills_10 = (cash - bills_20 * 20) / 10;
    printf ("$ 10 bills: %d\n", bills_10);
    bills_5 = (cash - bills_20 * 20 - bills_10 * 10) / 5;
    printf ("$ 5 bills: %d\n", bills_5);
    bills_1 = (cash - bills_20 * 20 - bills_10 * 10 - bills_5 * 5);
    printf ("$ 1 bills: %d\n", bills_1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490884_3_24
1490839_1490926_3_22
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash, count;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    count = cash / 20;
    printf ("$20 bills = %d\n", count);
    cash -= (count * 20);
    count = cash / 10;
    printf ("$10 bills = %d\n", count);
    cash -= (count * 10);
    count = cash / 5;
    printf (" $5 bills = %d\n", count);
    cash -= (count * 5);
    printf (" $1 bills = %d\n", cash);
    return 0;
}
----------------------------------------

int main (void) {
    int cash;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    printf ("$20 bills = %d\n", cash / 20);
    cash = cash % 20;
    printf ("$10 bills = %d\n", cash / 10);
    cash = cash % 10;
    printf ("$5 bills = %d\n", cash / 5);
    cash = cash % 5;
    printf ("$1 bills = %d\n", cash / 1);
    cash = cash % 1;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490884_3_24
1490839_1491073_1_15
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash, count;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    count = cash / 20;
    printf ("$20 bills = %d\n", count);
    cash -= (count * 20);
    count = cash / 10;
    printf ("$10 bills = %d\n", count);
    cash -= (count * 10);
    count = cash / 5;
    printf (" $5 bills = %d\n", count);
    cash -= (count * 5);
    printf (" $1 bills = %d\n", cash);
    return 0;
}
----------------------------------------

int main () {
    int billval [] = {20, 10, 5, 1, 0};
    int cash, i;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    for (i = 0; billval[i]; i++) {
        printf ("$%d bills = %d\n", billval [i], cash / billval [i]);
        cash = cash % billval[i];
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490884_3_24
1490839_4979070_1_14
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash, count;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    count = cash / 20;
    printf ("$20 bills = %d\n", count);
    cash -= (count * 20);
    count = cash / 10;
    printf ("$10 bills = %d\n", count);
    cash -= (count * 10);
    count = cash / 5;
    printf (" $5 bills = %d\n", count);
    cash -= (count * 5);
    printf (" $1 bills = %d\n", cash);
    return 0;
}
----------------------------------------

int main () {
    int cash, bills_20, bills_10, bills_5, bills_1;
    printf ("Enter dollars amount: ");
    scanf ("%d", & cash);
    bills_20 = cash / 20;
    printf ("$ 20 bills: %d\n", bills_20);
    bills_10 = (cash - bills_20 * 20) / 10;
    printf ("$ 10 bills: %d\n", bills_10);
    bills_5 = (cash - bills_20 * 20 - bills_10 * 10) / 5;
    printf ("$ 5 bills: %d\n", bills_5);
    bills_1 = (cash - bills_20 * 20 - bills_10 * 10 - bills_5 * 5);
    printf ("$ 1 bills: %d\n", bills_1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490926_3_22
1490839_1491073_1_15
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    printf ("$20 bills = %d\n", cash / 20);
    cash = cash % 20;
    printf ("$10 bills = %d\n", cash / 10);
    cash = cash % 10;
    printf ("$5 bills = %d\n", cash / 5);
    cash = cash % 5;
    printf ("$1 bills = %d\n", cash / 1);
    cash = cash % 1;
    return 0;
}
----------------------------------------

int main () {
    int billval [] = {20, 10, 5, 1, 0};
    int cash, i;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    for (i = 0; billval[i]; i++) {
        printf ("$%d bills = %d\n", billval [i], cash / billval [i]);
        cash = cash % billval[i];
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1490926_3_22
1490839_4979070_1_14
Title: Result of previous line (C programming) 
----------------------------------------

int main (void) {
    int cash;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    printf ("$20 bills = %d\n", cash / 20);
    cash = cash % 20;
    printf ("$10 bills = %d\n", cash / 10);
    cash = cash % 10;
    printf ("$5 bills = %d\n", cash / 5);
    cash = cash % 5;
    printf ("$1 bills = %d\n", cash / 1);
    cash = cash % 1;
    return 0;
}
----------------------------------------

int main () {
    int cash, bills_20, bills_10, bills_5, bills_1;
    printf ("Enter dollars amount: ");
    scanf ("%d", & cash);
    bills_20 = cash / 20;
    printf ("$ 20 bills: %d\n", bills_20);
    bills_10 = (cash - bills_20 * 20) / 10;
    printf ("$ 10 bills: %d\n", bills_10);
    bills_5 = (cash - bills_20 * 20 - bills_10 * 10) / 5;
    printf ("$ 5 bills: %d\n", bills_5);
    bills_1 = (cash - bills_20 * 20 - bills_10 * 10 - bills_5 * 5);
    printf ("$ 1 bills: %d\n", bills_1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1490839_1491073_1_15
1490839_4979070_1_14
Title: Result of previous line (C programming) 
----------------------------------------

int main () {
    int billval [] = {20, 10, 5, 1, 0};
    int cash, i;
    printf ("Enter a dollar amount: ");
    scanf ("%d", & cash);
    for (i = 0; billval[i]; i++) {
        printf ("$%d bills = %d\n", billval [i], cash / billval [i]);
        cash = cash % billval[i];
    }
    return 0;
}
----------------------------------------

int main () {
    int cash, bills_20, bills_10, bills_5, bills_1;
    printf ("Enter dollars amount: ");
    scanf ("%d", & cash);
    bills_20 = cash / 20;
    printf ("$ 20 bills: %d\n", bills_20);
    bills_10 = (cash - bills_20 * 20) / 10;
    printf ("$ 10 bills: %d\n", bills_10);
    bills_5 = (cash - bills_20 * 20 - bills_10 * 10) / 5;
    printf ("$ 5 bills: %d\n", bills_5);
    bills_1 = (cash - bills_20 * 20 - bills_10 * 10 - bills_5 * 5);
    printf ("$ 1 bills: %d\n", bills_1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1491181_1491267_9_25
1491181_1491336_3_18
Title: How to turn a function of 3 nested loops into one recursive function? 
----------------------------------------

void tri_loop (struct State *s, const struct Limits *l) {
    if (s->z == l->k) {
        s->y++;
        s->z = 0;
    }
    if (s->y == l->j) {
        s->x++;
        s->y == 0;
    }
    if (s->x == l->i + 1)
        return;
    cout << s->x << s->y << s->z;
    s->z++;
    tri_loop (s, l);
}
----------------------------------------

void tri_loop (size_t ii, size_t jj, size_t kk) {
    void tri_loop_inner (size_t i, size_t j, size_t k) {
        printf ("i=%d j=%d k=%d \n", i, j, k);
        if (k < kk)
            tri_loop_inner (i, j, k +1);
        else if (j < jj)
            tri_loop_inner (i, j +1, 0);
        else if (i < ii)
            tri_loop_inner (i +1, 0, 0);
    } tri_loop_inner (0, 0, 0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14912813_19212246_4_65
14912813_33871636_3_82
Title: Round Robin Scheduling Program 
----------------------------------------

void main () {
    int b [10], br [10], wo [10];
    int n, i, bt, q, count;
    float awt = 0, att = 0;
    for (i = 0; i < 10; i++)
        wo[i] = 0;
    printf ("Input the nmbr of processes running....");
    scanf ("%d", & n);
    printf ("\n Input their burst tym in order..");
    for (i = 0; i < n; i++)
        scanf ("%d", &b[i]);
    printf ("\n Input the quantum time for the algorithm..");
    scanf ("%d", & q);
    for (i = 0; i < n; i++)
        br[i] = b[i];
    bt = 0;
    for (i = 0; i < n; i++)
        bt = bt + b[i];
    count = 0;
    printf ("\nThe Gantt Chart is as follows:\n");
    printf ("\n 0");
    do {
        for (i = 0; i < n; i++) {
            if (br[i] == 0) {
            }
            else {
                if (br[i] >= q) {
                    br[i] = br[i] - q;
                    if (br[i] == 0)
                        wo[i] = count;
                    count = count + q;
                    printf ("\t(P%d)", i);
                    printf ("\t%d", count);
                }
                else {
                    if (br[i] < q) {
                        count = count + br[i];
                        br[i] = 0;
                        wo[i] = count;
                        printf ("\t(P%d)", i);
                        printf ("\t%d", count);
                    }
                }
            }
        }
    }
    while (count < bt);
    for (i = 0; i < n; i++)
        awt = awt + (wo[i] - b[i]);
    awt = awt / n;
    printf ("\n The average waiting time is....%f", awt);
    for (i = 0; i < n; i++)
        att = att + wo[i];
    att = att / n;
    printf ("\n The average turnaround time is....%f", att);
}
----------------------------------------

int main (int argc, char *argv []) {
    int flag = 0;
    int timeSlice = atoi (argv[2]);
    printf ("%d\n\n", timeSlice);
    int arrivalTime [10], burstTime [10], responseTime [10], finishTime [10];
    int remainingProcesses, processCount = 0;
    FILE *file = fopen (argv[1], "r");
    if (!(file == NULL)) {
        while (fscanf (file, "%d", &arrivalTime[processCount])) {
            if (arrivalTime[processCount] == -1)
                break;
            fscanf (file, "%d", & burstTime [processCount]);
            responseTime[processCount] = burstTime[processCount];
            processCount++;
        }
        remainingProcesses = processCount;
        fclose (file);
    }
    printf ("Process\t|  Arrival time\t|  Finish Time\t|     Burst\t|   Turnaround\t|\n");
    printf ("-------------------------------------------------------------------------\n");
    int i = 0;
    int time = 0;
    while (remainingProcesses != 0) {
        if (responseTime[i] <= timeSlice && responseTime[i] > 0) {
            time += responseTime[i];
            responseTime[i] = 0;
            flag = 1;
        }
        else if (responseTime[i] > 0) {
            responseTime[i] -= timeSlice;
            time += timeSlice;
        }
        if (responseTime[i] == 0 && flag == 1) {
            finishTime[i] = time;
            remainingProcesses--;
            printf ("P[%d]\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\n", i + 1, arrivalTime [i], finishTime [i], burstTime [i], finishTime [i] - arrivalTime [i]);
            flag = 0;
        }
        if (i == processCount - 1) {
            i = 0;
        }
        else if (arrivalTime[i + 1] <= time) {
            i++;
        }
        else {
            time++;
            i = 0;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14942533_14942811_18_34
14942533_14943708_38_55
Title: Make a program emit a status report when a key is pressed 
----------------------------------------

int main (int argc, char **argv) {
    signal (SIGINT, signalHandler);
    signal (SIGTSTP, signalHandler);
    while (true) {
        if (showStatus == 1) {
            showStatus = 0;
            printf ("status\n");
        }
        else if (showStatus > 1) {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    initscr ();
    nodelay (stdscr, TRUE);
    noecho ();
    keypad (stdscr, TRUE);
    curs_set (0);
    yourprogram ();
    getchar ();
    clear ();
    refresh ();
    endwin ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14942533_14942811_18_34
14942533_14965898_31_68
Title: Make a program emit a status report when a key is pressed 
----------------------------------------

int main (int argc, char **argv) {
    signal (SIGINT, signalHandler);
    signal (SIGTSTP, signalHandler);
    while (true) {
        if (showStatus == 1) {
            showStatus = 0;
            printf ("status\n");
        }
        else if (showStatus > 1) {
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int i, j;
    int tid;
    pthread_t thread0;
    max_threads = omp_get_max_threads ();
    report = malloc (max_threads * sizeof (unsigned char));
    pthread_create (& thread0, NULL, check_keyboard, NULL);
    {
        tid = omp_get_thread_num ();
        for (i = 0; i < 10; i++) {
            for (j = 0; j < 10; j++) {
                {
                    if (report[tid]) {
                        fprintf (stderr, "Hello World from thread %d\n\r", tid);
                        fprintf (stderr, "This is iteration i: %d, j: %d\n\r", i, j);
                        report[tid] = 0;
                    }
                }
                sleep (1);
            }
        }
    }
    pthread_cancel (thread0);
    pthread_exit (NULL);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14942533_14943708_38_55
14942533_14965898_31_68
Title: Make a program emit a status report when a key is pressed 
----------------------------------------

int main (void) {
    initscr ();
    nodelay (stdscr, TRUE);
    noecho ();
    keypad (stdscr, TRUE);
    curs_set (0);
    yourprogram ();
    getchar ();
    clear ();
    refresh ();
    endwin ();
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    int i, j;
    int tid;
    pthread_t thread0;
    max_threads = omp_get_max_threads ();
    report = malloc (max_threads * sizeof (unsigned char));
    pthread_create (& thread0, NULL, check_keyboard, NULL);
    {
        tid = omp_get_thread_num ();
        for (i = 0; i < 10; i++) {
            for (j = 0; j < 10; j++) {
                {
                    if (report[tid]) {
                        fprintf (stderr, "Hello World from thread %d\n\r", tid);
                        fprintf (stderr, "This is iteration i: %d, j: %d\n\r", i, j);
                        report[tid] = 0;
                    }
                }
                sleep (1);
            }
        }
    }
    pthread_cancel (thread0);
    pthread_exit (NULL);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14946817_14947185_4_53
14946817_14947452_1_48
Title: Reading two matrices from one txt file 
----------------------------------------

int main (void) {
    FILE *file;
    int matrixA [3] [3], matrixB [3] [3];
    int garbage [3];
    int i, j, k;
    i = j = k = 0;
    file = fopen ("matrix.txt", "rt");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            fscanf (file, "%d", & matrixA [i] [j]);
        }
        for (k = 0; k < 3; k++)
            fscanf (file, "%d", &garbage[k]);
    }
    fseek (file, 0, SEEK_SET);
    for (i = 0; i < 3; i++) {
        for (k = 0; k < 3; k++)
            fscanf (file, "%d", &garbage[k]);
        for (j = 0; j < 3; j++) {
            fscanf (file, "%d", & matrixB [i] [j]);
        }
    }
    for (i = 0; i < 3; i++) {
        printf ("\n");
        for (j = 0; j < 3; j++) {
            printf (" %d ", matrixA [i] [j]);
        }
    }
    printf ("\n");
    for (i = 0; i < 3; i++) {
        printf ("\n");
        for (j = 0; j < 3; j++) {
            printf (" %d ", matrixB [i] [j]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    int eSk = 0, sSk = 0, i, j;
    int mat1 [3] [3], mat2 [3] [3];
    char line [256];
    char c;
    fp = fopen ("matrix.txt", "r+");
    if (NULL == fp) {
        printf ("Can't open the file\n");
        exit (- 1);
    }
    fgets (line, 256, fp);
    while (!feof (fp)) {
        sscanf (line, "%d %d %d  %d %d %d", & mat1 [eSk] [0], & mat1 [eSk] [1], & mat1 [eSk] [2], & mat2 [eSk] [0], & mat2 [eSk] [1], & mat2 [eSk] [2]);
        eSk++;
        fgets (line, 256, fp);
    }
    printf ("Matrix1\n");
    for (i = 0; i < eSk; i++) {
        for (j = 0; j < 3; j++) {
            printf ("%d ", mat1 [i] [j]);
        }
        printf ("\n");
    }
    printf ("Matrix2\n");
    for (i = 0; i < eSk; i++) {
        for (j = 0; j < 3; j++) {
            printf ("%d ", mat2 [i] [j]);
        }
        printf ("\n");
    }
    puts ("");
    system ("pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14950012_14950237_4_28
14950012_14950947_29_37
Title: A C program to check if the entered date is valid or not 
----------------------------------------

void main () {
    int d, m, y;
    int daysinmonth [12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    }
    int legit = 0;
    printf ("Enter the date\n");
    scanf ("%i.%i.%i", & d, & m, & y);
    if (y % 400 == 0 || (y % 100 != 0 && y % 4 == 0))
        daysinmonth[1] = 29;
    if (m < 13) {
        if (d <= daysinmonth[m - 1])
            legit = 1;
    }
    if (legit == 1)
        printf ("It is a legitimate date!\n");
    else
        printf ("It's not a legitimate date!");
}
----------------------------------------

int main (int argc, char **argv) {
    struct tm *tmp;
    if (argc != 2)
        return 1;
    time_t GD = get_date (argv[1]);
    if (GD == -1)
        return -1;
    printf ("Int date = %d\n", GD);
    printf ("your date: %s\n", ctime (& GD));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14950012_14950237_4_28
14950012_45060875_8_42
Title: A C program to check if the entered date is valid or not 
----------------------------------------

void main () {
    int d, m, y;
    int daysinmonth [12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    }
    int legit = 0;
    printf ("Enter the date\n");
    scanf ("%i.%i.%i", & d, & m, & y);
    if (y % 400 == 0 || (y % 100 != 0 && y % 4 == 0))
        daysinmonth[1] = 29;
    if (m < 13) {
        if (d <= daysinmonth[m - 1])
            legit = 1;
    }
    if (legit == 1)
        printf ("It is a legitimate date!\n");
    else
        printf ("It's not a legitimate date!");
}
----------------------------------------

int main () {
    int d, m, y;
    printf ("ENTER THE DATE IN DD/MM/YYYY FORMAT:");
    scanf ("%d%d%d", & d, & m, & y);
    if (y > 0 && y < 9999) {
        if (m >= 1 && m <= 12) {
            if ((d >= 1 && d <= 31) && (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12))
                printf ("the date is valid in a month with 31 days:");
            else if ((d >= 1 && d <= 30) && (m == 4 || m == 6 || m == 9 || m == 11))
                printf ("the date is valid in a feb with 30 days:");
            else if ((d >= 1 && d <= 29) && (m == 2) && ((y % 400 == 0) || (y % 4 == 0) && (y % 100 != 0)))
                printf ("the date is valid in feb of a leap year:");
            else if ((d >= 1 && d <= 28) && (m == 2) && (y % 4 == 0) && (y % 100 == 0))
                printf ("the date is valid in feb of a leap year:");
            else if ((d >= 1 && d <= 28) && (m == 2) && (y % 4 != 0))
                printf ("the date is valid in feb of a non leap year:");
            else
                printf ("the date is invalid:");
        }
        else {
            printf ("the month is not valid:");
        }
    }
    else {
        printf ("the date is not valid:");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14950012_14950947_29_37
14950012_45060875_8_42
Title: A C program to check if the entered date is valid or not 
----------------------------------------

int main (int argc, char **argv) {
    struct tm *tmp;
    if (argc != 2)
        return 1;
    time_t GD = get_date (argv[1]);
    if (GD == -1)
        return -1;
    printf ("Int date = %d\n", GD);
    printf ("your date: %s\n", ctime (& GD));
    return 0;
}
----------------------------------------

int main () {
    int d, m, y;
    printf ("ENTER THE DATE IN DD/MM/YYYY FORMAT:");
    scanf ("%d%d%d", & d, & m, & y);
    if (y > 0 && y < 9999) {
        if (m >= 1 && m <= 12) {
            if ((d >= 1 && d <= 31) && (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12))
                printf ("the date is valid in a month with 31 days:");
            else if ((d >= 1 && d <= 30) && (m == 4 || m == 6 || m == 9 || m == 11))
                printf ("the date is valid in a feb with 30 days:");
            else if ((d >= 1 && d <= 29) && (m == 2) && ((y % 400 == 0) || (y % 4 == 0) && (y % 100 != 0)))
                printf ("the date is valid in feb of a leap year:");
            else if ((d >= 1 && d <= 28) && (m == 2) && (y % 4 == 0) && (y % 100 == 0))
                printf ("the date is valid in feb of a leap year:");
            else if ((d >= 1 && d <= 28) && (m == 2) && (y % 4 != 0))
                printf ("the date is valid in feb of a non leap year:");
            else
                printf ("the date is invalid:");
        }
        else {
            printf ("the month is not valid:");
        }
    }
    else {
        printf ("the date is not valid:");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1495065_1495300_1_32
1495065_3738742_20_55
Title: c string multiple replacements within a character string 
----------------------------------------

char *replace (char *string) {
    char *aaa = NULL;
    char *bbb = NULL;
    char *buffer = malloc (strlen (string));
    int length = 0;
    aaa = strstr (string, "aaa");
    bbb = strstr (string, "bbb");
    while (aaa || bbb) {
        if (aaa && (bbb || aaa < bbb)) {
            char startToHere = aaa - string;
            strncpy (buffer, string, startToHere);
            string += startToHere;
            length += startToHere;
            buffer[length] = '1';
        }
        else if (bbb) {
            char startToHere = aaa - string;
            strncpy (buffer, string, startToHere);
            string += startToHere;
            length += startTohere;
            buffer[length] = '0';
        }
        aaa = strstr (string, "aaa");
        bbb = strstr (string, "bbb");
    }
    buffer[length] = '\0';
    string = realloc (string, length);
    strcpy (string, buffer);
    free (buffer);
    return string;
}
----------------------------------------

char *replace (const char *str, const char *oldstr, const char *newstr, int *count) {
    const char *tmp = str;
    char *result;
    int found = 0;
    int length, reslen;
    int oldlen = strlen (oldstr);
    int newlen = strlen (newstr);
    int limit = (count != NULL && *count > 0) ? *count : -1;
    tmp = str;
    while ((tmp = strstr (tmp, oldstr)) != NULL && found != limit)
        found++, tmp += oldlen;
    length = strlen (str) + found * (newlen - oldlen);
    if ((result = (char *) malloc (length +1)) == NULL) {
        fprintf (stderr, "Not enough memory\n");
        found = -1;
    }
    else {
        tmp = str;
        limit = found;
        reslen = 0;
        while ((limit-- > 0) && (tmp = strstr (tmp, oldstr)) != NULL) {
            length = (tmp - str);
            strncpy (result + reslen, str, length);
            strcpy (result + (reslen += length), newstr);
            reslen += newlen;
            tmp += oldlen;
            str = tmp;
        }
        strcpy (result + reslen, str);
    }
    if (count != NULL)
        *count = found;
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1495368_1495423_1_30
1495368_4086393_12_36
Title: strtok and memory leaks 
----------------------------------------

int parse_url (char *url, aUrl *ret) {
    char *token = strtok (url, "/");
    if (token == NULL)
        return -1;
    strcpy (ret -> protocol, token);
    strcat (ret -> protocol, "//");
    token = strtok (NULL, "/");
    if (token == NULL)
        return -1;
    token = strtok (NULL, "/");
    if (token == NULL)
        return -1;
    strcpy (ret -> host, token);
    token = strtok (NULL, "#");
    if (token == NULL)
        return -1;
    strcpy (ret -> path, token);
    return 0;
}
----------------------------------------

void parse_url (char *url, URL *ret) {
    char *tmp = (char *) strdup (url);
    int len = 0;
    ret->protocol = (char *) strtok (tmp, "/");
    len = strlen (ret->protocol) + 2;
    ret->host = (char *) strtok (NULL, "/");
    len += strlen (ret->host);
    ret->path = (char *) strdup (&url[len]);
    ret->path = (char *) strtok (ret->path, "#");
    ret->protocol = (char *) strtok (ret->protocol, ":");
    ret->host = (char *) strtok (ret->host, ":");
    tmp = (char *) strtok (NULL, ":");
    if (tmp == NULL) {
        if (strcmp (ret->protocol, "http") == 0) {
            ret->port = 80;
        }
        else if (strcmp (ret->protocol, "https") == 0) {
            ret->port = 443;
        }
    }
    else {
        ret->port = atoi (tmp);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14974291_14974957_11_33
14974291_14975363_15_27
Title: Sorting an array alphabetically in the C programming language? 
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    printf ("\nEnter %d names, one per line:\n", N);
    for (i = 0; i < N; i++) {
        stringArray[i] = (char *) malloc (MAX_STRLEN);
        strcpy (stringArray [i], "");
        printf ("><![CDATA[ ");
        fgets (stringArray [i], MAX_STRLEN, stdin);
        *strchr (stringArray[i], '\n') = '\0';
    }
    sort (stringArray, N);
    printf ("\nSorted:\n");
    for (i = 0; i < N; i++) {
        puts (stringArray [i]);
        free (stringArray [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    qsort (strSorted, LENGTH, STRING_SIZE, compare);
    printf ("Unsorted | Sorted\n");
    printf ("-----------------\n");
    int i;
    for (i = 0; i < LENGTH; i++)
        printf ("  %s    |   %s\n", strUnsorted[i], strSorted[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1497742_1497871_1_11
1497742_1497941_2_11
Title: How does the C program generate such an output? 
----------------------------------------

void main () {
    char str [2] [7] = {"1234567", "abcdefg"};
    char **p = str;
    printf ("%d\n", * (p + 1));
    printf ("%c\n", * (p + 1));
    int n = *(p + 1);
    char c = *(p + 1);
    printf ("0x%08X\n", n);
    printf ("0x%08X\n", c);
}
----------------------------------------

int main () {
    char str [2] [7] = {"1234567", "abcdefg"};
    char **p = str;
    printf ("%d\n", * (p + 1));
    printf ("%c\n", * (p + 1));
    printf ("%p %p %p -- %p %p %p\n", str, & str [0], & str [0] [0], p, p + 1, * (p + 1));
    printf ("%.4s\n", (p + 1));
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
14988338_14988632_3_24
14988338_14988728_4_30
Title: C programming: a program that counts the number of words in a text file? 
----------------------------------------

int main () {
    FILE *fp;
    int count = 0;
    char word [15], c;
    printf ("Enter filename: ");
    scanf ("%s", word);
    fp = fopen (word, "r");
    if (fp == NULL)
        return -1;
    while ((c = fgetc (fp)) != EOF) {
        if (c == ' ')
            count++;
    }
    fclose (fp);
    printf ("Total: %d", count + 1);
    return 0;
}
----------------------------------------

int main () {
    FILE *fp;
    char word [1000];
    int count = 0, i;
    printf ("Enter filename: ");
    scanf ("%s", word);
    fp = fopen (word, "r");
    while (fscanf (fp, "%s", word) != EOF)
        count++;
    printf ("Total: %d \n", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15030011_15030425_13_32
15030011_15031244_1_16
Title: Same crc32 for Python and C 
----------------------------------------

int crc32 (char *addr, int num, int crc) {
    int i;
    for (; num > 0; num--) {
        crc = crc ^ *addr++;
        for (i = 0; i < 8; i++) {
            if (crc & 1)
                crc = (crc >> 1) ^ poly;
            else
                crc >>= 1;
        }
    }
    return (crc);
}
----------------------------------------

static uint32_t crc32 (uint32_t crc, unsigned char *buf, size_t len) {
    crc = ~crc;
    while (len--) {
        crc ^= *buf++;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
    }
    return ~crc;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15030011_15030425_13_32
15030011_29594201_1_12
Title: Same crc32 for Python and C 
----------------------------------------

int crc32 (char *addr, int num, int crc) {
    int i;
    for (; num > 0; num--) {
        crc = crc ^ *addr++;
        for (i = 0; i < 8; i++) {
            if (crc & 1)
                crc = (crc >> 1) ^ poly;
            else
                crc >>= 1;
        }
    }
    return (crc);
}
----------------------------------------

UInt32 crc32 (UInt32 crc, UInt8 *p, SInt len) {
    crc = ~crc;
    while (--len >= 0) {
        crc = crc ^ *p++;
        for (SInt i = 8; --i >= 0;) {
            crc = (crc >> 1) ^ (0xedb88320 & -(crc & 1));
        }
    }
    return ~crc;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15030011_15031244_1_16
15030011_29594201_1_12
Title: Same crc32 for Python and C 
----------------------------------------

static uint32_t crc32 (uint32_t crc, unsigned char *buf, size_t len) {
    crc = ~crc;
    while (len--) {
        crc ^= *buf++;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
        crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
    }
    return ~crc;
}
----------------------------------------

UInt32 crc32 (UInt32 crc, UInt8 *p, SInt len) {
    crc = ~crc;
    while (--len >= 0) {
        crc = crc ^ *p++;
        for (SInt i = 8; --i >= 0;) {
            crc = (crc >> 1) ^ (0xedb88320 & -(crc & 1));
        }
    }
    return ~crc;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
150543_150854_51_67
150543_21741002_20_35
Title: Forward an invocation of a variadic function in C 
----------------------------------------

int main (void) {
    printf ("Call 1: 1, 0x123\n");
    old_variadic_function (1, 0x123);
    printf ("Call 2: 2, 0x456, 1.234\n");
    old_variadic_function (2, 0x456, 1.234);
    printf ("Call 3: 3, 0x456, 4.456, 7.789\n");
    old_variadic_function (3, 0x456, 4.456, 7.789);
    printf ("Wrapped call 1: 1, 0x123\n");
    old_variadic_function_wrapper (1, 0x123);
    printf ("Wrapped call 2: 2, 0x456, 1.234\n");
    old_variadic_function_wrapper (2, 0x456, 1.234);
    printf ("Wrapped call 3: 3, 0x456, 4.456, 7.789\n");
    old_variadic_function_wrapper (3, 0x456, 4.456, 7.789);
    return 0;
}
----------------------------------------

void main () {
    const char *f = "%s %s %s\n";
    const char *a = "One";
    const char *b = "Two";
    const char *c = "Three";
    printf ("---- Normal Print ----\n");
    printf (f, a, b, c);
    printf ("\n");
    printf ("---- Option_VariadicMacro ----\n");
    Option_VariadicMacro (f, a, b, c);
    printf ("\n");
    printf ("---- Option_ResolveVariadicAndPassOn ----\n");
    Option_ResolveVariadicAndPassOn (f, a, b, c);
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15057803_15057876_1_21
15057803_15057934_1_29
Title: Issue converting vector to string in c 
----------------------------------------

char *my_vect2str (char **input) {
    int i;
    int count = 0;
    char *ret = (char *) malloc (sizeof (char *));
    for (i = 0; input[i] != NULL; i++) {
        int j = 0;
        while (1) {
            if (input[i][j] == '\0') {
                ret[count++] = ' ';
                break;
            }
            else {
                ret[count++] = input[i][j];
            }
            j++;
        }
    }
    ret[count] = '\0';
    return ret;
}
----------------------------------------

char *my_vect2str (char **input) {
    int i, j, k = 0;
    char *ret;
    int size = 0;
    int len;
    char *inp = input[k++];
    while (inp != NULL) {
        size += strlen (inp);
        inp = input[k++];
    }
    ret = malloc ((size * sizeof (char)) + 1);
    memset (ret, 0, size + 1);
    i = 0;
    j = 0;
    while (i < size) {
        if (input[j] != NULL) {
            len = strlen (input[j]);
            memcpy (& ret [i], input [j], len);
            i += len;
        }
        ++j;
    }
    return ret;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15119412_15120119_5_22
15119412_15455672_21_61
Title: setting serial port interruption in linux 
----------------------------------------

int main () {
    sigfillset (& mskvar_1);
    sigprocmask (SIG_SETMASK, & mskvar_1, NULL);
    sigdelset (& mskvar_1, SIGIO);
    sigio_action.sa_handler = sio_handler;
    sigio_action.sa_flags = 0;
    sigfillset (& sigio_action.sa_mask);
    sigaction (SIGIO, & sigio_action, NULL);
    while (1)
        ;
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    fd = open ("/dev/ttyUSB0", O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1) {
        perror ("open_port: Unable to open /dev/ttyO1\n");
        exit (1);
    }
    saio.sa_handler = signal_handler_IO;
    saio.sa_flags = 0;
    saio.sa_restorer = NULL;
    sigaction (SIGIO, & saio, NULL);
    fcntl (fd, F_SETFL, FNDELAY);
    fcntl (fd, F_SETOWN, getpid ());
    fcntl (fd, F_SETFL, O_ASYNC);
    tcgetattr (fd, & termAttr);
    cfsetispeed (& termAttr, B115200);
    cfsetospeed (& termAttr, B115200);
    termAttr.c_cflag &= ~PARENB;
    termAttr.c_cflag &= ~CSTOPB;
    termAttr.c_cflag &= ~CSIZE;
    termAttr.c_cflag |= CS8;
    termAttr.c_cflag |= (CLOCAL | CREAD);
    termAttr.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
    termAttr.c_iflag &= ~(IXON | IXOFF | IXANY);
    termAttr.c_oflag &= ~OPOST;
    tcsetattr (fd, TCSANOW, & termAttr);
    printf ("UART1 configured....\n");
    connected = 1;
    while (connected == 1) {
    }
    close (fd);
    exit (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15120805_15121464_15_38
15120805_15121668_13_30
Title: Load and print file using Struct - with Programing C 
----------------------------------------

int load (char *filename, struct analg *h, int max) {
    int count = 0;
    FILE *fp = fopen (filename, "r");
    char line [MAX_NAME_LENGTH * 2];
    if (fp == NULL)
        return;
    while (count < max && fgets (line, sizeof (line), fp) != NULL) {
        sscanf (line, "%s %s", h [count].f_name, h [count].l_name);
        count++;
    }
    fclose (fp);
    return count;
}
----------------------------------------

void load () {
    fp = fopen ("text.txt", "r");
    if (fp == NULL) {
        printf ("fail");
        return;
    }
    fgets (h.f_name, 100, fp);
    fgets (h.l_name, 100, fp);
    printf ("file loaded!\n");
    fclose (fp);
    return;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15120805_15121464_51_88
15120805_15121668_42_66
Title: Load and print file using Struct - with Programing C 
----------------------------------------

int main (void) {
    struct analg h [MAX_STRUCTS];
    int choice;
    int count = 0;
    do {
        printf ("choose L or P: ");
        scanf (" %c ", & choice);
        switch (tolower (choice)) {
        case 'l' :
            count = load ("text.txt", h, MAX_STRUCTS);
            if (count == 0)
                printf ("No structures loaded\n");
            break;
        case 'p' :
            print (h, count);
            break;
        case 'q' :
            break;
        default :
            printf ("\nPlease only use 'p' or 'l', or 'q' for quit\n");
            break;
        }
    }
    while (tolower (choice) != 'q');
    return 0;
}
----------------------------------------

int main () {
    char choice;
    do {
        printf ("choose L or P: ");
        scanf ("%c", & choice);
        switch (choice) {
        case 'l' :
            load ();
            printf ("\n[l]oad - [p]rint\n");
            break;
        case 'p' :
            print ();
            printf ("\n[l]oad - [p]rint\n");
            break;
        default :
            break;
        }
    }
    while (choice != 'q');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1512899_1512934_58_70
1512899_1513000_4_33
Title: C - Largest String From a Big One 
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    for (i = 1; i < argc; i++) {
        printf ("longest all-letter string in argument %d:\n", i);
        printf ("   argument: \"%s\"\n", argv [i]);
        printf ("    longest: \"%s\"\n\n", longest (argv [i]));
    }
    return 0;
}
----------------------------------------

int main (void) {
    char s [] = "(2034HEY!!11   th[]thisiswhatwewant44";
    int len = strlen (s);
    int i = 0;
    int biggest = 0;
    char *p = s;
    while (p[0]) {
        if (!((p[0] >= 'A' && p[0] <= 'Z') || (p[0] >= 'a' && p[0] <= 'z'))) {
            p[0] = '\0';
        }
        p++;
    }
    for (; i < len; i++) {
        if (s[i] && strlen (&s[i]) > biggest) {
            biggest = strlen (&s[i]);
            p = &s[i];
        }
    }
    printf ("%s\n", p);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1515006_1515058_4_19
1515006_1515077_4_25
Title: Calculate minutes until specific time? (C) 
----------------------------------------

int main (int argc, char *argv []) {
    struct tm *tm;
    time_t ts = time (NULL);
    if (tm = localtime (&ts)) {
        long int delta;
        tm->tm_hour = 21;
        tm->tm_min = 0;
        tm->tm_sec = 0;
        delta = mktime (tm) - ts;
        if (delta < 0) {
            delta += 24 * 60 * 60;
        }
        printf ("%d minutes til (next)9pm\n", delta / 60);
    }
    return 0;
}
----------------------------------------

int main (void) {
    double dt = 0.0f;
    time_t ti = time (NULL);
    time_t tf;
    struct tm *pt_actual = localtime (&ti);
    struct tm t_actual = *pt_actual;
    struct tm t_target = *pt_actual;
    t_target.tm_hour = 21;
    t_target.tm_min = 0;
    tf = mktime (&t_target);
    dt = difftime (tf, ti);
    if (dt < 0)
        dt += (24 * 60 * 60);
    printf ("difftime = %f seconds\n", dt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1515006_1515058_4_19
1515006_1515078_6_19
Title: Calculate minutes until specific time? (C) 
----------------------------------------

int main (int argc, char *argv []) {
    struct tm *tm;
    time_t ts = time (NULL);
    if (tm = localtime (&ts)) {
        long int delta;
        tm->tm_hour = 21;
        tm->tm_min = 0;
        tm->tm_sec = 0;
        delta = mktime (tm) - ts;
        if (delta < 0) {
            delta += 24 * 60 * 60;
        }
        printf ("%d minutes til (next)9pm\n", delta / 60);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    struct tm *tm;
    time_t ts = time (NULL);
    int minutes_until_9pm;
    tm = localtime (&ts);
    minutes_until_9pm = 24 * 60 - (tm->tm_min + tm->tm_hour * 60 + TARGET_TIME) % (24 * 60);
    printf ("%d minutes til (next)9pm\n", minutes_until_9pm);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1515006_1515058_4_19
1515006_1515180_5_15
Title: Calculate minutes until specific time? (C) 
----------------------------------------

int main (int argc, char *argv []) {
    struct tm *tm;
    time_t ts = time (NULL);
    if (tm = localtime (&ts)) {
        long int delta;
        tm->tm_hour = 21;
        tm->tm_min = 0;
        tm->tm_sec = 0;
        delta = mktime (tm) - ts;
        if (delta < 0) {
            delta += 24 * 60 * 60;
        }
        printf ("%d minutes til (next)9pm\n", delta / 60);
    }
    return 0;
}
----------------------------------------

int main (void) {
    struct tm now = *localtime (&(time_t){time (NULL)});
    struct tm then = now;
    then.tm_hour = 21;
    then.tm_min = 0;
    then.tm_sec = 0;
    int dt = ((int) round (difftime (mktime (&then), mktime (&now)) / 60) + 24 * 60) % (24 * 60);
    printf ("time till 9pm: %i minutes\n", dt);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1515006_1515077_4_25
1515006_1515078_6_19
Title: Calculate minutes until specific time? (C) 
----------------------------------------

int main (void) {
    double dt = 0.0f;
    time_t ti = time (NULL);
    time_t tf;
    struct tm *pt_actual = localtime (&ti);
    struct tm t_actual = *pt_actual;
    struct tm t_target = *pt_actual;
    t_target.tm_hour = 21;
    t_target.tm_min = 0;
    tf = mktime (&t_target);
    dt = difftime (tf, ti);
    if (dt < 0)
        dt += (24 * 60 * 60);
    printf ("difftime = %f seconds\n", dt);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    struct tm *tm;
    time_t ts = time (NULL);
    int minutes_until_9pm;
    tm = localtime (&ts);
    minutes_until_9pm = 24 * 60 - (tm->tm_min + tm->tm_hour * 60 + TARGET_TIME) % (24 * 60);
    printf ("%d minutes til (next)9pm\n", minutes_until_9pm);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1515006_1515077_4_25
1515006_1515180_5_15
Title: Calculate minutes until specific time? (C) 
----------------------------------------

int main (void) {
    double dt = 0.0f;
    time_t ti = time (NULL);
    time_t tf;
    struct tm *pt_actual = localtime (&ti);
    struct tm t_actual = *pt_actual;
    struct tm t_target = *pt_actual;
    t_target.tm_hour = 21;
    t_target.tm_min = 0;
    tf = mktime (&t_target);
    dt = difftime (tf, ti);
    if (dt < 0)
        dt += (24 * 60 * 60);
    printf ("difftime = %f seconds\n", dt);
    return 0;
}
----------------------------------------

int main (void) {
    struct tm now = *localtime (&(time_t){time (NULL)});
    struct tm then = now;
    then.tm_hour = 21;
    then.tm_min = 0;
    then.tm_sec = 0;
    int dt = ((int) round (difftime (mktime (&then), mktime (&now)) / 60) + 24 * 60) % (24 * 60);
    printf ("time till 9pm: %i minutes\n", dt);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1515006_1515078_6_19
1515006_1515180_5_15
Title: Calculate minutes until specific time? (C) 
----------------------------------------

int main (int argc, char *argv []) {
    struct tm *tm;
    time_t ts = time (NULL);
    int minutes_until_9pm;
    tm = localtime (&ts);
    minutes_until_9pm = 24 * 60 - (tm->tm_min + tm->tm_hour * 60 + TARGET_TIME) % (24 * 60);
    printf ("%d minutes til (next)9pm\n", minutes_until_9pm);
    return 0;
}
----------------------------------------

int main (void) {
    struct tm now = *localtime (&(time_t){time (NULL)});
    struct tm then = now;
    then.tm_hour = 21;
    then.tm_min = 0;
    then.tm_sec = 0;
    int dt = ((int) round (difftime (mktime (&then), mktime (&now)) / 60) + 24 * 60) % (24 * 60);
    printf ("time till 9pm: %i minutes\n", dt);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1515195_1515208_3_13
1515195_1515338_19_31
Title: How to remove \n or \t from a given string in C? 
----------------------------------------

void strip (char *s) {
    char *p2 = s;
    while (*s != '\0') {
        if (*s != '\t' && *s != '\n') {
            *p2++ = *s++;
        }
        else {
            ++s;
        }
    }
    *p2 = '\0';
}
----------------------------------------

static void strip (char *s) {
    char *p = s;
    int n;
    while (*s) {
        n = strcspn (s, SPACE);
        strncpy (p, s, n);
        p += n;
        s += n + strspn (s +n, SPACE);
    }
    *p = 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1516122_1516414_8_33
1516122_27559151_47_64
Title: How to capture Control+D signal? 
----------------------------------------

int main () {
    setvbuf (stdout, NULL, _IONBF, 0);
    struct termios old_termios, new_termios;
    tcgetattr (0, & old_termios);
    signal (SIGINT, sig_hnd);
    new_termios = old_termios;
    new_termios.c_cc[VEOF] = 3;
    new_termios.c_cc[VINTR] = 4;
    tcsetattr (0, TCSANOW, & new_termios);
    char line [256];
    int len;
    do {
        len = read (0, line, 256);
        line[len] = '\0';
        if (len < 0)
            printf ("(len: %i)", len);
        if (len == 0)
            printf ("(VEOF)");
        if (len > 0) {
            if (line[len - 1] == 10)
                printf ("(line:'%.*s')\n", len -1, line);
            if (line[len - 1] != 10)
                printf ("(partial line:'%s')", line);
        }
    }
    while (line[0] != 'q');
    tcsetattr (0, TCSANOW, & old_termios);
}
----------------------------------------

int main () {
    setup_terminal ();
    printf ("Press Q to quit...\n");
    for (;;) {
        int key = next_input ();
        if (key != -1) {
            if ((key == 113) || (key == 81)) {
                printf ("\nNormal exit\n");
                break;
            }
        }
    }
    reset_terminal ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15196650_15196712_7_22
15196650_15196838_6_27
Title: C get difference string and integer 
----------------------------------------

int main (int argc, char *argv []) {
    char *s = "CPROGRAMMING";
    int i;
    bool flag = true;
    for (i = 0; i < strlen (s) && flag; i++) {
        if (isalpha (s[i]) && isupper (s[i]))
            flag = true;
        else
            flag = false;
    }
    if (flag)
        printf ("A string contains only uppercase and alphabet letters\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    (void) argc;
    (void) argv;
    const char *s = "CPROGRAMMING";
    bool upper_case = true;
    for (int i = 0; i < strlen (s) && upper_case; i++) {
        if (!isalpha (s[i]) || !isupper (s[i])) {
            upper_case = false;
        }
    }
    if (upper_case) {
        printf ("A string contains only uppercase and alphabet letters\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15196784_15197090_3_35
15196784_15197369_5_64
Title: How to wait till data is written on the other end of pipe 
----------------------------------------

int main () {
    int pid;
    FILE *fp;
    fp = fopen ("test.txt", "w");
    char *buff = malloc (1024);
    int fd [2];
    int count = 0;
    pipe (fd);
    pid = fork ();
    if (pid == 0) {
        close (fd [1]);
        int i = 0;
        while (i < 10) {
            fprintf (fp, "\n TIME before read: %s \n", __TIME__);
            read (fd [0], buff + i, 1);
            ++i;
        }
        fprintf (fp, "Full message received!\nbuffer: %s\n TIME after read %s\n", buff, __TIME__);
    }
    else {
        close (fd [0]);
        sleep (10);
        write (fd [1], "THIS is it", 10);
    }
    fclose (fp);
    return 0;
}
----------------------------------------

int main () {
    int pid = 0;
    int fd [2];
    pipe (fd);
    pid = fork ();
    if (pid == 0) {
        char *buff = NULL;
        char byte = 0;
        int count = 0;
        close (fd [1]);
        while (read (fd[0], &byte, 1) == 1) {
            if (ioctl (fd[0], FIONREAD, &count) != -1) {
                fprintf (stdout, "Child: count = %d\n", count);
                buff = malloc (count +1);
                buff[0] = byte;
                if (read (fd[0], buff +1, count) == count)
                    fprintf (stdout, "Child: received \"%s\"\n", buff);
                free (buff);
            }
            else {
                perror ("Failed to read input size.");
            }
        }
        close (fd [0]);
        fprintf (stdout, "Child: Shutting down.\n");
    }
    else {
        const char msg1 [] = "Message From Parent";
        const char msg2 [] = "Another Message From Parent";
        close (fd [0]);
        sleep (5);
        fprintf (stdout, "Parent: sending \"%s\"\n", msg1);
        write (fd [1], msg1, sizeof (msg1));
        sleep (5);
        fprintf (stdout, "Parent: sending \"%s\"\n", msg2);
        write (fd [1], msg2, sizeof (msg2));
        close (fd [1]);
        fprintf (stdout, "Parent: Shutting down.\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1521062_1521171_4_25
1521062_1522182_4_18
Title: Can I do a multidimensional char array in c++? 
----------------------------------------

int main () {
    char cart_of_names [cart_length] [word_length];
    float cart_of_costs [cart_length];
    for (int i = 0; i < cart_length; i++) {
        cout << "enter the name of the " << i + 1 << "th item: ";
        cin >> cart_of_names[i];
    }
    cout << "that is: ";
    for (int x = 0; x < cart_length; x++) {
        cout << cart_of_names[x] << endl;
    }
    return 0;
}
----------------------------------------

int main (void) {
std :
    : string list [7];
    list[0] = "In C++";
    list[1] = "you can use";
    list[2] = "the `std::string` type.";
    list[3] = "It removes";
    list[4] = "many of the problems";
    list[5] = "introduced by";
    list[6] = "C-style strings.";
    for (int k = 0; k < 7; k++)
    std :
    : cout << list [k] << ' ';
std :
    : cout << '\n';
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1521607_1521861_4_32
1521607_1521879_4_13
Title: "Check double variable if it contains an integer and not floating point" 
----------------------------------------

int main () {
    double d1 = 555;
    double d2 = 55.343;
    double int_part1;
    double int_part2;
    using namespace std;
    cout << boolalpha;
    cout << d1 << " " << modf (d1, &int_part1) << endl;
    cout << d1 << " " << (modf (d1, &int_part1) == 0.0) << endl;
    cout << d2 << " " << modf (d2, &int_part2) << endl;
    cout << d1 << " " << (modf (d2, &int_part2) == 0.0) << endl;
    cout << d2 << " " << modf (d2, &int_part2) << endl;
    cout << d1 << " " << (modf (d2, &int_part2) == 0.0) << endl;
    cout << d1 << " " << fmod (d1, 1.0) << endl;
    cout << d1 << " " << (fmod (d1, 1.0) == 0) << endl;
    cout << d2 << " " << fmod (d2, 1.0) << endl;
    cout << d2 << " " << (fmod (d2, 1.0) == 0) << endl;
    cout.flush ();
    modf (d1, 0);
}
----------------------------------------

int main () {
    void checkType (double x);
    double d1 = 555;
    double d2 = 55.343;
    checkType (d1);
    checkType (d2);
    system ("Pause");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15216284_15216343_4_16
15216284_15216395_5_22
Title: Getting array declaration error 
----------------------------------------

int main () {
    int i;
    const char *arr_1 [] = {"My_name", "your Name", "His Name"};
    printf ("%s\n", * arr_1);
    printf ("%s\n", arr_1 [1]);
    printf ("%s\n", arr_1 [2]);
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main () {
    int i;
    char *arr_1 [] = {"My_name", "your Name", "His Name", NULL};
    char **arr_p;
    arr_p = arr_1;
    i = 0;
    while (arr_p[i] != NULL) {
        printf ("%s\n", (arr_p [i]));
        ++i;
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15224892_15226658_1_22
15224892_17608433_2_21
Title: c pointers and array 
----------------------------------------

int main (void) {
    int a [] = {1, 2, 3, 4, 5};
    int b [] = {0, 0, 0, 0, 0};
    int c [] = {0, 0, 0, 0, 0};
    int *p;
    int i;
    p = c;
    for (i = 0; i < 5; i++) {
        b[i] = a[i] + 1;
        *p = b[i] - 1;
        printf (" %i \t %i \t %i \n", * p, b [i], a [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int a [] = {1, 2, 3, 4, 5};
    int b [] = {0, 0, 0, 0, 0};
    int *p = b;
    int i = 0;
    for (i = 0; i < 5; i++) {
        b[i] = a[i] + 1;
        *p = a[i] + 1;
        p++;
    }
    p = p - 5;
    for (i = 0; i < 5; i++) {
        printf (" %i \t %i \t %i \n", * p ++, b [i], a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15237536_28871689_3_32
15237536_33473774_7_24
Title: C - Counting the frequency of a number in an array 
----------------------------------------

int main () {
    int n, t, i, j, arr [30], len, halflen, flag = 0, count = 0;
    printf ("Enter number of elements to insert in an array:");
    scanf ("%d", & len);
    printf ("Enter elements to insert in an array:");
    for (i = 0; i < len; i++) {
        scanf ("%d", & t);
        arr[i] = t;
    }
    printf ("\n");
    for (i = 0; i < len; i++) {
        count = 1;
        for (j = i + 1; j <= len - 1; j++) {
            if (arr[i] == arr[j] && arr[i] != '\0') {
                count++;
                arr[j] = '\0';
            }
        }
        if (arr[i] != '\0') {
            printf ("%d is %d times.\n", arr [i], count);
        }
    }
    getch ();
    return 0;
}
----------------------------------------

void main () {
    int arr [] = {1, 1, 1, 2, 3, 4, 2, 2, 3, 1};
    int visited [MAX];
    int i, j, no, cnt = 1;
    clrscr ();
    for (i = 0; i < 10; i++) {
        no = arr[i];
        cnt = 1;
        for (j = i + 1; j < 10; j++) {
            if (no == arr[j])
                cnt++;
        }
        display (no, cnt, visited);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15286641_15286761_10_30
15286641_15286853_4_18
Title: Trying to use islower with array and pointers...getting error? 
----------------------------------------

int main () {
    char **a = arr_1;
    while (*a) {
        int i = 0;
        char *c = *a;
        printf ("%s:\n", c);
        while (*c) {
            printf (" %d letter(%c) is %s ", i ++, * c, (islower (* c) ? "Lower case    " : "Not lower case"));
            c++;
        }
        printf ("\n");
        a++;
    }
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main (void) {
    char *arr_1 [] = {"CalCulaTor", "DoveTail", "MachiNing"};
    size_t i, j;
    for (i = 0; i < 3; i++) {
        puts (arr_1 [i]);
        for (j = 0; arr_1[i][j]; j++) {
            printf ("'%d' element is %s.\n", j, islower (arr_1 [i] [j]) ? "Lowercase" : "Uppercase");
        }
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15306215_15306362_22_47
15306215_15306402_14_23
Title: populating and return string array in c using a function 
----------------------------------------

int main () {
    int amount, *age, y;
    string *name, *dob, *gender;
    printf ("How many students are you admitting?\t");
    scanf ("%d", & amount);
    name = (string *) malloc (sizeof (string));
    dob = (string *) malloc (sizeof (string));
    gender = (string *) malloc (sizeof (string));
    age = (int *) malloc (sizeof (int));
    for (y = 0; y < amount; ++y)
        getinfo (name[y], &age[y], dob[y], gender[y]);
    system ("pause");
}
----------------------------------------

int main () {
    int amount, y;
    printf ("How many students are you admitting?\t");
    scanf ("%d", & amount);
    char *name [50];
    getinfo (name, amount);
    for (y = 0; y < amount; y++) {
        printf ("%s\n", name [y]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15306215_15306362_22_47
15306215_15306563_19_38
Title: populating and return string array in c using a function 
----------------------------------------

int main () {
    int amount, *age, y;
    string *name, *dob, *gender;
    printf ("How many students are you admitting?\t");
    scanf ("%d", & amount);
    name = (string *) malloc (sizeof (string));
    dob = (string *) malloc (sizeof (string));
    gender = (string *) malloc (sizeof (string));
    age = (int *) malloc (sizeof (int));
    for (y = 0; y < amount; ++y)
        getinfo (name[y], &age[y], dob[y], gender[y]);
    system ("pause");
}
----------------------------------------

int main () {
    int amount, y;
    printf ("How many students are you admitting?\t");
    scanf ("%d", & amount);
    char *name [50], *dob [50], gender [50];
    int age [50];
    for (y = 0; y < amount; y++) {
        name[y] = malloc (50);
        dob[y] = malloc (50);
    }
    for (y = 0; y < amount; y++) {
        getinfo (& name [y], & age [y], & dob [y], & gender [y], y);
    }
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15306215_15306362_7_20
15306215_15306563_5_17
Title: populating and return string array in c using a function 
----------------------------------------

void getinfo (char *nam, int *ag, char *dot, char *gende) {
    printf ("What is the student's name?\t");
    scanf ("%s", nam);
    printf ("\nWhat is the student's age?\t");
    scanf ("%d", ag);
    printf ("\nWhat is the student's Date of Birth?\t");
    scanf ("%s", dot);
    printf ("\nWhat is the student's gender?\t");
    scanf ("%s", gende);
}
----------------------------------------

int getinfo (char *nam [], int ag [], char *dot [], char gende [], int x) {
    printf ("What is the student's name?\t");
    scanf ("%d", & nam [x]);
    printf ("\nWhat is the student's age?\t");
    scanf ("%d", & ag [x]);
    printf ("\nWhat is the student's Date of Birth?\t");
    scanf ("%s", & dot [x]);
    printf ("\nWhat is the student's gender?\t");
    scanf ("%c", & gende [x]);
    printf ("\nWhat is the student's adress?\t");
    return nam[x];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15306215_15306402_14_23
15306215_15306563_19_38
Title: populating and return string array in c using a function 
----------------------------------------

int main () {
    int amount, y;
    printf ("How many students are you admitting?\t");
    scanf ("%d", & amount);
    char *name [50];
    getinfo (name, amount);
    for (y = 0; y < amount; y++) {
        printf ("%s\n", name [y]);
    }
}
----------------------------------------

int main () {
    int amount, y;
    printf ("How many students are you admitting?\t");
    scanf ("%d", & amount);
    char *name [50], *dob [50], gender [50];
    int age [50];
    for (y = 0; y < amount; y++) {
        name[y] = malloc (50);
        dob[y] = malloc (50);
    }
    for (y = 0; y < amount; y++) {
        getinfo (& name [y], & age [y], & dob [y], & gender [y], y);
    }
    system ("pause");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1532819_13465889_32_43
1532819_19333947_38_50
Title: Algorithm: efficient way to remove duplicate integers from an array 
----------------------------------------

int main () {
    int arr [] = {4, 8, 4, 1, 1, 2, 9};
    printf ("Before: ");
    size_t len = sizeof (arr) / sizeof (arr[0]);
    print_array (arr, len);
    len = rmdup (arr, len);
    printf ("\nAfter: ");
    print_array (arr, len);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    size_t cnt = COUNT;
    printf ("Before undup:");
    print_it (numbers, cnt);
    cnt = undup_it (numbers, cnt);
    printf ("After undup:");
    print_it (numbers, cnt);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1532819_13465889_32_43
1532819_35207095_2_53
Title: Algorithm: efficient way to remove duplicate integers from an array 
----------------------------------------

int main () {
    int arr [] = {4, 8, 4, 1, 1, 2, 9};
    printf ("Before: ");
    size_t len = sizeof (arr) / sizeof (arr[0]);
    print_array (arr, len);
    len = rmdup (arr, len);
    printf ("\nAfter: ");
    print_array (arr, len);
    printf ("\n");
    return 0;
}
----------------------------------------

int main (void) {
    int x, n, myvar = 0;
    printf ("Enter a number: \t");
    scanf ("%d", & n);
    int arr [n], changedarr [n];
    for (x = 0; x < n; x++) {
        printf ("Enter a number for array[%d]: ", x);
        scanf ("%d", & arr [x]);
    }
    printf ("\nOriginal Number in an array\n");
    for (x = 0; x < n; x++) {
        printf ("%d\t", arr [x]);
    }
    int i = 0, j = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) {
                continue;
            }
            else if (arr[i] == arr[j]) {
                changedarr[j] = 0;
            }
            else {
                changedarr[i] = arr[i];
            }
        }
        myvar += 1;
    }
    int count = 0;
    printf ("\nThe unique items:\n");
    for (int i = 0; i < myvar; i++) {
        if (changedarr[i] != 0) {
            count += 1;
            printf ("%d\t", changedarr [i]);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1532819_13465889_4_19
1532819_1533109_1_19
Title: Algorithm: efficient way to remove duplicate integers from an array 
----------------------------------------

size_t rmdup (int *arr, size_t len) {
    size_t prev = 0;
    size_t curr = 1;
    size_t last = len - 1;
    while (curr <= last) {
        for (prev = 0; prev < curr && arr[curr] != arr[prev]; ++prev)
            ;
        if (prev == curr) {
            ++curr;
        }
        else {
            arr[curr] = arr[last];
            --last;
        }
    }
    return curr;
}
----------------------------------------

void rmdup (int *array, int length) {
    int *current, *end = array + length - 1;
    for (current = array + 1; array < end; array++, current = array + 1) {
        while (current <= end) {
            if (*current == *array) {
                *current = *end--;
            }
            else {
                current++;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1532819_19333947_38_50
1532819_35207095_2_53
Title: Algorithm: efficient way to remove duplicate integers from an array 
----------------------------------------

int main (void) {
    size_t cnt = COUNT;
    printf ("Before undup:");
    print_it (numbers, cnt);
    cnt = undup_it (numbers, cnt);
    printf ("After undup:");
    print_it (numbers, cnt);
    return 0;
}
----------------------------------------

int main (void) {
    int x, n, myvar = 0;
    printf ("Enter a number: \t");
    scanf ("%d", & n);
    int arr [n], changedarr [n];
    for (x = 0; x < n; x++) {
        printf ("Enter a number for array[%d]: ", x);
        scanf ("%d", & arr [x]);
    }
    printf ("\nOriginal Number in an array\n");
    for (x = 0; x < n; x++) {
        printf ("%d\t", arr [x]);
    }
    int i = 0, j = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) {
                continue;
            }
            else if (arr[i] == arr[j]) {
                changedarr[j] = 0;
            }
            else {
                changedarr[i] = arr[i];
            }
        }
        myvar += 1;
    }
    int count = 0;
    printf ("\nThe unique items:\n");
    for (int i = 0; i < myvar; i++) {
        if (changedarr[i] != 0) {
            count += 1;
            printf ("%d\t", changedarr [i]);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15330406_15330618_15_38
15330406_15330740_3_19
Title: The C Programming K&R Exercise 1-13 
----------------------------------------

int main (int argc, char **argv) {
    char str [50];
    int i, l;
    printf ("Enter the string to covert ");
    scanf ("%s", str);
    l = strlen (str);
    for (i = 0; i < l; i++)
        str[i] = lower (str[i]);
    printf ("The changes string is %s", str);
    return 0;
}
----------------------------------------

int main () {
    int ch;
    while ((ch = getchar ()) != EOF) {
        if ((ch >= 65) && (ch <= 122)) {
            if ((ch >= 97) && (ch <= 122))
                ch = ch - 32;
            else if ((ch >= 65) && (ch <= 90))
                ch = ch + 32;
        }
        putchar (ch);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15361333_15361408_6_25
15361333_15362096_4_30
Title: File manipulations in C 
----------------------------------------

int main () {
    char file_name [25];
    FILE *fp;
    fp = fopen ("input.txt", "r");
    if (fp == NULL) {
        perror ("Error while opening the file.\n");
        exit (EXIT_FAILURE);
    }
    fgets (file_name, 25, fp);
    _mkdir (file_name);
    fclose (fp);
    return 0;
}
----------------------------------------

int main () {
    char file_name [25];
    String str;
    FILE *fp;
    char ch;
    int i = 0;
    fp = fopen ("input.txt", "r");
    if (fp == NULL) {
        perror ("Error while opening the file.\n");
        exit (EXIT_FAILURE);
    }
    while ((ch = fgetc (fp)) != EOF) {
        printf ("%c", ch);
        file_name[i];
        i ++
    }
    str = file_name;
    _mkdir (str);
    fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15377214_15377908_3_26
15377214_15378175_3_27
Title: Finding Max and Min floating numbers from a file in C 
----------------------------------------

int main () {
    float num;
    float min = 999.99;
    float max = 0;
    int i = 0;
    FILE *fp;
    fp = fopen ("file.txt", "r");
    while (fscanf (fp, "%f", &num) == 1) {
        if (num < min)
            min = num;
        if (num > max)
            max = num;
    }
    fclose (fp);
    printf ("Data range is: %f  %f \n", min, max);
    return 0;
}
----------------------------------------

int main (int argc, const char *argv []) {
    float i = 0, min = 0, max = 0;
    FILE
    * fp fp = fopen ("file.txt", "r");
    if (fp == NULL) {
        perror ("Failed to open file.");
        return EXIT_FAILURE;
    }
    if (fscanf (fp, "%f", &i) == 1) {
        min = max = i;
        while (fscanf (fp, "%f", &i) == 1) {
            if (i < min)
                min = i;
            else if (i > max)
                max = i;
        }
    }
    printf ("Data range is: %f  %f \n", min, max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15459684_15460118_4_27
15459684_15461457_26_52
Title: Transmission bytearray from Python to C and return it 
----------------------------------------

static PyObject *fast_xor (PyObject *self, PyObject *args) {
    const char *str;
    char *buf;
    Py_ssize_t count;
    PyObject *result;
    int i;
    if (!PyArg_ParseTuple (args, "s#", &str, &count)) {
        return NULL;
    }
    buf = (char *) malloc (count);
    for (i = 0; i < count; i++) {
        buf[i] = str[i] ^ 55;
    }
    result = Py_BuildValue ("s#", buf, count);
    free (buf);
    return result;
}
----------------------------------------

static PyObject *fast_xor (PyObject *self, PyObject *args) {
    PyObject *arg1;
    unsigned char arg2 = 55;
    PyObject *result;
    Py_buffer buffer;
    char *buf, *str;
    int i;
    if (!PyArg_ParseTuple (args, "O|b:fast_xor", &arg1, &arg2))
        return NULL;
    if (PyObject_GetBuffer (arg1, &buffer, PyBUF_SIMPLE) < 0)
        return NULL;
    result = PyString_FromStringAndSize (NULL, buffer.len);
    if (result == NULL)
        return NULL;
    buf = buffer.buf;
    str = PyString_AS_STRING (result);
    for (i = 0; i < buffer.len; i++)
        str[i] = buf[i] ^ arg2;
    PyBuffer_Release (& buffer);
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
15481797_15481872_1_24
15481797_15482072_1_28
Title: Seg fault linked list recursion in C 
----------------------------------------

node *insert (node **head, int integer) {
    node *temp;
    if (*head == NULL) {
        temp = malloc (sizeof (node));
        temp->num = integer;
        temp->next = *head;
        *head = temp;
    }
    else if ((*head)->num > integer) {
        temp = malloc (sizeof (node));
        temp->next = *head;
        temp->num = integer;
        *head = temp;
    }
    else
        temp = insert (&((*head)->next), integer);
    return (temp);
}
----------------------------------------

node *insert (node **head, int integer) {
    node *temp = malloc (sizeof (node));
    node *temp1;
    node *newNode;
    if (*head == NULL) {
        temp->num = integer;
        temp->next = *head;
        *head = temp;
    }
    else if ((*head)->num > integer) {
        temp = *head;
        temp1 = temp->next;
        temp->next = newNode;
        newNode->num = integer;
        newNode->next = temp1;
        temp1->next = *head;
        *head = temp1;
    }
    else
        insert (&((*head)->next), integer);
    return (temp);
}
----------------------------------------

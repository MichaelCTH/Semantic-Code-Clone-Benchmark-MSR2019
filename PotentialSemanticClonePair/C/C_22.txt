$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27884998_27885021_1_15
27884998_27885158_1_39
Title: Help with basic programming 
----------------------------------------

int main (int argc, char **args) {
    if (argc != 4) {
        printf ("Fewer number of arguements\n");
        return 0;
    }
    else if ((strcmp (args[1], "+")) == 0) {
        printf ("Sum = %d\n", atoi (args [2]) + atoi (args [3]));
    }
    return 0;
}
----------------------------------------

int main (int ac, char *args []) {
    if (ac < 4) {
        printf ("Invalid Argument");
        return 0;
    }
    if (strcmp (args[1], "+") == 0) {
        int x = atoi (args[2]);
        int y = atoi (args[3]);
        printf ("%d + %d = %d\n", x, y, x + y);
    }
    if (strcmp (args[1], "x") == 0) {
        int x = atoi (args[2]);
        int y = atoi (args[3]);
        printf ("%d * %d = %d\n", x, y, x * y);
    }
    if (strcmp (args[1], "%") == 0) {
        int x = atoi (args[2]);
        int y = atoi (args[3]);
        if (y == 0)
            return 0;
        printf ("%d %% %d = %d\n", x, y, x % y);
    }
    if (strcmp (args[1], "/") == 0) {
        int x = atoi (args[2]);
        int y = atoi (args[3]);
        if (y == 0)
            return 0;
        printf ("%d / %d = %d\n", x, y, x / y);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27887132_27887169_1_15
27887132_27887178_16_39
Title: nested structures with pointer in C 
----------------------------------------

int main () {
    person1 = malloc (sizeof (struct student));
    person1->ads = malloc (sizeof (struct address));
    scanf ("%s", person1 -> name);
    scanf ("%d", & person1 -> ads -> code);
    scanf ("%s", person1 -> ads -> city);
    printf ("%s", person1 -> name);
    printf ("%d", person1 -> ads -> code);
    printf ("%s", person1 -> ads -> city);
    free (person1 -> ads);
    free (person1);
    return 0;
}
----------------------------------------

int main (void) {
    struct student *person1 = malloc (sizeof *person1);
    if (NULL == person1) {
        perror ("malloc() failed for person1");
    }
    else {
        person1->ads = malloc (sizeof *person1->ads);
        if (NULL == person1->ads) {
            perror ("malloc() failed for person1->ads");
        }
        else {
            free (person1 -> ads);
        }
        free (person1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27887132_27887169_1_15
27887132_27887327_16_78
Title: nested structures with pointer in C 
----------------------------------------

int main () {
    person1 = malloc (sizeof (struct student));
    person1->ads = malloc (sizeof (struct address));
    scanf ("%s", person1 -> name);
    scanf ("%d", & person1 -> ads -> code);
    scanf ("%s", person1 -> ads -> city);
    printf ("%s", person1 -> name);
    printf ("%d", person1 -> ads -> code);
    printf ("%s", person1 -> ads -> city);
    free (person1 -> ads);
    free (person1);
    return 0;
}
----------------------------------------

int main () {
    struct student *person;
    person = malloc (sizeof (*person));
    if (person == NULL) {
        printf ("cannot allocate memory\n");
        return -1;
    }
    if (scanf ("%9s", person->name) != 1) {
        printf ("Invalid, input\n");
        free (person);
        return -1;
    }
    person->ads = malloc (sizeof (*(person->ads)));
    if (person->ads == NULL) {
        printf ("cannot allocate memory\n");
        free (person);
        return -1;
    }
    if (scanf ("%d", &person->ads->code) != 1) {
        printf ("Invalid, input\n");
        free (person -> ads);
        free (person);
        return -1;
    }
    if (scanf ("%9s", person->ads->city) != 1) {
        printf ("Invalid, input\n");
        free (person -> ads);
        free (person);
        return -1;
    }
    printf ("Name: %s\n", person -> name);
    printf ("Code: %d\n", person -> ads -> code);
    printf ("City: %s\n", person -> ads -> city);
    free (person -> ads);
    free (person);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27887132_27887178_16_39
27887132_27887327_16_78
Title: nested structures with pointer in C 
----------------------------------------

int main (void) {
    struct student *person1 = malloc (sizeof *person1);
    if (NULL == person1) {
        perror ("malloc() failed for person1");
    }
    else {
        person1->ads = malloc (sizeof *person1->ads);
        if (NULL == person1->ads) {
            perror ("malloc() failed for person1->ads");
        }
        else {
            free (person1 -> ads);
        }
        free (person1);
    }
}
----------------------------------------

int main () {
    struct student *person;
    person = malloc (sizeof (*person));
    if (person == NULL) {
        printf ("cannot allocate memory\n");
        return -1;
    }
    if (scanf ("%9s", person->name) != 1) {
        printf ("Invalid, input\n");
        free (person);
        return -1;
    }
    person->ads = malloc (sizeof (*(person->ads)));
    if (person->ads == NULL) {
        printf ("cannot allocate memory\n");
        free (person);
        return -1;
    }
    if (scanf ("%d", &person->ads->code) != 1) {
        printf ("Invalid, input\n");
        free (person -> ads);
        free (person);
        return -1;
    }
    if (scanf ("%9s", person->ads->city) != 1) {
        printf ("Invalid, input\n");
        free (person -> ads);
        free (person);
        return -1;
    }
    printf ("Name: %s\n", person -> name);
    printf ("Code: %d\n", person -> ads -> code);
    printf ("City: %s\n", person -> ads -> city);
    free (person -> ads);
    free (person);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27890480_27890651_1_29
27890480_27890715_1_13
Title: Double Pointer Using Error 
----------------------------------------

int SaveValue (int **maxPtr, int **minPtr, int arr [], ssize_t s) {
    int result = 0;
    if ((NULL == arr) || (NULL == maxPtr) || (NULL == minPtr) || (0 > s)) {
        result = -1;
        errno = EINVAL;
    }
    else {
        *maxPtr = arr + 0;
        *minPtr = arr + 0;
        for (--s; s >= 0; --s) {
            if (arr[s] > **maxPtr) {
                *maxPtr = arr + s;
            }
            else if (arr[i] < **minPtr) {
                *minPtr = arr + s;
            }
        }
    }
    return result;
}
----------------------------------------

void SaveValue (int **maxPtr, int **minPtr, int arr []) {
    int i;
    *maxPtr = &arr[0];
    *minPtr = &arr[0];
    for (i = 1; i < 5; i++) {
        if (arr[i] > **maxPtr)
            *maxPtr = &arr[i];
        else if (arr[i] < **minPtr)
            *minPtr = &arr[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27890480_27890651_1_29
27890480_27891607_5_17
Title: Double Pointer Using Error 
----------------------------------------

int SaveValue (int **maxPtr, int **minPtr, int arr [], ssize_t s) {
    int result = 0;
    if ((NULL == arr) || (NULL == maxPtr) || (NULL == minPtr) || (0 > s)) {
        result = -1;
        errno = EINVAL;
    }
    else {
        *maxPtr = arr + 0;
        *minPtr = arr + 0;
        for (--s; s >= 0; --s) {
            if (arr[s] > **maxPtr) {
                *maxPtr = arr + s;
            }
            else if (arr[i] < **minPtr) {
                *minPtr = arr + s;
            }
        }
    }
    return result;
}
----------------------------------------

void SaveValue (int **maxPtr, int **minPtr, int arr []) {
    int i;
    *maxPtr = arr[0];
    *minPtr = arr[0];
    for (i = 1; i < 5; i++) {
        if (arr[i] > *maxPtr)
            *maxPtr = arr[i];
        else if (arr[i] < *minPtr)
            *minPtr = arr[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27890480_27890715_1_13
27890480_27891607_5_17
Title: Double Pointer Using Error 
----------------------------------------

void SaveValue (int **maxPtr, int **minPtr, int arr []) {
    int i;
    *maxPtr = &arr[0];
    *minPtr = &arr[0];
    for (i = 1; i < 5; i++) {
        if (arr[i] > **maxPtr)
            *maxPtr = &arr[i];
        else if (arr[i] < **minPtr)
            *minPtr = &arr[i];
    }
}
----------------------------------------

void SaveValue (int **maxPtr, int **minPtr, int arr []) {
    int i;
    *maxPtr = arr[0];
    *minPtr = arr[0];
    for (i = 1; i < 5; i++) {
        if (arr[i] > *maxPtr)
            *maxPtr = arr[i];
        else if (arr[i] < *minPtr)
            *minPtr = arr[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27896133_27900868_41_73
27896133_27901094_31_76
Title: Storing and retrieving combination of characters and integers in an array 
----------------------------------------

int parse (FILE *fdin, int *typ) {
    int i, j;
    *typ = INT;
    for (;;) {
        TOKEN tok = getToken (fdin);
        if (tok.type == INT) {
            return tok.value.ival;
        }
        else if (tok.type == OPERATOR) {
            i = parse (fdin, typ);
            if (*typ != INT) {
                *typ = ERROR;
                return 0;
            }
            j = parse (fdin, typ);
            if (*typ != INT) {
                *typ = ERROR;
                return 0;
            }
            switch (tok.value.op) {
            case '+' :
                return i + j;
            case '-' :
                return i - j;
            case '*' :
                return i * j;
            case '/' :
                return i / j;
            case '%' :
                return i * j / 100;
            }
        }
        else {
            *typ = tok.type;
            return 0;
        }
    }
}
----------------------------------------

struct Token parse (const char *str) {
    struct Token tk = {Illegal};
    if (strchr ("+-*/%", *str)) {
        if (str[1])
            return illegal ("Overlong operator");
        tk.type = Operator;
        strcpy (tk.data.name, str);
        return tk;
    }
    if (isdigit (*str)) {
        double x;
        long long l;
        char *end;
        l = strtoll (str, &end, 0);
        if (end != str && *end == '\0') {
            tk.type = Integer;
            tk.data.l = l;
            return tk;
        }
        x = strtod (str, &end);
        if (end != str && *end == '\0') {
            tk.type = Float;
            tk.data.x = x;
            return tk;
        }
        return illegal ("Illegal number");
    }
    if (isalpha (*str)) {
        const char *p = str;
        while (*p) {
            if (!isalnum (*p++))
                return illegal ("Illegal name");
        }
        tk.type = Name;
        snprintf (tk.data.name, 20, "%s", str);
        return tk;
    }
    return illegal ("Illegal character");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2790428_2790580_55_71
2790428_2790973_23_43
Title: "How do I check whether a string begins with ""GET "" or ""POST "" in c?" 
----------------------------------------

int main (int argc, char **argv) {
    const char *test [4] = {"GET ", "POST ", "GIT ", "PAST "};
    httpmethod result = HTTP_ERR;
    int i;
    for (i = 0; i < 4; ++i) {
        printf ("checking str: %s\n", test [i]);
        result = str_get_http_method (test[i]);
        printf ("result is type: %s\n", http_method_str [result]);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc < 2) {
        printf ("Usage: %s <method>\n", argv [0]);
        return 0;
    }
    switch (method_hash (argv[1])) {
    case 802187597 :
        printf ("Its GET\n");
        break;
    case 740659500 :
        printf ("Its POST\n");
        break;
    default :
        printf ("Its RUBBISH\n");
        return 1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27934898_27934938_1_33
27934898_27936222_1_26
Title: Output is incorrect and cannot find error in code. kochans book on C 
----------------------------------------

int main (void) {
    float value1, value2;
    char operato;
    printf ("Type in your expression.\n");
    if (scanf ("%f %c %f", &value1, &operato, &value2) == 3) {
        switch (operato) {
        case '+' :
            printf ("%.2f\n", value1 +value2);
            break;
        case '-' :
            printf ("%.2f\n", value1 -value2);
            break;
        case '*' :
            printf ("%.2f\n", value1 *value2);
            break;
        case '/' :
            if (value2 == 0)
                printf ("Division by zero.\n");
            else
                printf ("%.2f\n", value1 / value2);
            break;
        default :
            printf ("Unknown operator.\n");
        }
    }
    else
        printf ("Invalid expression.\n");
    return 0;
}
----------------------------------------

int main (void) {
    float value1, value2;
    char operato;
    printf ("Type in your expression.\n");
    scanf ("%f %c %f", & value1, & operato, & value2);
    if (operato == '+')
        printf ("%.2f\n", value1 +value2);
    else if (operato == '-')
        printf ("%.2f\n", value1 -value2);
    else if (operato == '*')
        printf ("%.2f\n", value1 *value2);
    else if (operato == '/') {
        if (value2 == 0)
            printf ("Division by zero.\n");
        else
            printf ("%.2f\n", value1 / value2);
    }
    else
        printf ("Unknown operator.\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27939074_27939494_5_34
27939074_27939606_4_22
Title: Split a string between words and insert newlines 
----------------------------------------

int main (int argc, char *argv []) {
    char string [100];
    fgets (string, 100, stdin);
    string[strlen (string) - 1] = 0;
    char **string_array = (char **) malloc (sizeof (char *));
    int i = 0, array_size;
    char *token = strtok (string, " ");
    while (token != NULL) {
        string_array = (char **) realloc (string_array, (i + 1) * sizeof (char **));
        string_array[i] = (char *) malloc (strlen (token) +1);
        strcpy (string_array [i], token);
        token = strtok (NULL, " ");
        i++;
    }
    array_size = i;
    for (i = 0; i < array_size; i++) {
        printf ("%s\n", string_array [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char line [300] = "hello world bye bye\n";
    char temptext [100] [15] = {0};
    int i = 0, j, k = 0;
    while (line[k]) {
        if (isspace (line[k])) {
            ++k;
            continue;
        }
        for (j = 0; j < 15 - 1 && line[k] && !isspace (line[k]); ++k, ++j)
            temptext[i][j] = line[k];
        if (j && ++i == 100)
            break;
    }
    for (j = 0; j < i; ++j)
        puts (temptext[j]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27939074_27939494_5_34
27939074_27939969_3_21
Title: Split a string between words and insert newlines 
----------------------------------------

int main (int argc, char *argv []) {
    char string [100];
    fgets (string, 100, stdin);
    string[strlen (string) - 1] = 0;
    char **string_array = (char **) malloc (sizeof (char *));
    int i = 0, array_size;
    char *token = strtok (string, " ");
    while (token != NULL) {
        string_array = (char **) realloc (string_array, (i + 1) * sizeof (char **));
        string_array[i] = (char *) malloc (strlen (token) +1);
        strcpy (string_array [i], token);
        token = strtok (NULL, " ");
        i++;
    }
    array_size = i;
    for (i = 0; i < array_size; i++) {
        printf ("%s\n", string_array [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char string [] = "hello world bye bye";
    int index = 0;
    while (string[index]) {
        if (string[index] == 32) {
            NEWLINE;
            index++;
        }
        else {
            printf ("%c", string [index]);
            index++;
        }
    }
    NEWLINE;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27939074_27939606_4_22
27939074_27939969_3_21
Title: Split a string between words and insert newlines 
----------------------------------------

int main (void) {
    char line [300] = "hello world bye bye\n";
    char temptext [100] [15] = {0};
    int i = 0, j, k = 0;
    while (line[k]) {
        if (isspace (line[k])) {
            ++k;
            continue;
        }
        for (j = 0; j < 15 - 1 && line[k] && !isspace (line[k]); ++k, ++j)
            temptext[i][j] = line[k];
        if (j && ++i == 100)
            break;
    }
    for (j = 0; j < i; ++j)
        puts (temptext[j]);
    return 0;
}
----------------------------------------

int main (void) {
    char string [] = "hello world bye bye";
    int index = 0;
    while (string[index]) {
        if (string[index] == 32) {
            NEWLINE;
            index++;
        }
        else {
            printf ("%c", string [index]);
            index++;
        }
    }
    NEWLINE;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27948369_27948541_3_21
27948369_27948830_3_18
Title: C program that prints out highest number 
----------------------------------------

int main () {
    int max, x;
    int result;
    if (scanf ("%d", &max) != 1)
        return -1;
    x = max;
    do {
        result = scanf ("%d[^\n]", &x);
        if ((result != EOF) && (result != 1))
            return 0;
        else if ((result != EOF) && (x > max))
            max = x;
    }
    while (result != EOF);
    printf ("\n\nMaximum Input : %d\n", max);
    return 0;
}
----------------------------------------

int main (void) {
    int res, max, x;
    if (1 != scanf ("%d", &max))
        return -1;
    while (EOF != (res = scanf ("%d", &x))) {
        if (res != 1)
            return -1;
        if (x > max) {
            max = x;
        }
    }
    printf ("%d\n", max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27948369_27948541_3_21
27948369_27949037_3_28
Title: C program that prints out highest number 
----------------------------------------

int main () {
    int max, x;
    int result;
    if (scanf ("%d", &max) != 1)
        return -1;
    x = max;
    do {
        result = scanf ("%d[^\n]", &x);
        if ((result != EOF) && (result != 1))
            return 0;
        else if ((result != EOF) && (x > max))
            max = x;
    }
    while (result != EOF);
    printf ("\n\nMaximum Input : %d\n", max);
    return 0;
}
----------------------------------------

int main () {
    int max, x;
    if (scanf ("%d", &max) != 1) {
        return 0;
    }
    while (scanf ("%d", &x) == 1) {
        if (x > max) {
            max = x;
        }
    }
    if (feof (stdin)) {
        printf ("Max: %d\n", max);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27948369_27948830_3_18
27948369_27949037_3_28
Title: C program that prints out highest number 
----------------------------------------

int main (void) {
    int res, max, x;
    if (1 != scanf ("%d", &max))
        return -1;
    while (EOF != (res = scanf ("%d", &x))) {
        if (res != 1)
            return -1;
        if (x > max) {
            max = x;
        }
    }
    printf ("%d\n", max);
    return 0;
}
----------------------------------------

int main () {
    int max, x;
    if (scanf ("%d", &max) != 1) {
        return 0;
    }
    while (scanf ("%d", &x) == 1) {
        if (x > max) {
            max = x;
        }
    }
    if (feof (stdin)) {
        printf ("Max: %d\n", max);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27948613_27949560_4_42
27948613_27949903_6_32
Title: "after getting an input from user in an array of maximum size 100 how to check how many values user has inputed?" 
----------------------------------------

int main () {
    int a [100];
    int i;
    int result;
    result = 1;
    i = 0;
    while ((i < 100) && (result == 1)) {
        int chr;
        while (isspace ((chr = fgetc (stdin))) && (chr != '\n'))
            ;
        if (chr == '\n')
            result = -1;
        else {
            ungetc (chr, stdin);
            result = scanf ("%d", &a[i]);
            if (result == 1)
                i++;
        }
    }
    printf ("read %d numbers\n", i);
    while (--i >= 0)
        printf ("%d\n", a[i]);
    return 0;
}
----------------------------------------

int main (void) {
    int v, a [N];
    int i, n = 0, stop = 0;
    int ch, res;
    while (!stop && EOF != (res = scanf ("%d", &v))) {
        if (res == 1) {
            a[n++] = v;
            if (n == N)
                break;
            while (isspace (ch = getchar ())) {
                if (ch == '\n') {
                    stop = 1;
                    break;
                }
            }
            ungetc (ch, stdin);
        }
        else {
            printf ("invalid input!\n");
            while (getchar () != '\n')
                ;
        }
    }
    for (i = 0; i < n; ++i)
        printf ("%d ", a[i]);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27957986_27958267_5_35
27957986_27958368_14_31
Title: C printf indentation issue 
----------------------------------------

int main () {
    printf ("%-64s\t%s\n", "List", "Bindings");
    printf ("-------------------------------------------------------------------------------\n");
    const char *curr_dl_result [] = {
        [0] = "DG1",
        [1] = "DG2",
        [2] = "DG3",
        [3] = "DG3",
    };
    int dg_count = 4;
    int j = 0;
    int pos = printf ("%s", "Test");
    if (dg_count) {
        unsigned char is_print_done = 0;
        for (j = 0; j < dg_count; j++) {
            char *spacer = malloc (74 - pos * sizeof (char));
            memset (spacer, ' ', 74 - pos);
            printf ("%s", spacer);
            printf ("%s\n", (curr_dl_result [j]));
            is_print_done = 1;
            pos = 0;
            free (spacer);
        }
    }
    else {
        printf ("%78s\n", "-");
    }
    return 0;
}
----------------------------------------

int main () {
    my_out ("List", "Bindings");
    printf ("-----------------------------------------------------------------------------\n");
    const char *curr_dl_result [] = {
        [0] = "DG1",
        [1] = "DG2",
        [2] = "DG3",
        [3] = "DG3",
    };
    my_out ("Test", curr_dl_result [1]);
    my_out ("Test  eee", curr_dl_result [2]);
    my_out ("Test 22", curr_dl_result [3]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2797140_2797237_4_25
2797140_2797659_5_15
Title: Recursion problem in C 
----------------------------------------

void solve (const char *str1, const char *str2, const int length1, const int length2, char *output, int pozOut, int pozIn1, int pozIn2) {
    if (pozIn1 == length1 && pozIn2 == length2) {
        printf ("%s\n", output);
        return;
    }
    if (pozIn1 < length1) {
        output[pozOut] = str1[pozIn1];
        solve (str1, str2, length1, length2, output, pozOut + 1, pozIn1 + 1, pozIn2);
    }
    if (pozIn2 < length2) {
        output[pozOut] = str2[pozIn2];
        solve (str1, str2, length1, length2, output, pozOut + 1, pozIn1, pozIn2 + 1);
    }
}
----------------------------------------

void solve (const char *result, const char *x0, const char *x1, char *p) {
    if (!*x0 && !*x1)
        printf ("%s\n", result);
    if (*x0) {
        *p = *x0;
        solve (result, x0 + 1, x1, p + 1);
    }
    if (*x1) {
        *p = *x1;
        solve (result, x0, x1 + 1, p + 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27974983_27975009_3_31
27974983_27975850_3_18
Title: "C easy program not working - ""if""" 
----------------------------------------

int main () {
    int x = 10;
    int y = 8;
    int z = 3;
    if ((x > y) && (x > z)) {
        printf ("%d", x);
    }
    else {
        if ((y > x) && (y > z)) {
            printf ("%d", y);
        }
        else {
            if ((z > x) && (z > y)) {
                printf ("%d", z);
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int x, y, z, max;
    scanf ("%d", & x);
    max = x;
    scanf ("%d", & y);
    if (y > max)
        max = y;
    scanf ("%d", & z);
    if (z > max)
        max = z;
    printf ("max = %d", max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27974983_27975014_3_26
27974983_27975850_3_18
Title: "C easy program not working - ""if""" 
----------------------------------------

int main () {
    int x = 10;
    int y = 8;
    int z = 3;
    if ((x > y) && (x > z)) {
        printf ("%d", x);
    }
    if ((y > x) && (y > z)) {
        printf ("%d", y);
    }
    if ((z > x) && (z > y)) {
        printf ("%d", z);
    }
    return 0;
}
----------------------------------------

int main () {
    int x, y, z, max;
    scanf ("%d", & x);
    max = x;
    scanf ("%d", & y);
    if (y > max)
        max = y;
    scanf ("%d", & z);
    if (z > max)
        max = z;
    printf ("max = %d", max);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27977275_27977832_3_16
27977275_27978109_3_18
Title: Error in converting double to int 
----------------------------------------

int main (void) {
    double value1;
    double value2;
    printf ("Put in two numbers:");
    scanf ("%lf", & value1);
    scanf ("%lf", & value2);
    int a = value1;
    int b = value2;
    printf ("a=%d b=%d\n", a, b);
}
----------------------------------------

int main () {
    double *int1 = malloc (sizeof (double));
    double *int2 = malloc (sizeof (double));
    printf ("Put in two numbers:");
    scanf ("%lf", int1);
    scanf ("%lf", int2);
    int a = (int) *int1;
    int b = (int) *int2;
    printf ("%d\n%d", a, b);
    free (int1);
    free (int2);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27989119_27989139_4_33
27989119_27989471_1_20
Title: Find lines that DO NOT contain a specific character 
----------------------------------------

int countLOC (const char * const filename) {
    int c, nlines = 0;
    int found = 0;
    FILE *file;
    file = fopen (filename, "r");
    if (file == NULL) {
        printf ("failed to open %s\n", filename);
        return -1;
    }
    while ((c = fgetc (file)) != EOF) {
        if (c == '\n') {
            nlines += (found != 0) ? 1 : 0;
            found = 0;
        }
        found = ((c == '|') || (found != 0));
    }
    nlines += (found != 0) ? 1 : 0;
    printf ("%d", nlines);
    fclose (files);
    return nlines;
}
----------------------------------------

int countLOC (const char *filename) {
    int c, nlines = 0, hasCh = 0;
    FILE *fp = fopen (filename, "r");
    while (1) {
        c = getc (fp);
        if (c == EOF || c == '\n') {
            if (hasCh)
                nlines++;
            if (c == EOF)
                break;
            hasCh = 0;
        }
        else if (!hasCh && c == '|') {
            hasCh = 1;
        }
    }
    fclose (fp);
    printf ("%d\n", nlines);
    return nlines;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27996252_27999157_3_37
27996252_27999800_5_17
Title: Converting String to decimal without an array 
----------------------------------------

int main () {
    char *data = "deadbeef";
    while (*data) {
        switch (*data++) {
        case '0' :
            fputs ("0000", stdout);
            break;
        case '1' :
            fputs ("0001", stdout);
            break;
        case '2' :
            fputs ("0010", stdout);
            break;
        case '3' :
            fputs ("0011", stdout);
            break;
        case '4' :
            fputs ("0100", stdout);
            break;
        case '5' :
            fputs ("0101", stdout);
            break;
        case '6' :
            fputs ("0110", stdout);
            break;
        case '7' :
            fputs ("0111", stdout);
            break;
        case '8' :
            fputs ("1000", stdout);
            break;
        case '9' :
            fputs ("1001", stdout);
            break;
        case 'a' :
        case 'A' :
            fputs ("1010", stdout);
            break;
        case 'b' :
        case 'B' :
            fputs ("1011", stdout);
            break;
        case 'c' :
        case 'C' :
            fputs ("1100", stdout);
            break;
        case 'd' :
        case 'D' :
            fputs ("1101", stdout);
            break;
        case 'e' :
        case 'E' :
            fputs ("1110", stdout);
            break;
        case 'f' :
        case 'F' :
            fputs ("1111", stdout);
            break;
        default :
            fputs ("invalid input!\n", stderr);
        }
    }
    puts ("");
    return 0;
}
----------------------------------------

int main (void) {
    char string [STRINGLENGTH] = "Hello, world";
    int valueOfString = 0;
    for (int i = 0; i < STRINGLENGTH - 1; i++) {
        printf ("%c = %d\r\n", string [i], string [i]);
        valueOfString += string[i];
    }
    printf ("Sum of chars: %d\r\n", valueOfString);
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
27997820_27997945_3_25
27997820_27998119_9_24
Title: Why can't I check multiple conditions using only 1 equality operator in C? 
----------------------------------------

int main () {
    char a [10] = {0};
    printf ("enter string sequence:");
    scanf ("%s", a);
    int len = sizeof (a) / sizeof (a[0]);
    char review [] = {'A', 'D', 'O', 'Q', 'R', 'P'};
    int rLen = sizeof (review) / sizeof (review[0]);
    int found = 0;
    for (int i = 0; i < len; i++) {
        for (int j = 0; j < rLen; j++) {
            if (a[i] == review[j]) {
                printf ("found atlast !!!");
                found = 1;
                break;
            }
        }
        if (found == 1)
            break;
    }
    if (found == 0)
        printf ("Could not be found");
}
----------------------------------------

int main (void) {
    memset (specialArray, 0, sizeof (specialArray));
    for (int i = 0; specialList[i] != EOF; i++)
        specialArray[specialList[i]] = 1;
    if (isSpecial ('A'))
        printf ("A is special\n");
    else
        printf ("A is normal\n");
    if (isSpecial ('B'))
        printf ("B is special\n");
    else
        printf ("B is normal\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28004395_28004452_7_27
28004395_28004493_3_19
Title: "Why does the compiler say that the variable ""z"" is redeclared as a different variable type?" 
----------------------------------------

int main () {
    int n, m;
    float div;
    printf ("Enter first number: \n");
    scanf ("%d", & n);
    printf ("Enter second number: \n");
    scanf ("%d", & m);
    if (m != 0) {
        div = divve (n, m);
        printf ("%d/%d=%f \n", n, m, div);
    }
    return 0;
}
----------------------------------------

int main () {
    int n, m;
    float quotient;
    printf ("Enter first number: \n");
    scanf ("%d", & n);
    printf ("Enter second number: \n");
    scanf ("%d", & m);
    if (m != 0) {
        quotient = divide (n, m);
        printf ("%d/%d = %f \n", n, m, quotient);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28004565_28004735_1_10
28004565_28004896_11_22
Title: Sort structure of arrays using qsort 
----------------------------------------

int cmp (const void *a, const void *b) {
    Index *Ia = (Index *) a;
    Index *Ib = (Index *) b;
    if (Ia->row < Ib->row)
        return -1;
    if (Ia->row > Ib->row)
        return 1;
    if (Ia->col < Ib->col)
        return -1;
    if (Ia->col > Ib->col)
        return 1;
    return 0;
}
----------------------------------------

int cmp (const void *a, const void *b) {
    int ia = *(int*) a;
    int ib = *(int*) b;
    int ra = mat_cmp->row[ia];
    int rb = mat_cmp->row[ib];
    if (ra == rb) {
        int ca = mat_cmp->col[ia];
        int cb = mat_cmp->col[ib];
        return (ca > cb) - (ca < cb);
    }
    else
        return (ra > rb) - (ra < rb);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28004565_28004896_26_40
28004565_28004983_49_66
Title: Sort structure of arrays using qsort 
----------------------------------------

int main (void) {
    int row [N] = {1, 1, 0};
    int col [N] = {3, 2, 1};
    int i, index [N];
    Matrix mat = {
        .row = row,
        .col = col
    };
    for (i = 0; i < N; ++i)
        index[i] = i;
    mat_cmp = &mat;
    qsort (index, N, sizeof (* index), cmp);
    for (i = 0; i < N; i++) {
        printf ("%d,%d\n", mat.row [index [i]], mat.col [index [i]]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    const int N = 3;
    Matrix matrix;
    int row [N] = {1, 1, 0};
    int col [N] = {3, 2, 1};
    matrix.row = row;
    matrix.col = col;
    sort (& matrix, 0, N);
    for (int i = 0; i < N; ++i)
        printf ("%d %d\n", matrix.row[i], matrix.col[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28012856_28012979_1_13
28012856_28013003_1_10
Title: file stream fread() - program doesn`t read points 
----------------------------------------

void output (FILE *save) {
    while (1) {
        if (fread (&point, sizeof (point), 1, save) == 1) {
            printf ("x-coordinatee: %f", point.x);
            printf ("y-coordinate: %f", point.y);
            printf ("z-coordinate: %f", point.z);
            printf ("\n\n");
        }
        else
            break;
    }
    fclose (save);
}
----------------------------------------

void output (FILE *save) {
    fseek (save, 0, SEEK_SET);
    while (fread (&point, sizeof (point), 1, save) != 0) {
        printf ("x-coordinate: %f", point.x);
        printf ("\ty-coordinate: %f", point.y);
        printf ("\tz-coordinate: %f", point.z);
        printf ("\n\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28022530_28023307_75_107
28022530_28024205_31_52
Title: Integer Stack program 
----------------------------------------

int main () {
    int choice, value;
    while (1) {
        choice = display ();
        switch (choice) {
        case 1 :
            printf ("\n enter the value \n ");
            scanf ("%d", & value);
            push (value);
            break;
        case 2 :
            pop ();
            break;
        case 3 :
            Top ();
            break;
        default :
            printf ("\n Wrong choice \n ");
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int t, tt, n;
    scanf ("%d", & t);
    while (t--) {
        scanf ("%d", & tt);
        while (tt--) {
            char s [100];
            scanf ("%99s", s);
            if (strcmp (s, "PUSH") == 0) {
                scanf ("%d", & n);
                push (n);
            }
            else if (strcmp (s, "POP") == 0) {
                pop ();
            }
            else if (strcmp (s, "TOP") == 0) {
                Top ();
            }
        }
        top = -1;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28022530_28023307_7_18
28022530_28024205_9_16
Title: Integer Stack program 
----------------------------------------

void push (int n) {
    if (top >= 50) {
        printf ("STACK OVERFLOW\n");
    }
    else {
        top++;
        ar[top] = n;
    }
}
----------------------------------------

void push (int n) {
    if (top >= MAX_SIZE - 1) {
        printf ("STACK OVERFLOW\n");
    }
    else {
        ar[++top] = n;
        printf ("%d\n", n);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28024176_28024644_1_16
28024176_28024789_20_30
Title: C: Recursive function - Binary search 
----------------------------------------

int main () {
    int numb [] = {2, 7, 8, 9};
    int n;
    for (n = 0; n < 15; n++) {
        int *p = BinSearchRec (numb, 4, n);
        if (p) {
            printf ("%d: @%d\n", n, (int) (p - numb));
        }
        else {
            printf ("%d: NULL\n", n);
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int numb [] = {2, 7, 8, 9};
    int *p = BinSearchRec (numb, 0, 3, 22);
    if (p) {
        printf ("Position: %d \n", (int) (p - numb + 1));
    }
    else {
        printf ("NULL \n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28025511_28025840_4_22
28025511_28026524_5_45
Title: "Selecting lines with length C filter" 
----------------------------------------

int main (int argc, char *argv []) {
    int n, m, len;
    char line [200];
    if (argc < 3) {
        printf ("Must specify min & max line length.");
        return -1;
    }
    n = atoi (argv[1]);
    m = atoi (argv[2]);
    while (fgets (line, 200, stdin) != NULL) {
        len = strlen (line);
        if (len >= n && len <= m)
            printf (line);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i = 1, n, m;
    if (argc >= 3) {
        n = atoi (argv[1]);
        m = atoi (argv[2]);
        printf ("n=%d   m=%d\n", n, m);
    }
    char line [1000];
    while (fgets (line, sizeof (line), stdin)) {
        int length = strlen (line) - 1;
        if (length < n) {
            printf ("line %d:%s status: < %d\n", i, line, n);
        }
        else if (length == n) {
            printf ("line %d:%s status: = %d\n", i, line, n);
        }
        else if (length > n && length <= m) {
            printf ("line %d:%s status: %d < <= %d\n", i, line, n, m);
        }
        else {
            printf ("line %d:%s status: > %d\n", i, line, m);
        }
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28025829_28027429_3_17
28025829_28028955_4_26
Title: Issue with isdigit(); - scanf validator 
----------------------------------------

int main (void) {
    char Name [50], nl = 0;
    int stat;
    printf ("Please insert your name\n");
    stat = scanf ("%49[a-z]%c", Name, &nl);
    while (stat != 2 || nl != '\n') {
        while (getchar () != '\n')
            ;
        printf ("ERROR! Please insert only letters\n");
        stat = scanf ("%49[a-z]%c", Name, &nl);
    }
    printf ("your name is '%s'\n", Name);
    return 0;
}
----------------------------------------

void main () {
    char name [50];
    char key = 0;
    int i = 0;
    while (1) {
        key = getch ();
        if (!key)
            getch ();
        if (isalpha (key) || key == 32)
            putch (name[i++] = key);
        else if (key == 8 && i >= 0) {
            printf ("%c%c%c", 8, 32, 8);
            i--;
        }
        else if (key == 13)
            break;
    }
    name[i] = '\0';
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28027918_28028000_4_27
28027918_28028097_17_51
Title: Counting characters in a string or file 
----------------------------------------

int main (void) {
    char buf [100];
    int i = 0, max = 0, t = 0;
    int a [256];
    memset (a, 0, sizeof (a));
    fgets (buf, 100, stdin);
    buf[strlen (buf) - 1] = '\0';
    while (buf[i] != '\0') {
        a[(int) buf[i]]++;
        i++;
    }
    i = 0;
    for (i = 0; i < 256; i++) {
        if (a[i] > max) {
            max = a[i];
            t = i;
        }
    }
    printf ("The most occurring character is %c: Times: %d", t, max);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int i = 0, j = 0;
    struct Frequency count [256];
    memset (& count, 0, sizeof (count));
    char string [100] = "Hello world";
    for (i = 0; i < 100; i++) {
        for (j = 0; j < 256; j++) {
            count[j].character = j;
            if (tolower (string[i]) == j) {
                count[j].count += 1;
            }
        }
    }
    qsort (count, sizeof (count) / sizeof (* count), sizeof (* count), compare);
    if (isprint (count[1].character))
        printf ("\nThe most popular character is: %c\n", count[1].character);
    else
        printf ("\nThe most popular character is: \\%03x\n", count[1].character);
    for (j = 0; j < 256; j++) {
        if (isprint (count[j].character))
            printf ("\n%c -> %d \n", count[j].character, count[j].count);
        else
            printf ("\n\\%03x -> %d \n", count[j].character, count[j].count);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28030532_28030799_5_23
28030532_28031455_4_80
Title: Exercise 5.6 Kochan's Programming in C 
----------------------------------------

int main () {
    int number = 0, mod = 1, digit;
    printf ("Please input your number: ");
    if (scanf ("%d", &number) == 1) {
        if (number < 0) {
            number = -number;
            printf ("minus ");
        }
        while (mod <= number)
            mod *= 10;
        for (mod = mod / 10; mod >= 1; mod /= 10) {
            digit = number / mod;
            printf ("%s ", numtext [digit]);
            number = number - digit * mod;
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int number, counter, output;
    int originalNumber;
    printf ("Please input your number\n");
    scanf (" %i", & number);
    while (number != 0) {
        originalNumber = number;
        for (counter = 0; number >= 10; counter = counter + 1) {
            number = number / 10;
        }
        output = number;
        while (counter > 0) {
            number = number * 10;
            counter = counter - 1;
        }
        number = originalNumber - number;
        printf ("%i     %i  ", number, output);
        switch (output) {
        case 0 :
            printf ("Zero \n");
            break;
        case 1 :
            printf ("One \n");
            break;
        case 2 :
            printf ("Two \n");
            break;
        case 3 :
            printf ("Three \n");
            break;
        case 4 :
            printf ("Four \n");
            break;
        case 5 :
            printf ("Five \n");
            break;
        case 6 :
            printf ("Six \n");
            break;
        case 7 :
            printf ("Seven \n");
            break;
        case 8 :
            printf ("Eight \n");
            break;
        case 9 :
            printf ("Nine \n");
            break;
        default :
            break;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28030532_28030799_5_23
28030532_28056702_4_68
Title: Exercise 5.6 Kochan's Programming in C 
----------------------------------------

int main () {
    int number = 0, mod = 1, digit;
    printf ("Please input your number: ");
    if (scanf ("%d", &number) == 1) {
        if (number < 0) {
            number = -number;
            printf ("minus ");
        }
        while (mod <= number)
            mod *= 10;
        for (mod = mod / 10; mod >= 1; mod /= 10) {
            digit = number / mod;
            printf ("%s ", numtext [digit]);
            number = number - digit * mod;
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int counter;
    float number;
    int number2;
    number2 = 0;
    printf ("Please Enter a number\n");
    scanf (" %f", & number);
    while (number > 0.00000001) {
        {
            for (counter = 0; number > 1; counter++)
                number = number / 10;
            for (; number < 1; counter--) {
                if (number < 0.1)
                    printf ("zero\n");
                number = number * 10;
                number2 = (int) number;
            }
            number = (float) number - (float) number2;
            switch (number2) {
            case 0 :
                printf ("Zero \n");
                break;
            case 1 :
                printf ("One \n");
                break;
            case 2 :
                printf ("Two \n");
                break;
            case 3 :
                printf ("Three \n");
                break;
            case 4 :
                printf ("Four \n");
                break;
            case 5 :
                printf ("Five \n");
                break;
            case 6 :
                printf ("Six \n");
                break;
            case 7 :
                printf ("Seven \n");
                break;
            case 8 :
                printf ("Eight \n");
                break;
            case 9 :
                printf ("Nine \n");
                break;
            default :
                break;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28030532_28030799_5_23
28030532_30485720_4_86
Title: Exercise 5.6 Kochan's Programming in C 
----------------------------------------

int main () {
    int number = 0, mod = 1, digit;
    printf ("Please input your number: ");
    if (scanf ("%d", &number) == 1) {
        if (number < 0) {
            number = -number;
            printf ("minus ");
        }
        while (mod <= number)
            mod *= 10;
        for (mod = mod / 10; mod >= 1; mod /= 10) {
            digit = number / mod;
            printf ("%s ", numtext [digit]);
            number = number - digit * mod;
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int number, flipper, left_digit, pointer;
    printf ("Number to Word Generator\n\n");
    printf ("Enter a number (8-length max) and I will speak it for you!\n\n");
    printf ("Enter your number.\n\n");
    scanf ("%i", & number);
    printf ("\n");
    if (number == 0)
        printf ("Zero");
    if (number <= 99999999 && number >= -99999999) {
        if (number < 0) {
            number = -number;
            printf ("Negative ");
        }
        for (pointer = 100000000; pointer != 1; pointer = pointer / 10) {
            if (pointer <= (number * 10)) {
                left_digit = (number % pointer) / (pointer / 10);
                switch (left_digit) {
                case 1 :
                    printf ("One ");
                    break;
                case 2 :
                    printf ("Two ");
                    break;
                case 3 :
                    printf ("Three ");
                    break;
                case 4 :
                    printf ("Four ");
                    break;
                case 5 :
                    printf ("Five ");
                    break;
                case 6 :
                    printf ("Six ");
                    break;
                case 7 :
                    printf ("Seven ");
                    break;
                case 8 :
                    printf ("Eight ");
                    break;
                case 9 :
                    printf ("Nine ");
                    break;
                case 0 :
                    printf ("Zero ");
                    break;
                default :
                    printf ("Unknown operator.\n");
                    break;
                }
            }
        }
    }
    else
        printf ("Number is not within range!!");
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28030532_28031455_4_80
28030532_30485720_4_86
Title: Exercise 5.6 Kochan's Programming in C 
----------------------------------------

int main (void) {
    int number, counter, output;
    int originalNumber;
    printf ("Please input your number\n");
    scanf (" %i", & number);
    while (number != 0) {
        originalNumber = number;
        for (counter = 0; number >= 10; counter = counter + 1) {
            number = number / 10;
        }
        output = number;
        while (counter > 0) {
            number = number * 10;
            counter = counter - 1;
        }
        number = originalNumber - number;
        printf ("%i     %i  ", number, output);
        switch (output) {
        case 0 :
            printf ("Zero \n");
            break;
        case 1 :
            printf ("One \n");
            break;
        case 2 :
            printf ("Two \n");
            break;
        case 3 :
            printf ("Three \n");
            break;
        case 4 :
            printf ("Four \n");
            break;
        case 5 :
            printf ("Five \n");
            break;
        case 6 :
            printf ("Six \n");
            break;
        case 7 :
            printf ("Seven \n");
            break;
        case 8 :
            printf ("Eight \n");
            break;
        case 9 :
            printf ("Nine \n");
            break;
        default :
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int number, flipper, left_digit, pointer;
    printf ("Number to Word Generator\n\n");
    printf ("Enter a number (8-length max) and I will speak it for you!\n\n");
    printf ("Enter your number.\n\n");
    scanf ("%i", & number);
    printf ("\n");
    if (number == 0)
        printf ("Zero");
    if (number <= 99999999 && number >= -99999999) {
        if (number < 0) {
            number = -number;
            printf ("Negative ");
        }
        for (pointer = 100000000; pointer != 1; pointer = pointer / 10) {
            if (pointer <= (number * 10)) {
                left_digit = (number % pointer) / (pointer / 10);
                switch (left_digit) {
                case 1 :
                    printf ("One ");
                    break;
                case 2 :
                    printf ("Two ");
                    break;
                case 3 :
                    printf ("Three ");
                    break;
                case 4 :
                    printf ("Four ");
                    break;
                case 5 :
                    printf ("Five ");
                    break;
                case 6 :
                    printf ("Six ");
                    break;
                case 7 :
                    printf ("Seven ");
                    break;
                case 8 :
                    printf ("Eight ");
                    break;
                case 9 :
                    printf ("Nine ");
                    break;
                case 0 :
                    printf ("Zero ");
                    break;
                default :
                    printf ("Unknown operator.\n");
                    break;
                }
            }
        }
    }
    else
        printf ("Number is not within range!!");
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28030532_28056702_4_68
28030532_30485720_4_86
Title: Exercise 5.6 Kochan's Programming in C 
----------------------------------------

int main (void) {
    int counter;
    float number;
    int number2;
    number2 = 0;
    printf ("Please Enter a number\n");
    scanf (" %f", & number);
    while (number > 0.00000001) {
        {
            for (counter = 0; number > 1; counter++)
                number = number / 10;
            for (; number < 1; counter--) {
                if (number < 0.1)
                    printf ("zero\n");
                number = number * 10;
                number2 = (int) number;
            }
            number = (float) number - (float) number2;
            switch (number2) {
            case 0 :
                printf ("Zero \n");
                break;
            case 1 :
                printf ("One \n");
                break;
            case 2 :
                printf ("Two \n");
                break;
            case 3 :
                printf ("Three \n");
                break;
            case 4 :
                printf ("Four \n");
                break;
            case 5 :
                printf ("Five \n");
                break;
            case 6 :
                printf ("Six \n");
                break;
            case 7 :
                printf ("Seven \n");
                break;
            case 8 :
                printf ("Eight \n");
                break;
            case 9 :
                printf ("Nine \n");
                break;
            default :
                break;
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int number, flipper, left_digit, pointer;
    printf ("Number to Word Generator\n\n");
    printf ("Enter a number (8-length max) and I will speak it for you!\n\n");
    printf ("Enter your number.\n\n");
    scanf ("%i", & number);
    printf ("\n");
    if (number == 0)
        printf ("Zero");
    if (number <= 99999999 && number >= -99999999) {
        if (number < 0) {
            number = -number;
            printf ("Negative ");
        }
        for (pointer = 100000000; pointer != 1; pointer = pointer / 10) {
            if (pointer <= (number * 10)) {
                left_digit = (number % pointer) / (pointer / 10);
                switch (left_digit) {
                case 1 :
                    printf ("One ");
                    break;
                case 2 :
                    printf ("Two ");
                    break;
                case 3 :
                    printf ("Three ");
                    break;
                case 4 :
                    printf ("Four ");
                    break;
                case 5 :
                    printf ("Five ");
                    break;
                case 6 :
                    printf ("Six ");
                    break;
                case 7 :
                    printf ("Seven ");
                    break;
                case 8 :
                    printf ("Eight ");
                    break;
                case 9 :
                    printf ("Nine ");
                    break;
                case 0 :
                    printf ("Zero ");
                    break;
                default :
                    printf ("Unknown operator.\n");
                    break;
                }
            }
        }
    }
    else
        printf ("Number is not within range!!");
    getch ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28037235_28037293_4_16
28037235_28043509_4_23
Title: How to aggregate string array in c 
----------------------------------------

int main (int argc, char *argv []) {
    char *a [] = {"I", "LOVE", "C", "PROGRAMMING"};
    char buf [1024] = {0};
    int i, len = sizeof (a) / sizeof (a[0]);
    for (i = 0; i < len; i++) {
        strcat (buf, a [i]);
        if (i < len - 1)
            strcat (buf, " ");
    }
    printf ("[%s]\n", buf);
    return 0;
}
----------------------------------------

int main (void) {
    char *a [] = {"I", "LOVE", "C", "PROGRAMMING"};
    size_t a_size = 4;
    size_t width [a_size], total_size = 0;
    for (int i = 0; i < a_size; i++) {
        total_size += (width[i] = strlen (a[i]));
    }
    char b [total_size + a_size];
    char *p = b;
    for (int i = 0; i < a_size; ++i) {
        if (i)
            *p++ = ' ';
        memcpy (p, a [i], width [i]);
        p += width[i];
    }
    *p = '\0';
    printf ("'%s'\n", b);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28046375_4_81
28045172_28058216_65_73
Title: Morse Code Converter in C 
----------------------------------------

int main () {
    char string [256] = "";
    int T;
    scanf ("%d ", & T);
    const char morse [] [10] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
    int i = 1;
    while (T--) {
        printf ("Case#%d:\n", i);
        fgets (string, sizeof (string), stdin);
        char *p = strtok (string, " ");
        while (p != NULL) {
            if (p[0] == '/') {
                printf (" ");
                goto next;
            }
            int j = 0;
            for (j = 0; j < 26; j++) {
                if (!strcmp (p, morse[j])) {
                    printf ("%c", (j + 65));
                }
            }
        next :
            p = strtok (NULL, "\t \n");
        }
        printf ("\n");
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    make_tree ();
    encode_out ("HELLO WORLD");
    encode_out ("JOKE");
    decode_out (".... . .-.. .-.. --- / .-- --- .-. .-.. -..");
    decode_out (".--- --- -.- .");
    drop_tree ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28046375_4_81
28045172_28059061_7_29
Title: Morse Code Converter in C 
----------------------------------------

int main () {
    char string [256] = "";
    int T;
    scanf ("%d ", & T);
    const char morse [] [10] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
    int i = 1;
    while (T--) {
        printf ("Case#%d:\n", i);
        fgets (string, sizeof (string), stdin);
        char *p = strtok (string, " ");
        while (p != NULL) {
            if (p[0] == '/') {
                printf (" ");
                goto next;
            }
            int j = 0;
            for (j = 0; j < 26; j++) {
                if (!strcmp (p, morse[j])) {
                    printf ("%c", (j + 65));
                }
            }
        next :
            p = strtok (NULL, "\t \n");
        }
        printf ("\n");
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    char string [MAX] [SIZE] = {".... . .-.. .-.. --- / .-- --- .-. .-.. -..", ".--- --- -.- ."};
    char destination [MAX] [8];
    int x = 2;
    int i, j, m;
    char *code, *separator = " ";
    for (i = 0; i < x; ++i) {
        j = 0;
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            printf ("'%s'\n", code);
            strcpy (destination [j ++], code);
        }
        m = j;
        if (strcmp (destination[0], "....") == 0)
            puts ("yes, It's 'H'.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28046375_4_81
28045172_28082333_6_48
Title: Morse Code Converter in C 
----------------------------------------

int main () {
    char string [256] = "";
    int T;
    scanf ("%d ", & T);
    const char morse [] [10] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
    int i = 1;
    while (T--) {
        printf ("Case#%d:\n", i);
        fgets (string, sizeof (string), stdin);
        char *p = strtok (string, " ");
        while (p != NULL) {
            if (p[0] == '/') {
                printf (" ");
                goto next;
            }
            int j = 0;
            for (j = 0; j < 26; j++) {
                if (!strcmp (p, morse[j])) {
                    printf ("%c", (j + 65));
                }
            }
        next :
            p = strtok (NULL, "\t \n");
        }
        printf ("\n");
        i++;
    }
    return 0;
}
----------------------------------------

int main () {
    char string [MAX] [SIZE];
    char destination [MAX] [MAX] [8];
    char *input [38] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", "-----", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "/"};
    char *output [38] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " "};
    char *code, *separator = " ";
    int i, c, x, j;
    int m [MAX];
    printf ("Enter the number of Cases:");
    scanf ("%d", & x);
    getchar ();
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        gets (string [i]);
    }
    for (i = 0, j = 0; i < x; ++i) {
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            strcpy (destination [i] [j ++], code);
        }
        m[i] = j;
    }
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        for (j = 0; j < m[i]; j++) {
            for (c = 0; c < 37; c++) {
                if (strcmp (destination[i][j], input[c]) == 0) {
                    printf ("%s", output [c]);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28046375_4_81
28045172_41302920_10_33
Title: Morse Code Converter in C 
----------------------------------------

int main () {
    char string [256] = "";
    int T;
    scanf ("%d ", & T);
    const char morse [] [10] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
    int i = 1;
    while (T--) {
        printf ("Case#%d:\n", i);
        fgets (string, sizeof (string), stdin);
        char *p = strtok (string, " ");
        while (p != NULL) {
            if (p[0] == '/') {
                printf (" ");
                goto next;
            }
            int j = 0;
            for (j = 0; j < 26; j++) {
                if (!strcmp (p, morse[j])) {
                    printf ("%c", (j + 65));
                }
            }
        next :
            p = strtok (NULL, "\t \n");
        }
        printf ("\n");
        i++;
    }
    return 0;
}
----------------------------------------

int main (void) {
    char input [] = ".- -... -.-.";
    morse_table_t table [] = {{".-", "A"}, {"-...", "B"}, {"-.-.", "C"}};
    char *segment;
    int i;
    segment = strtok (input, " ");
    while (segment) {
        for (i = 0; i < ARRAY_SIZE (table); ++i) {
            if (!strcmp (segment, table[i].morse))
                puts (table[i].ascii);
        }
        segment = strtok (NULL, " ");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28058216_65_73
28045172_28059061_7_29
Title: Morse Code Converter in C 
----------------------------------------

int main (void) {
    make_tree ();
    encode_out ("HELLO WORLD");
    encode_out ("JOKE");
    decode_out (".... . .-.. .-.. --- / .-- --- .-. .-.. -..");
    decode_out (".--- --- -.- .");
    drop_tree ();
    return 0;
}
----------------------------------------

int main () {
    char string [MAX] [SIZE] = {".... . .-.. .-.. --- / .-- --- .-. .-.. -..", ".--- --- -.- ."};
    char destination [MAX] [8];
    int x = 2;
    int i, j, m;
    char *code, *separator = " ";
    for (i = 0; i < x; ++i) {
        j = 0;
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            printf ("'%s'\n", code);
            strcpy (destination [j ++], code);
        }
        m = j;
        if (strcmp (destination[0], "....") == 0)
            puts ("yes, It's 'H'.");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28058216_65_73
28045172_28082333_6_48
Title: Morse Code Converter in C 
----------------------------------------

int main (void) {
    make_tree ();
    encode_out ("HELLO WORLD");
    encode_out ("JOKE");
    decode_out (".... . .-.. .-.. --- / .-- --- .-. .-.. -..");
    decode_out (".--- --- -.- .");
    drop_tree ();
    return 0;
}
----------------------------------------

int main () {
    char string [MAX] [SIZE];
    char destination [MAX] [MAX] [8];
    char *input [38] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", "-----", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "/"};
    char *output [38] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " "};
    char *code, *separator = " ";
    int i, c, x, j;
    int m [MAX];
    printf ("Enter the number of Cases:");
    scanf ("%d", & x);
    getchar ();
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        gets (string [i]);
    }
    for (i = 0, j = 0; i < x; ++i) {
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            strcpy (destination [i] [j ++], code);
        }
        m[i] = j;
    }
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        for (j = 0; j < m[i]; j++) {
            for (c = 0; c < 37; c++) {
                if (strcmp (destination[i][j], input[c]) == 0) {
                    printf ("%s", output [c]);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28058216_65_73
28045172_41302920_10_33
Title: Morse Code Converter in C 
----------------------------------------

int main (void) {
    make_tree ();
    encode_out ("HELLO WORLD");
    encode_out ("JOKE");
    decode_out (".... . .-.. .-.. --- / .-- --- .-. .-.. -..");
    decode_out (".--- --- -.- .");
    drop_tree ();
    return 0;
}
----------------------------------------

int main (void) {
    char input [] = ".- -... -.-.";
    morse_table_t table [] = {{".-", "A"}, {"-...", "B"}, {"-.-.", "C"}};
    char *segment;
    int i;
    segment = strtok (input, " ");
    while (segment) {
        for (i = 0; i < ARRAY_SIZE (table); ++i) {
            if (!strcmp (segment, table[i].morse))
                puts (table[i].ascii);
        }
        segment = strtok (NULL, " ");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28059061_7_29
28045172_28082333_6_48
Title: Morse Code Converter in C 
----------------------------------------

int main () {
    char string [MAX] [SIZE] = {".... . .-.. .-.. --- / .-- --- .-. .-.. -..", ".--- --- -.- ."};
    char destination [MAX] [8];
    int x = 2;
    int i, j, m;
    char *code, *separator = " ";
    for (i = 0; i < x; ++i) {
        j = 0;
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            printf ("'%s'\n", code);
            strcpy (destination [j ++], code);
        }
        m = j;
        if (strcmp (destination[0], "....") == 0)
            puts ("yes, It's 'H'.");
    }
    return 0;
}
----------------------------------------

int main () {
    char string [MAX] [SIZE];
    char destination [MAX] [MAX] [8];
    char *input [38] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", "-----", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "/"};
    char *output [38] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " "};
    char *code, *separator = " ";
    int i, c, x, j;
    int m [MAX];
    printf ("Enter the number of Cases:");
    scanf ("%d", & x);
    getchar ();
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        gets (string [i]);
    }
    for (i = 0, j = 0; i < x; ++i) {
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            strcpy (destination [i] [j ++], code);
        }
        m[i] = j;
    }
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        for (j = 0; j < m[i]; j++) {
            for (c = 0; c < 37; c++) {
                if (strcmp (destination[i][j], input[c]) == 0) {
                    printf ("%s", output [c]);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28059061_7_29
28045172_41302920_10_33
Title: Morse Code Converter in C 
----------------------------------------

int main () {
    char string [MAX] [SIZE] = {".... . .-.. .-.. --- / .-- --- .-. .-.. -..", ".--- --- -.- ."};
    char destination [MAX] [8];
    int x = 2;
    int i, j, m;
    char *code, *separator = " ";
    for (i = 0; i < x; ++i) {
        j = 0;
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            printf ("'%s'\n", code);
            strcpy (destination [j ++], code);
        }
        m = j;
        if (strcmp (destination[0], "....") == 0)
            puts ("yes, It's 'H'.");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char input [] = ".- -... -.-.";
    morse_table_t table [] = {{".-", "A"}, {"-...", "B"}, {"-.-.", "C"}};
    char *segment;
    int i;
    segment = strtok (input, " ");
    while (segment) {
        for (i = 0; i < ARRAY_SIZE (table); ++i) {
            if (!strcmp (segment, table[i].morse))
                puts (table[i].ascii);
        }
        segment = strtok (NULL, " ");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28045172_28082333_6_48
28045172_41302920_10_33
Title: Morse Code Converter in C 
----------------------------------------

int main () {
    char string [MAX] [SIZE];
    char destination [MAX] [MAX] [8];
    char *input [38] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", "-----", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "/"};
    char *output [38] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " "};
    char *code, *separator = " ";
    int i, c, x, j;
    int m [MAX];
    printf ("Enter the number of Cases:");
    scanf ("%d", & x);
    getchar ();
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        gets (string [i]);
    }
    for (i = 0, j = 0; i < x; ++i) {
        for (code = strtok (string[i], separator); code != NULL; code = strtok (NULL, separator)) {
            strcpy (destination [i] [j ++], code);
        }
        m[i] = j;
    }
    for (i = 0; i < x; i++) {
        printf ("Case#%d: ", i + 1);
        for (j = 0; j < m[i]; j++) {
            for (c = 0; c < 37; c++) {
                if (strcmp (destination[i][j], input[c]) == 0) {
                    printf ("%s", output [c]);
                }
            }
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char input [] = ".- -... -.-.";
    morse_table_t table [] = {{".-", "A"}, {"-...", "B"}, {"-.-.", "C"}};
    char *segment;
    int i;
    segment = strtok (input, " ");
    while (segment) {
        for (i = 0; i < ARRAY_SIZE (table); ++i) {
            if (!strcmp (segment, table[i].morse))
                puts (table[i].ascii);
        }
        segment = strtok (NULL, " ");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28049794_28050390_6_16
28049794_28052961_6_24
Title: How to print an int as a binary in C? 
----------------------------------------

const char *byte_to_binary (mytype x) {
    static char b [8 * sizeof (mytype) + 1];
    mytype z = 1 << (8 * sizeof (mytype) - 1);
    b[0] = 0;
    while (z) {
        strcat (b, (x & z) ? "1" : "0");
        z >>= 1;
    }
    return b;
}
----------------------------------------

char *byte_to_binary (unsigned long int x) {
    int bitcount = 0;
    for (unsigned long z = MOST_SIGNIF_UL; z > 0; z >>= 1)
        bitcount++;
    char *b = malloc (bitcount +1);
    for (unsigned long int k = 0, z = MOST_SIGNIF_UL; z > 0; k++, z >>= 1) {
        b[k] = (x & z) ? '1' : '0';
    }
    b[bitcount] = '\0';
    return b;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28049867_28050086_18_31
28049867_28050473_34_65
Title: "C show (print) in main function  while values returned in custom one" 
----------------------------------------

int toti_factori (int x, int y) {
    static int i = 1;
    int t = 0;
    for (int a = 0; i <= y; i++) {
        if (y % i == 0) {
            if (i >= x) {
                return i;
            }
        }
    }
}
----------------------------------------

Factors toti_factori (int m, int n) {
    int count = 0;
    int index = 0;
    Factors factors;
    int i = 0;
    for (i = m; i <= n; ++i) {
        if (n % i == 0) {
            ++count;
        }
    }
    factors.size = count;
    factors.data = malloc (count * sizeof (*factors.data));
    for (i = m; i <= n; ++i) {
        if (n % i == 0) {
            factors.data[index] = i;
            ++index;
        }
    }
    return factors;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28065742_28065937_4_25
28065742_28066122_6_22
Title: C: Dynamic memory allocation using pointer to array with fixed number of chars 
----------------------------------------

int main () {
    int channels = 3, width = 10, height = 10;
    char test [width] [height] [channels];
    char *ptr = (char *) test;
    for (int i = 0; i < channels * width * height; i++) {
        ptr[i] = (char) (i % 255);
    }
    for (int x = 0; x < width; x++) {
        for (int y = 0; y < height; y++) {
            for (int c = 0; c < channels; c++) {
                int d = (int) test[x][y][c];
                printf ("%d %d - %d : %d\n", x, y, c, d);
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    unsigned char (*pixel) [3];
    pixel = malloc (sizeof (*pixel) * N);
    pixel[0][0] = 0;
    pixel[0][1] = 128;
    pixel[0][2] = 255;
    pixel[3][0] = 0;
    pixel[3][1] = 128;
    pixel[3][2] = 255;
    printf ("R:%d G:%d B:%d\n", pixel [0] [0], pixel [0] [1], pixel [0] [2]);
    free (pixel);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28078708_28079100_23_44
28078708_28079263_28_52
Title: Cycling through a C array with global counter 
----------------------------------------

int main (void) {
    while (1) {
        char input [BUFF_MAX];
        fgets (input, sizeof (input), stdin);
        if (input[strlen (input) - 1] == '\n')
            input[strlen (input) - 1] = '\0';
        strcpy (A [M % N], input);
        M++;
        if (!strcmp (input, "hist"))
            displayArray ();
    }
    return 0;
}
----------------------------------------

int main (void) {
    char input [BUFF_MAX];
    while (fgets (input, sizeof (input), stdin) != 0) {
        int len = strlen (input);
        if (input[len - 1] == '\n')
            input[--len] = '\0';
        if (strcmp (input, "hist") == 0)
            displayArray (first_valid, first_avail);
        else {
            strcpy (A [first_avail ++], input);
            M++;
            if (first_avail >= N)
                first_avail = 0;
            if (first_avail == first_valid) {
                if (++first_valid >= N)
                    first_valid = 0;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28081413_28081437_2_25
28081413_28081857_3_22
Title: "C While loop displaying Max and Min and ends with 0 but I don't want 0 to factor in" 
----------------------------------------

main () {
    int L, S, X;
    printf ("\ninput number:");
    scanf ("%d", & X);
    L = X;
    S = X;
    if (X != 0) {
        do {
            printf ("\ninput number:");
            scanf ("%d", & X);
            if (X > L) {
                L = X;
            }
            if (X < S) {
                S = X;
            }
        }
        while (X != 0);
    }
    printf ("\nmax %d, min %d", L, S);
    printf ("\n");
    return 0;
}
----------------------------------------

main () {
    int L = INT_MIN, S = INT_MAX, X;
    printf ("\nInput number:");
    scanf ("%d", & X);
    while (X) {
        if (X > L) {
            L = X;
        }
        if (X < S) {
            S = X;
        }
        printf ("\nInput number:");
        scanf ("%d", & X);
    }
    printf ("\nmax %d, min %d", L, S);
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28083965_28084122_1_16
28083965_28084127_1_17
Title: Adding an element to end of the linked list 
----------------------------------------

void AddToEnd (double data, int x, int y, element **list) {
    element *node, *tmp;
    node = *list;
    if (data != 0) {
        tmp = malloc (sizeof (element));
        tmp->value = data;
        tmp->x_element = x;
        tmp->y_element = y;
        tmp->next = NULL;
        while (node->next != NULL)
            node = node->next;
        node->next = tmp;
    }
}
----------------------------------------

void AddToEnd (double data, int x, int y, element **list) {
    if (data != 0) {
        element *tmp = malloc (sizeof (*tmp));
        tmp->value = data;
        tmp->x_element = x;
        tmp->y_element = y;
        tmp->next = NULL;
        while (*list) {
            list = &(*list)->next;
        }
        *list = tmp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28117439_28117613_12_48
28117439_28117643_50_69
Title: What is the best way to read a string as a command with a whitespace separated argument? 
----------------------------------------

int main () {
    char example_input [80] = "psdwd /home/user/directory/file.ext";
    const char s [2] = "-";
    char *command = strchr (example_input, ' ');
    char *argument = NULL;
    if (command != NULL) {
        *(command) = '\0';
        if (*(command + 1) != '\0')
            argument = command + 1;
    }
    command = example_input;
    if (strcmp (command, "ls") == 0) {
        cmd_ls (argument);
    }
    else if (strcmp (command, "pwd") == 0) {
        cmd_pwd (argument);
    }
    else {
        printf ("Unrecognised command!\n");
    }
    return (0);
}
----------------------------------------

int main () {
    size_t k;
    char string [] = "example string with spaces";
    char **list;
    list = split (string, " ");
    if (list == NULL)
        return -1;
    k = 0;
    while (list[k] != NULL) {
        printf ("%s\n", list [k]);
        free (list [k]);
        k++;
    }
    free (list);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28119553_28120030_1_11
28119553_28120187_3_15
Title: C: Sort vector elements in descending order 
----------------------------------------

int check (int *v, int n) {
    int i;
    for (i = 0; i < n; i++) {
        if (v[i] != -1) {
            return -1;
        }
    }
    return 1;
}
----------------------------------------

int check (int *v, int n) {
    int i;
    for (i = 0; i < n; i++) {
        if (v[i] != -1) {
            return -1;
        }
    }
    return 1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28120293_28120721_6_36
28120293_39494886_30_95
Title: C calculator if else 
----------------------------------------

int main () {
    double num1, num2;
    int oper;
    char inp [ISIZE + 1] = "";
    printf ("\tCalculadora\n\n");
    printf ("Introduza o primeiro numero: ");
    fgets (inp, ISIZE, stdin);
    num1 = atof (inp);
    printf ("Introduza o segundo numero: ");
    fgets (inp, ISIZE, stdin);
    num2 = atof (inp);
    printf ("Escolha a operacao que quer realizar! ");
    fgets (inp, ISIZE, stdin);
    oper = inp[0];
    printf ("O resultado e: %f %c %f = ", num1, oper, num2);
    switch (oper) {
    case '+' :
        printf ("%f\n", num1 +num2);
        break;
    case '-' :
        printf ("%f\n", num1 -num2);
        break;
    case '*' :
        printf ("%f\n", num1 *num2);
        break;
    case '/' :
        if (num2 != 0)
            printf ("%f\n", num1 / num2);
        else
            printf ("Divisão por zero!\n");
        break;
    default :
        printf ("Eu não sei o que operador\n");
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char c;
    char f;
    int n1;
    int n2;
    int total;
    sayHello ();
    do {
        c = ' ';
        printf ("Insert the type of Calculation you want to make:\n");
        printf ("A(d)dition, Subs(t)raction, Mu(l)tiplication, Di(v)ision: ");
        c = getchar ();
        if (c == 'd') {
            printf ("\nInsert the first number:");
            scanf ("%d", & n1);
            printf ("Insert the second number:");
            scanf ("%d", & n2);
            total = add (n1, n2);
            printf ("%d plus %d equals to %d\n", n1, n2, total);
            flush_input ();
        }
        else {
            if (c == 't') {
                printf ("insert the base number:");
                scanf ("%d", & n1);
                printf ("Insert the subtracting number:");
                scanf ("%d", & n2);
                total = minus (n1, n2);
                printf ("The difference between %d and %d is %d\n", n1, n2, total);
                flush_input ();
            }
            else {
                if (c == 'l') {
                    printf ("insert the first number:");
                    scanf ("%d", & n1);
                    printf ("Insert second number:");
                    scanf ("%d", & n2);
                    total = times (n1, n2);
                    printf ("%d times %d equals %d\n", n1, n2, total);
                    flush_input ();
                }
                else {
                    if (c == 'v') {
                        printf ("insert the first number:");
                        scanf ("%d", & n1);
                        printf ("Insert second number:");
                        scanf ("%d", & n2);
                        total = divide (n1, n2);
                        printf ("%d divided by %d equals %d\n", n1, n2, total);
                        flush_input ();
                    }
                    else {
                        printf ("I couln't understand the instruction\n Reseting program\n");
                    }
                }
            }
        }
        f = ' ';
        printf ("\nDo you wish to make another calculation?\n");
        printf ("Choose (y)es or (n)ot: ");
        f = getchar ();
        getchar ();
    }
    while (f != 'n');
    printf ("\nThat's all folks!\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28120293_28120721_6_36
28120293_49370564_9_49
Title: C calculator if else 
----------------------------------------

int main () {
    double num1, num2;
    int oper;
    char inp [ISIZE + 1] = "";
    printf ("\tCalculadora\n\n");
    printf ("Introduza o primeiro numero: ");
    fgets (inp, ISIZE, stdin);
    num1 = atof (inp);
    printf ("Introduza o segundo numero: ");
    fgets (inp, ISIZE, stdin);
    num2 = atof (inp);
    printf ("Escolha a operacao que quer realizar! ");
    fgets (inp, ISIZE, stdin);
    oper = inp[0];
    printf ("O resultado e: %f %c %f = ", num1, oper, num2);
    switch (oper) {
    case '+' :
        printf ("%f\n", num1 +num2);
        break;
    case '-' :
        printf ("%f\n", num1 -num2);
        break;
    case '*' :
        printf ("%f\n", num1 *num2);
        break;
    case '/' :
        if (num2 != 0)
            printf ("%f\n", num1 / num2);
        else
            printf ("Divisão por zero!\n");
        break;
    default :
        printf ("Eu não sei o que operador\n");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    float num1, num2;
    int inum1, inum2;
    char o;
    num1 = 0;
    num2 = 0;
    printf ("Enter 1st number\n");
    scanf ("%f", & num1);
    printf ("operator\n");
    scanf (" %c", & o);
    printf ("Enter 2nd number\n");
    scanf (" %f", & num2);
    inum1 = num1;
    inum2 = num2;
    if (cal (num1, num2, o) == 0) {
        printf ("Math Error");
    }
    if (cal (num1, num2, o) == 1) {
        printf ("%d", inum1 % inum2);
    }
    else
        printf ("%.3f\n", cal (num1, num2, o));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28120293_39494886_30_95
28120293_49370564_9_49
Title: C calculator if else 
----------------------------------------

int main (int argc, char **argv) {
    char c;
    char f;
    int n1;
    int n2;
    int total;
    sayHello ();
    do {
        c = ' ';
        printf ("Insert the type of Calculation you want to make:\n");
        printf ("A(d)dition, Subs(t)raction, Mu(l)tiplication, Di(v)ision: ");
        c = getchar ();
        if (c == 'd') {
            printf ("\nInsert the first number:");
            scanf ("%d", & n1);
            printf ("Insert the second number:");
            scanf ("%d", & n2);
            total = add (n1, n2);
            printf ("%d plus %d equals to %d\n", n1, n2, total);
            flush_input ();
        }
        else {
            if (c == 't') {
                printf ("insert the base number:");
                scanf ("%d", & n1);
                printf ("Insert the subtracting number:");
                scanf ("%d", & n2);
                total = minus (n1, n2);
                printf ("The difference between %d and %d is %d\n", n1, n2, total);
                flush_input ();
            }
            else {
                if (c == 'l') {
                    printf ("insert the first number:");
                    scanf ("%d", & n1);
                    printf ("Insert second number:");
                    scanf ("%d", & n2);
                    total = times (n1, n2);
                    printf ("%d times %d equals %d\n", n1, n2, total);
                    flush_input ();
                }
                else {
                    if (c == 'v') {
                        printf ("insert the first number:");
                        scanf ("%d", & n1);
                        printf ("Insert second number:");
                        scanf ("%d", & n2);
                        total = divide (n1, n2);
                        printf ("%d divided by %d equals %d\n", n1, n2, total);
                        flush_input ();
                    }
                    else {
                        printf ("I couln't understand the instruction\n Reseting program\n");
                    }
                }
            }
        }
        f = ' ';
        printf ("\nDo you wish to make another calculation?\n");
        printf ("Choose (y)es or (n)ot: ");
        f = getchar ();
        getchar ();
    }
    while (f != 'n');
    printf ("\nThat's all folks!\n");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    float num1, num2;
    int inum1, inum2;
    char o;
    num1 = 0;
    num2 = 0;
    printf ("Enter 1st number\n");
    scanf ("%f", & num1);
    printf ("operator\n");
    scanf (" %c", & o);
    printf ("Enter 2nd number\n");
    scanf (" %f", & num2);
    inum1 = num1;
    inum2 = num2;
    if (cal (num1, num2, o) == 0) {
        printf ("Math Error");
    }
    if (cal (num1, num2, o) == 1) {
        printf ("%d", inum1 % inum2);
    }
    else
        printf ("%.3f\n", cal (num1, num2, o));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28132862_28132932_13_39
28132862_28133149_10_28
Title: How do I allocate memory for an array of structs of arbitrary length and point to it? 
----------------------------------------

int main (void) {
    bar mybar;
    bar *mybar_ptr;
    foo *myfoo_array = malloc (10 * sizeof *myfoo_array);
    if (myfoo_array == NULL) {
        puts ("ERROR: Could not allocate memory");
        return 1;
    }
    myfoo_array[5].haz = 1337;
    myfoo_array[5].cheez = 42;
    mybar.p = myfoo_array;
    mybar_ptr = &mybar;
    printf ("haz: %d, cheez: %d\n", mybar.p [5].haz, mybar.p [5].cheez);
    printf ("haz: %d, cheez: %d\n", mybar_ptr -> p [5].haz, mybar_ptr -> p [5].cheez);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int number = 10, ndx;
    pfoo ptr = malloc (number * sizeof (foo));
    for (ndx = 0; ndx < number; ndx++) {
        ptr[ndx].member1 = ndx;
        ptr[ndx].member2 = ndx * ndx;
    }
    for (ndx = 0; ndx < number; ndx++) {
        foo temp = ptr[ndx];
        printf ("%d\t%d\n", temp.member1, temp.member2);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28144844_28145008_3_31
28144844_28145042_3_13
Title: How can I convert a long long into an array in C? 
----------------------------------------

int main () {
    int a = 548763, i = 0;
    char str [20] = "";
    int b = a;
    while (b >= 10) {
        b = b / 10;
        i++;
    }
    str[i + 1] = '\0';
    while (i >= 0) {
        str[i] = a % 10 + 48;
        a = a / 10;
        i--;
    }
    printf ("the value of str is \"%s\"", str);
    return 0;
}
----------------------------------------

int main () {
    int number = 123456789;
    int digit = floor (log10 (number)) + 1;
    printf ("%d\n", digit);
    int arr [digit];
    int i;
    for (i = digit; i > 0; i--) {
        arr[digit - i] = (int) (number / pow (10, i -1)) % 10;
        printf ("%d : %d\n", digit - i, arr [digit - i]);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28150543_28150653_1_10
28150543_28196306_1_14
Title: Proper way to initialize a const member of dynamically allocated struct 
----------------------------------------

struct Foo *new_foo (void) {
    struct Foo *n = malloc (sizeof *n);
    if (n) {
        struct Params *s = (void *) &n->settings;
        s->a = SETTING_A;
        s->b = SETTING_B;
    }
    return n;
}
----------------------------------------

struct Foo *new_foo (void) {
    static struct Params settings = {
        .a = SETTING_A,
        .b = SETTING_B
    };
    struct Foo *n = malloc (sizeof *n);
    memcpy ((struct Params *) & n -> settings, & settings, sizeof settings);
    n -> state =...;
    return n;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28161429_28162439_6_33
28161429_28163253_2_24
Title: C Primer Plus chapter 6 exercise 4 check 
----------------------------------------

int main (void) {
    char ch, *p;
    int row, spaces;
    int r, i;
    printf ("Please, insert an uppercase letter: ");
    scanf ("%c", & ch);
    if ((p = strchr (AtoZ, ch)) == NULL) {
        printf ("invalid input!\n");
        return -1;
    }
    row = p - AtoZ + 1;
    for (r = 0; r < row; r++) {
        spaces = row - r - 1;
        for (i = 0; i < spaces; i++)
            printf ("%c", ' ');
        for (i = 0; i < r; i++)
            printf ("%c", AtoZ[i]);
        for (; i >= 0; i--)
            printf ("%c", AtoZ[i]);
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    char ch;
    char mid;
    char spaces;
    char forth;
    char back;
    printf ("Please, insert an uppercase letter: ");
    scanf ("%c", & ch);
    for (mid = 'A'; mid <= ch; mid++) {
        for (spaces = ch; spaces > mid; spaces--)
            printf (" ");
        for (forth = 'A'; forth < mid; forth++)
            printf ("%c", forth);
        for (back = mid; back >= 'A'; back--)
            printf ("%c", back);
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28182074_28182114_4_25
28182074_28182163_6_27
Title: Why doesn't this program reverse a string? 
----------------------------------------

int main () {
    char normal [100];
    char reversed [100];
    printf ("Give me a word.\n");
    if (scanf ("%99s", normal) != 1)
        return -1;
    int n = strlen (normal);
    for (int i = 0; i < n; i++) {
        reversed[n - i - 1] = normal[i];
    }
    reversed[n] = '\0';
    printf ("%s\n", reversed);
    return 0;
}
----------------------------------------

int main () {
    char normal [SIZE + 1], reversed [SIZE + 1];
    int n = 0, i = 0;
    printf ("Give me a word.\n");
    fgets (normal, SIZE, stdin);
    n = strlen (normal);
    for (i = n - 1; i >= 0; i--)
        reversed[n - i - 1] = normal[i];
    reversed[n] = '\0';
    printf ("%s\n", reversed);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28189289_28189759_31_59
28189289_28196157_29_46
Title: Merge sort in C 
----------------------------------------

void merge (int A [], int p, int q, int r) {
    int n1 = q - p + 1, n2 = r - q;
    int L [n1 + 1], R [n2 + 1], i, j, k;
    L[n1] = INT_MAX;
    R[n2] = INT_MAX;
    for (i = 0; i < n1; i++)
        L[i] = A[p + i];
    for (j = 0; j < n2; j++)
        R[j] = A[q + j + 1];
    i = 0;
    j = 0;
    for (k = p; k <= r; k++) {
        if (L[i] <= R[j]) {
            A[k] = L[i];
            i++;
        }
        else {
            A[k] = R[j];
            j++;
        }
    }
}
----------------------------------------

void merge (int A [], int p, int q, int r) {
    int n1 = q - p, n2 = r - q;
    int i, j, k;
    int *L = _alloca (n1 * sizeof (int));
    int *R = _alloca (n2 * sizeof (int));
    for (i = 0; i < n1; i++)
        L[i] = A[p + i];
    for (j = 0; j < n2; j++)
        R[j] = A[q + j];
    i = 0;
    j = 0;
    for (k = p; k < r; k++)
        if (j >= n2 || i < n1 && L[i] <= R[j])
            A[k] = L[i++];
        else
            A[k] = R[j++];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28189289_28189759_7_18
28189289_28196157_7_16
Title: Merge sort in C 
----------------------------------------

int main () {
    int A [6] = {10, 5, 4, 0, 11, 7}, n, y, z;
    y = 0;
    z = 6;
    part (A, 0, z - 1);
    for (n = 0; n < z; n++)
        printf ("%d\n", A[n]);
    return 0;
}
----------------------------------------

int main () {
    int A [6] = {10, 5, 4, 0, 11, 7}, n, y, z;
    y = 0;
    z = sizeof (A) / sizeof (int);
    part (A, y, z);
    for (n = 0; n < z; n++)
        printf ("%d\n", A[n]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2821663_2821716_1_19
2821663_2823545_1_19
Title: c99 goto past initialization 
----------------------------------------

int func () {
    char *p1 = malloc (...);
    if (p1 == NULL)
        goto err_exit_1;
    char *p2 = malloc (...);
    if (p2 == NULL)
        goto err_exit_2;
    ...err_exit_2 : free (p2);
err_exit_1 :
    free (p1);
    return -1;
}
----------------------------------------

int func () {
    char *p1 = malloc (...);
    if (p1 == NULL)
        goto err_exit_p1;
    char *p2 = malloc (...);
    if (p2 == NULL)
        goto err_exit;
    ...err_exit : free (p2);
err_exit_p1 :
    free (p1);
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2821663_2821716_1_19
2821663_2828181_1_21
Title: c99 goto past initialization 
----------------------------------------

int func () {
    char *p1 = malloc (...);
    if (p1 == NULL)
        goto err_exit_1;
    char *p2 = malloc (...);
    if (p2 == NULL)
        goto err_exit_2;
    ...err_exit_2 : free (p2);
err_exit_1 :
    free (p1);
    return -1;
}
----------------------------------------

int func () {
    char *p1 = NULL;
    char *p2 = NULL;
    p1 = malloc (...)
    if (!p1)
        goto err_exit;
    p2 = malloc (...)
    if (!p2)
        goto err_exit;
    ...err_exit : free (p2);
    free (p1);
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2821663_2823545_1_19
2821663_2828181_1_21
Title: c99 goto past initialization 
----------------------------------------

int func () {
    char *p1 = malloc (...);
    if (p1 == NULL)
        goto err_exit_p1;
    char *p2 = malloc (...);
    if (p2 == NULL)
        goto err_exit;
    ...err_exit : free (p2);
err_exit_p1 :
    free (p1);
    return -1;
}
----------------------------------------

int func () {
    char *p1 = NULL;
    char *p2 = NULL;
    p1 = malloc (...)
    if (!p1)
        goto err_exit;
    p2 = malloc (...)
    if (!p2)
        goto err_exit;
    ...err_exit : free (p2);
    free (p1);
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28219103_28219317_6_22
28219103_28219813_9_28
Title: Search and Replace in file gives access violation 
----------------------------------------

bool SearchAndReplace (const char *destFileName, const char *srcString, const char *newString) {
    FILE *ostream = fopen (destFileName, "r+");
    if (ostream == 0)
        return false;
    int f = 0, n = 0;
    char st [30];
    while (!feof (ostream)) {
        fscanf (ostream, "%s", st);
        if (strcmp (st, srcString) == 0) {
            fprintf (ostream, "%s", newString);
        }
    }
    fclose (ostream);
    return true;
}
----------------------------------------

BOOL SearchAndReplace (const char *destFileName, const char *srcString, const char *newString) {
    FILE *ostream = fopen (destFileName, "r+");
    if (ostream == 0)
        return false;
    int f = 0, n = 0;
    long pos;
    char st [64 * 1024];
    while (!feof (ostream)) {
        pos = ftell (ostream);
        fscanf (ostream, "%s", st);
        char *newline = replace (st, srcString, newString);
        if (newline != NULL) {
            fseek (ostream, pos, 0);
            fprintf (ostream, "%s", newString);
        }
    }
    fclose (ostream);
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28219103_28219317_6_22
28219103_28219857_1_19
Title: Search and Replace in file gives access violation 
----------------------------------------

bool SearchAndReplace (const char *destFileName, const char *srcString, const char *newString) {
    FILE *ostream = fopen (destFileName, "r+");
    if (ostream == 0)
        return false;
    int f = 0, n = 0;
    char st [30];
    while (!feof (ostream)) {
        fscanf (ostream, "%s", st);
        if (strcmp (st, srcString) == 0) {
            fprintf (ostream, "%s", newString);
        }
    }
    fclose (ostream);
    return true;
}
----------------------------------------

BOOL SearchAndReplace (const char *destFileName, const char *srcString, const char *newString) {
    int f = 0;
    int n = 0;
    char st [30];
    FILE *ostream;
    ostream = fopen (destFileName, "r+");
    if (ostream == 0)
        return false;
    while (fscanf (ostream, "%29s", st) == 1) {
        if (strcmp (st, srcString) == 0)
            fprintf (ostream, "%s", newString);
    }
    fclose (ostream);
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28219103_28219813_9_28
28219103_28219857_1_19
Title: Search and Replace in file gives access violation 
----------------------------------------

BOOL SearchAndReplace (const char *destFileName, const char *srcString, const char *newString) {
    FILE *ostream = fopen (destFileName, "r+");
    if (ostream == 0)
        return false;
    int f = 0, n = 0;
    long pos;
    char st [64 * 1024];
    while (!feof (ostream)) {
        pos = ftell (ostream);
        fscanf (ostream, "%s", st);
        char *newline = replace (st, srcString, newString);
        if (newline != NULL) {
            fseek (ostream, pos, 0);
            fprintf (ostream, "%s", newString);
        }
    }
    fclose (ostream);
    return true;
}
----------------------------------------

BOOL SearchAndReplace (const char *destFileName, const char *srcString, const char *newString) {
    int f = 0;
    int n = 0;
    char st [30];
    FILE *ostream;
    ostream = fopen (destFileName, "r+");
    if (ostream == 0)
        return false;
    while (fscanf (ostream, "%29s", st) == 1) {
        if (strcmp (st, srcString) == 0)
            fprintf (ostream, "%s", newString);
    }
    fclose (ostream);
    return true;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28233875_28234628_6_28
28233875_28235326_35_47
Title: C program on part of algorithm which focus on finding Armstrong-like number 
----------------------------------------

int main () {
    char tmp_num [MAX_NUM_LEN] = {0};
    int len, n, d, s = 0, o, i, tmp_len, tmp_o;
    printf ("n=");
    scanf ("%d", & n);
    sprintf (tmp_num, "%d", n);
    len = strlen (tmp_num);
    tmp_len = len;
    d = n;
    while (d != 0) {
        o = d % 10;
        for (tmp_o = 1, i = tmp_len; i > 0; i--)
            tmp_o *= o;
        s = s + tmp_o;
        d = d / 10;
        tmp_len--;
    }
    printf ("sum:%d\n", s);
    printf ("number of digits:%d\n", len);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int value;
    while (TRUE) {
        printf ("Enter value (0 = Quit): ");
        scanf ("%d", & value);
        if (value <= 0)
            return 0;
        calculate (value);
        printf ("\n");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28246775_28247028_13_53
28246775_28247571_3_20
Title: Need to make a function which returns an int based on which char argument has more uppercase letters 
----------------------------------------

int more_caps (char *s1, char *s2) {
    int s1counter;
    int s2counter;
    s1counter = 0;
    s2counter = 0;
    int i;
    for (i = 0; s1[i] != '\0'; i++) {
        int val1;
        val1 = (int) s1[i];
        if (val1 > 65 && val1 <= 90) {
            s1counter += 1;
        }
    }
    for (i = 0; s2[i] != '\0'; i++) {
        int val2;
        val2 = (int) s2[i];
        if (val2 > 65 && val2 <= 90) {
            s2counter += 1;
        }
    }
    if (s1counter > s2counter) {
        printf ("\n");
        return -1;
    }
    if (s1counter < s2counter) {
        printf ("\n");
        return 1;
    }
    else {
        return 0;
    }
}
----------------------------------------

int more_caps (char *s1, char *s2) {
    unsigned up_count1 = 0;
    while (*s1) {
        if (isupper (*s1))
            up_count1++;
        s1++;
    }
    unsigned up_count2 = 0;
    while (*s2) {
        if (isupper (*s2))
            up_count2++;
        s2++;
    }
    return (up_count2 > up_count1) - (up_count2 < up_count1);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28256583_28256675_1_27
28256583_28256709_1_20
Title: if-else code for total price won't compile 
----------------------------------------

int main (void) {
    float baseprice;
    float total;
    int ramchoice;
    baseprice = 1029.48;
    scanf ("%i", & ramchoice);
    if (ramchoice == 1) {
        total = baseprice + 179.99;
    }
    else if (ramchoice == 2) {
        total = baseprice + 94.99;
    }
    else if (ramchoice == 3) {
        total = baseprice + 69.99;
    }
    printf ("total is %f", total);
    return 0;
}
----------------------------------------

int main (void) {
    float baseprice = 1029.48;
    float total;
    int ramchoice;
    printf ("Please enter a ram selection: 1, 2, or 3\n");
    scanf ("%d", & ramchoice);
    switch (ramchoice) {
    case 1 :
        total = baseprice + 179.99;
        break;
    case 2 :
        total = baseprice + 94.99;
        break;
    case 3 :
        total = baseprice + 69.99;
        break;
    default :
        printf ("That was not a valid choice\n");
    }
    printf ("total is %f", total);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28262413_28262672_4_27
28262413_28267739_6_52
Title: How to format the output in C? 
----------------------------------------

void main () {
    int j = 96;
    clrscr ();
    for (int i = 1; i <= 52; i += 2) {
        gotoxy (i, 1);
        printf ("%c", j += 1);
        gotoxy (i, 2);
        printf ("%d ", random (2));
    }
    j = 96;
    for (i = 1; i <= 52; i += 2) {
        gotoxy (i, 3);
        printf ("%c", j += 1);
        gotoxy (i, 4);
        printf ("%d ", random (2));
    }
    getch ();
}
----------------------------------------

int main () {
    const char charIndex [] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    const unsigned int counter = 133;
    const unsigned int hBuffer = 14;
    unsigned int row, j;
    unsigned int arrIndex = 0, yetToPrintcount = counter, htempBuffer;
    unsigned int noOfRows = (counter / hBuffer);
    if (counter % hBuffer == 0)
        noOfRows--;
    srand (time (NULL));
    for (row = 0; row <= noOfRows; ++row) {
        if (yetToPrintcount < hBuffer)
            htempBuffer = yetToPrintcount;
        else
            htempBuffer = hBuffer;
        printf ("index:  ");
        for (j = 0; j < htempBuffer; ++j) {
            if (arrIndex == (sizeof (charIndex) / sizeof (char)) - 1)
                arrIndex = 0;
            printf ("  %c", charIndex [arrIndex ++]);
        }
        printf ("\n");
        printf ("array:  ");
        for (j = 0; j < htempBuffer; ++j)
            printf ("  %d", rand () % 10);
        printf ("\n");
        yetToPrintcount -= hBuffer;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28267790_28268160_1_18
28267790_38777653_2_35
Title: C - Find all amicable numbers between limits 
----------------------------------------

int main () {
    long min = 1;
    long max = 10000;
    for (long a = min; a <= max; a++) {
        long b = sumDivisors (a);
        if (a == b) {
            printf ("perfect number:\t%ld\n", a);
        }
        if ((a < b) && (b <= max) && (sumDivisors (b) == a)) {
            printf ("amicable pair:\t(%ld, %ld)\n", a, b);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int i, j;
    for (i = 1; i <= 2000; i++) {
        int d1 = 1;
        int sum1 = 0;
        while (d1 < i) {
            if (i % d1 == 0) {
                sum1 += d1;
                d1++;
            }
            else
                d1++;
        }
        for (j = i + 1; j <= 2000; j++) {
            int d2 = 1;
            int sum2 = 0;
            while (d2 < j) {
                if (j % d2 == 0) {
                    sum2 += d2;
                    d2++;
                }
                else
                    d2++;
            }
            if (sum1 == j && sum2 == i)
                printf ("(%d , %d) \n", i, j);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28267790_28268160_1_18
28267790_39929533_1_34
Title: C - Find all amicable numbers between limits 
----------------------------------------

int main () {
    long min = 1;
    long max = 10000;
    for (long a = min; a <= max; a++) {
        long b = sumDivisors (a);
        if (a == b) {
            printf ("perfect number:\t%ld\n", a);
        }
        if ((a < b) && (b <= max) && (sumDivisors (b) == a)) {
            printf ("amicable pair:\t(%ld, %ld)\n", a, b);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n, k;
    int i = 1, s1 = 0, s2 = 0;
    for (k = 1; k <= 10000; k++) {
        n = k;
        while (i < n) {
            if (n % i == 0)
                s1 = s1 + i;
            i++;
        }
        i = 1;
        if (s1 == n)
            continue;
        while (i < s1) {
            if (s1 % i == 0)
                s2 = s2 + i;
            i++;
        }
        if (n == s2)
            printf ("%d \n", n);
        s1 = 0;
        s2 = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28267790_38777653_2_35
28267790_39929533_1_34
Title: C - Find all amicable numbers between limits 
----------------------------------------

int main () {
    int i, j;
    for (i = 1; i <= 2000; i++) {
        int d1 = 1;
        int sum1 = 0;
        while (d1 < i) {
            if (i % d1 == 0) {
                sum1 += d1;
                d1++;
            }
            else
                d1++;
        }
        for (j = i + 1; j <= 2000; j++) {
            int d2 = 1;
            int sum2 = 0;
            while (d2 < j) {
                if (j % d2 == 0) {
                    sum2 += d2;
                    d2++;
                }
                else
                    d2++;
            }
            if (sum1 == j && sum2 == i)
                printf ("(%d , %d) \n", i, j);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n, k;
    int i = 1, s1 = 0, s2 = 0;
    for (k = 1; k <= 10000; k++) {
        n = k;
        while (i < n) {
            if (n % i == 0)
                s1 = s1 + i;
            i++;
        }
        i = 1;
        if (s1 == n)
            continue;
        while (i < s1) {
            if (s1 % i == 0)
                s2 = s2 + i;
            i++;
        }
        if (n == s2)
            printf ("%d \n", n);
        s1 = 0;
        s2 = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28271922_28272001_4_59
28271922_28274356_1_13
Title: How do I output the index of the first repeat number in an array of randomly generated integers (C) 
----------------------------------------

int main () {
    int N = 50;
    int M = 100;
    int i;
    int x;
    int y;
    int arr [N];
    int counter [M];
    int count = 1;
    for (int i = 0; i < 100; ++i) {
        counter[i] = 0;
    }
    for (i = 0; i < N; i++) {
        arr[i] = rand () % (M - 1);
        printf ("%d\n", arr [i]);
        counter[arr[i]]++;
    }
    printf ("\n\n\n");
    for (x = 0; x < N; x++) {
        if (counter[arr[x]] > 1) {
            printf ("the first repeat is  at:  ");
            if (youWantTheIndex) {
                printf ("%d\n", x);
            }
            else if (youWantTheElement) {
                printf ("%d\n", arr [x]);
            }
            break;
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int N = 5;
    int arr [5] = {1, 2, 3, 1, 2};
    for (int i = 0; i < N - 1; i++) {
        for (int j = i + 1; j < N; j++) {
            if (arr[j] == arr[i]) {
                printf ("first repeat of arr[%d]=%d is at index %d\n", i, arr [i], j);
                break;
            }
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28314637_28315107_2_34
28314637_28315210_3_36
Title: Output pascal's triangle using for-loops in C 
----------------------------------------

int main (void) {
    int i, j, p, N, x;
    int f1 = 1;
    int f2 = 1;
    int f3 = 1;
    printf ("N:");
    scanf ("%d", & N);
    for (i = 0; i <= N; i++) {
        for (j = 0; j <= i; j++) {
            f1 = f2 = f3 = 1;
            for (x = 1; x <= i; x++) {
                f1 = f1 * x;
            }
            for (x = 1; x <= j; x++) {
                f2 = f2 * x;
            }
            for (x = 1; x <= i - j; x++) {
                f3 = f3 * x;
            }
            p = (f1) / (f2 * f3);
            if (j == i)
                printf ("%d", p);
            else
                printf ("%d,", p);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int N;
    printf ("N: ");
    scanf ("%d", & N);
    printf ("Pascal triangle for N = %d\n", N);
    for (int i = 0; i <= N; i++) {
        for (int j = 0; j <= i; j++) {
            int f1 = 1;
            int f2 = 1;
            int f3 = 1;
            for (int x = 1; x <= i; x++)
                f1 *= x;
            for (int x = 1; x <= j; x++)
                f2 *= x;
            for (int x = 1; x <= i - j; x++)
                f3 *= x;
            int p = (f1) / (f2 * f3);
            if (j == i)
                printf ("%d", p);
            else
                printf ("%d,", p);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28317868_28318381_1_22
28317868_28320240_1_17
Title: Recursively find the second derivative 
----------------------------------------

double derivative (double (*f) (double), double x0, int order) {
    const double delta = 1.0e-6;
    if (order == 1) {
        double x1 = x0 - delta;
        double x2 = x0 + delta;
        double y1 = f (x1);
        double y2 = f (x2);
        return (y2 - y1) / (x2 - x1);
    }
    else if (order == 2) {
        double x1 = x0 - delta;
        double x2 = x0 + delta;
        double y1 = derivative (f, x1, 1);
        double y2 = derivative (f, x2, 1);
        return (y2 - y1) / (x2 - x1);
    }
    else {
        printf ("order too high error \n");
        return 0;
    }
}
----------------------------------------

double derivative (double (*f) (double), double x0, int order) {
    const double delta = 1.0e-6;
    double x1 = x0 - delta;
    double x2 = x0 + delta;
    if (order == 1) {
        double y1 = f (x1);
        double y2 = f (x2);
        return (y2 - y1) / (x2 - x1);
    }
    else {
        double y1 = derivative (f, x1, order -1);
        double y2 = derivative (f, x2, order -1);
        return (y2 - y1) / (x2 - x1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28328974_28329783_7_49
28328974_28330217_7_58
Title: do-while loop is infinite somehow and constantly appending file 
----------------------------------------

int main (int argc, char *argv []) {
    unsigned char sig1 [] = {0xff, 0xd8, 0xff, 0xe0};
    unsigned char sig2 [] = {0xff, 0xd8, 0xff, 0xe1};
    unsigned char buffer [BUFFER];
    int counter = 0;
    unsigned bytes;
    char title [8];
    FILE *card, *img;
    if ((card = fopen ("card.raw", "r")) == NULL) {
        printf ("Invalid input file\n");
        return 1;
    }
    bytes = fread (buffer, 1, BUFFER, card);
    while (bytes) {
        if (memcmp (buffer, sig1, 4) == 0 || memcmp (buffer, sig2, 4 == 0)) {
            sprintf (title, "%03d.jpg", counter);
            if ((img = fopen (title, "w")) == NULL) {
                printf ("Invalid output file\n");
                return 1;
            }
            do {
                fwrite (buffer, 1, bytes, img);
                bytes = fread (buffer, 1, BUFFER, card);
            }
            while (bytes && memcmp (buffer, sig1, 4) != 0 && memcmp (buffer, sig2, 4 != 0));
            fclose (img);
            counter++;
        }
        else
            bytes = fread (buffer, 1, BUFFER, card);
    }
    fclose (card);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    unsigned char begin_pair [2] = {0xff, 0xd8};
    unsigned char end_pair [2] = {0xff, 0xd9};
    unsigned char buffer [BUFFER];
    int counter = 0;
    char title [8] = {0};
    FILE *card = fopen ("card.raw", "r");
    if (card == NULL) {
        printf ("Invalid file\n");
        return 1;
    }
    FILE *img = NULL;
    size_t n = fread (&buffer, 1, BUFFER, card);
    while (n == BUFFER) {
        if (memcmp (buffer, begin_pair, 2) == 0) {
            if (img) {
                printf ("%s not terminated properly\n", title);
                fclose (img);
                img = NULL;
            }
            snprintf (title, 8, "%03d.jpg", counter);
            img = fopen (title, "a");
            counter++;
            fwrite (& buffer, 1, BUFFER, img);
        }
        if (memcmp (buffer, end_pair, 2) == 0 && img) {
            fwrite (& buffer, 1, BUFFER, img);
            fclose (img);
            img = NULL;
        }
    }
    if (img) {
        fwrite (& buffer, 1, n, img);
        printf ("%s not terminated properly\n", title);
        fclose (img);
    }
    fclose (card);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28330269_28330319_2_18
28330269_28330430_2_19
Title: C FOR Condition 
----------------------------------------

int main () {
    int num = 0;
    int sum = 0;
    int input = 0;
    for (num = 0; num < 10; num++) {
        printf ("Input a number: \n");
        scanf ("%d", & input);
        sum += input;
        if (input == 0) {
            printf ("Sum: %d\n", sum);
            break;
        }
    }
    if (num == 10)
        printf ("Sum: %d\n", sum);
    return 0;
}
----------------------------------------

int main () {
    int num = 0;
    int sum = 0;
    for (num = 0; num < 10; num++) {
        int i;
        printf ("Input a number: \n");
        scanf ("%d", & i);
        sum = sum + i;
        if (i == 0) {
            printf ("Sum: %d\n", sum);
            getchar ();
            return 0;
        }
    }
    printf ("Sum: %d\n", sum);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28330269_28330319_2_18
28330269_28330438_2_17
Title: C FOR Condition 
----------------------------------------

int main () {
    int num = 0;
    int sum = 0;
    int input = 0;
    for (num = 0; num < 10; num++) {
        printf ("Input a number: \n");
        scanf ("%d", & input);
        sum += input;
        if (input == 0) {
            printf ("Sum: %d\n", sum);
            break;
        }
    }
    if (num == 10)
        printf ("Sum: %d\n", sum);
    return 0;
}
----------------------------------------

int main () {
    int sum = 0;
    int i;
    int num;
    for (i = 0; i < 10; i++) {
        printf ("Input a number: \n");
        scanf ("%d", & num);
        sum += num;
        if (num == 0) {
            break;
        }
    }
    printf ("Sum: %d\n", sum);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28330269_28330430_2_19
28330269_28330438_2_17
Title: C FOR Condition 
----------------------------------------

int main () {
    int num = 0;
    int sum = 0;
    for (num = 0; num < 10; num++) {
        int i;
        printf ("Input a number: \n");
        scanf ("%d", & i);
        sum = sum + i;
        if (i == 0) {
            printf ("Sum: %d\n", sum);
            getchar ();
            return 0;
        }
    }
    printf ("Sum: %d\n", sum);
    getchar ();
    return 0;
}
----------------------------------------

int main () {
    int sum = 0;
    int i;
    int num;
    for (i = 0; i < 10; i++) {
        printf ("Input a number: \n");
        scanf ("%d", & num);
        sum += num;
        if (num == 0) {
            break;
        }
    }
    printf ("Sum: %d\n", sum);
    getchar ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28358944_28359033_3_26
28358944_28359359_5_43
Title: How do I change an array of characters into an array of integers? 
----------------------------------------

int main (void) {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [256] = {0};
    int cnt = 0;
    int tmp = 0;
    char *str = strtok (tempList, " ");
    while (str != NULL) {
        if (sscanf (str, "%d", &tmp)) {
            tempListNum[cnt] = tmp;
            cnt++;
        }
        str = strtok (NULL, " ");
    }
    for (tmp = 0; tmp < cnt; tmp++) {
        printf ("%d ", tempListNum [tmp]);
    }
    return 0;
}
----------------------------------------

int main () {
    char tempList [256] = "1 -2 -82 43 5";
    char tempNumber [10];
    int tempNumberCounter = 0;
    int i, j, counter = 0, isNegative = 1;
    int numTempList [256] = {0};
    for (i = 0; tempList[i] != '\0'; i++) {
        if (tempList[i - 1] == '-') {
            isNegative = -1;
        }
        if (isdigit (tempList[i])) {
            tempNumber[tempNumberCounter] = tempList[i];
            tempNumberCounter++;
        }
        if (tempList[i] == ' ' || tempList[i + 1] == '\0') {
            tempNumber[tempNumberCounter] = '\0';
            for (j = 0; j < strlen (tempNumber); j++) {
                numTempList[counter] += (tempNumber[j] - '0') * pow (10, strlen (tempNumber) -j - 1);
            }
            numTempList[counter] *= isNegative;
            counter++;
            tempNumberCounter = 0;
            *tempNumber = 0;
            isNegative = 1;
        }
    }
    for (i = 0; numTempList[i] != 0; i++) {
        printf ("%d ", numTempList [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28358944_28359033_3_26
28358944_28360033_29_66
Title: How do I change an array of characters into an array of integers? 
----------------------------------------

int main (void) {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [256] = {0};
    int cnt = 0;
    int tmp = 0;
    char *str = strtok (tempList, " ");
    while (str != NULL) {
        if (sscanf (str, "%d", &tmp)) {
            tempListNum[cnt] = tmp;
            cnt++;
        }
        str = strtok (NULL, " ");
    }
    for (tmp = 0; tmp < cnt; tmp++) {
        printf ("%d ", tempListNum [tmp]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [128] = {0};
    int i, n;
    char *listPtr;
    char *listPtr2;
    listPtr = strtok (tempList, " ");
    for (i = 0; listPtr != NULL && (size_t) i < sizeof tempListNum / sizeof tempListNum[0]; ++i) {
        errno = 0;
        n = strtoi (listPtr, &listPtr2, 10);
        if (*listPtr2) {
            fprintf (stderr, "error: value `%s' is not an integer ... ignoring value\n", listPtr);
            --i;
        }
        else if (errno) {
            perror (listPtr);
        }
        listPtr = strtok (NULL, " ");
    }
    n = i;
    for (i = 0; i < n; ++i)
        printf ("%d\n", tempListNum[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28358944_28359033_3_26
28358944_28361045_4_21
Title: How do I change an array of characters into an array of integers? 
----------------------------------------

int main (void) {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [256] = {0};
    int cnt = 0;
    int tmp = 0;
    char *str = strtok (tempList, " ");
    while (str != NULL) {
        if (sscanf (str, "%d", &tmp)) {
            tempListNum[cnt] = tmp;
            cnt++;
        }
        str = strtok (NULL, " ");
    }
    for (tmp = 0; tmp < cnt; tmp++) {
        printf ("%d ", tempListNum [tmp]);
    }
    return 0;
}
----------------------------------------

int main () {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [256] = {0};
    int numCnt = 0;
    char *pEnd = tempList;
    int number = 0;
    while (strlen (pEnd) > 0) {
        tempListNum[numCnt] = strtol (pEnd, &pEnd, 0);
        numCnt++;
    }
    for (number = 0; number < numCnt; number++) {
        printf ("%d ", tempListNum [number]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28358944_28359359_5_43
28358944_28360033_29_66
Title: How do I change an array of characters into an array of integers? 
----------------------------------------

int main () {
    char tempList [256] = "1 -2 -82 43 5";
    char tempNumber [10];
    int tempNumberCounter = 0;
    int i, j, counter = 0, isNegative = 1;
    int numTempList [256] = {0};
    for (i = 0; tempList[i] != '\0'; i++) {
        if (tempList[i - 1] == '-') {
            isNegative = -1;
        }
        if (isdigit (tempList[i])) {
            tempNumber[tempNumberCounter] = tempList[i];
            tempNumberCounter++;
        }
        if (tempList[i] == ' ' || tempList[i + 1] == '\0') {
            tempNumber[tempNumberCounter] = '\0';
            for (j = 0; j < strlen (tempNumber); j++) {
                numTempList[counter] += (tempNumber[j] - '0') * pow (10, strlen (tempNumber) -j - 1);
            }
            numTempList[counter] *= isNegative;
            counter++;
            tempNumberCounter = 0;
            *tempNumber = 0;
            isNegative = 1;
        }
    }
    for (i = 0; numTempList[i] != 0; i++) {
        printf ("%d ", numTempList [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [128] = {0};
    int i, n;
    char *listPtr;
    char *listPtr2;
    listPtr = strtok (tempList, " ");
    for (i = 0; listPtr != NULL && (size_t) i < sizeof tempListNum / sizeof tempListNum[0]; ++i) {
        errno = 0;
        n = strtoi (listPtr, &listPtr2, 10);
        if (*listPtr2) {
            fprintf (stderr, "error: value `%s' is not an integer ... ignoring value\n", listPtr);
            --i;
        }
        else if (errno) {
            perror (listPtr);
        }
        listPtr = strtok (NULL, " ");
    }
    n = i;
    for (i = 0; i < n; ++i)
        printf ("%d\n", tempListNum[i]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28358944_28359359_5_43
28358944_28361045_4_21
Title: How do I change an array of characters into an array of integers? 
----------------------------------------

int main () {
    char tempList [256] = "1 -2 -82 43 5";
    char tempNumber [10];
    int tempNumberCounter = 0;
    int i, j, counter = 0, isNegative = 1;
    int numTempList [256] = {0};
    for (i = 0; tempList[i] != '\0'; i++) {
        if (tempList[i - 1] == '-') {
            isNegative = -1;
        }
        if (isdigit (tempList[i])) {
            tempNumber[tempNumberCounter] = tempList[i];
            tempNumberCounter++;
        }
        if (tempList[i] == ' ' || tempList[i + 1] == '\0') {
            tempNumber[tempNumberCounter] = '\0';
            for (j = 0; j < strlen (tempNumber); j++) {
                numTempList[counter] += (tempNumber[j] - '0') * pow (10, strlen (tempNumber) -j - 1);
            }
            numTempList[counter] *= isNegative;
            counter++;
            tempNumberCounter = 0;
            *tempNumber = 0;
            isNegative = 1;
        }
    }
    for (i = 0; numTempList[i] != 0; i++) {
        printf ("%d ", numTempList [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [256] = {0};
    int numCnt = 0;
    char *pEnd = tempList;
    int number = 0;
    while (strlen (pEnd) > 0) {
        tempListNum[numCnt] = strtol (pEnd, &pEnd, 0);
        numCnt++;
    }
    for (number = 0; number < numCnt; number++) {
        printf ("%d ", tempListNum [number]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28358944_28360033_29_66
28358944_28361045_4_21
Title: How do I change an array of characters into an array of integers? 
----------------------------------------

int main (void) {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [128] = {0};
    int i, n;
    char *listPtr;
    char *listPtr2;
    listPtr = strtok (tempList, " ");
    for (i = 0; listPtr != NULL && (size_t) i < sizeof tempListNum / sizeof tempListNum[0]; ++i) {
        errno = 0;
        n = strtoi (listPtr, &listPtr2, 10);
        if (*listPtr2) {
            fprintf (stderr, "error: value `%s' is not an integer ... ignoring value\n", listPtr);
            --i;
        }
        else if (errno) {
            perror (listPtr);
        }
        listPtr = strtok (NULL, " ");
    }
    n = i;
    for (i = 0; i < n; ++i)
        printf ("%d\n", tempListNum[i]);
}
----------------------------------------

int main () {
    char tempList [256] = "1 -2 -8 4 5";
    int tempListNum [256] = {0};
    int numCnt = 0;
    char *pEnd = tempList;
    int number = 0;
    while (strlen (pEnd) > 0) {
        tempListNum[numCnt] = strtol (pEnd, &pEnd, 0);
        numCnt++;
    }
    for (number = 0; number < numCnt; number++) {
        printf ("%d ", tempListNum [number]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
2838038_2838060_1_11
2838038_2839190_1_12
Title: C Programming: malloc() inside another function 
----------------------------------------

int main () {
    unsigned char *input_image;
    unsigned int bmp_image_size = 262144;
    if (alloc_pixels (&input_image, bmp_image_size) == NO_ERROR)
        printf ("\nPoint2: Memory allocated: %d bytes", _msize (input_image));
    else
        printf ("\nPoint3: Memory not allocated");
    return 0;
}
----------------------------------------

int main () {
    unsigned char *input_image;
    unsigned int bmp_image_size = 262144;
    if ((input_image = alloc_pixels (bmp_image_size)) == NULL)
        printf ("\nPoint3: Memory not allocated");
    else
        printf ("\nPoint2: Memory allocated: %d bytes", _msize (input_image));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28387896_28389293_28_42
28387896_28430247_25_38
Title: read char from txt file is wrong 
----------------------------------------

int main (void) {
    int name;
    bool eof = false;
    if ((file = fopen ("messages.txt", "r")) == NULL) {
        puts ("WRONG FILE\n");
        return 1;
    }
    while (!feof (file)) {
        name = asc ('\n', &eof);
        printf ("Var main: %d\n", name);
    }
    fclose (file);
    return 0;
}
----------------------------------------

int main (void) {
    char name [20];
    if ((file = fopen ("messages.txt", "r")) == NULL) {
        puts ("WRONG FILE\n");
        return 1;
    }
    while (gasc (sizeof (name), name, '\n') != NULL) {
        printf ("'%s'\n", name);
    }
    fclose (file);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28390084_28390100_1_12
28390084_28393218_5_32
Title: Storing scanf values into a 2d string array 
----------------------------------------

int main () {
    char str [255];
    char i [255];
    int n = 1;
    while (n == 1) {
        n = scanf ("%m[^':']:%m[^':']:", str, i);
    }
    printf ("# inputs read: %d\n", n);
    printf ("%s\n", str);
    printf ("%s\n", i);
}
----------------------------------------

int main () {
    char *str [10];
    char *i [10];
    int each = 0;
    int loop = 0;
    int n = 0;
    while ((n = scanf ("%m[^:]:%m[^:]:", &str[each], &i[each])) == 2) {
        printf ("# inputs read: %d\n", n);
        printf ("%s\n", str [each]);
        printf ("%s\n", i [each]);
        each++;
        if (each > 9) {
            break;
        }
    }
    for (loop = 0; loop < each; loop++) {
        printf ("str[%d]=%s\n", loop, str [loop]);
    }
    for (loop = 0; loop < each; loop++) {
        printf ("i[%d]=%s\n", loop, i [loop]);
    }
    for (loop = 0; loop < each; loop++) {
        free (str [loop]);
        free (i [loop]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
28392047_28392133_1_14
28392047_28392195_1_13
Title: How to create a similar char pointer like char *argv 
----------------------------------------

int main () {
    char *ptr_array [5];
    char str [20];
    int i = 0;
    for (i = 0; i < 5; i++) {
        ptr_array[i] = malloc (20);
        scanf ("%s", str);
        strcpy (ptr_array [i], str);
    }
    printf ("%s\n", ptr_array [1]);
    return 0;
}
----------------------------------------

int main (void) {
    char array [20] [20] = {{0}};
    strcpy (array [0], "hello");
    strcpy (array [1], "world");
    char *ptr_array [20];
    for (int i = 0; i < 20; i++)
        ptr_array[i] = array[i];
    printf ("%s\n", ptr_array [0]);
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17229707_34959665_3_20
17229707_37210539_1_16
Title: How to generate Fibonacci series in C 
----------------------------------------

void main () {
    int f1 = 0, f2 = 1, f, n, i;
    printf ("enter the no of terms");
    scanf ("%d", & n);
    printf ("the fibbonacci series:\n");
    printf ("%d\n%d", f1, f2);
    for (i = 2; i < n; i++) {
        f = f1 + f2;
        f1 = f2;
        f2 = f;
        printf ("%d\n", f);
    }
}
----------------------------------------

void main () {
    int a, b, c;
    a = 0;
    b = 1;
    c = a + b;
    printf (" %d ", a);
    printf (" %d ", b);
    while (c <= 100) {
        printf (" %d ", c);
        a = b;
        b = c;
        c = a + b;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17250932_17252934_4_22
17250932_23680182_10_27
Title: How to get the time elapsed in C in milliseconds? (Windows) 
----------------------------------------

int main () {
    struct timeb start, end;
    int diff;
    int i = 0;
    ftime (& start);
    while (i++ < 999) {
        printf (".");
    }
    ftime (& end);
    diff = (int) (1000.0 * (end.time - start.time) + (end.millitm - start.millitm));
    printf ("\nOperation took %u milliseconds\n", diff);
    return 0;
}
----------------------------------------

int main (void) {
    clock_t t1, t2;
    int i;
    float x = 2.7182;
    long elapsed;
    t1 = clock ();
    for (i = 0; i < 1000000; i++) {
        x = x * 3.1415;
    }
    t2 = clock ();
    elapsed = timediff (t1, t2);
    printf ("elapsed: %ld ms\n", elapsed);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1725124_1725169_6_26
1725124_1725183_31_48
Title: Accented/umlauted characters in C? 
----------------------------------------

int main (int argc, char **argv) {
    wint_t letter = L '\0';
    setlocale (LC_ALL, "");
    while (1) {
        if (!letter)
            printf ("Type a letter to get its position: ");
        letter = fgetwc (stdin);
        if (letter == WEOF) {
            putchar ('\n');
            return 0;
        }
        else if (letter == L'\n' || letter == L'\r') {
            letter = L'\0';
        }
        else {
            printf ("%d\n", letter);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    while (1) {
        printf ("Type a letter to get its position: ");
        int val = letter_nr ();
        if (-1 != val)
            printf ("Morse code is %d.\n", val);
        else
            printf ("Unknown Morse code.\n");
        unsigned char new_line;
        scanf ("%c", & new_line);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17263395_17263650_3_15
17263395_17264310_37_54
Title: ASCII string to hexadecimal integers conversion 
----------------------------------------

int main () {
    char s [] = "Hello World";
    char *p;
    for (p = s; p != s + sizeof (s); p++) {
        printf ("%02X", (unsigned char) (* p));
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    char str [] = "this is 16 bytes";
    uint8_t *array = NULL;
    ssize_t size = stringToByteArray (str, &array);
    if (-1 == size) {
        perror ("stringToByteArray() failed");
        return EXIT_FAILURE;
    }
    free (array);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17265887_17265900_3_16
17265887_17266062_20_33
Title: Checking For user input between certain limit if not asking again until correct input is entered 
----------------------------------------

int main (void) {
    int x;
    int y;
    printf ("Enter the width of the windows. (3 - 5) : ");
    scanf ("%d", & x);
    x = limitChecker (3, 5, x);
    printf ("width: %d \n", x);
    printf ("Enter the height of the windows. (2 - 4) : ");
    scanf ("%d", & y);
    y = limitChecker (2, 4, y);
    printf ("Height: %d \n", y);
}
----------------------------------------

int main (void) {
    int x, y;
    do {
        printf ("Enter the width of the windows. (3 - 5) : ");
        x = inputInt ();
    }
    while (!limitChecker (3, 5, x));
    printf ("width: %d \n", x);
    do {
        printf ("Enter the height of the windows. (2 - 4) : ");
        y = inputInt ();
    }
    while (!limitChecker (2, 4, y));
    printf ("Height: %d \n", y);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17265887_17265920_3_16
17265887_17266062_20_33
Title: Checking For user input between certain limit if not asking again until correct input is entered 
----------------------------------------

int main (void) {
    int x;
    int y;
    printf ("Enter the width of the windows. (3 - 5) : ");
    scanf ("%d", & x);
    limitChecker (3, 5, & x);
    printf ("width: %d \n", x);
    printf ("Enter the height of the windows. (2 - 4) : ");
    scanf ("%d", & y);
    limitChecker (2, 4, & y);
    printf ("Height: %d \n", y);
}
----------------------------------------

int main (void) {
    int x, y;
    do {
        printf ("Enter the width of the windows. (3 - 5) : ");
        x = inputInt ();
    }
    while (!limitChecker (3, 5, x));
    printf ("width: %d \n", x);
    do {
        printf ("Enter the height of the windows. (2 - 4) : ");
        y = inputInt ();
    }
    while (!limitChecker (2, 4, y));
    printf ("Height: %d \n", y);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17292545_17292578_4_26
17292545_17293630_6_20
Title: how to check if the input is a number or not in C? 
----------------------------------------

int main (int argc, char *argv []) {
    int i;
    long val;
    char *next;
    for (i = 1; i < argc; i++) {
        val = strtol (argv[i], &next, 10);
        if ((next == argv[i]) || (*next != '\0')) {
            printf ("'%s' is not valid\n", argv [i]);
        }
        else {
            printf ("'%s' gives %ld\n", argv [i], val);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char input [MAXINPUT] = "";
    int length, i;
    scanf ("%s", input);
    length = strlen (input);
    for (i = 0; i < length; i++)
        if (!isdigit (input[i])) {
            printf ("Entered input is not a number\n");
            exit (1);
        }
    printf ("Given input is a number\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17301124_17301438_2_19
17301124_17301569_3_24
Title: C programming to increase the size of a string 
----------------------------------------

int main (void) {
    int n = 0;
    char *name = null;
    scanf ("%d", & n);
    for (int i = 0; i < n; i++) {
        char *buffer = null;
        buffer = (char *) realloc (name, (i + 1) * 4);
        name = buffer;
        printf ("%d \n", (sizeof (& name)));
    }
    free (name);
    return 0;
}
----------------------------------------

int main (void) {
    int n = 0;
    char *name = "hello";
    scanf ("%d", & n);
    for (int i = 0; i < n; i++) {
        name += sizeof (int);
        printf ("%d \n", (sizeof (& name)));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17312336_17312382_1_14
17312336_17312432_1_20
Title: warning: function returns address of local variable [enabled by default] 
----------------------------------------

char *chktype (const char *buffer, int size) {
    char *strng = "Content-Type: ";
    char *found = strstr (buffer, strng);
    char *found1 = strstr (found, "\r\n");
    size_t sz = strlen (found) - strlen (found1);
    char *type = calloc (sz, sizeof (*type));
    if (type) {
        strncpy (type, found1, sz - 1);
    }
    return type;
}
----------------------------------------

char *chktype (char *Buffer, int Size) {
    const char *strng = "Content-Type: ";
    int sz;
    char *found = strstr (Buffer, strng);
    char *found1 = strstr (found, "\r\n");
    sz = strlen (found) - strlen (found1);
    char type [sz];
    strncpy (type, found1, sz - 1);
    return (type);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17360456_17360740_4_19
17360456_17360745_4_21
Title: Why does not argv work? 
----------------------------------------

int main (int argc, char *argv []) {
    if ((argc > 1) && ((strcmp (argv[1], "a") == 0))) {
        printf ("hello world, argc: %d\n", argc);
    }
    else if ((argc > 1) && (strcmp (argv[1], "2") == 0)) {
        printf ("hello everyone, argc: %d\n", argc);
    }
    for (int i = 0; i < argc; i++)
        printf ("%s\n", argv[i]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (argc > 1) {
    std :
        : string argv1 (argv [1]);
        if (argv1 == "a") {
        std :
            : cout << "hello world, argc: " << argc << std : : endl;
        }
        else if (argv1 == "2") {
        std :
            : cout << "hello everyone, argc: " << argc << std : : endl;
        }
    }
    for (int i = 0; i < argc; i++) {
    std :
        : cout << argv [i] << std : : endl;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17369987_17370068_4_91
17369987_17370075_1_15
Title: Expected } in C code 
----------------------------------------

int main () {
    float number [100];
    int operator = '0';
    int doAgainAnswer = 0;
    int doAgain;
    float finished;
    int error;
    do {
        if (number[1] == 0) {
            printf ("Number 1: ");
            scanf ("%f", & number [1]);
        }
        else if (number[1] != 0) {
            printf ("\n\nNumber 1: %.2f\n", number [1]);
            printf ("Number 2: ");
            scanf ("%f", & number [2]);
            printf ("\nOperator:\n1 Addition\n2 Subract\n3 Multiply\n4 Divide.\nChoice: ");
            scanf ("%d", & operator);
            if (operator == 1) {
                finished = number[1] + number[2];
                printf ("\n\n%.2f \+ %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator == 2) {
                finished = number[1] - number[2];
                printf ("\n\n%.2f \- %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator == 3) {
                finished = number[1] * number[2];
                printf ("\n\n%.2f \* %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator == 4) {
                finished = number[1] / number[2];
                printf ("\n\n%.2f \/ %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator > 4) {
                printf ("\n\nERROR: Invalid operation.\n\n ");
                error = '1';
            }
            if (error != 1) {
                printf ("\nContinue?\n1: Yes\n2: Yes and use answer as starting value.\n3: No\nAnswer: ");
            }
            else if (error == 1) {
                printf ("\nTry again? 1 Yes 3 No: ");
            }
            scanf ("%d", & doAgainAnswer);
            if (doAgainAnswer == 1) {
                doAgain = 1;
            }
            else if (doAgainAnswer == 2) {
                doAgain = 1;
                number[1] = finished;
            }
            else if (doAgainAnswer == 3) {
                doAgain = 0;
                printf ("Goodbye :(");
                exit (0);
            }
            else if (doAgainAnswer > 4) {
                printf ("\n\nERROR INVALID OPERATION.\n\n");
            }
        }
    }
    while (doAgain == 1);
    return 0;
}
----------------------------------------

int main () {
    float number [100];
    int operator = '0';
    int doAgainAnswer = 0;
    int doAgain;
    float finished;
    int error;
    do {if (number [1] == 0) {printf ("Number 1: ");
    scanf ("%f", & number [1]);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17369987_17370075_1_15
17369987_17370384_4_81
Title: Expected } in C code 
----------------------------------------

int main () {
    float number [100];
    int operator = '0';
    int doAgainAnswer = 0;
    int doAgain;
    float finished;
    int error;
    do {if (number [1] == 0) {printf ("Number 1: ");
    scanf ("%f", & number [1]);
}
----------------------------------------

int main () {
    float number [100];
    int operator = '0';
    int doAgainAnswer = 0;
    int doAgain;
    float finished;
    int error;
    do {
        if (number[1] == 0) {
            printf ("Number 1: ");
            scanf ("%f", & number [1]);
        }
        else if (number[1] != 0) {
            printf ("\n\nNumber 1: %.2f\n", number [1]);
            printf ("Number 2: ");
            scanf ("%f", & number [2]);
            printf ("\nOperator:\n1 Addition\n2 Subract\n3 Multiply\n4 Divide.\nChoice: ");
            scanf ("%d", & operator);
            if (operator == 1) {
                finished = number[1] + number[2];
                printf ("\n\n%.2f \+ %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator == 2) {
                finished = number[1] - number[2];
                printf ("\n\n%.2f \- %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator == 3) {
                finished = number[1] * number[2];
                printf ("\n\n%.2f \* %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator == 4) {
                finished = number[1] / number[2];
                printf ("\n\n%.2f \/ %.2f is: %.2f", number [1], number [2], finished);
            }
            if (operator > 4) {
                printf ("\n\nERROR: Invalid operation.\n\n ");
                error = '1';
            }
            if (error != 1) {
                printf ("\nContinue?\n1: Yes\n2: Yes and use answer as starting value.\n3: No\nAnswer: ");
            }
            else if (error == 1) {
                printf ("\nTry again? 1 Yes 3 No: ");
            }
            scanf ("%d", & doAgainAnswer);
            if (doAgainAnswer == 1) {
                doAgain = 1;
            }
            else if (doAgainAnswer == 2) {
                doAgain = 1;
                number[1] = finished;
            }
            else if (doAgainAnswer == 3) {
                doAgain = 0;
                printf ("Goodbye :(");
                exit (0);
            }
            else if (doAgainAnswer > 4) {printf ("\n\nERROR INVALID OPERATION.\n\n");
        }
    }
    while (doAgain == 1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17390074_17390521_6_54
17390074_19402195_4_45
Title: What ways (using stdio) can I print a vertical histogram 
----------------------------------------

int main (void) {
    int c, len, state;
    int nlength [MAX];
    c = len = 0;
    state = IN;
    for (int i = 0; i < MAX; ++i)
        nlength[i] = 0;
    while ((c = getchar ()) != EOF) {
        ++len;
        if (c == ' ' || c == '\n' || c == '\t') {
            --len;
            state = OUT;
        }
        if (state == OUT) {
            if (len != 0 && len <= MAX)
                ++nlength[len - 1];
            len = 0;
            state = IN;
        }
    }
    int max = 0;
    for (int i = 0; i < MAX; ++i) {
        if (max < nlength[i])
            max = nlength[i];
        printf ("%2d ", i + 1);
        for (int a = 0; a < nlength[i]; ++a)
            printf ("*");
        printf ("\n");
    }
    printf ("\n");
    for (int i = max; i > 0; --i) {
        for (int j = 0; j < MAX; ++j)
            if (nlength[j] >= i)
                printf ("%c ", '*');
            else
                printf ("%c ", ' ');
        printf ("\n");
    }
    for (int i = 1; i <= MAX; ++i)
        printf ("%-2d", i);
    return 0;
}
----------------------------------------

int main () {
    int c, i, j, arr [10], height = 0;
    system ("clear");
    for (i = 0; i < 10; i++)
        arr[i] = 0;
    while ((c = getchar ()) != EOF) {
        if (c >= '0' || c <= '9')
            ++arr[c - '0'];
        if (arr[c - '0'] > height) {
            height = arr[c - '0'];
        }
    }
    printf ("\n");
    for (j = height; j > 0; j--) {
        printf ("%2d|", j);
        for (i = 0; i <= 9; i++) {
            if (j == arr[i]) {
                printf (" *|");
                arr[i]--;
            }
            else
                printf ("  |");
        }
        printf ("\n");
    }
    printf ("  |");
    for (i = 0; i <= 9; i++)
        printf (" %d|", i);
    printf ("\n  ------------DIGITS-------------");
    printf ("\n");
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17408532_17409268_22_34
17408532_17410108_1_26
Title: Cycle through stored names and skip blanks 
----------------------------------------

void SetName (int iNewName) {
    while (iName != iNewName) {
        if (byNewName > 0 && byNewName <= nbNames) {
            shortCut (tableName [byNewName - 1], iNewName);
        }
        else {
            iNewName = 1;
        }
    }
}
----------------------------------------

void SetName (int iNewName) {
    static const char *lookup [] = {memory.m_nameA, memory.m_nameB, memory.m_nameC, memory.m_nameD, memory.m_nameE};
    while (iName != iNewName) {
        iNewName = 1;
        if (byNewName < sizeof (lookup) / sizeof (*lookup)) {
            if (*lookup[byNewName] == '\0') {
                new_name++;
            }
            else {
                iName = iNewName;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17409964_17410321_21_30
17409964_17486860_23_33
Title: Reversing a string in C does not output the reversed line 
----------------------------------------

void reverse (char input [], int length) {
    char temp;
    int j = length - 1;
    for (int i = 0; i < j; ++i, --j) {
        temp = input[i];
        input[i] = input[j];
        input[j] = temp;
    }
}
----------------------------------------

void reverse (char input [], int length) {
    char temp;
    int j = length - 1;
    for (int i = 0; i < j; ++i, --j) {
        temp = input[i];
        input[i] = input[j];
        input[j] = temp;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17409964_17410321_7_19
17409964_17486860_8_21
Title: Reversing a string in C does not output the reversed line 
----------------------------------------

int main () {
    char s [MAXLINE];
    char t [MAXLINE];
    int k, len;
    while ((len = getline (s, MAXLINE)) > 0) {
        if (len > 1)
            reverse (s, len);
    }
    printf ("%s", s);
    return 0;
}
----------------------------------------

int main () {
    char s [MAXLINE];
    int len;
    while ((len = geline (s, MAXLINE)) > 1) {
        if (len > 1) {
            reverse (s, len);
            printf ("%s", s);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17450959_17456438_17_29
17450959_20013645_70_84
Title: sum (adding 2 numbers ) without plus operator 
----------------------------------------

int main (int argc, char **argv) {
    unsigned one, two, result;
    if (sscanf (argv[1], "%u", &one) < 1)
        return 0;
    if (sscanf (argv[2], "%u", &two) < 1)
        return 0;
    result = addtwo (one, two);
    fprintf (stdout, "One:=%u Two=%u Result=%u\n", one, two, result);
    return 0;
}
----------------------------------------

int main () {
    int a = 85;
    int b = 71;
    int i = 0;
    while (1) {
        scanf ("%d %d", & a, & b);
        printf ("%d: %d + %d = %d\n", ++ i, a, b, sum (a, b));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17454304_17454680_3_23
17454304_17454730_3_24
Title: Print shell command lines in C with printf() 
----------------------------------------

int main () {
    int x;
    for (x = 1; x < 751; x++) {
        printf ("#!/bin/sh\n");
        printf ("NRNHOME=\"/Applications/NEURON-7.3/nrn\"\n");
        printf ("NEURONHOME=\"${NRNHOME}/share/nrn\"\n");
        printf ("CPU=i386\n");
        printf ("NRNBIN=\"${NRNHOME}/i386/bin/\"\n");
        printf ("PATH=\"${NRNHOME}/i386/bin:${PATH}\"\n");
        printf ("export NRNHOME\n");
        printf ("export NEURONHOME\n");
        printf ("export NRNBIN\n");
        printf ("export PATH\n");
        printf ("export CPU\n");
        printf ("nrncarbon=yes\n");
        printf ("export nrncarbon\n");
        printf ("cd \"${NRNHOME}/i386/bin\"\n");
        printf ("./nrngui.sh \"/Applications/NSD2013/s%d.hoc\"\n\n", x);
    }
}
----------------------------------------

int main () {
    int x;
    for (x = 1; x < 751; x++) {
        printf ("#!/bin/sh\n");
        printf ("NRNHOME=\"/Applications/NEURON-7.3/nrn\"\n");
        printf ("NEURONHOME=\"${NRNHOME}/share/nrn\"\n");
        printf ("CPU=i386");
        printf ("NRNBIN=\"${NRNHOME}/i386/bin/\"\n");
        printf ("PATH=\"${NRNHOME}/i386/bin:${PATH}\"\n");
        printf ("export NRNHOME");
        printf ("export NEURONHOME");
        printf ("export NRNBIN");
        printf ("export PATH");
        printf ("export CPU");
        printf ("nrncarbon=yes");
        printf ("export nrncarbon");
        printf ("cd \"${NRNHOME}/i386/bin\"\n");
        printf ("./nrngui.sh \"/Applications/NSD2013/s%d.hoc\"\n\n", x);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1746207_43419019_8_26
1746207_43422049_8_45
Title: How to IPC between PHP clients and a C Daemon Server? 
----------------------------------------

int main () {
    unsigned char *buf = NULL;
    int result;
    int sock = nn_socket (AF_SP, NN_PAIR);
    if (sock < 0)
        puts ("nn_socket failed");
    if (nn_bind (sock, address) < 0)
        puts ("bind failed");
    while ((result = nn_recv (sock, &buf, NN_MSG, 0)) > 0) {
        int i, size = strlen (buf) + 1;
        printf ("RECEIVED \"%s\"\n", buf);
        for (i = 0; buf[i] != 0; i++)
            buf[i] = toupper (buf[i]);
        nn_send (sock, buf, size, 0);
        nn_freemsg (buf);
    }
    nn_shutdown (sock, 0);
    return result;
}
----------------------------------------

int main () {
    struct sockaddr_un server_address = {AF_UNIX, SOCKET_FILE};
    int sock = socket (AF_UNIX, SOCK_DGRAM, 0);
    if (sock <= 0) {
        perror ("socket creation failed");
        return 1;
    }
    unlink (SOCKET_FILE);
    if (bind (sock, (const struct sockaddr *) &server_address, sizeof (server_address)) < 0) {
        perror ("bind failed");
        close (sock);
        return 1;
    }
    while (1) {
        struct sockaddr_un client_address;
        int i, numBytes, len = sizeof (struct sockaddr_un);
        char buf [BUF_SIZE];
        numBytes = recvfrom (sock, buf, BUF_SIZE, 0, (struct sockaddr *) &client_address, &len);
        if (numBytes == -1) {
            puts ("recvfrom failed");
            return 1;
        }
        printf ("Server received %d bytes from %s\n", numBytes, client_address.sun_path);
        for (i = 0; i < numBytes; i++)
            buf[i] = toupper ((unsigned char) buf[i]);
        if (sendto (sock, buf, numBytes, 0, (struct sockaddr *) &client_address, len) != numBytes)
            puts ("sendto failed");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17481419_17481899_1_23
17481419_17563197_7_16
Title: multiple source files with main functions 
----------------------------------------

int main (int argc, char **argv) {
    char *methodToExecute;
    if (argc < 2) {
        printf ("usage: main.exe <sample_name>\n");
        exit (- 1);
    }
    methodToExecute = argv[1];
    if (strcmp (methodToExecute, "sample1") == 0) {
        return sample1 ();
    }
    else if (strcmp (methodToExecute, "sample2") == 0) {
        return sample2 ();
    }
    else {
        printf ("method not found: %s\n", methodToExecute);
        exit (- 1);
    }
}
----------------------------------------

int main (int argc, char **argv) {
    if (argc > 1) {
        if (strstr (argv[1], "sample1"))
            return sample1_main (argc, argv);
        else if (strstr (argv[1], "sample2"))
            return sample2_main (argc, argv);
    }
    printf ("Not sure what I should run.\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17488767_17489021_32_53
17488767_17491833_8_34
Title: do we need to compare each element of a array in C? 
----------------------------------------

int main (int argc, const char *argv []) {
    bool result;
    clock_t begin = clock ();
    for (int i = 0; i < 10000000; i++)
        result = compareWithMemcmp ();
    printf ("memcmp: %f seconds result=%d\n", (double) (clock () - begin) / CLOCKS_PER_SEC, result);
    begin = clock ();
    for (int i = 0; i < 10000000; i++)
        result = compareWithLoop ();
    printf ("loop: %f seconds result=%d\n", (double) (clock () - begin) / CLOCKS_PER_SEC, result);
    begin = clock ();
    for (int i = 0; i < 10000000; i++)
        result = compareWithUnrolledLoop ();
    printf ("unrolled loop: %f seconds result=%d\n", (double) (clock () - begin) / CLOCKS_PER_SEC, result);
}
----------------------------------------

int main (void) {
    __asm__ ("\n movq  %[a] , %%rax"
        "\n cmpq  $1 , %%rax"
        :
        : [a] "m" (isUsed[0])
    ) __asm__
    goto ("jne %l0\n" : : : : NotEqual);
    printf ("\n Array Contains 1 in all elements");
    return 1;
NotEqual :
    printf ("\n Array Not contains 1 in all elements");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17488767_17489021_32_53
17488767_17492307_16_31
Title: do we need to compare each element of a array in C? 
----------------------------------------

int main (int argc, const char *argv []) {
    bool result;
    clock_t begin = clock ();
    for (int i = 0; i < 10000000; i++)
        result = compareWithMemcmp ();
    printf ("memcmp: %f seconds result=%d\n", (double) (clock () - begin) / CLOCKS_PER_SEC, result);
    begin = clock ();
    for (int i = 0; i < 10000000; i++)
        result = compareWithLoop ();
    printf ("loop: %f seconds result=%d\n", (double) (clock () - begin) / CLOCKS_PER_SEC, result);
    begin = clock ();
    for (int i = 0; i < 10000000; i++)
        result = compareWithUnrolledLoop ();
    printf ("unrolled loop: %f seconds result=%d\n", (double) (clock () - begin) / CLOCKS_PER_SEC, result);
}
----------------------------------------

int main () {
    union f4vector a, b, c;
    a.v = (v4int) {1, 1, 1, 2};
    b.v = (v4int) {1, 1, 1, 1};
    c.v = a.v - b.v;
    if (c.value == 0)
        puts ("array contains all 1");
    else
        puts ("array Not contais all 1");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17488767_17491833_8_34
17488767_17492307_16_31
Title: do we need to compare each element of a array in C? 
----------------------------------------

int main (void) {
    __asm__ ("\n movq  %[a] , %%rax"
        "\n cmpq  $1 , %%rax"
        :
        : [a] "m" (isUsed[0])
    ) __asm__
    goto ("jne %l0\n" : : : : NotEqual);
    printf ("\n Array Contains 1 in all elements");
    return 1;
NotEqual :
    printf ("\n Array Not contains 1 in all elements");
    return 0;
}
----------------------------------------

int main () {
    union f4vector a, b, c;
    a.v = (v4int) {1, 1, 1, 2};
    b.v = (v4int) {1, 1, 1, 1};
    c.v = a.v - b.v;
    if (c.value == 0)
        puts ("array contains all 1");
    else
        puts ("array Not contais all 1");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17499671_17499773_17_37
17499671_17499878_5_18
Title: Want to pass a single char pointer from a double pointer 
----------------------------------------

void remove_stopwords (char **query, int query_length, char **stopwords, int stopwords_length) {
    int i, j, found;
    for (i = 0; i < query_length; i++) {
        found = 0;
        for (j = 0; j < stopwords_length; j++) {
            if (strcmp (query[i], stopwords[j]) == 0) {
                found = 1;
                break;
            }
        }
        if (found == 0) {
            printf ("%s ", query [i]);
            strncat (main_array, query [i], strlen (query [i]));
        }
    }
}
----------------------------------------

void remove_stopwords (char *query, char **stopwords) {
    char *final_str = strtok (query, " ");
    while (final_str != NULL) {
        int isStop = 0;
        char **s;
        for (s = stopwords; *s; s++) {
            if (strcmp (final_str, *s) == 0) {
                isStop = 1;
            }
        }
        if (!isStop)
            printf ("%s ", final_str);
        final_str = strtok (NULL, " ");
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17525183_17525875_10_25
17525183_17525936_10_32
Title: Binary Tree segmentation fault 
----------------------------------------

struct tree *insert (struct tree *node, int data) {
    if (node == NULL) {
        node = malloc (sizeof (struct tree));
        node->data = data;
        node->left = node->right = NULL;
    }
    else {
        if (data > node->data) {
            node->right = insert (node->right, data);
        }
        else {
            node->left = insert (node->left, data);
        }
    }
    return node;
}
----------------------------------------

tree *insert (tree **node, int data) {
    if (!(*node)) {
        *node = malloc (sizeof (tree));
        (*node)->data = data;
        (*node)->left = (*node)->right = NULL;
        return *node;
    }
    else {
        if (data > (*node)->data) {
            (*node)->right = insert (&((*node)->right), data);
            return *node;
        }
        else {
            (*node)->left = insert (&((*node)->left), data);
            return *node;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17537757_17685736_120_133
17537757_19891587_1_15
Title: String commands for Arduino sketch kind of working but not really 
----------------------------------------

void serialEvent () {
    while (Serial.available ()) {
        char inChar = (char) Serial.read ();
        inputString += inChar;
        if (inChar == '\n') {
            stringComplete = true;
        }
    }
}
----------------------------------------

void serialEvent () {
    if (stringComplete)
        return;
    while (Serial.available ()) {
        char inChar = (char) Serial.read ();
        inputString += inChar;
        if (inChar == '\n') {
            stringComplete = true;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1754004_1754095_6_40
1754004_22043479_5_32
Title: How to mask password in c? 
----------------------------------------

int main (int argc, char **argv) {
    char passwd [16];
    char *in = passwd;
    struct termios tty_orig;
    char c;
    tcgetattr (STDIN_FILENO, & tty_orig);
    struct termios tty_work = tty_orig;
    puts ("Please input password:");
    tty_work.c_lflag &= ~(ECHO | ICANON);
    tty_work.c_cc[VMIN] = 1;
    tty_work.c_cc[VTIME] = 0;
    tcsetattr (STDIN_FILENO, TCSAFLUSH, & tty_work);
    while (1) {
        if (read (STDIN_FILENO, &c, sizeof c) > 0) {
            if ('\n' == c) {
                break;
            }
            *in++ = c;
            write (STDOUT_FILENO, "*", 1);
        }
    }
    tcsetattr (STDIN_FILENO, TCSAFLUSH, & tty_orig);
    *in = '\0';
    fputc ('\n', stdout);
    return 0;
}
----------------------------------------

int main () {
    char a [100], c;
    int i;
    fflush (stdin);
    for (i = 0; i < 100; i++) {
        fflush (stdin);
        c = getch ();
        a[i] = c;
        if (a[i] == '\b') {
            printf ("\b \b");
            i -= 2;
            continue;
        }
        if (a[i] == ' ' || a[i] == '\r')
            printf (" ");
        else
            printf ("*");
        if (a[i] == '\r')
            break;
    }
    a[i] = '\0';
    printf ("\n%s", a);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17544407_17544615_4_16
17544407_17544808_20_41
Title: How to handle this interrupt-driven state tracking neatly in C? 
----------------------------------------

ISR (USART_RX_vect) {
    uint8_t rcv = UDR0;
    if (btstate < 4) {
        if (rcv == leader[btstate])
            btstate++;
        else {
            btstate = 0;
        }
    }
}
----------------------------------------

ISR (USART_RX_vect) {
    static t_cmp cmp_array [] = {{BTSTATE_ENTERING_CMD_C, BTSTATE_ENTERING_CMD_M, 'C'}, {BTSTATE_ENTERING_CMD_M, BTSTATE_ENTERING_CMD_D, 'M'}, {BTSTATE_ENTERING_CMD_D, BTSTATE_ENTERING_CMD_EOL, 'D'}, {BTSTATE_ENTERING_CMD_EOL, BTSTATE_CMD, '\n'}};
    static int array_size = sizeof (cmp_array) / sizeof (cmp_array[0]);
    uint8_t rcv = UDR0;
    int i;
    for (i = 0; i < array_size; ++i) {
        if (btstate == cmp_array[i].state && rcv == cmp_array[i].c) {
            btstate = cmp_array[i].next_state;
            break;
        }
    }
    if (i == array_size)
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17545772_17545941_15_27
17545772_17546075_15_27
Title: "Why below code's output is ""not found"" instead of ""found""?" 
----------------------------------------

void compare (char *x, char **y) {
    for (i = 0; i < 4; i++) {
        if (strcmp (x, y[i]) == 0) {
            printf ("\n found");
            return;
        }
    }
    printf ("\n not found\n");
}
----------------------------------------

void compare (char *x, char **y) {
    for (i = 0; i < 4; i++) {
        if (*x == *y[i]) {
            printf ("\n found");
            return;
        }
    }
    printf ("\n not found\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17560712_17560837_1_17
17560712_17560947_1_25
Title: Inserting into a Linked List after nth Element 
----------------------------------------

void insertAfter (int d, int where) {
    struct list *marker = head;
    struct list *new;
    int count = 0;
    while (count < where) {
        count++;
        marker = marker->next;
    }
    new = (struct list *) malloc (sizeof (struct list));
    new->next = marker->next;
    marker->next = new;
    new->data = d;
}
----------------------------------------

void insertAfter (int d, int where) {
    struct list *marker = head;
    struct list *new;
    while (marker && marker->data != where)
        marker = marker->next;
    if (!marker) {
        printf ("Element with data %d not found\n", where);
        return;
    }
    struct list *next_node = marker->next;
    new = malloc (sizeof (struct list));
    new->data = d;
    marker->next = new;
    new->next = next_node;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17588053_17588857_18_28
17588053_17591701_1_17
Title: Change C code to run fully (including all sections of if) 
----------------------------------------

int main (int argc, char **argv) {
    switch (argc) {
    case 5 :
        foo1 ();
        break;
    case 10 :
        foo2 ();
        break;
    default :
        foo3 ();
        break;
    }
    return 0;
}
----------------------------------------

int main (void) {
    int x = 5;
    if (x == 5)
        foo1 ();
    else if (x == 10)
        foo2 ();
    else
        foo3 ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17607402_19146471_10_39
17607402_20772612_2_44
Title: K&R Exercise 1-14 
----------------------------------------

main () {
    int i;
    int nchars [NUM_CHAR];
    for (i = 0; i < NUM_CHAR; ++i)
        nchars[i] = 0;
    int input;
    while ((input = getchar ()) != EOF)
        if ((input >= FIRST_CHAR) && (input <= LAST_CHAR))
            ++nchars[input - FIRST_CHAR];
    int z;
    char A = ' ';
    for (z = 0; z < NUM_CHAR; ++z) {
        printf ("%2c", A);
        ++A;
        int counter = 0;
        for (i = 0; i < nchars[z]; i++) {
            if (counter < 70) {
                printf ("*");
                ++counter;
            }
            else {
                printf ("><![CDATA[>>");
                counter = 0;
                break;
            }
        }
        printf ("\n");
    }
}
----------------------------------------

main () {
    int charcount [95], c, i = 0, max = 0;
    for (i = 0; i < 95; ++i) {
        charcount[i] = 0;
    }
    while ((c = getchar ()) != EOF) {
        ++charcount[c - 32];
    }
    for (i = 0; i < 95; ++i) {
        if (max < charcount[i])
            max = charcount[i];
    }
    printf ("\n");
    for (i = max; i >= 0; --i) {
        for (c = 0; c < 95; ++c) {
            if (charcount[c] != 0) {
                if ((charcount[c] - i) < 0) {
                    printf ("  ");
                }
                else if (i == 0)
                    printf ("==");
                else
                    printf (" X");
            }
        }
        printf ("\n");
    }
    for (i = 0; i < 95; ++i) {
        if (charcount[i] != 0) {
            if (i == 0)
                printf ("sp ");
            else
                printf ("%c ", i +32);
        }
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17607402_19146471_10_39
17607402_50873350_2_23
Title: K&R Exercise 1-14 
----------------------------------------

main () {
    int i;
    int nchars [NUM_CHAR];
    for (i = 0; i < NUM_CHAR; ++i)
        nchars[i] = 0;
    int input;
    while ((input = getchar ()) != EOF)
        if ((input >= FIRST_CHAR) && (input <= LAST_CHAR))
            ++nchars[input - FIRST_CHAR];
    int z;
    char A = ' ';
    for (z = 0; z < NUM_CHAR; ++z) {
        printf ("%2c", A);
        ++A;
        int counter = 0;
        for (i = 0; i < nchars[z]; i++) {
            if (counter < 70) {
                printf ("*");
                ++counter;
            }
            else {
                printf ("><![CDATA[>>");
                counter = 0;
                break;
            }
        }
        printf ("\n");
    }
}
----------------------------------------

main () {
    int c, i, n, nc;
    nc = '~' - ' ';
    int ndigit [nc];
    for (i = 0; i < nc; ++i)
        ndigit[i] = 0;
    while ((c = getchar ()) != EOF) {
        ++ndigit[c - ' '];
        if (c == '\n') {
            for (i = 0; i < nc; i++)
                if (ndigit[i] != 0) {
                    printf ("%c: ", i + ' ');
                    for (n = 0; n < ndigit[i]; n++) {
                        printf ("-");
                    }
                    printf ("\n");
                }
            for (i = 0; i < nc; ++i)
                ndigit[i] = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17607402_20772612_2_44
17607402_50873350_2_23
Title: K&R Exercise 1-14 
----------------------------------------

main () {
    int charcount [95], c, i = 0, max = 0;
    for (i = 0; i < 95; ++i) {
        charcount[i] = 0;
    }
    while ((c = getchar ()) != EOF) {
        ++charcount[c - 32];
    }
    for (i = 0; i < 95; ++i) {
        if (max < charcount[i])
            max = charcount[i];
    }
    printf ("\n");
    for (i = max; i >= 0; --i) {
        for (c = 0; c < 95; ++c) {
            if (charcount[c] != 0) {
                if ((charcount[c] - i) < 0) {
                    printf ("  ");
                }
                else if (i == 0)
                    printf ("==");
                else
                    printf (" X");
            }
        }
        printf ("\n");
    }
    for (i = 0; i < 95; ++i) {
        if (charcount[i] != 0) {
            if (i == 0)
                printf ("sp ");
            else
                printf ("%c ", i +32);
        }
    }
    printf ("\n");
}
----------------------------------------

main () {
    int c, i, n, nc;
    nc = '~' - ' ';
    int ndigit [nc];
    for (i = 0; i < nc; ++i)
        ndigit[i] = 0;
    while ((c = getchar ()) != EOF) {
        ++ndigit[c - ' '];
        if (c == '\n') {
            for (i = 0; i < nc; i++)
                if (ndigit[i] != 0) {
                    printf ("%c: ", i + ' ');
                    for (n = 0; n < ndigit[i]; n++) {
                        printf ("-");
                    }
                    printf ("\n");
                }
            for (i = 0; i < nc; ++i)
                ndigit[i] = 0;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17615236_17615536_3_39
17615236_17625946_10_36
Title: C - Sort char string in array to equal char user input 
----------------------------------------

int main (int argc, char *argv []) {
    char *wordInput = argv[1];
    char *newWord = (char *) malloc ((strlen (wordInput) + 1) * (sizeof (char)));
    int i, j, k;
    fprintf (stdout, "Word is %s\n", wordInput);
    for (i = 0; i < strlen (wordInput); i++) {
        newWord[i] = wordInput[i];
        for (j = i - 1; j >= 0; j--) {
            if (newWord[j + 1] < newWord[j]) {
                SWAP (newWord [j + 1], newWord [j]);
            }
            else {
                break;
            }
        }
    }
    newWord[strlen (wordInput)] = '\0';
    fprintf (stdout, "Converting sorted word %s back to %s...\n", newWord, wordInput);
    for (i = 0; i < strlen (wordInput) - 1; i++) {
        for (j = i; j < strlen (newWord); j++) {
            if (newWord[j] == wordInput[i]) {
                if (i != j) {
                    SWAP (newWord [j], newWord [i]);
                    fprintf (stdout, "Swapping %d with %d --> %s\n", i, j, newWord);
                }
                break;
            }
        }
    }
}
----------------------------------------

int main (void) {
    char wordInput [25];
    char newWord [25];
    int i, len;
    char *p;
    strcpy (wordInput, "poop");
    strcpy (newWord, "oopp");
    len = strlen (newWord);
    printf ("newWold:%s\n", newWord);
    for (i = 0; i < len; ++i) {
        if (wordInput[i] == newWord[i])
            continue;
        if (NULL != (p = strchr (&newWord[i + 1], wordInput[i])))
            swap (&newWord[i], p);
        else
            break;
    }
    if (i < len) {
        printf ("can't...orz\n");
    }
    else {
        printf ("Back to original input: %s\n", newWord);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17628472_17628539_5_21
17628472_17628556_3_13
Title: C help in using system function with batch 
----------------------------------------

int main (int argc, char **argv) {
    char buff [120];
    char text [120];
    printf ("Enter your command: ");
    fgets (buff, sizeof (buff), stdin);
    buff[strlen (buff) - 1] = '\0';
    sprintf (text, "echo StrText=\"%s\" > spk.vbs", buff);
    system (text);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char inputBuf [120];
    char cmdBuf [200];
    printf ("Enter your name: ");
    fgets (inputBuf, sizeof (inputBuf) - 1, stdin);
    sprintf (cmdBuf, "echo StrText=\"%s\" > spk.vbs", inputBuf);
    system (cmdBuf);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17634905_17634932_3_13
17634905_17636666_5_17
Title: String concatenation using pointers 
----------------------------------------

int main () {
    char *s1 = "Front";
    char *s2 = "Back";
    char s3 [80];
    s3[0] = '\0';
    strcat (s3, s1);
    strcat (s3, s2);
    puts (s3);
    return 0;
}
----------------------------------------

int main () {
    char string1 [SIZE] = "\0", string2 [SIZE] = "\0";
    printf ("Enter String 1:\n");
    gets (string1);
    printf ("Enter String 2:\n");
    gets (string2);
    concat (string1, string2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17638926_17639037_1_19
17638926_17639067_1_18
Title: I can't inset a node to bin search tree 
----------------------------------------

void insert (treeNode **rt, int idata) {
    if ((*rt) == NULL) {
        treeNode *nNode;
        nNode = createNode ();
        nNode->data = idata;
        *rt = nNode;
        (*rt)->lChild = NULL;
        (*rt)->rChild = NULL;
    }
    else {
        if (idata < (*rt)->data)
            insert (&((*rt)->lChild), idata);
        else
            insert (&((*rt)->rChild), idata);
    }
}
----------------------------------------

void insert (treeNode *rt, int idata) {
    if (idata < rt->data) {
        if (rt->lChild != NULL)
            insert (rt->lChild, idata);
        else {
            rt->lChild = createNode ();
            rt->lChild->data = idata;
        }
    }
    else {
        if (rt->rChild != NULL)
            insert (rt->rChild, idata);
        else {
            rt->rChild = createNode ();
            rt->rChild->data = idata;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17643856_17643893_4_17
17643856_17643914_5_13
Title: How to successfully free() a pointer after malloc() 
----------------------------------------

void main () {
    int *ip, i;
    ip = (int *) malloc (10 * sizeof (int));
    if (ip == NULL) {
        perror ("Memory allocation error");
        return;
    }
    current_p = ip;
    for (i = 0; i < 10; ++i) {
        scanf ("%d", current_p ++);
    }
    free (ip);
}
----------------------------------------

int main () {
    tmp_ip = (int *) malloc (10 * sizeof (int));
    ip = tmp_ip;
    for (i = 0; i < 10; ++i) {
        scanf ("%d", ip ++);
    }
    free (tmp_ip);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17645417_17645498_1_15
17645417_17647153_3_25
Title: Splitting an Array in C 
----------------------------------------

int main (int ac, char **av) {
    char *str;
    int i;
    i = 0;
    str = strdup ("Hello World");
    while (str[i]) {
        if (i == 6)
            str[i] = '\0';
        i++;
    }
    printf ("%s\n", str);
}
----------------------------------------

int main () {
    char str [] = "hello world";
    int i, strt, end, j;
    setbuf (stdout, NULL);
    printf ("enter the start and end points of the range of the array to remove:\n");
    scanf ("%d%d", & strt, & end);
    int len = strlen (str);
    for (i = end; i >= strt; i--) {
        str[i - 1] = str[i];
        for (j = i + 1; j <= len; j++) {
            str[j - 1] = str[j];
        }
        len--;
    }
    printf ("%s", str);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1764710_1764910_1_20
1764710_1765737_13_27
Title: Converting string containing localtime into UTC in C 
----------------------------------------

void main () {
    char *date = "2009/09/01/00";
    struct tm cal = {};
    strptime (date, "%Y/%m/%d/%H", & cal);
    cal.tm_isdst = -1;
    printf ("%20s: %s", "Before mktime", asctime (& cal));
    time_t t = mktime (&cal);
    struct tm localcal = *localtime (&t);
    printf ("%20s: %s", "Local time", asctime (& localcal));
    printf ("%20s: %i\n", "Local DST", localcal.tm_isdst);
    struct tm gmcal = *gmtime (&t);
    printf ("%20s: %s", "GM time", asctime (& gmcal));
    printf ("%20s: %i\n", "GM DST", gmcal.tm_isdst);
}
----------------------------------------

int main (void) {
    int off;
    const char *date = "2009/09/01/00";
    struct tm cal = {0};
    time_t t;
    off = gmtoffset ();
    strptime (date, "%Y/%m/%d/%H", & cal);
    t = mktime (&cal);
    printf ("t     --> %s", ctime (& t));
    t -= off;
    printf ("t-off --> %s", ctime (& t));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17668520_17672719_46_75
17668520_17672760_46_71
Title: Remove an element from linked list at a given position 
----------------------------------------

int main (void) {
    myList *node1;
    myList *node2;
    myList *node3;
    node1 = new myList;
    node2 = new myList;
    node3 = new myList;
    node1->data = 10;
    node1->next = node2;
    node2->data = 20;
    node2->next = node3;
    node3->data = 30;
    node3->next = NULL;
    start = node1;
    remove (2);
    while (start) {
    std :
        : cout << start -> data << " ";
        start = start->next;
    }
}
----------------------------------------

int main (int argc, char **argv) {
    int pos = atoi (argv[1]);
    element *a;
    element *b;
    element *c;
    a = malloc (sizeof (element));
    b = malloc (sizeof (element));
    c = malloc (sizeof (element));
    a->num = 5;
    b->num = 6;
    c->num = 7;
    a->next = b;
    b->next = c;
    c->next = NULL;
    printList (a);
    delNth (& a, pos);
    printList (a);
    drop (a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17690360_17690624_4_17
17690360_17690954_2_30
Title: How do I extract a single digit from a 3 digit whole number? 
----------------------------------------

int main () {
    int n = 123, i;
    char buffer [33];
    int len = n == 0 ? 1 : floor (log10l (abs (n))) + 1;
    for (i = n; len--; i = (int) (i / 10))
        buffer[len] = (i % 10);
    printf ("%d", buffer [0]);
    printf ("%d", buffer [1]);
    printf ("%d", buffer [2]);
    return 0;
}
----------------------------------------

int main () {
    int di, i, num, pow = 1;
    setbuf (stdout, NULL);
    printf ("enter the number of digits of the number\n");
    scanf ("%d", & di);
    int a [di];
    printf ("enter the %d digit number:\n", di);
    scanf ("%d", & num);
    while (di > 1) {
        pow = pow * 10;
        di--;
    }
    i = 0;
    while (num > 0) {
        a[i] = num / pow;
        num = num % pow;
        pow = pow / 10;
        i++;
    }
    printf ("the digits from the beginning are :\n");
    for (int j = 0; j < i; j++)
        printf ("%d\n", a[j]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17715918_17716281_24_33
17715918_17716570_1_18
Title: Reverse Numbers function using recursion in C 
----------------------------------------

int rev (int number) {
    int revNum = 0;
    int i = len (number) - 1;
    if (number <= 9) {
        return number;
    }
    else {
        return (number % (10) * pow (10, i) + rev (number / 10));
    }
}
----------------------------------------

int rev (int number) {
    int base = 1;
    while (number / (base * 10)) {
        base *= 10;
    }
    if (number <= 9) {
        return number;
    }
    else if (number >= 10) {
        int revNum = (number % 10) * base;
        return rev (number / 10) + revNum;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17715918_17716281_24_33
17715918_17720557_3_13
Title: Reverse Numbers function using recursion in C 
----------------------------------------

int rev (int number) {
    int revNum = 0;
    int i = len (number) - 1;
    if (number <= 9) {
        return number;
    }
    else {
        return (number % (10) * pow (10, i) + rev (number / 10));
    }
}
----------------------------------------

int rev (int revNum) {
    if (revNum) {
        reverse = (reverse * 10) + (revNum % 10);
        rev (revNum / 10);
    }
    else
        return;
    return reverse;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17715918_17716570_1_18
17715918_17720557_3_13
Title: Reverse Numbers function using recursion in C 
----------------------------------------

int rev (int number) {
    int base = 1;
    while (number / (base * 10)) {
        base *= 10;
    }
    if (number <= 9) {
        return number;
    }
    else if (number >= 10) {
        int revNum = (number % 10) * base;
        return rev (number / 10) + revNum;
    }
}
----------------------------------------

int rev (int revNum) {
    if (revNum) {
        reverse = (reverse * 10) + (revNum % 10);
        rev (revNum / 10);
    }
    else
        return;
    return reverse;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17717850_17718034_2_21
17717850_17718156_5_22
Title: print multiple lines by getchar and putchar 
----------------------------------------

int main (void) {
    int c = '\0';
    char ch [100];
    int i = 0;
    while (c != EOF) {
        c = getchar ();
        ch[i] = c;
        i++;
        if (c == '+') {
            for (int j = 0; j < i; j++) {
                printf ("%c", ch [j]);
            }
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char input_buffer [SIZE];
    char output_buffer [SIZE * 4];
    int offset = 0;
    while (fgets (input_buffer, SIZE, stdin) != NULL && input_buffer[0] != '\n') {
        strcpy (output_buffer + offset, input_buffer);
        offset += strlen (input_buffer);
    }
    printf ("%s", output_buffer);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17717850_17718034_2_21
17717850_17718167_2_13
Title: print multiple lines by getchar and putchar 
----------------------------------------

int main (void) {
    int c = '\0';
    char ch [100];
    int i = 0;
    while (c != EOF) {
        c = getchar ();
        ch[i] = c;
        i++;
        if (c == '+') {
            for (int j = 0; j < i; j++) {
                printf ("%c", ch [j]);
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    while (true) {
        c = getChar ();
        if (c == EOF && GetKeyState (VK_LSHIFT) {putchar ("\n");
        continue;
        else if (c == EOF)
            break;
        else {putchar (c);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17717850_17718034_2_21
17717850_17718371_5_16
Title: print multiple lines by getchar and putchar 
----------------------------------------

int main (void) {
    int c = '\0';
    char ch [100];
    int i = 0;
    while (c != EOF) {
        c = getchar ();
        ch[i] = c;
        i++;
        if (c == '+') {
            for (int j = 0; j < i; j++) {
                printf ("%c", ch [j]);
            }
        }
    }
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    int lines = 0;
    setbuffer (stdout, buf, sizeof (buf));
    while ((c = getchar ()) != EOF) {
        lines += (c == '\n');
        putchar (c);
        if (lines == LINES) {
            fflush (stdout);
            lines = 0;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17717850_17718156_5_22
17717850_17718167_2_13
Title: print multiple lines by getchar and putchar 
----------------------------------------

int main () {
    char input_buffer [SIZE];
    char output_buffer [SIZE * 4];
    int offset = 0;
    while (fgets (input_buffer, SIZE, stdin) != NULL && input_buffer[0] != '\n') {
        strcpy (output_buffer + offset, input_buffer);
        offset += strlen (input_buffer);
    }
    printf ("%s", output_buffer);
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    while (true) {
        c = getChar ();
        if (c == EOF && GetKeyState (VK_LSHIFT) {putchar ("\n");
        continue;
        else if (c == EOF)
            break;
        else {putchar (c);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17717850_17718156_5_22
17717850_17718371_5_16
Title: print multiple lines by getchar and putchar 
----------------------------------------

int main () {
    char input_buffer [SIZE];
    char output_buffer [SIZE * 4];
    int offset = 0;
    while (fgets (input_buffer, SIZE, stdin) != NULL && input_buffer[0] != '\n') {
        strcpy (output_buffer + offset, input_buffer);
        offset += strlen (input_buffer);
    }
    printf ("%s", output_buffer);
    return 0;
}
----------------------------------------

int main (void) {
    int c;
    int lines = 0;
    setbuffer (stdout, buf, sizeof (buf));
    while ((c = getchar ()) != EOF) {
        lines += (c == '\n');
        putchar (c);
        if (lines == LINES) {
            fflush (stdout);
            lines = 0;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17717850_17718167_2_13
17717850_17718371_5_16
Title: print multiple lines by getchar and putchar 
----------------------------------------

int main (void) {
    int c;
    while (true) {
        c = getChar ();
        if (c == EOF && GetKeyState (VK_LSHIFT) {putchar ("\n");
        continue;
        else if (c == EOF)
            break;
        else {putchar (c);
    }
}
----------------------------------------

int main (void) {
    int c;
    int lines = 0;
    setbuffer (stdout, buf, sizeof (buf));
    while ((c = getchar ()) != EOF) {
        lines += (c == '\n');
        putchar (c);
        if (lines == LINES) {
            fflush (stdout);
            lines = 0;
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17727996_17728069_8_22
17727996_17728127_1_15
Title: How can I test this C function 
----------------------------------------

int main () {
    int n = 0;
    int *p1 = &n;
    int **p2 = &p1;
    int ***p3 = &p2;
    int ****p4 = &p3;
    int *****p5 = &p4;
    int ******p6 = &p5;
    int *******p7 = &p6;
    int ********p8 = &p7;
    function (& p8);
    printf ("%d\n", n);
    return 0;
}
----------------------------------------

int main () {
    int *********nbr;
    nbr = malloc (sizeof (int ********));
    *nbr = malloc (sizeof (int *******));
    **nbr = malloc (sizeof (int ******));
    ***nbr = malloc (sizeof (int *****));
    ****nbr = malloc (sizeof (int ****));
    *****nbr = malloc (sizeof (int ***));
    ******nbr = malloc (sizeof (int **));
    *******nbr = malloc (sizeof (int *));
    ********nbr = malloc (sizeof (int));
    function (nbr);
    printf ("%d", * * * * * * * * * nbr);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17727996_17728069_8_22
17727996_17728174_1_19
Title: How can I test this C function 
----------------------------------------

int main () {
    int n = 0;
    int *p1 = &n;
    int **p2 = &p1;
    int ***p3 = &p2;
    int ****p4 = &p3;
    int *****p5 = &p4;
    int ******p6 = &p5;
    int *******p7 = &p6;
    int ********p8 = &p7;
    function (& p8);
    printf ("%d\n", n);
    return 0;
}
----------------------------------------

int main (void) {
    int l0 = 0;
    int *l1 = &l0;
    int **l2 = &l1;
    int ***l3 = &l2;
    int ****l4 = &l3;
    int *****l5 = &l4;
    int ******l6 = &l5;
    int *******l7 = &l6;
    int ********l8 = &l7;
    printf ("%d %d %d %d %d %d %d %d %d\n", l0, * l1, * * l2, * * * l3, * * * * l4, * * * * * l5, * * * * * * l6, * * * * * * * l7, * * * * * * * * l8);
    function (& l8);
    printf ("%d %d %d %d %d %d %d %d %d\n", l0, * l1, * * l2, * * * l3, * * * * l4, * * * * * l5, * * * * * * l6, * * * * * * * l7, * * * * * * * * l8);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17727996_17728127_1_15
17727996_17728174_1_19
Title: How can I test this C function 
----------------------------------------

int main () {
    int *********nbr;
    nbr = malloc (sizeof (int ********));
    *nbr = malloc (sizeof (int *******));
    **nbr = malloc (sizeof (int ******));
    ***nbr = malloc (sizeof (int *****));
    ****nbr = malloc (sizeof (int ****));
    *****nbr = malloc (sizeof (int ***));
    ******nbr = malloc (sizeof (int **));
    *******nbr = malloc (sizeof (int *));
    ********nbr = malloc (sizeof (int));
    function (nbr);
    printf ("%d", * * * * * * * * * nbr);
}
----------------------------------------

int main (void) {
    int l0 = 0;
    int *l1 = &l0;
    int **l2 = &l1;
    int ***l3 = &l2;
    int ****l4 = &l3;
    int *****l5 = &l4;
    int ******l6 = &l5;
    int *******l7 = &l6;
    int ********l8 = &l7;
    printf ("%d %d %d %d %d %d %d %d %d\n", l0, * l1, * * l2, * * * l3, * * * * l4, * * * * * l5, * * * * * * l6, * * * * * * * l7, * * * * * * * * l8);
    function (& l8);
    printf ("%d %d %d %d %d %d %d %d %d\n", l0, * l1, * * l2, * * * l3, * * * * l4, * * * * * l5, * * * * * * l6, * * * * * * * l7, * * * * * * * * l8);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17747095_17747352_3_16
17747095_17748947_5_18
Title: Reading a two dimensional string using gets 
----------------------------------------

int main () {
    int n, i;
    char str [100] [100];
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        gets (str [i]);
    }
    for (i = 0; i < n; i++) {
        printf ("%s\n", str [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    char str [MAX_ROW] [MAX_LINE];
    int i, n;
    printf ("input the row of lines :\n");
    scanf ("%d\n", & n);
    if (n < 1) {
        printf ("input error!\n");
        return -1;
    }
    for (i = 0; i < n; ++i)
        fgets (str[i], MAX_LINE -1, stdin);
    for (i = 0; i < n; ++i)
        fputs (str[i], stdout);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17759171_17760415_8_18
17759171_49636766_51_67
Title: sscanf to scan particular size of string 
----------------------------------------

int main (void) {
    char input [16] = "#123 abcdefg";
    int k;
    char out [BUFSZ + 1];
    sscanf (input, "#%d %" S (BUFSZ) "s", & k, out);
    printf ("%d\n", k);
    printf ("%s\n", out);
    return 0;
}
----------------------------------------

int main () {
    char out [BUFSZ];
    int k;
    PrintLine ();
    MyIntegerScan ("#123 abc", & k, out, BUFSZ);
    MyIntegerScan ("#123      abc", & k, out, BUFSZ);
    MyIntegerScan ("#123 a", & k, out, BUFSZ);
    MyIntegerScan ("#123 a noise", & k, out, BUFSZ);
    MyIntegerScan ("#123 abcdefg", & k, out, BUFSZ);
    MyIntegerScan ("#123", & k, out, BUFSZ);
    MyIntegerScan ("# asdf", & k, out, BUFSZ);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17764711_17764788_18_33
17764711_17764818_1_15
Title: Inverting Capitalization of letter in C 
----------------------------------------

char invert_caps (char letter) {
    printf ("\nletter is %d\n", letter);
    if ((int) letter >= 65 && (int) letter <= 90) {
        letter = (int) letter + 32;
    }
    else {
        letter = (int) letter - 32;
    }
    printf ("\nnew letter is %d or %c\n", letter, letter);
    return letter;
}
----------------------------------------

char invert_caps (char letter) {
    if (letter >= 'A' && letter <= 'Z') {
        letter = letter + ('a' - 'A');
    }
    else {
        if (letter >= 'a' && letter <= 'z') {
            letter = letter - ('a' - 'A');
        }
        else
            letter = '\0';
    }
    return letter;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17770202_17770288_2_31
17770202_17770295_1_19
Title: Remove extra whitespace from a string in C 
----------------------------------------

char *removeSpaces (char *str) {
    int ip_ind = 1;
    char *ptr;
    if (*str)
        return str;
    while (*(str + ip_ind)) {
        if ((*(str + ip_ind) == *(str + ip_ind - 1)) && (*(str + ip_ind) == ' ')) {
            ptr = str + ip_ind;
            do {
                *(ptr - 1) = *ptr;
            }
            while (*ptr++ != '\0');
        }
        else
            ip_ind++;
    }
    *(str + ip_ind) = '\0';
    return str;
}
----------------------------------------

char *removeSpaces (char *str) {
    char *inp = str, *outp = str;
    int prevSpace = 0;
    while (*inp) {
        if (isspace (*inp)) {
            if (!prevSpace) {
                *outp++ = ' ';
                prevSpace = 1;
            }
        }
        else {
            *outp++ = *inp;
            prevSpace = 0;
        }
        ++inp;
    }
    *outp = '\0';
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17770202_17770288_2_31
17770202_17770346_1_19
Title: Remove extra whitespace from a string in C 
----------------------------------------

char *removeSpaces (char *str) {
    int ip_ind = 1;
    char *ptr;
    if (*str)
        return str;
    while (*(str + ip_ind)) {
        if ((*(str + ip_ind) == *(str + ip_ind - 1)) && (*(str + ip_ind) == ' ')) {
            ptr = str + ip_ind;
            do {
                *(ptr - 1) = *ptr;
            }
            while (*ptr++ != '\0');
        }
        else
            ip_ind++;
    }
    *(str + ip_ind) = '\0';
    return str;
}
----------------------------------------

char *removeSpaces (char *str) {
    if (*str == '\0')
        return str;
    char *back = str;
    char *front = str + 1;
    while (*front != '\0') {
        if (*front != ' ' || *back != ' ')
            *(++back) = *front;
        front++;
    }
    *(back + 1) = '\0';
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17770202_17770288_2_31
17770202_17770349_5_20
Title: Remove extra whitespace from a string in C 
----------------------------------------

char *removeSpaces (char *str) {
    int ip_ind = 1;
    char *ptr;
    if (*str)
        return str;
    while (*(str + ip_ind)) {
        if ((*(str + ip_ind) == *(str + ip_ind - 1)) && (*(str + ip_ind) == ' ')) {
            ptr = str + ip_ind;
            do {
                *(ptr - 1) = *ptr;
            }
            while (*ptr++ != '\0');
        }
        else
            ip_ind++;
    }
    *(str + ip_ind) = '\0';
    return str;
}
----------------------------------------

char *removeSpaces (char *str) {
    int ip_ind = 0;
    while (*(str + ip_ind) != 0) {
        if (*(str + ip_ind++) == 32) {
            if (*(str + ip_ind) == 32) {
                int x = ip_ind;
                while (*(str + x + 1) != 0) {
                    *(str + x) = *(str + 1 + x++);
                }
                *(str + x) = 0;
                --ip_ind;
            }
        }
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17770202_17770295_1_19
17770202_17770346_1_19
Title: Remove extra whitespace from a string in C 
----------------------------------------

char *removeSpaces (char *str) {
    char *inp = str, *outp = str;
    int prevSpace = 0;
    while (*inp) {
        if (isspace (*inp)) {
            if (!prevSpace) {
                *outp++ = ' ';
                prevSpace = 1;
            }
        }
        else {
            *outp++ = *inp;
            prevSpace = 0;
        }
        ++inp;
    }
    *outp = '\0';
    return str;
}
----------------------------------------

char *removeSpaces (char *str) {
    if (*str == '\0')
        return str;
    char *back = str;
    char *front = str + 1;
    while (*front != '\0') {
        if (*front != ' ' || *back != ' ')
            *(++back) = *front;
        front++;
    }
    *(back + 1) = '\0';
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17770202_17770295_1_19
17770202_17770349_5_20
Title: Remove extra whitespace from a string in C 
----------------------------------------

char *removeSpaces (char *str) {
    char *inp = str, *outp = str;
    int prevSpace = 0;
    while (*inp) {
        if (isspace (*inp)) {
            if (!prevSpace) {
                *outp++ = ' ';
                prevSpace = 1;
            }
        }
        else {
            *outp++ = *inp;
            prevSpace = 0;
        }
        ++inp;
    }
    *outp = '\0';
    return str;
}
----------------------------------------

char *removeSpaces (char *str) {
    int ip_ind = 0;
    while (*(str + ip_ind) != 0) {
        if (*(str + ip_ind++) == 32) {
            if (*(str + ip_ind) == 32) {
                int x = ip_ind;
                while (*(str + x + 1) != 0) {
                    *(str + x) = *(str + 1 + x++);
                }
                *(str + x) = 0;
                --ip_ind;
            }
        }
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17770202_17770346_1_19
17770202_17770349_5_20
Title: Remove extra whitespace from a string in C 
----------------------------------------

char *removeSpaces (char *str) {
    if (*str == '\0')
        return str;
    char *back = str;
    char *front = str + 1;
    while (*front != '\0') {
        if (*front != ' ' || *back != ' ')
            *(++back) = *front;
        front++;
    }
    *(back + 1) = '\0';
    return str;
}
----------------------------------------

char *removeSpaces (char *str) {
    int ip_ind = 0;
    while (*(str + ip_ind) != 0) {
        if (*(str + ip_ind++) == 32) {
            if (*(str + ip_ind) == 32) {
                int x = ip_ind;
                while (*(str + x + 1) != 0) {
                    *(str + x) = *(str + 1 + x++);
                }
                *(str + x) = 0;
                --ip_ind;
            }
        }
    }
    return str;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17770202_17770349_22_30
17770202_38532219_4_25
Title: Remove extra whitespace from a string in C 
----------------------------------------

int main () {
    char str [] = "go   for  go";
    printf ("%s\n", str);
    printf ("%s\n", removeSpaces (str));
    char str2 [] = "go     for  go for go";
    printf ("%s\n", str2);
    printf ("%s\n", removeSpaces (str2));
    return 0;
}
----------------------------------------

int main () {
    char a [100];
    int i, t, k;
    scanf ("%[^\n]s", a);
    t = strlen (a);
    for (i = 0; i < t;) {
        if ((a[i] == ' ') && (a[i + 1] == ' ')) {
            for (k = i + 1; k < t; k++) {
                a[k] = a[k + 1];
            }
            t = t - 1;
        }
        else
            i++;
    }
    printf ("%s", a);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17772340_17773152_13_48
17772340_17773305_16_50
Title: Demarcation of numbers and strings from stdin 
----------------------------------------

int main (int argc, char **argv) {
    char buf [64];
    char reg [10];
    unsigned int val = 0;
    int r = 0;
    do {
        printf ("\nEnter a command: ");
        scanf ("%s", buf);
        if (strcmp (buf, "WRITE") == 0) {
            scanf ("%s", buf);
            scanf ("%s", reg);
            r = scanf ("%x", &val);
            if (r == 1) {
                printf ("write %i to register %s\n", val, reg);
            }
            else {
                scanf ("%s", buf);
                printf ("input is not valid: %s\n", buf);
            }
        }
        else if (strcmp (buf, "READ") == 0) {
        }
        else if (strcmp (buf, "RESET") == 0) {
        }
        else if (strcmp (buf, "exit") == 0) {
            break;
        }
        else {
            printf ("Unknown command: %s\n", buf);
        }
        clear_stdin ();
    }
    while (1);
    printf ("Bye!\n");
    return 0;
}
----------------------------------------

int main (void) {
    char buffer [MAXSIZE];
    char *token;
    puts ("Enter your command:");
    if (fgets (buffer, MAXSIZE, stdin) == NULL) {
        error_quit ("couldn't get input");
    }
    token = strtok (buffer, token_delims);
    if (token == NULL) {
        error_quit ("no instruction specified");
    }
    else if (strcmp (token, "WRITE") == 0) {
        inst_write ();
    }
    else if (strcmp (token, "READ") == 0) {
    }
    else {
        error_quit ("unrecognized instruction");
    }
    printf ("Register A contains: %ld\n", register_a);
    printf ("Register B contains: %ld\n", register_b);
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1777709_1777726_1_13
1777709_1777750_1_11
Title: Number of Zeros in the binary representation of an Integer 
----------------------------------------

int num_of_zero (int num) {
    int left_part_zeros;
    if (num == 0)
        return 0;
    left_part_zeros = num_of_zero (num >> 1);
    if ((num & 1) == 0)
        return left_part_zeros + 1;
    else
        return left_part_zeros;
}
----------------------------------------

int num_of_zero (int num) {
    unsigned int unum = (unsigned int) num;
    int count;
    int i;
    for (i = 0; i < 32; ++i) {
        if (!(unum & 1))
            ++count;
        unum >>= 1;
    }
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1779061_28979218_2_13
1779061_2986005_4_15
Title: Long Double in C 
----------------------------------------

int main (void) {
    float aboat = 32000.0;
    double abet = 2.14e9;
    long double dip = 5.32e-5L;
    printf ("%f can be written %e\n", aboat, aboat);
    printf ("%f can be written %e\n", abet, abet);
    printf ("%LF can be written %LE\n", dip, dip);
    return 0;
}
----------------------------------------

int main (void) {
    float aboat = 320000.0;
    double abet = 2.214e9;
    long double dip = 5.32e-5;
    printf ("%f can be written %e\n", aboat, aboat);
    printf ("%f can be written %e\n", abet, abet);
    printf ("%Lf can be written %Le\n", dip, dip);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17803480_17804106_4_29
17803480_17806061_4_29
Title: How to parse a file that contains a long list of numbers in each line? 
----------------------------------------

int main () {
    char *str_avail;
    char *token;
    FILE *fp = NULL;
    char buffer [1024];
    char buffer2 [1024];
    fp = fopen ("test.txt", "r");
    if (fp != NULL) {
        while (fgets (buffer, 1024, fp) != NULL) {
            printf ("%s\n", buffer);
            str_avail = strpbrk (buffer, ":");
            if (*buffer == '\n')
                continue;
            strcpy (buffer2, str_avail + 2);
            token = strtok (buffer2, " ");
            while (token != NULL) {
                printf ("%s\n", token);
                token = strtok (NULL, " ");
            }
        }
    }
}
----------------------------------------

int main (void) {
    static int array [20] [20];
    int row = 0;
    FILE *fp = NULL;
    char buffer [1024];
    fp = fopen ("Input.txt", "r");
    if (fp != NULL) {
        while (fgets (buffer, 1024, fp) != NULL) {
            char *p = buffer, *endp;
            long num;
            int col = 0;
            do {
                num = strtol (p, &endp, 10);
                if (*endp == ' ' || *endp == '\n' || *endp == '\0') {
                    array[row][col++] = num;
                }
                p = endp + 1;
            }
            while (*endp != '\n' && *endp != '\0');
            ++row;
        }
        fclose (fp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17803630_17803755_1_23
17803630_17806280_1_13
Title: How to pass a struct by reference and change its value 
----------------------------------------

char pop (Node **top) {
    char result;
    Node *ptr;
    ptr = *top;
    if (size == 0) {
        return '\0';
    }
    else {
        result = (*top)->opp;
        (*top) = (*top)->next;
        free (ptr);
    }
    size--;
    return result;
}
----------------------------------------

char pop (Node **top) {
    char t;
    Node *p;
    if (size == 0) {
        return '\0';
    }
    else {
        p = *top;
        t = p->op;
        (*top) = (*top)->next;
        free (p);
        return t;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17805842_17981368_65_107
17805842_17990080_70_126
Title: hash table with linked list with bug 
----------------------------------------

int add_string (Post_table *hash_table, char tempname [30], int temptel) {
    int emptyElement = 0;
    Post *new_list;
    Post *current_list;
    unsigned int hashkey = Hash (hash_table, tempname);
    if ((new_list = malloc (sizeof (Post))) == NULL) {
        return 1;
    }
    current_list = lookup_string (hash_table, tempname);
    if (current_list != NULL) {
        return 2;
    }
    if (hash_table->table[hashkey].head == NULL) {
        emptyElement = 1;
    }
    printf ("\nHash-key: %d\n", hashkey);
    if (emptyElement == 1) {
        hash_table->table[hashkey].head = AddList (tempname, temptel, emptyElement, hash_table->table[hashkey].current);
        hash_table->table[hashkey].current = AddList (tempname, temptel, emptyElement, hash_table->table[hashkey].current);
    }
    if (emptyElement == 0) {
        hash_table->table[hashkey].current = AddList (tempname, temptel, emptyElement, hash_table->table[hashkey].current);
    }
    return 0;
}
----------------------------------------

int add_string (Post_table *hash_table, char tempname [30], int temptel) {
    Post *current_list;
    unsigned int hashkey = Hash (hash_table, tempname);
    current_list = lookup_string (hash_table, tempname);
    if (current_list != NULL) {
        return 2;
    }
    printf ("\nHash-key: %d\n", hashkey);
    hash_table->table[hashkey].current = AddList (tempname, temptel, hash_table->table[hashkey].current);
    if (hash_table->table[hashkey].head == NULL)
        hash_table->table[hashkey].head = hash_table->table[hashkey].current;
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17815939_17816097_1_19
17815939_17816255_1_32
Title: sorting element from linked list 
----------------------------------------

void sortlist () {
    struct node *ptr = head;
    while (ptr != NULL) {
        struct node *next;
        if (ptr == NULL)
            return;
        next = ptr->next;
        while (next != NULL) {
            if (ptr->data > next->data) {
                int a = ptr->data;
                ptr->data = next->data;
                next->data = a;
            }
            next = next->next;
        }
        ptr = ptr->next;
    }
}
----------------------------------------

void sortlist () {
    if (head == NULL || head->next == NULL)
        return;
    struct node *temp = head;
    struct node *temp1 = head->next;
    while (temp != NULL) {
        while (temp1->next != NULL) {
            if (temp->data > temp1->data) {
                int d = temp->data;
                temp->data = temp1->data;
                temp1->data = d;
            }
            temp1 = temp1->next;
        }
        temp = temp->next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17815939_17816097_1_19
17815939_17917491_1_22
Title: sorting element from linked list 
----------------------------------------

void sortlist () {
    struct node *ptr = head;
    while (ptr != NULL) {
        struct node *next;
        if (ptr == NULL)
            return;
        next = ptr->next;
        while (next != NULL) {
            if (ptr->data > next->data) {
                int a = ptr->data;
                ptr->data = next->data;
                next->data = a;
            }
            next = next->next;
        }
        ptr = ptr->next;
    }
}
----------------------------------------

void sortlist () {
    struct node *temp = head;
    int s;
    struct node *temp1 = temp->next;
    while (temp != NULL) {
        temp1 = temp->next;
        while (temp1 != NULL) {
            if (temp->data > temp1->data) {
                s = temp->data;
                temp->data = temp1->data;
                temp1->data = s;
            }
            temp1 = temp1->next;
        }
        temp = temp->next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17815939_17816255_1_32
17815939_17917491_1_22
Title: sorting element from linked list 
----------------------------------------

void sortlist () {
    if (head == NULL || head->next == NULL)
        return;
    struct node *temp = head;
    struct node *temp1 = head->next;
    while (temp != NULL) {
        while (temp1->next != NULL) {
            if (temp->data > temp1->data) {
                int d = temp->data;
                temp->data = temp1->data;
                temp1->data = d;
            }
            temp1 = temp1->next;
        }
        temp = temp->next;
    }
}
----------------------------------------

void sortlist () {
    struct node *temp = head;
    int s;
    struct node *temp1 = temp->next;
    while (temp != NULL) {
        temp1 = temp->next;
        while (temp1 != NULL) {
            if (temp->data > temp1->data) {
                s = temp->data;
                temp->data = temp1->data;
                temp1->data = s;
            }
            temp1 = temp1->next;
        }
        temp = temp->next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17818866_17819234_4_14
17818866_18551127_3_15
Title: Find the fault or error 
----------------------------------------

int main (int argc, char *argv []) {
    char *p = "My test string", p1 [15];
    strncpy (p1, p, 14);
    p1[14] = 0;
    p = p1;
    while (*p != 0) {
        printf ("%c", ++ * p ++);
    }
}
----------------------------------------

int main (void) {
    char array [] = "ayqm";
    char *p = array;
    char c;
    c = ++*p++;
    printf ("%c\n", c);
    printf ("%s\n", array);
    c = ++*p++;
    printf ("%c\n", c);
    printf ("%s\n", array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17830282_17830504_1_21
17830282_17830532_1_12
Title: Segmentation fault in recursive Binary Search Algorithm in C 
----------------------------------------

int binSearch (int val, int numbers [], int low, int high) {
    int mid;
    mid = (low + high) / 2;
    if (low <= high) {
        if (val == numbers[mid])
            return mid;
        else if (val < numbers[mid])
            return binSearch (val, numbers, low, mid -1);
        else
            return binSearch (val, numbers, mid +1, high);
    }
    else
        return -1;
}
----------------------------------------

int binSearch (int val, int numbers [], int low, int high) {
    int mid = (low + high) / 2;
    if (val == numbers[mid])
        return mid;
    if (val < numbers[mid]) {
        if (mid > low)
            return binSearch (val, numbers, low, mid -1);
    }
    else if (val > numbers[mid]) {
        if (mid < high)
            return binSearch (val, numbers, mid +1, high);
    }
    return -1;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17877025_17877252_3_28
17877025_17878165_4_38
Title: reading last n lines from file in c/c++ 
----------------------------------------

int main () {
    int count = 0;
    char *fileName = "count.c";
    char *outFileName = "out11.txt";
    FILE *fpIn;
    FILE *fpOut;
    if ((fpIn = fopen (fileName, "r")) == NULL)
        printf (" file %s open error\n", fileName);
    if ((fpOut = fopen (outFileName, "w")) == NULL)
        printf (" file %s open error\n", outFileName);
    fseek (fpIn, 0, SEEK_END);
    while (count < 10) {
        fseek (fpIn, - 2, SEEK_CUR);
        if (ftell (fpIn) < 0L)
            break;
        char now = fgetc (fpIn);
        printf ("%c", now);
        fputc (now, fpOut);
        if (now == '\n')
            ++count;
    }
    fclose (fpIn);
    fclose (fpOut);
}
----------------------------------------

int main (void) {
    FILE *in, *out;
    int count = 0;
    long int pos;
    char s [100];
    in = fopen ("input.txt", "r");
    if (in == NULL) {
        perror ("fopen");
        exit (EXIT_FAILURE);
    }
    out = fopen ("output.txt", "w");
    if (out == NULL) {
        perror ("fopen");
        exit (EXIT_FAILURE);
    }
    fseek (in, 0, SEEK_END);
    pos = ftell (in);
    while (pos) {
        fseek (in, -- pos, SEEK_SET);
        if (fgetc (in) == '\n') {
            if (count++ == 10)
                break;
        }
    }
    while (fgets (s, sizeof (s), in) != NULL) {
        fprintf (out, "%s", s);
    }
    fclose (in);
    fclose (out);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17877025_17877252_3_28
17877025_42928014_4_23
Title: reading last n lines from file in c/c++ 
----------------------------------------

int main () {
    int count = 0;
    char *fileName = "count.c";
    char *outFileName = "out11.txt";
    FILE *fpIn;
    FILE *fpOut;
    if ((fpIn = fopen (fileName, "r")) == NULL)
        printf (" file %s open error\n", fileName);
    if ((fpOut = fopen (outFileName, "w")) == NULL)
        printf (" file %s open error\n", outFileName);
    fseek (fpIn, 0, SEEK_END);
    while (count < 10) {
        fseek (fpIn, - 2, SEEK_CUR);
        if (ftell (fpIn) < 0L)
            break;
        char now = fgetc (fpIn);
        printf ("%c", now);
        fputc (now, fpOut);
        if (now == '\n')
            ++count;
    }
    fclose (fpIn);
    fclose (fpOut);
}
----------------------------------------

int main () {
    ifstream f ("file.in");
    ifstream g ("file.in");
    int n;
    cin >> n;
    string line;
    for (int i = 0; i < k; ++i)
        getline (f, line);
    for (; getline (f, line);) {
        getline (g, line);
    }
    for (; getline (g, line);)
        cout << line << endl;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17877025_17878165_4_38
17877025_42928014_4_23
Title: reading last n lines from file in c/c++ 
----------------------------------------

int main (void) {
    FILE *in, *out;
    int count = 0;
    long int pos;
    char s [100];
    in = fopen ("input.txt", "r");
    if (in == NULL) {
        perror ("fopen");
        exit (EXIT_FAILURE);
    }
    out = fopen ("output.txt", "w");
    if (out == NULL) {
        perror ("fopen");
        exit (EXIT_FAILURE);
    }
    fseek (in, 0, SEEK_END);
    pos = ftell (in);
    while (pos) {
        fseek (in, -- pos, SEEK_SET);
        if (fgetc (in) == '\n') {
            if (count++ == 10)
                break;
        }
    }
    while (fgets (s, sizeof (s), in) != NULL) {
        fprintf (out, "%s", s);
    }
    fclose (in);
    fclose (out);
    return 0;
}
----------------------------------------

int main () {
    ifstream f ("file.in");
    ifstream g ("file.in");
    int n;
    cin >> n;
    string line;
    for (int i = 0; i < k; ++i)
        getline (f, line);
    for (; getline (f, line);) {
        getline (g, line);
    }
    for (; getline (g, line);)
        cout << line << endl;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17877368_17877654_4_20
17877368_17877990_6_49
Title: Getopt- Passing string parameter for argument 
----------------------------------------

int main (int argc, char *argv []) {
    int opt;
    while ((opt = getopt (argc, argv, "i:o:")) != -1) {
        switch (opt) {
        case 'i' :
            printf ("Input file: \"%s\"\n", optarg);
            break;
        case 'o' :
            printf ("Output file: \"%s\"\n", optarg);
            break;
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int c;
    const char *short_opt = "hf:";
    struct option long_opt [] = {{"help", no_argument, NULL, 'h'}, {"file", required_argument, NULL, 'f'}, {NULL, 0, NULL, 0}};
    while ((c = getopt_long (argc, argv, short_opt, long_opt, NULL)) != -1) {
        switch (c) {
        case -1 :
        case 0 :
            break;
        case 'f' :
            printf ("you entered \"%s\"\n", optarg);
            break;
        case 'h' :
            printf ("Usage: %s [OPTIONS]\n", argv[0]);
            printf ("  -f file                   file\n");
            printf ("  -h, --help                print this help and exit\n");
            printf ("\n");
            return (0);
        case ':' :
        case '?' :
            fprintf (stderr, "Try `%s --help' for more information.\n", argv[0]);
            return (-2);
        default :
            fprintf (stderr, "%s: invalid option -- %c\n", argv[0], c);
            fprintf (stderr, "Try `%s --help' for more information.\n", argv [0]);
            return (-2);
        }
    }
    return (0);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17892383_17892570_3_20
17892383_17892666_3_17
Title: While loops duplicates printf two times before getting to getchar()? 
----------------------------------------

int main () {
    char action;
    printf ("Please enter 'i' to work with integers or 'd' to work with decimals.\n\n");
    scanf ("%c", & action);
    while (action != 'i' || action != 'd') {
        if (action != '\n') {
            printf ("You didn't entered the right command. Please try again (i/d)\n");
        }
        action = getchar ();
    }
}
----------------------------------------

int main () {
    char action;
    printf ("Please enter 'i' to work with integers or 'd' to work with decimals.\n\n");
    scanf ("%c", & action);
    while (action != 'i' && action != 'd') {
        printf ("You didn't entered the right command. Please try again (i/d)\n");
        scanf ("\n%c", & action);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17900922_17901084_2_18
17900922_33217952_5_22
Title: Puzzle: Sort an array of 0's and 1's in one parse. 
----------------------------------------

int main (void) {
    int a [] = {1, 0, 0, 0, 1, 0, 1};
    int n = 7, i, index = 0;
    while (index < n && a[index])
        index++;
    for (i = index; i < n; i++) {
        if (a[i])
            a[index++] = 1;
        a[i] = 0;
    }
    for (i = 0; i < n; i++) {
        printf ("%3d", a [i]);
    }
    return 1;
}
----------------------------------------

int main () {
    int arr [] = {1, 1, 1, 1, 1, 0, 0, 0};
    int N = sizeof (arr) / sizeof (arr[0]);
    int p = 0, q = 1;
    while (q != N) {
        if (arr[p] > arr[q]) {
            arr[p] = 0;
            arr[q] = 1;
            p++;
            q++;
        }
        else {q ++;
        if (arr[p] == 0)
            p++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17914782_17915086_8_36
17914782_17915250_7_29
Title: why cache doesn't work as it supposed to be? 
----------------------------------------

int main (int argc, char *argv []) {
    long i, j = 0;
    long start;
    long start_sec;
    int count = 1;
    int k = 0;
    for (i = 0; i < 64 * 1024 * 1024; ++i) {
        arr[i] = 0;
    }
    for (j = 1; j < 1025;) {
        clock_gettime (CLOCK_REALTIME, & ts);
        start = ts.tv_nsec;
        start_sec = ts.tv_sec;
        for (i = 0, k = 0; i < 64 * 1024 * 1024; i++, k += j) {
            k = k & (SIZE - 1);
            arr[k] *= 3;
            arr[k] = 1;
        }
        clock_gettime (CLOCK_REALTIME, & ts);
        printf ("%d, %ld, %ld\n", count, (ts.tv_sec - start_sec) * 1000000000 + (ts.tv_nsec - start), j);
        count++;
        j *= 2;
    }
    return 0;
}
----------------------------------------

int main () {
    struct timeval start, end;
    clock_t startcl, endcl;
    int k, i;
    int *arr = (int *) malloc (SIZE * sizeof (int));
    if (!arr) {
        perror ("malloc");
        exit (EXIT_FAILURE);
    }
    for (k = 1; k <= 1024; k *= 2) {
        gettimeofday (& start, NULL);
        startcl = clock ();
        for (i = 0; i < SIZE; i += k)
            arr[i] *= 3;
        gettimeofday (& end, NULL);
        endcl = clock ();
        printf ("K = %d, time = %ld, cpu clock=%ld microsec\n", k, (end.tv_sec - start.tv_sec) * 1000000 + (end.tv_usec - start.tv_usec), (long) (endcl - startcl));
    }
    free (arr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17946408_17946716_1_25
17946408_17949112_1_11
Title: Bit manipulation; Converting a 16-bit value into an array of 16 Boolean values? C language 
----------------------------------------

static __inline__ void DecompressInputs (int bits, char *output) {
    char i = 16;
    while (i) {
        if (bits & 0x0001) {
            *output = 0x0a5;
            output++;
        }
        else {
            *output = 0x000;
            output++;
        }
        bits = bits >> 1;
        i -= 1;
    }
}
----------------------------------------

static __inline__ void DecompressInputs (int bits, char *output) {
    for (int bit = 0; bit < 16; ++bit) {
        int mask = 1 << bit;
        if (bits & mask)
            output[bit] = 0x0a5;
        else
            output[bit] = 0;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17963915_17966066_15_27
17963915_17981977_18_44
Title: Count how many times one string appears in another one 
----------------------------------------

int main () {
    int cont;
    char a [40], b [10];
    printf ("A>");
    scanf ("%39[^\n]", a);
    printf ("B>");
    scanf (" %9[^\n]", b);
    cont = count_string_b_a (a, b);
    printf ("B \"%s\" appears %d times in A \"%s\"\n", b, cont, a);
    return 0;
}
----------------------------------------

int main (void) {
    {
        const char haystack [] = "house houuse househousehous";
        const char needle [] = "house";
        printf ("Haystack <<%s>> vs needle <<%s>> = %d\n", haystack + 0, needle + 0, count_occurrences (haystack + 0, needle + 0));
        printf ("Haystack <<%s>> vs needle <<%s>> = %d\n", haystack + 1, needle + 1, count_occurrences (haystack + 1, needle + 1));
        printf ("Haystack <<%s>> vs needle <<%s>> = %d\n", haystack + 1, needle + 0, count_occurrences (haystack + 1, needle + 0));
        printf ("Haystack <<%s>> vs needle <<%s>> = %d\n", haystack + 1, needle + 2, count_occurrences (haystack + 1, needle + 2));
        printf ("Haystack <<%s>> vs needle <<%s>> = %d\n", haystack + 6, needle + 4, count_occurrences (haystack + 6, needle + 4));
    }
    {
        char *haystack = "pencil pencil penciil pen penc pe pen55cil penci9llppencil55 pencillip peplic pencilrpencilpe";
        char *needle = "pencil";
        printf ("Haystack <<%s>> vs needle <<%s>> = %d\n", haystack + 0, needle + 0, count_occurrences (haystack + 0, needle + 0));
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17967952_17968080_1_22
17967952_17968087_1_16
Title: LinkedList Delete End in C 
----------------------------------------

void deletesEnd () {
    struct node *temp, *last;
    temp = head;
    while (temp != NULL) {
        last = temp;
        temp = temp->next;
    }
    if (last->previous == NULL) {
        free (temp);
        head = NULL;
    }
    last->previous->next = NULL;
    last = NULL;
    temp->previous = last;
    free (temp);
}
----------------------------------------

void deletesEnd () {
    struct node *temp, *last;
    temp = head;
    while (temp != NULL) {
        last = temp;
        temp = temp->next;
    }
    if (last != NULL) {
        if (last->previous != null) {
            last->previous->next = null;
        }
        free (last);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17967952_17968080_1_22
17967952_17968102_1_18
Title: LinkedList Delete End in C 
----------------------------------------

void deletesEnd () {
    struct node *temp, *last;
    temp = head;
    while (temp != NULL) {
        last = temp;
        temp = temp->next;
    }
    if (last->previous == NULL) {
        free (temp);
        head = NULL;
    }
    last->previous->next = NULL;
    last = NULL;
    temp->previous = last;
    free (temp);
}
----------------------------------------

void deletesEnd () {
    struct node *temp, *last;
    temp = head;
    last = temp;
    while (temp != NULL && temp->next != NULL) {
        last = temp;
        temp = temp->next;
    }
    if (last == temp) {
        free (temp);
        head = NULL;
    }
    else {free (last -> next);
    last->next = NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17967952_17968087_1_16
17967952_17968102_1_18
Title: LinkedList Delete End in C 
----------------------------------------

void deletesEnd () {
    struct node *temp, *last;
    temp = head;
    while (temp != NULL) {
        last = temp;
        temp = temp->next;
    }
    if (last != NULL) {
        if (last->previous != null) {
            last->previous->next = null;
        }
        free (last);
    }
}
----------------------------------------

void deletesEnd () {
    struct node *temp, *last;
    temp = head;
    last = temp;
    while (temp != NULL && temp->next != NULL) {
        last = temp;
        temp = temp->next;
    }
    if (last == temp) {
        free (temp);
        head = NULL;
    }
    else {free (last -> next);
    last->next = NULL;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17981231_17981298_3_17
17981231_17981302_3_18
Title: How to extract a part of a char array in C? 
----------------------------------------

void main () {
    char buffer [64];
    char result [10];
    int i;
    while (1) {
        for (i = 0; i < 10; i++) {
            buffer[i] = getc (stdin);
        }
        for (i = 0; i < 5; i++) {
            result[i] = buffer[i + 3];
        }
        result[i] = 0;
        printf ("%s\n", result);
    }
}
----------------------------------------

void main () {
    char buffer [10];
    char smallBuf [5];
    int i;
    for (i = 0; i < 10; i++) {
        buffer[i] = getc ();
    }
    for (i = 0; i < 5; i++) {
        smallBuf[i] = buffer[i + 3];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17981231_17981298_3_17
17981231_17981310_1_18
Title: How to extract a part of a char array in C? 
----------------------------------------

void main () {
    char buffer [64];
    char result [10];
    int i;
    while (1) {
        for (i = 0; i < 10; i++) {
            buffer[i] = getc (stdin);
        }
        for (i = 0; i < 5; i++) {
            result[i] = buffer[i + 3];
        }
        result[i] = 0;
        printf ("%s\n", result);
    }
}
----------------------------------------

void main () {
    char buffer [10];
    char middle [5];
    int i;
    for (i = 0; i < 10; ++i) {
        buffer[i] = getc ();
    }
    memcpy (middle, & buffer [3], 5 * sizeof (char));
    for (i = 0; i < 5; ++i) {
        printf ("%x", middle [i]);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17981231_17981302_3_18
17981231_17981310_1_18
Title: How to extract a part of a char array in C? 
----------------------------------------

void main () {
    char buffer [10];
    char smallBuf [5];
    int i;
    for (i = 0; i < 10; i++) {
        buffer[i] = getc ();
    }
    for (i = 0; i < 5; i++) {
        smallBuf[i] = buffer[i + 3];
    }
}
----------------------------------------

void main () {
    char buffer [10];
    char middle [5];
    int i;
    for (i = 0; i < 10; ++i) {
        buffer[i] = getc ();
    }
    memcpy (middle, & buffer [3], 5 * sizeof (char));
    for (i = 0; i < 5; ++i) {
        printf ("%x", middle [i]);
    }
    printf ("\n");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17984628_17984987_3_18
17984628_23723191_5_21
Title: Switch statement using string on an array 
----------------------------------------

int main () {
    char name [20];
    printf ("enter a name ");
    scanf ("%s", name);
    switch ((int) *name * (int) *(name + 1) * (int) *(name + 2)) {
    case (1275226) :
        printf ("hello %s.\n", name);
        break;
    case (1293980) :
        printf ("welcome %s.\n", name);
        break;
    }
    printf ("%d", (int) * name * (int) * (name + 1) * (int) * (name + 2));
}
----------------------------------------

int main () {
    char name [20];
    printf ("Enter a name: ");
    scanf ("%s", name);
    unsigned long nameInt = hash_string (name);
    switch (nameInt) {
    case 7458046 :
        {
            printf ("Hello %s", name);
            break;
        }
    default :
        {
            printf ("You are not kevin");
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17984628_17984987_3_18
17984628_49596640_35_69
Title: Switch statement using string on an array 
----------------------------------------

int main () {
    char name [20];
    printf ("enter a name ");
    scanf ("%s", name);
    switch ((int) *name * (int) *(name + 1) * (int) *(name + 2)) {
    case (1275226) :
        printf ("hello %s.\n", name);
        break;
    case (1293980) :
        printf ("welcome %s.\n", name);
        break;
    }
    printf ("%d", (int) * name * (int) * (name + 1) * (int) * (name + 2));
}
----------------------------------------

int main (int argc, char **argv) {
    qsort (command_infos, sizeof command_infos / sizeof * command_infos, sizeof * command_infos, cmp_command_infos);
    {
        enum Command_id command_id = NO_COMMAND;
        struct Command_info *pCI = bsearch (&(structCommand_info){argv[1], NO_COMMAND}, command_infos, sizeof command_infos / sizeof *command_infos, sizeof *command_infos, cmp_command_infos);
        if (NULL == pCI) {
            printf ("Command = '%s' is unknown\n", argv [1]);
        }
        else {
            printf ("Command = '%s' --> ID = %d\n", pCI -> command, pCI -> id);
            switch (command_id) {
            case COMMAND_1 :
                break;
            case COMMAND_2 :
                break;
            default :
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17984628_23723191_5_21
17984628_49596640_35_69
Title: Switch statement using string on an array 
----------------------------------------

int main () {
    char name [20];
    printf ("Enter a name: ");
    scanf ("%s", name);
    unsigned long nameInt = hash_string (name);
    switch (nameInt) {
    case 7458046 :
        {
            printf ("Hello %s", name);
            break;
        }
    default :
        {
            printf ("You are not kevin");
        }
    }
    printf ("\n");
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    qsort (command_infos, sizeof command_infos / sizeof * command_infos, sizeof * command_infos, cmp_command_infos);
    {
        enum Command_id command_id = NO_COMMAND;
        struct Command_info *pCI = bsearch (&(structCommand_info){argv[1], NO_COMMAND}, command_infos, sizeof command_infos / sizeof *command_infos, sizeof *command_infos, cmp_command_infos);
        if (NULL == pCI) {
            printf ("Command = '%s' is unknown\n", argv [1]);
        }
        else {
            printf ("Command = '%s' --> ID = %d\n", pCI -> command, pCI -> id);
            switch (command_id) {
            case COMMAND_1 :
                break;
            case COMMAND_2 :
                break;
            default :
                break;
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
17992703_17993477_23_38
17992703_17996439_23_54
Title: How can i split a string into tokens by '&' 
----------------------------------------

int main () {
    char str [] = "123;123132;;;232;232323;;;;1;";
    const char delimiters [] = ";";
    char *ptr;
    char *token;
    ptr = str;
    token = mystrsep (&ptr, delimiters);
    while (token) {
        printf ("%s\n", token);
        token = mystrsep (&ptr, delimiters);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char data1 [] = "this&&that&other";
    char *store, *token = strtok_r_noskip (data1, "&", &store);
    for (; token; token = strtok_r_noskip (NULL, "&", &store)) {
        printf ("\"%s\"\n", token);
    }
    char data2 [] = "123;123132;;;232;232323;;;;1;";
    token = strtok_r_noskip (data2, ";", &store);
    for (; token; token = strtok_r_noskip (NULL, ";", &store)) {
        printf ("\"%s\"\n", token);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18000222_18003627_4_25
18000222_18004504_2_22
Title: Assigning 2D string arrays using char * 
----------------------------------------

int main (void) {
    char *text_data [10] [4];
    int i;
    for (i = 0; i < 10; i++) {
        text_data[i][0] = "a";
        text_data[i][1] = "xyz";
        text_data[i][2] = "b";
        text_data[i][3] = "xyz";
    }
    for (i = 0; i < 10; i++) {
        puts (text_data [i] [0]);
        puts (text_data [i] [1]);
        puts (text_data [i] [2]);
        puts (text_data [i] [3]);
    }
    return 0;
}
----------------------------------------

void main () {
    char *text_ptr [10] [4];
    int i;
    for (i = 0; i < 10; i++) {
        text_ptr[i][0] = "a";
        text_ptr[i][1] = "xyz";
        text_ptr[i][2] = "b";
        text_ptr[i][3] = "xyz";
        printf ("\n%s, %s", text_ptr [i] [0], text_ptr [i] [1]);
        fflush (stdout);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
1800816_1800865_1_17
1800816_1800897_3_17
Title: Comparing character arrays with an == operator in C 
----------------------------------------

int main () {
    char *s1 = "Andreas";
    char *s2 = "Andreas";
    char s3 [] = "Andreas";
    char s4 [] = "Andreas";
    char *s5 = "Hello";
    printf ("%d\n", s1 == s2);
    printf ("%p == %p\n", s1, s2);
    printf ("%d\n", s3 == s4);
    printf ("%p != %p\n", s3, s4);
    printf ("%d\n", s1 == s5);
    printf ("%p != %p\n", s1, s5);
}
----------------------------------------

int main () {
    char *s1 = "Andreas";
    char *s2 = "Andreas";
    char s3 [] = "Andreas";
    char s4 [] = "Andreas";
    char *s5 = "Hello";
    printf ("%p\n", s1);
    printf ("%p\n", s2);
    printf ("%p\n", s3);
    printf ("%p\n", s4);
    printf ("%p\n", s5);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18022544_18022952_1_18
18022544_18022963_1_26
Title: How can I multiply and divide 64-bit ints accurately? 
----------------------------------------

int64_t fn (int64_t a, int32_t b, int32_t c, int32_t d) {
    int64_t leftI = a / d;
    int64_t leftR = a % d;
    int64_t resultI = leftI * b * c;
    int64_t resultR = leftR * b;
    resultI = resultI + (resultR / d) * c;
    resultR = (resultR % d) * c;
    return resultI + (resultR / d);
}
----------------------------------------

int64_t fn (uint64_t a, uint64_t b, uint64_t c, uint64_t d) {
    asm ("mulq %1\n"
        "movq %%rbx, %%rdx\n"
        "mulq %2\n"
        "push %%rax\n"
        "mov %%rcx, %%rdx\n"
        "movq %%rax, %%rbx\n"
        "mulq %2\n"
        "addq %%rax, %%rcx\n"
        "addcq %%rdx, $0\n"
        "divq %3\n"
        "mov %%rbx, %%rax\n"
        "pop %%rax\n"
        "divq %3\n"
        : "+a" (a), "+b" (b)
        : "g" (c), "g" (d)
        : "edx", "rdx"
    ) return a;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
18028206_18029098_9_38
18028206_18038523_9_31
Title: RPG inventory in C programming 
----------------------------------------

item_t *ReadItemsFromFile (char *file, int *count) {
    FILE *fpin = fopen (file, "r");
    int n = 0;
    item_t *items = NULL;
    if (fpin != NULL) {
        char line [128];
        while (fgets (line, 128, fpin) != NULL) {
            item_t *newptr = (item_t *) malloc ((n + 1) * sizeof (item_t));
            memcpy (newptr, items, n * sizeof (item_t));
            free (items);
            items = newptr;
            if (4 == sscanf (line, "'%[^']' %d %f %f\n", items[n].name, &items[n].dam, &items[n].cost, &items[n].weight)) {
                n++;
            }
        }
        fclose (fpin)
    }
    else {
        *count = 0;
        return NULL;
    }
    *count = n;
    return items;
}
----------------------------------------

item_t *ReadItemsFromFile (char *file) {
    FILE *fpin = fopen (file, "r");
    if (fpin) {
        items_t i [50];
        int n = 0;
        while (4 == (fscanf (fpin, " '%[^']' %d %f %f", i[n].name, &i[n].dam, &i[n].cost, &i[n].weight))) {
            n++;
            items_t *a = (items_t *) malloc (sizeof (items_t));
            return (&a);
        }
    }
    else {
        return NULL;
    }
    return (0);
}
----------------------------------------

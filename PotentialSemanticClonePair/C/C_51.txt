$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46623105_46623318_4_24
46623105_46623402_4_28
Title: Program in c to print flloyd's triangle . Program stops working 
----------------------------------------

int main () {
    printf ("Enter the number of rows you want to have\n");
    int t;
    scanf ("%d", & t);
    int i;
    char a [1000] = "";
    for (i = 1; i <= t; i++) {
        if (i % 2 != 0) {
            a[999 - i] = '1';
            printf ("%s\n", & a [999 - i]);
        }
        else {
            a[999 - i] = '0';
            printf ("%s\n", & a [999 - i]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    printf ("Enter the number of rows you want to have: ");
    int t;
    scanf ("%d", & t);
    for (int i = 1; i <= t; i++) {
        for (int j = 1; j <= i; j++) {
            char a [1000] = "";
            if ((i + j) % 2 == 0)
                strcat (a, "1");
            else
                strcat (a, "0");
            printf ("%s", a);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46623105_46623318_4_24
46623105_46623490_4_34
Title: Program in c to print flloyd's triangle . Program stops working 
----------------------------------------

int main () {
    printf ("Enter the number of rows you want to have\n");
    int t;
    scanf ("%d", & t);
    int i;
    char a [1000] = "";
    for (i = 1; i <= t; i++) {
        if (i % 2 != 0) {
            a[999 - i] = '1';
            printf ("%s\n", & a [999 - i]);
        }
        else {
            a[999 - i] = '0';
            printf ("%s\n", & a [999 - i]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    printf ("Enter the number of rows you want to have");
    int t;
    scanf ("%d", & t);
    puts ("");
    char pattern [t + 1];
    int i = t;
    pattern[i] = '\0';
    while (i > 0) {
        pattern[--i] = '1';
        if (i == 0)
            break;
        pattern[--i] = '0';
    }
    char *tmp = &pattern[t - 1];
    for (int i = 0; i < t; ++i, --tmp) {
        printf ("%s\n", tmp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46623105_46623402_4_28
46623105_46623490_4_34
Title: Program in c to print flloyd's triangle . Program stops working 
----------------------------------------

int main () {
    printf ("Enter the number of rows you want to have: ");
    int t;
    scanf ("%d", & t);
    for (int i = 1; i <= t; i++) {
        for (int j = 1; j <= i; j++) {
            char a [1000] = "";
            if ((i + j) % 2 == 0)
                strcat (a, "1");
            else
                strcat (a, "0");
            printf ("%s", a);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    printf ("Enter the number of rows you want to have");
    int t;
    scanf ("%d", & t);
    puts ("");
    char pattern [t + 1];
    int i = t;
    pattern[i] = '\0';
    while (i > 0) {
        pattern[--i] = '1';
        if (i == 0)
            break;
        pattern[--i] = '0';
    }
    char *tmp = &pattern[t - 1];
    for (int i = 0; i < t; ++i, --tmp) {
        printf ("%s\n", tmp);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46631592_46632173_9_40
46631592_46756848_7_20
Title: Running BASH command via C program 
----------------------------------------

int main (int argc, char *argv [], char *env []) {
    (void) argc;
    char *tab [] = {argv[1], NULL};
    char string [strlen (argv[1]) + strlen ("/bin/") + 1];
    strcpy (string, "/bin/");
    strcat (string, argv [1]);
    int status;
    pid_t pid = fork ();
    switch (pid) {
    case -1 :
        perror ("fork failed");
        exit (EXIT_FAILURE);
        break;
    case 0 :
        execve (string, tab, env);
        perror ("execve failed");
        exit (EXIT_FAILURE);
        break;
    default :
        waitpid (pid, &status, 0);
        break;
    }
}
----------------------------------------

int main (int argc, char *argv [], char *envp []) {
    char *tab [] = {argv[1], argv[2], NULL};
    char test [20] = "/bin/";
    if (execve (strcat (test, argv[1]), tab, envp) == -1) {
        perror ("execve");
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46635028_46635216_4_22
46635028_46635257_7_18
Title: Sum of numbers using 2 functions 
----------------------------------------

int main () {
    int n [10];
    int index;
    int largest_n;
    int smallest_n;
    int *p;
    p = &n[10];
    int a;
    int ans = 0;
    printf ("Enter 10 Integers\n");
    for (index = 0; index < 10; index++) {
        scanf ("%d", & n [index]);
        ans = calculations (n[index]);
    }
    printf ("The Sum of numbers is %d\n", ans);
}
----------------------------------------

int main () {
    int n;
    printf ("Enter 10 Integers\n");
    for (int index = 0; index < 10; index++) {
        if (scanf ("%d", &n))
            calculation (n);
    }
    printf ("The Sum of numbers is %d\n", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46643741_46646244_30_41
46643741_46647722_45_59
Title: C: Creating an array of structs in a for loop 
----------------------------------------

int losuj_liczbe (int min, int max) {
    int temp;
    if (max >= min)
        max -= min;
    else {
        temp = min - max;
        min = max;
        max = temp;
    }
    return ((rand () % (max - min) + min));
}
----------------------------------------

int losuj_liczbe (int min, int max) {
    assert (max != min);
    if (max < min) {
        int temp = min - max;
        min = max;
        max = temp;
    }
    return ((rand () % (max - min)) + min);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46643741_46646244_44_67
46643741_46647722_62_92
Title: C: Creating an array of structs in a for loop 
----------------------------------------

int main () {
    srand (time (NULL));
    int i;
    Samochod automobil [NUMBEROFCARS];
    for (i = 0; i < NUMBEROFCARS; i++) {
        automobil[i].waga = losuj_liczbe (500, 1500);
        automobil[i].cena = losuj_liczbe (20000, 30000);
        automobil[i].kolor = ((0 == losuj_liczbe (0, 3)) ? Bialy : (1 == losuj_liczbe (0, 3)) ? Czarny : (2 == losuj_liczbe (0, 3)) ? Czerwony : Niebieski);
        automobil[i].wyposazenie = ((0 == losuj_liczbe (0, 2)) ? Podstawowe : (1 == losuj_liczbe (0, 2)) ? Standard : Premium);
    }
    for (i = 0; i < NUMBEROFCARS; i++) {
        printf ("%d | %d | %s | %s\n", automobil [i].waga, automobil [i].cena, (0 == automobil [i].kolor) ? "Bialy" : (1 == automobil [i].kolor) ? "Czarny" : (2 == automobil [i].kolor) ? "Czerwony" : "Niebieski", (0 == automobil [i].wyposazenie) ? "Podstawowe" : (1 == automobil [i].wyposazenie) ? "Standard" : "Premium");
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    Samochod automobil [NUM_OF_AUTOMOBIL];
    srand (time (NULL));
    for (int i = 0; i < NUM_OF_AUTOMOBIL; i++) {
        automobil[i].waga = losuj_liczbe (500, 1500);
        automobil[i].cena = losuj_liczbe (20000, 30000);
        automobil[i].kolor = losuj_liczbe (Bialy, Niebieski);
        automobil[i].wyposazenie = losuj_liczbe (Podstawowe, Premium);
    }
    for (int i = 0; i < NUM_OF_AUTOMOBIL; i++) {
        printf ("%d | %d | %s | %s\n", automobil [i].waga, automobil [i].cena, KolorStr [automobil [i].kolor], WyposazenieStr [automobil [i].wyposazenie]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46673877_46676157_17_34
46673877_46676313_16_37
Title: Horizontal Bar Graph in C Without the Use of Arrays or Strings 
----------------------------------------

int main () {
    int b, c, l, p, s;
    obtain_crop ("Beans:", & b);
    obtain_crop ("Carrots:", & c);
    obtain_crop ("Lettuce:", & l);
    obtain_crop ("Peas:", & p);
    obtain_crop ("Squash:", & s);
    puts ("");
    print_bar ("Beans:", "B", b);
    print_bar ("Carrots:", "C", c);
    print_bar ("Lettuce:", "L", l);
    print_bar ("Peas:", "P", p);
    print_bar ("Squash:", "S", s);
    return 0;
}
----------------------------------------

int main (void) {
    int b, c, l, p, s;
    read_value ("Beans", & b);
    read_value ("Carrots", & c);
    read_value ("Lettuce", & l);
    read_value ("Peas", & p);
    read_value ("Squash", & s);
    printf ("\n");
    draw_value ("Beans:", 'B', b);
    draw_value ("Carrots:", 'C', c);
    draw_value ("Lettuce:", 'L', l);
    draw_value ("Peas:", 'P', p);
    draw_value ("Squash:", 'S', s);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46681328_46682292_11_46
46681328_46682626_8_47
Title: Need help for a C Program Dice game based on betting 
----------------------------------------

int main (void) {
    int balance = 5;
    int bet = 0;
    int sum = 0;
    int seed = time (NULL);
    srand (seed);
    balance = Ask_User_for_Balance ();
    while (balance > 0) {
        bet = Ask_User_for_Bet (balance);
        sum = rollDice ();
        printf ("dice roll is: %d\n", sum);
        if (sum == 7 || sum == 11) {
            balance = balance + (bet * 3);
            printf ("You won! Current balance: %d \n ", balance);
        }
        else {
            balance = balance - bet;
            printf ("You lost! Current balance: %d \n ", balance);
        }
    }
    printf ("Game Over...\n");
    return 0;
}
----------------------------------------

int main (void) {
    int balance = 0, previous = 0, bet = 0, roll = 0, ch = 0;
    char c = 0;
    printf ("enter opening balance: $");
    if (scanf ("%d", &balance) != 1) {
        fprintf (stderr, "error: invalid input - balance.\n");
        return 1;
    }
    if (balance <= 0) {
        fprintf (stderr, "error: balance 0 or negative.\n");
        return 1;
    }
    while (c != 'n' && c != 'N' && balance > 0) {
        previous = balance;
        bet = get_user_bet ();
        balance -= bet;
        roll = dice_roll ();
        balance += win_or_lose (roll, bet);
        printf ("bal. before: %d  bal. after: %d\n", previous, balance);
        if (balance > previous)
            printf ("\nYou won! Play again? ");
        else
            printf ("\nYou lost Play again? ");
        if (scanf (" %c", &c) != 1) {
            fprintf (stderr, "error: user canceled.\n");
            break;
        }
        for (ch = getchar (); ch != '\n' && ch != EOF; ch = getchar ()) {
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4669001_4669167_48_63
4669001_4669227_1_22
Title: match what kind of bracket encloses a string and delete it 
----------------------------------------

int main (int argc, char *argv []) {
    char str [50];
    strcpy (str, "a[b(c)de]");
    RemoveBrackets (str);
    printf ("%s\n", str);
    strcpy (str, "{not bracketed");
    RemoveBrackets (str);
    printf ("%s\n", str);
    strcpy (str, "(paren)s");
    RemoveBrackets (str);
    printf ("%s\n", str);
    strcpy (str, "abc+def+{gh}i");
    RemoveBrackets (str);
    printf ("%s\n", str);
}
----------------------------------------

int main (int argc, char *argv) {
    char *string = "abc [def] ghi";
    char *final = (char *) malloc (strlen (string) +1);
    int length = 0;
    int count = 0;
    for (count; count <= strlen (string); count++) {
        if (string[count] != '[' && string[count] != ']') {
            final[length] = string[count];
            length += 1;
        }
    }
    final = (char *) realloc ((void *) final, length);
    printf ("%s\n", final);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46715132_46715896_5_46
46715132_46720373_3_23
Title: Converting Lower Case Characters in a Text File to Upper Case Letters and Vice Versa 
----------------------------------------

int main () {
    FILE *fp, *new_f;
    int ch;
    long offset;
    fp = fopen ("test.txt", "r+");
    new_f = fopen ("test2.txt", "w");
    if (fp == NULL || new_f == NULL) {
        printf ("error:  unable to open file\n");
        exit (1);
    }
    offset = ftell (fp);
    while (1) {
        ch = fgetc (fp);
        if (ch == EOF)
            break;
        if (!isalpha (ch)) {
            fputc (ch, new_f);
        }
        else if (isupper (ch)) {
            fputc (tolower (ch), new_f);
        }
        else if (islower (ch)) {
            fputc (toupper (ch), new_f);
        }
    }
    fclose (fp);
    fclose (new_f);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int c;
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while ((c = fgetc (fp)) != EOF)
        if (('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z'))
            putchar (c ^ ('A' ^ 'a'));
        else
            putchar (c);
    if (fp != stdin)
        fclose (fp);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46715230_46715529_4_17
46715230_46715728_3_21
Title: How to reverse a string using command line? 
----------------------------------------

int main (int argc, char *argv []) {
    if (argc > 1) {
        char *str = argv[1];
        int i, j, len = strien (str);
        for (i = 0, j = len - 1; i < j; i++, j--) {
            char c = str[i];
            str[i] = str[j];
            str[j] = c;
        }
        printf ("The reverse string is %s\n", str);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    if (!(argc < 2)) {
        if (!*argv[1]) {
            printf ("The reverse string is ");
        }
        else {
            ++argv[1];
            main (argc, argv);
            --argv[1];
            putchar (*argv [1]);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46717958_46718186_3_27
46717958_51344736_1_22
Title: How to reverse a 3 digit number 
----------------------------------------

int main () {
    int n, num1, num2, num3, reverse;
    printf ("Enter the number to reverse:\n");
    scanf ("%d", & n);
    num1 = n / 100;
    num2 = (n % 100) / 10;
    num3 = n % 10;
    reverse = 100 * num3 + 10 * num2 + num1;
    printf (" The reverse is %d", reverse);
    system ("pause");
    return 0;
}
----------------------------------------

int main () {
    char string [4];
    int reverse = 0;
    printf ("Enter the number to reverse:\n");
    scanf_s ("%d", & reverse);
    if (reverse > 999)
        return 0;
    sprintf_s (string, "%d", reverse);
    char c1 = string[0];
    string[0] = string[2];
    string[2] = c1;
    reverse = atoi (string);
    printf (" The reverse is %d", reverse);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46717958_46718186_3_27
46717958_52799572_2_12
Title: How to reverse a 3 digit number 
----------------------------------------

int main () {
    int n, num1, num2, num3, reverse;
    printf ("Enter the number to reverse:\n");
    scanf ("%d", & n);
    num1 = n / 100;
    num2 = (n % 100) / 10;
    num3 = n % 10;
    reverse = 100 * num3 + 10 * num2 + num1;
    printf (" The reverse is %d", reverse);
    system ("pause");
    return 0;
}
----------------------------------------

int main () {
    int num, n1, n2;
    printf ("enter the number : ");
    scanf ("%d", & num);
    n1 = num % 10;
    num = num / 10;
    n2 = num % 10;
    printf ("%d", n1 * 100 + n2 * 10 + num / 10);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46717958_51344736_1_22
46717958_52799572_2_12
Title: How to reverse a 3 digit number 
----------------------------------------

int main () {
    char string [4];
    int reverse = 0;
    printf ("Enter the number to reverse:\n");
    scanf_s ("%d", & reverse);
    if (reverse > 999)
        return 0;
    sprintf_s (string, "%d", reverse);
    char c1 = string[0];
    string[0] = string[2];
    string[2] = c1;
    reverse = atoi (string);
    printf (" The reverse is %d", reverse);
    return 0;
}
----------------------------------------

int main () {
    int num, n1, n2;
    printf ("enter the number : ");
    scanf ("%d", & num);
    n1 = num % 10;
    num = num / 10;
    n2 = num % 10;
    printf ("%d", n1 * 100 + n2 * 10 + num / 10);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46719124_46719242_8_21
46719124_46719744_12_61
Title: Segmentation fault when copy a multidimensional array in C using pointers 
----------------------------------------

int main () {
    double array [ROWS] [COLS] = {{12.3, 55.1}, {33.6, 21.9, 90.8}};
    double array2 [ROWS] [COLS];
    printf ("Array { { 12.3, 55.1 }, { 33.6, 21.9, 90.8 } }\n");
    printf ("Array copy:\n");
    copy_ptr2d (array, array2, ROWS, COLS);
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf ("array2[%d][%d]: %lf\n", i, j, array2 [i] [j]);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    double array [ROWS] [COLS] = {{12.3, 55.1}, {33.6, 21.9, 90.8}};
    double array2 [ROWS] [COLS];
    puts ("array\n=====");
    for (size_t i = 0; i < ROWS; i++) {
        for (size_t j = 0; j < COLS; j++)
            printf ("%4.1f ", array[i][j]);
        putchar ('\n');
    }
    putchar ('\n');
    puts ("Array copying...\n");
    copy_ptr2d (ROWS, COLS, array, array2);
    puts ("array2\n======");
    for (size_t i = 0; i < ROWS; i++) {
        for (size_t j = 0; j < COLS; j++)
            printf ("%4.1f ", array2[i][j]);
        putchar ('\n');
    }
    putchar ('\n');
    puts ("Array copying...\n");
    copy_ptr2d2 (array, array2, ROWS);
    puts ("array2\n======");
    for (size_t i = 0; i < ROWS; i++) {
        for (size_t j = 0; j < COLS; j++)
            printf ("%4.1f ", array2[i][j]);
        putchar ('\n');
    }
    putchar ('\n');
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46737882_46737957_3_23
46737882_46738228_3_28
Title: while loop countdown from integer input by user 
----------------------------------------

int main () {
    int number;
    scanf ("%d", & number);
    int count = number;
    while (count >= 1) {
        printf ("%d \n", count);
        count--;
    }
    printf ("*****\n");
    while (count <= number) {
        printf ("%d \n", count);
        count++;
    }
    getchar ();
    return 0;
}
----------------------------------------

int main (void) {
    while (1) {
        printf ("Enter a number (0 - exit): ");
        int n;
        if (scanf ("%d", &n) != 1 || (n == 0))
            break;
        int i = n;
        do {
            printf ("%d ", i);
        }
        while (n < 0 ? i++ : i--);
        i = 0;
        while ((n < 0 ? i-- : i++) != n)
            printf ("%d ", i);
        putchar ('\n');
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46780869_46781550_6_20
46780869_46781641_24_42
Title: How to shift letters to the right or left? 
----------------------------------------

int main () {
    char input [256];
    int shift;
    printf ("Enter input : ");
    scanf ("%[^\n]s", input);
    printf ("Number of shifts : ");
    scanf ("%d", & shift);
    shiftletters (input, shift);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    FILE *fp = fopen ("data.txt", "r");
    if (fp == NULL) {
        perror ("fopen");
        exit (EXIT_FAILURE);
    }
    if (argc < 2) {
        fprintf (stderr, "Usage %s L|R...\n", argv [0]);
        exit (EXIT_FAILURE);
    }
    char word [64];
    while (fscanf (fp, "%63s", word) == 1) {
        for (char *shift = argv[1]; *shift; ++shift) {
            int dir = *shift == 'L' ? L : R;
            rotate1 (word, dir);
        }
        printf ("%s\n", word);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46822438_46822760_5_47
46822438_46828654_4_32
Title: How to check last character in command line arguements? 
----------------------------------------

int main (int argc, char *argv []) {
    int cCount = 0;
    int cHeadCount = 0;
    int objCount = 0;
    int makeCount = 0;
    int othCount = 0;
    int len = 0;
    for (int i = 1; i < argc; i++) {
        len = strlen (argv[i]);
        if (len > 2 && (argv[i][len - 2] != '.')) {
            othCount++;
            continue;
        }
        switch (argv[i][len - 1]) {
        case 'h' :
            cHeadCount++;
            break;
        case 'c' :
            cCount++;
            break;
        case 'o' :
            objCount++;
            break;
        case 'm' :
            makeCount++;
            break;
        default :
            othCount++;
            break;
        }
    }
    printf ("C Source: %d\n", cCount);
    printf ("C Header: %d\n", cHeadCount);
    printf ("Object: %d\n", objCount);
    printf ("Make: %d\n", makeCount);
    printf ("Other: %d\n", othCount);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int cCount, cHeadCount, objCount, makeCount, othCount;
    cCount = cHeadCount = objCount = makeCount = othCount = 0;
    for (int i = 1; i < argc; i++) {
        char *filename = strrchr (argv[i], '/');
        filename = filename ? filename + 1 : argv[i];
        char *ext = strrchr (filename, '.');
        if (strcmp (filename, "Makefile") == 0 || strcmp (filename, "makefile") == 0) {
            ++makeCount;
        }
        else if (ext == NULL) {
            ++othCount;
        }
        else if (ext[1] == 'c' && ext[2] == 0) {
            ++cCount;
        }
        else if (ext[1] == 'h' && ext[2] == 0) {
            ++cHeadCount;
        }
        else if (ext[1] == 'o' && ext[2] == 0) {
            ++objCount;
        }
        else {
            ++othCount;
        }
    }
    printf ("C Source: %d\n", cCount);
    printf ("C Header: %d\n", cHeadCount);
    printf ("Object: %d\n", objCount);
    printf ("Make: %d\n", makeCount);
    printf ("Other: %d\n", othCount);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46824095_46824551_1_26
46824095_46824931_8_38
Title: How to add comma separated values in string in C 
----------------------------------------

int main (void) {
    char delim [] = " ,";
    char *tok;
    char str [] = "123,465,798";
    int sum = 0, num;
    tok = strtok (str, delim);
    while (tok) {
        num = strtol (tok, NULL, 0);
        sum += num;
        tok = strtok (NULL, delim);
    }
    printf ("sum is %d\n", sum);
    return 0;
}
----------------------------------------

int main (void) {
    int sum = 0;
    long tmp = 0;
    char str [] = "123,456,789", *p = str, *ep = NULL;
    for (;;) {
        errno = 0;
        tmp = strtol (p, &ep, BASE);
        if (errno) {
            fprintf (stderr, "error: invalid conversion.\n");
            return 1;
        }
        if (tmp < INT_MAX - sum)
            sum += (int) tmp;
        else {
            fprintf (stderr, "error: sum overflowed.\n");
            return 1;
        }
        while (*ep && *ep != '+' && *ep != '-' && (*ep < '0' || '9' < *ep))
            ep++;
        if (!*ep)
            break;
        p = ep;
    }
    printf ("Sum of all values in CSV[%s] : %d\n", str, sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46824095_46824551_1_26
46824095_46825233_1_30
Title: How to add comma separated values in string in C 
----------------------------------------

int main (void) {
    char delim [] = " ,";
    char *tok;
    char str [] = "123,465,798";
    int sum = 0, num;
    tok = strtok (str, delim);
    while (tok) {
        num = strtol (tok, NULL, 0);
        sum += num;
        tok = strtok (NULL, delim);
    }
    printf ("sum is %d\n", sum);
    return 0;
}
----------------------------------------

int main () {
    int i;
    int iGroup = 0;
    int num = 0, sum = 0;
    char str [] = "123,456,789";
    char strNum [16];
    memset (& strNum [0], 0, sizeof (strNum));
    for (i = 0; str[i] != '\0'; i++) {
        if (str[i] == ',') {
            iGroup = 0;
            num = atoi (strNum);
            memset (& strNum [0], 0, sizeof (strNum));
            sum += num;
        }
        else {
            strNum[iGroup] = str[i];
            iGroup++;
        }
    }
    num = atoi (strNum);
    sum += num;
    printf ("Sum of all values in CSV[%s] : %d", str, sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46824095_46824931_8_38
46824095_46825233_1_30
Title: How to add comma separated values in string in C 
----------------------------------------

int main (void) {
    int sum = 0;
    long tmp = 0;
    char str [] = "123,456,789", *p = str, *ep = NULL;
    for (;;) {
        errno = 0;
        tmp = strtol (p, &ep, BASE);
        if (errno) {
            fprintf (stderr, "error: invalid conversion.\n");
            return 1;
        }
        if (tmp < INT_MAX - sum)
            sum += (int) tmp;
        else {
            fprintf (stderr, "error: sum overflowed.\n");
            return 1;
        }
        while (*ep && *ep != '+' && *ep != '-' && (*ep < '0' || '9' < *ep))
            ep++;
        if (!*ep)
            break;
        p = ep;
    }
    printf ("Sum of all values in CSV[%s] : %d\n", str, sum);
    return 0;
}
----------------------------------------

int main () {
    int i;
    int iGroup = 0;
    int num = 0, sum = 0;
    char str [] = "123,456,789";
    char strNum [16];
    memset (& strNum [0], 0, sizeof (strNum));
    for (i = 0; str[i] != '\0'; i++) {
        if (str[i] == ',') {
            iGroup = 0;
            num = atoi (strNum);
            memset (& strNum [0], 0, sizeof (strNum));
            sum += num;
        }
        else {
            strNum[iGroup] = str[i];
            iGroup++;
        }
    }
    num = atoi (strNum);
    sum += num;
    printf ("Sum of all values in CSV[%s] : %d", str, sum);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46841307_46841538_5_36
46841307_46841575_17_40
Title: "Invalid conversion of char to float different codes and no good results" 
----------------------------------------

int main (void) {
    char grade [50];
    float grade2;
    int invalid;
    int i;
    printf ("Please, insert a grade between 0 and 10.\n");
    do {
        invalid = 0;
        printf ("Grade: ");
        fflush (stdout);
        fgets (grade, sizeof grade, stdin);
        for (i = 0; grade[i] && grade[i] != '\n'; ++i) {
            if (!isdigit ((unsigned char) grade[i])) {
                invalid = 1;
                break;
            }
        }
        if (!invalid) {
            grade2 = atof (grade);
            if (grade2 < 0 || grade2 > 10) {
                printf ("\nPlease, insert a valid value.\n");
                invalid = 1;
            }
        }
    }
    while (invalid);
    printf ("The grade is: %f\n", grade2);
    printf ("Valid value.\n");
    system ("PAUSE");
}
----------------------------------------

int main () {
    char grade [128];
    float grade2;
read_input :
    memset (grade, 0x0, sizeof (grade));
    printf ("Please, insert a grade between 0 and 10.\n");
    printf ("Grade: ");
    scanf ("%s", grade);
    if (isnumeric_array (grade) == 0) {
        goto read_input;
    }
    grade2 = atof (grade);
    if ((grade2 < 0) || (grade2 > 10)) {
        goto read_input;
    }
    else {
        printf ("You have entered right value\n");
    }
    system ("PAUSE");
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46852907_46853036_1_10
46852907_46853149_4_16
Title: Elaborate a function parameter as static variable 
----------------------------------------

void hailstone (int n) {
    while (n > 1) {
        printf ("n=%d\n", n);
        if (n % 2 == 0) {
            n = n / 2;
        }
        else {
            n = (n * 3) + 1;
        }
    }
}
----------------------------------------

void hailstone (unsigned int n) {
    assert (n > 0);
    printf ("%u\n", n);
    if (n == 1)
        return;
    if (n & 1) {
        hailstone (3 * n + 1);
    }
    else {
        hailstone (n >> 1);
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46861611_46861781_7_21
46861611_46865702_3_18
Title: How to count number of element in an int type array where 0 can be an element? 
----------------------------------------

int main () {
    int a [50] = ARRAY_INITIALISER;
    size_t count;
    {
        int tmp [] = ARRAY_INITIALISER;
        count = sizeof tmp / sizeof *tmp;
    }
    printf ("Total number of elements 'used': %zu\n", count);
    return 0;
}
----------------------------------------

int main () {
    int a [50] = {1, 2, -3, 0, 0, 6, 7, -8, 0, SENTINEL};
    int count = 0;
    int i = 0;
    for (i = 0; i < 50; i++) {
        if (a[i] == SENTINEL)
            break;
        if (a[i]) {
            count++;
        }
    }
    printf ("Total Element :%d ", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46869384_46869620_86_107
46869384_46900115_87_135
Title: Generic Struct in C 
----------------------------------------

int main (void) {
    List *theList = NULL;
    int valA = 10;
    float valB = 1.25;
    double valC = 23.45;
    char valD = 'C';
    theList = create_list (&valA, INTEGER);
    insertion (getEnd (& theList), & valB, FLOAT);
    insertion (getEnd (& theList), & valC, DOUBLE);
    insertion (getEnd (& theList), & valD, CHAR);
    showTheList (& theList);
    clearList (& theList);
    if (theList == NULL)
        printf ("Ok, all operations realized !");
    return 0;
}
----------------------------------------

int main () {
    Queue *f;
    f = create_queue ();
    char ent1 [100];
    double listOfDoubles [20];
    int countDoubles = 0;
    scanf ("%s", ent1);
    while (ent1[0] != 'X' && countDoubles < 20) {
        if (ent1[0] == 'E') {
            scanf ("%lf", & listOfDoubles [countDoubles]);
            insert_queue (f, & listOfDoubles [countDoubles]);
            countDoubles++;
        }
        else if (ent1[0] == 'D') {
            queue_remove_double (f);
            countDoubles--;
        }
        else {
            print_queue_double (f);
        }
        scanf ("%s", ent1);
    }
    free (f);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46873304_46873470_12_51
46873304_46874971_17_48
Title: To find median of numbers input in an array 
----------------------------------------

int main (void) {
    char numbers [100];
    int num [100];
    int i;
    char *pt;
    printf ("Enter array of numbers separated by comma\n");
    if (!fgets (numbers, sizeof numbers, stdin)) {
        printf ("no input\n");
        return 0;
    }
    pt = strtok (numbers, ", \n");
    if (pt == NULL) {
        printf ("no numbers\n");
        return 0;
    }
    for (i = 0; i < 100 && pt != NULL; i++) {
        num[i] = atoi (pt);
        pt = strtok (NULL, ", \n");
    }
    sort (num, i);
    if (i % 2 == 0) {
        printf ("%d\n", arrayeven_median (num, i));
    }
    else {
        printf ("%d\n", arrayodd_median (num, i));
    }
    return 0;
}
----------------------------------------

int main () {
    printf ("Enter array of numbers separated by comma\n");
    if (!fgets (numbers, sizeof numbers, stdin)) {
        printf ("no input\n");
        return 0;
    }
    char *pt;
    pt = strtok (numbers, ",");
    int i = 0;
    while (pt != NULL) {
        num[i] = atoi (pt);
        pt = strtok (NULL, ",");
        i++;
        if (pt == NULL)
            index1 = i;
    }
    if (index1 % 2 == 0)
        printf ("%d", arrayeven_median (sort (num, index1), index1));
    else
        printf ("%d", arrayodd_median (sort (num, index1), index1));
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46877634_46877830_10_31
46877634_46878327_1_25
Title: Simple shell with fork and exec 
----------------------------------------

int main (void) {
    char line [BUFFER];
    while (1) {
        printf ("$ ");
        if (!fgets (line, BUFFER, stdin))
            break;
        char *p = strchr (line, '\n');
        if (p)
            *p = 0;
        if (strcmp (line, "exit") == 0)
            break;
        char *args [] = {line, (char *) 0};
        int pid = fork ();
        if (pid == 0) {
            execvp (line, args);
            perror ("exec");
            exit (1);
        }
        else {
            wait (NULL);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    char line [BUFFER];
    char *args [100];
    char *path = "/bin/";
    char program [20];
    char command [50];
    while (1) {
        printf ("$ ");
        if (!fgets (line, BUFFER, stdin))
            break;
        memset (command, 0, sizeof (command));
        if (strncmp (line, "exit", (strlen (line) - 1)) == 0)
            break;
        strncpy (command, line, (strlen (line) - 1));
        strcpy (program, path);
        strcat (program, command);
        int pid = fork ();
        if (pid == 0) {
            execl (program, command, NULL);
            exit (0);
        }
        else {
            wait (NULL);
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46903595_46903787_6_17
46903595_46907169_3_31
Title: Printing an inverted triangle with a * at the bottom in C Code 
----------------------------------------

int main () {
    int base_length;
    printf ("Enter the base length:\n");
    scanf ("%d", & base_length);
    if (base_length < 1 || base_length > 79 || base_length % 2 == 0)
        printf ("The maximum base length permitted is 79 and has to be an odd number.\nPlease try again with a valid number.\nThank You!!!");
    else
        triangle (base_length);
}
----------------------------------------

int main (void) {
    int i, base_length, space, x;
    int bias_space = 7, rows;
    const char *X79 = "XXXXXXXXXX" "XXXXXXXXXX" "XXXXXXXXXX" "XXXXXXXXXX" "XXXXXXXXXX" "XXXXXXXXXX" "XXXXXXXXXX" "XXXXXXXXX";
    printf ("Enter the base length:\n");
    scanf ("%d", & base_length);
    if (base_length < 1 || base_length > 79 || (base_length & 1) == 0) {
        printf ("The maximum base length permitted is 79 and has to be an odd number.\nPlease try again with a valid number.\nThank You!!!");
        return -1;
    }
    rows = base_length / 2;
    bias_space -= rows;
    if (bias_space < 0)
        bias_space = 0;
    for (i = rows, space = 0, x = base_length; i--; space++, x -= 2)
        printf ("%*s%.*s\n", bias_space +space, "", x, X79);
    printf ("%*s%c\n", bias_space + space, "", '*');
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46915173_46917576_9_31
46915173_46918827_6_21
Title: Find how many positive numbers there are in my array 
----------------------------------------

int main () {
    int n;
    scanf ("%d", & n);
    int arr [n];
    int i;
    int p = 0;
    int arr_i;
    for (arr_i = 0; arr_i < n; arr_i++) {
        scanf ("%d", & arr [arr_i]);
    }
    for (i = 0; i < n; i++) {
        int arr_index = i;
        if (arr[arr_index] > 0) {
            p++;
        }
    }
    printf ("%d", p);
    return 0;
}
----------------------------------------

int main () {
    char c;
    int n;
    scanf ("%d", & n);
    int *arr;
    int i;
    int p = 0;
    arr = (int *) malloc (n * sizeof (int));
    for (i = 0; i < n; i++) {
        scanf ("%d", & arr [i]);
        if (arr [i] > 0) {p ++;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46929952_46930061_1_42
46929952_46930972_1_21
Title: Algorithm - remove duplicate elements from array 
----------------------------------------

int main () {
    char array [21] = {'P', 'B', 'B', 'B', 'B', 'M', 'B', 'Z', 'P', 'P', 'Z', 'P', 'P', 'P', 'O', 'O', 'O', 'S', 'Z', 'P', 'M'};
    char newarray [21];
    newarray[0] = array[0];
    int count = 1;
    bool find = false;
    int let = 0;
    for (int i = 1; i < 21; i++, count++) {
        int j;
        for (j = 0; j < count; j++) {
            if (array[i] != array[j])
                find = true;
            else if (array[i] == array[j]) {
                find = false;
                break;
            }
        }
        if (find) {
            newarray[i] = array[j];
            let++;
        }
    }
    for (int i = 0; i < let; i++)
        printf ("%c", newarray[i]);
    printf ("\n");
    return 0;
}
----------------------------------------

int main () {
    char arr [21] = {'P', 'B', 'B', 'B', 'B', 'M', 'B', 'Z', 'P', 'P', 'Z', 'P', 'P', 'P', 'O', 'O', 'O', 'S', 'Z', 'P', 'M'};
    int i, j, k;
    int size = sizeof (arr) / sizeof (arr[0]);
    for (i = 0; i < size; i++) {
        for (j = i + 1; j < size;) {
            if (arr[j] == arr[i]) {
                for (k = j; k < 21; k++) {
                    arr[k] = arr[k + 1];
                }
                size--;
            }
            else
                j++;
        }
    }
    for (i = 0; i < size; i++) {
        printf ("%c ", arr [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46932199_46932380_4_47
46932199_46933118_2_55
Title: C delete element of an array 
----------------------------------------

int main () {
    int arr [MAX_SIZE];
    int i, size, pos;
    printf ("Enter size of the array : ");
    scanf ("%d", & size);
    printf ("Enter elements in array : ");
    for (i = 0; i < size; i++) {
        scanf ("%d", & arr [i]);
    }
    printf ("Enter the element position to delete : ");
    scanf ("%d", & pos);
    if (pos == size + 1 || pos < 0) {
        printf ("Invalid position! Please enter position between 1 to %d", size);
    }
    else {
        for (i = pos - 1; i < size - 1; i++) {
            arr[i] = arr[i + 1];
        }
        size--;
    }
    printf ("\nElements of array after delete are : ");
    for (i = 0; i < size; i++) {
        printf ("%d\t", arr [i]);
    }
    return 0;
}
----------------------------------------

int main () {
    int i, size, pos, j;
    printf ("Enter size of the array : ");
    scanf ("%d", & size);
    int array [size];
    for (i = 0; i < size; i++) {
        printf ("Enter element %d : ", i + 1);
        scanf ("%d", & array [i]);
    }
    printf ("Enter position to delete : ");
    scanf ("%d", & pos);
    if (pos >= size || pos < 0) {
        printf ("Invalid position! Please enter position between 0 to %d", size);
    }
    else {
        j = 0;
        for (i = 0; i < size; i++) {
            if (pos == i) {
                continue;
            }
            arr[j] = arr[i];
            j++;
        }
        size--;
    }
    printf ("\nElements of array after delete are : ");
    for (i = 0; i < size; i++) {
        printf ("%d\t", arr [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46932439_46932523_1_12
46932439_46933036_1_11
Title: Function to transpose a matrix in place 
----------------------------------------

void transpose (double **C, double *M, int n) {
    double *T = (double *) malloc (n *n * sizeof (double));
    int i, j;
    for (i = 0; i < n; ++i) {
        for (j = 0; j < n; ++j) {
            T[i + (j * n)] = M[(i * n) + j];
        }
    }
    *C = T;
}
----------------------------------------

void transpose (double *M, int n) {
    int i, j;
    double temp;
    for (i = 0; i < n; i++) {
        for (j = 0; j < i; j++) {
            temp = M[i + j * n];
            M[i + j * n] = M[j + i * n];
            M[j + i * n] = temp;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46932439_46932523_1_12
46932439_46933180_1_18
Title: Function to transpose a matrix in place 
----------------------------------------

void transpose (double **C, double *M, int n) {
    double *T = (double *) malloc (n *n * sizeof (double));
    int i, j;
    for (i = 0; i < n; ++i) {
        for (j = 0; j < n; ++j) {
            T[i + (j * n)] = M[(i * n) + j];
        }
    }
    *C = T;
}
----------------------------------------

void transpose (double *arr, size_t siz) {
    size_t ii, jj;
    for (ii = 0; ii < siz; ii++) {
        for (jj = ii + 1; jj < siz; jj++) {
            double tmp;
            size_t aa, bb;
            aa = ii + siz * jj;
            bb = jj + siz * ii;
            tmp = arr[aa];
            arr[aa] = arr[bb];
            arr[bb] = tmp;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46932439_46933036_1_11
46932439_46933180_1_18
Title: Function to transpose a matrix in place 
----------------------------------------

void transpose (double *M, int n) {
    int i, j;
    double temp;
    for (i = 0; i < n; i++) {
        for (j = 0; j < i; j++) {
            temp = M[i + j * n];
            M[i + j * n] = M[j + i * n];
            M[j + i * n] = temp;
        }
    }
}
----------------------------------------

void transpose (double *arr, size_t siz) {
    size_t ii, jj;
    for (ii = 0; ii < siz; ii++) {
        for (jj = ii + 1; jj < siz; jj++) {
            double tmp;
            size_t aa, bb;
            aa = ii + siz * jj;
            bb = jj + siz * ii;
            tmp = arr[aa];
            arr[aa] = arr[bb];
            arr[bb] = tmp;
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4693884_4693942_4_26
4693884_4694282_4_24
Title: Nested strtok function problem in C 
----------------------------------------

int main (void) {
    char data [] = "a;b;c;d;e\nf;g;h;i;j\n1;2;3;4;5\n";
    char *string = data;
    char *token = strchr (string, '\n');
    while (token != NULL) {
        *token++ = '\0';
        printf ("a = %s\n", string);
        char *token2 = strtok (string, ";");
        while (token2 != NULL) {
            printf ("b = %s\n", token2);
            token2 = strtok (NULL, ";");
        }
        string = token;
        token = strchr (string, '\n');
    }
    return 0;
}
----------------------------------------

int main () {
    char str [] = "a;b;c;d;e\nf;g;h;i;j\n1;2;3;4;5\n";
    char *line;
    char *token;
    char buf [256];
    for (line = strtok (str, "\n"); line != NULL; line = strtok (line +strlen (line) + 1, "\n")) {
        strncpy (buf, line, sizeof (buf));
        printf ("Line: %s\n", buf);
        for (token = strtok (buf, ";"); token != NULL; token = strtok (token +strlen (token) + 1, ";")) {
            printf ("\tToken: %s\n", token);
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46956256_46956658_3_17
46956256_46957782_4_23
Title: Reverse the output of printf function in while loop 
----------------------------------------

void b_adisch (int a, int b) {
    int x, y, mod, mod1, i = 0, j;
    x = a / b;
    mod1 = a % b;
    arr[i++] = mod1;
    do {
        y = x / b;
        mod = x % b;
        x = y;
        arr[i++] = mod;
    }
    while (x != 0);
    for (j = i - 1; j >= 0; j--)
        printf ("%i\n", arr[j]);
}
----------------------------------------

void b_adisch (int value, int base) {
    assert (value >= 0);
    assert (base >= 2 && base <= 10);
    char buffer [sizeof value * CHAR_BIT + 1];
    char *end = &buffer[sizeof buffer - 1];
    *end = '\0';
    do {
        end--;
        int digit = value % base;
        value /= base;
        *end = digit + '0';
    }
    while (value);
    printf ("<%s>\n", end);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46968196_46968892_1_19
46968196_46969368_3_24
Title: Write values in string array in C 
----------------------------------------

int main (void) {
    char a [1000] [30];
    int nr = 0;
    char temp [30];
    printf ("Introdu nr. magazine vizitate: ");
    scanf ("%d", & nr);
    for (int i = 0; i < nr; i++) {
        printf ("Magazin nr: %d\n", i);
        scanf ("%s", & temp);
        strcpy (a [i], temp);
        printf ("temp:%s ||| a[i]:%s\n", temp, a [i]);
    }
    printf ("%s\n", a [0]);
    return (0);
}
----------------------------------------

int main (void) {
    char a [1000] [30];
    int nr = 0;
    char temp [30];
    printf ("Introdu nr. magazine vizitate: ");
    scanf ("%d", & nr);
    for (int i = 0; i < nr; i++) {
        scanf (" %[^\n]s", temp);
        printf ("Magazin nr: %d\n", i);
        strcpy (a [i], temp);
    }
    for (int i = 0; i < nr; i++) {
        printf ("%s\n", a [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46968196_46968892_1_19
46968196_46969533_6_38
Title: Write values in string array in C 
----------------------------------------

int main (void) {
    char a [1000] [30];
    int nr = 0;
    char temp [30];
    printf ("Introdu nr. magazine vizitate: ");
    scanf ("%d", & nr);
    for (int i = 0; i < nr; i++) {
        printf ("Magazin nr: %d\n", i);
        scanf ("%s", & temp);
        strcpy (a [i], temp);
        printf ("temp:%s ||| a[i]:%s\n", temp, a [i]);
    }
    printf ("%s\n", a [0]);
    return (0);
}
----------------------------------------

int main (void) {
    char a [MAXL] [MAXC] = {""};
    char temp [MAXC] = "";
    int nr = 0;
    printf ("Introdu nr. magazine vizitate (1-1000): ");
    if (scanf ("%d", &nr) != 1) {
        fprintf (stderr, "error: invalid input.\n");
        return 1;
    }
    if (nr < 1 || nr > 1000) {
        fprintf (stderr, "error: value out of range.\n");
        return 1;
    }
    for (int i = 0; i < nr; i++) {
        printf ("Magazin nr [%2d]: ", i);
        if (scanf (" %29[^\n]", temp) != 1) {
            fprintf (stderr, "error: user canceled input.\n");
            return 1;
        }
        strcpy (a [i], temp);
    }
    for (int i = 0; i < nr; i++)
        printf ("a[%2d] : '%s'\n", i, a[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46968196_46969368_3_24
46968196_46969533_6_38
Title: Write values in string array in C 
----------------------------------------

int main (void) {
    char a [1000] [30];
    int nr = 0;
    char temp [30];
    printf ("Introdu nr. magazine vizitate: ");
    scanf ("%d", & nr);
    for (int i = 0; i < nr; i++) {
        scanf (" %[^\n]s", temp);
        printf ("Magazin nr: %d\n", i);
        strcpy (a [i], temp);
    }
    for (int i = 0; i < nr; i++) {
        printf ("%s\n", a [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    char a [MAXL] [MAXC] = {""};
    char temp [MAXC] = "";
    int nr = 0;
    printf ("Introdu nr. magazine vizitate (1-1000): ");
    if (scanf ("%d", &nr) != 1) {
        fprintf (stderr, "error: invalid input.\n");
        return 1;
    }
    if (nr < 1 || nr > 1000) {
        fprintf (stderr, "error: value out of range.\n");
        return 1;
    }
    for (int i = 0; i < nr; i++) {
        printf ("Magazin nr [%2d]: ", i);
        if (scanf (" %29[^\n]", temp) != 1) {
            fprintf (stderr, "error: user canceled input.\n");
            return 1;
        }
        strcpy (a [i], temp);
    }
    for (int i = 0; i < nr; i++)
        printf ("a[%2d] : '%s'\n", i, a[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
4697540_4697588_8_20
4697540_4697901_5_13
Title: C/C++: Float Arithmetic Question 
----------------------------------------

int main (void) {
    float x = 1.0f;
    unsigned int count = 0;
    while (x > 0.0f && count < 200) {
        x *= MULTIPLIER;
        printf ("%g %a\n", x, x);
        count++;
    }
    return 0;
}
----------------------------------------

int main () {
    float f = 1.0f;
    float f2 = exp (log (f) +COUNT * log (COEFF));
    int i;
    for (i = 0; i < COUNT; i++)
        f *= COEFF;
    printf ("results for %d iters with %f: LOOP: %g and LOG: %g\n", COUNT, COEFF, f, f2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46985933_46987297_9_52
46985933_46998216_6_37
Title: How to read a text file of numbers line by line and store it into an array in C? 
----------------------------------------

int main (int argc, char **argv) {
    int n = 0, arr [MAXL] = {0};
    char str [MAXL] [MAXC] = {""};
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (n < MAXL && fgets (str[n], MAXC, fp)) {
        size_t len = strlen (str[n]);
        long tmp;
        errno = 0;
        if (len && str[n][len - 1] == '\n')
            str[n][--len] = 0;
        else {
            fprintf (stderr, "error: value at line %d too long.\n", n);
            return 1;
        }
        tmp = strtol (str[n], NULL, BASE);
        if (errno) {
            fprintf (stderr, "error: conversion to int failed '%s'.\n", str [n]);
            return 1;
        }
        if (tmp < INT_MIN || tmp > INT_MAX) {
            fprintf (stderr, "error arr[%ld] exceeds range of int.\n", tmp);
            return 1;
        }
        arr[n++] = tmp;
    }
    if (fp != stdin)
        fclose (fp);
    for (int i = 0; i < n; i++)
        printf ("str[%2d] : %-3s    arr[%2d] : %3d\n", i, str[i], i, arr[i]);
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    char buf [100];
    char *array = NULL;
    size_t i, count = 0;
    FILE *fp = stdin;
    if (argc > 1) {
        fp = fopen (argv[1], "r");
        if (fp == NULL) {
            fprintf (stderr, "cannot open %s: %s\n", argv [1], strerror (errno));
            return 1;
        }
    }
    while (fgets (buf, sizeof buf, fp)) {
        buf[strcspn (buf, "\n")] = '\0';
        array = realloc (array, sizeof (*array) * (count + 2));
        array[count++] = strdup (buf);
    }
    if (fp != stdin)
        fclose (fp);
    for (i = 0; i < count; i++) {
        printf ("%s\n", array [i]);
    }
    free (array);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46986386_46986470_4_20
46986386_46986553_1_14
Title: i can only call a function once to compare 2 numbers using pointers 
----------------------------------------

int main () {
    float *ptr_0, *ptr_1, num_1, num_2;
    float result;
    printf ("Enter Number 1 in x.xxx\n");
    scanf ("%f", & num_1);
    printf ("Enter Number 2 in x.xxx\n");
    scanf ("%f", & num_2);
    ptr_0 = &num_1;
    ptr_1 = &num_2;
    result = findLargest (ptr_0, ptr_1);
    printf ("%.3f is a larger floating number", result);
}
----------------------------------------

int main () {
    float num = 0;
    float num2 = 0;
    float largest = 0;
    getnumbers (& num, & num2);
    largest = findlargest (&num, &num2);
    displaylargest (largest);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46989215_46989291_32_52
46989215_46989291_8_26
Title: How can I save my numbers in an array to have bigger output 
----------------------------------------

int multiply (int x, int res [], int res_size) {
    int carry = 0;
    for (int i = 0; i < res_size; i++) {
        int prod = res[i] * x + carry;
        res[i] = prod % 10;
        carry = prod / 10;
    }
    while (carry) {
        res[res_size] = carry % 10;
        carry = carry / 10;
        res_size++;
    }
    return res_size;
}
----------------------------------------

int multiply (int x, int res [], int res_size)
void factorial (int n) {
    int res [MAX];
    res[0] = 1;
    int res_size = 1;
    for (int x = 2; x <= n; x++)
        res_size = multiply (x, res, res_size);
    cout << "Factorial of given number is n";
    for (int i = res_size - 1; i >= 0; i--)
        cout << res[i];
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
46992930_46993129_3_35
46992930_46993536_3_43
Title: Multiplication table - C 
----------------------------------------

int main () {
    int n, i;
    scanf ("%d", & n);
    int row, col;
    if (n < 1 || n > 9) {
        printf ("input error");
        return 0;
    }
    for (i = 1; i <= n; i++) {
        printf ("\t%d", i);
    }
    printf ("\n");
    for (row = 1; row <= n; row++) {
        printf ("%d\t", row);
        for (col = 1; col <= row; col++) {
            printf ("%dx%d=%d\t", col, row, col * row);
        }
        if (row != n)
            printf ("\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int n, i;
    int row, col;
    printf ("Enter multiplication table size: ");
    scanf ("%d", & n);
    if ((n < 1) || (n > 9)) {
        printf ("Error: table size must be at least 1 and not greater than 9\n");
        return -1;
    }
    for (row = 0; row <= n; row++) {
        if (row == 0) {
            for (i = 1; i <= n; i++) {
                printf ("\t%d", i);
            }
        }
        for (col = 0; col <= row; col++) {
            if ((col == 0) && (row > 0))
                printf ("%d\t", row);
            if ((row >= 1) && (col != 0))
                printf ("%dx%d=%d\t", col, row, col *row);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47026824_47027159_22_36
47026824_47027227_29_52
Title: How to construct and return a String in C? 
----------------------------------------

const char *construct_packet (const char *data, const char *training_chars, const char start_char, char *packet) {
    uint8_t checksum = 0;
    for (uint16_t i = 0; i < strlen (data); i++) {
        checksum += data[i];
    }
    const char checksum_char = checksum;
    strcat (packet, training_chars);
    append (packet, start_char);
    strcat (packet, data);
    append (packet, checksum_char);
    return packet;
}
----------------------------------------

const char *construct_packet (char *packet, const char *data) {
    size_t i = 0;
    for (size_t j = 0; training_chars[j] != '\0'; j++) {
        packet[i++] = training_chars[j];
    }
    packet[i++] = start_char;
    uint8_t checksum = 0;
    for (size_t j = 0; data[j] != '\0'; j++) {
        packet[i++] = data[j];
        checksum += data[j];
    }
    packet[i++] = (char) checksum;
    packet[i] = '\0';
    return packet;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47042252_47042281_1_13
47042252_47042719_1_33
Title: Counting unique characters in string given by user C programming 
----------------------------------------

int main () {
    int numZeros = 0, numOnes = 0;
    char sent [50];
    printf ("Enter a string with no spaces: ");
    scanf (" %s", sent);
    for (int i = 0; sent[i]; ++i)
        (sent[i] == '0') ? numZeros++ : numOnes++;
    printf ("Goodness of the input is %d", (numOnes + numZeros < strlen (sent)) ? 0 : numOnes);
    return 0;
}
----------------------------------------

int main () {
    int numZeros = 0, numOnes = 0, i;
    bool ver = true;
    char sent [50];
    i = 0;
    printf ("Enter a string with no spaces: ");
    scanf (" %s", sent);
    for (i = 0; sent[i] != '\0'; ++i) {
        if (sent[i] == '0')
            ++numZeros;
        else if (sent[i] == '1')
            ++numOnes;
        else {
            ver = false;
            break;
        }
    }
    if (ver) {
        if ((numOnes == 0) && (numZeros == 0))
            printf ("\nGoodness of the input is 0\n");
        else if ((numZeros > 0) && (numOnes == 0))
            printf ("\nGoodness of the input is 0\n");
        else
            printf ("\nGoodness of the input is %d\n", numOnes);
    }
    else {
        printf ("\nGoodness of the input is 0\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47042881_47043353_2_12
47042881_47045394_3_35
Title: While Loop will not Execute in C 
----------------------------------------

int main (void) {
    int num_lines;
    sscanf ("7", "%d", & num_lines);
    printf ("at first, num_lines is %d\n", num_lines);
    char symbol;
    sscanf ("x", "%s", & symbol);
    printf ("but now, num_lines has become %d\n", num_lines);
    printf ("value changed because the second sscanf overwrote\n");
    printf ("      num_lines on the call stack!!!\n");
    return;
}
----------------------------------------

int main (void) {
    int num_lines;
    char symbol;
    printf ("Choose a symbol/character to be displayed */&/+/0/x :  ");
    scanf ("%c", & symbol);
    printf ("Enter a number of lines, greater than or equal to 7, to print :  ");
    scanf ("%d", & num_lines);
    if (num_lines < 7) {
        while (num_lines < 7) {
            printf ("Enter the number of lines to print\nMust be greater than or equal to 7 :  ");
            scanf ("%d", & num_lines);
        }
    }
    int num_symbols;
    printf ("Enter the number of symbols to print per line :  ");
    scanf ("%d", & num_symbols);
    if (num_symbols < 7 || num_symbols > 27) {
        num_symbols = 19;
    }
    while (num_lines > 0) {
        while (num_symbols > 0) {
            printf ("%s", symbol);
            --num_symbols;
        }
        printf ("\n");
        --num_lines;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47044652_47044753_1_11
47044652_47045119_27_39
Title: Returning pointer to an array of struct with single or double pointer 
----------------------------------------

int main () {
    m1 = malloc (sizeof (myStruct));
    for (int i = 0; i < 3; i++) {
        m1->inner[i] = malloc (sizeof (innerStruct));
    }
    innerStruct **array_ptr = getInnerPtrToArray ();
    processInnerStruct (array_ptr);
    return 0;
}
----------------------------------------

int main (void) {
    myStruct m1 = {
        .a = 10
    };
    innerStruct *array_ptr = getInnerPtrToArray (&m1);
    processInnerStruct (array_ptr);
    printf ("m1.a: %d\n", m1.a);
    for (int i = 0; i < NINNER; i++)
        printf ("  .inner[%d]: %d\n", i, m1.inner[i].innerVal);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47047696_47047793_1_30
47047696_47047959_3_20
Title: How to split string in equal size part and copy it to temporary string array for further processing in c language? 
----------------------------------------

int main () {
    char *text = "HELLOGOODMORNING";
    char one [8];
    char two [8];
    strncpy (two, & text [0], 8);
    strcpy (one, & text [7]);
    two[2] = '\0';
    printf ("%s\n", one);
    printf ("%s\n", two);
    return 0;
}
----------------------------------------

void main () {
    char caETF [8 + 1];
    char caText [] = "HELLOGOODMORNING";
    int i, j, len;
    i = 0;
    j = 1;
    len = strlen (caText) + 1;
    for (j; j < len; j++) {
        if (len / j >= 2) {
            caETF[i] = caText[j];
            i++;
        }
    }
    caETF[i] = '\0';
    passtofun (caETF);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47047796_47048078_3_39
47047796_47048193_3_42
Title: While Loop not Executing in C 
----------------------------------------

int main (void) {
    int num_lines;
    do {
        printf ("Enter the number of lines to print\nMust be greater than or equal to 7 :  ");
        scanf ("%d", & num_lines);
    }
    while (num_lines < 7);
    char symbol;
    printf ("Choose a symbol/character to be displayed */&/+/0/x :  ");
    scanf (" %c", & symbol);
    int num_symbols;
    printf ("Enter the number of symbols to print per line :  ");
    scanf ("%d", & num_symbols);
    if (num_symbols < 7 || num_symbols > 27) {
        num_symbols = 19;
    }
    for (int i = 1; i <= num_lines; ++i) {
        if (i % 2 == 0) {
            for (int m = 0; m < i / 2; ++m) {
                printf ("\t");
            }
        }
        for (int j = 0; j < num_symbols; ++j) {
            printf ("%c", symbol);
        }
        printf ("\n");
    }
    return 0;
}
----------------------------------------

int main (void) {
    int num_lines, i, j;
    printf ("Enter a number of lines, greater than or equal to 7, to print :  ");
    scanf ("%d", & num_lines);
    while (num_lines < 7) {
        printf ("Enter the number of lines to print\nMust be greater than or equal to 7 :  ");
        scanf ("%d", & num_lines);
    }
    char symbol;
    printf ("Choose a symbol/character to be displayed */&/+/0/x :  ");
    scanf (" %c", & symbol);
    int num_symbols;
    printf ("Enter the number of symbols to print per line :  ");
    scanf ("%d", & num_symbols);
    if (num_symbols < 7 || num_symbols > 27) {
        num_symbols = 19;
    }
    i = 1;
    while (i <= num_lines) {
        if (i % 2 == 0) {
            j = i / 2;
            while (j != 0) {
                printf ("\t");
                j--;
            }
        }
        j = 0;
        while (j < num_symbols) {
            printf ("%c", symbol);
            j++;
        }
        printf ("\n");
        i++;
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47052973_47053072_1_10
47052973_47053266_20_29
Title: The first character in both string won't swap in C 
----------------------------------------

void swap (char *a, char *b, int size) {
    int i;
    char temp;
    for (i = 0; i < size; i++) {
        temp = a[i];
        a[i] = b[i];
        b[i] = temp;
    }
}
----------------------------------------

void swap (char *a, char *b) {
    int i;
    char temp [101];
    for (i = 0; i < SIZE; i++) {
        temp[i] = *(a + i);
        *(a + i) = *(b + i);
        *(b + i) = temp[i];
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47052973_47053266_5_18
47052973_47053426_13_29
Title: The first character in both string won't swap in C 
----------------------------------------

int main (void) {
    char string1 [SIZE];
    char string2 [SIZE];
    printf ("please enter string 1 :");
    scanf ("%s", string1);
    printf ("please enter string 2 :");
    scanf ("%s", string2);
    swap (string1, string2);
    printf ("string 1 is %s, string 2 is %s\n", string1, string2);
    return 0;
}
----------------------------------------

int main (void) {
    char string1 [SIZE];
    char string2 [SIZE];
    printf ("please enter string 1 :");
    if (scanf ("%s", string1) != 1)
        return 1;
    printf ("please enter string 2 :");
    if (scanf ("%s", string2) != 1)
        return 1;
    swap (string1, string2, SIZE);
    printf ("string 1 is %s, string 2 is %s\n", string1, string2);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47064165_47065041_7_34
47064165_47065246_4_19
Title: How to create an array of 100 random strings in C 
----------------------------------------

int main (void) {
    char *alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "abcdefghijklmnopqrstuvwxyz" "0123456789", *a [MAXS] = {NULL};
    int modlen = MAXL - MINL + 1;
    srand (time (NULL));
    for (int i = 0; i < MAXS; i++) {
        int len = rand () % modlen + MINL;
        if (!(a[i] = calloc (len +1, 1))) {
            fprintf (stderr, "error: memory exhausted 'a[%d]'.\n", i);
            return 1;
        }
        for (int j = 0; j < len; j++)
            a[i][j] = alpha[rand () % NCHR];
        a[i][len] = 0;
    }
    for (int i = 0; i < MAXS; i++) {
        printf ("a[%2d] : %s\n", i, a [i]);
        free (a [i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    int count, number;
    char *randomWord [100];
    for (count = 0; count < 100; count++) {
        int wordLength = 3 + rand () % 8;
        randomWord[count] = malloc (wordLength +1);
        for (number = 0; number < wordLength; number++) {
            randomWord[count][number] = 'A' + rand () % 26;
        }
        randomWord[count][number] = '\0';
        printf ("%s\n", randomWord [count]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47080947_47081124_4_33
47080947_47081156_4_23
Title: C scanf in a for-loop and where to store the input 
----------------------------------------

int main () {
    int c;
    printf ("Please enter number of octets:\n");
    scanf ("%d", & c);
    if ((c > 1) && (c < CHAR_MAX)) {
        int v [c];
        for (int i = 0; i < c; i++) {
            printf ("Please enter octet:\n");
            scanf ("%d", & v [i]);
        }
        for (int i = 0; i < c; i++) {
            printf ("v[%d]: %d\n", i, v [i]);
        }
    }
    else {
        printf ("Input error\n");
    }
    return 0;
}
----------------------------------------

int main () {
    int c;
    int v [c];
    printf ("Please enter number of octets:\n");
    scanf ("%d", & c);
    if ((c > 1) && (c < CHAR_MAX)) {
        for (i = 1; i <= c; i++) {
            printf ("Please enter octet:\n");
            scanf ("%d", x);
            v[c] = x;
        }
        printf ("v[2]: %d\n", v [2]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47122815_47122848_1_11
47122815_47122940_8_19
Title: C doesn't open functions 
----------------------------------------

int main (void) {
    hello ();
    for (i = 0; i < 5; i++) {
        printf ("Give 2 numbers <100 : ");
        scanf ("%d%*c%d%*c", & getal1, & getal2);
        sum (k);
    }
    goodbye ();
}
----------------------------------------

int main (void) {
    hello ();
    for (i = 0; i < 5; i++) {
        printf ("Give 2 numbers <100 : ");
        scanf ("%d%*c%d%*c", & getal1, & getal2);
        sum (getal1, getal2);
    }
    goodbye ();
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47122815_47122848_1_11
47122815_47123011_1_15
Title: C doesn't open functions 
----------------------------------------

int main (void) {
    hello ();
    for (i = 0; i < 5; i++) {
        printf ("Give 2 numbers <100 : ");
        scanf ("%d%*c%d%*c", & getal1, & getal2);
        sum (k);
    }
    goodbye ();
}
----------------------------------------

int main (void) {
    int hello ();
    hello ();
    for (i = 0; i < 5; i++) {
        printf ("Give 2 numbers <100 : ");
        scanf ("%d%*c%d%*c", & getal1, & getal2);
        int sum (int k);
        sum (k);
    }
    int goodbye (void);
    goodbye ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47122815_47122940_8_19
47122815_47123011_1_15
Title: C doesn't open functions 
----------------------------------------

int main (void) {
    hello ();
    for (i = 0; i < 5; i++) {
        printf ("Give 2 numbers <100 : ");
        scanf ("%d%*c%d%*c", & getal1, & getal2);
        sum (getal1, getal2);
    }
    goodbye ();
    return 0;
}
----------------------------------------

int main (void) {
    int hello ();
    hello ();
    for (i = 0; i < 5; i++) {
        printf ("Give 2 numbers <100 : ");
        scanf ("%d%*c%d%*c", & getal1, & getal2);
        int sum (int k);
        sum (k);
    }
    int goodbye (void);
    goodbye ();
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47128162_47128360_2_23
47128162_47131304_2_24
Title: using two arrays for prime number 
----------------------------------------

int main () {
    int x [100], a [100];
    int y, z;
    printf ("here is an array going 1-100 :D\n");
    for (y = 2; y <= 100; y++) {
        x[y] = y;
        printf ("\n%d\n", x [y]);
        for (z = 2; z <= y; z++) {
            if (y % z == 0) {
                a[z] = z;
                break;
            }
        }
        if (y == z) {
            printf ("\n%d is a prime number\n", a [z]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int x [100], a [100];
    int y, z;
    z = 0;
    x[0] = 1;
    printf ("here is an array going 1-100 :D\n");
    for (y = 2; y <= 100; y++) {
        x[y - 1] = y;
        printf ("\n%d\n", x [y - 1]);
        for (z = 2; z <= y / 2; z++) {
            if (a[y - 1] % z == 0) {
                break;
            }
        }
        if (z > y / 2) {
            printf ("\n%d is a prime number\n", x [y - 1]);
            a[z++] = x[y - 1];
        }
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47142595_47142982_20_35
47142595_47143581_31_44
Title: Array of Pointer to Struct 
----------------------------------------

int main (int argc, char **argv) {
    person *people [7];
    for (int index = 0; index < HOW_MANY; index = index + 1) {
        insert (people, * (names + index), ages [index], index);
    }
    for (int index = 0; index < HOW_MANY; index = index + 1) {
        printf ("name: %s, age: %i\n", people [index] -> name, people [index] -> age);
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int index;
    for (index = 0; index < HOW_MANY; index = index + 1) {
        insert (names [index], ages [index], index);
    }
    for (index = 0; index < HOW_MANY; index = index + 1) {
        printf ("name: %s, age: %i\n", people [index] -> name, people [index] -> age);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47143733_47143809_5_46
47143733_47144660_4_21
Title: Applying bubble sort using pointer to pointer concept? 
----------------------------------------

int main (void) {
    const char *a [] = {"milk", "eggs", "bread", "cheese"};
    size_t n = sizeof (a) / sizeof (a[0]);
    const char **p;
    {
        p = malloc (n * sizeof (char *));
        {
            size_t i;
            const char **src = a;
            const char **dst = p;
            for (i = n; i--;)
                *(dst++) = *(src++);
        }
    }
    {
        size_t i;
        int swapped = 1;
        while (swapped) {
            swapped = 0;
            for (i = 0; i < n - 1; ++i) {
                if (strcmp (p[i], p[i + 1]) > 0) {
                    const char *temp = p[i];
                    p[i] = p[i + 1];
                    p[i + 1] = temp;
                    swapped = 1;
                }
            }
        }
    }
    {
        size_t i;
        for (i = 0; i < n; ++i)
            puts (p[i]);
    }
    free (p);
    return 0;
}
----------------------------------------

int main (void) {
    char *a [] = {"milk", "eggs", "bread", "cheese"};
    size_t n = sizeof a / sizeof *a, i, j;
    for (j = 0; j < n; j++)
        for (i = 0; i < n - 1 - j; i++)
            if (strcmp (a[i], a[i + 1]) > 0) {
                char *tmp = a[i];
                a[i] = a[i + 1];
                a[i + 1] = tmp;
            }
    for (i = 0; i < n; i++)
        printf ("a[%zu] : %s\n", i, a[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47150946_47153798_56_72
47150946_47154780_31_56
Title: Reversing an array of linked list recursively isn't reversing all nodes in order 
----------------------------------------

int main () {
    struct Node *head = NULL;
    push (& head, 20);
    push (& head, 4);
    push (& head, 15);
    push (& head, 85);
    printf ("Given linked list\n");
    printList (head);
    reverse (& head);
    printf ("\nReversed Linked list \n");
    printList (head);
    getchar ();
}
----------------------------------------

void main (void) {
    int i;
    node *phead;
    head = phead = (node *) malloc (sizeof (node));
    phead->size = 0;
    for (i = 0; i < 4; i++) {
        node *p;
        phead->next = (node *) malloc (sizeof (node));
        phead = phead->next;
        phead->size = i + 1;
        phead->next = NULL;
    }
    reverse_nodes (& head);
    phead = head;
    while (phead) {
        printf ("%d\r\n", phead -> size);
        phead = phead->next;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47157257_47157463_1_17
47157257_47157503_18_36
Title: How to insert an extra character in a string in C 
----------------------------------------

void replace (char a [], char b []) {
    int idxA = 0, idxB = 0;
    for (idxA; idxA < strlen (a); idxA++, idxB++) {
        b[idxB] = a[idxA];
        if (a[idxA] == 'a') {
            idxB++;
            b[idxB] = a[idxA];
        }
    }
    b[idxB] = '\0';
    printf ("%s\n", b);
}
----------------------------------------

void replace (char a [], char b []) {
    int i, j;
    for (i = 0, j = 0; i < strlen (a); i++, j++) {
        b[j] = a[i];
        if (a[i] == 'a') {
            b[++j] = a[i];
        }
    }
    b[j] = 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47181828_47182191_5_14
47181828_47182363_1_41
Title: How do I define the frame of my rectangle in C 
----------------------------------------

int main () {
    int width, height;
    scanf ("%d%d", & width, & height);
    for (int i = 0; i < height; i++) {
        if (i == 0)
            printer (width, '*');
        else if (i < h - 1)
            printer (1, '*'), printer (height -2, ' '), printer (1, '*');
        else
            printer (width, '*');
        puts ("");
    }
}
----------------------------------------

int main () {
    int height;
    int width;
    int a;
    int b;
    char q = 'a';
    while (q != 'q') {
        printf ("Height of rectangle? ");
        scanf (" %d", & height);
        printf ("Width of rectangle? ");
        scanf (" %d", & width);
        for (a = 0; a < height; a++) {
            for (b = 0; b < width; b++) {
                if ((a == 0) || (a == (height - 1))) {
                    printf ("#");
                }
                else {
                    if ((b == 0) || (b == (width - 1)))
                        printf ("#");
                    else
                        printf (" ");
                }
            }
            printf ("\n");
        }
        printf ("\n\nEnter q to quit, or any other key to Continue:\n");
        scanf (" %c", & q);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47182554_47183954_17_28
47182554_47183998_33_45
Title: How to find the largest digit of a given number 
----------------------------------------

int main () {
    int number;
    printf ("Enter an octal number: ");
    scanf ("%o", & number);
    char hexbuffer [50];
    sprintf (hexbuffer, "%x", number);
    char large = largestdigit (hexbuffer);
    printf ("largest digit of hexadecimal representation (%x) of octal number %o : %c\n", number, number, largestdigit (hexbuffer));
}
----------------------------------------

int main () {
    char str [100];
    int n;
    printf ("Enter a octal number: ");
    scanf ("%o", & n);
    printf ("\nBase Value Highest digit\n");
    for (int i = 2; i < 17; i++) {
        intToStr (n, i, str);
        printf ("%d: %s %c\n", i, str, highestDigit (str));
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47208668_47208918_1_33
47208668_47209779_1_24
Title: Inserting a node in ascending order 
----------------------------------------

void insertFriend (struct friendNode *node, struct friendRecord *list) {
    struct friendNode *temp_node;
    temp_node = list->head;
    if (strcmp (node->firstName, list->head->firstName) < 0) {
        node->next = list->head;
        list->head = node;
    }
    if (temp_node->next == NULL) {
        temp_node->next = node;
        list->tail = node;
    }
    else {
        while (strcmp (node->firstName, temp_node->next->firstName) >= 0)
            temp_node = temp_node->next;
        if (temp_node->next == NULL) {
            temp_node->next = node;
            list->tail = node;
            return;
        }
        node->next = temp_node->next;
        temp_node->next = node;
    }
}
----------------------------------------

void insertFriend (struct friendNode *node, struct friendRecord *list) {
    struct friendNode *pre = NULL;
    struct friendNode *post = list->head;
    while (post && strcmp (node->firstName, post->firstName) >= 0) {
        pre = post;
        post = post->next;
    }
    if (pre == NULL) {
        list->head = node;
    }
    else {
        pre->next = node;
    }
    node->next = post;
    if (post == NULL) {
        list->tail = node;
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47226251_47226335_11_30
47226251_47226379_9_27
Title: C - Pointer to dynamic array of structs 
----------------------------------------

int main (void) {
    concert *concertArray = malloc (sizeof (concert[5]));
    concert newConcert;
    newConcert.nameOfBand = "name1";
    newConcert.location = "location1";
    concertArray[0] = newConcert;
    printf ("Name: %s, Location: %s\n", concertArray [0].nameOfBand, concertArray [0].location);
    free (concertArray);
    return 0;
}
----------------------------------------

int main () {
    int i;
    concertArray = malloc (sizeof (concert *) * 5);
    addConcert ("name1", "location1");
    for (i = 0; i < nConcerts; i++)
        printf ("Name: %s, location: %s\n", concertArray[i]->nameOfBand, concertArray[i]->location);
    for (i = 0; i < nConcerts; i++) {
        free (concertArray [i] -> nameOfBand);
        free (concertArray [i] -> location);
        free (concertArray [i]);
    }
    free (concertArray);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47231297_47231531_1_19
47231297_47231744_1_19
Title: C - Determining alphabetical order of characters/strings 
----------------------------------------

int cmpstr (const char *s1, const char *s2) {
    while (*s1 != '\0' && *s2 != '\0') {
        if (*s1 < *s2) {
            return -1;
        }
        else if (*s1 > *s2) {
            return 1;
        }
        s1++;
        s2++;
    }
    return 0;
}
----------------------------------------

int cmpstr (const char *s1, const char *s2) {
    while (*s1 && *s2 && *s1 == *s2) {
        s1++;
        s2++;
    }
    int result = (*s1 - *s2);
    if (result < 0)
        result = -1;
    else if (result > 0)
        result = 1;
    return result;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47232241_47232326_2_25
47232241_47248744_7_103
Title: sorting letters in a string with double pointer 
----------------------------------------

int main (int argc, char *argv []) {
    char *string [SIZE] = {"dfghgfd", "rtyukljgfds", "sdsf", "fdgdfhg", "fgfhgjghj", "nmjlkjlk", "qwasazx", "zxdfd", "opiljkg", "vcxdfgfd", "fgfhgfhgh", "bvvh", "bb", "dfsdretr", "reuio", "cvbmhg", "fgfdyrtyty", "fgdgdfgdfgdf", "g", "fgdfg", "ghghgfhv"};
    int k;
    char *temp;
    for (k = 0; k < SIZE - 1; k++) {
        for (j = k + 1; j < SIZE; j++) {
            if (strcmp (string[k], string[j]) > 0) {
                temp = string[k];
                string[k] = string[j];
                string[j] = temp;
            }
        }
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char *string [SIZE] = {"dfghgfd", "rtyukljgfds", "sdsf", "fdgdfhg", "fgfhgjghj", "nmjlkjlk", "qwasazx", "zxdfd", "opiljkg", "vcxdfgfd", "fgfhgfhgh", "bvvh", "bb", "dfsdretr", "reuio", "cvbmhg", "fgfdyrtyty", "fgdgdfgdfgdf", "g", "fgdfg", "ghghgfhv"};
    int Anz, i;
    int width = 0, len = 0;
    char **new_string;
    Anz = sizeof (string) / sizeof (*string);
    if (NULL == (new_string = malloc (Anz * sizeof (*new_string)))) {
        fprintf (stderr, "malloc failed\n");
        return 0;
    }
    for (i = 0; i < Anz; i++) {
        len = strlen (string[i]) + 1;
        if (len > width) {
            width = len;
        }
        if (NULL == (new_string[i] = malloc (width))) {
            fprintf (stderr, "[i] malloc failed\n");
            while (i) {
                i--;
                free (new_string [i]);
            }
            free (new_string);
            return 0;
        }
        strcpy (new_string [i], string [i]);
    }
    char swap;
    int sorted;
    int prior;
    int each;
    int start;
    word = 0;
    while (word < Anz) {
        start = 0;
        sorted = start;
        prior = start;
        each = start + 1;
        printf ("Anz[%2d] is %-*s", word, width, new_string [word]);
        while ('\0' != new_string[word][each]) {
            while (prior >= 0 && new_string[word][each] < new_string[word][prior]) {
                swap = new_string[word][each];
                new_string[word][each] = new_string[word][prior];
                new_string[word][prior] = swap;
                each--;
                prior--;
            }
            sorted++;
            prior = sorted;
            each = prior + 1;
        }
        printf (" sorted %s\n", new_string [word]);
        word++;
    }
    word = 0;
    while (word < Anz) {
        free (new_string [word]);
        word++;
    }
    free (new_string);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47247220_47247369_81_107
47247220_47248777_14_23
Title: Find a first pseudopalindrome in the array 
----------------------------------------

int main () {
    int n, i, j, k, fnd;
    char T [10000] [101], temp [101];
    scanf ("%d", & n);
    for (i = 0; i < n; i++) {
        scanf ("%s", & T [i]);
    }
    for (i = 1; i < n; i++) {
        strcpy (temp, T [i]);
        j = i - 1;
        while (j >= 0 && compare (T[j], temp) == 1) {
            strcpy (T [j + 1], T [j]);
            j--;
        }
        strcpy (T [j + 1], temp);
    }
    for (i = 0; i < n; i++) {
        fnd = binarysearch (reverse (T[i]), T, n);
        printf ("%d", fnd);
    }
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    for (int i = 1; i < argc; i++) {
        if (isspeudopalindrom (argv[i]))
            printf ("palindrom\n");
        else
            printf ("not palindrom\n");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47269372_47269844_1_19
47269372_47355972_1_22
Title: How to fix unhandled exception access violation 
----------------------------------------

void intersect (size_t row, size_t col, int a1 [] [col], int a2 [] [col]) {
    size_t i = 0, j = 0, x = 0, y = 0;
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            for (x = 0; x < row; x++) {
                for (y = 0; y < col; y++) {
                    if (a1[i][j] == a2[x][y])
                        printf ("%d\t", a1[i][j]);
                }
            }
        }
    }
}
----------------------------------------

void intersect (int **ptr1, int **ptr2, size_t row, size_t col) {
    int i = 0, j = 0, x = 0, y = 0;
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            for (x = 0; x < row; x++) {
                for (y = 0; y < col; y++) {
                    int a = *(int*) ((DWORD) ptr1 + (i * (col * sizeof (int))) + (j * sizeof (int)));
                    int b = *(int*) ((DWORD) ptr2 + (x * (col * sizeof (int))) + (y * sizeof (int)));
                    if (a == b)
                        printf ("%d\t", a);
                }
            }
        }
    }
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47272368_47272476_4_34
47272368_47272911_4_23
Title: A program that prints even and odd characters from a string 
----------------------------------------

int main (void) {
    char str [41];
    char odd [21];
    char even [21];
    int i = 0;
    int j = 0;
    int k = 0;
    printf ("Enter a string (40 characters maximum): ");
    scanf ("%s", str);
    while (i < strlen (str)) {
        if (i % 2 == 0) {
            odd[j++] = str[i];
        }
        else {
            even[k++] = str[i];
        }
        i++;
    }
    odd[j] = '\0';
    even[k] = '\0';
    printf ("The even string is:%s\n ", even);
    printf ("The odd string is:%s\n ", odd);
    return 0;
}
----------------------------------------

int main (void) {
    char str [41];
    printf ("Enter a string (40 characters maximum): ");
    fflush (stdout);
    if (scanf ("%40s", str) == 1) {
        int i;
        printf ("The even string is:");
        for (i = 0; str[i]; i++) {
            if (i % 2 == 0) {
                str[i / 2] = str[i];
            }
            else {
                putchar (str [i]);
            }
        }
        printf ("\n");
        printf ("The odd string is:%.*s\n ", (i + 1) / 2, str);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47272368_47272518_3_29
47272368_47272911_4_23
Title: A program that prints even and odd characters from a string 
----------------------------------------

int main (void) {
    char str [41];
    char odd [21];
    char even [21];
    int i = 0;
    int j = 0;
    int k = 0;
    printf ("Enter a string (40 characters maximum): ");
    if (scanf ("%40s", str) != 1)
        return 1;
    while (str[i] != '\0') {
        if (i % 2 == 0) {
            odd[j++] = str[i];
        }
        else {
            even[k++] = str[i];
        }
        i++;
    }
    odd[j] = even[k] = '\0';
    printf ("The even string is: %s\n", even);
    printf ("The odd string is: %s\n", odd);
    return 0;
}
----------------------------------------

int main (void) {
    char str [41];
    printf ("Enter a string (40 characters maximum): ");
    fflush (stdout);
    if (scanf ("%40s", str) == 1) {
        int i;
        printf ("The even string is:");
        for (i = 0; str[i]; i++) {
            if (i % 2 == 0) {
                str[i / 2] = str[i];
            }
            else {
                putchar (str [i]);
            }
        }
        printf ("\n");
        printf ("The odd string is:%.*s\n ", (i + 1) / 2, str);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47296030_47296323_1_17
47296030_47296566_29_39
Title: C: How to find the day name for a given day of the year input by user 
----------------------------------------

void countDays (int day, int month, int daysInMonth []) {
    char c [] [15] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
    int totaldays = 0;
    for (int i = 0; i < month - 1; i++) {
        totaldays += daysInMonth[i];
    }
    totaldays += day;
    printf ("There are %d days \n", totaldays);
    printf ("\n day : %s", c [(totaldays - 1) % 7]);
    return;
}
----------------------------------------

int countDays (int day, int month) {
    if (day > DAYS_IN_MONTH[month - 1])
        return -1;
    int num_days = 0;
    for (int i = 0; i < month - 1; i++) {
        num_days += DAYS_IN_MONTH[i];
    }
    return num_days + day;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47308654_47310439_1_35
47308654_47311251_1_46
Title: Processes accessing a Shared Memory segment returning different values 
----------------------------------------

int main () {
    int shmid;
    struct timeval CurTime;
    struct timespec nTime;
    struct AlgoShm *shmaddr, *ptr;
    if ((shmid = shmget (key, SHM_SIZE, 0644 | IPC_CREAT)) < 0) {
        perror ("shmget:error");
    }
    else {
        printf ("Shm created key=[%d] \n Segment Id [%d] ", key, shmid);
        ptr = (struct AlgoShm *) shmat (shmid, 0, 0);
        if (shmaddr < 0) {
            perror (" shmat :error");
        }
        else {
            printf (" SHM Segment attached at [%x] ", ptr);
        }
        clock_gettime (CLOCK_REALTIME, & nTime);
        printf (" Time in N secs[%ld] \n ", nTime.tv_nsec);
        ptr->head = 5;
        ptr->tail = 3;
        ptr->fFlag = 'a';
        ptr->algoshm.time = 10;
        ptr->algoshm.pno = 11;
        printf (" AlgoThrottle|ptr->head [%x] ", ptr -> head);
    }
    system ("./AlgoRead");
    return 0;
}
----------------------------------------

int main () {
    int shmid;
    struct timeval CurTime;
    struct timespec nTime;
    struct AlgoShm *shmaddr, *ptr;
    ptr = (struct AlgoShm *) malloc (sizeof (struct AlgoShm));
    if ((shmid = shmget (key, SHM_SIZE, 0644 | IPC_CREAT)) < 0) {
        perror ("shmget:error");
    }
    else {
        printf ("Shm created key=[%d] \n Segment Id [%d] ", key, shmid);
        shmaddr = (struct AlgoShm *) shmat (shmid, 0, 0);
        if (shmaddr < 0) {
            perror (" shmat :error");
        }
        else {
            printf (" SHM Segment attached at [%x] ", shmaddr);
        }
        clock_gettime (CLOCK_REALTIME, & nTime);
        printf (" Time in N secs[%ld] \n ", nTime.tv_nsec);
        ptr->head = 5;
        ptr->tail = 3;
        ptr->fFlag = '0';
        ptr->algoshm.time = 0;
        ptr->algoshm.pno = 1;
        shmaddr->head = ptr->head;
        shmaddr->tail = ptr->tail;
        shmaddr->fFlag = ptr->fFlag;
        printf (" AlgoThrottle|ptr->head [%d] \n", ptr -> head);
        system ("./AlgoRead");
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47317781_47317898_5_32
47317781_47320765_14_64
Title: Using strtok() to store numeric values in a 2D array 
----------------------------------------

int main () {
    const char *spaces = "\n\t ";
    int myArray [240] [30];
    char line [240];
    char *token;
    int i, n, j;
    FILE *fp;
    fp = fopen ("array_list.txt", "rt");
    i = 0;
    while (fgets (line, sizeof (line), fp)) {
        j = 1;
        token = strtok (line, spaces);
        while (token) {
            n = atoi (token);
            myArray[i][j] = n;
            j++;
            printf ("%d ", myArray [i] [j]);
            token = strtok (NULL, spaces);
        }
        myArray[i][0] = j;
        printf ("\n");
        i++;
    }
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    int arr [AMAX] = {0}, n = 0;
    char buf [BUF_SIZ] = "";
    FILE *fp = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!fp) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (buf, BUF_SIZ, fp)) {
        char *p = buf, *ep = p;
        size_t len = strlen (buf);
        if (len == BUF_SIZ - 1 && buf[len - 1] != '\n') {
            fprintf (stderr, "error: line too long.\n");
            break;
        }
        while (n < AMAX && *p) {
            errno = 0;
            long tmp = strtol (p, &ep, BASE);
            if (p != ep) {
                if (!errno && INT_MIN <= tmp && tmp <= INT_MAX)
                    arr[n++] = (int) tmp;
                p = ep;
            }
            for (; *p; p++) {
                if ('0' <= *p && *p <= '9')
                    break;
                if ((*p == '+' || *p == '-') && '0' <= *(p + 1) && *(p + 1) <= '9')
                    break;
            }
        }
    }
    if (fp != stdin)
        fclose (fp);
    for (int i = 0; i < n; i++)
        printf (" arr[%3d] = %d\n", i, arr[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47343436_47343610_6_24
47343436_47344424_7_39
Title: Program that reads multiple lines from a file and converts to a single line string 
----------------------------------------

int main (int argc, char **argv) {
    FILE *input = fopen (argv[1], "r");
    char *line = NULL;
    char buffer [100] = {0};
    char temp [200] = {0};
    line = fgets (buffer, 100 * sizeof (char), input);
    while (line != NULL) {
        strcat (temp, line);
        temp[strlen (temp) - 1] = '\0';
        line = fgets (buffer, 100 * sizeof (char), input);
    }
    printf ("%s\n", temp);
    fclose (input);
}
----------------------------------------

int main (int argc, char **argv) {
    char buffer [BUFSZ] = "", temp [TMPSZ] = "";
    size_t nchr = 0;
    FILE *input = argc > 1 ? fopen (argv[1], "r") : stdin;
    if (!input) {
        fprintf (stderr, "error: file open failed '%s'.\n", argv [1]);
        return 1;
    }
    while (fgets (buffer, BUFSZ, input)) {
        size_t len = strlen (buffer);
        if (len && buffer[len - 1] == '\n')
            buffer[--len] = 0;
        if (TMPSZ <= nchr + len + 1) {
            strncat (temp, buffer, TMPSZ - nchr - 1);
            nchr = TMPSZ - 1;
            temp[nchr] = 0;
            break;
        }
        strcat (temp, buffer);
        nchr += len;
    }
    if (input != stdin)
        fclose (input);
    printf ("'%s'\n(%zu chars)\n", temp, nchr);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47344278_47344403_2_10
47344278_47344908_4_17
Title: How to print leading spaces before char array in C? 
----------------------------------------

int main () {
    char a [30];
    char b [30];
    fgets (a, 30, stdin);
    fgets (b, 30, stdin);
    printf ("%s \n", a);
    printf ("%s", b);
    return 0;
}
----------------------------------------

int main (void) {
    char a [30];
    char b [30];
    if (fgets (a, sizeof (a), stdin) != 0 && fgets (b, sizeof (b), stdin) != 0) {
        a[strcspn (a, "\n")] = '\0';
        b[strcspn (b, "\n")] = '\0';
        printf ("[%s]\n", a);
        printf ("[%s]\n", b);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47347651_47347840_18_29
47347651_47348027_19_31
Title: Declaration and use of function in c 
----------------------------------------

int day_of_year (int day, int month, int year) {
    int i = 0, count = 0;
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (year % 4 == 0)
        a[2]++;
    count = day;
    for (i = 0; i < month; i++)
        count += a[i];
    return count;
}
----------------------------------------

int day_of_year (int day, int month, int year) {
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int count = day, i;
    if (year % 4 == 0)
        a[1]++;
    for (i = 0; i < month - 1; i++)
        count += a[i];
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47347651_47347840_5_16
47347651_47347879_5_21
Title: Declaration and use of function in c 
----------------------------------------

int main () {
    int day, month, year, count = 0;
    printf ("Enter the day: ");
    scanf ("%d", & day);
    printf ("Enter the month: ");
    scanf ("%d", & month);
    printf ("Enter the year: ");
    scanf ("%d", & year);
    count = day_of_year (day, month, year);
    printf ("Count: %d", count);
    return 0;
}
----------------------------------------

int main () {
    int day, month, year, count;
    printf ("\nEnter the day: ");
    scanf ("%d", & day);
    printf ("\nEnter the month: ");
    scanf ("%d", & month);
    printf ("\nEnter the year: ");
    scanf ("%d", & year);
    count = day_of_year (day, month, year);
    printf ("\nCount: %d", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47347651_47347879_24_35
47347651_47348027_19_31
Title: Declaration and use of function in c 
----------------------------------------

int day_of_year (int day, int month, int year) {
    int count = 0, i = 0;
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (year % 4 == 0)
        a[1]++;
    count = day;
    for (i = 0; i < month; i++)
        count += a[i];
    return count;
}
----------------------------------------

int day_of_year (int day, int month, int year) {
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int count = day, i;
    if (year % 4 == 0)
        a[1]++;
    for (i = 0; i < month - 1; i++)
        count += a[i];
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47347651_47347879_5_21
47347651_47347975_5_17
Title: Declaration and use of function in c 
----------------------------------------

int main () {
    int day, month, year, count;
    printf ("\nEnter the day: ");
    scanf ("%d", & day);
    printf ("\nEnter the month: ");
    scanf ("%d", & month);
    printf ("\nEnter the year: ");
    scanf ("%d", & year);
    count = day_of_year (day, month, year);
    printf ("\nCount: %d", count);
    return 0;
}
----------------------------------------

int main () {
    int day, month, year, i, count = 0;
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    printf ("Enter the day: ");
    scanf ("%d", & day);
    printf ("Enter the month: ");
    scanf ("%d", & month);
    printf ("Enter the year: ");
    scanf ("%d", & year);
    count = day_of_year (day, month, year);
    printf ("Count: %d", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47347651_47347879_5_21
47347651_47348027_5_17
Title: Declaration and use of function in c 
----------------------------------------

int main () {
    int day, month, year, count;
    printf ("\nEnter the day: ");
    scanf ("%d", & day);
    printf ("\nEnter the month: ");
    scanf ("%d", & month);
    printf ("\nEnter the year: ");
    scanf ("%d", & year);
    count = day_of_year (day, month, year);
    printf ("\nCount: %d", count);
    return 0;
}
----------------------------------------

int main () {
    int day, month, year, i, count = 0;
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    printf ("Enter the day: ");
    scanf ("%d", & day);
    printf ("Enter the month: ");
    scanf ("%d", & month);
    printf ("Enter the year: ");
    scanf ("%d", & year);
    count = day_of_year (day, month, year);
    printf ("Count: %d", count);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47347651_47347975_19_27
47347651_47348027_19_31
Title: Declaration and use of function in c 
----------------------------------------

int day_of_year (int day, int month, int year) {
    int i, count;
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (year % 4 == 0)
        a[2]++;
    count = day;
    for (i = 0; i < month; i++)
        count += a[i];
    return count;
}
----------------------------------------

int day_of_year (int day, int month, int year) {
    int a [] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int count = day, i;
    if (year % 4 == 0)
        a[1]++;
    for (i = 0; i < month - 1; i++)
        count += a[i];
    return count;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47364913_47367227_1_14
47364913_47398089_12_32
Title: How to work with functions and outputs C 
----------------------------------------

int main () {
    int numbers [4];
    int maxim = -99999;
    for (int count = 0; count < 4; count++) {
        scanf ("%d", & numbers [count]);
        printf ("%d ", numbers [count]);
        if (numbers[count] > maxim) {
            maxim = numbers[count];
        }
    }
    printf ("\n");
    printf ("Maximum Value : %d\n", maxim);
    return 0;
}
----------------------------------------

int main (void) {
    int numbers [MAX_NUMBERS];
    for (int count = 0; count < MAX_NUMBERS; count++) {
        if (1 != scanf ("%d", &numbers[count])) {
            fprintf (stderr, "scanf for number: %d failed\n", count + 1);
            exit (EXIT_FAILURE);
        }
        printf (" %d", numbers [count]);
    }
    max_numb (numbers);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47376063_47376245_14_25
47376063_47376364_13_26
Title: Get words from string array in c using whitespace character 
----------------------------------------

void words (char str []) {
    int i = 0;
    printf ("string = %s \n", str);
    while (str[i] != '\0') {
        if ((str[i] == ' ' && str[i + 1] != ' ') || str[i + 1] == '\0')
            db++;
        i++;
    }
    printf ("db = %d \n", db);
}
----------------------------------------

void words (char str []) {
    size_t i = 0;
    size_t len = strlen (str);
    while (i != len) {
        if (str[i] == ' ')
            db++;
        i++;
    }
    if (i)
        i++;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47376654_47376927_1_42
47376654_47377721_11_22
Title: Reversing words in a string using three pointers? 
----------------------------------------

void reverse_words (char *arr, int size) {
    char *ptr = arr;
    char *new_array = (char *) malloc (sizeof (char *) * size);
    printf ("initial : %u \n", ptr);
    while (*ptr != '\0') {
        ptr++;
    }
    int j = 0;
    ptr--;
    printf ("first : %c : %u  \n", * ptr, ptr);
    for (int i = size - 1; i >= 0; i--) {
        if (*ptr != ' ') {
            ptr--;
        }
        else {
            char *temp = ptr;
            temp++;
            while (*temp != '\0' && *temp != ' ') {
                new_array[j++] = *temp;
                temp++;
            }
            if (i != 0) {
                new_array[j++] = *ptr;
                ptr--;
            }
        }
    }
    new_array[j] = '\0';
    printf ("new = %s \n", new_array);
    strcpy (arr, new_array);
}
----------------------------------------

void reverse_words (char *arr) {
    for (int i = 0, j = 0;; i = j) {
        for (; str[i] == ' '; i++)
            continue;
        if (str[i] == '\0')
            break;
        for (j = i; str[j] != '\0' && str[j] != ' '; j++)
            continue;
        reverse_mem (str + i, j - i);
    }
    reverse_mem (str, size);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47397098_47398707_36_68
47397098_47399044_1_34
Title: Why do I see inconsistencies in my code? 
----------------------------------------

int main (void) {
    uint32_t error_hist [FLT_FULL_EXP_RANGE] = {0};
    bin_error_in_trig_equality (0.0f, error_hist);
    for (int i = -149; i <= 127; i++) {
        float lo = ldexpf (1.0f, i);
        float hi = ldexpf (1.0f, i +1);
        for (float x = lo; x < hi; x = nextafterf (x, hi)) {
            bin_error_in_trig_equality (x, error_hist);
            bin_error_in_trig_equality (- x, error_hist);
        }
    }
    printf ("bin,count\n");
    if (error_hist[0])
        printf ("0.0,%" PRIu32 "\n", error_hist[0]);
    for (int i = 1; i < FLT_FULL_EXP_RANGE; i++) {
        if (error_hist[i])
            printf ("2^%d,%" PRIu32 "\n", i -FLT_FULL_EXP_BIAS, error_hist[i]);
    }
    return 0;
}
----------------------------------------

int main (void) {
    unsigned good = 0;
    unsigned bad = 0;
    unsigned nan = 0;
    union {
        unsigned i;
        float f;
    } u = {0};
    do {
        float f = u.f;
        if (isnan (f)) {
            nan++;
        }
        else {
            float s = sinf (f);
            float ss = powf (s, 2);
            float c = cosf (f);
            float cc = powf (c, 2);
            float r = ss + cc;
            if (r == 1) {
                good++;
            }
            else if (r > 1 || r < 1) {
                static double rmax = 0.0;
                if (fabs (r -1) > rmax) {
                    rmax = fabs (r -1);
                    printf ("f:%.10e r:%.10e\n", f, rmax);
                    fflush (stdout);
                }
                bad++;
            }
        }
    }
    while (++u.i);
    printf ("good:%u bad:%u nan:%u\n", good, bad, nan);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47417197_47421694_16_50
47417197_47422358_13_24
Title: Portable ISR-safe data-passing 
----------------------------------------

int32_t SafeI32_ReadFromBack (sSafeI32_Fore2Back *si) {
    if (si->pendingData) {
        if (si->index == 0) {
            si->index = 1;
        }
        else {
            si->index = 0;
        }
        si->pendingData = 0;
    }
    return si->value[index];
}
----------------------------------------

int32_t SafeI32_ReadFromBack (volatile sSafeI32_Fore2Back *si) {
    int32_t rtn;
    uint32_t ctr;
    do {
        ctr = si->counter;
        rtn = si->value;
    }
    while (ctr != si->counter);
    return rtn;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47427179_47427594_1_23
47427179_47427764_6_37
Title: Variable inside 2 while loops won't reset 
----------------------------------------

int main () {
    char string [500] [500];
    int letterWords [15] = {0};
    int a, i, count;
    printf ("Enter several lines of text (end with ^D).\n");
    for (a = 0; a < 500 && fgets (string[a], 500, stdin); a++)
        ;
    for (i = 0; i < a; i++) {
        for (count = 0; string[i][count] && string[i][count] != '\n'; count++)
            ;
        printf ("Line %d: %d\n", i, count);
        letterWords[count]++;
    }
    for (i = 0; i < 15; i++) {
        if (letterWords[i]) {
            printf ("%d %d\n", i, letterWords [i]);
        }
    }
    return 0;
}
----------------------------------------

int main () {
    int n = 0;
    char string [MAX] [MAX] = {""};
    printf ("\nenter several lines of text\n" "[ctrl+d (ctrl+z on windows) when done]\n\n");
    for (; n < MAX;) {
        printf ("line[%2d]: ", n);
        if (fgets (string[n], MAX, stdin)) {
            size_t len = strlen (string[n]);
            if (len && string[n][len - 1] == '\n')
                string[n][--len] = 0;
            else {
                fprintf (stderr, "error: line too long '%d'.\n", n);
                return 1;
            }
            n++;
        }
        else {
            printf ("\nall done!\n\n");
            break;
        }
    }
    for (int i = 0; i < n; i++)
        printf ("string[%2d] (%3zu chars) : '%s'\n", i, strlen (string[i]), string[i]);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47446432_47446466_1_16
47446432_47447228_5_23
Title: Counting average from random numbers from 0 to 1 
----------------------------------------

int main () {
    srand ((int) time (NULL));
    int N = 10;
    float a = 1.0f, r, sum = 0.0f;
    for (int i = 0; i < N; i++) {
        r = ((float) rand () / (float) (RAND_MAX)) * a;
        printf ("%f\n", r);
        sum += f;
    }
    printf ("sum = %f\n", sum / N);
    return 0;
}
----------------------------------------

int main () {
    srand ((int) time (NULL));
    int lowerLimit = 10 + 1, upperLimit = 10000;
    int N = lowerLimit + rand () % (upperLimit - lowerLimit);
    float a, sum = 0.0;
    for (int i = 0; i < N; i++) {
        a = ((float) rand () / (float) (RAND_MAX));
        sum += a;
        printf ("Float %i = %f\n", i, a);
    }
    printf ("Average = %f\n", sum / N);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47451568_47452098_5_20
47451568_47456917_5_24
Title: Terminate an array input taking when input is -1 without using break? 
----------------------------------------

int main (void) {
    int input [INPUT_SZ];
    size_t i = 0;
    while (i < INPUT_SZ && scanf ("%d", &input[i]) == 1 && input[i] != -1) {
        ++i;
    }
    puts ("You entered:");
    for (size_t j = 0; j < i; j++) {
        printf ("%d\n", input [j]);
    }
    return 0;
}
----------------------------------------

int main () {
    int ar [MAX], i, count;
    for (i = 0; i < MAX; i++) {
        scanf ("%d", & ar [i]);
        if (ar[i] == -1) {
            count = i--;
            i = MAX;
        }
    }
    for (i = 0; i < count; i++) {
        printf ("Element %d: %d\t", i + 1, ar [i]);
    }
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47454491_47454687_1_17
47454491_47454692_1_20
Title: C - function that creates linked list only returns first node 
----------------------------------------

node *foo () {
    node *head = malloc (sizeof (node));
    head->next = NULL;
    head->data = 0;
    node *tmp = head;
    int i;
    for (i = 1; i < 5; i++) {
        node *newNode = malloc (sizeof (node));
        newNode->data = i;
        newNode->next = NULL;
        tmp->next = newNode;
        tmp = tmp->next;
    }
    return head;
}
----------------------------------------

node *foo (size_t n, int init_value) {
    node *head = NULL;
    node **current = &head;
    for (size_t i = 0; i < n; i++) {
        *current = malloc (sizeof (node));
        if (*current) {
            (*current)->data = init_value++;
            (*current)->next = NULL;
            current = &(*current)->next;
        }
    }
    return head;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47495588_47495699_5_28
47495588_47495859_4_17
Title: I've written a code for reverse a string. But in output it is generating some garbage. Why? 
----------------------------------------

int main (void) {
    char a [N], b [N];
    fgets (a, sizeof (a), stdin);
    size_t length = 0;
    while (a[length] != '\0' && a[length] != '\n')
        ++length;
    a[length] = '\0';
    puts (a);
    size_t i = 0;
    for (; i < length; i++)
        b[i] = a[length - i - 1];
    b[i] = '\0';
    printf ("\n___REVERSED TEXT___\n");
    puts (b);
    return 0;
}
----------------------------------------

int main (void) {
    char a [50], b [50];
    printf ("\nWhat is the word?");
    scanf ("%s", a);
    fflush (stdin);
    int j;
    printf ("Length: %lu", strlen (a));
    for (j = strlen (a) - 1; j >= 0; j--) {
        b[strlen (a) - 1 - j] = a[j];
    }
    printf ("\n___REVERSED TEXT___\n");
    printf ("\n%s", b);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47498959_47499007_6_16
47498959_47499084_4_27
Title: C: Doubling each letter in a String 
----------------------------------------

int main (int argc, char const *argv []) {
    char *srcValue = "Hello World";
    char *output = calloc (strlen (srcValue) *2 + 1, sizeof (char));
    for (int i = 0; i < strlen (srcValue); i++) {
        output[2 * i] = srcValue[i];
        output[2 * i + 1] = srcValue[i];
    }
    output[2 * strlen (srcValue)] = '\0';
    printf ("%s\n", output);
    return 0;
}
----------------------------------------

int main () {
    char *destValue;
    char *srcValue;
    srcValue = malloc (len * sizeof (char));
    destValue = malloc ((2 * len * sizeof (char)) + 1);
    printf ("Please enter valid text: ");
    scanf ("%s", srcValue);
    int j = 0;
    for (int i = 0; srcValue[i] != '\0'; i++) {
        destValue[j++] = srcValue[i];
        destValue[j++] = srcValue[i];
    }
    destValue[j] = '\0';
    puts (destValue);
    free (destValue);
    free (srcValue);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47499842_47500015_7_23
47499842_47500212_4_39
Title: C: Printing only the last n lines (tail program) 
----------------------------------------

int main () {
    char First [1024], Second [1024];
    int flag = 1;
    while (flag) {
        scanf ("%s", & First);
        scanf ("%s", & Second);
        printf ("enter 0 to exit\n");
        cin >> flag;
    }
    printf ("%s  %s", First, Second);
    system ("PAUSE");
    return 0;
}
----------------------------------------

int main (int argc, char *argv []) {
    int current_line;
    int from_line;
    char *text;
    int i;
    if (argc < 3) {
        printf ("%s\n", "Should provide at lest 2 arguments");
        return 1;
    }
    from_line = atoi (argv[2]);
    text = argv[1];
    current_line = 0;
    i = 0;
    while (text[i++] != '\0')
        ;
    while (i >= 0) {
        if (text[i] == '\n') {
            current_line++;
        }
        if (current_line == from_line) {
            break;
        }
        i--;
    }
    printf ("%s\n", text + i + 1);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47524557_47524624_4_17
47524557_47524628_4_21
Title: pointer to pointer assignment in c 
----------------------------------------

int main (int argc, char **argv) {
    char *new, *new2;
    new = malloc (10);
    new2 = new;
    const char *s1 = "hello";
    while (*s1) {
        printf ("%c\n", * s1);
        *new++ = *s1++;
    }
    *new = '\0';
    printf ("%s\n", new2);
    return 0;
}
----------------------------------------

int main (int argc, char **argv) {
    char *new, *tmp;
    new = malloc (10);
    if (new == NULL) {
        printf ("Failed to allocate memory");
        return -1;
    }
    const char *s1 = "hello";
    tmp = new;
    while (*s1) {
        *tmp++ = *s1++;
    }
    *tmp = '\0';
    printf ("%s", new);
    return 0;
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47526955_47526983_3_28
47526955_47527142_3_25
Title: Adding values based on the user's input in array basis 
----------------------------------------

int main () {
    int n;
    printf ("Enter no of element: ");
    if (scanf ("%d", &n) != 1) {
        fprintf (stderr, "%s", "Error in input");
        exit (1);
    }
    if (n <= 0) {
        fprintf (stderr, "Enter positive number of elements");
        exit (1);
    }
    int a [n];
    int sum = 0;
    for (size_t i = 0; i < n; i++) {
        if (scanf ("%d", &a[i]) != 1) {
            fprintf (stderr, "%s", "Error in input: give integers");
            exit (1);
        }
        sum += a[i];
    }
    printf ("The sum is %d", sum);
}
----------------------------------------

int main () {
    int a [100] = {0};
    int sum = 0;
    int n = 0;
    do {
        printf ("Enter your element: ");
        int number;
        scanf ("%d", & number);
        if (number == -1)
            break;
        a[n] = number;
        sum += a[n];
        n++;
    }
    while (1);
    printf ("The sum is %d", sum);
}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
0
47528381_47528434_3_15
47528381_47528525_8_23
Title: Check if input is a number 
----------------------------------------

int main () {
    int numbers [250000], i, m = 0;
    int itemsRead = 0;
    while (itemsRead = scanf ("%d", &i) != EOF) {
        if (itemsRead != 1) {
            printf ("Wrong input");
            return 0;
        }
        numbers[m] = i;
        m++;
    }
}
----------------------------------------

int main () {
    int numbers [250000], m = 0;
    char input [MAXINPUT] = "";
    while (scanf ("%s", input) != EOF) {
        for (size_t i = 0; i < strlen (input); i++)
            if (!isdigit (input[i])) {
                printf ("Entered input is not a number\n");
                exit (1);
            }
        numbers[m] = atoi (input);
        m++;
    }
    return 0;
}
----------------------------------------
